{"sha": "7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwODZiMTFkZjBjMDY1YzUzMWE2Y2YyYWE1MDU1MDRmZTllYzhlMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-16T05:47:07Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-16T05:47:07Z"}, "message": "c-opts.c (c_common_handle_option): s/on/value/.\n\n\t* c-opts.c (c_common_handle_option): s/on/value/.\n\t(OPT_fabi_version_, OPT_ftabstop_, OPT_ftemplate_depth_): Use value\n\tdirectly rather than converting the argument.\n\t* c.opt: Update docs.  Use UInteger where appropriate.\n\t* common.opt: Use UInteger where appropriate.\n\t* opts.c (integral_argument): New.\n\t(handle_argument): Handle integral arguments, and optional\n\tjoined arguments.\n\t(common_handle_option): Update.\n\t* opts.h (CL_MISSING_OK, CL_UINTEGER): New.\n\t* opts.sh: Handle JoinedOrMissing and UInteger flags.\njava:\n\t* lang.c (java_handle_option): Special-casing of optional\n\tjoined arguments no longer needed.\n\t* lang.opt: Update switches that take optional argument.\n\nFrom-SVN: r67999", "tree": {"sha": "67395c06dd702d1671de8501d39fbe92f55618bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67395c06dd702d1671de8501d39fbe92f55618bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89aa997ab8059f7f3663b8db9455e522fbd42d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89aa997ab8059f7f3663b8db9455e522fbd42d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89aa997ab8059f7f3663b8db9455e522fbd42d0b"}], "stats": {"total": 443, "additions": 234, "deletions": 209}, "files": [{"sha": "563c3291373b4c1ee73049caf73f9e57090ee5b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -1,3 +1,17 @@\n+2003-06-16  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (c_common_handle_option): s/on/value/.\n+\t(OPT_fabi_version_, OPT_ftabstop_, OPT_ftemplate_depth_): Use value\n+\tdirectly rather than converting the argument.\n+\t* c.opt: Update docs.  Use UInteger where appropriate.\n+\t* common.opt: Use UInteger where appropriate.\n+\t* opts.c (integral_argument): New.\n+\t(handle_argument): Handle integral arguments, and optional\n+\tjoined arguments.\n+\t(common_handle_option): Update.\n+\t* opts.h (CL_MISSING_OK, CL_UINTEGER): New.\n+\t* opts.sh: Handle JoinedOrMissing and UInteger flags.\n+\n 2003-06-16  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* config/rs6000/sysv4.h (ASM_OUTPUT_ALIGNED_LOCAL): Remove"}, {"sha": "9f0cde5e4d66776f3fc9efe15bc1b239e27d2186", "filename": "gcc/c-opts.c", "status": "modified", "additions": 138, "deletions": 142, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -244,7 +244,7 @@ c_common_init_options (lang)\n    invalid, a negative number to prevent language-independent\n    processing in toplev.c (a hack necessary for the short-term).  */\n int\n-c_common_handle_option (size_t scode, const char *arg, int on)\n+c_common_handle_option (size_t scode, const char *arg, int value)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n@@ -265,7 +265,7 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n   lang_mask = lang_flags[(c_language << 1) + flag_objc];\n   if (!(option->flags & lang_mask))\n     {\n-      complain_wrong_lang (code, on);\n+      complain_wrong_lang (code, value);\n       return 1;\n     }\n \n@@ -372,300 +372,300 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n       break;\n \n     case OPT_Wabi:\n-      warn_abi = on;\n+      warn_abi = value;\n       break;\n \n     case OPT_Wall:\n-      set_Wunused (on);\n-      set_Wformat (on);\n-      set_Wimplicit (on);\n-      warn_char_subscripts = on;\n-      warn_missing_braces = on;\n-      warn_parentheses = on;\n-      warn_return_type = on;\n-      warn_sequence_point = on;\t/* Was C only.  */\n+      set_Wunused (value);\n+      set_Wformat (value);\n+      set_Wimplicit (value);\n+      warn_char_subscripts = value;\n+      warn_missing_braces = value;\n+      warn_parentheses = value;\n+      warn_return_type = value;\n+      warn_sequence_point = value;\t/* Was C only.  */\n       if (c_language == clk_cplusplus)\n-\twarn_sign_compare = on;\n-      warn_switch = on;\n-      warn_strict_aliasing = on;\n+\twarn_sign_compare = value;\n+      warn_switch = value;\n+      warn_strict_aliasing = value;\n       \n       /* Only warn about unknown pragmas that are not in system\n \t headers.  */                                        \n-      warn_unknown_pragmas = on;\n+      warn_unknown_pragmas = value;\n \n       /* We save the value of warn_uninitialized, since if they put\n \t -Wuninitialized on the command line, we need to generate a\n \t warning about not using it without also specifying -O.  */\n       if (warn_uninitialized != 1)\n-\twarn_uninitialized = (on ? 2 : 0);\n+\twarn_uninitialized = (value ? 2 : 0);\n \n       if (c_language == clk_c)\n \t/* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n \t   can turn it off only if it's not explicit.  */\n-\twarn_main = on * 2;\n+\twarn_main = value * 2;\n       else\n \t{\n \t  /* C++-specific warnings.  */\n-\t  warn_nonvdtor = on;\n-\t  warn_reorder = on;\n-\t  warn_nontemplate_friend = on;\n+\t  warn_nonvdtor = value;\n+\t  warn_reorder = value;\n+\t  warn_nontemplate_friend = value;\n \t}\n \n-      cpp_opts->warn_trigraphs = on;\n-      cpp_opts->warn_comments = on;\n-      cpp_opts->warn_num_sign_change = on;\n-      cpp_opts->warn_multichar = on;\t/* Was C++ only.  */\n+      cpp_opts->warn_trigraphs = value;\n+      cpp_opts->warn_comments = value;\n+      cpp_opts->warn_num_sign_change = value;\n+      cpp_opts->warn_multichar = value;\t/* Was C++ only.  */\n       break;\n \n     case OPT_Wbad_function_cast:\n-      warn_bad_function_cast = on;\n+      warn_bad_function_cast = value;\n       break;\n \n     case OPT_Wcast_qual:\n-      warn_cast_qual = on;\n+      warn_cast_qual = value;\n       break;\n \n     case OPT_Wchar_subscripts:\n-      warn_char_subscripts = on;\n+      warn_char_subscripts = value;\n       break;\n \n     case OPT_Wcomment:\n     case OPT_Wcomments:\n-      cpp_opts->warn_comments = on;\n+      cpp_opts->warn_comments = value;\n       break;\n \n     case OPT_Wconversion:\n-      warn_conversion = on;\n+      warn_conversion = value;\n       break;\n \n     case OPT_Wctor_dtor_privacy:\n-      warn_ctor_dtor_privacy = on;\n+      warn_ctor_dtor_privacy = value;\n       break;\n \n     case OPT_Wdeprecated:\n-      warn_deprecated = on;\n-      cpp_opts->warn_deprecated = on;\n+      warn_deprecated = value;\n+      cpp_opts->warn_deprecated = value;\n       break;\n \n     case OPT_Wdiv_by_zero:\n-      warn_div_by_zero = on;\n+      warn_div_by_zero = value;\n       break;\n \n     case OPT_Weffc__:\n-      warn_ecpp = on;\n+      warn_ecpp = value;\n       break;\n \n     case OPT_Wendif_labels:\n-      cpp_opts->warn_endif_labels = on;\n+      cpp_opts->warn_endif_labels = value;\n       break;\n \n     case OPT_Werror:\n-      cpp_opts->warnings_are_errors = on;\n+      cpp_opts->warnings_are_errors = value;\n       break;\n \n     case OPT_Werror_implicit_function_declaration:\n       mesg_implicit_function_declaration = 2;\n       break;\n \n     case OPT_Wfloat_equal:\n-      warn_float_equal = on;\n+      warn_float_equal = value;\n       break;\n \n     case OPT_Wformat:\n-      set_Wformat (on);\n+      set_Wformat (value);\n       break;\n \n     case OPT_Wformat_:\n       set_Wformat (atoi (arg));\n       break;\n \n     case OPT_Wformat_extra_args:\n-      warn_format_extra_args = on;\n+      warn_format_extra_args = value;\n       break;\n \n     case OPT_Wformat_nonliteral:\n-      warn_format_nonliteral = on;\n+      warn_format_nonliteral = value;\n       break;\n \n     case OPT_Wformat_security:\n-      warn_format_security = on;\n+      warn_format_security = value;\n       break;\n \n     case OPT_Wformat_y2k:\n-      warn_format_y2k = on;\n+      warn_format_y2k = value;\n       break;\n \n     case OPT_Wformat_zero_length:\n-      warn_format_zero_length = on;\n+      warn_format_zero_length = value;\n       break;\n \n     case OPT_Wimplicit:\n-      set_Wimplicit (on);\n+      set_Wimplicit (value);\n       break;\n \n     case OPT_Wimplicit_function_declaration:\n-      mesg_implicit_function_declaration = on;\n+      mesg_implicit_function_declaration = value;\n       break;\n \n     case OPT_Wimplicit_int:\n-      warn_implicit_int = on;\n+      warn_implicit_int = value;\n       break;\n \n     case OPT_Wimport:\n-      cpp_opts->warn_import = on;\n+      cpp_opts->warn_import = value;\n       break;\n \n     case OPT_Winvalid_offsetof:\n-      warn_invalid_offsetof = on;\n+      warn_invalid_offsetof = value;\n       break;\n \n     case OPT_Winvalid_pch:\n-      cpp_opts->warn_invalid_pch = on;\n+      cpp_opts->warn_invalid_pch = value;\n       break;\n \n     case OPT_Wlong_long:\n-      warn_long_long = on;\n+      warn_long_long = value;\n       break;\n \n     case OPT_Wmain:\n-      if (on)\n+      if (value)\n \twarn_main = 1;\n       else\n \twarn_main = -1;\n       break;\n \n     case OPT_Wmissing_braces:\n-      warn_missing_braces = on;\n+      warn_missing_braces = value;\n       break;\n \n     case OPT_Wmissing_declarations:\n-      warn_missing_declarations = on;\n+      warn_missing_declarations = value;\n       break;\n \n     case OPT_Wmissing_format_attribute:\n-      warn_missing_format_attribute = on;\n+      warn_missing_format_attribute = value;\n       break;\n \n     case OPT_Wmissing_prototypes:\n-      warn_missing_prototypes = on;\n+      warn_missing_prototypes = value;\n       break;\n \n     case OPT_Wmultichar:\n-      cpp_opts->warn_multichar = on;\n+      cpp_opts->warn_multichar = value;\n       break;\n \n     case OPT_Wnested_externs:\n-      warn_nested_externs = on;\n+      warn_nested_externs = value;\n       break;\n \n     case OPT_Wnon_template_friend:\n-      warn_nontemplate_friend = on;\n+      warn_nontemplate_friend = value;\n       break;\n \n     case OPT_Wnon_virtual_dtor:\n-      warn_nonvdtor = on;\n+      warn_nonvdtor = value;\n       break;\n \n     case OPT_Wnonnull:\n-      warn_nonnull = on;\n+      warn_nonnull = value;\n       break;\n \n     case OPT_Wold_style_cast:\n-      warn_old_style_cast = on;\n+      warn_old_style_cast = value;\n       break;\n \n     case OPT_Woverloaded_virtual:\n-      warn_overloaded_virtual = on;\n+      warn_overloaded_virtual = value;\n       break;\n \n     case OPT_Wparentheses:\n-      warn_parentheses = on;\n+      warn_parentheses = value;\n       break;\n \n     case OPT_Wpmf_conversions:\n-      warn_pmf2ptr = on;\n+      warn_pmf2ptr = value;\n       break;\n \n     case OPT_Wpointer_arith:\n-      warn_pointer_arith = on;\n+      warn_pointer_arith = value;\n       break;\n \n     case OPT_Wprotocol:\n-      warn_protocol = on;\n+      warn_protocol = value;\n       break;\n \n     case OPT_Wselector:\n-      warn_selector = on;\n+      warn_selector = value;\n       break;\n \n     case OPT_Wredundant_decls:\n-      warn_redundant_decls = on;\n+      warn_redundant_decls = value;\n       break;\n \n     case OPT_Wreorder:\n-      warn_reorder = on;\n+      warn_reorder = value;\n       break;\n \n     case OPT_Wreturn_type:\n-      warn_return_type = on;\n+      warn_return_type = value;\n       break;\n \n     case OPT_Wsequence_point:\n-      warn_sequence_point = on;\n+      warn_sequence_point = value;\n       break;\n \n     case OPT_Wsign_compare:\n-      warn_sign_compare = on;\n+      warn_sign_compare = value;\n       break;\n \n     case OPT_Wsign_promo:\n-      warn_sign_promo = on;\n+      warn_sign_promo = value;\n       break;\n \n     case OPT_Wstrict_prototypes:\n-      warn_strict_prototypes = on;\n+      warn_strict_prototypes = value;\n       break;\n \n     case OPT_Wsynth:\n-      warn_synth = on;\n+      warn_synth = value;\n       break;\n \n     case OPT_Wsystem_headers:\n-      cpp_opts->warn_system_headers = on;\n+      cpp_opts->warn_system_headers = value;\n       break;\n \n     case OPT_Wtraditional:\n-      warn_traditional = on;\n-      cpp_opts->warn_traditional = on;\n+      warn_traditional = value;\n+      cpp_opts->warn_traditional = value;\n       break;\n \n     case OPT_Wtrigraphs:\n-      cpp_opts->warn_trigraphs = on;\n+      cpp_opts->warn_trigraphs = value;\n       break;\n \n     case OPT_Wundeclared_selector:\n-      warn_undeclared_selector = on;\n+      warn_undeclared_selector = value;\n       break;\n \n     case OPT_Wundef:\n-      cpp_opts->warn_undef = on;\n+      cpp_opts->warn_undef = value;\n       break;\n \n     case OPT_Wunknown_pragmas:\n       /* Set to greater than 1, so that even unknown pragmas in\n \t system headers will be warned about.  */  \n-      warn_unknown_pragmas = on * 2;\n+      warn_unknown_pragmas = value * 2;\n       break;\n \n     case OPT_Wunused_macros:\n-      warn_unused_macros = on;\n+      warn_unused_macros = value;\n       break;\n \n     case OPT_Wwrite_strings:\n       if (c_language == clk_c)\n-\tflag_const_strings = on;\n+\tflag_const_strings = value;\n       else\n-\twarn_write_strings = on;\n+\twarn_write_strings = value;\n       break;\n       \n     case OPT_ansi:\n@@ -682,7 +682,7 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n     case OPT_fcond_mismatch:\n       if (c_language == clk_c)\n \t{\n-\t  flag_cond_mismatch = on;\n+\t  flag_cond_mismatch = value;\n \t  break;\n \t}\n       /* Fall through.  */\n@@ -705,38 +705,38 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n       break;\n \n     case OPT_fabi_version_:\n-      flag_abi_version = read_integral_parameter (arg, option->opt_text, 1);\n+      flag_abi_version = value;\n       break;\n \n     case OPT_faccess_control:\n-      flag_access_control = on;\n+      flag_access_control = value;\n       break;\n \n     case OPT_falt_external_templates:\n-      flag_alt_external_templates = on;\n-      if (on)\n+      flag_alt_external_templates = value;\n+      if (value)\n \tflag_external_templates = true;\n     cp_deprecated:\n       warning (\"switch \\\"%s\\\" is deprecated, please see documentation for details\", option->opt_text);\n       break;\n \n     case OPT_fasm:\n-      flag_no_asm = !on;\n+      flag_no_asm = !value;\n       break;\n \n     case OPT_fbuiltin:\n-      flag_no_builtin = !on;\n+      flag_no_builtin = !value;\n       break;\n \n     case OPT_fbuiltin_:\n-      if (on)\n+      if (value)\n \tresult = 0;\n       else\n \tdisable_builtin_function (arg);\n       break;\n \n     case OPT_fdollars_in_identifiers:\n-      cpp_opts->dollars_in_ident = on;\n+      cpp_opts->dollars_in_ident = value;\n       break;\n \n     case OPT_fdump_:\n@@ -745,76 +745,76 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n       break;\n \n     case OPT_ffreestanding:\n-      on = !on;\n+      value = !value;\n       /* Fall through...  */\n     case OPT_fhosted:\n-      flag_hosted = on;\n-      flag_no_builtin = !on;\n+      flag_hosted = value;\n+      flag_no_builtin = !value;\n       /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */\n-      if (!on && warn_main == 2)\n+      if (!value && warn_main == 2)\n \twarn_main = 0;\n       break;\n \n     case OPT_fshort_double:\n-      flag_short_double = on;\n+      flag_short_double = value;\n       break;\n \n     case OPT_fshort_enums:\n-      flag_short_enums = on;\n+      flag_short_enums = value;\n       break;\n \n     case OPT_fshort_wchar:\n-      flag_short_wchar = on;\n+      flag_short_wchar = value;\n       break;\n \n     case OPT_fsigned_bitfields:\n-      flag_signed_bitfields = on;\n+      flag_signed_bitfields = value;\n       explicit_flag_signed_bitfields = 1;\n       break;\n \n     case OPT_fsigned_char:\n-      flag_signed_char = on;\n+      flag_signed_char = value;\n       break;\n \n     case OPT_funsigned_bitfields:\n-      flag_signed_bitfields = !on;\n+      flag_signed_bitfields = !value;\n       explicit_flag_signed_bitfields = 1;\n       break;\n \n     case OPT_funsigned_char:\n-      flag_signed_char = !on;\n+      flag_signed_char = !value;\n       break;\n \n     case OPT_fcheck_new:\n-      flag_check_new = on;\n+      flag_check_new = value;\n       break;\n \n     case OPT_fconserve_space:\n-      flag_conserve_space = on;\n+      flag_conserve_space = value;\n       break;\n \n     case OPT_fconst_strings:\n-      flag_const_strings = on;\n+      flag_const_strings = value;\n       break;\n \n     case OPT_fconstant_string_class_:\n       constant_string_class_name = arg;\n       break;\n \n     case OPT_fdefault_inline:\n-      flag_default_inline = on;\n+      flag_default_inline = value;\n       break;\n \n     case OPT_felide_constructors:\n-      flag_elide_constructors = on;\n+      flag_elide_constructors = value;\n       break;\n \n     case OPT_fenforce_eh_specs:\n-      flag_enforce_eh_specs = on;\n+      flag_enforce_eh_specs = value;\n       break;\n \n     case OPT_fexternal_templates:\n-      flag_external_templates = on;\n+      flag_external_templates = value;\n       goto cp_deprecated;\n \n     case OPT_ffixed_form:\n@@ -825,108 +825,104 @@ c_common_handle_option (size_t scode, const char *arg, int on)\n       break;\n \n     case OPT_ffor_scope:\n-      flag_new_for_scope = on;\n+      flag_new_for_scope = value;\n       break;\n \n     case OPT_fgnu_keywords:\n-      flag_no_gnu_keywords = !on;\n+      flag_no_gnu_keywords = !value;\n       break;\n \n     case OPT_fgnu_runtime:\n-      flag_next_runtime = !on;\n+      flag_next_runtime = !value;\n       break;\n \n     case OPT_fhandle_exceptions:\n       warning (\"-fhandle-exceptions has been renamed -fexceptions (and is now on by default)\");\n-      flag_exceptions = on;\n+      flag_exceptions = value;\n       break;\n \n     case OPT_fimplement_inlines:\n-      flag_implement_inlines = on;\n+      flag_implement_inlines = value;\n       break;\n \n     case OPT_fimplicit_inline_templates:\n-      flag_implicit_inline_templates = on;\n+      flag_implicit_inline_templates = value;\n       break;\n \n     case OPT_fimplicit_templates:\n-      flag_implicit_templates = on;\n+      flag_implicit_templates = value;\n       break;\n \n     case OPT_fms_extensions:\n-      flag_ms_extensions = on;\n+      flag_ms_extensions = value;\n       break;\n \n     case OPT_fnext_runtime:\n-      flag_next_runtime = on;\n+      flag_next_runtime = value;\n       break;\n \n     case OPT_fnonansi_builtins:\n-      flag_no_nonansi_builtin = !on;\n+      flag_no_nonansi_builtin = !value;\n       break;\n \n     case OPT_foperator_names:\n-      cpp_opts->operator_names = on;\n+      cpp_opts->operator_names = value;\n       break;\n \n     case OPT_foptional_diags:\n-      flag_optional_diags = on;\n+      flag_optional_diags = value;\n       break;\n \n     case OPT_fpch_deps:\n-      cpp_opts->restore_pch_deps = on;\n+      cpp_opts->restore_pch_deps = value;\n       break;\n \n     case OPT_fpermissive:\n-      flag_permissive = on;\n+      flag_permissive = value;\n       break;\n \n     case OPT_fpreprocessed:\n-      cpp_opts->preprocessed = on;\n+      cpp_opts->preprocessed = value;\n       break;\n \n     case OPT_frepo:\n-      flag_use_repository = on;\n-      if (on)\n+      flag_use_repository = value;\n+      if (value)\n \tflag_implicit_templates = 0;\n       break;\n \n     case OPT_frtti:\n-      flag_rtti = on;\n+      flag_rtti = value;\n       break;\n \n     case OPT_fshow_column:\n-      cpp_opts->show_column = on;\n+      cpp_opts->show_column = value;\n       break;\n \n     case OPT_fstats:\n-      flag_detailed_statistics = on;\n+      flag_detailed_statistics = value;\n       break;\n \n     case OPT_ftabstop_:\n       /* It is documented that we silently ignore silly values.  */\n-\t{\n-\t  char *endptr;\n-\t  long tabstop = strtol (arg, &endptr, 10);\n-\t  if (*endptr == '\\0' && tabstop >= 1 && tabstop <= 100)\n-\t    cpp_opts->tabstop = tabstop;\n-\t}\n+      if (value >= 1 && value <= 100)\n+\tcpp_opts->tabstop = value;\n       break;\n \n     case OPT_ftemplate_depth_:\n-      max_tinst_depth = read_integral_parameter (arg, option->opt_text, 0);\n+      max_tinst_depth = value;\n       break;\n \n     case OPT_fvtable_gc:\n-      flag_vtable_gc = on;\n+      flag_vtable_gc = value;\n       break;\n \n     case OPT_fuse_cxa_atexit:\n-      flag_use_cxa_atexit = on;\n+      flag_use_cxa_atexit = value;\n       break;\n \n     case OPT_fweak:\n-      flag_weak = on;\n+      flag_weak = value;\n       break;\n \n     case OPT_gen_decls:"}, {"sha": "15c344b887e8355c8228c88d5d84978f5604057e", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -32,7 +32,11 @@\n ; compiler recognize the switch, as declared by \"Language\" entries.\n ; If the switch takes an argument, then you should also specify\n ; \"Joined\" and/or \"Separate\" to indicate where the argument can\n-; appear.\n+; appear.  If a Joined argument can legitimately be omitted, specify\n+; \"JoinedOrMissing\" instead of \"Joined\".  If the argument to a switch\n+; is a non-negative integer, you can specify \"UInteger\" and the switch\n+; decoder will convert the argument for you, or complain to the user\n+; if the argument is invalid.\n \n ; Comments can appear on their own line anwhere in the file, preceded\n ; by a semicolon.  Whitespace is permitted before the semicolon.\n@@ -311,7 +315,7 @@ d\n C ObjC C++ ObjC++ Joined\n \n fabi-version=\n-C++ ObjC++ Joined\n+C++ ObjC++ Joined UInteger\n \n faccess-control\n C++ ObjC++\n@@ -479,10 +483,10 @@ fstrict-prototype\n C++ ObjC++\n \n ftabstop=\n-C ObjC C++ ObjC++ Joined RejectNegative\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger\n \n ftemplate-depth-\n-C++ ObjC++ Joined\n+C++ ObjC++ Joined RejectNegative UInteger \n \n fthis-is-variable\n C++ ObjC++"}, {"sha": "d34be3a263a56f955d912c843833a698d2eacb8a", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -18,26 +18,7 @@\n ; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n ; 02111-1307, USA.\n \n-\n-; This file is processed by the script opts.sh.  It is a database of\n-; command line options, with each record separated by a blank line,\n-; and each field appearing on its own line.  The first field is the\n-; command-line switch with the leading \"-\" removed.  All options\n-; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n-; form; this form should not be listed.  If you do not want this\n-; negative form and you want it to be automatically rejected, add\n-; RejectNegative to the second field.\n-\n-; The second field should contain \"Common\".  If the switch takes an\n-; argument, then you should also specify \"Joined\" and/or \"Separate\" to\n-; indicate where the argument can appear.\n-\n-; Comments can appear on their own line anwhere in the file, preceded\n-; by a semicolon.  Whitespace is permitted before the semicolon.\n-\n-; For each switch XXX below, an enumeration constant is created by the\n-; script opts.sh spelt OPT_XXX, but with all non-alphanumeric\n-; characters replaced with an underscore.\n+; See c.opt for a description of this file's format.\n \n ; Please try to keep this file in ASCII collating order.\n \n@@ -51,7 +32,7 @@ Common\n Common\n \n G\n-Common Joined Separate\n+Common Joined Separate UInteger\n \n aux-info\n Common Separate"}, {"sha": "634aca6961713c5bee44ea9802f92e8869dc0261", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -1,3 +1,9 @@\n+2003-06-16  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_handle_option): Special-casing of optional\n+\tjoined arguments no longer needed.\n+\t* lang.opt: Update switches that take optional argument.\n+\n 2003-06-15  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.opt: Declare Java."}, {"sha": "07d5647ed329d7d026814f25c0594646eeecb8df", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -274,17 +274,8 @@ java_handle_option (size_t scode, const char *arg, int value)\n \n   if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {\n-      /* These can take an empty argument.  */\n-      if (code == OPT_fassume_compiled_\n-\t  || code == OPT_fclasspath_\n-\t  || code == OPT_fCLASSPATH_\n-\t  || code == OPT_fbootclasspath_)\n-\targ = \"\";\n-      else\n-\t{\n-\t  error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n-\t  return 1;\n-\t}\n+      error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n+      return 1;\n     }\n \n   switch (code)"}, {"sha": "ed8d02ee1511d48fde410eca25288338ff8f5aab", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -65,7 +65,7 @@ Wredundant-modifiers\n Java\n \n fCLASSPATH=\n-Java Joined RejectNegative\n+Java JoinedOrMissing RejectNegative\n \n fassert\n Java\n@@ -74,16 +74,16 @@ fassume-compiled\n Java\n \n fassume-compiled=\n-Java Joined\n+Java JoinedOrMissing\n \n fbootclasspath=\n-Java Joined RejectNegative\n+Java JoinedOrMissing RejectNegative\n \n fcheck-references\n Java\n \n fclasspath=\n-Java Joined RejectNegative\n+Java JoinedOrMissing RejectNegative\n \n fcompile-resource=\n Java Joined RejectNegative"}, {"sha": "32620576f9aff789011c10802d75e2c0edabc845", "filename": "gcc/opts.c", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -130,14 +130,30 @@ find_opt (const char *input, int lang_mask)\n   return result;\n }\n \n+/* If ARG is a postive integer made up solely of digits, return its\n+   value, otherwise return -1.  */\n+static int\n+integral_argument (const char *arg)\n+{\n+  const char *p = arg;\n+\n+  while (*p && ISDIGIT (*p))\n+    p++;\n+\n+  if (*p == '\\0')\n+    return atoi (arg);\n+\n+  return -1;\n+}\n+\n /* Handle the switch beginning at ARGV, with ARGC remaining.  */\n int\n handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n {\n   size_t opt_index;\n   const char *opt, *arg = 0;\n   char *dup = 0;\n-  bool on = true;\n+  int value = 1;\n   int result = 0, temp;\n   const struct cl_option *option;\n \n@@ -149,7 +165,7 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n       opt_index = cl_options_count;\n       arg = opt;\n       main_input_filename = opt;\n-      result = (*lang_hooks.handle_option) (opt_index, arg, on);\n+      result = (*lang_hooks.handle_option) (opt_index, arg, value);\n     }\n   else\n     {\n@@ -164,7 +180,7 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \t  dup[1] = opt[1];\n \t  memcpy (dup + 2, opt + 5, len - 2 + 1);\n \t  opt = dup;\n-\t  on = false;\n+\t  value = 0;\n \t}\n \n       opt_index = find_opt (opt + 1, lang_mask | CL_COMMON);\n@@ -174,48 +190,62 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n       option = &cl_options[opt_index];\n \n       /* Reject negative form of switches that don't take negatives.  */\n-      if (!on && (option->flags & CL_REJECT_NEGATIVE))\n+      if (!value && (option->flags & CL_REJECT_NEGATIVE))\n \tgoto done;\n \n       /* We've recognized this switch.  */\n       result = 1;\n \n       /* Sort out any argument the switch takes.  */\n-      if (option->flags & (CL_JOINED | CL_SEPARATE))\n+      if (option->flags & CL_JOINED)\n \t{\n-\t  if (option->flags & CL_JOINED)\n+\t  /* Have arg point to the original switch.  This is because\n+\t     some code, such as disable_builtin_function, expects its\n+\t     argument to be persistent until the program exits.  */\n+\t  arg = argv[0] + cl_options[opt_index].opt_len + 1;\n+\t  if (!value)\n+\t    arg += strlen (\"no-\");\n+\n+\t  if (*arg == '\\0' && !(option->flags & CL_MISSING_OK))\n \t    {\n-\t      /* Have arg point to the original switch.  This is because\n-\t\t some code, such as disable_builtin_function, expects its\n-\t\t argument to be persistent until the program exits.  */\n-\t      arg = argv[0] + cl_options[opt_index].opt_len + 1;\n-\t      if (!on)\n-\t\targ += strlen (\"no-\");\n+\t      if (option->flags & CL_SEPARATE)\n+\t\t{\n+\t\t  arg = argv[1];\n+\t\t  result = 2;\n+\t\t}\n+\t      else\n+\t\t/* Missing argument.  */\n+\t\targ = NULL;\n \t    }\n+\t}\n+      else if (option->flags & CL_SEPARATE)\n+\t{\n+\t  arg = argv[1];\n+\t  result = 2;\n+\t}\n \n-\t  /* If we don't have an argument, and CL_SEPARATE, try the next\n-\t     argument in the vector.  */\n-\t  if (!arg || (*arg == '\\0' && option->flags & CL_SEPARATE))\n+      /* If the switch takes an integer, convert it.  */\n+      if (arg && (option->flags & CL_UINTEGER))\n+\t{\n+\t  value = integral_argument (arg);\n+\t  if (value == -1)\n \t    {\n-\t      arg = argv[1];\n-\t      result = 2;\n+\t      error (\"argument to \\\"-%s\\\" should be a non-negative integer\",\n+\t\t     option->opt_text);\n+\t      goto done;\n \t    }\n-\n-\t  /* Canonicalize missing arguments as NULL for the handler.  */\n-\t  if (*arg == '\\0')\n-\t    arg = NULL;\n \t}\n \n       if (option->flags & lang_mask)\n \t{\n-\t  temp = (*lang_hooks.handle_option) (opt_index, arg, on);\n+\t  temp = (*lang_hooks.handle_option) (opt_index, arg, value);\n \t  if (temp <= 0)\n \t    result = temp;\n \t}\n \n       if (result > 0 && (option->flags & CL_COMMON))\n \t{\n-\t  if (common_handle_option (opt_index, arg, on) == 0)\n+\t  if (common_handle_option (opt_index, arg, value) == 0)\n \t    result = 0;\n \t}\n     }\n@@ -262,9 +292,7 @@ common_handle_option (size_t scode, const char *arg,\n       break;\n \n     case OPT_G:\n-      g_switch_value = read_integral_parameter (arg, 0, -1);\n-      if (g_switch_value == (unsigned HOST_WIDE_INT) -1)\n-\treturn 0;\n+      g_switch_value = value;\n       g_switch_set = true;\n       break;\n "}, {"sha": "abb3963e45cea996bbfd5d331994496c029f107a", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -36,6 +36,8 @@ extern const unsigned int cl_options_count;\n #define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n #define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */\n #define CL_REJECT_NEGATIVE\t(1 << 26) /* Reject no- form.  */\n-#define CL_COMMON\t\t(1 << 27) /* Language-independent.  */\n+#define CL_MISSING_OK\t\t(1 << 27) /* Missing argument OK (joined).  */\n+#define CL_UINTEGER\t\t(1 << 28) /* Argument is an integer >=0.  */\n+#define CL_COMMON\t\t(1 << 29) /* Language-independent.  */\n \n #endif"}, {"sha": "bbca27265c725eae95a3f46c66b5be10dc23628f", "filename": "gcc/opts.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b086b11df0c065c531a6cf2aa505504fe9ec8e2/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=7b086b11df0c065c531a6cf2aa505504fe9ec8e2", "patch": "@@ -55,8 +55,11 @@ ${AWK} '\n \t}\n         if (flags ~ \" Common \") result = result \" | CL_COMMON\"\n         if (flags ~ \" Joined \") result = result \" | CL_JOINED\"\n+        if (flags ~ \" JoinedOrMissing \") \\\n+\t\tresult = result \" | CL_JOINED | CL_MISSING_OK\"\n         if (flags ~ \" Separate \") result = result \" | CL_SEPARATE\"\n         if (flags ~ \" RejectNegative \") result = result \" | CL_REJECT_NEGATIVE\"\n+        if (flags ~ \" UInteger \") result = result \" | CL_UINTEGER\"\n \tsub( \"^0 \\\\| \", \"\", result )\n \treturn result\n     }"}]}