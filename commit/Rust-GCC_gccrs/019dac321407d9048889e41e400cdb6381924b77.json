{"sha": "019dac321407d9048889e41e400cdb6381924b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5ZGFjMzIxNDA3ZDkwNDg4ODllNDFlNDAwY2RiNjM4MTkyNGI3Nw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-02-16T18:51:25Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-02-16T18:51:25Z"}, "message": "Subject.java (doAsPrivileged): If acc is null, create a new AccessControlContext.\n\n2005-02-08  Andrew Haley  <aph@redhat.com>\n\n        * javax/security/auth/Subject.java (doAsPrivileged): If acc is\n        null, create a new AccessControlContext.\n        * java/security/SecureClassLoader.java (protectionDomainCache):\n        new field.\n        (defineClass): Create a new protection domain and add it to our\n        cache.\n\n        * java/rmi/server/UnicastRemoteObject.java (exportObject): Call\n        addStub() to keep track of the stub we've exported.\n        (unexportObject): Call deleteStub().\n        * java/rmi/server/RemoteObject.java (stubs): New field.\n        (addStub): New method.\n        (deleteStub): New method.\n        (toStub): Rewrite.\n\n        * java/lang/VMCompiler.java (loadSharedLibrary): Pass\n        true to findHelper (tryParents).\n        * gnu/gcj/runtime/SharedLibLoader.java (SharedLibLoader):\n        Likewise.\n        * java/net/URLClassLoader.java (SoURLLoader): Likewise.\n        * gnu/gcj/runtime/SharedLibHelper.java (SharedLibHelper): Pass\n        ProtectionDomain.\n        If tryParents is false, don't scan parent class loaders.\n\n        * java/security/Permissions.java (PermissionsHash.implies):\n        Iterate over the collection and invoke implies() on each\n        element.\n\nFrom-SVN: r95111", "tree": {"sha": "72b158fdd213cd3c9d1c1c7c1c11b22e22998ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b158fdd213cd3c9d1c1c7c1c11b22e22998ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019dac321407d9048889e41e400cdb6381924b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019dac321407d9048889e41e400cdb6381924b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019dac321407d9048889e41e400cdb6381924b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019dac321407d9048889e41e400cdb6381924b77/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2638db6537096c72a93d820748b2b9d3bba88ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2638db6537096c72a93d820748b2b9d3bba88ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2638db6537096c72a93d820748b2b9d3bba88ab"}], "stats": {"total": 145, "additions": 115, "deletions": 30}, "files": [{"sha": "fdfd3c2e94d45ae3bebb7fac3b20f46b0891aa35", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -1,5 +1,38 @@\n 2005-02-16  Andrew Haley  <aph@redhat.com>\n \n+\n+2005-02-08  Andrew Haley  <aph@redhat.com>\n+\n+\t* javax/security/auth/Subject.java (doAsPrivileged): If acc is\n+\tnull, create a new AccessControlContext.\n+\t* java/security/SecureClassLoader.java (protectionDomainCache):\n+\tnew field.\n+\t(defineClass): Create a new protection domain and add it to our\n+\tcache.\n+\n+\t* java/rmi/server/UnicastRemoteObject.java (exportObject): Call\n+\taddStub() to keep track of the stub we've exported.\n+\t(unexportObject): Call deleteStub().\n+\t* java/rmi/server/RemoteObject.java (stubs): New field.\n+\t(addStub): New method.\n+\t(deleteStub): New method.\n+\t(toStub): Rewrite.\n+\t\n+\t* java/lang/VMCompiler.java (loadSharedLibrary): Pass\n+\ttrue to findHelper (tryParents).\n+\t* gnu/gcj/runtime/SharedLibLoader.java (SharedLibLoader):\n+\tLikewise.\n+\t* java/net/URLClassLoader.java (SoURLLoader): Likewise.\n+\t* gnu/gcj/runtime/SharedLibHelper.java (SharedLibHelper): Pass\n+\tProtectionDomain.  \n+\tIf tryParents is false, don't scan parent class loaders.\n+\n+\t* java/security/Permissions.java (PermissionsHash.implies):\n+\tIterate over the collection and invoke implies() on each\n+\telement.\n+\n+2005-02-16  Andrew Haley  <aph@redhat.com>\n+\n \t* gnu/gcj/runtime/PersistentByteMap.java (name, values, fc): new\n \tfields.\n \t(PersistentByteMap): Set name"}, {"sha": "912c58e397ec124c8d8bc548ca0085d077122ba8", "filename": "libjava/gnu/gcj/runtime/SharedLibHelper.java", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -28,13 +28,15 @@\n    * @parem flags passed to dlopen\n    */\n   SharedLibHelper(String libname, ClassLoader parent, CodeSource source,\n-\t\t  int flags)\n+\t\t  ProtectionDomain domain, int flags)\n   {\n     // FIXME: ask security manager first.\n     loader = parent;\n     baseName = libname;\n-    domain = new ProtectionDomain(source,\n-\t\t\t\t  Policy.getPolicy().getPermissions(source));\n+    if (domain == null)\n+      domain = new ProtectionDomain(source,\n+\t\t\t\t    Policy.getPolicy().getPermissions(source));\n+    this.domain = domain;\n     this.flags = flags;\n   }\n \n@@ -65,7 +67,14 @@ static void copyFile (File in, File out) throws IOException\n   }\n \n   public static SharedLibHelper findHelper (ClassLoader loader, String libname,\n-\t\t\t\t\t    CodeSource source)\n+\t\t\t\t\t    CodeSource source, boolean tryParents)\n+  {\n+    return findHelper (loader, libname, source, null, tryParents);\n+  }\n+\n+  public static SharedLibHelper findHelper (ClassLoader loader, String libname,\n+\t\t\t\t\t    CodeSource source, ProtectionDomain domain, \n+\t\t\t\t\t    boolean tryParents)\n   {\n     synchronized (map)\n       {\n@@ -95,7 +104,7 @@ public static SharedLibHelper findHelper (ClassLoader loader, String libname,\n \t\t\t      return result;\n \t\t\t    l = l.getParent();\n \t\t\t  }\n-\t\t\twhile (l != null);\n+\t\t\twhile (tryParents && l != null);\n \t\t      }\n \t\t  }\n \t      }\n@@ -116,7 +125,7 @@ public static SharedLibHelper findHelper (ClassLoader loader, String libname,\n \t\treturn null;\n \t      }\n \t  }\n-\tresult = new SharedLibHelper(libname, loader, source, 0);\n+\tresult = new SharedLibHelper(libname, loader, source, domain, 0);\n \ts.add(new WeakReference(result));\n \treturn result;\n       }"}, {"sha": "b8e6a57de536f94fccf9ed7c56fbedf4f6ffe44d", "filename": "libjava/gnu/gcj/runtime/SharedLibLoader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -39,7 +39,7 @@ public SharedLibLoader(String libname, ClassLoader parent, int flags)\n \turl = null;\n       }\n     helper = SharedLibHelper.findHelper(this, libname,\n-\t\t\t\t\tnew CodeSource(url, null));\n+\t\t\t\t\tnew CodeSource(url, null), true);\n   }\n \n   /** Load a shared library, and asociate a ClassLoader with it."}, {"sha": "b3f55603487ab609ae3272559713085af8de966b", "filename": "libjava/java/lang/VMCompiler.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Flang%2FVMCompiler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Flang%2FVMCompiler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMCompiler.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -142,7 +142,8 @@ private static Class loadSharedLibrary(ClassLoader loader,\n   {\n     Class c = null;\n     SharedLibHelper helper \n-      = SharedLibHelper.findHelper (loader, fileName, domain.getCodeSource());\n+\t= SharedLibHelper.findHelper (loader, fileName, domain.getCodeSource(), \n+\t\t\t\t      domain, false);\n     c = helper.findClass (className);\n     if (c != null)\n       {"}, {"sha": "57ea968d7808dec343d52f915c11e68ea82fc435", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -543,7 +543,7 @@ final static class SoURLLoader extends URLLoader\n     {\n       super(classloader, url, overrideURL);\n       helper = SharedLibHelper.findHelper(classloader, url.getFile(),\n-\t\t\t\t\t  noCertCodeSource);\n+\t\t\t\t\t  noCertCodeSource, true);\n     }\n \n     Class getClass(String className)"}, {"sha": "374fee85797304ffd234e902b3b4385c775c5e61", "filename": "libjava/java/rmi/server/RemoteObject.java", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -45,6 +45,7 @@\n import java.rmi.NoSuchObjectException;\n import java.rmi.Remote;\n import java.rmi.UnmarshalException;\n+import java.util.WeakHashMap;\n \n public abstract class RemoteObject\n \timplements Remote, Serializable {\n@@ -53,6 +54,8 @@\n \n protected transient RemoteRef ref;\n \n+private static final WeakHashMap stubs = new WeakHashMap();\n+\n protected RemoteObject() {\n \tthis(null);\n }\n@@ -65,21 +68,24 @@ public RemoteRef getRef() {\n \treturn (ref);\n }\n \n+synchronized static void addStub(Remote obj, Remote stub)\n+{\n+  stubs.put(obj, stub);\n+}\n+\n+synchronized static void deleteStub(Remote obj)\n+{\n+  stubs.remove(obj);\n+}\n+\n   public static Remote toStub(Remote obj) throws NoSuchObjectException \n   {\n-    Class cls = obj.getClass();\n-    String classname = cls.getName();\n-    ClassLoader cl = cls.getClassLoader();\n-    try \n-      {\n-\tClass scls = cl.loadClass(classname + \"_Stub\");\n-\t// JDK 1.2 stubs\n-\tClass[] stubprototype = new Class[] { RemoteRef.class };\n-\tConstructor con = scls.getConstructor(stubprototype);\n-\treturn (Remote)(con.newInstance(new Object[]{obj}));\n-      }\n-    catch (Exception e) {}\n-    throw new NoSuchObjectException(obj.getClass().getName());\n+    Remote stub = (Remote)stubs.get(obj);\n+\n+    if (stub == null)\n+      throw new NoSuchObjectException(obj.getClass().getName());\n+\n+    return stub;\n   }\n \n public int hashCode() {"}, {"sha": "ed296f03341b3dd5f412c37e16249f5bfd402751", "filename": "libjava/java/rmi/server/UnicastRemoteObject.java", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FUnicastRemoteObject.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -98,7 +98,9 @@ static Remote exportObject(Remote obj, int port, RMIServerSocketFactory ssf)\n       {\n \tsref = new UnicastServerRef(new ObjID (), port, ssf);\n       }\n-    return (sref.exportObject (obj)); \n+    Remote stub = sref.exportObject (obj); \n+    addStub(obj, stub);\n+    return stub;\n   }\n \n   /**\n@@ -116,12 +118,15 @@ public static boolean unexportObject(Remote obj, boolean force)\n   {\n     if (obj instanceof RemoteObject)\n       {\n+\tdeleteStub(obj);\n \tUnicastServerRef sref = (UnicastServerRef)((RemoteObject)obj).getRef();\n \treturn sref.unexportObject(obj, force);\n       }\n     else\n-      //FIX ME\n-      ;\n+      {\n+\t//FIX ME\n+\t;\n+      }\n     return true;\n   }\n "}, {"sha": "ce63cc2cca2d1488f9198ba2e15c4b2330904f8a", "filename": "libjava/java/security/Permissions.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fsecurity%2FPermissions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fsecurity%2FPermissions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissions.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -228,9 +228,18 @@ public void add(Permission perm)\n    * @param perm the permission to check\n    * @return true if it is implied\n    */\n+  // FIXME: Should this method be synchronized?\n   public boolean implies(Permission perm)\n   {\n-    return perms.get(perm) != null;\n+    Enumeration elements = elements();\n+\n+    while (elements.hasMoreElements())\n+      {\n+\tPermission p = (Permission)elements.nextElement();\n+\tif (p.implies(perm))\n+\t  return true;\n+      }\n+    return false;\n   }\n \n   /**"}, {"sha": "89b5e4effcee915c6d9d3dfee068b81c229e6c77", "filename": "libjava/java/security/SecureClassLoader.java", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -48,6 +48,8 @@\n  */\n public class SecureClassLoader extends ClassLoader\n {\n+  java.util.WeakHashMap protectionDomainCache = new java.util.WeakHashMap();\n+\n   protected SecureClassLoader(ClassLoader parent)\n   {\n     super(parent);\n@@ -80,11 +82,29 @@ protected SecureClassLoader()\n   protected final Class defineClass(String name, byte[] b, int off, int len,\n \t\t\t\t    CodeSource cs)\n   {\n-    // FIXME: Need to cache ProtectionDomains according to 1.3 docs.\n     if (cs != null)\n       {\n-\tProtectionDomain protectionDomain\n-          = new ProtectionDomain(cs, getPermissions(cs), this, null);\n+\tProtectionDomain protectionDomain;\n+\t  \n+\tsynchronized (protectionDomainCache)\n+\t  {\n+\t    protectionDomain = (ProtectionDomain)protectionDomainCache.get(cs);\n+\t  }\n+\n+\tif (protectionDomain == null)\n+\t  {\n+\t    protectionDomain \n+\t      = new ProtectionDomain(cs, getPermissions(cs), this, null);\n+\t    synchronized (protectionDomainCache)\n+\t      {\n+\t\tProtectionDomain domain \n+\t\t  = (ProtectionDomain)protectionDomainCache.get(cs);\n+\t\tif (domain == null)\n+\t\t  protectionDomainCache.put(cs, protectionDomain);\n+\t\telse\n+\t\t  protectionDomain = domain;\n+\t      }\n+\t  }\n \treturn super.defineClass(name, b, off, len, protectionDomain);\n       } \n     else"}, {"sha": "37baecc8aedd3faa0b84de00910bd9426bc936a8", "filename": "libjava/javax/security/auth/Subject.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dac321407d9048889e41e400cdb6381924b77/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsecurity%2Fauth%2FSubject.java?ref=019dac321407d9048889e41e400cdb6381924b77", "patch": "@@ -235,14 +235,16 @@ public static Object doAsPrivileged (final Subject subject,\n    */\n   public static Object doAsPrivileged (final Subject subject,\n                                        final PrivilegedExceptionAction action,\n-                                       final AccessControlContext acc)\n+\t\t\t\t       AccessControlContext acc)\n     throws PrivilegedActionException\n   {\n     final SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       {\n         sm.checkPermission (new AuthPermission (\"doAsPrivileged\"));\n       }\n+    if (acc == null)\n+      acc = new AccessControlContext (new java.security.ProtectionDomain[0]);\n     AccessControlContext context =\n       new AccessControlContext (acc, new SubjectDomainCombiner (subject));\n     return AccessController.doPrivileged (action, context);"}]}