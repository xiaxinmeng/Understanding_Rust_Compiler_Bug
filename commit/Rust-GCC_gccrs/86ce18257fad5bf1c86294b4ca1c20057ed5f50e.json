{"sha": "86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjZTE4MjU3ZmFkNWJmMWM4NjI5NGI0Y2ExYzIwMDU3ZWQ1ZjUwZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-06-01T01:37:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-06-01T01:37:17Z"}, "message": "i386.c (ix86_expand_fp_absneg_operator): When SSE isn't available...\n\n\n\t* config/i386/i386.c (ix86_expand_fp_absneg_operator): When SSE\n\tisn't available, directly generate the simpler x87 patterns without\n\tthe (use (const_int 0)).\n\t* config/i386/i386.md (*negsf2_1): Enable pre-reload if the SSE\n\timplementation isn't available.\n\t(*negdf2_1): Likewise.\n\t(*negxf2_1): XF mode negation is always done using the x87.\n\t(*abssf2_1, *absdf2_1, *absxf2_1): Likewise^3 for fabs.\n\n\t* gcc.target/i386/387-11.c: New test case.\n\nFrom-SVN: r114293", "tree": {"sha": "94aa901d056ca54c1dccfd0dab60624d4477478d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94aa901d056ca54c1dccfd0dab60624d4477478d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/comments", "author": null, "committer": null, "parents": [{"sha": "222ae291bb5a101641a0ee4a06d6ed0b32a71a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222ae291bb5a101641a0ee4a06d6ed0b32a71a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222ae291bb5a101641a0ee4a06d6ed0b32a71a75"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "0ecbe423d55d96f6b428d732d0c71a3e207d62f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "patch": "@@ -1,3 +1,14 @@\n+2006-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (ix86_expand_fp_absneg_operator): When SSE\n+\tisn't available, directly generate the simpler x87 patterns without\n+\tthe (use (const_int 0)).\n+\t* config/i386/i386.md (*negsf2_1): Enable pre-reload if the SSE\n+\timplementation isn't available.\n+\t(*negdf2_1): Likewise.\n+\t(*negxf2_1): XF mode negation is always done using the x87.\n+\t(*abssf2_1, *absdf2_1, *absxf2_1): Likewise^3 for fabs.\n+\n 2006-05-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_builtin_cabs): Delete prototype.  Require an"}, {"sha": "145fc2e523e1b0ed21175621e762026955c6aa74", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "patch": "@@ -9288,22 +9288,17 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n   if (use_sse)\n     mask = ix86_build_signbit_mask (elt_mode, vector_mode, code == ABS);\n   else\n-    {\n-      /* When not using SSE, we don't use the mask, but prefer to keep the\n-\t same general form of the insn pattern to reduce duplication when\n-\t it comes time to split.  */\n-      mask = const0_rtx;\n-    }\n+    mask = NULL_RTX;\n \n   dst = operands[0];\n   src = operands[1];\n \n   /* If the destination is memory, and we don't have matching source\n-     operands, do things in registers.  */\n+     operands or we're using the x87, do things in registers.  */\n   matching_memory = false;\n   if (MEM_P (dst))\n     {\n-      if (rtx_equal_p (dst, src))\n+      if (use_sse && rtx_equal_p (dst, src))\n \tmatching_memory = true;\n       else\n \tdst = gen_reg_rtx (mode);\n@@ -9321,9 +9316,15 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, enum machine_mode mode,\n     {\n       set = gen_rtx_fmt_e (code, mode, src);\n       set = gen_rtx_SET (VOIDmode, dst, set);\n-      use = gen_rtx_USE (VOIDmode, mask);\n-      clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n-      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (3, set, use, clob)));\n+      if (mask)\n+        {\n+          use = gen_rtx_USE (VOIDmode, mask);\n+          clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n+          emit_insn (gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t       gen_rtvec (3, set, use, clob)));\n+        }\n+      else\n+\temit_insn (set);\n     }\n \n   if (dst != operands[0])"}, {"sha": "8380561b58d18f172202ffc8512fb1731ac2172a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "patch": "@@ -9905,47 +9905,47 @@\n (define_insn \"*negsf2_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*negdf2_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*abssf2_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*absdf2_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && (reload_completed || !TARGET_SSE_MATH)\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])"}, {"sha": "c1f6dec91d1e74f8760d0bc978245878aca28d1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "patch": "@@ -1,3 +1,7 @@\n+2006-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.target/i386/387-11.c: New test case.\n+\n 2006-05-31  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27801"}, {"sha": "cb55a9337c32311112adec196cb9678be9af19de", "filename": "gcc/testsuite/gcc.target/i386/387-11.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ce18257fad5bf1c86294b4ca1c20057ed5f50e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-11.c?ref=86ce18257fad5bf1c86294b4ca1c20057ed5f50e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -mfpmath=387\" } */\n+\n+double foo(double x, double y)\n+{\n+  double t = -x * y;\n+  return -t;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fchs\" } } */"}]}