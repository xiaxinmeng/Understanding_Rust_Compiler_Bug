{"sha": "9e14e18fd124e651f079728315e40a16288863b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxNGUxOGZkMTI0ZTY1MWYwNzk3MjgzMTVlNDBhMTYyODg4NjNiNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-16T18:21:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-16T18:21:20Z"}, "message": "c-common.def (GOTO_STMT, LABEL_STMT): Remove.\n\n        * c-common.def (GOTO_STMT, LABEL_STMT): Remove.\n        * c-common.c (c_add_case_label): Use LABEL_EXPR.\n        * c-common.h (GOTO_FAKE_P, LABEL_STMT_LABEL): Remove.\n        (c_common_stmt_codes): Remove GOTO_STMT, LABEL_STMT.\n        * c-dump.c (c_dump_tree): Likewise.\n        * c-gimplify.c (c_gimplify_stmt): Likewise.\n        * c-pretty-print.c (pp_c_statement): Likewise.\n        * c-parse.in (stmt): Use GOTO_EXPR.\n        (label): Use LABEL_EXPR.\n        * c-semantics.c (build_stmt): Set TREE_TYPE to void.\n        * tree-inline.c (copy_body_r): Don't build empty BLOCKs.\ncp/\n        * decl.c (finish_destructor_body): Use LABEL_EXPR.\n        * parser.c (cp_parser_statement): Update commentary.\n        * pt.c (tsubst_expr): Use LABEL_EXPR, GOTO_EXPR.\n        * semantics.c (finish_goto_stmt, finish_label_stmt): Likewise.\n        * tree.c (mark_local_for_remap_r): Likewise.\n\nFrom-SVN: r83255", "tree": {"sha": "e52131b3bd23ac10dfbc97741cf058791e88679f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52131b3bd23ac10dfbc97741cf058791e88679f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e14e18fd124e651f079728315e40a16288863b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e14e18fd124e651f079728315e40a16288863b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e14e18fd124e651f079728315e40a16288863b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e14e18fd124e651f079728315e40a16288863b6/comments", "author": null, "committer": null, "parents": [{"sha": "2f52c5316a90890e8185408429aca0dd331f9728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f52c5316a90890e8185408429aca0dd331f9728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f52c5316a90890e8185408429aca0dd331f9728"}], "stats": {"total": 131, "additions": 53, "deletions": 78}, "files": [{"sha": "2e04fb230956d0f4b1905ff7bbbd52b923736d01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -1,3 +1,17 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.def (GOTO_STMT, LABEL_STMT): Remove.\n+\t* c-common.c (c_add_case_label): Use LABEL_EXPR.\n+\t* c-common.h (GOTO_FAKE_P, LABEL_STMT_LABEL): Remove.\n+\t(c_common_stmt_codes): Remove GOTO_STMT, LABEL_STMT.\n+\t* c-dump.c (c_dump_tree): Likewise.\n+\t* c-gimplify.c (c_gimplify_stmt): Likewise.\n+\t* c-pretty-print.c (pp_c_statement): Likewise.\n+\t* c-parse.in (stmt): Use GOTO_EXPR.\n+\t(label): Use LABEL_EXPR.\n+\t* c-semantics.c (build_stmt): Set TREE_TYPE to void.\n+\t* tree-inline.c (copy_body_r): Don't build empty BLOCKs.\n+\n 2004-06-16  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* cfgcleanup.c (try_simplify_condjump): Update test to make"}, {"sha": "3de00cff8697c1c7295cc376e7ecbbe51349a138", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -3900,13 +3900,13 @@ c_add_case_label (splay_tree cases, tree cond, tree low_value,\n   return case_label;\n \n  error_out:\n-  /* Add a label so that the back-end doesn't think that the beginning o\n+  /* Add a label so that the back-end doesn't think that the beginning of\n      the switch is unreachable.  Note that we do not add a case label, as\n      that just leads to duplicates and thence to aborts later on.  */\n   if (!cases->root)\n     {\n       tree t = create_artificial_label ();\n-      add_stmt (build_stmt (LABEL_STMT, t));\n+      add_stmt (build_stmt (LABEL_EXPR, t));\n     }\n   return error_mark_node;\n }"}, {"sha": "434af64fb9b0eaadcb3f864200113a795e8fdf4a", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -71,13 +71,6 @@ DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", 'e', 0)\n    SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", 'e', 3)\n \n-/* Used to represent a 'goto' statement. The operand is GOTO_DESTINATION.  */\n-DEFTREECODE (GOTO_STMT, \"goto_stmt\", 'e', 1)\n-\n-/* Used to represent a 'label' statement. The operand is a LABEL_DECL\n-   and can be obtained through the macro LABEL_STMT_LABEL.  */\n-DEFTREECODE (LABEL_STMT, \"label_stmt\", 'e', 1)\n-\n /* Used to represent an inline assembly statement.  */\n DEFTREECODE (ASM_STMT, \"asm_stmt\", 'e', 4)\n "}, {"sha": "aa2b06fad1b9f12f1d36b619c5c815a88a5aede0", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -961,9 +961,6 @@ extern void finish_file\t(void);\n #define SWITCH_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n #define CASE_LABEL_DECL(NODE)   TREE_OPERAND (CASE_LABEL_CHECK (NODE), 2)\n \n-/* True for goto created artificially by the compiler.  */\n-#define GOTO_FAKE_P(NODE)\t(TREE_LANG_FLAG_0 (GOTO_STMT_CHECK (NODE)))\n-\n /* COMPOUND_STMT accessor. This gives access to the TREE_LIST of\n    statements associated with a compound statement. The result is the\n    first statement in the list. Succeeding nodes can be accessed by\n@@ -981,10 +978,6 @@ extern void finish_file\t(void);\n #define STMT_EXPR_NO_SCOPE(NODE) \\\n    TREE_LANG_FLAG_0 (STMT_EXPR_CHECK (NODE))\n \n-/* LABEL_STMT accessor. This gives access to the label associated with\n-   the given label statement.  */\n-#define LABEL_STMT_LABEL(NODE)  TREE_OPERAND (LABEL_STMT_CHECK (NODE), 0)\n-\n /* COMPOUND_LITERAL_EXPR accessors.  */\n #define COMPOUND_LITERAL_EXPR_DECL_STMT(NODE)\t\t\\\n   TREE_OPERAND (COMPOUND_LITERAL_EXPR_CHECK (NODE), 0)\n@@ -1016,8 +1009,7 @@ enum c_tree_code {\n    DECL_STMT,\t\tIF_STMT,\tFOR_STMT,\t\\\n    WHILE_STMT,\t\tDO_STMT,\tRETURN_STMT,\t\\\n    BREAK_STMT,\t\tCONTINUE_STMT,\t\t\t\\\n-   SWITCH_STMT,\t\tGOTO_STMT,\tLABEL_STMT,\t\\\n-   ASM_STMT,\t\tCASE_LABEL\n+   SWITCH_STMT,\t\tASM_STMT,\tCASE_LABEL\n \n /* TRUE if a code represents a statement.  The front end init\n    langhook should take care of initialization of this array.  */"}, {"sha": "b0790efa2090e8a27b987e56207a035914506d95", "filename": "gcc/c-dump.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -129,12 +129,6 @@ c_dump_tree (void *dump_info, tree t)\n       dump_next_stmt (di, t);\n       break;\n \n-    case GOTO_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"dest\", GOTO_DESTINATION (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case IF_STMT:\n       dump_stmt (di, t);\n       dump_child (\"cond\", IF_COND (t));\n@@ -143,12 +137,6 @@ c_dump_tree (void *dump_info, tree t)\n       dump_next_stmt (di, t);\n       break;\n \n-    case LABEL_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"labl\", LABEL_STMT_LABEL (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case RETURN_STMT:\n       dump_stmt (di, t);\n       dump_child (\"expr\", RETURN_STMT_EXPR (t));"}, {"sha": "e0b262d03e8f6ac3a3e7d605a3c915a70e30ef1a", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -264,16 +264,6 @@ c_gimplify_stmt (tree *stmt_p)\n       ret = gimplify_decl_stmt (&stmt);\n       break;\n \n-    case LABEL_STMT:\n-      stmt = build1 (LABEL_EXPR, void_type_node, LABEL_STMT_LABEL (stmt));\n-      ret = GS_OK;\n-      break;\n-\n-    case GOTO_STMT:\n-      stmt = build1 (GOTO_EXPR, void_type_node, GOTO_DESTINATION (stmt));\n-      ret = GS_OK;\n-      break;\n-\n     case CASE_LABEL:\n       {\n \ttree label = create_artificial_label ();"}, {"sha": "147dbc009f409d2b2790625a5f83cbfcb4020a63", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -2292,7 +2292,7 @@ stmt:\n \t\t  if (decl != 0)\n \t\t    {\n \t\t      TREE_USED (decl) = 1;\n-\t\t      $$ = add_stmt (build_stmt (GOTO_STMT, decl));\n+\t\t      $$ = add_stmt (build_stmt (GOTO_EXPR, decl));\n \t\t    }\n \t\t  else\n \t\t    $$ = NULL_TREE;\n@@ -2302,7 +2302,7 @@ stmt:\n \t\t    pedwarn (\"ISO C forbids `goto *expr;'\");\n \t\t  stmt_count++;\n \t\t  $3 = convert (ptr_type_node, $3);\n-\t\t  $$ = add_stmt (build_stmt (GOTO_STMT, $3)); }\n+\t\t  $$ = add_stmt (build_stmt (GOTO_EXPR, $3)); }\n \t| ';'\n \t\t{ $$ = NULL_TREE; }\n @@ifobjc\n@@ -2379,7 +2379,7 @@ label:\t  CASE expr_no_commas ':'\n \t\t  if (label)\n \t\t    {\n \t\t      decl_attributes (&label, $4, 0);\n-\t\t      $$ = add_stmt (build_stmt (LABEL_STMT, label));\n+\t\t      $$ = add_stmt (build_stmt (LABEL_EXPR, label));\n \t\t    }\n \t\t  else\n \t\t    $$ = NULL_TREE;"}, {"sha": "c1d9d60ee72ad69c3e7d5e34aaec17193a7b650f", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -1913,28 +1913,22 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n              identifier : statement\n              case constant-expression : statement\n              default : statement   */\n-    case LABEL_STMT:\n     case CASE_LABEL:\n       if (pp_needs_newline (pp))\n         pp_newline_and_indent (pp, -3);\n       else\n         pp_indentation (pp) -= 3;\n-      if (code == LABEL_STMT)\n-\tpp_c_tree_decl_identifier (pp, LABEL_STMT_LABEL (stmt));\n-      else if (code == CASE_LABEL)\n+      if (CASE_LOW (stmt) == NULL_TREE)\n+\tpp_identifier (pp, \"default\");\n+      else\n \t{\n-\t  if (CASE_LOW (stmt) == NULL_TREE)\n-\t    pp_identifier (pp, \"default\");\n-\t  else\n+\t  pp_c_identifier (pp, \"case\");\n+\t  pp_c_whitespace (pp);\n+\t  pp_conditional_expression (pp, CASE_LOW (stmt));\n+\t  if (CASE_HIGH (stmt))\n \t    {\n-\t      pp_c_identifier (pp, \"case\");\n-\t      pp_c_whitespace (pp);\n-\t      pp_conditional_expression (pp, CASE_LOW (stmt));\n-\t      if (CASE_HIGH (stmt))\n-\t\t{\n-\t\t  pp_identifier (pp, \"...\");\n-\t\t  pp_conditional_expression (pp, CASE_HIGH (stmt));\n-\t\t}\n+\t      pp_identifier (pp, \"...\");\n+\t      pp_conditional_expression (pp, CASE_HIGH (stmt));\n \t    }\n \t}\n       pp_colon (pp);\n@@ -2098,14 +2092,11 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n       break;\n \n     case RETURN_STMT:\n-    case GOTO_STMT:\n       {\n-\ttree e = code == RETURN_STMT\n-\t  ? RETURN_STMT_EXPR (stmt)\n-\t  : GOTO_DESTINATION (stmt);\n+\ttree e = RETURN_STMT_EXPR (stmt);\n         if (pp_needs_newline (pp))\n           pp_newline_and_indent (pp, 0);\n-\tpp_c_identifier (pp, code == RETURN_STMT ? \"return\" : \"goto\");\n+\tpp_c_identifier (pp, \"return\");\n         pp_c_whitespace (pp);\n \tif (e)\n           {"}, {"sha": "8a67c67a33de1ceb9fc12106525cd743867400b5", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -188,6 +188,7 @@ build_stmt (enum tree_code code, ...)\n   va_start (p, code);\n \n   ret = make_node (code);\n+  TREE_TYPE (ret) = void_type_node;\n   length = TREE_CODE_LENGTH (code);\n   annotate_with_locus (ret, input_location);\n "}, {"sha": "3238043bab8b48e3e7e387fbd8552c136f3c4f29", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -1,3 +1,11 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (finish_destructor_body): Use LABEL_EXPR.\n+\t* parser.c (cp_parser_statement): Update commentary.\n+\t* pt.c (tsubst_expr): Use LABEL_EXPR, GOTO_EXPR.\n+\t* semantics.c (finish_goto_stmt, finish_label_stmt): Likewise.\n+\t* tree.c (mark_local_for_remap_r): Likewise.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/16012"}, {"sha": "4a402d43895b66b7704e09e849cd4bd0ec31fbd2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -10569,7 +10569,7 @@ finish_destructor_body (void)\n \n   /* Any return from a destructor will end up here; that way all base\n      and member cleanups will be run when the function returns.  */\n-  add_stmt (build_stmt (LABEL_STMT, dtor_label));\n+  add_stmt (build_stmt (LABEL_EXPR, dtor_label));\n \n   /* In a virtual destructor, we must call delete.  */\n   if (DECL_VIRTUAL_P (current_function_decl))"}, {"sha": "4d4561cebc2ee3a31657399d0c009a1e636ba3c9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -5721,7 +5721,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr)\n      case constant-expression ... constant-expression : statement\n \n    Returns the new CASE_LABEL, for a `case' or `default' label.  For\n-   an ordinary label, returns a LABEL_STMT.  */\n+   an ordinary label, returns a LABEL_EXPR.  */\n \n static tree\n cp_parser_labeled_statement (cp_parser* parser, tree in_statement_expr)\n@@ -6241,8 +6241,7 @@ cp_parser_for_init_statement (cp_parser* parser)\n    jump-statement:\n      goto * expression ;\n \n-   Returns the new BREAK_STMT, CONTINUE_STMT, RETURN_STMT, or\n-   GOTO_STMT.  */\n+   Returns the new BREAK_STMT, CONTINUE_STMT, RETURN_STMT, or GOTO_EXPR.  */\n \n static tree\n cp_parser_jump_statement (cp_parser* parser)"}, {"sha": "0bbec66fa5fff3d92d08836f89956d1fcf6c1b72", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -7979,12 +7979,12 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t\t      in_decl));\n       break;\n \n-    case LABEL_STMT:\n+    case LABEL_EXPR:\n       prep_stmt (t);\n-      finish_label_stmt (DECL_NAME (LABEL_STMT_LABEL (t)));\n+      finish_label_stmt (DECL_NAME (LABEL_EXPR_LABEL (t)));\n       break;\n \n-    case GOTO_STMT:\n+    case GOTO_EXPR:\n       prep_stmt (t);\n       tmp = GOTO_DESTINATION (t);\n       if (TREE_CODE (tmp) != LABEL_DECL)"}, {"sha": "1b4f46770163093e16420b5d415018ef9668c911", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -435,7 +435,7 @@ finish_goto_stmt (tree destination)\n   \n   check_goto (destination);\n \n-  return add_stmt (build_stmt (GOTO_STMT, destination));\n+  return add_stmt (build_stmt (GOTO_EXPR, destination));\n }\n \n /* COND is the condition-expression for an if, while, etc.,\n@@ -1086,7 +1086,7 @@ tree\n finish_label_stmt (tree name)\n {\n   tree decl = define_label (input_location, name);\n-  return add_stmt (build_stmt (LABEL_STMT, decl));\n+  return add_stmt (build_stmt (LABEL_EXPR, decl));\n }\n \n /* Finish a series of declarations for local labels.  G++ allows users"}, {"sha": "86c585b2e44f403719d93ff1ce1acd587c3e1291", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -2216,8 +2216,8 @@ mark_local_for_remap_r (tree* tp,\n   if (TREE_CODE (t) == DECL_STMT\n       && nonstatic_local_decl_p (DECL_STMT_DECL (t)))\n     decl = DECL_STMT_DECL (t);\n-  else if (TREE_CODE (t) == LABEL_STMT)\n-    decl = LABEL_STMT_LABEL (t);\n+  else if (TREE_CODE (t) == LABEL_EXPR)\n+    decl = LABEL_EXPR_LABEL (t);\n   else if (TREE_CODE (t) == TARGET_EXPR\n \t   && nonstatic_local_decl_p (TREE_OPERAND (t, 0)))\n     decl = TREE_OPERAND (t, 0);"}, {"sha": "0ed3621e86961355c92a0c2da15ceee6667c354c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e14e18fd124e651f079728315e40a16288863b6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9e14e18fd124e651f079728315e40a16288863b6", "patch": "@@ -467,8 +467,8 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n       abort ();\n #endif\n \n-  /* If this is a RETURN_STMT, change it into an EXPR_STMT and a\n-     GOTO_STMT with the RET_LABEL as its target.  */\n+  /* If this is a RETURN_EXPR, change it into a MODIFY_EXPR and a\n+     GOTO_EXPR with the RET_LABEL as its target.  */\n   if (TREE_CODE (*tp) == RETURN_EXPR && id->ret_label)\n     {\n       tree return_stmt = *tp;\n@@ -489,8 +489,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t    if (TREE_CODE (assignment) == RESULT_DECL)\n \t      gimplify_stmt (&assignment);\n \n-\t  *tp = build (BIND_EXPR, void_type_node, NULL_TREE, NULL_TREE,\n-\t\t       make_node (BLOCK));\n+\t  *tp = build (BIND_EXPR, void_type_node, NULL, NULL, NULL);\n \t  append_to_statement_list (assignment, &BIND_EXPR_BODY (*tp));\n \t  append_to_statement_list (goto_stmt, &BIND_EXPR_BODY (*tp));\n         }"}]}