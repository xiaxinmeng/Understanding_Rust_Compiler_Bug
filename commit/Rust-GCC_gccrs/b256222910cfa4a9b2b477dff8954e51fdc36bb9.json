{"sha": "b256222910cfa4a9b2b477dff8954e51fdc36bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1NjIyMjkxMGNmYTRhOWIyYjQ3N2RmZjg5NTRlNTFmZGMzNmJiOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-08T17:14:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-14T15:22:55Z"}, "message": "c++: Stray RESULT_DECLs in result of constexpr call [PR94034]\n\nWhen evaluating the initializer of 'a' in the following example\n\n  struct A {\n    A() = default; A(const A&);\n    A *p = this;\n  };\n  constexpr A foo() { return {}; }\n  constexpr A a = foo();\n\nthe PLACEHOLDER_EXPR for 'this' in the aggregate initializer returned by foo\ngets resolved to the RESULT_DECL of foo.  But due to guaranteed RVO, the 'this'\nshould really be resolved to '&a'.\n\nFixing this properly by immediately resolving 'this' and PLACEHOLDER_EXPRs to\nthe ultimate object under construction would in general mean that we would no\nlonger be able to cache constexpr calls for which RVO possibly applies, because\nthe result of the call may now depend on the ultimate object under construction.\n\nSo as a mostly correct stopgap solution that retains cachability of RVO'd\nconstexpr calls, this patch fixes this issue by rewriting all occurrences of the\nRESULT_DECL in the result of a constexpr function call with the current object\nunder construction, after the call returns.  This means the 'this' pointer\nduring construction of the temporary will still point to the temporary object\ninstead of the ultimate object, but besides that this approach seems\nfunctionally equivalent to the proper approach.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94034\n\t* constexpr.c (replace_result_decl_data): New struct.\n\t(replace_result_decl_data_r): New function.\n\t(replace_result_decl): New function.\n\t(cxx_eval_call_expression): Use it.\n\t* tree.c (build_aggr_init_expr): Set the location of the AGGR_INIT_EXPR\n\tto that of its initializer.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94034\n\t* g++.dg/cpp0x/constexpr-empty15.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi6a.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi6b.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi7a.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi7b.C: New test.", "tree": {"sha": "1a439f9108bffde62f90953d12898987d0fb8b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a439f9108bffde62f90953d12898987d0fb8b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b256222910cfa4a9b2b477dff8954e51fdc36bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b256222910cfa4a9b2b477dff8954e51fdc36bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b256222910cfa4a9b2b477dff8954e51fdc36bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b256222910cfa4a9b2b477dff8954e51fdc36bb9/comments", "author": null, "committer": null, "parents": [{"sha": "66b8801141f5c1a65613b8f42501e8cd4b9195d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b8801141f5c1a65613b8f42501e8cd4b9195d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b8801141f5c1a65613b8f42501e8cd4b9195d9"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "ce390931c2eae11ad08aa8e531a9deb4dc6b1e0f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -1,3 +1,13 @@\n+2020-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94034\n+\t* constexpr.c (replace_result_decl_data): New struct.\n+\t(replace_result_decl_data_r): New function.\n+\t(replace_result_decl): New function.\n+\t(cxx_eval_call_expression): Use it.\n+\t* tree.c (build_aggr_init_expr): Set the location of the AGGR_INIT_EXPR\n+\tto that of its initializer.\n+\n 2020-04-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94588"}, {"sha": "c8e7d083f40462dda6ed632b9eccb8516f2793f6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -2029,6 +2029,52 @@ cxx_eval_dynamic_cast_fn (const constexpr_ctx *ctx, tree call,\n   return cp_build_addr_expr (obj, complain);\n }\n \n+/* Data structure used by replace_result_decl and replace_result_decl_r.  */\n+\n+struct replace_result_decl_data\n+{\n+  /* The RESULT_DECL we want to replace.  */\n+  tree decl;\n+  /* The replacement for DECL.  */\n+  tree replacement;\n+  /* Whether we've performed any replacements.  */\n+  bool changed;\n+};\n+\n+/* Helper function for replace_result_decl, called through cp_walk_tree.  */\n+\n+static tree\n+replace_result_decl_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  replace_result_decl_data *d = (replace_result_decl_data *) data;\n+\n+  if (*tp == d->decl)\n+    {\n+      *tp = unshare_expr (d->replacement);\n+      d->changed = true;\n+      *walk_subtrees = 0;\n+    }\n+  else if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Replace every occurrence of DECL, a RESULT_DECL, with (an unshared copy of)\n+   REPLACEMENT within the reduced constant expression *TP.  Returns true iff a\n+   replacement was performed.  */\n+\n+static bool\n+replace_result_decl (tree *tp, tree decl, tree replacement)\n+{\n+  gcc_checking_assert (TREE_CODE (decl) == RESULT_DECL\n+\t\t       && (same_type_ignoring_top_level_qualifiers_p\n+\t\t\t   (TREE_TYPE (decl), TREE_TYPE (replacement))));\n+  replace_result_decl_data data = { decl, replacement, false };\n+  cp_walk_tree_without_duplicates (tp, replace_result_decl_r, &data);\n+  return data.changed;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -2536,6 +2582,14 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t      break;\n \t\t    }\n \t    }\n+\n+\t    /* Rewrite all occurrences of the function's RESULT_DECL with the\n+\t       current object under construction.  */\n+\t    if (!*non_constant_p && ctx->object\n+\t\t&& AGGREGATE_TYPE_P (TREE_TYPE (res))\n+\t\t&& !is_empty_class (TREE_TYPE (res)))\n+\t      if (replace_result_decl (&result, res, ctx->object))\n+\t\tcacheable = false;\n \t}\n       else\n \t/* Couldn't get a function copy to evaluate.  */"}, {"sha": "8e4934c00093ec5f5627b52049394cbbca17d81f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -669,6 +669,9 @@ build_aggr_init_expr (tree type, tree init)\n   else\n     rval = init;\n \n+  if (location_t loc = EXPR_LOCATION (init))\n+    SET_EXPR_LOCATION (rval, loc);\n+\n   return rval;\n }\n "}, {"sha": "3fec84eb261e972bca13fc42e898fc7c85531118", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -1,3 +1,12 @@\n+2020-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94034\n+\t* g++.dg/cpp0x/constexpr-empty15.C: New test.\n+\t* g++.dg/cpp1y/constexpr-nsdmi6a.C: New test.\n+\t* g++.dg/cpp1y/constexpr-nsdmi6b.C: New test.\n+\t* g++.dg/cpp1y/constexpr-nsdmi7a.C: New test.\n+\t* g++.dg/cpp1y/constexpr-nsdmi7b.C: New test.\n+\n 2020-04-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94573"}, {"sha": "97863d4e1a78d54d4c8cdc16ab5040570e873dd5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-empty15.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty15.C?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct empty1 { };\n+constexpr empty1 foo1() { return {}; }\n+\n+struct empty2 { };\n+constexpr empty2 foo2(empty1) { return {}; }\n+\n+constexpr empty2 a = foo2(foo1());"}, {"sha": "bb844b952e28d976bdc4c6b0cf6e5b68c8bc59c2", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi6a.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6a.C?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/94034\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  A *ap = this;\n+};\n+\n+constexpr A foo()\n+{\n+  return {};\n+}\n+\n+constexpr A bar()\n+{\n+  return foo();\n+}\n+\n+void\n+baz()\n+{\n+  constexpr A a = foo(); // { dg-error \".A..& a... is not a constant expression\" }\n+  constexpr A b = bar(); // { dg-error \".A..& b... is not a constant expression\" }\n+}\n+\n+constexpr A a = foo();\n+constexpr A b = bar();"}, {"sha": "f847fe9809f163201c50daffe4cfc2e22fedc3a8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi6b.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi6b.C?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/94034\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  A() = default; A(const A&);\n+  A *ap = this;\n+};\n+\n+constexpr A foo()\n+{\n+  return {};\n+}\n+\n+constexpr A bar()\n+{\n+  return foo();\n+}\n+\n+void\n+baz()\n+{\n+  constexpr A a = foo(); // { dg-error \".A..& a... is not a constant expression\" }\n+  constexpr A b = bar(); // { dg-error \".A..& b... is not a constant expression\" }\n+}\n+\n+constexpr A a = foo();\n+constexpr A b = bar();"}, {"sha": "5a40cd0b845e2e44cb8a00899da3f0182f081b7d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi7a.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7a.C?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/94034\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  A *p = this;\n+  int n = 2;\n+  int m = p->n++;\n+};\n+\n+constexpr A\n+foo()\n+{\n+  return {};\n+}\n+\n+constexpr A\n+bar()\n+{\n+  A a = foo();\n+  a.p->n = 5;\n+  return a;\n+}\n+\n+static_assert(bar().n == 5, \"\");\n+\n+constexpr int\n+baz()\n+{\n+  A b = foo();\n+  b.p->n = 10;\n+  A c = foo();\n+  if (c.p->n != 3 || c.p->m != 2)\n+    __builtin_abort();\n+  bar();\n+  return 0;\n+}\n+\n+static_assert(baz() == 0, \"\");\n+\n+constexpr int\n+quux()\n+{\n+  const A d = foo();\n+  d.p->n++; // { dg-error \"const object\" }\n+  return 0;\n+}\n+\n+static_assert(quux() == 0, \"\"); // { dg-error \"non-constant\" }"}, {"sha": "86d8ab4e759c789d35c7b2b9b0090f8022c430ab", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi7b.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b256222910cfa4a9b2b477dff8954e51fdc36bb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi7b.C?ref=b256222910cfa4a9b2b477dff8954e51fdc36bb9", "patch": "@@ -0,0 +1,48 @@\n+// PR c++/94034\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  A() = default; A(const A&);\n+  A *p = this;\n+  int n = 2;\n+  int m = p->n++;\n+};\n+\n+constexpr A\n+foo()\n+{\n+  return {};\n+}\n+\n+constexpr A\n+bar()\n+{\n+  A a = foo();\n+  a.p->n = 5;\n+  return a; // { dg-error \"non-.constexpr.\" }\n+}\n+\n+constexpr int\n+baz()\n+{\n+  A b = foo();\n+  b.p->n = 10;\n+  A c = foo();\n+  if (c.p->n != 3 || c.p->m != 2)\n+    __builtin_abort();\n+  foo();\n+  return 0;\n+}\n+\n+static_assert(baz() == 0, \"\");\n+\n+constexpr int\n+quux()\n+{\n+  const A d = foo();\n+  d.p->n++; // { dg-error \"const object\" }\n+  return 0;\n+}\n+\n+static_assert(quux() == 0, \"\"); // { dg-error \"non-constant\" }"}]}