{"sha": "f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlMThkZDljN2RhY2M5NjcxMDQ0ZmM2NjliZDVjMWIyNmI2YmRiYQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2020-11-03T02:51:47Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-11-03T02:55:48Z"}, "message": "pass: Run cleanup passes before SLP [PR96789]\n\nAs the discussion in PR96789, we found that some scalar stmts\nwhich can be eliminated by some passes after SLP, but we still\nmodeled their costs when trying to SLP, it could impact\nvectorizer's decision.  One typical case is the case in PR96789\non target Power.\n\nAs Richard suggested there, this patch is to introduce one pass\ncalled pre_slp_scalar_cleanup which has some secondary clean up\npasses, for now they are FRE and DSE.  It introduces one new\nTODO flags group called pending TODO flags, unlike normal TODO\nflags, the pending TODO flags are passed down in the pipeline\nuntil one of its consumers can perform the requested action.\nConsumers should then clear the flags for the actions that they\nhave taken.\n\nSoem compilation time statistics on all SPEC2017 INT bmks were\ncollected on one Power9 machine for several option sets below:\n  A1: -Ofast -funroll-loops\n  A2: -O1\n  A3: -O1 -funroll-loops\n  A4: -O2\n  A5: -O2 -funroll-loops\n\nthe corresponding increment rate is trivial:\n  A1       A2       A3        A4        A5\n  0.08%    0.00%    -0.38%    -0.10%    -0.05%\n\nBootstrapped/regtested on powerpc64le-linux-gnu P8.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/96789\n\t* function.h (struct function): New member unsigned pending_TODOs.\n\t* passes.c (class pass_pre_slp_scalar_cleanup): New class.\n\t(make_pass_pre_slp_scalar_cleanup): New function.\n\t(pass_data_pre_slp_scalar_cleanup): New pass data.\n\t* passes.def: (pass_pre_slp_scalar_cleanup): New pass, add\n\tpass_fre and pass_dse as its children.\n\t* timevar.def (TV_SCALAR_CLEANUP): New timevar.\n\t* tree-pass.h (PENDING_TODO_force_next_scalar_cleanup): New\n\tpending TODO flag.\n\t(make_pass_pre_slp_scalar_cleanup): New declare.\n\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1):\n\tOnce any outermost loop gets unrolled, flag cfun pending_TODOs\n\tPENDING_TODO_force_next_scalar_cleanup on.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/96789\n\t* gcc.dg/tree-ssa/ssa-dse-28.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dse-29.c: Likewise.\n\t* gcc.dg/vect/bb-slp-41.c: Likewise.\n\t* gcc.dg/tree-ssa/pr96789.c: New test.", "tree": {"sha": "cb8840d85a0cdd84f2b5648a7ab20dfc1efb02a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8840d85a0cdd84f2b5648a7ab20dfc1efb02a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6ecbe48ada79bb14cbb30ef8318495b5237790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6ecbe48ada79bb14cbb30ef8318495b5237790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6ecbe48ada79bb14cbb30ef8318495b5237790"}], "stats": {"total": 142, "additions": 136, "deletions": 6}, "files": [{"sha": "dbe8a585eee17d7fb349812d9625af6d377924f1", "filename": "gcc/function.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -269,6 +269,13 @@ struct GTY(()) function {\n   /* Value histograms attached to particular statements.  */\n   htab_t GTY((skip)) value_histograms;\n \n+  /* Different from normal TODO_flags which are handled right at the\n+     beginning or the end of one pass execution, the pending_TODOs\n+     are passed down in the pipeline until one of its consumers can\n+     perform the requested action.  Consumers should then clear the\n+     flags for the actions that they have taken.  */\n+  unsigned int pending_TODOs;\n+\n   /* For function.c.  */\n \n   /* Points to the FUNCTION_DECL of this function.  */"}, {"sha": "f71f63918f4046b976f05f2a3ec0cc9eb8041a7d", "filename": "gcc/passes.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -731,7 +731,54 @@ make_pass_late_compilation (gcc::context *ctxt)\n   return new pass_late_compilation (ctxt);\n }\n \n+/* Pre-SLP scalar cleanup, it has several cleanup passes like FRE, DSE.  */\n \n+namespace {\n+\n+const pass_data pass_data_pre_slp_scalar_cleanup =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"*pre_slp_scalar_cleanup\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_SCALAR_CLEANUP, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_pre_slp_scalar_cleanup : public gimple_opt_pass\n+{\n+public:\n+  pass_pre_slp_scalar_cleanup (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_pre_slp_scalar_cleanup, ctxt)\n+  {\n+  }\n+\n+  virtual bool\n+  gate (function *fun)\n+  {\n+    return flag_tree_slp_vectorize\n+\t   && (fun->pending_TODOs & PENDING_TODO_force_next_scalar_cleanup);\n+  }\n+\n+  virtual unsigned int\n+  execute (function *fun)\n+  {\n+    fun->pending_TODOs &= ~PENDING_TODO_force_next_scalar_cleanup;\n+    return 0;\n+  }\n+\n+}; // class pass_pre_slp_scalar_cleanup\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_pre_slp_scalar_cleanup (gcc::context *ctxt)\n+{\n+  return new pass_pre_slp_scalar_cleanup (ctxt);\n+}\n \n /* Set the static pass number of pass PASS to ID and record that\n    in the mapping from static pass number to pass.  */"}, {"sha": "c68231287b672acc26798eab5d72619119522ff9", "filename": "gcc/passes.def", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -289,11 +289,16 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* pass_vectorize must immediately follow pass_if_conversion.\n \t     Please do not add any other passes in between.  */\n \t  NEXT_PASS (pass_vectorize);\n-          PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n \t      NEXT_PASS (pass_dce);\n-          POP_INSERT_PASSES ()\n-          NEXT_PASS (pass_predcom);\n+\t  POP_INSERT_PASSES ()\n+\t  NEXT_PASS (pass_predcom);\n \t  NEXT_PASS (pass_complete_unroll);\n+\t  NEXT_PASS (pass_pre_slp_scalar_cleanup);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_pre_slp_scalar_cleanup)\n+\t      NEXT_PASS (pass_fre, false /* may_iterate */);\n+\t      NEXT_PASS (pass_dse);\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_slp_vectorize);\n \t  NEXT_PASS (pass_loop_prefetch);\n \t  /* Run IVOPTs after the last pass that uses data-reference analysis"}, {"sha": "d6139a014d8274cba4d244eecf576fe13b36b490", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96789.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funroll-loops -ftree-vectorize -fdump-tree-dse-details\" } */\n+\n+/* Test if scalar cleanup pass takes effects, mainly check\n+   its secondary pass DSE can remove dead stores on array\n+   tmp.  */\n+\n+#include \"stdint.h\"\n+\n+static inline void\n+foo (int16_t *diff, int i_size, uint8_t *val1, int i_val1, uint8_t *val2,\n+     int i_val2)\n+{\n+  for (int y = 0; y < i_size; y++)\n+    {\n+      for (int x = 0; x < i_size; x++)\n+\tdiff[x + y * i_size] = val1[x] - val2[x];\n+      val1 += i_val1;\n+      val2 += i_val2;\n+    }\n+}\n+\n+void\n+bar (int16_t res[16], uint8_t *val1, uint8_t *val2)\n+{\n+  int16_t d[16];\n+  int16_t tmp[16];\n+\n+  foo (d, 4, val1, 16, val2, 32);\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      int s03 = d[i * 4 + 0] + d[i * 4 + 3];\n+      int s12 = d[i * 4 + 1] + d[i * 4 + 2];\n+      int d03 = d[i * 4 + 0] - d[i * 4 + 3];\n+      int d12 = d[i * 4 + 1] - d[i * 4 + 2];\n+\n+      tmp[0 * 4 + i] = s03 + s12;\n+      tmp[1 * 4 + i] = 2 * d03 + d12;\n+      tmp[2 * 4 + i] = s03 - s12;\n+      tmp[3 * 4 + i] = d03 - 2 * d12;\n+    }\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      int s03 = tmp[i * 4 + 0] + tmp[i * 4 + 3];\n+      int s12 = tmp[i * 4 + 1] + tmp[i * 4 + 2];\n+      int d03 = tmp[i * 4 + 0] - tmp[i * 4 + 3];\n+      int d12 = tmp[i * 4 + 1] - tmp[i * 4 + 2];\n+\n+      res[i * 4 + 0] = s03 + s12;\n+      res[i * 4 + 1] = 2 * d03 + d12;\n+      res[i * 4 + 2] = s03 - s12;\n+      res[i * 4 + 3] = d03 - 2 * d12;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump {Deleted dead store:.*tmp} \"dse3\" } } */"}, {"sha": "b81cabe604a57f58e7c3460d65e3ee2c722cd413", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-28.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -17,5 +17,5 @@ int foo (int *p, int b)\n \n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse1\"} } */\n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse2\"} } */\n-/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse3\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse4\"} } */\n "}, {"sha": "f4ef89c590cd42ef2869584226f9e69f18fd94aa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-29.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -22,5 +22,5 @@ foo(int cond, struct z *s)\n \n /* { dg-final { scan-tree-dump-times \"Deleted dead store\" 3 \"dse1\"} } */\n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse2\"} } */\n-/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse3\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse4\"} } */\n "}, {"sha": "72245115f305de8ef26c9c481f160a05db8c3dcb", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-41.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -10,7 +10,10 @@ foo (int *a, int *b)\n     a[i] = b[0] + b[1] + b[i+1] + b[i+2];\n }\n \n-void bar (int *a, int *b)\n+/* Disable pre-slp FRE to avoid unexpected SLP on the epilogue\n+   of the 1st loop.  */\n+void __attribute__((optimize(\"-fno-tree-fre\")))\n+bar (int *a, int *b)\n {\n   int i;\n   for (i = 0; i < (ARR_SIZE - 2); ++i)"}, {"sha": "a30317997007189fc97dc4ce722d2e22a997c1d0", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -194,6 +194,7 @@ DEFTIMEVAR (TV_TREE_LOOP_UNSWITCH    , \"tree loop unswitching\")\n DEFTIMEVAR (TV_LOOP_SPLIT            , \"loop splitting\")\n DEFTIMEVAR (TV_LOOP_JAM              , \"unroll and jam\")\n DEFTIMEVAR (TV_COMPLETE_UNROLL       , \"complete unrolling\")\n+DEFTIMEVAR (TV_SCALAR_CLEANUP        , \"scalar cleanup\")\n DEFTIMEVAR (TV_TREE_PARALLELIZE_LOOPS, \"tree parallelize loops\")\n DEFTIMEVAR (TV_TREE_VECTORIZATION    , \"tree vectorization\")\n DEFTIMEVAR (TV_TREE_SLP_VECTORIZATION, \"tree slp vectorization\")"}, {"sha": "9cb22acc24398a6fa04b03b812c333c225635b36", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -310,6 +310,11 @@ class simple_ipa_opt_pass : public opt_pass\n \n #define TODO_verify_all TODO_verify_il\n \n+/* To-do flags for pending_TODOs.  */\n+\n+/* Tell the next scalar cleanup pass that there is\n+   work for it to do.  */\n+#define PENDING_TODO_force_next_scalar_cleanup  (1 << 1)\n \n /* Register pass info. */\n \n@@ -380,6 +385,7 @@ extern gimple_opt_pass *make_pass_simduid_cleanup (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_slp_vectorize (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_complete_unroll (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_complete_unrolli (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_pre_slp_scalar_cleanup (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_parallelize_loops (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_loop_prefetch (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_iv_optimize (gcc::context *ctxt);"}, {"sha": "33e15d448b2d546120120a514fd98c0329466077", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba", "patch": "@@ -1406,6 +1406,9 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n \t  bitmap_clear (father_bbs);\n \t  bitmap_set_bit (father_bbs, loop_father->header->index);\n \t}\n+      else if (unroll_outer)\n+\t/* Trigger scalar cleanup once any outermost loop gets unrolled.  */\n+\tcfun->pending_TODOs |= PENDING_TODO_force_next_scalar_cleanup;\n \n       return true;\n     }"}]}