{"sha": "21833f2df07ba269b517e98946605b5a8385625c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4MzNmMmRmMDdiYTI2OWI1MTdlOTg5NDY2MDViNWE4Mzg1NjI1Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-09-10T06:33:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-10T06:33:36Z"}, "message": "re PR lto/63166 (ICE (LTO): ipa_intraprocedural_devirtualization, at ipa-prop.c:2611)\n\n\n\tPR ipa/63166\n\t* ipa-prop.c (compute_known_type_jump_func): Fix conditional.\n\n\t* g++.dg/lto/pr63166_0.ii: New testcase.\n\t* g++.dg/lto/pr63166_1.ii: New testcase.\n\nFrom-SVN: r215105", "tree": {"sha": "e0d4fcb0f9d8b8cacc76989460a86830e120d2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0d4fcb0f9d8b8cacc76989460a86830e120d2cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21833f2df07ba269b517e98946605b5a8385625c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21833f2df07ba269b517e98946605b5a8385625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21833f2df07ba269b517e98946605b5a8385625c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21833f2df07ba269b517e98946605b5a8385625c/comments", "author": null, "committer": null, "parents": [{"sha": "e274629ef852151bc3cf9c2b1547ff2108dd3d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e274629ef852151bc3cf9c2b1547ff2108dd3d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e274629ef852151bc3cf9c2b1547ff2108dd3d75"}], "stats": {"total": 159, "additions": 157, "deletions": 2}, "files": [{"sha": "71d0700678a485939f83b6ab29b12a893cdc9bb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21833f2df07ba269b517e98946605b5a8385625c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21833f2df07ba269b517e98946605b5a8385625c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21833f2df07ba269b517e98946605b5a8385625c", "patch": "@@ -1,3 +1,8 @@\n+2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/63166\n+\t* ipa-prop.c (compute_known_type_jump_func): Fix conditional.\n+\n 2014-09-10  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "bbb417dead5629949eeae77fbd55f131e7363254", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=21833f2df07ba269b517e98946605b5a8385625c", "patch": "@@ -1537,8 +1537,8 @@ compute_known_type_jump_func (tree op, struct ipa_jump_func *jfunc,\n \t\t\t\t    call, current_function_decl)\n       /* Even if the var seems to be in construction by inline call stack,\n \t we may work out the actual type by walking memory writes.  */\n-      && (!is_global_var (base)\n-\t  && detect_type_change (op, base, expected_type, call, jfunc, offset)))\n+      && (is_global_var (base)\n+\t  || detect_type_change (op, base, expected_type, call, jfunc, offset)))\n     return;\n \n   ipa_set_jf_known_type (jfunc, offset, TREE_TYPE (base),"}, {"sha": "e18eea341e3cd1aaec800a7b2cf6f0aabe3dd568", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21833f2df07ba269b517e98946605b5a8385625c", "patch": "@@ -1,3 +1,8 @@\n+2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/pr63166_0.ii: New testcase.\n+\t* g++.dg/lto/pr63166_1.ii: New testcase.\n+\n 2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.dg/cpp/warn-normalized-3.c: Delete useless dg-prune-output."}, {"sha": "f8ef712086139cb40f57fb3d89180d0ae1dc2910", "filename": "gcc/testsuite/g++.dg/lto/pr63166_0.ii", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_0.ii", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_0.ii", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_0.ii?ref=21833f2df07ba269b517e98946605b5a8385625c", "patch": "@@ -0,0 +1,37 @@\n+// { dg-lto-do compile }\n+extern \"C\"\n+{\n+  extern long unsigned int strlen (__const char *__s);\n+}\n+class Cstring\n+{\n+};\n+class Foobar_Out\n+{\n+  virtual void put_to_buf (const char *str, long unsigned int msg_len);\n+  void put_to_buf (const char *str)\n+  {\n+    put_to_buf (str, strlen (str));\n+  }\n+  Foobar_Out & operator << (const char *str);\n+  Foobar_Out & operator << (const Cstring & cstring);\n+};\n+\n+class Foobar_Log:public Foobar_Out\n+{\n+  Foobar_Log (int channel);\n+  virtual void put_to_buf (const char *str, long unsigned int msg_len);\n+};\n+Foobar_Out & Foobar_Out::operator << (const char *str)\n+{\n+  put_to_buf (str);\n+}\n+\n+Foobar_Out & Foobar_Out::operator << (const Cstring & cstring)\n+{\n+  return *this;\n+}\n+\n+Foobar_Log::Foobar_Log (int ch)\n+{\n+}"}, {"sha": "29438fe5edc0225995c5681ec8d4847062cbf850", "filename": "gcc/testsuite/g++.dg/lto/pr63166_1.ii", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_1.ii", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21833f2df07ba269b517e98946605b5a8385625c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_1.ii", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63166_1.ii?ref=21833f2df07ba269b517e98946605b5a8385625c", "patch": "@@ -0,0 +1,108 @@\n+class EIdent { };\n+class Cstring { };\n+template < class KEY, class VALUE, class HASHER > class HashMapIterator\n+{\n+public:\n+  virtual ~ HashMapIterator () { }\n+};\n+\n+class ECell;\n+class ECell_ptr\n+{\n+  ECell *mp_element;\n+public:\n+    ECell * operator -> () const\n+  {\n+    return (mp_element);\n+  }\n+}\n+sicat_cmd_status;\n+class CellListIterator;\n+class ECellList\n+{\n+public:\n+  virtual CellListIterator * createIterator () const = 0;\n+  virtual ECell_ptr Find (const EIdent & anIdent) = 0;\n+};\n+class Foobar_Out\n+{\n+  virtual int get_channel () { }\n+public:\n+    Foobar_Out & operator << (const char *str);\n+  Foobar_Out & operator << (const Cstring & cstring);\n+};\n+\n+class Foobar_Log:public Foobar_Out { };\n+extern Foobar_Log Foobar_LOG;\n+template < class KEY > class BagIterator\n+{\n+public:\n+  inline const KEY & operator * () const;\n+  inline int atEnd () const;\n+};\n+\n+class EMaskView;\n+class ECell\n+{\n+public:\n+  virtual const EMaskView & getMaskView () const = 0;\n+};\n+class FoobarDatabase\n+{\n+public:\n+  const Cstring & getName (const EIdent & id) const;\n+  ECellList *getCellList ();\n+};\n+inline FoobarDatabase &\n+DB () { }\n+\n+class EMaskView\n+{\n+public:\n+  inline BagIterator < EIdent > getCallerIterator () const;\n+};\n+struct DBHashFunctions\n+{\n+};\n+class CellListIterator:public HashMapIterator < EIdent, ECell *,\n+  DBHashFunctions >\n+{\n+};\n+class IdentSet\n+{\n+public:\n+  unsigned int getSize () const { }\n+  int isEmpty () const { }\n+};\n+class IdentSetIterator\n+{\n+public:\n+  IdentSetIterator (const IdentSet * p_source) { }\n+  int atEnd () const { }\n+  EIdent operator* () const { }\n+};\n+void\n+validate ()\n+{\n+  IdentSet complete_cell_ids;\n+  IdentSet incomplete_cell_ids;\n+  CellListIterator *p_cl_it = DB ().getCellList ()->createIterator ();\n+  delete p_cl_it;\n+  while (!incomplete_cell_ids.isEmpty ())\n+    {\n+      if (incomplete_cell_ids.getSize () < complete_cell_ids.getSize ())\n+\t{\n+\t  IdentSetIterator complete_cell_it (&complete_cell_ids);\n+\t  while (!complete_cell_it.atEnd ())\n+\t    {\n+\t      BagIterator < EIdent > caller_it =\n+\t\tDB ().getCellList ()->Find (*complete_cell_it)->\n+\t\tgetMaskView ().getCallerIterator ();\n+\t      while (!caller_it.atEnd ())\n+\t\t{\n+\t\t  Foobar_LOG << DB ().getName (*caller_it) << \" \";\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}"}]}