{"sha": "f15dc49f0adf0827ee173d25101bade85e79520f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1ZGM0OWYwYWRmMDgyN2VlMTczZDI1MTAxYmFkZTg1ZTc5NTIwZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2004-11-15T13:33:38Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-11-15T13:33:38Z"}, "message": "g++.dg/opt/strength-reduce.C...\n\ng++.dg/opt/strength-reduce.C: Replace 0x7fffffff with __INT_MAX__ so that\nthe test can be compiled by toolchains targeted at 16-bit processors.\n\n* gcc.dg/20040625-1.c: Use long constants rather than integers when\nperforming arithmetic that will overflow 16-bits.\n\n* gcc.dg/i386-sse-8.c: Expect this test to fail for the\txstormy16.\nIt does not support 128-bit vector operations.\n\n* gcc.dg/ultrasp4.c: Replace all occurrences of the type 'long'\twith the\nmacro PTR_TYPE.  Define this macro to an integer type suitable for\nholding a pointer.\n\n* gcc.dg/compat/struct-align-1_x.c: Use shorter integers if the target\nis a 16-bit processor.\n\n* gcc.dg/cpp/if-2.c: Expect a different warning message from 16-bit\ntargets where the character constant will be too long.\n\n* g++.dg/opt/asm1.C: Expect this test to fail on the xstormy16 where\nthe double will not be directly addressable.\n\nFrom-SVN: r90667", "tree": {"sha": "d0908825ab3bee3583f5724c2c89b7d761c288e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0908825ab3bee3583f5724c2c89b7d761c288e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f15dc49f0adf0827ee173d25101bade85e79520f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15dc49f0adf0827ee173d25101bade85e79520f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15dc49f0adf0827ee173d25101bade85e79520f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15dc49f0adf0827ee173d25101bade85e79520f/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea87f349b74599f1483086a088c7ed3f5aef0ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea87f349b74599f1483086a088c7ed3f5aef0ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea87f349b74599f1483086a088c7ed3f5aef0ef6"}], "stats": {"total": 79, "additions": 65, "deletions": 14}, "files": [{"sha": "76dd567d06fa667c5be2122b6294a75370bae0f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -1,3 +1,28 @@\n+2004-11-15  Nick Clifton  <nickc@redhat.com>\n+\n+\t* g++.dg/opt/strength-reduce.C: Replace 0x7fffffff with\n+\t__INT_MAX__ so that the test can be compiled by toolchains\n+\ttargeted at 16-bit processors.\n+\n+\t* gcc.dg/20040625-1.c: Use long constants rather than integers\n+\twhen performing arithmetic that will overflow 16-bits.\n+\n+\t* gcc.dg/i386-sse-8.c: Expect this test to fail for the\n+\txstormy16.  It does not support 128-bit vector operations.\n+\n+\t* gcc.dg/ultrasp4.c: Replace all occurrences of the type 'long'\n+\twith the macro PTR_TYPE.  Define this macro to an integer type\n+\tsuitable for holding a pointer.\n+\n+\t* gcc.dg/compat/struct-align-1_x.c: Use shorter integers if\n+\tthe target is a 16-bit processor.\n+\n+\t* gcc.dg/cpp/if-2.c: Expect a different warning message from\n+\t16-bit targets where the character constant will be too long.\n+\n+\t* g++.dg/opt/asm1.C: Expect this test to fail on the xstormy16\n+\twhere the double will not be directly addressable.\n+\n 2004-11-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tFriend class name lookup 1/n, PR c++/18471"}, {"sha": "333533526ba0bd6a5ab782c378abebd50bf15e75", "filename": "gcc/testsuite/g++.dg/opt/asm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fasm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fasm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fasm1.C?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -5,5 +5,5 @@\n void foo()\n {\n   union { double d; char c[sizeof(double)]; } tmp;\n-  __asm__ (\"\" : \"=m\" (tmp.d));\t// { dg-bogus \"not directly addressable\" }\n+  __asm__ (\"\" : \"=m\" (tmp.d));\t// { dg-bogus \"not directly addressable\" \"double sized union element should be addressible\" { xfail xstormy16-*-* } }\n }"}, {"sha": "2dc6c01e853a5f3a852716e3dd96c8f11c1c6d1f", "filename": "gcc/testsuite/g++.dg/opt/strength-reduce.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstrength-reduce.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstrength-reduce.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstrength-reduce.C?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -8,7 +8,7 @@ extern \"C\" void abort (void);\n \n struct C\n {\n-  int foo (char ch, int offset = 0x7fffffff) const;\n+  int foo (char ch, int offset = __INT_MAX__) const;\n   int bar (int offset, char c) const;\n   char *a;\n };\n@@ -27,14 +27,14 @@ int C::foo (char ch, int offset) const\n {\n   int len = __builtin_strlen (a);\n   if (len == 0)\n-    return 0x7fffffff;\n+    return __INT_MAX__;\n   if (offset >= len)\n     offset = len - 1;\n \n   while (bar (offset, ch) != 0)\n     {\n       if (offset == 0)\n-        return 0x7fffffff;\n+        return __INT_MAX__;\n       offset--;\n     }\n "}, {"sha": "5942839b30a88ec292d1088408d34d89c06c6e1d", "filename": "gcc/testsuite/gcc.c-torture/execute/simd-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-4.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -1,4 +1,4 @@\n-typedef int __attribute__((vector_size(8))) v2si;\n+typedef long __attribute__((vector_size(8))) v2si;\n long long s64;\n \n static inline long long\n@@ -9,7 +9,7 @@ __ev_convert_s64 (v2si a)\n \n int main()\n {\n-  union { long long ll; int i[2]; } endianness_test;\n+  union { long long ll; long i[2]; } endianness_test;\n   endianness_test.ll = 1;\n   int little_endian = endianness_test.i[0];\n   s64 = __ev_convert_s64 ((v2si){1,0xffffffff});"}, {"sha": "bbda6fd05fc0aa42aefb8beda2819ce41517e4b1", "filename": "gcc/testsuite/gcc.dg/20040625-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2F20040625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2F20040625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040625-1.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -22,7 +22,7 @@ test (void)\n {\n   double x = foo ();\n   x = bar (x);\n-  x /= 1024 * 1024 * 1024;\n+  x /= 1024L * 1024L * 1024L;\n   x *= 70;\n   x = x < 70 ? x : 70;\n   x += 30;"}, {"sha": "b89c95351b6dbe7c1f618bfbf7569dfb0eff6671", "filename": "gcc/testsuite/gcc.dg/20040910-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040910-1.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -1,2 +1,2 @@\n /* Tests error recovery for invalid code.  */\n-__attribute__((foo)  int f (){} /* { dg-error \"(parse error|syntax error|expected '\\\\)') before 'int'\" } */\n+__attribute__((foo)  int f (){} /* { dg-error \"(parse error|syntax error|expected '\\\\)') before `int'\" } */"}, {"sha": "51b2ef44241256f0eac591456cbe198157888d5c", "filename": "gcc/testsuite/gcc.dg/compat/struct-align-1_x.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-align-1_x.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -63,14 +63,27 @@ return3_##NAME (void)\t\t\t\t\t\\\n \n #define CHECK(NAME) test_##NAME()\n \n+#if __INT_MAX__ > 32767\n SETUP (orig, 49, 1.0, 111111)\n+#else\n+SETUP (orig, 49, 1.0, 1111)\n+#endif\n #ifndef SKIP_ATTRIBUTE\n+#if __INT_MAX__ > 32767\n SETUP (p_all, 50, 2.0, 222222)\n SETUP (p_inner, 51, 3.0, 333333)\n SETUP (p_outer, 52, 4.0, 444444)\n SETUP (a_max, 53, 5.0, 555555)\n SETUP (m_outer_p_inner, 54, 6.0, 666666)\n-SETUP (m_inner_p_outer, 55, 7.0, 777777) \n+SETUP (m_inner_p_outer, 55, 7.0, 777777)\n+#else\n+SETUP (p_all, 50, 2.0, 2222)\n+SETUP (p_inner, 51, 3.0, 3333)\n+SETUP (p_outer, 52, 4.0, 4444)\n+SETUP (a_max, 53, 5.0, 5555)\n+SETUP (m_outer_p_inner, 54, 6.0, 6666)\n+SETUP (m_inner_p_outer, 55, 7.0, 7777)\n+#endif\n #endif\n \n void"}, {"sha": "8bca251b46b8415ddce899e87b293ae5ad49fe2d", "filename": "gcc/testsuite/gcc.dg/cpp/if-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-2.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -17,7 +17,8 @@\n #error 0x1234\t/* { dg-bogus \"error\" \"wide charconst recognition 3\" } */\n #endif\n \n-#if 'abcd' /* { dg-warning \"multi-character character constant\" \"multi-character charconst\" } */\n+/* The 'character constant (is )?too long' message is produced by 16-bit targets.  */\n+#if 'abcd' /* { dg-warning \"(multi-character character constant)|(character constant (is )?too long)\" \"multi-character charconst\" } */\n #endif\n \n #if 'abcdefghi' /* { dg-error \"character constant (is )?too long\" \"charconst too long\" } */"}, {"sha": "3197e99a24c0813bd49f23ec11449e6ffab282b1", "filename": "gcc/testsuite/gcc.dg/i386-sse-8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -1,7 +1,8 @@\n /* PR target/14313 */\n /* Origin: <Pawe Sikora <pluto@ds14.agh.edu.pl> */\n \n-/* { dg-do compile } */\n+/* The xstormy16 doesn't support V2DI.  */\n+/* { dg-do compile { xfail xstormy16-*-* } } */\n /* { dg-options \"\" } */\n /* { dg-options \"-march=pentium3\" { target i?86-*-* } } */\n /* { dg-forbid-option \"-m64\" { target i?86-*-* } } */"}, {"sha": "1c72d0659d4fa0b3c31a2902235266ba73ba3b0a", "filename": "gcc/testsuite/gcc.dg/ultrasp4.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f15dc49f0adf0827ee173d25101bade85e79520f/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp4.c?ref=f15dc49f0adf0827ee173d25101bade85e79520f", "patch": "@@ -3,8 +3,19 @@\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -mcpu=ultrasparc\" { target sparc64-*-* sparcv9-*-* } } */\n \n-long bar (unsigned int);\n-long foo (long x, unsigned int y)\n+#if __INT_MAX__ > 32767\n+#define PTR_TYPE long\n+#else\n+/* For 16-bit ports a long is a 32-bit quantity.  So you cannot\n+   cast a 32-bit long integer into a pointer which will only be\n+   16-bits long.  */\n+#define PTR_TYPE int\n+#endif\n+\n+extern PTR_TYPE bar (unsigned int);\n+\n+PTR_TYPE\n+foo (PTR_TYPE x, unsigned int y)\n {\n-  return *(((long *) (bar (y) - 1)) + 1 + (x >> 2) % 359);\n+  return *(((PTR_TYPE *) (bar (y) - 1)) + 1 + (x >> 2) % 359);\n }"}]}