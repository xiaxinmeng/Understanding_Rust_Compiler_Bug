{"sha": "18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiYzE5YTdhYTRjZDA4ZDQ1ZDY0ZjY3NDFiOGIxZTBmNDhmMjYyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-22T13:02:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-22T13:02:48Z"}, "message": "[2/2] Fix bogus inner induction (PR 86725)\n\nThis patch is the second part of the fix for PR 86725.  The problem\nin the original test is that for:\n\n  outer1:\n    x_1 = PHI <x_4(outer2), ...>;\n    ...\n\n  inner:\n    x_2 = PHI <x_1(outer1), x_3(...)>;\n    ...\n    x_3 = ...;\n    ...\n\n  outer2:\n    x_4 = PHI <x_3(inner)>;\n    ...\n\nthere are corner cases in which it is possible to classify the\ninner phi as an induction but not the outer phi.  The -4.c test\nis a more direct example.\n\nAfter failing to classify x_1 as an induction, we go on to\nclassify it as a double reduction (which is basically true).\nBut we still classified the inner phi as an induction rather\nthan as part of a reduction, leading to an ICE when trying\nto vectorise the outer phi.\n\nWe analyse the phis for outer loops first, so the simplest\nfix is not to classify the phi as an induction if outer loop\nanalysis said that it should be a reduction.\n\nThe -2.c test is from the original PR.  The -3.c test is a\nversion in which \"wo\" really is used a reduction; this was\nalready correctly rejected, but for the wrong reason (\"inner-loop\ninduction only used outside of the outer vectorized loop\").\nThe -4.c test is another way of tickling the original problem\nwithout relying on the undefinedness of signed overflow.\nThe -5.c test shows an (uninteresting) example in which the\npatch prevents a spurious failure to vectorise the outer loop.\n\n2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/86725\n\t* tree-vect-loop.c (vect_inner_phi_in_double_reduction_p): New\n\tfunction.\n\t(vect_analyze_scalar_cycles_1): Check it.\n\ngcc/testsuite/\n\tPR tree-optimization/86725\n\t* gcc.dg/vect/no-scevccp-pr86725-2.c: New test.\n\t* gcc.dg/vect/no-scevccp-pr86725-3.c: Likewise.\n\t* gcc.dg/vect/no-scevccp-pr86725-4.c: Likewise.\n\t* gcc.dg/vect/no-scevccp-pr86725-5.c: Likewise.\n\nFrom-SVN: r263774", "tree": {"sha": "c8db399ae2a4f3b3e183377ac39f13adc902cb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8db399ae2a4f3b3e183377ac39f13adc902cb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a4da26602da1bd30c4ff2793fed480f180248c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4da26602da1bd30c4ff2793fed480f180248c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4da26602da1bd30c4ff2793fed480f180248c1"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "c5515e4c038a742707d8c6ff7694b761c7f8be70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -1,3 +1,10 @@\n+2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/86725\n+\t* tree-vect-loop.c (vect_inner_phi_in_double_reduction_p): New\n+\tfunction.\n+\t(vect_analyze_scalar_cycles_1): Check it.\n+\n 2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/86725"}, {"sha": "55312e89897356265b536e5e2766171f478da6d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -1,3 +1,11 @@\n+2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/86725\n+\t* gcc.dg/vect/no-scevccp-pr86725-2.c: New test.\n+\t* gcc.dg/vect/no-scevccp-pr86725-3.c: Likewise.\n+\t* gcc.dg/vect/no-scevccp-pr86725-4.c: Likewise.\n+\t* gcc.dg/vect/no-scevccp-pr86725-5.c: Likewise.\n+\n 2018-08-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/86725"}, {"sha": "b208c1a2d6159d7dc629bc2bba21df1eb2771b18", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-pr86725-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-2.c?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O -w\" } */\n+\n+int\n+nr (int xe)\n+{\n+  int oo, wo = 0;\n+\n+  for (oo = 0; oo < 4; ++oo)\n+    {\n+      int qq;\n+\n+      for (qq = 0; qq < 2; ++qq)\n+        {\n+          wo += 0x80000000;\n+          xe += wo;\n+        }\n+    }\n+  return xe;\n+}\n+\n+/* { dg-final { scan-tree-dump \"reduction used in loop\" \"vect\" { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "590c744be0cc7929365c87114acd6e2354eedf56", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-pr86725-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-3.c?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O -w\" } */\n+\n+int foo;\n+int\n+nr (int xe)\n+{\n+  int oo, wo = 0;\n+\n+  for (oo = 0; oo < 4; ++oo)\n+    {\n+      int qq;\n+\n+      for (qq = 0; qq < 2; ++qq)\n+        {\n+          wo += 0x80000000;\n+          xe += wo;\n+        }\n+    }\n+  foo = wo;\n+  return xe;\n+}\n+\n+/* { dg-final { scan-tree-dump \"reduction used in loop\" \"vect\" { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "d995c9b30fe2f65d465c7de8f4dea78124f168d1", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-pr86725-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-4.c?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O -w\" } */\n+\n+int\n+nr (unsigned int xe, unsigned int qqn)\n+{\n+  unsigned int oo, wo = 0;\n+\n+  for (oo = 0; oo < 4; ++oo)\n+    {\n+      unsigned int qq = qqn;\n+      do\n+        {\n+          wo += 1;\n+          xe += wo;\n+        }\n+      while (qq-- > 0);\n+    }\n+  return xe;\n+}\n+\n+/* { dg-final { scan-tree-dump \"reduction used in loop\" \"vect\" { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "6e7c9d8a77b5db9bced8b7f4e9e3441aa95719b3", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-pr86725-5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-pr86725-5.c?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O -w\" } */\n+\n+unsigned int foo;\n+int\n+nr (unsigned int xe, unsigned int qqn)\n+{\n+  unsigned int oo, wo = 0;\n+\n+  for (oo = 0; oo < 4; ++oo)\n+    {\n+      unsigned int qq = qqn;\n+      do\n+        {\n+          wo += 1;\n+          xe += qq;\n+        }\n+      while (qq-- > 0);\n+    }\n+  foo = wo;\n+  return xe;\n+}\n+\n+/* { dg-final { scan-tree-dump \"OUTER LOOP VECTORIZED\" \"vect\" { target vect_int } } } */"}, {"sha": "d5e35521cefb9dd13b0059fe11e9ec0dc3d6caca", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b", "patch": "@@ -462,6 +462,40 @@ vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n   return true;\n }\n \n+/* Return true if PHI, described by STMT_INFO, is the inner PHI in\n+   what we are assuming is a double reduction.  For example, given\n+   a structure like this:\n+\n+      outer1:\n+\tx_1 = PHI <x_4(outer2), ...>;\n+\t...\n+\n+      inner:\n+\tx_2 = PHI <x_1(outer1), ...>;\n+\t...\n+\tx_3 = ...;\n+\t...\n+\n+      outer2:\n+\tx_4 = PHI <x_3(inner)>;\n+\t...\n+\n+   outer loop analysis would treat x_1 as a double reduction phi and\n+   this function would then return true for x_2.  */\n+\n+static bool\n+vect_inner_phi_in_double_reduction_p (stmt_vec_info stmt_info, gphi *phi)\n+{\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n+  use_operand_p use_p;\n+  ssa_op_iter op_iter;\n+  FOR_EACH_PHI_ARG (use_p, phi, op_iter, SSA_OP_USE)\n+    if (stmt_vec_info def_info = loop_vinfo->lookup_def (USE_FROM_PTR (use_p)))\n+      if (STMT_VINFO_DEF_TYPE (def_info) == vect_double_reduction_def)\n+\treturn true;\n+  return false;\n+}\n+\n /* Function vect_analyze_scalar_cycles_1.\n \n    Examine the cross iteration def-use cycles of scalar variables\n@@ -522,6 +556,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t}\n \n       if (!access_fn\n+\t  || vect_inner_phi_in_double_reduction_p (stmt_vinfo, phi)\n \t  || !vect_is_simple_iv_evolution (loop->num, access_fn, &init, &step)\n \t  || (LOOP_VINFO_LOOP (loop_vinfo) != loop\n \t      && TREE_CODE (step) != INTEGER_CST))"}]}