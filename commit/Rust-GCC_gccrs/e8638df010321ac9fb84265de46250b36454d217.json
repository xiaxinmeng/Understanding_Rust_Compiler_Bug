{"sha": "e8638df010321ac9fb84265de46250b36454d217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2MzhkZjAxMDMyMWFjOWZiODQyNjVkZTQ2MjUwYjM2NDU0ZDIxNw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T11:23:45Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T11:23:45Z"}, "message": "Callers gcc-toplev:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36614", "tree": {"sha": "e8692e447e6f1a14d211a84c67278c81413918a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8692e447e6f1a14d211a84c67278c81413918a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8638df010321ac9fb84265de46250b36454d217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8638df010321ac9fb84265de46250b36454d217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8638df010321ac9fb84265de46250b36454d217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8638df010321ac9fb84265de46250b36454d217/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93de6f51fdd31ad427041da5f26e3109d8b3d5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93de6f51fdd31ad427041da5f26e3109d8b3d5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93de6f51fdd31ad427041da5f26e3109d8b3d5fc"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "2347375d118f26614ffd776ff04577804e132145", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -2,7 +2,7 @@\n \n \tChanges below marked \"here\" add TABs on either or both sides,\n \tcovering start of line, up to any operand for all noted .*ASM.*_OP\n-\tdefinitions.\n+\tdefinitions.  All callers changed.\n \t* crtstuff.c (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Explain\n \twhy these defaults don't have leading spacing.\n \t* dbxout.c (ASM_STABS_OP, ASM_STABN_OP): Here."}, {"sha": "7bf888990b6cec2b2f49c377c78eba3e92c0c3e3", "filename": "gcc/dbxout.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -348,7 +348,7 @@ dbxout_function_end ()\n \n   /* By convention, GCC will mark the end of a function with an N_FUN\n      symbol and an empty string.  */\n-  fprintf (asmfile, \"%s \\\"\\\",%d,0,0,\", ASM_STABS_OP, N_FUN);\n+  fprintf (asmfile, \"%s\\\"\\\",%d,0,0,\", ASM_STABS_OP, N_FUN);\n   assemble_name (asmfile, lscope_label_name);\n   fputc ('-', asmfile);\n   assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n@@ -394,7 +394,7 @@ dbxout_init (asm_file, input_file_name, syms)\n #ifdef DBX_OUTPUT_MAIN_SOURCE_DIRECTORY\n \t  DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (asmfile, cwd);\n #else /* no DBX_OUTPUT_MAIN_SOURCE_DIRECTORY */\n-\t  fprintf (asmfile, \"%s \", ASM_STABS_OP);\n+\t  fprintf (asmfile, \"%s\", ASM_STABS_OP);\n \t  output_quoted_string (asmfile, cwd);\n \t  fprintf (asmfile, \",%d,0,0,%s\\n\", N_SO, &ltext_label_name[1]);\n #endif /* no DBX_OUTPUT_MAIN_SOURCE_DIRECTORY */\n@@ -409,7 +409,7 @@ dbxout_init (asm_file, input_file_name, syms)\n   /* We include outputting `Ltext:' here,\n      because that gives you a way to override it.  */\n   /* Used to put `Ltext:' before the reference, but that loses on sun 4.  */\n-  fprintf (asmfile, \"%s \", ASM_STABS_OP);\n+  fprintf (asmfile, \"%s\", ASM_STABS_OP);\n   output_quoted_string (asmfile, input_file_name);\n   fprintf (asmfile, \",%d,0,0,%s\\n\", \n \t   N_SO, &ltext_label_name[1]);\n@@ -493,7 +493,7 @@ dbxout_start_new_source_file (filename)\n   n->file_number = next_file_number++;\n   n->next_type_number = 1;\n   current_file = n;\n-  fprintf (asmfile, \"%s \", ASM_STABS_OP);\n+  fprintf (asmfile, \"%s\", ASM_STABS_OP);\n   output_quoted_string (asmfile, filename);\n   fprintf (asmfile, \",%d,0,0,0\\n\", N_BINCL);\n #endif\n@@ -507,7 +507,7 @@ dbxout_resume_previous_source_file ()\n #ifdef DBX_USE_BINCL\n   struct dbx_file *next;\n \n-  fprintf (asmfile, \"%s %d,0,0,0\\n\", ASM_STABN_OP, N_EINCL);\n+  fprintf (asmfile, \"%s%d,0,0,0\\n\", ASM_STABN_OP, N_EINCL);\n   next = current_file->next;\n   free (current_file);\n   current_file = next;\n@@ -530,7 +530,7 @@ dbxout_source_file (file, filename)\n #else\n       ASM_GENERATE_INTERNAL_LABEL (ltext_label_name, \"Ltext\",\n \t\t\t\t   source_label_number);\n-      fprintf (file, \"%s \", ASM_STABS_OP);\n+      fprintf (file, \"%s\", ASM_STABS_OP);\n       output_quoted_string (file, filename);\n       fprintf (file, \",%d,0,0,%s\\n\", N_SOL, &ltext_label_name[1]);\n       if (current_function_decl != NULL_TREE\n@@ -559,7 +559,7 @@ dbxout_source_line (file, filename, lineno)\n #ifdef ASM_OUTPUT_SOURCE_LINE\n   ASM_OUTPUT_SOURCE_LINE (file, lineno);\n #else\n-  fprintf (file, \"\\t%s %d,0,%d\\n\", ASM_STABD_OP, N_SLINE, lineno);\n+  fprintf (file, \"\\t%s%d,0,%d\\n\", ASM_STABD_OP, N_SLINE, lineno);\n #endif\n }\n \n@@ -609,7 +609,7 @@ dbxout_continue ()\n   fprintf (asmfile, \"\\\\\\\\\");\n #endif\n   dbxout_finish_symbol (NULL_TREE);\n-  fprintf (asmfile, \"%s \\\"\", ASM_STABS_OP);\n+  fprintf (asmfile, \"%s\\\"\", ASM_STABS_OP);\n   current_sym_nchars = 0;\n }\n #endif /* DBX_CONTIN_LENGTH > 0 */\n@@ -1754,7 +1754,7 @@ dbxout_symbol (decl, local)\n \tbreak;\n       FORCE_TEXT;\n \n-      fprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n+      fprintf (asmfile, \"%s\\\"%s:%c\", ASM_STABS_OP,\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n \t       TREE_PUBLIC (decl) ? 'F' : 'f');\n       result = 1;\n@@ -1830,14 +1830,14 @@ dbxout_symbol (decl, local)\n \t\tcurrent_sym_addr = 0;\n \t\tcurrent_sym_nchars = 2 + IDENTIFIER_LENGTH (name);\n \n-\t\tfprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:T\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (name));\n \t\tdbxout_type (type, 1, 0);\n \t\tdbxout_finish_symbol (NULL_TREE);\n \t      }\n \n \t    /* Output typedef name.  */\n-\t    fprintf (asmfile, \"%s \\\"%s:\", ASM_STABS_OP,\n+\t    fprintf (asmfile, \"%s\\\"%s:\", ASM_STABS_OP,\n \t\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n \n \t    /* Short cut way to output a tag also.  */\n@@ -1891,7 +1891,7 @@ dbxout_symbol (decl, local)\n \t    current_sym_addr = 0;\n \t    current_sym_nchars = 2 + IDENTIFIER_LENGTH (name);\n \n-\t    fprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n+\t    fprintf (asmfile, \"%s\\\"%s:T\", ASM_STABS_OP,\n \t\t     IDENTIFIER_POINTER (name));\n \t    dbxout_type (type, 1, 0);\n \t    dbxout_finish_symbol (NULL_TREE);\n@@ -1910,7 +1910,7 @@ dbxout_symbol (decl, local)\n \n \t    /* Some debuggers fail when given NULL names, so give this a\n \t       harmless name of ` '.  */\n-\t    fprintf (asmfile, \"%s \\\" :T\", ASM_STABS_OP);\n+\t    fprintf (asmfile, \"%s\\\" :T\", ASM_STABS_OP);\n \t    dbxout_type (type, 1, 0);\n \t    dbxout_finish_symbol (NULL_TREE);\n \t  }\n@@ -1956,7 +1956,7 @@ dbxout_symbol (decl, local)\n #ifdef DBX_OUTPUT_CONSTANT_SYMBOL\n \t\t  DBX_OUTPUT_CONSTANT_SYMBOL (asmfile, name, ival);\n #else\n-\t\t  fprintf (asmfile, \"%s \\\"%s:c=i\", ASM_STABS_OP, name);\n+\t\t  fprintf (asmfile, \"%s\\\"%s:c=i\", ASM_STABS_OP, name);\n \n \t\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, ival);\n \t\t  fprintf (asmfile, \"\\\",0x%x,0,0,0\\n\", N_LSYM);\n@@ -2230,7 +2230,7 @@ dbxout_symbol_name (decl, suffix, letter)\n \n   if (name == 0)\n     name = \"(anon)\";\n-  fprintf (asmfile, \"%s \\\"%s%s:\", ASM_STABS_OP, name,\n+  fprintf (asmfile, \"%s\\\"%s%s:\", ASM_STABS_OP, name,\n \t   (suffix ? suffix : \"\"));\n \n   if (letter) putc (letter, asmfile);\n@@ -2339,14 +2339,14 @@ dbxout_parms (parms)\n \t      {\n \t\tcurrent_sym_nchars = 2 + IDENTIFIER_LENGTH (DECL_NAME (parms));\n \n-\t\tfprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:%c\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n \t\t\t DBX_MEMPARM_STABS_LETTER);\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asmfile, \"%s \\\"(anon):%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n \t\t\t DBX_MEMPARM_STABS_LETTER);\n \t      }\n \n@@ -2404,14 +2404,14 @@ dbxout_parms (parms)\n \t    if (DECL_NAME (parms))\n \t      {\n \t\tcurrent_sym_nchars = 2 + IDENTIFIER_LENGTH (DECL_NAME (parms));\n-\t\tfprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:%c\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n \t\t\t regparm_letter);\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asmfile, \"%s \\\"(anon):%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n \t\t\t regparm_letter);\n \t      }\n \n@@ -2457,14 +2457,14 @@ dbxout_parms (parms)\n \t      {\n \t\tcurrent_sym_nchars = 2 + strlen (IDENTIFIER_POINTER (DECL_NAME (parms)));\n \n-\t\tfprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:%c\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n \t\t\t regparm_letter);\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asmfile, \"%s \\\"(anon):%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n \t\t\t regparm_letter);\n \t      }\n \n@@ -2518,14 +2518,14 @@ dbxout_parms (parms)\n \t\tcurrent_sym_nchars\n \t\t  = 2 + strlen (IDENTIFIER_POINTER (DECL_NAME (parms)));\n \n-\t\tfprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:%c\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n \t\t\t DBX_MEMPARM_STABS_LETTER);\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asmfile, \"%s \\\"(anon):%c\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n \t\tDBX_MEMPARM_STABS_LETTER);\n \t      }\n \n@@ -2538,7 +2538,7 @@ dbxout_parms (parms)\n \t      {\n \t\t/* Generate an entry for the stack location */\n \n-\t\tfprintf (asmfile, \"%s \\\"%s:\", ASM_STABS_OP,\n+\t\tfprintf (asmfile, \"%s\\\"%s:\", ASM_STABS_OP,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)));\n \t\tcurrent_sym_value = aux_sym_value;\n \t        current_sym_code = N_LSYM;\n@@ -2688,7 +2688,7 @@ dbxout_block (block, depth, args)\n #ifdef DBX_OUTPUT_CATCH\n \t\t      DBX_OUTPUT_CATCH (asmfile, decl, buf);\n #else\n-\t\t      fprintf (asmfile, \"%s \\\"%s:C1\\\",%d,0,0,\", ASM_STABS_OP,\n+\t\t      fprintf (asmfile, \"%s\\\"%s:C1\\\",%d,0,0,\", ASM_STABS_OP,\n \t\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)), N_CATCH);\n \t\t      assemble_name (asmfile, buf);\n \t\t      fprintf (asmfile, \"\\n\");\n@@ -2700,7 +2700,7 @@ dbxout_block (block, depth, args)\n #ifdef DBX_OUTPUT_LBRAC\n \t      DBX_OUTPUT_LBRAC (asmfile, buf);\n #else\n-\t      fprintf (asmfile, \"%s %d,0,0,\", ASM_STABN_OP, N_LBRAC);\n+\t      fprintf (asmfile, \"%s%d,0,0,\", ASM_STABN_OP, N_LBRAC);\n \t      assemble_name (asmfile, buf);\n #if DBX_BLOCKS_FUNCTION_RELATIVE\n \t      fputc ('-', asmfile);\n@@ -2730,7 +2730,7 @@ dbxout_block (block, depth, args)\n #ifdef DBX_OUTPUT_RBRAC\n \t      DBX_OUTPUT_RBRAC (asmfile, buf);\n #else\n-\t      fprintf (asmfile, \"%s %d,0,0,\", ASM_STABN_OP, N_RBRAC);\n+\t      fprintf (asmfile, \"%s%d,0,0,\", ASM_STABN_OP, N_RBRAC);\n \t      assemble_name (asmfile, buf);\n #if DBX_BLOCKS_FUNCTION_RELATIVE\n \t      fputc ('-', asmfile);"}, {"sha": "d5e8884511503b1db6df78fa7c9975ee58a0b669", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -118,7 +118,7 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #ifdef SET_ASM_OP\n #ifndef ASM_OUTPUT_DEF\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", SET_ASM_OP);\t\t\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\"}, {"sha": "bc1964ae0779ab5fff2aaf084f6a5d706964888c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -273,7 +273,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n #ifdef PUSHSECTION_FORMAT\n #define SECTION_FORMAT PUSHSECTION_FORMAT\n #else\n-#define SECTION_FORMAT\t\t\"\\t%s\\t%s\\n\"\n+#define SECTION_FORMAT\t\t\"%s%s\\n\"\n #endif\n #endif\n \n@@ -306,12 +306,12 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_DATA1\n #define ASM_OUTPUT_DWARF_DATA1(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) (VALUE))\n+  fprintf ((FILE), \"%s0x%x\", ASM_BYTE_OP, (unsigned) (VALUE))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DELTA1\n #define ASM_OUTPUT_DWARF_DELTA1(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", ASM_BYTE_OP);\t\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", ASM_BYTE_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -334,7 +334,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_DELTA2\n #define ASM_OUTPUT_DWARF_DELTA2(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_SHORT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_SHORT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -343,7 +343,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_DELTA4\n #define ASM_OUTPUT_DWARF_DELTA4(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -352,7 +352,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_DELTA\n #define ASM_OUTPUT_DWARF_DELTA(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_OFFSET_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_OFFSET_ASM_OP);\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -361,7 +361,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_ADDR_DELTA\n #define ASM_OUTPUT_DWARF_ADDR_DELTA(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_WORD_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_WORD_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -370,58 +370,58 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n \n #ifndef ASM_OUTPUT_DWARF_ADDR\n #define ASM_OUTPUT_DWARF_ADDR(FILE,LABEL)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_WORD_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_WORD_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_ADDR_CONST\n #define ASM_OUTPUT_DWARF_ADDR_CONST(FILE,RTX)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_WORD_ASM_OP);\t\t\t\\\n+    fprintf ((FILE), \"%s\", UNALIGNED_WORD_ASM_OP);\t\t\t\\\n     output_addr_const ((FILE), (RTX));\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_OFFSET4\n #define ASM_OUTPUT_DWARF_OFFSET4(FILE,LABEL) \\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_OFFSET\n #define ASM_OUTPUT_DWARF_OFFSET(FILE,LABEL)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_OFFSET_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_OFFSET_ASM_OP);\t\t\\\n \tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA2\n #define ASM_OUTPUT_DWARF_DATA2(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\", UNALIGNED_SHORT_ASM_OP, (unsigned) (VALUE))\n+  fprintf ((FILE), \"%s0x%x\", UNALIGNED_SHORT_ASM_OP, (unsigned) (VALUE))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA4\n #define ASM_OUTPUT_DWARF_DATA4(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\", UNALIGNED_INT_ASM_OP, (unsigned) (VALUE))\n+  fprintf ((FILE), \"%s0x%x\", UNALIGNED_INT_ASM_OP, (unsigned) (VALUE))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA8\n #define ASM_OUTPUT_DWARF_DATA8(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_DOUBLE_INT_ASM_OP, \\\n+  fprintf ((FILE), \"%s0x%lx\", UNALIGNED_DOUBLE_INT_ASM_OP, \\\n \t   (unsigned long) (VALUE))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA\n #define ASM_OUTPUT_DWARF_DATA(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_OFFSET_ASM_OP, \\\n+  fprintf ((FILE), \"%s0x%lx\", UNALIGNED_OFFSET_ASM_OP, \\\n \t   (unsigned long) (VALUE))\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_ADDR_DATA\n #define ASM_OUTPUT_DWARF_ADDR_DATA(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_WORD_ASM_OP, \\\n+  fprintf ((FILE), \"%s0x%lx\", UNALIGNED_WORD_ASM_OP, \\\n \t   (unsigned long) (VALUE))\n #endif\n \n@@ -430,13 +430,13 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (WORDS_BIG_ENDIAN)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%lx\\n\", UNALIGNED_INT_ASM_OP, (HIGH_VALUE));\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_INT_ASM_OP, (LOW_VALUE));\\\n+\tfprintf ((FILE), \"%s0x%lx\\n\", UNALIGNED_INT_ASM_OP, (HIGH_VALUE));\\\n+\tfprintf ((FILE), \"%s0x%lx\", UNALIGNED_INT_ASM_OP, (LOW_VALUE));\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%lx\\n\", UNALIGNED_INT_ASM_OP, (LOW_VALUE)); \\\n-\tfprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_INT_ASM_OP, (HIGH_VALUE)); \\\n+\tfprintf ((FILE), \"%s0x%lx\\n\", UNALIGNED_INT_ASM_OP, (LOW_VALUE)); \\\n+\tfprintf ((FILE), \"%s0x%lx\", UNALIGNED_INT_ASM_OP, (HIGH_VALUE)); \\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n #endif\n@@ -514,7 +514,7 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n #ifndef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n #define ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL(FILE, SY, HI, LO)    \t\\\n  do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t%s\\t\", SET_ASM_OP);\t\t\t\t\t\\\n+  fprintf (FILE, \"%s\", SET_ASM_OP);\t\t\t\t\t\\\n   assemble_name (FILE, SY);\t\t\t\t\t\t\\\n   fputc (',', FILE);\t\t\t\t\t\t\t\\\n   assemble_name (FILE, HI);\t\t\t\t\t\t\\\n@@ -1563,7 +1563,7 @@ output_uleb128 (value)\n {\n   unsigned long save_value = value;\n \n-  fprintf (asm_out_file, \"\\t%s\\t\", ASM_BYTE_OP);\n+  fprintf (asm_out_file, \"%s\", ASM_BYTE_OP);\n   do\n     {\n       register unsigned byte = (value & 0x7f);\n@@ -1592,7 +1592,7 @@ output_sleb128 (value)\n   register unsigned byte;\n   long save_value = value;\n \n-  fprintf (asm_out_file, \"\\t%s\\t\", ASM_BYTE_OP);\n+  fprintf (asm_out_file, \"%s\", ASM_BYTE_OP);\n   do\n     {\n       byte = (value & 0x7f);\n@@ -5789,7 +5789,7 @@ output_abbrev_section ()\n \t\t dwarf_tag_name (abbrev->die_tag));\n \n       fputc ('\\n', asm_out_file);\n-      fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP,\n+      fprintf (asm_out_file, \"%s0x%x\", ASM_BYTE_OP,\n \t       abbrev->die_child != NULL ? DW_children_yes : DW_children_no);\n \n       if (flag_debug_asm)\n@@ -5812,11 +5812,11 @@ output_abbrev_section ()\n \t  output_value_format (a_attr);\n \t}\n \n-      fprintf (asm_out_file, \"\\t%s\\t0,0\\n\", ASM_BYTE_OP);\n+      fprintf (asm_out_file, \"%s0,0\\n\", ASM_BYTE_OP);\n     }\n \n   /* Terminate the table.  */\n-  fprintf (asm_out_file, \"\\t%s\\t0\\n\", ASM_BYTE_OP);\n+  fprintf (asm_out_file, \"%s0\\n\", ASM_BYTE_OP);\n }\n \n /* Output a symbol we can use to refer to this DIE from another CU.  */\n@@ -6403,19 +6403,19 @@ output_line_info ()\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  fprintf (asm_out_file, \"\\t%s\\t%d\", ASM_BYTE_OP, DWARF_LINE_BASE);\n+  fprintf (asm_out_file, \"%s%d\", ASM_BYTE_OP, DWARF_LINE_BASE);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Line Base Value (Special Opcodes)\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  fprintf (asm_out_file, \"\\t%s\\t%u\", ASM_BYTE_OP, DWARF_LINE_RANGE);\n+  fprintf (asm_out_file, \"%s%u\", ASM_BYTE_OP, DWARF_LINE_RANGE);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Line Range Value (Special Opcodes)\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  fprintf (asm_out_file, \"\\t%s\\t%u\", ASM_BYTE_OP, DWARF_LINE_OPCODE_BASE);\n+  fprintf (asm_out_file, \"%s%u\", ASM_BYTE_OP, DWARF_LINE_OPCODE_BASE);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Special Opcode Base\", ASM_COMMENT_START);\n "}, {"sha": "98e90c9e0a65cc77be1500c8fec6c570c0e8aa4c", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -426,7 +426,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n    section name must be enclosed in double quotes.  (See sparcv4.h.)  */\n \n #ifndef PUSHSECTION_FORMAT\n-#define PUSHSECTION_FORMAT\t\"\\t%s\\t%s\\n\"\n+#define PUSHSECTION_FORMAT\t\"%s%s\\n\"\n #endif\n \n #ifndef DEBUG_SECTION\n@@ -650,12 +650,12 @@ static void retry_incomplete_types\tPARAMS ((void));\n \n #ifndef ASM_OUTPUT_POP_SECTION\n #define ASM_OUTPUT_POP_SECTION(FILE) \\\n-  fprintf ((FILE), \"\\t%s\\n\", POPSECTION_ASM_OP)\n+  fprintf ((FILE), \"%s\\n\", POPSECTION_ASM_OP)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DELTA2\n #define ASM_OUTPUT_DWARF_DELTA2(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_SHORT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_SHORT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -665,7 +665,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n \n #ifndef ASM_OUTPUT_DWARF_DELTA4\n #define ASM_OUTPUT_DWARF_DELTA4(FILE,LABEL1,LABEL2)\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \"-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -676,7 +676,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_TAG\n #define ASM_OUTPUT_DWARF_TAG(FILE,TAG)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\",\t\t\t\t\t\\\n+    fprintf ((FILE), \"%s0x%x\",\t\t\t\t\t\t\\\n \t\t     UNALIGNED_SHORT_ASM_OP, (unsigned) TAG);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n@@ -688,7 +688,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_ATTRIBUTE\n #define ASM_OUTPUT_DWARF_ATTRIBUTE(FILE,ATTR)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\",\t\t\t\t\t\\\n+    fprintf ((FILE), \"%s0x%x\",\t\t\t\t\t\t\\\n \t\t     UNALIGNED_SHORT_ASM_OP, (unsigned) ATTR);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n@@ -700,7 +700,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_STACK_OP\n #define ASM_OUTPUT_DWARF_STACK_OP(FILE,OP)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) OP);\t\t\\\n+    fprintf ((FILE), \"%s0x%x\", ASM_BYTE_OP, (unsigned) OP);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n \t\t       ASM_COMMENT_START, dwarf_stack_op_name (OP));\t\\\n@@ -711,7 +711,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_FUND_TYPE\n #define ASM_OUTPUT_DWARF_FUND_TYPE(FILE,FT)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\",\t\t\t\t\t\\\n+    fprintf ((FILE), \"%s0x%x\",\t\t\t\t\t\t\\\n \t\t     UNALIGNED_SHORT_ASM_OP, (unsigned) FT);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n@@ -723,7 +723,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_FMT_BYTE\n #define ASM_OUTPUT_DWARF_FMT_BYTE(FILE,FMT)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) FMT);\t\\\n+    fprintf ((FILE), \"%s0x%x\", ASM_BYTE_OP, (unsigned) FMT);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n \t\t       ASM_COMMENT_START, dwarf_fmt_byte_name (FMT));\t\\\n@@ -734,7 +734,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_TYPE_MODIFIER\n #define ASM_OUTPUT_DWARF_TYPE_MODIFIER(FILE,MOD)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) MOD);\t\\\n+    fprintf ((FILE), \"%s0x%x\", ASM_BYTE_OP, (unsigned) MOD);\t\t\\\n     if (flag_debug_asm)\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s %s\",\t\t\t\t\t\\\n \t\t       ASM_COMMENT_START, dwarf_typemod_name (MOD));\t\\\n@@ -744,7 +744,7 @@ static void retry_incomplete_types\tPARAMS ((void));\n \f\n #ifndef ASM_OUTPUT_DWARF_ADDR\n #define ASM_OUTPUT_DWARF_ADDR(FILE,LABEL)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n \tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -753,47 +753,47 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef ASM_OUTPUT_DWARF_ADDR_CONST\n #define ASM_OUTPUT_DWARF_ADDR_CONST(FILE,RTX)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n+    fprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n     output_addr_const ((FILE), (RTX));\t\t\t\t\t\\\n     fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_REF\n #define ASM_OUTPUT_DWARF_REF(FILE,LABEL)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+ do {\tfprintf ((FILE), \"%s\", UNALIGNED_INT_ASM_OP);\t\t\t\\\n \tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n \tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA1\n #define ASM_OUTPUT_DWARF_DATA1(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\\n\", ASM_BYTE_OP, VALUE)\n+  fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA2\n #define ASM_OUTPUT_DWARF_DATA2(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_SHORT_ASM_OP, (unsigned) VALUE)\n+  fprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_SHORT_ASM_OP, (unsigned) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA4\n #define ASM_OUTPUT_DWARF_DATA4(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_INT_ASM_OP, (unsigned) VALUE)\n+  fprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_INT_ASM_OP, (unsigned) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DWARF_DATA8\n #define ASM_OUTPUT_DWARF_DATA8(FILE,HIGH_VALUE,LOW_VALUE)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (WORDS_BIG_ENDIAN)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_INT_ASM_OP, HIGH_VALUE); \\\n-\tfprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_INT_ASM_OP, LOW_VALUE);\\\n+\tfprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_INT_ASM_OP, HIGH_VALUE); \\\n+\tfprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_INT_ASM_OP, LOW_VALUE);\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_INT_ASM_OP, LOW_VALUE);\\\n-\tfprintf ((FILE), \"\\t%s\\t0x%x\\n\", UNALIGNED_INT_ASM_OP, HIGH_VALUE); \\\n+\tfprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_INT_ASM_OP, LOW_VALUE);\t\\\n+\tfprintf ((FILE), \"%s0x%x\\n\", UNALIGNED_INT_ASM_OP, HIGH_VALUE); \\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n #endif\n@@ -1180,7 +1180,7 @@ output_unsigned_leb128 (value)\n       value >>= 7;\n       if (value != 0)\t/* more bytes to follow */\n \tbyte |= 0x80;\n-      fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) byte);\n+      fprintf (asm_out_file, \"%s0x%x\", ASM_BYTE_OP, (unsigned) byte);\n       if (flag_debug_asm && value == 0)\n \tfprintf (asm_out_file, \"\\t%s ULEB128 number - value = %lu\",\n \t\t ASM_COMMENT_START, orig_value);\n@@ -1212,7 +1212,7 @@ output_signed_leb128 (value)\n \t  byte |= 0x80;\n \t  more = 1;\n \t}\n-      fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) byte);\n+      fprintf (asm_out_file, \"%s0x%x\", ASM_BYTE_OP, (unsigned) byte);\n       if (flag_debug_asm && more == 0)\n \tfprintf (asm_out_file, \"\\t%s SLEB128 number - value = %ld\",\n \t\t ASM_COMMENT_START, orig_value);\n@@ -1591,7 +1591,7 @@ output_reg_number (rtl)\n \t\t\t regno);\n       regno = 0;\n     }\n-  fprintf (asm_out_file, \"\\t%s\\t0x%x\",\n+  fprintf (asm_out_file, \"%s0x%x\",\n \t   UNALIGNED_INT_ASM_OP, DBX_REGISTER_NUMBER (regno));\n   if (flag_debug_asm)\n     {\n@@ -5541,7 +5541,7 @@ dwarfout_line (filename, line)\n           filename = tail;\n       }\n \n-      fprintf (asm_out_file, \"\\t%s\\t%u\\t%s %s:%u\\n\",\n+      fprintf (asm_out_file, \"%s%u\\t%s %s:%u\\n\",\n \t       UNALIGNED_INT_ASM_OP, line, ASM_COMMENT_START,\n \t       filename, line);\n       ASM_OUTPUT_DWARF_DATA2 (asm_out_file, 0xffff);\n@@ -5566,7 +5566,7 @@ generate_macinfo_entry (type_and_offset, string)\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_PUSH_SECTION (asm_out_file, MACINFO_SECTION);\n-  fprintf (asm_out_file, \"\\t%s\\t%s\\n\", UNALIGNED_INT_ASM_OP, type_and_offset);\n+  fprintf (asm_out_file, \"%s%s\\n\", UNALIGNED_INT_ASM_OP, type_and_offset);\n   ASM_OUTPUT_DWARF_STRING_NEWLINE (asm_out_file, string);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n }"}, {"sha": "1fdce5f9df6863a00b9b85287e53581f160e0f6a", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8638df010321ac9fb84265de46250b36454d217/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e8638df010321ac9fb84265de46250b36454d217", "patch": "@@ -922,7 +922,7 @@ assemble_destructor (name)\n     {\n       /* Now tell GNU LD that this is part of the static destructor set.  */\n       /* This code works for any machine provided you use GNU as/ld.  */\n-      fprintf (asm_out_file, \"%s \\\"___DTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n+      fprintf (asm_out_file, \"%s\\\"___DTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n       assemble_name (asm_out_file, name);\n       fputc ('\\n', asm_out_file);\n     }\n@@ -942,7 +942,7 @@ assemble_constructor (name)\n     {\n       /* Now tell GNU LD that this is part of the static constructor set.  */\n       /* This code works for any machine provided you use GNU as/ld.  */\n-      fprintf (asm_out_file, \"%s \\\"___CTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n+      fprintf (asm_out_file, \"%s\\\"___CTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n       assemble_name (asm_out_file, name);\n       fputc ('\\n', asm_out_file);\n     }\n@@ -962,7 +962,7 @@ assemble_gc_entry (name)\n   if (flag_gnu_linker)\n     {\n       /* Now tell GNU LD that this is part of the static constructor set.  */\n-      fprintf (asm_out_file, \"%s \\\"___PTR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n+      fprintf (asm_out_file, \"%s\\\"___PTR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n       assemble_name (asm_out_file, name);\n       fputc ('\\n', asm_out_file);\n     }\n@@ -1127,7 +1127,7 @@ assemble_zeros (size)\n \t{\n #ifdef ASM_BYTE_OP\n \t  fprintf (asm_out_file,\n-\t\t   \"%s 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\n\", ASM_BYTE_OP);\n+\t\t   \"%s0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\n\", ASM_BYTE_OP);\n #else\n \t  fprintf (asm_out_file,\n \t\t   \"\\tbyte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\n\");\n@@ -1136,7 +1136,7 @@ assemble_zeros (size)\n       if (i < size)\n         {\n #ifdef ASM_BYTE_OP\n-\t  fprintf (asm_out_file, \"%s 0\", ASM_BYTE_OP);\n+\t  fprintf (asm_out_file, \"%s0\", ASM_BYTE_OP);\n #else\n \t  fprintf (asm_out_file, \"\\tbyte 0\");\n #endif"}]}