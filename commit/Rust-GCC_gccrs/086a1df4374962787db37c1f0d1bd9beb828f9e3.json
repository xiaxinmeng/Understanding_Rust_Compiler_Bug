{"sha": "086a1df4374962787db37c1f0d1bd9beb828f9e3", "node_id": "C_kwDOANBUbNoAKDA4NmExZGY0Mzc0OTYyNzg3ZGIzN2MxZjBkMWJkOWJlYjgyOGY5ZTM", "commit": {"author": {"name": "Rimvydas Jasinskas", "email": "rimvydas.jas@gmail.com", "date": "2023-02-12T06:16:51Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-02-13T17:35:26Z"}, "message": "Fortran: Add !GCC$ attributes NOINLINE,NORETURN,WEAK\n\ngcc/fortran/ChangeLog:\n\n\t* decl.cc: Add EXT_ATTR_NOINLINE, EXT_ATTR_NORETURN, EXT_ATTR_WEAK.\n\t* gfortran.h (ext_attr_id_t): Ditto.\n\t* gfortran.texi (GCC$ ATTRIBUTES): Document them.\n\t* trans-decl.cc (build_function_decl): Apply them.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/noinline.f90: New test.\n\t* gfortran.dg/noreturn-1.f90: New test.\n\t* gfortran.dg/noreturn-2.f90: New test.\n\t* gfortran.dg/noreturn-3.f90: New test.\n\t* gfortran.dg/noreturn-4.f90: New test.\n\t* gfortran.dg/noreturn-5.f90: New test.\n\t* gfortran.dg/weak-1.f90: New test.\n\nSigned-off-by: Rimvydas Jasinskas <rimvydas.jas@gmail.com>", "tree": {"sha": "a94688f95cc312c3dece0c6cfee62c78d83856db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a94688f95cc312c3dece0c6cfee62c78d83856db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086a1df4374962787db37c1f0d1bd9beb828f9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086a1df4374962787db37c1f0d1bd9beb828f9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086a1df4374962787db37c1f0d1bd9beb828f9e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086a1df4374962787db37c1f0d1bd9beb828f9e3/comments", "author": null, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ae1e5635648bd3f6a5760ca46d531ad1f2c6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ae1e5635648bd3f6a5760ca46d531ad1f2c6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ae1e5635648bd3f6a5760ca46d531ad1f2c6b1"}], "stats": {"total": 204, "additions": 203, "deletions": 1}, "files": [{"sha": "eec0314cf4c3f2d5487b9f48362a396fb89e0ab2", "filename": "gcc/fortran/decl.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.cc?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -11732,6 +11732,9 @@ const ext_attr_t ext_attr_list[] = {\n   { \"fastcall\",     EXT_ATTR_FASTCALL,     \"fastcall\"  },\n   { \"no_arg_check\", EXT_ATTR_NO_ARG_CHECK, NULL        },\n   { \"deprecated\",   EXT_ATTR_DEPRECATED,   NULL\t       },\n+  { \"noinline\",     EXT_ATTR_NOINLINE,     NULL\t       },\n+  { \"noreturn\",     EXT_ATTR_NORETURN,     NULL\t       },\n+  { \"weak\",\t    EXT_ATTR_WEAK,\t   NULL\t       },\n   { NULL,           EXT_ATTR_LAST,         NULL        }\n };\n "}, {"sha": "a893ee06f3db23fea86aef648caecc36d802aecf", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -838,6 +838,9 @@ typedef enum\n   EXT_ATTR_FASTCALL,\n   EXT_ATTR_NO_ARG_CHECK,\n   EXT_ATTR_DEPRECATED,\n+  EXT_ATTR_NOINLINE,\n+  EXT_ATTR_NORETURN,\n+  EXT_ATTR_WEAK,\n   EXT_ATTR_LAST, EXT_ATTR_NUM = EXT_ATTR_LAST\n }\n ext_attr_id_t;"}, {"sha": "c483e13686d9340f731466c7174912ee2794c7ad", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -3246,6 +3246,13 @@ requires an explicit interface.\n @item @code{DEPRECATED} -- print a warning when using a such-tagged\n deprecated procedure, variable or parameter; the warning can be suppressed\n with @option{-Wno-deprecated-declarations}.\n+@item @code{NOINLINE} -- prevent inlining given function.\n+@item @code{NORETURN} -- add a hint that a given function cannot return.\n+@item @code{WEAK} -- emit the declaration of an external symbol as a weak\n+symbol rather than a global.  This is primarily useful in defining library\n+functions that can be overridden in user code, though it can also be used with\n+non-function declarations.  The overriding symbol must have the same type as\n+the weak symbol.\n @end itemize\n \n "}, {"sha": "ff64588b9a8771bacccc73820474c5f91673b231", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -2338,7 +2338,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n     }\n \n   /* Mark non-returning functions.  */\n-  if (sym->attr.noreturn)\n+  if (sym->attr.noreturn || sym->attr.ext_attr & (1 << EXT_ATTR_NORETURN))\n       TREE_THIS_VOLATILE(fndecl) = 1;\n \n   sym->backend_decl = fndecl;\n@@ -2482,6 +2482,17 @@ build_function_decl (gfc_symbol * sym, bool global)\n       TREE_SIDE_EFFECTS (fndecl) = 0;\n     }\n \n+  /* Mark noinline functions.  */\n+  if (attr.ext_attr & (1 << EXT_ATTR_NOINLINE))\n+    DECL_UNINLINABLE (fndecl) = 1;\n+\n+  /* Mark noreturn functions.  */\n+  if (attr.ext_attr & (1 << EXT_ATTR_NORETURN))\n+    TREE_THIS_VOLATILE (fndecl) = 1;\n+\n+  /* Mark weak functions.  */\n+  if (attr.ext_attr & (1 << EXT_ATTR_WEAK))\n+    declare_weak (fndecl);\n \n   /* Layout the function declaration and put it in the binding level\n      of the current function.  */"}, {"sha": "edae72ea5eb657b63c6746db95dff69637a20c08", "filename": "gcc/testsuite/gfortran.dg/noinline.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoinline.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoinline.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoinline.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-dom2\" }\n+\n+subroutine bar(n,m,p,s)\n+implicit none\n+integer :: n,m\n+real,intent(inout) :: p(n),s(*)\n+call foo(n,m,p,s)\n+call foo(n,m,p,s)\n+end subroutine bar\n+\n+subroutine foo(n,m,p,b)\n+implicit none\n+integer :: n,m,j\n+real,intent(inout) :: p(n),b(*)\n+!GCC$ ATTRIBUTES noinline :: foo\n+do j=1,n\n+  b(m+j-1)=p(j)\n+enddo\n+m=m+n\n+end subroutine foo\n+\n+! { dg-final { scan-tree-dump-times \"foo \\\\(\" 4 \"dom2\"} }"}, {"sha": "3155cdf22aa53c282622bd81263d3edef11cb0e9", "filename": "gcc/testsuite/gfortran.dg/noreturn-1.f90", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-1.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,62 @@\n+! Check for various valid and erroneous \"noreturn\" cases.\n+! { dg-do compile }\n+! { dg-options \"-O2\" }\n+\n+module barbar\n+!GCC$ ATTRIBUTES noreturn :: bar1\n+contains\n+subroutine bar1\n+end subroutine bar1 ! { dg-warning \"'noreturn' function does return\" \"detect falling off end of noreturn\" }\n+end module\n+\n+subroutine foo1\n+!GCC$ ATTRIBUTES noreturn :: foo1\n+end subroutine foo1 ! { dg-warning \"'noreturn' function does return\" \"detect falling off end of noreturn\" }\n+\n+subroutine foo2\n+!GCC$ ATTRIBUTES noreturn :: foo2\n+call exit(0)\n+end subroutine foo2 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+subroutine foo3\n+end subroutine foo3 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+subroutine foo4\n+!GCC$ ATTRIBUTES noreturn :: foo4\n+call foo2()\n+end subroutine foo4 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+subroutine foo5\n+!GCC$ ATTRIBUTES noreturn :: foo5\n+return              ! { dg-warning \"'noreturn' function does return\" \"detect invalid return\" }\n+end subroutine foo5\n+\n+subroutine foo6\n+return\n+end subroutine foo6 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+subroutine foo7\n+call foo6()\n+end subroutine foo7 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+subroutine foo8\n+!GCC$ ATTRIBUTES noreturn :: foo8\n+call foo7()\n+end subroutine foo8 ! { dg-warning \"'noreturn' function does return\" \"detect return from tail call\" }\n+\n+subroutine foo9\n+!GCC$ ATTRIBUTES noreturn :: foo9\n+interface\n+subroutine bar\n+!GCC$ ATTRIBUTES noreturn :: bar\n+end subroutine bar\n+end interface\n+call bar()\n+end subroutine foo9 ! { dg-bogus \"warning:\" \"this function should not get any warnings\" }\n+\n+function ffo1()\n+implicit none\n+!GCC$ ATTRIBUTES noreturn :: ffo1\n+integer :: ffo1\n+ffo1 = 0\n+end function ffo1   ! { dg-warning \"'noreturn' function does return\" \"detect falling off end of noreturn\" }"}, {"sha": "1bb4793234f9758e3bd63f83b0ae4495f578e388", "filename": "gcc/testsuite/gfortran.dg/noreturn-2.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-2.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -Wuninitialized\" }\n+\n+subroutine foo1\n+implicit none\n+interface\n+subroutine bar1\n+!GCC$ ATTRIBUTES noreturn :: bar1\n+end subroutine\n+end interface\n+real,allocatable :: d(:) ! { dg-note \"declared here\" \"note\" }\n+d = 0. ! { dg-warning \"used uninitialized\" \"uninitialized descriptor\" }\n+call bar1()\n+d = 0. ! { dg-bogus \"warning:\" \"not optimized out\" }\n+end subroutine foo1\n+\n+function foo2()\n+integer :: foo2\n+interface\n+subroutine bar2\n+!GCC$ ATTRIBUTES noreturn :: bar2\n+end subroutine\n+end interface\n+call bar2\n+return ! { dg-bogus \"__result_foo2' is used uninitialized\" \"return\" }\n+foo2 = 0\n+end function foo2\n+\n+subroutine foo3\n+implicit none\n+integer :: i,j\n+interface\n+subroutine abort2\n+!GCC$ ATTRIBUTES noreturn :: abort2\n+end subroutine\n+end interface\n+call abort2()\n+do i=1,j-1 ; end do ! { dg-bogus \"is used uninitialized\" \"uninitialized\" }\n+end subroutine foo3\n+\n+function foo4()\n+integer :: foo4\n+!$GCC$ ATTRIBUTES noreturn :: foo4\n+foo4 = 1\n+end function\n+\n+subroutine foo5(k)\n+implicit none\n+integer :: i, k\n+!GCC$ ATTRIBUTES noreturn :: mpi_abort\n+call mpi_abort()\n+k = i\n+end subroutine"}, {"sha": "fefa092aef0031fdbf85b64547226039aabbc511", "filename": "gcc/testsuite/gfortran.dg/noreturn-3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-3.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wuninitialized -Wmaybe-uninitialized\" }\n+\n+subroutine foo\n+implicit none\n+integer :: i\n+!GCC$ ATTRIBUTES noreturn :: mpi_abort\n+if (getpid() == 1) then\n+  call mpi_abort()\n+else\n+  i = 8\n+endif\n+if (i > 0) print *, i\n+end subroutine"}, {"sha": "e4024e27ccc0bb526b15258524e4402960a9d871", "filename": "gcc/testsuite/gfortran.dg/noreturn-4.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-4.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do run { target { nonpic || pie_enabled } } }\n+! { dg-options \"-O2\" }\n+\n+program bar\n+call foo1()\n+call noreturn_autodetection_failed() ! check if optimized out \n+end program\n+\n+subroutine foo1\n+stop 0\n+end subroutine foo1"}, {"sha": "d07b0502f08bd140295cd7cd17f1ee7e693aa3fd", "filename": "gcc/testsuite/gfortran.dg/noreturn-5.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnoreturn-5.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-O2\" }\n+\n+subroutine bar\n+!GCC$ ATTRIBUTES noreturn :: foo1\n+call foo1()\n+call noreturn_autodetection_failed()\n+end subroutine\n+! /* { dg-final { scan-assembler-not \"noreturn_autodetection_failed\" } } */"}, {"sha": "d9aca686775ac95f92b87a74639f5eb36c769796", "filename": "gcc/testsuite/gfortran.dg/weak-1.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fweak-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086a1df4374962787db37c1f0d1bd9beb828f9e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fweak-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fweak-1.f90?ref=086a1df4374962787db37c1f0d1bd9beb828f9e3", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+! { dg-require-weak \"\" }\n+! { dg-final { scan-assembler \"weak\\[^ \\t\\]*\\[ \\t\\]_?impl\" } }\n+subroutine impl\n+!GCC$ ATTRIBUTES weak :: impl\n+end subroutine"}]}