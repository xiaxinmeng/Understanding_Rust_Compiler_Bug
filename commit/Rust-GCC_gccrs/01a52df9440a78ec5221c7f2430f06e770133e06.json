{"sha": "01a52df9440a78ec5221c7f2430f06e770133e06", "node_id": "C_kwDOANBUbNoAKDAxYTUyZGY5NDQwYTc4ZWM1MjIxYzdmMjQzMGYwNmU3NzAxMzNlMDY", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-15T18:21:04Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-16T21:15:55Z"}, "message": "Replace Blabel with GCC tree", "tree": {"sha": "db3918137c768b4cc351e28b506ba42263bb454c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3918137c768b4cc351e28b506ba42263bb454c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01a52df9440a78ec5221c7f2430f06e770133e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a52df9440a78ec5221c7f2430f06e770133e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a52df9440a78ec5221c7f2430f06e770133e06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a52df9440a78ec5221c7f2430f06e770133e06/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e5aee5863c7d898ee640296bc837e0baa8e796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e5aee5863c7d898ee640296bc837e0baa8e796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e5aee5863c7d898ee640296bc837e0baa8e796"}], "stats": {"total": 106, "additions": 36, "deletions": 70}, "files": [{"sha": "72ab4f2f880b9ea72fcae54710fd38122a3b2434", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=01a52df9440a78ec5221c7f2430f06e770133e06", "patch": "@@ -221,12 +221,9 @@ class Context\n     return true;\n   }\n \n-  void insert_label_decl (HirId id, ::Blabel *label)\n-  {\n-    compiled_labels[id] = label;\n-  }\n+  void insert_label_decl (HirId id, tree label) { compiled_labels[id] = label; }\n \n-  bool lookup_label_decl (HirId id, ::Blabel **label)\n+  bool lookup_label_decl (HirId id, tree *label)\n   {\n     auto it = compiled_labels.find (id);\n     if (it == compiled_labels.end ())\n@@ -278,16 +275,16 @@ class Context\n     return back;\n   }\n \n-  void push_loop_begin_label (Blabel *label)\n+  void push_loop_begin_label (tree label)\n   {\n     loop_begin_labels.push_back (label);\n   }\n \n-  Blabel *peek_loop_begin_label () { return loop_begin_labels.back (); }\n+  tree peek_loop_begin_label () { return loop_begin_labels.back (); }\n \n-  Blabel *pop_loop_begin_label ()\n+  tree pop_loop_begin_label ()\n   {\n-    Blabel *pop = loop_begin_labels.back ();\n+    tree pop = loop_begin_labels.back ();\n     loop_begin_labels.pop_back ();\n     return pop;\n   }\n@@ -321,11 +318,11 @@ class Context\n   std::map<HirId, tree> compiled_type_map;\n   std::map<HirId, tree> compiled_fn_map;\n   std::map<HirId, tree> compiled_consts;\n-  std::map<HirId, ::Blabel *> compiled_labels;\n+  std::map<HirId, tree> compiled_labels;\n   std::vector<::std::vector<tree>> statements;\n   std::vector<tree> scope_stack;\n   std::vector<::Bvariable *> loop_value_stack;\n-  std::vector<::Blabel *> loop_begin_labels;\n+  std::vector<tree> loop_begin_labels;\n   std::map<const TyTy::BaseType *, std::pair<HirId, ::tree >> mono;\n   std::map<DefId, std::vector<std::pair<const TyTy::BaseType *, tree>>>\n     mono_fns;"}, {"sha": "2bf969beef988015cf5e18a3406caa848e11f3ab", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=01a52df9440a78ec5221c7f2430f06e770133e06", "patch": "@@ -755,7 +755,7 @@ class CompileExpr : public HIRCompileBase\n     if (expr.has_loop_label ())\n       {\n \tHIR::LoopLabel &loop_label = expr.get_loop_label ();\n-\tBlabel *label\n+\ttree label\n \t  = ctx->get_backend ()->label (fnctx.fndecl,\n \t\t\t\t\tloop_label.get_lifetime ().get_name (),\n \t\t\t\t\tloop_label.get_locus ());\n@@ -766,7 +766,7 @@ class CompileExpr : public HIRCompileBase\n \t  loop_label.get_lifetime ().get_mappings ().get_hirid (), label);\n       }\n \n-    Blabel *loop_begin_label\n+    tree loop_begin_label\n       = ctx->get_backend ()->label (fnctx.fndecl, \"\", expr.get_locus ());\n     tree loop_begin_label_decl\n       = ctx->get_backend ()->label_definition_statement (loop_begin_label);\n@@ -796,7 +796,7 @@ class CompileExpr : public HIRCompileBase\n     if (expr.has_loop_label ())\n       {\n \tHIR::LoopLabel &loop_label = expr.get_loop_label ();\n-\tBlabel *label\n+\ttree label\n \t  = ctx->get_backend ()->label (fnctx.fndecl,\n \t\t\t\t\tloop_label.get_lifetime ().get_name (),\n \t\t\t\t\tloop_label.get_locus ());\n@@ -817,7 +817,7 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t    start_location, end_location);\n     ctx->push_block (loop_block);\n \n-    Blabel *loop_begin_label\n+    tree loop_begin_label\n       = ctx->get_backend ()->label (fnctx.fndecl, \"\", expr.get_locus ());\n     tree loop_begin_label_decl\n       = ctx->get_backend ()->label_definition_statement (loop_begin_label);\n@@ -887,7 +887,7 @@ class CompileExpr : public HIRCompileBase\n \t    return;\n \t  }\n \n-\tBlabel *label = nullptr;\n+\ttree label = NULL_TREE;\n \tif (!ctx->lookup_label_decl (ref, &label))\n \t  {\n \t    rust_error_at (expr.get_label ().get_locus (),\n@@ -912,7 +912,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ContinueExpr &expr) override\n   {\n-    Blabel *label = ctx->peek_loop_begin_label ();\n+    tree label = ctx->peek_loop_begin_label ();\n     if (expr.has_label ())\n       {\n \tNodeId resolved_node_id = UNKNOWN_NODEID;"}, {"sha": "6a06cd754db472de1c0220d88789da8aceb83b7f", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=01a52df9440a78ec5221c7f2430f06e770133e06", "patch": "@@ -44,9 +44,6 @@ saw_errors (void);\n // The backend representation of a variable.\n class Bvariable;\n \n-// The backend representation of a label.\n-class Blabel;\n-\n // The backend interface.  This is a pure abstract class that a\n // specific backend will implement.\n \n@@ -76,7 +73,6 @@ class Backend\n   // debug\n   virtual void debug (tree) = 0;\n   virtual void debug (Bvariable *) = 0;\n-  virtual void debug (Blabel *) = 0;\n \n   // const folder helpers\n   virtual bool const_size_cast (tree, size_t *) = 0;\n@@ -665,20 +661,20 @@ class Backend\n   // Create a new label.  NAME will be empty if this is a label\n   // created by the frontend for a loop construct.  The location is\n   // where the label is defined.\n-  virtual Blabel *label (tree, const std::string &name, Location) = 0;\n+  virtual tree label (tree, const std::string &name, Location) = 0;\n \n   // Create a statement which defines a label.  This statement will be\n   // put into the codestream at the point where the label should be\n   // defined.\n-  virtual tree label_definition_statement (Blabel *) = 0;\n+  virtual tree label_definition_statement (tree) = 0;\n \n   // Create a goto statement to a label.\n-  virtual tree goto_statement (Blabel *, Location) = 0;\n+  virtual tree goto_statement (tree, Location) = 0;\n \n   // Create an expression for the address of a label.  This is used to\n   // get the return address of a deferred function which may call\n   // recover.\n-  virtual tree label_address (Blabel *, Location) = 0;\n+  virtual tree label_address (tree, Location) = 0;\n \n   // Functions.\n "}, {"sha": "482d11fef080d7ed8d7c162ce9d95526f0403bbe", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 18, "deletions": 45, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01a52df9440a78ec5221c7f2430f06e770133e06/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=01a52df9440a78ec5221c7f2430f06e770133e06", "patch": "@@ -53,29 +53,6 @@\n \n // TODO: this will have to be significantly modified to work with Rust\n \n-// A class wrapping a tree.\n-\n-class Gcc_tree\n-{\n-public:\n-  Gcc_tree (tree t) : t_ (t) {}\n-\n-  tree get_tree () const { return this->t_; }\n-\n-  void set_tree (tree t) { this->t_ = t; }\n-\n-private:\n-  tree t_;\n-};\n-\n-// In gcc, types, expressions, and statements are all trees.\n-\n-class Blabel : public Gcc_tree\n-{\n-public:\n-  Blabel (tree t) : Gcc_tree (t) {}\n-};\n-\n // Bvariable is a bit more complicated, because of zero-sized types.\n // The GNU linker does not permit dynamic variables with zero size.\n // When we see such a variable, we generate a version of the type with\n@@ -132,7 +109,6 @@ class Gcc_backend : public Backend\n \n   void debug (tree t) { debug_tree (t); };\n   void debug (Bvariable *t) { debug_tree (t->get_decl ()); };\n-  void debug (Blabel *t) { debug_tree (t->get_tree ()); };\n \n   // Types.\n   tree error_type () { return error_mark_node; }\n@@ -405,13 +381,13 @@ class Gcc_backend : public Backend\n \n   // Labels.\n \n-  Blabel *label (tree, const std::string &name, Location);\n+  tree label (tree, const std::string &name, Location);\n \n-  tree label_definition_statement (Blabel *);\n+  tree label_definition_statement (tree);\n \n-  tree goto_statement (Blabel *, Location);\n+  tree goto_statement (tree, Location);\n \n-  tree label_address (Blabel *, Location);\n+  tree label_address (tree, Location);\n \n   // Functions.\n \n@@ -2915,7 +2891,7 @@ Gcc_backend::immutable_struct_reference (const std::string &name,\n \n // Make a label.\n \n-Blabel *\n+tree\n Gcc_backend::label (tree func_tree, const std::string &name, Location location)\n {\n   tree decl;\n@@ -2937,41 +2913,38 @@ Gcc_backend::label (tree func_tree, const std::string &name, Location location)\n \t= build_decl (location.gcc_location (), LABEL_DECL, id, void_type_node);\n       DECL_CONTEXT (decl) = func_tree;\n     }\n-  return new Blabel (decl);\n+  return decl;\n }\n \n // Make a statement which defines a label.\n \n tree\n-Gcc_backend::label_definition_statement (Blabel *label)\n+Gcc_backend::label_definition_statement (tree label)\n {\n-  tree lab = label->get_tree ();\n-  return fold_build1_loc (DECL_SOURCE_LOCATION (lab), LABEL_EXPR,\n-\t\t\t  void_type_node, lab);\n+  return fold_build1_loc (DECL_SOURCE_LOCATION (label), LABEL_EXPR,\n+\t\t\t  void_type_node, label);\n }\n \n // Make a goto statement.\n \n tree\n-Gcc_backend::goto_statement (Blabel *label, Location location)\n+Gcc_backend::goto_statement (tree label, Location location)\n {\n-  tree lab = label->get_tree ();\n   return fold_build1_loc (location.gcc_location (), GOTO_EXPR, void_type_node,\n-\t\t\t  lab);\n+\t\t\t  label);\n }\n \n // Get the address of a label.\n \n tree\n-Gcc_backend::label_address (Blabel *label, Location location)\n+Gcc_backend::label_address (tree label, Location location)\n {\n-  tree lab = label->get_tree ();\n-  TREE_USED (lab) = 1;\n-  TREE_ADDRESSABLE (lab) = 1;\n+  TREE_USED (label) = 1;\n+  TREE_ADDRESSABLE (label) = 1;\n   tree ret\n     = fold_convert_loc (location.gcc_location (), ptr_type_node,\n \t\t\tbuild_fold_addr_expr_loc (location.gcc_location (),\n-\t\t\t\t\t\t  lab));\n+\t\t\t\t\t\t  label));\n   return ret;\n }\n \n@@ -3047,11 +3020,11 @@ Gcc_backend::function_defer_statement (tree function, tree undefer_tree,\n     push_cfun (DECL_STRUCT_FUNCTION (function));\n \n   tree stmt_list = NULL;\n-  Blabel *blabel = this->label (function, \"\", location);\n-  tree label_def = this->label_definition_statement (blabel);\n+  tree label = this->label (function, \"\", location);\n+  tree label_def = this->label_definition_statement (label);\n   append_to_statement_list (label_def, &stmt_list);\n \n-  tree jump_stmt = this->goto_statement (blabel, location);\n+  tree jump_stmt = this->goto_statement (label, location);\n   tree catch_body\n     = build2 (COMPOUND_EXPR, void_type_node, defer_tree, jump_stmt);\n   catch_body = build2 (CATCH_EXPR, void_type_node, NULL, catch_body);"}]}