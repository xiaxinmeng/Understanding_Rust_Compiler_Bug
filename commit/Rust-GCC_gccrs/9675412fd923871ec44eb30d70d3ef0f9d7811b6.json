{"sha": "9675412fd923871ec44eb30d70d3ef0f9d7811b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3NTQxMmZkOTIzODcxZWM0NGViMzBkNzBkM2VmMGY5ZDc4MTFiNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-11T18:14:48Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-11T18:14:48Z"}, "message": "builtins.c (fold_builtin_fputs): Don't bother converting the return type to integer_type_node...\n\n\n\t* builtins.c (fold_builtin_fputs): Don't bother converting the\n\treturn type to integer_type_node, as we've already checked that\n\tthe result will be ignored.\n\n\t* tree-eh.c (tree_could_trap_p): Add support for -ftrapv such\n\tthat signed addition, subtraction, multiplication, division,\n\tremainder, negation and absolute value may potentially trap.\n\n\t* fold-const.c (fold_ignored_result): New function to strip\n\tnon-side-effecting tree nodes from an expression whose result\n\tis ignored.\n\t(fold_convert): Call fold_ignored_result when casting a value\n\tto VOID_TYPE.\n\t(omit_one_operand):  Call fold_ignored_result on the \"omitted\"\n\toperand when building a COMPOUND_EXPR.\n\t(pedantic_omit_one_operand): Likewise.\n\t* tree.h (fold_ignored_result): Prototype here.\n\t* tree-ssa-ccp.c (ccp_fold_builtin): Call fold_ignored_result\n\twhen we're going to ignore the result.\n\nFrom-SVN: r84525", "tree": {"sha": "8ae61f65db968c0c276e91209918fc11f50b63e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae61f65db968c0c276e91209918fc11f50b63e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9675412fd923871ec44eb30d70d3ef0f9d7811b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9675412fd923871ec44eb30d70d3ef0f9d7811b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9675412fd923871ec44eb30d70d3ef0f9d7811b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9675412fd923871ec44eb30d70d3ef0f9d7811b6/comments", "author": null, "committer": null, "parents": [{"sha": "fa27426eb1377c2a9e23f58424b4da5497e78c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa27426eb1377c2a9e23f58424b4da5497e78c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa27426eb1377c2a9e23f58424b4da5497e78c8d"}], "stats": {"total": 117, "additions": 100, "deletions": 17}, "files": [{"sha": "3ff14d40a3a2f6a98d5923c9eef7a51aea27c379", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -1,3 +1,25 @@\n+2004-07-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin_fputs): Don't bother converting the\n+\treturn type to integer_type_node, as we've already checked that\n+\tthe result will be ignored.\n+\n+\t* tree-eh.c (tree_could_trap_p): Add support for -ftrapv such\n+\tthat signed addition, subtraction, multiplication, division,\n+\tremainder, negation and absolute value may potentially trap.\n+\n+\t* fold-const.c (fold_ignored_result): New function to strip\n+\tnon-side-effecting tree nodes from an expression whose result\n+\tis ignored.\n+\t(fold_convert): Call fold_ignored_result when casting a value\n+\tto VOID_TYPE.\n+\t(omit_one_operand):  Call fold_ignored_result on the \"omitted\"\n+\toperand when building a COMPOUND_EXPR.\n+\t(pedantic_omit_one_operand): Likewise.\n+\t* tree.h (fold_ignored_result): Prototype here.\n+\t* tree-ssa-ccp.c (ccp_fold_builtin): Call fold_ignored_result\n+\twhen we're going to ignore the result.\n+\n 2004-07-11  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/16383"}, {"sha": "5b2a63ff9428b571bff2e72c3932a32be423023a", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -9474,8 +9474,9 @@ fold_builtin_fputs (tree arglist, bool ignore, bool unlocked, tree len)\n       abort ();\n     }\n \n-  return fold_convert (integer_type_node,\n-\t\t       build_function_call_expr (fn, arglist));\n+  /* These optimizations are only performed when the result is ignored,\n+     hence there's no need to cast the result to integer_type_node.  */\n+  return build_function_call_expr (fn, arglist);\n }\n \n static void"}, {"sha": "f1927f27995e48e48db5cbb0df0324df075aca40", "filename": "gcc/fold-const.c", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -1999,7 +1999,7 @@ fold_convert (tree type, tree arg)\n \treturn fold (build1 (NOP_EXPR, type, arg));\n     }\n   else if (VOID_TYPE_P (type))\n-    return fold (build1 (CONVERT_EXPR, type, arg));\n+    return fold (build1 (CONVERT_EXPR, type, fold_ignored_result (arg)));\n   abort ();\n }\n \f\n@@ -2828,7 +2828,7 @@ omit_one_operand (tree type, tree result, tree omitted)\n   tree t = fold_convert (type, result);\n \n   if (TREE_SIDE_EFFECTS (omitted))\n-    return build2 (COMPOUND_EXPR, type, omitted, t);\n+    return build2 (COMPOUND_EXPR, type, fold_ignored_result (omitted), t);\n \n   return non_lvalue (t);\n }\n@@ -2841,7 +2841,7 @@ pedantic_omit_one_operand (tree type, tree result, tree omitted)\n   tree t = fold_convert (type, result);\n \n   if (TREE_SIDE_EFFECTS (omitted))\n-    return build2 (COMPOUND_EXPR, type, omitted, t);\n+    return build2 (COMPOUND_EXPR, type, fold_ignored_result (omitted), t);\n \n   return pedantic_non_lvalue (t);\n }\n@@ -10583,4 +10583,57 @@ build_fold_indirect_ref (tree t)\n   return build1 (INDIRECT_REF, type, t);\n }\n \n+/* Strip non-trapping, non-side-effecting tree nodes from an expression\n+   whose result is ignored.  The type of the returned tree need not be\n+   the same as the original expression.  */\n+\n+tree\n+fold_ignored_result (tree t)\n+{\n+  if (!TREE_SIDE_EFFECTS (t))\n+    return integer_zero_node;\n+\n+  for (;;)\n+    switch (TREE_CODE_CLASS (TREE_CODE (t)))\n+      {\n+      case '1':\n+\tt = TREE_OPERAND (t, 0);\n+\tbreak;\n+\n+      case '2':\n+      case '<':\n+\tif (!TREE_SIDE_EFFECTS (TREE_OPERAND (t, 1)))\n+\t  t = TREE_OPERAND (t, 0);\n+\telse if (!TREE_SIDE_EFFECTS (TREE_OPERAND (t, 0)))\n+\t  t = TREE_OPERAND (t, 1);\n+\telse\n+\t  return t;\n+\tbreak;\n+\n+      case 'e':\n+\tswitch (TREE_CODE (t))\n+\t  {\n+\t  case COMPOUND_EXPR:\n+\t    if (TREE_SIDE_EFFECTS (TREE_OPERAND (t, 1)))\n+\t      return t;\n+\t    t = TREE_OPERAND (t, 0);\n+\t    break;\n+\n+\t  case COND_EXPR:\n+\t    if (TREE_SIDE_EFFECTS (TREE_OPERAND (t, 1))\n+\t\t|| TREE_SIDE_EFFECTS (TREE_OPERAND (t, 2)))\n+\t      return t;\n+\t    t = TREE_OPERAND (t, 0);\n+\t    break;\n+\n+\t  default:\n+\t    return t;\n+\t  }\n+\tbreak;\n+\n+      default:\n+\treturn t;\n+      }\n+}\n+\n #include \"gt-fold-const.h\""}, {"sha": "b0638c001084b75d5e683472f15a02103bb044f5", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -1705,6 +1705,7 @@ tree_could_trap_p (tree expr)\n   bool honor_nans = false;\n   bool honor_snans = false;\n   bool fp_operation = false;\n+  bool honor_trapv = false;\n   tree t, base, idx;\n \n   if (TREE_CODE_CLASS (code) == '<'\n@@ -1718,6 +1719,8 @@ tree_could_trap_p (tree expr)\n \t  honor_nans = flag_trapping_math && !flag_finite_math_only;\n \t  honor_snans = flag_signaling_nans != 0;\n \t}\n+      else if (INTEGRAL_TYPE_P (t) && TYPE_TRAP_SIGNED (t))\n+\thonor_trapv = true;\n     }\n \n   switch (code)\n@@ -1765,7 +1768,7 @@ tree_could_trap_p (tree expr)\n     case ROUND_MOD_EXPR:\n     case TRUNC_MOD_EXPR:\n     case RDIV_EXPR:\n-      if (honor_snans)\n+      if (honor_snans || honor_trapv)\n \treturn true;\n       if (fp_operation && flag_trapping_math)\n \treturn true;\n@@ -1804,7 +1807,19 @@ tree_could_trap_p (tree expr)\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case CONJ_EXPR:\n-      /* These operations don't trap even with floating point.  */\n+      /* These operations don't trap with floating point.  */\n+      if (honor_trapv)\n+\treturn true;\n+      return false;\n+\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case MULT_EXPR:\n+      /* Any floating arithmetic may trap.  */\n+      if (fp_operation && flag_trapping_math)\n+\treturn true;\n+      if (honor_trapv)\n+\treturn true;\n       return false;\n \n     default:"}, {"sha": "7f28a9f9e93b5ff1b28e871aca271fe85deca845", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -2386,16 +2386,7 @@ ccp_fold_builtin (tree stmt, tree fn)\n     }\n \n   if (result && ignore)\n-    {\n-      /* STRIP_NOPS isn't strong enough -- it'll stop when we change modes,\n-\t but given that we're ignoring the result, we don't care what type\n-\t is being returned by the transformed function.  */\n-      while (TREE_CODE (result) == NOP_EXPR\n-\t     || TREE_CODE (result) == CONVERT_EXPR\n-\t     || TREE_CODE (result) == NON_LVALUE_EXPR)\n-\tresult = TREE_OPERAND (result, 0);\n-    }\n-\n+    result = fold_ignored_result (result);\n   return result;\n }\n "}, {"sha": "75f4f285add913b970c99d24e25138b8bf6fbe90", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9675412fd923871ec44eb30d70d3ef0f9d7811b6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9675412fd923871ec44eb30d70d3ef0f9d7811b6", "patch": "@@ -3372,6 +3372,7 @@ extern tree fold (tree);\n extern tree fold_initializer (tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n+extern tree fold_ignored_result (tree);\n extern tree fold_abs_const (tree, tree);\n \n extern int force_fit_type (tree, int);"}]}