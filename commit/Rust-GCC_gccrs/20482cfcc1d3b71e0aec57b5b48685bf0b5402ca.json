{"sha": "20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0ODJjZmNjMWQzYjcxZTBhZWM1N2I1YjQ4Njg1YmYwYjU0MDJjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-10T18:50:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-10T18:50:11Z"}, "message": "i386: Fix ICEs due to simplify_gen_subreg returning NULL [PR99025]\n\nIn these patterns, we call simplify_gen_subreg on the input operand\nto create paradoxical subregs that have 2x, 4x or 8x elements as the input\noperand.  That works fine if the input operand is a REG, but when it is a\nSUBREG, RTL doesn't allow SUBREG of SUBREG and so relies on simplify_subreg\nactually simplifying it.  And e.g. if the input operand is a SUBREG that\nchanges the element mode (floating vs. non-floating) and then combined with\na paradoxical subreg (i.e. different size) this can easily fail, then\nsimplify_gen_subreg returns NULL but we still use it in instructions.\n\nFixed by forcing the operands into REG.\n\n2021-02-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99025\n\t* config/i386/sse.md (fix<fixunssuffix>_truncv2sfv2di2,\n\t<insn>v8qiv8hi2, <insn>v8qiv8si2, <insn>v4qiv4si2, <insn>v4hiv4si2,\n\t<insn>v8qiv8di2, <insn>v4qiv4di2, <insn>v2qiv2di2, <insn>v4hiv4di2,\n\t<insn>v2hiv2di2, <insn>v2siv2di2): Force operands[1] into REG before\n\tcalling simplify_gen_subreg on it.\n\n\t* gcc.target/i386/pr99025.c: New test.", "tree": {"sha": "06381143dd81a9dd49af874df4ee04e4ca9bd278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06381143dd81a9dd49af874df4ee04e4ca9bd278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db7887dfbf502b7e60d64bfeebd0de592d2d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8db7887dfbf502b7e60d64bfeebd0de592d2d45"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "db5be59f5b73a603dc3a6dcf22da7a5bf4a9715a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "patch": "@@ -6356,6 +6356,7 @@\n \t  (match_operand:V2SF 1 \"register_operand\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n {\n+  operands[1] = force_reg (V2SFmode, operands[1]);\n   operands[1] = simplify_gen_subreg (V4SFmode, operands[1], V2SFmode, 0);\n   emit_insn (gen_avx512dq_fix<fixunssuffix>_truncv2sfv2di2\n \t     (operands[0], operands[1]));\n@@ -18013,6 +18014,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V8QImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V16QImode, operands[1], V8QImode, 0);\n       emit_insn (gen_sse4_1_<code>v8qiv8hi2 (operands[0], operands[1]));\n       DONE;\n@@ -18090,6 +18092,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V8QImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V16QImode, operands[1], V8QImode, 0);\n       emit_insn (gen_avx2_<code>v8qiv8si2 (operands[0], operands[1]));\n       DONE;\n@@ -18153,6 +18156,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V4QImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V16QImode, operands[1], V4QImode, 0);\n       emit_insn (gen_sse4_1_<code>v4qiv4si2 (operands[0], operands[1]));\n       DONE;\n@@ -18279,6 +18283,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V4HImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V8HImode, operands[1], V4HImode, 0);\n       emit_insn (gen_sse4_1_<code>v4hiv4si2 (operands[0], operands[1]));\n       DONE;\n@@ -18366,6 +18371,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V8QImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V16QImode, operands[1], V8QImode, 0);\n       emit_insn (gen_avx512f_<code>v8qiv8di2 (operands[0], operands[1]));\n       DONE;\n@@ -18427,6 +18433,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V8QImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V16QImode, operands[1], V8QImode, 0);\n       emit_insn (gen_avx2_<code>v4qiv4di2 (operands[0], operands[1]));\n       DONE;\n@@ -18453,6 +18460,7 @@\n \t  (match_operand:V2QI 1 \"register_operand\")))]\n   \"TARGET_SSE4_1\"\n {\n+  operands[1] = force_reg (V2QImode, operands[1]);\n   operands[1] = simplify_gen_subreg (V16QImode, operands[1], V2QImode, 0);\n   emit_insn (gen_sse4_1_<code>v2qiv2di2 (operands[0], operands[1]));\n   DONE;\n@@ -18525,6 +18533,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V4HImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V8HImode, operands[1], V4HImode, 0);\n       emit_insn (gen_avx2_<code>v4hiv4di2 (operands[0], operands[1]));\n       DONE;\n@@ -18586,6 +18595,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V2HImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V8HImode, operands[1], V2HImode, 0);\n       emit_insn (gen_sse4_1_<code>v2hiv2di2 (operands[0], operands[1]));\n       DONE;\n@@ -18737,6 +18747,7 @@\n {\n   if (!MEM_P (operands[1]))\n     {\n+      operands[1] = force_reg (V2SImode, operands[1]);\n       operands[1] = simplify_gen_subreg (V4SImode, operands[1], V2SImode, 0);\n       emit_insn (gen_sse4_1_<code>v2siv2di2 (operands[0], operands[1]));\n       DONE;"}, {"sha": "288538d618ab1599b21b178c1aaccc6da10f6bec", "filename": "gcc/testsuite/gcc.target/i386/pr99025.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99025.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20482cfcc1d3b71e0aec57b5b48685bf0b5402ca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99025.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99025.c?ref=20482cfcc1d3b71e0aec57b5b48685bf0b5402ca", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/99025 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse4\" } */\n+\n+long v[16];\n+int w;\n+union U { float u; int r; } x;\n+\n+void\n+foo (float y)\n+{\n+  union U z;\n+  x.u = w;\n+  v[5] = x.r;\n+  z.u = y;\n+  v[6] = z.r;\n+}"}]}