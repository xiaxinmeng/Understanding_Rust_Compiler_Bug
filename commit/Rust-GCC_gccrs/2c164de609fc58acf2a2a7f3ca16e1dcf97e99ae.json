{"sha": "2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxNjRkZTYwOWZjNThhY2YyYTJhN2YzY2ExNmUxZGNmOTdlOTlhZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-10-02T21:58:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-10-02T21:58:08Z"}, "message": "re PR c++/22621 (Member function overloading introduces syntax errors)\n\n\tPR c++/22621\n\t* parser.c (cp_parser_template_argument): Don't turn \"T::f\" into\n\t\"(*this).T::f\".\n\t* pt.c (convert_nontype_argument): Remove ??? comment.\n\n\tPR c++/22621\n\t* g++.dg/template/overload5.C : New test.\n\nFrom-SVN: r104881", "tree": {"sha": "33e4c6832f5b335decd72b62cbe10f833fc91303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e4c6832f5b335decd72b62cbe10f833fc91303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/comments", "author": null, "committer": null, "parents": [{"sha": "cc86dcfb9984a1c7329ea97a1c4f5891e00d6e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc86dcfb9984a1c7329ea97a1c4f5891e00d6e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc86dcfb9984a1c7329ea97a1c4f5891e00d6e9b"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "789fcfb6dd6183b0baed1682ec07355285ce8155", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "patch": "@@ -1,5 +1,10 @@\n 2005-10-02  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/22621\n+\t* parser.c (cp_parser_template_argument): Don't turn \"T::f\" into\n+\t\"(*this).T::f\".\n+\t* pt.c (convert_nontype_argument): Remove ??? comment.\n+\n \tPR c++/23840\n \t* tree.c (lvalue_p1): A VA_ARG_EXPR with class type is an lvalue,\n \twhen class rvalues are lvalues."}, {"sha": "08af6e2f49b90830e6d201417ee8f97f770a4377", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "patch": "@@ -9099,11 +9099,20 @@ cp_parser_template_argument (cp_parser* parser)\n \t      argument = TREE_OPERAND (argument, 0);\n \t    }\n \n-\t  if (qualifying_class)\n+\t  /* If ADDRESS_P, then we use finish_qualified_id_expr so\n+\t     that we get a pointer-to-member, if appropriate.\n+\t     However, if ADDRESS_P is false, we don't want to turn\n+\t     \"T::f\" into \"(*this).T::f\".  */\n+\t  if (qualifying_class && address_p)\n \t    argument = finish_qualified_id_expr (qualifying_class,\n \t\t\t\t\t\t argument,\n \t\t\t\t\t\t /*done=*/true,\n-\t\t\t\t\t\t address_p);\n+\t\t\t\t\t\t /*address_p=*/true);\n+\t  else if (TREE_CODE (argument) == BASELINK)\n+\t    /* We don't need the information about what class was used\n+\t       to name the overloaded functions.  */  \n+\t    argument = BASELINK_FUNCTIONS (argument);\n+\n \t  if (TREE_CODE (argument) == VAR_DECL)\n \t    {\n \t      /* A variable without external linkage might still be a"}, {"sha": "82d569ba266c8dda1105a4cbfeb439017242c750", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "patch": "@@ -3613,9 +3613,7 @@ convert_nontype_argument (tree type, tree expr)\n   else if (TYPE_PTRFN_P (type))\n     {\n       /* If the argument is a template-id, we might not have enough\n-\t context information to decay the pointer.\n-\t ??? Why static5.C requires decay and subst1.C works fine\n-\t even without it?  */\n+\t context information to decay the pointer.  */\n       if (!type_unknown_p (expr_type))\n \t{\n \t  expr = decay_conversion (expr);"}, {"sha": "d34c5322960c1566f3dac60a15c33d3be1fb16e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "patch": "@@ -1,5 +1,8 @@\n 2005-10-02  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/22621\n+\t* g++.dg/template/overload5.C : New test.\n+\n \tPR c++/23840\n \t* g++.dg/expr/stdarg1.C: New test.\n "}, {"sha": "8e520e929075f158115f930eea79424156b3d987", "filename": "gcc/testsuite/g++.dg/template/overload5.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload5.C?ref=2c164de609fc58acf2a2a7f3ca16e1dcf97e99ae", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/22621\n+\n+struct foo {\n+    typedef int (*fun)(int);\n+\n+  static int f(int);    // overload between static & non-static\n+    int f();\n+\n+  static int g(int);    // non-overloaded static\n+};\n+\n+template<foo::fun>\n+struct f_obj {\n+  // something ..\n+};\n+\n+f_obj<&foo::f> a;   // OK\n+f_obj<foo::f>  b;   // OK (note: a and b are of the same type)\n+\n+int foo::f()\n+{\n+  f_obj<&foo::f> a;   // OK\n+  f_obj<foo::f>  b;   // ERROR: foo::f cannot be a constant expression\n+\n+  f_obj<&foo::g> c;   // OK\n+  f_obj<foo::g>  d;   // OK\n+}\n+"}]}