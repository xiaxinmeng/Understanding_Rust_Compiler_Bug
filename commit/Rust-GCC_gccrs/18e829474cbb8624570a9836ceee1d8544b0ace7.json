{"sha": "18e829474cbb8624570a9836ceee1d8544b0ace7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlODI5NDc0Y2JiODYyNDU3MGE5ODM2Y2VlZTFkODU0NGIwYWNlNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2017-04-25T08:25:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:25:29Z"}, "message": "New file.\n\nFrom-SVN: r247145", "tree": {"sha": "09e715ea28fad15170d263fd94bb2455ab5d01a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e715ea28fad15170d263fd94bb2455ab5d01a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e829474cbb8624570a9836ceee1d8544b0ace7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e829474cbb8624570a9836ceee1d8544b0ace7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e829474cbb8624570a9836ceee1d8544b0ace7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e829474cbb8624570a9836ceee1d8544b0ace7/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f607cacf5db527077abc7904c4dc511468c82c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f607cacf5db527077abc7904c4dc511468c82c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f607cacf5db527077abc7904c4dc511468c82c0a"}], "stats": {"total": 332, "additions": 332, "deletions": 0}, "files": [{"sha": "d74dfff7e9a7dece415a9250c48202cfdd92db69", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e829474cbb8624570a9836ceee1d8544b0ace7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e829474cbb8624570a9836ceee1d8544b0ace7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=18e829474cbb8624570a9836ceee1d8544b0ace7", "patch": "@@ -1,3 +1,7 @@\n+2017-04-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ada_get_targ.adb: New file.\n+\n 2017-04-25  Bob Duff  <duff@adacore.com>\n \n \t* uintp.adb (Most_Sig_2_Digits): In case Direct (Right), fetch"}, {"sha": "03b91444426fa7501ce0ecac84bd53963cbf6a68", "filename": "gcc/ada/ada_get_targ.adb", "status": "added", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e829474cbb8624570a9836ceee1d8544b0ace7/gcc%2Fada%2Fada_get_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e829474cbb8624570a9836ceee1d8544b0ace7/gcc%2Fada%2Fada_get_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada_get_targ.adb?ref=18e829474cbb8624570a9836ceee1d8544b0ace7", "patch": "@@ -0,0 +1,328 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             G E T _ T A R G                              --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Version shared by various Ada based back-ends (e.g. gnat2scil, gnat2why)\n+\n+with System.OS_Lib; use System.OS_Lib;\n+\n+with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n+\n+package body Get_Targ is\n+\n+   -----------------------\n+   -- Get_Bits_Per_Unit --\n+   -----------------------\n+\n+   function Get_Bits_Per_Unit return Pos is\n+   begin\n+      return 8;\n+   end Get_Bits_Per_Unit;\n+\n+   -----------------------\n+   -- Get_Bits_Per_Word --\n+   -----------------------\n+\n+   function Get_Bits_Per_Word return Pos is\n+   begin\n+      return 32;\n+   end Get_Bits_Per_Word;\n+\n+   -------------------\n+   -- Get_Char_Size --\n+   -------------------\n+\n+   function Get_Char_Size return Pos is\n+   begin\n+      return 8;\n+   end Get_Char_Size;\n+\n+   -----------------\n+   -- Get_Wchar_T --\n+   -----------------\n+\n+   function Get_Wchar_T_Size return Pos is\n+   begin\n+      return 16;\n+   end Get_Wchar_T_Size;\n+\n+   --------------------\n+   -- Get_Short_Size --\n+   --------------------\n+\n+   function Get_Short_Size return Pos is\n+   begin\n+      return 16;\n+   end Get_Short_Size;\n+\n+   ------------------\n+   -- Get_Int_Size --\n+   ------------------\n+\n+   function Get_Int_Size return Pos is\n+   begin\n+      return 32;\n+   end Get_Int_Size;\n+\n+   -------------------\n+   -- Get_Long_Size --\n+   -------------------\n+\n+   function Get_Long_Size return Pos is\n+   begin\n+      return 64;\n+   end Get_Long_Size;\n+\n+   ------------------------\n+   -- Get_Long_Long_Size --\n+   ------------------------\n+\n+   function Get_Long_Long_Size return Pos is\n+   begin\n+      return 64;\n+   end Get_Long_Long_Size;\n+\n+   ----------------------\n+   -- Get_Pointer_Size --\n+   ----------------------\n+\n+   function Get_Pointer_Size return Pos is\n+   begin\n+      return 64;\n+   end Get_Pointer_Size;\n+\n+   ---------------------------\n+   -- Get_Maximum_Alignment --\n+   ---------------------------\n+\n+   function Get_Maximum_Alignment return Pos is\n+   begin\n+      return 4;\n+   end Get_Maximum_Alignment;\n+\n+   ------------------------------------\n+   -- Get_System_Allocator_Alignment --\n+   ------------------------------------\n+\n+   function Get_System_Allocator_Alignment return Nat is\n+   begin\n+      return 1;\n+   end Get_System_Allocator_Alignment;\n+\n+   ------------------------\n+   -- Get_Float_Words_BE --\n+   ------------------------\n+\n+   function Get_Float_Words_BE return Nat is\n+   begin\n+      return 1;\n+   end Get_Float_Words_BE;\n+\n+   ------------------\n+   -- Get_Words_BE --\n+   ------------------\n+\n+   function Get_Words_BE return Nat is\n+   begin\n+      return 1;\n+   end Get_Words_BE;\n+\n+   ------------------\n+   -- Get_Bytes_BE --\n+   ------------------\n+\n+   function Get_Bytes_BE return Nat is\n+   begin\n+      return 1;\n+   end Get_Bytes_BE;\n+\n+   -----------------\n+   -- Get_Bits_BE --\n+   -----------------\n+\n+   function Get_Bits_BE return Nat is\n+   begin\n+      return 1;\n+   end Get_Bits_BE;\n+\n+   ---------------------\n+   -- Get_Short_Enums --\n+   ---------------------\n+\n+   function Get_Short_Enums return Int is\n+   begin\n+      return 0;\n+   end Get_Short_Enums;\n+\n+   --------------------------\n+   -- Get_Strict_Alignment --\n+   --------------------------\n+\n+   function Get_Strict_Alignment return Nat is\n+   begin\n+      return 1;\n+   end Get_Strict_Alignment;\n+\n+   --------------------------------\n+   -- Get_Double_Float_Alignment --\n+   --------------------------------\n+\n+   function Get_Double_Float_Alignment return Nat is\n+   begin\n+      return 0;\n+   end Get_Double_Float_Alignment;\n+\n+   ---------------------------------\n+   -- Get_Double_Scalar_Alignment --\n+   ---------------------------------\n+\n+   function Get_Double_Scalar_Alignment return Nat is\n+   begin\n+      return 0;\n+   end Get_Double_Scalar_Alignment;\n+\n+   -----------------------------\n+   -- Get_Max_Unaligned_Field --\n+   -----------------------------\n+\n+   function Get_Max_Unaligned_Field return Pos is\n+   begin\n+      return 64;  -- Can be different on some targets (e.g., AAMP)\n+   end Get_Max_Unaligned_Field;\n+\n+   ----------------------\n+   -- Digits_From_Size --\n+   ----------------------\n+\n+   function Digits_From_Size (Size : Pos) return Pos is\n+   begin\n+      case Size is\n+         when  32    => return  6;\n+         when  48    => return  9;\n+         when  64    => return 15;\n+         when  96    => return 18;\n+         when 128    => return 18;\n+         when others => raise Program_Error;\n+      end case;\n+   end Digits_From_Size;\n+\n+   -----------------------------\n+   -- Register_Back_End_Types --\n+   -----------------------------\n+\n+   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc) is\n+      Float_Str  : C_String := (others => ASCII.NUL);\n+      Double_Str : C_String := (others => ASCII.NUL);\n+\n+   begin\n+      Float_Str (Float_Str'First .. Float_Str'First + 4) := \"float\";\n+      Call_Back\n+        (C_Name => Float_Str, Digs => 6, Complex => False, Count  => 0,\n+         Float_Rep => IEEE_Binary,\n+         Precision => 32, Size => 32, Alignment => 32);\n+\n+      Double_Str (Double_Str'First .. Double_Str'First + 5) := \"double\";\n+      Call_Back\n+        (C_Name    => Double_Str,\n+         Digs      => 15,\n+         Complex   => False,\n+         Count     => 0,\n+         Float_Rep => IEEE_Binary,\n+         Precision => 64,\n+         Size      => 64,\n+         Alignment => 64);\n+   end Register_Back_End_Types;\n+\n+   ---------------------\n+   -- Width_From_Size --\n+   ---------------------\n+\n+   function Width_From_Size  (Size : Pos) return Pos is\n+   begin\n+      case Size is\n+         when  8     => return  4;\n+         when 16     => return  6;\n+         when 32     => return 11;\n+         when 64     => return 21;\n+         when others => raise Program_Error;\n+      end case;\n+   end Width_From_Size;\n+\n+   ------------------------------\n+   -- Get_Back_End_Config_File --\n+   ------------------------------\n+\n+   function Get_Back_End_Config_File return String_Ptr is\n+\n+      function Exec_Name return String;\n+      --  Return name of the current executable (from argv[0])\n+\n+      function Get_Target_File (Dir : String) return String_Ptr;\n+      --  Return Dir & \"target.atp\" if found, null otherwise\n+\n+      ---------------\n+      -- Exec_Name --\n+      ---------------\n+\n+      function Exec_Name return String is\n+         type Arg_Array is array (Nat) of Big_String_Ptr;\n+         type Arg_Array_Ptr is access all Arg_Array;\n+\n+         gnat_argv : Arg_Array_Ptr;\n+         pragma Import (C, gnat_argv);\n+\n+      begin\n+         for J in 1 .. Natural'Last loop\n+            if gnat_argv (0) (J) = ASCII.NUL then\n+               return gnat_argv (0) (1 .. J - 1);\n+            end if;\n+         end loop;\n+\n+         raise Program_Error;\n+      end Exec_Name;\n+\n+      ---------------------\n+      -- Get_Target_File --\n+      ---------------------\n+\n+      function Get_Target_File (Dir : String) return String_Ptr is\n+         F : constant String := Dir & \"target.atp\";\n+      begin\n+         if Is_Regular_File (F) then\n+            return new String'(F);\n+         else\n+            return null;\n+         end if;\n+      end Get_Target_File;\n+\n+      Exec : constant String := Exec_Name;\n+\n+   --  Start of processing for Get_Back_End_Config_File\n+\n+   begin\n+      if Is_Absolute_Path (Exec) then\n+         return Get_Target_File (Dir_Name (Exec));\n+      else\n+         return Get_Target_File (Dir_Name (Locate_Exec_On_Path (Exec).all));\n+      end if;\n+   end Get_Back_End_Config_File;\n+\n+end Get_Targ;"}]}