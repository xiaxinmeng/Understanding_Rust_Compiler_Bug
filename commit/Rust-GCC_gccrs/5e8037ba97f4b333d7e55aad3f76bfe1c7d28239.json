{"sha": "5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4MDM3YmE5N2Y0YjMzM2Q3ZTU1YWFkM2Y3NmJmZTFjN2QyODIzOQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-09-12T15:48:32Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-09-12T15:48:32Z"}, "message": "Implement P0253R1, Fixing a design mistake in the searchers interface in Library Fundamentals.\n\n\tImplement P0253R1, Fixing a design mistake in the searchers\n\tinterface in Library Fundamentals.\n\t* include/std/functional: (utility): New include in C++17 mode.\n\t(default_searcher): Use a pair as return type, adjust the definition.\n\t(boyer_moore_searcher): Likewise.\n\t(boyer_moore_horspool_searcher): Likewise.\n\t* testsuite/20_util/function_objects/searchers.cc: Adjust.\n\nFrom-SVN: r240094", "tree": {"sha": "d8fd695a5cdafbb9e2e0a2b3232acc42f752690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8fd695a5cdafbb9e2e0a2b3232acc42f752690c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82dfb8d4e4292c1faab743ada2051a432f68ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82dfb8d4e4292c1faab743ada2051a432f68ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82dfb8d4e4292c1faab743ada2051a432f68ff6"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "7ae3433cfd269ebec7cb7b31eea8a55105b965ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "patch": "@@ -1,3 +1,13 @@\n+2016-09-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0253R1, Fixing a design mistake in the searchers\n+\tinterface in Library Fundamentals.\n+\t* include/std/functional: (utility): New include in C++17 mode.\n+\t(default_searcher): Use a pair as return type, adjust the definition.\n+\t(boyer_moore_searcher): Likewise.\n+\t(boyer_moore_horspool_searcher): Likewise.\n+\t* testsuite/20_util/function_objects/searchers.cc: Adjust.\n+\n 2016-09-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement C++17 string searchers."}, {"sha": "c750a8374bc1daca953ee6c88a11b962230d0ee1", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "patch": "@@ -62,6 +62,7 @@\n #include <unordered_map>\n #include <vector>\n #include <array>\n+#include <utility>\n #include <bits/stl_algo.h>\n #endif\n \n@@ -2217,12 +2218,17 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       { }\n \n       template<typename _ForwardIterator2>\n-\t_ForwardIterator2\n+        pair<_ForwardIterator2, _ForwardIterator2>\n \toperator()(_ForwardIterator2 __first, _ForwardIterator2 __last) const\n \t{\n-\t  return std::search(__first, __last,\n-\t\t\t     std::get<0>(_M_m), std::get<1>(_M_m),\n-\t\t\t     std::get<2>(_M_m));\n+\t  _ForwardIterator2 __first_ret =\n+\t    std::search(__first, __last,\n+\t\t\tstd::get<0>(_M_m), std::get<1>(_M_m),\n+\t\t\tstd::get<2>(_M_m));\n+\t  _ForwardIterator2 __second_ret = __first_ret == __last ?\n+\t    __last :  std::next(__first_ret, std::distance(std::get<0>(_M_m),\n+\t\t\t\t\t\t\t   std::get<1>(_M_m)));\n+\t  return std::make_pair(__first_ret, __second_ret);\n \t}\n \n     private:\n@@ -2328,7 +2334,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t\t\t   _BinaryPredicate __pred = _BinaryPredicate());\n \n       template<typename _RandomAccessIterator2>\n-\t_RandomAccessIterator2\n+        pair<_RandomAccessIterator2, _RandomAccessIterator2>\n \toperator()(_RandomAccessIterator2 __first,\n \t\t   _RandomAccessIterator2 __last) const;\n \n@@ -2389,26 +2395,27 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       { }\n \n       template<typename _RandomAccessIterator2>\n-\t_RandomAccessIterator2\n+        pair<_RandomAccessIterator2, _RandomAccessIterator2>\n \toperator()(_RandomAccessIterator2 __first,\n \t\t   _RandomAccessIterator2 __last) const\n \t{\n \t  const auto& __pred = this->_M_pred();\n \t  auto __patlen = _M_pat_end - _M_pat;\n \t  if (__patlen == 0)\n-\t    return __first;\n+\t    return std::make_pair(__first, __first);\n \t  auto __len = __last - __first;\n \t  while (__len >= __patlen)\n \t    {\n \t      for (auto __scan = __patlen - 1;\n \t\t   __pred(__first[__scan], _M_pat[__scan]); --__scan)\n \t\tif (__scan == 0)\n-\t\t  return __first;\n+\t\t  return std::make_pair(__first,\n+\t\t\t\t\tstd::next(__first, __patlen));\n \t      auto __shift = _M_bad_char_shift(__first[__patlen - 1]);\n \t      __len -= __shift;\n \t      __first += __shift;\n \t    }\n-\t  return __last;\n+\t  return std::make_pair(__last, __last);\n \t}\n \n     private:\n@@ -2479,14 +2486,14 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n   template<typename _RAIter, typename _Hash, typename _BinaryPredicate>\n   template<typename _RandomAccessIterator2>\n-    _RandomAccessIterator2\n+    pair<_RandomAccessIterator2, _RandomAccessIterator2>\n     boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::\n     operator()(_RandomAccessIterator2 __first,\n \t       _RandomAccessIterator2 __last) const\n     {\n       auto __patlen = _M_pat_end - _M_pat;\n       if (__patlen == 0)\n-\treturn __first;\n+\treturn std::make_pair(__first, __first);\n       const auto& __pred = this->_M_pred();\n       __diff_type __i = __patlen - 1;\n       auto __stringlen = __last - __first;\n@@ -2499,11 +2506,12 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t      --__j;\n \t    }\n \t  if (__j < 0)\n-\t    return __first + __i + 1;\n+\t    return std::make_pair(__first + __i + 1, std::next(__first,\n+\t\t\t\t\t\t\t       __patlen));\n \t  __i += std::max(_M_bad_char_shift(__first[__i]),\n \t\t\t  _M_good_suffix[__j]);\n \t}\n-      return __last;\n+      return std::make_pair(__last, __last);\n     }\n \n #endif"}, {"sha": "1c7276207d9fb99fa4eddd77171b28b0cea351f9", "filename": "libstdc++-v3/testsuite/20_util/function_objects/searchers.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8037ba97f4b333d7e55aad3f76bfe1c7d28239/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc?ref=5e8037ba97f4b333d7e55aad3f76bfe1c7d28239", "patch": "@@ -52,11 +52,11 @@ test01()\n       auto he = h + std::strlen(h);\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n-      VERIFY( d_res == res );\n+      VERIFY( d_res.first == res );\n       auto bm_res = bm(h, he);\n-      VERIFY( bm_res == res );\n+      VERIFY( bm_res.first == res );\n       auto bmh_res = bmh(h, he);\n-      VERIFY( bmh_res == res );\n+      VERIFY( bmh_res.first == res );\n     }\n   }\n }\n@@ -85,11 +85,11 @@ test02()\n       auto he = h + std::wcslen(h);\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n-      VERIFY( d_res == res );\n+      VERIFY( d_res.first == res );\n       auto bm_res = bm(h, he);\n-      VERIFY( bm_res == res );\n+      VERIFY( bm_res.first == res );\n       auto bmh_res = bmh(h, he);\n-      VERIFY( bmh_res == res );\n+      VERIFY( bmh_res.first == res );\n     }\n   }\n #endif\n@@ -122,11 +122,11 @@ test03()\n \n   auto res = std::search(haystack, he, needle, ne, eq);\n   auto d_res = d(haystack, he);\n-  VERIFY( d_res == res );\n+  VERIFY( d_res.first == res );\n   auto bm_res = bm(haystack, he);\n-  VERIFY( bm_res == res );\n+  VERIFY( bm_res.first == res );\n   auto bmh_res = bmh(haystack, he);\n-  VERIFY( bmh_res == res );\n+  VERIFY( bmh_res.first == res );\n }\n \n int"}]}