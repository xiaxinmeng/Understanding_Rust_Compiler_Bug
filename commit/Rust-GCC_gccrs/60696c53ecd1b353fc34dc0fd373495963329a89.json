{"sha": "60696c53ecd1b353fc34dc0fd373495963329a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2OTZjNTNlY2QxYjM1M2ZjMzRkYzBmZDM3MzQ5NTk2MzMyOWE4OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-19T15:12:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-19T15:12:33Z"}, "message": "decl2.c (arg_assoc_class): Fix double iteration logic.\n\n        * decl2.c (arg_assoc_class): Fix double iteration logic.\n\n        * init.c (build_delete): Always call convert_force to strip cv-quals.\n\n        * decl2.c (flag_new_abi): Depend on ENABLE_NEW_GXX_ABI.\n        * lang-specs.h: Default ABI depends on ENABLE_NEW_GXX_ABI.\n        * g++spec.c: Don't look at ENABLE_NEW_GXX_ABI.\n\nFrom-SVN: r39133", "tree": {"sha": "a9789534eb58f67c343012adcc54c69ac3f67661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9789534eb58f67c343012adcc54c69ac3f67661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60696c53ecd1b353fc34dc0fd373495963329a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60696c53ecd1b353fc34dc0fd373495963329a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60696c53ecd1b353fc34dc0fd373495963329a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60696c53ecd1b353fc34dc0fd373495963329a89/comments", "author": null, "committer": null, "parents": [{"sha": "1e00f18c429f2d54fae23259eb37b81caec583f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e00f18c429f2d54fae23259eb37b81caec583f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e00f18c429f2d54fae23259eb37b81caec583f2"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "661e6922b6bdd1815b9dc0813002b60246a50a3b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60696c53ecd1b353fc34dc0fd373495963329a89", "patch": "@@ -1,3 +1,15 @@\n+2001-01-19  Ute Pelkmann  <scope.muc@t-online.de>\n+\n+\t* decl2.c (arg_assoc_class): Fix double iteration logic.\n+\n+2001-01-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (build_delete): Always call convert_force to strip cv-quals.\n+\n+\t* decl2.c (flag_new_abi): Depend on ENABLE_NEW_GXX_ABI.\n+\t* lang-specs.h: Default ABI depends on ENABLE_NEW_GXX_ABI.\n+\t* g++spec.c: Don't look at ENABLE_NEW_GXX_ABI.\n+\n 2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* search.c (get_vbase_1): Count only virtual bases."}, {"sha": "18b864b730c0219b176e251b5ceea0f5901a56d4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=60696c53ecd1b353fc34dc0fd373495963329a89", "patch": "@@ -417,7 +417,11 @@ int flag_weak = 1;\n \n /* Nonzero to enable experimental ABI changes.  */\n \n+#if ENABLE_NEW_GXX_ABI\n+int flag_new_abi = 1;\n+#else\n int flag_new_abi;\n+#endif\n \n /* Nonzero to use __cxa_atexit, rather than atexit, to register\n    destructors for local statics and global objects.  */\n@@ -4846,9 +4850,9 @@ arg_assoc_class (k, type)\n \t   friends = TREE_CHAIN (friends))\n \t/* Only interested in global functions with potentially hidden\n            (i.e. unqualified) declarations. */\n-\tif (TREE_PURPOSE (list) == error_mark_node && TREE_VALUE (list)\n-\t    && decl_namespace (TREE_VALUE (list)) == context)\n-\t  if (add_function (k, TREE_VALUE (list)))\n+\tif (TREE_PURPOSE (friends) == error_mark_node && TREE_VALUE (friends)\n+\t    && decl_namespace (TREE_VALUE (friends)) == context)\n+\t  if (add_function (k, TREE_VALUE (friends)))\n \t    return 1;\n \n   /* Process template arguments.  */"}, {"sha": "1d18a081f961832df7b9056a2f9f07b1f25b3be1", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=60696c53ecd1b353fc34dc0fd373495963329a89", "patch": "@@ -94,10 +94,6 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   /* The total number of arguments with the new stuff.  */\n   int num_args = 1;\n \n-#if ENABLE_NEW_GXX_ABI\n-  added++;\n-#endif\n-\n   argc = *in_argc;\n   argv = *in_argv;\n   added_libraries = *in_added_libraries;\n@@ -211,13 +207,6 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   /* Copy the 0th argument, i.e., the name of the program itself.  */\n   arglist[i++] = argv[j++];\n \n-#if ENABLE_NEW_GXX_ABI\n-  /* If we should use the new ABI by default, add the appropriate flag\n-     to cc1plus here.  We put this first so that it can be overridden\n-     by other command-line options.  */\n-  arglist[j++] = \"-fnew-abi\";\n-#endif\n-\n   /* NOTE: We start at 1 now, not 0.  */\n   while (i < argc)\n     {"}, {"sha": "3105ff7c9c022ea77cdc09f30aa182c703f8eec0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=60696c53ecd1b353fc34dc0fd373495963329a89", "patch": "@@ -3228,10 +3228,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n       if (TREE_SIDE_EFFECTS (addr))\n \taddr = save_expr (addr);\n \n-      if (TREE_CONSTANT (addr))\n-\taddr = convert_pointer_to (type, addr);\n-      else\n-\taddr = convert_force (build_pointer_type (type), addr, 0);\n+      addr = convert_force (build_pointer_type (type), addr, 0);\n \n       ref = build_indirect_ref (addr, NULL_PTR);\n     }\n@@ -3240,7 +3237,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \n   if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n     {\n-      if (auto_delete == sfk_base_destructor)\n+      if (auto_delete != sfk_deleting_destructor)\n \treturn void_zero_node;\n \n       return build_op_delete_call"}, {"sha": "210255e3e8b2c4722f02e23fdc9b86302f4f688a", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60696c53ecd1b353fc34dc0fd373495963329a89/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=60696c53ecd1b353fc34dc0fd373495963329a89", "patch": "@@ -31,6 +31,25 @@ Boston, MA 02111-1307, USA.  */\n   {\"@c++\",\n    /* cc1plus has an integrated ISO C preprocessor.  We should invoke\n       the external preprocessor if -save-temps is given.  */\n+#if ENABLE_NEW_GXX_ABI\n+    \"%{E|M|MM:cpp0 -lang-c++ -D_GNU_SOURCE %{!no-gcc:-D__GNUG__=%v1}\\\n+       %{!fno-new-abi:-D__GXX_ABI_VERSION=100}\\\n+       %{ansi:-D__STRICT_ANSI__ -trigraphs -$} %(cpp_options)}\\\n+     %{!E:%{!M:%{!MM:\\\n+       %{save-temps:cpp0 -lang-c++ -D_GNU_SOURCE \\\n+\t\t    %{!no-gcc:-D__GNUG__=%v1}\\\n+\t\t    %{!fno-new-abi:-D__GXX_ABI_VERSION=100}\\\n+\t\t    %{ansi:-D__STRICT_ANSI__ -trigraphs -$}\\\n+\t\t    %(cpp_options) %b.ii \\n}\\\n+      cc1plus %{save-temps:-fpreprocessed %b.ii}\\\n+              %{!save-temps:%(cpp_options)\\\n+\t\t\t    %{!no-gcc:-D__GNUG__=%v1} -D_GNU_SOURCE \\\n+\t\t\t    %{!fno-new-abi:-D__GXX_ABI_VERSION=100}\\\n+\t\t\t    %{ansi:-D__STRICT_ANSI__}}\\\n+       %{ansi:-trigraphs -$}\\\n+       %(cc1_options) %2 %{+e1*}\\\n+       %{!fsyntax-only:%(invoke_as)}}}}\"\n+#else\n     \"%{E|M|MM:cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-D__STRICT_ANSI__ -trigraphs -$} %(cpp_options)}\\\n@@ -47,7 +66,9 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t    %{ansi:-D__STRICT_ANSI__}}\\\n        %{ansi:-trigraphs -$}\\\n        %(cc1_options) %2 %{+e*}\\\n-       %{!fsyntax-only:%(invoke_as)}}}}\"},\n+       %{!fsyntax-only:%(invoke_as)}}}}\"\n+#endif\n+     },\n   {\".ii\", \"@c++-cpp-output\"},\n   {\"@c++-cpp-output\",\n    \"%{!M:%{!MM:%{!E:\\"}]}