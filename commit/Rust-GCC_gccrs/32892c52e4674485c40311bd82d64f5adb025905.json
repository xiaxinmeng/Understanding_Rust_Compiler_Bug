{"sha": "32892c52e4674485c40311bd82d64f5adb025905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4OTJjNTJlNDY3NDQ4NWM0MDMxMWJkODJkNjRmNWFkYjAyNTkwNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-12T14:22:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-12T14:22:45Z"}, "message": "c-typeck.c (process_init_element): Avoid union init warnings on floating point zero.\n\n\t* c-typeck.c (process_init_element): Avoid union init warnings on\n\tfloating point zero.  Don't crash on unions containing structs.\n\ntestsuite:\n\t* gcc.dg/wtr-union-init-2.c, gcc.dg/wtr-union-init-3.c: New tests.\n\nFrom-SVN: r36358", "tree": {"sha": "6aaa48ffc7686f85463cf81cf5f0dc0142e4c76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aaa48ffc7686f85463cf81cf5f0dc0142e4c76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32892c52e4674485c40311bd82d64f5adb025905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32892c52e4674485c40311bd82d64f5adb025905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32892c52e4674485c40311bd82d64f5adb025905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32892c52e4674485c40311bd82d64f5adb025905/comments", "author": null, "committer": null, "parents": [{"sha": "ae0a1c23b769ac9d8fa1b572b5effcb7a275a494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0a1c23b769ac9d8fa1b572b5effcb7a275a494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0a1c23b769ac9d8fa1b572b5effcb7a275a494"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "2e7d3cc259959dbb4535fb40311b8b8e3a8d12ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32892c52e4674485c40311bd82d64f5adb025905/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32892c52e4674485c40311bd82d64f5adb025905/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32892c52e4674485c40311bd82d64f5adb025905", "patch": "@@ -1,3 +1,8 @@\n+2000-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-typeck.c (process_init_element): Avoid union init warnings on\n+\tfloating point zero.  Don't crash on unions containing structs.\n+\n 2000-09-12  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.h (PREDICATE_CODES): Add CONST_DOUBLE to"}, {"sha": "002d4e704fe9121f44fc28e69efbf785c27b2995", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=32892c52e4674485c40311bd82d64f5adb025905", "patch": "@@ -6394,7 +6394,8 @@ process_init_element (value)\n \t     code appears conditioned on e.g. __STDC__ to avoid\n \t     \"missing initializer\" warnings and relies on default\n \t     initialization to zero in the traditional C case.  */\n-\t  if (warn_traditional && !in_system_header && !integer_zerop (value))\n+\t  if (warn_traditional && !in_system_header\n+\t      && !(value && (integer_zerop (value) || real_zerop (value))))\n \t    warning (\"traditional C rejects initialization of unions\");\n \n \t  /* Accept a string constant to initialize a subarray.  */"}, {"sha": "ab9be1b1c41647da6af8599643f9c44e8a2b2849", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32892c52e4674485c40311bd82d64f5adb025905", "patch": "@@ -1,3 +1,7 @@\n+2000-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/wtr-union-init-2.c, gcc.dg/wtr-union-init-3.c: New tests.\n+\n 2000-09-11  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/cpp/backslash.c: New test."}, {"sha": "3c2aad71111142ab04e8e2e22061aa2555b214e2", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c?ref=32892c52e4674485c40311bd82d64f5adb025905", "patch": "@@ -0,0 +1,45 @@\n+/* Test for -Wtraditional warnings on union initialization.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 9/11/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+union foo1\n+{\n+  float f;\n+  int i;\n+  long l;\n+};\n+\n+union foo2\n+{\n+  int i;\n+  float f;\n+  long l;\n+};\n+\n+void\n+testfunc (void)\n+{\n+  /* Note we only warn for non-zero initializers.  */\n+  static union foo1 f1 = {0};\n+  static union foo2 f2 = {0};\n+  static union foo1 f3 = {1}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+  static union foo2 f4 = {1}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+  static union foo1 f5 = {0.0};\n+  static union foo2 f6 = {0.0};\n+  static union foo1 f7 = {1.0}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+  static union foo2 f8 = {1.0}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+\n+#line 35 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  static union foo1 b1 = {0};\n+  static union foo2 b2 = {0};\n+  static union foo1 b3 = {1};\n+  static union foo2 b4 = {1};\n+  static union foo1 b5 = {0.0};\n+  static union foo2 b6 = {0.0};\n+  static union foo1 b7 = {1.0};\n+  static union foo2 b8 = {1.0};\n+}"}, {"sha": "3eec29e0c748a17ae66844f746efd00f9aed7255", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32892c52e4674485c40311bd82d64f5adb025905/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c?ref=32892c52e4674485c40311bd82d64f5adb025905", "patch": "@@ -0,0 +1,64 @@\n+/* Test for -Wtraditional warnings on union initialization.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 9/11/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+struct bar\n+{\n+  int i;\n+  long j;\n+};\n+\n+union foo\n+{\n+  struct bar b;\n+  int i;\n+  long l;\n+};\n+\n+union foo2\n+{\n+  int i;\n+  long l;\n+};\n+\n+struct baz\n+{\n+  int a;\n+  double b;\n+  union foo c;\n+};\n+\n+struct baz2\n+{\n+  int a;\n+  double b;\n+  union foo2 c;\n+};\n+\n+void\n+testfunc (void)\n+{\n+  /* Note we only warn for non-zero initializers.  Xfail on substructures. */\n+  static union foo f1 = {{0,0}}; /* { dg-bogus \"traditional C rejects initialization of unions\" \"initialization of unions\" { xfail *-*-* } } */\n+  static union foo f2 = {{1,1}}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+\n+  static struct baz f3 = { 1, 2, {{0,0}} }; /* { dg-bogus \"traditional C rejects initialization of unions\" \"initialization of unions\" { xfail *-*-* } } */\n+  static struct baz f4 = { 1, 2, {{1,1}} }; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+\n+  static struct baz2 f5 = { 1, 2, {0} };\n+  static struct baz2 f6 = { 1, 2, {1} }; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+\n+#line 54 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  static union foo b1 = {{0,0}};\n+  static union foo b2 = {{1,1}};\n+\n+  static struct baz b3 = { 1, 2, {{0,0}} };\n+  static struct baz b4 = { 1, 2, {{1,1}} };\n+\n+  static struct baz2 b5 = { 1, 2, {0} };\n+  static struct baz2 b6 = { 1, 2, {1} };\n+}"}]}