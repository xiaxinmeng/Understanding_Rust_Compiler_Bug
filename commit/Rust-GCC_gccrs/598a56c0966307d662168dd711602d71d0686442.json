{"sha": "598a56c0966307d662168dd711602d71d0686442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4YTU2YzA5NjYzMDdkNjYyMTY4ZGQ3MTE2MDJkNzFkMDY4NjQ0Mg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2015-05-22T13:04:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T13:04:01Z"}, "message": "sem_ch10.adb (Analyze_With_Clause): In ASIS_Mode...\n\n2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Analyze_With_Clause): In ASIS_Mode, a\n\tlimited_with clause on a predefined unit is not transformed into\n\ta regular with_clause, to preserve the original tree structure.\n\t* sinfo.ads (N_With_Clause): Add comment on handling of\n\tLimited_With.\n\t* sem_ch10.adb: Minor reformatting.\n\n2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Freeze_Profile): A limited view of a type in\n\tthe profile of a subprogram renaming does not require freezing,\n\tbecause it is declared in a different unit.\n\n2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Get_Constraint_Association): If type (of ancestor\n\tcomposite type) is private, go to full view. This was previously\n\tdone only in an instance context, but is happen whenever a chain\n\tof private extensions includes one inherited discriminant.\n\nFrom-SVN: r223565", "tree": {"sha": "af9490147cd33305113f8c7f62a21b6d504f4984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af9490147cd33305113f8c7f62a21b6d504f4984"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598a56c0966307d662168dd711602d71d0686442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a56c0966307d662168dd711602d71d0686442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598a56c0966307d662168dd711602d71d0686442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a56c0966307d662168dd711602d71d0686442/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee93527368e112d1f2a9b0e739fc513eff3e048e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee93527368e112d1f2a9b0e739fc513eff3e048e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee93527368e112d1f2a9b0e739fc513eff3e048e"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "7482e0ccc5d068879be8d0d382ca19001d83321a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=598a56c0966307d662168dd711602d71d0686442", "patch": "@@ -1,3 +1,25 @@\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_With_Clause): In ASIS_Mode, a\n+\tlimited_with clause on a predefined unit is not transformed into\n+\ta regular with_clause, to preserve the original tree structure.\n+\t* sinfo.ads (N_With_Clause): Add comment on handling of\n+\tLimited_With.\n+\t* sem_ch10.adb: Minor reformatting.\n+\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Freeze_Profile): A limited view of a type in\n+\tthe profile of a subprogram renaming does not require freezing,\n+\tbecause it is declared in a different unit.\n+\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Get_Constraint_Association): If type (of ancestor\n+\tcomposite type) is private, go to full view. This was previously\n+\tdone only in an instance context, but is happen whenever a chain\n+\tof private extensions includes one inherited discriminant.\n+\n 2015-05-22  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads: Minor comment updates."}, {"sha": "8651074d4929263490aea5902d792567d123a9a5", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=598a56c0966307d662168dd711602d71d0686442", "patch": "@@ -2065,19 +2065,18 @@ package body Exp_Aggr is\n       begin\n          Typ := T;\n \n-         --  Handle private types in instances\n+         --  If type is private, get constraint from full view. This was\n+         --  previously done in an instance context, but is needed whenever\n+         --  the ancestor part has a discriminant, possibly inherited through\n+         --  multiple derivations.\n \n-         if In_Instance\n-           and then Is_Private_Type (Typ)\n-           and then Present (Full_View (Typ))\n-         then\n+         if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n             Typ := Full_View (Typ);\n          end if;\n \n          Indic := Subtype_Indication (Type_Definition (Parent (Typ)));\n \n-         --  ??? Also need to cover case of a type mark denoting a subtype\n-         --  with constraint.\n+         --  Verify that the subtype indication carries a constraint\n \n          if Nkind (Indic) = N_Subtype_Indication\n            and then Present (Constraint (Indic))"}, {"sha": "55456e6996febc497de0f9962e53c8b298c6cf44", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=598a56c0966307d662168dd711602d71d0686442", "patch": "@@ -2560,6 +2560,12 @@ package body Sem_Ch10 is\n \n          if Sloc (U) /= No_Location then\n             if Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (U)))\n+\n+              --  In ASIS mode the rtsfind mechanism plays no role, and\n+              --  we need to maintain the original tree structure, so\n+              --  this transformation is not performed in this case.\n+\n+              and then not ASIS_Mode\n             then\n                Set_Limited_Present (N, False);\n                Analyze_With_Clause (N);"}, {"sha": "689aa8ddd7bbd88ee519c1dc5d67232b4be22da1", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=598a56c0966307d662168dd711602d71d0686442", "patch": "@@ -2493,8 +2493,7 @@ package body Sem_Ch8 is\n             end loop;\n \n             if Ekind (Formal_Spec) = E_Function\n-              and then Ekind (Etype (Formal_Spec)) = E_Incomplete_Type\n-              and then not Is_Tagged_Type (Etype (F))\n+              and then not Is_Tagged_Type (Etype (Formal_Spec))\n             then\n                Has_Untagged_Inc := True;\n             end if;\n@@ -2514,6 +2513,13 @@ package body Sem_Ch8 is\n                        or else Is_Generic_Type (Root_Type (Etype (F)))\n                      then\n                         null;\n+\n+                     --  A limited view of a type declared elsewhere needs no\n+                     --  freezing actions.\n+\n+                     elsif From_Limited_With (Etype (F)) then\n+                        null;\n+\n                      else\n                         Error_Msg_NE\n                           (\"type& must be frozen before this point\","}, {"sha": "4af7b5424ee7911c21d296863b8b660283983c3a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a56c0966307d662168dd711602d71d0686442/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=598a56c0966307d662168dd711602d71d0686442", "patch": "@@ -521,6 +521,9 @@ package Sinfo is\n    --      simply ignore these nodes, since they are not relevant to the task\n    --      of back annotating representation information.\n \n+   --  Some other ASIS-specific issues are covered in specific comments in\n+   --  sections for particular nodes or flags.\n+\n    ----------------\n    -- Ghost Mode --\n    ----------------\n@@ -6384,6 +6387,13 @@ package Sinfo is\n       --  Similarly, Private_Present is used to support the implementation of\n       --  Ada 2005 (AI-50262).\n \n+      --  Note: if the WITH clause refers to a standard library unit, then a\n+      --  limited with clause is changed into a normal with clause, because we\n+      --  are not prepared to deal with limited with in the context of Rtsfind.\n+      --  So in this case, the Limited_Present flag will be False in the final\n+      --  tree. However, we do NOT do this transformation in ASIS mode, so for\n+      --  ASIS the flag will remain set in this situation.\n+\n       ----------------------\n       -- With_Type clause --\n       ----------------------"}]}