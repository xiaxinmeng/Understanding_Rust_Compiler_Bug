{"sha": "c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4NzBmNWQxNWY1ZjI3NDhkNGM5YzI5ZDMwMTc5NmQyZjdhYjJlOA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-06-23T07:31:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-06-23T07:31:23Z"}, "message": "Makefile.def (stagefeedback): Come after profile.\n\n2005-06-22  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.def (stagefeedback): Come after profile.\n\tDefine profiledbootstrap target.\n\t* Makefile.tpl (profiledbootstrap): Remove.\n\t(stageprofile-end): Zap stagefeedback.\n\t(stagefeedback-start): Copy all .gcda files, not only GCC's.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r101263", "tree": {"sha": "0f8d957a740a50dcfea2cff94d3195228eef46ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8d957a740a50dcfea2cff94d3195228eef46ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09102896e847e9fb91d894d4735c92d690b195a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09102896e847e9fb91d894d4735c92d690b195a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09102896e847e9fb91d894d4735c92d690b195a8"}], "stats": {"total": 125, "additions": 55, "deletions": 70}, "files": [{"sha": "191437911bb6e8681e33687f14d23044348693bf", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "patch": "@@ -1,3 +1,12 @@\n+2005-06-22  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.def (stagefeedback): Come after profile.\n+\tDefine profiledbootstrap target.\n+\t* Makefile.tpl (profiledbootstrap): Remove.\n+\t(stageprofile-end): Zap stagefeedback.\n+\t(stagefeedback-start): Copy all .gcda files, not only GCC's.\n+\t* Makefile.in: Regenerate.\n+\n 2005-06-13  Richard Sandiford  <richard@codesourcery.com>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "bba06309ef80039213ec701b4308a7b974fd7d02", "filename": "Makefile.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "patch": "@@ -473,6 +473,7 @@ bootstrap_stage = {\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n \tstage_make_flags='CFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"' ; };\n bootstrap_stage = {\n-\tid=feedback ; prev=1 ;\n+\tid=feedback ; prev=profile ;\n+\tbootstrap_target=profiledbootstrap ;\n \tstage_configure_flags=\"@stage2_werror_flag@\" ;\n \tstage_make_flags='CFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"' ; };"}, {"sha": "3748f321e2ea8b596c3f68bc8f93978454e21e50", "filename": "Makefile.in", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "patch": "@@ -34363,79 +34363,79 @@ stagefeedback-start::\n \t  mkdir stagefeedback-bfd; \\\n \tset stagefeedback-bfd bfd ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-bfd prev-bfd ; \\\n+\tset stageprofile-bfd prev-bfd ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif bfd\n @if opcodes\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-opcodes ] || \\\n \t  mkdir stagefeedback-opcodes; \\\n \tset stagefeedback-opcodes opcodes ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-opcodes prev-opcodes ; \\\n+\tset stageprofile-opcodes prev-opcodes ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif opcodes\n @if binutils\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-binutils ] || \\\n \t  mkdir stagefeedback-binutils; \\\n \tset stagefeedback-binutils binutils ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-binutils prev-binutils ; \\\n+\tset stageprofile-binutils prev-binutils ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif binutils\n @if gas\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-gas ] || \\\n \t  mkdir stagefeedback-gas; \\\n \tset stagefeedback-gas gas ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-gas prev-gas ; \\\n+\tset stageprofile-gas prev-gas ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif gas\n @if gcc\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-gcc ] || \\\n \t  mkdir stagefeedback-gcc; \\\n \tset stagefeedback-gcc gcc ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-gcc prev-gcc ; \\\n+\tset stageprofile-gcc prev-gcc ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif gcc\n @if intl\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-intl ] || \\\n \t  mkdir stagefeedback-intl; \\\n \tset stagefeedback-intl intl ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-intl prev-intl ; \\\n+\tset stageprofile-intl prev-intl ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif intl\n @if ld\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-ld ] || \\\n \t  mkdir stagefeedback-ld; \\\n \tset stagefeedback-ld ld ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-ld prev-ld ; \\\n+\tset stageprofile-ld prev-ld ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif ld\n @if libcpp\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-libcpp ] || \\\n \t  mkdir stagefeedback-libcpp; \\\n \tset stagefeedback-libcpp libcpp ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-libcpp prev-libcpp ; \\\n+\tset stageprofile-libcpp prev-libcpp ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif libcpp\n @if libiberty\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-libiberty ] || \\\n \t  mkdir stagefeedback-libiberty; \\\n \tset stagefeedback-libiberty libiberty ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-libiberty prev-libiberty ; \\\n+\tset stageprofile-libiberty prev-libiberty ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif libiberty\n @if zlib\n \t@cd $(HOST_SUBDIR); [ -d stagefeedback-zlib ] || \\\n \t  mkdir stagefeedback-zlib; \\\n \tset stagefeedback-zlib zlib ; \\\n \t@CREATE_LINK_TO_DIR@  ; \\\n-\tset stage1-zlib prev-zlib ; \\\n+\tset stageprofile-zlib prev-zlib ; \\\n \t@CREATE_LINK_TO_DIR@ \n @endif zlib\n \n@@ -34444,70 +34444,70 @@ stagefeedback-end::\n @if bfd\n \t@cd $(HOST_SUBDIR); set bfd stagefeedback-bfd ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-bfd stage1-bfd ; \\\n+\tset prev-bfd stageprofile-bfd ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif bfd\n @if opcodes\n \t@cd $(HOST_SUBDIR); set opcodes stagefeedback-opcodes ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-opcodes stage1-opcodes ; \\\n+\tset prev-opcodes stageprofile-opcodes ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif opcodes\n @if binutils\n \t@cd $(HOST_SUBDIR); set binutils stagefeedback-binutils ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-binutils stage1-binutils ; \\\n+\tset prev-binutils stageprofile-binutils ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif binutils\n @if gas\n \t@cd $(HOST_SUBDIR); set gas stagefeedback-gas ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-gas stage1-gas ; \\\n+\tset prev-gas stageprofile-gas ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif gas\n @if gcc\n \t@cd $(HOST_SUBDIR); set gcc stagefeedback-gcc ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-gcc stage1-gcc ; \\\n+\tset prev-gcc stageprofile-gcc ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif gcc\n @if intl\n \t@cd $(HOST_SUBDIR); set intl stagefeedback-intl ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-intl stage1-intl ; \\\n+\tset prev-intl stageprofile-intl ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif intl\n @if ld\n \t@cd $(HOST_SUBDIR); set ld stagefeedback-ld ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-ld stage1-ld ; \\\n+\tset prev-ld stageprofile-ld ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif ld\n @if libcpp\n \t@cd $(HOST_SUBDIR); set libcpp stagefeedback-libcpp ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-libcpp stage1-libcpp ; \\\n+\tset prev-libcpp stageprofile-libcpp ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif libcpp\n @if libiberty\n \t@cd $(HOST_SUBDIR); set libiberty stagefeedback-libiberty ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-libiberty stage1-libiberty ; \\\n+\tset prev-libiberty stageprofile-libiberty ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif libiberty\n @if zlib\n \t@cd $(HOST_SUBDIR); set zlib stagefeedback-zlib ; \\\n \t@UNDO_LINK_TO_DIR@  ; \\\n-\tset prev-zlib stage1-zlib ; \\\n+\tset prev-zlib stageprofile-zlib ; \\\n \t@UNDO_LINK_TO_DIR@ \n @endif zlib\n \n # Bubble a bugfix through all the stages up to stage feedback.  They\n # are remade, but not reconfigured.  The next stage (if any) will not\n # be reconfigured as well.\n .PHONY: stagefeedback-bubble\n-stagefeedback-bubble:: stage1-bubble\n-\t@if test -f stagefeedback-lean || test -f stage1-lean  ; then \\\n+stagefeedback-bubble:: stageprofile-bubble\n+\t@if test -f stagefeedback-lean || test -f stageprofile-lean  ; then \\\n \t  echo Skipping rebuild of stagefeedback ; \\\n \telse \\\n \t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stagefeedback; \\\n@@ -34522,9 +34522,12 @@ do-clean: clean-stagefeedback\n \n \n \n+.PHONY: profiledbootstrap\n+profiledbootstrap: stagefeedback-bubble  all\n+\n \n # Rules to wipe a stage and all the following ones, also used for cleanstrap\n-distclean-stage1:: distclean-stagefeedback \n+distclean-stageprofile:: distclean-stagefeedback \n .PHONY: distclean-stagefeedback\n distclean-stagefeedback::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n@@ -34535,32 +34538,18 @@ distclean-stagefeedback::\n \n \n \n-stagefeedback-start::\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tcd stageprofile-gcc && \\\n-\t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../gcc/&\",' | $(SHELL); } && \\\n-\t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../gcc/&\",' | $(SHELL); }\n+stageprofile-end::\n+\t$(MAKE) distclean-stagefeedback\n \n-# FIXME: Will not need to be conditional when toplevel bootstrap is the\n-# only possibility, but now it conflicts with no-bootstrap rules\n-@if gcc-bootstrap\n-profiledbootstrap:\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Bootstrapping the compiler\"; \\\n-\t$(MAKE) stageprofile-bubble distclean-stagefeedback\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries and training compiler\"; \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all\n+stagefeedback-start::\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Building feedback based compiler\"; \\\n-\t$(MAKE) stagefeedback-bubble stagefeedback-end\n-@endif gcc-bootstrap\n+\tfor i in prev-*; do \\\n+\t  j=`echo $$i | sed s/^prev-//` ; \\\n+\t  cd $$r/$$i && \\\n+\t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../'$$j'/&\",' | $(SHELL) ; } && \\\n+\t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../'$$j'/&\",' | $(SHELL) ; } ; \\\n+\tdone\n \n @if gcc-bootstrap\n NOTPARALLEL = .NOTPARALLEL"}, {"sha": "de6ee68be5c648e477e5ab195766d10ec998fbf4", "filename": "Makefile.tpl", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=c7870f5d15f5f2748d4c9c29d301796d2f7ab2e8", "patch": "@@ -1445,32 +1445,18 @@ distclean-stage[+id+]::\n \n [+ ENDFOR bootstrap-stage +]\n \n-stagefeedback-start::\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tcd stageprofile-gcc && \\\n-\t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../gcc/&\",' | $(SHELL); } && \\\n-\t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../gcc/&\",' | $(SHELL); }\n+stageprofile-end::\n+\t$(MAKE) distclean-stagefeedback\n \n-# FIXME: Will not need to be conditional when toplevel bootstrap is the\n-# only possibility, but now it conflicts with no-bootstrap rules\n-@if gcc-bootstrap\n-profiledbootstrap:\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Bootstrapping the compiler\"; \\\n-\t$(MAKE) stageprofile-bubble distclean-stagefeedback\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n-\techo \"Building runtime libraries and training compiler\"; \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all\n+stagefeedback-start::\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS) \\\n-\techo \"Building feedback based compiler\"; \\\n-\t$(MAKE) stagefeedback-bubble stagefeedback-end\n-@endif gcc-bootstrap\n+\tfor i in prev-*; do \\\n+\t  j=`echo $$i | sed s/^prev-//` ; \\\n+\t  cd $$r/$$i && \\\n+\t  { find . -type d | sort | sed 's,.*,$(SHELL) '\"$$s\"'/mkinstalldirs \"../'$$j'/&\",' | $(SHELL) ; } && \\\n+\t  { find . -name '*.*da' | sed 's,.*,$(LN) -f \"&\" \"../'$$j'/&\",' | $(SHELL) ; } ; \\\n+\tdone\n \n @if gcc-bootstrap\n NOTPARALLEL = .NOTPARALLEL"}]}