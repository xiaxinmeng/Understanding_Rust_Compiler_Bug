{"sha": "c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5MTE0NWE2NTVlZDZmZTE5MWMyZjdjZTMyMjBmMTllNDZkMmMzZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-03-03T11:32:32Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-03-03T11:32:32Z"}, "message": "cpp.texi: Update.\n\n        * cpp.texi: Update.\n        * cppexp.c (parse_number): Update.\n        * cpplex.c (parse_string): Pedwarn if multiline string does not\n        result from a system header's macro.\n        * cpplib.h (sys_objmacro_p): Rename sys_macro_p.\n        * cppmacro.c (sys_objmacro_p): Rename sys_macro_p.  Return true\n        for function-like macros too.\n\t* c-lex.c (parse_number): Update.\n\nFrom-SVN: r40211", "tree": {"sha": "13a0b2cea1a5401bbb4f81dfe7b01474a61b9a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13a0b2cea1a5401bbb4f81dfe7b01474a61b9a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/comments", "author": null, "committer": null, "parents": [{"sha": "4073aad5b5460710695ff3d15315e16c6549311e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4073aad5b5460710695ff3d15315e16c6549311e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4073aad5b5460710695ff3d15315e16c6549311e"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "c818ddcc81dfb28c20a83fb306dd4d0f574ce0a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -1,3 +1,14 @@\n+2001-03-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpp.texi: Update.\n+        * cppexp.c (parse_number): Update. \n+        * cpplex.c (parse_string): Pedwarn if multiline string does not\n+        result from a system header's macro.\n+        * cpplib.h (sys_objmacro_p): Rename sys_macro_p.\n+        * cppmacro.c (sys_objmacro_p): Rename sys_macro_p.  Return true\n+        for function-like macros too.\n+\t* c-lex.c (lex_number): Update.\n+\n 2001-03-03  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (output_call_frame_info): Fix augmentation length."}, {"sha": "1af7cd645daf1c787c8a019289c7804129dd1917", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -1227,7 +1227,7 @@ lex_number (str, len)\n \t    if (fflag)\n \t      ERROR (\"more than one 'f' suffix on floating constant\");\n \t    else if (warn_traditional && !in_system_header\n-\t\t     && ! cpp_sys_objmacro_p (parse_in))\n+\t\t     && ! cpp_sys_macro_p (parse_in))\n \t      warning (\"traditional C rejects the 'f' suffix\");\n \n \t    fflag = 1;\n@@ -1237,7 +1237,7 @@ lex_number (str, len)\n \t    if (lflag)\n \t      ERROR (\"more than one 'l' suffix on floating constant\");\n \t    else if (warn_traditional && !in_system_header\n-\t\t     && ! cpp_sys_objmacro_p (parse_in))\n+\t\t     && ! cpp_sys_macro_p (parse_in))\n \t      warning (\"traditional C rejects the 'l' suffix\");\n \n \t    lflag = 1;\n@@ -1313,7 +1313,7 @@ lex_number (str, len)\n \t      if (spec_unsigned)\n \t\terror (\"two 'u' suffixes on integer constant\");\n \t      else if (warn_traditional && !in_system_header\n-\t\t       && ! cpp_sys_objmacro_p (parse_in))\n+\t\t       && ! cpp_sys_macro_p (parse_in))\n \t\twarning (\"traditional C rejects the 'u' suffix\");\n \n \t      spec_unsigned = 1;"}, {"sha": "8bfa8c40245fc3b680ee517f7ab268637102bcf1", "filename": "gcc/cpp.texi", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -170,9 +170,9 @@ spaces, horizontal and vertical tabs, and form feeds between the\n backslash and the subsequent newline.  The preprocessor issues a\n warning, but treats it as a valid escaped newline and combines the two\n lines to form a single logical line.  This works within comments and\n-tokens, including multi-line strings, as well as between tokens.\n-Comments are @emph{not} treated as whitespace for the purposes of this\n-relaxation, since they have not yet been replaced with spaces.\n+tokens, as well as between tokens.  Comments are @emph{not} treated as\n+whitespace for the purposes of this relaxation, since they have not yet\n+been replaced with spaces.\n \n @item\n All comments are replaced with single spaces.\n@@ -216,8 +216,9 @@ bar\"\n @end example\n \n is equivalent to @code{\"foo\\bar\"}, not to @code{\"foo\\\\bar\"}.  To avoid\n-having to worry about this, do not use the GNU extension which permits\n-multi-line strings.  Instead, use string constant concatenation:\n+having to worry about this, do not use the deprecated GNU extension\n+which permits multi-line strings.  Instead, use string literal\n+concatenation:\n \n @example\n    \"foo\\\\\"\n@@ -3053,12 +3054,15 @@ used at all.\n This pragma has been superseded by @samp{#pragma GCC poison}.\n @xref{Poisoning}.\n \n-@item Multi-line string literals in directives\n+@item Multi-line string literals\n \n-The GNU C preprocessor currently allows newlines in string literals\n-within a directive.  This is forbidden by the C standard and will\n-eventually be removed.  (Multi-line string literals in open text are\n-still supported.)\n+The preprocessor currently allows raw newlines in string literals.  This\n+extension is deprecated and will be removed in a future version of GCC.\n+The preprocessor already forbids such string literals in all directives\n+apart from #define.\n+\n+Instead, make use of ISO C concatenation of adjacent string literals, or\n+use @samp{\\n} followed by an escaped newline.\n \n @item Preprocessing things which are not C\n "}, {"sha": "1231a7e266943f1faac37a924adf1f0b6a4392a1", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -205,7 +205,7 @@ parse_number (pfile, tok)\n \n       if (CPP_WTRADITIONAL (pfile)\n \t  && sufftab[i].u\n-\t  && ! cpp_sys_objmacro_p (pfile))\n+\t  && ! cpp_sys_macro_p (pfile))\n \tcpp_warning (pfile, \"traditional C rejects the `U' suffix\");\n       if (sufftab[i].l == 2 && CPP_OPTION (pfile, pedantic)\n \t  && ! CPP_OPTION (pfile, c99))"}, {"sha": "c0b5e026ae229d7eb27ea6c0da00b780939fe1dd", "filename": "gcc/cpplex.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -686,12 +686,10 @@ parse_string (pfile, token, terminator)\n \t      break;\n \t    }\n \n+\t  if (! cpp_sys_macro_p (pfile))\n+\t    cpp_pedwarn (pfile, \"multi-line string constants are deprecated\");\n \t  if (pfile->mlstring_pos.line == 0)\n-\t    {\n-\t      pfile->mlstring_pos = pfile->lexer_pos;\n-\t      if (CPP_PEDANTIC (pfile))\n-\t\tcpp_pedwarn (pfile, \"multi-line string constant\");\n-\t    }\n+\t    pfile->mlstring_pos = pfile->lexer_pos;\n \t      \n \t  handle_newline (buffer, c);  /* Stores to read_ahead.  */\n \t  c = '\\n';"}, {"sha": "eaa0ff9e2ba445c22877be5a45e376c1563520d4", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -605,7 +605,7 @@ extern void cpp_forall_identifiers\tPARAMS ((cpp_reader *,\n extern void cpp_scan_buffer_nooutput\tPARAMS ((cpp_reader *, int));\n extern void cpp_start_lookahead\t\tPARAMS ((cpp_reader *));\n extern void cpp_stop_lookahead\t\tPARAMS ((cpp_reader *, int));\n-extern int  cpp_sys_objmacro_p\t\tPARAMS ((cpp_reader *));\n+extern int  cpp_sys_macro_p\t\tPARAMS ((cpp_reader *));\n \n /* In cppfiles.c */\n extern int cpp_included\tPARAMS ((cpp_reader *, const char *));"}, {"sha": "d424a4146e9878b7f545bbf8c278ce846aa0a8f3", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c691145a655ed6fe191c2f7ce3220f19e46d2c3f/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=c691145a655ed6fe191c2f7ce3220f19e46d2c3f", "patch": "@@ -988,12 +988,12 @@ cpp_get_token (pfile, token)\n    defined in a system header.  Just checks the macro at the top of\n    the stack.  Used for diagnostic suppression.  */\n int\n-cpp_sys_objmacro_p (pfile)\n+cpp_sys_macro_p (pfile)\n      cpp_reader *pfile;\n {\n   cpp_macro *macro = pfile->context->macro;\n \n-  return macro && ! macro->fun_like && macro->syshdr;\n+  return macro && macro->syshdr;\n }\n \n /* Read each token in, until EOF.  Directives are transparently"}]}