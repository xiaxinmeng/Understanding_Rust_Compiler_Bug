{"sha": "d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmNmFhZjY2Y2Y4MWUwMTg2NTViZjU1MGI1ZWE4YmQxNTE4OWU1OQ==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-07-26T22:56:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-07-26T22:56:15Z"}, "message": "Makefile.am: Use cross-compiling gcjh from the path for a crossed-native build.\n\n2003-07-26  Mohan Embar  <gnustuff@thisiscool.com>\n\t    Ranjit Mathew  <rmathew@hotmail.com>\n\n\t* Makefile.am: Use cross-compiling gcjh from the path for\n\ta crossed-native build.\n\t* Makefile.in: Rebuilt.\n\t* configure.in: Include libltdl in non-newlib builds.\n\tMoved determination of gcj used to build libraries to\n\tits own section. Fixed cross-compilation issues for\n\tnon-newlib builds.\n\t* configure: Rebuilt.\n\nCo-Authored-By: Ranjit Mathew <rmathew@hotmail.com>\n\nFrom-SVN: r69836", "tree": {"sha": "153f435249da426ecf36e8a62d8c3b67847f7bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153f435249da426ecf36e8a62d8c3b67847f7bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/comments", "author": null, "committer": null, "parents": [{"sha": "f369aae49c22b764b08856dcb28d42f8491de15c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f369aae49c22b764b08856dcb28d42f8491de15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f369aae49c22b764b08856dcb28d42f8491de15c"}], "stats": {"total": 897, "additions": 505, "deletions": 392}, "files": [{"sha": "546109e1ad1d24517234cb4cbb663bcc68eea638", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "patch": "@@ -1,3 +1,15 @@\n+2003-07-26  Mohan Embar  <gnustuff@thisiscool.com>\n+\t    Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* Makefile.am: Use cross-compiling gcjh from the path for\n+\ta crossed-native build.\n+\t* Makefile.in: Rebuilt.\n+\t* configure.in: Include libltdl in non-newlib builds.\n+\tMoved determination of gcj used to build libraries to\n+\tits own section. Fixed cross-compilation issues for\n+\tnon-newlib builds.\n+\t* configure: Rebuilt.\n+\n 2003-07-25  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/natFileDescriptorPosix.cc (write): Try again on EINTR."}, {"sha": "23a071c071961c08223b3209e4557c57ca1dfb87", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "patch": "@@ -64,10 +64,11 @@ if NULL_TARGET\n ## In this case, gcj is found outside the build tree.  However, zip is\n ## found in the build tree.\n ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar\n+GCJH = gcjh\n else\n ZIP = jar\n+GCJH = $(target_alias)-gcjh\n endif\n-GCJH = gcjh\n else # CANADIAN\n GCJH = $(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh\n ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar"}, {"sha": "9b4321acd1aea2a389f8222b5633eb61b8e04331", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "patch": "@@ -176,7 +176,8 @@ bin_SCRIPTS = addr2name.awk\n @CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar\n @CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n @CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar\n-@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@GCJH = @CANADIAN_TRUE@@NULL_TARGET_TRUE@gcjh\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@GCJH = @CANADIAN_TRUE@@NULL_TARGET_FALSE@$(target_alias)-gcjh\n @CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8 -Wno-deprecated\n@@ -3095,8 +3096,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/GraphicsConfiguration.P .deps/java/awt/GraphicsDevice.P \\\n .deps/java/awt/GraphicsEnvironment.P \\\n .deps/java/awt/GridBagConstraints.P .deps/java/awt/GridBagLayout.P \\\n-.deps/java/awt/GridBagLayoutInfo.P \\\n-.deps/java/awt/GridLayout.P .deps/java/awt/HeadlessException.P \\\n+.deps/java/awt/GridBagLayoutInfo.P .deps/java/awt/GridLayout.P \\\n+.deps/java/awt/HeadlessException.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n .deps/java/awt/ImageCapabilities.P .deps/java/awt/Insets.P \\\n .deps/java/awt/ItemSelectable.P .deps/java/awt/JobAttributes.P \\"}, {"sha": "157944e16367a3900efa717937994cd980262450", "filename": "libjava/configure", "status": "modified", "additions": 425, "deletions": 370, "changes": 795, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=d6f6aaf66cf81e018655bf550b5ea8bd15189e59"}, {"sha": "d7eaf7692461114cec435612bed8b1ec755cae76", "filename": "libjava/configure.in", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6aaf66cf81e018655bf550b5ea8bd15189e59/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=d6f6aaf66cf81e018655bf550b5ea8bd15189e59", "patch": "@@ -23,8 +23,8 @@ LIBGCJ_CONFIGURE(.)\n \n AM_CONFIG_HEADER(include/config.h gcj/libgcj-config.h)\n \n-# Only use libltdl for native builds.\n-if test -z \"${with_cross_host}\"; then\n+# Only use libltdl for non-newlib builds.\n+if test \"x${with_newlib}\" = \"xno\"; then\n    AC_LIBLTDL_CONVENIENCE\n    AC_LIBTOOL_DLOPEN\n    DIRLTDL=libltdl\n@@ -555,16 +555,6 @@ if test \"x${with_newlib}\" = \"xyes\"; then\n \n    dnl Assume we do not have getuid and friends.\n    AC_DEFINE(NO_GETUID)\n-\n-   # If Canadian cross, then don't pick up tools from the build\n-   # directory.\n-   if test x\"$build\" != x\"$with_cross_host\" \\\n-        && test x\"$build\" != x\"$target\"; then\n-      CANADIAN=yes\n-      GCC_UNWIND_INCLUDE=\n-      GCJ=\"${target_alias}-gcj\"\n-   fi\n-   NATIVE=no\n    PLATFORMNET=NoNet\n else\n    AC_CHECK_FUNCS(strerror ioctl select fstat open fsync sleep opendir)\n@@ -809,15 +799,69 @@ changequote(<<,>>)\n       builddotdot=`echo ${with_multisubdir} | sed -e 's:[^/][^/]*:..:g'`\n changequote([,])\n    fi\n-   if test -x \"${builddotdot}/../../gcc/gcj\"; then\n-      dir=\"`cd ${builddotdot}/../../gcc && ${PWDCMD-pwd}`\"\n-      GCJ=\"$dir/gcj -B`${PWDCMD-pwd}`/ -B$dir/\"\n-   else\n+fi\n+\n+# Which gcj do we use?\n+which_gcj=default\n+built_gcc_dir=\"`cd ${builddotdot}/../../gcc && ${PWDCMD-pwd}`\"\n+if test -n \"${with_cross_host}\"; then\n+  # We are being configured with a cross compiler. We can't\n+  # use ac_exeext, because that is for the target platform.\n+  NATIVE=no\n+  cross_host_exeext=\n+  case \"${with_cross_host}\" in\n+     *mingw* | *cygwin*)\n+         cross_host_exeext=.exe\n+     ;;\n+  esac\n+  if test -x \"${built_gcc_dir}/gcj${cross_host_exeext}\"; then\n+     if test x\"$build\" = x\"$with_cross_host\"; then\n+        # Ordinary cross (host!=target and host=build)\n+        which_gcj=built\n+     else\n+        # Canadian cross (host!=target and host!=build)\n+        which_gcj=cross\n+     fi\n+  else\n+     which_gcj=cross\n+  fi\n+else\n+  # We are being configured with a native or crossed-native compiler\n+  if test -x \"${built_gcc_dir}/gcj${ac_exeext}\"; then\n+     if test x\"$build\" = x\"$host\"; then\n+        # True native build (host=target and host=build)\n+        which_gcj=built\n+     else\n+        # Crossed-native build (host=target and host!=build)\n+        which_gcj=cross\n+     fi\n+  else\n+     which_gcj=path\n+  fi\n+fi\n+case \"${which_gcj}\" in\n+   built)\n+      GCJ=\"$built_gcc_dir/gcj -B`${PWDCMD-pwd}`/ -B$built_gcc_dir/\"\n+   ;;\n+   cross)\n+      # See the comment in Makefile.am about CANADIAN being a misnomer\n+      CANADIAN=yes\n+      NULL_TARGET=no\n+      if test \"x${with_newlib}\" = \"xyes\"; then\n+         # FIXME (comment): Why is this needed?\n+         GCC_UNWIND_INCLUDE=\n+         GCJ=\"${target_alias}-gcj\"\n+      else\n+         GCJ=\"${target_alias}-gcj -B`${PWDCMD-pwd}`/\"\n+      fi\n+   ;;\n+   path)\n+      # See the comment in Makefile.am about CANADIAN being a misnomer\n       CANADIAN=yes\n       NULL_TARGET=yes\n       GCJ=\"gcj -B`${PWDCMD-pwd}`/\"\n-   fi\n-fi\n+   ;;\n+esac\n \n # Create it, so that compile/link tests don't fail\n test -f libgcj.spec || touch libgcj.spec"}]}