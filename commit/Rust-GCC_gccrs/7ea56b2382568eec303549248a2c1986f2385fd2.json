{"sha": "7ea56b2382568eec303549248a2c1986f2385fd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhNTZiMjM4MjU2OGVlYzMwMzU0OTI0OGEyYzE5ODZmMjM4NWZkMg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-02T12:17:43Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-02T12:17:43Z"}, "message": "libgcc.S: Gather related function in the same input section.\n\n\t\n\t* config/avr/libgcc.S: Gather related function in the\n\tsame input section.\n\t__divmodsi4): Use XCALL/XJMP instead of rcall/rjmp for external\n\treferences.\n\t(__udivmodqi4, __divmodqi4, __udivmodhi4, __divmodhi4,\n\t__udivmodsi4, __divmodsi4, __prologue_saves__,\n\t__epilogue_restores__, _exit, __tablejump2__, __tablejump__,\n\t__do_copy_data, __do_clear_bss, __do_global_ctors,\n\t__do_global_dtors, __tablejump_elpm__): Enclose in DEFUN/ENDF.\n\nFrom-SVN: r177133", "tree": {"sha": "55644c9a560f5e78c58957f75ccb7031b9f150a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55644c9a560f5e78c58957f75ccb7031b9f150a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea56b2382568eec303549248a2c1986f2385fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea56b2382568eec303549248a2c1986f2385fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea56b2382568eec303549248a2c1986f2385fd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea56b2382568eec303549248a2c1986f2385fd2/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62be5d0aad9a968382ad5299f47189ca2a8faa59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62be5d0aad9a968382ad5299f47189ca2a8faa59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62be5d0aad9a968382ad5299f47189ca2a8faa59"}], "stats": {"total": 139, "additions": 77, "deletions": 62}, "files": [{"sha": "f525c95441a5797e07beba7f84725725dcfdd18c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea56b2382568eec303549248a2c1986f2385fd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea56b2382568eec303549248a2c1986f2385fd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ea56b2382568eec303549248a2c1986f2385fd2", "patch": "@@ -1,3 +1,16 @@\n+2011-08-02  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\t* config/avr/libgcc.S: Gather related function in the\n+\tsame input section.\n+ \t(__mulqihi3, __mulqihi3, __divmodqi4, __divmodhi4, __udivmodsi4,\n+\t__divmodsi4): Use XCALL/XJMP instead of rcall/rjmp for external\n+\treferences.\n+\t(__udivmodqi4, __divmodqi4, __udivmodhi4, __divmodhi4,\n+\t__udivmodsi4, __divmodsi4, __prologue_saves__,\n+\t__epilogue_restores__, _exit, __tablejump2__, __tablejump__,\n+\t__do_copy_data, __do_clear_bss, __do_global_ctors,\n+\t__do_global_dtors, __tablejump_elpm__): Enclose in DEFUN/ENDF.\n+\n 2011-08-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/47766"}, {"sha": "a4e4b4215b5250915c93b3e7d5e49b481033de37", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 64, "deletions": 62, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea56b2382568eec303549248a2c1986f2385fd2/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea56b2382568eec303549248a2c1986f2385fd2/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=7ea56b2382568eec303549248a2c1986f2385fd2", "patch": "@@ -34,7 +34,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    This can make better code because GCC knows exactly which\n    of the call-used registers (not all of them) are clobbered.  */\n \n-\t.section .text.libgcc, \"ax\", @progbits\n+/* FIXME:  At present, there is no SORT directive in the linker\n+           script so that we must not assume that different modules\n+           in the same input section like .libgcc.text.mul will be\n+           located close together.  Therefore, we cannot use\n+           RCALL/RJMP to call a function like __udivmodhi4 from\n+           __divmodhi4 and have to use lengthy XCALL/XJMP even\n+           though they are in the same input section and all same\n+           input sections together are small enough to reach every\n+           location with a RCALL/RJMP instruction.  */\n \n \t.macro\tmov_l  r_dest, r_src\n #if defined (__AVR_HAVE_MOVW__)\n@@ -72,6 +80,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n .endm\n \n \f\n+.section .text.libgcc.mul, \"ax\", @progbits\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n /* Note: mulqi3, mulhi3 are open-coded on the enhanced core.  */\n #if !defined (__AVR_HAVE_MUL__)\n@@ -112,15 +122,15 @@ DEFUN __mulqihi3\n \tclr\tr23\n \tsbrc\tr22, 7\n \tdec\tr22\n-\trjmp\t__mulhi3\n+\tXJMP\t__mulhi3\n ENDF __mulqihi3:\n #endif /* defined (L_mulqihi3) */\n \n #if defined (L_umulqihi3)\n DEFUN __umulqihi3\n \tclr\tr25\n \tclr\tr23\n-\trjmp\t__mulhi3\n+\tXJMP\t__mulhi3\n ENDF __umulqihi3\n #endif /* defined (L_umulqihi3) */\n \n@@ -447,6 +457,8 @@ ENDF __mulsi3\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \t\n \f\n+.section .text.libgcc.div, \"ax\", @progbits\n+\n /*******************************************************\n        Division 8 / 8 => (result + remainder)\n *******************************************************/\n@@ -456,9 +468,7 @@ ENDF __mulsi3\n #define\tr_cnt\tr23\t/* loop count */\n \n #if defined (L_udivmodqi4)\n-\t.global\t__udivmodqi4\n-\t.func\t__udivmodqi4\n-__udivmodqi4:\n+DEFUN __udivmodqi4\n \tsub\tr_rem,r_rem\t; clear remainder and carry\n \tldi\tr_cnt,9\t\t; init loop counter\n \trjmp\t__udivmodqi4_ep\t; jump to entry point\n@@ -474,29 +484,27 @@ __udivmodqi4_ep:\n \tcom\tr_arg1\t\t; complement result \n \t\t\t\t; because C flag was complemented in loop\n \tret\n-\t.endfunc\n+ENDF __udivmodqi4\n #endif /* defined (L_udivmodqi4) */\n \n #if defined (L_divmodqi4)\n-\t.global\t__divmodqi4\n-\t.func\t__divmodqi4\n-__divmodqi4:\n+DEFUN __divmodqi4\n         bst     r_arg1,7\t; store sign of dividend\n         mov     __tmp_reg__,r_arg1\n         eor     __tmp_reg__,r_arg2; r0.7 is sign of result\n         sbrc\tr_arg1,7\n \tneg     r_arg1\t\t; dividend negative : negate\n         sbrc\tr_arg2,7\n \tneg     r_arg2\t\t; divisor negative : negate\n-\trcall\t__udivmodqi4\t; do the unsigned div/mod\n+\tXCALL\t__udivmodqi4\t; do the unsigned div/mod\n \tbrtc\t__divmodqi4_1\n \tneg\tr_rem\t\t; correct remainder sign\n __divmodqi4_1:\n \tsbrc\t__tmp_reg__,7\n \tneg\tr_arg1\t\t; correct result sign\n __divmodqi4_exit:\n \tret\n-\t.endfunc\n+ENDF __divmodqi4\n #endif /* defined (L_divmodqi4) */\n \n #undef r_rem\n@@ -522,9 +530,7 @@ __divmodqi4_exit:\n #define\tr_cnt\tr21\t/* loop count */\n \n #if defined (L_udivmodhi4)\n-\t.global\t__udivmodhi4\n-\t.func\t__udivmodhi4\n-__udivmodhi4:\n+DEFUN __udivmodhi4\n \tsub\tr_remL,r_remL\n \tsub\tr_remH,r_remH\t; clear remainder and carry\n \tldi\tr_cnt,17\t; init loop counter\n@@ -550,13 +556,11 @@ __udivmodhi4_ep:\n \tmov_l\tr_arg1L, r_remL\t\t; remainder\n \tmov_h\tr_arg1H, r_remH\n \tret\n-\t.endfunc\n+ENDF __udivmodhi4\n #endif /* defined (L_udivmodhi4) */\n \n #if defined (L_divmodhi4)\n-\t.global\t__divmodhi4\n-\t.func\t__divmodhi4\n-__divmodhi4:\n+DEFUN __divmodhi4\n \t.global\t_div\n _div:\n         bst     r_arg1H,7\t; store sign of dividend\n@@ -565,7 +569,7 @@ _div:\n \trcall\t__divmodhi4_neg1 ; dividend negative : negate\n \tsbrc\tr_arg2H,7\n \trcall\t__divmodhi4_neg2 ; divisor negative : negate\n-\trcall\t__udivmodhi4\t; do the unsigned div/mod\n+\tXCALL\t__udivmodhi4\t; do the unsigned div/mod\n \trcall\t__divmodhi4_neg1 ; correct remainder sign\n \ttst\t__tmp_reg__\n \tbrpl\t__divmodhi4_exit\n@@ -581,7 +585,7 @@ __divmodhi4_neg1:\n \tneg\tr_arg1L\t\t; correct dividend/remainder sign\n \tsbci\tr_arg1H,0xff\n \tret\n-\t.endfunc\n+ENDF __divmodhi4\n #endif /* defined (L_divmodhi4) */\n \n #undef r_remH  \n@@ -618,9 +622,7 @@ __divmodhi4_neg1:\n #define\tr_cnt __zero_reg__  /* loop count (0 after the loop!) */\n \n #if defined (L_udivmodsi4)\n-\t.global\t__udivmodsi4\n-\t.func\t__udivmodsi4\n-__udivmodsi4:\n+DEFUN __udivmodsi4\n \tldi\tr_remL, 33\t; init loop counter\n \tmov\tr_cnt, r_remL\n \tsub\tr_remL,r_remL\n@@ -664,20 +666,18 @@ __udivmodsi4_ep:\n \tmov_l\tr_arg1HL, r_remHL\n \tmov_h\tr_arg1HH, r_remHH\n \tret\n-\t.endfunc\n+ENDF __udivmodsi4\n #endif /* defined (L_udivmodsi4) */\n \n #if defined (L_divmodsi4)\n-\t.global\t__divmodsi4\n-\t.func\t__divmodsi4\n-__divmodsi4:\n+DEFUN __divmodsi4\n         bst     r_arg1HH,7\t; store sign of dividend\n         mov     __tmp_reg__,r_arg1HH\n         eor     __tmp_reg__,r_arg2HH   ; r0.7 is sign of result\n \trcall\t__divmodsi4_neg1 ; dividend negative : negate\n \tsbrc\tr_arg2HH,7\n \trcall\t__divmodsi4_neg2 ; divisor negative : negate\n-\trcall\t__udivmodsi4\t; do the unsigned div/mod\n+\tXCALL\t__udivmodsi4\t; do the unsigned div/mod\n \trcall\t__divmodsi4_neg1 ; correct remainder sign\n \trol\t__tmp_reg__\n \tbrcc\t__divmodsi4_exit\n@@ -701,17 +701,18 @@ __divmodsi4_neg1:\n \tsbci\tr_arg1HL,0xff\n \tsbci\tr_arg1HH,0xff\n \tret\n-\t.endfunc\n+ENDF __divmodsi4\n #endif /* defined (L_divmodsi4) */\n \n+\f\n+.section .text.libgcc.prologue, \"ax\", @progbits\n+    \n /**********************************\n  * This is a prologue subroutine\n  **********************************/\n #if defined (L_prologue)\n \n-\t.global\t__prologue_saves__\n-\t.func\t__prologue_saves__\n-__prologue_saves__:\n+DEFUN __prologue_saves__\n \tpush r2\n \tpush r3\n \tpush r4\n@@ -745,17 +746,15 @@ __prologue_saves__:\n \tijmp\n #endif\n \n-.endfunc\n+ENDF __prologue_saves__\n #endif /* defined (L_prologue) */\n \n /*\n  * This is an epilogue subroutine\n  */\n #if defined (L_epilogue)\n \n-\t.global\t__epilogue_restores__\n-\t.func\t__epilogue_restores__\n-__epilogue_restores__:\n+DEFUN __epilogue_restores__\n \tldd\tr2,Y+18\n \tldd\tr3,Y+17\n \tldd\tr4,Y+16\n@@ -784,17 +783,15 @@ __epilogue_restores__:\n \tmov_l\tr28, r26\n \tmov_h\tr29, r27\n \tret\n-.endfunc\n+ENDF __epilogue_restores__\n #endif /* defined (L_epilogue) */\n \n #ifdef L_exit\n \t.section .fini9,\"ax\",@progbits\n-\t.global _exit\n-\t.func\t_exit\n-_exit:\n+DEFUN _exit\n \t.weak\texit\n exit:\n-\t.endfunc\n+ENDF _exit\n \n \t/* Code from .fini8 ... .fini1 sections inserted by ld script.  */\n \n@@ -812,14 +809,17 @@ _cleanup:\n .endfunc\n #endif /* defined (L_cleanup) */\n \n+\f\n+.section .text.libgcc, \"ax\", @progbits\n+    \n #ifdef L_tablejump\n-\t.global __tablejump2__\n-\t.func\t__tablejump2__\n-__tablejump2__:\n+DEFUN __tablejump2__\n \tlsl\tr30\n \trol\tr31\n-\t.global __tablejump__\n-__tablejump__:\n+    ;; FALLTHRU\n+ENDF __tablejump2__\n+\n+DEFUN __tablejump__\n #if defined (__AVR_HAVE_LPMX__)\n \tlpm\t__tmp_reg__, Z+\n \tlpm\tr31, Z\n@@ -842,13 +842,12 @@ __tablejump__:\n #endif\n \tret\n #endif\n-\t.endfunc\n+ENDF __tablejump__\n #endif /* defined (L_tablejump) */\n \n #ifdef L_copy_data\n \t.section .init4,\"ax\",@progbits\n-\t.global __do_copy_data\n-__do_copy_data:\n+DEFUN __do_copy_data\n #if defined(__AVR_HAVE_ELPMX__)\n \tldi\tr17, hi8(__data_end)\n \tldi\tr26, lo8(__data_start)\n@@ -905,14 +904,14 @@ __do_copy_data:\n \tcpc\tr27, r17\n \tbrne\t.L__do_copy_data_loop\n #endif /* !defined(__AVR_HAVE_ELPMX__) && !defined(__AVR_HAVE_ELPM__) */\n+ENDF __do_copy_data\n #endif /* L_copy_data */\n \n /* __do_clear_bss is only necessary if there is anything in .bss section.  */\n \n #ifdef L_clear_bss\n \t.section .init4,\"ax\",@progbits\n-\t.global __do_clear_bss\n-__do_clear_bss:\n+DEFUN __do_clear_bss\n \tldi\tr17, hi8(__bss_end)\n \tldi\tr26, lo8(__bss_start)\n \tldi\tr27, hi8(__bss_start)\n@@ -923,16 +922,16 @@ __do_clear_bss:\n \tcpi\tr26, lo8(__bss_end)\n \tcpc\tr27, r17\n \tbrne\t.do_clear_bss_loop\n+ENDF __do_clear_bss\n #endif /* L_clear_bss */\n \n /* __do_global_ctors and __do_global_dtors are only necessary\n    if there are any constructors/destructors.  */\n \n #ifdef L_ctors\n \t.section .init6,\"ax\",@progbits\n-\t.global\t__do_global_ctors\n+DEFUN __do_global_ctors\n #if defined(__AVR_HAVE_RAMPZ__)\n-__do_global_ctors:\n \tldi\tr17, hi8(__ctors_start)\n \tldi\tr28, lo8(__ctors_end)\n \tldi\tr29, hi8(__ctors_end)\n@@ -952,7 +951,6 @@ __do_global_ctors:\n \tcpc\tr16, r24\n \tbrne\t.L__do_global_ctors_loop\n #else\n-__do_global_ctors:\n \tldi\tr17, hi8(__ctors_start)\n \tldi\tr28, lo8(__ctors_end)\n \tldi\tr29, hi8(__ctors_end)\n@@ -967,13 +965,13 @@ __do_global_ctors:\n \tcpc\tr29, r17\n \tbrne\t.L__do_global_ctors_loop\n #endif /* defined(__AVR_HAVE_RAMPZ__) */\n+ENDF __do_global_ctors\n #endif /* L_ctors */\n \n #ifdef L_dtors\n \t.section .fini6,\"ax\",@progbits\n-\t.global\t__do_global_dtors\n+DEFUN __do_global_dtors\n #if defined(__AVR_HAVE_RAMPZ__)\n-__do_global_dtors:\n \tldi\tr17, hi8(__dtors_end)\n \tldi\tr28, lo8(__dtors_start)\n \tldi\tr29, hi8(__dtors_start)\n@@ -993,7 +991,6 @@ __do_global_dtors:\n \tcpc\tr16, r24\n \tbrne\t.L__do_global_dtors_loop\n #else\n-__do_global_dtors:\n \tldi\tr17, hi8(__dtors_end)\n \tldi\tr28, lo8(__dtors_start)\n \tldi\tr29, hi8(__dtors_start)\n@@ -1008,12 +1005,13 @@ __do_global_dtors:\n \tcpc\tr29, r17\n \tbrne\t.L__do_global_dtors_loop\n #endif /* defined(__AVR_HAVE_RAMPZ__) */\n+ENDF __do_global_dtors\n #endif /* L_dtors */\n \n+.section .text.libgcc, \"ax\", @progbits\n+    \n #ifdef L_tablejump_elpm\n-\t.global __tablejump_elpm__\n-\t.func\t__tablejump_elpm__\n-__tablejump_elpm__:\n+DEFUN __tablejump_elpm__\n #if defined (__AVR_HAVE_ELPM__)\n #if defined (__AVR_HAVE_LPMX__)\n \telpm\t__tmp_reg__, Z+\n@@ -1037,10 +1035,12 @@ __tablejump_elpm__:\n \tret\n #endif\n #endif /* defined (__AVR_HAVE_ELPM__) */\n-\t.endfunc\n+ENDF __tablejump_elpm__\n #endif /* defined (L_tablejump_elpm) */\n \n \f\n+.section .text.libgcc.builtins, \"ax\", @progbits\n+\n /**********************************\n  * Find first set Bit (ffs)\n  **********************************/\n@@ -1440,6 +1440,8 @@ DEFUN __ashldi3\n ENDF __ashldi3\n #endif /* defined (L_ashldi3) */\n \n+\f\n+.section .text.libgcc.fmul, \"ax\", @progbits\n \n /***********************************************************/    \n ;;; Softmul versions of FMUL, FMULS and FMULSU to implement"}]}