{"sha": "9b86d6bb25587db93a322bf5778e9892aaa8b776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4NmQ2YmIyNTU4N2RiOTNhMzIyYmY1Nzc4ZTk4OTJhYWE4Yjc3Ng==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-05-08T18:44:50Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-05-08T18:44:50Z"}, "message": "re PR c/36892 (Support __attribute__((deprecated(\"text string\"))))\n\ngcc/\n\n2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Andrew Morrow  <acm@google.com>\n\n\tPR c/36892\n\t* c-common.c (c_common_attribute_table): Permit deprecated\n\tattribute to take an optional argument.\n\t(handle_deprecated_attribute): If the optional argument to\n\t__attribute__((deprecated)) is not a string ignore the attribute\n\tand emit a warning.\n\n\t* c-decl.c (grokdeclarator): Updated warn_deprecated_use call.\n\t* c-typeck.c (build_component_ref): Likewise.\n\t(build_external_ref): Likewise.\n\n\t* toplev.c (warn_deprecated_use): Add an attribute argument.\n\tEmit the message associated with __attribute__((deprecated)).\n\n\t* toplev.h (warn_deprecated_use): Updated.\n\n\t* doc/extend.texi: Document new optional parameter to\n\t__attribute__((deprecated))\n\ngcc/cp/\n\n2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR c/36892\n\t* call.c (build_call_a): Updated warn_deprecated_use call.\n\t(build_over_call): Likewise.\n\t* decl.c (grokdeclarator): Likewise.\n\t(grokparms): Likewise.\n\t* semantics.c (finish_id_expression): Likewise.\n\t* typeck.c (build_class_member_access_expr): Likewise.\n\t(finish_class_member_access_expr): Likewise.\n\ngcc/testsuite/\n\n2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR c/36892\n\t* g++.dg/warn/deprecated-6.C: New.\n\t* gcc.dg/deprecated-4.c: Likewise.\n\t* gcc.dg/deprecated-5.c: Likewise.\n\t* gcc.dg/deprecated-6.c: Likewise.\n\nFrom-SVN: r147293", "tree": {"sha": "3d22aee346c9c7a9e1f97b4a70e8968a3e82e462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d22aee346c9c7a9e1f97b4a70e8968a3e82e462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b86d6bb25587db93a322bf5778e9892aaa8b776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b86d6bb25587db93a322bf5778e9892aaa8b776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b86d6bb25587db93a322bf5778e9892aaa8b776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b86d6bb25587db93a322bf5778e9892aaa8b776/comments", "author": null, "committer": null, "parents": [{"sha": "82ad047f00d42f4cdb4ae2ee163f46d74db35f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ad047f00d42f4cdb4ae2ee163f46d74db35f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ad047f00d42f4cdb4ae2ee163f46d74db35f76"}], "stats": {"total": 426, "additions": 377, "deletions": 49}, "files": [{"sha": "ae61006756c3b646c884f99fbd79f77eb544db34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -1,3 +1,25 @@\n+2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Andrew Morrow  <acm@google.com>\n+\n+\tPR c/36892\n+\t* c-common.c (c_common_attribute_table): Permit deprecated\n+\tattribute to take an optional argument.\n+\t(handle_deprecated_attribute): If the optional argument to\n+\t__attribute__((deprecated)) is not a string ignore the attribute\n+\tand emit a warning.\n+\n+\t* c-decl.c (grokdeclarator): Updated warn_deprecated_use call.\n+\t* c-typeck.c (build_component_ref): Likewise.\n+\t(build_external_ref): Likewise.\n+\n+\t* toplev.c (warn_deprecated_use): Add an attribute argument.\n+\tEmit the message associated with __attribute__((deprecated)).\n+\n+\t* toplev.h (warn_deprecated_use): Updated.\n+\n+\t* doc/extend.texi: Document new optional parameter to\n+\t__attribute__((deprecated))\n+\n 2009-05-08  Michael Eager <eager@eagercon.com>\n \n \t* config/rs6000/rs6000.md (*movdf_softfloat32): replace"}, {"sha": "df6673c000c6eb60fb67fc37237adb761d9f33f4", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -954,7 +954,7 @@ const struct attribute_spec c_common_attribute_table[] =\n      to prevent its usage in source code.  */\n   { \"no vops\",                0, 0, true,  false, false,\n \t\t\t      handle_novops_attribute },\n-  { \"deprecated\",             0, 0, false, false, false,\n+  { \"deprecated\",             0, 1, false, false, false,\n \t\t\t      handle_deprecated_attribute },\n   { \"vector_size\",\t      1, 1, false, true, false,\n \t\t\t      handle_vector_size_attribute },\n@@ -7179,13 +7179,21 @@ handle_novops_attribute (tree *node, tree ARG_UNUSED (name),\n \n static tree\n handle_deprecated_attribute (tree *node, tree name,\n-\t\t\t     tree ARG_UNUSED (args), int flags,\n+\t\t\t     tree args, int flags,\n \t\t\t     bool *no_add_attrs)\n {\n   tree type = NULL_TREE;\n   int warn = 0;\n   tree what = NULL_TREE;\n \n+  if (!args)\n+    *no_add_attrs = true;\n+  else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n+    {\n+      error (\"deprecated message is not a string\");\n+      *no_add_attrs = true;\n+    }\n+\n   if (DECL_P (*node))\n     {\n       tree decl = *node;"}, {"sha": "5b441535eb2437e559e4acc56971d76fcd97bc3b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -4220,7 +4220,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     decl_context = PARM;\n \n   if (declspecs->deprecated_p && deprecated_state != DEPRECATED_SUPPRESS)\n-    warn_deprecated_use (declspecs->type);\n+    warn_deprecated_use (declspecs->type, declspecs->decl_attr);\n \n   if ((decl_context == NORMAL || decl_context == FIELD)\n       && current_scope == file_scope"}, {"sha": "0a29d954a7defc50baa52c19462c1411e48135c3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -1964,7 +1964,7 @@ build_component_ref (tree datum, tree component)\n \t    TREE_THIS_VOLATILE (ref) = 1;\n \n \t  if (TREE_DEPRECATED (subdatum))\n-\t    warn_deprecated_use (subdatum);\n+\t    warn_deprecated_use (subdatum, NULL_TREE);\n \n \t  datum = ref;\n \n@@ -2225,7 +2225,7 @@ build_external_ref (tree id, int fun, location_t loc, tree *type)\n     return error_mark_node;\n \n   if (TREE_DEPRECATED (ref))\n-    warn_deprecated_use (ref);\n+    warn_deprecated_use (ref, NULL_TREE);\n \n   /* Recursive call does not count as usage.  */\n   if (ref != current_function_decl) "}, {"sha": "cc7b5f7784887effa35be7d1c2011e955beba2ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -1,3 +1,14 @@\n+2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/36892\n+\t* call.c (build_call_a): Updated warn_deprecated_use call.\n+\t(build_over_call): Likewise.\n+\t* decl.c (grokdeclarator): Likewise.\n+\t(grokparms): Likewise.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\t* typeck.c (build_class_member_access_expr): Likewise.\n+\t(finish_class_member_access_expr): Likewise.\n+\n 2009-05-06  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/17395\n@@ -7,23 +18,23 @@\n 2009-05-05  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \t* cp-tree.h:\n-       \t(opname_tab, assignop_tab, update_member_visibility, yyerror, yyhook,\n-       \tmangle_compound_literal): Remove unused declarations.\n-       \t(build_vfield_ref, cxx_print_statistics, clone_function_decl,\n-       \tadjust_clone_args, maybe_push_cleanup_level, pushtag, make_anon_name,\n-       \tpushdecl_top_level_maybe_friend, pushdecl_top_level_and_finish,\n-       \tcheck_for_out_of_scope_variable, print_other_binding_stack,\n-       \tmaybe_push_decl, cxx_mark_addressable, force_target_expr,\n-       \tbuild_target_expr_with_type, finish_case_label,\n-       \tcxx_maybe_build_cleanup, begin_eh_spec_block, finish_eh_spec_block,\n-       \tcheck_template_keyword, cxx_omp_predetermined_sharing,\n-       \tcxx_omp_clause_default_ctor, cxx_omp_clause_copy_ctor,\n-       \tcxx_omp_clause_assign_op, cxx_omp_clause_dtor, cxx_omp_finish_clause,\n-       \tcxx_omp_privatize_by_reference): Rearrange the declarations line to\n-       \tmatch the comment that indicates the .c file which the functions are\n-       \tdefined.\n-       \t(cxx_print_xnode, cxx_print_decl, cxx_print_type,\n-       \tcxx_print_identifier, cxx_print_error_function, pushdecl): Add comment.\n+\t(opname_tab, assignop_tab, update_member_visibility, yyerror, yyhook,\n+\tmangle_compound_literal): Remove unused declarations.\n+\t(build_vfield_ref, cxx_print_statistics, clone_function_decl,\n+\tadjust_clone_args, maybe_push_cleanup_level, pushtag, make_anon_name,\n+\tpushdecl_top_level_maybe_friend, pushdecl_top_level_and_finish,\n+\tcheck_for_out_of_scope_variable, print_other_binding_stack,\n+\tmaybe_push_decl, cxx_mark_addressable, force_target_expr,\n+\tbuild_target_expr_with_type, finish_case_label,\n+\tcxx_maybe_build_cleanup, begin_eh_spec_block, finish_eh_spec_block,\n+\tcheck_template_keyword, cxx_omp_predetermined_sharing,\n+\tcxx_omp_clause_default_ctor, cxx_omp_clause_copy_ctor,\n+\tcxx_omp_clause_assign_op, cxx_omp_clause_dtor, cxx_omp_finish_clause,\n+\tcxx_omp_privatize_by_reference): Rearrange the declarations line to\n+\tmatch the comment that indicates the .c file which the functions are\n+\tdefined.\n+\t(cxx_print_xnode, cxx_print_decl, cxx_print_type,\n+\tcxx_print_identifier, cxx_print_error_function, pushdecl): Add comment.\n \n 2009-05-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -821,9 +832,9 @@\n \n 2009-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/39053\n-        * parser.c (cp_parser_pure_specifier): If there are no tokens left\n-        do not call cp_lexer_consume_token.\n+\tPR c++/39053\n+\t* parser.c (cp_parser_pure_specifier): If there are no tokens left\n+\tdo not call cp_lexer_consume_token.\n \n 2009-01-30  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ba8dac153a3865aa19d51b907fb32d6f68344803", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -342,7 +342,7 @@ build_call_a (tree function, int n, tree *argarray)\n     current_function_returns_abnormally = 1;\n \n   if (decl && TREE_DEPRECATED (decl))\n-    warn_deprecated_use (decl);\n+    warn_deprecated_use (decl, NULL_TREE);\n   require_complete_eh_spec_types (fntype, decl);\n \n   if (decl && DECL_CONSTRUCTOR_P (decl))\n@@ -5457,7 +5457,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       /* Warn about deprecated virtual functions now, since we're about\n \t to throw away the decl.  */\n       if (TREE_DEPRECATED (fn))\n-\twarn_deprecated_use (fn);\n+\twarn_deprecated_use (fn, NULL_TREE);\n \n       argarray[0] = build_base_path (PLUS_EXPR, argarray[0], binfo, 1);\n       if (TREE_SIDE_EFFECTS (argarray[0]))"}, {"sha": "fb916476b35088f10443684f69230641c62ce3b9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -7835,15 +7835,15 @@ grokdeclarator (const cp_declarator *declarator,\n      suppress reports of deprecated items.  */\n   if (type && TREE_DEPRECATED (type)\n       && deprecated_state != DEPRECATED_SUPPRESS)\n-    warn_deprecated_use (type);\n+    warn_deprecated_use (type, NULL_TREE);\n   if (type && TREE_CODE (type) == TYPE_DECL)\n     {\n       typedef_decl = type;\n       type = TREE_TYPE (typedef_decl);\n       if (TREE_DEPRECATED (type)\n \t  && DECL_ARTIFICIAL (typedef_decl)\n \t  && deprecated_state != DEPRECATED_SUPPRESS)\n-\twarn_deprecated_use (type);\n+\twarn_deprecated_use (type, NULL_TREE);\n     }\n   /* No type at all: default to `int', and set DEFAULTED_INT\n      because it was not a user-defined typedef.  */\n@@ -9697,7 +9697,7 @@ grokparms (tree parmlist, tree *parms)\n \t    {\n \t      tree deptype = type_is_deprecated (type);\n \t      if (deptype)\n-\t\twarn_deprecated_use (deptype);\n+\t\twarn_deprecated_use (deptype, NULL_TREE);\n \t    }\n \n \t  /* Top-level qualifiers on the parameters are"}, {"sha": "8c0a1e510ce0376dba0e4776de0579d574059f1f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -3038,7 +3038,7 @@ finish_id_expression (tree id_expression,\n     }\n \n   if (TREE_DEPRECATED (decl))\n-    warn_deprecated_use (decl);\n+    warn_deprecated_use (decl, NULL_TREE);\n \n   return decl;\n }"}, {"sha": "4486b9065a1623a4b1bf40d2eedbb9ecfc048e7e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -1909,7 +1909,7 @@ build_class_member_access_expr (tree object, tree member,\n       member_scope = DECL_CLASS_CONTEXT (member);\n       mark_used (member);\n       if (TREE_DEPRECATED (member))\n-\twarn_deprecated_use (member);\n+\twarn_deprecated_use (member, NULL_TREE);\n     }\n   else\n     member_scope = BINFO_TYPE (BASELINK_ACCESS_BINFO (member));\n@@ -2369,7 +2369,7 @@ finish_class_member_access_expr (tree object, tree name, bool template_p,\n     }\n \n   if (TREE_DEPRECATED (member))\n-    warn_deprecated_use (member);\n+    warn_deprecated_use (member, NULL_TREE);\n \n   if (template_p)\n     check_template_keyword (member);"}, {"sha": "6b626e2add7b8b32bb4f746001673e6cadce2031", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -2065,6 +2065,7 @@ objects (@pxref{C++ Attributes}).\n These attributes are not currently implemented for Objective-C@.\n \n @item deprecated\n+@itemx deprecated (@var{msg})\n @cindex @code{deprecated} attribute.\n The @code{deprecated} attribute results in a warning if the function\n is used anywhere in the source file.  This is useful when identifying\n@@ -2080,7 +2081,9 @@ int old_fn ();\n int (*fn_ptr)() = old_fn;\n @end smallexample\n \n-results in a warning on line 3 but not line 2.\n+results in a warning on line 3 but not line 2.  The optional msg\n+argument, which must be a string, will be printed in the warning if\n+present.\n \n The @code{deprecated} attribute can also be used for variables and\n types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n@@ -3845,6 +3848,7 @@ These attributes override the default chosen by the\n @option{-fno-common} and @option{-fcommon} flags respectively.\n \n @item deprecated\n+@itemx deprecated (@var{msg})\n @cindex @code{deprecated} attribute\n The @code{deprecated} attribute results in a warning if the variable\n is used anywhere in the source file.  This is useful when identifying\n@@ -3860,7 +3864,9 @@ extern int old_var;\n int new_fn () @{ return old_var; @}\n @end smallexample\n \n-results in a warning on line 3 but not line 2.\n+results in a warning on line 3 but not line 2.  The optional msg\n+argument, which must be a string, will be printed in the warning if\n+present.\n \n The @code{deprecated} attribute can also be used for functions and\n types (@pxref{Function Attributes}, @pxref{Type Attributes}.)\n@@ -4490,6 +4496,7 @@ not referenced, but contain constructors and destructors that have\n nontrivial bookkeeping functions.\n \n @item deprecated\n+@itemx deprecated (@var{msg})\n The @code{deprecated} attribute results in a warning if the type\n is used anywhere in the source file.  This is useful when identifying\n types that are expected to be removed in a future version of a program.\n@@ -4512,7 +4519,9 @@ T3 z __attribute__ ((deprecated));\n results in a warning on line 2 and 3 but not lines 4, 5, or 6.  No\n warning is issued for line 4 because T2 is not explicitly\n deprecated.  Line 5 has no warning because T3 is explicitly\n-deprecated.  Similarly for line 6.\n+deprecated.  Similarly for line 6.  The optional msg\n+argument, which must be a string, will be printed in the warning if\n+present.\n \n The @code{deprecated} attribute can also be used for functions and\n variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)"}, {"sha": "2e83302841b8d2e06a005a8f6f33ad3c7c829f48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -1,3 +1,11 @@\n+2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/36892\n+\t* g++.dg/warn/deprecated-6.C: New.\n+\t* gcc.dg/deprecated-4.c: Likewise.\n+\t* gcc.dg/deprecated-5.c: Likewise.\n+\t* gcc.dg/deprecated-6.c: Likewise.\n+\n 2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/vect/no-vfa-vect-37.c: Replace __aligned__(16) with"}, {"sha": "8ce6ac02d529550cee082aa3d3549c15f4c4ac15", "filename": "gcc/testsuite/g++.dg/warn/deprecated-6.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -0,0 +1,110 @@\n+/* Test __attribute__ ((deprecated(\"message\"))) */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations -fmessage-length=0\" } */\n+\n+typedef int INT1 __attribute__((deprecated(\"Please avoid INT1\")));\n+typedef INT1 INT2 __attribute__ ((__deprecated__(\"Please avoid INT2\")));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+INT1a should_not_be_deprecated;\n+\n+INT1 f1(void) __attribute__ ((deprecated(\"Please avoid f1\"))); \n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__deprecated__(\"Please avoid f3\"))); \n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated .declared at \\[^\\n\\]*: Please avoid INT2\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__deprecated__(\"Please avoid f6\")));\n+\n+typedef enum Color {red, green, blue} Color __attribute__((deprecated(\"Please avoid Color\")));\n+\n+int g1;\n+int g2 __attribute__ ((deprecated(\"Please avoid g2\")));\n+int g3 __attribute__ ((__deprecated__(\"Please avoid g3\")));\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated .declared at \\[^\\n\\]*: Please avoid Color\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((deprecated(\"Please avoid field2\")));\n+  int field3;\n+  int field4 __attribute__ ((__deprecated__(\"Please avoid field4\")));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((deprecated(\"Please avoid field6\")));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((deprecated(\"Please avoid field8\")));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((deprecated(\"Please avoid u2\")));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+   int x __attribute__ ((deprecated(\"Please avoid x\")));\n+   int y __attribute__ ((__deprecated__(\"Please avoid y\")));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid f1\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated .declared at \\[^\\n\\]*: Please avoid x\" \"\" } */\n+   \t\t\t\t\t/* { dg-warning \"'y' is deprecated .declared at \\[^\\n\\]*: Please avoid y\" \"y\" { target *-*-* } 53 } */\n+   \t\t\t\t\t/* { dg-warning \"'g2' is deprecated .declared at \\[^\\n\\]*: Please avoid g2\" \"g2\" { target *-*-* } 53 } */\n+   \t\t\t\t\t/* { dg-warning \"'g3' is deprecated .declared at \\[^\\n\\]*: Please avoid g3\" \"g3\" { target *-*-* } 53 } */\n+   return f1(); \t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid f1\" \"f1\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+  \n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-warning \"'S1::field2' is deprecated .declared at \\[^\\n\\]*: Please avoid field2\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'S1::field4' is deprecated .declared at \\[^\\n\\]*: Please avoid field4\" \"\" } */\n+     return p->field3;\n+  \n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated .declared at \\[^\\n\\]*: Please avoid u2\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<anonymous union>::field6' is deprecated .declared at \\[^\\n\\]*: Please avoid field6\" \"\" } */\n+  \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated .declared at \\[^\\n\\]*: Please avoid field8\" \"field8\" { target *-*-* } 71 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+} __attribute__ ((deprecated(\"Please avoid SS1\")));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated .declared at \\[^\\n\\]*: Please avoid SS1\" \"\" } */\n+\n+struct __attribute__ ((__deprecated__(\"Please avoid SS2\"))) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated .declared at \\[^\\n\\]*: Please avoid INT1\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated .declared at \\[^\\n\\]*: Please avoid SS2\" \"\" } */\n+\n+class T {\n+  public:\n+    void member1(int) __attribute__ ((deprecated(\"Please avoid member1\")));\n+    void member2(INT1) __attribute__ ((__deprecated__(\"Please avoid member2\"))); /* { dg-warning \"'INT1' is deprecated\" \"\" } */\n+    int member3(T *);\n+    int x;\n+} __attribute__ ((deprecated(\"Please avoid T\")));\n+\n+T *p3;\t\t\t\t// { dg-warning \"'T' is deprecated .declared at \\[^\\n\\]*: Please avoid T\" }\n+\n+inline void T::member1(int) {}\n+\n+int T::member3(T *p)\t\t// { dg-warning \"'T' is deprecated .declared at \\[^\\n\\]*: Please avoid T\" }\n+{\n+  p->member1(1);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid member1\" \"\" } */\n+  (*p).member1(2);\t\t\t/* { dg-warning \"'void T::member1\\\\(int\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid member1\" \"\" } */\n+  p->member2(1);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid member2\" \"\" } */\n+  (*p).member2(2);\t\t\t/* { dg-warning \"'void T::member2\\\\(INT1\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid member2\" \"\" } */\n+  p->member3(p);\n+  (*p).member3(p);\n+  return f1(); \t\t\t\t/* { dg-warning \"'INT1 f1\\\\(\\\\)' is deprecated .declared at \\[^\\n\\]*: Please avoid f1\" \"\" } */\n+}"}, {"sha": "f36dbdf9af1d8ba9f4c81215b77c4df9ca1aa3aa", "filename": "gcc/testsuite/gcc.dg/deprecated-4.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-4.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -0,0 +1,88 @@\n+/* Test __attribute__ ((deprecated(\"message\"))) */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+typedef int INT1 __attribute__((deprecated(\"Please avoid INT1\")));\n+typedef INT1 INT2 __attribute__ ((__deprecated__(\"Please avoid INT2\")));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+typedef INT1 INT1b __attribute__ ((deprecated(\"Please avoid INT1b\")));\n+\n+INT1 should_be_unavailable; \t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+INT1a should_not_be_deprecated;\n+\n+INT1 f1(void) __attribute__ ((deprecated(\"Please avoid f1\"))); \n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__deprecated__(\"Please avoid f3\"))); \n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__deprecated__(\"Please avoid f6\"))); /* { dg-warning \"'INT2' is deprecated: Please avoid INT2\" \"\" } */\n+\n+typedef enum {red, green, blue} Color __attribute__((deprecated(\"Please avoid Color\")));\n+\n+int g1;\n+int g2 __attribute__ ((deprecated(\"Please avoid g2\")));\n+int g3 __attribute__ ((__deprecated__(\"Please avoid g3\")));\n+Color k;\t\t\t\t/* { dg-warning \"'Color' is deprecated .declared at \\[^\\n\\]*: Please avoid Color\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((deprecated(\"Please avoid field2\")));\n+  int field3;\n+  int field4 __attribute__ ((__deprecated__(\"Please avoid field4\")));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((deprecated(\"Please avoid field6\")));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((deprecated(\"Please avoid field8\")));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((deprecated(\"Please avoid u2\")));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+   int x __attribute__ ((deprecated(\"Avoid x\")));\n+   int y __attribute__ ((__deprecated__(\"Bad y\")));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-warning \"'f1' is deprecated .declared at \\[^\\n\\]*: Please avoid f1\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-warning \"'x' is deprecated .declared at \\[^\\n\\]*: Avoid x\" \"\" } */\n+\t\t\t\t\t/* { dg-warning \"'y' is deprecated .declared at \\[^\\n\\]*: Bad y\" \"y\" { target *-*-* } 54  } */\n+\t\t\t\t\t/* { dg-warning \"'g2' is deprecated .declared at \\[^\\n\\]*: Please avoid g2\" \"g2\" { target *-*-* } 54  }  */\n+\t\t\t\t\t/* { dg-warning \"'g3' is deprecated .declared at \\[^\\n\\]*: Please avoid g3\" \"g3\" { target *-*-* } 54  } */\n+   return f1(); \t\t\t/* { dg-warning \"'f1' is deprecated .declared at \\[^\\n\\]*: Please avoid f1\" \"\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+  \n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-warning \"'field2' is deprecated .declared at \\[^\\n\\]*: Please avoid field2\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-warning \"'field4' is deprecated .declared at \\[^\\n\\]*: Please avoid field4\" \"\" } */\n+     return p->field3;\n+  \n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-warning \"'u2' is deprecated .declared at \\[^\\n\\]*: Please avoid u2\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'field6' is deprecated .declared at \\[^\\n\\]*: Please avoid field6\" \"\" } */\n+  \t\t\t\t\t/* { dg-warning \"'field8' is deprecated .declared at \\[^\\n\\]*: Please avoid field8\" \"field8\" { target *-*-* } 72 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+} __attribute__ ((deprecated(\"Please avoid SS1\")));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-warning \"'SS1' is deprecated .declared at \\[^\\n\\]*: Please avoid SS1\" \"\" } */\n+\n+struct __attribute__ ((__deprecated__(\"Please avoid SS2\"))) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-warning \"'INT1' is deprecated: Please avoid INT1\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-warning \"'SS2' is deprecated .declared at \\[^\\n\\]*: Please avoid SS2\" \"\" } */"}, {"sha": "133e60e40570da05be87edbe82a6fccbd4877e4c", "filename": "gcc/testsuite/gcc.dg/deprecated-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-5.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -0,0 +1,7 @@\n+/* Test __attribute__((deprecated)).  Test types without names.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct { int a; } __attribute__((deprecated (\"Do not use\"))) x; /* { dg-warning \"type is deprecated\" } */\n+typeof(x) y; /* { dg-warning \"type is deprecated .declared at .*.: Do not use\" } */"}, {"sha": "874e1a68e07b2e96baba0b32e18b9eb704441104", "filename": "gcc/testsuite/gcc.dg/deprecated-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeprecated-6.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -0,0 +1,11 @@\n+/* Test __attribute__((deprecated)).  Test merging with multiple\n+   declarations.  Bug 7425.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void func(void);\n+void func(void) __attribute__((deprecated (\"Do not use\")));\n+\n+void f(void) {\n+  func(); /* { dg-warning \"'func' is deprecated .declared at .*.: Do not use\" } */\n+}"}, {"sha": "68dc6a3bcfaaad44bb6e96bf779bb8a72c4ce2b9", "filename": "gcc/toplev.c", "status": "modified", "additions": 66, "deletions": 12, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -908,17 +908,45 @@ emit_debug_global_declarations (tree *vec, int len)\n \n /* Warn about a use of an identifier which was marked deprecated.  */\n void\n-warn_deprecated_use (tree node)\n+warn_deprecated_use (tree node, tree attr)\n {\n+  const char *msg;\n+\n   if (node == 0 || !warn_deprecated_decl)\n     return;\n \n+  if (!attr)\n+    {\n+      if (DECL_P (node))\n+\tattr = DECL_ATTRIBUTES (node);\n+      else if (TYPE_P (node))\n+\t{\n+\t  tree decl = TYPE_STUB_DECL (node);\n+\t  if (decl)\n+\t    attr = lookup_attribute (\"deprecated\",\n+\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)));\n+\t}\n+    }\n+\n+  if (attr)\n+    attr = lookup_attribute (\"deprecated\", attr);\n+\n+  if (attr)\n+    msg = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n+  else\n+    msg = NULL;\n+\n   if (DECL_P (node))\n     {\n       expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (node));\n-      warning (OPT_Wdeprecated_declarations,\n-\t       \"%qD is deprecated (declared at %s:%d)\",\n-\t       node, xloc.file, xloc.line);\n+      if (msg)\n+\twarning (OPT_Wdeprecated_declarations,\n+\t\t \"%qD is deprecated (declared at %s:%d): %s\",\n+\t\t node, xloc.file, xloc.line, msg);\n+      else\n+\twarning (OPT_Wdeprecated_declarations,\n+\t\t \"%qD is deprecated (declared at %s:%d)\",\n+\t\t node, xloc.file, xloc.line);\n     }\n   else if (TYPE_P (node))\n     {\n@@ -939,20 +967,46 @@ warn_deprecated_use (tree node)\n \t  expanded_location xloc\n \t    = expand_location (DECL_SOURCE_LOCATION (decl));\n \t  if (what)\n-\t    warning (OPT_Wdeprecated_declarations,\n-\t\t     \"%qE is deprecated (declared at %s:%d)\", what,\n-\t\t     xloc.file, xloc.line);\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"%qE is deprecated (declared at %s:%d): %s\",\n+\t\t\t what, xloc.file, xloc.line, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"%qE is deprecated (declared at %s:%d)\", what,\n+\t\t\t xloc.file, xloc.line);\n+\t    }\n \t  else\n-\t    warning (OPT_Wdeprecated_declarations,\n-\t\t     \"type is deprecated (declared at %s:%d)\",\n-\t\t     xloc.file, xloc.line);\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"type is deprecated (declared at %s:%d): %s\",\n+\t\t\t xloc.file, xloc.line, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations,\n+\t\t\t \"type is deprecated (declared at %s:%d)\",\n+\t\t\t xloc.file, xloc.line);\n+\t    }\n \t}\n       else\n \t{\n \t  if (what)\n-\t    warning (OPT_Wdeprecated_declarations, \"%qE is deprecated\", what);\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated: %s\",\n+\t\t\t what, msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations, \"%qE is deprecated\", what);\n+\t    }\n \t  else\n-\t    warning (OPT_Wdeprecated_declarations, \"type is deprecated\");\n+\t    {\n+\t      if (msg)\n+\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated: %s\",\n+\t\t\t msg);\n+\t      else\n+\t\twarning (OPT_Wdeprecated_declarations, \"type is deprecated\");\n+\t    }\n \t}\n     }\n }"}, {"sha": "08a89eab034d2c6bdd6339c4ecc4217030faac60", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b86d6bb25587db93a322bf5778e9892aaa8b776/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=9b86d6bb25587db93a322bf5778e9892aaa8b776", "patch": "@@ -83,7 +83,7 @@ extern void announce_function (tree);\n \n extern void error_for_asm (const_rtx, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void warning_for_asm (const_rtx, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void warn_deprecated_use (tree);\n+extern void warn_deprecated_use (tree, tree);\n extern bool parse_optimize_options (tree, bool);\n \n #ifdef BUFSIZ"}]}