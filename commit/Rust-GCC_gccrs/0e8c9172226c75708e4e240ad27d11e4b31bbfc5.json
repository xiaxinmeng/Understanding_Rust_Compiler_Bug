{"sha": "0e8c9172226c75708e4e240ad27d11e4b31bbfc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4YzkxNzIyMjZjNzU3MDhlNGUyNDBhZDI3ZDExZTRiMzFiYmZjNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-05T11:03:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-05T11:03:41Z"}, "message": "(do_jump, case EQ_EXPR, NE_EXPR): Properly compare complex.\n\nFrom-SVN: r9577", "tree": {"sha": "9bff6d173185004fd28221b12516f35de1fb1df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bff6d173185004fd28221b12516f35de1fb1df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e8c9172226c75708e4e240ad27d11e4b31bbfc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c9172226c75708e4e240ad27d11e4b31bbfc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8c9172226c75708e4e240ad27d11e4b31bbfc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8c9172226c75708e4e240ad27d11e4b31bbfc5/comments", "author": null, "committer": null, "parents": [{"sha": "0d481071c0f72aca1a46a635009f3445bc922396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d481071c0f72aca1a46a635009f3445bc922396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d481071c0f72aca1a46a635009f3445bc922396"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "384c193d8a1829da6717a65368462f49705f8ca5", "filename": "gcc/expr.c", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8c9172226c75708e4e240ad27d11e4b31bbfc5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8c9172226c75708e4e240ad27d11e4b31bbfc5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0e8c9172226c75708e4e240ad27d11e4b31bbfc5", "patch": "@@ -9095,32 +9095,64 @@ do_jump (exp, if_false_label, if_true_label)\n       break;\n \n     case EQ_EXPR:\n-      if (integer_zerop (TREE_OPERAND (exp, 1)))\n-\tdo_jump (TREE_OPERAND (exp, 0), if_true_label, if_false_label);\n-      else if (((GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t\t == MODE_INT)\n-\t\t&& \n-\t\t!can_compare_p (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n-\t       || GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))) == MODE_COMPLEX_FLOAT\n-\t       || GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))) == MODE_COMPLEX_INT)\n-\tdo_jump_by_parts_equality (exp, if_false_label, if_true_label);\n-      else\n-\tcomparison = compare (exp, EQ, EQ);\n-      break;\n+      {\n+\ttree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\n+\tif (integer_zerop (TREE_OPERAND (exp, 1)))\n+\t  do_jump (TREE_OPERAND (exp, 0), if_true_label, if_false_label);\n+\telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_COMPLEX_FLOAT\n+\t\t || GET_MODE_CLASS (TYPE_MODE (inner_type) == MODE_COMPLEX_INT))\n+\t  do_jump\n+\t    (fold\n+\t     (build (TRUTH_ANDIF_EXPR, TREE_TYPE (exp),\n+\t\t     fold (build (EQ_EXPR, TREE_TYPE (exp),\n+\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n+\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 1))))),\n+\t\t     fold (build (EQ_EXPR, TREE_TYPE (exp),\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 1))))))),\n+\t     if_false_label, if_true_label);\n+\telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_INT\n+\t\t && !can_compare_p (TYPE_MODE (inner_type)))\n+\t  do_jump_by_parts_equality (exp, if_false_label, if_true_label);\n+\telse\n+\t  comparison = compare (exp, EQ, EQ);\n+\tbreak;\n+      }\n \n     case NE_EXPR:\n-      if (integer_zerop (TREE_OPERAND (exp, 1)))\n-\tdo_jump (TREE_OPERAND (exp, 0), if_false_label, if_true_label);\n-      else if (((GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t\t == MODE_INT)\n-\t\t&& \n-\t\t!can_compare_p (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n-\t       || GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))) == MODE_COMPLEX_FLOAT\n-\t       || GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))) == MODE_COMPLEX_INT)\n-\tdo_jump_by_parts_equality (exp, if_true_label, if_false_label);\n-      else\n-\tcomparison = compare (exp, NE, NE);\n-      break;\n+      {\n+\ttree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\n+\tif (integer_zerop (TREE_OPERAND (exp, 1)))\n+\t  do_jump (TREE_OPERAND (exp, 0), if_false_label, if_true_label);\n+\telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_COMPLEX_FLOAT\n+\t\t || GET_MODE_CLASS (TYPE_MODE (inner_type) == MODE_COMPLEX_INT))\n+\t  do_jump\n+\t    (fold\n+\t     (build (TRUTH_ORIF_EXPR, TREE_TYPE (exp),\n+\t\t     fold (build (NE_EXPR, TREE_TYPE (exp),\n+\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n+\t\t\t\t  fold (build1 (REALPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 1))))),\n+\t\t     fold (build (NE_EXPR, TREE_TYPE (exp),\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 0))),\n+\t\t\t\t  fold (build1 (IMAGPART_EXPR, inner_type,\n+\t\t\t\t\t\tTREE_OPERAND (exp, 1))))))),\n+\t     if_false_label, if_true_label);\n+\telse if (GET_MODE_CLASS (TYPE_MODE (inner_type)) == MODE_INT\n+\t\t && !can_compare_p (TYPE_MODE (inner_type)))\n+\t  do_jump_by_parts_equality (exp, if_true_label, if_false_label);\n+\telse\n+\t  comparison = compare (exp, NE, NE);\n+\tbreak;\n+      }\n \n     case LT_EXPR:\n       if ((GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))"}]}