{"sha": "e14d094cacf2490a04f887658b3313ba9e951190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0ZDA5NGNhY2YyNDkwYTA0Zjg4NzY1OGIzMzEzYmE5ZTk1MTE5MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-22T13:07:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-22T13:07:20Z"}, "message": "tree-ssa-loop-im.c (struct mem_ref): Remove indep_ref and dep_ref members.\n\n2013-03-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (struct mem_ref): Remove indep_ref and\n\tdep_ref members.\n\t(mem_ref_alloc): Do not allocate them.\n\t(refs_independent_p): Do not query or maintain a cache.\n\nFrom-SVN: r196961", "tree": {"sha": "ced3bab8bf744574a7d341d589195e88cca613a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced3bab8bf744574a7d341d589195e88cca613a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14d094cacf2490a04f887658b3313ba9e951190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14d094cacf2490a04f887658b3313ba9e951190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14d094cacf2490a04f887658b3313ba9e951190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14d094cacf2490a04f887658b3313ba9e951190/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cf7316cb3d029ae8bd3708b016b3dfcbe43250"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "ed3247696d40b1b0ad3b29c83b3c5fa3a0937ce5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14d094cacf2490a04f887658b3313ba9e951190/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14d094cacf2490a04f887658b3313ba9e951190/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e14d094cacf2490a04f887658b3313ba9e951190", "patch": "@@ -1,3 +1,10 @@\n+2013-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (struct mem_ref): Remove indep_ref and\n+\tdep_ref members.\n+\t(mem_ref_alloc): Do not allocate them.\n+\t(refs_independent_p): Do not query or maintain a cache.\n+\n 2013-03-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (memory_references): Drop all_refs_in_loop."}, {"sha": "338be75d495a3009357401d5c0f27a9b9a79312e", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14d094cacf2490a04f887658b3313ba9e951190/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14d094cacf2490a04f887658b3313ba9e951190/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=e14d094cacf2490a04f887658b3313ba9e951190", "patch": "@@ -134,10 +134,6 @@ typedef struct mem_ref\n \t\t\t\t   If it is only loaded, then it is independent\n \t\t\t\t     on all stores in the loop.  */\n   bitmap dep_loop;\t\t/* The complement of INDEP_LOOP.  */\n-\n-  bitmap indep_ref;\t\t/* The set of memory references on that\n-\t\t\t\t   this reference is independent.  */\n-  bitmap dep_ref;\t\t/* The complement of INDEP_REF.  */\n } *mem_ref_p;\n \n /* We use two bits per loop in the ref->{in,}dep_loop bitmaps, the first\n@@ -1482,8 +1478,6 @@ mem_ref_alloc (tree mem, unsigned hash, unsigned id)\n   ref->stored = BITMAP_ALLOC (&lim_bitmap_obstack);\n   ref->indep_loop = BITMAP_ALLOC (&lim_bitmap_obstack);\n   ref->dep_loop = BITMAP_ALLOC (&lim_bitmap_obstack);\n-  ref->indep_ref = BITMAP_ALLOC (&lim_bitmap_obstack);\n-  ref->dep_ref = BITMAP_ALLOC (&lim_bitmap_obstack);\n   ref->accesses_in_loop.create (0);\n \n   return ref;\n@@ -2228,33 +2222,18 @@ refs_independent_p (mem_ref_p ref1, mem_ref_p ref2)\n   if (ref1 == ref2)\n     return true;\n \n-  /* Reference dependence in a loop is symmetric.  */\n-  if (ref1->id > ref2->id)\n-    {\n-      mem_ref_p tem = ref1;\n-      ref1 = ref2;\n-      ref2 = tem;\n-    }\n-\n-  if (bitmap_bit_p (ref1->indep_ref, ref2->id))\n-    return true;\n-  if (bitmap_bit_p (ref1->dep_ref, ref2->id))\n-    return false;\n-\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Querying dependency of refs %u and %u: \",\n \t     ref1->id, ref2->id);\n \n   if (mem_refs_may_alias_p (ref1, ref2, &memory_accesses.ttae_cache))\n     {\n-      bitmap_set_bit (ref1->dep_ref, ref2->id);\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"dependent.\\n\");\n       return false;\n     }\n   else\n     {\n-      bitmap_set_bit (ref1->indep_ref, ref2->id);\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"independent.\\n\");\n       return true;"}]}