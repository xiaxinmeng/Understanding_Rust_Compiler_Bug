{"sha": "75047f795111150fd10a8f86f5c72deab10cde77", "node_id": "C_kwDOANBUbNoAKDc1MDQ3Zjc5NTExMTE1MGZkMTBhOGY4NmY1YzcyZGVhYjEwY2RlNzc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-06T18:26:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-08T02:03:28Z"}, "message": "c++: destroying delete, throw in new-expr [PR100588]\n\nThe standard says that a destroying operator delete is preferred, but that\nonly applies to the delete-expression, not the cleanup if a new-expression\ninitialization throws.  As a result of this patch, several of the destroying\ndelete tests don't get EH cleanups, but I'm turning off the warning in cases\nwhere the initialization can't throw anyway.\n\nIt's unclear what should happen if the class does not declare a non-deleting\noperator delete; a proposal in CWG was to call the global delete, which\nmakes sense to me if the class doesn't declare its own operator new.  If it\ndoes, we warn and don't call any deallocation function if initialization\nthrows.\n\n\tPR c++/100588\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_op_delete_call): Ignore destroying delete\n\tif alloc_fn.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/destroying-delete5.C: Expect warning.\n\t* g++.dg/cpp2a/destroying-delete6.C: New test.", "tree": {"sha": "a63f180ae340a0fd0282cc00b59d451118b239d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63f180ae340a0fd0282cc00b59d451118b239d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75047f795111150fd10a8f86f5c72deab10cde77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75047f795111150fd10a8f86f5c72deab10cde77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75047f795111150fd10a8f86f5c72deab10cde77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75047f795111150fd10a8f86f5c72deab10cde77/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e96bf91237bc0b42fe0079006507d42c155e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e96bf91237bc0b42fe0079006507d42c155e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e96bf91237bc0b42fe0079006507d42c155e69"}], "stats": {"total": 71, "additions": 67, "deletions": 4}, "files": [{"sha": "44fc6d0f6950305b2daef251f779537bcd6538d5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=75047f795111150fd10a8f86f5c72deab10cde77", "patch": "@@ -7267,6 +7267,8 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n   tree oaddr = addr;\n   addr = cp_convert (ptr_type_node, addr, complain);\n \n+  tree excluded_destroying = NULL_TREE;\n+\n   if (placement)\n     {\n       /* \"A declaration of a placement deallocation function matches the\n@@ -7352,6 +7354,15 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \tdealloc_info di_elt;\n \tif (usual_deallocation_fn_p (elt, &di_elt))\n \t  {\n+\t    /* If we're called for an EH cleanup in a new-expression, we can't\n+\t       use a destroying delete; the exception was thrown before the\n+\t       object was constructed.  */\n+\t    if (alloc_fn && di_elt.destroying)\n+\t      {\n+\t\texcluded_destroying = elt;\n+\t\tcontinue;\n+\t      }\n+\n \t    if (!fn)\n \t      {\n \t\tfn = elt;\n@@ -7499,6 +7510,14 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n       return ret;\n     }\n \n+  /* If there's only a destroying delete that we can't use because the\n+     object isn't constructed yet, and we used global new, use global\n+     delete as well.  */\n+  if (excluded_destroying\n+      && DECL_NAMESPACE_SCOPE_P (alloc_fn))\n+    return build_op_delete_call (code, addr, size, true, placement,\n+\t\t\t\t alloc_fn, complain);\n+\n   /* [expr.new]\n \n      If no unambiguous matching deallocation function can be found,\n@@ -7508,8 +7527,16 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n     {\n       if ((complain & tf_warning)\n \t  && !placement)\n-\twarning (0, \"no corresponding deallocation function for %qD\",\n-\t\t alloc_fn);\n+\t{\n+\t  bool w = warning (0,\n+\t\t\t    \"no corresponding deallocation function for %qD\",\n+\t\t\t    alloc_fn);\n+\t  if (w && excluded_destroying)\n+\t    inform (DECL_SOURCE_LOCATION (excluded_destroying), \"destroying \"\n+\t\t    \"delete %qD cannot be used to release the allocated memory\"\n+\t\t    \" if the initialization throws because the object is not \"\n+\t\t    \"constructed yet\", excluded_destroying);\n+\t}\n       return NULL_TREE;\n     }\n "}, {"sha": "6113d7f3d9e77442b7e62dbf0d668f10e03e4ba8", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete5.C?ref=75047f795111150fd10a8f86f5c72deab10cde77", "patch": "@@ -18,7 +18,7 @@ void * Expression::operator new(std::size_t sz)\n \n int i;\n \n-void Expression::operator delete(Expression *p, std::destroying_delete_t)\n+void Expression::operator delete(Expression *p, std::destroying_delete_t) // { dg-message \"destroying delete\" }\n {\n   Expression * e = p;\n   ::i = e->i;\n@@ -28,7 +28,7 @@ void Expression::operator delete(Expression *p, std::destroying_delete_t)\n \n int main()\n {\n-  auto p = new Expression();\n+  auto p = new Expression();\t// { dg-warning \"no corresponding dealloc\" }\n   p->i = 1;\n   delete p;\n   if (i != 1)"}, {"sha": "be7837380820813821445ec3b020ef1aeba7965f", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete6.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047f795111150fd10a8f86f5c72deab10cde77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete6.C?ref=75047f795111150fd10a8f86f5c72deab10cde77", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/100588\n+// { dg-do run { target c++20 } }\n+\n+extern \"C\" void abort ();\n+extern \"C\" int puts (const char *);\n+#include <new>\n+\n+#ifndef DEBUG\n+#define puts(S)\n+#endif\n+\n+class A {\n+ public:\n+  A() { throw 42; }\n+  ~A() { puts(\"A::~A\"); }\n+\n+  void operator delete(void* p) {\n+    puts(\"regular delete invoked\");\n+    ::operator delete(p);\n+  }\n+\n+  void operator delete(A* p, std::destroying_delete_t) {\n+    puts(\"destroying delete invoked\");\n+    p->~A();\n+    ::operator delete(p);\n+    abort ();\n+  }\n+};\n+\n+int main() {\n+  try {\n+    new A;\n+  } catch (int) {\n+  }\n+}\n+"}]}