{"sha": "54f9aba03140c7cdace8ff3c6847af855764656f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmOWFiYTAzMTQwYzdjZGFjZThmZjNjNjg0N2FmODU1NzY0NjU2Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-10-21T11:11:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-21T11:11:14Z"}, "message": "i386.md (kxnor<mode>): Add FLAGS_REG clobber.\n\n\t* config/i386/i386.md (kxnor<mode>): Add FLAGS_REG clobber.\n\nFrom-SVN: r203889", "tree": {"sha": "35bc2937347977887a0561da34b5fbf991be4f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bc2937347977887a0561da34b5fbf991be4f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f9aba03140c7cdace8ff3c6847af855764656f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f9aba03140c7cdace8ff3c6847af855764656f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f9aba03140c7cdace8ff3c6847af855764656f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f9aba03140c7cdace8ff3c6847af855764656f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6c6ba3c3e3a66fa934d0ef509ebea327f801e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c6ba3c3e3a66fa934d0ef509ebea327f801e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c6ba3c3e3a66fa934d0ef509ebea327f801e34"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "bbcc371ae7139fd038461a29b8f7999f22abaf9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f9aba03140c7cdace8ff3c6847af855764656f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f9aba03140c7cdace8ff3c6847af855764656f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54f9aba03140c7cdace8ff3c6847af855764656f", "patch": "@@ -1,3 +1,7 @@\n+2013-10-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (kxnor<mode>): Add FLAGS_REG clobber.\n+\n 2013-10-20  Jan Hubicka  <jh@suse.cz>\n \n \t* config/i386/i386-tune.def: Add comment; organize into categories"}, {"sha": "5413526a75b06536d1ebe7f2587ac3d1dd7e027c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f9aba03140c7cdace8ff3c6847af855764656f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f9aba03140c7cdace8ff3c6847af855764656f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=54f9aba03140c7cdace8ff3c6847af855764656f", "patch": "@@ -2302,9 +2302,12 @@\n ;; For loads of Q_REG to NONQ_REG we use full sized moves except for partial\n ;; register stall machines with, where we use QImode instructions, since\n ;; partial register stall can be caused there.  Then we use movzx.\n+\n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,q ,q ,r,r ,?r,m ,Yk,Yk,r\")\n-\t(match_operand:QI 1 \"general_operand\"      \"q ,qn,qm,q,rn,qm,qn,r ,Yk,Yk\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\"\n+\t\t\t\"=q,q ,q ,r,r ,?r,m ,Yk,Yk,r\")\n+\t(match_operand:QI 1 \"general_operand\"\n+\t\t\t\"q ,qn,qm,q,rn,qm,qn,r ,Yk,Yk\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -7828,8 +7831,7 @@\n    (parallel [(set (match_dup 0)\n \t\t   (and:HI (match_dup 0)\n \t\t\t   (match_dup 1)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n ;; Turn *anddi_1 into *andsi_1_zext if possible.\n (define_split\n@@ -8254,7 +8256,8 @@\n \t(not:SWI12\n \t  (xor:SWI12\n \t    (match_operand:SWI12 1 \"register_operand\" \"0,Yk\")\n-\t    (match_operand:SWI12 2 \"register_operand\" \"r,Yk\"))))]\n+\t    (match_operand:SWI12 2 \"register_operand\" \"r,Yk\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F\"\n   \"@\n    #\n@@ -8268,15 +8271,15 @@\n \t(not:SWI12\n \t  (xor:SWI12\n \t    (match_dup 0)\n-\t    (match_operand:SWI12 1 \"general_reg_operand\"))))]\n+\t    (match_operand:SWI12 1 \"general_reg_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F && reload_completed\"\n    [(parallel [(set (match_dup 0)\n \t\t    (xor:HI (match_dup 0)\n \t\t\t    (match_dup 1)))\n \t       (clobber (reg:CC FLAGS_REG))])\n     (set (match_dup 0)\n-\t (not:HI (match_dup 0)))]\n-  \"\")\n+\t (not:HI (match_dup 0)))])\n \n (define_insn \"kortestzhi\"\n   [(set (reg:CCZ FLAGS_REG)"}]}