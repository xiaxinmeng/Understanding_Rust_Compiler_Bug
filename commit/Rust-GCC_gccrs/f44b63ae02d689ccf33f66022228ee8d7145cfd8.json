{"sha": "f44b63ae02d689ccf33f66022228ee8d7145cfd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0YjYzYWUwMmQ2ODljY2YzM2Y2NjAyMjIyOGVlOGQ3MTQ1Y2ZkOA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-04-01T21:28:45Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-01T21:28:45Z"}, "message": "DeflaterOutputStream.java (deflate): Loop while def.needsInput.\n\n\n\t* DeflaterOutputStream.java (deflate):  Loop while def.needsInput.\n\t(finish):  def.deflate needs to be called in a loop.\n\t(inbuf, inbufLength):  New private fields.\n\t(write(int)): Use inbuf.\n\t(write(byte[],int,int):  Check if pending output in inbuf.\n\t* ZipOutputStream.java:  Don't use Deflater if stored.\n\tUse a Checksum object directly, not via a CheckedOutputStream.\n\t(uncompressed_size):  New field,\n\t(closeEntry):  Only write data_directory if needed.\n\t(write):  If STORED, write directly.\n\tAlways update crc, and uncompressed_size.\n\t(write_entry):  Fix lots of protocol erors.\n\nFrom-SVN: r40988", "tree": {"sha": "9640fc2c26ad169c5b16796e5cb191e977dd682c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9640fc2c26ad169c5b16796e5cb191e977dd682c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44b63ae02d689ccf33f66022228ee8d7145cfd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44b63ae02d689ccf33f66022228ee8d7145cfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44b63ae02d689ccf33f66022228ee8d7145cfd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44b63ae02d689ccf33f66022228ee8d7145cfd8/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa9de837a842e2c0bf32661fac8ca457be10ad54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9de837a842e2c0bf32661fac8ca457be10ad54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9de837a842e2c0bf32661fac8ca457be10ad54"}], "stats": {"total": 161, "additions": 110, "deletions": 51}, "files": [{"sha": "3c1ef11541094aea6a791a6e7f43753451818d55", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f44b63ae02d689ccf33f66022228ee8d7145cfd8", "patch": "@@ -1,3 +1,18 @@\n+2001-04-01  Per Bothner  <per@bothner.com>\n+\n+\t* DeflaterOutputStream.java (deflate):  Loop while def.needsInput.\n+\t(finish):  def.deflate needs to be called in a loop.\n+\t(inbuf, inbufLength):  New private fields.\n+\t(write(int)): Use inbuf.\n+\t(write(byte[],int,int):  Check if pending output in inbuf.\n+\t* ZipOutputStream.java:  Don't use Deflater if stored.\n+\tUse a Checksum object directly, not via a CheckedOutputStream.\n+\t(uncompressed_size):  New field,\n+\t(closeEntry):  Only write data_directory if needed.\n+\t(write):  If STORED, write directly.\n+\tAlways update crc, and uncompressed_size.\n+\t(write_entry):  Fix lots of protocol erors.\n+\n 2001-04-01  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t1.3-Compliant Implementation of java.io.File."}, {"sha": "7a1dbb2cf66333bdf71d0d1c30fa7cdc764636a8", "filename": "libjava/java/util/zip/DeflaterOutputStream.java", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java?ref=f44b63ae02d689ccf33f66022228ee8d7145cfd8", "patch": "@@ -50,13 +50,13 @@ public void close () throws IOException\n \n   protected void deflate () throws IOException\n   {\n-    while (true)\n+    do\n       {\n \tint len = def.deflate(buf, 0, buf.length);\n-\tif (len == 0 || len == -1)\n-\t  break;\n-\tout.write(buf, 0, len);\n-      }\n+\tif (len > 0)\n+\t  out.write(buf, 0, len);\n+       }\n+    while (! def.needsInput());\n   }\n \n   public DeflaterOutputStream (OutputStream out)\n@@ -78,23 +78,53 @@ public DeflaterOutputStream(OutputStream out, Deflater defl, int bufsize)\n \n   public void finish () throws IOException\n   {\n+    if (inbufLength > 0)\n+      {\n+\tdef.setInput (inbuf, 0, inbufLength);\n+\tdeflate ();\n+\tinbufLength = 0;\n+      }\n     def.finish();\n-    deflate ();\n+    while (! def.finished ())\n+      {\n+\tint len = def.deflate(buf, 0, buf.length);\n+\tif (len > 0)\n+\t  out.write(buf, 0, len);\n+      }\n   }\n \n   public void write (int bval) throws IOException\n   {\n-    byte[] b = new byte[1];\n-    b[0] = (byte) bval;\n-    write (b, 0, 1);\n+    if (inbuf == null)\n+      {\n+\tinbuf = new byte[128];\n+      }\n+    else if (inbufLength == inbuf.length)\n+      {\n+\tdef.setInput (inbuf, 0, inbufLength);\n+\tdeflate ();\n+\tinbufLength = 0;\n+      }\n+    inbuf[inbufLength++] = (byte) bval;\n   }\n \n   public void write (byte[] buf, int off, int len) throws IOException\n   {\n+    if (inbufLength > 0)\n+      {\n+\tdef.setInput (inbuf, 0, inbufLength);\n+\tdeflate ();\n+\tinbufLength = 0;\n+      }\n     def.setInput (buf, off, len);\n     deflate ();\n   }\n \n+  // Used, if needed, for write(int).\n+  private byte[] inbuf;\n+  // Used length of inbuf.\n+  private int inbufLength;\n+\n   // The retrieval buffer.\n   protected byte[] buf;\n "}, {"sha": "bcbc59154fb89bfb74547012081f17508b7507a8", "filename": "libjava/java/util/zip/ZipOutputStream.java", "status": "modified", "additions": 56, "deletions": 42, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44b63ae02d689ccf33f66022228ee8d7145cfd8/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java?ref=f44b63ae02d689ccf33f66022228ee8d7145cfd8", "patch": "@@ -47,35 +47,62 @@ public void close () throws IOException\n \n   public void closeEntry ()  throws IOException\n   {\n-    int uncompressed_size = def.getTotalIn();\n-    int compressed_size = def.getTotalOut();\n-    long crc = filter.getChecksum().getValue();\n+    int compressed_size;\n+    if (current.method == STORED)\n+      {\n+\tcompressed_size = uncompressed_size;\n+      }\n+    else\n+      {\n+\tsuper.finish();\n+\tcompressed_size = def.getTotalOut();\n+      }\n+    long crc = sum.getValue();\n \n     bytes_written += compressed_size;\n \n-    bytes_written += put4 (0x08074b50);\n     if (current.getCrc() == -1 || current.getCompressedSize() == -1\n \t|| current.getSize() == -1)\n       {\n \tcurrent.setCrc(crc);\n \tcurrent.compressedSize = compressed_size;\n \tcurrent.setSize(uncompressed_size);\n+\tput4 (0x08074b50);\n+\tput4 ((int) (current.getCrc()));\n+\tput4 ((int) (current.getCompressedSize()));\n+\tput4 ((int) (current.getSize()));\n+\tbytes_written += 16;\n       }\n-    else\n-      {\n-\tif (current.getCrc() != crc\n-\t    || current.getCompressedSize() != compressed_size\n-\t    || current.getSize() != uncompressed_size)\n-\t  throw new ZipException (\"zip entry field incorrect\");\n-      }\n-    bytes_written += put4 ((int) (current.getCrc()));\n-    bytes_written += put4 ((int) (current.getCompressedSize()));\n-    bytes_written += put4 ((int) (current.getSize()));\n+    else if (current.getCrc() != crc\n+\t     || current.getCompressedSize() != compressed_size\n+\t     || current.getSize() != uncompressed_size)\n+      throw new ZipException (\"zip entry field incorrect\");\n \n     current.next = chain;\n     chain = current;\n     current = null;\n-    filter = null;\n+  }\n+\n+  public void write (int bval) throws IOException\n+  {\n+    if (current.method == STORED)\n+      {\n+\tout.write(bval);\n+      }\n+    else\n+      super.write(bval);\n+    sum.update(bval);\n+    uncompressed_size += 1;\n+  }\n+\n+  public void write (byte[] buf, int off, int len) throws IOException\n+  {\n+    if (current.method == STORED)\n+      out.write(buf, off, len);\n+    else\n+      super.write(buf, off, len);\n+    sum.update(buf, off, len);\n+    uncompressed_size += len;\n   }\n \n   public void finish () throws IOException\n@@ -101,21 +128,19 @@ public void finish () throws IOException\n     // Another disk number.\n     put2 (0);\n     put2 (count);\n+    put2 (count);\n     put4 (bytes);\n     put4 ((int) offset);\n \n     byte[] c = comment.getBytes(\"8859_1\");\n     put2 (c.length);\n     out.write(c);\n-    out.write((byte) 0);\n   }\n \n   // Helper for finish and putNextEntry.\n   private int write_entry (ZipEntry entry, boolean is_local)\n     throws IOException\n   {\n-    long offset = bytes_written;\n-\n     int bytes = put4 (is_local ? 0x04034b50 : 0x02014b50);\n     if (! is_local)\n       bytes += put_version ();\n@@ -169,25 +194,22 @@ private int write_entry (ZipEntry entry, boolean is_local)\n \t// Internal file attributes.\n \tbytes += put2 (0);\n \t// External file attributes.\n-\tbytes += put2 (0);\n+\tbytes += put4 (0);\n \t// Relative offset of local header.\n-\tbytes += put2 ((int) offset);\n+\tbytes += put4 ((int) entry.relativeOffset);\n       }\n \n     out.write (name);\n-    out.write ((byte) 0);\n-    bytes += name.length + 1;\n+    bytes += name.length;\n     if (entry.extra != null)\n       {\n \tout.write(entry.extra);\n-\tout.write((byte) 0);\n-\tbytes += entry.extra.length + 1;\n+\tbytes += entry.extra.length;\n       }\n     if (comment != null)\n       {\n \tout.write(comment);\n-\tout.write((byte) 0);\n-\tbytes += comment.length + 1;\n+\tbytes += comment.length;\n       }\n \n     bytes_written += bytes;\n@@ -208,13 +230,13 @@ public void putNextEntry (ZipEntry entry) throws IOException\n \t// Just in case.\n \tentry.compressedSize = entry.getSize();\n       }\n+    entry.relativeOffset = bytes_written;\n     write_entry (entry, true);\n     current = entry;\n     int compr = (method == STORED) ? Deflater.NO_COMPRESSION : level;\n     def.reset();\n     def.setLevel(compr);\n-    filter = new CheckedOutputStream (new DeflaterOutputStream (out, def),\n-\t\t\t\t      new CRC32 ());\n+    sum.reset();\n   }\n \n   public void setLevel (int level)\n@@ -240,18 +262,10 @@ public void setComment (String comment)\n     this.comment = comment;\n   }\n \n-  public synchronized void write (byte[] buf, int off, int len)\n-    throws IOException\n-  {\n-    if (filter == null)\n-      throw new ZipException (\"no open zip entry\");\n-    filter.write(buf, off, len);\n-  }\n-\n   public ZipOutputStream (OutputStream out)\n   {\n-    super (out);\n-    def = new Deflater (level, true);\n+    super (out, new Deflater (Deflater.DEFAULT_COMPRESSION, true), 8192);\n+    sum = new CRC32 ();\n   }\n \n   private int put2 (int i) throws IOException\n@@ -282,14 +296,14 @@ private int put_version () throws IOException\n   private ZipEntry current;\n   // The chain of entries which have been written to this file.\n   private ZipEntry chain;\n-  // The output stream to which data should be sent.\n-  private CheckedOutputStream filter;\n \n   private int method = DEFLATED;\n   private int level = Deflater.DEFAULT_COMPRESSION;\n   private String comment = \"\";\n   private long bytes_written;\n \n-  // The Deflater we use.\n-  private Deflater def;\n+  private int uncompressed_size;\n+\n+  /** The checksum object. */\n+  private Checksum sum;\n }"}]}