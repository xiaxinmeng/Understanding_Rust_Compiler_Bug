{"sha": "6c6e776d78091abbf41d27cf42cdac5cd5693fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2ZTc3NmQ3ODA5MWFiYmY0MWQyN2NmNDJjZGFjNWNkNTY5M2ZmZg==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2002-09-13T18:08:16Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2002-09-13T18:08:16Z"}, "message": "cp-tree.h, tree.c: New function non_cast_lvalue_p.\n\n2002-09-13  Matt Austern  <austern@apple.com>\n        * cp/cp-tree.h, cp/tree.c: New function non_cast_lvalue_p.\n        * cp/call.c: Change call-by-const-reference mechanism to use\n        non_cast_lvalue_p when deciding whether the create a temporary.\n        We need a temporary when passing, e.g. (long) x by const ref.\n        * testsuite/g++.dg/other/constref[12].C: New, regression tests for\n        passing a cast expression to a function by const reference.\n\nFrom-SVN: r57115", "tree": {"sha": "03daa98a70f555ccc4b8fb9394928702aa0dc368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03daa98a70f555ccc4b8fb9394928702aa0dc368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6e776d78091abbf41d27cf42cdac5cd5693fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6e776d78091abbf41d27cf42cdac5cd5693fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6e776d78091abbf41d27cf42cdac5cd5693fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6e776d78091abbf41d27cf42cdac5cd5693fff/comments", "author": null, "committer": null, "parents": [{"sha": "d5909a796384bd39e8b9ed6c883f78e47438ef5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5909a796384bd39e8b9ed6c883f78e47438ef5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5909a796384bd39e8b9ed6c883f78e47438ef5b"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "3b620b78537501331cdcb82d30f4a3f19145b18f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -1,3 +1,11 @@\n+2002-09-13  Matt Austern  <austern@apple.com>\n+\t* cp/cp-tree.h, cp/tree.c: New function non_cast_lvalue_p.\n+\t* cp/call.c: Change call-by-const-reference mechanism to use\n+\tnon_cast_lvalue_p when deciding whether the create a temporary.\n+\tWe need a temporary when passing, e.g. (long) x by const ref.\n+\t* testsuite/g++.dg/other/constref[12].C: New, regression tests for\n+\tpassing a cast expression to a function by const reference.\n+\t\n 2002-09-13  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (attr type): Add callpal."}, {"sha": "b428145007b44f5277e7c6bc8f75c1f0c59d4b0a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -4059,7 +4059,7 @@ convert_like_real (convs, expr, fn, argnum, inner)\n \ttree ref_type = totype;\n \n \t/* If necessary, create a temporary.  */\n-\tif (NEED_TEMPORARY_P (convs) || !lvalue_p (expr))\n+\tif (NEED_TEMPORARY_P (convs) || !non_cast_lvalue_p (expr))\n \t  {\n \t    tree type = TREE_TYPE (TREE_OPERAND (convs, 0));\n \t    expr = build_target_expr_with_type (expr, type);"}, {"sha": "96c615d564301f9c31902c09f6a8deaf7ef2485f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -4184,6 +4184,7 @@ extern tree canonical_type_variant              PARAMS ((tree));\n extern void unshare_base_binfos\t\t\tPARAMS ((tree));\n extern int member_p\t\t\t\tPARAMS ((tree));\n extern cp_lvalue_kind real_lvalue_p\t\tPARAMS ((tree));\n+extern int non_cast_lvalue_p\t\t\tPARAMS ((tree));\n extern int non_cast_lvalue_or_else\t\tPARAMS ((tree, const char *));\n extern tree build_min\t\t\t\tPARAMS ((enum tree_code, tree,\n \t\t\t\t\t\t\t ...));"}, {"sha": "4fb4e49498ddee57668a1c85fa9f536c77118758", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -229,6 +229,14 @@ lvalue_p (ref)\n     (lvalue_p_1 (ref, /*class rvalue ok*/ 1, /*cast*/ 1) != clk_none);\n }\n \n+int\n+non_cast_lvalue_p (ref)\n+     tree ref;\n+{\n+  return \n+    (lvalue_p_1 (ref, /*class rvalue ok*/ 1, /*cast*/ 0) != clk_none);\n+}\n+\n /* Return nonzero if REF is an lvalue valid for this language;\n    otherwise, print an error message and return zero.  */\n "}, {"sha": "900a07de39c3a02016e31cd8c7cb13305416cfd2", "filename": "gcc/testsuite/g++.dg/other/constref1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref1.C?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Matt Austern 12 Sep 2002 <austern@apple.com>\n+\n+// Make sure that we can pass a cast-expression as an argument that's\n+// passed by const reference.\n+\n+void bar (const long&)\n+{ }\n+\n+void foo (int x)\n+{\n+  bar ((long) x);\n+}\n+"}, {"sha": "5c82e2dbbdb9b95d12c9a35c01b23eb48dff368a", "filename": "gcc/testsuite/g++.dg/other/constref2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6e776d78091abbf41d27cf42cdac5cd5693fff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconstref2.C?ref=6c6e776d78091abbf41d27cf42cdac5cd5693fff", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Matt Austern 12 Sep 2002 <austern@apple.com>\n+\n+// Make sure that we can pass a cast-expression as an argument that's\n+// passed to a function template by const reference.\n+\n+template <class T>\n+void bar (const T&)\n+{ }\n+\n+void foo (int x)\n+{\n+  bar ((long) x);\n+}"}]}