{"sha": "a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzZjkwYWRiZmZhMmVjOWZhZTJiMjhjN2RkMzNkMWI5MjNiNTQzMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-06-12T08:17:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-06-12T08:17:58Z"}, "message": "expr.c (expand_expr_real_1): Use straight-line flow.\n\n\t* expr.c (expand_expr_real_1) <TARGET_MEM_REF>: Use straight-line flow.\n\t<MEM_REF>: Use 'type' instead of TREE_TYPE (exp) and tidy up the first\n\tpart.  Use straight-line flow at the end.\n\t<COMPONENT_REF>: Remove superfluous else.\n\t<VIEW_CONVERT_EXPR>: Use 'type' instead of TREE_TYPE (exp).\n\nFrom-SVN: r199986", "tree": {"sha": "1ceb665c3456acaa5223368532097089feb9f4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ceb665c3456acaa5223368532097089feb9f4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431/comments", "author": null, "committer": null, "parents": [{"sha": "50d029619a7d4fb588b7bccd1cb8d428c08b19f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d029619a7d4fb588b7bccd1cb8d428c08b19f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d029619a7d4fb588b7bccd1cb8d428c08b19f3"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "0a577c3033ee5540996539d5555589f0960aeebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "patch": "@@ -1,3 +1,11 @@\n+2013-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1) <TARGET_MEM_REF>: Use straight-line flow.\n+\t<MEM_REF>: Use 'type' instead of TREE_TYPE (exp) and tidy up the first\n+\tpart.  Use straight-line flow at the end.\n+\t<COMPONENT_REF>: Remove superfluous else.\n+\t<VIEW_CONVERT_EXPR>: Use 'type' instead of TREE_TYPE (exp).\n+\n 2013-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/56564"}, {"sha": "2cdb87ca9b429969fff70b38a7303f175f8516a9", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53f90adbffa2ec9fae2b28c7dd33d1b923b5431/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a53f90adbffa2ec9fae2b28c7dd33d1b923b5431", "patch": "@@ -9602,7 +9602,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    create_output_operand (&ops[0], NULL_RTX, mode);\n \t    create_fixed_operand (&ops[1], temp);\n \t    expand_insn (icode, 2, ops);\n-\t    return ops[0].value;\n+\t    temp = ops[0].value;\n \t  }\n \treturn temp;\n       }\n@@ -9621,34 +9621,25 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tif (mem_ref_refers_to_non_mem_p (exp))\n \t  {\n \t    HOST_WIDE_INT offset = mem_ref_offset (exp).low;\n-\t    tree bit_offset;\n-\t    tree bftype;\n \t    base = TREE_OPERAND (base, 0);\n \t    if (offset == 0\n-\t\t&& host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+\t\t&& host_integerp (TYPE_SIZE (type), 1)\n \t\t&& (GET_MODE_BITSIZE (DECL_MODE (base))\n-\t\t    == TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp)))))\n-\t      return expand_expr (build1 (VIEW_CONVERT_EXPR,\n-\t\t\t\t\t  TREE_TYPE (exp), base),\n+\t\t    == TREE_INT_CST_LOW (TYPE_SIZE (type))))\n+\t      return expand_expr (build1 (VIEW_CONVERT_EXPR, type, base),\n \t\t\t\t  target, tmode, modifier);\n-\t    bit_offset = bitsize_int (offset * BITS_PER_UNIT);\n-\t    bftype = TREE_TYPE (base);\n-\t    if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n-\t      bftype = TREE_TYPE (exp);\n-\t    else\n+\t    if (TYPE_MODE (type) == BLKmode)\n \t      {\n \t\ttemp = assign_stack_temp (DECL_MODE (base),\n \t\t\t\t\t  GET_MODE_SIZE (DECL_MODE (base)));\n \t\tstore_expr (base, temp, 0, false);\n \t\ttemp = adjust_address (temp, BLKmode, offset);\n-\t\tset_mem_size (temp, int_size_in_bytes (TREE_TYPE (exp)));\n+\t\tset_mem_size (temp, int_size_in_bytes (type));\n \t\treturn temp;\n \t      }\n-\t    return expand_expr (build3 (BIT_FIELD_REF, bftype,\n-\t\t\t\t\tbase,\n-\t\t\t\t\tTYPE_SIZE (TREE_TYPE (exp)),\n-\t\t\t\t\tbit_offset),\n-\t\t\t\ttarget, tmode, modifier);\n+\t    exp = build3 (BIT_FIELD_REF, type, base, TYPE_SIZE (type),\n+\t\t\t  bitsize_int (offset * BITS_PER_UNIT));\n+\t    return expand_expr (exp, target, tmode, modifier);\n \t  }\n \taddress_mode = targetm.addr_space.address_mode (as);\n \tbase = TREE_OPERAND (exp, 0);\n@@ -9690,7 +9681,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\tcreate_output_operand (&ops[0], NULL_RTX, mode);\n \t\tcreate_fixed_operand (&ops[1], temp);\n \t\texpand_insn (icode, 2, ops);\n-\t\treturn ops[0].value;\n+\t\ttemp = ops[0].value;\n \t      }\n \t    else if (SLOW_UNALIGNED_ACCESS (mode, align))\n \t      temp = extract_bit_field (temp, GET_MODE_BITSIZE (mode),\n@@ -10202,7 +10193,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    || modifier == EXPAND_CONST_ADDRESS\n \t    || modifier == EXPAND_INITIALIZER)\n \t  return op0;\n-\telse if (target == 0)\n+\t\n+\tif (target == 0)\n \t  target = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n \n \tconvert_move (target, op0, unsignedp);\n@@ -10249,7 +10241,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* If we are converting to BLKmode, try to avoid an intermediate\n \t temporary by fetching an inner memory reference.  */\n       if (mode == BLKmode\n-\t  && TREE_CODE (TYPE_SIZE (TREE_TYPE (exp))) == INTEGER_CST\n+\t  && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n \t  && TYPE_MODE (TREE_TYPE (treeop0)) != BLKmode\n \t  && handled_component_p (treeop0))\n       {\n@@ -10268,7 +10260,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tif (!offset\n \t    && (bitpos % BITS_PER_UNIT) == 0\n \t    && bitsize >= 0\n-\t    && compare_tree_int (TYPE_SIZE (TREE_TYPE (exp)), bitsize) == 0)\n+\t    && compare_tree_int (TYPE_SIZE (type), bitsize) == 0)\n \t  {\n \t    /* See the normal_inner_ref case for the rationale.  */\n \t    orig_op0\n@@ -10309,8 +10301,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       }\n \n       if (!op0)\n-\top0 = expand_expr (treeop0,\n-\t\t\t   NULL_RTX, VOIDmode, modifier);\n+\top0 = expand_expr (treeop0, NULL_RTX, VOIDmode, modifier);\n \n       /* If the input and output modes are both the same, we are done.  */\n       if (mode == GET_MODE (op0))"}]}