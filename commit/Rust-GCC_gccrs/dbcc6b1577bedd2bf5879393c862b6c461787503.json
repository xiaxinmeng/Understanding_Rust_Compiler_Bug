{"sha": "dbcc6b1577bedd2bf5879393c862b6c461787503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjYzZiMTU3N2JlZGQyYmY1ODc5MzkzYzg2MmI2YzQ2MTc4NzUwMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-20T14:51:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-20T15:01:34Z"}, "message": "preprocessor: Further fix for EOF in macro args [PR97471]\n\nMy previous attempt at fixing this was incorrect.  The problem occurs\nearlier in that _cpp_lex_direct processes the unwinding EOF needs in\ncollect_args mode.  This patch changes it not to do that, in the same\nway as directive parsing works.  Also collect_args shouldn't push_back\nsuch fake EOFs, and neither should funlike_invocation_p.\n\n\tlibcpp/\n\t* lex.c (_cpp_lex_direct): Do not complete EOF processing when\n\tparsing_args.\n\t* macro.c (collect_args): Do not unwind fake EOF.\n\t(funlike_invocation_p): Do not unwind fake EOF.\n\t(cpp_context): Replace abort with gcc_assert.\n\tgcc/testsuite/\n\t* gcc.dg/cpp/endif.c: Move to ...\n\t* c-c++-common/cpp/endif.c: ... here.\n\t* gcc.dg/cpp/endif.h: Move to ...\n\t* c-c++-common/cpp/endif.h: ... here.\n\t* c-c++-common/cpp/eof-2.c: Adjust diagnostic.\n\t* c-c++-common/cpp/eof-3.c: Adjust diagnostic.", "tree": {"sha": "7c7367f1c312b308ff6755df41cbeea55c62fbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7367f1c312b308ff6755df41cbeea55c62fbe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbcc6b1577bedd2bf5879393c862b6c461787503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcc6b1577bedd2bf5879393c862b6c461787503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcc6b1577bedd2bf5879393c862b6c461787503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcc6b1577bedd2bf5879393c862b6c461787503/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35f258f4bbba7fa044f90b4f14d1bc942db58089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f258f4bbba7fa044f90b4f14d1bc942db58089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f258f4bbba7fa044f90b4f14d1bc942db58089"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "efea52c46c25427fb1cbb4ce6a1d03fdf392e552", "filename": "gcc/testsuite/c-c++-common/cpp/endif.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.c?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "previous_filename": "gcc/testsuite/gcc.dg/cpp/endif.c"}, {"sha": "37622491df3f4aa9c9d05a03275ae5d5f5263bef", "filename": "gcc/testsuite/c-c++-common/cpp/endif.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fendif.h?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "previous_filename": "gcc/testsuite/gcc.dg/cpp/endif.h"}, {"sha": "9cc4fed65646268c3c14560677a6f025a8724d15", "filename": "gcc/testsuite/c-c++-common/cpp/eof-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-2.c?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "patch": "@@ -5,4 +5,4 @@\n #define f(x) x\n \n #include \"eof-2.h\"\n- /* { dg-regexp {[^\\n]*eof-2.h:4: error: unterminated argument list invoking macro \"f\"\\n} } */\n+ /* { dg-regexp {[^\\n]*eof-2.h:4:21: error: unterminated argument list invoking macro \"f\"\\n} } */"}, {"sha": "e309a548c0c0f00956d8b5e30f57ba6da0277e88", "filename": "gcc/testsuite/c-c++-common/cpp/eof-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Feof-3.c?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "patch": "@@ -3,6 +3,6 @@\n /* { dg-do preprocess } */\n /* { dg-additional-options \"-include $srcdir/c-c++-common/cpp/eof-2.h\" } */\n \n- /* { dg-regexp {[^\\n]*eof-2.h:4: error: unterminated argument list invoking macro \"f\"\\n} } */\n+ /* { dg-regexp {[^\\n]*eof-2.h:4:21: error: unterminated argument list invoking macro \"f\"\\n} } */\n \n token )"}, {"sha": "fb222924c8c69fdbae2331df14f2f9b63a46b6ce", "filename": "libcpp/lex.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "patch": "@@ -2768,7 +2768,10 @@ _cpp_lex_direct (cpp_reader *pfile)\n       if (!_cpp_get_fresh_line (pfile))\n \t{\n \t  result->type = CPP_EOF;\n-\t  if (!pfile->state.in_directive)\n+\t  /* Not a real EOF in a directive or arg parsing -- we refuse\n+  \t     to advance to the next file now, and will once we're out\n+  \t     of those modes.  */\n+\t  if (!pfile->state.in_directive && !pfile->state.parsing_args)\n \t    {\n \t      /* Tell the compiler the line number of the EOF token.  */\n \t      result->src_loc = pfile->line_table->highest_line;"}, {"sha": "0874028b2116da107ca0c342e7c5a68250f64455", "filename": "libcpp/macro.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbcc6b1577bedd2bf5879393c862b6c461787503/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbcc6b1577bedd2bf5879393c862b6c461787503/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=dbcc6b1577bedd2bf5879393c862b6c461787503", "patch": "@@ -1259,13 +1259,10 @@ collect_args (cpp_reader *pfile, const cpp_hashnode *node,\n \n   if (token->type == CPP_EOF)\n     {\n-      /* We still need the CPP_EOF to end directives, to end\n-\t pre-expansion of a macro argument, and at the end of the main\n-\t file.  We do not want it at the end of a -include'd (forced)\n-\t header file.  */\n-      if (pfile->state.in_directive\n-\t  || !pfile->line_table->depth\n-\t  || pfile->context->prev)\n+      /* Unless the EOF is marking the end of an argument, it's a fake\n+\t one from the end of a file that _cpp_clean_line will not have\n+\t advanced past.  */\n+      if (token == &pfile->endarg)\n \t_cpp_backup_tokens (pfile, 1);\n       cpp_error (pfile, CPP_DL_ERROR,\n \t\t \"unterminated argument list invoking macro \\\"%s\\\"\",\n@@ -1328,13 +1325,19 @@ funlike_invocation_p (cpp_reader *pfile, cpp_hashnode *node,\n       pfile->state.parsing_args = 2;\n       return collect_args (pfile, node, pragma_buff, num_args);\n     }\n-\n-  /* Back up.  We may have skipped padding, in which case backing\n-     up more than one token when expanding macros is in general\n-     too difficult.  We re-insert it in its own context.  */\n-  _cpp_backup_tokens (pfile, 1);\n-  if (padding)\n-    _cpp_push_token_context (pfile, NULL, padding, 1);\n+  \n+  /* Back up.  A CPP_EOF is either an EOF from an argument we're\n+     expanding, or a fake one from lex_direct.  We want to backup the\n+     former, but not the latter.  We may have skipped padding, in\n+     which case backing up more than one token when expanding macros\n+     is in general too difficult.  We re-insert it in its own\n+     context.  */\n+  if (token->type != CPP_EOF || token == &pfile->endarg)\n+    {\n+      _cpp_backup_tokens (pfile, 1);\n+      if (padding)\n+\t_cpp_push_token_context (pfile, NULL, padding, 1);\n+    }\n \n   return NULL;\n }\n@@ -2638,8 +2641,7 @@ _cpp_pop_context (cpp_reader *pfile)\n   cpp_context *context = pfile->context;\n \n   /* We should not be popping the base context.  */\n-  if (context == &pfile->base_context)\n-    abort ();\n+  gcc_assert (context != &pfile->base_context);\n \n   if (context->c.macro)\n     {"}]}