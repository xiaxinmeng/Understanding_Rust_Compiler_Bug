{"sha": "f3365c1201908df5e3f929cc8fec3f4b88c126c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzNjVjMTIwMTkwOGRmNWUzZjkyOWNjOGZlYzNmNGI4OGMxMjZjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-08-09T22:03:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-08-09T22:03:07Z"}, "message": "PR c++/68703 - bogus error with dependent vector length\n\ngcc/c-family/\n\t* c-common.c (c_common_attribute_table): vector_size affects type\n\tidentity.\ngcc/cp/\n\t* decl2.c (any_dependent_type_attributes_p): New.\n\t* pt.c (dependent_type_p_r, type_dependent_expression_p): Check it.\n\t* semantics.c (finish_id_expression): Check it.\n\t* typeck.c (finish_class_member_access_expr): Check it.\n\nFrom-SVN: r239309", "tree": {"sha": "aff9bbf2a3b0a1784c16e435791500d42f2046d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff9bbf2a3b0a1784c16e435791500d42f2046d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3365c1201908df5e3f929cc8fec3f4b88c126c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3365c1201908df5e3f929cc8fec3f4b88c126c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3365c1201908df5e3f929cc8fec3f4b88c126c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3365c1201908df5e3f929cc8fec3f4b88c126c6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7597ae57977ff3d4ff359141a471acf22001f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7597ae57977ff3d4ff359141a471acf22001f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7597ae57977ff3d4ff359141a471acf22001f92"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "def4e11401f7c058ccdff8138a465e8c0cd7aaf8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -1,3 +1,8 @@\n+2016-08-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (c_common_attribute_table): vector_size affects type\n+\tidentity.\n+\n 2016-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "7fd84eebc44ee6820c0a30f92a6f10d43a85660e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -754,7 +754,7 @@ const struct attribute_spec c_common_attribute_table[] =\n   { \"deprecated\",             0, 1, false, false, false,\n \t\t\t      handle_deprecated_attribute, false },\n   { \"vector_size\",\t      1, 1, false, true, false,\n-\t\t\t      handle_vector_size_attribute, false },\n+\t\t\t      handle_vector_size_attribute, true },\n   { \"visibility\",\t      1, 1, false, false, false,\n \t\t\t      handle_visibility_attribute, false },\n   { \"tls_model\",\t      1, 1, true,  false, false,"}, {"sha": "ca04d6438a486255fbe00504e6f91753ff570b15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -1,5 +1,11 @@\n 2016-08-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/68703\n+\t* decl2.c (any_dependent_type_attributes_p): New.\n+\t* pt.c (dependent_type_p_r, type_dependent_expression_p): Check it.\n+\t* semantics.c (finish_id_expression): Check it.\n+\t* typeck.c (finish_class_member_access_expr): Check it.\n+\n \tPR c++/71712\n \t* class.c (check_abi_tags): Don't duplicate tags for conversion ops.\n "}, {"sha": "f98b1c4d50304897ddfb45248960b414506cbbda", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -5852,6 +5852,7 @@ extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree, tree);\n+extern bool any_dependent_type_attributes_p\t(tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern bool attributes_naming_typedef_ok\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);"}, {"sha": "55bb987ebbe643e7f3d933fc9775b8f48a6c24b2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -1305,6 +1305,22 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n     }\n }\n \n+/* True if ATTRS contains any dependent attributes that affect type\n+   identity.  */\n+\n+bool\n+any_dependent_type_attributes_p (tree attrs)\n+{\n+  for (tree a = attrs; a; a = TREE_CHAIN (a))\n+    if (ATTR_IS_DEPENDENT (a))\n+      {\n+\tconst attribute_spec *as = lookup_attribute_spec (TREE_PURPOSE (a));\n+\tif (as && as->affects_type_identity)\n+\t  return true;\n+      }\n+  return false;\n+}\n+\n /* Return true iff ATTRS are acceptable attributes to be applied in-place\n    to a typedef which gives a previously unnamed class or enum a name for\n    linkage purposes.  */"}, {"sha": "2638564612d73245730f2927419729b940c2eb7e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -22673,6 +22673,9 @@ dependent_type_p_r (tree type)\n   if (TREE_CODE (type) == TYPE_PACK_EXPANSION)\n     return true;\n \n+  if (any_dependent_type_attributes_p (TYPE_ATTRIBUTES (type)))\n+    return true;\n+\n   /* The standard does not specifically mention types that are local\n      to template functions or local classes, but they should be\n      considered dependent too.  For example:\n@@ -23225,6 +23228,12 @@ type_dependent_expression_p (tree expression)\n \n   gcc_assert (TREE_CODE (expression) != TYPE_DECL);\n \n+  /* Dependent type attributes might not have made it from the decl to\n+     the type yet.  */\n+  if (DECL_P (expression)\n+      && any_dependent_type_attributes_p (DECL_ATTRIBUTES (expression)))\n+    return true;\n+\n   return (dependent_type_p (TREE_TYPE (expression)));\n }\n "}, {"sha": "bffdddbb965bf7361490d7ad85440087921b6935", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -3548,6 +3548,12 @@ finish_id_expression (tree id_expression,\n \t resolve the name at instantiation time.  */\n       if (dependent_p)\n \t{\n+\t  if (DECL_P (decl)\n+\t      && any_dependent_type_attributes_p (DECL_ATTRIBUTES (decl)))\n+\t    /* Dependent type attributes on the decl mean that the TREE_TYPE is\n+\t       wrong, so just return the identifier.  */\n+\t    return id_expression;\n+\n \t  /* If we found a variable, then name lookup during the\n \t     instantiation will always resolve to the same VAR_DECL\n \t     (or an instantiation thereof).  */"}, {"sha": "a591d291602f10a51cbfb21dacb50234d89ecd3d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -2853,6 +2853,11 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t    }\n \t  if (member == error_mark_node)\n \t    return error_mark_node;\n+\t  if (DECL_P (member)\n+\t      && any_dependent_type_attributes_p (DECL_ATTRIBUTES (member)))\n+\t    /* Dependent type attributes on the decl mean that the TREE_TYPE is\n+\t       wrong, so don't use it.  */\n+\t    goto dependent;\n \t  if (TREE_CODE (member) == USING_DECL && DECL_DEPENDENT_P (member))\n \t    goto dependent;\n \t}"}, {"sha": "8901d0b231cebc18d6622fd6b6dedb06a474a231", "filename": "gcc/testsuite/g++.dg/ext/vector32.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32.C?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/68703\n+\n+template <int N>\n+struct D {\n+  int v __attribute__((vector_size (N * sizeof (int))));\n+  int f1 () { return this->v[N-1]; }\n+  int f2 () { return v[N-1]; }\n+};\n+\n+int\n+main ()\n+{\n+  D<4> a = { { 0, 1, 2, 3 } };\n+  D<8> b = { { 0, 1, 2, 3, 4, 5, 6, 7 } };\n+  if (a.f1 () != 3 || a.f2 () != 3\n+      || b.f1 () != 7 || b.f2 () != 7)\n+    __builtin_abort ();\n+}"}, {"sha": "8901d0b231cebc18d6622fd6b6dedb06a474a231", "filename": "gcc/testsuite/g++.dg/ext/vector32a.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3365c1201908df5e3f929cc8fec3f4b88c126c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector32a.C?ref=f3365c1201908df5e3f929cc8fec3f4b88c126c6", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/68703\n+\n+template <int N>\n+struct D {\n+  int v __attribute__((vector_size (N * sizeof (int))));\n+  int f1 () { return this->v[N-1]; }\n+  int f2 () { return v[N-1]; }\n+};\n+\n+int\n+main ()\n+{\n+  D<4> a = { { 0, 1, 2, 3 } };\n+  D<8> b = { { 0, 1, 2, 3, 4, 5, 6, 7 } };\n+  if (a.f1 () != 3 || a.f2 () != 3\n+      || b.f1 () != 7 || b.f2 () != 7)\n+    __builtin_abort ();\n+}"}]}