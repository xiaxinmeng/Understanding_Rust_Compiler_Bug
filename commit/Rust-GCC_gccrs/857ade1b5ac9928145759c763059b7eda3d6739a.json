{"sha": "857ade1b5ac9928145759c763059b7eda3d6739a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3YWRlMWI1YWM5OTI4MTQ1NzU5Yzc2MzA1OWI3ZWRhM2Q2NzM5YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-01T10:44:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T10:44:02Z"}, "message": "aspects.ads, [...]: Add aspect Type_Invariant, Precondition, Postcondition.\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add aspect Type_Invariant, Precondition,\n\tPostcondition.\n\t(Same_Aspect): New function.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add aspect\n\tType_Invariant, Precondition, Postcondition.\n\t* snames.ads-tmpl: Add Name_Type_Invariant.\n\nFrom-SVN: r177011", "tree": {"sha": "106672282b2d1ec78b292aad6110667ebe817201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/106672282b2d1ec78b292aad6110667ebe817201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/857ade1b5ac9928145759c763059b7eda3d6739a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857ade1b5ac9928145759c763059b7eda3d6739a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857ade1b5ac9928145759c763059b7eda3d6739a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857ade1b5ac9928145759c763059b7eda3d6739a/comments", "author": null, "committer": null, "parents": [{"sha": "bd949ee2a3d34419fd1ec4389a7c02174b21ed1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd949ee2a3d34419fd1ec4389a7c02174b21ed1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd949ee2a3d34419fd1ec4389a7c02174b21ed1d"}], "stats": {"total": 170, "additions": 135, "deletions": 35}, "files": [{"sha": "f050e328cfc8fe4633e8f746b50a1ef19076436d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=857ade1b5ac9928145759c763059b7eda3d6739a", "patch": "@@ -1,3 +1,12 @@\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add aspect Type_Invariant, Precondition,\n+\tPostcondition.\n+\t(Same_Aspect): New function.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add aspect\n+\tType_Invariant, Precondition, Postcondition.\n+\t* snames.ads-tmpl: Add Name_Type_Invariant.\n+\n 2011-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Don't call Check_Aspect_At_Freeze_Point"}, {"sha": "b92891c512b8801b2db2c9403d9ee29791913751", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=857ade1b5ac9928145759c763059b7eda3d6739a", "patch": "@@ -72,8 +72,8 @@ package body Aspects is\n       Asp : Aspect_Id;\n    end record;\n \n-   Aspect_Names : constant array (Integer range <>) of Aspect_Entry := (\n-     (Name_Ada_2005,                     Aspect_Ada_2005),\n+   Aspect_Names : constant array (Integer range <>) of Aspect_Entry :=\n+    ((Name_Ada_2005,                     Aspect_Ada_2005),\n      (Name_Ada_2012,                     Aspect_Ada_2012),\n      (Name_Address,                      Aspect_Address),\n      (Name_Alignment,                    Aspect_Alignment),\n@@ -95,7 +95,9 @@ package body Aspects is\n      (Name_Pack,                         Aspect_Pack),\n      (Name_Persistent_BSS,               Aspect_Persistent_BSS),\n      (Name_Post,                         Aspect_Post),\n+     (Name_Postcondition,                Aspect_Postcondition),\n      (Name_Pre,                          Aspect_Pre),\n+     (Name_Precondition,                 Aspect_Precondition),\n      (Name_Predicate,                    Aspect_Predicate),\n      (Name_Preelaborable_Initialization, Aspect_Preelaborable_Initialization),\n      (Name_Pure_Function,                Aspect_Pure_Function),\n@@ -108,6 +110,7 @@ package body Aspects is\n      (Name_Stream_Size,                  Aspect_Stream_Size),\n      (Name_Suppress,                     Aspect_Suppress),\n      (Name_Suppress_Debug_Info,          Aspect_Suppress_Debug_Info),\n+     (Name_Type_Invariant,               Aspect_Type_Invariant),\n      (Name_Unchecked_Union,              Aspect_Unchecked_Union),\n      (Name_Universal_Aliasing,           Aspect_Universal_Aliasing),\n      (Name_Unmodified,                   Aspect_Unmodified),\n@@ -217,6 +220,70 @@ package body Aspects is\n       return Has_Aspect_Specifications_Flag (Nkind (N));\n    end Permits_Aspect_Specifications;\n \n+   -----------------\n+   -- Same_Aspect --\n+   -----------------\n+\n+   --  Table used for Same_Aspect, maps aspect to canonical aspect\n+\n+   Canonical_Aspect : constant array (Aspect_Id) of Aspect_Id := (\n+    No_Aspect                           => No_Aspect,\n+    Aspect_Ada_2005                     => Aspect_Ada_2005,\n+    Aspect_Ada_2012                     => Aspect_Ada_2005,\n+    Aspect_Address                      => Aspect_Address,\n+    Aspect_Alignment                    => Aspect_Alignment,\n+    Aspect_Atomic                       => Aspect_Atomic,\n+    Aspect_Atomic_Components            => Aspect_Atomic_Components,\n+    Aspect_Bit_Order                    => Aspect_Bit_Order,\n+    Aspect_Component_Size               => Aspect_Component_Size,\n+    Aspect_Discard_Names                => Aspect_Discard_Names,\n+    Aspect_Dynamic_Predicate            => Aspect_Predicate,\n+    Aspect_External_Tag                 => Aspect_External_Tag,\n+    Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n+    Aspect_Inline                       => Aspect_Inline,\n+    Aspect_Inline_Always                => Aspect_Inline,\n+    Aspect_Input                        => Aspect_Input,\n+    Aspect_Invariant                    => Aspect_Invariant,\n+    Aspect_Machine_Radix                => Aspect_Machine_Radix,\n+    Aspect_No_Return                    => Aspect_No_Return,\n+    Aspect_Object_Size                  => Aspect_Object_Size,\n+    Aspect_Output                       => Aspect_Output,\n+    Aspect_Pack                         => Aspect_Pack,\n+    Aspect_Persistent_BSS               => Aspect_Persistent_BSS,\n+    Aspect_Post                         => Aspect_Post,\n+    Aspect_Postcondition                => Aspect_Post,\n+    Aspect_Pre                          => Aspect_Pre,\n+    Aspect_Precondition                 => Aspect_Pre,\n+    Aspect_Predicate                    => Aspect_Predicate,\n+    Aspect_Preelaborable_Initialization => Aspect_Preelaborable_Initialization,\n+    Aspect_Pure_Function                => Aspect_Pure_Function,\n+    Aspect_Read                         => Aspect_Read,\n+    Aspect_Shared                       => Aspect_Atomic,\n+    Aspect_Size                         => Aspect_Size,\n+    Aspect_Static_Predicate             => Aspect_Predicate,\n+    Aspect_Storage_Pool                 => Aspect_Storage_Pool,\n+    Aspect_Storage_Size                 => Aspect_Storage_Size,\n+    Aspect_Stream_Size                  => Aspect_Stream_Size,\n+    Aspect_Suppress                     => Aspect_Suppress,\n+    Aspect_Suppress_Debug_Info          => Aspect_Suppress_Debug_Info,\n+    Aspect_Type_Invariant               => Aspect_Invariant,\n+    Aspect_Unchecked_Union              => Aspect_Unchecked_Union,\n+    Aspect_Universal_Aliasing           => Aspect_Universal_Aliasing,\n+    Aspect_Unmodified                   => Aspect_Unmodified,\n+    Aspect_Unreferenced                 => Aspect_Unreferenced,\n+    Aspect_Unreferenced_Objects         => Aspect_Unreferenced_Objects,\n+    Aspect_Unsuppress                   => Aspect_Unsuppress,\n+    Aspect_Value_Size                   => Aspect_Value_Size,\n+    Aspect_Volatile                     => Aspect_Volatile,\n+    Aspect_Volatile_Components          => Aspect_Volatile_Components,\n+    Aspect_Warnings                     => Aspect_Warnings,\n+    Aspect_Write                        => Aspect_Write);\n+\n+   function Same_Aspect (A1 : Aspect_Id; A2 : Aspect_Id) return Boolean is\n+   begin\n+      return Canonical_Aspect (A1) = Canonical_Aspect (A2);\n+   end Same_Aspect;\n+\n    -------------------------------\n    -- Set_Aspect_Specifications --\n    -------------------------------"}, {"sha": "dc117e1aa20ec30a666a41e719ed9eefe56705aa", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=857ade1b5ac9928145759c763059b7eda3d6739a", "patch": "@@ -55,7 +55,9 @@ package Aspects is\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Output,\n       Aspect_Post,\n+      Aspect_Postcondition,\n       Aspect_Pre,\n+      Aspect_Precondition,\n       Aspect_Predicate,                     -- GNAT\n       Aspect_Read,\n       Aspect_Size,\n@@ -64,6 +66,7 @@ package Aspects is\n       Aspect_Storage_Size,\n       Aspect_Stream_Size,\n       Aspect_Suppress,\n+      Aspect_Type_Invariant,\n       Aspect_Unsuppress,\n       Aspect_Value_Size,                    -- GNAT\n       Aspect_Warnings,\n@@ -125,33 +128,36 @@ package Aspects is\n    --  The following array indicates what argument type is required\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n-                       (No_Aspect                           => Optional,\n-                        Aspect_Address                      => Expression,\n-                        Aspect_Alignment                    => Expression,\n-                        Aspect_Bit_Order                    => Expression,\n-                        Aspect_Component_Size               => Expression,\n-                        Aspect_Dynamic_Predicate            => Expression,\n-                        Aspect_External_Tag                 => Expression,\n-                        Aspect_Input                        => Name,\n-                        Aspect_Invariant                    => Expression,\n-                        Aspect_Machine_Radix                => Expression,\n-                        Aspect_Object_Size                  => Expression,\n-                        Aspect_Output                       => Name,\n-                        Aspect_Post                         => Expression,\n-                        Aspect_Pre                          => Expression,\n-                        Aspect_Predicate                    => Expression,\n-                        Aspect_Read                         => Name,\n-                        Aspect_Size                         => Expression,\n-                        Aspect_Static_Predicate             => Expression,\n-                        Aspect_Storage_Pool                 => Name,\n-                        Aspect_Storage_Size                 => Expression,\n-                        Aspect_Stream_Size                  => Expression,\n-                        Aspect_Suppress                     => Name,\n-                        Aspect_Unsuppress                   => Name,\n-                        Aspect_Value_Size                   => Expression,\n-                        Aspect_Warnings                     => Name,\n-                        Aspect_Write                        => Name,\n-                        Boolean_Aspects                     => Optional);\n+                       (No_Aspect                => Optional,\n+                        Aspect_Address           => Expression,\n+                        Aspect_Alignment         => Expression,\n+                        Aspect_Bit_Order         => Expression,\n+                        Aspect_Component_Size    => Expression,\n+                        Aspect_Dynamic_Predicate => Expression,\n+                        Aspect_External_Tag      => Expression,\n+                        Aspect_Input             => Name,\n+                        Aspect_Invariant         => Expression,\n+                        Aspect_Machine_Radix     => Expression,\n+                        Aspect_Object_Size       => Expression,\n+                        Aspect_Output            => Name,\n+                        Aspect_Post              => Expression,\n+                        Aspect_Postcondition     => Expression,\n+                        Aspect_Pre               => Expression,\n+                        Aspect_Precondition      => Expression,\n+                        Aspect_Predicate         => Expression,\n+                        Aspect_Read              => Name,\n+                        Aspect_Size              => Expression,\n+                        Aspect_Static_Predicate  => Expression,\n+                        Aspect_Storage_Pool      => Name,\n+                        Aspect_Storage_Size      => Expression,\n+                        Aspect_Stream_Size       => Expression,\n+                        Aspect_Suppress          => Name,\n+                        Aspect_Type_Invariant    => Expression,\n+                        Aspect_Unsuppress        => Name,\n+                        Aspect_Value_Size        => Expression,\n+                        Aspect_Warnings          => Name,\n+                        Aspect_Write             => Name,\n+                        Boolean_Aspects          => Optional);\n \n    function Get_Aspect_Id (Name : Name_Id) return Aspect_Id;\n    pragma Inline (Get_Aspect_Id);\n@@ -207,6 +213,11 @@ package Aspects is\n    --  Otherwise the aspects are moved and on return Has_Aspects (To) is True,\n    --  and Has_Aspects (From) is False.\n \n+   function Same_Aspect (A1 : Aspect_Id; A2 : Aspect_Id) return Boolean;\n+   --  Returns True if A1 and A2 are (essentially) the same aspect. This is not\n+   --  a simple equality test because e.g. Post and Postcondition are the same.\n+   --  This is used for detecting duplicate aspects.\n+\n    procedure Tree_Write;\n    --  Writes contents of Aspect_Specifications hash table to the tree file\n "}, {"sha": "5341eb4de480aa4050264aec8c0e71dab011f7d2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=857ade1b5ac9928145759c763059b7eda3d6739a", "patch": "@@ -753,7 +753,7 @@ package body Sem_Ch13 is\n \n             Anod := First (L);\n             while Anod /= Aspect loop\n-               if Nam = Chars (Identifier (Anod))\n+               if Same_Aspect (A_Id, Get_Aspect_Id (Chars (Identifier (Anod))))\n                  and then Comes_From_Source (Aspect)\n                then\n                   Error_Msg_Name_1 := Nam;\n@@ -932,11 +932,15 @@ package body Sem_Ch13 is\n                --  required pragma placement. The processing for the pragmas\n                --  takes care of the required delay.\n \n-               when Aspect_Pre | Aspect_Post => declare\n+               when Aspect_Pre           |\n+                    Aspect_Precondition  |\n+                    Aspect_Post          |\n+                    Aspect_Postcondition =>\n+               declare\n                   Pname : Name_Id;\n \n                begin\n-                  if A_Id = Aspect_Pre then\n+                  if A_Id = Aspect_Pre or else A_Id = Aspect_Precondition then\n                      Pname := Name_Precondition;\n                   else\n                      Pname := Name_Postcondition;\n@@ -1020,7 +1024,8 @@ package body Sem_Ch13 is\n                --  get the required pragma placement. The pragma processing\n                --  takes care of the required delay.\n \n-               when Aspect_Invariant =>\n+               when Aspect_Invariant      |\n+                    Aspect_Type_Invariant =>\n \n                   --  Construct the pragma\n \n@@ -1113,7 +1118,11 @@ package body Sem_Ch13 is\n                --  For Pre/Post cases, insert immediately after the entity\n                --  declaration, since that is the required pragma placement.\n \n-               if A_Id = Aspect_Pre or else A_Id = Aspect_Post then\n+               if A_Id = Aspect_Pre          or else\n+                  A_Id = Aspect_Post         or else\n+                  A_Id = Aspect_Precondition or else\n+                  A_Id = Aspect_Postcondition\n+               then\n                   Insert_After (N, Aitem);\n \n                --  For all other cases, insert in sequence\n@@ -5131,9 +5140,12 @@ package body Sem_Ch13 is\n          when Aspect_Dynamic_Predicate |\n               Aspect_Invariant         |\n               Aspect_Pre               |\n+              Aspect_Precondition      |\n               Aspect_Post              |\n+              Aspect_Postcondition     |\n               Aspect_Predicate         |\n-              Aspect_Static_Predicate  =>\n+              Aspect_Static_Predicate  |\n+              Aspect_Type_Invariant    =>\n             T := Standard_Boolean;\n       end case;\n "}, {"sha": "03def0d825a1327bb3dc77d99ef97227b0b928e7", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857ade1b5ac9928145759c763059b7eda3d6739a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=857ade1b5ac9928145759c763059b7eda3d6739a", "patch": "@@ -141,6 +141,7 @@ package Snames is\n    Name_Post                           : constant Name_Id := N + $;\n    Name_Pre                            : constant Name_Id := N + $;\n    Name_Static_Predicate               : constant Name_Id := N + $;\n+   Name_Type_Invariant                 : constant Name_Id := N + $;\n \n    --  Some special names used by the expander. Note that the lower case u's\n    --  at the start of these names get translated to extra underscores. These"}]}