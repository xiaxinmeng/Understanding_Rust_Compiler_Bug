{"sha": "c5ed0148347beea1bd34795de146adddd2454c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlZDAxNDgzNDdiZWVhMWJkMzQ3OTVkZTE0NmFkZGRkMjQ1NGMzNg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2021-06-11T14:56:37Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2021-06-11T14:56:48Z"}, "message": "arm: Fix the mve multilib for the broken cmse support (pr99939).\n\nThe current CMSE support in the multilib build for\n\"-march=armv8.1-m.main+mve -mfloat-abi=hard -mfpu=auto\" is broken\nas specified in PR99939 and this patch fixes the issue.\n\ngcc/testsuite/ChangeLog:\n\n2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/99939\n\t* gcc.target/arm/cmse/cmse-18.c: Add separate scan-assembler\n\tdirectives check for target is v8.1-m.main+mve or not before\n\tcomparing the assembly output.\n\t* gcc.target/arm/cmse/cmse-20.c: New test.\n\nlibgcc/ChangeLog:\n\n2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/99939\n\t* config/arm/cmse_nonsecure_call.S: Add\t__ARM_FEATURE_MVE\n\tmacro.\n\t* config/arm/t-arm: To link cmse.o and cmse_nonsecure_call.o\n\ton passing -mcmse option.", "tree": {"sha": "52fca805fdad687184b7d4318c16ad9e7589a2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52fca805fdad687184b7d4318c16ad9e7589a2ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ed0148347beea1bd34795de146adddd2454c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ed0148347beea1bd34795de146adddd2454c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ed0148347beea1bd34795de146adddd2454c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ed0148347beea1bd34795de146adddd2454c36/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117c64266405e244da4dae3ae7b60905af63b955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117c64266405e244da4dae3ae7b60905af63b955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117c64266405e244da4dae3ae7b60905af63b955"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "db7d975a90ea4b3333d1810aea03949ec1e8837e", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-18.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ed0148347beea1bd34795de146adddd2454c36/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ed0148347beea1bd34795de146adddd2454c36/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-18.c?ref=c5ed0148347beea1bd34795de146adddd2454c36", "patch": "@@ -8,4 +8,5 @@ void bar(f func, int a)\n   func(a);\n }\n \n-/* { dg-final { scan-rtl-dump \"call unspec\\\\\\[\\\\\\[r4:SI\\\\\\]\\\\\\]\" \"final\" } } */\n+/* { dg-final { scan-rtl-dump \"call unspec\\\\\\[\\\\\\[r4:SI\\\\\\]\\\\\\]\" \"final\" { target { ! arm_v8_1m_mve_ok } } } } */\n+/* { dg-final { scan-rtl-dump \"call unspec\\\\\\[\\\\\\[r\\[0-7\\]:SI\\\\\\]\\\\\\]\" \"final\" { target { arm_v8_1m_mve_ok } } } } */"}, {"sha": "08e89bff6378f1f96950fc40f3ab3946bd433773", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-20.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ed0148347beea1bd34795de146adddd2454c36/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ed0148347beea1bd34795de146adddd2454c36/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-20.c?ref=c5ed0148347beea1bd34795de146adddd2454c36", "patch": "@@ -0,0 +1,28 @@\n+/* This test is executed only if the execution engine supports CMSE instructions.  */\n+/* { dg-options \"--save-temps -mcmse -Wl,--section-start,.gnu.sgstubs=0x00400000\" } */\n+\n+#include <arm_cmse.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+void __attribute__((cmse_nonsecure_entry))\n+secure_fun (int a, int *p)\n+{\n+  void *b = cmse_check_address_range ((void *)p, a, 1);\n+\n+  if (b == NULL)\n+   __builtin_abort ();\n+  printf(\"%d\", *((int *)b));\n+}\n+\n+int\n+main (void)\n+{\n+  int *ptr;\n+  int size = 1;\n+  ptr = (int *) calloc (1, sizeof(int *));\n+  *ptr = 1315852292;\n+  secure_fun (size, ptr);\n+  free (ptr);\n+  return 0;\n+}"}, {"sha": "00830ade98ea650c328c709d5d308fbc96f7f21c", "filename": "libgcc/config/arm/cmse_nonsecure_call.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ed0148347beea1bd34795de146adddd2454c36/libgcc%2Fconfig%2Farm%2Fcmse_nonsecure_call.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ed0148347beea1bd34795de146adddd2454c36/libgcc%2Fconfig%2Farm%2Fcmse_nonsecure_call.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fcmse_nonsecure_call.S?ref=c5ed0148347beea1bd34795de146adddd2454c36", "patch": "@@ -25,7 +25,7 @@\n \n .syntax unified\n #ifdef __ARM_PCS_VFP\n-# if __ARM_FP & 0x8\n+# if (__ARM_FP & 0x8) || (__ARM_FEATURE_MVE & 1)\n \t.fpu fpv5-d16\n # else\n \t.fpu fpv4-sp-d16\n@@ -59,7 +59,7 @@ vmov\t    s24, s25, r5, r5\n vmov\t    s26, s27, r5, r5\n vmov\t    s28, s29, r5, r5\n vmov\t    s30, s31, r5, r5\n-#elif __ARM_FP & 0x08\n+#elif (__ARM_FP & 0x8) || (__ARM_FEATURE_MVE & 1)\n vmov.f64    d9, d8\n vmov.f64    d10, d8\n vmov.f64    d11, d8"}, {"sha": "c1553d4e5d80751b13dc2e9c9e36d5ebe82e5f8c", "filename": "libgcc/config/arm/t-arm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ed0148347beea1bd34795de146adddd2454c36/libgcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ed0148347beea1bd34795de146adddd2454c36/libgcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-arm?ref=c5ed0148347beea1bd34795de146adddd2454c36", "patch": "@@ -3,18 +3,17 @@ LIB1ASMFUNCS = _thumb1_case_sqi _thumb1_case_uqi _thumb1_case_shi \\\n \t_thumb1_case_uhi _thumb1_case_si _speculation_barrier\n \n HAVE_CMSE:=$(findstring __ARM_FEATURE_CMSE,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n-HAVE_V81M:=$(findstring armv8.1-m.main,$(gcc_compile_bare))\n ifeq ($(shell $(gcc_compile_bare) -E -mcmse - </dev/null >/dev/null 2>/dev/null; echo $$?),0)\n CMSE_OPTS:=-mcmse\n endif\n \n ifdef HAVE_CMSE\n-ifndef HAVE_V81M\n+\n libgcc-objects += cmse.o cmse_nonsecure_call.o\n \n cmse.o: $(srcdir)/config/arm/cmse.c\n \t$(gcc_compile) -c $(CMSE_OPTS) $<\n+\n cmse_nonsecure_call.o: $(srcdir)/config/arm/cmse_nonsecure_call.S\n \t\t       $(gcc_compile) -c $<\n endif\n-endif"}]}