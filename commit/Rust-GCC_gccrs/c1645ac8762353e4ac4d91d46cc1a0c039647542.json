{"sha": "c1645ac8762353e4ac4d91d46cc1a0c039647542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2NDVhYzg3NjIzNTNlNGFjNGQ5MWQ0NmNjMWEwYzAzOTY0NzU0Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T10:53:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T10:53:30Z"}, "message": "[multiple changes]\n\n2013-10-10  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Add gnat2xml doc.\n\n2013-10-10  Doug Rupp  <rupp@adacore.com>\n\n\t* s-vxwork-arm.ads: Fix interface to FP_CONTEXT.\n\n2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specification): An aspect Import\n\ton a variable need not have a convention specified, as long as\n\tthe implicit convention of the object, obtained from its type,\n\tis Ada or Ada-related.\n\n2013-10-10  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb (Standard_Unsigned_64): New internal type.\n\t* gnat_rm.texi: Update documentation on To_Address.\n\t* sem_attr.adb (Analyze_Attribute, case To_Address): Fix\n\tproblem with out of range static values given as literals or\n\tnamed numbers.\n\t* stand.ads (Standard_Unsigned_64): New internal type.\n\t* stand.adb: Minor reformatting.\n\nFrom-SVN: r203346", "tree": {"sha": "5362afd7bb818177361b88ce362aa0381bde51bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5362afd7bb818177361b88ce362aa0381bde51bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1645ac8762353e4ac4d91d46cc1a0c039647542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1645ac8762353e4ac4d91d46cc1a0c039647542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1645ac8762353e4ac4d91d46cc1a0c039647542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1645ac8762353e4ac4d91d46cc1a0c039647542/comments", "author": null, "committer": null, "parents": [{"sha": "f0e7963fb90348ae34577e0060dc80d03d71279e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e7963fb90348ae34577e0060dc80d03d71279e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e7963fb90348ae34577e0060dc80d03d71279e"}], "stats": {"total": 619, "additions": 606, "deletions": 13}, "files": [{"sha": "b0b865443deba21e93daf54ca1c9e29926418839", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -1,3 +1,28 @@\n+2013-10-10  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Add gnat2xml doc.\n+\n+2013-10-10  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-vxwork-arm.ads: Fix interface to FP_CONTEXT.\n+\n+2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specification): An aspect Import\n+\ton a variable need not have a convention specified, as long as\n+\tthe implicit convention of the object, obtained from its type,\n+\tis Ada or Ada-related.\n+\n+2013-10-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb (Standard_Unsigned_64): New internal type.\n+\t* gnat_rm.texi: Update documentation on To_Address.\n+\t* sem_attr.adb (Analyze_Attribute, case To_Address): Fix\n+\tproblem with out of range static values given as literals or\n+\tnamed numbers.\n+\t* stand.ads (Standard_Unsigned_64): New internal type.\n+\t* stand.adb: Minor reformatting.\n+\n 2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Selected_Component,"}, {"sha": "57355be4f2c2601fe9c53092ea7b2e62855f9282", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -1305,6 +1305,9 @@ package body CStand is\n       Set_Scope (Standard_Integer_64, Standard_Standard);\n       Build_Signed_Integer_Type (Standard_Integer_64, 64);\n \n+      --  Standard_Unsigned is not user visible, but is used internally. It\n+      --  is an unsigned type with the same length as Standard.Integer.\n+\n       Standard_Unsigned := New_Standard_Entity;\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Unsigned);\n@@ -1329,6 +1332,32 @@ package body CStand is\n       Set_Etype (High_Bound (R_Node), Standard_Unsigned);\n       Set_Scalar_Range (Standard_Unsigned, R_Node);\n \n+      --  Standard_Unsigned_64 is not user visible, but is used internally. It\n+      --  is an unsigned type mod 2**64, 64-bits unsigned, size is 64.\n+\n+      Standard_Unsigned_64 := New_Standard_Entity;\n+      Decl := New_Node (N_Full_Type_Declaration, Stloc);\n+      Set_Defining_Identifier (Decl, Standard_Unsigned_64);\n+      Make_Name (Standard_Unsigned_64, \"unsigned_64\");\n+\n+      Set_Ekind             (Standard_Unsigned_64, E_Modular_Integer_Type);\n+      Set_Scope             (Standard_Unsigned_64, Standard_Standard);\n+      Set_Etype             (Standard_Unsigned_64, Standard_Unsigned_64);\n+      Init_Size             (Standard_Unsigned_64, 64);\n+      Set_Elem_Alignment    (Standard_Unsigned_64);\n+      Set_Modulus           (Standard_Unsigned_64, Uint_2 ** 64);\n+      Set_Is_Unsigned_Type  (Standard_Unsigned_64);\n+      Set_Size_Known_At_Compile_Time\n+                            (Standard_Unsigned_64);\n+      Set_Is_Known_Valid    (Standard_Unsigned_64, True);\n+\n+      R_Node := New_Node (N_Range, Stloc);\n+      Set_Low_Bound  (R_Node, Make_Integer (Uint_0));\n+      Set_High_Bound (R_Node, Make_Integer (Uint_2 ** 64 - 1));\n+      Set_Etype (Low_Bound (R_Node), Standard_Unsigned_64);\n+      Set_Etype (High_Bound (R_Node), Standard_Unsigned_64);\n+      Set_Scalar_Range (Standard_Unsigned_64, R_Node);\n+\n       --  Note: universal integer and universal real are constructed as fully\n       --  formed signed numeric types, with parameters corresponding to the\n       --  longest runtime types (Long_Long_Integer and Long_Long_Float). This"}, {"sha": "e301c7fc3ef72c95faee3add2891375c6e1eddf1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -8665,12 +8665,15 @@ denotes a function identical to\n @code{System.Storage_Elements.To_Address} except that\n it is a static attribute.  This means that if its argument is\n a static expression, then the result of the attribute is a\n-static expression.  The result is that such an expression can be\n+static expression.  This means that such an expression can be\n used in contexts (e.g.@: preelaborable packages) which require a\n static expression and where the function call could not be used\n (since the function call is always non-static, even if its\n-argument is static). The argument must be in the range 0 .. 2**m-1,\n-where m is the memory size (typically 32 or 64).\n+argument is static). The argument must be in the range\n+-(2**(m-1) .. 2**m-1, where m is the memory size\n+(typically 32 or 64). Negative values are intepreted in a\n+modular manner (e.g. -1 means the same as 16#FFFF_FFFF# on\n+a 32 bits machine).\n \n @node Attribute Type_Class\n @unnumberedsec Attribute Type_Class"}, {"sha": "b058251bbe89b64197200fc81e4689724d476da2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 471, "deletions": 0, "changes": 471, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -179,6 +179,9 @@ AdaCore@*\n * Tools Supporting Project Files::\n * The Cross-Referencing Tools gnatxref and gnatfind::\n * The GNAT Pretty-Printer gnatpp::\n+@ifclear vms\n+* The Ada-to-XML converter gnat2xml::\n+@end ifclear\n * The GNAT Metrics Tool gnatmetric::\n * File Name Krunching with gnatkr::\n * Preprocessing with gnatprep::\n@@ -328,6 +331,12 @@ way to navigate through sources.\n version of an Ada source file with control over casing, indentation,\n comment placement, and other elements of program presentation style.\n \n+@ifclear vms\n+@item\n+@ref{The Ada-to-XML converter gnat2xml}, shows how to convert Ada\n+source code into XML.\n+@end ifclear\n+\n @item\n @ref{The GNAT Metrics Tool gnatmetric}, shows how to compute various\n metrics for an Ada source file, such as the number of types and subprograms,\n@@ -14786,6 +14795,468 @@ end Test;\n @end cartouche\n @end smallexample\n \n+@ifclear vms\n+@c *********************************\n+@node The Ada-to-XML converter gnat2xml\n+@chapter The Ada-to-XML converter @command{gnat2xml}\n+@findex gnat2xml\n+@cindex XML generation\n+\n+@noindent\n+The @command{gnat2xml} tool is an ASIS-based utility that converts\n+Ada source code into XML.\n+\n+@menu\n+* Switches for gnat2xml::\n+* Driving gnat2xml with gnatmake or gprbuild::\n+* Other Programs::\n+* Structure of the XML::\n+@end menu\n+\n+@node Switches for gnat2xml\n+@section Switches for @command{gnat2xml}\n+\n+@noindent\n+@command{gnat2xml} takes Ada source code as input, and produces XML\n+that conforms to the schema.\n+\n+Usage:\n+\n+@smallexample\n+gnat2xml [options] files\n+@end smallexample\n+\n+``files'' are the Ada source file names.\n+\n+@noindent\n+Options:\n+@smallexample\n+-h\n+--help -- generate usage information and quit, ignoring all other options\n+\n+-mdir -- generate one .xml file for each Ada source file, in directory\n+         @file{dir}. (Default is to generate the XML to standard output.)\n+\n+-q -- debugging version, with interspersed source, and a more\n+      compact representation of \"sloc\". This version does not conform\n+      to any schema.\n+\n+-I <include-dir>\n+    directories to search for dependencies\n+    You can also set the ADA_INCLUDE_PATH environment variable for this.\n+\n+-v -- verbose (print out the command line options, and the names of\n+      output files as they are generated).\n+\n+-t -- do not delete tree files when done (they are deleted by default).\n+\n+-cargs ... -- options to pass to gcc\n+@end smallexample\n+\n+@noindent\n+You can generate the ``tree files'' ahead of time using the -gnatct switch:\n+\n+@smallexample\n+gnatmake -gnat2012 -gnatct *.ad[sb]\n+@end smallexample\n+\n+@noindent\n+If tree files do not exist, @command{gnat2xml} will create them by running gcc.\n+See the ASIS documentation for more information on tree files.\n+\n+Example:\n+\n+@smallexample\n+mkdir xml-files\n+gnat2xml -v -mxml-files *.ad[sb] -cargs -gnat2012\n+@end smallexample\n+\n+@noindent\n+The above will create *.xml files in the @file{xml-files} subdirectory.\n+For example, if there is an Ada package Mumble.Dumble, whose spec and\n+body source code lives in mumble-dumble.ads and mumble-dumble.adb,\n+the above will produce xml-files/mumble-dumble.ads.xml and\n+xml-files/mumble-dumble.adb.xml.\n+\n+@node Driving gnat2xml with gnatmake or gprbuild\n+@section Driving @command{gnat2xml} with @command{gnatmake} or @command{gprbuild}\n+\n+@noindent\n+You can use gnatmake or gprbuild to drive @command{gnat2xml} to get\n+incremental updates of the XML files on a per-source-file basis. For\n+example, if you already have a bunch of XML files, and then you change\n+one source file, it will regenerate XML files only for that source\n+file, and other source files that depend on it. Gnatmake and gprbuild\n+take care of tracking inter-file dependencies. For example, if\n+this.adb says @code{with That;}, then this.adb depends on that.ads.\n+\n+To do this, you tell gnatmake/gprbuild to pretend that\n+@command{gnat2xml} is the Ada compiler (instead of using gcc as the\n+Ada compiler, as is normal).\n+\n+To tell gnatmake to use @command{gnat2xml} instead of gcc as the\n+``compiler'', for example:\n+\n+@smallexample\n+gnatmake -gnatc *.adb --GCC=\"gnat2xml -t -mxml\"\n+@end smallexample\n+\n+@noindent\n+The @option{--GCC=} switch tells gnatmake that the ``compiler'' to run\n+is @command{gnat2xml -t -mxml}. The @option{-t} switch means to keep the tree\n+files, so they can be reused on the next run. (@command{gnat2xml}\n+deletes them by default.) As usual, @option{-mxml} means to put the\n+XML files in the @file{xml} subdirectory.\n+\n+You must give the @option{-gnatc} switch to gnatmake, which means\n+``compile only; do not generate object code''. Otherwise, gnatmake will\n+complain about missing object (*.o) files; @command{gnat2xml} of\n+course does not generate *.o files.\n+\n+Using gprbuild is similar: you tell it to use @command{gnat2xml}\n+instead of gcc. First write a project file, such as my_project.gpr:\n+\n+@smallexample @c projectfile\n+project My_Project is\n+\n+   package Compiler is\n+      for Driver (\"ada\") use \"gnat2xml\";\n+      --  Use gnat2xml instead of the usual gcc.\n+\n+      for Default_Switches (\"ada\") use (\"-t\", \"-mxml\");\n+      --  Same switches as in the gnatmake case.\n+   end Compiler;\n+\n+end My_Project;\n+@end smallexample\n+\n+@noindent\n+Then:\n+\n+@smallexample @c projectfile\n+gprbuild --no-object-check -P my_project.gpr\n+@end smallexample\n+\n+@noindent\n+The @option{--no-object-check} switch serves the same purpose as\n+@option{-gnatc} in the gnatmake case --- it tells gprbuild not to\n+expect that the ``compiler'' (really @command{gnat2xml}) will produce\n+*.o files.\n+\n+See the gprbuild documentation for information on many other things\n+you can put in the project file, such as telling it where to find\n+the source files.\n+\n+@node Other Programs\n+@section Other Programs\n+\n+@noindent\n+The distribution includes two other programs that are related to\n+@command{gnat2xml}:\n+\n+@command{gnat2xsd} is the schema generator, which generates the schema\n+to standard output, based on the structure of Ada as encoded by\n+ASIS. You don't need to run @command{gnat2xsd} in order to use\n+@command{gnat2xml}. To generate the schema, type:\n+\n+@smallexample\n+gnat2xsd > ada-schema.xsd\n+@end smallexample\n+\n+@noindent\n+@command{gnat2xml} generates XML files that will validate against\n+@file{ada-schema.xsd}.\n+\n+@command{xml2gnat} is a back-translator that translates the XML back\n+into Ada source code. The Ada generated by @command{xml2gnat} has\n+identical semantics to the original Ada code passed to\n+@command{gnat2xml}. It is not textually identical, however --- for\n+example, no attempt is made to preserve the original indentation.\n+\n+@node Structure of the XML\n+@section Structure of the XML\n+\n+@noindent\n+The primary documentation for the structure of the XML generated by\n+@command{gnat2xml} is the schema (see @command{gnat2xsd} above). The\n+following documentation gives additional details needed to understand\n+the schema and therefore the XML.\n+\n+The elements listed under Defining Occurrences, Usage Occurrences, and\n+Other Elements represent the syntactic structure of the Ada program.\n+Element names are given in lower case, with the corresponding element\n+type Capitalized_Like_This. The element and element type names are\n+derived directly from the ASIS enumeration type Flat_Element_Kinds,\n+declared in Asis.Extensions.Flat_Kinds, with the leading ``An_'' or ``A_''\n+removed. For example, the ASIS enumeration literal\n+An_Assignment_Statement corresponds to the XML element\n+assignment_statement of XML type Assignment_Statement.\n+\n+To understand the details of the schema and the corresponding XML, it is\n+necessary to understand the ASIS standard, as well as the GNAT-specific\n+extension to ASIS.\n+\n+A defining occurrence is an identifier (or character literal or operator\n+symbol) declared by a declaration. A usage occurrence is an identifier\n+(or ...) that references such a declared entity. For example, in:\n+\n+@smallexample\n+type T is range 1..10;\n+X, Y : constant T := 1;\n+@end smallexample\n+\n+@noindent\n+The first ``T'' is the defining occurrence of a type. The ``X'' is the\n+defining occurrence of a constant, as is the ``Y'', and the second ``T'' is\n+a usage occurrence referring to the defining occurrence of T.\n+\n+Each element has a 'sloc' (source location), and subelements for each\n+syntactic subtree, reflecting the Ada grammar as implemented by ASIS.\n+The types of subelements are as defined in the ASIS standard. For\n+example, for the right-hand side of an assignment_statement we have\n+the following comment in asis-statements.ads:\n+\n+@smallexample\n+------------------------------------------------------------------------------\n+--  18.3  function Assignment_Expression\n+------------------------------------------------------------------------------\n+\n+   function Assignment_Expression\n+     (Statement : Asis.Statement)\n+      return      Asis.Expression;\n+\n+------------------------------------------------------------------------------\n+...\n+--  Returns the expression from the right hand side of the assignment.\n+...\n+--  Returns Element_Kinds:\n+--       An_Expression\n+@end smallexample\n+\n+@noindent\n+The corresponding sub-element of type Assignment_Statement is:\n+\n+@smallexample\n+<xsd:element name=\"assignment_expression_q\" type=\"Expression_Class\"/>\n+@end smallexample\n+\n+@noindent\n+where Expression_Class is defined by an xsd:choice of all the\n+various kinds of expression.\n+\n+The 'sloc' of each element indicates the starting and ending line and\n+column numbers. Column numbers are character counts; that is, a tab\n+counts as 1, not as however many spaces it might expand to.\n+\n+Subelements of type Element have names ending in ``_q'' (for ASIS\n+``Query''), and those of type Element_List end in ``_ql'' (``Query returning\n+List'').\n+\n+Some subelements are ``Boolean''. For example, Private_Type_Definition\n+has has_abstract_q and has_limited_q, to indicate whether those\n+keywords are present, as in @code{type T is abstract limited\n+private;}. False is represented by a Nil_Element. True is represented\n+by an element type specific to that query (for example, Abstract and\n+Limited).\n+\n+The root of the tree is a Compilation_Unit, with attributes:\n+\n+@itemize @bullet\n+@item\n+unit_kind, unit_class, and unit_origin. These are strings that match the\n+enumeration literals of types Unit_Kinds, Unit_Classes, and Unit_Origins\n+in package Asis.\n+\n+@item\n+unit_full_name is the full expanded name of the unit, starting from a\n+root library unit. So for @code{package P.Q.R is ...},\n+@code{unit_full_name=\"P.Q.R\"}. Same for @code{separate (P.Q) package R is ...}.\n+\n+@item\n+def_name is the same as unit_full_name for library units; for subunits,\n+it is just the simple name.\n+\n+@item\n+source_file is the name of the Ada source file. For example, for\n+the spec of @code{P.Q.R}, @code{source_file=\"p-q-r.ads\"}. This allows one to\n+interpret the source locations --- the ``sloc'' of all elements\n+within this Compilation_Unit refers to line and column numbers\n+within the named file.\n+@end itemize\n+\n+@noindent\n+Defining occurrences have these attributes:\n+\n+@itemize @bullet\n+@item\n+def_name is the simple name of the declared entity, as written in the Ada\n+source code.\n+\n+@item\n+def is a unique URI of the form:\n+\n+ ada://kind/fully/qualified/name\n+\n+where:\n+\n+ kind indicates the kind of Ada entity being declared (see below), and\n+\n+ fully/qualified/name, is the fully qualified name of the Ada\n+ entity, with each of ``fully'', ``qualified'', and ``name'' being\n+ mangled for uniqueness. We do not document the mangling\n+ algorithm, which is subject to change; we just guarantee that the\n+ names are unique in the face of overloading.\n+\n+@item\n+type is the type of the declared object, or @code{null} for\n+declarations of things other than objects.\n+@end itemize\n+\n+@noindent\n+Usage occurrences have these attributes:\n+\n+@itemize @bullet\n+@item\n+ref_name is the same as the def_name of the corresponding defining\n+occurrence. This attribute is not of much use, because of\n+overloading; use ref for lookups, instead.\n+\n+@item\n+ref is the same as the def of the corresponding defining\n+occurrence.\n+@end itemize\n+\n+@noindent\n+In summary, @code{def_name} and @code{ref_name} are as in the source\n+code of the declaration, possibly overloaded, whereas @code{def} and\n+@code{ref} are unique-ified.\n+\n+Literal elements have this attribute:\n+\n+@itemize @bullet\n+@item\n+lit_val is the value of the literal as written in the source text,\n+appropriately escaped (e.g. @code{\"} ---> @code{&quot;}). This applies\n+only to numeric and string literals. Enumeration literals in Ada are\n+not really \"literals\" in the usual sense; they are usage occurrences,\n+and have ref_name and ref as described above. Note also that string\n+literals used as operator symbols are treated as defining or usage\n+occurrences, not as literals.\n+@end itemize\n+\n+@noindent\n+Elements that can syntactically represent names and expressions (which\n+includes usage occurrences, plus function calls and so forth) have this\n+attribute:\n+\n+@itemize @bullet\n+@item\n+type. If the element represents an expression or the name of an object,\n+'type' is the 'def' for the defining occurrence of the type of that\n+expression or name. Names of other kinds of entities, such as package\n+names and type names, do not have a type in Ada; these have type=\"null\"\n+in the XML.\n+@end itemize\n+\n+@noindent\n+Pragma elements have this attribute:\n+\n+@itemize @bullet\n+@item\n+pragma_name is the name of the pragma. For language-defined pragmas, the\n+pragma name is redundant with the element kind (for example, an\n+assert_pragma element necessarily has pragma_name=\"Assert\"). However, all\n+implementation-defined pragmas are lumped together in ASIS as a single\n+element kind (for example, the GNAT-specific pragma Unreferenced is\n+represented by an implementation_defined_pragma element with\n+pragma_name=\"Unreferenced\").\n+@end itemize\n+\n+@noindent\n+Defining occurrences of formal parameters and generic formal objects have this\n+attribute:\n+\n+@itemize @bullet\n+@item\n+mode indicates that the parameter is of mode 'in', 'in out', or 'out'.\n+@end itemize\n+\n+@noindent\n+The \"kind\" part of the \"def\" and \"ref\" attributes is taken from the ASIS\n+enumeration type Flat_Declaration_Kinds, declared in\n+Asis.Extensions.Flat_Kinds, with the leading \"An_\" or \"A_\" removed, and\n+any trailing \"_Declaration\" or \"_Specification\" removed. Thus, the\n+possible kinds are as follows:\n+\n+@smallexample\n+ordinary_type\n+task_type\n+protected_type\n+incomplete_type\n+tagged_incomplete_type\n+private_type\n+private_extension\n+subtype\n+variable\n+constant\n+deferred_constant\n+single_task\n+single_protected\n+integer_number\n+real_number\n+enumeration_literal\n+discriminant\n+component\n+loop_parameter\n+generalized_iterator\n+element_iterator\n+procedure\n+function\n+parameter\n+procedure_body\n+function_body\n+return_variable\n+return_constant\n+null_procedure\n+expression_function\n+package\n+package_body\n+object_renaming\n+exception_renaming\n+package_renaming\n+procedure_renaming\n+function_renaming\n+generic_package_renaming\n+generic_procedure_renaming\n+generic_function_renaming\n+task_body\n+protected_body\n+entry\n+entry_body\n+entry_index\n+procedure_body_stub\n+function_body_stub\n+package_body_stub\n+task_body_stub\n+protected_body_stub\n+exception\n+choice_parameter\n+generic_procedure\n+generic_function\n+generic_package\n+package_instantiation\n+procedure_instantiation\n+function_instantiation\n+formal_object\n+formal_type\n+formal_incomplete_type\n+formal_procedure\n+formal_function\n+formal_package\n+formal_package_declaration_with_box\n+@end smallexample\n+@end ifclear\n+\n @c *********************************\n @node The GNAT Metrics Tool gnatmetric\n @chapter The GNAT Metrics Tool @command{gnatmetric}"}, {"sha": "8c4cf7e53e233e536fa045bae9ccb80b5a44a311", "filename": "gcc/ada/s-vxwork-arm.ads", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fs-vxwork-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fs-vxwork-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwork-arm.ads?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software;  you can redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,15 +31,30 @@\n \n --  This is the ARM VxWorks version of this package\n \n+with Interfaces.C;\n+\n package System.VxWorks is\n    pragma Preelaborate (System.VxWorks);\n \n+   package IC renames Interfaces.C;\n+\n    --  Floating point context record. ARM version\n \n+   FP_SGPR_NUM_REGS : constant := 32;\n+   type Fpr_Sgpr_Array is array (1 .. FP_SGPR_NUM_REGS) of IC.unsigned;\n+\n    --  The record definition below matches what arch/arm/fppArmLib.h says\n \n    type FP_CONTEXT is record\n-      Dummy : Integer;\n+      fpsid    : IC.unsigned;  --  system ID register\n+      fpscr    : IC.unsigned;  --  status and control register\n+      fpexc    : IC.unsigned;  --  exception register\n+      fpinst   : IC.unsigned;  --  instruction register\n+      fpinst2  : IC.unsigned;  --  instruction register 2\n+      mfvfr0   : IC.unsigned;  --  media and VFP feature Register 0\n+      mfvfr1   : IC.unsigned;  --  media and VFP feature Register 1\n+      pad      : IC.unsigned;\n+      vfp_gpr  : Fpr_Sgpr_Array;\n    end record;\n \n    for FP_CONTEXT'Alignment use 4;"}, {"sha": "a46e057c03481fa00b99b50fe34f13165075ba76", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -5439,7 +5439,10 @@ package body Sem_Attr is\n       -- To_Address --\n       ----------------\n \n-      when Attribute_To_Address =>\n+      when Attribute_To_Address => To_Address : declare\n+         Val : Uint;\n+\n+      begin\n          Check_E1;\n          Analyze (P);\n \n@@ -5451,6 +5454,31 @@ package body Sem_Attr is\n          Analyze_And_Resolve (E1, Any_Integer);\n          Set_Etype (N, RTE (RE_Address));\n \n+         --  Static expression case, check range and set appropriate type\n+\n+         if Is_OK_Static_Expression (E1) then\n+            Val := Expr_Value (E1);\n+\n+            if Val < -(2 ** UI_From_Int (Standard'Address_Size - 1))\n+                 or else\n+               Val > 2 ** UI_From_Int (Standard'Address_Size) - 1\n+            then\n+               Error_Attr (\"address value out of range for % attribute\", E1);\n+            end if;\n+\n+            --  Set type to universal integer if negative\n+\n+            if Val < 0 then\n+               Set_Etype (E1, Universal_Integer);\n+\n+            --  Otherwise set type to Unsigned_64 to accomodate max values\n+\n+            else\n+               Set_Etype (E1, Standard_Unsigned_64);\n+            end if;\n+         end if;\n+      end To_Address;\n+\n       ------------\n       -- To_Any --\n       ------------"}, {"sha": "0063a8689ce542fe3129c7b443332c7e1d85e58a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -888,7 +888,7 @@ package body Sem_Ch13 is\n                      when Aspect_Scalar_Storage_Order =>\n                         if (Is_Record_Type (E) or else Is_Array_Type (E))\n                           and then No (Get_Attribute_Definition_Clause\n-                                       (E, Attribute_Scalar_Storage_Order))\n+                                         (E, Attribute_Scalar_Storage_Order))\n                           and then Reverse_Storage_Order (P)\n                         then\n                            Set_Reverse_Storage_Order (Base_Type (E));\n@@ -2208,7 +2208,29 @@ package body Sem_Ch13 is\n                            Next (A);\n                         end loop;\n \n+                        --  It is legal to specify Import for a variable, in\n+                        --  order to suppress initialization for it, without\n+                        --  specifying explicitly its convention. However this\n+                        --  is only legal if the convention of the object type\n+                        --  is Ada or similar.\n+\n                         if No (A) then\n+                           if Ekind (E) = E_Variable\n+                             and then A_Id = Aspect_Import\n+                           then\n+                              declare\n+                                 C : constant Convention_Id :=\n+                                       Convention (Etype (E));\n+                              begin\n+                                 if C = Convention_Ada              or else\n+                                    C = Convention_Ada_Pass_By_Copy or else\n+                                    C = Convention_Ada_Pass_By_Reference\n+                                 then\n+                                    goto Continue;\n+                                 end if;\n+                              end;\n+                           end if;\n+\n                            Error_Msg_N\n                              (\"missing Convention aspect for Export/Import\",\n                               Aspect);"}, {"sha": "55ec41839b60d837809311d56cb2e00ebe61fbe5", "filename": "gcc/ada/stand.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.adb?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,2009  Free Software Foundation, Inc. --\n+--          Copyright (C) 1992-2013,  Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,7 +76,6 @@ package body Stand is\n       Tree_Read_Int (Int (Standard_Op_Shift_Left));\n       Tree_Read_Int (Int (Standard_Op_Shift_Right));\n       Tree_Read_Int (Int (Standard_Op_Shift_Right_Arithmetic));\n-\n    end Tree_Read;\n \n    ----------------\n@@ -121,7 +120,6 @@ package body Stand is\n       Tree_Write_Int (Int (Standard_Op_Shift_Left));\n       Tree_Write_Int (Int (Standard_Op_Shift_Right));\n       Tree_Write_Int (Int (Standard_Op_Shift_Right_Arithmetic));\n-\n    end Tree_Write;\n \n end Stand;"}, {"sha": "0f6b876937e980f0b0d6ec8f53abc0fe382bbc9a", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1645ac8762353e4ac4d91d46cc1a0c039647542/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=c1645ac8762353e4ac4d91d46cc1a0c039647542", "patch": "@@ -451,13 +451,15 @@ package Stand is\n    Standard_Integer_16 : Entity_Id;\n    Standard_Integer_32 : Entity_Id;\n    Standard_Integer_64 : Entity_Id;\n-   --  These are signed integer types with the indicated sizes, They are used\n-   --  for the underlying implementation types for fixed-point and enumeration\n-   --  types.\n+   --  These are signed integer types with the indicated sizes. Used for the\n+   --  underlying implementation types for fixed-point and enumeration types.\n \n    Standard_Unsigned : Entity_Id;\n    --  An unsigned type of the same size as Standard_Integer\n \n+   Standard_Unsigned_64 : Entity_Id;\n+   --  An unsigned type, mod 2 ** 64, size of 64 bits.\n+\n    Abort_Signal : Entity_Id;\n    --  Entity for abort signal exception\n "}]}