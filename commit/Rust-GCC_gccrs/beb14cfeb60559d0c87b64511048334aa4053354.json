{"sha": "beb14cfeb60559d0c87b64511048334aa4053354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViMTRjZmViNjA1NTlkMGM4N2I2NDUxMTA0ODMzNGFhNDA1MzM1NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-03-25T01:17:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-03-25T01:17:01Z"}, "message": "h8300.md (a peephole2): Extend to support loads in QImode and HImode.\n\n\t* config/h8300/h8300.md (a peephole2): Extend to support loads\n\tin QImode and HImode.\n\nFrom-SVN: r64836", "tree": {"sha": "2ae15a892c37f2683fc8985550ed51c6a8b724bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae15a892c37f2683fc8985550ed51c6a8b724bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb14cfeb60559d0c87b64511048334aa4053354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb14cfeb60559d0c87b64511048334aa4053354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb14cfeb60559d0c87b64511048334aa4053354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb14cfeb60559d0c87b64511048334aa4053354/comments", "author": null, "committer": null, "parents": [{"sha": "9469fe1512e7a4e7ef5f8ff07fb3e9829453e1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9469fe1512e7a4e7ef5f8ff07fb3e9829453e1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9469fe1512e7a4e7ef5f8ff07fb3e9829453e1b5"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "7c6d4ee16504524adda9acdf38bf6e6a6c5227d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb14cfeb60559d0c87b64511048334aa4053354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb14cfeb60559d0c87b64511048334aa4053354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beb14cfeb60559d0c87b64511048334aa4053354", "patch": "@@ -1,3 +1,8 @@\n+2003-03-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md (a peephole2): Extend to support loads\n+\tin QImode and HImode.\n+\n 2003-03-24  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/t-m68hc11-gas (LIB1ASMFUNCS): Add _call_far and"}, {"sha": "b9a6094ac74b960d86c9373be9ba43d3a6d535c7", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb14cfeb60559d0c87b64511048334aa4053354/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb14cfeb60559d0c87b64511048334aa4053354/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=beb14cfeb60559d0c87b64511048334aa4053354", "patch": "@@ -3775,6 +3775,17 @@\n \t\t  ? gen_rtx_GE (VOIDmode, cc0_rtx, const0_rtx)\n \t\t  : gen_rtx_LT (VOIDmode, cc0_rtx, const0_rtx));\")\n \n+;; The next three peephole2's will try to transform\n+;;\n+;;   mov.b A,r0l    (or mov.l A,er0)\n+;;   and.l #CST,er0\n+;;\n+;; into\n+;;\n+;;   sub.l er0\n+;;   mov.b A,r0l\n+;;   and.b #CST,r0l (if CST is not 255)\n+\n (define_peephole2\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))\n@@ -3807,24 +3818,31 @@\n    operands[3] = gen_lowpart (QImode, operands[1]);\")\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"general_operand\" \"\"))\n-   (set (match_dup 0)\n-\t(and:SI (match_dup 0)\n-\t\t(match_operand:SI 2 \"const_int_qi_operand\" \"\")))]\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(match_operand 1 \"general_operand\" \"\"))\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(and:SI (match_dup 2)\n+\t\t(match_operand:SI 3 \"const_int_qi_operand\" \"\")))]\n   \"(TARGET_H8300H || TARGET_H8300S)\n-   && !reg_overlap_mentioned_p (operands[0], operands[1])\n-   && !(GET_CODE (operands[1]) == MEM && MEM_VOLATILE_P (operands[1]))\"\n-  [(set (match_dup 0)\n+   && (GET_MODE (operands[0]) == QImode\n+       || GET_MODE (operands[0]) == HImode\n+       || GET_MODE (operands[0]) == SImode)\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && REGNO (operands[0]) == REGNO (operands[2])\n+   && !reg_overlap_mentioned_p (operands[2], operands[1])\n+   && !(GET_MODE (operands[1]) != QImode\n+\t&& GET_CODE (operands[1]) == MEM\n+\t&& MEM_VOLATILE_P (operands[1]))\"\n+  [(set (match_dup 2)\n \t(const_int 0))\n-   (set (strict_low_part (match_dup 3))\n-\t(match_dup 4))\n-   (set (match_dup 0)\n-\t(and:SI (match_dup 0)\n-\t\t(match_dup 5)))]\n-  \"operands[3] = gen_lowpart (QImode, operands[0]);\n-   operands[4] = gen_lowpart (QImode, operands[1]);\n-   operands[5] = GEN_INT (~0xff | INTVAL (operands[2]));\")\n+   (set (strict_low_part (match_dup 4))\n+\t(match_dup 5))\n+   (set (match_dup 2)\n+\t(and:SI (match_dup 2)\n+\t\t(match_dup 6)))]\n+  \"operands[4] = gen_lowpart (QImode, operands[0]);\n+   operands[5] = gen_lowpart (QImode, operands[1]);\n+   operands[6] = GEN_INT (~0xff | INTVAL (operands[3]));\")\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\" \"\")"}]}