{"sha": "d56599979211266b2f7b7535311205dd758353ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2NTk5OTc5MjExMjY2YjJmN2I3NTM1MzExMjA1ZGQ3NTgzNTNhYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-17T07:25:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-17T07:27:57Z"}, "message": "c++: Add C++20 #__VA_OPT__ support\n\nThe following patch implements C++20 # __VA_OPT__ (...) support.\nTestcases cover what I came up with myself and what LLVM has for #__VA_OPT__\nin its testsuite and the string literals are identical between the two\ncompilers on the va-opt-5.c testcase.\n\n2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n\nlibcpp/\n\t* macro.c (vaopt_state): Add m_stringify member.\n\t(vaopt_state::vaopt_state): Initialize it.\n\t(vaopt_state::update): Overwrite it.\n\t(vaopt_state::stringify): New method.\n\t(stringify_arg): Replace arg argument with first, count arguments\n\tand add va_opt argument.  Use first instead of arg->first and\n\tcount instead of arg->count, for va_opt add paste_tokens handling.\n\t(paste_tokens): Fix up len calculation.  Don't spell rhs twice,\n\tinstead use %.*s to supply lhs and rhs spelling lengths.  Don't call\n\t_cpp_backup_tokens here.\n\t(paste_all_tokens): Call it here instead.\n\t(replace_args): Adjust stringify_arg caller.  For vaopt_state::END\n\tif stringify is true handle __VA_OPT__ stringification.\n\t(create_iso_definition): Handle # __VA_OPT__ similarly to # macro_arg.\ngcc/testsuite/\n\t* c-c++-common/cpp/va-opt-5.c: New test.\n\t* c-c++-common/cpp/va-opt-6.c: New test.", "tree": {"sha": "2841f0061f3afc3a036c6609b32e7915dbb3eee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2841f0061f3afc3a036c6609b32e7915dbb3eee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d56599979211266b2f7b7535311205dd758353ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56599979211266b2f7b7535311205dd758353ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56599979211266b2f7b7535311205dd758353ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56599979211266b2f7b7535311205dd758353ac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0215b3559e55f39f38e10984a804c53907f7491c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0215b3559e55f39f38e10984a804c53907f7491c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0215b3559e55f39f38e10984a804c53907f7491c"}], "stats": {"total": 172, "additions": 157, "deletions": 15}, "files": [{"sha": "b687ced6da87172878155d65b6dd4458c556a0a4", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-5.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56599979211266b2f7b7535311205dd758353ac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56599979211266b2f7b7535311205dd758353ac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-5.c?ref=d56599979211266b2f7b7535311205dd758353ac", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+#define lparen (\n+#define a0 fooa0\n+#define a1  fooa1 a0\n+#define a2  fooa2 a1\n+#define a3  fooa3 a2\n+#define a() b lparen )\n+#define b() c lparen )\n+#define c() d lparen )\n+#define g h\n+#define i(j) j\n+#define f(...) #__VA_OPT__(g i(0))\n+#define k(x,...) # __VA_OPT__(x) #x #__VA_OPT__(__VA_ARGS__)\n+#define l(x,...) #__VA_OPT__(a1 x)\n+#define m(x,...) \"a()\" #__VA_OPT__(a3 __VA_ARGS__ x ## __VA_ARGS__ ## x ## c a3) \"a()\"\n+#define n(x,...) = #__VA_OPT__(a3 __VA_ARGS__ x ## __VA_ARGS__ ## x ## c a3) #x #__VA_OPT__(a0 __VA_ARGS__ x ## __VA_ARGS__ ## x ## c a0) ;\n+#define o(x, ...) #__VA_OPT__(x##x x##x)\n+#define p(x, ...) #__VA_OPT__(_Pragma (\"foobar\"))\n+#define q(...) #__VA_OPT__(/* foo */x/* bar */)\n+const char *v1 = f();\n+const char *v2 = f(123);\n+const char *v3 = k(1);\n+const char *v4 = k(1, 2, 3 );\n+const char *v5 = l(a());\n+const char *v6 = l(a1 a(), 1);\n+const char *v7 = m();\n+const char *v8 = m(,);\n+const char *v9 = m(,a3);\n+const char *v10 = m(a3,a(),a0);\n+const char *v11 n()\n+const char *v12 n(,)\n+const char *v13 n(,a0)\n+const char *v14 n(a0, a(),a0)\n+const char *v15 = o(, 0);\n+const char *v16 = p(0);\n+const char *v17 = p(0, 1);\n+const char *v18 = q();\n+const char *v19 = q(1);\n+\n+int\n+main ()\n+{\n+  if (__builtin_strcmp (v1, \"\")\n+      || __builtin_strcmp (v2, \"g i(0)\")\n+      || __builtin_strcmp (v3, \"1\")\n+      || __builtin_strcmp (v4, \"112, 3\")\n+      || __builtin_strcmp (v5, \"\")\n+      || __builtin_strcmp (v6, \"a1 fooa1 fooa0 b ( )\")\n+      || __builtin_strcmp (v7, \"a()a()\")\n+      || __builtin_strcmp (v8, \"a()a()\")\n+      || __builtin_strcmp (v9, \"a()a3 fooa3 fooa2 fooa1 fooa0 a3c a3a()\")\n+      || __builtin_strcmp (v10, \"a()a3 b ( ),fooa0 a3a(),a0a3c a3a()\")\n+      || __builtin_strcmp (v11, \"\")\n+      || __builtin_strcmp (v12, \"\")\n+      || __builtin_strcmp (v13, \"a3 fooa0 a0c a3a0 fooa0 a0c a0\")\n+      || __builtin_strcmp (v14, \"a3 b ( ),fooa0 a0a(),a0a0c a3a0a0 b ( ),fooa0 a0a(),a0a0c a0\")\n+      || __builtin_strcmp (v15, \"\")\n+      || __builtin_strcmp (v16, \"\")\n+      || __builtin_strcmp (v17, \"_Pragma (\\\"foobar\\\")\")\n+      || __builtin_strcmp (v18, \"\")\n+      || __builtin_strcmp (v19, \"x\"))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8a7761b39defa08e09de1a1a5b106f16111b4457", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56599979211266b2f7b7535311205dd758353ac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56599979211266b2f7b7535311205dd758353ac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-6.c?ref=d56599979211266b2f7b7535311205dd758353ac", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+#define a \"\"\n+#define b(...) a ## #__VA_OPT__(1)\t/* { dg-error \"pasting \\\"a\\\" and \\\"\\\"\\\"\\\" does not give a valid preprocessing token\" } */\n+#define c(...) a ## #__VA_OPT__(1)\t/* { dg-error \"pasting \\\"a\\\" and \\\"\\\"1\\\"\\\" does not give a valid preprocessing token\" } */\n+#define d(...) #__VA_OPT__(1) ## !\n+#define e(...) #__VA_OPT__(1) ## !\n+#define f(...) #__VA_OPT__(. ## !)\n+#define g(...) #__VA_OPT__(. ## !)\n+b()\n+c(1)\n+d(   )\t\t/* { dg-error \"pasting \\\"\\\"\\\"\\\" and \\\"!\\\" does not give a valid preprocessing token\" } */\n+e(  1 )\t\t/* { dg-error \"pasting \\\"\\\"1\\\"\\\" and \\\"!\\\" does not give a valid preprocessing token\" } */\n+f()\n+g(0)\t\t/* { dg-error \"pasting \\\".\\\" and \\\"!\\\" does not give a valid preprocessing token\" } */"}, {"sha": "c317a433b4847db60494a4867abe0fbdb4ca4359", "filename": "libcpp/macro.c", "status": "modified", "additions": 73, "deletions": 15, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56599979211266b2f7b7535311205dd758353ac/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56599979211266b2f7b7535311205dd758353ac/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=d56599979211266b2f7b7535311205dd758353ac", "patch": "@@ -118,6 +118,7 @@ class vaopt_state {\n     m_arg (arg),\n     m_variadic (is_variadic),\n     m_last_was_paste (false),\n+    m_stringify (false),\n     m_state (0),\n     m_paste_location (0),\n     m_location (0),\n@@ -145,6 +146,7 @@ class vaopt_state {\n \t  }\n \t++m_state;\n \tm_location = token->src_loc;\n+\tm_stringify = (token->flags & STRINGIFY_ARG) != 0;\n \treturn BEGIN;\n       }\n     else if (m_state == 1)\n@@ -234,6 +236,12 @@ class vaopt_state {\n     return m_state == 0;\n   }\n \n+  /* Return true for # __VA_OPT__.  */\n+  bool stringify () const\n+  {\n+    return m_stringify;\n+  }\n+\n  private:\n \n   /* The cpp_reader.  */\n@@ -247,6 +255,8 @@ class vaopt_state {\n   /* If true, the previous token was ##.  This is used to detect when\n      a paste occurs at the end of the sequence.  */\n   bool m_last_was_paste;\n+  /* True for #__VA_OPT__.  */\n+  bool m_stringify;\n \n   /* The state variable:\n      0 means not parsing\n@@ -284,7 +294,8 @@ static _cpp_buff *collect_args (cpp_reader *, const cpp_hashnode *,\n static cpp_context *next_context (cpp_reader *);\n static const cpp_token *padding_token (cpp_reader *, const cpp_token *);\n static const cpp_token *new_string_token (cpp_reader *, uchar *, unsigned int);\n-static const cpp_token *stringify_arg (cpp_reader *, macro_arg *);\n+static const cpp_token *stringify_arg (cpp_reader *, const cpp_token **,\n+\t\t\t\t       unsigned int, bool);\n static void paste_all_tokens (cpp_reader *, const cpp_token *);\n static bool paste_tokens (cpp_reader *, location_t,\n \t\t\t  const cpp_token **, const cpp_token *);\n@@ -818,10 +829,11 @@ cpp_quote_string (uchar *dest, const uchar *src, unsigned int len)\n   return dest;\n }\n \n-/* Convert a token sequence ARG to a single string token according to\n-   the rules of the ISO C #-operator.  */\n+/* Convert a token sequence FIRST to FIRST+COUNT-1 to a single string token\n+   according to the rules of the ISO C #-operator.  */\n static const cpp_token *\n-stringify_arg (cpp_reader *pfile, macro_arg *arg)\n+stringify_arg (cpp_reader *pfile, const cpp_token **first, unsigned int count,\n+\t       bool va_opt)\n {\n   unsigned char *dest;\n   unsigned int i, escape_it, backslash_count = 0;\n@@ -834,9 +846,27 @@ stringify_arg (cpp_reader *pfile, macro_arg *arg)\n   *dest++ = '\"';\n \n   /* Loop, reading in the argument's tokens.  */\n-  for (i = 0; i < arg->count; i++)\n+  for (i = 0; i < count; i++)\n     {\n-      const cpp_token *token = arg->first[i];\n+      const cpp_token *token = first[i];\n+\n+      if (va_opt && (token->flags & PASTE_LEFT))\n+\t{\n+\t  location_t virt_loc = pfile->invocation_location;\n+\t  const cpp_token *rhs;\n+\t  do\n+\t    {\n+\t      if (i == count)\n+\t\tabort ();\n+\t      rhs = first[++i];\n+\t      if (!paste_tokens (pfile, virt_loc, &token, rhs))\n+\t\t{\n+\t\t  --i;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  while (rhs->flags & PASTE_LEFT);\n+\t}\n \n       if (token->type == CPP_PADDING)\n \t{\n@@ -923,7 +953,7 @@ paste_tokens (cpp_reader *pfile, location_t location,\n   cpp_token *lhs;\n   unsigned int len;\n \n-  len = cpp_token_len (*plhs) + cpp_token_len (rhs) + 1;\n+  len = cpp_token_len (*plhs) + cpp_token_len (rhs) + 2;\n   buf = (unsigned char *) alloca (len);\n   end = lhsend = cpp_spell_token (pfile, *plhs, buf, true);\n \n@@ -949,8 +979,10 @@ paste_tokens (cpp_reader *pfile, location_t location,\n       location_t saved_loc = lhs->src_loc;\n \n       _cpp_pop_buffer (pfile);\n-      _cpp_backup_tokens (pfile, 1);\n-      *lhsend = '\\0';\n+\n+      unsigned char *rhsstart = lhsend;\n+      if ((*plhs)->type == CPP_DIV && rhs->type != CPP_EQ)\n+\trhsstart++;\n \n       /* We have to remove the PASTE_LEFT flag from the old lhs, but\n \t we want to keep the new location.  */\n@@ -962,8 +994,10 @@ paste_tokens (cpp_reader *pfile, location_t location,\n       /* Mandatory error for all apart from assembler.  */\n       if (CPP_OPTION (pfile, lang) != CLK_ASM)\n \tcpp_error_with_line (pfile, CPP_DL_ERROR, location, 0,\n-\t \"pasting \\\"%s\\\" and \\\"%s\\\" does not give a valid preprocessing token\",\n-\t\t   buf, cpp_token_as_text (pfile, rhs));\n+\t\t\t     \"pasting \\\"%.*s\\\" and \\\"%.*s\\\" does not give \"\n+\t\t\t     \"a valid preprocessing token\",\n+\t\t\t     (int) (lhsend - buf), buf,\n+\t\t\t     (int) (end - rhsstart), rhsstart);\n       return false;\n     }\n \n@@ -1039,7 +1073,10 @@ paste_all_tokens (cpp_reader *pfile, const cpp_token *lhs)\n \t    abort ();\n \t}\n       if (!paste_tokens (pfile, virt_loc, &lhs, rhs))\n-\tbreak;\n+\t{\n+\t  _cpp_backup_tokens (pfile, 1);\n+\t  break;\n+\t}\n     }\n   while (rhs->flags & PASTE_LEFT);\n \n@@ -1906,7 +1943,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \tif (src->flags & STRINGIFY_ARG)\n \t  {\n \t    if (!arg->stringified)\n-\t      arg->stringified = stringify_arg (pfile, arg);\n+\t      arg->stringified = stringify_arg (pfile, arg->first, arg->count,\n+\t\t\t\t\t\tfalse);\n \t  }\n \telse if ((src->flags & PASTE_LEFT)\n \t\t || (src != macro->exp.tokens && (src[-1].flags & PASTE_LEFT)))\n@@ -2029,7 +2067,24 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t  paste_flag = tokens_buff_last_token_ptr (buff);\n \t\t}\n \n-\t      if (src->flags & PASTE_LEFT)\n+\t      if (vaopt_tracker.stringify ())\n+\t\t{\n+\t\t  unsigned int count\n+\t\t    = start ? paste_flag - start : tokens_buff_count (buff);\n+\t\t  const cpp_token *t\n+\t\t    = stringify_arg (pfile,\n+\t\t\t\t     start ? start + 1\n+\t\t\t\t     : (const cpp_token **) (buff->base),\n+\t\t\t\t     count, true);\n+\t\t  while (count--)\n+\t\t    tokens_buff_remove_last_token (buff);\n+\t\t  if (src->flags & PASTE_LEFT)\n+\t\t    copy_paste_flag (pfile, &t, src);\n+\t\t  tokens_buff_add_token (buff, virt_locs,\n+\t\t\t\t\t t, t->src_loc, t->src_loc,\n+\t\t\t\t\t NULL, 0);\n+\t\t}\n+\t      else if (src->flags & PASTE_LEFT)\n \t\t{\n \t\t  /* With a non-empty __VA_OPT__ on the LHS of ##, the last\n \t\t     token should be flagged PASTE_LEFT.  */\n@@ -3585,7 +3640,10 @@ create_iso_definition (cpp_reader *pfile)\n \t function-like macros when lexing the subsequent token.  */\n       if (macro->count > 1 && token[-1].type == CPP_HASH && macro->fun_like)\n \t{\n-\t  if (token->type == CPP_MACRO_ARG)\n+\t  if (token->type == CPP_MACRO_ARG\n+\t      || (macro->variadic\n+\t\t  && token->type == CPP_NAME\n+\t\t  && token->val.node.node == pfile->spec_nodes.n__VA_OPT__))\n \t    {\n \t      if (token->flags & PREV_WHITE)\n \t\ttoken->flags |= SP_PREV_WHITE;"}]}