{"sha": "f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2NGRhNmFmNWI1YTM0OGRjZTZlYWNiMmFjNzIwNjJiZmRmMTJiNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-07-28T18:43:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-07-28T18:43:29Z"}, "message": "re PR c++/71665 (ICE on invalid C++ code with non-integral constant enumerator value: in cxx_eval_constant_expression, at cp/constexpr.c:3918)\n\n/cp\n2016-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71665\n\t* decl.c (build_enumerator): Check the type of the enumerator before\n\tcalling cxx_constant_value.\n\n/testsuite\n2016-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71665\n\t* g++.dg/cpp0x/pr71665-1.C: New.\n\t* g++.dg/cpp0x/pr71665-2.C: Likewise.\n\t* g++.dg/cpp0x/enum29.C: Adjust dg-error string.\n\t* g++.dg/ext/label10.C: Likewise.\n\t* g++.dg/parse/constant5.C: Likewise.\n\nFrom-SVN: r238828", "tree": {"sha": "6847e4bd2b5fc440f6bd243f9bd23f4b7017b5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6847e4bd2b5fc440f6bd243f9bd23f4b7017b5be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/comments", "author": null, "committer": null, "parents": [{"sha": "1b70aaad4c090c90d69c514138a8c157af930b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b70aaad4c090c90d69c514138a8c157af930b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b70aaad4c090c90d69c514138a8c157af930b57"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "cf692c9fbc6cb0502e4355aea35d6f74a5cdfe72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -1,3 +1,9 @@\n+2016-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71665\n+\t* decl.c (build_enumerator): Check the type of the enumerator before\n+\tcalling cxx_constant_value.\n+\n 2016-07-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/71747"}, {"sha": "c7bad41c99b79ddc4906eecf66d1aefc0b876ce3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -13587,15 +13587,24 @@ build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n \n \t  if (value != NULL_TREE)\n \t    {\n-\t      value = cxx_constant_value (value);\n-\n-\t      if (TREE_CODE (value) != INTEGER_CST\n-\t\t  || ! INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (value)))\n+\t      if (! INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P\n+\t\t  (TREE_TYPE (value)))\n \t\t{\n-\t\t  error (\"enumerator value for %qD is not an integer constant\",\n-\t\t\t name);\n+\t\t  error (\"enumerator for %qD must have integral or \"\n+\t\t\t \"unscoped enumeration type\", name);\n \t\t  value = NULL_TREE;\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  value = cxx_constant_value (value);\n+\n+\t\t  if (TREE_CODE (value) != INTEGER_CST)\n+\t\t    {\n+\t\t      error (\"enumerator value for %qD is not an integer \"\n+\t\t\t     \"constant\", name);\n+\t\t      value = NULL_TREE;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "1bfcdeb40ebd61a4d48737ae0d2e1725027edf2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -1,3 +1,12 @@\n+2016-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71665\n+\t* g++.dg/cpp0x/pr71665-1.C: New.\n+\t* g++.dg/cpp0x/pr71665-2.C: Likewise.\n+\t* g++.dg/cpp0x/enum29.C: Adjust dg-error string.\n+\t* g++.dg/ext/label10.C: Likewise.\n+\t* g++.dg/parse/constant5.C: Likewise.\n+\n 2016-07-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/71859"}, {"sha": "63ecf7ebe39880955827e835ec2ab6770d783ede", "filename": "gcc/testsuite/g++.dg/cpp0x/enum29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -38,7 +38,7 @@ enum E0 { e0 = X0() };\n enum E1 { e1 = X1() };\n enum E2 { e2 = X2() };\n enum E3 { e3 = X3() };\n-enum E4 { e4 = X4() };  // { dg-error \"integer constant\" }\n+enum E4 { e4 = X4() };  // { dg-error \"integral\" }\n enum E5 { e5 = X5() };  // { dg-error \"ambiguous\" }\n \n enum F0 : int { f0 = X0() };"}, {"sha": "0c33241bf9835eddac00de5c12d49abcdd9f3fb0", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71665-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-1.C?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/71665\n+// { dg-do compile { target c++11 } }\n+\n+class A \n+{\n+  int f ();\n+  enum { a = f }; // { dg-error \"enumerator\" }\n+};"}, {"sha": "aa6d9ad80b29644b29127483b58a3692c290c427", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71665-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71665-2.C?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/71665\n+// { dg-do compile { target c++11 } }\n+\n+class A \n+{\n+  enum class E { e = 1 };\n+  enum { a = E::e };  // { dg-error \"integral or unscoped enumeration\" }\n+};"}, {"sha": "62d235d7d8735caee35a3eb437b24481a6cf4e9f", "filename": "gcc/testsuite/g++.dg/ext/label10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -4,14 +4,14 @@\n \n template<int N> struct A\n {\n-  enum { M = && N };\t// { dg-error \"referenced outside|cannot appear in|not an integer constant\" }\n+  enum { M = && N };\t// { dg-error \"referenced outside|cannot appear in|integral\" }\n };\n \n A<0> a;\n \n void foo ()\n {\n   __label__ P;\n-  enum { O = && P };\t// { dg-error \"cannot appear in|not an integer constant\" }\n+  enum { O = && P };\t// { dg-error \"cannot appear in|integral\" }\n   P:;\n }"}, {"sha": "517fbdf35b0ab7b76e91128fdc297403221405ac", "filename": "gcc/testsuite/g++.dg/parse/constant5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f064da6af5b5a348dce6eacb2ac72062bfdf12b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant5.C?ref=f064da6af5b5a348dce6eacb2ac72062bfdf12b7", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=c++98 -pedantic-errors\" }\n \n enum E { \n-  a = 24.2, // { dg-error \"constant\" }\n+  a = 24.2, // { dg-error \"integral|constant\" }\n   b = (int)3.7, \n   c = int(4.2),\n   d = (int)(4.2 + 3.7), // { dg-error \"constant\" }"}]}