{"sha": "bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4NGFjNDRmOTY3OTI4NWQ5NWFjMGM5NmMwZTJlODNiN2VmMDM4Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2015-01-13T13:55:23Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2015-01-13T13:55:23Z"}, "message": "[multiple changes]\n\n2015-01-13  Andrew Pinski   <apinski@cavium.com>\n\n        * config/aarch64/aarch64.c (aarch64_operands_ok_for_ldpstp): Reject\n        volatile mems.\n        (aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n\n\n2015-01-13  Andrew Pinski  <apinski@cavium.com>\n\n        * gcc.target/aarch64/volatileloadpair-1.c: New testcase.\n        * gcc.target/aarch64/volatileloadpair-2.c: New testcase.\n\nFrom-SVN: r219530", "tree": {"sha": "72d0176b51caf8fb006310c09a11bc0a61bd61fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72d0176b51caf8fb006310c09a11bc0a61bd61fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08cb0abc7c107f5114ad1fb6b35bc8402b4cc589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cb0abc7c107f5114ad1fb6b35bc8402b4cc589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cb0abc7c107f5114ad1fb6b35bc8402b4cc589"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "2b1449b3f21ca4a3e9c9fd3d65ed04a292603c8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-13  Andrew Pinski   <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_operands_ok_for_ldpstp): Reject\n+\tvolatile mems.\n+\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n+\n 2015-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/63974"}, {"sha": "3b6c67a95cb82f53d4140b1c40d8bca36f5a2ae7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "patch": "@@ -10630,6 +10630,10 @@ aarch64_operands_ok_for_ldpstp (rtx *operands, bool load,\n       reg_2 = operands[3];\n     }\n \n+  /* The mems cannot be volatile.  */\n+  if (MEM_VOLATILE_P (mem_1) || MEM_VOLATILE_P (mem_2))\n+    return false;\n+\n   /* Check if the addresses are in the form of [base+offset].  */\n   extract_base_offset_in_addr (mem_1, &base_1, &offset_1);\n   if (base_1 == NULL_RTX || offset_1 == NULL_RTX)\n@@ -10737,6 +10741,11 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n   if (!MEM_P (mem_1) || aarch64_mem_pair_operand (mem_1, mode))\n     return false;\n \n+  /* The mems cannot be volatile.  */\n+  if (MEM_VOLATILE_P (mem_1) || MEM_VOLATILE_P (mem_2)\n+      || MEM_VOLATILE_P (mem_3) ||MEM_VOLATILE_P (mem_4))\n+    return false;\n+\n   /* Check if the addresses are in the form of [base+offset].  */\n   extract_base_offset_in_addr (mem_1, &base_1, &offset_1);\n   if (base_1 == NULL_RTX || offset_1 == NULL_RTX)"}, {"sha": "8a5a62e2f883364d5448ab9ce3655e97053c933b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "patch": "@@ -1,3 +1,8 @@\n+2015-01-13  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.target/aarch64/volatileloadpair-1.c: New testcase.\n+\t* gcc.target/aarch64/volatileloadpair-2.c: New testcase.\n+\n 2015-01-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/64406"}, {"sha": "76162a5bcbf26080dd939c2aa4e547e58e48c82f", "filename": "gcc/testsuite/gcc.target/aarch64/volatileloadpair-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-1.c?ref=bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-do options \"-O2\" } */\n+/* volatile references should not produce load pair. */\n+/* { dg-final { scan-assembler-not \"ldp\\t\" } } */\n+\n+int f0(volatile int *a)\n+{\n+  int b = a[0];\n+  int c = a[1];\n+  return b + c;\n+}\n+\n+int f1(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[0];\n+  return b + c;\n+}\n+\n+int f2(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[2];\n+  return b + c;\n+}\n+\n+int f3(volatile int *a)\n+{\n+  int b = a[2];\n+  int c = a[1];\n+  return b + c;\n+}\n+\n+int f4(volatile int *a)\n+{\n+  int b = a[2];\n+  int c = a[3];\n+  return b + c;\n+}\n+\n+int f5(volatile int *a)\n+{\n+  int b = a[3];\n+  int c = a[2];\n+  return b + c;\n+}"}, {"sha": "133bda2fc2544c1601fd4e4db6924781f5687c32", "filename": "gcc/testsuite/gcc.target/aarch64/volatileloadpair-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf84ac44f9679285d95ac0c96c0e2e83b7ef038f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatileloadpair-2.c?ref=bf84ac44f9679285d95ac0c96c0e2e83b7ef038f", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-do options \"-O2\" } */\n+/* volatile references should not produce load pair. */\n+/* { dg-final { scan-assembler-not \"ldp\\t\" } } */\n+\n+int f0(volatile int *a)\n+{\n+  int b = a[0];\n+  int c = a[1];\n+  int d = a[2];\n+  int e = a[3];\n+  return b + c + d + e;\n+}\n+\n+int f1(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[0];\n+  int d = a[2];\n+  int e = a[3];\n+  return b + c + d + e;\n+}\n+\n+int f2(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[0];\n+  int d = a[3];\n+  int e = a[2];\n+  return b + c + d + e;\n+}\n+\n+int f3(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[3];\n+  int d = a[0];\n+  int e = a[2];\n+  return b + c + d + e;\n+}\n+\n+int f4(volatile int *a)\n+{\n+  int b = a[1];\n+  int c = a[3];\n+  int d = a[2];\n+  int e = a[0];\n+  return b + c + d + e;\n+}"}]}