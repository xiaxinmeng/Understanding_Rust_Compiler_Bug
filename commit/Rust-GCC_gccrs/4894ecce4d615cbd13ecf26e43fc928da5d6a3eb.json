{"sha": "4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5NGVjY2U0ZDYxNWNiZDEzZWNmMjZlNDNmYzkyOGRhNWQ2YTNlYg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-24T16:14:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-24T16:14:55Z"}, "message": "c-common.c (time_char_table): Don't allow width with %F.\n\n\t* c-common.c (time_char_table): Don't allow width with %F.\n\t(check_format_info): Don't allow \"Z\" length with scanf.\n\ntestsuite:\n\t* gcc.dg/c99-scanf-2.c: Remove test for scanf \"Z\" length.\n\t* gcc.dg/format-ext-2.c: New test.\n\nFrom-SVN: r35940", "tree": {"sha": "7329a6c30d33cc1b1b92530a0cedede8f7b79a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7329a6c30d33cc1b1b92530a0cedede8f7b79a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab99c469c493c52c4977df10a2fbe2cd8ad82d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab99c469c493c52c4977df10a2fbe2cd8ad82d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab99c469c493c52c4977df10a2fbe2cd8ad82d9"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "603fb4c6e5f975e50417e760efc37b8e13c9d7e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "patch": "@@ -1,3 +1,8 @@\n+2000-08-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (time_char_table): Don't allow width with %F.\n+\t(check_format_info): Don't allow \"Z\" length with scanf.\n+\n 2000-08-24  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (finish_diagnostic): Define."}, {"sha": "a7eaec8a10cb0d0faec55bb4de2a52bef00503b0", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "patch": "@@ -1282,7 +1282,7 @@ static format_char_info time_char_table[] = {\n   { \"cx\", \t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"3E\" },\n   { \"%\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"\" },\n   { \"X\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"E\" },\n-  { \"RTnrt\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"9\" },\n+  { \"FRTnrt\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"9\" },\n   { \"P\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"G\" },\n   { \"HIMSUWdmw\",\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow\" },\n   { \"e\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0Ow9\" },\n@@ -1295,7 +1295,6 @@ static format_char_info time_char_table[] = {\n   { \"b\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^\" },\n   { \"h\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^9\" },\n   { \"Y\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0EOow\" },\n-  { \"F\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"w9\" },\n   { \"C\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0EOow9\" },\n   { NULL,\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }\n };\n@@ -2054,7 +2053,9 @@ check_format_info (info, params)\n \t\twarning (\"ISO C does not support the `%c' length modifier\",\n \t\t\t length_char);\n \t    }\n-\t  else if (*format_chars == 'Z' || *format_chars == 'z')\n+\t  else if (*format_chars == 'z'\n+\t\t   || (*format_chars == 'Z'\n+\t\t       && info->format_type == printf_format_type))\n \t    {\n \t      length_char = *format_chars++;\n \t      if (pedantic)"}, {"sha": "f5bb04de75c1baa1b880d164380da720c91aefac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "patch": "@@ -1,3 +1,8 @@\n+2000-08-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-scanf-2.c: Remove test for scanf \"Z\" length.\n+\t* gcc.dg/format-ext-2.c: New test.\n+\n 2000-08-23  Jason Merrill  <jason@redhat.com>\n \n \t* lib/old-dejagnu.exp: Also ignore \"In member function\" and"}, {"sha": "c4184c13f6244b7a6ab175838d1ba927a1f5884b", "filename": "gcc/testsuite/gcc.dg/c99-scanf-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c?ref=4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "patch": "@@ -5,23 +5,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n typedef __WCHAR_TYPE__ wchar_t;\n \n extern int scanf (const char *, ...);\n \n void\n-foo (int *ip, long long int *llp, size_t *zp, wchar_t *ls)\n+foo (int *ip, long long int *llp, wchar_t *ls)\n {\n-  /* The length modifiers q, Z and L as applied to integer formats are\n+  /* The length modifiers q and L as applied to integer formats are\n      extensions.\n   */\n   scanf (\"%qd\", llp); /* { dg-warning \"C\" \"%q length\" } */\n   scanf (\"%Ld\", llp); /* { dg-warning \"C\" \"%L length\" } */\n-  scanf (\"%Zu\", zp); /* { dg-warning \"C\" \"%Z length\" } */\n   /* The conversion specifiers C and S are X/Open extensions.  */\n   scanf (\"%C\", ls); /* { dg-warning \"C\" \"scanf %C\" } */\n   scanf (\"%S\", ls); /* { dg-warning \"C\" \"scanf %S\" } */\n   /* The use of operand number $ formats is an X/Open extension.  */\n   scanf (\"%1$d\", ip); /* { dg-warning \"C\" \"scanf $ format\" } */\n+  /* glibc also supports flags ' and I on scanf formats, but GCC\n+     doesn't yet.  */\n }"}, {"sha": "eec78acce42ca51f38a7585b391ad1458084e454", "filename": "gcc/testsuite/gcc.dg/format-ext-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894ecce4d615cbd13ecf26e43fc928da5d6a3eb/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c?ref=4894ecce4d615cbd13ecf26e43fc928da5d6a3eb", "patch": "@@ -0,0 +1,45 @@\n+/* Test for format extensions beyond the C standard and X/Open standard.\n+   Test for scanf formats.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+/* %q formats want a \"quad\"; GCC considers this to be a long long.  */\n+typedef long long int quad_t;\n+typedef unsigned long long int u_quad_t;\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern int scanf (const char *, ...);\n+\n+void\n+foo (quad_t *qp, u_quad_t *uqp, quad_t *qn, long long int *llp,\n+     unsigned long long int *ullp, float *fp, char *s, void **pp, wchar_t *ls)\n+{\n+  /* As an extension, GCC allows the BSD length \"q\" for integer formats.\n+     This is largely obsoleted in C99 by %j, %ll and SCNd64.\n+  */\n+  scanf (\"%qd%qi%qo%qu%qx%qX%qn\", qp, qp, uqp, uqp, uqp, uqp, qn);\n+  scanf (\"%qf\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qF\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qe\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qE\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qg\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qG\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qa\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qA\", fp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qs\", s); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%q[abc]\", s); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qc\", s); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qp\", pp); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qC\", ls); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  scanf (\"%qS\", ls); /* { dg-warning \"length character\" \"bad use of %q\" } */\n+  /* As an extension, GCC allows the length \"L\" on integer formats\n+     (but not %n) as a synonym for \"ll\".\n+     This should be considered deprecated.\n+  */\n+  scanf (\"%Ld%Li%Lo%Lu%Lx%LX\", llp, llp, ullp, ullp, ullp, ullp);\n+  /* glibc also supports flags ' and I on scanf formats, but GCC\n+     doesn't yet.  */\n+}"}]}