{"sha": "bcbc9564cdd3760173c91b7414eac62d3667ae7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiYzk1NjRjZGQzNzYwMTczYzkxYjc0MTRlYWM2MmQzNjY3YWU3ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-05-01T16:31:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-05-01T16:31:17Z"}, "message": "extend.texi (Inline): Add missing return keyword to examples.\n\n\t* doc/extend.texi (Inline): Add missing return keyword to examples.\n\t(Function Attributes, Variable Attributes, Pragmas): Hyphenate\n\t\"command-line\".\n\nFrom-SVN: r158962", "tree": {"sha": "43795a937828fd599a0b8f3c26616d9ad9dce0bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43795a937828fd599a0b8f3c26616d9ad9dce0bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcbc9564cdd3760173c91b7414eac62d3667ae7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc9564cdd3760173c91b7414eac62d3667ae7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbc9564cdd3760173c91b7414eac62d3667ae7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc9564cdd3760173c91b7414eac62d3667ae7d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d437e4b51b945e2c922f086b968f1ff65ab8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d437e4b51b945e2c922f086b968f1ff65ab8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d437e4b51b945e2c922f086b968f1ff65ab8f4"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "b9621186e5fe05232986efd4edb9a4d82c4aadd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc9564cdd3760173c91b7414eac62d3667ae7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc9564cdd3760173c91b7414eac62d3667ae7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcbc9564cdd3760173c91b7414eac62d3667ae7d", "patch": "@@ -1,3 +1,9 @@\n+2010-05-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/extend.texi (Inline): Add missing return keyword to examples.\n+\t(Function Attributes, Variable Attributes, Pragmas): Hyphenate\n+\t\"command-line\".\n+\n 2010-04-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): Check the alignment of"}, {"sha": "97d18e5fa90ca6b51a5cd4b1a6998d9865ed3197", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc9564cdd3760173c91b7414eac62d3667ae7d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc9564cdd3760173c91b7414eac62d3667ae7d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bcbc9564cdd3760173c91b7414eac62d3667ae7d", "patch": "@@ -2616,7 +2616,7 @@ an inlined PLT.\n @cindex indirect calls on ARM\n This attribute specifies how a particular function is called on\n ARM@.  Both attributes override the @option{-mlong-calls} (@pxref{ARM Options})\n-command line switch and @code{#pragma long_calls} settings.  The\n+command-line switch and @code{#pragma long_calls} settings.  The\n @code{long_call} attribute indicates that the function might be far\n away from the call site and require a different (more expensive)\n calling sequence.   The @code{short_call} attribute always places\n@@ -4166,7 +4166,7 @@ The @code{shared} attribute is only available on Microsoft Windows@.\n @cindex @code{tls_model} attribute\n The @code{tls_model} attribute sets thread-local storage model\n (@pxref{Thread-Local}) of a particular @code{__thread} variable,\n-overriding @option{-ftls-model=} command line switch on a per-variable\n+overriding @option{-ftls-model=} command-line switch on a per-variable\n basis.\n The @var{tls_model} argument should be one of @code{global-dynamic},\n @code{local-dynamic}, @code{initial-exec} or @code{local-exec}.\n@@ -4949,7 +4949,7 @@ declaration, like this:\n static inline int\n inc (int *a)\n @{\n-  (*a)++;\n+  return (*a)++;\n @}\n @end smallexample\n \n@@ -4967,7 +4967,7 @@ extern int inc (int *a);\n inline int\n inc (int *a)\n @{\n-  (*a)++;\n+  return (*a)++;\n @}\n @end smallexample\n \n@@ -12240,7 +12240,7 @@ subsequent functions.\n @table @code\n @item memregs @var{number}\n @cindex pragma, memregs\n-Overrides the command line option @code{-memregs=} for the current\n+Overrides the command-line option @code{-memregs=} for the current\n file.  Use with care!  This pragma must be before any function in the\n file, and mixing different memregs values in different objects may\n make them incompatible.  This pragma is useful when a\n@@ -12484,7 +12484,7 @@ to be a small power of two and specifies the new alignment in bytes.\n @enumerate\n @item @code{#pragma pack(@var{n})} simply sets the new alignment.\n @item @code{#pragma pack()} sets the alignment to the one that was in\n-effect when compilation started (see also command line option\n+effect when compilation started (see also command-line option\n @option{-fpack-struct[=<n>]} @pxref{Code Gen Options}).\n @item @code{#pragma pack(push[,@var{n}])} pushes the current alignment\n setting on an internal stack and then optionally sets the new alignment.\n@@ -12553,7 +12553,7 @@ are controllable and which option controls them.\n @var{kind} is @samp{error} to treat this diagnostic as an error,\n @samp{warning} to treat it like a warning (even if @option{-Werror} is\n in effect), or @samp{ignored} if the diagnostic is to be ignored.\n-@var{option} is a double quoted string which matches the command line\n+@var{option} is a double quoted string which matches the command-line\n option.\n \n @example\n@@ -12562,14 +12562,14 @@ option.\n #pragma GCC diagnostic ignored \"-Wformat\"\n @end example\n \n-Note that these pragmas override any command line options.  Also,\n+Note that these pragmas override any command-line options.  Also,\n while it is syntactically valid to put these pragmas anywhere in your\n sources, the only supported location for them is before any data or\n functions are defined.  Doing otherwise may result in unpredictable\n results depending on how the optimizer manages your sources.  If the\n same option is listed multiple times, the last one specified is the\n one that is in effect.  This pragma is not intended to be a general\n-purpose replacement for command line options, but for implementing\n+purpose replacement for command-line options, but for implementing\n strict control over project policies.\n \n @end table"}]}