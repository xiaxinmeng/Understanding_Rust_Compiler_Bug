{"sha": "bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ0ZGMzY2Q5NzFjNzk1M2Y0NThjMzkyYWEyZmEwZDQ2OGUzYjI2Mw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-03-10T13:39:56Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-10T13:39:56Z"}, "message": "cortex-r4.md: New.\n\n2008-03-10  Paul Brook  <paul@codesourcery.com>\n\tMark Shinwell  <shinwell@codesourcery.com>\n\n\tgcc/\n\t* config/arm/cortex-r4.md: New.\n\t* config/arm/thumb2.md (divsi3, udivsi3): Annotate with\n\tinsn attributes.\n\t* config/arm/arm.md: Include cortex-r4.md.\n\t(insn): Add smmls, sdiv and udiv values.\n\t(generic_sched): Don't use generic scheduling for Cortex-R4.\n\t(arm_issue_rate): New function.\n\t(TARGET_SCHED_ISSUE_RATE): Define.\n\n\nCo-Authored-By: Mark Shinwell <shinwell@codesourcery.com>\n\nFrom-SVN: r133078", "tree": {"sha": "6a3081ec5b897b6ef344f1cf4f522e14b0ecce7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a3081ec5b897b6ef344f1cf4f522e14b0ecce7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/comments", "author": null, "committer": null, "parents": [{"sha": "3b509e336185d75d64ddba6e3866f1cfbc986111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b509e336185d75d64ddba6e3866f1cfbc986111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b509e336185d75d64ddba6e3866f1cfbc986111"}], "stats": {"total": 337, "additions": 331, "deletions": 6}, "files": [{"sha": "5eab262ced6c8cf9bf73465447cddab20109b917", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "patch": "@@ -1,3 +1,16 @@\n+2008-03-10  Paul Brook  <paul@codesourcery.com>\n+\tMark Shinwell  <shinwell@codesourcery.com>\n+\n+\tgcc/\n+\t* config/arm/cortex-r4.md: New.\n+\t* config/arm/thumb2.md (divsi3, udivsi3): Annotate with\n+\tinsn attributes.\n+\t* config/arm/arm.md: Include cortex-r4.md.\n+\t(insn): Add smmls, sdiv and udiv values.\n+\t(generic_sched): Don't use generic scheduling for Cortex-R4.\n+\t(arm_issue_rate): New function.\n+\t(TARGET_SCHED_ISSUE_RATE): Define.\n+\n 2008-03-10  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* doc/invoke.texi (-ftree-loop-distribution): Add an example."}, {"sha": "bddb0e2771ad3e3ebb9674fc82071c2be5642706", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "patch": "@@ -188,6 +188,7 @@ static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n static bool arm_cannot_copy_insn_p (rtx);\n static bool arm_tls_symbol_p (rtx x);\n+static int arm_issue_rate (void);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n \n \f\n@@ -358,6 +359,9 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM arm_cannot_force_const_mem\n \n+#undef TARGET_SCHED_ISSUE_RATE\n+#define TARGET_SCHED_ISSUE_RATE arm_issue_rate\n+\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE arm_mangle_type\n \n@@ -18710,6 +18714,22 @@ thumb2_output_casesi (rtx *operands)\n     }\n }\n \n+/* Most ARM cores are single issue, but some newer ones can dual issue.\n+   The scheduler descriptions rely on this being correct.  */\n+static int\n+arm_issue_rate (void)\n+{\n+  switch (arm_tune)\n+    {\n+    case cortexr4:\n+    case cortexa8:\n+      return 2;\n+\n+    default:\n+      return 1;\n+    }\n+}\n+\n /* A table and a function to perform ARM-specific name mangling for\n    NEON vector types in order to conform to the AAPCS (see \"Procedure\n    Call Standard for the ARM Architecture\", Appendix A).  To qualify"}, {"sha": "6eef65025603130e9701059ae8d1c056f8752d47", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "patch": "@@ -1,6 +1,7 @@\n ;;- Machine description for ARM for GNU compiler\n ;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000,\n-;;  2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+;;  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+;;  Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;  and Martin Simmons (@harleqn.co.uk).\n ;;  More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -183,7 +184,7 @@\n ;; scheduling information.\n \n (define_attr \"insn\"\n-        \"mov,mvn,smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals,smlawy,smuad,smuadx,smlad,smladx,smusd,smusdx,smlsd,smlsdx,smmul,smmulr,smmla,umaal,smlald,smlsld,clz,mrs,msr,xtab,other\"\n+        \"mov,mvn,smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals,smlawy,smuad,smuadx,smlad,smladx,smusd,smusdx,smlsd,smlsdx,smmul,smmulr,smmla,umaal,smlald,smlsld,clz,mrs,msr,xtab,sdiv,udiv,other\"\n         (const_string \"other\"))\n \n ; TYPE attribute is used to detect floating point instructions which, if\n@@ -332,7 +333,7 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else \n-          (eq_attr \"tune\" \"arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa8\")\n+          (eq_attr \"tune\" \"arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa8,cortexr4\")\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n@@ -349,6 +350,7 @@\n (include \"arm1026ejs.md\")\n (include \"arm1136jfs.md\")\n (include \"cortex-a8.md\")\n+(include \"cortex-r4.md\")\n \n \f\n ;;---------------------------------------------------------------------------"}, {"sha": "d912f205994a0dfee0c1dc562bcaea3f71e53f6e", "filename": "gcc/config/arm/cortex-r4.md", "status": "added", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "patch": "@@ -0,0 +1,288 @@\n+;; ARM Cortex-R4 scheduling description.\n+;; Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+;; Contributed by CodeSourcery.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+(define_automaton \"cortex_r4\")\n+\n+;; We approximate the dual-issue constraints of this core using four\n+;; \"issue units\" and a reservation matrix as follows.  The numbers indicate\n+;; the instruction groups' preferences in order.  Multiple entries for\n+;; the same numbered preference indicate units that must be reserved\n+;; together.\n+;;\n+;; Issue unit:\t\tA\tB\tC\tALU\n+;;\n+;; ALU w/o reg shift\t1st\t2nd\t\t1st and 2nd\n+;; ALU w/ reg shift\t1st\t2nd\t2nd\t1st and 2nd\n+;; Moves\t\t1st\t2nd\t\t2nd\n+;; Multiplication\t1st\t\t\t1st\n+;; Division\t\t1st\t\t\t1st\n+;; Load/store single\t1st\t\t1st\n+;; Other load/store\t1st\t1st\n+;; Branches\t\t\t1st\n+\n+(define_cpu_unit \"cortex_r4_issue_a\" \"cortex_r4\")\n+(define_cpu_unit \"cortex_r4_issue_b\" \"cortex_r4\")\n+(define_cpu_unit \"cortex_r4_issue_c\" \"cortex_r4\")\n+(define_cpu_unit \"cortex_r4_issue_alu\" \"cortex_r4\")\n+\n+(define_reservation \"cortex_r4_alu\"\n+                    \"(cortex_r4_issue_a+cortex_r4_issue_alu)|\\\n+                     (cortex_r4_issue_b+cortex_r4_issue_alu)\")\n+(define_reservation \"cortex_r4_alu_shift_reg\"\n+                    \"(cortex_r4_issue_a+cortex_r4_issue_alu)|\\\n+                     (cortex_r4_issue_b+cortex_r4_issue_c+\\\n+                      cortex_r4_issue_alu)\")\n+(define_reservation \"cortex_r4_mov\"\n+                    \"cortex_r4_issue_a|(cortex_r4_issue_b+\\\n+                     cortex_r4_issue_alu)\")\n+(define_reservation \"cortex_r4_mul\" \"cortex_r4_issue_a+cortex_r4_issue_alu\")\n+(define_reservation \"cortex_r4_mul_2\"\n+                    \"(cortex_r4_issue_a+cortex_r4_issue_alu)*2\")\n+;; Division instructions execute out-of-order with respect to the\n+;; rest of the pipeline and only require reservations on their first and\n+;; final cycles.\n+(define_reservation \"cortex_r4_div_9\"\n+                    \"cortex_r4_issue_a+cortex_r4_issue_alu,\\\n+                     nothing*7,\\\n+                     cortex_r4_issue_a+cortex_r4_issue_alu\")\n+(define_reservation \"cortex_r4_div_10\"\n+                    \"cortex_r4_issue_a+cortex_r4_issue_alu,\\\n+                     nothing*8,\\\n+                     cortex_r4_issue_a+cortex_r4_issue_alu\")\n+(define_reservation \"cortex_r4_load_store\"\n+                    \"cortex_r4_issue_a+cortex_r4_issue_c\")\n+(define_reservation \"cortex_r4_load_store_2\"\n+                    \"(cortex_r4_issue_a+cortex_r4_issue_b)*2\")\n+(define_reservation \"cortex_r4_branch\" \"cortex_r4_issue_b\")\n+\n+;; We assume that all instructions are unconditional.\n+\n+;; Data processing instructions.  Moves without shifts are kept separate\n+;; for the purposes of the dual-issue constraints above.\n+(define_insn_reservation \"cortex_r4_alu\" 2\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (not (eq_attr \"insn\" \"mov\"))))\n+  \"cortex_r4_alu\")\n+\n+(define_insn_reservation \"cortex_r4_mov\" 2\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (eq_attr \"insn\" \"mov\")))\n+  \"cortex_r4_mov\")\n+\n+(define_insn_reservation \"cortex_r4_alu_shift\" 2\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"alu_shift\"))\n+  \"cortex_r4_alu\")\n+\n+(define_insn_reservation \"cortex_r4_alu_shift_reg\" 2\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"alu_shift_reg\"))\n+  \"cortex_r4_alu_shift_reg\")\n+\n+;; An ALU instruction followed by an ALU instruction with no early dep.\n+(define_bypass 1 \"cortex_r4_alu,cortex_r4_alu_shift,cortex_r4_alu_shift_reg,\\\n+                  cortex_r4_mov\"\n+               \"cortex_r4_alu\")\n+(define_bypass 1 \"cortex_r4_alu,cortex_r4_alu_shift,cortex_r4_alu_shift_reg,\\\n+                  cortex_r4_mov\"\n+               \"cortex_r4_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+(define_bypass 1 \"cortex_r4_alu,cortex_r4_alu_shift,cortex_r4_alu_shift_reg,\\\n+                  cortex_r4_mov\"\n+               \"cortex_r4_alu_shift_reg\"\n+               \"arm_no_early_alu_shift_value_dep\")\n+\n+;; In terms of availabilities, a consumer mov could theoretically be\n+;; issued together with a producer ALU instruction, without stalls.\n+;; In practice this cannot happen because mov;add (in that order) is not\n+;; eligible for dual issue and furthermore dual issue is not permitted\n+;; when a dependency is involved.  We therefore note it as latency one.\n+;; A mov followed by another of the same is also latency one.\n+(define_bypass 1 \"cortex_r4_alu,cortex_r4_alu_shift,cortex_r4_alu_shift_reg,\\\n+                  cortex_r4_mov\"\n+               \"cortex_r4_mov\")\n+\n+;; qadd, qdadd, qsub and qdsub are not currently emitted, and neither are\n+;; media data processing instructions nor sad instructions.\n+\n+;; Multiplication instructions.\n+\n+(define_insn_reservation \"cortex_r4_mul_4\" 4\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"mul,smmul\"))\n+  \"cortex_r4_mul_2\")\n+\n+(define_insn_reservation \"cortex_r4_mul_3\" 3\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"smulxy,smulwy,smuad,smusd\"))\n+  \"cortex_r4_mul\")\n+\n+(define_insn_reservation \"cortex_r4_mla_4\" 4\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"mla,smmla\"))\n+  \"cortex_r4_mul_2\")\n+\n+(define_insn_reservation \"cortex_r4_mla_3\" 3\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"smlaxy,smlawy,smlad,smlsd\"))\n+  \"cortex_r4_mul\")\n+\n+(define_insn_reservation \"cortex_r4_smlald\" 3\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"smlald,smlsld\"))\n+  \"cortex_r4_mul\")\n+\n+(define_insn_reservation \"cortex_r4_mull\" 4\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"smull,umull,umlal,umaal\"))\n+  \"cortex_r4_mul_2\")\n+\n+;; A multiply or an MLA with a single-register result, followed by an\n+;; MLA with an accumulator dependency, has its result forwarded.\n+(define_bypass 2 \"cortex_r4_mul_3,cortex_r4_mla_3\"\n+               \"cortex_r4_mla_3,cortex_r4_mla_4\"\n+               \"arm_mac_accumulator_is_mul_result\")\n+\n+(define_bypass 3 \"cortex_r4_mul_4,cortex_r4_mla_4\"\n+               \"cortex_r4_mla_3,cortex_r4_mla_4\"\n+               \"arm_mac_accumulator_is_mul_result\")\n+\n+;; A multiply followed by an ALU instruction needing the multiply\n+;; result only at ALU has lower latency than one needing it at Shift.\n+(define_bypass 2 \"cortex_r4_mul_3,cortex_r4_mla_3,cortex_r4_smlald\"\n+               \"cortex_r4_alu\")\n+(define_bypass 2 \"cortex_r4_mul_3,cortex_r4_mla_3,cortex_r4_smlald\"\n+               \"cortex_r4_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+(define_bypass 2 \"cortex_r4_mul_3,cortex_r4_mla_3,cortex_r4_smlald\"\n+               \"cortex_r4_alu_shift_reg\"\n+               \"arm_no_early_alu_shift_value_dep\")\n+(define_bypass 3 \"cortex_r4_mul_4,cortex_r4_mla_4,cortex_r4_mull\"\n+               \"cortex_r4_alu\")\n+(define_bypass 3 \"cortex_r4_mul_4,cortex_r4_mla_4,cortex_r4_mull\"\n+               \"cortex_r4_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+(define_bypass 3 \"cortex_r4_mul_4,cortex_r4_mla_4,cortex_r4_mull\"\n+               \"cortex_r4_alu_shift_reg\"\n+               \"arm_no_early_alu_shift_value_dep\")\n+\n+;; A multiply followed by a mov has one cycle lower latency again.\n+(define_bypass 1 \"cortex_r4_mul_3,cortex_r4_mla_3,cortex_r4_smlald\"\n+               \"cortex_r4_mov\")\n+(define_bypass 2 \"cortex_r4_mul_4,cortex_r4_mla_4,cortex_r4_mull\"\n+               \"cortex_r4_mov\")\n+\n+;; We guess that division of A/B using sdiv or udiv, on average, \n+;; is performed with B having ten more leading zeros than A.\n+;; This gives a latency of nine for udiv and ten for sdiv.\n+(define_insn_reservation \"cortex_r4_udiv\" 9\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"udiv\"))\n+  \"cortex_r4_div_9\")\n+\n+(define_insn_reservation \"cortex_r4_sdiv\" 10\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"insn\" \"sdiv\"))\n+  \"cortex_r4_div_10\")\n+\n+;; Branches.  We assume correct prediction.\n+\n+(define_insn_reservation \"cortex_r4_branch\" 0\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"cortex_r4_branch\")\n+\n+;; Call latencies are not predictable.  A semi-arbitrary very large\n+;; number is used as \"positive infinity\" so that everything should be\n+;; finished by the time of return.\n+(define_insn_reservation \"cortex_r4_call\" 32\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"call\"))\n+  \"nothing\")\n+\n+;; Status register access instructions are not currently emitted.\n+\n+;; Load instructions.\n+;; We do not model the \"addr_md_3cycle\" cases and assume that\n+;; accesses following are correctly aligned.\n+\n+(define_insn_reservation \"cortex_r4_load_1_2\" 3\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"load1,load2\"))\n+  \"cortex_r4_load_store\")\n+\n+(define_insn_reservation \"cortex_r4_load_3_4\" 4\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"load3,load4\"))\n+  \"cortex_r4_load_store_2\")\n+\n+;; If a producing load is followed by an instruction consuming only\n+;; as a Normal Reg, there is one fewer cycle of latency.\n+\n+(define_bypass 2 \"cortex_r4_load_1_2\"\n+               \"cortex_r4_alu\")\n+(define_bypass 2 \"cortex_r4_load_1_2\"\n+               \"cortex_r4_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+(define_bypass 2 \"cortex_r4_load_1_2\"\n+               \"cortex_r4_alu_shift_reg\"\n+               \"arm_no_early_alu_shift_value_dep\")\n+\n+(define_bypass 3 \"cortex_r4_load_3_4\"\n+               \"cortex_r4_alu\")\n+(define_bypass 3 \"cortex_r4_load_3_4\"\n+               \"cortex_r4_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+(define_bypass 3 \"cortex_r4_load_3_4\"\n+               \"cortex_r4_alu_shift_reg\"\n+               \"arm_no_early_alu_shift_value_dep\")\n+\n+;; If a producing load is followed by an instruction consuming only\n+;; as a Late Reg, there are two fewer cycles of latency.  Such consumer\n+;; instructions are moves and stores.\n+\n+(define_bypass 1 \"cortex_r4_load_1_2\"\n+               \"cortex_r4_mov,cortex_r4_store_1_2,cortex_r4_store_3_4\")\n+(define_bypass 2 \"cortex_r4_load_3_4\"\n+               \"cortex_r4_mov,cortex_r4_store_1_2,cortex_r4_store_3_4\")\n+\n+;; If a producer's result is required as the base or offset of a load,\n+;; there is an extra cycle latency.\n+\n+(define_bypass 3 \"cortex_r4_alu,cortex_r4_mov,cortex_r4_alu_shift,\\\n+                  cortex_r4_alu_shift_reg\"\n+               \"cortex_r4_load_1_2,cortex_r4_load_3_4\")\n+\n+(define_bypass 4 \"cortex_r4_mul_3,cortex_r4_mla_3,cortex_r4_smlald\"\n+               \"cortex_r4_load_1_2,cortex_r4_load_3_4\")\n+\n+(define_bypass 5 \"cortex_r4_mul_4,cortex_r4_mla_4,cortex_r4_mull\"\n+               \"cortex_r4_load_1_2,cortex_r4_load_3_4\")\n+\n+;; Store instructions.\n+\n+(define_insn_reservation \"cortex_r4_store_1_2\" 0\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"store1,store2\"))\n+  \"cortex_r4_load_store\")\n+\n+(define_insn_reservation \"cortex_r4_store_3_4\" 0\n+  (and (eq_attr \"tune\" \"cortexr4\")\n+       (eq_attr \"type\" \"store3,store4\"))\n+  \"cortex_r4_load_store_2\")\n+"}, {"sha": "ba45c88c2cbadf259741895e64db02450cf4088d", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4dc3cd971c7953f458c392aa2fa0d468e3b263/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=bd4dc3cd971c7953f458c392aa2fa0d468e3b263", "patch": "@@ -1,5 +1,5 @@\n ;; ARM Thumb-2 Machine Description\n-;; Copyright (C) 2007 Free Software Foundation, Inc.\n+;; Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n ;; Written by CodeSourcery, LLC.\n ;;\n ;; This file is part of GCC.\n@@ -1131,7 +1131,8 @@\n \t\t(match_operand:SI 2 \"s_register_operand\"  \"r\")))]\n   \"TARGET_THUMB2 && arm_arch_hwdiv\"\n   \"sdiv%?\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"sdiv\")]\n )\n \n (define_insn \"udivsi3\"\n@@ -1140,7 +1141,8 @@\n \t\t (match_operand:SI 2 \"s_register_operand\"  \"r\")))]\n   \"TARGET_THUMB2 && arm_arch_hwdiv\"\n   \"udiv%?\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"udiv\")]\n )\n \n (define_insn \"*thumb2_cbz\""}]}