{"sha": "f2f6dece0e83508b9402012b69ffc25dc4847992", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmNmRlY2UwZTgzNTA4Yjk0MDIwMTJiNjlmZmMyNWRjNDg0Nzk5Mg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T00:21:34Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T00:21:34Z"}, "message": "[AArch64, libgcc] Add missing file, forget \"svn add\"\n\nFrom-SVN: r244674", "tree": {"sha": "3eb2e62e613a87c8e7165f621464a80ee0469146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb2e62e613a87c8e7165f621464a80ee0469146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f6dece0e83508b9402012b69ffc25dc4847992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f6dece0e83508b9402012b69ffc25dc4847992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f6dece0e83508b9402012b69ffc25dc4847992", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f6dece0e83508b9402012b69ffc25dc4847992/comments", "author": null, "committer": null, "parents": [{"sha": "5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5636faf2bcd1a82bb2a2b22a4146602c45c5508a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5636faf2bcd1a82bb2a2b22a4146602c45c5508a"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "a43d965b358f3e830b85fc42c7bceacf7d41a671", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f6dece0e83508b9402012b69ffc25dc4847992/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f6dece0e83508b9402012b69ffc25dc4847992/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=f2f6dece0e83508b9402012b69ffc25dc4847992", "patch": "@@ -0,0 +1,87 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef AARCH64_UNWIND_H\n+#define AARCH64_UNWIND_H\n+\n+#define DWARF_REGNUM_AARCH64_RA_STATE 34\n+\n+#define MD_POST_EXTRACT_ROOT_ADDR(addr)  __builtin_aarch64_xpaclri (addr)\n+#define MD_POST_EXTRACT_FRAME_ADDR(context, fs, addr) \\\n+  aarch64_post_extract_frame_addr (context, fs, addr)\n+#define MD_POST_FROB_EH_HANDLER_ADDR(current, target, addr) \\\n+  aarch64_post_frob_eh_handler_addr (current, target, addr)\n+#define MD_FROB_UPDATE_CONTEXT(context, fs) \\\n+  aarch64_frob_update_context (context, fs)\n+\n+/* Do AArch64 private extraction on ADDR based on context info CONTEXT and\n+   unwind frame info FS.  If ADDR is signed, we do address authentication on it\n+   using CFA of current frame.  */\n+\n+static inline void *\n+aarch64_post_extract_frame_addr (struct _Unwind_Context *context,\n+\t\t\t\t _Unwind_FrameState *fs, void *addr)\n+{\n+  if (fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset & 0x1)\n+    {\n+      _Unwind_Word salt = (_Unwind_Word) context->cfa;\n+      return __builtin_aarch64_autia1716 (addr, salt);\n+    }\n+  else\n+    return addr;\n+}\n+\n+/* Do AArch64 private frob on exception handler's address HANDLER_ADDR before\n+   installing it into current context CURRENT.  TARGET is currently not used.\n+   We need to sign exception handler's address if CURRENT itself is signed.  */\n+\n+static inline void *\n+aarch64_post_frob_eh_handler_addr (struct _Unwind_Context *current,\n+\t\t\t\t   struct _Unwind_Context *target\n+\t\t\t\t   ATTRIBUTE_UNUSED,\n+\t\t\t\t   void *handler_addr)\n+{\n+  if (current->flags & RA_A_SIGNED_BIT)\n+    return __builtin_aarch64_pacia1716 (handler_addr,\n+\t\t\t\t\t(_Unwind_Word) current->cfa);\n+  else\n+    return handler_addr;\n+}\n+\n+/* Do AArch64 private initialization on CONTEXT based on frame info FS.  Mark\n+   CONTEXT as return address signed if bit 0 of DWARF_REGNUM_AARCH64_RA_STATE is\n+   set.  */\n+\n+static inline void\n+aarch64_frob_update_context (struct _Unwind_Context *context,\n+\t\t\t     _Unwind_FrameState *fs)\n+{\n+  if (fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset & 0x1)\n+    /* The flag is used for re-authenticating EH handler's address.  */\n+    context->flags |= RA_A_SIGNED_BIT;\n+\n+  return;\n+}\n+\n+#endif /* defined AARCH64_UNWIND_H */"}]}