{"sha": "2185e212e9d03f943a94351689df4ae5691d7f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4NWUyMTJlOWQwM2Y5NDNhOTQzNTE2ODlkZjRhZTU2OTFkN2Y3OQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2019-01-18T08:38:06Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2019-01-18T08:38:06Z"}, "message": "Document atomic fetch and nand\n\nCopy code example for fetch and nand from \"Legacy __sync Built-in\nFunctions for Atomic Memory Access\" to \"Built-in Functions for Memory\nModel Aware Atomic Operations\".\n\ngcc/\n\n\t* doc/extend.texi (Built-in Functions for Memory Model Aware\n\tAtomic Operations): Document atomic fetch and nand.\n\nFrom-SVN: r268062", "tree": {"sha": "6173991d31f0df78228d72a96e1b302f57217ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6173991d31f0df78228d72a96e1b302f57217ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2185e212e9d03f943a94351689df4ae5691d7f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2185e212e9d03f943a94351689df4ae5691d7f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2185e212e9d03f943a94351689df4ae5691d7f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2185e212e9d03f943a94351689df4ae5691d7f79/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6605c653c5544a24ab9d103e50371954f9cfe55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6605c653c5544a24ab9d103e50371954f9cfe55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6605c653c5544a24ab9d103e50371954f9cfe55"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "9018b8f0099006b3dd9e5a9a0f9751920f64c693", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2185e212e9d03f943a94351689df4ae5691d7f79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2185e212e9d03f943a94351689df4ae5691d7f79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2185e212e9d03f943a94351689df4ae5691d7f79", "patch": "@@ -1,3 +1,8 @@\n+2019-01-18  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* doc/extend.texi (Built-in Functions for Memory Model Aware\n+\tAtomic Operations): Document atomic fetch and nand.\n+\n 2019-01-18  Martin Liska  <mliska@suse.cz>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "95d22ac1e3cfaacaeec69a8c87db285e096f5833", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2185e212e9d03f943a94351689df4ae5691d7f79/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2185e212e9d03f943a94351689df4ae5691d7f79/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2185e212e9d03f943a94351689df4ae5691d7f79", "patch": "@@ -11017,6 +11017,7 @@ they are not scaled by the size of the type to which the pointer points.\n \n @smallexample\n @{ *ptr @var{op}= val; return *ptr; @}\n+@{ *ptr = ~(*ptr & val); return *ptr; @} // nand\n @end smallexample\n \n The object pointed to by the first argument must be of integer or pointer\n@@ -11038,6 +11039,7 @@ the type to which the pointer points.\n \n @smallexample\n @{ tmp = *ptr; *ptr @var{op}= val; return tmp; @}\n+@{ tmp = *ptr; *ptr = ~(*ptr & val); return tmp; @} // nand\n @end smallexample\n \n The same constraints on arguments apply as for the corresponding"}]}