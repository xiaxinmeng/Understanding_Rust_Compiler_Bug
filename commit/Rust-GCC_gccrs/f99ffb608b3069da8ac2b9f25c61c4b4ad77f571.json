{"sha": "f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5ZmZiNjA4YjMwNjlkYThhYzJiOWYyNWM2MWM0YjRhZDc3ZjU3MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-17T18:57:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T18:57:51Z"}, "message": "varasm.c (text_section): Allow TEXT_SECTION to override the printing of TEXT_SECTION_ASM_OP.\n\n        * varasm.c (text_section): Allow TEXT_SECTION to override the\n        printing of TEXT_SECTION_ASM_OP.\n        * dwarf2out.c (TEXT_SECTION_NAME): Rename from TEXT_SECTION.\n        (DATA_SECTION, BSS_SECTION): Remove.\n        * dwarfout.c (TEXT_SECTION_NAME, DATA_SECTION_NAME, DATA1_SECTION_NAME,\n        RODATA_SECTION_NAME, RODATA1_SECTION_NAME, BSS_SECTION_NAME):\n        Rename from s/_NAME//.\n        * config/mips/mips.h (TARGET_FILE_SWITCHING): Add !TARGET_MIPS16.\n        (ASM_DECLARE_FUNCTION_NAME): Move file switching ...\n        (TEXT_SECTION): ... here.  New.\n        * config/mips/elf.h (TEXT_SECTION): New; no file switching.\n        * config/mips/elf64.h, config/mips/netbsd.h: Likewise.\n        * config/mips/openbsd.h: Likewise.\n        * config/mips/mips.c (mips_asm_file_start): Tidy file switching test.\n        (mips_asm_file_end): Likewise test.\n        (mips_output_function_epilogue): Likewise.  Switch back to data\n        section after emitting the function.\n\nFrom-SVN: r44973", "tree": {"sha": "90b323eb19d0d77a62d5a276e6c63d57dc653568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b323eb19d0d77a62d5a276e6c63d57dc653568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/comments", "author": null, "committer": null, "parents": [{"sha": "61f38a77a0c4f467c59707ce434d34eae52d6692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f38a77a0c4f467c59707ce434d34eae52d6692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f38a77a0c4f467c59707ce434d34eae52d6692"}], "stats": {"total": 188, "additions": 128, "deletions": 60}, "files": [{"sha": "c7c7cf4ea965f21eef0bd2fc0acfc62fb59eed10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -1,3 +1,23 @@\n+2001-08-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (text_section): Allow TEXT_SECTION to override the\n+\tprinting of TEXT_SECTION_ASM_OP.\n+\t* dwarf2out.c (TEXT_SECTION_NAME): Rename from TEXT_SECTION.\n+\t(DATA_SECTION, BSS_SECTION): Remove.\n+\t* dwarfout.c (TEXT_SECTION_NAME, DATA_SECTION_NAME, DATA1_SECTION_NAME,\n+\tRODATA_SECTION_NAME, RODATA1_SECTION_NAME, BSS_SECTION_NAME):\n+\tRename from s/_NAME//.\n+\t* config/mips/mips.h (TARGET_FILE_SWITCHING): Add !TARGET_MIPS16.\n+\t(ASM_DECLARE_FUNCTION_NAME): Move file switching ...\n+\t(TEXT_SECTION): ... here.  New.\n+\t* config/mips/elf.h (TEXT_SECTION): New; no file switching.\n+\t* config/mips/elf64.h, config/mips/netbsd.h: Likewise.\n+\t* config/mips/openbsd.h: Likewise.\n+\t* config/mips/mips.c (mips_asm_file_start): Tidy file switching test.\n+\t(mips_asm_file_end): Likewise test.\n+\t(mips_output_function_epilogue): Likewise.  Switch back to data\n+\tsection after emitting the function.\n+\n 2001-08-17  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_init): Don't emit .debug_loc label here."}, {"sha": "7408704658a5397094ff88651617810de282ab9f", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -60,6 +60,19 @@ do {\t\t\t\t\t\t\t\\\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n+/* Given that Irix has it's own headers, not having TARGET_GAS here\n+   seems a mistake.  If we actually need to be prepared for file\n+   switching, then we need a custom TARGET_ASM_NAMED_SECTION too.  */\n+\n+#undef TEXT_SECTION\n+#define TEXT_SECTION()\n+do {\n+  if (TARGET_FILE_SWITCHING)\n+    abort ();\n+  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\n+  fputc ('\\n', asm_out_file);\n+} while (0)\n+\n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n    expect various different forms for this operand.  The one given here"}, {"sha": "c218c3743bf5381e4e9eafed9a1e0f96497c0c6b", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -77,6 +77,19 @@ do {\t\t\t\t\t\t\t\\\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n+/* Given that Irix has it's own headers, not having TARGET_GAS here\n+   seems a mistake.  If we actually need to be prepared for file\n+   switching, then we need a custom TARGET_ASM_NAMED_SECTION too.  */\n+\n+#undef TEXT_SECTION\n+#define TEXT_SECTION()\n+do {\n+  if (TARGET_FILE_SWITCHING)\n+    abort ();\n+  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\n+  fputc ('\\n', asm_out_file);\n+} while (0)\n+\n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n    expect various different forms for this operand.  The one given here"}, {"sha": "68d9e53dfff1540776a82701e1c0f136d6c46fb7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -6053,7 +6053,7 @@ mips_asm_file_start (stream)\n   /* This code exists so that we can put all externs before all symbol\n      references.  This is necessary for the MIPS assembler's global pointer\n      optimizations to work.  */\n-  if (TARGET_FILE_SWITCHING && ! TARGET_MIPS16)\n+  if (TARGET_FILE_SWITCHING)\n     {\n       asm_out_data_file = stream;\n       asm_out_text_file = mips_make_temp_file ();\n@@ -6113,7 +6113,7 @@ mips_asm_file_end (file)\n \t}\n     }\n \n-  if (TARGET_FILE_SWITCHING && ! TARGET_MIPS16)\n+  if (TARGET_FILE_SWITCHING)\n     {\n       fprintf (file, \"\\n\\t.text\\n\");\n       rewind (asm_out_text_file);\n@@ -7472,9 +7472,11 @@ mips_output_function_epilogue (file, size)\n   /* Restore the output file if optimizing the GP (optimizing the GP causes\n      the text to be diverted to a tempfile, so that data decls come before\n      references to the data).  */\n-\n-  if (TARGET_GP_OPT && ! TARGET_MIPS16 && ! TARGET_GAS)\n-    asm_out_file = asm_out_data_file;\n+  if (TARGET_FILE_SWITCHING)\n+    {\n+      asm_out_file = asm_out_data_file;\n+      data_section ();\n+    }\n }\n \f\n /* Expand the epilogue into a bunch of separate insns.  */"}, {"sha": "d86cf1c986379fc3ae20d875789e028ba7757f67", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -319,7 +319,8 @@ extern void\t\tsbss_section PARAMS ((void));\n /* This is true if we must enable the assembly language file switching\n    code.  */\n \n-#define TARGET_FILE_SWITCHING\t(TARGET_GP_OPT && ! TARGET_GAS)\n+#define TARGET_FILE_SWITCHING \\\n+  (TARGET_GP_OPT && ! TARGET_GAS && ! TARGET_MIPS16)\n \n /* We must disable the function end stabs when doing the file switching trick,\n    because the Lscope stabs end up in the wrong place, making it impossible\n@@ -4215,32 +4216,27 @@ while (0)\n #define ASM_FILE_END(STREAM) mips_asm_file_end(STREAM)\n \n \n+/* Play switch file games if we're optimizing the global pointer.  */\n+\n+#undef TEXT_SECTION\n+#define TEXT_SECTION()\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  extern FILE *asm_out_text_file;\t\t\t\\\n+  if (TARGET_FILE_SWITCHING)\t\t\t\t\\\n+    asm_out_file = asm_out_text_file;\t\t\t\\\n+  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\t\\\n+  fputc ('\\n', asm_out_file);            \t\t\\\n+} while (0)\n+\n+\n /* This is how to declare a function name.  The actual work of\n    emitting the label is moved to function_prologue, so that we can\n    get the line number correctly emitted before the .ent directive,\n-   and after any .file directives.\n-\n-   Also, switch files if we are optimizing the global pointer.  */\n+   and after any .file directives.  */\n \n #undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\t\t\\\n-  if (TARGET_GP_OPT && ! TARGET_MIPS16)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      STREAM = asm_out_text_file;\t\t\t\t\t\\\n-      /* ??? text_section gets called too soon.  If the previous\t\\\n-\t function is in a special section and we're not, we have\t\\\n-\t to switch back to the text section.  We can't call\t\t\\\n-\t text_section again as gcc thinks we're already there.  */\t\\\n-      /* ??? See varasm.c.  There are other things that get output\t\\\n-\t too early, like alignment (before we've switched STREAM).  */\t\\\n-      if (DECL_SECTION_NAME (DECL) == NULL_TREE)\t\t\t\\\n-\tfprintf (STREAM, \"%s\\n\", TEXT_SECTION_ASM_OP);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n-}\n+#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\\\n+  HALF_PIC_DECLARE (NAME)\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */"}, {"sha": "cdb80376cef57f7ce187a9fc44302c764659c906", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -205,6 +205,19 @@ do {\t\t\t\t\t\t\t\t\t \\\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n+/* Not having TARGET_GAS here seems a mistake.  If we actually need to\n+   be prepared for file switching, then we need a custom\n+   TARGET_ASM_NAMED_SECTION too.  */\n+\n+#undef TEXT_SECTION\n+#define TEXT_SECTION()\n+do {\n+  if (TARGET_FILE_SWITCHING)\n+    abort ();\n+  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\n+  fputc ('\\n', asm_out_file);\n+} while (0)\n+\n /* Since gas and gld are standard on NetBSD, we don't need these */\n #undef ASM_FINAL_SPEC\n #undef STARTFILE_SPEC"}, {"sha": "886c229f979f15abca006d86fe75466a300d080b", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -107,6 +107,19 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n+/* Not having TARGET_GAS here seems a mistake.  If we actually need to\n+   be prepared for file switching, then we need a custom\n+   TARGET_ASM_NAMED_SECTION too.  */\n+\n+#undef TEXT_SECTION\n+#define TEXT_SECTION()\n+do {\n+  if (TARGET_FILE_SWITCHING)\n+    abort ();\n+  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\n+  fputc ('\\n', asm_out_file);\n+} while (0)\n+\n /* collect2 support (Macros for initialization).  */\n \n /* Mips default configuration is COFF-only, and confuses collect2.  */"}, {"sha": "cc1de94fa3e709621a3b4319a1816734d55ccd57", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -3647,14 +3647,8 @@ static char *gen_internal_sym \t\tPARAMS ((const char *));\n #endif\n \n /* Standard ELF section names for compiled code and data.  */\n-#ifndef TEXT_SECTION\n-#define TEXT_SECTION\t\t\".text\"\n-#endif\n-#ifndef DATA_SECTION\n-#define DATA_SECTION\t\t\".data\"\n-#endif\n-#ifndef BSS_SECTION\n-#define BSS_SECTION\t\t\".bss\"\n+#ifndef TEXT_SECTION_NAME\n+#define TEXT_SECTION_NAME\t\".text\"\n #endif\n \n /* Labels we insert at beginning sections we can reference instead of\n@@ -11688,7 +11682,7 @@ dwarf2out_init (main_input_filename)\n   if (DWARF2_GENERATE_TEXT_SECTION_LABEL)\n     ASM_GENERATE_INTERNAL_LABEL (text_section_label, TEXT_SECTION_LABEL, 0);\n   else\n-    strcpy (text_section_label, stripattributes (TEXT_SECTION));\n+    strcpy (text_section_label, stripattributes (TEXT_SECTION_NAME));\n   ASM_GENERATE_INTERNAL_LABEL (debug_info_section_label,\n \t\t\t       DEBUG_INFO_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,"}, {"sha": "5c8b8bc6a2d5b9998dd2f9a0e8111ccc8cef1d80", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -1006,23 +1006,23 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef DEBUG_ARANGES_SECTION\n #define DEBUG_ARANGES_SECTION\t\".debug_aranges\"\n #endif\n-#ifndef TEXT_SECTION\n-#define TEXT_SECTION\t\t\".text\"\n+#ifndef TEXT_SECTION_NAME\n+#define TEXT_SECTION_NAME\t\".text\"\n #endif\n-#ifndef DATA_SECTION\n-#define DATA_SECTION\t\t\".data\"\n+#ifndef DATA_SECTION_NAME\n+#define DATA_SECTION_NAME\t\".data\"\n #endif\n-#ifndef DATA1_SECTION\n-#define DATA1_SECTION\t\t\".data1\"\n+#ifndef DATA1_SECTION_NAME\n+#define DATA1_SECTION_NAME\t\".data1\"\n #endif\n-#ifndef RODATA_SECTION\n-#define RODATA_SECTION\t\t\".rodata\"\n+#ifndef RODATA_SECTION_NAME\n+#define RODATA_SECTION_NAME\t\".rodata\"\n #endif\n-#ifndef RODATA1_SECTION\n-#define RODATA1_SECTION\t\t\".rodata1\"\n+#ifndef RODATA1_SECTION_NAME\n+#define RODATA1_SECTION_NAME\t\".rodata1\"\n #endif\n-#ifndef BSS_SECTION\n-#define BSS_SECTION\t\t\".bss\"\n+#ifndef BSS_SECTION_NAME\n+#define BSS_SECTION_NAME\t\".bss\"\n #endif\n \f\n /* Definitions of defaults for formats and names of various special\n@@ -6326,46 +6326,46 @@ dwarfout_init (main_input_filename)\n   /* Output a starting label for the .text section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, TEXT_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, TEXT_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, TEXT_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n   /* Output a starting label for the .data section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, DATA_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n #if 0 /* GNU C doesn't currently use .data1.  */\n   /* Output a starting label for the .data1 section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA1_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA1_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, DATA1_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n #endif\n \n   /* Output a starting label for the .rodata section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, RODATA_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n #if 0 /* GNU C doesn't currently use .rodata1.  */\n   /* Output a starting label for the .rodata1 section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA1_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA1_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, RODATA1_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n #endif\n \n   /* Output a starting label for the .bss section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, BSS_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, BSS_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, BSS_BEGIN_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n@@ -6523,46 +6523,46 @@ dwarfout_finish (main_input_filename)\n   /* Output a terminator label for the .text section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, TEXT_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, TEXT_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, TEXT_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n   /* Output a terminator label for the .data section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, DATA_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n #if 0 /* GNU C doesn't currently use .data1.  */\n   /* Output a terminator label for the .data1 section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA1_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DATA1_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, DATA1_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n #endif\n \n   /* Output a terminator label for the .rodata section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, RODATA_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n \n #if 0 /* GNU C doesn't currently use .rodata1.  */\n   /* Output a terminator label for the .rodata1 section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA1_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, RODATA1_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, RODATA1_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n #endif\n \n   /* Output a terminator label for the .bss section.  */\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_PUSH_SECTION (asm_out_file, BSS_SECTION);\n+  ASM_OUTPUT_PUSH_SECTION (asm_out_file, BSS_SECTION_NAME);\n   ASM_OUTPUT_LABEL (asm_out_file, BSS_END_LABEL);\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n "}, {"sha": "c3a6322c8df1be61fc374a9a0716ddef6618226e", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99ffb608b3069da8ac2b9f25c61c4b4ad77f571/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f99ffb608b3069da8ac2b9f25c61c4b4ad77f571", "patch": "@@ -233,7 +233,11 @@ text_section ()\n {\n   if (in_section != in_text)\n     {\n+#ifdef TEXT_SECTION\n+      TEXT_SECTION ();\n+#else\n       fprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\n+#endif\n       in_section = in_text;\n     }\n }"}]}