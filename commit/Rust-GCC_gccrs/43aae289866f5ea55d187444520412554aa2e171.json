{"sha": "43aae289866f5ea55d187444520412554aa2e171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhYWUyODk4NjZmNWVhNTVkMTg3NDQ0NTIwNDEyNTU0YWEyZTE3MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-12-03T15:59:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-12-03T15:59:40Z"}, "message": "PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n\nThis patch implements C++20 P0960R3: Parenthesized initialization of aggregates\n(<wg21.link/p0960>; see R0 for more background info).  Essentially, if you have\nan aggregate, you can now initialize it by (x, y), similarly to {x, y}.  E.g.\n\n  struct A {\n    int x, y;\n    // no A(int, int) ctor (see paren-init14.C for = delete; case)\n  };\n  A a(1, 2);\n\nThe difference between ()-init and {}-init is that narrowing conversions are\npermitted, designators are not permitted, a temporary object bound to\na reference does not have its lifetime extended, and there is no brace elision.\nFurther, things like\n\n  int a[](1, 2, 3); // will deduce the array size\n  const A& r(1, 2.3, 3); // narrowing is OK\n  int (&&rr)[](1, 2, 3);\n  int b[3](1, 2); // b[2] will be value-initialized\n\nnow work as expected.  Note that\n\n  char f[](\"fluff\");\n\nhas always worked and this patch keeps it that way.  Also note that A a((1, 2))\nis not the same as A a{{1,2}}; the inner (1, 2) remains a COMPOUND_EXPR.\n\nThe approach I took was to handle (1, 2) similarly to {1, 2} -- conjure up\na CONSTRUCTOR, and introduce LOOKUP_AGGREGATE_PAREN_INIT to distinguish\nbetween the two.  This kind of initialization is only supported in C++20;\nI've made no attempt to support it in earlier standards, like we don't\nsupport CTAD pre-C++17, for instance.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Predefine\n\t__cpp_aggregate_paren_init=201902 for -std=c++2a.\n\n\t* call.c (build_new_method_call_1): Handle parenthesized initialization\n\tof aggregates by building up a CONSTRUCTOR.\n\t(extend_ref_init_temps): Do nothing for CONSTRUCTOR_IS_PAREN_INIT.\n\t* cp-tree.h (CONSTRUCTOR_IS_PAREN_INIT, LOOKUP_AGGREGATE_PAREN_INIT):\n\tDefine.\n\t* decl.c (grok_reference_init): Handle aggregate initialization from\n\ta parenthesized list of values.\n\t(reshape_init): Do nothing for CONSTRUCTOR_IS_PAREN_INIT.\n\t(check_initializer): Handle initialization of an array from a\n\tparenthesized list of values.  Use NULL_TREE instead of NULL.\n\t* tree.c (build_cplus_new): Handle BRACE_ENCLOSED_INITIALIZER_P.\n\t* typeck2.c (digest_init_r): Set LOOKUP_AGGREGATE_PAREN_INIT if it\n\treceives a CONSTRUCTOR with CONSTRUCTOR_IS_PAREN_INIT set.  Allow\n\tnarrowing when LOOKUP_AGGREGATE_PAREN_INIT.\n\t(massage_init_elt): Don't lose LOOKUP_AGGREGATE_PAREN_INIT when passing\n\tflags to digest_init_r.\n\n\t* g++.dg/cpp0x/constexpr-99.C: Only expect an error in C++17 and\n\tlesser.\n\t* g++.dg/cpp0x/explicit7.C: Likewise.\n\t* g++.dg/cpp0x/initlist12.C: Adjust dg-error.\n\t* g++.dg/cpp0x/pr31437.C: Likewise.\n\t* g++.dg/cpp2a/feat-cxx2a.C: Add __cpp_aggregate_paren_init test.\n\t* g++.dg/cpp2a/paren-init1.C: New test.\n\t* g++.dg/cpp2a/paren-init10.C: New test.\n\t* g++.dg/cpp2a/paren-init11.C: New test.\n\t* g++.dg/cpp2a/paren-init12.C: New test.\n\t* g++.dg/cpp2a/paren-init13.C: New test.\n\t* g++.dg/cpp2a/paren-init14.C: New test.\n\t* g++.dg/cpp2a/paren-init15.C: New test.\n\t* g++.dg/cpp2a/paren-init16.C: New test.\n\t* g++.dg/cpp2a/paren-init17.C: New test.\n\t* g++.dg/cpp2a/paren-init18.C: New test.\n\t* g++.dg/cpp2a/paren-init19.C: New test.\n\t* g++.dg/cpp2a/paren-init2.C: New test.\n\t* g++.dg/cpp2a/paren-init3.C: New test.\n\t* g++.dg/cpp2a/paren-init4.C: New test.\n\t* g++.dg/cpp2a/paren-init5.C: New test.\n\t* g++.dg/cpp2a/paren-init6.C: New test.\n\t* g++.dg/cpp2a/paren-init7.C: New test.\n\t* g++.dg/cpp2a/paren-init8.C: New test.\n\t* g++.dg/cpp2a/paren-init9.C: New test.\n\t* g++.dg/ext/desig10.C: Adjust dg-error.\n\t* g++.dg/template/crash107.C: Likewise.\n\t* g++.dg/template/crash95.C: Likewise.\n\t* g++.old-deja/g++.jason/crash3.C: Likewise.\n\t* g++.old-deja/g++.law/ctors11.C: Likewise.\n\t* g++.old-deja/g++.law/ctors9.C: Likewise.\n\t* g++.old-deja/g++.mike/net22.C: Likewise.\n\t* g++.old-deja/g++.niklas/t128.C: Likewise.\n\nFrom-SVN: r278939", "tree": {"sha": "a3a517242014a3db820710f763749398c1d1e0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3a517242014a3db820710f763749398c1d1e0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43aae289866f5ea55d187444520412554aa2e171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43aae289866f5ea55d187444520412554aa2e171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43aae289866f5ea55d187444520412554aa2e171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43aae289866f5ea55d187444520412554aa2e171/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "577f4a0e5e7f7ef9b5729a3eed79e523cba9dfa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577f4a0e5e7f7ef9b5729a3eed79e523cba9dfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577f4a0e5e7f7ef9b5729a3eed79e523cba9dfa9"}], "stats": {"total": 901, "additions": 868, "deletions": 33}, "files": [{"sha": "f85da5093d803f180383fc1b650e9d3c595036af", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,3 +1,9 @@\n+2019-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Predefine\n+\t__cpp_aggregate_paren_init=201902 for -std=c++2a.\n+\n 2019-11-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* c-attribs.c (handle_symver_attribute): New function"}, {"sha": "c7f4659456a668c521ac11643b3914390a9379ba", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1006,6 +1006,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_impl_destroying_delete=201806L\");\n \t  cpp_define (pfile, \"__cpp_constexpr_dynamic_alloc=201907L\");\n \t  cpp_define (pfile, \"__cpp_impl_three_way_comparison=201907L\");\n+\t  cpp_define (pfile, \"__cpp_aggregate_paren_init=201902L\");\n \t}\n       if (flag_concepts)\n         {"}, {"sha": "c29da7bed798f39c317502fe2fc3693c75a0e9f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,3 +1,23 @@\n+2019-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+\t* call.c (build_new_method_call_1): Handle parenthesized initialization\n+\tof aggregates by building up a CONSTRUCTOR.\n+\t(extend_ref_init_temps): Do nothing for CONSTRUCTOR_IS_PAREN_INIT.\n+\t* cp-tree.h (CONSTRUCTOR_IS_PAREN_INIT, LOOKUP_AGGREGATE_PAREN_INIT):\n+\tDefine.\n+\t* decl.c (grok_reference_init): Handle aggregate initialization from\n+\ta parenthesized list of values.\n+\t(reshape_init): Do nothing for CONSTRUCTOR_IS_PAREN_INIT.\n+\t(check_initializer): Handle initialization of an array from a\n+\tparenthesized list of values.  Use NULL_TREE instead of NULL.\n+\t* tree.c (build_cplus_new): Handle BRACE_ENCLOSED_INITIALIZER_P.\n+\t* typeck2.c (digest_init_r): Set LOOKUP_AGGREGATE_PAREN_INIT if it\n+\treceives a CONSTRUCTOR with CONSTRUCTOR_IS_PAREN_INIT set.  Allow\n+\tnarrowing when LOOKUP_AGGREGATE_PAREN_INIT.\n+\t(massage_init_elt): Don't lose LOOKUP_AGGREGATE_PAREN_INIT when passing\n+\tflags to digest_init_r.\n+\n 2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92732"}, {"sha": "ea0e8b7e7d783c6d2efc616d108847bb58dc1b6b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -10124,6 +10124,38 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \n   if (!any_viable_p)\n     {\n+      /* [dcl.init], 17.6.2.2:\n+\n+\t Otherwise, if no constructor is viable, the destination type is\n+\t a (possibly cv-qualified) aggregate class A, and the initializer\n+\t is a parenthesized expression-list, the object is initialized as\n+\t follows...\n+\n+\t We achieve this by building up a CONSTRUCTOR, as for list-init,\n+\t and setting CONSTRUCTOR_IS_PAREN_INIT to distinguish between\n+\t the two.  */\n+      if (DECL_CONSTRUCTOR_P (fn)\n+\t  && !(flags & LOOKUP_ONLYCONVERTING)\n+\t  && !cp_unevaluated_operand\n+\t  && cxx_dialect >= cxx2a\n+\t  && CP_AGGREGATE_TYPE_P (basetype)\n+\t  && !user_args->is_empty ())\n+\t{\n+\t  /* Create a CONSTRUCTOR from ARGS, e.g. {1, 2} from <1, 2>.  */\n+\t  tree list = build_tree_list_vec (user_args);\n+\t  tree ctor = build_constructor_from_list (init_list_type_node, list);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (ctor) = true;\n+\t  CONSTRUCTOR_IS_PAREN_INIT (ctor) = true;\n+\t  if (is_dummy_object (instance))\n+\t    return ctor;\n+\t  else\n+\t    {\n+\t      ctor = digest_init (basetype, ctor, complain);\n+\t      ctor = build2 (INIT_EXPR, TREE_TYPE (instance), instance, ctor);\n+\t      TREE_SIDE_EFFECTS (ctor) = true;\n+\t      return ctor;\n+\t    }\n+\t}\n       if (complain & tf_error)\n \tcomplain_about_no_candidates_for_method_call (instance, candidates,\n \t\t\t\t\t\t      explicit_targs, basetype,\n@@ -11789,9 +11821,16 @@ perform_direct_initialization_if_possible (tree type,\n      If the destination type is a (possibly cv-qualified) class type:\n \n      -- If the initialization is direct-initialization ...,\n-     constructors are considered. ... If no constructor applies, or\n-     the overload resolution is ambiguous, the initialization is\n-     ill-formed.  */\n+     constructors are considered.\n+\n+       -- If overload resolution is successful, the selected constructor\n+       is called to initialize the object, with the initializer expression\n+       or expression-list as its argument(s).\n+\n+       -- Otherwise, if no constructor is viable, the destination type is\n+       a (possibly cv-qualified) aggregate class A, and the initializer is\n+       a parenthesized expression-list, the object is initialized as\n+       follows...  */\n   if (CLASS_TYPE_P (type))\n     {\n       releasing_vec args (make_tree_vector_single (expr));\n@@ -12147,6 +12186,12 @@ extend_ref_init_temps (tree decl, tree init, vec<tree, va_gc> **cleanups)\n \tctor = TARGET_EXPR_INITIAL (ctor);\n       if (TREE_CODE (ctor) == CONSTRUCTOR)\n \t{\n+\t  /* [dcl.init] When initializing an aggregate from a parenthesized list\n+\t     of values... a temporary object bound to a reference does not have\n+\t     its lifetime extended.  */\n+\t  if (CONSTRUCTOR_IS_PAREN_INIT (ctor))\n+\t    return init;\n+\n \t  if (is_std_init_list (type))\n \t    {\n \t      /* The temporary array underlying a std::initializer_list"}, {"sha": "4af18b0ae6253a0c84ac7206807c9790be29d23c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -4325,6 +4325,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CONSTRUCTOR_IS_DESIGNATED_INIT(NODE) \\\n   (TREE_LANG_FLAG_6 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if this CONSTRUCTOR comes from a parenthesized list of values, e.g.\n+   A(1, 2, 3).  */\n+#define CONSTRUCTOR_IS_PAREN_INIT(NODE) \\\n+  (CONSTRUCTOR_CHECK(NODE)->base.private_flag)\n+\n /* True if NODE represents a conversion for direct-initialization in a\n    template.  Set by perform_implicit_conversion_flags.  */\n #define IMPLICIT_CONV_EXPR_DIRECT_INIT(NODE) \\\n@@ -5583,6 +5588,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n    args), then we swap the conversions back in build_new_op_1 (so they\n    correspond to the order of the args in the candidate).  */\n #define LOOKUP_REVERSED (LOOKUP_REWRITTEN << 1)\n+/* We're initializing an aggregate from a parenthesized list of values.  */\n+#define LOOKUP_AGGREGATE_PAREN_INIT (LOOKUP_REVERSED << 1)\n \n #define LOOKUP_NAMESPACES_ONLY(F)  \\\n   (((F) & LOOKUP_PREFER_NAMESPACES) && !((F) & LOOKUP_PREFER_TYPES))"}, {"sha": "54f0950751685b430e1baec3876aaa0b41f87e8e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -5531,11 +5531,28 @@ grok_reference_init (tree decl, tree type, tree init, int flags)\n       return NULL_TREE;\n     }\n \n+  tree ttype = TREE_TYPE (type);\n   if (TREE_CODE (init) == TREE_LIST)\n-    init = build_x_compound_expr_from_list (init, ELK_INIT,\n-\t\t\t\t\t    tf_warning_or_error);\n+    {\n+      /* This handles (C++20 only) code like\n+\n+\t   const A& r(1, 2, 3);\n+\n+\t where we treat the parenthesized list as a CONSTRUCTOR.  */\n+      if (TREE_TYPE (init) == NULL_TREE\n+\t  && CP_AGGREGATE_TYPE_P (ttype)\n+\t  && !DECL_DECOMPOSITION_P (decl)\n+\t  && (cxx_dialect >= cxx2a))\n+\t{\n+\t  init = build_constructor_from_list (init_list_type_node, init);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t  CONSTRUCTOR_IS_PAREN_INIT (init) = true;\n+\t}\n+      else\n+\tinit = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t\ttf_warning_or_error);\n+    }\n \n-  tree ttype = TREE_TYPE (type);\n   if (TREE_CODE (ttype) != ARRAY_TYPE\n       && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE)\n     /* Note: default conversion is only called in very special cases.  */\n@@ -6437,6 +6454,11 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n   if (vec_safe_is_empty (v))\n     return init;\n \n+  /* Brace elision is not performed for a CONSTRUCTOR representing\n+     parenthesized aggregate initialization.  */\n+  if (CONSTRUCTOR_IS_PAREN_INIT (init))\n+    return init;\n+\n   /* Handle [dcl.init.list] direct-list-initialization from\n      single element of enumeration with a fixed underlying type.  */\n   if (is_direct_enum_init (type, init))\n@@ -6640,6 +6662,41 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t      flags |= LOOKUP_NO_NARROWING;\n \t    }\n \t}\n+      /* [dcl.init] \"Otherwise, if the destination type is an array, the object\n+\t is initialized as follows...\"  So handle things like\n+\n+\t  int a[](1, 2, 3);\n+\n+\t which is permitted in C++20 by P0960.  */\n+      else if (TREE_CODE (init) == TREE_LIST\n+\t       && TREE_TYPE (init) == NULL_TREE\n+\t       && TREE_CODE (type) == ARRAY_TYPE\n+\t       && !DECL_DECOMPOSITION_P (decl)\n+\t       && (cxx_dialect >= cxx2a))\n+\t{\n+\t  /* [dcl.init.string] \"An array of ordinary character type [...]\n+\t     can be initialized by an ordinary string literal [...] by an\n+\t     appropriately-typed string literal enclosed in braces\" only\n+\t     talks about braces, but GCC has always accepted\n+\n+\t       char a[](\"foobar\");\n+\n+\t     so we continue to do so.  */\n+\t  tree val = TREE_VALUE (init);\n+\t  if (TREE_CHAIN (init) == NULL_TREE\n+\t      && char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type)))\n+\t      && TREE_CODE (tree_strip_any_location_wrapper (val))\n+\t\t == STRING_CST)\n+\t    /* If the list has a single element and it's a string literal,\n+\t       then it's the initializer for the array as a whole.  */\n+\t    init = val;\n+\t  else\n+\t    {\n+\t      init = build_constructor_from_list (init_list_type_node, init);\n+\t      CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t      CONSTRUCTOR_IS_PAREN_INIT (init) = true;\n+\t    }\n+\t}\n       else if (TREE_CODE (init) == TREE_LIST\n \t       && TREE_TYPE (init) != unknown_type_node\n \t       && !MAYBE_CLASS_TYPE_P (type))\n@@ -6683,6 +6740,9 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t    init_code = TREE_OPERAND (init_code, 0);\n \t  if (TREE_CODE (init_code) == INIT_EXPR)\n \t    {\n+\t      /* In C++20, the call to build_aggr_init could have created\n+\t\t an INIT_EXPR with a CONSTRUCTOR as the RHS to handle\n+\t\t A(1, 2).  */\n \t      init = TREE_OPERAND (init_code, 1);\n \t      init_code = NULL_TREE;\n \t      /* Don't call digest_init; it's unnecessary and will complain\n@@ -6736,7 +6796,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t\t\t0, \"array %qD initialized by parenthesized \"\n \t\t\t\"string literal %qE\",\n \t\t\tdecl, DECL_INITIAL (decl));\n-\t  init = NULL;\n+\t  init = NULL_TREE;\n \t}\n     }\n   else"}, {"sha": "8b625e8b18e689ef2afd4c5ca5b1e543a07305f6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -669,6 +669,15 @@ build_aggr_init_expr (tree type, tree init)\n tree\n build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n {\n+  /* This function should cope with what build_special_member_call\n+     can produce.  When performing parenthesized aggregate initialization,\n+     it can produce a { }.  */\n+  if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+    {\n+      gcc_assert (cxx_dialect >= cxx2a);\n+      return finish_compound_literal (type, init, complain);\n+    }\n+\n   tree rval = build_aggr_init_expr (type, init);\n   tree slot;\n "}, {"sha": "7fda6266a35037f3d6dded9eb1cde7cfd24453bd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1117,6 +1117,10 @@ digest_init_r (tree type, tree init, int nested, int flags,\n \n   tree stripped_init = init;\n \n+  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n+      && CONSTRUCTOR_IS_PAREN_INIT (init))\n+    flags |= LOOKUP_AGGREGATE_PAREN_INIT;\n+\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue\n      (g++.old-deja/g++.law/casts2.C).  */\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n@@ -1224,7 +1228,9 @@ digest_init_r (tree type, tree init, int nested, int flags,\n   if ((code != COMPLEX_TYPE || BRACE_ENCLOSED_INITIALIZER_P (stripped_init))\n       && (SCALAR_TYPE_P (type) || code == REFERENCE_TYPE))\n     {\n-      if (nested)\n+      /* Narrowing is OK when initializing an aggregate from\n+\t a parenthesized list.  */\n+      if (nested && !(flags & LOOKUP_AGGREGATE_PAREN_INIT))\n \tflags |= LOOKUP_NO_NARROWING;\n       init = convert_for_initialization (0, type, init, flags,\n \t\t\t\t\t ICR_INIT, NULL_TREE, 0,\n@@ -1386,9 +1392,12 @@ static tree\n massage_init_elt (tree type, tree init, int nested, int flags,\n \t\t  tsubst_flags_t complain)\n {\n-  flags &= LOOKUP_ALLOW_FLEXARRAY_INIT;\n-  flags |= LOOKUP_IMPLICIT;\n-  init = digest_init_r (type, init, nested ? 2 : 1, flags, complain);\n+  int new_flags = LOOKUP_IMPLICIT;\n+  if (flags & LOOKUP_ALLOW_FLEXARRAY_INIT)\n+    new_flags |= LOOKUP_ALLOW_FLEXARRAY_INIT;\n+  if (flags & LOOKUP_AGGREGATE_PAREN_INIT)\n+    new_flags |= LOOKUP_AGGREGATE_PAREN_INIT;\n+  init = digest_init_r (type, init, nested ? 2 : 1, new_flags, complain);\n   /* Strip a simple TARGET_EXPR when we know this is an initializer.  */\n   if (SIMPLE_TARGET_EXPR_P (init))\n     init = TARGET_EXPR_INITIAL (init);"}, {"sha": "cc8ff79cbc25d93c37a4c6a45340946cb5cb1f8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,3 +1,40 @@\n+2019-12-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+\t* g++.dg/cpp0x/constexpr-99.C: Only expect an error in C++17 and\n+\tlesser.\n+\t* g++.dg/cpp0x/explicit7.C: Likewise.\n+\t* g++.dg/cpp0x/initlist12.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/pr31437.C: Likewise.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Add __cpp_aggregate_paren_init test.\n+\t* g++.dg/cpp2a/paren-init1.C: New test.\n+\t* g++.dg/cpp2a/paren-init10.C: New test.\n+\t* g++.dg/cpp2a/paren-init11.C: New test.\n+\t* g++.dg/cpp2a/paren-init12.C: New test.\n+\t* g++.dg/cpp2a/paren-init13.C: New test.\n+\t* g++.dg/cpp2a/paren-init14.C: New test.\n+\t* g++.dg/cpp2a/paren-init15.C: New test.\n+\t* g++.dg/cpp2a/paren-init16.C: New test.\n+\t* g++.dg/cpp2a/paren-init17.C: New test.\n+\t* g++.dg/cpp2a/paren-init18.C: New test.\n+\t* g++.dg/cpp2a/paren-init19.C: New test.\n+\t* g++.dg/cpp2a/paren-init2.C: New test.\n+\t* g++.dg/cpp2a/paren-init3.C: New test.\n+\t* g++.dg/cpp2a/paren-init4.C: New test.\n+\t* g++.dg/cpp2a/paren-init5.C: New test.\n+\t* g++.dg/cpp2a/paren-init6.C: New test.\n+\t* g++.dg/cpp2a/paren-init7.C: New test.\n+\t* g++.dg/cpp2a/paren-init8.C: New test.\n+\t* g++.dg/cpp2a/paren-init9.C: New test.\n+\t* g++.dg/ext/desig10.C: Adjust dg-error.\n+\t* g++.dg/template/crash107.C: Likewise.\n+\t* g++.dg/template/crash95.C: Likewise.\n+\t* g++.old-deja/g++.jason/crash3.C: Likewise.\n+\t* g++.old-deja/g++.law/ctors11.C: Likewise.\n+\t* g++.old-deja/g++.law/ctors9.C: Likewise.\n+\t* g++.old-deja/g++.mike/net22.C: Likewise.\n+\t* g++.old-deja/g++.niklas/t128.C: Likewise.\n+\n 2019-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92645"}, {"sha": "4d3953d09838d3d68514ab512d4f7180b82bce62", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-99.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-99.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-99.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-99.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -9,5 +9,6 @@ struct A\n struct B\n {\n   A a;\n-    constexpr B() : a(0) {} // { dg-error \"no matching function\" }\n+  // P0960R3 allows paren-init.\n+  constexpr B() : a(0) {} // { dg-error \"no matching function\" \"\" { target c++17_down } }\n };"}, {"sha": "67b50542bc3c033c5195f6e7a4e019937f9d97a0", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit7.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -10,7 +10,7 @@ struct A { };\n struct B: A { };\n struct C {\n   explicit operator B*();\t// { dg-message \"explicit\" }\n-  explicit operator B&();\t// { dg-message \"explicit\" }\n+  explicit operator B&();\t// { dg-message \"explicit\" \"\" { target c++17_down } }\n };\n \n C c;"}, {"sha": "c2a2b86520f9f4533729c2cc524de679cfd8bcf2", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist12.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist12.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -6,15 +6,15 @@ struct A\n   int i;\n };\n \n-A a({1,2});\t\t\t// { dg-error \"no match\" }\n+A a({1,2});\t\t\t// { dg-error \"no match|cannot convert\" }\n \n union U\n {\n   int i,j;\n };\n \n-U u({1,2});\t\t\t// { dg-error \"no match\" }\n+U u({1,2});\t\t\t// { dg-error \"no match|cannot convert\" }\n \n union V {};\n \n-V v({1});\t\t\t// { dg-error \"no match\" }\n+V v({1});\t\t\t// { dg-error \"no match|too many initializers\" }"}, {"sha": "532b533c8d313b249db95909d65d89ba92eacffc", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31437.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31437.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31437.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31437.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile { target c++11 } }\n-template <typename... T> struct A // { dg-message \"candidates|A\" }\n+template <typename... T> struct A // { dg-message \"candidates|A\" \"\" { target c++17_down } }\n {\n   A(T* p) {  // { dg-error \"parameter packs|T\" }\n    (A<T...>*)(p); \n   }\n };\n \n-A<int> a(0); // { dg-error \"no matching\" }\n+A<int> a(0); // { dg-error \"no matching|too many initializers\" }"}, {"sha": "389b25e16eabea0eb883bd6f1e1bad154ed5b138", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -460,6 +460,12 @@\n #  error \"__cpp_constexpr_dynamic_alloc != 201907\"\n #endif\n \n+#ifndef __cpp_aggregate_paren_init\n+#  error \"__cpp_aggregate_paren_init\"\n+#elif __cpp_aggregate_paren_init != 201902\n+#  error \"__cpp_aggregate_paren_init != 201902\"\n+#endif\n+\n #ifdef __has_cpp_attribute\n \n #  if ! __has_cpp_attribute(maybe_unused)"}, {"sha": "a54b2ccaf6dcf1f9047922b24836fe9a778d4811", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init1.C", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init1.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,116 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do run { target c++2a } }\n+\n+struct A {\n+  int i;\n+  int j;\n+  int k;\n+};\n+\n+struct B {\n+  int i;\n+  int j;\n+  int k = 42;\n+};\n+\n+struct C {\n+  A a;\n+};\n+\n+struct D {\n+  A a1;\n+  A a2;\n+};\n+\n+struct E {\n+  int i;\n+};\n+\n+// F has a base class, but it's not virtual, private, or protected, so this is\n+// still an aggregate (since C++17).\n+struct F : E {\n+  int j;\n+  int k;\n+};\n+\n+F f({1}, 2, 3);\n+\n+// A non-virtual member function doesn't make it a non-aggregate.\n+struct G {\n+  int i;\n+  double j;\n+  int foo(int, int);\n+};\n+\n+G g(1, 2.14);\n+\n+class H {\n+public:\n+  H (int) { }\n+};\n+\n+class I : public H { };\n+\n+int i;\n+A a1(1, 2);\n+A a2(1.0, 2);\n+A a3(++i, ++i);\n+const A& ra(1, 2);\n+\n+A ca = A(1, 2);\n+A ca2 = A(1.0, 2);\n+A ca3 = A(++i, ++i);\n+const A& rca = A(1, 2);\n+\n+B b1(1, 2, 3);\n+B b2(1, 2);\n+B b3(1);\n+\n+C c1({5, 6, 7});\n+D d1({1, 2, 3}, {5, 6, 7});\n+\n+struct W {\n+  const char *s, *t;\n+};\n+W w1(\"fluffer\", \"nutter\");\n+\n+struct Y {\n+  char a[4];\n+};\n+Y y(\"yew\");\n+\n+int\n+main ()\n+{\n+  I(10);\n+\n+  // A::k will be value-initialized.\n+  if (a1.i != 1 || a1.j != 2 || a1.k != 0)\n+    __builtin_abort ();\n+  if (a2.i != 1 || a2.j != 2 || a2.k != 0)\n+    __builtin_abort ();\n+  if (a3.i != 1 || a3.j != 2 || a3.k != 0)\n+    __builtin_abort ();\n+  if (ra.i != 1 || ra.j != 2 || ra.k != 0)\n+    __builtin_abort ();\n+  if (ca.i != 1 || ca.j != 2 || ca.k != 0)\n+    __builtin_abort ();\n+  if (ca2.i != 1 || ca2.j != 2 || ca2.k != 0)\n+    __builtin_abort ();\n+  if (ca3.i != 3 || ca3.j != 4 || ca3.k != 0)\n+    __builtin_abort ();\n+\n+  if (b1.i != 1 || b1.j != 2 || b1.k != 3)\n+    __builtin_abort ();\n+  // The default member initializer will be used for B::k.\n+  if (b2.i != 1 || b2.j != 2 || b2.k != 42)\n+    __builtin_abort ();\n+  if (b3.i != 1 || b3.j != 0 || b3.k != 42)\n+    __builtin_abort ();\n+\n+  if (c1.a.i != 5 || c1.a.j != 6 || c1.a.k != 7)\n+    __builtin_abort ();\n+\n+  if (f.i != 1 || f.j != 2 || f.k != 3)\n+    __builtin_abort ();\n+}"}, {"sha": "5c70d9d59eee97631770057b664507b0008e4e96", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init10.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+// Test from [dcl.init].\n+\n+struct A {\n+  int a;\n+  int&& r;\n+};\n+\n+int f();\n+int n = 10;\n+\n+A a1{1, f()};               // OK, lifetime is extended\n+A a2(1, f());               // well-formed, but dangling reference\n+A a3{1.0, 1};               // { dg-error \"narrowing conversion\" }\n+A a4(1.0, 1);               // well-formed, but dangling reference\n+A a5(1.0, static_cast<int&&>(n));    // OK"}, {"sha": "82ca26695451e9e42a3767cd07145cd5dae8bcb8", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init11.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init11.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,88 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+// Test ill-formed code.\n+\n+// If k is greater than the size of the array, the program is ill-formed.\n+int a1[2](1, 2, 3); // { dg-error \"too many initializers\" }\n+int a2[](); // { dg-error \"array of functions\" }\n+int a3[](()); // { dg-error \"expected primary-expression\" }\n+int a4[](\"raccoon\"); // { dg-error \"invalid conversion\" }\n+\n+struct S {\n+  int i;\n+  int j;\n+};\n+\n+S s1(1, 1, 1); // { dg-error \"too many initializers\" }\n+\n+union U2 {\n+  int a;\n+  float b;\n+};\n+\n+// [dcl.init.aggr]/19:\n+// When a union is initialized with an initializer list, there shall not be\n+// more than one explicitly initialized element.\n+U2 u4 = U2(1, 2); // { dg-error \"too many initializers\" }\n+\n+// Test there is no brace elision.\n+\n+int a[2][2](1, 2, 3, 4); // { dg-error \"too many initializers|array must be initialized with a brace-enclosed initializer\" }\n+\n+// private/protected/virtual base class -> not an aggregate.\n+struct B { };\n+struct D : private B {\n+  int i;\n+  int j;\n+};\n+\n+D d({}, 1, 2); // { dg-error \"no matching function\" }\n+\n+// Private non-static data member -> not an aggregate.\n+struct P {\n+  int i;\n+private:\n+  int j;\n+};\n+\n+P p(1, 2); // { dg-error \"no matching function\" }\n+\n+// User-declared constructor -> not an aggregate.\n+struct U {\n+  U() {}\n+  int i;\n+  int j;  \n+};\n+\n+U u(1, 2); // { dg-error \"no matching function\" }\n+\n+// virtual member function -> not an aggregate.\n+struct V {\n+  int i;\n+  int j;\n+  virtual int foo(int);\n+};\n+\n+V v(1, 2); // { dg-error \"no matching function\" }\n+\n+struct nonaggr {\n+  int i;\n+  int j;\n+private:\n+  int x;\n+};\n+\n+struct F {\n+  nonaggr n;\n+  F() : n(1) { } // { dg-error \"no matching function\" }\n+};\n+\n+struct G {\n+  char a[4];\n+};\n+\n+struct H {\n+  G g;\n+  H() : g(\"oaks\") { } // { dg-error \"initializer-string\" }\n+};"}, {"sha": "d7be6f2b55da5500dc7c62cbd43ca17a98ee2df5", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init12.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init12.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct A;\n+\n+struct C {\n+  operator A();\n+};\n+\n+struct A {\n+  C c;\n+};\n+\n+C c;\n+A a(c);  // invokes C\u2019s conversion function to A\n+\n+// { dg-final { scan-assembler \"_ZN1Ccv1AEv\" } }"}, {"sha": "4b9107c70ff42613f7f2e99e443f17f151627d3c", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init13.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init13.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct X { int a, b; };\n+struct Y { X x; };\n+\n+void\n+f()\n+{\n+  // This is ok...\n+  Y y1{{1, 2}};\n+  Y y2({1, 2});\n+  // ...but Y y((1,2)) is not the same as Y y{{1,2}}.  (1, 2) is a\n+  // COMPOUND_EXPR.\n+  Y y3((1, 2)); // { dg-error \"could not convert\" }\n+}"}, {"sha": "837f953126063ff15c2e128fec9b06fecbb56d39", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init14.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init14.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  int x;\n+  int y;\n+  A(int, int) = delete;\n+};\n+\n+A a(1, 2); // { dg-error \"use of deleted function\" }"}, {"sha": "4311dd4df595541185f76a35b0f6ba0177a84487", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init15.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init15.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  int i;\n+  int j;\n+};\n+\n+struct B : A\n+{\n+  B (): A(1.7, 2) { }\n+};\n+\n+void f(A);\n+\n+void\n+g ()\n+{\n+  f (A(1, 2));\n+}\n+\n+struct S {\n+  int a[2];\n+};\n+\n+S h() { return S({1, 2}); }\n+\n+struct Z {\n+  int i;\n+  int j;\n+  operator A();\n+};\n+\n+Z z;\n+A a = Z(1, 2.3);"}, {"sha": "c8ed924877e823b29244bd9e78de235c53bbf250", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init16.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init16.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct S { int a[2]; };\n+struct A { S s[1]; };\n+\n+template <typename, int N>\n+struct R { static constexpr auto h = A({S{N}}); };\n+\n+template <typename, int N>\n+struct R2 { static constexpr auto h = A({S({N, N})}); };\n+\n+A foo = R<int, 10>::h;\n+A foo2 = R2<int, 10>::h;"}, {"sha": "8e08b5288a57dbd4de4dc37b72dfb44130667953", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init17.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init17.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B { };\n+static_assert (!__is_trivially_constructible(A, B), \"\");"}, {"sha": "0aea493f2145fdc7c74239557609999ee3306b6d", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init18.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init18.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct A { int a, b, c; };\n+struct S { A a; };\n+constexpr S s{ A(1, 2, 3) };\n+static_assert (s.a.a == 1 && s.a.b == 2 && s.a.c == 3);\n+constexpr S s2 = { A(1, 2, 3) };\n+static_assert (s2.a.a == 1 && s2.a.b == 2 && s2.a.c == 3);"}, {"sha": "73643fa3aa2ffe364f7c0f383ab9c3a205332466", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init19.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init19.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  int i[2];\n+};\n+\n+A a({1});\n+A a2({1, 2});\n+A a3(1); // { dg-error \"array must be initialized with a brace-enclosed initializer\" }\n+A a4 = A(1); // { dg-error \"array must be initialized with a brace-enclosed initializer\" }\n+A a5 = A({1});"}, {"sha": "e9e90d7acb6a7d7ba33b37b7a5c4012598fc8d6c", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init2.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init2.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do run { target c++2a } }\n+\n+struct A {\n+  int i = 0;\n+  int j = 0;\n+};\n+\n+struct B {\n+  A a;\n+  constexpr B() : a(1.1, 2) { }\n+};\n+\n+struct C {\n+  int i;\n+};\n+\n+struct E {\n+  C c;\n+  E() : c(1.2) { }\n+};\n+\n+struct F {\n+  char a[4];\n+};\n+\n+struct G {\n+  F f;\n+  G() : f(\"yew\") { }\n+};\n+\n+struct H {\n+  int i;\n+  int &&r;\n+};\n+\n+int f() { return 42; }\n+\n+struct I {\n+  H h;\n+  I() : h(1, f()) { }\n+};\n+\n+I i;  // dangling ref to f():\n+      // {.i=1, .r=(int &) &TARGET_EXPR <D.2118, f ()>}\n+\n+int\n+main ()\n+{\n+  B b;\n+  if (b.a.i != 1 || b.a.j != 2)\n+    __builtin_abort ();\n+  E e;\n+  if (e.c.i != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "f444005a09fe5974088dd04b5059bb34b75bd96b", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init3.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+class a {\n+  int b{};\n+};\n+class c {\n+  c();\n+  a d;\n+};\n+c::c() {}"}, {"sha": "f8c7bd10b63c27eecabacd5077a973b4b7cf2d24", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init4.C", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init4.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,142 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do run { target c++2a } }\n+\n+// Test T[]().\n+\n+int i;\n+int a1[](1, 2, 3);\n+static_assert(sizeof(a1) == 3 * sizeof (int), \"\");\n+int a2[](1.0, 2, 3);\n+static_assert(sizeof(a2) == 3 * sizeof (int), \"\");\n+int a3[3](1, 2, 3);\n+int a4[3](1, 2); // a4[2] is value-initialized.\n+int a5[](++i, ++i);\n+static_assert(sizeof(a5) == 2 * sizeof (int), \"\");\n+int a6[](1);\n+static_assert(sizeof(a6) == sizeof (int), \"\");\n+int a7[]({});\n+static_assert(sizeof(a7) == sizeof (int), \"\");\n+int a8[]({}, {}, {}, {}, {}, {});\n+static_assert(sizeof(a8) == 6 * sizeof (int), \"\");\n+int a9[]((1));\n+static_assert(sizeof(a9) == sizeof (int), \"\");\n+int a10[]((1), (2), (3));\n+static_assert(sizeof(a10) == 3 * sizeof (int), \"\");\n+int a11[][2]{1};\n+static_assert(sizeof(a11) == 2 * sizeof (int), \"\");\n+int a12[][2]({1, 2}, {3, 4});\n+static_assert(sizeof(a12) == 4 * sizeof (int), \"\");\n+\n+const int (&ra1)[](1, 2);\n+const int (&ra2)[](1.0, 2);\n+const int (&ra3)[2](1.0, 2);\n+int (&&rra1)[](1, 2);\n+int (&&rra2)[](1.0, 2);\n+int (&&rra3)[2](1.0, 2);\n+\n+struct S { int i; } s;\n+S s1[]({1});\n+static_assert(sizeof(s1) == sizeof (S), \"\");\n+S s2[]({1}, {2});\n+static_assert(sizeof(s2) == 2 * sizeof (S), \"\");\n+S s3[]({1}, {2}, {3});\n+static_assert(sizeof(s3) == 3 * sizeof (S), \"\");\n+S s4[3]({1}, {2});\n+static_assert(sizeof(s4) == 3 * sizeof (S), \"\");\n+S s5[]({++i}, {++i});\n+static_assert(sizeof(s2) == 2 * sizeof (S), \"\");\n+S s6[](s, s);\n+\n+struct R { int i; int j; };\n+R r1[]({1, 2});\n+static_assert(sizeof(r1) == sizeof (R), \"\");\n+R r2[]({1, 2}, {3, 4});\n+static_assert(sizeof(r2) == 2 * sizeof (R), \"\");\n+R r3[]({1.0, 2}, {3.2, 4});\n+static_assert(sizeof(r3) == 2 * sizeof (R), \"\");\n+\n+char c1[]('r');\n+char c2[]('r', 'a', 'c', 'c', 'o', 'o', 'n');\n+char c3[](\"yarrow\");\n+char c4[4](\"oak\");\n+char c5[10](\"cat\");\n+const char (&c6)[4](\"eel\");\n+\n+int g;\n+struct X {\n+  int i;\n+  X() { ++g; }\n+  X(int) { };\n+};\n+\n+int\n+main ()\n+{\n+  // Here we'll value-initialize l[1] and l[2], which will zero-initialize it.\n+  int l[3](42);\n+  if (l[0] != 42 || l[1] != 0 || l[2] != 0)\n+    __builtin_abort ();\n+\n+  // Here we'll value-initialize x[2] and x[3].  Since X is a class type\n+  // with a user-provided ctor, we'll default-initialize in both cases.\n+  X x[4]({ 1 }, { 2 });\n+  if (g != 2)\n+    __builtin_abort ();\n+\n+  if (a1[0] != 1 || a1[1] != 2 || a1[2] != 3)\n+    __builtin_abort ();\n+  if (a2[0] != 1 || a2[1] != 2 || a2[2] != 3)\n+    __builtin_abort ();\n+  if (a3[0] != 1 || a3[1] != 2 || a3[2] != 3)\n+    __builtin_abort ();\n+  if (a4[0] != 1 || a4[1] != 2 || a4[2] != 0)\n+    __builtin_abort ();\n+  if (a5[0] != 1 || a5[1] != 2)\n+    __builtin_abort ();\n+  if (a6[0] != 1)\n+    __builtin_abort ();\n+  if (a7[0] != 0)\n+    __builtin_abort ();\n+  if (a8[0] != 0 || a8[1] != 0 || a8[2] != 0 || a8[3] != 0\n+      || a8[4] != 0 || a8[5] != 0)\n+    __builtin_abort ();\n+  if (a9[0] != 1)\n+    __builtin_abort ();\n+  if (a10[0] != 1 || a10[1] != 2 || a10[2] != 3)\n+    __builtin_abort ();\n+  if (a11[0][0] != 1 || a11[0][1] != 0)\n+    __builtin_abort ();\n+  if (a12[0][0] != 1 || a12[0][1] != 2 || a12[1][0] != 3 || a12[1][1] != 4)\n+    __builtin_abort ();\n+\n+  if (ra1[0] != 1 || ra1[1] != 2)\n+    __builtin_abort ();\n+  if (ra2[0] != 1 || ra2[1] != 2)\n+    __builtin_abort ();\n+  if (ra3[0] != 1 || ra3[1] != 2)\n+    __builtin_abort ();\n+  if (rra1[0] != 1 || rra1[1] != 2)\n+    __builtin_abort ();\n+  if (rra2[0] != 1 || rra2[1] != 2)\n+    __builtin_abort ();\n+  if (rra3[0] != 1 || rra3[1] != 2)\n+    __builtin_abort ();\n+\n+  if (s1[0].i != 1)\n+    __builtin_abort ();\n+  if (s2[0].i != 1 || s2[1].i != 2)\n+    __builtin_abort ();\n+  if (s3[0].i != 1 || s3[1].i != 2 || s3[2].i != 3)\n+    __builtin_abort ();\n+  if (s4[0].i != 1 || s4[1].i != 2 || s4[2].i != 0)\n+    __builtin_abort ();\n+  if (s5[0].i != 3 || s5[1].i != 4)\n+    __builtin_abort ();\n+\n+  if (r1[0].i != 1 || r1[0].j != 2)\n+    __builtin_abort ();\n+  if (r2[0].i != 1 || r2[0].j != 2 || r2[1].i != 3 || r2[1].j != 4)\n+    __builtin_abort ();\n+  if (r3[0].i != 1 || r3[0].j != 2 || r3[1].i != 3 || r3[1].j != 4)\n+    __builtin_abort ();\n+}"}, {"sha": "a64cb00ebbc34966dfb55c119917814d6a1d8984", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init5.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init5.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do run { target c++2a } }\n+\n+union U {\n+  int a;\n+  float b;\n+};\n+\n+// u1 has no active member\n+U u1;\n+// u2 zero-initializes the first member, so u2.a is the active member and\n+// its value is 0.\n+U u2 = U();\n+// u3 uses non-list aggregate initialization, so u3.a is the active member\n+// and its value is 1.\n+U u3 = U(1);\n+\n+int\n+main ()\n+{\n+  if (u2.a != 0)\n+    __builtin_abort ();\n+  if (u3.a != 1)\n+    __builtin_abort ();\n+}"}, {"sha": "b5d97dcb3d8eb83107835f939a771226bbbba84c", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init6.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+// Test that we don't perform lifetime extension for () init.\n+\n+struct A {\n+  int a;\n+  int&& r;\n+};\n+\n+int f();\n+A a(1, f());\n+\n+// { dg-final { scan-assembler-not \"_ZGR1a\" } }"}, {"sha": "32af1a7265ceee7f1895020d6e6e9f7cedbb1704", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init7.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do run { target c++2a } }\n+\n+int h;\n+struct i {\n+  i() {}\n+  explicit i(i &) {}\n+  template <typename j> i(j &) { h++; }\n+};\n+\n+int main() {\n+  {\n+    i a[6];\n+    auto [b, c, d, e, f, g] = a;\n+  }\n+  i a[6];\n+  auto [b, c, d, e, f, g](a);\n+  if (h != 6)\n+    __builtin_abort();\n+}"}, {"sha": "30e71650bc9298b4ecc7533648cf0e856015ad43", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init8.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init8.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+// Test that we don't accept designated inits in ( ).\n+\n+struct S {\n+  int i;\n+  int j = 42;\n+};\n+\n+S s(.i = 12); // { dg-error \"expected\" }\n+\n+int a[]([0] = 42); // { dg-error \"\" }"}, {"sha": "c44b206feb842036d03e1e726e3adaf7b035e2ef", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init9.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/91363 - P0960R3: Parenthesized initialization of aggregates.\n+// { dg-do compile { target c++2a } }\n+\n+struct B { };\n+struct A : B {\n+  int i;\n+};\n+\n+B b;\n+A a(b);"}, {"sha": "c8d672b72d958936b8e1c917bf7786f425a927e0", "filename": "gcc/testsuite/g++.dg/ext/desig10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig10.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,4 +1,4 @@\n // PR c++/84972\n // { dg-additional-options \"-w\" }\n \n-char(a[])({.a = 0});  // { dg-error \"designated initializer\" }\n+char(a[])({.a = 0});  // { dg-error \"designated initializer|cannot convert\" }"}, {"sha": "9d8d394d93d72f2ffdb7698c7ce5d108fcaca731", "filename": "gcc/testsuite/g++.dg/template/crash107.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -3,7 +3,7 @@\n // { dg-options \"\" }\n // { dg-additional-options \"-Wno-return-type\" }\n \n-template<typename FP_> struct Vec { // { dg-message \"note\" }\n+template<typename FP_> struct Vec { // { dg-message \"note\" \"\" { target c++17_down } }\n     Vec& operator^=(Vec& rhs)     {\n         union {\n             struct {FP_ x,y,z;}; // { dg-error \"20:anonymous struct\" }\n@@ -14,6 +14,6 @@ template<typename FP_> struct Vec { // { dg-message \"note\" }\n         return Vec(*this)^=rhs; // { dg-message \"required\" }\n     }\n };\n-Vec<double> v(3,4,12); // { dg-error \"no matching\" }\n-Vec<double> V(12,4,3);  // { dg-error \"no matching\" }\n+Vec<double> v(3,4,12); // { dg-error \"no matching|too many initializers\" }\n+Vec<double> V(12,4,3);  // { dg-error \"no matching|too many initializers\" }\n Vec<double> c = v^V;   // { dg-message \"required\" }"}, {"sha": "47346111328218608e880747f73f85b1a39225f5", "filename": "gcc/testsuite/g++.dg/template/crash95.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash95.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -8,4 +8,4 @@ template < typename > struct S\n   };\n };\n \n-S < int > s(0); // { dg-error \"no matching\" }\n+S < int > s(0); // { dg-error \"no matching|too many initializers\" }"}, {"sha": "c49505313280409eec2eb8e2340d148dd19a1ab5", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash3.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash3.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -2,12 +2,13 @@\n // Bug: g++ tries to generate initialization semantics for a Node from an int,\n // and fails.\n \n-struct Node\t\t\t// { dg-message \"note\" }\n+struct Node\t\t\t// { dg-message \"note\" \"\" { target c++17_down } }\n {\n   Node* child[2];\n };\n \n void bug(int i)\n {\n-  Node* q = new Node(i);\t// { dg-error \"no matching\" } \n+  Node* q = new Node(i);\t// { dg-error \"no matching\" \"\" { target c++17_down }  } \n+// { dg-error \"array must be initialized\" \"\" { target c++2a } .-1 }\n }"}, {"sha": "b29b18a62a32b549c3717a2515ca72b7cfb945c1", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors11.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -10,12 +10,12 @@ public:\n   inline A(int x){printf(\"constructing A with %d\\n\", x);}\n };\n \n-class B:public A{ // { dg-message \"note\" } non-default constructor\n+class B:public A{ // { dg-message \"note\" \"\" { target c++17_down } } non-default constructor\n private:\n public:\n };\n \n int main()\n {\n-  B(10);// { dg-error \"match\" } B doesn't have a constructor taking int\n+  B(10);// { dg-error \"match\" \"\" { target c++17_down } } B doesn't have a constructor taking int\n }"}, {"sha": "5856d5dc88330890d4d373d3bf8812f069e9c6e4", "filename": "gcc/testsuite/g++.old-deja/g++.law/ctors9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fctors9.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -20,7 +20,7 @@ Foo::Foo(int aa)\n { }\n \n \n-struct var_Foo: public Foo // { dg-message \"note\" }  base.*// ERROR -  in class.*\n+struct var_Foo: public Foo // { dg-message \"note\" \"\" { target c++17_down } }  base.*// ERROR -  in class.*\n {\n   var_Foo* operator-> () {return this;}\n };\n@@ -32,7 +32,7 @@ int blort(Foo& f)\n \n int main()\n {\n-  var_Foo b(2);// { dg-error \"match\" } \n+  var_Foo b(2);// { dg-error \"match\" \"\" { target c++17_down } } \n   b->a = 0;\n   int x = blort(b);\n   return x;"}, {"sha": "abbf61910234766b6555d22d18972c0790882254", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net22.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet22.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -5,10 +5,11 @@ public:\n   Parent( char *s ) {}\n };\n \n-class Child : public Parent {\t\t// { dg-message \"note\" } called\n+class Child : public Parent {\t\t// { dg-message \"note\" \"\" { target c++17_down } } called\n };\n \n int main() {\n-  Child c( \"String initializer\" );\t// { dg-error \"match\" } bad\n+  Child c( \"String initializer\" );\t// { dg-error \"match\" \"\" { target c++17_down } } bad\n+// { dg-error \"forbids converting a string constant\" \"\" { target c++2a } .-1 }\n   return 0;\n }"}, {"sha": "0b3346c4ef37015a2c8d13d4507e77ab3f106473", "filename": "gcc/testsuite/g++.old-deja/g++.niklas/t128.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft128.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aae289866f5ea55d187444520412554aa2e171/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft128.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.niklas%2Ft128.C?ref=43aae289866f5ea55d187444520412554aa2e171", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n // GROUPS niklas uncaught default-construct\n struct A { A (int); };\n-struct B : A {}; // { dg-message \"note\" } without ctor // ERROR - candidates\n-void f () { B (0); }// { dg-error \"match\" } .*\n+struct B : A {}; // { dg-message \"note\" \"\" { target c++17_down } } without ctor // ERROR - candidates\n+void f () { B (0); }// { dg-error \"match\" \"\" { target c++17_down } } .*"}]}