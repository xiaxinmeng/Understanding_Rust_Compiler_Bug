{"sha": "15e5858fbe6245b07f9115990bc58d4dfb76e46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlNTg1OGZiZTYyNDViMDdmOTExNTk5MGJjNThkNGRmYjc2ZTQ2YQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-05-10T20:14:22Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-05-10T20:14:22Z"}, "message": "re PR fortran/61968 (ICE (assembly failure) due to wrongly generating a vtable for TYPE(*) / BT_ASSUMED_TYPE)\n\n2019-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/61968\n    * interface.c (compare_actual_formal): Do not create a vtab if\n    the actual argument is assumed type.\n\n2019-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/61968\n    * gfortran.dg/assumed_type_10.f90: New test case.\n    * gfortran.dg/assumed_type_11.f90: New test case.\n\nFrom-SVN: r271076", "tree": {"sha": "2db78b72dd6b6d56335c1e9affc8d98aa76ea021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db78b72dd6b6d56335c1e9affc8d98aa76ea021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e5858fbe6245b07f9115990bc58d4dfb76e46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e5858fbe6245b07f9115990bc58d4dfb76e46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e5858fbe6245b07f9115990bc58d4dfb76e46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e5858fbe6245b07f9115990bc58d4dfb76e46a/comments", "author": null, "committer": null, "parents": [{"sha": "93fd52fc8cb71dda94cd0a9e869c618bba8b0292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93fd52fc8cb71dda94cd0a9e869c618bba8b0292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93fd52fc8cb71dda94cd0a9e869c618bba8b0292"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "0198637f366c8db7088394d9e1181caa0571a397", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=15e5858fbe6245b07f9115990bc58d4dfb76e46a", "patch": "@@ -1,3 +1,9 @@\n+2019-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/61968\n+\t* interface.c (compare_actual_formal): Do not create a vtab if\n+\tthe actual argument is assumed type.\n+\n 2019-05-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/90093"}, {"sha": "a3a9528814d60cc56f3f9c643513553b8acf2260", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=15e5858fbe6245b07f9115990bc58d4dfb76e46a", "patch": "@@ -2989,7 +2989,8 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t polymorphic formal arguments.  */\n       if (UNLIMITED_POLY (f->sym)\n \t  && a->expr->ts.type != BT_DERIVED\n-\t  && a->expr->ts.type != BT_CLASS)\n+\t  && a->expr->ts.type != BT_CLASS\n+\t  && a->expr->ts.type != BT_ASSUMED)\n \tgfc_find_vtab (&a->expr->ts);\n \n       if (a->expr->expr_type == EXPR_NULL"}, {"sha": "5a579407439e2f75dd2a4a588c7d13585da7d165", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15e5858fbe6245b07f9115990bc58d4dfb76e46a", "patch": "@@ -1,3 +1,9 @@\n+2019-05-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/61968\n+\t* gfortran.dg/assumed_type_10.f90: New test case.\n+\t* gfortran.dg/assumed_type_11.f90: New test case.\n+\n 2019-05-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: Darwin is"}, {"sha": "bf0c87320ca3dfa9b180cf684c671dfeaa1ca5e3", "filename": "gcc/testsuite/gfortran.dg/assumed_type_10.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_10.f90?ref=15e5858fbe6245b07f9115990bc58d4dfb76e46a", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do compile }\n+! { dg-options \"-O0 -fdump-tree-original\" }\n+! PR 61968 - this used to generate invalid assembler containing\n+! TYPE(*).\n+\n+module testmod\n+  use iso_c_binding, only: c_size_t, c_int32_t, c_int64_t\n+  implicit none\n+\n+  interface test\n+    procedure :: test_32\n+    procedure :: test_array\n+  end interface test\n+\n+  interface\n+    subroutine test_lib (a, len) bind(C, name=\"xxx\")\n+      use iso_c_binding, only: c_size_t\n+      type(*), dimension(*) :: a\n+      integer(c_size_t), value :: len\n+   end subroutine\n+  end interface\n+\n+contains\n+\n+  subroutine test_32 (a, len)\n+    type(*), dimension(*) :: a\n+    integer(c_int32_t), value :: len\n+    call test_lib (a, int (len, kind=c_size_t))\n+  end subroutine\n+\n+  subroutine test_array (a)\n+    use iso_c_binding, only: c_size_t\n+    class(*), dimension(..), target :: a\n+    call test_lib (a, int (sizeof (a), kind=c_size_t))\n+  end subroutine\n+\n+end module\n+\n+  subroutine test_32_ (a, len)\n+    use iso_c_binding, only: c_int32_t\n+    use testmod\n+    type(*), dimension(*) :: a\n+    integer(c_int32_t), value :: len\n+    call test (a, len)\n+  end subroutine\n+! { dg-final { scan-tree-dump-not \"! __vtype_TYPE\\\\(*\\\\)\" \"original\" } }"}, {"sha": "df6572dd5b39082d98447ca0d91e8bc25aeef12f", "filename": "gcc/testsuite/gfortran.dg/assumed_type_11.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e5858fbe6245b07f9115990bc58d4dfb76e46a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_11.f90?ref=15e5858fbe6245b07f9115990bc58d4dfb76e46a", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -fdump-tree-original\" }\n+! PR 61968 - this used to generate invalid assembler containing\n+! TYPE(*).\n+\n+module testmod\n+  use iso_c_binding, only: c_size_t, c_int32_t, c_int64_t\n+  implicit none\n+\n+  interface test\n+    procedure :: test_32\n+    procedure :: test_array\n+  end interface test\n+\n+  interface\n+    subroutine test_lib (a, len) bind(C, name=\"xxx\")\n+      use iso_c_binding, only: c_size_t\n+      type(*), dimension(*) :: a\n+      integer(c_size_t), value :: len\n+   end subroutine\n+  end interface\n+\n+contains\n+\n+  subroutine test_32 (a, len)\n+    type(*), dimension(*) :: a\n+    integer(c_int32_t), value :: len\n+    call test_lib (a, int (len, kind=c_size_t))\n+  end subroutine\n+\n+  subroutine test_array (a)\n+    use iso_c_binding, only: c_size_t\n+    class(*), dimension(..), target :: a\n+    call test_lib (a, int (sizeof (a), kind=c_size_t))\n+  end subroutine\n+\n+end module\n+\n+  subroutine test_32_ (a, len)\n+    use iso_c_binding, only: c_int32_t\n+    use testmod\n+    type(*), dimension(*) :: a\n+    integer(c_int32_t), value :: len\n+    call test (a, len)\n+  end subroutine\n+! { dg-final { scan-tree-dump-not \"! __vtype_TYPE\\\\(*\\\\)\" \"original\" } }"}]}