{"sha": "ed4bcdba7c19299844f11c15da6f93116b0b180f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0YmNkYmE3YzE5Mjk5ODQ0ZjExYzE1ZGE2ZjkzMTE2YjBiMTgwZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-12-19T18:29:09Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-12-19T18:29:09Z"}, "message": "neon-testgen.ml (effective_target): Handle \"CRYPTO\".\n\n[gcc/]\n2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/neon-testgen.ml (effective_target): Handle \"CRYPTO\".\n\n[gcc/testsuite]\n2013-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t * lib/target-supports.exp (check_effective_target_arm_crypto_ok):\n\t New procedure.\n\t (add_options_for_arm_crypto): Likewise.\n\t * gcc.target/arm/crypto-vaesdq_u8.c: New test.\n\t * gcc.target/arm/crypto-vaeseq_u8.c: Likewise.\n\t * gcc.target/arm/crypto-vaesimcq_u8.c: Likewise.\n\t * gcc.target/arm/crypto-vaesmcq_u8.c: Likewise.\n\t * gcc.target/arm/crypto-vldrq_p128.c: Likewise.\n\t * gcc.target/arm/crypto-vmull_high_p64.c: Likewise.\n\t * gcc.target/arm/crypto-vmullp64.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1cq_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1h_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1mq_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1pq_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1su0q_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha1su1q_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha256h2q_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha256hq_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha256su0q_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vsha256su1q_u32.c: Likewise.\n\t * gcc.target/arm/crypto-vstrq_p128.c: Likewise.\n\t * gcc.target/arm/neon/vbslQp64: Generate.\n\t * gcc.target/arm/neon/vbslp64: Likewise.\n\t * gcc.target/arm/neon/vcombinep64: Likewise.\n\t * gcc.target/arm/neon/vcreatep64: Likewise.\n\t * gcc.target/arm/neon/vdupQ_lanep64: Likewise.\n\t * gcc.target/arm/neon/vdupQ_np64: Likewise.\n\t * gcc.target/arm/neon/vdup_lanep64: Likewise.\n\t * gcc.target/arm/neon/vdup_np64: Likewise.\n\t * gcc.target/arm/neon/vextQp64: Likewise.\n\t * gcc.target/arm/neon/vextp64: Likewise.\n\t * gcc.target/arm/neon/vget_highp64: Likewise.\n\t * gcc.target/arm/neon/vget_lowp64: Likewise.\n\t * gcc.target/arm/neon/vld1Q_dupp64: Likewise.\n\t * gcc.target/arm/neon/vld1Q_lanep64: Likewise.\n\t * gcc.target/arm/neon/vld1Qp64: Likewise.\n\t * gcc.target/arm/neon/vld1_dupp64: Likewise.\n\t * gcc.target/arm/neon/vld1_lanep64: Likewise.\n\t * gcc.target/arm/neon/vld1p64: Likewise.\n\t * gcc.target/arm/neon/vld2_dupp64: Likewise.\n\t * gcc.target/arm/neon/vld2p64: Likewise.\n\t * gcc.target/arm/neon/vld3_dupp64: Likewise.\n\t * gcc.target/arm/neon/vld3p64: Likewise.\n\t * gcc.target/arm/neon/vld4_dupp64: Likewise.\n\t * gcc.target/arm/neon/vld4p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQf32_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQf32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_f32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_p16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_p8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_s16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_s32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_s64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_s8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_u16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_u32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_u64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp128_u8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp16_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_f32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_p16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_p8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_s16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_s32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_s64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_s8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_u16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_u32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_u64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp64_u8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp8_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQp8_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs16_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs32_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs64_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs64_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs8_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQs8_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu16_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu32_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu64_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu64_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu8_p128: Likewise.\n\t * gcc.target/arm/neon/vreinterpretQu8_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretf32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_f32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_p16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_p8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_s16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_s32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_s64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_s8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_u16: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_u32: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_u64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp64_u8: Likewise.\n\t * gcc.target/arm/neon/vreinterpretp8_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterprets16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterprets32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterprets64_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterprets8_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretu16_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretu32_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretu64_p64: Likewise.\n\t * gcc.target/arm/neon/vreinterpretu8_p64: Likewise.\n\t * gcc.target/arm/neon/vsliQ_np64: Likewise.\n\t * gcc.target/arm/neon/vsli_np64: Likewise.\n\t * gcc.target/arm/neon/vsriQ_np64: Likewise.\n\t * gcc.target/arm/neon/vsri_np64: Likewise.\n\t * gcc.target/arm/neon/vst1Q_lanep64: Likewise.\n\t * gcc.target/arm/neon/vst1Qp64: Likewise.\n\t * gcc.target/arm/neon/vst1_lanep64: Likewise.\n\t * gcc.target/arm/neon/vst1p64: Likewise.\n\t * gcc.target/arm/neon/vst2p64: Likewise.\n\t * gcc.target/arm/neon/vst3p64: Likewise.\n\t * gcc.target/arm/neon/vst4p64: Likewise.\n\nFrom-SVN: r206131", "tree": {"sha": "5656be7ceb8aa1e8b2b54b3d4ded4b346f3f460f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5656be7ceb8aa1e8b2b54b3d4ded4b346f3f460f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed4bcdba7c19299844f11c15da6f93116b0b180f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4bcdba7c19299844f11c15da6f93116b0b180f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4bcdba7c19299844f11c15da6f93116b0b180f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4bcdba7c19299844f11c15da6f93116b0b180f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "021b5e6b54aecf36d3b105368485682e5d06782a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021b5e6b54aecf36d3b105368485682e5d06782a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021b5e6b54aecf36d3b105368485682e5d06782a"}], "stats": {"total": 2457, "additions": 2456, "deletions": 1}, "files": [{"sha": "6522c6002184278bedbdbde1599df9e56e1e1151", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -1,3 +1,7 @@\n+2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/neon-testgen.ml (effective_target): Handle \"CRYPTO\".\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t * config/arm/arm.c (enum arm_builtins): Add crypto builtins."}, {"sha": "e1e4e250787ff78c1fca2a627056ef1822ee1aa5", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -167,6 +167,7 @@ let effective_target features =\n                                         | _ -> false)\n                      features with\n       Requires_feature \"FMA\" -> \"arm_neonv2\"\n+    | Requires_feature \"CRYPTO\" -> \"arm_crypto\"\n     | Requires_arch 8 -> \"arm_v8_neon\"\n     | Requires_FP_bit 1 -> \"arm_neon_fp16\"\n     | _ -> assert false\n@@ -300,5 +301,5 @@ let test_intrinsic_group dir (opcode, features, shape, name, munge, types) =\n (* Program entry point.  *)\n let _ =\n   let directory = if Array.length Sys.argv <> 1 then Sys.argv.(1) else \".\" in\n-    List.iter (test_intrinsic_group directory) (reinterp @ ops)\n+    List.iter (test_intrinsic_group directory) (reinterp @ reinterpq @ ops)\n "}, {"sha": "7e40136359c2d3d7178398fd6d25f8631eb446fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -1,3 +1,130 @@\n+2013-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t * lib/target-supports.exp (check_effective_target_arm_crypto_ok):\n+\t New procedure.\n+\t (add_options_for_arm_crypto): Likewise.\n+\t * gcc.target/arm/crypto-vaesdq_u8.c: New test.\n+\t * gcc.target/arm/crypto-vaeseq_u8.c: Likewise.\n+\t * gcc.target/arm/crypto-vaesimcq_u8.c: Likewise.\n+\t * gcc.target/arm/crypto-vaesmcq_u8.c: Likewise.\n+\t * gcc.target/arm/crypto-vldrq_p128.c: Likewise.\n+\t * gcc.target/arm/crypto-vmull_high_p64.c: Likewise.\n+\t * gcc.target/arm/crypto-vmullp64.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1cq_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1h_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1mq_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1pq_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1su0q_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha1su1q_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha256h2q_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha256hq_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha256su0q_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vsha256su1q_u32.c: Likewise.\n+\t * gcc.target/arm/crypto-vstrq_p128.c: Likewise.\n+\t * gcc.target/arm/neon/vbslQp64: Generate.\n+\t * gcc.target/arm/neon/vbslp64: Likewise.\n+\t * gcc.target/arm/neon/vcombinep64: Likewise.\n+\t * gcc.target/arm/neon/vcreatep64: Likewise.\n+\t * gcc.target/arm/neon/vdupQ_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vdupQ_np64: Likewise.\n+\t * gcc.target/arm/neon/vdup_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vdup_np64: Likewise.\n+\t * gcc.target/arm/neon/vextQp64: Likewise.\n+\t * gcc.target/arm/neon/vextp64: Likewise.\n+\t * gcc.target/arm/neon/vget_highp64: Likewise.\n+\t * gcc.target/arm/neon/vget_lowp64: Likewise.\n+\t * gcc.target/arm/neon/vld1Q_dupp64: Likewise.\n+\t * gcc.target/arm/neon/vld1Q_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vld1Qp64: Likewise.\n+\t * gcc.target/arm/neon/vld1_dupp64: Likewise.\n+\t * gcc.target/arm/neon/vld1_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vld1p64: Likewise.\n+\t * gcc.target/arm/neon/vld2_dupp64: Likewise.\n+\t * gcc.target/arm/neon/vld2p64: Likewise.\n+\t * gcc.target/arm/neon/vld3_dupp64: Likewise.\n+\t * gcc.target/arm/neon/vld3p64: Likewise.\n+\t * gcc.target/arm/neon/vld4_dupp64: Likewise.\n+\t * gcc.target/arm/neon/vld4p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQf32_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQf32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_f32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_p16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_p8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_s16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_s32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_s64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_s8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_u16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_u32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_u64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp128_u8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp16_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_f32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_p16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_p8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_s16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_s32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_s64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_s8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_u16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_u32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_u64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp64_u8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp8_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQp8_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs16_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs32_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs64_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs64_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs8_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQs8_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu16_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu32_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu64_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu64_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu8_p128: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretQu8_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretf32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_f32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_p16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_p8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_s16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_s32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_s64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_s8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_u16: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_u32: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_u64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp64_u8: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretp8_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterprets16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterprets32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterprets64_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterprets8_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretu16_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretu32_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretu64_p64: Likewise.\n+\t * gcc.target/arm/neon/vreinterpretu8_p64: Likewise.\n+\t * gcc.target/arm/neon/vsliQ_np64: Likewise.\n+\t * gcc.target/arm/neon/vsli_np64: Likewise.\n+\t * gcc.target/arm/neon/vsriQ_np64: Likewise.\n+\t * gcc.target/arm/neon/vsri_np64: Likewise.\n+\t * gcc.target/arm/neon/vst1Q_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vst1Qp64: Likewise.\n+\t * gcc.target/arm/neon/vst1_lanep64: Likewise.\n+\t * gcc.target/arm/neon/vst1p64: Likewise.\n+\t * gcc.target/arm/neon/vst2p64: Likewise.\n+\t * gcc.target/arm/neon/vst3p64: Likewise.\n+\t * gcc.target/arm/neon/vst4p64: Likewise.\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* lib/target-supports.exp (add_options_for_arm_crc): New procedure."}, {"sha": "e0b25b93cf89c11fc00aed5ca77526669a65bc4e", "filename": "gcc/testsuite/gcc.target/arm/crypto-vaesdq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesdq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesdq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesdq_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint8x16_t a, b, c;\n+  int i = 0;\n+\n+  for (i = 0; i < 16; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 15 - i;\n+    }\n+  c = vaesdq_u8 (a, b);\n+  return c[0];\n+}\n+\n+/* { dg-final { scan-assembler \"aesd.8\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "f47864662ebe42d7d51ae1284f90d530a6425f10", "filename": "gcc/testsuite/gcc.target/arm/crypto-vaeseq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaeseq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaeseq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaeseq_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint8x16_t a, b, c;\n+  int i = 0;\n+\n+  for (i = 0; i < 16; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = 15 - i;\n+    }\n+  c = vaeseq_u8 (a, b);\n+  return c[0];\n+}\n+\n+/* { dg-final { scan-assembler \"aese.8\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "fbbfda609fc3ffcdd8a53886a0186086c15ad9e3", "filename": "gcc/testsuite/gcc.target/arm/crypto-vaesimcq_u8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesimcq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesimcq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesimcq_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint8x16_t a, b;\n+  int i = 0;\n+\n+  for (i = 0; i < 16; ++i)\n+    a[i] = i;\n+\n+  b = vaesimcq_u8 (a);\n+  return b[0];\n+}\n+\n+/* { dg-final { scan-assembler \"aesimc.8\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "cae8bd096b85777ed42ca652b4fd1522d70d1c8d", "filename": "gcc/testsuite/gcc.target/arm/crypto-vaesmcq_u8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesmcq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesmcq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vaesmcq_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint8x16_t a, b;\n+  int i = 0;\n+\n+  for (i = 0; i < 16; ++i)\n+    a[i] = i;\n+\n+  b = vaesmcq_u8 (a);\n+  return b[0];\n+}\n+\n+/* { dg-final { scan-assembler \"aesmc.8\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "96c0e9a755a9acd44731a8d08345c9e6e60458c8", "filename": "gcc/testsuite/gcc.target/arm/crypto-vldrq_p128.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vldrq_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vldrq_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vldrq_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+poly128_t\n+foo (poly128_t* ptr)\n+{\n+  return vldrq_p128 (ptr);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1.64\\t{d\\[0-9\\]+-d\\[0-9\\]+}.*\" } } */"}, {"sha": "1290f31a6a7dfe5b19406fda519e8dcf9637f3a4", "filename": "gcc/testsuite/gcc.target/arm/crypto-vmull_high_p64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmull_high_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmull_high_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmull_high_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+poly128_t\n+foo (void)\n+{\n+  poly64x2_t a = { 0xdeadbeef, 0xadabcaca };\n+  poly64x2_t b = { 0xdcdcdcdc, 0xbdbdbdbd };\n+  return vmull_high_p64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmull.p64.*\" } } */"}, {"sha": "b788dca52ff2d4571729a36674b7e538734cfdae", "filename": "gcc/testsuite/gcc.target/arm/crypto-vmullp64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmullp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmullp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vmullp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+poly128_t\n+foo (void)\n+{\n+  poly64_t a = 0xdeadbeef;\n+  poly64_t b = 0xadadadad;\n+  return vmull_p64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vmull.p64.*\" } } */"}, {"sha": "4dc9dee6617efba4788d0b2273bd84511b28a34f", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1cq_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1cq_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32_t hash = 0xdeadbeef;\n+  uint32x4_t a = {0, 1, 2, 3};\n+  uint32x4_t b = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha1cq_u32 (a, hash, b);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha1c.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "dee277485247b8c92ff5c17e6ed0fccbaec5575e", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1h_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1h_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32_t val = 0xdeadbeef;\n+  return vsha1h_u32 (val);\n+}\n+\n+/* { dg-final { scan-assembler \"sha1h.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "672b93a97475fd7caec67611cf074b32fe2d6860", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1mq_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1mq_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32_t hash = 0xdeadbeef;\n+  uint32x4_t a = {0, 1, 2, 3};\n+  uint32x4_t b = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha1mq_u32 (a, hash, b);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha1m.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "ff508e0dc7f683c55496be15b4bab5219a73ac66", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1pq_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1pq_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32_t hash = 0xdeadbeef;\n+  uint32x4_t a = {0, 1, 2, 3};\n+  uint32x4_t b = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha1pq_u32 (a, hash, b);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha1p.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "4435d1800b2c3f269216e83dcba4ae2b41ce1b2f", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1su0q_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su0q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su0q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su0q_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+  uint32x4_t c = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha1su0q_u32 (a, b, c);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha1su0.32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]\" } } */"}, {"sha": "8610c4de26921a98ff259aadf7550967d1d7cd8a", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha1su1q_u32.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha1su1q_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+\n+  uint32x4_t res = vsha1su1q_u32 (a, b);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha1su1.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "4a3e2e15835b7b64e768a624c9e818e9c393275e", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha256h2q_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256h2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256h2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256h2q_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+  uint32x4_t c = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha256h2q_u32 (a, b, c);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha256h2.32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]\" } } */"}, {"sha": "49577f2b7248ea89ac7cb5030909903d725c4ecb", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha256hq_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256hq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256hq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256hq_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+  uint32x4_t c = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha256hq_u32 (a, b, c);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha256h.32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]\" } } */"}, {"sha": "cc4305d38b55f742e67439c65f7efa6861613754", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha256su0q_u32.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su0q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su0q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su0q_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+\n+  uint32x4_t res = vsha256su0q_u32 (a, b);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha256su0.32\\tq\\[0-9\\]+, q\\[0-9\\]+\" } } */"}, {"sha": "430f38adc0f4e8e34a6e6ea9c8128e34c5bbd42e", "filename": "gcc/testsuite/gcc.target/arm/crypto-vsha256su1q_u32.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vsha256su1q_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+int\n+foo (void)\n+{\n+  uint32x4_t a = {0xd, 0xe, 0xa, 0xd};\n+  uint32x4_t b = {0, 1, 2, 3};\n+  uint32x4_t c = {3, 2, 1, 0};\n+\n+  uint32x4_t res = vsha256su1q_u32 (a, b, c);\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"sha256su1.32\\tq\\[0-9\\]+, q\\[0-9\\]+, q\\[0-9\\]\" } } */"}, {"sha": "acd8af34f66131bfbad6d85618b5a77bf44d9f81", "filename": "gcc/testsuite/gcc.target/arm/crypto-vstrq_p128.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vstrq_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vstrq_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcrypto-vstrq_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void\n+foo (poly128_t* ptr, poly128_t val)\n+{\n+  vstrq_p128 (ptr, val);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1.64\\t{d\\[0-9\\]+-d\\[0-9\\]+}.*\" } } */"}, {"sha": "519ee370d1f297b503923159fbc48a6cffc074eb", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vbslQp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQp64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+  poly64x2_t arg2_poly64x2_t;\n+\n+  out_poly64x2_t = vbslq_p64 (arg0_uint64x2_t, arg1_poly64x2_t, arg2_poly64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "51929274dbb9d20b5b3e1a89a0793eb9ec9bfd28", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vbslp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+  poly64x1_t arg2_poly64x1_t;\n+\n+  out_poly64x1_t = vbsl_p64 (arg0_uint64x1_t, arg1_poly64x1_t, arg2_poly64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d5e156bdf341c02919e11c104d1e7c5e668beb69", "filename": "gcc/testsuite/gcc.target/arm/neon/vcombinep64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcombinep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcombinep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcombinep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcombinep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcombinep64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x1_t arg0_poly64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  out_poly64x2_t = vcombine_p64 (arg0_poly64x1_t, arg1_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7aedb73fcc73b549a7e0cdef5fcb42e84ad31f8f", "filename": "gcc/testsuite/gcc.target/arm/neon/vcreatep64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcreatep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcreatep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcreatep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vcreatep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcreatep64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint64_t arg0_uint64_t;\n+\n+  out_poly64x1_t = vcreate_p64 (arg0_uint64_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6211413c76c48849780ff463169b48d919726504", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_lanep64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vdupQ_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vdupQ_lanep64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_poly64x2_t = vdupq_lane_p64 (arg0_poly64x1_t, 0);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "68a1d746bcc8b2d4835b93c06deea4c5a90e2b9f", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_np64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vdupQ_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vdupQ_np64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64_t arg0_poly64_t;\n+\n+  out_poly64x2_t = vdupq_n_p64 (arg0_poly64_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ab263f170802669d7480056bdd291a41e0474c19", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_lanep64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vdup_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vdup_lanep64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_poly64x1_t = vdup_lane_p64 (arg0_poly64x1_t, 0);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3b6b7ec312c6e2da4e5491dc9c38515266c4979a", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_np64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vdup_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vdup_np64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64_t arg0_poly64_t;\n+\n+  out_poly64x1_t = vdup_n_p64 (arg0_poly64_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bc5e08aa783486ff63be7580a891bd066c436d5a", "filename": "gcc/testsuite/gcc.target/arm/neon/vextQp64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvextQp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvextQp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvextQp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vextQp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vextQp64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x2_t arg0_poly64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  out_poly64x2_t = vextq_p64 (arg0_poly64x2_t, arg1_poly64x2_t, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vext\\.64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "aa1e91f59bbc898452beda6bf714a8404c7dc7a0", "filename": "gcc/testsuite/gcc.target/arm/neon/vextp64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvextp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvextp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvextp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vextp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vextp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  out_poly64x1_t = vext_p64 (arg0_poly64x1_t, arg1_poly64x1_t, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vext\\.64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f2b1b7a9e38cd3dd2568f1233f07d9c382ec78cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vget_highp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_highp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_highp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_highp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vget_highp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vget_highp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_poly64x1_t = vget_high_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "94cd3a8ab751433fc60bf067458387481406219b", "filename": "gcc/testsuite/gcc.target/arm/neon/vget_lowp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lowp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lowp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lowp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vget_lowp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vget_lowp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_poly64x1_t = vget_low_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "2d504c163ace00dbf3f21f7cd8480d7ae8520914", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1Q_dupp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_dupp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_dupp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_dupp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld1Q_dupp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1Q_dupp64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+\n+  out_poly64x2_t = vld1q_dup_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d19267a4ff83870b6493edcf09fa2ca0e8b396db", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1Q_lanep64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Q_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vld1Q_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1Q_lanep64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  out_poly64x2_t = vld1q_lane_p64 (0, arg1_poly64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "99ef8767321d9596a98a604c75ec5ad18223ea50", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1Qp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Qp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Qp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1Qp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld1Qp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1Qp64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+\n+  out_poly64x2_t = vld1q_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f2b05c5d1e332ef2bfda5e676b716731ed006f15", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1_dupp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_dupp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_dupp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_dupp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld1_dupp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1_dupp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+\n+  out_poly64x1_t = vld1_dup_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cf09f6cd6410022ac2c0a5b8c2c93f761364d898", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1_lanep64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vld1_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1_lanep64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  out_poly64x1_t = vld1_lane_p64 (0, arg1_poly64x1_t, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9f182d4419f9bd08be43bbb428fce15260892132", "filename": "gcc/testsuite/gcc.target/arm/neon/vld1p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld1p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld1p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld1p64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+\n+  out_poly64x1_t = vld1_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0531a732dea8d6c4b3b2728a73fe5f8814ffa397", "filename": "gcc/testsuite/gcc.target/arm/neon/vld2_dupp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2_dupp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2_dupp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2_dupp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld2_dupp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld2_dupp64 (void)\n+{\n+  poly64x1x2_t out_poly64x1x2_t;\n+\n+  out_poly64x1x2_t = vld2_dup_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0a39b37f01ab37562c332539129c98042f6a4973", "filename": "gcc/testsuite/gcc.target/arm/neon/vld2p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld2p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld2p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld2p64 (void)\n+{\n+  poly64x1x2_t out_poly64x1x2_t;\n+\n+  out_poly64x1x2_t = vld2_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "23bf88aa6d72a863d3d99a1601958b666df110b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vld3_dupp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3_dupp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3_dupp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3_dupp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld3_dupp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld3_dupp64 (void)\n+{\n+  poly64x1x3_t out_poly64x1x3_t;\n+\n+  out_poly64x1x3_t = vld3_dup_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cc7992892462f71857030a888bb0fed6c1124807", "filename": "gcc/testsuite/gcc.target/arm/neon/vld3p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld3p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld3p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld3p64 (void)\n+{\n+  poly64x1x3_t out_poly64x1x3_t;\n+\n+  out_poly64x1x3_t = vld3_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bb15964af0a6e888e9d5941e2d2a6b1f167f55aa", "filename": "gcc/testsuite/gcc.target/arm/neon/vld4_dupp64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4_dupp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4_dupp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4_dupp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld4_dupp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld4_dupp64 (void)\n+{\n+  poly64x1x4_t out_poly64x1x4_t;\n+\n+  out_poly64x1x4_t = vld4_dup_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b11fb93843292178b6b44995910cc389750145d7", "filename": "gcc/testsuite/gcc.target/arm/neon/vld4p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvld4p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vld4p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vld4p64 (void)\n+{\n+  poly64x1x4_t out_poly64x1x4_t;\n+\n+  out_poly64x1x4_t = vld4_p64 (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vld1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "91cac4df5c546d0fd42e5418abf451f3a4d89eb3", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQf32_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQf32_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQf32_p128 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_float32x4_t = vreinterpretq_f32_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "96909f677d74562587602b8164144e4afdaa51bb", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQf32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQf32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQf32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQf32_p64 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_float32x4_t = vreinterpretq_f32_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "aa7d2e7e7de142e6f2045faa93b9d6dc22b79d7d", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_f32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_f32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_f32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_f32 (void)\n+{\n+  poly128_t out_poly128_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_poly128_t = vreinterpretq_p128_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "94f2e9b4afa9815bad3612040afdfa24dbe2ea0a", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_p16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_p16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_p16 (void)\n+{\n+  poly128_t out_poly128_t;\n+  poly16x8_t arg0_poly16x8_t;\n+\n+  out_poly128_t = vreinterpretq_p128_p16 (arg0_poly16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d32007547e0216594f34001bc830125747031a35", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_p64 (void)\n+{\n+  poly128_t out_poly128_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_poly128_t = vreinterpretq_p128_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "112b0c6e3ccf374488e63cb034bcd231d8c742e7", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_p8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_p8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_p8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_p8 (void)\n+{\n+  poly128_t out_poly128_t;\n+  poly8x16_t arg0_poly8x16_t;\n+\n+  out_poly128_t = vreinterpretq_p128_p8 (arg0_poly8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4fa06b2382ba5ce49b2963eac7f8fc7c264d0d44", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_s16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_s16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_s16 (void)\n+{\n+  poly128_t out_poly128_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_poly128_t = vreinterpretq_p128_s16 (arg0_int16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5f17cb81309e86e80a7086b68ef44202adeac180", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_s32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_s32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_s32 (void)\n+{\n+  poly128_t out_poly128_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_poly128_t = vreinterpretq_p128_s32 (arg0_int32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9b83912b9798fc49337152c0a4c9e5d2c26a1f8e", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_s64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_s64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_s64 (void)\n+{\n+  poly128_t out_poly128_t;\n+  int64x2_t arg0_int64x2_t;\n+\n+  out_poly128_t = vreinterpretq_p128_s64 (arg0_int64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "49e8b74b45a7d15ffb4f88c8b535463c3478d911", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_s8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_s8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_s8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_s8 (void)\n+{\n+  poly128_t out_poly128_t;\n+  int8x16_t arg0_int8x16_t;\n+\n+  out_poly128_t = vreinterpretq_p128_s8 (arg0_int8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d47429aeb5d64f8bbf2b315a67e1ca9a36a87465", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_u16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_u16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_u16 (void)\n+{\n+  poly128_t out_poly128_t;\n+  uint16x8_t arg0_uint16x8_t;\n+\n+  out_poly128_t = vreinterpretq_p128_u16 (arg0_uint16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "57abf79a92e24ba697244f60af4d0b8a052972b0", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_u32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_u32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_u32 (void)\n+{\n+  poly128_t out_poly128_t;\n+  uint32x4_t arg0_uint32x4_t;\n+\n+  out_poly128_t = vreinterpretq_p128_u32 (arg0_uint32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4d04daaaa118fbdb57d8954d140e3bef85371f77", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_u64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_u64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_u64 (void)\n+{\n+  poly128_t out_poly128_t;\n+  uint64x2_t arg0_uint64x2_t;\n+\n+  out_poly128_t = vreinterpretq_p128_u64 (arg0_uint64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ba07bbc8ac3aaabbfdc532580d089f4bb64684a0", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp128_u8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp128_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp128_u8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp128_u8 (void)\n+{\n+  poly128_t out_poly128_t;\n+  uint8x16_t arg0_uint8x16_t;\n+\n+  out_poly128_t = vreinterpretq_p128_u8 (arg0_uint8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "27d0d0afb51a158b51b5c9314216a31c766a96fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp16_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp16_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp16_p128 (void)\n+{\n+  poly16x8_t out_poly16x8_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_poly16x8_t = vreinterpretq_p16_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a0a3aaff49e10a9110e5f1ca09ad0982e4b177a2", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp16_p64 (void)\n+{\n+  poly16x8_t out_poly16x8_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_poly16x8_t = vreinterpretq_p16_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9f9b1a4ea1f756acdea46d9fa256baac68e88e51", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_f32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_f32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_f32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_f32 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3f712951359ca3668854f7dd52342cfddf856b9d", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_p128 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "897b7cd9d00df3221978fdcd8d44e549093e8938", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_p16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_p16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_p16 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly16x8_t arg0_poly16x8_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_p16 (arg0_poly16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "772b268bf8aed66f788f802cf2828999d80bdae9", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_p8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_p8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_p8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_p8 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly8x16_t arg0_poly8x16_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_p8 (arg0_poly8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "29f3f6c1cdf67033e0395495b69e5e2e1d7854ce", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_s16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_s16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_s16 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_s16 (arg0_int16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "fae22f65ef29588b723fc380cb9c4799b21c2d22", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_s32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_s32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_s32 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_s32 (arg0_int32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8769bc8e6b73cd3bc6b4e988ebae18f8a3d0c7b3", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_s64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_s64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_s64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_s64 (arg0_int64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1163cc2b7c7f33cab51362600ec9333adf4ad1cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_s8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_s8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_s8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_s8 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  int8x16_t arg0_int8x16_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_s8 (arg0_int8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f2b53260e03c0f5659aa390bf435981f48bbe321", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_u16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_u16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_u16 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint16x8_t arg0_uint16x8_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_u16 (arg0_uint16x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6b6179ba41ff4b2d00acdc354aae0a9a3b13b347", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_u32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_u32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_u32 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint32x4_t arg0_uint32x4_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_u32 (arg0_uint32x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "655ffd4fafbfef38dfdce195221406f51277534b", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_u64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_u64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_u64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_u64 (arg0_uint64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "40b40dd11ddb6777647a3f007812df8b17cd5327", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp64_u8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp64_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp64_u8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp64_u8 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint8x16_t arg0_uint8x16_t;\n+\n+  out_poly64x2_t = vreinterpretq_p64_u8 (arg0_uint8x16_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b517a6fdfa691057d6e2a2cccc22a6ef39e5f150", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp8_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp8_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp8_p128 (void)\n+{\n+  poly8x16_t out_poly8x16_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_poly8x16_t = vreinterpretq_p8_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9e70b8a07563315c8077b28abe743cc2342feb30", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQp8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQp8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQp8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQp8_p64 (void)\n+{\n+  poly8x16_t out_poly8x16_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_poly8x16_t = vreinterpretq_p8_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "77bfe3882ad91cbf2c0aa45f616f9c9788f03bc5", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs16_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs16_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs16_p128 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_int16x8_t = vreinterpretq_s16_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "41890f32aad210e3deaff2b6b59cbbce323ee478", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs16_p64 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_int16x8_t = vreinterpretq_s16_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9a179ae3bebddf81deb0b5b549408baa51c22103", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs32_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs32_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs32_p128 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_int32x4_t = vreinterpretq_s32_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cc7ad95ea9d48484008b1fd2c03d7ad0b1b90cb9", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs32_p64 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_int32x4_t = vreinterpretq_s32_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "adc1b9bbf0cf0f32eaa2a9bbfc2a09f5c5ef46c3", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs64_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs64_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs64_p128 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_int64x2_t = vreinterpretq_s64_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "89ab9ccb4b299729f7c4f32a09fed9b12157b81c", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs64_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs64_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs64_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs64_p64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_int64x2_t = vreinterpretq_s64_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d94090068e31bead6133af6a1aa8ba02fb1e1ed3", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs8_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs8_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs8_p128 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_int8x16_t = vreinterpretq_s8_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a9adec38704f968e075db3a04afad60740c4b491", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQs8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQs8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQs8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQs8_p64 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_int8x16_t = vreinterpretq_s8_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "792609246c1c02b192cea7325064139fc0fc5326", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu16_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu16_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu16_p128 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_uint16x8_t = vreinterpretq_u16_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7a9b538f2327eca327cfce3afa645c5bdf232a44", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu16_p64 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_uint16x8_t = vreinterpretq_u16_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ce716b0ab1c3acaa36148d0d942a878dedb8a0ab", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu32_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu32_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu32_p128 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_uint32x4_t = vreinterpretq_u32_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a8b709e0298e1a655fb69ee0b303d2faed65c8fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu32_p64 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_uint32x4_t = vreinterpretq_u32_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "789973e0a272658f6f54537b72d147128a4543e0", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu64_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu64_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu64_p128 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_uint64x2_t = vreinterpretq_u64_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "38071503eaa10d8d535bf3e4983d26cbbc6e488a", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu64_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu64_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu64_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu64_p64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_uint64x2_t = vreinterpretq_u64_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "54a832cf41cb8a7bf358bbeaf4e141885e22044e", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu8_p128.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p128.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu8_p128' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu8_p128 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  poly128_t arg0_poly128_t;\n+\n+  out_uint8x16_t = vreinterpretq_u8_p128 (arg0_poly128_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3336e6c24e8404acb0535b80591057e3aa038a3c", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretQu8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvreinterpretQu8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretQu8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretQu8_p64 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  poly64x2_t arg0_poly64x2_t;\n+\n+  out_uint8x16_t = vreinterpretq_u8_p64 (arg0_poly64x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e9714658fc3815a8ccb15aeed3b65084b618a6cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretf32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretf32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretf32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretf32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretf32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretf32_p64 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_float32x2_t = vreinterpret_f32_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4cd6818db83ce8e1ad14c188c213d9e794c3281f", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp16_p64 (void)\n+{\n+  poly16x4_t out_poly16x4_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_poly16x4_t = vreinterpret_p16_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d9ecd6f88c890c40c54c391cadc0eed5e2c478a2", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_f32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_f32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_f32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_f32 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "db437279b5b0651c1eb5ad05ad4a864bc7efd348", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_p16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_p16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_p16 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly16x4_t arg0_poly16x4_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_p16 (arg0_poly16x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1fb0131d8d32bf99a7ccfdb763c44a3bcfbecefc", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_p8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_p8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_p8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_p8 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly8x8_t arg0_poly8x8_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_p8 (arg0_poly8x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "528db2d57fed0b7f4e953fac5f47e33fc48f4bd2", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_s16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_s16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_s16 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  int16x4_t arg0_int16x4_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_s16 (arg0_int16x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c6887d7e0893699b5216e7f3707c4b012bed8dc8", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_s32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_s32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_s32 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  int32x2_t arg0_int32x2_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_s32 (arg0_int32x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f2b041649033ad8f4c43e99f626d6984b8e26c01", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_s64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_s64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_s64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_s64 (arg0_int64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1866d19fb69d210fa4a836b99ec9ff1772219e67", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_s8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_s8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_s8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_s8 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  int8x8_t arg0_int8x8_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_s8 (arg0_int8x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7903ec26f382bc608468f2fc64800fd2f0dc0483", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_u16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u16.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_u16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_u16 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint16x4_t arg0_uint16x4_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_u16 (arg0_uint16x4_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3d8e9e40f3e946c42a409edeccf4d3316d6d17b5", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_u32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u32.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_u32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_u32 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint32x2_t arg0_uint32x2_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_u32 (arg0_uint32x2_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "caa0464aac10b870b060a46ceeb6e6c0bf1ed04c", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_u64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_u64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_u64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_u64 (arg0_uint64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "47e1dfa5f4ae4dd2515d34cf53bc383cc88cd82c", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp64_u8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp64_u8.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp64_u8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp64_u8 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint8x8_t arg0_uint8x8_t;\n+\n+  out_poly64x1_t = vreinterpret_p64_u8 (arg0_uint8x8_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f5eff21abb9ca0a07dc276eb5718ad19cdfd2574", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretp8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretp8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretp8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretp8_p64 (void)\n+{\n+  poly8x8_t out_poly8x8_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_poly8x8_t = vreinterpret_p8_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "127865d169b31e46cbb96257dbf1275b32d386b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterprets16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterprets16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterprets16_p64 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_int16x4_t = vreinterpret_s16_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f8be30b92463b08b09f73c63ccafa1eea5ac9f32", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterprets32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterprets32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterprets32_p64 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_int32x2_t = vreinterpret_s32_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5f7c17bd33e522fd3958c906810d0b4067a8da50", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterprets64_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets64_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets64_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets64_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterprets64_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterprets64_p64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_int64x1_t = vreinterpret_s64_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8345963ef3ab2ba6a8448e631550f9f3b87f9e56", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterprets8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterprets8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterprets8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterprets8_p64 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_int8x8_t = vreinterpret_s8_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "34f920bbd7afecddaddc6f66eef3421994af2d20", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretu16_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu16_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu16_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu16_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretu16_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretu16_p64 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_uint16x4_t = vreinterpret_u16_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b5f24fbc4b9164718409988f4a1d85089cc773ce", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretu32_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu32_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu32_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu32_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretu32_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretu32_p64 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_uint32x2_t = vreinterpret_u32_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "741912a4ebcd38b9c580c3c4c15724ccc7664032", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretu64_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu64_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu64_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu64_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretu64_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretu64_p64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_uint64x1_t = vreinterpret_u64_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "907b67c157d1c4e5544c59163d840f64bb629686", "filename": "gcc/testsuite/gcc.target/arm/neon/vreinterpretu8_p64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu8_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu8_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvreinterpretu8_p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vreinterpretu8_p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vreinterpretu8_p64 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  poly64x1_t arg0_poly64x1_t;\n+\n+  out_uint8x8_t = vreinterpret_u8_p64 (arg0_poly64x1_t);\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cbb47285e46fa53370c57fc3233764d978b73a2b", "filename": "gcc/testsuite/gcc.target/arm/neon/vsliQ_np64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsliQ_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsliQ_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsliQ_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsliQ_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vsliQ_np64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x2_t arg0_poly64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  out_poly64x2_t = vsliq_n_p64 (arg0_poly64x2_t, arg1_poly64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli\\.64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "801add49be1bc3fe2c82412824fc7718a74ce1b7", "filename": "gcc/testsuite/gcc.target/arm/neon/vsli_np64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsli_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsli_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsli_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsli_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vsli_np64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  out_poly64x1_t = vsli_n_p64 (arg0_poly64x1_t, arg1_poly64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vsli\\.64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d2e48165aa3eda09cf2b882e10d64c7b7d2edb2a", "filename": "gcc/testsuite/gcc.target/arm/neon/vsriQ_np64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsriQ_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsriQ_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvsriQ_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsriQ_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vsriQ_np64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  poly64x2_t arg0_poly64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  out_poly64x2_t = vsriq_n_p64 (arg0_poly64x2_t, arg1_poly64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri\\.64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0abffc2e0e55261ef54a1139b7c7b715671befb4", "filename": "gcc/testsuite/gcc.target/arm/neon/vsri_np64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsri_np64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsri_np64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvsri_np64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vsri_np64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vsri_np64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  poly64x1_t arg0_poly64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  out_poly64x1_t = vsri_n_p64 (arg0_poly64x1_t, arg1_poly64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vsri\\.64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "74a198baf81b7f52b019c18c28720991f7e922d7", "filename": "gcc/testsuite/gcc.target/arm/neon/vst1Q_lanep64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Q_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Q_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Q_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst1Q_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst1Q_lanep64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  vst1q_lane_p64 (arg0_poly64_t, arg1_poly64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7d1e020f111d4398811b24fb0073cfbc5024816b", "filename": "gcc/testsuite/gcc.target/arm/neon/vst1Qp64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Qp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Qp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1Qp64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst1Qp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst1Qp64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x2_t arg1_poly64x2_t;\n+\n+  vst1q_p64 (arg0_poly64_t, arg1_poly64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f8c70c35952b4b85838f17824f10de36b7c72ab8", "filename": "gcc/testsuite/gcc.target/arm/neon/vst1_lanep64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1_lanep64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1_lanep64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1_lanep64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst1_lanep64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst1_lanep64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  vst1_lane_p64 (arg0_poly64_t, arg1_poly64x1_t, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7329fba9d0cae819bc48a67ad94ca18f17f3305e", "filename": "gcc/testsuite/gcc.target/arm/neon/vst1p64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst1p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst1p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst1p64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x1_t arg1_poly64x1_t;\n+\n+  vst1_p64 (arg0_poly64_t, arg1_poly64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+((\\\\\\{\\[dD\\]\\[0-9\\]+\\\\\\})|(\\[dD\\]\\[0-9\\]+)), \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3ccaa5464f62eac00ec7d7506796f787b29e14cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vst2p64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst2p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst2p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst2p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst2p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst2p64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x1x2_t arg1_poly64x1x2_t;\n+\n+  vst2_p64 (arg0_poly64_t, arg1_poly64x1x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "73ced95448fa7ed3cbbc1640b59d58b2c64a0662", "filename": "gcc/testsuite/gcc.target/arm/neon/vst3p64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst3p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst3p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst3p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst3p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst3p64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x1x3_t arg1_poly64x1x3_t;\n+\n+  vst3_p64 (arg0_poly64_t, arg1_poly64x1x3_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b9f7b168d2ec2be53b562d43862a83f9e25828b2", "filename": "gcc/testsuite/gcc.target/arm/neon/vst4p64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst4p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst4p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvst4p64.c?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vst4p64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vst4p64 (void)\n+{\n+  poly64_t *arg0_poly64_t;\n+  poly64x1x4_t arg1_poly64x1x4_t;\n+\n+  vst4_p64 (arg0_poly64_t, arg1_poly64x1x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vst1\\.64\\[ \t\\]+\\\\\\{((\\[dD\\]\\[0-9\\]+-\\[dD\\]\\[0-9\\]+)|(\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+))\\\\\\}, \\\\\\[\\[rR\\]\\[0-9\\]+\\(:\\[0-9\\]+\\)?\\\\\\]!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "af80a6980755789f89fe77c08194a547b3d64f75", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4bcdba7c19299844f11c15da6f93116b0b180f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ed4bcdba7c19299844f11c15da6f93116b0b180f", "patch": "@@ -2299,6 +2299,30 @@ proc check_effective_target_arm_unaligned { } {\n     }]\n }\n \n+# Return 1 if this is an ARM target supporting -mfpu=crypto-neon-fp-armv8\n+# -mfloat-abi=softfp.\n+proc check_effective_target_arm_crypto_ok {} {\n+    if { [check_effective_target_arm32] } {\n+\treturn [check_no_compiler_messages arm_crypto_ok object {\n+\t  int foo (void)\n+\t  {\n+\t     __asm__ volatile (\"aese.8 q0, q0\");\n+\t     return 0;\n+\t  }\n+\t} \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+# Add options for crypto extensions.\n+proc add_options_for_arm_crypto { flags } {\n+    if { ! [check_effective_target_arm_crypto_ok] } {\n+        return \"$flags\"\n+    }\n+    return \"$flags -mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"\n+}\n+\n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.  Similarly, if a -mfpu option already enables"}]}