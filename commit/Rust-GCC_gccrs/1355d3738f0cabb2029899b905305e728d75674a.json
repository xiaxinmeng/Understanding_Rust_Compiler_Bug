{"sha": "1355d3738f0cabb2029899b905305e728d75674a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1NWQzNzM4ZjBjYWJiMjAyOTg5OWI5MDUzMDVlNzI4ZDc1Njc0YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:25:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:25:54Z"}, "message": "[multiple changes]\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb: Put back with/use for Namet.\n\t(Get_Pragma): New name (wi new spec) for Find_Pragma.\n\t* sem_ch6.adb: Change name Find_Pragma to Get_Pragma with\n\tdifferent interface.\n\n2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Is_Visible_Component): In an instance all\n\tcomponents are visible.\n\nFrom-SVN: r198286", "tree": {"sha": "32cb7740d8c93e432c2a1259eecfabae111e3592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32cb7740d8c93e432c2a1259eecfabae111e3592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1355d3738f0cabb2029899b905305e728d75674a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1355d3738f0cabb2029899b905305e728d75674a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1355d3738f0cabb2029899b905305e728d75674a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1355d3738f0cabb2029899b905305e728d75674a/comments", "author": null, "committer": null, "parents": [{"sha": "7271429c1a93bfca0e8b7e036dcd6303e05d817e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7271429c1a93bfca0e8b7e036dcd6303e05d817e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7271429c1a93bfca0e8b7e036dcd6303e05d817e"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "cf49b9df91fd488b885a32bef61c667c49eeb223", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1355d3738f0cabb2029899b905305e728d75674a", "patch": "@@ -1,3 +1,15 @@\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: Put back with/use for Namet.\n+\t(Get_Pragma): New name (wi new spec) for Find_Pragma.\n+\t* sem_ch6.adb: Change name Find_Pragma to Get_Pragma with\n+\tdifferent interface.\n+\n+2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Visible_Component): In an instance all\n+\tcomponents are visible.\n+\n 2013-04-25  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-rbtgbo.adb, a-crbtgo.adb (Generic_Equal): do not test for"}, {"sha": "31a90e3542c3640144dfe2f5671617fe4772a176", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=1355d3738f0cabb2029899b905305e728d75674a", "patch": "@@ -33,6 +33,7 @@ pragma Style_Checks (All_Checks);\n --  Turn off subprogram ordering, not used for this unit\n \n with Atree;   use Atree;\n+with Namet;   use Namet;\n with Nlists;  use Nlists;\n with Output;  use Output;\n with Sinfo;   use Sinfo;\n@@ -6101,26 +6102,6 @@ package body Einfo is\n       return Etype (Discrete_Subtype_Definition (Parent (Id)));\n    end Entry_Index_Type;\n \n-   -----------------\n-   -- Find_Pragma --\n-   -----------------\n-\n-   function Find_Pragma (Id : Entity_Id; Name : Name_Id) return Node_Id is\n-      Item : Node_Id;\n-\n-   begin\n-      Item := First_Rep_Item (Id);\n-      while Present (Item) loop\n-         if Nkind (Item) = N_Pragma and then Pragma_Name (Item) = Name then\n-            return Item;\n-         end if;\n-\n-         Item := Next_Rep_Item (Item);\n-      end loop;\n-\n-      return Empty;\n-   end Find_Pragma;\n-\n    ---------------------\n    -- First_Component --\n    ---------------------\n@@ -6264,6 +6245,29 @@ package body Einfo is\n       end if;\n    end Get_Full_View;\n \n+   ----------------\n+   -- Get_Pragma --\n+   ----------------\n+\n+   function Get_Pragma (E  : Entity_Id; Id : Pragma_Id) return Node_Id\n+   is\n+      N : Node_Id;\n+\n+   begin\n+      N := First_Rep_Item (E);\n+      while Present (N) loop\n+         if Nkind (N) = N_Pragma\n+           and then Get_Pragma_Id (Pragma_Name (N)) = Id\n+         then\n+            return N;\n+         else\n+            Next_Rep_Item (N);\n+         end if;\n+      end loop;\n+\n+      return Empty;\n+   end Get_Pragma;\n+\n    --------------------------------------\n    -- Get_Record_Representation_Clause --\n    --------------------------------------"}, {"sha": "a3d05d8c8a0b26246cec85dab32639550fb5ec0e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=1355d3738f0cabb2029899b905305e728d75674a", "patch": "@@ -29,7 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Namet;  use Namet;\n with Snames; use Snames;\n with Types;  use Types;\n with Uintp;  use Uintp;\n@@ -7354,11 +7353,6 @@ package Einfo is\n    --  expression is deferred to the freeze point. For further details see\n    --  Sem_Ch13.Analyze_Aspect_Specifications.\n \n-   function Find_Pragma (Id : Entity_Id; Name : Name_Id) return Node_Id;\n-   --  Given entity Id and pragma name Name, attempt to find the corresponding\n-   --  pragma in Id's chain of representation items. The function returns Empty\n-   --  if no such pragma has been found.\n-\n    function Get_Attribute_Definition_Clause\n      (E  : Entity_Id;\n       Id : Attribute_Id) return Node_Id;\n@@ -7367,6 +7361,11 @@ package Einfo is\n    --  value returned is the N_Attribute_Definition_Clause node, otherwise\n    --  Empty is returned.\n \n+   function Get_Pragma (E : Entity_Id; Id : Pragma_Id) return Node_Id;\n+   --  Searches the Rep_Item chain for a given entity E, for an instance of\n+   --  a pragma with the given pragma Id. If found, the value returned is the\n+   --  N_Pragma node, otherwise Empty is returned.\n+\n    function Get_Record_Representation_Clause (E : Entity_Id) return Node_Id;\n    --  Searches the Rep_Item chain for a given entity E, for a record\n    --  representation clause, and if found, returns it. Returns Empty"}, {"sha": "dc9c4dfd9ba597168c413e1d5dbced85bd0a2fdc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1355d3738f0cabb2029899b905305e728d75674a", "patch": "@@ -1230,11 +1230,11 @@ package body Sem_Ch3 is\n \n       Check_For_Premature_Usage (T_Def);\n \n-      --  The return type and/or any parameter type may be incomplete. Mark\n-      --  the subprogram_type as depending on the incomplete type, so that\n-      --  it can be updated when the full type declaration is seen. This\n-      --  only applies to incomplete types declared in some enclosing scope,\n-      --  not to limited views from other packages.\n+      --  The return type and/or any parameter type may be incomplete. Mark the\n+      --  subprogram_type as depending on the incomplete type, so that it can\n+      --  be updated when the full type declaration is seen. This only applies\n+      --  to incomplete types declared in some enclosing scope, not to limited\n+      --  views from other packages.\n \n       if Present (Formals) then\n          Formal := First_Formal (Desig_Type);\n@@ -1256,9 +1256,9 @@ package body Sem_Ch3 is\n          end loop;\n       end if;\n \n-      --  If the return type is incomplete, this is legal as long as the\n-      --  type is declared in the current scope and will be completed in\n-      --  it (rather than being part of limited view).\n+      --  If the return type is incomplete, this is legal as long as the type\n+      --  is declared in the current scope and will be completed in it (rather\n+      --  than being part of limited view).\n \n       if Ekind (Etype (Desig_Type)) = E_Incomplete_Type\n         and then not Has_Delayed_Freeze (Desig_Type)\n@@ -1331,9 +1331,9 @@ package body Sem_Ch3 is\n       if Base_Type (Full_Desig) = T then\n          Error_Msg_N (\"access type cannot designate itself\", S);\n \n-      --  In Ada 2005, the type may have a limited view through some unit\n-      --  in its own context, allowing the following circularity that cannot\n-      --  be detected earlier\n+      --  In Ada 2005, the type may have a limited view through some unit in\n+      --  its own context, allowing the following circularity that cannot be\n+      --  detected earlier\n \n       elsif Is_Class_Wide_Type (Full_Desig)\n         and then Etype (Full_Desig) = T\n@@ -1348,8 +1348,8 @@ package body Sem_Ch3 is\n \n       Set_Etype (T, T);\n \n-      --  If the type has appeared already in a with_type clause, it is\n-      --  frozen and the pointer size is already set. Else, initialize.\n+      --  If the type has appeared already in a with_type clause, it is frozen\n+      --  and the pointer size is already set. Else, initialize.\n \n       if not From_With_Type (T) then\n          Init_Size_Align (T);\n@@ -16468,15 +16468,16 @@ package body Sem_Ch3 is\n          Type_Scope     := Scope (Base_Type (Scope (C)));\n       end if;\n \n-      --  For an untagged type derived from a private type, the only\n-      --  visible components are new discriminants.\n+      --  For an untagged type derived from a private type, the only visible\n+      --  components are new discriminants. In an instance all components are\n+      --  visible (see Analyze_Selected_Component).\n \n       if not Is_Tagged_Type (Original_Scope) then\n          return not Has_Private_Ancestor (Original_Scope)\n-            or else In_Open_Scopes (Scope (Original_Scope))\n-            or else\n-              (Ekind (Original_Comp) = E_Discriminant\n-                 and then Original_Scope = Type_Scope);\n+           or else In_Open_Scopes (Scope (Original_Scope))\n+           or else In_Instance\n+           or else (Ekind (Original_Comp) = E_Discriminant\n+                     and then Original_Scope = Type_Scope);\n \n       --  If it is _Parent or _Tag, there is no visibility issue\n \n@@ -16545,9 +16546,9 @@ package body Sem_Ch3 is\n                 and then Is_Local_Type (Type_Scope);\n          end if;\n \n-      --  There is another weird way in which a component may be invisible\n-      --  when the private and the full view are not derived from the same\n-      --  ancestor. Here is an example :\n+      --  There is another weird way in which a component may be invisible when\n+      --  the private and the full view are not derived from the same ancestor.\n+      --  Here is an example :\n \n       --       type A1 is tagged      record F1 : integer; end record;\n       --       type A2 is new A1 with record F2 : integer; end record;"}, {"sha": "3d709cf2cbeb5f6f2aee51ac5a32ee7e14085fde", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355d3738f0cabb2029899b905305e728d75674a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1355d3738f0cabb2029899b905305e728d75674a", "patch": "@@ -11908,9 +11908,13 @@ package body Sem_Ch6 is\n          --  because the input type may lack aspect/pragma predicate and simply\n          --  inherit those from its ancestor.\n \n+         --  Note that predicate pragmas include all three cases of predicate\n+         --  aspects (Predicate, Dynamic_Predicate, Static_Predicate), so this\n+         --  routine checks for all three cases.\n+\n          Anc := Typ;\n          while Present (Anc) loop\n-            Pred := Find_Pragma (Anc, Name_Predicate);\n+            Pred := Get_Pragma (Anc, Pragma_Predicate);\n \n             if Present (Pred) and then not Is_Ignored (Pred) then\n                return True;"}]}