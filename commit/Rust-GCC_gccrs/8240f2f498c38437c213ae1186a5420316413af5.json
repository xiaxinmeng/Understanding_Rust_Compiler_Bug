{"sha": "8240f2f498c38437c213ae1186a5420316413af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0MGYyZjQ5OGMzODQzN2MyMTNhZTExODZhNTQyMDMxNjQxM2FmNQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-07-30T08:23:38Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-07-30T08:42:01Z"}, "message": "nvptx: Provide vec_set<mode> and vec_extract<vmode><mode> patterns\n\nThis patch provides standard vec_extract and vec_set patterns to the\nnvptx backend, to extract an element from a PTX vector and set an\nelement of a PTX vector respectively.  PTX vectors (I hesitate to\ncall them SIMD vectors) may contain up to four elements, so vector\nmodes up to size four are supported by this patch even though the\nnvptx backend currently only allows V2SI and V2DI, i.e. two out\nof the ten possible vector modes.\n\nAs an example of the improvement, the following C function:\n\ntypedef int __v2si __attribute__((__vector_size__(8)));\nint foo (__v2si arg) { return arg[0]+arg[1]; }\n\npreviously generated this code using a shift:\n\n  mov.u64     %r25, %ar0;\n  ld.v2.u32   %r26, [%r25];\n  mov.b64     %r28, %r26;\n  shr.s64     %r30, %r28, 32;\n  cvt.u32.u32 %r31, %r26.x;\n  cvt.u32.u64 %r32, %r30;\n  add.u32     %value, %r31, %r32;\n\nbut with this patch now generates:\n\n  mov.u64   %r25, %ar0;\n  ld.v2.u32 %r26, [%r25];\n  mov.u32   %r28, %r26.x;\n  mov.u32   %r29, %r26.y;\n  add.u32   %value, %r28, %r29;\n\nI've implemented these getters and setters as their own instructions\ninstead of attempting the much more intrusive patch of changing the\nbackend's definition of register_operand.  Given the limited utility\nof PTX vectors, I'm not convinced that attempting to support them as\noperands in every instruction would be worth the effort involved.\n\nThis patch has been tested on nvptx-none hosted on x86_64-pc-linux-gnu\nwith \"make\" and \"make check\" with no new regressions.\n\n2020-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.md (nvptx_vector_index_operand): New predicate.\n\t(VECELEM): New mode attribute for a vector's uppercase element mode.\n\t(Vecelem): New mode attribute for a vector's lowercase element mode.\n\t(*vec_set<mode>_0, *vec_set<mode>_1, *vec_set<mode>_2)\n\t(*vec_set<mode>_3): New instructions.\n\t(vec_set<mode>): New expander to generate one of the above insns.\n\t(vec_extract<mode><Vecelem>): New instruction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/v2si-vec-set-extract.c: New test.", "tree": {"sha": "e69748996cbad309d4a6497a0d3381f0ab676c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69748996cbad309d4a6497a0d3381f0ab676c57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8240f2f498c38437c213ae1186a5420316413af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8240f2f498c38437c213ae1186a5420316413af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8240f2f498c38437c213ae1186a5420316413af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8240f2f498c38437c213ae1186a5420316413af5/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc65aba7a4725d1b464c8c64a5f739ee910e8943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc65aba7a4725d1b464c8c64a5f739ee910e8943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc65aba7a4725d1b464c8c64a5f739ee910e8943"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "c23edcf34bf6148bcf22269885ea364153de96c1", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8240f2f498c38437c213ae1186a5420316413af5/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8240f2f498c38437c213ae1186a5420316413af5/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=8240f2f498c38437c213ae1186a5420316413af5", "patch": "@@ -118,6 +118,10 @@\n (define_predicate \"nvptx_float_comparison_operator\"\n   (match_code \"eq,ne,le,ge,lt,gt,uneq,unle,unge,unlt,ungt,unordered,ordered\"))\n \n+(define_predicate \"nvptx_vector_index_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) < 4\")))\n+\n ;; Test for a valid operand for a call instruction.\n (define_predicate \"call_insn_operand\"\n   (match_code \"symbol_ref,reg\")\n@@ -194,6 +198,10 @@\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n (define_mode_iterator P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n \n+;; Define element mode for each vector mode.\n+(define_mode_attr VECELEM [(V2SI \"SI\") (V2DI \"DI\")])\n+(define_mode_attr Vecelem [(V2SI \"si\") (V2DI \"di\")])\n+\n ;; We should get away with not defining memory alternatives, since we don't\n ;; get variables in this mode and pseudos are never spilled.\n (define_insn \"movbi\"\n@@ -1067,6 +1075,78 @@\n   \"\"\n   \"%.\\\\tcvt<FPINT2:fpint2_roundingmode>.s%T0%t1\\\\t%0, %1;\")\n \n+;; Vector operations\n+\n+(define_insn \"*vec_set<mode>_0\"\n+  [(set (match_operand:VECIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(vec_merge:VECIM\n+\t  (vec_duplicate:VECIM\n+\t    (match_operand:<VECELEM> 1 \"nvptx_register_operand\" \"R\"))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"\"\n+  \"%.\\\\tmov%t1\\\\t%0.x, %1;\")\n+\n+(define_insn \"*vec_set<mode>_1\"\n+  [(set (match_operand:VECIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(vec_merge:VECIM\n+\t  (vec_duplicate:VECIM\n+\t    (match_operand:<VECELEM> 1 \"nvptx_register_operand\" \"R\"))\n+\t  (match_dup 0)\n+\t  (const_int 2)))]\n+  \"\"\n+  \"%.\\\\tmov%t1\\\\t%0.y, %1;\")\n+\n+(define_insn \"*vec_set<mode>_2\"\n+  [(set (match_operand:VECIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(vec_merge:VECIM\n+\t  (vec_duplicate:VECIM\n+\t    (match_operand:<VECELEM> 1 \"nvptx_register_operand\" \"R\"))\n+\t  (match_dup 0)\n+\t  (const_int 4)))]\n+  \"\"\n+  \"%.\\\\tmov%t1\\\\t%0.z, %1;\")\n+\n+(define_insn \"*vec_set<mode>_3\"\n+  [(set (match_operand:VECIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(vec_merge:VECIM\n+\t  (vec_duplicate:VECIM\n+\t    (match_operand:<VECELEM> 1 \"nvptx_register_operand\" \"R\"))\n+\t  (match_dup 0)\n+\t  (const_int 8)))]\n+  \"\"\n+  \"%.\\\\tmov%t1\\\\t%0.w, %1;\")\n+\n+(define_expand \"vec_set<mode>\"\n+  [(match_operand:VECIM 0 \"nvptx_register_operand\")\n+   (match_operand:<VECELEM> 1 \"nvptx_register_operand\")\n+   (match_operand:SI 2 \"nvptx_vector_index_operand\")]\n+  \"\"\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  int mask = 1 << INTVAL (operands[2]);\n+  rtx tmp = gen_rtx_VEC_DUPLICATE (mode, operands[1]);\n+  tmp = gen_rtx_VEC_MERGE (mode, tmp, operands[0], GEN_INT (mask));\n+  emit_insn (gen_rtx_SET (operands[0], tmp));\n+  DONE;\n+})\n+\n+(define_insn \"vec_extract<mode><Vecelem>\"\n+  [(set (match_operand:<VECELEM> 0 \"nvptx_register_operand\" \"=R\")\n+\t(vec_select:<VECELEM>\n+\t  (match_operand:VECIM 1 \"nvptx_register_operand\" \"R\")\n+\t  (parallel [(match_operand:SI 2 \"nvptx_vector_index_operand\" \"\")])))]\n+  \"\"\n+{\n+  static const char *const asms[4] = {\n+    \"%.\\\\tmov%t0\\\\t%0, %1.x;\",\n+    \"%.\\\\tmov%t0\\\\t%0, %1.y;\",\n+    \"%.\\\\tmov%t0\\\\t%0, %1.z;\",\n+    \"%.\\\\tmov%t0\\\\t%0, %1.w;\"\n+  };\n+  return asms[INTVAL (operands[2])];\n+})\n+\n ;; Miscellaneous\n \n (define_insn \"nop\""}, {"sha": "a0709e50718a34a5380ea4e1943e012aa1119670", "filename": "gcc/testsuite/gcc.target/nvptx/v2si-vec-set-extract.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8240f2f498c38437c213ae1186a5420316413af5/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-vec-set-extract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8240f2f498c38437c213ae1186a5420316413af5/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-vec-set-extract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-vec-set-extract.c?ref=8240f2f498c38437c213ae1186a5420316413af5", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+typedef int __v2si __attribute__((__vector_size__(8)));\n+\n+int\n+foo (__v2si arg)\n+{\n+  return arg[0] + arg[1];\n+}\n+\n+__v2si\n+foo2 (unsigned int a, unsigned int b)\n+{\n+  __v2si res;\n+  res[0] = a;\n+  res[1] = b;\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler \"mov.u32.*\\\\.x;\" } } */\n+/* { dg-final { scan-assembler \"mov.u32.*\\\\.y;\" } } *\n+\n+/* { dg-final { scan-assembler \"mov.u32\\[\\t\\]%r\\[0-9\\]\\[0-9\\]*\\\\.x, \" } } */\n+/* { dg-final { scan-assembler \"mov.u32\\[\\t\\]%r\\[0-9\\]\\[0-9\\]*\\\\.y, \" } } */"}]}