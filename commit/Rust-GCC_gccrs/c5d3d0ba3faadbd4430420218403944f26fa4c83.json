{"sha": "c5d3d0ba3faadbd4430420218403944f26fa4c83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVkM2QwYmEzZmFhZGJkNDQzMDQyMDIxODQwMzk0NGYyNmZhNGM4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-03T20:52:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-03T20:52:21Z"}, "message": "re PR c++/41876 (Parse problems with catch)\n\n\tPR c++/41876\n\t* parser.c (cp_parser_type_specifier_seq): Rename is_condition to\n\tis_declaration.\n\t(cp_parser_exception_declaration): Pass true.\n\t(cp_parser_omp_for_loop): Likewise.\n\nFrom-SVN: r153864", "tree": {"sha": "9af4ad6eba228c9379f404da1b013ff89c43b9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9af4ad6eba228c9379f404da1b013ff89c43b9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5d3d0ba3faadbd4430420218403944f26fa4c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d3d0ba3faadbd4430420218403944f26fa4c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d3d0ba3faadbd4430420218403944f26fa4c83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d3d0ba3faadbd4430420218403944f26fa4c83/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa9b756937a80e557f1c983d37ce1423c3afc2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9b756937a80e557f1c983d37ce1423c3afc2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9b756937a80e557f1c983d37ce1423c3afc2b2"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "21adec98ceb9307ea26fe36fb24319a8bffe09e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5d3d0ba3faadbd4430420218403944f26fa4c83", "patch": "@@ -1,5 +1,11 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/41876\n+\t* parser.c (cp_parser_type_specifier_seq): Rename is_condition to\n+\tis_declaration.\n+\t(cp_parser_exception_declaration): Pass true.\n+\t(cp_parser_omp_for_loop): Likewise.\n+\n \tPR c++/41927\n \t* typeck.c (build_x_binary_op): Don't do warn_parentheses\n \tif we're in a SFINAE context."}, {"sha": "28fcabc313d726ba69e2d30a752ed2e9f1a77434", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c5d3d0ba3faadbd4430420218403944f26fa4c83", "patch": "@@ -5803,7 +5803,7 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n   parser->type_definition_forbidden_message\n     = \"types may not be defined in a new-type-id\";\n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifier_seq);\n   /* Restore the old message.  */\n@@ -8049,7 +8049,7 @@ cp_parser_condition (cp_parser* parser)\n   parser->type_definition_forbidden_message\n     = \"types may not be defined in conditions\";\n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_condition==*/true,\n+  cp_parser_type_specifier_seq (parser, /*is_declaration==*/true,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* Restore the saved message.  */\n@@ -9691,7 +9691,7 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   /* Parse the attributes.  */\n   attributes = cp_parser_attributes_opt (parser);\n   /* Parse the type-specifiers.  */\n-  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* If that didn't work, stop.  */\n@@ -12561,7 +12561,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n       cp_lexer_consume_token (parser->lexer);\n \n       /* Parse the type-specifier-seq.  */\n-      cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+      cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\t    /*is_trailing_return=*/false,\n                                     &type_specifiers);\n \n@@ -14531,7 +14531,7 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n   cp_declarator *abstract_declarator;\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n \t\t\t\tis_trailing_return,\n \t\t\t\t&type_specifier_seq);\n   if (type_specifier_seq.type == error_mark_node)\n@@ -14593,8 +14593,8 @@ static tree cp_parser_trailing_type_id (cp_parser *parser)\n    type-specifier-seq:\n      attributes type-specifier-seq [opt]\n \n-   If IS_CONDITION is true, we are at the start of a \"condition\",\n-   e.g., we've just seen \"if (\".\n+   If IS_DECLARATION is true, we are at the start of a \"condition\" or\n+   exception-declaration, so we might be followed by a declarator-id.\n \n    If IS_TRAILING_RETURN is true, we are in a trailing-return-type,\n    i.e. we've just seen \"->\".\n@@ -14603,7 +14603,7 @@ static tree cp_parser_trailing_type_id (cp_parser *parser)\n \n static void\n cp_parser_type_specifier_seq (cp_parser* parser,\n-\t\t\t      bool is_condition,\n+\t\t\t      bool is_declaration,\n \t\t\t      bool is_trailing_return,\n \t\t\t      cp_decl_specifier_seq *type_specifier_seq)\n {\n@@ -14679,7 +14679,7 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n \t would be clearer just to allow a decl-specifier-seq here, and\n \t then add a semantic restriction that if any decl-specifiers\n \t that are not type-specifiers appear, the program is invalid.  */\n-      if (is_condition && !is_cv_qualifier)\n+      if (is_declaration && !is_cv_qualifier)\n \tflags |= CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES;\n     }\n \n@@ -17330,7 +17330,7 @@ cp_parser_exception_declaration (cp_parser* parser)\n     = \"types may not be defined in exception-declarations\";\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+  cp_parser_type_specifier_seq (parser, /*is_declaration=*/true,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* If it's a `)', then there is no declarator.  */\n@@ -22104,7 +22104,7 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t     cp_parser_condition, from whence the bulk of this is copied.  */\n \n \t  cp_parser_parse_tentatively (parser);\n-\t  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t  cp_parser_type_specifier_seq (parser, /*is_declaration=*/true,\n \t\t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t\t&type_specifiers);\n \t  if (cp_parser_parse_definitely (parser))"}, {"sha": "30140903d6789804659af318cae7df6e386302ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5d3d0ba3faadbd4430420218403944f26fa4c83", "patch": "@@ -1,5 +1,8 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/41876\n+\t* g++.dg/parse/eh-decl.C: New.\n+\n \tPR c++/41927\n \t* g++.dg/template/sfinae16.C: New.\n "}, {"sha": "1c72fd39f554aebb28b9a87f296d71ed15f7e4bf", "filename": "gcc/testsuite/g++.dg/parse/eh-decl.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Feh-decl.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5d3d0ba3faadbd4430420218403944f26fa4c83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Feh-decl.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Feh-decl.C?ref=c5d3d0ba3faadbd4430420218403944f26fa4c83", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/41876\n+\n+struct A;\n+\n+void foo()\n+{\n+  try {} catch(int A) {}\n+}"}]}