{"sha": "9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4ZmYyZjYzYmUwZWM4MWYyZDkwZGE4NGVjOGNkOGU4MDBkYmZkNA==", "commit": {"author": {"name": "Eelis van der Weegen", "email": "eelis@eelis.net", "date": "2016-10-21T15:55:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-21T15:55:07Z"}, "message": "Optimize RNG use in std::sample selection sampling\n\n2016-10-21  Eelis van der Weegen  <eelis@eelis.net>\n\n\t* include/bits/stl_algo.h (__gen_two_uniform_ints): Move logic out\n\tof shuffle into new function.\n\t(shuffle): Call __gen_two_uniform_ints.\n\t(__sample<ForwardIterator, OutputIterator, Cat, Size, URBG>): Use\n\t__gen_two_uniform_ints and perform two samples at a time.\n\nFrom-SVN: r241414", "tree": {"sha": "49752c9df56fb28a1125efdb671cd7dd99f1aa2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49752c9df56fb28a1125efdb671cd7dd99f1aa2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4/comments", "author": {"login": "Eelis", "id": 22357, "node_id": "MDQ6VXNlcjIyMzU3", "avatar_url": "https://avatars.githubusercontent.com/u/22357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eelis", "html_url": "https://github.com/Eelis", "followers_url": "https://api.github.com/users/Eelis/followers", "following_url": "https://api.github.com/users/Eelis/following{/other_user}", "gists_url": "https://api.github.com/users/Eelis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eelis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eelis/subscriptions", "organizations_url": "https://api.github.com/users/Eelis/orgs", "repos_url": "https://api.github.com/users/Eelis/repos", "events_url": "https://api.github.com/users/Eelis/events{/privacy}", "received_events_url": "https://api.github.com/users/Eelis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f309637224d1f83a0649f66ae961df7a96a980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f309637224d1f83a0649f66ae961df7a96a980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f309637224d1f83a0649f66ae961df7a96a980"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "fef7aa956f837d867db66ef49a5ca511bd35fccd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "patch": "@@ -1,3 +1,11 @@\n+2016-10-21  Eelis van der Weegen  <eelis@eelis.net>\n+\n+\t* include/bits/stl_algo.h (__gen_two_uniform_ints): Move logic out\n+\tof shuffle into new function.\n+\t(shuffle): Call __gen_two_uniform_ints.\n+\t(__sample<ForwardIterator, OutputIterator, Cat, Size, URBG>): Use\n+\t__gen_two_uniform_ints and perform two samples at a time.\n+\n 2016-10-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/Makefile.am: Add <bits/refwrap.h> and <bits/std_function.h>."}, {"sha": "3ecb33b4f43552e52e897419721d9e851cee46b8", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=9d8ff2f63be0ec81f2d90da84ec8cd8e800dbfd4", "patch": "@@ -3740,6 +3740,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++14\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /**\n+   *  @brief Generate two uniformly distributed integers using a\n+   *         single distribution invocation.\n+   *  @param  __b0    The upper bound for the first integer.\n+   *  @param  __b1    The upper bound for the second integer.\n+   *  @param  __g     A UniformRandomBitGenerator.\n+   *  @return  A pair (i, j) with i and j uniformly distributed\n+   *           over [0, __b0) and [0, __b1), respectively.\n+   *\n+   *  Requires: __b0 * __b1 <= __g.max() - __g.min().\n+   *\n+   *  Using uniform_int_distribution with a range that is very\n+   *  small relative to the range of the generator ends up wasting\n+   *  potentially expensively generated randomness, since\n+   *  uniform_int_distribution does not store leftover randomness\n+   *  between invocations.\n+   *\n+   *  If we know we want two integers in ranges that are sufficiently\n+   *  small, we can compose the ranges, use a single distribution\n+   *  invocation, and significantly reduce the waste.\n+  */\n+  template<typename _IntType, typename _UniformRandomBitGenerator>\n+    pair<_IntType, _IntType>\n+    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,\n+\t\t\t   _UniformRandomBitGenerator&& __g)\n+    {\n+      _IntType __x\n+\t= uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);\n+      return std::make_pair(__x / __b1, __x % __b1);\n+    }\n+\n   /**\n    *  @brief Shuffle the elements of a sequence using a uniform random\n    *         number generator.\n@@ -3773,8 +3804,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename std::uniform_int_distribution<__ud_type> __distr_type;\n       typedef typename __distr_type::param_type __p_type;\n \n-      typedef typename std::remove_reference<_UniformRandomNumberGenerator>::type _Gen;\n-      typedef typename std::common_type<typename _Gen::result_type, __ud_type>::type __uc_type;\n+      typedef typename remove_reference<_UniformRandomNumberGenerator>::type\n+\t_Gen;\n+      typedef typename common_type<typename _Gen::result_type, __ud_type>::type\n+\t__uc_type;\n \n       const __uc_type __urngrange = __g.max() - __g.min();\n       const __uc_type __urange = __uc_type(__last - __first);\n@@ -3801,13 +3834,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \twhile (__i != __last)\n \t{\n \t  const __uc_type __swap_range = __uc_type(__i - __first) + 1;\n-\t  const __uc_type __comp_range = __swap_range * (__swap_range + 1);\n \n-\t  std::uniform_int_distribution<__uc_type> __d{0, __comp_range - 1};\n-\t  const __uc_type __pospos = __d(__g);\n+\t  const pair<__uc_type, __uc_type> __pospos =\n+\t    __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);\n \n-\t  std::iter_swap(__i++, __first + (__pospos % __swap_range));\n-\t  std::iter_swap(__i++, __first + (__pospos / __swap_range));\n+\t  std::iter_swap(__i++, __first + __pospos.first);\n+\t  std::iter_swap(__i++, __first + __pospos.second);\n \t}\n \n \treturn;\n@@ -5695,9 +5727,52 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     {\n       using __distrib_type = uniform_int_distribution<_Size>;\n       using __param_type = typename __distrib_type::param_type;\n+      using _USize = make_unsigned_t<_Size>;\n+      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;\n+      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;\n+\n       __distrib_type __d{};\n       _Size __unsampled_sz = std::distance(__first, __last);\n-      for (__n = std::min(__n, __unsampled_sz); __n != 0; ++__first)\n+      __n = std::min(__n, __unsampled_sz);\n+\n+      // If possible, we use __gen_two_uniform_ints to efficiently produce\n+      // two random numbers using a single distribution invocation:\n+\n+      const __uc_type __urngrange = __g.max() - __g.min();\n+      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))\n+        // I.e. (__urngrange >= __unsampled_sz * __unsampled_sz) but without\n+\t// wrapping issues.\n+        {\n+\t  while (__n != 0 && __unsampled_sz >= 2)\n+\t    {\n+\t      const pair<_Size, _Size> p =\n+\t\t__gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);\n+\n+\t      --__unsampled_sz;\n+\t      if (p.first < __n)\n+\t\t{\n+\t\t  *__out++ = *__first;\n+\t\t  --__n;\n+\t\t}\n+\n+\t      ++__first;\n+\n+\t      if (__n == 0) break;\n+\n+\t      --__unsampled_sz;\n+\t      if (p.second < __n)\n+\t\t{\n+\t\t  *__out++ = *__first;\n+\t\t  --__n;\n+\t\t}\n+\n+\t      ++__first;\n+\t    }\n+        }\n+\n+      // The loop above is otherwise equivalent to this one-at-a-time version:\n+\n+      for (; __n != 0; ++__first)\n \tif (__d(__g, __param_type{0, --__unsampled_sz}) < __n)\n \t  {\n \t    *__out++ = *__first;"}]}