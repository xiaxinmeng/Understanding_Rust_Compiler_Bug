{"sha": "bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjZWM0ZWYzN2Q2MDZmYTU4NTlkNmI5YWU4NGRlNWY0ZGE2OThlZg==", "commit": {"author": {"name": "Levente Farkas", "email": "lfarkas@mindmaker.hu", "date": "2000-08-22T17:29:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-22T17:29:57Z"}, "message": "basic_string.h: Fix up parameter names.\n\n\n2000-08-14  Levente Farkas  <lfarkas@mindmaker.hu>\n\n\t* bits/basic_string.h: Fix up parameter names.\n\nFrom-SVN: r35878", "tree": {"sha": "ec20883fbe01c3489e85eeae049106fe48088323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec20883fbe01c3489e85eeae049106fe48088323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef/comments", "author": null, "committer": null, "parents": [{"sha": "f3342f7303ecb6651c628a3c7ed8873a6acd39bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3342f7303ecb6651c628a3c7ed8873a6acd39bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3342f7303ecb6651c628a3c7ed8873a6acd39bc"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "099c7d9ee434a2713c53aa6972c3feef06fe7828", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "patch": "@@ -1,3 +1,7 @@\n+2000-08-14  Levente Farkas  <lfarkas@mindmaker.hu>\n+\n+\t* bits/basic_string.h: Fix up parameter names.\n+\n 2000-08-22  Brent Verner <brent@rcfile.org>\n \n \t* src/Makefile.am (INCLUDES): Put $(CSHADOW_INCLUDES) before"}, {"sha": "c857790625ecdea85833d6c9edfaaa7ebeb75c0b", "filename": "libstdc++-v3/bits/basic_string.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcec4ef37d606fa5859d6b9ae84de5f4da698ef/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h?ref=bbcec4ef37d606fa5859d6b9ae84de5f4da698ef", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -278,27 +278,27 @@ namespace std {\n       // to optimize for the common case of pointers as iterators.\n       template<class _Iterator>\n         static void\n-        _S_copy_chars(_CharT* __p, _Iterator __j1, _Iterator __j2)\n+        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n         { \n-\t  for (; __j1 != __j2; ++__j1, ++__p) \n-\t    traits_type::assign(*__p, *__j1); //these types are off\n+\t  for (; __k1 != __k2; ++__k1, ++__p) \n+\t    traits_type::assign(*__p, *__k1); //these types are off\n \t}\n \n       static void\n-      _S_copy_chars(_CharT* __p, iterator __j1, iterator __j2)\n-      { _S_copy_chars(__p, __j1.base(), __j2.base()); }\n+      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n \n       static void\n-      _S_copy_chars(_CharT* __p, const_iterator __j1, const_iterator __j2)\n-      { _S_copy_chars(__p, __j1.base(), __j2.base()); }\n+      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n  \n       static void\n-      _S_copy_chars(_CharT* __p, _CharT* __j1, _CharT* __j2)\n-      { traits_type::copy(__p, __j1, __j2 - __j1); }\n+      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)\n+      { traits_type::copy(__p, __k1, __k2 - __k1); }\n \n       static void\n-      _S_copy_chars(_CharT* __p, const _CharT* __j1, const _CharT* __j2)\n-      { traits_type::copy(__p, __j1, __j2 - __j1); }\n+      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n+      { traits_type::copy(__p, __k1, __k2 - __k1); }\n \n       void \n       _M_mutate(size_type __pos, size_type __len1, size_type __len2);\n@@ -636,20 +636,20 @@ namespace std {\n       template<class _InputIterator>\n         basic_string& \n         replace(iterator __i1, iterator __i2,\n-\t\t_InputIterator __j1, _InputIterator __j2)\n-        { return _M_replace(__i1, __i2, __j1, __j2,\n+\t\t_InputIterator __k1, _InputIterator __k2)\n+        { return _M_replace(__i1, __i2, __k1, __k2,\n \t     typename iterator_traits<_InputIterator>::iterator_category()); }\n \n     private:\n       template<class _InputIterator>\n         basic_string& \n-        _M_replace(iterator __i1, iterator __i2, _InputIterator __j1, \n-\t\t   _InputIterator __j2, input_iterator_tag);\n+        _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n+\t\t   _InputIterator __k2, input_iterator_tag);\n \n       template<class _FwdIterator>\n         basic_string& \n-        _M_replace(iterator __i1, iterator __i2, _FwdIterator __j1, \n-\t\t   _FwdIterator __j2, forward_iterator_tag);\n+        _M_replace(iterator __i1, iterator __i2, _FwdIterator __k1, \n+\t\t   _FwdIterator __k2, forward_iterator_tag);\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type"}]}