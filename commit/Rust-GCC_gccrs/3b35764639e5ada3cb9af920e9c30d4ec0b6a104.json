{"sha": "3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzNTc2NDYzOWU1YWRhM2NiOWFmOTIwZTljMzBkNGVjMGI2YTEwNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-06-27T14:01:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-06-27T14:01:27Z"}, "message": "re PR middle-end/32492 (attribute always_inline  ->  sorry, unimplemented: recursive inlining)\n\n2007-06-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/32492\n\t* tree.h (fold_convertible_p): Declare.\n\t* fold-const.c (fold_convertible_p): New function.\n\t* gimplify.c (gimplify_call_expr): Use fold_convertible_p\n\tinstead of lang_hooks.types_compatible_p.\n\n\t* gcc.dg/inline-22.c: New testcase.\n\nFrom-SVN: r126054", "tree": {"sha": "8bf61b8be7e8989d8c213faaeb4fb64ab0561c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf61b8be7e8989d8c213faaeb4fb64ab0561c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95e88efd101c43bb55c8584fa2bf2ccbff718401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e88efd101c43bb55c8584fa2bf2ccbff718401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e88efd101c43bb55c8584fa2bf2ccbff718401"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "2f148acf787e3eb62f0e3e68db15f96a4a732315", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -1,3 +1,11 @@\n+2007-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/32492\n+\t* tree.h (fold_convertible_p): Declare.\n+\t* fold-const.c (fold_convertible_p): New function.\n+\t* gimplify.c (gimplify_call_expr): Use fold_convertible_p\n+\tinstead of lang_hooks.types_compatible_p.\n+\n 2007-06-26  Jan Hubicka  <jh@suse.cz>\n \n \t* fwprop.c (try_fwprop_subst): Use validate_unshare_change."}, {"sha": "d806e7afc708c19d790d65973368623d787e5d47", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -2211,6 +2211,40 @@ build_zero_vector (tree type)\n   return build_vector (type, list);\n }\n \n+/* Returns true, if ARG is convertible to TYPE using a NOP_EXPR.  */\n+\n+bool\n+fold_convertible_p (tree type, tree arg)\n+{\n+  tree orig = TREE_TYPE (arg);\n+\n+  if (type == orig)\n+    return true;\n+\n+  if (TREE_CODE (arg) == ERROR_MARK\n+      || TREE_CODE (type) == ERROR_MARK\n+      || TREE_CODE (orig) == ERROR_MARK)\n+    return false;\n+\n+  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (orig))\n+    return true;\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE: case ENUMERAL_TYPE: case BOOLEAN_TYPE:\n+    case POINTER_TYPE: case REFERENCE_TYPE:\n+    case OFFSET_TYPE:\n+      if (INTEGRAL_TYPE_P (orig) || POINTER_TYPE_P (orig)\n+\t  || TREE_CODE (orig) == OFFSET_TYPE)\n+        return true;\n+      return (TREE_CODE (orig) == VECTOR_TYPE\n+\t      && tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (orig)));\n+\n+    default:\n+      return TREE_CODE (type) == TREE_CODE (orig);\n+    }\n+}\n+\n /* Convert expression ARG to type TYPE.  Used by the middle-end for\n    simple conversions in preference to calling the front-end's convert.  */\n "}, {"sha": "d935ec17f6e6934d773b8dc8c919e1c1017a13c7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -2141,8 +2141,7 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \tif (!p\n \t    || TREE_VALUE (p) == error_mark_node\n \t    || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n-\t    || !lang_hooks.types_compatible_p\n-\t\t (TREE_TYPE (CALL_EXPR_ARG (*expr_p, i)), TREE_VALUE (p)))\n+\t    || !fold_convertible_p (TREE_VALUE (p), CALL_EXPR_ARG (*expr_p, i)))\n \t  {\n \t    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n \t    break;\n@@ -2155,8 +2154,7 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \tif (!p\n \t    || p == error_mark_node\n \t    || CALL_EXPR_ARG (*expr_p, i) == error_mark_node\n-\t    || !lang_hooks.types_compatible_p\n-\t\t (TREE_TYPE (CALL_EXPR_ARG (*expr_p, i)), TREE_TYPE (p)))\n+\t    || !fold_convertible_p (TREE_TYPE (p), CALL_EXPR_ARG (*expr_p, i)))\n \t  {\n \t    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n \t    break;"}, {"sha": "9f350e7b8dfde3276cbe6f9aeea2a37cf966e8aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -1,3 +1,8 @@\n+2007-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/32492\n+\t* gcc.dg/inline-22.c: New testcase.\n+\n 2007-06-26  Hui-May Chang <hm.chang@apple.com>\n \n \t* gcc.target/i386/large-size-array-3.c: Remove the larger size of"}, {"sha": "6d790f97402304a40fc5da445cd8282681b4b6ff", "filename": "gcc/testsuite/gcc.dg/inline-22.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-22.c?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-funit-at-a-time\" } */\n+/* Verify we can inline without a complete prototype and with promoted\n+   arguments.  See also PR32492.  */\n+__attribute__((always_inline)) void f1() {}\n+__attribute__((always_inline)) void f2(char x) {}\n+void f3() { f1(); f2(0); }"}, {"sha": "942ab5f14d47ab15e97c97ccd1397f94495058c4", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35764639e5ada3cb9af920e9c30d4ec0b6a104/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3b35764639e5ada3cb9af920e9c30d4ec0b6a104", "patch": "@@ -4444,6 +4444,7 @@ extern tree fold_build2_initializer (enum tree_code, tree, tree, tree);\n extern tree fold_build3_initializer (enum tree_code, tree, tree, tree, tree);\n extern tree fold_build_call_array (tree, tree, int, tree *);\n extern tree fold_build_call_array_initializer (tree, tree, int, tree *);\n+extern bool fold_convertible_p (tree, tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n extern tree fold_ignored_result (tree);"}]}