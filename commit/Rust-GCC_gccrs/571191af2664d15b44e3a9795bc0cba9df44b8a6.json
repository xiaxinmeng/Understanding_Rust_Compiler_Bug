{"sha": "571191af2664d15b44e3a9795bc0cba9df44b8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxMTkxYWYyNjY0ZDE1YjQ0ZTNhOTc5NWJjMGNiYTlkZjQ0YjhhNg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-09-02T01:44:33Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-09-02T01:44:33Z"}, "message": "invoke.texi: Document -mword-relocations.\n\n2008-09-01  Paul Brook  <paul@codesourcery.com>\n\n\t* doc/invoke.texi: Document -mword-relocations.\n\t* config/arm/uclinux-elf.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n\t* config/arm/symbian.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n\t* config/arm/vxworks.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n\t* config/arm/arm.c (arm_split_constant): Use arm_emit_movpair.\n\t(arm_rtx_costs_1, arm_size_rtx_costs): Handle HIGH and LO_SUM.\n\t(arm_emit_movpair): New function.\n\t(arm_print_operand <c>): Handle sybolic addresses.\n\t* config/arm/arm.h (TARGET_USE_MOVT): Define.\n\t(TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n\t* config/arm/arm-protos.h (arm_emit_movpair): Add prototype.\n\t* config/arm/arm.opt: Add -mword-relocations.\n\t* config/arm/arm.md (movsi): Use arm_emit_movpair.\n\t(arm_movt, arm_movw): New.\n\nFrom-SVN: r139881", "tree": {"sha": "edc8d4f03839a499afaebcfdf54c24f88f391bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc8d4f03839a499afaebcfdf54c24f88f391bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/571191af2664d15b44e3a9795bc0cba9df44b8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571191af2664d15b44e3a9795bc0cba9df44b8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571191af2664d15b44e3a9795bc0cba9df44b8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571191af2664d15b44e3a9795bc0cba9df44b8a6/comments", "author": null, "committer": null, "parents": [{"sha": "4e2eb53c13c1fc2e3f777fa9cd6827716c6b81e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2eb53c13c1fc2e3f777fa9cd6827716c6b81e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2eb53c13c1fc2e3f777fa9cd6827716c6b81e4"}], "stats": {"total": 125, "additions": 119, "deletions": 6}, "files": [{"sha": "7c4df92df85ef9fd9e8eb4a6878aa5d25651540f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -1,3 +1,20 @@\n+2008-09-01  Paul Brook  <paul@codesourcery.com>\n+\n+\t* doc/invoke.texi: Document -mword-relocations.\n+\t* config/arm/uclinux-elf.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n+\t* config/arm/symbian.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n+\t* config/arm/vxworks.h (TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n+\t* config/arm/arm.c (arm_split_constant): Use arm_emit_movpair.\n+\t(arm_rtx_costs_1, arm_size_rtx_costs): Handle HIGH and LO_SUM.\n+\t(arm_emit_movpair): New function.\n+\t(arm_print_operand <c>): Handle sybolic addresses.\n+\t* config/arm/arm.h (TARGET_USE_MOVT): Define.\n+\t(TARGET_DEFAULT_WORD_RELOCATIONS): Define.\n+\t* config/arm/arm-protos.h (arm_emit_movpair): Add prototype.\n+\t* config/arm/arm.opt: Add -mword-relocations.\n+\t* config/arm/arm.md (movsi): Use arm_emit_movpair.\n+\t(arm_movt, arm_movw): New.\n+\n 2008-09-01  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (arm_override_options): Set arm_abi earlier."}, {"sha": "ab08ef446f635c7b3b61c47f884b3cb4a9e68ab5", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -123,6 +123,7 @@ extern const char *fp_immediate_constant (rtx);\n extern void arm_emit_call_insn (rtx, rtx);\n extern const char *output_call (rtx *);\n extern const char *output_call_mem (rtx *);\n+void arm_emit_movpair (rtx, rtx);\n extern const char *output_mov_long_double_fpa_from_arm (rtx *);\n extern const char *output_mov_long_double_arm_from_fpa (rtx *);\n extern const char *output_mov_long_double_arm_from_arm (rtx *);"}, {"sha": "724f1ac0407d93a46d35d5f363a14662dc7748a4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -1926,14 +1926,22 @@ arm_split_constant (enum rtx_code code, enum machine_mode mode, rtx insn,\n \t    {\n \t      /* Currently SET is the only monadic value for CODE, all\n \t\t the rest are diadic.  */\n-\t      emit_set_insn (target, GEN_INT (val));\n+\t      if (TARGET_USE_MOVT)\n+\t\tarm_emit_movpair (target, GEN_INT (val));\n+\t      else\n+\t\temit_set_insn (target, GEN_INT (val));\n+\n \t      return 1;\n \t    }\n \t  else\n \t    {\n \t      rtx temp = subtargets ? gen_reg_rtx (mode) : target;\n \n-\t      emit_set_insn (temp, GEN_INT (val));\n+\t      if (TARGET_USE_MOVT)\n+\t\tarm_emit_movpair (temp, GEN_INT (val));\n+\t      else\n+\t\temit_set_insn (temp, GEN_INT (val));\n+\n \t      /* For MINUS, the value is subtracted from, since we never\n \t\t have subtraction of a constant.  */\n \t      if (code == MINUS)\n@@ -5117,6 +5125,10 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n     case SYMBOL_REF:\n       return 6;\n \n+    case HIGH:\n+    case LO_SUM:\n+      return (outer == SET) ? 1 : -1;\n+\n     case CONST_DOUBLE:\n       if (arm_const_double_rtx (x) || vfp3_const_double_rtx (x))\n \treturn outer == SET ? 2 : -1;\n@@ -5343,6 +5355,13 @@ arm_size_rtx_costs (rtx x, int code, int outer_code, int *total)\n       *total = COSTS_N_INSNS (4);\n       return true;\n \n+    case HIGH:\n+    case LO_SUM:\n+      /* We prefer constant pool entries to MOVW/MOVT pairs, so bump the\n+\t cost of these slightly.  */\n+      *total = COSTS_N_INSNS (1) + 1;\n+      return true;\n+\n     default:\n       if (mode != VOIDmode)\n \t*total = COSTS_N_INSNS (ARM_NUM_REGS (mode));\n@@ -9891,6 +9910,14 @@ output_mov_long_double_arm_from_arm (rtx *operands)\n }\n \n \n+/* Emit a MOVW/MOVT pair.  */\n+void arm_emit_movpair (rtx dest, rtx src)\n+{\n+  emit_set_insn (dest, gen_rtx_HIGH (SImode, src));\n+  emit_set_insn (dest, gen_rtx_LO_SUM (SImode, dest, src));\n+}\n+\n+\n /* Output a move from arm registers to an fpa registers.\n    OPERANDS[0] is an fpa register.\n    OPERANDS[1] is the first registers of an arm register pair.  */\n@@ -12906,10 +12933,21 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       }\n       return;\n \n-    /* An integer without a preceding # sign.  */\n+    /* An integer or symbol address without a preceding # sign.  */\n     case 'c':\n-      gcc_assert (GET_CODE (x) == CONST_INT);\n-      fprintf (stream, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n+      switch (GET_CODE (x))\n+\t{\n+\tcase CONST_INT:\n+\t  fprintf (stream, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n+\t  break;\n+\n+\tcase SYMBOL_REF:\n+\t  output_addr_const (stream, x);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n       return;\n \n     case 'B':"}, {"sha": "e12c3f9c597fd1fcca43e2a514f3be5477a303d3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -241,6 +241,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_INT_SIMD \\\n   (TARGET_32BIT && arm_arch6 && arm_arch_notm)\n \n+/* Should MOVW/MOVT be used in preference to a constant pool.  */\n+#define TARGET_USE_MOVT (arm_arch_thumb2 && !optimize_size)\n+\n /* We could use unified syntax for arm mode, but for now we just use it\n    for Thumb-2.  */\n #define TARGET_UNIFIED_ASM TARGET_THUMB2\n@@ -1962,6 +1965,11 @@ typedef struct\n    SYMBOL's section.  */\n #define ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P 0\n \n+/* Nonzero if all target requires all absolute relocations be R_ARM_ABS32.  */\n+#ifndef TARGET_DEFAULT_WORD_RELOCATIONS\n+#define TARGET_DEFAULT_WORD_RELOCATIONS 0\n+#endif\n+\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n "}, {"sha": "c5708d6e4329a8211a946dcd01adec50ff045067", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -4823,6 +4823,14 @@\n \t\t\t       optimize && can_create_pseudo_p ());\n           DONE;\n         }\n+\n+      if (TARGET_USE_MOVT && !target_word_relocations\n+\t  && GET_CODE (operands[1]) == SYMBOL_REF\n+\t  && !flag_pic && !arm_tls_referenced_p (operands[1]))\n+\t{\n+\t  arm_emit_movpair (operands[0], operands[1]);\n+\t  DONE;\n+\t}\n     }\n   else /* TARGET_THUMB1...  */\n     {\n@@ -4883,6 +4891,28 @@\n   \"\n )\n \n+;; The ARM LO_SUM and HIGH are backwards - HIGH sets the low bits, and\n+;; LO_SUM adds in the high bits.  Fortunately these are opaque operations\n+;; so this does not matter.\n+(define_insn \"*arm_movt\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:SI 2 \"general_operand\"      \"i\")))]\n+  \"TARGET_32BIT\"\n+  \"movt%?\\t%0, #:upper16:%c2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_insn \"*arm_movw\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+\t(high:SI (match_operand:SI 1 \"general_operand\"      \"i\")))]\n+  \"TARGET_32BIT\"\n+  \"movw%?\\t%0, #:lower16:%c1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n (define_insn \"*arm_movsi_insn\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m\")\n \t(match_operand:SI 1 \"general_operand\"      \"rk, I,K,N,mi,rk\"))]"}, {"sha": "c8bdcf80f4812d775dbcc00a3084806d729e6ba0", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -156,3 +156,7 @@ Assume big endian bytes, little endian words\n mvectorize-with-neon-quad\n Target Report Mask(NEON_VECTORIZE_QUAD)\n Use Neon quad-word (rather than double-word) registers for vectorization\n+\n+mword-relocations\n+Target Report Var(target_word_relocations) Init(TARGET_DEFAULT_WORD_RELOCATIONS)\n++Only generate absolute relocations on word sized values."}, {"sha": "af92c72b7ba0da63c276d4640bd8b6c372ef8cfc", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -101,3 +101,5 @@\n \n /* SymbianOS cannot merge entities with vague linkage at runtime.  */\n #define TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P false\n+\n+#define TARGET_DEFAULT_WORD_RELOCATIONS 1"}, {"sha": "89b96f257ba207e8498b607204900536f3a87d2b", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -83,3 +83,5 @@\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\\n    %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n+\n+#define TARGET_DEFAULT_WORD_RELOCATIONS 1"}, {"sha": "a7610acca5d2adfebd2bdfa5d4e18047fd5f2034", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -113,3 +113,6 @@ along with GCC; see the file COPYING3.  If not see\n    cannot allow arbitrary offsets for shared libraries either.  */\n #undef ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P\n #define ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P 1\n+\n+#undef TARGET_DEFAULT_WORD_RELOCATIONS\n+#define TARGET_DEFAULT_WORD_RELOCATIONS 1"}, {"sha": "aa73f826b3e0be4dbe9e96477b8d6f25a7f796c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/571191af2664d15b44e3a9795bc0cba9df44b8a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=571191af2664d15b44e3a9795bc0cba9df44b8a6", "patch": "@@ -448,7 +448,8 @@ Objective-C and Objective-C++ Dialects}.\n -mthumb  -marm @gol\n -mtpcs-frame  -mtpcs-leaf-frame @gol\n -mcaller-super-interworking  -mcallee-super-interworking @gol\n--mtp=@var{name}}\n+-mtp=@var{name}\n+-mword-relocations}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu}  -msize  -minit-stack=@var{n}  -mno-interrupts @gol\n@@ -8910,6 +8911,13 @@ models are @option{soft}, which generates calls to @code{__aeabi_read_tp},\n best available method for the selected processor.  The default setting is\n @option{auto}.\n \n+@item -mword-relocations\n+@opindex mword-relocations\n+Only generate absolute relocations on word sized values (i.e. R_ARM_ABS32).\n+This is enabled by default on targets (uClinux, SymbianOS) where the runtime\n+loader imposes this restriction, and when @option{-fpic} or @option{-fPIC}\n+is speficied.\n+\n @end table\n \n @node AVR Options"}]}