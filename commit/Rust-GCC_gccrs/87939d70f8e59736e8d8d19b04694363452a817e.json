{"sha": "87939d70f8e59736e8d8d19b04694363452a817e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc5MzlkNzBmOGU1OTczNmU4ZDhkMTliMDQ2OTQzNjM0NTJhODE3ZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-23T06:56:34Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-23T06:56:34Z"}, "message": "2004-04-23  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/channels/FileChannelImpl.java\n\t(SET, CUR): Unused, removed.\n\t(read): Implement here directly.\n\t(implRead): Removed.\n\t(write): Implement here directly.\n\t(implWrite): Removed.\n\nFrom-SVN: r81079", "tree": {"sha": "cc46dbedcaa086a2bbc793056e368e55c7223be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc46dbedcaa086a2bbc793056e368e55c7223be4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87939d70f8e59736e8d8d19b04694363452a817e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87939d70f8e59736e8d8d19b04694363452a817e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87939d70f8e59736e8d8d19b04694363452a817e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87939d70f8e59736e8d8d19b04694363452a817e/comments", "author": null, "committer": null, "parents": [{"sha": "5d837a584fa54f5181f52ef4d14ef441ead866be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d837a584fa54f5181f52ef4d14ef441ead866be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d837a584fa54f5181f52ef4d14ef441ead866be"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "6222b5726fafe28bac582691caa943c2714bc1c2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87939d70f8e59736e8d8d19b04694363452a817e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87939d70f8e59736e8d8d19b04694363452a817e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=87939d70f8e59736e8d8d19b04694363452a817e", "patch": "@@ -1,3 +1,12 @@\n+2004-04-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/channels/FileChannelImpl.java\n+\t(SET, CUR): Unused, removed.\n+\t(read): Implement here directly.\n+\t(implRead): Removed.\n+\t(write): Implement here directly.\n+\t(implWrite): Removed.\n+\n 2004-04-23  Dalibor Topic  <robilad@kaffe.org>\n \n \t* javax/rmi/CORBA/PortableRemoteObjectDelegate.java,"}, {"sha": "ea6ef0e43bf833eddb94468c757db0b62e6528a6", "filename": "libjava/gnu/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87939d70f8e59736e8d8d19b04694363452a817e/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87939d70f8e59736e8d8d19b04694363452a817e/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=87939d70f8e59736e8d8d19b04694363452a817e", "patch": "@@ -60,13 +60,8 @@\n  * Instances of this class are created by invoking getChannel\n  * Upon a Input/Output/RandomAccessFile object.\n  */\n-\n public final class FileChannelImpl extends FileChannel\n {\n-  // These are WHENCE values for seek.\n-  static final int SET = 0;\n-  static final int CUR = 1;\n-\n   // These are mode values for open().\n   public static final int READ   = 1;\n   public static final int WRITE  = 2;\n@@ -139,7 +134,15 @@ public FileChannelImpl (String path, int mode) throws FileNotFoundException\n \n   public int read (ByteBuffer dst) throws IOException\n   {\n-    return implRead (dst);\n+    int result;\n+    byte[] buffer = new byte [dst.remaining ()];\n+    \n+    result = read (buffer, 0, buffer.length);\n+\n+    if (result > 0)\n+      dst.put (buffer, 0, result);\n+\n+    return result;\n   }\n \n   public int read (ByteBuffer dst, long position)\n@@ -149,25 +152,12 @@ public int read (ByteBuffer dst, long position)\n       throw new IllegalArgumentException ();\n     long oldPosition = implPosition ();\n     position (position);\n-    int result = implRead (dst);\n+    int result = read(dst);\n     position (oldPosition);\n     \n     return result;\n   }\n \n-  private int implRead (ByteBuffer dst) throws IOException\n-  {\n-    int result;\n-    byte[] buffer = new byte [dst.remaining ()];\n-    \n-    result = read (buffer, 0, buffer.length);\n-\n-    if (result > 0)\n-      dst.put (buffer, 0, result);\n-\n-    return result;\n-  }\n-  \n   public native int read ()\n     throws IOException;\n \n@@ -189,7 +179,20 @@ public long read (ByteBuffer[] dsts, int offset, int length)\n \n   public int write (ByteBuffer src) throws IOException\n   {\n-    return implWrite (src);\n+    int len = src.remaining ();\n+    if (src.hasArray())\n+      {\n+\tbyte[] buffer = src.array();\n+\twrite(buffer, src.arrayOffset() + src.position(), len);\n+      }\n+    else\n+      {\n+\t// Use a more efficient native method! FIXME!\n+\tbyte[] buffer = new byte [len];\n+    \tsrc.get (buffer, 0, len);\n+\twrite (buffer, 0, len);\n+      }\n+    return len;\n   }\n     \n   public int write (ByteBuffer src, long position)\n@@ -209,30 +212,12 @@ public int write (ByteBuffer src, long position)\n \n     oldPosition = implPosition ();\n     seek (position);\n-    result = implWrite (src);\n+    result = write(src);\n     seek (oldPosition);\n     \n     return result;\n   }\n \n-  private int implWrite (ByteBuffer src) throws IOException\n-  {\n-    int len = src.remaining ();\n-    if (src.hasArray())\n-      {\n-\tbyte[] buffer = src.array();\n-\twrite(buffer, src.arrayOffset() + src.position(), len);\n-      }\n-    else\n-      {\n-\t// Use a more efficient native method! FIXME!\n-\tbyte[] buffer = new byte [len];\n-    \tsrc.get (buffer, 0, len);\n-\twrite (buffer, 0, len);\n-      }\n-    return len;\n-  }\n-  \n   public native void write (byte[] buffer, int offset, int length)\n     throws IOException;\n   "}]}