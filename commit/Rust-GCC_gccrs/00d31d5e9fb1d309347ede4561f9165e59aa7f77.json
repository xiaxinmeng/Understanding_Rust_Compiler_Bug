{"sha": "00d31d5e9fb1d309347ede4561f9165e59aa7f77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMzFkNWU5ZmIxZDMwOTM0N2VkZTQ1NjFmOTE2NWU1OWFhN2Y3Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-25T02:11:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-25T02:11:13Z"}, "message": "Fix previous commit.\n\nFrom-SVN: r215576", "tree": {"sha": "b070eb46856db6d6504f3e1b09f01ad6cf772acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b070eb46856db6d6504f3e1b09f01ad6cf772acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d31d5e9fb1d309347ede4561f9165e59aa7f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d31d5e9fb1d309347ede4561f9165e59aa7f77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d31d5e9fb1d309347ede4561f9165e59aa7f77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d31d5e9fb1d309347ede4561f9165e59aa7f77/comments", "author": null, "committer": null, "parents": [{"sha": "ba3923391e896c0efdfcd49eb0334525ed8bd2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3923391e896c0efdfcd49eb0334525ed8bd2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3923391e896c0efdfcd49eb0334525ed8bd2c0"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "bc94a79d0380b7c8ec7913eff83451b2302d484c", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d31d5e9fb1d309347ede4561f9165e59aa7f77/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d31d5e9fb1d309347ede4561f9165e59aa7f77/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=00d31d5e9fb1d309347ede4561f9165e59aa7f77", "patch": "@@ -2057,14 +2057,15 @@ ipa_polymorphic_call_context::restrict_to_inner_class (tree expected_type)\n   tree type = outer_type;\n   HOST_WIDE_INT cur_offset = offset;\n   bool speculative = false;\n+  bool size_unknown = false;\n \n- /* Update OUTER_TYPE to match EXPECTED_TYPE if it is not set.  */\n- if (!outer_type)\n-   {\n-     clear_outer_type (expected_type);\n-     type = expected_type;\n-     cur_offset = 0;\n-   }\n+  /* Update OUTER_TYPE to match EXPECTED_TYPE if it is not set.  */\n+  if (!outer_type)\n+    {\n+      clear_outer_type (expected_type);\n+      type = expected_type;\n+      cur_offset = 0;\n+    }\n  /* See if OFFSET points inside OUTER_TYPE.  If it does not, we know\n     that the context is either invalid, or the instance type must be\n     derived from OUTER_TYPE.\n@@ -2133,7 +2134,6 @@ ipa_polymorphic_call_context::restrict_to_inner_class (tree expected_type)\n     {\n       HOST_WIDE_INT pos, size;\n       tree fld;\n-      bool size_unknown;\n \n       /* If we do not know size of TYPE, we need to be more conservative\n          about accepting cases where we can not find EXPECTED_TYPE."}]}