{"sha": "61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmMWVkNTkyYzYwNmQxZDJhZTI3MjI5MmFkNGRiZTM3ZDcxZDc4Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-03-18T05:04:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-18T05:04:14Z"}, "message": "Reshuffle 21_strings testsuite.\n\n\n\n2003-03-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\tReshuffle 21_strings testsuite.\n\t* testsuite/21_strings/append.cc, c_strings.cc, invariants.cc,\n\tassign.cc, ctor_copy_dtor.cc, nonmember.cc, capacity.cc,\n\telement_access.cc, operations.cc, char_traits_requirements.cc,\n\tfind.cc, replace.cc, char_traits_typedefs.cc, insert.cc, rfind.cc,\n\tcompare.cc, inserters_extractors.cc, substr.cc: Split up, add\n\twchar_t tests as follows.\n\t* 21_strings/basic_string/append/char/1.cc: New.\n\t* 21_strings/basic_string/append/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/assign/char/1.cc: New.\n\t* 21_strings/basic_string/assign/char/2.cc: New.\n\t* 21_strings/basic_string/assign/char/3.cc: New.\n\t* 21_strings/basic_string/assign/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/assign/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/assign/wchar_t/3.cc: New.\n\t* 21_strings/basic_string/capacity/1.cc: New.\n\t* 21_strings/basic_string/capacity/char/1.cc: New.\n\t* 21_strings/basic_string/capacity/char/2.cc: New.\n\t* 21_strings/basic_string/capacity/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/capacity/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/compare/char/1.cc: New.\n\t* 21_strings/basic_string/compare/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/cons/char/1.cc: New.\n\t* 21_strings/basic_string/cons/char/2.cc: New.\n\t* 21_strings/basic_string/cons/char/3.cc: New.\n\t* 21_strings/basic_string/cons/char/4.cc: New.\n\t* 21_strings/basic_string/cons/char/5.cc: New.\n\t* 21_strings/basic_string/cons/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/cons/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/cons/wchar_t/3.cc: New.\n\t* 21_strings/basic_string/cons/wchar_t/4.cc: New.\n\t* 21_strings/basic_string/cons/wchar_t/5.cc: New.\n\t* 21_strings/basic_string/element_access/char/1.cc: New.\n\t* 21_strings/basic_string/element_access/char/2.cc: New.\n\t* 21_strings/basic_string/element_access/char/3.cc: New.\n\t* 21_strings/basic_string/element_access/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/element_access/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/element_access/wchar_t/3.cc: New.\n\t* 21_strings/basic_string/find/char/1.cc: New.\n\t* 21_strings/basic_string/find/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/insert/char/1.cc: New.\n\t* 21_strings/basic_string/insert/char/2.cc: New.\n\t* 21_strings/basic_string/insert/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/insert/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/1.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/4.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/5.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/6.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/7.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/8.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/char/9.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/4.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/5.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/6.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/7.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/8.cc: New.\n\t* 21_strings/basic_string/inserters_extractors/wchar_t/9.cc: New.\n\t* 21_strings/basic_string/operators/char/1.cc: New.\n\t* 21_strings/basic_string/operators/char/2.cc: New.\n\t* 21_strings/basic_string/operators/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/operators/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/replace/char/1.cc: New.\n\t* 21_strings/basic_string/replace/char/2.cc: New.\n\t* 21_strings/basic_string/replace/char/3.cc: New.\n\t* 21_strings/basic_string/replace/char/4.cc: New.\n\t* 21_strings/basic_string/replace/char/5.cc: New.\n\t* 21_strings/basic_string/replace/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/replace/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/replace/wchar_t/3.cc: New.\n\t* 21_strings/basic_string/replace/wchar_t/4.cc: New.\n\t* 21_strings/basic_string/replace/wchar_t/5.cc: New.\n\t* 21_strings/basic_string/rfind/char/1.cc: New.\n\t* 21_strings/basic_string/rfind/char/2.cc: New.\n\t* 21_strings/basic_string/rfind/char/3.cc: New.\n\t* 21_strings/basic_string/rfind/wchar_t/1.cc: New.\n\t* 21_strings/basic_string/rfind/wchar_t/2.cc: New.\n\t* 21_strings/basic_string/rfind/wchar_t/3.cc: New.\n\t* 21_strings/basic_string/substr/char/1.cc: New.\n\t* 21_strings/basic_string/substr/wchar_t/1.cc: New.\n\t* 21_strings/c_strings/char/1.cc: New.\n\t* 21_strings/c_strings/char/2.cc: New.\n\t* 21_strings/c_strings/wchar_t/1.cc: New.\n\t* 21_strings/c_strings/wchar_t/2.cc: New.\n\t* 21_strings/char_traits/requirements/char/1.cc: New.\n\t* 21_strings/char_traits/requirements/wchar_t/1.cc: New.\n\t* 21_strings/char_traits/typedefs/char/1.cc: New.\n\nFrom-SVN: r64524", "tree": {"sha": "c6e9fc88ee389602c75762e964df73cf7771d3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e9fc88ee389602c75762e964df73cf7771d3e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/comments", "author": null, "committer": null, "parents": [{"sha": "82efaf43d83897c116f79ba2ac5929c106d7eeba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82efaf43d83897c116f79ba2ac5929c106d7eeba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82efaf43d83897c116f79ba2ac5929c106d7eeba"}], "stats": {"total": 5948, "additions": 5052, "deletions": 896}, "files": [{"sha": "728cf5e23d15b3a2274fd9a5c72b095d93ea1043", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,3 +1,93 @@\n+2003-03-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tReshuffle 21_strings testsuite.\n+\t* testsuite/21_strings/append.cc, c_strings.cc, invariants.cc,\n+\tassign.cc, ctor_copy_dtor.cc, nonmember.cc, capacity.cc,\n+\telement_access.cc, operations.cc, char_traits_requirements.cc,\n+\tfind.cc, replace.cc, char_traits_typedefs.cc, insert.cc, rfind.cc,\n+\tcompare.cc, inserters_extractors.cc, substr.cc: Split up, add\n+\twchar_t tests as follows.\t\n+\t* 21_strings/basic_string/append/char/1.cc: New.\n+\t* 21_strings/basic_string/append/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/assign/char/1.cc: New.\n+\t* 21_strings/basic_string/assign/char/2.cc: New.\n+\t* 21_strings/basic_string/assign/char/3.cc: New.\n+\t* 21_strings/basic_string/assign/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/assign/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/assign/wchar_t/3.cc: New.\n+\t* 21_strings/basic_string/capacity/1.cc: New.\n+\t* 21_strings/basic_string/capacity/char/1.cc: New.\n+\t* 21_strings/basic_string/capacity/char/2.cc: New.\n+\t* 21_strings/basic_string/capacity/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/capacity/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/compare/char/1.cc: New.\n+\t* 21_strings/basic_string/compare/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/cons/char/1.cc: New.\n+\t* 21_strings/basic_string/cons/char/2.cc: New.\n+\t* 21_strings/basic_string/cons/char/3.cc: New.\n+\t* 21_strings/basic_string/cons/char/4.cc: New.\n+\t* 21_strings/basic_string/cons/char/5.cc: New.\n+\t* 21_strings/basic_string/cons/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/cons/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/cons/wchar_t/3.cc: New.\n+\t* 21_strings/basic_string/cons/wchar_t/4.cc: New.\n+\t* 21_strings/basic_string/cons/wchar_t/5.cc: New.\n+\t* 21_strings/basic_string/element_access/char/1.cc: New.\n+\t* 21_strings/basic_string/element_access/char/2.cc: New.\n+\t* 21_strings/basic_string/element_access/char/3.cc: New.\n+\t* 21_strings/basic_string/element_access/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/element_access/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/element_access/wchar_t/3.cc: New.\n+\t* 21_strings/basic_string/find/char/1.cc: New.\n+\t* 21_strings/basic_string/find/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/insert/char/1.cc: New.\n+\t* 21_strings/basic_string/insert/char/2.cc: New.\n+\t* 21_strings/basic_string/insert/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/insert/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/1.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/4.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/5.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/6.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/7.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/8.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/char/9.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/4.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/5.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/6.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/7.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/8.cc: New.\n+\t* 21_strings/basic_string/inserters_extractors/wchar_t/9.cc: New.\n+\t* 21_strings/basic_string/operators/char/1.cc: New.\n+\t* 21_strings/basic_string/operators/char/2.cc: New.\n+\t* 21_strings/basic_string/operators/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/operators/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/replace/char/1.cc: New.\n+\t* 21_strings/basic_string/replace/char/2.cc: New.\n+\t* 21_strings/basic_string/replace/char/3.cc: New.\n+\t* 21_strings/basic_string/replace/char/4.cc: New.\n+\t* 21_strings/basic_string/replace/char/5.cc: New.\n+\t* 21_strings/basic_string/replace/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/replace/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/replace/wchar_t/3.cc: New.\n+\t* 21_strings/basic_string/replace/wchar_t/4.cc: New.\n+\t* 21_strings/basic_string/replace/wchar_t/5.cc: New.\n+\t* 21_strings/basic_string/rfind/char/1.cc: New.\n+\t* 21_strings/basic_string/rfind/char/2.cc: New.\n+\t* 21_strings/basic_string/rfind/char/3.cc: New.\n+\t* 21_strings/basic_string/rfind/wchar_t/1.cc: New.\n+\t* 21_strings/basic_string/rfind/wchar_t/2.cc: New.\n+\t* 21_strings/basic_string/rfind/wchar_t/3.cc: New.\n+\t* 21_strings/basic_string/substr/char/1.cc: New.\n+\t* 21_strings/basic_string/substr/wchar_t/1.cc: New.\n+\t* 21_strings/c_strings/char/1.cc: New.\n+\t* 21_strings/c_strings/char/2.cc: New.\n+\t* 21_strings/c_strings/wchar_t/1.cc: New.\n+\t* 21_strings/c_strings/wchar_t/2.cc: New.\n+\t* 21_strings/char_traits/requirements/char/1.cc: New.\n+\t* 21_strings/char_traits/requirements/wchar_t/1.cc: New.\n+\t* 21_strings/char_traits/typedefs/char/1.cc: New.\n+\t\n 2003-03-17  Paolo Carlini  <pcarlini@unitus.it>\n             Petur Runolfsson  <peturr02@ru.is>\n \n@@ -1192,7 +1282,7 @@\n \tglobal_templates.cc time_get_members_wchar_t.cc, members.cc,\n \ttime_put.cc, messages_byname.cc, time_put_members_char.cc,\n \tmessages.cc, time_put_members_wchar_t.cc, messages_members_char.cc): \n-\tSplint up into individual test cases...\t\n+\tSplit up into individual test cases...\t\n \t* 22_locale/codecvt/1.cc: New.\n \t* 22_locale/codecvt/2.cc: New.\n \t* 22_locale/codecvt/always_noconv/char/1.cc: New."}, {"sha": "a7fc70e7a04f05edb69e8ea1d94c99fb893d17b2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-08 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/append.cc"}, {"sha": "ea8cd17b954898eb595f61d7e1400c952e015a51", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/wchar_t/1.cc", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,164 @@\n+// 1999-07-08 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.3 basic_string::assign\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"point bolivar, texas\";\n+  const std::wstring str01(str_lit01);\n+  const std::wstring str02(L\"corpus, \");\n+  const std::wstring str03;\n+  std::wstring str05;\n+\n+\n+  // wstring& append(const wstring&)\n+  str05 = str02;\n+  str05.append(str05); \n+  VERIFY( str05 == L\"corpus, corpus, \" );\n+  str05.append(str01);\n+  VERIFY( str05 == L\"corpus, corpus, point bolivar, texas\" );\n+  str05.append(str03);\n+  VERIFY( str05 == L\"corpus, corpus, point bolivar, texas\" );\n+  std::wstring str06;\n+  str06.append(str05);\n+  VERIFY( str06 == str05 );\n+\n+\n+  // wstring& append(const wstring&, size_type pos, size_type n)\n+  str05.erase();\n+  str06.erase();\n+  csz01 = str03.size();\n+  try {\n+    str06.append(str03, csz01 + 1, 0);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  csz01 = str01.size();\n+  try {\n+    str06.append(str01, csz01 + 1, 0);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  str05 = str02;\n+  str05.append(str01, 0, std::wstring::npos);\n+  VERIFY( str05 == L\"corpus, point bolivar, texas\" );\n+  VERIFY( str05 != str02 );\n+\n+  str06 = str02;\n+  str06.append(str01, 15, std::wstring::npos);\n+  VERIFY( str06 == L\"corpus, texas\" );\n+  VERIFY( str02 != str06 );\n+\n+\n+  // wstring& append(const wchar_t* s)\n+  str05.erase();\n+  str06.erase();\n+  str05.append(L\"\");\n+  VERIFY( str05 == str03 );\n+\n+  str05.append(str_lit01);\n+  VERIFY( str05 == str01 );\n+\n+  str06 = str02;\n+  str06.append(L\"corpus, \");\n+  VERIFY( str06 == L\"corpus, corpus, \" );\n+\n+\n+  // wstring& append(const wchar_t* s, size_type n)\n+  str05.erase();\n+  str06.erase();\n+  str05.append(L\"\", 0);\n+  VERIFY( str05.size() == 0 );\n+  VERIFY( str05 == str03 );\n+  \n+  str05.append(str_lit01, sizeof(str_lit01) - 1);\n+  VERIFY( str05 == str01 );\n+\n+  str06 = str02;\n+  str06.append(L\"corpus, \", 6);\n+  VERIFY( str06 == L\"corpus, corpus\" );\n+\n+  str06 = str02;\n+  str06.append(L\"corpus, \", 12);\n+  VERIFY( str06 != L\"corpus, corpus, \" );\n+\n+\n+  // wstring& append(size_type n, char c)\n+  str05.erase();\n+  str06.erase();\n+  str05.append(0, L'a');\n+  VERIFY( str05 == str03 );\n+  str06.append(8, L'.');\n+  VERIFY( str06 == L\"........\" );\n+\n+\n+  // template<typename InputIter>\n+  //  wstring& append(InputIter first, InputIter last)\n+  str05.erase();\n+  str06.erase();\n+  str05.append(str03.begin(), str03.end());\n+  VERIFY( str05 == str03 );\n+\n+  str06 = str02;\n+  str06.append(str01.begin(), str01.begin() + str01.find(L'r')); \n+  VERIFY( str06 == L\"corpus, point boliva\" );\n+  VERIFY( str06 != str01 );\n+  VERIFY( str06 != str02 );\n+\n+  str05 = str01;\n+  str05.append(str05.begin(), str05.begin() + str05.find(L'r')); \n+  VERIFY( str05 ==  L\"point bolivar, texaspoint boliva\" );\n+  VERIFY( str05 != str01 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "735c61c86e007e0e4b9b0bd7cd385dfd0e5be3fe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,53 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+\n+  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  string aux = strlit;\n+  string::size_type i = aux.rfind(\"/\");\n+  if (i != string::npos)\n+    aux.assign(aux, i + 1, string::npos);\n+  VERIFY(aux == \"Hawaii\");\n+\n+  aux = strlit;\n+  i = aux.rfind(\"r/\");\n+  if (i != string::npos)\n+    aux.assign(aux, i + 1, string::npos);\n+  VERIFY(aux.c_str()[9] == 'B');\n+  VERIFY(aux == \"/Hanalei Bay/Kauai/Hawaii\");\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "9783c45202cc7e31541312b0f9952a3198619ceb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,59 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// assign(const basic_string& __str, size_type __pos, size_type __n)\n+void\n+test02()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+  \n+  string one = \"Selling England by the pound\";\n+  string two = one;\n+  string three = \"Brilliant trees\";\n+\n+  one.assign(one, 8, 100);\n+  VERIFY( one == \"England by the pound\" );\n+\n+  one.assign(one, 8, 0);\n+  VERIFY( one == \"\" );\n+ \n+  one.assign(two, 8, 7);\n+  VERIFY( one == \"England\" );\n+\n+  one.assign(three, 10, 100);\n+  VERIFY( one == \"trees\" );\n+\n+  three.assign(one, 0, 3);\n+  VERIFY( three == \"tre\" );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "cfc35545da47fe4e66acdc603aa7ad484fab7b3c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/3.cc", "status": "renamed", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,56 +24,6 @@\n #include <cstdio>\n #include <testsuite_hooks.h>\n \n-void\n-test01()\n-{\n-  bool test = true;\n-\n-  using namespace std;\n-\n-  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n-  string aux = strlit;\n-  string::size_type i = aux.rfind(\"/\");\n-  if (i != string::npos)\n-    aux.assign(aux, i + 1, string::npos);\n-  VERIFY(aux == \"Hawaii\");\n-\n-  aux = strlit;\n-  i = aux.rfind(\"r/\");\n-  if (i != string::npos)\n-    aux.assign(aux, i + 1, string::npos);\n-  VERIFY(aux.c_str()[9] == 'B');\n-  VERIFY(aux == \"/Hanalei Bay/Kauai/Hawaii\");\n-}\n-\n-// assign(const basic_string& __str, size_type __pos, size_type __n)\n-void\n-test02()\n-{\n-  bool test = true;\n-\n-  using namespace std;\n-  \n-  string one = \"Selling England by the pound\";\n-  string two = one;\n-  string three = \"Brilliant trees\";\n-\n-  one.assign(one, 8, 100);\n-  VERIFY( one == \"England by the pound\" );\n-\n-  one.assign(one, 8, 0);\n-  VERIFY( one == \"\" );\n- \n-  one.assign(two, 8, 7);\n-  VERIFY( one == \"England\" );\n-\n-  one.assign(three, 10, 100);\n-  VERIFY( one == \"trees\" );\n-\n-  three.assign(one, 0, 3);\n-  VERIFY( three == \"tre\" );\n-}\n-\n // assign(const _CharT* __s, size_type __n)\n // assign(const _CharT* __s)\n void\n@@ -104,13 +54,8 @@ test03()\n   VERIFY( one == \"by the\" );\n }\n \n-\n-\n int main()\n { \n-  test01();\n-  test02();\n   test03();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/assign.cc"}, {"sha": "5f110598bb98f027d28b9e347be1031a2d644d27", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,53 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+\n+  const wchar_t* strlit = L\"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  wstring aux = strlit;\n+  wstring::size_type i = aux.rfind(L\"/\");\n+  if (i != wstring::npos)\n+    aux.assign(aux, i + 1, wstring::npos);\n+  VERIFY(aux == L\"Hawaii\");\n+\n+  aux = strlit;\n+  i = aux.rfind(L\"r/\");\n+  if (i != wstring::npos)\n+    aux.assign(aux, i + 1, wstring::npos);\n+  VERIFY(aux.c_str()[9] == L'B');\n+  VERIFY(aux == L\"/Hanalei Bay/Kauai/Hawaii\");\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "458204c522e9b766ab9b3fb5b00684797ca13df4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,59 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// assign(const basic_string& __str, size_type __pos, size_type __n)\n+void\n+test02()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+  \n+  wstring one = L\"Selling England by the pound\";\n+  wstring two = one;\n+  wstring three = L\"Brilliant trees\";\n+\n+  one.assign(one, 8, 100);\n+  VERIFY( one == L\"England by the pound\" );\n+\n+  one.assign(one, 8, 0);\n+  VERIFY( one == L\"\" );\n+ \n+  one.assign(two, 8, 7);\n+  VERIFY( one == L\"England\" );\n+\n+  one.assign(three, 10, 100);\n+  VERIFY( one == L\"trees\" );\n+\n+  three.assign(one, 0, 3);\n+  VERIFY( three == L\"tre\" );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "fc9b5a21eea791064b70968da82bcc1479f7750d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/3.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,61 @@\n+// 2001-10-30 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5 string modifiers\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// assign(const _CharT* __s, size_type __n)\n+// assign(const _CharT* __s)\n+void\n+test03()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n+ \n+  wstring one; \n+  wstring two;\n+  wstring three = two;\n+  const wchar_t* source = L\"Selling England by the pound\";\n+\n+  one.assign(source);\n+  VERIFY( one == L\"Selling England by the pound\" );\n+\n+  one.assign(source, 28);\n+  VERIFY( one == L\"Selling England by the pound\" );\n+\n+  two.assign(source, 7);\n+  VERIFY( two == L\"Selling\" );\n+  \n+  one.assign(one.c_str() + 8, 20);\n+  VERIFY( one == L\"England by the pound\" );\n+\n+  one.assign(one.c_str() + 8, 6);\n+  VERIFY( one == L\"by the\" );\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "0a50ee7d9ed2a13b9bb40d509567bfe4f34347a7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "renamed", "additions": 5, "deletions": 88, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-05-11 bkoz\n \n-// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -125,37 +125,9 @@ namespace std\n \n void test01()\n {\n-  // 1 POD types : resize, capacity, reserve\n   bool test = true;\n-  std::string str01;\n-  typedef std::string::size_type size_type_s;\n-\n-  size_type_s sz01 = str01.capacity();\n-  str01.reserve(100);\n-  size_type_s sz02 = str01.capacity();\n-  VERIFY( sz02 >= sz01 );\n-  VERIFY( sz02 >= 100 );\n-  str01.reserve();\n-  sz01 = str01.capacity();\n-  VERIFY( sz01 >= 0 );\n-\n-  sz01 = str01.size() + 5;\n-  str01.resize(sz01);\n-  sz02 = str01.size();\n-  VERIFY( sz01 == sz02 );\n-\n-  sz01 = str01.size() - 5;\n-  str01.resize(sz01);\n-  sz02 = str01.size();\n-  VERIFY( sz01 == sz02 );\n-\n-  std::string str05(30, 'q');\n-  std::string str06 = str05;\n-  str05 = str06 + str05;\n-  VERIFY( str05.capacity() >= str05.size() );\n-  VERIFY( str06.capacity() >= str06.size() );\n-\n-  // 2 non POD types : resize, capacity, reserve\n+\n+  // non POD types : resize, capacity, reserve\n   std::basic_string< A<B> > str02;\n   typedef std::basic_string< A<B> >::size_type size_type_o;\n   size_type_o sz03;\n@@ -187,48 +159,8 @@ void test01()\n   VERIFY( str07.capacity() >= str07.size() );\n   VERIFY( str08.capacity() >= str08.size() );\n \n-  // 3 POD types: size, length, max_size, clear(), empty()\n-  bool b01;\n-  std::string str011;\n-  b01 = str01.empty();  \n-  VERIFY( b01 == true );\n-  sz01 = str01.size();\n-  sz02 = str01.length();\n-  VERIFY( sz01 == sz02 );\n-  str01.c_str();\n-  sz01 = str01.size();\n-  sz02 = str01.length();\n-  VERIFY( sz01 == sz02 );\n-\n-  sz01 = str01.length();\n-  str01.c_str();\n-  str011 = str01 +  \"_addendum_\";\n-  str01.c_str();\n-  sz02 = str01.length();    \n-  VERIFY( sz01 == sz02 );\n-  sz02 = str011.length();\n-  VERIFY( sz02 > sz01 );\n-    \n-  // trickster allocator issues involved with these:\n-  std::string str3 = \"8-chars_8-chars_\";\n-  const char* p3 = str3.c_str();\n-  std::string str4 = str3 + \"7-chars\";\n-  const char* p4 = str3.c_str();\n-  \n-  sz01 = str01.size();\n-  sz02 = str01.max_size();  \n-  VERIFY( sz02 >= sz01 );\n-\n-  sz01 = str01.size();\n-  str01.clear();  \n-  b01 = str01.empty(); \n-  VERIFY( b01 == true );\n-  sz02 = str01.size();  \n-  VERIFY( sz01 >= sz02 );\n-\n-\n-  // 4 non-POD types: size, length, max_size, clear(), empty()\n-  b01 = str02.empty();  \n+  // non-POD types: size, length, max_size, clear(), empty()\n+  bool b01 = str02.empty();  \n   VERIFY( b01 == true );\n   sz03 = str02.size();\n   sz04 = str02.length();\n@@ -249,19 +181,6 @@ void test01()\n   VERIFY( sz03 >= sz04 );\n }\n \n-// libstdc++/4548\n-// http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n-void test02()\n-{\n-  bool test = true;\n-\n-  std::string str01 = \"twelve chars\";\n-  // str01 becomes shared\n-  std::string str02 = str01;\n-  str01.reserve(1);\n-  VERIFY( str01.capacity() == 12 );\n-}\n-\n #if !__GXX_WEAK__\n // Explicitly instantiate for systems with no COMDAT or weak support.\n template \n@@ -276,7 +195,5 @@ template\n int main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/capacity.cc"}, {"sha": "6072898318a3f522ed554e2cd14eef4367fa7b37", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/1.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,102 @@\n+// 1999-05-11 bkoz\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  // POD types : resize, capacity, reserve\n+  bool test = true;\n+  std::string str01;\n+  typedef std::string::size_type size_type_s;\n+\n+  size_type_s sz01 = str01.capacity();\n+  str01.reserve(100);\n+  size_type_s sz02 = str01.capacity();\n+  VERIFY( sz02 >= sz01 );\n+  VERIFY( sz02 >= 100 );\n+  str01.reserve();\n+  sz01 = str01.capacity();\n+  VERIFY( sz01 >= 0 );\n+\n+  sz01 = str01.size() + 5;\n+  str01.resize(sz01);\n+  sz02 = str01.size();\n+  VERIFY( sz01 == sz02 );\n+\n+  sz01 = str01.size() - 5;\n+  str01.resize(sz01);\n+  sz02 = str01.size();\n+  VERIFY( sz01 == sz02 );\n+\n+  std::string str05(30, 'q');\n+  std::string str06 = str05;\n+  str05 = str06 + str05;\n+  VERIFY( str05.capacity() >= str05.size() );\n+  VERIFY( str06.capacity() >= str06.size() );\n+\n+  // POD types: size, length, max_size, clear(), empty()\n+  bool b01;\n+  std::string str011;\n+  b01 = str01.empty();  \n+  VERIFY( b01 == true );\n+  sz01 = str01.size();\n+  sz02 = str01.length();\n+  VERIFY( sz01 == sz02 );\n+  str01.c_str();\n+  sz01 = str01.size();\n+  sz02 = str01.length();\n+  VERIFY( sz01 == sz02 );\n+\n+  sz01 = str01.length();\n+  str01.c_str();\n+  str011 = str01 +  \"_addendum_\";\n+  str01.c_str();\n+  sz02 = str01.length();    \n+  VERIFY( sz01 == sz02 );\n+  sz02 = str011.length();\n+  VERIFY( sz02 > sz01 );\n+    \n+  // trickster allocator issues involved with these:\n+  std::string str3 = \"8-chars_8-chars_\";\n+  const char* p3 = str3.c_str();\n+  std::string str4 = str3 + \"7-chars\";\n+  const char* p4 = str3.c_str();\n+  \n+  sz01 = str01.size();\n+  sz02 = str01.max_size();  \n+  VERIFY( sz02 >= sz01 );\n+\n+  sz01 = str01.size();\n+  str01.clear();  \n+  b01 = str01.empty(); \n+  VERIFY( b01 == true );\n+  sz02 = str01.size();  \n+  VERIFY( sz01 >= sz02 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "731a91870657bc11e182541cbd2a246ee8e9ccd5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/2.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-05-11 bkoz\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/4548\n+// http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n+void test02()\n+{\n+  bool test = true;\n+\n+  std::string str01 = \"twelve chars\";\n+  // str01 becomes shared\n+  std::string str02 = str01;\n+  str01.reserve(1);\n+  VERIFY( str01.capacity() == 12 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "18af608d7d149ba1e9984082a44436d40cdaa027", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/1.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,102 @@\n+// 1999-05-11 bkoz\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  // POD types : resize, capacity, reserve\n+  bool test = true;\n+  std::wstring str01;\n+  typedef std::wstring::size_type size_type_s;\n+\n+  size_type_s sz01 = str01.capacity();\n+  str01.reserve(100);\n+  size_type_s sz02 = str01.capacity();\n+  VERIFY( sz02 >= sz01 );\n+  VERIFY( sz02 >= 100 );\n+  str01.reserve();\n+  sz01 = str01.capacity();\n+  VERIFY( sz01 >= 0 );\n+\n+  sz01 = str01.size() + 5;\n+  str01.resize(sz01);\n+  sz02 = str01.size();\n+  VERIFY( sz01 == sz02 );\n+\n+  sz01 = str01.size() - 5;\n+  str01.resize(sz01);\n+  sz02 = str01.size();\n+  VERIFY( sz01 == sz02 );\n+\n+  std::wstring str05(30, L'q');\n+  std::wstring str06 = str05;\n+  str05 = str06 + str05;\n+  VERIFY( str05.capacity() >= str05.size() );\n+  VERIFY( str06.capacity() >= str06.size() );\n+\n+  // POD types: size, length, max_size, clear(), empty()\n+  bool b01;\n+  std::wstring str011;\n+  b01 = str01.empty();  \n+  VERIFY( b01 == true );\n+  sz01 = str01.size();\n+  sz02 = str01.length();\n+  VERIFY( sz01 == sz02 );\n+  str01.c_str();\n+  sz01 = str01.size();\n+  sz02 = str01.length();\n+  VERIFY( sz01 == sz02 );\n+\n+  sz01 = str01.length();\n+  str01.c_str();\n+  str011 = str01 +  L\"_addendum_\";\n+  str01.c_str();\n+  sz02 = str01.length();    \n+  VERIFY( sz01 == sz02 );\n+  sz02 = str011.length();\n+  VERIFY( sz02 > sz01 );\n+    \n+  // trickster allocator issues involved with these:\n+  std::wstring str3 = L\"8-chars_8-chars_\";\n+  const wchar_t* p3 = str3.c_str();\n+  std::wstring str4 = str3 + L\"7-chars\";\n+  const wchar_t* p4 = str3.c_str();\n+  \n+  sz01 = str01.size();\n+  sz02 = str01.max_size();  \n+  VERIFY( sz02 >= sz01 );\n+\n+  sz01 = str01.size();\n+  str01.clear();  \n+  b01 = str01.empty(); \n+  VERIFY( b01 == true );\n+  sz02 = str01.size();  \n+  VERIFY( sz01 >= sz02 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "08aa2294bfa1f4b7431257abd2933d1257ca7fda", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/2.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-05-11 bkoz\n+\n+// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/4548\n+// http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n+void test02()\n+{\n+  bool test = true;\n+\n+  std::wstring str01 = L\"twelve chars\";\n+  // str01 becomes shared\n+  std::wstring str02 = str01;\n+  str01.reserve(1);\n+  VERIFY( str01.capacity() == 12 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "02b6b79037b0c420044863a1480218d9a025473a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/compare/char/1.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 980930 bkoz work with libstdc++v3\n \n-// Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -132,6 +132,5 @@ int\n main() \n {\n   test01();\n-  \n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/compare.cc"}, {"sha": "25f8abdab971ab6366a040c2d0a4873521a5102a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/compare/wchar_t/1.cc", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcompare%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,136 @@\n+// 980930 bkoz work with libstdc++v3\n+\n+// Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.8 basic_string::compare\n+// int compare(const basic_string& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string& str) const;\n+// int compare(size_type pos1, size_type n1, const basic_string& str,\n+//             size_type pos2, size_type n2) const;\n+// int compare(const charT* s) const;\n+// int compare(size_type pos1, size_type n1,\n+//             const charT* s, size_type n2 = npos) const;\n+\n+// NB compare should be thought of as a lexographical compare, ie how\n+// things would be sorted in a dictionary.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+enum want_value {lt=0, z=1, gt=2};\n+\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n+  bool pass = false;\n+\n+  switch (expected) {\n+  case lt:\n+    if (result < 0)\n+      pass = true;\n+    break;\n+  case z:\n+    if (!result)\n+      pass = true;\n+    break;\n+  case gt:\n+    if (result > 0)\n+      pass = true;\n+    break;\n+  default:\n+    pass = false; //should not get here\n+  }\n+\n+#ifdef DEBUG_ASSERT\n+  assert(pass);\n+#endif\n+  \n+  return 0;\n+}\n+ \n+\n+int \n+test01()\n+{\n+  using namespace std;\n+\n+  wstring \tstr_0(L\"costa rica\");\n+  wstring \tstr_1(L\"costa marbella\");\n+  wstring \tstr_2;\n+\n+  //sanity check\n+  test_value(wcscmp(L\"costa marbella\", L\"costa rica\"), lt); \n+  test_value(wcscmp(L\"costa rica\", L\"costa rica\"), z);\n+  test_value(wcscmp(str_1.data(), str_0.data()), lt);\n+  test_value(wcscmp(str_0.data(), str_1.data()), gt);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wcsncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 6), z);\n+  test_value(wmemcmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(wmemcmp(L\"costa marbella\", L\"costa rica\", 14), lt);\n+\n+  // int compare(const basic_string& str) const;\n+  test_value(str_0.compare(str_1), gt); //because r>m\n+  test_value(str_1.compare(str_0), lt); //because m<r\n+  str_2 = str_0;\n+  test_value(str_2.compare(str_0), z);\n+  str_2 = L\"cost\";\n+  test_value(str_2.compare(str_0), lt);\n+  str_2 = L\"costa ricans\";\n+  test_value(str_2.compare(str_0), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string& str) const;\n+  test_value(str_1.compare(0, 6, str_0), lt);\n+  str_2 = L\"cost\";\n+  test_value(str_1.compare(0, 4, str_2), z);\n+  test_value(str_1.compare(0, 5, str_2), gt);\n+\n+  // int compare(size_type pos1, size_type n1, const basic_string& str, \n+  //\t\t size_type pos2, size_type n2) const;\t\n+  test_value(str_1.compare(0, 6, str_0, 0, 6), z);\n+  test_value(str_1.compare(0, 7, str_0, 0, 7), lt);\n+  test_value(str_0.compare(0, 7, str_1, 0, 7), gt);\n+\n+  // int compare(const charT* s) const;\n+  test_value(str_0.compare(L\"costa marbella\"), gt);\n+  test_value(str_1.compare(L\"costa rica\"), lt);\n+  str_2 = str_0;\n+  test_value(str_2.compare(L\"costa rica\"), z);\n+  test_value(str_2.compare(L\"cost\"), gt);\t\t\t\n+  test_value(str_2.compare(L\"costa ricans\"), lt);\t   \n+\n+  // int compare(size_type pos, size_type n1, const charT* str,\n+  //             size_type n2 = npos) const;\n+  test_value(str_1.compare(0, 6, L\"costa rica\", 0, 6), z); \n+  test_value(str_1.compare(0, 7, L\"costa rica\", 0, 7), lt); \n+  test_value(str_0.compare(0, 7, L\"costa marbella\", 0, 7), gt); \n+\n+  return 0;\n+}\n+\n+\n+int \n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3c92910f312aa047d58b5852ee6d244b5d0ed654", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/1.cc", "status": "renamed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -22,7 +22,6 @@\n \n #include <new>\n #include <string>\n-#include <vector>\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n@@ -154,87 +153,9 @@ void test01(void)\n   VERIFY( str06 == str01 );\n }\n \n-void test02()\n-{\n-  bool test = true;\n-\n-  // template<typename _InputIter>\n-  //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n-  // where _InputIter is integral [21.3.1 para 15]\n-  std::string s(10,0);\n-  VERIFY( s.size() == 10 );\n-}\n-\n-void test03()\n-{\n-  bool test = true;\n-  const char* with_nulls = \"This contains \\0 a zero byte.\";\n-\n-  // These are tests to see how basic_string handles data with NUL\n-  // bytes.  Obviously basic_string(char*) will halt at the first one, but\n-  // nothing else should.\n-  std::string s1 (with_nulls, 28);\n-  VERIFY( s1.size() == 28 );\n-  std::string s2 (s1);\n-  VERIFY( s2.size() == 28 );\n-\n-  // Not defined, but libstdc++ throws an exception.\n-  const char* bogus = 0;\n-  try \n-    {\n-      std::string str1(bogus);\n-      VERIFY( false );\n-    }\t\t \n-  catch(std::exception& fail) \n-    {\n-      VERIFY( true );\n-    }\n-\n-  // Not defined, but libstdc++ throws an exception.\n-  try \n-    {\n-      std::string str2(bogus, 5);\n-      VERIFY( false );\n-    }\t\t \n-  catch(std::exception& fail) \n-    {\n-      VERIFY( true );\n-    }\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-06/msg00025.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  std::string str01(\"portofino\");\n-\n-  std::string::reverse_iterator i1 = str01.rbegin();\n-  std::string::reverse_iterator i2 = str01.rend();\n-  std::string str02(i1, i2);\n-  VERIFY( str02 == \"onifotrop\" );\n-}\n-\n-// libstdc++/8347\n-void test05()\n-{\n-  bool test = true;\n-\n-  std::vector<char> empty;\n-  std::string empty2(empty.begin(), empty.end());\n-\n-  // libstdc++/8716 (same underlying situation, same fix)\n-  char const * s = NULL;\n-  std::string zero_length_built_with_NULL(s,0);\n-}\n-\n int main()\n { \n   __gnu_cxx_test::set_memory_limits();\n   test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc"}, {"sha": "d6458a9671255fc5e2e1915d796f9dce207b35d1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,41 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  bool test = true;\n+\n+  // template<typename _InputIter>\n+  //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n+  // where _InputIter is integral [21.3.1 para 15]\n+  std::string s(10,0);\n+  VERIFY( s.size() == 10 );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "6f40dda1833e693938d92744e5e571f1fcaead8e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/3.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,69 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <new>\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  bool test = true;\n+  const char* with_nulls = \"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string handles data with NUL\n+  // bytes.  Obviously basic_string(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::string s1 (with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::string s2 (s1);\n+  VERIFY( s2.size() == 28 );\n+\n+  // Not defined, but libstdc++ throws an exception.\n+  const char* bogus = 0;\n+  try \n+    {\n+      std::string str1(bogus);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n+\n+  // Not defined, but libstdc++ throws an exception.\n+  try \n+    {\n+      std::string str2(bogus, 5);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "fe2f32132157e102a7a356a1ac71056d71c0dcc4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/4.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-06/msg00025.html\n+void test04()\n+{\n+  bool test = true;\n+\n+  std::string str01(\"portofino\");\n+\n+  std::string::reverse_iterator i1 = str01.rbegin();\n+  std::string::reverse_iterator i2 = str01.rend();\n+  std::string str02(i1, i2);\n+  VERIFY( str02 == \"onifotrop\" );\n+}\n+\n+int main()\n+{ \n+  test04();\n+  return 0;\n+}"}, {"sha": "4b2f4015854a4b7ab96e837d805fc2d15622dca3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/5.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,44 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8347\n+void test05()\n+{\n+  bool test = true;\n+\n+  std::vector<char> empty;\n+  std::string empty2(empty.begin(), empty.end());\n+\n+  // libstdc++/8716 (same underlying situation, same fix)\n+  char const * s = NULL;\n+  std::string zero_length_built_with_NULL(s,0);\n+}\n+\n+int main()\n+{ \n+  test05();\n+  return 0;\n+}"}, {"sha": "eeb3516d23640efdaf7f56cba93b253a42fc6c00", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/1.cc", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,161 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <new>\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::iterator citerator;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n+  const std::wstring str01(str_lit01);\n+  const std::wstring str02(L\"baker beach, san francisco\");\n+\n+  // basic_string(const wstring&, size_type pos = 0, siz_type n = npos, alloc)\n+  csz01 = str01.size();\n+  try {\n+    std::wstring str03(str01, csz01 + 1);\n+    VERIFY( false );\n+  }\t\t \n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  try {\n+    std::wstring str03(str01, csz01);\n+    VERIFY( str03.size() == 0 );\n+    VERIFY( str03.size() <= str03.capacity() );\n+  }\t\t \n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  // basic_string(const wchar_t* s, size_type n, alloc)\n+  csz01 = str01.max_size();\n+  // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n+  // should not crash, but what gets constructed is a bit arbitrary.\n+  try {\n+    std::wstring str03(str_lit01, csz01 + 1);\n+    VERIFY( true );\n+  }\t\t \n+  catch(std::length_error& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n+  // should not crash, but what gets constructed is a bit arbitrary.\n+  // The \"maverick's\" of all string objects.\n+  try {\n+    std::wstring str04(str_lit01, npos); \n+    VERIFY( true );\n+  }\t\t \n+  catch(std::length_error& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  // Build a maxsize - 1 lengthed string consisting of all A's\n+  try {\n+    std::wstring str03(csz01 - 1, 'A');\n+    VERIFY( str03.size() == csz01 - 1 );\n+    VERIFY( str03.size() <= str03.capacity() );\n+  }\t\t \n+  // NB: bad_alloc is regrettable but entirely kosher for\n+  // out-of-memory situations.\n+  catch(std::bad_alloc& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  // basic_string(const wchar_t* s, const allocator& a = allocator())\n+  std::wstring str04(str_lit01);\n+  VERIFY( str01 == str04 );\n+\n+\n+  // basic_string(size_type n, char c, const allocator& a = allocator())\n+  csz01 = str01.max_size();\n+  try {\n+    std::wstring str03(csz01 + 1, L'z');\n+    VERIFY( false );\n+  }\t\t \n+  catch(std::length_error& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  try {\n+    std::wstring str04(npos, L'b'); // the \"maverick's\" of all string objects.\n+    VERIFY( false );\n+  }\t\t \n+  catch(std::length_error& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  try {\n+    std::wstring str03(csz01 - 1, L'z');\n+    VERIFY( str03.size() != 0 );\n+    VERIFY( str03.size() <= str03.capacity() );\n+  }\t\t \n+  // NB: bad_alloc is regrettable but entirely kosher for\n+  // out-of-memory situations.\n+  catch(std::bad_alloc& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+\n+  // template<typename _InputIter>\n+  //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n+  std::wstring str06(str01.begin(), str01.end());\n+  VERIFY( str06 == str01 );\n+}\n+\n+int main()\n+{ \n+  __gnu_cxx_test::set_memory_limits();\n+  test01();\n+  return 0;\n+}"}, {"sha": "9eaf4ce2700f3bbcbcc236515258a29b8c285389", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,41 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  bool test = true;\n+\n+  // template<typename _InputIter>\n+  //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n+  // where _InputIter is integral [21.3.1 para 15]\n+  std::wstring s(10, 0);\n+  VERIFY( s.size() == 10 );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "46b7287b0e011ccadb828f8c237dece13135b19f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/3.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,69 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <new>\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  bool test = true;\n+  const wchar_t* with_nulls = L\"This contains \\0 a zero byte.\";\n+\n+  // These are tests to see how basic_string handles data with NUL\n+  // bytes.  Obviously basic_string(char*) will halt at the first one, but\n+  // nothing else should.\n+  std::wstring s1 (with_nulls, 28);\n+  VERIFY( s1.size() == 28 );\n+  std::wstring s2 (s1);\n+  VERIFY( s2.size() == 28 );\n+\n+  // Not defined, but libstdc++ throws an exception.\n+  const wchar_t* bogus = 0;\n+  try \n+    {\n+      std::wstring str1(bogus);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n+\n+  // Not defined, but libstdc++ throws an exception.\n+  try \n+    {\n+      std::wstring str2(bogus, 5);\n+      VERIFY( false );\n+    }\t\t \n+  catch(std::exception& fail) \n+    {\n+      VERIFY( true );\n+    }\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "87dab121eab60b774dcd6b0316ff47660b942b7b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/4.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2002-06/msg00025.html\n+void test04()\n+{\n+  bool test = true;\n+\n+  std::wstring str01(L\"portofino\");\n+\n+  std::wstring::reverse_iterator i1 = str01.rbegin();\n+  std::wstring::reverse_iterator i2 = str01.rend();\n+  std::wstring str02(i1, i2);\n+  VERIFY( str02 == L\"onifotrop\" );\n+}\n+\n+int main()\n+{ \n+  test04();\n+  return 0;\n+}"}, {"sha": "d02dc9c8f4b48c8d6463f4221b363df35c5dd9a9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/5.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,44 @@\n+// 1999-06-04 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <string>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8347\n+void test05()\n+{\n+  bool test = true;\n+\n+  std::vector<wchar_t> empty;\n+  std::wstring empty2(empty.begin(), empty.end());\n+\n+  // libstdc++/8716 (same underlying situation, same fix)\n+  wchar_t const * s = NULL;\n+  std::wstring zero_length_built_with_NULL(s,0);\n+}\n+\n+int main()\n+{ \n+  test05();\n+  return 0;\n+}"}, {"sha": "069aa27868058885fb85a2385425636942414482", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-08 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/element_access.cc"}, {"sha": "fbfa0136b67e4148f340f57a9709032662e04fe5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/2.cc", "status": "renamed", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-08 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -108,68 +108,8 @@ bool test01(void)\n   return test;\n }\n \n-// Do another sanity check, this time for member functions that return\n-// iterators, namely insert and erase.\n-bool test02(void)\n-{\n-  bool test = true;\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::iterator siterator;\n-  typedef std::string::reverse_iterator sriterator;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n-  siterator it1;\n-  sriterator rit1;  \n-\n-  const std::string str01(\"its beach, santa cruz\");\n-\n-  std::string str02 = str01;\n-  std::string str05 = str02; // optional, so that begin below causes a mutate\n-  std::string::iterator p = str02.insert(str02.begin(), ' ');\n-  std::string str03 = str02;\n-  VERIFY( str03 == str02 );\n-  *p = '!';\n-  VERIFY( *str03.c_str() == ' ' );\n-  str03[0] = '@';\n-  VERIFY( str02[0] == '!' );\n-  VERIFY( *p == '!' );\n-  VERIFY( str02 != str05 );\n-  VERIFY( str02 != str03 );\n-\n-  std::string str10 = str01;\n-  std::string::iterator p2 = str10.insert(str10.begin(), 'a');\n-  std::string str11 = str10;\n-  *p2 = 'e';\n-  VERIFY( str11 != str10 );\n-\n-  std::string str06 = str01;\n-  std::string str07 = str06; // optional, so that begin below causes a mutate\n-  p = str06.erase(str06.begin());\n-  std::string str08 = str06;\n-  VERIFY( str08 == str06 );\n-  *p = '!';\n-  VERIFY( *str08.c_str() == 't' );\n-  str08[0] = '@';\n-  VERIFY( str06[0] == '!' );\n-  VERIFY( *p == '!' );\n-  VERIFY( str06 != str07 );\n-  VERIFY( str06 != str08 );\n-\n-  std::string str12 = str01;\n-  p2 = str12.erase(str12.begin(), str12.begin() + str12.size() - 1);\n-  std::string str13 = str12;\n-  *p2 = 'e';\n-  VERIFY( str12 != str13 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n int main()\n { \n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/invariants.cc"}, {"sha": "426d0e3963861775bffb2cbb126c2918b0ef1eef", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/3.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,90 @@\n+// 1999-06-08 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3 template class basic_string\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// Do another sanity check, this time for member functions that return\n+// iterators, namely insert and erase.\n+bool test02(void)\n+{\n+  bool test = true;\n+  typedef std::string::size_type csize_type;\n+  typedef std::string::iterator siterator;\n+  typedef std::string::reverse_iterator sriterator;\n+  csize_type npos = std::string::npos;\n+  csize_type csz01, csz02;\n+  siterator it1;\n+  sriterator rit1;  \n+\n+  const std::string str01(\"its beach, santa cruz\");\n+\n+  std::string str02 = str01;\n+  std::string str05 = str02; // optional, so that begin below causes a mutate\n+  std::string::iterator p = str02.insert(str02.begin(), ' ');\n+  std::string str03 = str02;\n+  VERIFY( str03 == str02 );\n+  *p = '!';\n+  VERIFY( *str03.c_str() == ' ' );\n+  str03[0] = '@';\n+  VERIFY( str02[0] == '!' );\n+  VERIFY( *p == '!' );\n+  VERIFY( str02 != str05 );\n+  VERIFY( str02 != str03 );\n+\n+  std::string str10 = str01;\n+  std::string::iterator p2 = str10.insert(str10.begin(), 'a');\n+  std::string str11 = str10;\n+  *p2 = 'e';\n+  VERIFY( str11 != str10 );\n+\n+  std::string str06 = str01;\n+  std::string str07 = str06; // optional, so that begin below causes a mutate\n+  p = str06.erase(str06.begin());\n+  std::string str08 = str06;\n+  VERIFY( str08 == str06 );\n+  *p = '!';\n+  VERIFY( *str08.c_str() == 't' );\n+  str08[0] = '@';\n+  VERIFY( str06[0] == '!' );\n+  VERIFY( *p == '!' );\n+  VERIFY( str06 != str07 );\n+  VERIFY( str06 != str08 );\n+\n+  std::string str12 = str01;\n+  p2 = str12.erase(str12.begin(), str12.begin() + str12.size() - 1);\n+  std::string str13 = str12;\n+  *p2 = 'e';\n+  VERIFY( str12 != str13 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "00394cf36c8c59af5661e1c622386240d05a45d6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/1.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,94 @@\n+// 1999-06-08 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.4 basic_string element access\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const std::wstring str01(L\"tamarindo, costa rica\");\n+  std::wstring str02(L\"41st street beach, capitola, california\");\n+  std::wstring str03;\n+\n+  // const_reference operator[] (size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref1 = str01[csz01 - 1];\n+  VERIFY( cref1 == L'a' );\n+  cref cref2 = str01[csz01];\n+  VERIFY( cref2 == wchar_t() );\n+\n+  // reference operator[] (size_type pos);\n+  csz02 = str02.size();\n+  ref ref1 = str02[csz02 - 1];\n+  VERIFY( ref1 == L'a' );\n+  ref ref2 = str02[1];\n+  VERIFY( ref2 == L'1' );\n+\n+  // const_reference at(size_type pos) const;\n+  csz01 = str01.size();\n+  cref cref3 = str01.at(csz01 - 1);\n+  VERIFY( cref3 == L'a' );\n+  try {\n+    cref cref4 = str01.at(csz01);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  // reference at(size_type pos);\n+  csz01 = str02.size();\n+  ref ref3 = str02.at(csz02 - 1);\n+  VERIFY( ref3 == L'a' );\n+  try {\n+    ref ref4 = str02.at(csz02);\n+    VERIFY( false ); // Should not get here, as exception thrown.\n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "37aec1c93ce480798e6b5937e389e27054fbf25c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/2.cc", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,115 @@\n+// 1999-06-08 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3 template class basic_string\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// Do a quick sanity check on known problems with element access and\n+// ref-counted strings. These should all pass, regardless of the\n+// underlying string implementation, of course.\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::iterator siterator;\n+  typedef std::wstring::reverse_iterator sriterator;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+  siterator it1;\n+  sriterator rit1;  \n+\n+  std::wstring str01(L\"montara beach, half moon bay\");\n+  const std::wstring str02(L\"ocean beach, san francisco\");\n+  std::wstring str03;\n+\n+  // 21.3 p 5\n+\n+  // References, pointers, and iterators referring to the elements of\n+  // a basic_string may be invalidated by the following uses of that\n+  // basic_string object:\n+\n+  // ...\n+\n+  // Susequent to any of the above uses except the forms of insert()\n+  // and erase() which return iterators, the first call to non-const\n+  // member functions operator[](), at(), begin(), rbegin(), end(), or\n+  // rend()\n+\n+  str03 = str01;\n+  it1 = str01.begin();\n+  *it1 = L'x';\n+  VERIFY( str01[0] == L'x' );\n+  VERIFY( str03[0] == L'm' );\n+\n+  str03 = str01; \n+  csz01 = str01.size();\n+  rit1 = str01.rbegin(); // NB: Pointing at one-past the end, so ...\n+  *rit1 = L'z'; \t // ... but it's taken care of here \n+  VERIFY( str01[csz01 - 1] == L'z' );\n+  VERIFY( str03[csz01 - 1] == L'y' );\n+\n+  str03 = str01;\n+  csz01 = str01.size();\n+  std::wstring::reference r1 = str01.at(csz01 - 2);\n+  VERIFY( str03 == str01 );\n+  r1 = L'd';\n+  VERIFY( str01[csz01 - 2] == L'd' );\n+  VERIFY( str03[csz01 - 2] == L'a' );\n+\n+  str03 = str01; \n+  csz01 = str01.size();\n+  std::wstring::reference r2 = str01[csz01 - 3];\n+  VERIFY( str03 == str01 );\n+  r2 = L'w'; \n+  VERIFY( str01[csz01 - 3] == L'w' );\n+  VERIFY( str03[csz01 - 3] == L'b' );\n+\n+  str03 = str01;\n+  csz02 = str01.size();\n+  it1 = str01.end();\n+  VERIFY( str03 == str01 );\n+  --it1;\n+  *it1 = L'q'; \n+  VERIFY( str01[csz02 - 1] == L'q' );\n+  VERIFY( str03[csz02 - 1] == L'z' );\n+\n+  str03 = str01;\n+  rit1 = str01.rend();\n+  VERIFY( str03 == str01 );\n+  --rit1; \t\n+  *rit1 = L'p'; \n+  VERIFY( str01[0] == L'p' );\n+  VERIFY( str03[0] == L'x' );\n+\n+  // need to also test for const begin/const end\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "b7710382ca8dc1c4a4de25ea5d76496d5187b17b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/3.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,90 @@\n+// 1999-06-08 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3 template class basic_string\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// Do another sanity check, this time for member functions that return\n+// iterators, namely insert and erase.\n+bool test02(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::iterator siterator;\n+  typedef std::wstring::reverse_iterator sriterator;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+  siterator it1;\n+  sriterator rit1;  \n+\n+  const std::wstring str01(L\"its beach, santa cruz\");\n+\n+  std::wstring str02 = str01;\n+  std::wstring str05 = str02; // optional, so that begin below causes a mutate\n+  std::wstring::iterator p = str02.insert(str02.begin(), L' ');\n+  std::wstring str03 = str02;\n+  VERIFY( str03 == str02 );\n+  *p = L'!';\n+  VERIFY( *str03.c_str() == L' ' );\n+  str03[0] = L'@';\n+  VERIFY( str02[0] == L'!' );\n+  VERIFY( *p == L'!' );\n+  VERIFY( str02 != str05 );\n+  VERIFY( str02 != str03 );\n+\n+  std::wstring str10 = str01;\n+  std::wstring::iterator p2 = str10.insert(str10.begin(), L'a');\n+  std::wstring str11 = str10;\n+  *p2 = L'e';\n+  VERIFY( str11 != str10 );\n+\n+  std::wstring str06 = str01;\n+  std::wstring str07 = str06; // optional, so that begin below causes a mutate\n+  p = str06.erase(str06.begin());\n+  std::wstring str08 = str06;\n+  VERIFY( str08 == str06 );\n+  *p = L'!';\n+  VERIFY( *str08.c_str() == L't' );\n+  str08[0] = L'@';\n+  VERIFY( str06[0] == L'!' );\n+  VERIFY( *p == L'!' );\n+  VERIFY( str06 != str07 );\n+  VERIFY( str06 != str08 );\n+\n+  std::wstring str12 = str01;\n+  p2 = str12.erase(str12.begin(), str12.begin() + str12.size() - 1);\n+  std::wstring str13 = str12;\n+  *p2 = L'e';\n+  VERIFY( str12 != str13 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "e59f577374aff1cc793fb28432cad8fbb583fa11", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-09 bkoz\n \n-// Copyright (C) 1994, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/find.cc"}, {"sha": "4cd643ebcf5a8c303d947f69c6267ab51a3bfc79", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/1.cc", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,198 @@\n+// 1999-06-09 bkoz\n+\n+// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.1 basic_string find\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring str01(L\"mavericks, santa cruz\");\n+  std::wstring str02(str_lit01);\n+  std::wstring str03(L\"s, s\");\n+  std::wstring str04;\n+\n+  // size_type find(const wstring&, size_type pos = 0) const;\n+  csz01 = str01.find(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str01, 4);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str02, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find(str03, 12);\n+  VERIFY( csz01 == npos );\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  csz01 = str01.find(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.find(str04, str01.size());\n+  VERIFY( csz01 == str01.size() ); \n+  csz01 = str01.find(str04, str01.size()+1);\n+  VERIFY( csz01 == npos ); \n+  \n+  // size_type find(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.find(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find(str_lit01, 3);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.find(L'/');\n+  VERIFY( csz01 == npos );\n+   \n+  // size_type find_first_of(const wstring&, size_type pos = 0) const;\n+  std::wstring str05(L\"xena rulez\");\n+  csz01 = str01.find_first_of(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str01, 4);\n+  VERIFY( csz01 == 4 );\n+  csz01 = str01.find_first_of(str02, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str02, 3);\n+  VERIFY( csz01 == 3 );\n+  csz01 = str01.find_first_of(str03, 0);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 3);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.find_first_of(str03, 12);\n+  VERIFY( csz01 == 16 );\n+  csz01 = str01.find_first_of(str05, 0);\n+  VERIFY( csz01 == 1 );\n+  csz01 = str01.find_first_of(str05, 4);\n+  VERIFY( csz01 == 4 );\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  // However, str1.find_first_of(str2,pos) finds the first character in \n+  // str1 (starting at pos) that exists in str2, which is none for empty str2\n+  csz01 = str01.find_first_of(str04, 0);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.find_first_of(str04, 5);\n+  VERIFY( csz01 == npos );\n+  \n+  // size_type find_first_of(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.find_first_of(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3, 0);\n+  VERIFY( csz01 == npos );\n+\n+  // size_type find_first_of(const char* s, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.find_first_of(str_lit01, 3);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type find_first_of(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.find_first_of(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+\n+  // size_type find_last_of(const wstring& str, size_type pos = 0) const;\n+  // size_type find_last_of(const wchar_t* s, size_type pos, size_type n) const;\n+  // size_type find_last_of(const wchar_t* s, size_type pos = 0) const;\n+  // size_type find_last_of(wchar_t c, size_type pos = 0) const;\n+\n+#if 1\n+// from tstring.cc, from jason merrill, et. al.\n+  std::wstring x;\n+  std::wstring::size_type pos;\n+  pos = x.find_last_not_of(L'X');\n+  VERIFY( pos == npos );\n+  pos = x.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring y(L\"a\");\n+  pos = y.find_last_not_of(L'X');\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L'a');\n+  VERIFY( pos == npos );\n+  pos = y.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 0 );\n+  pos = y.find_last_not_of(L\"a\");\n+  VERIFY( pos == npos );\n+\n+  std::wstring z(L\"ab\");\n+  pos = z.find_last_not_of(L'X');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L\"XYZ\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_not_of(L'b');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xb\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_not_of(L\"Xa\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"ab\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"Xa\");\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L\"Xb\");\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L\"XYZ\");\n+  VERIFY( pos == std::wstring::npos );\n+  pos = z.find_last_of(L'a');\n+  VERIFY( pos == 0 );\n+  pos = z.find_last_of(L'b');\n+  VERIFY( pos == 1 );\n+  pos = z.find_last_of(L'X');\n+  VERIFY( pos == std::wstring::npos );\n+#endif\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "a6052e2170b54a8a0799a6ebca6233977e68a211", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/char/1.cc", "status": "renamed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -187,67 +187,9 @@ int test01(void)\n   return test;\n }\n \n-// Once more\n-//   string& insert(size_type __p, const char* s, size_type n);\n-//   string& insert(size_type __p, const char* s);\n-// but now s points inside the _Rep\n-int test02(void)\n-{\n-  bool test = true;\n-\n-  std::string str01;\n-  const char* title = \"Everything was beautiful, and nothing hurt\";\n-  // Increasing size: str01 is reallocated every time.\n-  str01 = title;\n-  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n-  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(0, str01.c_str(), 5);\n-  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(10, str01.c_str() + 4, 6);\n-  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(15, str01.c_str(), 10);\n-  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(15, str01.c_str() + 11, 13);\n-  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(0, str01.c_str());\n-  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n-\t  \"Everything was beautiful, and nothing hurt\");\n-  // Again: no reallocations.\n-  str01 = title;\n-  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n-  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(0, str01.c_str(), 5);\n-  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(10, str01.c_str() + 4, 6);\n-  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(15, str01.c_str(), 10);\n-  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(15, str01.c_str() + 11, 13);\n-  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n-  str01 = title;\n-  str01.insert(0, str01.c_str());\n-  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n-\t  \"Everything was beautiful, and nothing hurt\");\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n int main()\n { \n   __gnu_cxx_test::set_memory_limits();\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/insert.cc"}, {"sha": "80b0cee58b7a8cc81e1db1c5fbbeec66d5f2ed6a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/char/2.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,87 @@\n+// 1999-06-03 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.4 basic_string::insert\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// More\n+//   string& insert(size_type __p, const char* s, size_type n);\n+//   string& insert(size_type __p, const char* s);\n+// but now s points inside the _Rep\n+int test02(void)\n+{\n+  bool test = true;\n+\n+  std::string str01;\n+  const char* title = \"Everything was beautiful, and nothing hurt\";\n+  // Increasing size: str01 is reallocated every time.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n+\t  \"Everything was beautiful, and nothing hurt\");\n+  // Again: no reallocations.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == \"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == \"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == \"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == \"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == \"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == \"Everything was beautiful, and nothing hurt\"\n+\t  \"Everything was beautiful, and nothing hurt\");\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "96f71b0839e997022788877896851bb55daf583a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/wchar_t/1.cc", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,195 @@\n+// 1999-06-03 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.4 basic_string::insert\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::iterator citerator;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const std::wstring str01(L\"rodeo beach, marin\");\n+  const std::wstring str02(L\"baker beach, san francisco\");\n+  std::wstring str03;\n+\n+  // wstring& insert(size_type p1, const wstring& str, size_type p2, size_type n)\n+  // requires:\n+  //   1) p1 <= size()\n+  //   2) p2 <= str.size()\n+  //   3) rlen = min(n, str.size() - p2)\n+  // throws:\n+  //   1) out_of_range if p1 > size() || p2 > str.size()\n+  //   2) length_error if size() >= npos - rlen\n+  // effects:\n+  // replaces *this with new wstring of length size() + rlen such that\n+  // nstr[0]  to nstr[p1] == thisstr[0] to thisstr[p1]\n+  // nstr[p1 + 1] to nstr[p1 + rlen] == str[p2] to str[p2 + rlen]\n+  // nstr[p1 + 1 + rlen] to nstr[...] == thisstr[p1 + 1] to thisstr[...]  \n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  try {\n+    str03.insert(csz01 + 1, str02, 0, 5);\n+    VERIFY( false );\n+  }\t\t \n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  try {\n+    str03.insert(0, str02, csz02 + 1, 5);\n+    VERIFY( false );\n+  }\t\t \n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+  csz01 = str01.max_size();\n+  try {\n+    std::wstring str04(csz01, L'b'); \n+    str03 = str04; \n+    csz02 = str02.size();\n+    try {\n+      str03.insert(0, str02, 0, 5);\n+      VERIFY( false );\n+    }\t\t \n+    catch(std::length_error& fail) {\n+      VERIFY( true );\n+    }\n+    catch(...) {\n+      VERIFY( false );\n+    }\n+  }\n+  catch(std::bad_alloc& failure){\n+    VERIFY( true ); \n+  }\n+  catch(std::exception& failure){\n+    VERIFY( false );\n+  }\n+\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  str03.insert(13, str02, 0, 12); \n+  VERIFY( str03 == L\"rodeo beach, baker beach,marin\" );\n+\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  str03.insert(0, str02, 0, 12); \n+  VERIFY( str03 == L\"baker beach,rodeo beach, marin\" );\n+\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  str03.insert(csz01, str02, 0, csz02); \n+  VERIFY( str03 == L\"rodeo beach, marinbaker beach, san francisco\" );\n+\n+  // wstring& insert(size_type __p, const wstring& wstr);\n+  // insert(p1, str, 0, npos)\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  str03.insert(csz01, str02); \n+  VERIFY( str03 == L\"rodeo beach, marinbaker beach, san francisco\" );\n+\n+  str03 = str01; \n+  csz01 = str03.size();\n+  csz02 = str02.size();\n+  str03.insert(0, str02); \n+  VERIFY( str03 == L\"baker beach, san franciscorodeo beach, marin\" );\n+\n+  // wstring& insert(size_type __p, const wchar_t* s, size_type n);\n+  // insert(p1, wstring(s,n))\n+  str03 = str02; \n+  csz01 = str03.size();\n+  str03.insert(0, L\"-break at the bridge\", 20); \n+  VERIFY( str03 == L\"-break at the bridgebaker beach, san francisco\" );\n+\n+  // wstring& insert(size_type __p, const wchar_t* s);\n+  // insert(p1, wstring(s))\n+  str03 = str02; \n+  str03.insert(0, L\"-break at the bridge\"); \n+  VERIFY( str03 == L\"-break at the bridgebaker beach, san francisco\" );\n+\n+  // wstring& insert(size_type __p, size_type n, wchar_t c)\n+  // insert(p1, wstring(n,c))\n+  str03 = str02; \n+  csz01 = str03.size();\n+  str03.insert(csz01, 5, L'z'); \n+  VERIFY( str03 == L\"baker beach, san franciscozzzzz\" );\n+\n+  // iterator insert(iterator p, wchar_t c)\n+  // inserts a copy of c before the character referred to by p\n+  str03 = str02; \n+  citerator cit01 = str03.begin();\n+  str03.insert(cit01, L'u'); \n+  VERIFY( str03 == L\"ubaker beach, san francisco\" );\n+\n+  // iterator insert(iterator p, size_type n,  wchar_t c)\n+  // inserts n copies of c before the character referred to by p\n+  str03 = str02; \n+  cit01 = str03.begin();\n+  str03.insert(cit01, 5, L'u'); \n+  VERIFY( str03 == L\"uuuuubaker beach, san francisco\" );\n+\n+  // template<inputit>\n+  //   void \n+  //   insert(iterator p, inputit first, inputit, last)\n+  // ISO-14882: defect #7 part 1 clarifies this member function to be:\n+  // insert(p - begin(), wstring(first,last))\n+  str03 = str02; \n+  csz01 = str03.size();\n+  str03.insert(str03.begin(), str01.begin(), str01.end()); \n+  VERIFY( str03 == L\"rodeo beach, marinbaker beach, san francisco\" );\n+\n+  str03 = str02; \n+  csz01 = str03.size();\n+  str03.insert(str03.end(), str01.begin(), str01.end()); \n+  VERIFY( str03 == L\"baker beach, san franciscorodeo beach, marin\" );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  __gnu_cxx_test::set_memory_limits();\n+  test01();\n+  return 0;\n+}"}, {"sha": "04cc454e14bbd64703afcc3320119944d33e5482", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/wchar_t/2.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,87 @@\n+// 1999-06-03 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.4 basic_string::insert\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// More\n+//   wstring& insert(size_type __p, const wchar_t* s, size_type n);\n+//   wstring& insert(size_type __p, const wchar_t* s);\n+// but now s points inside the _Rep\n+int test02(void)\n+{\n+  bool test = true;\n+\n+  std::wstring str01;\n+  const wchar_t* title = L\"Everything was beautiful, and nothing hurt\";\n+  // Increasing size: str01 is reallocated every time.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == L\"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == L\"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == L\"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == L\"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == L\"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == L\"Everything was beautiful, and nothing hurt\"\n+\t  L\"Everything was beautiful, and nothing hurt\");\n+  // Again: no reallocations.\n+  str01 = title;\n+  str01.insert(0, str01.c_str() + str01.size() - 4, 4);\n+  VERIFY( str01 == L\"hurtEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str(), 5);\n+  VERIFY( str01 == L\"EveryEverything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(10, str01.c_str() + 4, 6);\n+  VERIFY( str01 == L\"Everythingything was beautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str(), 10);\n+  VERIFY( str01 == L\"Everything was Everythingbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(15, str01.c_str() + 11, 13);\n+  VERIFY( str01 == L\"Everything was was beautifulbeautiful, and nothing hurt\" );\n+  str01 = title;\n+  str01.insert(0, str01.c_str());\n+  VERIFY( str01 == L\"Everything was beautiful, and nothing hurt\"\n+\t  L\"Everything was beautiful, and nothing hurt\");\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "4b862322653ab574b39305ed1a2cc92264ef93f4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/1.cc", "status": "renamed", "additions": 1, "deletions": 193, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,6 @@\n #include <sstream>\n #include <fstream>\n #include <iostream>\n-#include <iomanip>\n #include <testsuite_hooks.h>\n \n bool test01(void)\n@@ -165,199 +164,8 @@ bool test01(void)\n   return test;\n }\n \n-\n-// testing basic_stringbuf::xsputn via stress testing with large strings\n-// based on a bug report libstdc++ 9\n-void test04(int size)\n-{\n-  bool test = true;\n-  std::string str(size, 's');\n-  int expected_size = 2 * (size + 1);\n-  std::ostringstream oss(str);\n-  \n-  // sanity checks\n-  VERIFY( str.size() == size );\n-  VERIFY( oss.good() );\n-\n-  // stress test\n-  oss << str << std::endl;\n-  if (!oss.good()) \n-    test = false;\n-\n-  oss << str << std::endl;\n-  if (!oss.good()) \n-    test = false;\n-\n-  VERIFY( str.size() == size );\n-  VERIFY( oss.good() );\n-  std::string str_tmp = oss.str();\n-  VERIFY( str_tmp.size() == expected_size );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-\n-// testing basic_filebuf::xsputn via stress testing with large strings\n-// based on a bug report libstdc++ 9\n-// mode == out\n-void test05(int size)\n-{\n-  bool test = true;\n-  const char filename[] = \"inserters_extractors-1.txt\";\n-  const char fillc = 'f';\n-  std::ofstream ofs(filename);\n-  std::string str(size, fillc);\n-\n-  // sanity checks\n-  VERIFY( str.size() == size );\n-  VERIFY( ofs.good() );\n-\n-  // stress test\n-  ofs << str << std::endl;\n-  if (!ofs.good()) \n-    test = false;\n-\n-  ofs << str << std::endl;\n-  if (!ofs.good()) \n-    test = false;\n-\n-  VERIFY( str.size() == size );\n-  VERIFY( ofs.good() );\n-\n-  ofs.close();\n-\n-  // sanity check on the written file\n-  std::ifstream ifs(filename);\n-  int count = 0;\n-  char c;\n-  while (count <= (2 * size) + 4)\n-    {\n-      ifs >> c;\n-      if (ifs.good() && c == fillc)\n-\t{\n-\t  ++count;\n-\t  c = '0';\n-\t}\n-      else \n-\tbreak;\n-    }\n-\n-  VERIFY( count == 2 * size );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-\n-// istringstream/stringbuf extractor properly size buffer based on\n-// actual, not allocated contents (string.size() vs. string.capacity()).\n-// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00049.html\n-void test06(void)\n-{\n-  bool test = true;\n-\n-  typedef std::string::size_type size_type;\n-  std::string str01(\"@silent\");\n-  size_type i01 = str01.size();\n-  size_type i02 = str01.capacity();\n-  str01.erase(0, 1);\n-  size_type i03 = str01.size();\n-  size_type i04 = str01.capacity();\n-  VERIFY( i01 - 1 == i03 );\n-  VERIFY( i02 >= i04 );\n-\n-  std::istringstream is(str01);\n-  std::string str02;\n-  is >> str02 >> std::ws;\n-  size_type i05 = str02.size();\n-  size_type i06 = str02.capacity();\n-  VERIFY( i05 == i03 );\n-  VERIFY( i06 <= i04 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00085.html\n-// istream::operator>>(string)\n-// sets failbit\n-// NB: this is a defect in the standard.\n-void test07(void)\n-{\n-  bool test = true;\n-  const std::string name(\"z6.cc\");\n-  std::istringstream iss (name);\n-  int i = 0;\n-  std::string s;\n-  while (iss >> s) \n-    ++i;\n-\n-  VERIFY( i < 3 );\n-  VERIFY( static_cast<bool>(iss.rdstate() & std::ios_base::failbit) );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-}\n-\n-// libstdc++/1019\n-void test08()\n-{\n-  using namespace std;\n-\n-  bool \t\ttest = true;\n-  istringstream istrm(\"enero:2001\");\n-  int \t\tyear;\n-  char \t\tsep;\n-  string \tmonth;\n-  \n-  istrm >> setw(5) >> month >> sep >> year;\n-  VERIFY( month.size() == 5 );\n-  VERIFY( sep == ':' );\n-  VERIFY( year == 2001 );\n-}\n-\n-// libstdc++/2830\n-void test09()\n-{\n-  bool test = true;\n-  std::string blanks( 3, '\\0');\n-  std::string foo = \"peace\";\n-  foo += blanks;\n-  foo += \"& love\";\n-  \n-  std::ostringstream oss1;\n-  oss1 << foo;\n-  VERIFY( oss1.str() == foo );\n-  \n-  std::ostringstream oss2;\n-  oss2.width(20);\n-  oss2 << foo;\n-  VERIFY( oss2.str() != foo );\n-  VERIFY( oss2.str().size() == 20 );\n-}\n-\n int main()\n { \n   test01();\n-\n-  test04(1); // expected_size == 4\n-  test04(1000); // expected_size == 2002\n-  test04(10000); // expected_size == 20002\n-\n-  test05(1); \n-  test05(1000); \n-  test05(10000);\n-\n-  test06();\n-  test07();\n-\n-  test08();\n-  \n-  test09();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/inserters_extractors.cc"}, {"sha": "55eecc19a2887f1f65258e6e15f0164b4018be41", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/4.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,69 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_stringbuf::xsputn via stress testing with large strings\n+// based on a bug report libstdc++ 9\n+void test04(int size)\n+{\n+  bool test = true;\n+  std::string str(size, 's');\n+  int expected_size = 2 * (size + 1);\n+  std::ostringstream oss(str);\n+  \n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n+\n+  // stress test\n+  oss << str << std::endl;\n+  if (!oss.good()) \n+    test = false;\n+\n+  oss << str << std::endl;\n+  if (!oss.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n+  std::string str_tmp = oss.str();\n+  VERIFY( str_tmp.size() == expected_size );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test04(1); // expected_size == 4\n+  test04(1000); // expected_size == 2002\n+  test04(10000); // expected_size == 20002\n+  return 0;\n+}"}, {"sha": "8e24f5b55b7c21f52cb32e291dc162d4b3430348", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/5.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,90 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large strings\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void test05(int size)\n+{\n+  bool test = true;\n+  const char filename[] = \"inserters_extractors-1.txt\";\n+  const char fillc = 'f';\n+  std::ofstream ofs(filename);\n+  std::string str(size, fillc);\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::ifstream ifs(filename);\n+  int count = 0;\n+  char c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+  return 0;\n+}"}, {"sha": "5d42625975247c4d75db0d00e646d12f13e38760", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/6.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,65 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// istringstream/stringbuf extractor properly size buffer based on\n+// actual, not allocated contents (string.size() vs. string.capacity()).\n+// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00049.html\n+void test06(void)\n+{\n+  bool test = true;\n+\n+  typedef std::string::size_type size_type;\n+  std::string str01(\"@silent\");\n+  size_type i01 = str01.size();\n+  size_type i02 = str01.capacity();\n+  str01.erase(0, 1);\n+  size_type i03 = str01.size();\n+  size_type i04 = str01.capacity();\n+  VERIFY( i01 - 1 == i03 );\n+  VERIFY( i02 >= i04 );\n+\n+  std::istringstream is(str01);\n+  std::string str02;\n+  is >> str02 >> std::ws;\n+  size_type i05 = str02.size();\n+  size_type i06 = str02.capacity();\n+  VERIFY( i05 == i03 );\n+  VERIFY( i06 <= i04 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test06();\n+  return 0;\n+}"}, {"sha": "7e6116ec1482656428e4d81a6b2035d99b4760e2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/7.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,57 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00085.html\n+// istream::operator>>(string)\n+// sets failbit\n+// NB: this is a defect in the standard.\n+void test07(void)\n+{\n+  bool test = true;\n+  const std::string name(\"z6.cc\");\n+  std::istringstream iss (name);\n+  int i = 0;\n+  std::string s;\n+  while (iss >> s) \n+    ++i;\n+\n+  VERIFY( i < 3 );\n+  VERIFY( static_cast<bool>(iss.rdstate() & std::ios_base::failbit) );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test07();\n+  return 0;\n+}"}, {"sha": "bdc848e8055a3ca78e2e2ba727881e76a8f464c4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/8.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,53 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/1019\n+void test08()\n+{\n+  using namespace std;\n+\n+  bool \t\ttest = true;\n+  istringstream istrm(\"enero:2001\");\n+  int \t\tyear;\n+  char \t\tsep;\n+  string \tmonth;\n+  \n+  istrm >> setw(5) >> month >> sep >> year;\n+  VERIFY( month.size() == 5 );\n+  VERIFY( sep == ':' );\n+  VERIFY( year == 2001 );\n+}\n+\n+int main()\n+{ \n+  test08();\n+  return 0;\n+}"}, {"sha": "fb201c269291ee73824916f1a662c22b164077dd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/9.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,56 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2830\n+void test09()\n+{\n+  bool test = true;\n+  std::string blanks( 3, '\\0');\n+  std::string foo = \"peace\";\n+  foo += blanks;\n+  foo += \"& love\";\n+  \n+  std::ostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+  \n+  std::ostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int main()\n+{ \n+  test09();\n+  return 0;\n+}"}, {"sha": "5297958c453910580ba8d7cce9bf33b429e0d3e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/1.cc", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,171 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <stdexcept>\n+#include <sstream>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const std::wstring str01(L\"sailing grand traverse bay\\n\"\n+\t       L\"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");\n+  const std::wstring str02(L\"sailing\");\n+  const std::wstring str03(L\"grand\");\n+  const std::wstring str04(L\"traverse\");\n+  const std::wstring str05;\n+  std::wstring str10;\n+  \n+  // istream& operator>>(istream&, string&)\n+  std::wistringstream istrs01(str01);\n+  istrs01 >> str10;\n+  VERIFY( str10 == str02 );\n+  try \n+    {\n+      std::wistringstream::int_type i01 = istrs01.peek(); //a-boo\n+      VERIFY( std::wistringstream::traits_type::to_char_type(i01) == L' ' );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+\n+  istrs01.clear();\n+  istrs01 >> str10; \n+  VERIFY( str10 == str03 ); \n+  istrs01.clear();\n+  istrs01 >> str10; \n+  VERIFY( str10 == str04 ); // sentry picks out the white spaces. . \n+\n+  std::wistringstream istrs02(str05); // empty\n+  istrs02 >> str10;\n+  VERIFY( str10 == str04 );\n+ \n+  // istream& getline(istream&, string&, char)\n+  // istream& getline(istream&, string&)\n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10);\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == L\" bay\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+\n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10, L'\\t');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == str05 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10, L'\\t');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( !istrs01.eof() );\n+      VERIFY( istrs01.good() );\n+      VERIFY( str10 == str05 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n+  try \n+    {\n+      istrs01.clear();\n+      getline(istrs01, str10, L'.');\n+      VERIFY( !istrs01.fail() );\n+      VERIFY( istrs01.eof() );\n+      VERIFY( !istrs01.good() );\n+      VERIFY( str10 == L\"\\t    from Elk Rapids to the point reminds me of miles\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+\n+  try \n+    {\n+      getline(istrs02, str10);\n+      VERIFY( istrs02.fail() );\n+      VERIFY( istrs02.eof() );\n+      VERIFY( str10 == L\"\\t    from Elk Rapids to the point reminds me of miles\" );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false ); // shouldn't throw\n+    }\n+  \n+  // ostream& operator<<(ostream&, const basic_string&)\n+  std::wostringstream ostrs01;\n+  try \n+    {\n+      ostrs01 << str01;\n+      VERIFY( ostrs01.str() == str01 );\n+    }\n+  catch(std::exception& fail) \n+    {\n+      VERIFY( false );\n+    }\n+  \n+  std::wstring hello_world;\n+  std::wcout << hello_world;\n+  \n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "f47d8da43aacab95db51db1c00a7072ec9bc86f7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/4.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,69 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_stringbuf::xsputn via stress testing with large strings\n+// based on a bug report libstdc++ 9\n+void test04(int size)\n+{\n+  bool test = true;\n+  std::wstring str(size, L's');\n+  int expected_size = 2 * (size + 1);\n+  std::wostringstream oss(str);\n+  \n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n+\n+  // stress test\n+  oss << str << std::endl;\n+  if (!oss.good()) \n+    test = false;\n+\n+  oss << str << std::endl;\n+  if (!oss.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n+  std::wstring str_tmp = oss.str();\n+  VERIFY( str_tmp.size() == expected_size );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test04(1); // expected_size == 4\n+  test04(1000); // expected_size == 2002\n+  test04(10000); // expected_size == 20002\n+  return 0;\n+}"}, {"sha": "e9a701e8c52708d40c8eb432c8707dca23ebe15a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/5.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,90 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <fstream>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+// testing basic_filebuf::xsputn via stress testing with large strings\n+// based on a bug report libstdc++ 9\n+// mode == out\n+void test05(int size)\n+{\n+  bool test = true;\n+  const char filename[] = \"inserters_extractors-1.txt\";\n+  const wchar_t fillc = L'f';\n+  std::wofstream ofs(filename);\n+  std::wstring str(size, fillc);\n+\n+  // sanity checks\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  // stress test\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  ofs << str << std::endl;\n+  if (!ofs.good()) \n+    test = false;\n+\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n+\n+  ofs.close();\n+\n+  // sanity check on the written file\n+  std::wifstream ifs(filename);\n+  int count = 0;\n+  wchar_t c;\n+  while (count <= (2 * size) + 4)\n+    {\n+      ifs >> c;\n+      if (ifs.good() && c == fillc)\n+\t{\n+\t  ++count;\n+\t  c = '0';\n+\t}\n+      else \n+\tbreak;\n+    }\n+\n+  VERIFY( count == 2 * size );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test05(1); \n+  test05(1000); \n+  test05(10000);\n+  return 0;\n+}"}, {"sha": "aedcdb263912d89bddd78bbd79a82da18c94b15a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/6.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,65 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// istringstream/stringbuf extractor properly size buffer based on\n+// actual, not allocated contents (string.size() vs. string.capacity()).\n+// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00049.html\n+void test06(void)\n+{\n+  bool test = true;\n+\n+  typedef std::wstring::size_type size_type;\n+  std::wstring str01(L\"@silent\");\n+  size_type i01 = str01.size();\n+  size_type i02 = str01.capacity();\n+  str01.erase(0, 1);\n+  size_type i03 = str01.size();\n+  size_type i04 = str01.capacity();\n+  VERIFY( i01 - 1 == i03 );\n+  VERIFY( i02 >= i04 );\n+\n+  std::wistringstream is(str01);\n+  std::wstring str02;\n+  is >> str02 >> std::ws;\n+  size_type i05 = str02.size();\n+  size_type i06 = str02.capacity();\n+  VERIFY( i05 == i03 );\n+  VERIFY( i06 <= i04 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test06();\n+  return 0;\n+}"}, {"sha": "4028924674b76a4a315ae06e2721da907c77897c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/7.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,57 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00085.html\n+// istream::operator>>(string)\n+// sets failbit\n+// NB: this is a defect in the standard.\n+void test07(void)\n+{\n+  bool test = true;\n+  const std::wstring name(L\"z6.cc\");\n+  std::wistringstream iss(name);\n+  int i = 0;\n+  std::wstring s;\n+  while (iss >> s) \n+    ++i;\n+\n+  VERIFY( i < 3 );\n+  VERIFY( static_cast<bool>(iss.rdstate() & std::ios_base::failbit) );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+}\n+\n+int main()\n+{ \n+  test07();\n+  return 0;\n+}"}, {"sha": "d43d818633fcde71f3e7b9a36b7eda8713c268a3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/8.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,53 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/1019\n+void test08()\n+{\n+  using namespace std;\n+\n+  bool \t\t test = true;\n+  wistringstream istrm(L\"enero:2001\");\n+  int \t\t year;\n+  wchar_t\t sep;\n+  wstring \t month;\n+  \n+  istrm >> setw(5) >> month >> sep >> year;\n+  VERIFY( month.size() == 5 );\n+  VERIFY( sep == ':' );\n+  VERIFY( year == 2001 );\n+}\n+\n+int main()\n+{ \n+  test08();\n+  return 0;\n+}"}, {"sha": "726dacc9816ef741074b3d6b14e6dcb59c7329ed", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/9.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,56 @@\n+// 1999-07-01 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+// NB: This file is predicated on sstreams, istreams, and ostreams\n+// working, not to mention other major details like char_traits, and\n+// all of the string class.\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2830\n+void test09()\n+{\n+  bool test = true;\n+  std::wstring blanks(3, L'\\0');\n+  std::wstring foo = L\"peace\";\n+  foo += blanks;\n+  foo += L\"& love\";\n+  \n+  std::wostringstream oss1;\n+  oss1 << foo;\n+  VERIFY( oss1.str() == foo );\n+  \n+  std::wostringstream oss2;\n+  oss2.width(20);\n+  oss2 << foo;\n+  VERIFY( oss2.str() != foo );\n+  VERIFY( oss2.str().size() == 20 );\n+}\n+\n+int main()\n+{ \n+  test09();\n+  return 0;\n+}"}, {"sha": "da8b30638ff1988e32b7fb37d48e9e0fb0d8e617", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-05-07 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/operations.cc"}, {"sha": "c41ac68ffe27d43d07f9d9b06e2ba3a477f7ae37", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/2.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1998-10-01, 1999-06-25 bkoz\n \n-// Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/nonmember.cc"}, {"sha": "cd8f18bf66328a007d74230c7b24c09dd36b9aa2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,56 @@\n+// 1999-05-07 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6 string operations\n+\n+#include <string>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test = true;\n+\n+  std::wstring str1;\n+  std::wstring str2;\n+  \n+  // Should get this:\n+  // 1:8-chars_8-chars_\n+  // 2:8-chars_8-chars_\n+  str1 = std::wstring(L\"8-chars_\") + L\"8-chars_\";\n+  const wchar_t* p1 = str1.c_str();\n+  // wprintf(\"1:%s\\n\", str1.c_str());\n+  str2 = str1 + L\"7-chars\";\n+  // wprintf(\"2:%s\\n\", str1.c_str()); //str1 is gone\n+  const wchar_t* p2 = str1.c_str();\n+  return 0;\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "11e63f70e93bc172812dcbec801b458421f366f6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/2.cc", "status": "added", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,300 @@\n+// 1998-10-01, 1999-06-25 bkoz\n+\n+// Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.1 basic_string non-member functions\n+\n+// 21.3.7.2 operator==\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+*/\n+\n+// 21.3.7.3 operator!=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator!=(const basic_string<charT,traits,Allocator>& lhs, \n+                  const charT* rhs);\n+*/\n+\n+// 21.3.7.4 operator<\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator< (const charT* lhs, \n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// 21.3.7.5 operator>\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator> (const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+//21.3.7.6 operator<=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator<=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+// 21.3.7.7 operator>=\n+/*\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n+                  const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  bool operator>=(const charT* lhs,\n+                  const basic_string<charT,traits,Allocator>& rhs);\n+*/\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool \t\ttest = true;\n+  std::wstring \tstr_0(L\"costa rica\");\n+  std::wstring \tstr_1(L\"costa marbella\");\n+  std::wstring \tstr_2(L\"cost\");\n+  std::wstring\tstr_3(L\"costa ricans\");\n+  std::wstring  str_4;\n+  \n+  str_4 = str_0;\n+  //comparisons between string objects\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n+   \n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n+\n+  //comparisons between string object and string literal\n+  VERIFY( !(str_0 == L\"costa marbella\") );\n+  VERIFY( !(str_0 == L\"cost\") );\n+  VERIFY( !(str_0 == L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" == str_0) );\n+  VERIFY( !(L\"cost\" == str_0) );\n+  VERIFY( !(L\"costa ricans\" == str_0) );\n+  VERIFY( L\"costa rica\" == str_0 );\n+  VERIFY( str_0 == L\"costa rica\" );\n+\n+  VERIFY( str_0 != L\"costa marbella\" );\n+  VERIFY( str_0 != L\"cost\" );\n+  VERIFY( str_0 != L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" != str_0 );\n+  VERIFY( L\"cost\" != str_0 );\n+  VERIFY( L\"costa ricans\" != str_0 );\n+  VERIFY( !(L\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != L\"costa rica\") );\n+\n+  VERIFY( str_0 > L\"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > L\"cost\" );\n+  VERIFY( !(str_0 > L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" > str_0) );\n+  VERIFY( L\"costa ricans\" > str_0 );\n+  VERIFY( !(L\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > L\"costa rica\") );\n+\n+  VERIFY( !(str_0 < L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < L\"cost\") );\n+  VERIFY( str_0 < L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" < str_0 );\n+  VERIFY( !(L\"costa ricans\" < str_0) );\n+  VERIFY( !(L\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < L\"costa rica\") );\n+\n+  VERIFY( str_0 >= L\"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= L\"cost\" );\n+  VERIFY( !(str_0 >= L\"costa ricans\") );\n+  VERIFY( !(L\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(L\"cost\" >= str_0) );\n+  VERIFY( L\"costa ricans\" >= str_0 );\n+  VERIFY( L\"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= L\"costa rica\" );\n+\n+  VERIFY( !(str_0 <= L\"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= L\"cost\") );\n+  VERIFY( str_0 <= L\"costa ricans\" );\n+  VERIFY( L\"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( L\"cost\" <= str_0 );\n+  VERIFY( !(L\"costa ricans\" <= str_0) );\n+  VERIFY( L\"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= L\"costa rica\" );\n+\n+  // 21.3.7.1 operator+\n+/*\n+template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+    operator+(const basic_string<charT,traits,Allocator>& lhs,\n+              const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+    operator+(const charT* lhs,\n+              const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+    operator+(const basic_string<charT,traits,Allocator>& lhs,\n+              const charT* rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+    operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);\n+\n+template<class charT, class traits, class Allocator>\n+  basic_string<charT,traits,Allocator>\n+    operator+(const basic_string<charT,traits,Allocator>& lhs, charT rhs);\n+*/\n+\n+  str_4 = str_0 + L\"ns\";\n+  VERIFY( str_4 == str_3 );\n+\n+  const std::wstring str_5(L\" marbella\");\n+  str_4 = L\"costa\" + str_5;\n+  VERIFY( str_4 == str_1 );\n+\n+  std::wstring str_6(L\"ns\");\n+  str_4 = str_0 + str_6;\n+  VERIFY( str_4 == str_3 );\n+\n+  str_4 = str_0 + L'n';\n+  str_4 = str_4 + L's';\n+  VERIFY( str_4 == str_3 );\n+\n+  str_4 = L'a' + str_6;\n+  str_4 = L'c' + str_4;\n+  str_4 = L'i' + str_4;\n+  str_4 = L'r' + str_4;\n+  str_4 = L' ' + str_4;\n+  str_4 = L'a' + str_4;\n+  str_4 = L't' + str_4;\n+  str_4 = L's' + str_4;\n+  str_4 = L'o' + str_4;\n+  str_4 = L'c' + str_4;\n+  VERIFY( str_4 == str_3 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return 0;\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7145d4c7840886d7352e84c20eb36accb4f7f189", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,87 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::string::size_type csize_type;\n+  typedef std::string::const_reference cref;\n+  typedef std::string::reference ref;\n+  csize_type npos = std::string::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"ventura, california\";\n+  const std::string str01(str_lit01);\n+  std::string str02(\"del mar, california\");\n+  std::string str03(\" and \");\n+  std::string str05;\n+\n+  // string& replace(size_type pos, size_type n, const string& string)\n+  // string& replace(size_type pos1, size_type n1, const string& string,\n+  //                 size_type pos2, size_type n2)\n+  // string& replace(size_type pos, size_type n1, const char* s, size_type n2)\n+  // string& replace(size_type pos, size_type n1, const char* s)\n+  // string& replace(size_type pos, size_type n1, size_type n2, char c)\n+  // string& replace(iterator it1, iterator it2, const string& str)\n+  // string& replace(iterator it1, iterator it2, const chat* s, size_type n)\n+  // string& replace(iterator it1, iterator it2, const chat* s)\n+  // string& replace(iterator it1, iterator it2, size_type n, char c)\n+  // template<typename InputIter>\n+  //   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n+\n+  // with mods, from tstring.cc, from jason merrill, et. al.\n+  std::string X = \"Hello\";\n+  std::string x = X;\n+\n+  char ch = x[0];\n+  VERIFY( ch == 'H' );\n+\n+  std::string z = x.substr(2, 3);\n+  VERIFY( z == \"llo\" );\n+\n+  x.replace(2, 2, \"r\");\n+  VERIFY( x == \"Hero\" );\n+\n+  x = X;\n+  x.replace(0, 1, \"j\");\n+  VERIFY( x == \"jello\" );\n+\n+  int ar[] = { 'H', 'e', 'l', 'l', 'o' };\n+  x.replace(std::find(x.begin(), x.end(), 'l'), \n+\t    std::find(x.rbegin(), x.rend(), 'l').base(), ar, \n+\t    ar + sizeof(ar) / sizeof(ar[0]));\n+  VERIFY( x == \"jeHelloo\" );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "7731edd37a4838ca73432fa1fface234b04e8687", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,46 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  bool test = true;\n+  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  std::string aux = strlit;\n+  aux.replace(aux.begin()+5, aux.begin()+20,\n+\t      aux.begin()+10, aux.begin()+15);\n+  VERIFY(aux == \"../thg piealei Bay/Kauai/Hawaii\");\n+  \n+  aux = strlit;\n+  aux.replace(aux.begin() + 10, aux.begin() + 15,\n+\t      aux.begin() + 5, aux.begin() + 20);\n+  VERIFY(aux == \"../the lone long pier/Hanr/Hanalei Bay/Kauai/Hawaii\");\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "a04d13d402433ea2df04eafae1c1172f183c04d9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,74 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Some more miscellaneous tests\n+void\n+test03()\n+{\n+  bool test = true;\n+  const char* title01 = \"nine types of ambiguity\";\n+  const char* title02 = \"ultra\";\n+  std::string str01 = title01;\n+  std::string str02 = title02;\n+\n+  str01.replace(0, 4, str02);\n+  VERIFY(str01 == \"ultra types of ambiguity\");\n+\n+  str01.replace(15, 9, str02, 2, 2);\n+  VERIFY(str01 == \"ultra types of tr\");\n+\n+  str01 = title01;\n+  str02.replace(0, 0, str01, 0, std::string::npos);\n+  VERIFY(str02 == \"nine types of ambiguityultra\");\n+\n+  str02.replace(11, 2, title02, 5);\n+  VERIFY(str02 == \"nine types ultra ambiguityultra\");\n+\n+  str02.replace(11, 5, title01, 2);\n+  VERIFY(str02 == \"nine types ni ambiguityultra\");\n+\n+  str01.replace(str01.size(), 0, title02);\n+  VERIFY(str01 == \"nine types of ambiguityultra\");\n+  \n+  str01 = title01;\n+  str02 = title02;\n+  str01.replace(str01.begin(), str01.end(), str02);\n+  VERIFY(str01 == \"ultra\");\n+\n+  str01.replace(str01.begin(), str01.begin(), title01, 4);\n+  VERIFY(str01 == \"nineultra\");\n+\n+  str01.replace(str01.end(), str01.end(), title01 + 5, 5);\n+  VERIFY(str01 == \"nineultratypes\");\n+  \n+  str01.replace(str01.begin(), str01.end(), title02);\n+  VERIFY(str01 == \"ultra\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "47cf335daa04a8ff53e64013d3f3c589b59789e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/4.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,67 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Some more tests for \n+// template<typename InputIter>\n+//   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n+void\n+test04()\n+{\n+  bool test = true;\n+  std::string str01 = \"geogaddi\";\n+  std::string str02;\n+\n+  typedef std::string::iterator iterator;\n+  typedef std::string::const_iterator const_iterator;\n+  \n+  iterator it1 = str01.begin();\n+  iterator it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), it1, it2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  const_iterator c_it1 = str01.begin();\n+  const_iterator c_it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), c_it1, c_it2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  const char* c_ptr1 = str01.c_str();\n+  const char* c_ptr2 = str01.c_str() + 8;\n+  str02.replace(str02.begin(), str02.end(), c_ptr1, c_ptr2);\n+  VERIFY(str02 == \"geogaddi\");\n+\n+  str02 = \"boards\";\n+  char* ptr1 = &*str01.begin();\n+  char* ptr2 = &*str01.end();\n+  str02.replace(str02.begin(), str02.end(), ptr1, ptr2);\n+  VERIFY(str02 == \"geogaddi\");\n+}\n+\n+int main()\n+{ \n+  test04();\n+  return 0;\n+}"}, {"sha": "8c112c545ed012f606abeb15b84ac8148a0fba15", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/5.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// We wrongly used __n1 instead of __foldn1 in the length_error\n+// check at the beginning of replace(__pos, __n1, __s, __n2)\n+void\n+test05()\n+{\n+  bool test = true;\n+  std::string str01 = \"londinium\";\n+  std::string str02 = \"cydonia\";\n+\n+  str01.replace(0, 20, str02.c_str(), 3);\n+  VERIFY(str01 == \"cyd\");\n+}\n+\n+int main()\n+{ \n+  test05();\n+  return 0;\n+}"}, {"sha": "fd0967a86fe7dc722d67f58df8530634eca08939", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,87 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"ventura, california\";\n+  const std::wstring str01(str_lit01);\n+  std::wstring str02(L\"del mar, california\");\n+  std::wstring str03(L\" and \");\n+  std::wstring str05;\n+\n+  // wstring& replace(size_type pos, size_type n, const wstring& string)\n+  // wstring& replace(size_type pos1, size_type n1, const wstring& string,\n+  //                 size_type pos2, size_type n2)\n+  // wstring& replace(size_type pos, size_type n1, const wchar_t* s, size_type n2)\n+  // wstring& replace(size_type pos, size_type n1, const wchar_t* s)\n+  // wstring& replace(size_type pos, size_type n1, size_type n2, wchar_t c)\n+  // wstring& replace(iterator it1, iterator it2, const wstring& str)\n+  // wstring& replace(iterator it1, iterator it2, const wchar_t* s, size_type n)\n+  // wstring& replace(iterator it1, iterator it2, const wchar_t* s)\n+  // wstring& replace(iterator it1, iterator it2, size_type n, char c)\n+  // template<typename InputIter>\n+  //   wstring& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n+\n+  // with mods, from tstring.cc, from jason merrill, et. al.\n+  std::wstring X = L\"Hello\";\n+  std::wstring x = X;\n+\n+  wchar_t ch = x[0];\n+  VERIFY( ch == L'H' );\n+\n+  std::wstring z = x.substr(2, 3);\n+  VERIFY( z == L\"llo\" );\n+\n+  x.replace(2, 2, L\"r\");\n+  VERIFY( x == L\"Hero\" );\n+\n+  x = X;\n+  x.replace(0, 1, L\"j\");\n+  VERIFY( x == L\"jello\" );\n+\n+  wchar_t ar[] = { L'H', L'e', L'l', L'l', L'o' };\n+  x.replace(std::find(x.begin(), x.end(), L'l'), \n+\t    std::find(x.rbegin(), x.rend(), L'l').base(), ar, \n+\t    ar + sizeof(ar) / sizeof(ar[0]));\n+  VERIFY( x == L\"jeHelloo\" );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "da9678a338ff2a0d2c421b76afe315b01e00900e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,47 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  bool test = true;\n+  const wchar_t* strlit = L\"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n+  std::wstring aux = strlit;\n+  aux.replace(aux.begin()+5, aux.begin()+20,\n+\t      aux.begin()+10, aux.begin()+15);\n+  VERIFY(aux == L\"../thg piealei Bay/Kauai/Hawaii\");\n+  \n+  aux = strlit;\n+  aux.replace(aux.begin() + 10, aux.begin() + 15,\n+\t      aux.begin() + 5, aux.begin() + 20);\n+  VERIFY(aux == L\"../the lone long pier/Hanr/Hanalei Bay/Kauai/Hawaii\");\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "2ff6ef282949e9231eee9631bc66a57c760b1a2b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,74 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Some more miscellaneous tests\n+void\n+test03()\n+{\n+  bool test = true;\n+  const wchar_t* title01 = L\"nine types of ambiguity\";\n+  const wchar_t* title02 = L\"ultra\";\n+  std::wstring str01 = title01;\n+  std::wstring str02 = title02;\n+\n+  str01.replace(0, 4, str02);\n+  VERIFY(str01 == L\"ultra types of ambiguity\");\n+\n+  str01.replace(15, 9, str02, 2, 2);\n+  VERIFY(str01 == L\"ultra types of tr\");\n+\n+  str01 = title01;\n+  str02.replace(0, 0, str01, 0, std::wstring::npos);\n+  VERIFY(str02 == L\"nine types of ambiguityultra\");\n+\n+  str02.replace(11, 2, title02, 5);\n+  VERIFY(str02 == L\"nine types ultra ambiguityultra\");\n+\n+  str02.replace(11, 5, title01, 2);\n+  VERIFY(str02 == L\"nine types ni ambiguityultra\");\n+\n+  str01.replace(str01.size(), 0, title02);\n+  VERIFY(str01 == L\"nine types of ambiguityultra\");\n+  \n+  str01 = title01;\n+  str02 = title02;\n+  str01.replace(str01.begin(), str01.end(), str02);\n+  VERIFY(str01 == L\"ultra\");\n+\n+  str01.replace(str01.begin(), str01.begin(), title01, 4);\n+  VERIFY(str01 == L\"nineultra\");\n+\n+  str01.replace(str01.end(), str01.end(), title01 + 5, 5);\n+  VERIFY(str01 == L\"nineultratypes\");\n+  \n+  str01.replace(str01.begin(), str01.end(), title02);\n+  VERIFY(str01 == L\"ultra\");\n+}\n+\n+int main()\n+{ \n+  test03();\n+  return 0;\n+}"}, {"sha": "bc827d03282bdd5c234396078208d4a42577626d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/4.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,67 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// Some more tests for \n+// template<typename InputIter>\n+//   wstring& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n+void\n+test04()\n+{\n+  bool test = true;\n+  std::wstring str01 = L\"geogaddi\";\n+  std::wstring str02;\n+\n+  typedef std::wstring::iterator iterator;\n+  typedef std::wstring::const_iterator const_iterator;\n+  \n+  iterator it1 = str01.begin();\n+  iterator it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), it1, it2);\n+  VERIFY(str02 == L\"geogaddi\");\n+\n+  str02 = L\"boards\";\n+  const_iterator c_it1 = str01.begin();\n+  const_iterator c_it2 = str01.end();\n+  str02.replace(str02.begin(), str02.end(), c_it1, c_it2);\n+  VERIFY(str02 == L\"geogaddi\");\n+\n+  str02 = L\"boards\";\n+  const wchar_t* c_ptr1 = str01.c_str();\n+  const wchar_t* c_ptr2 = str01.c_str() + 8;\n+  str02.replace(str02.begin(), str02.end(), c_ptr1, c_ptr2);\n+  VERIFY(str02 == L\"geogaddi\");\n+\n+  str02 = L\"boards\";\n+  wchar_t* ptr1 = &*str01.begin();\n+  wchar_t* ptr2 = &*str01.end();\n+  str02.replace(str02.begin(), str02.end(), ptr1, ptr2);\n+  VERIFY(str02 == L\"geogaddi\");\n+}\n+\n+int main()\n+{ \n+  test04();\n+  return 0;\n+}"}, {"sha": "f54cfb9a2e7b08a32fd27e713082447286a067dc", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/5.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,43 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1994, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.5.6 basic_string::replace\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// We wrongly used __n1 instead of __foldn1 in the length_error\n+// check at the beginning of replace(__pos, __n1, __s, __n2)\n+void\n+test05()\n+{\n+  bool test = true;\n+  std::wstring str01 = L\"londinium\";\n+  std::wstring str02 = L\"cydonia\";\n+\n+  str01.replace(0, 20, str02.c_str(), 3);\n+  VERIFY(str01 == L\"cyd\");\n+}\n+\n+int main()\n+{ \n+  test05();\n+  return 0;\n+}"}, {"sha": "5b9a4181b91c1e9f4144d49aa3aba95d17535e99", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/1.cc", "status": "renamed", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,6 @@\n // USA.\n \n #include <string>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n // 21.3.6.2 basic_string rfind\n@@ -91,35 +90,8 @@ bool test01(void)\n   return test;\n }\n \n-// 21.3.6.4 basic_string::find_last_of\n-bool test02()\n-{\n-  bool test = true;\n-\n-  // test find_last_of\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n-// 21.3.6.6 basic_string::find_last_not_of\n-bool test03()\n-{\n-  bool test = true;\n-\n-  // test find_last_not_of\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n int main()\n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/rfind.cc"}, {"sha": "9b905df9065a5a2800eebf7082b9a5aa820c1f7a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,41 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// 21.3.6.4 basic_string::find_last_of\n+bool test02()\n+{\n+  bool test = true;\n+\n+  // test find_last_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "d8b6c8136ab82f69633d9d5639a6f13644cff184", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/3.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,40 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// 21.3.6.6 basic_string::find_last_not_of\n+bool test03()\n+{\n+  bool test = true;\n+\n+  // test find_last_not_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "9681bf4c8e46918521fa9cbc3074186b42d116aa", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/1.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,97 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// 21.3.6.2 basic_string rfind\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"mave\";\n+  const std::wstring str01(L\"mavericks, santa cruz\");\n+  std::wstring str02(str_lit01);\n+  std::wstring str03(L\"s, s\");\n+  std::wstring str04;\n+\n+  // size_type rfind(const wstring&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str01, 4);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02,3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str02);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str03);\n+  VERIFY( csz01 == 8 );\n+  csz01 = str01.rfind(str03, 3);\n+  VERIFY( csz01 == npos );\n+  csz01 = str01.rfind(str03, 12);\n+  VERIFY( csz01 == 8 );\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str04, 5);\n+  VERIFY( csz01 == 5 );\n+  csz01 = str01.rfind(str04, str01.size());\n+  VERIFY( csz01 == str01.size() );\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  VERIFY( csz01 == str01.size() );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  VERIFY( csz01 == 3 );\n+\n+  // size_type rfind(const wchar_t* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  VERIFY( csz01 == 0 );\n+  csz01 = str01.rfind(str_lit01, 3);\n+  VERIFY( csz01 == 0 );\n+\n+  // size_type rfind(wchar_t c, size_type pos = 0) const;\n+  csz01 = str01.rfind(L'z');\n+  csz02 = str01.size() - 1;\n+  VERIFY( csz01 == csz02 );\n+  csz01 = str01.rfind(L'/');\n+  VERIFY( csz01 == npos );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9b905df9065a5a2800eebf7082b9a5aa820c1f7a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,41 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// 21.3.6.4 basic_string::find_last_of\n+bool test02()\n+{\n+  bool test = true;\n+\n+  // test find_last_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "d8b6c8136ab82f69633d9d5639a6f13644cff184", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/3.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,40 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// 21.3.6.6 basic_string::find_last_not_of\n+bool test03()\n+{\n+  bool test = true;\n+\n+  // test find_last_not_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "be2a379c581adba7c242d11c7082acc161f545f1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/substr/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-10 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/substr.cc"}, {"sha": "843ebb6861a2170423a02b566ae7d2b7481df440", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/substr/wchar_t/1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,80 @@\n+// 1999-06-10 bkoz\n+\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6.7 basic_string::substr\n+\n+#include <string>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::wstring::size_type csize_type;\n+  typedef std::wstring::const_reference cref;\n+  typedef std::wstring::reference ref;\n+  csize_type npos = std::wstring::npos;\n+  csize_type csz01, csz02;\n+\n+  const wchar_t str_lit01[] = L\"rockaway, pacifica\";\n+  const std::wstring str01(str_lit01);\n+  std::wstring str02;\n+\n+  // basic_string<charT, _Traits, _Alloc>\n+  //  substr(size_type pos = 0, size_type n = npos) const;\n+  csz01 = str01.size();\n+  str02 = str01.substr(0, 1);\n+  VERIFY( str02 == L\"r\" );\n+  str02 = str01.substr(10);\n+  VERIFY( str02 == L\"pacifica\" );\n+\n+  try {\n+    str02 = str01.substr(csz01 + 1);\n+    VERIFY( false ); \n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( true );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+ try {\n+    str02 = str01.substr(csz01);\n+    VERIFY( str02.size() == 0 );\n+  }\n+  catch(std::out_of_range& fail) {\n+    VERIFY( false );\n+  }\n+  catch(...) {\n+    VERIFY( false );\n+  }\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "7dfe6c24cf2ac99babece5b5897285ad6e8a3ae1", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/char/1.cc", "status": "renamed", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 2001-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,6 @@\n \n #include <string>\n #include <cstring>\n-#include <cwchar>\n \n void test01()\n {\n@@ -64,28 +63,8 @@ void test01()\n   v = std::memchr(v, 'a', 3);\n }\n \n-void test02()\n-{\n-  using namespace std;\n-\n-  const char* ccarray1 = \"san francisco roof garden inspectors\";\n-  const char* ccarray2 = \"san francisco sunny-day park inspectors\";\n-  char carray[50];\n-  strcpy(carray, ccarray1);\n-  void* v = carray;\n-  const void* cv = ccarray1;\n- \n-  memchr(cv, '/', 3);\n-  strchr(ccarray1, '/');\n-  strpbrk(ccarray1, ccarray2);\n-  strrchr(ccarray1, 'c');\n-  strstr(carray, carray);\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/c_strings.cc"}, {"sha": "7ec0561b8877767e9d55cf9451969035524e7756", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/char/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,48 @@\n+// 2001-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.4: null-terminiated sequence utilities\n+\n+#include <string>\n+#include <cstring>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  const char* ccarray1 = \"san francisco roof garden inspectors\";\n+  const char* ccarray2 = \"san francisco sunny-day park inspectors\";\n+  char carray[50];\n+  strcpy(carray, ccarray1);\n+  void* v = carray;\n+  const void* cv = ccarray1;\n+ \n+  memchr(cv, '/', 3);\n+  strchr(ccarray1, '/');\n+  strpbrk(ccarray1, ccarray2);\n+  strrchr(ccarray1, 'c');\n+  strstr(carray, carray);\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "3ad6aed1e0a6a097a4c0738cad8c4f0b4549dc6c", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/wchar_t/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,69 @@\n+// 2001-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.4: null-terminiated sequence utilities\n+\n+#include <string>\n+#include <cstring>\n+#include <cwchar>\n+\n+void test01()\n+{\n+  bool test = true;\n+  wchar_t c = L'a';\n+  const wchar_t cc = L'b';\n+  wchar_t* c1 = &c;\n+  const wchar_t* cc1 = &cc;\n+  const wchar_t* ccarray1 = L\"san francisco roof garden inspectors\";\n+  const wchar_t* ccarray2 = L\"san francisco sunny-day park inspectors\";\n+  wchar_t carray[50];\n+  std::wcscpy(carray, ccarray1);\n+  \n+  // const wchar_t* wcschr(const wchar_t* s, wchar_t c);\n+  // wchar_t* wcschr(wchar_t* s, wchar_t c);\n+  cc1 = std::wcschr(ccarray1, L'c');\n+  c1 = std::wcschr(carray, L'c');\n+\n+  // const char* wcspbrk(const wchar_t* s1, const wchar_t* s2);\n+  // char* wcspbrk(wchar_t* s1, const wchar_t* s2);\n+  cc1 = std::wcspbrk(ccarray1, ccarray2);\n+  c1 = std::wcspbrk(carray, ccarray2);\n+\n+  // const wchar_t* strrchr(const wchar_t* s, wchar_t c);\n+  // wchar_t* strrchr(wchar_t* s, wchar_t c);\n+  cc1 = std::wcsrchr(ccarray1, L'c');\n+  c1 = std::wcsrchr(carray, L'c');\n+\n+  // const wchar_t* strstr(const wchar_t* s1, const wchar_t* s2);\n+  // wchar_t* strstr(wchar_t* s1, const wchar_t* s2);\n+  cc1 = std::wcsstr(ccarray1, ccarray2);\n+  c1 = std::wcsstr(carray, carray);\n+\n+  // const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);\n+  // wchar_t* wmemchr(      wchar_t* s, wchar_t c, size_t n);\n+  cc1 = std::wmemchr(ccarray1, L'a', 3);\n+  c1 = std::wmemchr(carray, L'a', 3);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3a8f77cd3355bdcfd4ee7577517f53508c0620dc", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/wchar_t/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,47 @@\n+// 2001-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.4: null-terminiated sequence utilities\n+\n+#include <string>\n+#include <cstring>\n+#include <cwchar>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  const wchar_t* ccarray1 = L\"san francisco roof garden inspectors\";\n+  const wchar_t* ccarray2 = L\"san francisco sunny-day park inspectors\";\n+  wchar_t carray[50];\n+  wcscpy(carray, ccarray1);\n+ \n+  wmemchr(ccarray1, L'/', 3);\n+  wcschr(ccarray1, L'/');\n+  wcspbrk(ccarray1, ccarray2);\n+  wcsrchr(ccarray1, L'c');\n+  wcsstr(carray, carray);\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "29322b244574c4eaaaa36f663aeeab409ec42336", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char/1.cc", "status": "renamed", "additions": 2, "deletions": 97, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-03 bkoz\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,92 +23,7 @@\n #include <string>\n #include <testsuite_hooks.h>\n \n-int test01(void)\n-{\n-  bool test = true;\n-  const std::string str_01(\"zuma beach\");\n-  const std::string str_02(\"montara and ocean beach\");\n-\n-  // 21.1.1 character traits requirements\n-\n-  // Key for decoding what function signatures really mean:\n-  // X \t\t== char_traits<_CharT>\n-  // [c,d] \t== _CharT\n-  // [p,q] \t== const _CharT*\n-  // s \t\t== _CharT*\n-  // [n,i,j] \t== size_t\n-  // f \t\t== X::int_type\n-  // pos \t== X::pos_type\n-  // state \t== X::state_type\n-\n-  // void X::assign(char c, char d)\n-  // assigns c = d;\n-  char c1 = 'z';\n-  char c2 = 'u';\n-  VERIFY( c1 != c2 );\n-  std::char_traits<char>::assign(c1,c2);\n-  VERIFY( c1 == 'u' );\n-\n-  // char* X::move(char* s, const char* p, size_t n)\n-  // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n-  // correctly even where p is in [s, s + n), and yields s.\n-  char array1[] = {'z', 'u', 'm', 'a', ' ', 'b', 'e', 'a', 'c', 'h',  0};\n-  const char str_lit1[] = \"montara and ocean beach\";\n-  int len = sizeof(str_lit1) + sizeof(array1) - 1; // two terminating chars\n-  char array2[len];\n-\n-  VERIFY( str_lit1[0] == 'm' );\n-  c1 = array2[0];\n-  c2 = str_lit1[0];\n-  char c3 = array2[1];\n-  char c4 = str_lit1[1];\n-  std::char_traits<char>::move(array2, str_lit1, 0);\n-  VERIFY( array2[0] == c1 );\n-  VERIFY( str_lit1[0] == c2 );\n-  std::char_traits<char>::move(array2, str_lit1, 1);\n-  VERIFY( array2[0] == c2 );\n-  VERIFY( str_lit1[0] == c2 );\n-  VERIFY( array2[1] == c3 );\n-  VERIFY( str_lit1[1] == c4 );\n-  std::char_traits<char>::move(array2, str_lit1, 2);\n-  VERIFY( array2[0] == c2 );\n-  VERIFY( str_lit1[0] == c2 );\n-  VERIFY( array2[1] == c4 );\n-  VERIFY( str_lit1[1] == c4 );\n-\n-  char* pc1 = array1 + 1;\n-  c1 = pc1[0];\n-  c2 = array1[0];\n-  VERIFY( c1 != c2 );\n-  char* pc2 = std::char_traits<char>::move(array1, pc1, 0);\n-  c3 = pc1[0];\n-  c4 = array1[0];\n-  VERIFY( c1 == c3 );\n-  VERIFY( c2 == c4 );\n-  VERIFY( pc2 == array1 );\n-\n-  c1 = pc1[0];\n-  c2 = array1[0];\n-  char* pc3 = pc1;\n-  pc2 = std::char_traits<char>::move(array1, pc1, 10);\n-  c3 = pc1[0];\n-  c4 = array1[0];\n-  VERIFY( c1 != c3 ); // underlying char array changed.\n-  VERIFY( c4 != c3 );\n-  VERIFY( pc2 == array1 );\n-  VERIFY( pc3 == pc1 ); // but pointers o-tay\n-  c1 = *(str_01.data());\n-  c2 = array1[0];\n-  VERIFY( c1 != c2 );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n-#if _GLIBCPP_USE_WCHAR_T\n-int test02(void)\n+void test01(void)\n {\n   bool test = true;\n   const std::wstring str_01(L\"zuma beach\");\n@@ -185,20 +100,10 @@ int test02(void)\n   c1 = *(str_01.data());\n   c2 = array1[0];\n   VERIFY( c1 != c2 );\n- \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-\n-  return test;\n }\n-#endif  //_GLIBCPP_USE_WCHAR_T\n \n int main()\n { \n   test01();\n-#if _GLIBCPP_USE_WCHAR_T\n-  test02();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/21_strings/char_traits_requirements.cc"}, {"sha": "a93d2f50f2e1dd5e6bed9bc5667535237bcd2041", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/wchar_t/1.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -0,0 +1,109 @@\n+// 1999-06-03 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.1.1 Characher traits requirements\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test02(void)\n+{\n+  bool test = true;\n+  const std::wstring str_01(L\"zuma beach\");\n+  const std::wstring str_02(L\"montara and ocean beach\");\n+ \n+  // 21.1.1 character traits requirements\n+\n+  // Key for decoding what function signatures really mean:\n+  // X                == char_traits<_CharT>\n+  // [c,d]    == _CharT\n+  // [p,q]    == const _CharT*\n+  // s                == _CharT*\n+  // [n,i,j]  == size_t\n+  // f                == X::int_type\n+  // pos      == X::pos_type\n+  // state    == X::state_type\n+\n+  // void X::assign(wchar_t c, wchar_t d)\n+  // assigns c = d;\n+  wchar_t c1 = L'z';\n+  wchar_t c2 = L'u';\n+  VERIFY( c1 != c2 );\n+  std::char_traits<wchar_t>::assign(c1,c2);\n+  VERIFY( c1 == L'u' );\n+\n+  // char* X::move(char* s, const char* p, size_t n)\n+  // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n+  // correctly even where p is in [s, s + n), and yields s.   \n+  wchar_t array1[] = {L'z', L'u', L'm', L'a', L' ', L'b', L'e', L'a', L'c', L'h',  0};\n+  const wchar_t str_lit1[] = L\"montara and ocean beach\";\n+  int len = sizeof(str_lit1) + sizeof(array1) - 1; // two terminating chars\n+  wchar_t array2[len];\n+\n+  VERIFY( str_lit1[0] == 'm' );\n+  c1 = array2[0];\n+  c2 = str_lit1[0];\n+  wchar_t c3 = array2[1];\n+  wchar_t c4 = str_lit1[1];\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 0);\n+  VERIFY( array2[0] == c1 );\n+  VERIFY( str_lit1[0] == c2 );\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 1);\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c3 );\n+  VERIFY( str_lit1[1] == c4 );\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 2);\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c4 );\n+  VERIFY( str_lit1[1] == c4 );\n+ \n+  wchar_t* pc1 = array1 + 1;\n+  c1 = pc1[0];\n+  c2 = array1[0];\n+  VERIFY( c1 != c2 );\n+  wchar_t* pc2 = std::char_traits<wchar_t>::move(array1, pc1, 0);\n+  c3 = pc1[0];\n+  c4 = array1[0];\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == c4 );\n+  VERIFY( pc2 == array1 );\n+\n+  c1 = pc1[0];\n+  c2 = array1[0];\n+  wchar_t* pc3 = pc1;\n+  pc2 = std::char_traits<wchar_t>::move(array1, pc1, 10);\n+  c3 = pc1[0];\n+  c4 = array1[0];\n+  VERIFY( c1 != c3 ); // underlying wchar_t array changed.\n+  VERIFY( c4 != c3 );\n+  VERIFY( pc2 == array1 );\n+  VERIFY( pc3 == pc1 ); // but pointers o-tay\n+  c1 = *(str_01.data());\n+  c2 = array1[0];\n+  VERIFY( c1 != c2 );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "4f2d061fb0956832493739844f73fb77641a7164", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/typedefs/char/1.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -1,7 +1,7 @@\n // 2001-02-11 gdr\n // Origin: Craig Rodrigues <rodrigc@mediaone.net>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the", "previous_filename": "libstdc++-v3/testsuite/21_strings/char_traits_typedefs.cc"}, {"sha": "6dc9ec6b9bf712cc5b66b627ab4e68b410ea20ec", "filename": "libstdc++-v3/testsuite/21_strings/replace.cc", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82efaf43d83897c116f79ba2ac5929c106d7eeba/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82efaf43d83897c116f79ba2ac5929c106d7eeba/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc?ref=82efaf43d83897c116f79ba2ac5929c106d7eeba", "patch": "@@ -1,202 +0,0 @@\n-// 1999-06-10 bkoz\n-\n-// Copyright (C) 1994, 1999, 2001, 2002 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 21.3.5.6 basic_string::replace\n-\n-#include <string>\n-#include <stdexcept>\n-#include <testsuite_hooks.h>\n-\n-bool test01(void)\n-{\n-  bool test = true;\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::const_reference cref;\n-  typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n-\n-  const char str_lit01[] = \"ventura, california\";\n-  const std::string str01(str_lit01);\n-  std::string str02(\"del mar, california\");\n-  std::string str03(\" and \");\n-  std::string str05;\n-\n-  // string& replace(size_type pos, size_type n, const string& string)\n-  // string& replace(size_type pos1, size_type n1, const string& string,\n-  //                 size_type pos2, size_type n2)\n-  // string& replace(size_type pos, size_type n1, const char* s, size_type n2)\n-  // string& replace(size_type pos, size_type n1, const char* s)\n-  // string& replace(size_type pos, size_type n1, size_type n2, char c)\n-  // string& replace(iterator it1, iterator it2, const string& str)\n-  // string& replace(iterator it1, iterator it2, const chat* s, size_type n)\n-  // string& replace(iterator it1, iterator it2, const chat* s)\n-  // string& replace(iterator it1, iterator it2, size_type n, char c)\n-  // template<typename InputIter>\n-  //   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n-\n-  // with mods, from tstring.cc, from jason merrill, et. al.\n-  std::string X = \"Hello\";\n-  std::string x = X;\n-\n-  char ch = x[0];\n-  VERIFY( ch == 'H' );\n-\n-  std::string z = x.substr(2, 3);\n-  VERIFY( z == \"llo\" );\n-\n-  x.replace(2, 2, \"r\");\n-  VERIFY( x == \"Hero\" );\n-\n-  x = X;\n-  x.replace(0, 1, \"j\");\n-  VERIFY( x == \"jello\" );\n-\n-  int ar[] = { 'H', 'e', 'l', 'l', 'o' };\n-  x.replace(std::find(x.begin(), x.end(), 'l'), \n-\t    std::find(x.rbegin(), x.rend(), 'l').base(), ar, \n-\t    ar + sizeof(ar) / sizeof(ar[0]));\n-  VERIFY( x == \"jeHelloo\" );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n-  return test;\n-}\n-\n-void\n-test02()\n-{\n-  bool test = true;\n-  const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n-  std::string aux = strlit;\n-  aux.replace(aux.begin()+5, aux.begin()+20,\n-\t      aux.begin()+10, aux.begin()+15);\n-  VERIFY(aux == \"../thg piealei Bay/Kauai/Hawaii\");\n-  \n-  aux = strlit;\n-  aux.replace(aux.begin() + 10, aux.begin() + 15,\n-\t      aux.begin() + 5, aux.begin() + 20);\n-  VERIFY(aux == \"../the lone long pier/Hanr/Hanalei Bay/Kauai/Hawaii\");\n-}\n-\n-// Some more miscellaneous tests\n-void\n-test03()\n-{\n-  bool test = true;\n-  const char* title01 = \"nine types of ambiguity\";\n-  const char* title02 = \"ultra\";\n-  std::string str01 = title01;\n-  std::string str02 = title02;\n-\n-  str01.replace(0, 4, str02);\n-  VERIFY(str01 == \"ultra types of ambiguity\");\n-\n-  str01.replace(15, 9, str02, 2, 2);\n-  VERIFY(str01 == \"ultra types of tr\");\n-\n-  str01 = title01;\n-  str02.replace(0, 0, str01, 0, std::string::npos);\n-  VERIFY(str02 == \"nine types of ambiguityultra\");\n-\n-  str02.replace(11, 2, title02, 5);\n-  VERIFY(str02 == \"nine types ultra ambiguityultra\");\n-\n-  str02.replace(11, 5, title01, 2);\n-  VERIFY(str02 == \"nine types ni ambiguityultra\");\n-\n-  str01.replace(str01.size(), 0, title02);\n-  VERIFY(str01 == \"nine types of ambiguityultra\");\n-  \n-  str01 = title01;\n-  str02 = title02;\n-  str01.replace(str01.begin(), str01.end(), str02);\n-  VERIFY(str01 == \"ultra\");\n-\n-  str01.replace(str01.begin(), str01.begin(), title01, 4);\n-  VERIFY(str01 == \"nineultra\");\n-\n-  str01.replace(str01.end(), str01.end(), title01 + 5, 5);\n-  VERIFY(str01 == \"nineultratypes\");\n-  \n-  str01.replace(str01.begin(), str01.end(), title02);\n-  VERIFY(str01 == \"ultra\");\n-}\n-\n-// Some more tests for \n-// template<typename InputIter>\n-//   string& replace(iterator it1, iterator it2, InputIter j1, InputIter j2)\n-void\n-test04()\n-{\n-  bool test = true;\n-  std::string str01 = \"geogaddi\";\n-  std::string str02;\n-\n-  typedef std::string::iterator iterator;\n-  typedef std::string::const_iterator const_iterator;\n-  \n-  iterator it1 = str01.begin();\n-  iterator it2 = str01.end();\n-  str02.replace(str02.begin(), str02.end(), it1, it2);\n-  VERIFY(str02 == \"geogaddi\");\n-\n-  str02 = \"boards\";\n-  const_iterator c_it1 = str01.begin();\n-  const_iterator c_it2 = str01.end();\n-  str02.replace(str02.begin(), str02.end(), c_it1, c_it2);\n-  VERIFY(str02 == \"geogaddi\");\n-\n-  str02 = \"boards\";\n-  const char* c_ptr1 = str01.c_str();\n-  const char* c_ptr2 = str01.c_str() + 8;\n-  str02.replace(str02.begin(), str02.end(), c_ptr1, c_ptr2);\n-  VERIFY(str02 == \"geogaddi\");\n-\n-  str02 = \"boards\";\n-  char* ptr1 = &*str01.begin();\n-  char* ptr2 = &*str01.end();\n-  str02.replace(str02.begin(), str02.end(), ptr1, ptr2);\n-  VERIFY(str02 == \"geogaddi\");\n-}\n-\n-// We wrongly used __n1 instead of __foldn1 in the length_error\n-// check at the beginning of replace(__pos, __n1, __s, __n2)\n-void\n-test05()\n-{\n-  bool test = true;\n-  std::string str01 = \"londinium\";\n-  std::string str02 = \"cydonia\";\n-\n-  str01.replace(0, 20, str02.c_str(), 3);\n-  VERIFY(str01 == \"cyd\");\n-}\n-\n-int main()\n-{ \n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  return 0;\n-}"}, {"sha": "d51a3d34435fadd94a34b66e2edd86dbe5ab861e", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f1ed592c606d1d2ae272292ad4dbe37d71d78b/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=61f1ed592c606d1d2ae272292ad4dbe37d71d78b", "patch": "@@ -173,7 +173,7 @@ namespace __gnu_cxx_test\n \tVERIFY( preLC_ALL == postLC_ALL );\n       }\n     else\n-      throw environment_variable(string(\"LC_ALL for\") + string(name));\n+      throw environment_variable(string(\"LC_ALL for \") + string(name));\n   }\n   \n   void "}]}