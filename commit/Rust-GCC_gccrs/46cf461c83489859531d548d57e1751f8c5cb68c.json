{"sha": "46cf461c83489859531d548d57e1751f8c5cb68c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjZjQ2MWM4MzQ4OTg1OTUzMWQ1NDhkNTdlMTc1MWY4YzVjYjY4Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-14T17:22:22Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-14T17:22:22Z"}, "message": "Allow uses of interface types to verify.\n\n\ufffd\n\tAllow uses of interface types to verify.  This is not really\n\ttype-safe, but it matches what Sun does, and is OK as long as\n\tthere are appropriate run-time checks.\n\t* verify.c (merge_types):  If merging two interface types,\n\tjust set the result to java.lang.Object.\n\t* expr.c (pop_type):  Any interface is matches by java.lang.Object.\n\nFrom-SVN: r23656", "tree": {"sha": "c372fadfdc48e2a6b988a0d96a60b47f714f4b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c372fadfdc48e2a6b988a0d96a60b47f714f4b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cf461c83489859531d548d57e1751f8c5cb68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cf461c83489859531d548d57e1751f8c5cb68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cf461c83489859531d548d57e1751f8c5cb68c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cf461c83489859531d548d57e1751f8c5cb68c/comments", "author": null, "committer": null, "parents": [{"sha": "bd8dc16507f210e0d01954e65e5d93061c560d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8dc16507f210e0d01954e65e5d93061c560d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8dc16507f210e0d01954e65e5d93061c560d5b"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "9bd1ca7430c3bff5c168b171274d4aa46f7096b3", "filename": "gcc/java/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cf461c83489859531d548d57e1751f8c5cb68c/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cf461c83489859531d548d57e1751f8c5cb68c/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=46cf461c83489859531d548d57e1751f8c5cb68c", "patch": "@@ -268,6 +268,12 @@ pop_type (type)\n \treturn type;\n       else if (can_widen_reference_to (t, type))\n \treturn t;\n+      /* This is a kludge, but matches what Sun's verifier does.\n+\t It can be tricked, but is safe as long as type errors\n+\t (i.e. interface method calls) are caught at run-time. */\n+      else if (CLASS_INTERFACE (TYPE_NAME (TREE_TYPE (type)))\n+\t       && t == object_ptr_type_node)\n+\treturn t;\n     }\n   error (\"unexpected type on stack\");\n   return t;"}, {"sha": "9554a81d523db13c5712aaba8d060d6acd63fd6a", "filename": "gcc/java/verify.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cf461c83489859531d548d57e1751f8c5cb68c/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cf461c83489859531d548d57e1751f8c5cb68c/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=46cf461c83489859531d548d57e1751f8c5cb68c", "patch": "@@ -150,6 +150,32 @@ merge_types (type1, type2)\n \t    }\n \t  return object_ptr_type_node;\n \t}\n+\n+      if (CLASS_INTERFACE (TYPE_NAME (tt1)))\n+\t{\n+\t  if (CLASS_INTERFACE (TYPE_NAME (tt2)))\n+\t    {\n+\t      /* This is a kludge, but matches what Sun's verifier does.\n+\t\t It can be tricked, but is safe as long as type errors\n+\t\t (i.e. interface method calls) are caught at run-time. */\n+\t      return object_ptr_type_node;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (can_widen_reference_to (tt2, tt1))\n+\t\treturn type1;\n+\t      else\n+\t\treturn TYPE_UNKNOWN;\n+\t    }\n+\t}\n+      else if (CLASS_INTERFACE (TYPE_NAME (tt2)))\n+\t{\n+\t  if (can_widen_reference_to (tt1, tt2))\n+\t    return type2;\n+\t  else\n+\t    return TYPE_UNKNOWN;\n+\t}\n+\n       type1 = tt1;\n       type2 = tt2;\n "}]}