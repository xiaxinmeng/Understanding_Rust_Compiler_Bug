{"sha": "15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlY2RjYzZmYzI0ZjFlYWQ0ZjkzZDM2MTk1YjRhNDE4NmE1N2UyOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-01T19:45:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-01T19:45:23Z"}, "message": "re PR libstdc++/42408 (Missing templatized seed())\n\n2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/42408\n\t* include/bits/random.h (linear_congruential_engine<>::\n\tlinear_congruential_engine(seed_seq&),\n\tlinear_congruential_engine<>::seed(seed_seq&),\n\tmersenne_twister<>::mersenne_twister(seed_seq&),\n\tmersenne_twister<>::seed(seed_seq&),\n\tsubtract_with_carry_engine<>::subtract_with_carry_engine(seed_seq&),\n\tsubtract_with_carry_engine<>::seed(seed_seq&),\n\tdiscard_block_engine<>::discard_block_engine(seed_seq&),\n\tdiscard_block_engine<>::seed(seed_seq&),\n\tindependent_bits_engine<>::independent_bits_engine(seed_seq&),\n\tindependent_bits_engine<>::seed(seed_seq&),\n\tshuffle_order_engine<>::shuffle_order_engine(seed_seq&),\n\tshuffle_order_engine<>::seed(seed_seq&)): Templatize.\n\t* include/bits/random.tcc: Adjust.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n\tseed_seq.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n\tseed_seq.cc: Likewise.\n\t* testsuite/26_numerics/random/linear_congruential_engine/\n\tcons/seed_seq.cc: Likewise.\n\nFrom-SVN: r156430", "tree": {"sha": "bdd43c0299dfec42b0b172f6e5e2c25b3a816c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdd43c0299dfec42b0b172f6e5e2c25b3a816c37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/comments", "author": null, "committer": null, "parents": [{"sha": "87d05b4491ae7e9343f11c4c52c0486456a3e120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d05b4491ae7e9343f11c4c52c0486456a3e120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d05b4491ae7e9343f11c4c52c0486456a3e120"}], "stats": {"total": 422, "additions": 300, "deletions": 122}, "files": [{"sha": "2e9e849a2dbf0e004209be22988ed8513e5d32d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -1,3 +1,27 @@\n+2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/42408\n+\t* include/bits/random.h (linear_congruential_engine<>::\n+\tlinear_congruential_engine(seed_seq&),\n+\tlinear_congruential_engine<>::seed(seed_seq&),\n+\tmersenne_twister<>::mersenne_twister(seed_seq&),\n+\tmersenne_twister<>::seed(seed_seq&),\n+\tsubtract_with_carry_engine<>::subtract_with_carry_engine(seed_seq&),\n+\tsubtract_with_carry_engine<>::seed(seed_seq&),\n+\tdiscard_block_engine<>::discard_block_engine(seed_seq&),\n+\tdiscard_block_engine<>::seed(seed_seq&),\n+\tindependent_bits_engine<>::independent_bits_engine(seed_seq&),\n+\tindependent_bits_engine<>::seed(seed_seq&),\n+\tshuffle_order_engine<>::shuffle_order_engine(seed_seq&),\n+\tshuffle_order_engine<>::seed(seed_seq&)): Templatize.\n+\t* include/bits/random.tcc: Adjust.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n+\tseed_seq.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n+\tseed_seq.cc: Likewise.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/\n+\tcons/seed_seq.cc: Likewise.\n+\n 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h (forward_list<>::resize(size_type),"}, {"sha": "528a04a091185e73aab243ca72c630be3361800c", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 77, "deletions": 48, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,8 +50,6 @@ namespace std\n     _RealType\n     generate_canonical(_UniformRandomNumberGenerator& __g);\n \n-  class seed_seq;\n-\n   /*\n    * Implementation-space details.\n    */\n@@ -179,17 +177,19 @@ namespace std\n        */\n       explicit\n       linear_congruential_engine(result_type __s = default_seed)\n-      { this->seed(__s); }\n+      { seed(__s); }\n \n       /**\n        * @brief Constructs a %linear_congruential_engine random number\n        *        generator engine seeded from the seed sequence @p __q.\n        *\n        * @param __q the seed sequence.\n        */\n-      explicit\n-      linear_congruential_engine(seed_seq& __q)\n-      { this->seed(__q); }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        explicit\n+        linear_congruential_engine(_Sseq& __q)\n+        { seed<_Sseq>(__q); }\n \n       /**\n        * @brief Reseeds the %linear_congruential_engine random number generator\n@@ -207,8 +207,10 @@ namespace std\n        *\n        * @param __q the seed sequence.\n        */\n-      void\n-      seed(seed_seq& __q);\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q);\n \n       /**\n        * @brief Gets the smallest possible value in the output range.\n@@ -398,15 +400,19 @@ namespace std\n        *\n        * @param __q the seed sequence.\n        */\n-      explicit\n-      mersenne_twister_engine(seed_seq& __q)\n-      { seed(__q); }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        explicit\n+        mersenne_twister_engine(_Sseq& __q)\n+        { seed<_Sseq>(__q); }\n \n       void\n       seed(result_type __sd = default_seed);\n \n-      void\n-      seed(seed_seq& __q);\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q);\n \n       /**\n        * @brief Gets the smallest possible value in the output range.\n@@ -557,17 +563,19 @@ namespace std\n        */\n       explicit\n       subtract_with_carry_engine(result_type __sd = default_seed)\n-      { this->seed(__sd); }\n+      { seed(__sd); }\n \n       /**\n        * @brief Constructs a %subtract_with_carry_engine random number engine\n        *        seeded from the seed sequence @p __q.\n        *\n        * @param __q the seed sequence.\n        */\n-      explicit\n-      subtract_with_carry_engine(seed_seq& __q)\n-      { this->seed(__q); }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        explicit\n+        subtract_with_carry_engine(_Sseq& __q)\n+        { seed<_Sseq>(__q); }\n \n       /**\n        * @brief Seeds the initial state @f$ x_0 @f$ of the random number\n@@ -588,8 +596,10 @@ namespace std\n        * @brief Seeds the initial state @f$ x_0 @f$ of the\n        * % subtract_with_carry_engine random number generator.\n        */\n-      void\n-      seed(seed_seq& __q);\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q);\n \n       /**\n        * @brief Gets the inclusive minimum value of the range of random\n@@ -670,7 +680,8 @@ namespace std\n        *        @p __is.\n        *\n        * @param __is An input stream.\n-       * @param __x  A % subtract_with_carry_engine random number generator engine.\n+       * @param __x  A % subtract_with_carry_engine random number generator\n+       *             engine.\n        *\n        * @returns The input stream with the state of @p __x extracted or in\n        * an error state.\n@@ -751,10 +762,14 @@ namespace std\n        *\n        * @param __q A seed sequence.\n        */\n-      explicit\n-      discard_block_engine(seed_seq& __q)\n-      : _M_b(__q), _M_n(0)\n-      { }\n+      template<typename _Sseq, typename\n+        = typename std::enable_if<std::is_class<_Sseq>::value\n+\t\t\t\t  && !std::is_same<_Sseq, _RandomNumberEngine>\n+\t\t\t\t  ::value>::type>\n+        explicit\n+        discard_block_engine(_Sseq& __q)\n+\t: _M_b(__q), _M_n(0)\n+        { }\n \n       /**\n        * @brief Reseeds the %discard_block_engine object with the default\n@@ -783,12 +798,14 @@ namespace std\n        *        sequence.\n        * @param __q A seed generator function.\n        */\n-      void\n-      seed(seed_seq& __q)\n-      {\n-        _M_b.seed(__q);\n-        _M_n = 0;\n-      }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q)\n+        {\n+\t  _M_b.seed<_Sseq>(__q);\n+\t  _M_n = 0;\n+\t}\n \n       /**\n        * @brief Gets a const reference to the underlying generator engine\n@@ -949,10 +966,14 @@ namespace std\n        *\n        * @param __q A seed sequence.\n        */\n-      explicit\n-      independent_bits_engine(seed_seq& __q)\n-      : _M_b(__q)\n-      { }\n+      template<typename _Sseq, typename\n+        = typename std::enable_if<std::is_class<_Sseq>::value\n+\t\t\t\t  && !std::is_same<_Sseq, _RandomNumberEngine>\n+\t\t\t\t  ::value>::type>\n+        explicit\n+        independent_bits_engine(_Sseq& __q)\n+        : _M_b(__q)\n+        { }\n \n       /**\n        * @brief Reseeds the %independent_bits_engine object with the default\n@@ -975,9 +996,11 @@ namespace std\n        *        seed sequence.\n        * @param __q A seed generator function.\n        */\n-      void\n-      seed(seed_seq& __q)\n-      { _M_b.seed(__q); }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q)\n+        { _M_b.seed<_Sseq>(__q); }\n \n       /**\n        * @brief Gets a const reference to the underlying generator engine\n@@ -1150,10 +1173,14 @@ namespace std\n        *\n        * @param __q A seed sequence.\n        */\n-      explicit\n-      shuffle_order_engine(seed_seq& __q)\n-      : _M_b(__q)\n-      { _M_initialize(); }\n+      template<typename _Sseq, typename\n+        = typename std::enable_if<std::is_class<_Sseq>::value\n+\t\t\t\t  && !std::is_same<_Sseq, _RandomNumberEngine>\n+\t\t\t\t  ::value>::type>\n+        explicit\n+        shuffle_order_engine(_Sseq& __q)\n+        : _M_b(__q)\n+        { _M_initialize(); }\n \n       /**\n        * @brief Reseeds the %shuffle_order_engine object with the default seed\n@@ -1182,12 +1209,14 @@ namespace std\n        *        sequence.\n        * @param __q A seed generator function.\n        */\n-      void\n-      seed(seed_seq& __q)\n-      {\n-        _M_b.seed(__q);\n-        _M_initialize();\n-      }\n+      template<typename _Sseq, typename\n+\t       = typename std::enable_if<std::is_class<_Sseq>::value>::type>\n+        void\n+        seed(_Sseq& __q)\n+        {\n+\t  _M_b.seed<_Sseq>(__q);\n+\t  _M_initialize();\n+\t}\n \n       /**\n        * Gets a const reference to the underlying generator engine object."}, {"sha": "4a8c4d86f710210a5218a09543b018ae08442ae4", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 77, "deletions": 74, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -126,24 +126,25 @@ namespace std\n    * Seeds the LCR engine with a value generated by @p __q.\n    */\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    void\n-    linear_congruential_engine<_UIntType, __a, __c, __m>::\n-    seed(seed_seq& __q)\n-    {\n-      const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits\n-\t                              : std::__lg(__m);\n-      const _UIntType __k = (__k0 + 31) / 32;\n-      uint_least32_t __arr[__k + 3];\n-      __q.generate(__arr + 0, __arr + __k + 3);\n-      _UIntType __factor = 1u;\n-      _UIntType __sum = 0u;\n-      for (size_t __j = 0; __j < __k; ++__j)\n-        {\n-          __sum += __arr[__j + 3] * __factor;\n-          __factor *= __detail::_Shift<_UIntType, 32>::__value;\n-        }\n-      seed(__sum);\n-    }\n+    template<typename _Sseq, typename>\n+      void\n+      linear_congruential_engine<_UIntType, __a, __c, __m>::\n+      seed(_Sseq& __q)\n+      {\n+\tconst _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits\n+\t                                : std::__lg(__m);\n+\tconst _UIntType __k = (__k0 + 31) / 32;\n+\tuint_least32_t __arr[__k + 3];\n+\t__q.generate(__arr + 0, __arr + __k + 3);\n+\t_UIntType __factor = 1u;\n+\t_UIntType __sum = 0u;\n+\tfor (size_t __j = 0; __j < __k; ++__j)\n+\t  {\n+\t    __sum += __arr[__j + 3] * __factor;\n+\t    __factor *= __detail::_Shift<_UIntType, 32>::__value;\n+\t  }\n+\tseed(__sum);\n+      }\n \n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n \t   typename _CharT, typename _Traits>\n@@ -343,43 +344,44 @@ namespace std\n \t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n \t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n \t   _UIntType __f>\n-    void\n-    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+    template<typename _Sseq, typename>\n+      void\n+      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n \t\t\t      __s, __b, __t, __c, __l, __f>::\n-    seed(seed_seq& __q)\n-    {\n-      const _UIntType __upper_mask = (~_UIntType()) << __r;\n-      const size_t __k = (__w + 31) / 32;\n-      uint_least32_t __arr[__n * __k];\n-      __q.generate(__arr + 0, __arr + __n * __k);\n-\n-      bool __zero = true;\n-      for (size_t __i = 0; __i < state_size; ++__i)\n-        {\n-          _UIntType __factor = 1u;\n-          _UIntType __sum = 0u;\n-          for (size_t __j = 0; __j < __k; ++__j)\n-            {\n-\t      __sum += __arr[__k * __i + __j] * __factor;\n-\t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n-            }\n-          _M_x[__i] = __detail::__mod<_UIntType,\n-\t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n+      seed(_Sseq& __q)\n+      {\n+\tconst _UIntType __upper_mask = (~_UIntType()) << __r;\n+\tconst size_t __k = (__w + 31) / 32;\n+\tuint_least32_t __arr[__n * __k];\n+\t__q.generate(__arr + 0, __arr + __n * __k);\n+\n+\tbool __zero = true;\n+\tfor (size_t __i = 0; __i < state_size; ++__i)\n+\t  {\n+\t    _UIntType __factor = 1u;\n+\t    _UIntType __sum = 0u;\n+\t    for (size_t __j = 0; __j < __k; ++__j)\n+\t      {\n+\t\t__sum += __arr[__k * __i + __j] * __factor;\n+\t\t__factor *= __detail::_Shift<_UIntType, 32>::__value;\n+\t      }\n+\t    _M_x[__i] = __detail::__mod<_UIntType,\n+\t      __detail::_Shift<_UIntType, __w>::__value>(__sum);\n \n-          if (__zero)\n-            {\n-\t      if (__i == 0)\n-\t        {\n-\t          if ((_M_x[0] & __upper_mask) != 0u)\n-\t            __zero = false;\n-\t        }\n-\t      else if (_M_x[__i] != 0u)\n-\t        __zero = false;\n-            }\n-        }\n+\t    if (__zero)\n+\t      {\n+\t\tif (__i == 0)\n+\t\t  {\n+\t\t    if ((_M_x[0] & __upper_mask) != 0u)\n+\t\t      __zero = false;\n+\t\t  }\n+\t\telse if (_M_x[__i] != 0u)\n+\t\t  __zero = false;\n+\t      }\n+\t  }\n         if (__zero)\n           _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;\n-    }\n+      }\n \n   template<typename _UIntType, size_t __w,\n \t   size_t __n, size_t __m, size_t __r,\n@@ -529,29 +531,30 @@ namespace std\n     }\n \n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n-    void\n-    subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n-    seed(seed_seq& __q)\n-    {\n-      const size_t __k = (__w + 31) / 32;\n-      uint_least32_t __arr[__r * __k];\n-      __q.generate(__arr + 0, __arr + __r * __k);\n+    template<typename _Sseq, typename>\n+      void\n+      subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n+      seed(_Sseq& __q)\n+      {\n+\tconst size_t __k = (__w + 31) / 32;\n+\tuint_least32_t __arr[__r * __k];\n+\t__q.generate(__arr + 0, __arr + __r * __k);\n \n-      for (size_t __i = 0; __i < long_lag; ++__i)\n-        {\n-          _UIntType __sum = 0u;\n-          _UIntType __factor = 1u;\n-          for (size_t __j = 0; __j < __k; ++__j)\n-            {\n-\t      __sum += __arr[__k * __i + __j] * __factor;\n-\t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n-            }\n-          _M_x[__i] = __detail::__mod<_UIntType,\n-\t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n-        }\n-      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n-      _M_p = 0;\n-    }\n+\tfor (size_t __i = 0; __i < long_lag; ++__i)\n+\t  {\n+\t    _UIntType __sum = 0u;\n+\t    _UIntType __factor = 1u;\n+\t    for (size_t __j = 0; __j < __k; ++__j)\n+\t      {\n+\t\t__sum += __arr[__k * __i + __j] * __factor;\n+\t\t__factor *= __detail::_Shift<_UIntType, 32>::__value;\n+\t      }\n+\t    _M_x[__i] = __detail::__mod<_UIntType,\n+\t      __detail::_Shift<_UIntType, __w>::__value>(__sum);\n+\t  }\n+\t_M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+\t_M_p = 0;\n+      }\n \n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::"}, {"sha": "4ec39b5bd3a76d1b435a43718d4481f607e75757", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/cons/seed_seq.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq.cc?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  std::seed_seq seed;\n+  std::linear_congruential_engine<unsigned long, 48271, 0, 2147483647> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c2fb9131d3642446e57d1166c8176c6fe838d73c", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/cons/seed_seq.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq.cc?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  std::seed_seq seed;\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "617c455dab6fd498b2a1ec2b6aab6273afbb66e2", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/seed_seq.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ecdcc6fc24f1ead4f93d36195b4a4186a57e29/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq.cc?ref=15ecdcc6fc24f1ead4f93d36195b4a4186a57e29", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  std::seed_seq seed;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}