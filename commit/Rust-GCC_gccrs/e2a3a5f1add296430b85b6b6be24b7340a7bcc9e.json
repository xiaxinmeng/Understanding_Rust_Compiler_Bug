{"sha": "e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhM2E1ZjFhZGQyOTY0MzBiODViNmI2YmUyNGI3MzQwYTdiY2M5ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-12T12:14:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-12T12:14:45Z"}, "message": "re PR tree-optimization/48172 (incorrect vectorization of loop in GCC 4.5.* with -O3)\n\n2011-05-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/48172\n\t* tree-vect-loop-manip.c (vect_vfa_segment_size): Do not exclude\n\tthe number of iterations from the segment size calculation.\n\t(vect_create_cond_for_alias_checks): Adjust.\n\n\t* gcc.dg/vect/pr48172.c: New testcase.\n\nFrom-SVN: r173703", "tree": {"sha": "cf899c907f573aea77afa842e6421886a7bacd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf899c907f573aea77afa842e6421886a7bacd7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c703f3a6a2a283318a0678fc8a5eba27b6663df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c703f3a6a2a283318a0678fc8a5eba27b6663df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c703f3a6a2a283318a0678fc8a5eba27b6663df"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "71cb451cf26900f628c8dca8a458f6ac9c13ad5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "patch": "@@ -1,3 +1,10 @@\n+2011-05-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48172\n+\t* tree-vect-loop-manip.c (vect_vfa_segment_size): Do not exclude\n+\tthe number of iterations from the segment size calculation.\n+\t(vect_create_cond_for_alias_checks): Adjust.\n+\n 2011-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/48967"}, {"sha": "f6b9ba047dd0500548960ceac91a9d0eb6293b12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "patch": "@@ -1,3 +1,8 @@\n+2011-05-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48172\n+\t* gcc.dg/vect/pr48172.c: New testcase.\n+\n 2011-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/48967"}, {"sha": "892aecaf811e3be685c4b4ed37091070767a00aa", "filename": "gcc/testsuite/gcc.dg/vect/pr48172.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr48172.c?ref=e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+extern void *memset(void *s, int c, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+#define ASIZE 1028\n+#define HALF (ASIZE/2)\n+\n+int main() {\n+  unsigned int array[ASIZE];\n+  int i;\n+\n+  memset(array, 0, sizeof(array));\n+\n+  /* initialize first half of the array */\n+  for (i = 0; i < HALF; i++)\n+    array[i] = i;\n+\n+  /* fill second half of array in by summing earlier elements of the array\n+     gcc 4.5.1 and 4.5.2 incorrectly vectorize this loop!  aray[1025] is left\n+     at 0 for ASIZE=1028 */\n+  for (i = 0; i < HALF-1; i++)\n+    array[HALF+i] = array[2*i] + array[2*i + 1];\n+\n+  /* see if we have any failures */\n+  for (i = 0; i < HALF - 1; i++)\n+    if (array[HALF+i] != array[2*i] + array[2*i + 1])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d990e7f45f84bc0437408104ab3a83891d871e50", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a3a5f1add296430b85b6b6be24b7340a7bcc9e/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=e2a3a5f1add296430b85b6b6be24b7340a7bcc9e", "patch": "@@ -2354,26 +2354,31 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n    Input:\n      DR: The data reference.\n      VECT_FACTOR: vectorization factor.\n+     SCALAR_LOOP_NITERS: number of iterations.\n \n    Return an expression whose value is the size of segment which will be\n    accessed by DR.  */\n \n static tree\n-vect_vfa_segment_size (struct data_reference *dr, tree vect_factor)\n+vect_vfa_segment_size (struct data_reference *dr, int vect_factor,\n+\t\t       tree scalar_loop_niters)\n {\n-  tree segment_length = fold_build2 (MULT_EXPR, integer_type_node,\n-\t\t\t             DR_STEP (dr), vect_factor);\n-\n+  tree segment_length;\n+  segment_length = size_binop (MULT_EXPR,\n+\t\t\t       fold_convert (sizetype, DR_STEP (dr)),\n+\t\t\t       size_int (vect_factor));\n+  segment_length = size_binop (MULT_EXPR,\n+\t\t\t       segment_length,\n+\t\t\t       fold_convert (sizetype, scalar_loop_niters));\n   if (vect_supportable_dr_alignment (dr, false)\n         == dr_explicit_realign_optimized)\n     {\n       tree vector_size = TYPE_SIZE_UNIT\n \t\t\t  (STMT_VINFO_VECTYPE (vinfo_for_stmt (DR_STMT (dr))));\n \n-      segment_length = fold_build2 (PLUS_EXPR, integer_type_node,\n-\t\t\t\t    segment_length, vector_size);\n+      segment_length = size_binop (PLUS_EXPR, segment_length, vector_size);\n     }\n-  return fold_convert (sizetype, segment_length);\n+  return segment_length;\n }\n \n \n@@ -2407,8 +2412,8 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   VEC (ddr_p, heap) * may_alias_ddrs =\n     LOOP_VINFO_MAY_ALIAS_DDRS (loop_vinfo);\n-  tree vect_factor =\n-    build_int_cst (integer_type_node, LOOP_VINFO_VECT_FACTOR (loop_vinfo));\n+  int vect_factor = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n+  tree scalar_loop_iters = LOOP_VINFO_NITERS (loop_vinfo);\n \n   ddr_p ddr;\n   unsigned int i;\n@@ -2460,8 +2465,10 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n         vect_create_addr_base_for_vector_ref (stmt_b, cond_expr_stmt_list,\n \t\t\t\t\t      NULL_TREE, loop);\n \n-      segment_length_a = vect_vfa_segment_size (dr_a, vect_factor);\n-      segment_length_b = vect_vfa_segment_size (dr_b, vect_factor);\n+      segment_length_a = vect_vfa_segment_size (dr_a, vect_factor,\n+\t\t\t\t\t\tscalar_loop_iters);\n+      segment_length_b = vect_vfa_segment_size (dr_b, vect_factor,\n+\t\t\t\t\t\tscalar_loop_iters);\n \n       if (vect_print_dump_info (REPORT_DR_DETAILS))\n \t{"}]}