{"sha": "e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlMmU2NTNkN2ZkY2Y2YzlmMWNhZmI3NmZiYjAxNmMxODc5MDI5ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-11T17:03:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-11T17:03:36Z"}, "message": "re PR target/16457 (PowerPC - Combine two rldicr instructions into a single rlwinm.)\n\n.:\tPR target/16457\n\t* config/rs6000/rs6000.c (mask64_2_operand): Stub to call\n\tmask64_1or2_operand.\n\t(mask64_1or_2_operand): Broken out of mask64_2_operand, add flag\n\tto spot rlwinm opportunities.\n\t(and64_2_operand): Use mask_1or2_operand.\n\t* config/rs6000/rs6000.md (anddi3): Use rlwinm when possible.\ntestsuite:\n\tPR target/16457\n\t* gcc.dg/ppc-and-1: New\n\nFrom-SVN: r90481", "tree": {"sha": "efdb48c0d188106687c9363a2b7beb368a971779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efdb48c0d188106687c9363a2b7beb368a971779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/comments", "author": null, "committer": null, "parents": [{"sha": "00803cd56f7d96060766249a23f3e89f778ad8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00803cd56f7d96060766249a23f3e89f778ad8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00803cd56f7d96060766249a23f3e89f778ad8f3"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "21599f4ac204ccbc4e1ab8f7e806a4702f30e236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "patch": "@@ -1,3 +1,13 @@\n+2004-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR target/16457\n+\t* config/rs6000/rs6000.c (mask64_2_operand): Stub to call\n+\tmask64_1or2_operand.\n+\t(mask64_1or2_operand): Broken out of mask64_2_operand, add flag\n+\tto spot rlwinm opportunities.\n+\t(and64_2_operand): Use mask_1or2_operand.\n+\t* config/rs6000/rs6000.md (anddi3): Use rlwinm when possible.\n+\n 2004-11-11  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* tree-vectorizer.c (update_phi_nodes_for_guard): Call reverse_phis."}, {"sha": "ada49ce5ecdba802f051ef9e6cb4a7302ff65aef", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "patch": "@@ -2708,23 +2708,26 @@ mask64_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-/* Like mask64_operand, but allow up to three transitions.  This\n-   predicate is used by insn patterns that generate two rldicl or\n-   rldicr machine insns.  */\n-\n-int\n-mask64_2_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+static int\n+mask64_1or2_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t       bool allow_one)\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n       HOST_WIDE_INT c, lsb;\n-\n+      bool one_ok;\n+      \n       c = INTVAL (op);\n \n       /* Disallow all zeros.  */\n       if (c == 0)\n \treturn 0;\n \n+      /* We can use a single rlwinm insn if no upper bits of C are set\n+         AND there are zero, one or two transitions in the _whole_ of\n+         C.  */\n+      one_ok = !(c & ~(HOST_WIDE_INT)0xffffffff);\n+      \n       /* We don't change the number of transitions by inverting,\n \t so make sure we start with the LS bit zero.  */\n       if (c & 1)\n@@ -2748,6 +2751,9 @@ mask64_2_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       /* Erase second transition.  */\n       c &= -lsb;\n \n+      if (one_ok && !(allow_one || c))\n+\treturn 0;\n+\n       /* Find the third transition (if any).  */\n       lsb = c & -c;\n \n@@ -2757,6 +2763,14 @@ mask64_2_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n+/* Like mask64_operand, but allow up to three transitions.  This\n+   predicate is used by insn patterns that generate two rldicl or\n+   rldicr machine insns.   */\n+int mask64_2_operand (rtx op, enum machine_mode mode)\n+{\n+  return mask64_1or2_operand (op, mode, false);\n+}\n+\n /* Generates shifts and masks for a pair of rldicl or rldicr insns to\n    implement ANDing by the mask IN.  */\n void\n@@ -2846,9 +2860,9 @@ int\n and64_2_operand (rtx op, enum machine_mode mode)\n {\n   if (fixed_regs[CR0_REGNO])\t/* CR0 not available, don't do andi./andis.  */\n-    return gpc_reg_operand (op, mode) || mask64_2_operand (op, mode);\n+    return gpc_reg_operand (op, mode) || mask64_1or2_operand (op, mode, true);\n \n-  return logical_operand (op, mode) || mask64_2_operand (op, mode);\n+  return logical_operand (op, mode) || mask64_1or2_operand (op, mode, true);\n }\n \n /* Return 1 if the operand is either a non-special register or a"}, {"sha": "1902f5ddec092e56b7e3e33d3f94afe87fcfd867", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "patch": "@@ -7197,19 +7197,20 @@\n   \"\")\n \n (define_insn \"anddi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n-\t(and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t(match_operand:DI 2 \"and64_2_operand\" \"?r,S,K,J,t\")))\n-   (clobber (match_scratch:CC 3 \"=X,X,x,x,X\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n+\t(and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r\")\n+\t\t(match_operand:DI 2 \"and64_2_operand\" \"?r,S,T,K,J,t\")))\n+   (clobber (match_scratch:CC 3 \"=X,X,X,x,x,X\"))]\n   \"TARGET_POWERPC64\"\n   \"@\n    and %0,%1,%2\n    rldic%B2 %0,%1,0,%S2\n+   rlwinm %0,%1,0,%m2,%M2\n    andi. %0,%1,%b2\n    andis. %0,%1,%u2\n    #\"\n-  [(set_attr \"type\" \"*,*,compare,compare,*\")\n-   (set_attr \"length\" \"4,4,4,4,8\")])\n+  [(set_attr \"type\" \"*,*,*,compare,compare,*\")\n+   (set_attr \"length\" \"4,4,4,4,4,8\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -7227,10 +7228,9 @@\n \t(and:DI (rotate:DI (match_dup 0)\n \t\t\t   (match_dup 6))\n \t\t(match_dup 7)))]\n-  \"\n {\n   build_mask64_2_operands (operands[2], &operands[4]);\n-}\")\n+})\n \n (define_insn \"*anddi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,x,?y,?y,??y,??y,?y\")"}, {"sha": "776f8e4e4480e68f7e6379da85a8e63cb36da419", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "patch": "@@ -1,5 +1,8 @@\n 2004-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR target/16457\n+\t* gcc.dg/ppc-and-1: New\n+\n \tPR target/16796\n \t* gcc.dg/ppc-mov-1.c: New.\n "}, {"sha": "88a4b7a88cd6d86cd2ea4c4a89c6f348349ddcde", "filename": "gcc/testsuite/gcc.dg/ppc-and-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-and-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-and-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-and-1.c?ref=e1e2e653d7fdcf6c9f1cafb76fbb016c1879029d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target powerpc64-*-* } } */\n+/* { dg-options \"-m64 -O2\" } */\n+\n+/* { dg-final { scan-assembler \"rlwinm \\[0-9\\]+,\\[0-9\\]+,0,0,30\"  } } */\n+/* { dg-final { scan-assembler \"rlwinm \\[0-9\\]+,\\[0-9\\]+,0,29,30\"  } } */\n+/* { dg-final { scan-assembler-not \"rldicr\" } } */\n+\n+/* Origin:Pete Steinmetz <steinmtz@us.ibm.com> */\n+\n+/* PR 16457 - use rlwinm insn.  */\n+\n+char *foo1 (char *p, unsigned int x)\n+{\n+  return p - (x & ~1);\n+}\n+\n+char *foo2 (char *p, unsigned int x)\n+{\n+  return p - (x & 6);\n+}"}]}