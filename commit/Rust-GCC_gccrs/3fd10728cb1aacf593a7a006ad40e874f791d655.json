{"sha": "3fd10728cb1aacf593a7a006ad40e874f791d655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkMTA3MjhjYjFhYWNmNTkzYTdhMDA2YWQ0MGU4NzRmNzkxZDY1NQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-15T15:48:59Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T15:55:55Z"}, "message": "aarch64: Use RTL builtins for integer mls_n intrinsics\n\nRewrite integer mls_n Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-15  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add mls_n builtin\n\tgenerator macro.\n\t* config/aarch64/aarch64-simd.md (*aarch64_mls_elt_merge<mode>):\n\tRename to...\n\t(aarch64_mls_n<mode>): This.\n\t* config/aarch64/arm_neon.h (vmls_n_s16): Use RTL builtin\n\tinstead of asm.\n\t(vmls_n_s32): Likewise.\n\t(vmls_n_u16): Likewise.\n\t(vmls_n_u32): Likewise.\n\t(vmlsq_n_s16): Likewise.\n\t(vmlsq_n_s32): Likewise.\n\t(vmlsq_n_u16): Likewise.\n\t(vmlsq_n_u32): Likewise.", "tree": {"sha": "633b6cd58747b69e58250a47b455af33e3ce6096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/633b6cd58747b69e58250a47b455af33e3ce6096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd10728cb1aacf593a7a006ad40e874f791d655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd10728cb1aacf593a7a006ad40e874f791d655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd10728cb1aacf593a7a006ad40e874f791d655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd10728cb1aacf593a7a006ad40e874f791d655/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2201ac0df461cb97a0187afc230029a6790b70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2201ac0df461cb97a0187afc230029a6790b70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2201ac0df461cb97a0187afc230029a6790b70e"}], "stats": {"total": 77, "additions": 24, "deletions": 53}, "files": [{"sha": "32aee6024a89e6ca1f423717463fe67d011afd8b", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3fd10728cb1aacf593a7a006ad40e874f791d655", "patch": "@@ -185,6 +185,8 @@\n \n   /* Implemented by aarch64_mls<mode>.  */\n   BUILTIN_VDQ_BHSI (TERNOP, mls, 0, NONE)\n+  /* Implemented by aarch64_mls_n<mode>.  */\n+  BUILTIN_VDQHS (TERNOP, mls_n, 0, NONE)\n \n   /* Implemented by aarch64_<su>mlsl<mode>.  */\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)"}, {"sha": "544bac7dc9b62a9d5387465ec26d0e3204be6601", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3fd10728cb1aacf593a7a006ad40e874f791d655", "patch": "@@ -1443,15 +1443,16 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"*aarch64_mls_elt_merge<mode>\"\n+(define_insn \"aarch64_mls_n<mode>\"\n   [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n \t(minus:VDQHS\n \t  (match_operand:VDQHS 1 \"register_operand\" \"0\")\n-\t  (mult:VDQHS (vec_duplicate:VDQHS\n-\t\t  (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\"))\n-\t\t(match_operand:VDQHS 3 \"register_operand\" \"w\"))))]\n+\t  (mult:VDQHS\n+\t    (vec_duplicate:VDQHS\n+\t      (match_operand:<VEL> 3 \"register_operand\" \"<h_con>\"))\n+\t    (match_operand:VDQHS 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n-  \"mls\\t%0.<Vtype>, %3.<Vtype>, %2.<Vetype>[0]\"\n+  \"mls\\t%0.<Vtype>, %2.<Vtype>, %3.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n "}, {"sha": "d891067f021a0bcc24af79dfbe2d9dd5889b23bc", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 16, "deletions": 48, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd10728cb1aacf593a7a006ad40e874f791d655/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3fd10728cb1aacf593a7a006ad40e874f791d655", "patch": "@@ -7840,48 +7840,32 @@ __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_s16 (int16x4_t __a, int16x4_t __b, int16_t __c)\n {\n-  int16x4_t __result;\n-  __asm__ (\"mls %0.4h, %2.4h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mls_nv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_s32 (int32x2_t __a, int32x2_t __b, int32_t __c)\n {\n-  int32x2_t __result;\n-  __asm__ (\"mls %0.2s, %2.2s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mls_nv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_u16 (uint16x4_t __a, uint16x4_t __b, uint16_t __c)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"mls %0.4h, %2.4h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x4_t) __builtin_aarch64_mls_nv4hi ((int16x4_t) __a,\n+                                                   (int16x4_t) __b,\n+                                                   (int16_t) __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_u32 (uint32x2_t __a, uint32x2_t __b, uint32_t __c)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"mls %0.2s, %2.2s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x2_t) __builtin_aarch64_mls_nv2si ((int32x2_t) __a,\n+                                                   (int32x2_t) __b,\n+                                                   (int32_t) __c);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -8353,48 +8337,32 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"mls %0.8h, %2.8h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mls_nv8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_s32 (int32x4_t __a, int32x4_t __b, int32_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"mls %0.4s, %2.4s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mls_nv4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"mls %0.8h, %2.8h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x8_t) __builtin_aarch64_mls_nv8hi ((int16x8_t) __a,\n+                                                   (int16x8_t) __b,\n+                                                   (int16_t) __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"mls %0.4s, %2.4s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x4_t) __builtin_aarch64_mls_nv4si ((int32x4_t) __a,\n+                                                   (int32x4_t) __b,\n+                                                   (int32_t) __c);\n }\n \n __extension__ extern __inline int8x16_t"}]}