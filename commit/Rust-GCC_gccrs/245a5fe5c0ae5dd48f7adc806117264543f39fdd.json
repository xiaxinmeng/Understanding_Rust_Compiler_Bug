{"sha": "245a5fe5c0ae5dd48f7adc806117264543f39fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1YTVmZTVjMGFlNWRkNDhmN2FkYzgwNjExNzI2NDU0M2YzOWZkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-29T01:59:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-29T01:59:49Z"}, "message": "stl_algobase.h (_GLIBCXX_MOVE3, [...]): Add.\n\n2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (_GLIBCXX_MOVE3,\n\t_GLIBCXX_MOVE_BACKWARD3): Add.\n\t* include/bits/stl_iterator.h (_GLIBCXX_MAKE_MOVE_ITERATOR): Add.\n\t* include/bits/vector.tcc (vector<>::reserve): Use the latter.\n\t(vector<>::erase): Use _GLIBCXX_MOVE3.\n\t* include/bits/deque.tcc (deque<>::erase): Use _GLIBCXX_MOVE3\n\tand _GLIBCXX_MOVE_BACKWARD3.\n\t* testsuite/23_containers/vector/modifiers/erase/moveable.cc: New.\n\t* testsuite/23_containers/vector/capacity/reserve/moveable.cc: New.\n\t* testsuite/23_containers/deque/modifiers/erase/moveable.cc: New.\n\nFrom-SVN: r129714", "tree": {"sha": "47d022b9433df64512da2d422daf44d4cc5ebbc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47d022b9433df64512da2d422daf44d4cc5ebbc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/245a5fe5c0ae5dd48f7adc806117264543f39fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245a5fe5c0ae5dd48f7adc806117264543f39fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245a5fe5c0ae5dd48f7adc806117264543f39fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245a5fe5c0ae5dd48f7adc806117264543f39fdd/comments", "author": null, "committer": null, "parents": [{"sha": "a3ef23490a906c6e8e6a3309f9a8f6a470709384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ef23490a906c6e8e6a3309f9a8f6a470709384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ef23490a906c6e8e6a3309f9a8f6a470709384"}], "stats": {"total": 239, "additions": 231, "deletions": 8}, "files": [{"sha": "440c7cdfc423cb23ae97ae2ff8cd11eb86915202", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -1,3 +1,16 @@\n+2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (_GLIBCXX_MOVE3,\n+\t_GLIBCXX_MOVE_BACKWARD3): Add.\n+\t* include/bits/stl_iterator.h (_GLIBCXX_MAKE_MOVE_ITERATOR): Add.\n+\t* include/bits/vector.tcc (vector<>::reserve): Use the latter.\n+\t(vector<>::erase): Use _GLIBCXX_MOVE3.\n+\t* include/bits/deque.tcc (deque<>::erase): Use _GLIBCXX_MOVE3\n+\tand _GLIBCXX_MOVE_BACKWARD3.\n+\t* testsuite/23_containers/vector/modifiers/erase/moveable.cc: New.\n+\t* testsuite/23_containers/vector/capacity/reserve/moveable.cc: New.\n+\t* testsuite/23_containers/deque/modifiers/erase/moveable.cc: New.\n+\n 2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_uninitialized.h (uninitialized_copy): Use"}, {"sha": "5e9b8923f2242c49a5312a159af5134934975640", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -117,13 +117,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       if (static_cast<size_type>(__index) < (size() >> 1))\n \t{\n \t  if (__position != begin())\n-\t    std::copy_backward(begin(), __position, __next);\n+\t    _GLIBCXX_MOVE_BACKWARD3(begin(), __position, __next);\n \t  pop_front();\n \t}\n       else\n \t{\n \t  if (__next != end())\n-\t    std::copy(__next, end(), __position);\n+\t    _GLIBCXX_MOVE3(__next, end(), __position);\n \t  pop_back();\n \t}\n       return begin() + __index;\n@@ -146,13 +146,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)\n \t    {\n \t      if (__first != begin())\n-\t\tstd::copy_backward(begin(), __first, __last);\n+\t\t_GLIBCXX_MOVE_BACKWARD3(begin(), __first, __last);\n \t      _M_erase_at_begin(begin() + __n);\n \t    }\n \t  else\n \t    {\n \t      if (__last != end())\n-\t\tstd::copy(__last, end(), __first);\n+\t\t_GLIBCXX_MOVE3(__last, end(), __first);\n \t      _M_erase_at_end(end() - __n);\n \t    }\n \t  return begin() + __elems_before;"}, {"sha": "358983566c308e07c3ea404b9661c6f76567c5b1", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -488,6 +488,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      (std::__miter_base<_II>::__b(__first),\n \t       std::__miter_base<_II>::__b(__last), __result));\n     }\n+\n+#define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)\n+#else\n+#define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)\n #endif\n \n   template<bool _IsMove, bool, typename>\n@@ -626,6 +630,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      (std::__miter_base<_BI1>::__b(__first),\n \t       std::__miter_base<_BI1>::__b(__last), __result));\n     }\n+\n+#define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)\n+#else\n+#define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)\n #endif\n \n   template<typename _ForwardIterator, typename _Tp>"}, {"sha": "bc3cbd9f5029650d69c510b552126bc686235b2d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -1021,6 +1021,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)\n+#else\n+#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif"}, {"sha": "e15d80d59b7fed1db6c0d82c033873cda2c64e94", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -74,8 +74,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       if (this->capacity() < __n)\n \t{\n \t  const size_type __old_size = size();\n-\t  pointer __tmp = _M_allocate_and_copy(__n, this->_M_impl._M_start,\n-\t\t\t\t\t       this->_M_impl._M_finish);\n+\t  pointer __tmp = _M_allocate_and_copy(__n,\n+\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_start),\n+\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_finish));\n \t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t_M_get_Tp_allocator());\n \t  _M_deallocate(this->_M_impl._M_start,\n@@ -110,7 +111,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     erase(iterator __position)\n     {\n       if (__position + 1 != end())\n-        std::copy(__position + 1, end(), __position);\n+\t_GLIBCXX_MOVE3(__position + 1, end(), __position);\n       --this->_M_impl._M_finish;\n       this->_M_impl.destroy(this->_M_impl._M_finish);\n       return __position;\n@@ -122,7 +123,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     erase(iterator __first, iterator __last)\n     {\n       if (__last != end())\n-\tstd::copy(__last, end(), __first);\n+\t_GLIBCXX_MOVE3(__last, end(), __first);\n       _M_erase_at_end(__first.base() + (end() - __last));\n       return __first;\n     }"}, {"sha": "879d0c25f98e80ec2f5329427b9ee4c7f6432f79", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/erase/moveable.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2Fmoveable.cc?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::deque<copycounter> a(40);\n+  copycounter::copycount = 0;\n+\n+  a.erase(a.begin() + 20);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin());\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.end() - 1);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin() + 10, a.end() - 10);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin(), a.begin() + 5);\n+  VERIFY( copycounter::copycount == 0 );\n+  \n+  a.erase(a.end() - 5, a.end());\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin(), a.end());\n+  VERIFY( copycounter::copycount == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "481247f38f77365318496d202cc4125142d8a487", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/reserve/moveable.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable.cc?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::vector<copycounter> a(40);\n+  copycounter::copycount = 0;\n+\n+  a.reserve(50);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.reserve(200);\n+  VERIFY( copycounter::copycount == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "39e1ea2621927f8a0aec868ab69d491ebc5cbaa4", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/erase/moveable.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245a5fe5c0ae5dd48f7adc806117264543f39fdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2Fmoveable.cc?ref=245a5fe5c0ae5dd48f7adc806117264543f39fdd", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::vector<copycounter> a(40);\n+  copycounter::copycount = 0;\n+\n+  a.erase(a.begin() + 20);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin());\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.end() - 1);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin() + 10, a.end() - 10);\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin(), a.begin() + 5);\n+  VERIFY( copycounter::copycount == 0 );\n+  \n+  a.erase(a.end() - 5, a.end());\n+  VERIFY( copycounter::copycount == 0 );\n+\n+  a.erase(a.begin(), a.end());\n+  VERIFY( copycounter::copycount == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}