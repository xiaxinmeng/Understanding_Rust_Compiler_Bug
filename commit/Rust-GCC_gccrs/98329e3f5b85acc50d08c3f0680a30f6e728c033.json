{"sha": "98329e3f5b85acc50d08c3f0680a30f6e728c033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzMjllM2Y1Yjg1YWNjNTBkMDhjM2YwNjgwYTMwZjZlNzI4YzAzMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-05-07T23:25:44Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-07T23:25:44Z"}, "message": "rs6000: New insns setbc and setbcr\n\nNew instructions setbc and setbcr.  setbc sets a GPR to 1 if some\ncondition register bit is set, and 0 otherwise; setbcr does it the\nother way around.\n\n2020-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (setbc_<un>signed_<GPR:mode>): New\n\tdefine_insn.\n\t(*setbcr_<un>signed_<GPR:mode>): Likewise.\n\t(cstore<mode>4): Use setbc[r] if available.\n\t(<code><GPR:mode><GPR2:mode>2_isel): Avoid for TARGET_FUTURE.\n\t(eq<mode>3): Use setbc for TARGET_FUTURE.\n\t(*eq<mode>3): Avoid for TARGET_FUTURE.\n\t(ne<mode>3): Replace :P with :GPR; use setbc for TARGET_FUTURE;\n\telse for non-Pmode, use gen_eq and gen_xor.\n\t(*ne<mode>3): Avoid for TARGET_FUTURE.\n\t(*eqsi3_ext<mode>): Avoid for TARGET_FUTURE; fix missing && 1.", "tree": {"sha": "d858bf4ba9d33d252334ec151cd063f65721cef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d858bf4ba9d33d252334ec151cd063f65721cef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98329e3f5b85acc50d08c3f0680a30f6e728c033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98329e3f5b85acc50d08c3f0680a30f6e728c033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98329e3f5b85acc50d08c3f0680a30f6e728c033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98329e3f5b85acc50d08c3f0680a30f6e728c033/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5fb834c96ee4dc828299f984c46608814c9f0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fb834c96ee4dc828299f984c46608814c9f0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fb834c96ee4dc828299f984c46608814c9f0a2"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "a161162591f54c3652cebadb179da66f06b0de91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98329e3f5b85acc50d08c3f0680a30f6e728c033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98329e3f5b85acc50d08c3f0680a30f6e728c033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98329e3f5b85acc50d08c3f0680a30f6e728c033", "patch": "@@ -1,3 +1,17 @@\n+2020-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (setbc_<un>signed_<GPR:mode>): New\n+\tdefine_insn.\n+\t(*setbcr_<un>signed_<GPR:mode>): Likewise.\n+\t(cstore<mode>4): Use setbc[r] if available.\n+\t(<code><GPR:mode><GPR2:mode>2_isel): Avoid for TARGET_FUTURE.\n+\t(eq<mode>3): Use setbc for TARGET_FUTURE.\n+\t(*eq<mode>3): Avoid for TARGET_FUTURE.\n+\t(ne<mode>3): Replace :P with :GPR; use setbc for TARGET_FUTURE;\n+\telse for non-Pmode, use gen_eq and gen_xor.\n+\t(*ne<mode>3): Avoid for TARGET_FUTURE.\n+\t(*eqsi3_ext<mode>): Avoid for TARGET_FUTURE; fix missing && 1.\n+\n 2020-05-07 Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md: Move expanders and patterns into"}, {"sha": "e8dc576779af19417e092dca9a7838f4b08290dd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98329e3f5b85acc50d08c3f0680a30f6e728c033/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98329e3f5b85acc50d08c3f0680a30f6e728c033/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=98329e3f5b85acc50d08c3f0680a30f6e728c033", "patch": "@@ -5138,6 +5138,25 @@\n }\n   [(set_attr \"type\" \"isel\")])\n \n+; Set Boolean Condition (Reverse)\n+(define_insn \"setbc_<un>signed_<GPR:mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operator:GPR 1 \"scc_comparison_operator\"\n+\t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n+\t\t\t (const_int 0)]))]\n+  \"TARGET_FUTURE\"\n+  \"setbc %0,%j1\"\n+  [(set_attr \"type\" \"isel\")])\n+\n+(define_insn \"*setbcr_<un>signed_<GPR:mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(match_operator:GPR 1 \"scc_rev_comparison_operator\"\n+\t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n+\t\t\t (const_int 0)]))]\n+  \"TARGET_FUTURE\"\n+  \"setbcr %0,%j1\"\n+  [(set_attr \"type\" \"isel\")])\n+\n ;; Floating point conditional move\n (define_expand \"mov<mode>cc\"\n    [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n@@ -11425,6 +11444,10 @@\n    (clobber (match_operand:GPR 0 \"gpc_reg_operand\"))]\n   \"\"\n {\n+  /* Everything is best done with setbc[r] if available.  */\n+  if (TARGET_FUTURE)\n+    rs6000_emit_int_cmove (operands[0], operands[1], const1_rtx, const0_rtx);\n+\n   /* Expanding EQ and NE directly to some machine instructions does not help\n      but does hurt combine.  So don't.  */\n   if (GET_CODE (operands[1]) == EQ)\n@@ -11837,7 +11860,7 @@\n    (clobber (match_scratch:GPR 3 \"=r\"))\n    (clobber (match_scratch:GPR 4 \"=r\"))\n    (clobber (match_scratch:<UNS> 5 \"=y\"))]\n-  \"TARGET_ISEL\n+  \"!TARGET_FUTURE && TARGET_ISEL\n    && !(<CODE> == EQ && operands[2] == const0_rtx)\n    && !(<CODE> == NE && operands[2] == const0_rtx\n \t&& <GPR:MODE>mode == Pmode && <GPR2:MODE>mode == Pmode)\"\n@@ -11917,6 +11940,16 @@\n      (clobber (match_scratch:GPR 4 \"=r\"))])]\n   \"\"\n {\n+  if (TARGET_FUTURE)\n+    {\n+      rtx cc = gen_reg_rtx (CCmode);\n+      rtx compare = gen_rtx_COMPARE (CCmode, operands[1], operands[2]);\n+      emit_insn (gen_rtx_SET (cc, compare));\n+      rtx eq = gen_rtx_fmt_ee (EQ, <MODE>mode, cc, const0_rtx);\n+      emit_insn (gen_setbc_signed_<mode> (operands[0], eq, cc));\n+      DONE;\n+    }\n+\n   if (TARGET_ISEL && operands[2] != const0_rtx)\n     {\n       emit_insn (gen_eq<mode><mode>2_isel (operands[0], operands[1],\n@@ -11931,7 +11964,7 @@\n \t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n    (clobber (match_scratch:GPR 3 \"=r\"))\n    (clobber (match_scratch:GPR 4 \"=r\"))]\n-  \"!(TARGET_ISEL && operands[2] != const0_rtx)\"\n+  \"!TARGET_FUTURE && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 4)\n@@ -11955,14 +11988,32 @@\n \n (define_expand \"ne<mode>3\"\n   [(parallel [\n-     (set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n-\t  (ne:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:P 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n-     (clobber (match_scratch:P 3 \"=r\"))\n-     (clobber (match_scratch:P 4 \"=r\"))\n-     (clobber (reg:P CA_REGNO))])]\n+     (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t  (ne:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n+     (clobber (match_scratch:GPR 3 \"=r\"))\n+     (clobber (match_scratch:GPR 4 \"=r\"))\n+     (clobber (reg:GPR CA_REGNO))])]\n   \"\"\n {\n+  if (TARGET_FUTURE)\n+    {\n+      rtx cc = gen_reg_rtx (CCmode);\n+      rtx compare = gen_rtx_COMPARE (CCmode, operands[1], operands[2]);\n+      emit_insn (gen_rtx_SET (cc, compare));\n+      rtx ne = gen_rtx_fmt_ee (NE, <MODE>mode, cc, const0_rtx);\n+      emit_insn (gen_setbc_signed_<mode> (operands[0], ne, cc));\n+      DONE;\n+    }\n+\n+  if (<MODE>mode != Pmode)\n+    {\n+      rtx x = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_eq<mode>3 (x, operands[1], operands[2]));\n+      emit_insn (gen_xor<mode>3 (operands[0], x, const1_rtx));\n+      DONE;\n+    }\n+\n   if (TARGET_ISEL && operands[2] != const0_rtx)\n     {\n       emit_insn (gen_ne<mode><mode>2_isel (operands[0], operands[1],\n@@ -11978,7 +12029,7 @@\n    (clobber (match_scratch:P 3 \"=r\"))\n    (clobber (match_scratch:P 4 \"=r\"))\n    (clobber (reg:P CA_REGNO))]\n-  \"!(TARGET_ISEL && operands[2] != const0_rtx)\"\n+  \"!TARGET_FUTURE && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 4)\n@@ -12205,9 +12256,9 @@\n \t\t  (match_operand:SI 2 \"scc_eq_operand\" \"rKLI\")))\n    (clobber (match_scratch:SI 3 \"=r\"))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"\"\n+  \"!TARGET_FUTURE\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(set (match_dup 4)\n \t(clz:SI (match_dup 3)))\n    (set (match_dup 0)"}]}