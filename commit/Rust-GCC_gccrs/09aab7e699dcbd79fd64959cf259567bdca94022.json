{"sha": "09aab7e699dcbd79fd64959cf259567bdca94022", "node_id": "C_kwDOANBUbNoAKDA5YWFiN2U2OTlkY2JkNzlmZDY0OTU5Y2YyNTk1NjdiZGNhOTQwMjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-04T09:31:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-04T18:14:50Z"}, "message": "libstdc++: Optimize std::tuple_element and std::tuple_size_v\n\nThis reduces the number of class template instantiations needed for code\nusing tuples, by reusing _Nth_type in tuple_element and specializing\ntuple_size_v for tuple, pair and array (and const-qualified versions of\nthem).\n\nAlso define the _Nth_type primary template as a complete type (but with\nno nested 'type' member).  This avoids \"invalid use of incomplete type\"\nerrors for out-of-range specializations of tuple_element. Those errors\nwould probably be confusing and unhelpful for users. We already have\na user-friendly static assert in tuple_element itself.\n\nAlso ensure that tuple_size_v is available whenever tuple_size is (as\nproposed by LWG 3387). We already do that for tuple_element_t.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_pair.h (tuple_size_v): Define partial\n\tspecializations for std::pair.\n\t* include/bits/utility.h (_Nth_type): Move definition here\n\tand define primary template.\n\t(tuple_size_v): Move definition here.\n\t* include/std/array (tuple_size_v): Define partial\n\tspecializations for std::array.\n\t* include/std/tuple (tuple_size_v): Move primary template to\n\t<bits/utility.h>.  Define partial specializations for\n\tstd::tuple.\n\t(tuple_element): Change definition to use _Nth_type.\n\t* include/std/variant (_Nth_type): Move to <bits/utility.h>.\n\t(variant_alternative, variant): Adjust qualification of\n\t_Nth_type.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Prune\n\tadditional errors from _Nth_type.", "tree": {"sha": "7467ae1110fb0c821837196d25106ab817c28c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7467ae1110fb0c821837196d25106ab817c28c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09aab7e699dcbd79fd64959cf259567bdca94022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aab7e699dcbd79fd64959cf259567bdca94022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09aab7e699dcbd79fd64959cf259567bdca94022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aab7e699dcbd79fd64959cf259567bdca94022/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4a63593bc6b9770789816b205039fdf3cfd3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a63593bc6b9770789816b205039fdf3cfd3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4a63593bc6b9770789816b205039fdf3cfd3fc"}], "stats": {"total": 165, "additions": 84, "deletions": 81}, "files": [{"sha": "6081e0c7fe97e656861ca5c464b4d08e95f99179", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -771,6 +771,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct tuple_element<1, pair<_Tp1, _Tp2>>\n     { typedef _Tp2 type; };\n \n+#if __cplusplus >= 201703L\n+  template<typename _Tp1, typename _Tp2>\n+    inline constexpr size_t tuple_size_v<pair<_Tp1, _Tp2>> = 2;\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;\n+#endif\n+\n   /// @cond undocumented\n   template<size_t _Int>\n     struct __pair_get;"}, {"sha": "c9ffa0082177415c40f383d1d142984ac368502a", "filename": "libstdc++-v3/include/bits/utility.h", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -70,6 +70,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>\n     : public tuple_size<_Tp> { };\n \n+#if __cplusplus >= 201703L\n+  template<typename _Tp>\n+    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n+#endif\n+\n   /// Gives the type of the ith element of a given tuple type.\n   template<size_t __i, typename _Tp>\n     struct tuple_element;\n@@ -97,8 +102,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cplusplus >= 201402L\n-// The standard says this macro and alias template should be in <tuple>\n-// but we define them here, to be available in <utility> and <array> too.\n+// The standard says this macro and alias template should be in <tuple> but we\n+// we define them here, to be available in <array>, <utility> and <ranges> too.\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// 3378. tuple_size_v/tuple_element_t should be available when\n+//       tuple_size/tuple_element are\n #define __cpp_lib_tuple_element_t 201402L\n \n   template<size_t __i, typename _Tp>\n@@ -195,6 +203,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++17\n #endif // C++14\n \n+  template<size_t _Np, typename... _Types>\n+    struct _Nth_type\n+    { };\n+\n+  template<typename _Tp0, typename... _Rest>\n+    struct _Nth_type<0, _Tp0, _Rest...>\n+    { using type = _Tp0; };\n+\n+  template<typename _Tp0, typename _Tp1, typename... _Rest>\n+    struct _Nth_type<1, _Tp0, _Tp1, _Rest...>\n+    { using type = _Tp1; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n+    struct _Nth_type<2, _Tp0, _Tp1, _Tp2, _Rest...>\n+    { using type = _Tp2; };\n+\n+  template<size_t _Np, typename _Tp0, typename _Tp1, typename _Tp2,\n+\t   typename... _Rest>\n+#if __cpp_concepts\n+    requires (_Np >= 3)\n+#endif\n+    struct _Nth_type<_Np, _Tp0, _Tp1, _Tp2, _Rest...>\n+    : _Nth_type<_Np - 3, _Rest...>\n+    { };\n+\n+#if ! __cpp_concepts // Need additional specializations to avoid ambiguities.\n+  template<typename _Tp0, typename _Tp1, typename... _Rest>\n+    struct _Nth_type<0, _Tp0, _Tp1, _Rest...>\n+    { using type = _Tp0; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n+    struct _Nth_type<0, _Tp0, _Tp1, _Tp2, _Rest...>\n+    { using type = _Tp0; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n+    struct _Nth_type<1, _Tp0, _Tp1, _Tp2, _Rest...>\n+    { using type = _Tp1; };\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "413f8e2be01f1653de04e59fe9f5d8738d05038c", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -481,6 +481,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using type = _Tp;\n     };\n \n+#if __cplusplus >= 201703L\n+  template<typename _Tp, size_t _Nm>\n+    inline constexpr size_t tuple_size_v<array<_Tp, _Nm>> = _Nm;\n+\n+  template<typename _Tp, size_t _Nm>\n+    inline constexpr size_t tuple_size_v<const array<_Tp, _Nm>> = _Nm;\n+#endif\n+\n   template<typename _Tp, size_t _Nm>\n     struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type\n     { };"}, {"sha": "b82cdf12569006626e1b4ea4cccad020eb1dfcf3", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -1344,36 +1344,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct tuple_size<tuple<_Elements...>>\n     : public integral_constant<size_t, sizeof...(_Elements)> { };\n \n-#if __cplusplus > 201402L\n-  template <typename _Tp>\n-    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n-#endif\n+#if __cplusplus >= 201703L\n+  template<typename... _Types>\n+    inline constexpr size_t tuple_size_v<tuple<_Types>>\n+      = sizeof...(_Types);\n \n-  /**\n-   * Recursive case for tuple_element: strip off the first element in\n-   * the tuple and retrieve the (i-1)th element of the remaining tuple.\n-   */\n-  template<size_t __i, typename _Head, typename... _Tail>\n-    struct tuple_element<__i, tuple<_Head, _Tail...> >\n-    : tuple_element<__i - 1, tuple<_Tail...> > { };\n+  template<typename... _Types>\n+    inline constexpr size_t tuple_size_v<const tuple<_Types>>\n+      = sizeof...(_Types);\n+#endif\n \n-  /**\n-   * Basis case for tuple_element: The first element is the one we're seeking.\n-   */\n-  template<typename _Head, typename... _Tail>\n-    struct tuple_element<0, tuple<_Head, _Tail...> >\n+  /// Trait to get the Ith element type from a tuple.\n+  template<size_t __i, typename... _Types>\n+    struct tuple_element<__i, tuple<_Types...>>\n     {\n-      typedef _Head type;\n-    };\n+      static_assert(__i < sizeof...(_Types), \"tuple index must be in range\");\n \n-  /**\n-   * Error case for tuple_element: invalid index.\n-   */\n-  template<size_t __i>\n-    struct tuple_element<__i, tuple<>>\n-    {\n-      static_assert(__i < tuple_size<tuple<>>::value,\n-\t  \"tuple index must be in range\");\n+      using type = typename _Nth_type<__i, _Types...>::type;\n     };\n \n   template<size_t __i, typename _Head, typename... _Tail>"}, {"sha": "993ce3dba912812e8475358a8a09e75f1187c5eb", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 5, "deletions": 53, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -54,51 +54,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-namespace __detail\n-{\n-namespace __variant\n-{\n-  template<size_t _Np, typename... _Types>\n-    struct _Nth_type;\n-\n-  template<typename _Tp0, typename... _Rest>\n-    struct _Nth_type<0, _Tp0, _Rest...>\n-    { using type = _Tp0; };\n-\n-  template<typename _Tp0, typename _Tp1, typename... _Rest>\n-    struct _Nth_type<1, _Tp0, _Tp1, _Rest...>\n-    { using type = _Tp1; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n-    struct _Nth_type<2, _Tp0, _Tp1, _Tp2, _Rest...>\n-    { using type = _Tp2; };\n-\n-  template<size_t _Np, typename _Tp0, typename _Tp1, typename _Tp2,\n-\t   typename... _Rest>\n-#if __cpp_concepts\n-    requires (_Np >= 3)\n-#endif\n-    struct _Nth_type<_Np, _Tp0, _Tp1, _Tp2, _Rest...>\n-    : _Nth_type<_Np - 3, _Rest...>\n-    { };\n-\n-#if ! __cpp_concepts // Need additional specializations to avoid ambiguities.\n-  template<typename _Tp0, typename _Tp1, typename... _Rest>\n-    struct _Nth_type<0, _Tp0, _Tp1, _Rest...>\n-    { using type = _Tp0; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n-    struct _Nth_type<0, _Tp0, _Tp1, _Tp2, _Rest...>\n-    { using type = _Tp0; };\n-\n-  template<typename _Tp0, typename _Tp1, typename _Tp2, typename... _Rest>\n-    struct _Nth_type<1, _Tp0, _Tp1, _Tp2, _Rest...>\n-    { using type = _Tp1; };\n-#endif\n-\n-} // namespace __variant\n-} // namespace __detail\n-\n #if __cplusplus >= 202002L && __cpp_concepts\n // P2231R1 constexpr needs constexpr unions and constrained destructors.\n # define __cpp_lib_variant 202106L\n@@ -145,8 +100,7 @@ namespace __variant\n     {\n       static_assert(_Np < sizeof...(_Types));\n \n-      using type\n-\t= typename __detail::__variant::_Nth_type<_Np, _Types...>::type;\n+      using type = typename _Nth_type<_Np, _Types...>::type;\n     };\n \n   template<size_t _Np, typename _Variant>\n@@ -1442,8 +1396,7 @@ namespace __variant\n \t  = __detail::__variant::__accepted_index<_Tp, variant>::value;\n \n       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>\n-\tusing __to_type\n-\t  = typename __detail::__variant::_Nth_type<_Np, _Types...>::type;\n+\tusing __to_type = typename _Nth_type<_Np, _Types...>::type;\n \n       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>\n \tusing __accepted_type = __to_type<__accepted_index<_Tp>>;\n@@ -1580,7 +1533,7 @@ namespace __variant\n \templace(_Args&&... __args)\n \t{\n \t  namespace __variant = std::__detail::__variant;\n-\t  using type = typename __variant::_Nth_type<_Np, _Types...>::type;\n+\t  using type = typename _Nth_type<_Np, _Types...>::type;\n \t  // Provide the strong exception-safety guarantee when possible,\n \t  // to avoid becoming valueless.\n \t  if constexpr (is_nothrow_constructible_v<type, _Args...>)\n@@ -1620,7 +1573,7 @@ namespace __variant\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  namespace __variant = std::__detail::__variant;\n-\t  using type = typename __variant::_Nth_type<_Np, _Types...>::type;\n+\t  using type = typename _Nth_type<_Np, _Types...>::type;\n \t  // Provide the strong exception-safety guarantee when possible,\n \t  // to avoid becoming valueless.\n \t  if constexpr (is_nothrow_constructible_v<type,\n@@ -1803,8 +1756,7 @@ namespace __variant\n \t  constexpr size_t __max = 11; // \"These go to eleven.\"\n \n \t  // The type of the first variant in the pack.\n-\t  using _V0\n-\t    = typename __detail::__variant::_Nth_type<0, _Variants...>::type;\n+\t  using _V0 = typename _Nth_type<0, _Variants...>::type;\n \t  // The number of alternatives in that first variant.\n \t  constexpr auto __n = variant_size_v<remove_reference_t<_V0>>;\n "}, {"sha": "113a7fd62def2b793a8c23504852f02071b52052", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09aab7e699dcbd79fd64959cf259567bdca94022/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=09aab7e699dcbd79fd64959cf259567bdca94022", "patch": "@@ -60,3 +60,4 @@ test03()\n }\n \n // { dg-error \"tuple index must be in range\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"no type named 'type' in .*_Nth_type\" }"}]}