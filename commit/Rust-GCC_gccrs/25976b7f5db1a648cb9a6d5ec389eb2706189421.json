{"sha": "25976b7f5db1a648cb9a6d5ec389eb2706189421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5NzZiN2Y1ZGIxYTY0OGNiOWE2ZDVlYzM4OWViMjcwNjE4OTQyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-02-09T20:39:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-02-09T20:39:13Z"}, "message": "re PR c++/56247 (internal compiler error: in tsubst_copy, at cp/pt.c:12131)\n\n\tPR c++/56247\n\t* pt.c (eq_specializations): Set comparing_specializations.\n\t* tree.c (cp_tree_equal): Check it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r195922", "tree": {"sha": "3af11142b110b4f44702d237e207200670573e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af11142b110b4f44702d237e207200670573e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25976b7f5db1a648cb9a6d5ec389eb2706189421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25976b7f5db1a648cb9a6d5ec389eb2706189421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25976b7f5db1a648cb9a6d5ec389eb2706189421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25976b7f5db1a648cb9a6d5ec389eb2706189421/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d40d877c01a2ab5ad2350cdc284660b36618f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d40d877c01a2ab5ad2350cdc284660b36618f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d40d877c01a2ab5ad2350cdc284660b36618f95"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "c1fc4bc9296e9faa3586e6233262e6bad728c520", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25976b7f5db1a648cb9a6d5ec389eb2706189421", "patch": "@@ -1,5 +1,10 @@\n 2013-02-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56247\n+\t* pt.c (eq_specializations): Set comparing_specializations.\n+\t* tree.c (cp_tree_equal): Check it.\n+\t* cp-tree.h: Declare it.\n+\n \t* decl.c (decls_match): Check versions later.\n \n \tPR c++/56238"}, {"sha": "d9270e2270dad19d108b0a7721666758da98db70", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=25976b7f5db1a648cb9a6d5ec389eb2706189421", "patch": "@@ -4247,6 +4247,10 @@ extern GTY(()) tree integer_two_node;\n    function, two inside the body of a function in a local class, etc.)  */\n extern int function_depth;\n \n+/* Nonzero if we are inside eq_specializations, which affects comparison of\n+   PARM_DECLs in cp_tree_equal.  */\n+extern int comparing_specializations;\n+\n /* In parser.c.  */\n \n /* Nonzero if we are parsing an unevaluated operand: an operand to"}, {"sha": "a3359ada7438b9fc9b2736b59f71d9d1c09efe81", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=25976b7f5db1a648cb9a6d5ec389eb2706189421", "patch": "@@ -1461,14 +1461,21 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n /* Returns true iff two spec_entry nodes are equivalent.  Only compares the\n    TMPL and ARGS members, ignores SPEC.  */\n \n+int comparing_specializations;\n+\n static int\n eq_specializations (const void *p1, const void *p2)\n {\n   const spec_entry *e1 = (const spec_entry *)p1;\n   const spec_entry *e2 = (const spec_entry *)p2;\n+  int equal;\n+\n+  ++comparing_specializations;\n+  equal = (e1->tmpl == e2->tmpl\n+\t   && comp_template_args (e1->args, e2->args));\n+  --comparing_specializations;\n \n-  return (e1->tmpl == e2->tmpl\n-\t  && comp_template_args (e1->args, e2->args));\n+  return equal;\n }\n \n /* Returns a hash for a template TMPL and template arguments ARGS.  */"}, {"sha": "0b033c2bfb4552781d7e800d2cd7c97136473cc5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=25976b7f5db1a648cb9a6d5ec389eb2706189421", "patch": "@@ -2580,6 +2580,13 @@ cp_tree_equal (tree t1, tree t2)\n \t with an out-of-class definition of the function, but can also come\n \t up for expressions that involve 'this' in a member function\n \t template.  */\n+\n+      if (comparing_specializations)\n+\t/* When comparing hash table entries, only an exact match is\n+\t   good enough; we don't want to replace 'this' with the\n+\t   version from another function.  */\n+\treturn false;\n+\n       if (same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \t{\n \t  if (DECL_ARTIFICIAL (t1) ^ DECL_ARTIFICIAL (t2))"}, {"sha": "28c0a63e58921f2eb88a00dde9762a828d4cbba4", "filename": "gcc/testsuite/g++.dg/template/ptrmem23.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25976b7f5db1a648cb9a6d5ec389eb2706189421/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem23.C?ref=25976b7f5db1a648cb9a6d5ec389eb2706189421", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/56247\n+\n+struct Base {\n+    void method() {}\n+};\n+\n+typedef void (Base::*MemPtr)();\n+\n+// Template with a member function pointer \"non-type parameter\".\n+template<MemPtr func>\n+struct Wrapper {};\n+\n+template<class C>\n+struct Child : public Base {\n+    // Templated derived class instantiates the Wrapper with the same parameter\n+    // in two different virtual methods.\n+    void foo() { typedef Wrapper<&Base::method> W; }\n+    void bar() { typedef Wrapper<&Base::method> W; }\n+};\n+\n+// Instantiate Child with some type.\n+template class Child<int>;"}]}