{"sha": "819c1488ed52138df119b58059b3ec846e23904a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5YzE0ODhlZDUyMTM4ZGYxMTliNTgwNTliM2VjODQ2ZTIzOTA0YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-01-03T16:48:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-01-03T16:48:15Z"}, "message": "builtins.c (expand_builtin_strncmp): Use host_integerp and tree_low_cst.\n\n\t* builtins.c (expand_builtin_strncmp): Use host_integerp and\n\ttree_low_cst.  Allow using cmpstrsi in more cases.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-8.c: Add more testcases.\n\tTurn on cmpstrsi checks for __pj__ and __i370__.\n\nFrom-SVN: r38664", "tree": {"sha": "1244d79bbc97f7b8e6d2a230cb7ba588b87ff8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1244d79bbc97f7b8e6d2a230cb7ba588b87ff8f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/819c1488ed52138df119b58059b3ec846e23904a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819c1488ed52138df119b58059b3ec846e23904a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819c1488ed52138df119b58059b3ec846e23904a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819c1488ed52138df119b58059b3ec846e23904a/comments", "author": null, "committer": null, "parents": [{"sha": "36e40658dbae6eb6a2741762344476909983fd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e40658dbae6eb6a2741762344476909983fd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e40658dbae6eb6a2741762344476909983fd6a"}], "stats": {"total": 164, "additions": 130, "deletions": 34}, "files": [{"sha": "0a74c9a302a254f853e50ea81b11b5d1bdf0714e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819c1488ed52138df119b58059b3ec846e23904a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819c1488ed52138df119b58059b3ec846e23904a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=819c1488ed52138df119b58059b3ec846e23904a", "patch": "@@ -1,3 +1,8 @@\n+2001-01-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strncmp): Use host_integerp and\n+\ttree_low_cst.  Allow using cmpstrsi in more cases.\n+\n Wed Jan  3 10:48:43 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/sparc/sparc.h (RETURN_IN_MEMORY): Return 0 for variable"}, {"sha": "dbacc4742aa57717418d5158c9b0fa21f3412b3f", "filename": "gcc/builtins.c", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=819c1488ed52138df119b58059b3ec846e23904a", "patch": "@@ -2330,12 +2330,8 @@ expand_builtin_strncmp (exp, target, mode)\n   arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n   arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n \n-  /* We must be passed a constant len parameter.  */\n-  if (TREE_CODE (arg3) != INTEGER_CST)\n-    return 0;\n-  \n   /* If the len parameter is zero, return zero.  */\n-  if (compare_tree_int (arg3, 0) == 0)\n+  if (host_integerp (arg3, 1) && tree_low_cst (arg3, 1) == 0)\n   {\n     /* Evaluate and ignore arg1 and arg2 in case they have\n        side-effects.  */\n@@ -2348,17 +2344,18 @@ expand_builtin_strncmp (exp, target, mode)\n   p2 = c_getstr (arg2);\n \n   /* If all arguments are constant, evaluate at compile-time.  */\n-  if (p1 && p2)\n+  if (host_integerp (arg3, 1) && p1 && p2)\n   {\n-    const int r = strncmp (p1, p2, TREE_INT_CST_LOW (arg3));\n+    const int r = strncmp (p1, p2, tree_low_cst (arg3, 1));\n     return (r < 0 ? constm1_rtx : (r > 0 ? const1_rtx : const0_rtx));\n   }\n \n   /* If len == 1 or (either string parameter is \"\" and (len >= 1)),\n-      return (*(u_char*)arg1 - *(u_char*)arg2).  */\n-  if (compare_tree_int (arg3, 1) == 0\n-      || (compare_tree_int (arg3, 1) > 0\n-\t  && ((p1 && *p1 == '\\0') || (p2 && *p2 == '\\0'))))\n+      return (*(const u_char*)arg1 - *(const u_char*)arg2).  */\n+  if (host_integerp (arg3, 1)\n+      && (tree_low_cst (arg3, 1) == 1\n+\t  || (tree_low_cst (arg3, 1) > 1\n+\t      && ((p1 && *p1 == '\\0') || (p2 && *p2 == '\\0')))))\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n       tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n@@ -2375,28 +2372,40 @@ expand_builtin_strncmp (exp, target, mode)\n     }\n \n #ifdef HAVE_cmpstrsi\n-  /* If the length parameter is constant (checked above) and either\n-     string parameter is constant, call expand_builtin_memcmp() using\n-     a length parameter equal to the lesser of the given length and\n-     the strlen+1 of the constant string.  */\n-  if (HAVE_cmpstrsi && (p1 || p2))\n-    {\n-      /* Exactly one of the strings is constant at this point, because\n-\t if both were then we'd have expanded this at compile-time.  */\n-      tree string_len = p1 ? c_strlen (arg1) : c_strlen (arg2);\n-\n-      string_len = size_binop (PLUS_EXPR, string_len, ssize_int (1));\n-      \n-      if (tree_int_cst_lt (string_len, arg3))\n-        {\n-\t  /* The strlen+1 is strictly shorter, use it.  */\n-\t  tree newarglist = build_tree_list (NULL_TREE, string_len);\n-\t  newarglist = tree_cons (NULL_TREE, arg2, newarglist);\n-\t  newarglist = tree_cons (NULL_TREE, arg1, newarglist);\n-\t  return expand_builtin_memcmp (exp, newarglist, target);\n-\t}\n-      else\n-\treturn expand_builtin_memcmp (exp, arglist, target);\n+  /* If c_strlen can determine an expression for one of the string\n+     lengths, and it doesn't have side effects, then call\n+     expand_builtin_memcmp() using length MIN(strlen(string)+1, arg3).  */\n+  if (HAVE_cmpstrsi)\n+    { \n+      tree newarglist, len = 0;\n+\n+      /* Perhaps one of the strings is really constant, if so prefer\n+         that constant length over the other string's length.  */\n+      if (p1)\n+\tlen = c_strlen (arg1);\n+      else if (p2)\n+\tlen = c_strlen (arg2);\n+\n+      /* If we still don't have a len, try either string arg as long\n+\t as they don't have side effects.  */\n+      if (!len && !TREE_SIDE_EFFECTS (arg1))\n+\tlen = c_strlen (arg1);\n+      if (!len && !TREE_SIDE_EFFECTS (arg2))\n+\tlen = c_strlen (arg2);\n+      /* If we still don't have a length, punt.  */\n+      if (!len)\n+\treturn 0;\n+\t\n+      /* Add one to the string length.  */\n+      len = fold (size_binop (PLUS_EXPR, len, ssize_int (1)));\n+        \n+      /* The actual new length parameter is MIN(len,arg3).  */\n+      len = fold (build (MIN_EXPR, TREE_TYPE (len), len, arg3));\n+\n+      newarglist = build_tree_list (NULL_TREE, len);\n+      newarglist = tree_cons (NULL_TREE, arg2, newarglist);\n+      newarglist = tree_cons (NULL_TREE, arg1, newarglist);\n+      return expand_builtin_memcmp (exp, newarglist, target);\n     }\n #endif\n   "}, {"sha": "f29c39029744b3bce88644a2b67e07c6cbd820bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=819c1488ed52138df119b58059b3ec846e23904a", "patch": "@@ -1,3 +1,8 @@\n+2001-01-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/string-opt-8.c: Add more testcases.\n+\tTurn on cmpstrsi checks for __pj__ and __i370__.\n+\n 2001-01-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/virtual11.C: New test."}, {"sha": "bcbb73cd576e7a99017bdd4424270fb55991aef7", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-8.c", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/819c1488ed52138df119b58059b3ec846e23904a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c?ref=819c1488ed52138df119b58059b3ec846e23904a", "patch": "@@ -13,6 +13,7 @@ int main ()\n {\n   const char *const s1 = \"hello world\";\n   const char *s2, *s3;\n+  int n = 6, x;\n   \n   if (strncmp (s1, \"hello world\", 12) != 0)\n     abort();\n@@ -64,7 +65,7 @@ int main ()\n   s2 = s1; s3 = s1+4;\n   if (strncmp (++s2, ++s3+2, 1) >= 0 || s2 != s1+1 || s3 != s1+5)\n     abort();\n-#if defined(__i386__)\n+#if defined(__i386__) || defined (__pj__) || defined (__i370__)\n   /* These tests work on platforms which support cmpstrsi.  */\n   s2 = s1;\n   if (strncmp (++s2, \"ello\", 3) != 0 || s2 != s1+1)\n@@ -140,6 +141,82 @@ int main ()\n   s2 = s1;\n   if (strncmp (\"allo\", ++s2, 6) >= 0 || s2 != s1+1)\n     abort();\n+\n+  s2 = s1; n = 2; x = 1;\n+  if (strncmp (++s2, s1+(x&3), ++n) != 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 2; x = 1;\n+  if (strncmp (s1+(x&3), ++s2, ++n) != 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (++s2, s1+(x&3), ++n) != 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (s1+(x&3), ++s2, ++n) != 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (++s2, s1+(x&3), ++n) != 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (s1+(x&3), ++s2, ++n) != 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (++s2, s1+(x&3), ++n) != 0 || s2 != s1+1 || n != 6)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (s1+(x&3), ++s2, ++n) != 0 || s2 != s1+1 || n != 6)\n+    abort();\n+\n+  s2 = s1; n = 2;\n+  if (strncmp (++s2, \"zllo\", ++n) >= 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 2; x = 1;\n+  if (strncmp (\"zllo\", ++s2, ++n) <= 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (++s2, \"zllo\", ++n) >= 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (\"zllo\", ++s2, ++n) <= 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (++s2, \"zllo\", ++n) >= 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (\"zllo\", ++s2, ++n) <= 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (++s2, \"zllo\", ++n) >= 0 || s2 != s1+1 || n != 6)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (\"zllo\", ++s2, ++n) <= 0 || s2 != s1+1 || n != 6)\n+    abort();\n+\n+  s2 = s1; n = 2;\n+  if (strncmp (++s2, \"allo\", ++n) <= 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 2; x = 1;\n+  if (strncmp (\"allo\", ++s2, ++n) >= 0 || s2 != s1+1 || n != 3)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (++s2, \"allo\", ++n) <= 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 3; x = 1;\n+  if (strncmp (\"allo\", ++s2, ++n) >= 0 || s2 != s1+1 || n != 4)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (++s2, \"allo\", ++n) <= 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 4; x = 1;\n+  if (strncmp (\"allo\", ++s2, ++n) >= 0 || s2 != s1+1 || n != 5)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (++s2, \"allo\", ++n) <= 0 || s2 != s1+1 || n != 6)\n+    abort();\n+  s2 = s1; n = 5; x = 1;\n+  if (strncmp (\"allo\", ++s2, ++n) >= 0 || s2 != s1+1 || n != 6)\n+    abort();\n+\n #endif  \n   \n   /* Test at least one instance of the __builtin_ style.  We do this"}]}