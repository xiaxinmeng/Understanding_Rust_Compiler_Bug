{"sha": "7f483eece3df0601cbc535b0e334590d5f96e0fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0ODNlZWNlM2RmMDYwMWNiYzUzNWIwZTMzNDU5MGQ1Zjk2ZTBmYw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-03-20T23:09:39Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-20T23:09:39Z"}, "message": "configure.ac: Add missing check for gettimeofday.\n\n\t* configure.ac: Add missing check for gettimeofday.\n\t* config.h.in: Renegerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r123094", "tree": {"sha": "cde04f2a97dc6a79cc81497599a4f606255de5b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde04f2a97dc6a79cc81497599a4f606255de5b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f483eece3df0601cbc535b0e334590d5f96e0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f483eece3df0601cbc535b0e334590d5f96e0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f483eece3df0601cbc535b0e334590d5f96e0fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f483eece3df0601cbc535b0e334590d5f96e0fc/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eb5950766876da857481b3dafc7ccd13b4b722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb5950766876da857481b3dafc7ccd13b4b722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eb5950766876da857481b3dafc7ccd13b4b722"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "2bf034e066dd0779092cd0d1c2aa8039db4fa654", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7f483eece3df0601cbc535b0e334590d5f96e0fc", "patch": "@@ -1,3 +1,9 @@\n+2007-03-20  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* configure.ac: Add missing check for gettimeofday.\n+\t* config.h.in: Renegerate.\n+\t* configure: Regenerate.\n+\n 2007-03-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/31052"}, {"sha": "b6004bbe56d5a6cd7010a261113820ab1e474c04", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=7f483eece3df0601cbc535b0e334590d5f96e0fc", "patch": "@@ -402,6 +402,9 @@\n /* Define to 1 if you have the `getrusage' function. */\n #undef HAVE_GETRUSAGE\n \n+/* Define to 1 if you have the `gettimeofday' function. */\n+#undef HAVE_GETTIMEOFDAY\n+\n /* libc includes getuid */\n #undef HAVE_GETUID\n "}, {"sha": "b7119c1c28a52b549ed4446aa5c41d8a047dcd29", "filename": "libgfortran/configure", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=7f483eece3df0601cbc535b0e334590d5f96e0fc", "patch": "@@ -10511,6 +10511,113 @@ fi\n done\n \n \n+for ac_func in gettimeofday\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n # Check for glibc backtrace functions\n \n "}, {"sha": "60645a9e8a1c39271a2c01d7e05d124527f9c373", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f483eece3df0601cbc535b0e334590d5f96e0fc/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=7f483eece3df0601cbc535b0e334590d5f96e0fc", "patch": "@@ -177,6 +177,7 @@ AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n+AC_CHECK_FUNCS(gettimeofday)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)"}]}