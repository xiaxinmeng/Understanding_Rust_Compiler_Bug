{"sha": "6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0ZmQ0YTlmZWMwYWY2NTI0OWExMWU0NDM0MWI1ZjNmNWIyMDliMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-25T08:53:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-25T08:53:15Z"}, "message": "Add IFN_COND_{MUL,DIV,MOD,RDIV}\n\nThis patch adds support for conditional multiplication and division.\nIt's mostly mechanical, but a few notes:\n\n* The *_optab name and the .md names are the same as the unconditional\n  forms, just with \"cond_\" added to the front.  This means we still\n  have the awkward difference between sdiv and div, etc.\n\n* It was easier to retain the difference between integer and FP\n  division in the function names, given that they map to different\n  tree codes (TRUNC_DIV_EXPR and RDIV_EXPR).\n\n* SVE has no direct support for IFN_COND_MOD, but it seemed more\n  consistent to add it anyway.\n\n* Adding IFN_COND_MUL enables an extra fully-masked reduction\n  in gcc.dg/vect/pr53773.c.\n\n* In practice we don't actually use the integer division forms without\n  if-conversion support (added by a later patch).\n\n2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_double_cond_arith): Include\n\tmultiplication and division.\n\t* doc/md.texi (cond_mul@var{m}, cond_div@var{m}, cond_mod@var{m})\n\t(cond_udiv@var{m}, cond_umod@var{m}): Document.\n\t* optabs.def (cond_smul_optab, cond_sdiv_optab, cond_smod_optab)\n\t(cond_udiv_optab, cond_umod_optab): New optabs.\n\t* internal-fn.def (IFN_COND_MUL, IFN_COND_DIV, IFN_COND_MOD)\n\t(IFN_COND_RDIV): New internal functions.\n\t* internal-fn.c (get_conditional_internal_fn): Handle TRUNC_DIV_EXPR,\n\tTRUNC_MOD_EXPR and RDIV_EXPR.\n\t* match.pd (UNCOND_BINARY, COND_BINARY): Handle them.\n\t* config/aarch64/iterators.md (UNSPEC_COND_MUL, UNSPEC_COND_DIV):\n\tNew unspecs.\n\t(SVE_INT_BINARY): Include mult.\n\t(SVE_COND_FP_BINARY): Include UNSPEC_MUL and UNSPEC_DIV.\n\t(optab, sve_int_op): Handle mult.\n\t(optab, sve_fp_op, commutative): Handle UNSPEC_COND_MUL and\n\tUNSPEC_COND_DIV.\n\t* config/aarch64/aarch64-sve.md (cond_<optab><mode>): New pattern\n\tfor SVE_INT_BINARY_SD.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_double_cond_arith): Include\n\tmultiplication and division.\n\t* gcc.dg/vect/pr53773.c: Do not expect a scalar tail when using\n\tfully-masked loops with a fixed vector length.\n\t* gcc.dg/vect/vect-cond-arith-1.c: Add multiplication and division\n\ttests.\n\t* gcc.target/aarch64/sve/vcond_8.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_9.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_12.c: Add multiplication tests.\n\nFrom-SVN: r260713", "tree": {"sha": "576629be877f48bb03c0853d1d4042f0e055b62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576629be877f48bb03c0853d1d4042f0e055b62a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/comments", "author": null, "committer": null, "parents": [{"sha": "c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c38f73190ba3669a9cd8b57626b9d0e7087fd55c"}], "stats": {"total": 200, "additions": 189, "deletions": 11}, "files": [{"sha": "45566e6a13a5114155334c6461069a5bbf3d3880", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -1,3 +1,26 @@\n+2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* doc/sourcebuild.texi (vect_double_cond_arith): Include\n+\tmultiplication and division.\n+\t* doc/md.texi (cond_mul@var{m}, cond_div@var{m}, cond_mod@var{m})\n+\t(cond_udiv@var{m}, cond_umod@var{m}): Document.\n+\t* optabs.def (cond_smul_optab, cond_sdiv_optab, cond_smod_optab)\n+\t(cond_udiv_optab, cond_umod_optab): New optabs.\n+\t* internal-fn.def (IFN_COND_MUL, IFN_COND_DIV, IFN_COND_MOD)\n+\t(IFN_COND_RDIV): New internal functions.\n+\t* internal-fn.c (get_conditional_internal_fn): Handle TRUNC_DIV_EXPR,\n+\tTRUNC_MOD_EXPR and RDIV_EXPR.\n+\t* match.pd (UNCOND_BINARY, COND_BINARY): Handle them.\n+\t* config/aarch64/iterators.md (UNSPEC_COND_MUL, UNSPEC_COND_DIV):\n+\tNew unspecs.\n+\t(SVE_INT_BINARY): Include mult.\n+\t(SVE_COND_FP_BINARY): Include UNSPEC_MUL and UNSPEC_DIV.\n+\t(optab, sve_int_op): Handle mult.\n+\t(optab, sve_fp_op, commutative): Handle UNSPEC_COND_MUL and\n+\tUNSPEC_COND_DIV.\n+\t* config/aarch64/aarch64-sve.md (cond_<optab><mode>): New pattern\n+\tfor SVE_INT_BINARY_SD.\n+\n 2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/aarch64/iterators.md (SVE_INT_BINARY_SD): New code iterator."}, {"sha": "8e2433385a80d606e199ce6252eae6216da42b66", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -1803,6 +1803,21 @@\n   aarch64_sve_prepare_conditional_op (operands, 5, commutative_p);\n })\n \n+(define_expand \"cond_<optab><mode>\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\")\n+\t(unspec:SVE_SDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (SVE_INT_BINARY_SD:SVE_SDI\n+\t     (match_operand:SVE_SDI 2 \"register_operand\")\n+\t     (match_operand:SVE_SDI 3 \"register_operand\"))\n+\t   (match_operand:SVE_SDI 4 \"register_operand\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+{\n+  bool commutative_p = (GET_RTX_CLASS (<CODE>) == RTX_COMM_ARITH);\n+  aarch64_sve_prepare_conditional_op (operands, 5, commutative_p);\n+})\n+\n ;; Predicated integer operations.\n (define_insn \"*cond_<optab><mode>\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n@@ -1817,6 +1832,19 @@\n   \"<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n )\n \n+(define_insn \"*cond_<optab><mode>\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_SDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (SVE_INT_BINARY_SD:SVE_SDI\n+\t     (match_operand:SVE_SDI 2 \"register_operand\" \"0\")\n+\t     (match_operand:SVE_SDI 3 \"register_operand\" \"w\"))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"<sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+)\n+\n ;; Predicated integer operations with the operands reversed.\n (define_insn \"*cond_<optab><mode>\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n@@ -1831,6 +1859,19 @@\n   \"<sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n )\n \n+(define_insn \"*cond_<optab><mode>\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_SDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (SVE_INT_BINARY_SD:SVE_SDI\n+\t     (match_operand:SVE_SDI 2 \"register_operand\" \"w\")\n+\t     (match_operand:SVE_SDI 3 \"register_operand\" \"0\"))\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"<sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+)\n+\n ;; Set operand 0 to the last active element in operand 3, or to tied\n ;; operand 1 if no elements are active.\n (define_insn \"fold_extract_last_<mode>\""}, {"sha": "dbe1e34b61d1dcc96eebbf80b9745df94f130232", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -464,6 +464,8 @@\n     UNSPEC_UMUL_HIGHPART ; Used in aarch64-sve.md.\n     UNSPEC_COND_ADD\t; Used in aarch64-sve.md.\n     UNSPEC_COND_SUB\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_MUL\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_DIV\t; Used in aarch64-sve.md.\n     UNSPEC_COND_MAX\t; Used in aarch64-sve.md.\n     UNSPEC_COND_MIN\t; Used in aarch64-sve.md.\n     UNSPEC_COND_LT\t; Used in aarch64-sve.md.\n@@ -1202,7 +1204,7 @@\n ;; SVE floating-point unary operations.\n (define_code_iterator SVE_FP_UNARY [neg abs sqrt])\n \n-(define_code_iterator SVE_INT_BINARY [plus minus smax umax smin umin\n+(define_code_iterator SVE_INT_BINARY [plus minus mult smax umax smin umin\n \t\t\t\t      and ior xor])\n \n (define_code_iterator SVE_INT_BINARY_REV [minus])\n@@ -1239,6 +1241,7 @@\n \t\t\t (neg \"neg\")\n \t\t\t (plus \"add\")\n \t\t\t (minus \"sub\")\n+\t\t\t (mult \"mul\")\n \t\t\t (div \"div\")\n \t\t\t (udiv \"udiv\")\n \t\t\t (ss_plus \"qadd\")\n@@ -1382,6 +1385,7 @@\n ;; The integer SVE instruction that implements an rtx code.\n (define_code_attr sve_int_op [(plus \"add\")\n \t\t\t      (minus \"sub\")\n+\t\t\t      (mult \"mul\")\n \t\t\t      (div \"sdiv\")\n \t\t\t      (udiv \"udiv\")\n \t\t\t      (neg \"neg\")\n@@ -1540,9 +1544,10 @@\n (define_int_iterator MUL_HIGHPART [UNSPEC_SMUL_HIGHPART UNSPEC_UMUL_HIGHPART])\n \n (define_int_iterator SVE_COND_FP_BINARY [UNSPEC_COND_ADD UNSPEC_COND_SUB\n+\t\t\t\t\t UNSPEC_COND_MUL UNSPEC_COND_DIV\n \t\t\t\t\t UNSPEC_COND_MAX UNSPEC_COND_MIN])\n \n-(define_int_iterator SVE_COND_FP_BINARY_REV [UNSPEC_COND_SUB])\n+(define_int_iterator SVE_COND_FP_BINARY_REV [UNSPEC_COND_SUB UNSPEC_COND_DIV])\n \n (define_int_iterator SVE_COND_FP_CMP [UNSPEC_COND_LT UNSPEC_COND_LE\n \t\t\t\t      UNSPEC_COND_EQ UNSPEC_COND_NE\n@@ -1573,6 +1578,8 @@\n \t\t\t(UNSPEC_XORV \"xor\")\n \t\t\t(UNSPEC_COND_ADD \"add\")\n \t\t\t(UNSPEC_COND_SUB \"sub\")\n+\t\t\t(UNSPEC_COND_MUL \"mul\")\n+\t\t\t(UNSPEC_COND_DIV \"div\")\n \t\t\t(UNSPEC_COND_MAX \"smax\")\n \t\t\t(UNSPEC_COND_MIN \"smin\")])\n \n@@ -1787,10 +1794,14 @@\n \n (define_int_attr sve_fp_op [(UNSPEC_COND_ADD \"fadd\")\n \t\t\t    (UNSPEC_COND_SUB \"fsub\")\n+\t\t\t    (UNSPEC_COND_MUL \"fmul\")\n+\t\t\t    (UNSPEC_COND_DIV \"fdiv\")\n \t\t\t    (UNSPEC_COND_MAX \"fmaxnm\")\n \t\t\t    (UNSPEC_COND_MIN \"fminnm\")])\n \n (define_int_attr commutative [(UNSPEC_COND_ADD \"true\")\n \t\t\t      (UNSPEC_COND_SUB \"false\")\n+\t\t\t      (UNSPEC_COND_MUL \"true\")\n+\t\t\t      (UNSPEC_COND_DIV \"false\")\n \t\t\t      (UNSPEC_COND_MIN \"true\")\n \t\t\t      (UNSPEC_COND_MAX \"true\")])"}, {"sha": "02fbfb392a9994c9cfcf8718cf87dd0c89e3e3f3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -6333,6 +6333,11 @@ operand 0, otherwise (operand 2 + operand 3) is moved.\n \n @cindex @code{cond_add@var{mode}} instruction pattern\n @cindex @code{cond_sub@var{mode}} instruction pattern\n+@cindex @code{cond_mul@var{mode}} instruction pattern\n+@cindex @code{cond_div@var{mode}} instruction pattern\n+@cindex @code{cond_udiv@var{mode}} instruction pattern\n+@cindex @code{cond_mod@var{mode}} instruction pattern\n+@cindex @code{cond_umod@var{mode}} instruction pattern\n @cindex @code{cond_and@var{mode}} instruction pattern\n @cindex @code{cond_ior@var{mode}} instruction pattern\n @cindex @code{cond_xor@var{mode}} instruction pattern\n@@ -6342,6 +6347,11 @@ operand 0, otherwise (operand 2 + operand 3) is moved.\n @cindex @code{cond_umax@var{mode}} instruction pattern\n @item @samp{cond_add@var{mode}}\n @itemx @samp{cond_sub@var{mode}}\n+@itemx @samp{cond_mul@var{mode}}\n+@itemx @samp{cond_div@var{mode}}\n+@itemx @samp{cond_udiv@var{mode}}\n+@itemx @samp{cond_mod@var{mode}}\n+@itemx @samp{cond_umod@var{mode}}\n @itemx @samp{cond_and@var{mode}}\n @itemx @samp{cond_ior@var{mode}}\n @itemx @samp{cond_xor@var{mode}}"}, {"sha": "09c00531333c726b7146b0050c4753ad1f763740", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -1426,8 +1426,9 @@ have different type from the value operands.\n Target supports hardware vectors of @code{double}.\n \n @item vect_double_cond_arith\n-Target supports conditional addition, subtraction, minimum and maximum\n-on vectors of @code{double}, via the @code{cond_} optabs.\n+Target supports conditional addition, subtraction, multiplication,\n+division, minimum and maximum on vectors of @code{double}, via the\n+@code{cond_} optabs.\n \n @item vect_element_align_preferred\n The target's preferred vector alignment is the same as the element"}, {"sha": "a7bb748b66e1e63c4d99081931d47cb6c18d3390", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -3246,6 +3246,12 @@ get_conditional_internal_fn (tree_code code)\n       return IFN_COND_MIN;\n     case MAX_EXPR:\n       return IFN_COND_MAX;\n+    case TRUNC_DIV_EXPR:\n+      return IFN_COND_DIV;\n+    case TRUNC_MOD_EXPR:\n+      return IFN_COND_MOD;\n+    case RDIV_EXPR:\n+      return IFN_COND_RDIV;\n     case BIT_AND_EXPR:\n       return IFN_COND_AND;\n     case BIT_IOR_EXPR:"}, {"sha": "66336d8062b12c5c473c199bc206fba6d9e65203", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -145,6 +145,12 @@ DEF_INTERNAL_OPTAB_FN (FNMS, ECF_CONST, fnms, ternary)\n \n DEF_INTERNAL_OPTAB_FN (COND_ADD, ECF_CONST, cond_add, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_SUB, ECF_CONST, cond_sub, cond_binary)\n+DEF_INTERNAL_OPTAB_FN (COND_MUL, ECF_CONST, cond_smul, cond_binary)\n+DEF_INTERNAL_SIGNED_OPTAB_FN (COND_DIV, ECF_CONST, first,\n+\t\t\t      cond_sdiv, cond_udiv, cond_binary)\n+DEF_INTERNAL_SIGNED_OPTAB_FN (COND_MOD, ECF_CONST, first,\n+\t\t\t      cond_smod, cond_umod, cond_binary)\n+DEF_INTERNAL_OPTAB_FN (COND_RDIV, ECF_CONST, cond_sdiv, cond_binary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (COND_MIN, ECF_CONST, first,\n \t\t\t      cond_smin, cond_umin, cond_binary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (COND_MAX, ECF_CONST, first,"}, {"sha": "14386da070b0b71c59981310843505680872b1df", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -78,10 +78,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Binary operations and their associated IFN_COND_* function.  */\n (define_operator_list UNCOND_BINARY\n   plus minus\n+  mult trunc_div trunc_mod rdiv\n   min max\n   bit_and bit_ior bit_xor)\n (define_operator_list COND_BINARY\n   IFN_COND_ADD IFN_COND_SUB\n+  IFN_COND_MUL IFN_COND_DIV IFN_COND_MOD IFN_COND_RDIV\n   IFN_COND_MIN IFN_COND_MAX\n   IFN_COND_AND IFN_COND_IOR IFN_COND_XOR)\n     "}, {"sha": "a1ecb757bb2141a27d415a50fa094435692b7e8b", "filename": "gcc/optabs.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -222,6 +222,11 @@ OPTAB_D (notcc_optab, \"not$acc\")\n OPTAB_D (movcc_optab, \"mov$acc\")\n OPTAB_D (cond_add_optab, \"cond_add$a\")\n OPTAB_D (cond_sub_optab, \"cond_sub$a\")\n+OPTAB_D (cond_smul_optab, \"cond_mul$a\")\n+OPTAB_D (cond_sdiv_optab, \"cond_div$a\")\n+OPTAB_D (cond_smod_optab, \"cond_mod$a\")\n+OPTAB_D (cond_udiv_optab, \"cond_udiv$a\")\n+OPTAB_D (cond_umod_optab, \"cond_umod$a\")\n OPTAB_D (cond_and_optab, \"cond_and$a\")\n OPTAB_D (cond_ior_optab, \"cond_ior$a\")\n OPTAB_D (cond_xor_optab, \"cond_xor$a\")"}, {"sha": "1399fb17087d665310f35b16f80b5b9dd1e0c6dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -1,3 +1,16 @@\n+2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_double_cond_arith): Include\n+\tmultiplication and division.\n+\t* gcc.dg/vect/pr53773.c: Do not expect a scalar tail when using\n+\tfully-masked loops with a fixed vector length.\n+\t* gcc.dg/vect/vect-cond-arith-1.c: Add multiplication and division\n+\ttests.\n+\t* gcc.target/aarch64/sve/vcond_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_12.c: Add multiplication tests.\n+\n 2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.target/aarch64/sve/div_1.c: New test."}, {"sha": "0bcc021767e636aff950eced04e778cb990976d0", "filename": "gcc/testsuite/gcc.dg/vect/pr53773.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53773.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -14,5 +14,8 @@ foo (int integral, int decimal, int power_ten)\n   return integral+decimal;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 10\" 2 \"optimized\" } } */\n+/* We can avoid a scalar tail when using fully-masked loops with a fixed\n+   vector length.  */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 10\" 2 \"optimized\" { target { { ! vect_fully_masked } || vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 10\" 0 \"optimized\" { target { vect_fully_masked && { ! vect_variable_length } } } } } */\n "}, {"sha": "d52e81e9109cc4d81de84adf370b2322799c8c27", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-arith-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-arith-1.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -6,6 +6,8 @@\n \n #define add(A, B) ((A) + (B))\n #define sub(A, B) ((A) - (B))\n+#define mul(A, B) ((A) * (B))\n+#define div(A, B) ((A) / (B))\n \n #define DEF(OP)\t\t\t\t\t\t\t\\\n   void __attribute__ ((noipa))\t\t\t\t\t\\\n@@ -34,6 +36,8 @@\n #define FOR_EACH_OP(T)\t\t\t\t\\\n   T (add)\t\t\t\t\t\\\n   T (sub)\t\t\t\t\t\\\n+  T (mul)\t\t\t\t\t\\\n+  T (div)\t\t\t\t\t\\\n   T (__builtin_fmax)\t\t\t\t\\\n   T (__builtin_fmin)\n \n@@ -54,5 +58,7 @@ main (void)\n \n /* { dg-final { scan-tree-dump { = \\.COND_ADD} \"optimized\" { target vect_double_cond_arith } } } */\n /* { dg-final { scan-tree-dump { = \\.COND_SUB} \"optimized\" { target vect_double_cond_arith } } } */\n+/* { dg-final { scan-tree-dump { = \\.COND_MUL} \"optimized\" { target vect_double_cond_arith } } } */\n+/* { dg-final { scan-tree-dump { = \\.COND_RDIV} \"optimized\" { target vect_double_cond_arith } } } */\n /* { dg-final { scan-tree-dump { = \\.COND_MAX} \"optimized\" { target vect_double_cond_arith } } } */\n /* { dg-final { scan-tree-dump { = \\.COND_MIN} \"optimized\" { target vect_double_cond_arith } } } */"}, {"sha": "de650bf39e27b5cdb0f06d04b5d7948b3cc94a54", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_12.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_12.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -5,6 +5,8 @@\n \n #define add(A, B) ((A) + (B))\n #define sub(A, B) ((A) - (B))\n+#define mul(A, B) ((A) * (B))\n+#define div(A, B) ((A) / (B))\n #define max(A, B) ((A) > (B) ? (A) : (B))\n #define min(A, B) ((A) < (B) ? (A) : (B))\n #define and(A, B) ((A) & (B))\n@@ -29,6 +31,7 @@\n #define FOR_EACH_INT_TYPE(T, TYPE) \\\n   T (TYPE, TYPE, add) \\\n   T (TYPE, TYPE, sub) \\\n+  T (TYPE, TYPE, mul) \\\n   T (TYPE, TYPE, max) \\\n   T (TYPE, TYPE, min) \\\n   T (TYPE, TYPE, and) \\\n@@ -38,6 +41,8 @@\n #define FOR_EACH_FP_TYPE(T, TYPE, CMPTYPE, SUFFIX) \\\n   T (TYPE, CMPTYPE, add) \\\n   T (TYPE, CMPTYPE, sub) \\\n+  T (TYPE, CMPTYPE, mul) \\\n+  /* No div because that gets converted into a mul anyway.  */ \\\n   T (TYPE, CMPTYPE, __builtin_fmax##SUFFIX) \\\n   T (TYPE, CMPTYPE, __builtin_fmin##SUFFIX)\n \n@@ -58,10 +63,10 @@ FOR_EACH_LOOP (DEF_LOOP)\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz[0-9]+\\.., z[0-9]+} } } */\n \n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b,} 14 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h,} 18 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s,} 18 } } */\n-/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d,} 18 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b,} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h,} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s,} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d,} 21 } } */\n \n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n@@ -73,6 +78,11 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n \n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n@@ -116,6 +126,10 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */"}, {"sha": "d49dee733618be6061ff17a3db79e964c2968b4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_8.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_8.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -5,6 +5,8 @@\n \n #define add(A, B) ((A) + (B))\n #define sub(A, B) ((A) - (B))\n+#define mul(A, B) ((A) * (B))\n+#define div(A, B) ((A) / (B))\n #define max(A, B) ((A) > (B) ? (A) : (B))\n #define min(A, B) ((A) < (B) ? (A) : (B))\n #define and(A, B) ((A) & (B))\n@@ -27,6 +29,7 @@\n #define FOR_EACH_INT_TYPE(T, TYPE) \\\n   T (TYPE, TYPE, add) \\\n   T (TYPE, TYPE, sub) \\\n+  T (TYPE, TYPE, mul) \\\n   T (TYPE, TYPE, max) \\\n   T (TYPE, TYPE, min) \\\n   T (TYPE, TYPE, and) \\\n@@ -36,6 +39,8 @@\n #define FOR_EACH_FP_TYPE(T, TYPE, CMPTYPE, SUFFIX) \\\n   T (TYPE, CMPTYPE, add) \\\n   T (TYPE, CMPTYPE, sub) \\\n+  T (TYPE, CMPTYPE, mul) \\\n+  T (TYPE, CMPTYPE, div) \\\n   T (TYPE, CMPTYPE, __builtin_fmax##SUFFIX) \\\n   T (TYPE, CMPTYPE, __builtin_fmin##SUFFIX)\n \n@@ -67,6 +72,11 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n \n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n@@ -110,6 +120,14 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */"}, {"sha": "806af7f19143b6125e6f37f563dd06535145df12", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_9.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_9.c?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -5,6 +5,8 @@\n \n #define add(A, B) ((A) + (B))\n #define sub(A, B) ((A) - (B))\n+#define mul(A, B) ((A) * (B))\n+#define div(A, B) ((A) / (B))\n #define max(A, B) ((A) > (B) ? (A) : (B))\n #define min(A, B) ((A) < (B) ? (A) : (B))\n #define and(A, B) ((A) & (B))\n@@ -27,6 +29,7 @@\n #define FOR_EACH_INT_TYPE(T, TYPE) \\\n   T (TYPE, TYPE, add) \\\n   T (TYPE, TYPE, sub) \\\n+  T (TYPE, TYPE, mul) \\\n   T (TYPE, TYPE, max) \\\n   T (TYPE, TYPE, min) \\\n   T (TYPE, TYPE, and) \\\n@@ -36,6 +39,8 @@\n #define FOR_EACH_FP_TYPE(T, TYPE, CMPTYPE, SUFFIX) \\\n   T (TYPE, CMPTYPE, add) \\\n   T (TYPE, CMPTYPE, sub) \\\n+  T (TYPE, CMPTYPE, mul) \\\n+  T (TYPE, CMPTYPE, div) \\\n   T (TYPE, CMPTYPE, __builtin_fmax##SUFFIX) \\\n   T (TYPE, CMPTYPE, __builtin_fmin##SUFFIX)\n \n@@ -67,6 +72,11 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n /* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n \n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n@@ -110,6 +120,14 @@ FOR_EACH_LOOP (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */"}, {"sha": "3c2c62a58004677411ca380259043d5a9d484469", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4fd4a9fec0af65249a11e44341b5f3f5b209b3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6c4fd4a9fec0af65249a11e44341b5f3f5b209b3", "patch": "@@ -5590,8 +5590,9 @@ proc check_effective_target_vect_double { } {\n     return $et_vect_double_saved($et_index)\n }\n \n-# Return 1 if the target supports conditional addition, subtraction, minimum\n-# and maximum on vectors of double, via the cond_ optabs.  Return 0 otherwise.\n+# Return 1 if the target supports conditional addition, subtraction,\n+# multiplication, division, minimum and maximum on vectors of double,\n+# via the cond_ optabs.  Return 0 otherwise.\n \n proc check_effective_target_vect_double_cond_arith { } {\n     return [check_effective_target_aarch64_sve]"}]}