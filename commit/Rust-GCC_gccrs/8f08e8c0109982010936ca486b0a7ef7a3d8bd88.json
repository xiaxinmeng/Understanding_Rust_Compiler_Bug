{"sha": "8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwOGU4YzAxMDk5ODIwMTA5MzZjYTQ4NmIwYTdlZjdhM2Q4YmQ4OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2001-12-17T21:20:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-12-17T21:20:03Z"}, "message": "expmed.c (emit_store_flag): Extract updated comparison code from the return value of compare_from_rtx.\n\n        * expmed.c (emit_store_flag): Extract updated comparison code\n        from the return value of compare_from_rtx.\n        * expr.c (do_store_flag): Similarly.\n\nFrom-SVN: r48128", "tree": {"sha": "21dbd2506dad7faa36fe6f8c9cd2635d13b7b777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21dbd2506dad7faa36fe6f8c9cd2635d13b7b777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/comments", "author": null, "committer": null, "parents": [{"sha": "79503fdd334db52e65b8550cce54031eadda249a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79503fdd334db52e65b8550cce54031eadda249a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79503fdd334db52e65b8550cce54031eadda249a"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "4ae0ce0dbc27e801a7b00093ff3d59e193437b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "patch": "@@ -1,3 +1,9 @@\n+Mon Dec 17 14:21:21 2001  Jeffrey A Law  (law@redhat.com)\n+\n+\t* expmed.c (emit_store_flag): Extract updated comparison code\n+\tfrom the return value of compare_from_rtx.\n+\t* expr.c (do_store_flag): Similarly.\n+\n 2001-12-17  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* caller-save.c (init_caller_save): Use MODE_BASE_REG_CLASS in"}, {"sha": "f2c4aa22450282e6a9b96c9ed43cd3cc31856f6a", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "patch": "@@ -4350,12 +4350,13 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t\t: normalizep == -1 ? constm1_rtx\n \t\t: const_true_rtx);\n \n-      /* If the code of COMPARISON doesn't match CODE, something is\n-\t wrong; we can no longer be sure that we have the operation.  \n-\t We could handle this case, but it should not happen.  */\n+      /* The code of COMPARISON may not match CODE if compare_from_rtx\n+\t decided to swap its operands and reverse the original code.\n \n-      if (GET_CODE (comparison) != code)\n-\tabort ();\n+\t We know that compare_from_rtx returns either a CONST_INT or\n+\t a new comparison code, so it is safe to just extract the\n+\t code from COMPARISON.  */\n+      code = GET_CODE (comparison);\n \n       /* Get a reference to the target in the proper mode for this insn.  */\n       compare_mode = insn_data[(int) icode].operand[0].mode;"}, {"sha": "74c8b44895ff87f3dfe188dbd08dd6bb7ef807f4", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08e8c0109982010936ca486b0a7ef7a3d8bd88/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8f08e8c0109982010936ca486b0a7ef7a3d8bd88", "patch": "@@ -10235,6 +10235,14 @@ do_store_flag (exp, target, mode, only_cheap)\n \t     || (result != const0_rtx && invert))\n \t    ? const0_rtx : const1_rtx);\n \n+  /* The code of RESULT may not match CODE if compare_from_rtx\n+     decided to swap its operands and reverse the original code.\n+\n+     We know that compare_from_rtx returns either a CONST_INT or\n+     a new comparison code, so it is safe to just extract the\n+     code from RESULT.  */\n+  code = GET_CODE (result);\n+\n   label = gen_label_rtx ();\n   if (bcc_gen_fctn[(int) code] == 0)\n     abort ();"}]}