{"sha": "c6dd76fab44e5786ba6af573439e7c68440904f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkZDc2ZmFiNDRlNTc4NmJhNmFmNTczNDM5ZTdjNjg0NDA5MDRmMg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-21T22:05:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-21T22:05:25Z"}, "message": "rs6000: wk -> ws+p8v\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wk\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wk.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wk\" constraint by \"ws\" with \"p8v\".\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271485", "tree": {"sha": "7a931118de97ad1d16e8ec9d82cbe647febf63da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a931118de97ad1d16e8ec9d82cbe647febf63da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6dd76fab44e5786ba6af573439e7c68440904f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd76fab44e5786ba6af573439e7c68440904f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6dd76fab44e5786ba6af573439e7c68440904f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd76fab44e5786ba6af573439e7c68440904f2/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "818502a3c4446012cafe7b9d17a31d1286e9684a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818502a3c4446012cafe7b9d17a31d1286e9684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818502a3c4446012cafe7b9d17a31d1286e9684a"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "eed982d8a74af613cd205a18d498638a07c4b989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -1,3 +1,14 @@\n+2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wk\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wk.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wk\" constraint by \"ws\" with \"p8v\".\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wj\"):"}, {"sha": "6f6062715b5df15f32667b5d86f15d1793178e5b", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -74,9 +74,6 @@\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n   \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n \n-(define_register_constraint \"wk\" \"rs6000_constraints[RS6000_CONSTRAINT_wk]\"\n-  \"FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\")\n-\n (define_register_constraint \"wl\" \"rs6000_constraints[RS6000_CONSTRAINT_wl]\"\n   \"Floating point register if the LFIWAX instruction is enabled or NO_REGS.\")\n "}, {"sha": "190edb500826e94ae2a4f18ba4d981c4da4e4c8b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -2513,7 +2513,6 @@ rs6000_debug_reg_global (void)\n \t   \"wf reg_class = %s\\n\"\n \t   \"wg reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n-\t   \"wk reg_class = %s\\n\"\n \t   \"wl reg_class = %s\\n\"\n \t   \"wm reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n@@ -2536,7 +2535,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wk]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wm]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n@@ -3160,7 +3158,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twf - Preferred register class for V4SFmode.\n \twg - Float register for power6x move insns.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n-\twk - FP or VSX register to hold 64-bit doubles for direct moves.\n \twl - Float register if we can do 32-bit signed int loads.\n \twm - VSX register for ISA 2.07 direct move operations.\n \twn - always NO_REGS.\n@@ -3201,11 +3198,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     rs6000_constraints[RS6000_CONSTRAINT_wl] = FLOAT_REGS;\t/* DImode  */\n \n   if (TARGET_DIRECT_MOVE)\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_wk]\t\t\t/* DFmode  */\n-\t= rs6000_constraints[RS6000_CONSTRAINT_ws];\n-      rs6000_constraints[RS6000_CONSTRAINT_wm] = VSX_REGS;\n-    }\n+    rs6000_constraints[RS6000_CONSTRAINT_wm] = VSX_REGS;\n \n   if (TARGET_POWERPC64)\n     {"}, {"sha": "cc60559f404607e8cb6801e2f7951d621ccccf4a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -1254,7 +1254,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n-  RS6000_CONSTRAINT_wk,\t\t/* FPR/VSX register for DFmode direct moves. */\n   RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n   RS6000_CONSTRAINT_wm,\t\t/* VSX register for direct move */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */"}, {"sha": "33a6de77d32cecac404ddb4d804e5625ac41b97e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -471,7 +471,7 @@\n (define_mode_attr f64_vsx [(DF \"ws\") (DD \"wn\")])\n \n ; Definitions for 64-bit direct move\n-(define_mode_attr f64_dm  [(DF \"wk\") (DD \"d\")])\n+(define_mode_attr f64_dm  [(DF \"ws\") (DD \"d\")])\n \n ; Definitions for 64-bit use of altivec registers\n (define_mode_attr f64_av  [(DF \"wv\") (DD \"wn\")])"}, {"sha": "13a621de9768dfb16a94bc26fc5c53f139f93cb0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd76fab44e5786ba6af573439e7c68440904f2/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c6dd76fab44e5786ba6af573439e7c68440904f2", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n-@code{wf}, @code{wg}, @code{wi}, @code{wk},\n+@code{wf}, @code{wg}, @code{wi},\n @code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n@@ -3262,9 +3262,6 @@ If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n @item wi\n FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n \n-@item wk\n-FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\n-\n @item wl\n Floating point register if the LFIWAX instruction is enabled or NO_REGS.\n "}]}