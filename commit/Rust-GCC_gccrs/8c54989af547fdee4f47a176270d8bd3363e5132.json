{"sha": "8c54989af547fdee4f47a176270d8bd3363e5132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1NDk4OWFmNTQ3ZmRlZTRmNDdhMTc2MjcwZDhiZDMzNjNlNTEzMg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-07-29T09:07:49Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-07-29T09:07:49Z"}, "message": "sh.c (sh_gimplify_va_arg_expr): Unshare the addr...\n\n\t* config/sh/sh.c (sh_gimplify_va_arg_expr): Unshare the addr,\n\tvalist, next_fp, next_fp_tmp, next_fp_limit, next_o, next_o_limit,\n\tnext_stack, lab_false and lab_over trees.\n\nFrom-SVN: r138233", "tree": {"sha": "e6f98fc127a61555b15a9175daed0f042521065c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f98fc127a61555b15a9175daed0f042521065c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c54989af547fdee4f47a176270d8bd3363e5132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54989af547fdee4f47a176270d8bd3363e5132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c54989af547fdee4f47a176270d8bd3363e5132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54989af547fdee4f47a176270d8bd3363e5132/comments", "author": null, "committer": null, "parents": [{"sha": "17b1d2a0498d7f5f56e626d3cdfa5e2627a0723e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b1d2a0498d7f5f56e626d3cdfa5e2627a0723e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b1d2a0498d7f5f56e626d3cdfa5e2627a0723e"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "3766bb6f42f05e16c3a26b1b6fe52d5a7d1faa0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c54989af547fdee4f47a176270d8bd3363e5132/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c54989af547fdee4f47a176270d8bd3363e5132/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c54989af547fdee4f47a176270d8bd3363e5132", "patch": "@@ -1,3 +1,9 @@\n+2008-07-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_gimplify_va_arg_expr): Unshare the addr,\n+\tvalist, next_fp, next_fp_tmp, next_fp_limit, next_o, next_o_limit,\n+\tnext_stack, lab_false and lab_over trees.\n+\n 2008-07-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36957"}, {"sha": "44723c4d4a6e463673a13addcbc628b4b70df253", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c54989af547fdee4f47a176270d8bd3363e5132/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c54989af547fdee4f47a176270d8bd3363e5132/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8c54989af547fdee4f47a176270d8bd3363e5132", "patch": "@@ -7350,18 +7350,19 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t  tree cmp;\n \t  bool is_double = size == 8 && TREE_CODE (eff_type) == REAL_TYPE;\n \n-\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_fp);\n-\t  gimplify_assign (addr, tmp, pre_p);\n+\t  tmp = build1 (ADDR_EXPR, pptr_type_node, unshare_expr (next_fp));\n+\t  gimplify_assign (unshare_expr (addr), tmp, pre_p);\n \n-\t  gimplify_assign (next_fp_tmp, valist, pre_p);\n+\t  gimplify_assign (unshare_expr (next_fp_tmp), valist, pre_p);\n \t  tmp = next_fp_limit;\n \t  if (size > 4 && !is_double)\n-\t    tmp = build2 (POINTER_PLUS_EXPR, TREE_TYPE (tmp), tmp,\n-\t\t\t  size_int (4 - size));\n-\t  tmp = build2 (GE_EXPR, boolean_type_node, next_fp_tmp, tmp);\n+\t    tmp = build2 (POINTER_PLUS_EXPR, TREE_TYPE (tmp),\n+\t\t\t  unshare_expr (tmp), size_int (4 - size));\n+\t  tmp = build2 (GE_EXPR, boolean_type_node,\n+\t\t\tunshare_expr (next_fp_tmp), unshare_expr (tmp));\n \t  cmp = build3 (COND_EXPR, void_type_node, tmp,\n-\t\t        build1 (GOTO_EXPR, void_type_node, lab_false),\n-\t\t        NULL_TREE);\n+\t\t        build1 (GOTO_EXPR, void_type_node,\n+\t\t\t\tunshare_expr (lab_false)), NULL_TREE);\n \t  if (!is_double)\n \t    gimplify_and_add (cmp, pre_p);\n \n@@ -7372,8 +7373,8 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t      tmp = build2 (BIT_AND_EXPR, sizetype, tmp,\n \t\t\t    size_int (UNITS_PER_WORD));\n \t      tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n-\t\t\t    next_fp_tmp, tmp);\n-\t      gimplify_assign (next_fp_tmp, tmp, pre_p);\n+\t\t\t    unshare_expr (next_fp_tmp), tmp);\n+\t      gimplify_assign (unshare_expr (next_fp_tmp), tmp, pre_p);\n \t    }\n \t  if (is_double)\n \t    gimplify_and_add (cmp, pre_p);\n@@ -7398,48 +7399,53 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t    }\n #endif /* FUNCTION_ARG_SCmode_WART */\n \n-\t  tmp = build1 (GOTO_EXPR, void_type_node, lab_over);\n+\t  tmp = build1 (GOTO_EXPR, void_type_node, unshare_expr (lab_over));\n \t  gimplify_and_add (tmp, pre_p);\n \n-\t  tmp = build1 (LABEL_EXPR, void_type_node, lab_false);\n+\t  tmp = build1 (LABEL_EXPR, void_type_node, unshare_expr (lab_false));\n \t  gimplify_and_add (tmp, pre_p);\n \n-\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_stack);\n-\t  gimplify_assign (addr, tmp, pre_p);\n-\t  gimplify_assign (next_fp_tmp, valist, pre_p);\n+\t  tmp = build1 (ADDR_EXPR, pptr_type_node, unshare_expr (next_stack));\n+\t  gimplify_assign (unshare_expr (addr), tmp, pre_p);\n+\t  gimplify_assign (unshare_expr (next_fp_tmp),\n+\t\t\t   unshare_expr (valist), pre_p);\n \n-\t  gimplify_assign (valist, next_fp_tmp, post_p);\n+\t  gimplify_assign (unshare_expr (valist),\n+\t\t\t   unshare_expr (next_fp_tmp), post_p);\n \t  valist = next_fp_tmp;\n \t}\n       else\n \t{\n-\t  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node, next_o,\n-\t\t\tsize_int (rsize));\n-\t  tmp = build2 (GT_EXPR, boolean_type_node, tmp, next_o_limit);\n+\t  tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n+\t\t\tunshare_expr (next_o), size_int (rsize));\n+\t  tmp = build2 (GT_EXPR, boolean_type_node, tmp,\n+\t\t\tunshare_expr (next_o_limit));\n \t  tmp = build3 (COND_EXPR, void_type_node, tmp,\n-\t\t        build1 (GOTO_EXPR, void_type_node, lab_false),\n-\t\t        NULL_TREE);\n+\t\t        build1 (GOTO_EXPR, void_type_node,\n+\t\t\t\tunshare_expr (lab_false)),\n+\t\t\tNULL_TREE);\n \t  gimplify_and_add (tmp, pre_p);\n \n-\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_o);\n-\t  gimplify_assign (addr, tmp, pre_p);\n+\t  tmp = build1 (ADDR_EXPR, pptr_type_node, unshare_expr (next_o));\n+\t  gimplify_assign (unshare_expr (addr), tmp, pre_p);\n \n-\t  tmp = build1 (GOTO_EXPR, void_type_node, lab_over);\n+\t  tmp = build1 (GOTO_EXPR, void_type_node, unshare_expr (lab_over));\n \t  gimplify_and_add (tmp, pre_p);\n \n-\t  tmp = build1 (LABEL_EXPR, void_type_node, lab_false);\n+\t  tmp = build1 (LABEL_EXPR, void_type_node, unshare_expr (lab_false));\n \t  gimplify_and_add (tmp, pre_p);\n \n \t  if (size > 4 && ! (TARGET_SH4 || TARGET_SH2A))\n-\t    gimplify_assign (next_o, next_o_limit, pre_p);\n+\t    gimplify_assign (unshare_expr (next_o),\n+\t\t\t     unshare_expr (next_o_limit), pre_p);\n \n-\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_stack);\n-\t  gimplify_assign (addr, tmp, pre_p);\n+\t  tmp = build1 (ADDR_EXPR, pptr_type_node, unshare_expr (next_stack));\n+\t  gimplify_assign (unshare_expr (addr), tmp, pre_p);\n \t}\n \n       if (!result)\n \t{\n-\t  tmp = build1 (LABEL_EXPR, void_type_node, lab_over);\n+\t  tmp = build1 (LABEL_EXPR, void_type_node, unshare_expr (lab_over));\n \t  gimplify_and_add (tmp, pre_p);\n \t}\n     }\n@@ -7452,7 +7458,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     {\n       gimplify_assign (result, tmp, pre_p);\n \n-      tmp = build1 (LABEL_EXPR, void_type_node, lab_over);\n+      tmp = build1 (LABEL_EXPR, void_type_node, unshare_expr (lab_over));\n       gimplify_and_add (tmp, pre_p);\n     }\n   else"}]}