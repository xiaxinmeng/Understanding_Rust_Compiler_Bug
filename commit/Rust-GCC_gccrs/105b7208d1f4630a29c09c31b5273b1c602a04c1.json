{"sha": "105b7208d1f4630a29c09c31b5273b1c602a04c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1YjcyMDhkMWY0NjMwYTI5YzA5YzMxYjUyNzNiMWM2MDJhMDRjMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-19T13:06:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-19T13:06:35Z"}, "message": "tree-vrp.c (intersect_ranges): Handle more cases.\n\n2012-06-19  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (intersect_ranges): Handle more cases.\n\t(vrp_intersect_ranges): Dump what we intersect and call ...\n\t(vrp_intersect_ranges_1): ... this.\n\nFrom-SVN: r188776", "tree": {"sha": "f2c02a77b95275c93238479fe3e13a1e15cb5f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2c02a77b95275c93238479fe3e13a1e15cb5f83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105b7208d1f4630a29c09c31b5273b1c602a04c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b7208d1f4630a29c09c31b5273b1c602a04c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105b7208d1f4630a29c09c31b5273b1c602a04c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b7208d1f4630a29c09c31b5273b1c602a04c1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af4d0d913bb41215875b7e9e668009ba98d973e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4d0d913bb41215875b7e9e668009ba98d973e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4d0d913bb41215875b7e9e668009ba98d973e6"}], "stats": {"total": 157, "additions": 134, "deletions": 23}, "files": [{"sha": "9b9613137db6330666da076571537d912a2f88aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105b7208d1f4630a29c09c31b5273b1c602a04c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105b7208d1f4630a29c09c31b5273b1c602a04c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=105b7208d1f4630a29c09c31b5273b1c602a04c1", "patch": "@@ -1,3 +1,9 @@\n+2012-06-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (intersect_ranges): Handle more cases.\n+\t(vrp_intersect_ranges): Dump what we intersect and call ...\n+\t(vrp_intersect_ranges_1): ... this.\n+\n 2012-06-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53708"}, {"sha": "53d6ac398774daebfcbc4ec15c2389b278534e29", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 128, "deletions": 23, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105b7208d1f4630a29c09c31b5273b1c602a04c1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105b7208d1f4630a29c09c31b5273b1c602a04c1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=105b7208d1f4630a29c09c31b5273b1c602a04c1", "patch": "@@ -6781,9 +6781,31 @@ intersect_ranges (enum value_range_type *vr0type,\n \t\t  enum value_range_type vr1type,\n \t\t  tree vr1min, tree vr1max)\n {\n+  bool mineq = operand_equal_p (*vr0min, vr1min, 0);\n+  bool maxeq = operand_equal_p (*vr0max, vr1max, 0);\n+\n   /* [] is vr0, () is vr1 in the following classification comments.  */\n-  if (operand_less_p (*vr0max, vr1min) == 1\n-      || operand_less_p (vr1max, *vr0min) == 1)\n+  if (mineq && maxeq)\n+    {\n+      /* [(  )] */\n+      if (*vr0type == vr1type)\n+\t/* Nothing to do for equal ranges.  */\n+\t;\n+      else if ((*vr0type == VR_RANGE\n+\t\t&& vr1type == VR_ANTI_RANGE)\n+\t       || (*vr0type == VR_ANTI_RANGE\n+\t\t   && vr1type == VR_RANGE))\n+\t{\n+\t  /* For anti-range with range intersection the result is empty.  */\n+\t  *vr0type = VR_UNDEFINED;\n+\t  *vr0min = NULL_TREE;\n+\t  *vr0max = NULL_TREE;\n+\t}\n+      else\n+\tgcc_unreachable ();\n+    }\n+  else if (operand_less_p (*vr0max, vr1min) == 1\n+\t   || operand_less_p (vr1max, *vr0min) == 1)\n     {\n       /* [ ] ( ) or ( ) [ ]\n \t If the ranges have an empty intersection, the result of the\n@@ -6813,19 +6835,48 @@ intersect_ranges (enum value_range_type *vr0type,\n \t  /* Take VR0.  */\n \t}\n     }\n-  else if (operand_less_p (vr1max, *vr0max) == 1\n-\t   && operand_less_p (*vr0min, vr1min) == 1)\n+  else if ((maxeq || operand_less_p (vr1max, *vr0max) == 1)\n+\t   && (mineq || operand_less_p (*vr0min, vr1min) == 1))\n     {\n-      /* [ (  ) ]  */\n-      if (*vr0type == VR_RANGE)\n+      /* [ (  ) ] or [(  ) ] or [ (  )] */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n \t{\n-\t  /* If the outer is a range choose the inner one.\n-\t     ???  If the inner is an anti-range this arbitrarily chooses\n-\t     the anti-range.  */\n+\t  /* If both are ranges the result is the inner one.  */\n \t  *vr0type = vr1type;\n \t  *vr0min = vr1min;\n \t  *vr0max = vr1max;\n \t}\n+      else if (*vr0type == VR_RANGE\n+\t       && vr1type == VR_ANTI_RANGE)\n+\t{\n+\t  /* Choose the right gap if the left one is empty.  */\n+\t  if (mineq)\n+\t    {\n+\t      if (TREE_CODE (vr1max) == INTEGER_CST)\n+\t\t*vr0min = int_const_binop (PLUS_EXPR, vr1max, integer_one_node);\n+\t      else\n+\t\t*vr0min = vr1max;\n+\t    }\n+\t  /* Choose the left gap if the right one is empty.  */\n+\t  else if (maxeq)\n+\t    {\n+\t      if (TREE_CODE (vr1min) == INTEGER_CST)\n+\t\t*vr0max = int_const_binop (MINUS_EXPR, vr1min,\n+\t\t\t\t\t   integer_one_node);\n+\t      else\n+\t\t*vr0max = vr1min;\n+\t    }\n+\t  /* Choose the anti-range if the range is effectively varying.  */\n+\t  else if (vrp_val_is_min (*vr0min)\n+\t\t   && vrp_val_is_max (*vr0max))\n+\t    {\n+\t      *vr0type = vr1type;\n+\t      *vr0min = vr1min;\n+\t      *vr0max = vr1max;\n+\t    }\n+\t  /* Else choose the range.  */\n+\t}\n       else if (*vr0type == VR_ANTI_RANGE\n \t       && vr1type == VR_ANTI_RANGE)\n \t/* If both are anti-ranges the result is the outer one.  */\n@@ -6841,15 +6892,51 @@ intersect_ranges (enum value_range_type *vr0type,\n       else\n \tgcc_unreachable ();\n     }\n-  else if (operand_less_p (*vr0max, vr1max) == 1\n-\t   && operand_less_p (vr1min, *vr0min) == 1)\n+  else if ((maxeq || operand_less_p (*vr0max, vr1max) == 1)\n+\t   && (mineq || operand_less_p (vr1min, *vr0min) == 1))\n     {\n-      /* ( [  ] )  */\n-      if (vr1type == VR_RANGE)\n-\t/* If the outer is a range, choose the inner one.\n-\t   ???  If the inner is an anti-range this arbitrarily chooses\n-\t   the anti-range.  */\n+      /* ( [  ] ) or ([  ] ) or ( [  ]) */\n+      if (*vr0type == VR_RANGE\n+\t  && vr1type == VR_RANGE)\n+\t/* Choose the inner range.  */\n \t;\n+      else if (*vr0type == VR_ANTI_RANGE\n+\t       && vr1type == VR_RANGE)\n+\t{\n+\t  /* Choose the right gap if the left is empty.  */\n+\t  if (mineq)\n+\t    {\n+\t      *vr0type = VR_RANGE;\n+\t      if (TREE_CODE (*vr0max) == INTEGER_CST)\n+\t\t*vr0min = int_const_binop (PLUS_EXPR, *vr0max,\n+\t\t\t\t\t   integer_one_node);\n+\t      else\n+\t\t*vr0min = *vr0max;\n+\t      *vr0max = vr1max;\n+\t    }\n+\t  /* Choose the left gap if the right is empty.  */\n+\t  else if (maxeq)\n+\t    {\n+\t      *vr0type = VR_RANGE;\n+\t      if (TREE_CODE (*vr0min) == INTEGER_CST)\n+\t\t*vr0max = int_const_binop (MINUS_EXPR, *vr0min,\n+\t\t\t\t\t   integer_one_node);\n+\t      else\n+\t\t*vr0max = *vr0min;\n+\t      *vr0min = vr1min;\n+\t    }\n+\t  /* Choose the anti-range if the range is effectively varying.  */\n+\t  else if (vrp_val_is_min (vr1min)\n+\t\t   && vrp_val_is_max (vr1max))\n+\t    ;\n+\t  /* Else choose the range.  */\n+\t  else\n+\t    {\n+\t      *vr0type = vr1type;\n+\t      *vr0min = vr1min;\n+\t      *vr0max = vr1max;\n+\t    }\n+\t}\n       else if (*vr0type == VR_ANTI_RANGE\n \t       && vr1type == VR_ANTI_RANGE)\n \t{\n@@ -6871,10 +6958,9 @@ intersect_ranges (enum value_range_type *vr0type,\n     }\n   else if ((operand_less_p (vr1min, *vr0max) == 1\n \t    || operand_equal_p (vr1min, *vr0max, 0))\n-\t   && (operand_less_p (*vr0min, vr1min) == 1\n-\t       || operand_equal_p (*vr0min, vr1min, 0)))\n+\t   && operand_less_p (*vr0min, vr1min) == 1)\n     {\n-      /* [  (  ]  ) */\n+      /* [  (  ]  ) or [  ](  ) */\n       if (*vr0type == VR_ANTI_RANGE\n \t  && vr1type == VR_ANTI_RANGE)\n \t*vr0max = vr1max;\n@@ -6906,10 +6992,9 @@ intersect_ranges (enum value_range_type *vr0type,\n     }\n   else if ((operand_less_p (*vr0min, vr1max) == 1\n \t    || operand_equal_p (*vr0min, vr1max, 0))\n-\t   && (operand_less_p (vr1min, *vr0min) == 1\n-\t       || operand_equal_p (vr1min, *vr0min, 0)))\n+\t   && operand_less_p (vr1min, *vr0min) == 1)\n     {\n-      /* (  [  )  ] */\n+      /* (  [  )  ] or (  )[  ] */\n       if (*vr0type == VR_ANTI_RANGE\n \t  && vr1type == VR_ANTI_RANGE)\n \t*vr0min = vr1min;\n@@ -6952,7 +7037,7 @@ intersect_ranges (enum value_range_type *vr0type,\n    in *VR0.  This may not be the smallest possible such range.  */\n \n static void\n-vrp_intersect_ranges (value_range_t *vr0, value_range_t *vr1)\n+vrp_intersect_ranges_1 (value_range_t *vr0, value_range_t *vr1)\n {\n   value_range_t saved;\n \n@@ -7003,6 +7088,26 @@ vrp_intersect_ranges (value_range_t *vr0, value_range_t *vr1)\n     bitmap_copy (vr0->equiv, vr1->equiv);\n }\n \n+static void\n+vrp_intersect_ranges (value_range_t *vr0, value_range_t *vr1)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Intersecting\\n  \");\n+      dump_value_range (dump_file, vr0);\n+      fprintf (dump_file, \"\\nand\\n  \");\n+      dump_value_range (dump_file, vr1);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+  vrp_intersect_ranges_1 (vr0, vr1);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"to\\n  \");\n+      dump_value_range (dump_file, vr0);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+}\n+\n /* Meet operation for value ranges.  Given two value ranges VR0 and\n    VR1, store in VR0 a range that contains both VR0 and VR1.  This\n    may not be the smallest possible such range.  */"}]}