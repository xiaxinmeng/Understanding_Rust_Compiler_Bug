{"sha": "2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3ZTVhMGRmMGMxNzY2ZDNiMWVkNmMxYTVjNmEwYjE3ZjY4ZmE5NA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2004-05-04T01:20:40Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-05-04T01:20:40Z"}, "message": "s390.c (s390_emit_prologue): Call unspec tpf prologue insn instead of setting up call.\n\n2004-05-03  Eric Christopher  <echristo@redhat.com>\n\n        * config/s390/s390.c (s390_emit_prologue): Call unspec tpf\n        prologue insn instead of setting up call.\n        (s390_emit_epilogue): Ditto.\n        * config/s390/s390.md (prologue_tpf, epilogue_tpf): New patterns.\n        (define_constants): Add numbers for above patterns.\n\nFrom-SVN: r81466", "tree": {"sha": "08dfee8f54fa6fca5621cb3d7e9df983a6b1319a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08dfee8f54fa6fca5621cb3d7e9df983a6b1319a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38899e29e5f39c4589ac0bd2b4545b3caa8cff20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38899e29e5f39c4589ac0bd2b4545b3caa8cff20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38899e29e5f39c4589ac0bd2b4545b3caa8cff20"}], "stats": {"total": 161, "additions": 92, "deletions": 69}, "files": [{"sha": "45179bf955980f0b20e230270abb2d3ffebfc6e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "patch": "@@ -1,3 +1,11 @@\n+2004-05-03  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/s390/s390.c (s390_emit_prologue): Call unspec tpf\n+\tprologue insn instead of setting up call.\n+\t(s390_emit_epilogue): Ditto.\n+\t* config/s390/s390.md (prologue_tpf, epilogue_tpf): New patterns.\n+\t(define_constants): Add numbers for above patterns.\n+\n 2004-05-03  Eric Christopher  <echristo@redhat.com>\n \n \t* config/s390/s390.h (CONDITIONAL_REGISTER_USAGE): Move body..."}, {"sha": "e5850957bfe530042846a31278a57ab6f19826b7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "patch": "@@ -5683,11 +5683,8 @@ s390_emit_prologue (void)\n     {\n       /* Generate a BAS instruction to serve as a function\n \t entry intercept to facilitate the use of tracing\n-\t algorithms located at the branch target.\n-\n-\t This must use register 1.  */\n-      s390_emit_call (GEN_INT (0xfe0), NULL_RTX, NULL_RTX,\n-\t\t      gen_rtx_REG (Pmode, 1));\n+\t algorithms located at the branch target.  */\n+      emit_insn (gen_prologue_tpf ());\n \n       /* Emit a blockage here so that all code\n \t lies between the profiling mechanisms.  */\n@@ -5710,16 +5707,13 @@ s390_emit_epilogue (bool sibcall)\n \n       /* Generate a BAS instruction to serve as a function\n \t entry intercept to facilitate the use of tracing\n-\t algorithms located at the branch target.\n-\n-\t This must use register 1.  */\n+\t algorithms located at the branch target.  */\n \n       /* Emit a blockage here so that all code\n          lies between the profiling mechanisms.  */\n       emit_insn (gen_blockage ());\n \n-      s390_emit_call (GEN_INT (0xfe6), NULL_RTX, NULL_RTX,\n-\t\t      gen_rtx_REG (Pmode, 1));\n+      emit_insn (gen_epilogue_tpf ());\n     }\n \n   /* Check whether to use frame or stack pointer for restore.  */"}, {"sha": "151b5b484197f5d04e17cca0f64aaa200e6e18c3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 80, "deletions": 59, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "patch": "@@ -29,7 +29,7 @@\n ;;    I -- An 8-bit constant (0..255).\n ;;    J -- A 12-bit constant (0..4095).\n ;;    K -- A 16-bit constant (-32768..32767).\n-;;    L -- Value appropriate as displacement. \n+;;    L -- Value appropriate as displacement.\n ;;         (0..4095) for short displacement\n ;;         (-524288..524287) for long displacement\n ;;    M -- Constant integer with a value of 0x7fffffff.\n@@ -38,7 +38,7 @@\n ;;         H,Q:   mode of the part\n ;;         D,S,H: mode of the containing operand\n ;;         0,F:   value of the other parts (F - all bits set)\n-;;         \n+;;\n ;;         The constraint matches if the specified part of a constant\n ;;         has a value different from its other parts.\n ;;    Q -- Memory reference without index register and with short displacement.\n@@ -118,6 +118,10 @@\n   [; Blockage\n    (UNSPECV_BLOCKAGE\t\t0)\n \n+   ; TPF Support\n+   (UNSPECV_TPF_PROLOGUE        20)\n+   (UNSPECV_TPF_EPILOGUE        21)\n+\n    ; Literal pool\n    (UNSPECV_POOL\t\t200)\n    (UNSPECV_POOL_START\t\t201)\n@@ -537,7 +541,7 @@\n (define_insn \"*tmdi_reg\"\n   [(set (reg 33)\n         (compare (and:DI (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,d,d\")\n-                         (match_operand:DI 1 \"immediate_operand\" \n+                         (match_operand:DI 1 \"immediate_operand\"\n \t\t\t\t\t     \"N0HD0,N1HD0,N2HD0,N3HD0\"))\n                  (match_operand:DI 2 \"immediate_operand\" \"n,n,n,n\")))]\n   \"TARGET_64BIT\n@@ -1082,9 +1086,9 @@\n     (set_attr \"type\"    \"larl\")])\n \n (define_insn \"*movdi_64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                             \"=d,d,d,d,d,d,d,d,m,!*f,!*f,!*f,!R,!T,?Q\")\n-        (match_operand:DI 1 \"general_operand\" \n+        (match_operand:DI 1 \"general_operand\"\n                             \"K,N0HD0,N1HD0,N2HD0,N3HD0,L,d,m,d,*f,R,T,*f,*f,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n@@ -1281,9 +1285,9 @@\n     (set_attr \"type\"    \"larl\")])\n \n (define_insn \"*movsi_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"\n                             \"=d,d,d,d,d,d,d,R,T,!*f,!*f,!*f,!R,!T,?Q\")\n-        (match_operand:SI 1 \"general_operand\" \n+        (match_operand:SI 1 \"general_operand\"\n                             \"K,N0HS0,N1HS0,L,d,R,T,d,d,*f,R,T,*f,*f,?Q\"))]\n   \"TARGET_ZARCH\"\n   \"@\n@@ -1423,7 +1427,7 @@\n         (match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  /* Make it explicit that loading a register from memory \n+  /* Make it explicit that loading a register from memory\n      always sign-extends (at least) to SImode.  */\n   if (optimize && !no_new_pseudos\n       && register_operand (operands[0], VOIDmode)\n@@ -1893,7 +1897,7 @@\n \n (define_expand \"strlendi\"\n   [(set (reg:QI 0) (match_operand:QI 2 \"immediate_operand\" \"\"))\n-   (parallel \n+   (parallel\n     [(set (match_dup 4)\n \t  (unspec:DI [(const_int 0)\n \t\t      (match_operand:BLK 1 \"memory_operand\" \"\")\n@@ -1929,7 +1933,7 @@\n \n (define_expand \"strlensi\"\n   [(set (reg:QI 0) (match_operand:QI 2 \"immediate_operand\" \"\"))\n-   (parallel \n+   (parallel\n     [(set (match_dup 4)\n \t  (unspec:SI [(const_int 0)\n \t\t      (match_operand:BLK 1 \"memory_operand\" \"\")\n@@ -1956,7 +1960,7 @@\n \t\t    (reg:QI 0)\n \t\t    (match_operand 4 \"immediate_operand\" \"\")] UNSPEC_SRST))\n    (clobber (match_scratch:SI 1 \"=a\"))\n-   (clobber (reg:CC 33))]\t\n+   (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n   \"srst\\t%0,%1\\;jo\\t.-4\"\n   [(set_attr \"op_type\" \"NN\")\n@@ -2746,14 +2750,14 @@\n \n (define_insn_and_split \"*llgt_sidi_split\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"m\") 0) \n+        (and:DI (subreg:DI (match_operand:SI 1 \"memory_operand\" \"m\") 0)\n \t\t(const_int 2147483647)))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n-        (and:DI (subreg:DI (match_dup 1) 0) \n+        (and:DI (subreg:DI (match_dup 1) 0)\n \t\t(const_int 2147483647)))]\n   \"\")\n \n@@ -4282,15 +4286,15 @@\n ;\n \n (define_insn \"*adddi3_alc_cc\"\n-  [(set (reg 33) \n+  [(set (reg 33)\n         (compare\n           (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n                             (match_operand:DI 2 \"general_operand\" \"d,m\"))\n                    (match_operand:DI 3 \"s390_alc_comparison\" \"\"))\n           (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (plus:DI (plus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\" \n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n   \"@\n    alcgr\\\\t%0,%2\n    alcg\\\\t%0,%2\"\n@@ -4301,23 +4305,23 @@\n         (plus:DI (plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n                           (match_operand:DI 2 \"general_operand\" \"d,m\"))\n                  (match_operand:DI 3 \"s390_alc_comparison\" \"\")))\n-   (clobber (reg:CC 33))] \n-  \"TARGET_64BIT\" \n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n   \"@\n    alcgr\\\\t%0,%2\n    alcg\\\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*subdi3_slb_cc\"\n-  [(set (reg 33) \n+  [(set (reg 33)\n         (compare\n           (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n                               (match_operand:DI 2 \"general_operand\" \"d,m\"))\n                     (match_operand:DI 3 \"s390_slb_comparison\" \"\"))\n           (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (minus:DI (minus:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\" \n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_64BIT\"\n   \"@\n    slbgr\\\\t%0,%2\n    slbg\\\\t%0,%2\"\n@@ -4328,8 +4332,8 @@\n         (minus:DI (minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n                             (match_operand:DI 2 \"general_operand\" \"d,m\"))\n                   (match_operand:DI 3 \"s390_slb_comparison\" \"\")))\n-   (clobber (reg:CC 33))] \n-  \"TARGET_64BIT\" \n+   (clobber (reg:CC 33))]\n+  \"TARGET_64BIT\"\n   \"@\n    slbgr\\\\t%0,%2\n    slbg\\\\t%0,%2\"\n@@ -4340,15 +4344,15 @@\n ;\n \n (define_insn \"*addsi3_alc_cc\"\n-  [(set (reg 33) \n+  [(set (reg 33)\n         (compare\n           (plus:SI (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n                             (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                    (match_operand:SI 3 \"s390_alc_comparison\" \"\"))\n           (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (plus:SI (plus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\" \n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\"\n   \"@\n    alcr\\\\t%0,%2\n    alc\\\\t%0,%2\"\n@@ -4360,22 +4364,22 @@\n                           (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                  (match_operand:SI 3 \"s390_alc_comparison\" \"\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_CPU_ZARCH\" \n+  \"TARGET_CPU_ZARCH\"\n   \"@\n    alcr\\\\t%0,%2\n    alc\\\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n (define_insn \"*subsi3_slb_cc\"\n-  [(set (reg 33) \n+  [(set (reg 33)\n         (compare\n           (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n                               (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                     (match_operand:SI 3 \"s390_slb_comparison\" \"\"))\n           (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (minus:SI (minus:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\" \n+  \"s390_match_ccmode (insn, CCLmode) && TARGET_CPU_ZARCH\"\n   \"@\n    slbr\\\\t%0,%2\n    slb\\\\t%0,%2\"\n@@ -4386,8 +4390,8 @@\n         (minus:SI (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n                             (match_operand:SI 2 \"general_operand\" \"d,m\"))\n                   (match_operand:SI 3 \"s390_slb_comparison\" \"\")))\n-   (clobber (reg:CC 33))] \n-  \"TARGET_CPU_ZARCH\" \n+   (clobber (reg:CC 33))]\n+  \"TARGET_CPU_ZARCH\"\n   \"@\n    slbr\\\\t%0,%2\n    slb\\\\t%0,%2\"\n@@ -4657,7 +4661,7 @@\n           (ashift:TI\n             (zero_extend:TI\n               (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-                      (sign_extend:DI \n+                      (sign_extend:DI\n                         (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))\n             (const_int 64))\n           (zero_extend:TI\n@@ -4713,12 +4717,12 @@\n \n (define_insn \"udivmodtidi3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n-        (ior:TI \n+        (ior:TI\n           (ashift:TI\n             (zero_extend:TI\n               (truncate:DI\n-                (umod:TI (match_operand:TI 1 \"register_operand\" \"0,0\") \n-                         (zero_extend:TI \n+                (umod:TI (match_operand:TI 1 \"register_operand\" \"0,0\")\n+                         (zero_extend:TI\n                            (match_operand:DI 2 \"nonimmediate_operand\" \"d,m\")))))\n             (const_int 64))\n           (zero_extend:TI\n@@ -4773,12 +4777,12 @@\n \n (define_insn \"divmoddisi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ior:DI \n+        (ior:DI\n           (ashift:DI\n             (zero_extend:DI\n               (truncate:SI\n-                (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\") \n-                        (sign_extend:DI \n+                (mod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                        (sign_extend:DI\n                           (match_operand:SI 2 \"nonimmediate_operand\" \"d,R\")))))\n             (const_int 32))\n           (zero_extend:DI\n@@ -4835,12 +4839,12 @@\n \n (define_insn \"udivmoddisi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (ior:DI \n+        (ior:DI\n           (ashift:DI\n             (zero_extend:DI\n               (truncate:SI\n-                (umod:DI (match_operand:DI 1 \"register_operand\" \"0,0\") \n-                         (zero_extend:DI \n+                (umod:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                         (zero_extend:DI\n                            (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\")))))\n             (const_int 32))\n           (zero_extend:DI\n@@ -5138,7 +5142,7 @@\n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d,d,d,d,d\")\n \t(and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"d,o,0,0,0,0,0,0\")\n- \t\t(match_operand:DI 2 \"general_operand\" \n+ \t\t(match_operand:DI 2 \"general_operand\"\n \t\t\t\t    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m\")))\n      (clobber (reg:CC 33))]\n    \"TARGET_64BIT\"\n@@ -5203,7 +5207,7 @@\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n (define_expand \"andsi3\"\n-  [(parallel \n+  [(parallel\n     [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t  (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n \t\t  (match_operand:SI 2 \"general_operand\" \"\")))\n@@ -5221,7 +5225,7 @@\n    #\n    #\n    nilh\\t%0,%j2\n-   nill\\t%0,%j2   \n+   nill\\t%0,%j2\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n@@ -5445,7 +5449,7 @@\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n (define_expand \"iorsi3\"\n-  [(parallel \n+  [(parallel\n     [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t  (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n \t\t  (match_operand:SI 2 \"general_operand\" \"\")))\n@@ -6986,7 +6990,7 @@\n (define_insn \"*sibcall_br\"\n   [(call (mem:QI (reg 1))\n          (match_operand 0 \"const_int_operand\" \"n\"))]\n-  \"SIBLING_CALL_P (insn) \n+  \"SIBLING_CALL_P (insn)\n    && GET_MODE (XEXP (XEXP (PATTERN (insn), 0), 0)) == Pmode\"\n   \"br\\t%%r1\"\n   [(set_attr \"op_type\" \"RR\")\n@@ -7027,7 +7031,7 @@\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:QI (reg 1))\n \t      (match_operand 1 \"const_int_operand\" \"n\")))]\n-  \"SIBLING_CALL_P (insn) \n+  \"SIBLING_CALL_P (insn)\n    && GET_MODE (XEXP (XEXP (XEXP (PATTERN (insn), 1), 0), 0)) == Pmode\"\n   \"br\\t%%r1\"\n   [(set_attr \"op_type\" \"RR\")\n@@ -7063,7 +7067,7 @@\n    (use (match_operand 2 \"\" \"\"))]\n   \"\"\n {\n-  s390_emit_call (XEXP (operands[0], 0), NULL_RTX, NULL_RTX, \n+  s390_emit_call (XEXP (operands[0], 0), NULL_RTX, NULL_RTX,\n \t\t  gen_rtx_REG (Pmode, RETURN_REGNUM));\n   DONE;\n })\n@@ -7072,8 +7076,8 @@\n   [(call (mem:QI (match_operand 0 \"bras_sym_operand\" \"X\"))\n          (match_operand 1 \"const_int_operand\" \"n\"))\n    (clobber (match_operand 2 \"register_operand\" \"=r\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_SMALL_EXEC \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_SMALL_EXEC\n    && GET_MODE (operands[2]) == Pmode\"\n   \"bras\\t%2,%0\"\n   [(set_attr \"op_type\" \"RI\")\n@@ -7083,8 +7087,8 @@\n   [(call (mem:QI (match_operand 0 \"bras_sym_operand\" \"X\"))\n          (match_operand 1 \"const_int_operand\" \"n\"))\n    (clobber (match_operand 2 \"register_operand\" \"=r\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_CPU_ZARCH \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_CPU_ZARCH\n    && GET_MODE (operands[2]) == Pmode\"\n   \"brasl\\t%2,%0\"\n   [(set_attr \"op_type\" \"RIL\")\n@@ -7118,7 +7122,7 @@\n    (use (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n-  s390_emit_call (XEXP (operands[1], 0), NULL_RTX, operands[0], \n+  s390_emit_call (XEXP (operands[1], 0), NULL_RTX, operands[0],\n \t\t  gen_rtx_REG (Pmode, RETURN_REGNUM));\n   DONE;\n })\n@@ -7128,8 +7132,8 @@\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_SMALL_EXEC \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_SMALL_EXEC\n    && GET_MODE (operands[3]) == Pmode\"\n   \"bras\\t%3,%1\"\n   [(set_attr \"op_type\" \"RI\")\n@@ -7140,8 +7144,8 @@\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_CPU_ZARCH \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_CPU_ZARCH\n    && GET_MODE (operands[3]) == Pmode\"\n   \"brasl\\t%3,%1\"\n   [(set_attr \"op_type\" \"RIL\")\n@@ -7236,8 +7240,8 @@\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))\n    (use (match_operand 4 \"\" \"\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_SMALL_EXEC \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_SMALL_EXEC\n    && GET_MODE (operands[3]) == Pmode\"\n   \"bras\\t%3,%1%J4\"\n   [(set_attr \"op_type\" \"RI\")\n@@ -7249,8 +7253,8 @@\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))\n    (use (match_operand 4 \"\" \"\"))]\n-  \"!SIBLING_CALL_P (insn) \n-   && TARGET_CPU_ZARCH \n+  \"!SIBLING_CALL_P (insn)\n+   && TARGET_CPU_ZARCH\n    && GET_MODE (operands[3]) == Pmode\"\n   \"brasl\\t%3,%1%J4\"\n   [(set_attr \"op_type\" \"RIL\")\n@@ -7427,7 +7431,7 @@\n   return \"\";\n }\n   [(set_attr \"op_type\" \"NN\")\n-   (set (attr \"length\") \n+   (set (attr \"length\")\n         (symbol_ref \"GET_MODE_SIZE (GET_MODE (PATTERN (insn)))\"))])\n \n (define_insn \"pool_start_31\"\n@@ -7522,11 +7526,28 @@\n   \"\"\n   \"s390_emit_prologue (); DONE;\")\n \n+(define_insn \"prologue_tpf\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_TPF_PROLOGUE)\n+   (clobber (reg:DI 1))]\n+  \"TARGET_TPF\"\n+  \"bas\\t%%r1,4064\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"op_type\" \"RX\")])\n+\n (define_expand \"epilogue\"\n   [(use (const_int 1))]\n   \"\"\n   \"s390_emit_epilogue (false); DONE;\")\n \n+(define_insn \"epilogue_tpf\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_TPF_EPILOGUE)\n+   (clobber (reg:DI 1))]\n+  \"TARGET_TPF\"\n+  \"bas\\t%%r1,4070\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"op_type\" \"RX\")])\n+\n+\n (define_expand \"sibcall_epilogue\"\n   [(use (const_int 0))]\n   \"\""}]}