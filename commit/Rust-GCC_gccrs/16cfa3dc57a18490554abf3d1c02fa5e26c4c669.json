{"sha": "16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjZmEzZGM1N2ExODQ5MDU1NGFiZjNkMWMwMmZhNWUyNmM0YzY2OQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-05-10T22:21:44Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-05-10T22:21:44Z"}, "message": "altivec.h (vec_sld): Add overloads for argument/return types of 'vector bool int'...\n\n[gcc/ChangeLog]\n2004-05-10  Ziemowit Laski  <zlaski@apple.com>\n\n        * config/rs6000/altivec.h (vec_sld): Add overloads for\n        argument/return types of 'vector bool int', 'vector bool short'\n        and 'vector bool char'.\n\n[gcc/testsuite/ChangeLog]\n2004-05-10  Ziemowit Laski  <zlaski@apple.com>\n\n        * g++.dg/ext/altivec-8.C: New test case.\n        * gcc.dg/altivec-13.c: New test case.\n\nFrom-SVN: r81681", "tree": {"sha": "958df6dad2d1e09a0a96d84ec3cf25ee7f817b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958df6dad2d1e09a0a96d84ec3cf25ee7f817b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/comments", "author": null, "committer": null, "parents": [{"sha": "3f68457e242692040fd149dae74d522704f7fc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f68457e242692040fd149dae74d522704f7fc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f68457e242692040fd149dae74d522704f7fc81"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "59ac6a1f76a1322511925f185dde8e99b691e625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "patch": "@@ -1,3 +1,9 @@\n+2004-05-10  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* config/rs6000/altivec.h (vec_sld): Add overloads for\n+\targument/return types of 'vector bool int', 'vector bool short'\n+\tand 'vector bool char'.\n+\n 2004-05-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-decl.c (store_parm_decls_newstyle): Correct test for a"}, {"sha": "8b7edb0ece3617c99e1f9aa4377d52da8d8de6e4", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "patch": "@@ -200,11 +200,14 @@ inline void vec_dstt (const float *, int, const int) __attribute__ ((always_inli\n inline vector float vec_sld (vector float, vector float, const int) __attribute__ ((always_inline));\n inline vector signed int vec_sld (vector signed int, vector signed int, const int) __attribute__ ((always_inline));\n inline vector unsigned int vec_sld (vector unsigned int, vector unsigned int, const int) __attribute__ ((always_inline));\n+inline vector bool int vec_sld (vector bool int, vector bool int, const int) __attribute__ ((always_inline));\n inline vector signed short vec_sld (vector signed short, vector signed short, const int) __attribute__ ((always_inline));\n inline vector unsigned short vec_sld (vector unsigned short, vector unsigned short, const int) __attribute__ ((always_inline));\n+inline vector bool short vec_sld (vector bool short, vector bool short, const int) __attribute__ ((always_inline));\n inline vector pixel vec_sld (vector pixel, vector pixel, const int) __attribute__ ((always_inline));\n inline vector signed char vec_sld (vector signed char, vector signed char, const int) __attribute__ ((always_inline));\n inline vector unsigned char vec_sld (vector unsigned char, vector unsigned char, const int) __attribute__ ((always_inline));\n+inline vector bool char vec_sld (vector bool char, vector bool char, const int) __attribute__ ((always_inline));\n inline vector signed char vec_splat (vector signed char, const int) __attribute__ ((always_inline));\n inline vector unsigned char vec_splat (vector unsigned char, const int) __attribute__ ((always_inline));\n inline vector bool char vec_splat (vector bool char, const int) __attribute__ ((always_inline));\n@@ -4196,6 +4199,12 @@ vec_sld (vector unsigned int a1, vector unsigned int a2, const int a3)\n   return (vector unsigned int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n+inline vector bool int\n+vec_sld (vector bool int a1, vector bool int a2, const int a3)\n+{\n+  return (vector bool int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n+}\n+\n inline vector signed short\n vec_sld (vector signed short a1, vector signed short a2, const int a3)\n {\n@@ -4208,6 +4217,12 @@ vec_sld (vector unsigned short a1, vector unsigned short a2, const int a3)\n   return (vector unsigned short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n+inline vector bool short\n+vec_sld (vector bool short a1, vector bool short a2, const int a3)\n+{\n+  return (vector bool short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n+}\n+\n inline vector pixel\n vec_sld (vector pixel a1, vector pixel a2, const int a3)\n {\n@@ -4226,6 +4241,12 @@ vec_sld (vector unsigned char a1, vector unsigned char a2, const int a3)\n   return (vector unsigned char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n+inline vector bool char\n+vec_sld (vector bool char a1, vector bool char a2, const int a3)\n+{\n+  return (vector bool char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n+}\n+\n /* vec_sll */\n \n inline vector signed int\n@@ -9534,17 +9555,23 @@ __ch (__tern_args_eq (vector signed int, (a1), vector signed int, (a2), int, (a3\n       ((vector signed int) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector unsigned int, (a1), vector unsigned int, (a2), int, (a3)), \\\n       ((vector unsigned int) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n+__ch (__tern_args_eq (vector bool int, (a1), vector bool int, (a2), int, (a3)), \\\n+      ((vector bool int) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector signed short, (a1), vector signed short, (a2), int, (a3)), \\\n       ((vector signed short) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector unsigned short, (a1), vector unsigned short, (a2), int, (a3)), \\\n       ((vector unsigned short) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n+__ch (__tern_args_eq (vector bool short, (a1), vector bool short, (a2), int, (a3)), \\\n+      ((vector bool short) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector pixel, (a1), vector pixel, (a2), int, (a3)), \\\n       ((vector pixel) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector signed char, (a1), vector signed char, (a2), int, (a3)), \\\n       ((vector signed char) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n __ch (__tern_args_eq (vector unsigned char, (a1), vector unsigned char, (a2), int, (a3)), \\\n       ((vector unsigned char) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n-    __builtin_altivec_compiletime_error (\"vec_sld\")))))))))\n+__ch (__tern_args_eq (vector bool char, (a1), vector bool char, (a2), int, (a3)), \\\n+      ((vector bool char) __builtin_altivec_vsldoi_4si ((vector signed int) (a1), (vector signed int) (a2), (const int) (a3))), \\\n+    __builtin_altivec_compiletime_error (\"vec_sld\"))))))))))))\n \n #define vec_sll(a1, a2) \\\n __ch (__bin_args_eq (vector signed int, (a1), vector unsigned int, (a2)), \\"}, {"sha": "43dfa3b1e9c0ea10e3baf8854849c90bb6dc26fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "patch": "@@ -1,3 +1,8 @@\n+2004-05-10  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* g++.dg/ext/altivec-8.C: New test case.\n+\t* gcc.dg/altivec-13.c: New test case.\n+\n 2004-05-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/divcmp-1.c: New test case."}, {"sha": "298e6100559438d756d70f68ccb263abfd05d606", "filename": "gcc/testsuite/g++.dg/ext/altivec-8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-8.C?ref=16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-faltivec\" } */\n+/* Author: Ziemowit Laski  <zlaski@apple.com>  */\n+\n+/* This test case exercises intrinsic/argument combinations that,\n+   while not in the Motorola AltiVec PIM, have nevertheless crept\n+   into the AltiVec vernacular over the years.  */\n+\n+void foo() {\n+  vector bool int boolVec1 = (vector bool int) vec_splat_u32(3);\n+  vector bool short boolVec2 = (vector bool short) vec_splat_u16(3);\n+  vector bool char boolVec3 = (vector bool char) vec_splat_u8(3);\n+  boolVec1 = vec_sld( boolVec1, boolVec1, 4 );\n+  boolVec2 = vec_sld( boolVec2, boolVec2, 2 );\n+  boolVec3 = vec_sld( boolVec3, boolVec3, 1 );\n+}"}, {"sha": "298e6100559438d756d70f68ccb263abfd05d606", "filename": "gcc/testsuite/gcc.dg/altivec-13.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cfa3dc57a18490554abf3d1c02fa5e26c4c669/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-13.c?ref=16cfa3dc57a18490554abf3d1c02fa5e26c4c669", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-faltivec\" } */\n+/* Author: Ziemowit Laski  <zlaski@apple.com>  */\n+\n+/* This test case exercises intrinsic/argument combinations that,\n+   while not in the Motorola AltiVec PIM, have nevertheless crept\n+   into the AltiVec vernacular over the years.  */\n+\n+void foo() {\n+  vector bool int boolVec1 = (vector bool int) vec_splat_u32(3);\n+  vector bool short boolVec2 = (vector bool short) vec_splat_u16(3);\n+  vector bool char boolVec3 = (vector bool char) vec_splat_u8(3);\n+  boolVec1 = vec_sld( boolVec1, boolVec1, 4 );\n+  boolVec2 = vec_sld( boolVec2, boolVec2, 2 );\n+  boolVec3 = vec_sld( boolVec3, boolVec3, 1 );\n+}"}]}