{"sha": "69ddee61579a886cd70133bce5251a1e41fdfb0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkZGVlNjE1NzlhODg2Y2Q3MDEzM2JjZTUyNTFhMWU0MWZkZmIwZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-12-12T01:06:29Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-12-12T01:06:29Z"}, "message": "i386-protos.h (output_387_binary_op, [...]): Constify a char*.\n\n\t* i386-protos.h (output_387_binary_op, output_fix_trunc,\n\toutput_fp_compare): Constify a char*.\n\n\t* i386.c (ix86_split_to_parts, ix86_safe_length_prefix): Add\n\tstatic prototypes.\n\t(override_options, ix86_comp_type_attributes, print_operand,\n\toutput_387_binary_op, output_fix_trunc, output_fp_compare):\n\tConstify a char*.\n\t(ix86_sched_reorder): Mark parameter `clock_var' with\n\tATTRIBUTE_UNUSED.\n\n\t* i386.h (DEBUG_PRINT_REG): Constify a char*.\n\nFrom-SVN: r30869", "tree": {"sha": "0c8618d3e4ef36b1238130bf315f723b2ca717d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c8618d3e4ef36b1238130bf315f723b2ca717d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ddee61579a886cd70133bce5251a1e41fdfb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ddee61579a886cd70133bce5251a1e41fdfb0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ddee61579a886cd70133bce5251a1e41fdfb0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ddee61579a886cd70133bce5251a1e41fdfb0e/comments", "author": null, "committer": null, "parents": [{"sha": "486837a79c0b0c8ec9bdacacddf62ca20ff90507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486837a79c0b0c8ec9bdacacddf62ca20ff90507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486837a79c0b0c8ec9bdacacddf62ca20ff90507"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "abe29a107d3a5384e71ea6da4027f44dd561afd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69ddee61579a886cd70133bce5251a1e41fdfb0e", "patch": "@@ -1,3 +1,18 @@\n+1999-12-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* i386-protos.h (output_387_binary_op, output_fix_trunc,\n+\toutput_fp_compare): Constify a char*.\n+\n+\t* i386.c (ix86_split_to_parts, ix86_safe_length_prefix): Add\n+\tstatic prototypes.\n+\t(override_options, ix86_comp_type_attributes, print_operand,\n+\toutput_387_binary_op, output_fix_trunc, output_fp_compare):\n+\tConstify a char*.\n+\t(ix86_sched_reorder): Mark parameter `clock_var' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* i386.h (DEBUG_PRINT_REG): Constify a char*.\n+\n 1999-12-10  Ben Collins  <bcollins@debian.org>\n \n         * configure.in: Fix typo for \"-64\" in 64bit as check."}, {"sha": "3ab97a7e14e881f484cd62c61a0ffd0792929056", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=69ddee61579a886cd70133bce5251a1e41fdfb0e", "patch": "@@ -76,9 +76,9 @@ extern void print_operand_address PROTO((FILE*, rtx));\n \n extern void split_di PROTO((rtx[], int, rtx[], rtx[]));\n \n-extern char *output_387_binary_op PROTO((rtx, rtx*));\n-extern char *output_fix_trunc PROTO((rtx, rtx*));\n-extern char *output_fp_compare PROTO((rtx, rtx*, int, int));\n+extern const char *output_387_binary_op PROTO((rtx, rtx*));\n+extern const char *output_fix_trunc PROTO((rtx, rtx*));\n+extern const char *output_fp_compare PROTO((rtx, rtx*, int, int));\n \n extern void ix86_expand_move PROTO((enum machine_mode, rtx[]));\n extern void ix86_expand_binary_operator PROTO((enum rtx_code,"}, {"sha": "513b81b20464c25449102b312772da6b36aae130", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=69ddee61579a886cd70133bce5251a1e41fdfb0e", "patch": "@@ -315,6 +315,8 @@ static rtx * ix86_pent_find_pair PROTO ((rtx *, rtx *, enum attr_pent_pair,\n \t\t\t\t\t rtx));\n static void ix86_init_machine_status PROTO ((struct function *));\n static void ix86_mark_machine_status PROTO ((struct function *));\n+static void ix86_split_to_parts PROTO ((rtx, rtx *, enum machine_mode));\n+static int ix86_safe_length_prefix PROTO ((rtx));\n \n struct ix86_address\n {\n@@ -361,7 +363,7 @@ override_options ()\n \n   static struct pta\n     {\n-      char *name;\t\t/* processor name or nickname. */\n+      const char *name;\t\t/* processor name or nickname. */\n       enum processor_type processor;\n     }\n   const processor_alias_table[] = \n@@ -718,7 +720,7 @@ ix86_comp_type_attributes (type1, type2)\n      tree type2;\n {\n   /* Check for mismatch of non-default calling convention. */\n-  char *rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n+  const char *rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n \n   if (TREE_CODE (type1) != FUNCTION_TYPE)\n     return 1;\n@@ -2830,7 +2832,7 @@ print_operand (file, x, code)\n       /* No `byte ptr' prefix for call instructions.  */\n       if (ASSEMBLER_DIALECT != 0 && code != 'X' && code != 'P')\n \t{\n-\t  char * size;\n+\t  const char * size;\n \t  switch (GET_MODE_SIZE (GET_MODE (x)))\n \t    {\n \t    case 1: size = \"BYTE\"; break;\n@@ -3073,14 +3075,14 @@ split_di (operands, num, lo_half, hi_half)\n    There is no guarantee that the operands are the same mode, as they\n    might be within FLOAT or FLOAT_EXTEND expressions. */\n \n-char *\n+const char *\n output_387_binary_op (insn, operands)\n      rtx insn;\n      rtx *operands;\n {\n   static char buf[100];\n   rtx temp;\n-  char *p;\n+  const char *p;\n \n   switch (GET_CODE (operands[3]))\n     {\n@@ -3218,7 +3220,7 @@ output_387_binary_op (insn, operands)\n    are the insn operands.  The output may be [SD]Imode and the input\n    operand may be [SDX]Fmode.  */\n \n-char *\n+const char *\n output_fix_trunc (insn, operands)\n      rtx insn;\n      rtx *operands;\n@@ -3277,7 +3279,7 @@ output_fix_trunc (insn, operands)\n    should be used and 2 when fnstsw should be used.  UNORDERED_P is true\n    when fucom should be used.  */\n \n-char *\n+const char *\n output_fp_compare (insn, operands, eflags_p, unordered_p)\n      rtx insn;\n      rtx *operands;\n@@ -3339,7 +3341,7 @@ output_fp_compare (insn, operands, eflags_p, unordered_p)\n     {\n       /* Encoded here as eflags_p | intmode | unordered_p | stack_top_dies.  */\n \n-      static char * const alt[24] = \n+      static const char * const alt[24] = \n       {\n \t\"fcom%z1\\t%y1\",\n \t\"fcomp%z1\\t%y1\",\n@@ -3373,7 +3375,7 @@ output_fp_compare (insn, operands, eflags_p, unordered_p)\n       };\n \n       int mask;\n-      char *ret;\n+      const char *ret;\n \n       mask  = eflags_p << 3;\n       mask |= (GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_INT) << 2;\n@@ -5869,7 +5871,7 @@ ix86_sched_reorder (dump, sched_verbose, ready, n_ready, clock_var)\n      FILE *dump ATTRIBUTE_UNUSED;\n      int sched_verbose ATTRIBUTE_UNUSED;\n      rtx *ready;\n-     int n_ready, clock_var;\n+     int n_ready, clock_var ATTRIBUTE_UNUSED;\n {\n   rtx *e_ready = ready + n_ready - 1;\n   rtx *insnp;"}, {"sha": "5640b66ec0cf9bedb6a43e981982f451f397bdfc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ddee61579a886cd70133bce5251a1e41fdfb0e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=69ddee61579a886cd70133bce5251a1e41fdfb0e", "patch": "@@ -2371,8 +2371,8 @@ do { long l;\t\t\t\t\t\t\\\n    programs that are not linked with aux-output.o.  */\n \n #define DEBUG_PRINT_REG(X, CODE, FILE)\t\t\t\\\n-  do { static char *hi_name[] = HI_REGISTER_NAMES;\t\\\n-       static char *qi_name[] = QI_REGISTER_NAMES;\t\\\n+  do { static const char * const hi_name[] = HI_REGISTER_NAMES;\t\\\n+       static const char * const qi_name[] = QI_REGISTER_NAMES;\t\\\n        fprintf (FILE, \"%d \", REGNO (X));\t\t\\\n        if (REGNO (X) == FLAGS_REG)\t\t\t\\\n \t { fputs (\"flags\", FILE); break; }\t\t\\"}]}