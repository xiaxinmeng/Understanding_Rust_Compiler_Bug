{"sha": "8f54dd61e79842eebf678571b9987bda7502f3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1NGRkNjFlNzk4NDJlZWJmNjc4NTcxYjk5ODdiZGE3NTAyZjNhYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-28T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-28T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "3f29ecc653a318c17f4a1598d7615aac57785128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f29ecc653a318c17f4a1598d7615aac57785128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f54dd61e79842eebf678571b9987bda7502f3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f54dd61e79842eebf678571b9987bda7502f3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f54dd61e79842eebf678571b9987bda7502f3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f54dd61e79842eebf678571b9987bda7502f3aa/comments", "author": null, "committer": null, "parents": [{"sha": "0366e2b40e9ea5fc61c9a694de0c8c76a238b03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0366e2b40e9ea5fc61c9a694de0c8c76a238b03c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0366e2b40e9ea5fc61c9a694de0c8c76a238b03c"}], "stats": {"total": 373, "additions": 372, "deletions": 1}, "files": [{"sha": "5468f33730a61b01a48c670207b57c5e0978c80f", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1,3 +1,7 @@\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gennews (files): Add files for GCC 10 and GCC 11.\n+\n 2021-04-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config-list.mk: Remove rs6000-ibm-aix6.1."}, {"sha": "74eda0593995890e8d42e26cb2962f191ffebeed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1,3 +1,190 @@\n+2021-04-27  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/aix.h (SUBTARGET_DRIVER_SELF_SPECS): New.\n+\t* config/rs6000/aix64.opt (m64): New.\n+\t(m32): New.\n+\n+2021-04-27  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* config/vax/vax.c (print_operand_address, vax_address_cost_1)\n+\t(index_term_p): Handle ASHIFT too.\n+\n+2021-04-27  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* config/vax/builtins.md (jbb<ccss>i<mode>): Remove operand #3.\n+\t(sync_lock_test_and_set<mode>): Adjust accordingly.\n+\t(sync_lock_release<mode>): Likewise.\n+\n+2021-04-27  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* config/vax/vax-protos.h (adjacent_operands_p): Remove\n+\tprototype.\n+\t* config/vax/vax.c (adjacent_operands_p): Remove.\n+\n+2021-04-27  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* ifcvt.c (dead_or_predicable) [!IFCVT_MODIFY_TESTS]: Fall\n+\tthrough to the non-conditional execution case if getting the\n+\tcondition for conditional execution has failed.\n+\n+2021-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/100284\n+\t* gimple.c (gimple_could_trap_p_1): Remove VEC_COND_EXPR test.\n+\t* tree-eh.c (operation_could_trap_p): Handle VEC_COND_EXPR rather\n+\tthan asserting on it.\n+\n+2021-04-27  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_aix_precompute_tls_p): Protect\n+\twith TARGET_AIX_OS.\n+\n+2021-04-27  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/94177\n+\t* calls.c (precompute_register_parameters): Additionally test\n+\ttargetm.precompute_tls_p to pre-compute argument.\n+\t* config/rs6000/aix.h (TARGET_PRECOMPUTE_TLS_P): Define.\n+\t* config/rs6000/rs6000.c (rs6000_aix_precompute_tls_p): New.\n+\t* target.def (precompute_tls_p): New.\n+\t* doc/tm.texi.in (TARGET_PRECOMPUTE_TLS_P): Add hook documentation.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100200\n+\t* config/aarch64/aarch64.c (aarch64_print_operand): Cast -UINTVAL\n+\tback to HOST_WIDE_INT.\n+\n+2021-04-27  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/100106\n+\t* simplify-rtx.c (simplify_context::simplify_subreg): Check the\n+\tmemory alignment for the outer mode.\n+\n+2021-04-27  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* expr.c (op_by_pieces_d::get_usable_mode): New member function.\n+\t(op_by_pieces_d::run): Cange a while loop to a do-while loop.\n+\n+2021-04-27  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99977\n+\t* config/arm/arm.c (arm_split_compare_and_swap): Fix up codegen\n+\twith negative immediates: ensure we expand cbranchsi4_scratch\n+\tcorrectly and ensure we satisfy its constraints.\n+\t* config/arm/sync.md\n+\t(@atomic_compare_and_swap<CCSI:arch><NARROW:mode>_1): Don't\n+\tattempt to tie two output operands together with constraints;\n+\tcollapse two alternatives.\n+\t(@atomic_compare_and_swap<CCSI:arch><SIDI:mode>_1): Likewise.\n+\t* config/arm/thumb1.md (cbranchsi4_neg_late): New.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100200\n+\t* config/aarch64/predicates.md (aarch64_sub_immediate,\n+\taarch64_plus_immediate): Use -UINTVAL instead of -INTVAL.\n+\t* config/aarch64/aarch64.md (casesi, rotl<mode>3): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_print_operand,\n+\taarch64_split_atomic_op, aarch64_expand_subvti): Likewise.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/100239\n+\t* tree-vect-generic.c (lower_vec_perm): Don't accept constant\n+\tpermutations with all indices from the first zero element as vec_shl.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100254\n+\t* cfgcleanup.c (outgoing_edges_match): Check REG_EH_REGION on\n+\tlast1 and last2 insns rather than BB_END (bb1) and BB_END (bb2) insns.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99912\n+\t* passes.def: Add comment about new TODO_remove_unused_locals.\n+\t* tree-stdarg.c (pass_data_stdarg): Run TODO_remove_unused_locals\n+\tat start.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99912\n+\t* passes.def (pass_all_optimizations): Add pass_dse before\n+\tthe first pass_dce, move the first pass_dse before the\n+\tpass_dce following pass_pre.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95527\n+\t* generic-match-head.c: Include tm.h.\n+\t* gimple-match-head.c: Include tm.h.\n+\t* match.pd (CLZ == INTEGER_CST): Don't use\n+\t#ifdef CLZ_DEFINED_VALUE_AT_ZERO, only test CLZ_DEFINED_VALUE_AT_ZERO\n+\tif clz == CFN_CLZ.  Add missing val declaration.\n+\t(CTZ cmp CST): New simplifications.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96696\n+\t* expr.c (expand_expr_divmod): New function.\n+\t(expand_expr_real_2) <case TRUNC_DIV_EXPR>: Use it for truncations and\n+\tdivisions.  Formatting fixes.\n+\t<case MULT_EXPR>: Optimize x / y * y as x - x % y if the latter is\n+\tcheaper.\n+\n+2021-04-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/99951\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call):\n+\tIf removing a call statement LHS SSA name, release it.\n+\n+2021-04-27  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/100236\n+\t* config/arm/arm.c (THUMB2_WORK_REGS): Check PIC_OFFSET_TABLE_REGNUM\n+\tis valid before including it in the mask.\n+\n+2021-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100270\n+\t* config/aarch64/aarch64.c (aarch64_comp_type_attributes): Handle\n+\tSVE attributes.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100051\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Add\n+\tdisambiguator based on access size vs. decl size.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100278\n+\t* tree-ssa-pre.c (compute_avail): Give up when we cannot\n+\tadjust TBAA beacuse of mismatching bases.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99405\n+\t* config/i386/i386.md (*<insn><mode>3_mask, *<insn><mode>3_mask_1):\n+\tFor any_rotate define_insn_split and following splitters, use\n+\tSWI iterator instead of SWI48.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99776\n+\t* match.pd (bit_field_ref (ctor)): Relax element extract\n+\ttype compatibility checks.\n+\n+2021-04-27  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* common/config/i386/i386-common.c (processor_names):\n+\tSync processor_names with processor_type.\n+\t* config/i386/i386-options.c (processor_cost_table):\n+\tSync processor_cost_table with processor_type.\n+\n 2021-04-26  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* value-range.cc (irange::irange_set_1bit_anti_range): Add assert."}, {"sha": "5bc3f0e75f04bae2a9928f1d4cc7dc57f231ab0c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1 +1 @@\n-20210427\n+20210428"}, {"sha": "ca8382f99d38c169ba5811fb27208033f271d672", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1,3 +1,16 @@\n+2021-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92145\n+\t* class.c (classtype_has_depr_implicit_copy): Check DECL_CONTEXT\n+\tof operator=.\n+\n+2021-04-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88580\n+\t* pt.c (tsubst_initializer_list): Correctly handle the case\n+\twhere an argument inside a base initializer pack expansion is\n+\titself a pack expansion.\n+\n 2021-04-26  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100209"}, {"sha": "122dddcfb73e07d6a1d05684cecae79e656ca5f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1,3 +1,111 @@\n+2021-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92145\n+\t* g++.dg/cpp0x/depr-copy3.C: New test.\n+\n+2021-04-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88580\n+\t* g++.dg/cpp0x/variadic182.C: New test.\n+\n+2021-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/100284\n+\t* gcc.target/aarch64/sve/pr81003.c: New test.\n+\n+2021-04-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/100272\n+\t* g++.dg/ext/flexary13.C: Remove malformed directives.\n+\n+2021-04-27  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/100106\n+\t* gcc.c-torture/compile/pr100106.c: New testcase.\n+\n+2021-04-27  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99977\n+\t* gcc.target/arm/pr99977.c: New test.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/100239\n+\t* gcc.dg/pr100239.c: New test.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100254\n+\t* g++.dg/opt/pr100254.C: New test.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99912\n+\t* gcc.dg/tree-ssa/ldist-33.c: Disable PRE and LIM.\n+\t* gcc.dg/tree-ssa/pr96789.c: Adjust dump file scanned.\n+\t* gcc.dg/tree-ssa/ssa-dse-28.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dse-29.c: Likewise.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95527\n+\t* gcc.dg/tree-ssa/pr95527-2.c: New test.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96696\n+\t* gcc.target/i386/pr96696.c: New test.\n+\n+2021-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100270\n+\t* gcc.target/aarch64/sve/acle/general-c/pr100270_1.c: New test.\n+\t* gcc.target/aarch64/sve/acle/general-c/sizeless-2.c: Change\n+\texpected error message when subtracting pointers to different\n+\tvector types.  Expect warnings when mixing them elsewhere.\n+\t* gcc.target/aarch64/sve/acle/general/attributes_7.c: Remove\n+\tXFAILs.  Tweak error messages for some cases.\n+\n+2021-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/simd/ssra.c: Use +nosve\n+\t* gcc.target/aarch64/simd/usra.c: Likewise.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100051\n+\t* gcc.dg/tree-ssa/ssa-fre-92.c: New testcase.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/100272\n+\t* gcc.dg/tree-ssa/predcom-1.c: Re-enable PRE and fix\n+\tmalformed dg directive.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/100272\n+\t* g++.dg/diagnostic/ptrtomem1.C: Fix dg directives.\n+\t* g++.dg/ipa/pr45572-2.C: Likewise.\n+\t* g++.dg/template/spec26.C: Likewise.\n+\t* gcc.dg/pr20126.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20739.c: Likewise.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100278\n+\t* gcc.dg/tree-ssa/pr100278.c: New testcase.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99405\n+\t* gcc.target/i386/pr99405.c: New test.\n+\n+2021-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99776\n+\t* gcc.dg/tree-ssa/ssa-fre-91.c: New testcase.\n+\n 2021-04-26  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100209"}, {"sha": "20e873c9e61f633e6fcbda14d8115036cf327144", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f54dd61e79842eebf678571b9987bda7502f3aa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f54dd61e79842eebf678571b9987bda7502f3aa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f54dd61e79842eebf678571b9987bda7502f3aa", "patch": "@@ -1,3 +1,62 @@\n+2021-04-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100290\n+\t* include/std/ranges (join_view::_Iterator::operator++): Correct\n+\tthe return type of the lambda to avoid returning a copy of\n+\t_M_parent->_M_inner.\n+\t* testsuite/std/ranges/adaptors/join.cc (test10): New test.\n+\n+2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tRevert:\n+\t2021-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100182\n+\t* testsuite/29_atomics/atomic_float/1.cc: Add dg-xfail-run-if for\n+\tia32.\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Add dg-skip-if for\n+\tia32.\n+\n+2021-04-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address_v6::bytes_type): Adjust\n+\tformatting.\n+\t(basic_endpoint): Define _M_is_v6() to put all checks for\n+\tAF_INET6 in one place.\n+\t(basic_endpoint::resize): Simplify.\n+\t(operator==(const tcp&, const tcp&)): Add constexpr and noexcept.\n+\t(operator!=(const tcp&, const tcp&)): Likewise.\n+\t(operator==(const udp&, const udp&)): Likewise.\n+\t(operator!=(const udp&, const udp&)): Likewise.\n+\t* testsuite/experimental/net/internet/tcp.cc: New test.\n+\t* testsuite/experimental/net/internet/udp.cc: New test.\n+\n+2021-04-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100286\n+\t* include/experimental/internet (resolver_errc, resolver_category())\n+\t(make_error_code, make_error_condition): Define unconditionally,\n+\tonly make enumerators and use of gai_strerror depend on the\n+\tavailability of <netdb.h>.\n+\t(address_v4::to_string): Use correct constant for string length.\n+\t(address_v4::to_string, address_v6::to_string): Define\n+\tunconditionally, throw if unsupported.\n+\t(make_address_v4, make_address_v6): Define unconditionally.\n+\tReturn an error if unsupported.\n+\t(tcp, udp, v6_only, unicast::hops, multicast::*): Define\n+\tconditionally,\n+\t* testsuite/experimental/net/internet/socket/opt.cc: Check for\n+\t<netinet/in.h> and <netinet/tcp.h> before using types from\n+\tnamespace net::ip.\n+\n+2021-04-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100285\n+\t* include/experimental/internet (resolver_base::flags):\n+\tDefine overloaded operators as hidden friends.\n+\t* include/experimental/socket (socket_base::message_flags):\n+\tLikewise.\n+\n 2021-04-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/internet (tcp::no_delay, v6_only)"}]}