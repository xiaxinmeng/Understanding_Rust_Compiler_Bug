{"sha": "b6a8baccac8de409cd815144d493387e95bd9c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhOGJhY2NhYzhkZTQwOWNkODE1MTQ0ZDQ5MzM4N2U5NWJkOWM4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-13T17:01:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-13T17:01:30Z"}, "message": "sanitizer_deadlock_detector.h: Cherry pick upstream r224518 and r224519.\n\n\t* sanitizer_common/sanitizer_deadlock_detector.h: Cherry pick\n\tupstream r224518 and r224519.\n\t* tsan/tsan_rtl_thread.cc: Cherry pick upstream r224702 and\n\tr224834.\n\nFrom-SVN: r219545", "tree": {"sha": "9b002e56f585cf7c0a09e33bccf6247735ae68b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b002e56f585cf7c0a09e33bccf6247735ae68b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a8baccac8de409cd815144d493387e95bd9c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a8baccac8de409cd815144d493387e95bd9c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a8baccac8de409cd815144d493387e95bd9c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a8baccac8de409cd815144d493387e95bd9c8c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41197ad4993d8c6bee52dd6b9d76bdf2c5cc9058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41197ad4993d8c6bee52dd6b9d76bdf2c5cc9058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41197ad4993d8c6bee52dd6b9d76bdf2c5cc9058"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "ab22345b1131d67ce92952477478cfd57e58d2d6", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=b6a8baccac8de409cd815144d493387e95bd9c8c", "patch": "@@ -1,3 +1,10 @@\n+2015-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sanitizer_common/sanitizer_deadlock_detector.h: Cherry pick\n+\tupstream r224518 and r224519.\n+\t* tsan/tsan_rtl_thread.cc: Cherry pick upstream r224702 and\n+\tr224834.\n+\n 2014-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* sanitizer_common/sanitizer_symbolizer_libbacktrace.cc,"}, {"sha": "5c8317554ad56567fa8a58418db1ab885e084623", "filename": "libsanitizer/sanitizer_common/sanitizer_deadlock_detector.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_deadlock_detector.h?ref=b6a8baccac8de409cd815144d493387e95bd9c8c", "patch": "@@ -48,6 +48,8 @@ class DeadlockDetectorTLS {\n     if (epoch_ == current_epoch) return;\n     bv_.clear();\n     epoch_ = current_epoch;\n+    n_recursive_locks = 0;\n+    n_all_locks_ = 0;\n   }\n \n   uptr getEpoch() const { return epoch_; }\n@@ -81,7 +83,8 @@ class DeadlockDetectorTLS {\n       }\n     }\n     // Printf(\"remLock: %zx %zx\\n\", lock_id, epoch_);\n-    CHECK(bv_.clearBit(lock_id));\n+    if (!bv_.clearBit(lock_id))\n+      return;  // probably addLock happened before flush\n     if (n_all_locks_) {\n       for (sptr i = n_all_locks_ - 1; i >= 0; i--) {\n         if (all_locks_with_contexts_[i].lock == static_cast<u32>(lock_id)) {\n@@ -173,6 +176,7 @@ class DeadlockDetector {\n     recycled_nodes_.clear();\n     available_nodes_.setAll();\n     g_.clear();\n+    n_edges_ = 0;\n     return getAvailableNode(data);\n   }\n "}, {"sha": "d75445aa8bb7c2784cc253c763d4a977e711f459", "filename": "libsanitizer/tsan/tsan_rtl_thread.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2Ftsan%2Ftsan_rtl_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a8baccac8de409cd815144d493387e95bd9c8c/libsanitizer%2Ftsan%2Ftsan_rtl_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_thread.cc?ref=b6a8baccac8de409cd815144d493387e95bd9c8c", "patch": "@@ -109,12 +109,13 @@ void ThreadContext::OnStarted(void *arg) {\n     thr->dd_pt = ctx->dd->CreatePhysicalThread();\n     thr->dd_lt = ctx->dd->CreateLogicalThread(unique_id);\n   }\n+  thr->fast_state.SetHistorySize(flags()->history_size);\n+  // Commit switch to the new part of the trace.\n+  // TraceAddEvent will reset stack0/mset0 in the new part for us.\n+  TraceAddEvent(thr, thr->fast_state, EventTypeMop, 0);\n+\n   thr->fast_synch_epoch = epoch0;\n   AcquireImpl(thr, 0, &sync);\n-  thr->fast_state.SetHistorySize(flags()->history_size);\n-  const uptr trace = (epoch0 / kTracePartSize) % TraceParts();\n-  Trace *thr_trace = ThreadTrace(thr->tid);\n-  thr_trace->headers[trace].epoch0 = epoch0;\n   StatInc(thr, StatSyncAcquire);\n   sync.Reset(&thr->clock_cache);\n   DPrintf(\"#%d: ThreadStart epoch=%zu stk_addr=%zx stk_size=%zx \""}]}