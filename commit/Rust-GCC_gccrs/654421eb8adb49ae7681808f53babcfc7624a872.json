{"sha": "654421eb8adb49ae7681808f53babcfc7624a872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NDIxZWI4YWRiNDlhZTc2ODE4MDhmNTNiYWJjZmM3NjI0YTg3Mg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@watson.ibm.com", "date": "2002-01-17T07:33:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-17T07:33:29Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Do not clear SECTION_LDFLAGS and OPT_LDFLAGS.\n\n\n2002-01-16  David Edelsohn  <dje@watson.ibm.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Do not clear\n\tSECTION_LDFLAGS and OPT_LDFLAGS.  Fix ac_sectionLDflags type.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r48941", "tree": {"sha": "b95343663dc6ffdbf30c7a25015db258d928c1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b95343663dc6ffdbf30c7a25015db258d928c1ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/654421eb8adb49ae7681808f53babcfc7624a872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654421eb8adb49ae7681808f53babcfc7624a872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654421eb8adb49ae7681808f53babcfc7624a872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654421eb8adb49ae7681808f53babcfc7624a872/comments", "author": null, "committer": null, "parents": [{"sha": "c55357682bb5e8c79b4ba3e969bcf8014f58a2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55357682bb5e8c79b4ba3e969bcf8014f58a2cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c55357682bb5e8c79b4ba3e969bcf8014f58a2cc"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "54211a6f88660330f4eacbc63a9bfc410e5e7215", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=654421eb8adb49ae7681808f53babcfc7624a872", "patch": "@@ -1,3 +1,10 @@\n+2002-01-16  David Edelsohn  <dje@watson.ibm.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Do not clear\n+\tSECTION_LDFLAGS and OPT_LDFLAGS.  Fix ac_sectionLDflags type.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t\n 2002-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (c_base_headers_rename): New."}, {"sha": "21b35080989e6060e69fc82e46a82492615f436a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=654421eb8adb49ae7681808f53babcfc7624a872", "patch": "@@ -286,8 +286,8 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n \n   # Set --gc-sections.\n@@ -323,15 +323,15 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     AC_MSG_RESULT($ac_sectionLDflags)\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   AC_SUBST(SECTION_LDFLAGS)"}, {"sha": "8b4500bbc45ab2626eea8091ac56dcf63964184b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=654421eb8adb49ae7681808f53babcfc7624a872", "patch": "@@ -298,8 +298,8 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n \n   # Set --gc-sections.\n@@ -335,15 +335,15 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     AC_MSG_RESULT($ac_sectionLDflags)\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   AC_SUBST(SECTION_LDFLAGS)"}, {"sha": "4213dc068d60389207f936e25a69051d79051c81", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=654421eb8adb49ae7681808f53babcfc7624a872", "patch": "@@ -4043,8 +4043,8 @@ done\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   \n \n   # Set --gc-sections.\n@@ -4100,15 +4100,15 @@ fi\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     echo \"$ac_t\"\"$ac_sectionLDflags\" 1>&6\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   \n@@ -4854,8 +4854,8 @@ done\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   \n \n   # Set --gc-sections.\n@@ -4911,15 +4911,15 @@ fi\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     echo \"$ac_t\"\"$ac_sectionLDflags\" 1>&6\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   \n@@ -5659,8 +5659,8 @@ done\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   \n \n   # Set --gc-sections.\n@@ -5716,15 +5716,15 @@ fi\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     echo \"$ac_t\"\"$ac_sectionLDflags\" 1>&6\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   \n@@ -6786,8 +6786,8 @@ cross_compiling=$ac_cv_prog_cc_cross\n   # If we're not using GNU ld, then there's no point in even trying these\n   # tests.  Check for that first.  We should have already tested for gld\n   # by now (in libtool), but require it now just to be safe...\n-  SECTION_LDFLAGS=''\n-  OPT_LDFLAGS=''\n+  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n+  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n   \n \n   # Set --gc-sections.\n@@ -6843,15 +6843,15 @@ fi\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS='-Wl,--gc-sections'\n+      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n     fi\n     echo \"$ac_t\"\"$ac_sectionLDflags\" 1>&6\n   fi\n \n   # Set linker optimization flags.\n   if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n      test x\"$enable_debug\" = x\"no\"; then\n-    OPT_LDFLAGS='-Wl,-O1'\n+    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n   fi\n \n   "}, {"sha": "633e8326aa9f2145548969301389595b564ac913", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654421eb8adb49ae7681808f53babcfc7624a872/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=654421eb8adb49ae7681808f53babcfc7624a872", "patch": "@@ -681,7 +681,8 @@ install-data-local:\n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled\n # developer tries to create them via make in the include build\n-# directory.\n+# directory. (This is more of an example of how this kind of rule can\n+# be made.)\n .PRECIOUS: $(std_headers_rename) $(c_base_headers_rename)\n $(std_headers_rename): ; @:\n $(c_base_headers_rename): ; @:"}]}