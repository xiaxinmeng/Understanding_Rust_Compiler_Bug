{"sha": "b59be1adbaea022f19dc7c30d9bf5089e80795d9", "node_id": "C_kwDOANBUbNoAKGI1OWJlMWFkYmFlYTAyMmYxOWRjN2MzMGQ5YmY1MDg5ZTgwNzk1ZDk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:02Z"}, "message": "libstdc++: Simplify std::basic_regex construction and assignment\n\nIntroduce a new _M_compile function which does the common work needed by\nall constructors and assignment. Call that directly to avoid multiple\nlevels of constructor delegation or calls to basic_regex::assign\noverloads.\n\nFor assignment, there is no need to construct a std::basic_string if we\nalready have a contiguous sequence of the correct character type, and no\nneed to construct a temporary basic_regex when assigning from an\nexisting basic_regex.\n\nAlso define the copy and move assignment operators as defaulted, which\ndoes the right thing without constructing a temporary and swapping it.\nCopying or moving the shared_ptr member cannot fail, so they can be\nnoexcept. The assign(const basic_regex&) and assign(basic_regex&&)\nmember can then be defined in terms of copy or move assignment.\n\nThe new _M_compile function takes pointer arguments, so the caller has\nto convert arbitrary iterator ranges into a contiguous sequence of\ncharacters. With that simplification, the __compile_nfa helpers are not\nneeded and can be removed.\n\nThis also fixes a bug where construction from a contiguous sequence with\nthe wrong character type would fail to compile, rather than converting\nthe elements to the regex character type.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h (__detail::__is_contiguous_iter): Move\n\there from <bits/regex_compiler.h>.\n\t(basic_regex::_M_compile): New function to compile an NFA from\n\ta regular expression string.\n\t(basic_regex::basic_regex): Use _M_compile instead of delegating\n\tto other constructors.\n\t(basic_regex::operator=(const basic_regex&)): Define as\n\tdefaulted.\n\t(basic_regex::operator=(initializer_list<C>)): Use _M_compile.\n\t(basic_regex::assign(const basic_regex&)): Use copy assignment.\n\t(basic_regex::assign(basic_regex&&)): Use move assignment.\n\t(basic_regex::assign(const C*, flag_type)): Use _M_compile\n\tinstead of constructing a temporary string.\n\t(basic_regex::assign(const C*, size_t, flag_type)): Likewise.\n\t(basic_regex::assign(const basic_string<C,T,A>&, flag_type)):\n\tUse _M_compile instead of constructing a temporary basic_regex.\n\t(basic_regex::assign(InputIter, InputIter, flag_type)): Avoid\n\tconstructing a temporary string for contiguous iterators of the\n\tright value type.\n\t* include/bits/regex_compiler.h (__is_contiguous_iter): Move to\n\t<bits/regex.h>.\n\t(__enable_if_contiguous_iter, __disable_if_contiguous_iter)\n\t(__compile_nfa): Remove.\n\t* testsuite/28_regex/basic_regex/assign/exception_safety.cc: New\n\ttest.\n\t* testsuite/28_regex/basic_regex/ctors/char/other.cc: New test.", "tree": {"sha": "afce6e42eaf0faad963681aa66d24177db75c32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afce6e42eaf0faad963681aa66d24177db75c32c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59be1adbaea022f19dc7c30d9bf5089e80795d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59be1adbaea022f19dc7c30d9bf5089e80795d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59be1adbaea022f19dc7c30d9bf5089e80795d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59be1adbaea022f19dc7c30d9bf5089e80795d9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34fa88becb6367229074f25ef9e2de6f4594b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34fa88becb6367229074f25ef9e2de6f4594b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34fa88becb6367229074f25ef9e2de6f4594b58"}], "stats": {"total": 199, "additions": 117, "deletions": 82}, "files": [{"sha": "baf8ff1a9cff697b09616dc64cd3a74ad97f4875", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 60, "deletions": 41, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=b59be1adbaea022f19dc7c30d9bf5089e80795d9", "patch": "@@ -57,6 +57,16 @@ namespace __detail\n \n   template<typename, typename, typename, bool>\n     class _Executor;\n+\n+  template<typename _Tp>\n+    struct __is_contiguous_iter : false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_contiguous_iter<_Tp*> : true_type { };\n+\n+  template<typename _Tp, typename _Cont>\n+    struct __is_contiguous_iter<__gnu_cxx::__normal_iterator<_Tp*, _Cont>>\n+    : true_type { };\n }\n \n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n@@ -438,8 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       explicit\n       basic_regex(const _Ch_type* __p, flag_type __f = ECMAScript)\n-      : basic_regex(__p, __p + char_traits<_Ch_type>::length(__p), __f)\n-      { }\n+      { _M_compile(__p, __p + _Rx_traits::length(__p), __f); }\n \n       /**\n        * @brief Constructs a basic regular expression from the sequence\n@@ -455,8 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_regex(const _Ch_type* __p, std::size_t __len,\n \t\t  flag_type __f = ECMAScript)\n-      : basic_regex(__p, __p + __len, __f)\n-      { }\n+      { _M_compile(__p, __p + __len, __f); }\n \n       /**\n        * @brief Copy-constructs a basic regular expression.\n@@ -486,8 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tbasic_regex(const std::basic_string<_Ch_type, _Ch_traits,\n \t\t\t\t\t    _Ch_alloc>& __s,\n \t\t    flag_type __f = ECMAScript)\n-\t: basic_regex(__s.data(), __s.data() + __s.size(), __f)\n-\t{ }\n+\t{ _M_compile(__s.data(), __s.data() + __s.size(), __f); }\n \n       /**\n        * @brief Constructs a basic regular expression from the range\n@@ -505,8 +512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       template<typename _FwdIter>\n \tbasic_regex(_FwdIter __first, _FwdIter __last,\n \t\t    flag_type __f = ECMAScript)\n-\t: basic_regex(std::move(__first), std::move(__last), locale_type(), __f)\n-\t{ }\n+\t{ this->assign(__first, __last, __f); }\n \n       /**\n        * @brief Constructs a basic regular expression from an initializer list.\n@@ -517,8 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @throws regex_error if @p __l is not a valid regular expression.\n        */\n       basic_regex(initializer_list<_Ch_type> __l, flag_type __f = ECMAScript)\n-      : basic_regex(__l.begin(), __l.end(), __f)\n-      { }\n+      { _M_compile(__l.begin(), __l.end(), __f); }\n \n       /**\n        * @brief Destroys a basic regular expression.\n@@ -530,15 +535,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @brief Assigns one regular expression to another.\n        */\n       basic_regex&\n-      operator=(const basic_regex& __rhs)\n-      { return this->assign(__rhs); }\n+      operator=(const basic_regex&) = default;\n \n       /**\n        * @brief Move-assigns one regular expression to another.\n        */\n       basic_regex&\n-      operator=(basic_regex&& __rhs) noexcept\n-      { return this->assign(std::move(__rhs)); }\n+      operator=(basic_regex&&) = default;\n \n       /**\n        * @brief Replaces a regular expression with a new one constructed from\n@@ -561,7 +564,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_regex&\n       operator=(initializer_list<_Ch_type> __l)\n-      { return this->assign(__l.begin(), __l.end()); }\n+      { return this->assign(__l); }\n \n       /**\n        * @brief Replaces a regular expression with a new one constructed from\n@@ -576,30 +579,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       // [7.8.3] assign\n       /**\n-       * @brief the real assignment operator.\n+       * @brief Assigns one regular expression to another.\n        *\n        * @param __rhs Another regular expression object.\n        */\n       basic_regex&\n-      assign(const basic_regex& __rhs)\n-      {\n-\tbasic_regex __tmp(__rhs);\n-\tthis->swap(__tmp);\n-\treturn *this;\n-      }\n+      assign(const basic_regex& __rhs) noexcept\n+      { return *this = __rhs; }\n \n       /**\n-       * @brief The move-assignment operator.\n+       * @brief Move-assigns one regular expression to another.\n        *\n        * @param __rhs Another regular expression object.\n        */\n       basic_regex&\n       assign(basic_regex&& __rhs) noexcept\n-      {\n-\tbasic_regex __tmp(std::move(__rhs));\n-\tthis->swap(__tmp);\n-\treturn *this;\n-      }\n+      { return *this = std::move(__rhs); }\n \n       /**\n        * @brief Assigns a new regular expression to a regex object from a\n@@ -616,7 +611,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_regex&\n       assign(const _Ch_type* __p, flag_type __flags = ECMAScript)\n-      { return this->assign(string_type(__p), __flags); }\n+      {\n+\t_M_compile(__p, __p + _Rx_traits::length(__p), __flags);\n+\treturn *this;\n+      }\n \n       /**\n        * @brief Assigns a new regular expression to a regex object from a\n@@ -635,7 +633,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // 3296. Inconsistent default argument for basic_regex<>::assign\n       basic_regex&\n       assign(const _Ch_type* __p, size_t __len, flag_type __flags = ECMAScript)\n-      { return this->assign(string_type(__p, __len), __flags); }\n+      {\n+\t_M_compile(__p, __p + __len, __flags);\n+\treturn *this;\n+      }\n \n       /**\n        * @brief Assigns a new regular expression to a regex object from a\n@@ -653,8 +654,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tassign(const basic_string<_Ch_type, _Ch_traits, _Alloc>& __s,\n \t       flag_type __flags = ECMAScript)\n \t{\n-\t  return this->assign(basic_regex(__s.data(), __s.data() + __s.size(),\n-\t\t\t\t\t  _M_loc, __flags));\n+\t  _M_compile(__s.data(), __s.data() + __s.size(), __flags);\n+\t  return *this;\n \t}\n \n       /**\n@@ -674,7 +675,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tbasic_regex&\n \tassign(_InputIterator __first, _InputIterator __last,\n \t       flag_type __flags = ECMAScript)\n-\t{ return this->assign(string_type(__first, __last), __flags); }\n+\t{\n+#if __cplusplus >= 201703L\n+\t  using _ValT = typename iterator_traits<_InputIterator>::value_type;\n+\t  if constexpr (__detail::__is_contiguous_iter<_InputIterator>::value\n+\t\t\t&& is_same_v<_ValT, value_type>)\n+\t    {\n+\t      const auto __len = __last - __first;\n+\t      const _Ch_type* __p = std::__to_address(__first);\n+\t      _M_compile(__p, __p + __len, __flags);\n+\t    }\n+\t  else\n+#endif\n+\t  this->assign(string_type(__first, __last), __flags);\n+\t  return *this;\n+\t}\n \n       /**\n        * @brief Assigns a new regular expression to a regex object.\n@@ -689,7 +704,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_regex&\n       assign(initializer_list<_Ch_type> __l, flag_type __flags = ECMAScript)\n-      { return this->assign(__l.begin(), __l.end(), __flags); }\n+      {\n+\t_M_compile(__l.begin(), __l.end(), __flags);\n+\treturn *this;\n+      }\n \n       // [7.8.4] const operations\n       /**\n@@ -757,13 +775,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     private:\n       typedef std::shared_ptr<const __detail::_NFA<_Rx_traits>> _AutomatonPtr;\n \n-      template<typename _FwdIter>\n-\tbasic_regex(_FwdIter __first, _FwdIter __last, locale_type __loc,\n-\t\t    flag_type __f)\n-\t: _M_flags(__f), _M_loc(std::move(__loc)),\n-\t_M_automaton(__detail::__compile_nfa<_Rx_traits>(\n-\t  std::move(__first), std::move(__last), _M_loc, _M_flags))\n-\t{ }\n+      void\n+      _M_compile(const _Ch_type* __first, const _Ch_type* __last,\n+\t\t flag_type __f)\n+      {\n+\t__detail::_Compiler<_Rx_traits> __c(__first, __last, _M_loc, __f);\n+\t_M_automaton = __c._M_get_nfa();\n+\t_M_flags = __f;\n+      }\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>"}, {"sha": "898607d81c617b88a3e8b45767f373ad15457a2d", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=b59be1adbaea022f19dc7c30d9bf5089e80795d9", "patch": "@@ -152,47 +152,6 @@ namespace __detail\n       const _CtypeT&      _M_ctype;\n     };\n \n-  template<typename _Tp>\n-    struct __is_contiguous_iter : is_pointer<_Tp>::type { };\n-\n-  template<typename _Tp, typename _Cont>\n-    struct\n-    __is_contiguous_iter<__gnu_cxx::__normal_iterator<_Tp*, _Cont>>\n-    : true_type { };\n-\n-  template<typename _Iter, typename _TraitsT>\n-    using __enable_if_contiguous_iter\n-      = __enable_if_t< __is_contiguous_iter<_Iter>::value,\n-                       std::shared_ptr<const _NFA<_TraitsT>> >;\n-\n-  template<typename _Iter, typename _TraitsT>\n-    using __disable_if_contiguous_iter\n-      = __enable_if_t< !__is_contiguous_iter<_Iter>::value,\n-                       std::shared_ptr<const _NFA<_TraitsT>> >;\n-\n-  template<typename _TraitsT, typename _FwdIter>\n-    inline __enable_if_contiguous_iter<_FwdIter, _TraitsT>\n-    __compile_nfa(_FwdIter __first, _FwdIter __last,\n-\t\t  const typename _TraitsT::locale_type& __loc,\n-\t\t  regex_constants::syntax_option_type __flags)\n-    {\n-      size_t __len = __last - __first;\n-      const auto* __cfirst = __len ? std::__addressof(*__first) : nullptr;\n-      using _Cmplr = _Compiler<_TraitsT>;\n-      return _Cmplr(__cfirst, __cfirst + __len, __loc, __flags)._M_get_nfa();\n-    }\n-\n-  template<typename _TraitsT, typename _FwdIter>\n-    inline __disable_if_contiguous_iter<_FwdIter, _TraitsT>\n-    __compile_nfa(_FwdIter __first, _FwdIter __last,\n-\t\t  const typename _TraitsT::locale_type& __loc,\n-\t\t  regex_constants::syntax_option_type __flags)\n-    {\n-      const basic_string<typename _TraitsT::char_type> __str(__first, __last);\n-      return __compile_nfa<_TraitsT>(__str.data(), __str.data() + __str.size(),\n-\t\t\t\t     __loc, __flags);\n-    }\n-\n   // [28.13.14]\n   template<typename _TraitsT, bool __icase, bool __collate>\n     class _RegexTranslatorBase"}, {"sha": "462eebcf2cd17a192c93ce5c6fc6b121fc26093b", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/exception_safety.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fexception_safety.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fexception_safety.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fexception_safety.cc?ref=b59be1adbaea022f19dc7c30d9bf5089e80795d9", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run { target c++11 } }\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  const auto f = std::regex::ECMAScript|std::regex::icase;\n+  std::regex re(\"abc\", f);\n+  try\n+  {\n+    re.assign(\"[\", std::regex::extended);\n+    VERIFY( false );\n+  }\n+  catch (const std::regex_error&)\n+  {\n+    // [re.regex.assign] \"If an exception is thrown, *this is unchanged.\"\n+    VERIFY( re.flags() == f );\n+    VERIFY( std::regex_match(\"abc\", re) );\n+  }\n+}"}, {"sha": "f9b68a72f0a89515d44d021569a02f9830f8ead5", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/char/other.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fchar%2Fother.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59be1adbaea022f19dc7c30d9bf5089e80795d9/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fchar%2Fother.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fchar%2Fother.cc?ref=b59be1adbaea022f19dc7c30d9bf5089e80795d9", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do run { target c++11 } }\n+#include <regex>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  signed char s[] = { 'a', '.' };\n+  std::regex re(s, s+2); // This used to fail up to GCC 11.2\n+  // VERIFY( regex_match(\"an\", re) );\n+\n+  std::wstring str = L\"xx\";\n+  str[0] = '1';\n+  str[1] = '2';\n+  re.assign(str.begin(), str.end());\n+  VERIFY( regex_match(\"12\", re) );\n+}\n+\n+void\n+test02()\n+{\n+  int i[] = { 'a', '.', '[', 'x', 'y', 'z', ']' };\n+  __gnu_test::forward_container<int> fwd(i);\n+  std::regex re(fwd.begin(), fwd.end());\n+  VERIFY( regex_match(\"any\", re) );\n+\n+  __gnu_test::input_container<int> input(i);\n+  re.assign(input.begin(), input.end(), std::regex::icase);\n+  VERIFY( regex_match(\"ANY\", re) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}