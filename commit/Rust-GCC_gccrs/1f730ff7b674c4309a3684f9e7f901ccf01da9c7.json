{"sha": "1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3MzBmZjdiNjc0YzQzMDlhMzY4NGY5ZTdmOTAxY2NmMDFkYTljNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-13T01:28:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-13T01:28:18Z"}, "message": "except.c (choose_personality_routine): Export.\n\ngcc/cp:\n\t* except.c (choose_personality_routine): Export.  Add\n\texplanatory comment.  Take an enum languages, not a boolean.\n\t(initialize_handler_parm): Adjust to match.\n\t* cp-tree.h: Prototype choose_personality_routine.\n\t* lex.c (handle_pragma_java_exceptions): New function.\n\t(init_cp_pragma): Register #pragma GCC java_exceptions.\n\ngcc:\n\t* extend.texi: Document #pragma GCC java_exceptions.\n\nlibjava:\n\t* Makefile.am (libgcj_la_OBJECTS): Remove libsupc++convenience.la.\n\t* Makefile.in: Regenerate (by hand).\n\t* include/jvm.h: Add #pragma GCC java_exceptions at top of file.\n\t* doc/cni.sgml: Document #pragma GCC java_exceptions.\n\nFrom-SVN: r42027", "tree": {"sha": "49246e78a7ee8c4a59b8982faf4c2837e13775cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49246e78a7ee8c4a59b8982faf4c2837e13775cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/comments", "author": null, "committer": null, "parents": [{"sha": "c9ec8f321f955dd9750f73d6957afbb0bac842e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ec8f321f955dd9750f73d6957afbb0bac842e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ec8f321f955dd9750f73d6957afbb0bac842e5"}], "stats": {"total": 164, "additions": 142, "deletions": 22}, "files": [{"sha": "3f91ca1eb979464438d38ec2b2663341120850d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -1,3 +1,7 @@\n+2001-05-12  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* extend.texi: Document #pragma GCC java_exceptions.\n+\n 2001-05-12  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* c-parse.in (bison parser, init_reswords): Remove uses of"}, {"sha": "67f50d053401cee569a3915e71d714257f1c47e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -1,3 +1,12 @@\n+2001-05-12  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* except.c (choose_personality_routine): Export.  Add\n+\texplanatory comment.  Take an enum languages, not a boolean.\n+\t(initialize_handler_parm): Adjust to match.\n+\t* cp-tree.h: Prototype choose_personality_routine.\n+\t* lex.c (handle_pragma_java_exceptions): New function.\n+\t(init_cp_pragma): Register #pragma GCC java_exceptions.\n+\n 2001-05-12  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* method.c (build_mangled_C99_name): Remove unused prototype."}, {"sha": "17350425d96d8c083ed6ab3237a749b9096766ca", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -4018,6 +4018,7 @@ extern tree build_throw\t\t\t\tPARAMS ((tree));\n extern void mark_all_runtime_matches            PARAMS ((void));\n extern int nothrow_libfn_p\t\t\tPARAMS ((tree));\n extern void check_handlers\t\t\tPARAMS ((tree));\n+extern void choose_personality_routine\t\tPARAMS ((enum languages));\n \n /* in expr.c */\n extern void init_cplus_expand\t\t\tPARAMS ((void));"}, {"sha": "e4f04e8dde83610077444624fea49286ab723a2f", "filename": "gcc/cp/except.c", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -43,7 +43,6 @@ static int dtor_nothrow PARAMS ((tree));\n static tree do_end_catch PARAMS ((tree));\n static void push_eh_cleanup PARAMS ((tree));\n static bool decl_is_java_type PARAMS ((tree decl, int err));\n-static void choose_personality_routine PARAMS ((bool));\n static void initialize_handler_parm PARAMS ((tree, tree));\n static tree do_allocate_exception PARAMS ((tree));\n static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n@@ -259,9 +258,15 @@ decl_is_java_type (decl, err)\n   return r;\n }\n \n-static void\n-choose_personality_routine (is_java)\n-     bool is_java;\n+/* Select the personality routine to be used for exception handling,\n+   or issue an error if we need two different ones in the same\n+   translation unit.\n+   ??? At present eh_personality_libfunc is set to\n+   __gxx_personality_(sj|v)0 in init_exception_processing - should it\n+   be done here instead?  */\n+void\n+choose_personality_routine (lang)\n+     enum languages lang;\n {\n   static enum {\n     chose_none,\n@@ -272,28 +277,44 @@ choose_personality_routine (is_java)\n \n   switch (state)\n     {\n-    case chose_none:\n-      /* We defaulted to C++ in init_exception_processing.\n-\t Reconfigure for Java if we changed our minds.  */\n-      if (is_java)\n-\teh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t\t\t\t   ? \"__gcj_personality_sj0\"\n-\t\t\t\t\t\t   : \"__gcj_personality_v0\");\n-      state = (is_java ? chose_java : chose_cpp);\n-      break;\n+    case gave_error:\n+      return;\n \n     case chose_cpp:\n+      if (lang != lang_cplusplus)\n+\tgoto give_error;\n+      return;\n+\n     case chose_java:\n-      if (state != (is_java ? chose_java : chose_cpp))\n-\t{\n-\t  error (\"mixing C++ and Java catches in a single translation unit\");\n-\t  state = gave_error;\n-\t}\n+      if (lang != lang_java)\n+\tgoto give_error;\n+      return;\n+\n+    case chose_none:\n+      ; /* proceed to language selection */\n+    }\n+\n+  switch (lang)\n+    {\n+    case lang_cplusplus:\n+      state = chose_cpp;\n       break;\n \n-    case gave_error:\n+    case lang_java:\n+      state = chose_java;\n+      eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t\t\t ? \"__gcj_personality_sj0\"\n+\t\t\t\t\t\t : \"__gcj_personality_v0\");\n       break;\n+\n+    default:\n+      abort ();\n     }\n+  return;\n+\n+ give_error:\n+  error (\"mixing C++ and Java catches in a single translation unit\");\n+  state = gave_error;\n }\n \n /* Initialize the catch parameter DECL.  */\n@@ -318,7 +339,8 @@ initialize_handler_parm (decl, exp)\n       && TREE_CODE (init_type) != REFERENCE_TYPE)\n     init_type = build_reference_type (init_type);\n \n-  choose_personality_routine (decl_is_java_type (init_type, 0));\n+  choose_personality_routine (decl_is_java_type (init_type, 0)\n+\t\t\t      ? lang_java : lang_cplusplus);\n \n   /* Since pointers are passed by value, initialize a reference to\n      pointer catch parm with the address of the temporary.  */"}, {"sha": "ac4c8547556af970276f1336c812cd0079a4c1a5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -61,6 +61,7 @@ static void handle_pragma_vtable PARAMS ((cpp_reader *));\n static void handle_pragma_unit PARAMS ((cpp_reader *));\n static void handle_pragma_interface PARAMS ((cpp_reader *));\n static void handle_pragma_implementation PARAMS ((cpp_reader *));\n+static void handle_pragma_java_exceptions PARAMS ((cpp_reader *));\n static void cxx_init PARAMS ((void));\n static void cxx_finish PARAMS ((void));\n static void cxx_init_options PARAMS ((void));\n@@ -687,6 +688,8 @@ init_cp_pragma ()\n   cpp_register_pragma (parse_in, \"GCC\", \"interface\", handle_pragma_interface);\n   cpp_register_pragma (parse_in, \"GCC\", \"implementation\",\n \t\t       handle_pragma_implementation);\n+  cpp_register_pragma (parse_in, \"GCC\", \"java_exceptions\",\n+\t\t       handle_pragma_java_exceptions);\n }\n \n const char *\n@@ -1181,6 +1184,18 @@ handle_pragma_implementation (dfile)\n     }\n }\n \n+/* Indicate that this file uses Java-personality exception handling.  */\n+static void\n+handle_pragma_java_exceptions (dfile)\n+     cpp_reader *dfile ATTRIBUTE_UNUSED;\n+{\n+  tree x;\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of #pragma GCC java_exceptions\");\n+\n+  choose_personality_routine (lang_java);\n+}\n+\n void\n do_pending_lang_change ()\n {"}, {"sha": "6b08843bfe940c11c1dd67e7acdeac13e42d70f4", "filename": "gcc/extend.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -3811,6 +3811,7 @@ Predefined Macros,cpp.info,The C Preprocessor}).\n * Bound member functions:: You can extract a function pointer to the\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n * C++ Attributes::      Variable, function, and type attributes for C++ only.\n+* Java Exceptions::     Tweaking exception handling to work with Java.\n * Deprecated Features:: Things might disappear from g++.\n * Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n@@ -4380,6 +4381,41 @@ interface table mechanism, instead of regular virtual table dispatch.\n \n @end table\n \n+@node Java Exceptions\n+@section Java Exceptions\n+\n+The Java language uses a slightly different exception handling model\n+from C++.  Normally, GNU C++ will automatically detect when you are\n+writing C++ code that uses Java exceptions, and handle them\n+appropriately.  However, if C++ code only needs to execute destructors\n+when Java exceptions are thrown through it, GCC will guess incorrectly.\n+Sample problematic code:\n+\n+@example\n+  struct S @{ ~S(); @};\n+  extern void bar();    // is implemented in Java and may throw exceptions\n+  void foo()\n+  @{\n+    S s;\n+    bar();\n+  @}\n+@end example\n+\n+@noindent\n+The usual effect of an incorrect guess is a link failure, complaining of\n+a missing routine called @samp{__gxx_personality_v0}.\n+\n+You can inform the compiler that Java exceptions are to be used in a\n+translation unit, irrespective of what it might think, by writing\n+@samp{@w{#pragma GCC java_exceptions}} at the head of the file.  This\n+@samp{#pragma} must appear before any functions that throw or catch\n+exceptions, or run destructors when exceptions are thrown through them.\n+\n+You cannot mix Java and C++ exceptions in the same translation unit.  It\n+is believed to be safe to throw a C++ exception from one file through\n+another file compiled for the for the Java exception model, or vice\n+versa, but there may be bugs in this area.\n+\n @node Deprecated Features\n @section Deprecated Features\n "}, {"sha": "56784e0dbe31d2ec80bb597e20cc951c8b684fd0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -1,3 +1,10 @@\n+2001-05-12  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* Makefile.am (libgcj_la_OBJECTS): Remove libsupc++convenience.la.\n+\t* Makefile.in: Regenerate (by hand).\n+\t* include/jvm.h: Add #pragma GCC java_exceptions at top of file.\n+\t* doc/cni.sgml: Document #pragma GCC java_exceptions.\n+\n 2001-05-11  Richard Henderson  <rth@redhat.com>\n \n \t* configure.in (ia64-*): Don't set SYSDEP_SOURCES."}, {"sha": "3760b32c1020c3ddbf523df133a40d84c2dfd248", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -260,7 +260,6 @@ libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)\n \t@echo $(libgcj_la_OBJECTS) > libgcj.objectlist;\n \t@echo $(libgcj_la_LIBADD) >> libgcj.objectlist;\n \t$(libgcj_la_LINK) -objectlist libgcj.objectlist \\\n-\t../libstdc++-v3/libsupc++/libsupc++convenience.la \\\n \t../libffi/libfficonvenience.la \\\n \t-rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n "}, {"sha": "2002567e72f782bc5b4225dcb4a89639811afd6b", "filename": "libjava/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -2466,7 +2466,6 @@ libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)\n \t@echo $(libgcj_la_OBJECTS) > libgcj.objectlist;\n \t@echo $(libgcj_la_LIBADD) >> libgcj.objectlist;\n \t$(libgcj_la_LINK) -objectlist libgcj.objectlist \\\n-\t../libstdc++-v3/libsupc++/libsupc++convenience.la \\\n \t../libffi/libfficonvenience.la \\\n \t-rpath $(toolexeclibdir) $(libgcj_la_LDFLAGS) $(LIBS)\n "}, {"sha": "495e3e9c5a5f4d813e26569ace9d41e7093a9507", "filename": "libjava/doc/cni.sgml", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2Fdoc%2Fcni.sgml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2Fdoc%2Fcni.sgml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdoc%2Fcni.sgml?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -779,6 +779,31 @@ if (i >= count)\n    throw new java::lang::IndexOutOfBoundsException();\n </programlisting>\n </para>\n+<para>\n+Normally, GNU C++ will automatically detect when you are writing C++\n+code that uses Java exceptions, and handle them appropriately.\n+However, if C++ code only needs to execute destructors when Java\n+exceptions are thrown through it, GCC will guess incorrectly.  Sample\n+problematic code:\n+<programlisting>\n+  struct S { ~S(); };\n+  extern void bar();    // is implemented in Java and may throw exceptions\n+  void foo()\n+  {\n+    S s;\n+    bar();\n+  }\n+</programlisting>\n+The usual effect of an incorrect guess is a link failure, complaining of\n+a missing routine called <literal>__gxx_personality_v0</literal>.\n+</para>\n+<para>\n+You can inform the compiler that Java exceptions are to be used in a\n+translation unit, irrespective of what it might think, by writing\n+<literal>#pragma GCC java_exceptions</literal> at the head of the\n+file.  This <literal>#pragma</literal> must appear before any\n+functions that throw or catch exceptions, or run destructors when\n+exceptions are thrown through them.</para>\n </sect1>\n \n <sect1><title>Synchronization</title>"}, {"sha": "1e80fbc321837effb90f065003ac720347c1568e", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f730ff7b674c4309a3684f9e7f901ccf01da9c7/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "patch": "@@ -11,6 +11,9 @@ details.  */\n #ifndef __JAVA_JVM_H__\n #define __JAVA_JVM_H__\n \n+// Force C++ compiler to use Java-style exceptions.\n+#pragma GCC java_exceptions\n+\n #include <gcj/javaprims.h>\n \n #include <java-assert.h>"}]}