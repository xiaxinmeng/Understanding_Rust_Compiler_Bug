{"sha": "bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4N2MxYzg4ZGUyNjZjMGNiZmRmZjBhYzEzZTFkODhkNTQxNTFmNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-12T09:32:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-12T09:32:43Z"}, "message": "gcc.texi: Merge in contents of README.TRAD and TESTS.FLUNK.\n\n\t* gcc.texi: Merge in contents of README.TRAD and TESTS.FLUNK.\n\t* README.TRAD, TESTS.FLUNK: Remove.\n\nFrom-SVN: r36846", "tree": {"sha": "84108d58d6499a1658524b063b2ffe8589db4440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84108d58d6499a1658524b063b2ffe8589db4440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa8f75dc90217d4682fc22454b064424b8c9497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa8f75dc90217d4682fc22454b064424b8c9497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa8f75dc90217d4682fc22454b064424b8c9497"}], "stats": {"total": 141, "additions": 45, "deletions": 96}, "files": [{"sha": "b2c4b90e70465a632d09f762b763141185007d7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "patch": "@@ -1,3 +1,8 @@\n+2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.texi: Merge in contents of README.TRAD and TESTS.FLUNK.\n+\t* README.TRAD, TESTS.FLUNK: Remove.\n+\n 2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (decl_attributes): Don't allow strftime formats with"}, {"sha": "07ccd16437b138cd8689ccff0daa7ad8b0cad380", "filename": "gcc/README.TRAD", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa8f75dc90217d4682fc22454b064424b8c9497/gcc%2FREADME.TRAD", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa8f75dc90217d4682fc22454b064424b8c9497/gcc%2FREADME.TRAD", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.TRAD?ref=9fa8f75dc90217d4682fc22454b064424b8c9497", "patch": "@@ -1,55 +0,0 @@\n-This is a partial list of how `gcc -traditional' disagrees with\n-traditional C compilers (perhaps only some of them).  Most of these\n-differences are not bugs.\n-\n----------------------------------------------------------------------------\n-K&R-1 (2.4.3) says:\n-\n-\t\"If the character following a backslash is not one of those\n-\tspecified {in the table above}, the backslash is ignored.\"\n-\n-Up until recently, `gcc -traditional' complained about \\x \\a and \\v\n-appearing in a character or string literal.  I believe however that\n-this non-feature has been eliminated (recently).\n-\n----------------------------------------------------------------------------\n-When in -traditional mode, gcc allows the following erroneous pair of\n-declarations to appear together in a given scope:\n-\n-\ttypedef int foo;\n-\ttypedef foo foo;\n-\n----------------------------------------------------------------------------\n-K&R-1 (8.5) says:\n-\n-\t\"No field may be wider than a word.\"\n-\n-Gcc however allows:\n-\n-\tstruct S { int i:33; };\n-\n----------------------------------------------------------------------------\n-In K&R-1 there is no restriction against comments crossing include file\n-boundaries.  Gcc however doesn't allow this, even when in -traditional mode.\n-\n----------------------------------------------------------------------------\n-Regarding the length of identifiers, K&R-1 (2.2) says:\n-\n-\t\"No more than the first eight characters are significant,\n-\talthough more may be used.\"\n-\n-Gcc treats all characters of identifiers as significant, even when in\n--traditional mode.\n-\n----------------------------------------------------------------------------\n-K&R-1 (2.2) says:\n-\n-\t\"An identifier is a sequence of letters and digits; the first\n-\tcharacter must be a letter.  The underscore _ counts as a letter.\"\n-\n-Gcc also allows dollar signs in identifiers.  (This may also be an issue\n-for the -pedantic option.)\n-\n----------------------------------------------------------------------------\n-\n-"}, {"sha": "04641e3c8fb84e1df0033b1d9727544baee8992c", "filename": "gcc/TESTS.FLUNK", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa8f75dc90217d4682fc22454b064424b8c9497/gcc%2FTESTS.FLUNK", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa8f75dc90217d4682fc22454b064424b8c9497/gcc%2FTESTS.FLUNK", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FTESTS.FLUNK?ref=9fa8f75dc90217d4682fc22454b064424b8c9497", "patch": "@@ -1,39 +0,0 @@\n-This is a collection of things that test suites have\n-said were \"wrong\" with GCC--but that I don't agree with.\n-\n-First, test suites sometimes test for compatibility with\n-traditional C.  GCC with -traditional is not completely\n-compatible with traditional C, and in some ways I think it\n-should not be.\n-\n-* K&R C allowed \\x to appear in a string literal (or character\n-literal?)  even in cases where it is *not* followed by a sequence of\n-hex digits.  I'm not convinced this is desirable.\n-\n-* K&R compilers allow comments to cross over an inclusion boundary (i.e.\n-started in an include file and ended in the including file).\n-I think this would be quite ugly and can't imagine it could\n-be needed.\n-\n-Sometimes tests disagree with GCC's interpretation of the ANSI standard.\n-\n-* One test claims that this function should return 1.\n-\n-    enum {A, B} foo;\n-\n-    func (enum {B, A} arg)\n-    {\n-      return B;\n-    }\n-\n-I think it should return 0, because the definition of B that\n-applies is the one in func.\n-\n-* Some tests report failure when the compiler does not produce\n-an error message for a certain program.\n-\n-ANSI C requires a \"diagnostic\" message for certain kinds of invalid\n-programs, but a warning counts as a diagnostic.  If GCC produces\n-a warning but not an error, that is correct ANSI support.\n-When test suites call this \"failure\", the tests are broken.\n-"}, {"sha": "0c4b4c35cad475244051f3eb14969adf6e48214e", "filename": "gcc/gcc.texi", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "patch": "@@ -1312,6 +1312,11 @@ ANSI C does not permit such a construct.  It would make sense to support\n it when @samp{-traditional} is used, but it is too much work to\n implement.\n \n+@item\n+K&R compilers allow comments to cross over an inclusion boundary (i.e.\n+started in an include file and ended in the including file).  I think\n+this would be quite ugly and can't imagine it could be needed.\n+\n @cindex external declaration scope\n @cindex scope of external declarations\n @cindex declaration scope\n@@ -1345,6 +1350,23 @@ flag cannot alter it.\n PCC allows typedef names to be used as function parameters.  The\n difficulty described immediately above applies here too.\n \n+@item\n+When in @samp{-traditional} mode, GCC allows the following erroneous\n+pair of declarations to appear together in a given scope:\n+\n+@example\n+typedef int foo;\n+typedef foo foo;\n+@end example\n+\n+@item\n+GCC treats all characters of identifiers as significant, even when in\n+@samp{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n+first eight characters are significant, although more may be used.''.\n+Also according to K&R-1 (2.2), ``An identifier is a sequence of letters\n+and digits; the first character must be a letter.  The underscore _\n+counts as a letter.'', but GCC also allows dollar signs in identifiers.\n+\n @cindex whitespace\n @item\n PCC allows whitespace in the middle of compound assignment operators\n@@ -1379,8 +1401,10 @@ return.  But in systems with ANSI C headers, @code{time} is declared to\n return @code{time_t}, and if that is not the same as @code{long}, then\n @samp{long time ();} is erroneous.\n \n-The solution is to change your program to use @code{time_t} as the return\n-type of @code{time}.\n+The solution is to change your program to use appropriate system headers\n+(@code{<time.h>} on systems with ISO C headers) and not to declare\n+@code{time} if the system header files declare it, or failing that to\n+use @code{time_t} as the return type of @code{time}.\n \n @cindex @code{float} as function value type\n @item\n@@ -2079,6 +2103,20 @@ Strictly speaking, there is no prohibition in the ANSI C standard\n against allowing structures with volatile fields in registers, but\n it does not seem to make any sense and is probably not what you wanted\n to do.  So the compiler will give an error message in this case.\n+\n+@item\n+Making certain warnings into errors by default.\n+\n+Some ISO C testsuites report failure when the compiler does not produce\n+an error message for a certain program.\n+\n+ISO C requires a ``diagnostic'' message for certain kinds of invalid\n+programs, but a warning is defined by GCC to count as a diagnostic.  If\n+GCC produces a warning but not an error, that is correct ISO C support.\n+If test suites call this ``failure'', they should be run with the GCC\n+option @samp{-pedantic-errors}, which will turn these warnings into\n+errors.\n+\n @end itemize\n \n @node Warnings and Errors"}]}