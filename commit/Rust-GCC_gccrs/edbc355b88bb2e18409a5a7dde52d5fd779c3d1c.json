{"sha": "edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiYzM1NWI4OGJiMmUxODQwOWE1YTdkZGU1MmQ1ZmQ3NzljM2QxYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T06:07:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-18T06:07:02Z"}, "message": "(assemble_variable): Move debugging output calls to after section has been selected.\n\n(assemble_variable): Move debugging output calls\nto after section has been selected.  Select the section again\nif the debugging output call changes the section.\n\nFrom-SVN: r4934", "tree": {"sha": "6612423dd6cb288711af708ec2dc0f28600a546c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6612423dd6cb288711af708ec2dc0f28600a546c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c/comments", "author": null, "committer": null, "parents": [{"sha": "cadcc1c11cb6301b68fa28fbc98cca85bcfdf8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cadcc1c11cb6301b68fa28fbc98cca85bcfdf8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cadcc1c11cb6301b68fa28fbc98cca85bcfdf8cf"}], "stats": {"total": 85, "additions": 64, "deletions": 21}, "files": [{"sha": "2938ea7b4fdcfbefa1ba84506ad0bdf1c39c5fd9", "filename": "gcc/varasm.c", "status": "modified", "additions": 64, "deletions": 21, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbc355b88bb2e18409a5a7dde52d5fd779c3d1c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=edbc355b88bb2e18409a5a7dde52d5fd779c3d1c", "patch": "@@ -705,6 +705,7 @@ assemble_variable (decl, top_level, at_end)\n   int align;\n   tree size_tree;\n   int reloc = 0;\n+  enum in_section saved_in_section;\n \n   if (GET_CODE (DECL_RTL (decl)) == REG)\n     {\n@@ -781,27 +782,6 @@ assemble_variable (decl, top_level, at_end)\n \n   TREE_ASM_WRITTEN (decl) = 1;\n \n-#ifdef DBX_DEBUGGING_INFO\n-  /* File-scope global variables are output here.  */\n-  if (write_symbols == DBX_DEBUG && top_level)\n-    dbxout_symbol (decl, 0);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG && top_level\n-      /* Leave initialized global vars for end of compilation;\n-\t see comment in compile_file.  */\n-      && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n-    sdbout_symbol (decl, 0);\n-#endif\n-\n-  /* Don't output any DWARF debugging information for variables here.\n-     In the case of local variables, the information for them is output\n-     when we do our recursive traversal of the tree representation for\n-     the entire containing function.  In the case of file-scope variables,\n-     we output information for all of them at the very end of compilation\n-     while we are doing our final traversal of the chain of file-scope\n-     declarations.  */\n-\n   /* If storage size is erroneously variable, just continue.\n      Error message was already made.  */\n \n@@ -844,6 +824,28 @@ assemble_variable (decl, top_level, at_end)\n       rounded += (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1;\n       rounded = (rounded / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n+\n+#ifdef DBX_DEBUGGING_INFO\n+      /* File-scope global variables are output here.  */\n+      if (write_symbols == DBX_DEBUG && top_level)\n+\tdbxout_symbol (decl, 0);\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+      if (write_symbols == SDB_DEBUG && top_level\n+\t  /* Leave initialized global vars for end of compilation;\n+\t     see comment in compile_file.  */\n+\t  && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n+\tsdbout_symbol (decl, 0);\n+#endif\n+\n+      /* Don't output any DWARF debugging information for variables here.\n+\t In the case of local variables, the information for them is output\n+\t when we do our recursive traversal of the tree representation for\n+\t the entire containing function.  In the case of file-scope variables,\n+\t we output information for all of them at the very end of compilation\n+\t while we are doing our final traversal of the chain of file-scope\n+\t declarations.  */\n+\n #if 0\n       if (flag_shared_data)\n \tdata_section ();\n@@ -914,6 +916,47 @@ assemble_variable (decl, top_level, at_end)\n     data_section ();\n #endif\n \n+  /* Record current section so we can restore it if dbxout.c clobbers it.  */\n+  saved_in_section = in_section;\n+\n+  /* Output the dbx info now that we have chosen the section.  */\n+\n+#ifdef DBX_DEBUGGING_INFO\n+  /* File-scope global variables are output here.  */\n+  if (write_symbols == DBX_DEBUG && top_level)\n+    dbxout_symbol (decl, 0);\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+  if (write_symbols == SDB_DEBUG && top_level\n+      /* Leave initialized global vars for end of compilation;\n+\t see comment in compile_file.  */\n+      && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n+    sdbout_symbol (decl, 0);\n+#endif\n+\n+  /* Don't output any DWARF debugging information for variables here.\n+     In the case of local variables, the information for them is output\n+     when we do our recursive traversal of the tree representation for\n+     the entire containing function.  In the case of file-scope variables,\n+     we output information for all of them at the very end of compilation\n+     while we are doing our final traversal of the chain of file-scope\n+     declarations.  */\n+\n+  if (in_section != saved_in_section)\n+    {\n+      /* Switch to the proper section for this data.  */\n+#ifdef SELECT_SECTION\n+      SELECT_SECTION (decl, reloc);\n+#else\n+      if (TREE_READONLY (decl)\n+\t  && ! TREE_THIS_VOLATILE (decl)\n+\t  && ! (flag_pic && reloc))\n+\treadonly_data_section ();\n+      else\n+\tdata_section ();\n+#endif\n+    }\n+\n   /* Compute and output the alignment of this data.  */\n \n   align = DECL_ALIGN (decl);"}]}