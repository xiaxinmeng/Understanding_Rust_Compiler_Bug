{"sha": "0d475361a51725490a60788243a1f785cfba4da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0NzUzNjFhNTE3MjU0OTBhNjA3ODgyNDNhMWY3ODVjZmJhNGRhMQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-08-05T16:04:12Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-08-05T16:04:12Z"}, "message": "configure.ac: Remove --enable-checking=df from default settings.\n\n2008-08-05  Paolo Bonzini  <bonzini@gnu.org>\n\n        * configure.ac: Remove --enable-checking=df from default settings.\n        * tree-pass.h (TODO_df_verify): New.  Shift TODO_mark_first_instance.\n        * df-core.c (df_finish_pass) [ENABLE_CHECKING]: Schedule verification\n        if the parameter is true.\n        (df_analyze) [!ENABLE_DF_CHECKING]: Also do verification if the\n        DF_VERIFY_SCHEDULED flag is true.\n        * df.h (enum df_changeable_flags): Add DF_VERIFY_SCHEDULED.\n        (df_finish_pass): Adjust prototype.\n        * passes.c (execute_todo): Schedule verification if TODO_df_verify is\n        true.\n\n        * see.c (pass_see): Add TODO_df_verify.\n        * loop-init.c (pass_rtl_move_loop_invariants): Add TODO_df_verify.\n        * global.c (rest_of_handle_global_alloc): Schedule verification\n        after the pass.\n        * local-alloc.c (rest_of_handle_local_alloc): Schedule verification\n        before the pass.\n        * function.c (pass_thread_prologue_and_epilogue): Add TODO_df_verify.\n        * gcse.c (rest_of_handle_gcse): Adjust call to df_finish_pass.\n        * loop-iv.c (iv_analysis_done): Schedule verification after the pass.\n\n        * config/sh/sh.c (sh_output_mi_thunk): Remove dead code.\n        * config/ia64/ia64.c (ia64_reorg): Adjust call to df_finish_pass.\n        * config/bfin/bfin.c (bfin_reorg): Adjust call to df_finish_pass.\n\nFrom-SVN: r127225", "tree": {"sha": "b1eb63f779e57b66e9e082792080cffb4ebb30c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1eb63f779e57b66e9e082792080cffb4ebb30c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d475361a51725490a60788243a1f785cfba4da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d475361a51725490a60788243a1f785cfba4da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d475361a51725490a60788243a1f785cfba4da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d475361a51725490a60788243a1f785cfba4da1/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d97b1af3fa03940993985f5936b9748b79d2eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d97b1af3fa03940993985f5936b9748b79d2eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d97b1af3fa03940993985f5936b9748b79d2eb8"}], "stats": {"total": 96, "additions": 63, "deletions": 33}, "files": [{"sha": "3f0d97ae273db880ce44f3d5846f1ac920e6a005", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -1,3 +1,30 @@\n+2008-08-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * configure.ac: Remove --enable-checking=df from default settings.\n+        * tree-pass.h (TODO_df_verify): New.  Shift TODO_mark_first_instance.\n+        * df-core.c (df_finish_pass) [ENABLE_CHECKING]: Schedule verification\n+        if the parameter is true.\n+        (df_analyze) [!ENABLE_DF_CHECKING]: Also do verification if the\n+        DF_VERIFY_SCHEDULED flag is true.\n+        * df.h (enum df_changeable_flags): Add DF_VERIFY_SCHEDULED.\n+        (df_finish_pass): Adjust prototype.\n+        * passes.c (execute_todo): Schedule verification if TODO_df_verify is\n+        true.\n+\n+        * see.c (pass_see): Add TODO_df_verify.\n+        * loop-init.c (pass_rtl_move_loop_invariants): Add TODO_df_verify.\n+        * global.c (rest_of_handle_global_alloc): Schedule verification\n+        after the pass.\n+        * local-alloc.c (rest_of_handle_local_alloc): Schedule verification\n+        before the pass.\n+        * function.c (pass_thread_prologue_and_epilogue): Add TODO_df_verify.\n+        * gcse.c (rest_of_handle_gcse): Adjust call to df_finish_pass.\n+        * loop-iv.c (iv_analysis_done): Schedule verification after the pass.\n+\n+        * config/sh/sh.c (sh_output_mi_thunk): Remove dead code.\n+        * config/ia64/ia64.c (ia64_reorg): Adjust call to df_finish_pass.\n+        * config/bfin/bfin.c (bfin_reorg): Adjust call to df_finish_pass.\n+\n 2007-08-05  Vladimir Yanovsky  <yanov@il.ibm.com>\n             Revital Eres <eres@il.ibm.com>\n "}, {"sha": "a946ba66d481396045da4f1bfa71557f225f1506", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -4534,7 +4534,7 @@ bfin_reorg (void)\n       reorder_var_tracking_notes ();\n       timevar_pop (TV_VAR_TRACKING);\n     }\n-  df_finish_pass ();\n+  df_finish_pass (false);\n }\n \f\n /* Handle interrupt_handler, exception_handler and nmi_handler function"}, {"sha": "cf704935795b6d93bacd6552e3ba3524e0448120", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -8625,7 +8625,7 @@ ia64_reorg (void)\n       variable_tracking_main ();\n       timevar_pop (TV_VAR_TRACKING);\n     }\n-  df_finish_pass ();\n+  df_finish_pass (false);\n }\n \f\n /* Return true if REGNO is used by the epilogue.  */"}, {"sha": "290d3f05d3b4cfc35910471195ee3c5470f4baca", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -10257,22 +10257,6 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   final (insns, file, 1);\n   final_end_function ();\n \n-#if 0\n-  if (optimize > 0)\n-    {\n-      /* Release all memory allocated by df.  */\n-      if (rtl_df)\n-\t{\n-\t  df_finish (rtl_df);\n-\t  rtl_df = NULL;\n-\t}\n-\n-      /* Release the bitmap obstacks.  */\n-      bitmap_obstack_release (&reg_obstack);\n-      bitmap_obstack_release (NULL);\n-    }\n-#endif\n-\n   reload_completed = 0;\n   epilogue_completed = 0;\n }"}, {"sha": "d7de8f0a96c243174e5a88a55b9f316436870758", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -6425,7 +6425,7 @@ for check in release $ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;"}, {"sha": "1eecc61b486b25f2a808994868f30cdcd16ff71c", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -359,7 +359,7 @@ for check in release $ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;"}, {"sha": "3b4e7b3e579e440f7c7cfdff5a7951dfa9bd3a84", "filename": "gcc/df-core.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -79,7 +79,7 @@ Here is an example of using the dataflow routines.\n \n       df_dump (stderr);\n \n-      df_finish_pass ();\n+      df_finish_pass (false);\n \n DF_[ru,rd,urec,ri,chain]_ADD_PROBLEM adds a problem, defined by an\n instance to struct df_problem, to the set of problems solved in this\n@@ -633,7 +633,7 @@ df_remove_problem (struct dataflow *dflow)\n    of the changeable_flags.  */\n \n void\n-df_finish_pass (void)\n+df_finish_pass (bool verify ATTRIBUTE_UNUSED)\n {\n   int i;\n   int removed = 0;\n@@ -694,6 +694,11 @@ df_finish_pass (void)\n   df_set_clean_cfg ();\n #endif\n #endif\n+\n+#ifdef ENABLE_CHECKING\n+  if (verify)\n+    df->changeable_flags |= DF_VERIFY_SCHEDULED;\n+#endif\n }\n \n \n@@ -1100,9 +1105,10 @@ df_analyze (void)\n   if (dump_file)\n     fprintf (dump_file, \"df_analyze called\\n\");\n \n-#ifdef ENABLE_DF_CHECKING\n-  df_verify ();\n-#endif \n+#ifndef ENABLE_DF_CHECKING\n+  if (df->changeable_flags & DF_VERIFY_SCHEDULED)\n+#endif\n+    df_verify ();\n \n   for (i = 0; i < df->n_blocks; i++)\n     bitmap_set_bit (current_all_blocks, df->postorder[i]);\n@@ -1509,9 +1515,11 @@ void\n df_verify (void)\n {\n   df_scan_verify ();\n+#ifdef ENABLE_DF_CHECKING\n   df_lr_verify_transfer_functions ();\n   if (df_live)\n     df_live_verify_transfer_functions ();\n+#endif\n }\n \n #ifdef DF_DEBUG_CFG"}, {"sha": "7457277915d0c4c9288e536dd21ed432ec512d13", "filename": "gcc/df.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -407,7 +407,9 @@ enum df_changeable_flags\n   /* Cause df_insn_rescan df_notes_rescan and df_insn_delete, to\n   return after marking the insn for later processing.  This allows all\n   rescans to be batched.  */\n-  DF_DEFER_INSN_RESCAN    = 32\n+  DF_DEFER_INSN_RESCAN    = 32,\n+\n+  DF_VERIFY_SCHEDULED     = 64\n };\n \n /* Two of these structures are inline in df, one for the uses and one\n@@ -807,7 +809,7 @@ extern enum df_changeable_flags df_set_flags (enum df_changeable_flags);\n extern enum df_changeable_flags df_clear_flags (enum df_changeable_flags);\n extern void df_set_blocks (bitmap);\n extern void df_remove_problem (struct dataflow *);\n-extern void df_finish_pass (void);\n+extern void df_finish_pass (bool);\n extern void df_analyze_problem (struct dataflow *, bitmap, int *, int);\n extern void df_analyze (void);\n extern int df_get_n_blocks (enum df_flow_dir);"}, {"sha": "edbef6c15a9bea2dc011a237b1ecfc20e0bf452b", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -5514,6 +5514,7 @@ struct tree_opt_pass pass_thread_prologue_and_epilogue =\n   0,                                    /* properties_destroyed */\n   TODO_verify_flow,                     /* todo_flags_start */\n   TODO_dump_func |\n+  TODO_df_verify |\n   TODO_df_finish |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n   'w'                                   /* letter */"}, {"sha": "8b82c8e57997c50ce5e415a11afc7cff1aae33c1", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -6706,7 +6706,7 @@ rest_of_handle_gcse (void)\n     {\n       timevar_push (TV_CSE);\n       tem2 = cse_main (get_insns (), max_reg_num ());\n-      df_finish_pass ();\n+      df_finish_pass (false);\n       purge_all_dead_edges ();\n       delete_trivially_dead_insns (get_insns (), max_reg_num ());\n       timevar_pop (TV_CSE);"}, {"sha": "c346e6ad5f2bab4b7d4f2fffdc06fb3b1934a548", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -2081,7 +2081,7 @@ rest_of_handle_global_alloc (void)\n      just rescan everything.  Not that df_rescan_all_insns is not\n      going to help here because it does not touch the artificial uses\n      and defs.  */\n-  df_finish_pass ();\n+  df_finish_pass (true);\n   if (optimize > 1)\n     df_live_add_problem ();\n   df_scan_alloc (NULL);"}, {"sha": "c42b7149145dbb9a79c11fe3047f4c83329fef80", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -2515,6 +2515,9 @@ rest_of_handle_local_alloc (void)\n      we are doing optimization.  */\n   if (optimize)\n     df_urec_add_problem ();\n+#ifdef ENABLE_CHECKING\n+  df->changeable_flags |= DF_VERIFY_SCHEDULED;\n+#endif\n   df_analyze ();\n   regstat_init_n_sets_and_refs ();\n   regstat_compute_ri ();"}, {"sha": "79d9056f2b3662e6f8e6da92052e50b5ee7b6bfb", "filename": "gcc/loop-init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -251,7 +251,8 @@ struct tree_opt_pass pass_rtl_move_loop_invariants =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */ \n-  TODO_df_finish |                      /* This is shutting down the instance in loop_invariant.c  */\n+  TODO_df_verify |\n+  TODO_df_finish |\n   TODO_dump_func,                       /* todo_flags_finish */\n   'L'                                   /* letter */\n };"}, {"sha": "173cd68bbba29a80996c432e89a3c1cb53d02636", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -1266,7 +1266,7 @@ iv_analysis_done (void)\n     {\n       clear_iv_info ();\n       clean_slate = true;\n-      df_finish_pass ();\n+      df_finish_pass (true);\n       htab_delete (bivs);\n       free (iv_ref_table);\n       iv_ref_table = NULL;"}, {"sha": "8258ca2344859e9948597b0ef78674034e30245e", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -1013,7 +1013,7 @@ execute_todo (unsigned int flags)\n   /* Now that the dumping has been done, we can get rid of the optional \n      df problems.  */\n   if (flags & TODO_df_finish)\n-    df_finish_pass ();\n+    df_finish_pass ((flags & TODO_df_verify) != 0);\n }\n \n /* Verify invariants that should hold between passes.  This is a place"}, {"sha": "0aba8df71328704986898ea360afef60fb1cd8c5", "filename": "gcc/see.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -3831,6 +3831,7 @@ struct tree_opt_pass pass_see =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_df_verify |\n   TODO_df_finish |\n   TODO_dump_func,\t\t\t/* todo_flags_finish */\n   'u'\t\t\t\t\t/* letter */"}, {"sha": "fc12a6c738eb44bd7f108c681bf30ff7785a83f7", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d475361a51725490a60788243a1f785cfba4da1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=0d475361a51725490a60788243a1f785cfba4da1", "patch": "@@ -222,8 +222,11 @@ struct dump_file_info\n    the instance before it is destroyed.  */\n #define TODO_df_finish                  (1 << 16)\n \n+/* Call df_verify at the end of the pass if checking is enabled.  */\n+#define TODO_df_verify                  (1 << 17)\n+\n /* Internally used for the first instance of a pass.  */\n-#define TODO_mark_first_instance\t(1 << 17)\n+#define TODO_mark_first_instance\t(1 << 18)\n \n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\"}]}