{"sha": "cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5OWMyM2NhNDFmOWZiNjc5MmUzOWYwZTkxYTk1MGNmMWU1MzFhYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-19T15:30:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-19T15:30:23Z"}, "message": "re PR fortran/51605 (internal compiler error gfc_trans_block_construct, at fortran/trans-stmt.c:984)\n\n2011-12-19  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51605\n        * match.c (gfc_match_select_type): Handle\n        scalar polymophic coarrays.\n        (select_type_set_tmp, ): Ditto; avoid segfault if !class_ok.\n        * primary.c (gfc_match_rvalue): Avoid segfault if !class_ok.\n        * resolve.c (resolve_select_type): Ditto.\n        (resolve_assoc_var): Fix setting the TARGET attribute for\n        polymorphic selectors which are pointers.\n\n2011-12-19  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51605\n        * gfortran.dg/select_type_25.f90: New.\n\nFrom-SVN: r182484", "tree": {"sha": "2d37421d992c8c2c8df7d5e8606294c36915d130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d37421d992c8c2c8df7d5e8606294c36915d130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a9ceb1703fcf307cdeb4abab80e535d98857122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9ceb1703fcf307cdeb4abab80e535d98857122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9ceb1703fcf307cdeb4abab80e535d98857122"}], "stats": {"total": 118, "additions": 110, "deletions": 8}, "files": [{"sha": "e5e8e7fe340dff92c924fa2cd82e060464ed8aae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -1,3 +1,14 @@\n+2011-12-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51605\n+\t* match.c (gfc_match_select_type): Handle\n+\tscalar polymophic coarrays.\n+\t(select_type_set_tmp, ): Ditto; avoid segfault if !class_ok.\n+\t* primary.c (gfc_match_rvalue): Avoid segfault if !class_ok.\n+\t* resolve.c (resolve_select_type): Ditto.\n+\t(resolve_assoc_var): Fix setting the TARGET attribute for\n+\tpolymorphic selectors which are pointers.\n+\n 2011-12-19  Tobias Burnus  <burnus@net-b.de>\n \n \t* check.c (coarray_check): Add class ref if needed."}, {"sha": "fd91921c9793004a2a0a17b228ea970a4355b49c", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -5154,19 +5154,27 @@ select_type_set_tmp (gfc_typespec *ts)\n \n /* Copy across the array spec to the selector, taking care as to\n    whether or not it is a class object or not.  */\n-  if (select_type_stack->selector->ts.type == BT_CLASS &&\n-      CLASS_DATA (select_type_stack->selector)->attr.dimension)\n+  if (select_type_stack->selector->ts.type == BT_CLASS\n+      && select_type_stack->selector->attr.class_ok\n+      && (CLASS_DATA (select_type_stack->selector)->attr.dimension\n+\t  || CLASS_DATA (select_type_stack->selector)->attr.codimension))\n     {\n       if (ts->type == BT_CLASS)\n \t{\n-\t  CLASS_DATA (tmp->n.sym)->attr.dimension = 1;\n+\t  CLASS_DATA (tmp->n.sym)->attr.dimension\n+\t\t= CLASS_DATA (select_type_stack->selector)->attr.dimension;\n+\t  CLASS_DATA (tmp->n.sym)->attr.codimension\n+\t\t= CLASS_DATA (select_type_stack->selector)->attr.codimension;\n \t  CLASS_DATA (tmp->n.sym)->as = gfc_get_array_spec ();\n \t  CLASS_DATA (tmp->n.sym)->as\n \t\t\t= CLASS_DATA (select_type_stack->selector)->as;\n \t}\n       else\n \t{\n-\t  tmp->n.sym->attr.dimension = 1;\n+\t  tmp->n.sym->attr.dimension\n+\t\t= CLASS_DATA (select_type_stack->selector)->attr.dimension;\n+\t  tmp->n.sym->attr.codimension\n+\t\t= CLASS_DATA (select_type_stack->selector)->attr.codimension;\n \t  tmp->n.sym->as = gfc_get_array_spec ();\n \t  tmp->n.sym->as = CLASS_DATA (select_type_stack->selector)->as;\n \t}\n@@ -5248,7 +5256,8 @@ gfc_match_select_type (void)\n \t\t  && expr1->ts.type != BT_UNKNOWN\n \t\t  && CLASS_DATA (expr1)\n \t\t  && (strcmp (CLASS_DATA (expr1)->name, \"_data\") == 0)\n-\t\t  && CLASS_DATA (expr1)->attr.dimension\n+\t\t  && (CLASS_DATA (expr1)->attr.dimension\n+\t\t      || CLASS_DATA (expr1)->attr.codimension)\n \t\t  && expr1->ref\n \t\t  && expr1->ref->type == REF_ARRAY\n \t\t  && expr1->ref->next == NULL;"}, {"sha": "f79ed228d2f8193a96f9ab0a31f51842dda7de6c", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -2914,7 +2914,7 @@ gfc_match_rvalue (gfc_expr **result)\n \t  break;\n \t}\n \n-      if (sym->ts.type == BT_CLASS\n+      if (sym->ts.type == BT_CLASS && sym->attr.class_ok\n \t  && (CLASS_DATA (sym)->attr.dimension\n \t      || CLASS_DATA (sym)->attr.codimension))\n \t{"}, {"sha": "4bfdb7987bf9d53be2958a22ab454fd30acb947e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -7817,9 +7817,12 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       sym->attr.asynchronous = tsym->attr.asynchronous;\n       sym->attr.volatile_ = tsym->attr.volatile_;\n \n-      sym->attr.target = (tsym->attr.target || tsym->attr.pointer);\n+      if (tsym->ts.type == BT_CLASS)\n+\tsym->attr.target = tsym->attr.target || CLASS_DATA (tsym)->attr.pointer;\n+      else\n+\tsym->attr.target = tsym->attr.target || tsym->attr.pointer;\n \n-      if (sym->ts.type == BT_DERIVED && target->symtree->n.sym->ts.type == BT_CLASS)\n+      if (sym->ts.type == BT_DERIVED && tsym->ts.type == BT_CLASS)\n \ttarget->rank = sym->as ? sym->as->rank : 0;\n     }\n \n@@ -7887,6 +7890,9 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n       return;\n     }\n \n+  if (!code->expr1->symtree->n.sym->attr.class_ok)\n+    return;\n+\n   if (code->expr2)\n     {\n       if (code->expr1->symtree->n.sym->attr.untyped)"}, {"sha": "57a5dc844ac73fa10cf200cc52aa1768002f24fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -1,3 +1,8 @@\n+2011-12-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51605\n+\t* gfortran.dg/select_type_25.f90: New.\n+\n 2011-12-19  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/51583"}, {"sha": "45fe9af7fce5763f89cfcb1f2181f444801526f9", "filename": "gcc/testsuite/gfortran.dg/select_type_25.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd99c23ca41f9fb6792e39f0e91a950cf1e531aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_25.f90?ref=cd99c23ca41f9fb6792e39f0e91a950cf1e531aa", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/51605\n+!\n+\n+subroutine one()\n+type t\n+end type t\n+! (a) Invalid (was ICEing before)\n+class(t), target :: p1 ! { dg-error \"must be dummy, allocatable or pointer\" }\n+class(t), pointer :: p2\n+\n+select type(p1)\n+  type is(t)\n+    p2 => p1\n+  class is(t)\n+    p2 => p1\n+end select\n+end subroutine one\n+\n+subroutine two()\n+type t\n+end type t\n+class(t), allocatable, target :: p1 ! (b) Valid\n+class(t), pointer :: p2\n+\n+select type(p1)\n+  type is(t)\n+    p2 => p1\n+  class is(t)\n+    p2 => p1\n+end select\n+end subroutine two\n+\n+subroutine three()\n+type t\n+end type t\n+class(t), allocatable :: p1         ! (c) Invalid as not TARGET\n+class(t), pointer :: p2\n+\n+select type(p1)\n+  type is(t)\n+    p2 => p1 ! { dg-error \"Pointer assignment target is neither TARGET nor POINTER\" }\n+  class is(t)\n+    p2 => p1 ! { dg-error \"Pointer assignment target is neither TARGET nor POINTER\" }\n+end select\n+end subroutine three\n+\n+subroutine four()\n+type t\n+end type t\n+class(t), pointer :: p1             ! (d) Valid\n+class(t), pointer :: p2\n+\n+select type(p1)\n+  type is(t)\n+    p2 => p1\n+  class is(t)\n+    p2 => p1\n+end select\n+end subroutine four\n+\n+subroutine caf(x)\n+  type t\n+  end type t\n+  class(t) :: x[*]\n+  select type(x)\n+  type is(t)\n+  end select\n+end subroutine caf"}]}