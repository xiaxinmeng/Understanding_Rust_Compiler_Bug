{"sha": "d6c667b45ad50ef492ec7e7010bba716a6650cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjNjY3YjQ1YWQ1MGVmNDkyZWM3ZTcwMTBiYmE3MTZhNjY1MGNiNw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-04-13T22:20:35Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-04-13T22:20:35Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r739", "tree": {"sha": "8ebee3482900f29b73718743a65e31d49e072794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebee3482900f29b73718743a65e31d49e072794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6c667b45ad50ef492ec7e7010bba716a6650cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c667b45ad50ef492ec7e7010bba716a6650cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c667b45ad50ef492ec7e7010bba716a6650cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c667b45ad50ef492ec7e7010bba716a6650cb7/comments", "author": null, "committer": null, "parents": [{"sha": "2defae7d7366b9515fdaca4c58f67b73d3436812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2defae7d7366b9515fdaca4c58f67b73d3436812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2defae7d7366b9515fdaca4c58f67b73d3436812"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "5a4d6fa43118839e164b7ecc0eeb3a5cfded6e78", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c667b45ad50ef492ec7e7010bba716a6650cb7/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c667b45ad50ef492ec7e7010bba716a6650cb7/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=d6c667b45ad50ef492ec7e7010bba716a6650cb7", "patch": "@@ -681,6 +681,49 @@ static unsigned lookup_filename ();\n   } while (0)\n #endif\n \n+/* choose a reasonable default for ASM_OUTPUT_ASCII, as that is what\n+   varasm.c does.  If the below is changed, please also change\n+   definition in varasm.c Both of these should be factored out, into a\n+   higher layer.  */\n+#ifndef ASM_OUTPUT_ASCII\n+#define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n+  do {\t\t\t\t\t\t\t\t\t      \\\n+    FILE *_hide_asm_out_file = MYFILE;\t\t\t\t\t      \\\n+    char *_hide_p = MYSTRING;\t\t\t\t\t\t      \\\n+    int _hide_thissize = MYLENGTH;\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n+      char *p = _hide_p;\t\t\t\t\t\t      \\\n+      int thissize = _hide_thissize;\t\t\t\t\t      \\\n+      int i;\t\t\t\t\t\t\t\t      \\\n+      fprintf (asm_out_file, \"\\t.ascii \\\"\");\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+      for (i = 0; i < thissize; i++)\t\t\t\t\t      \\\n+\t{\t\t\t\t\t\t\t\t      \\\n+\t  register int c = p[i];\t\t\t\t\t      \\\n+\t  if (c == '\\\"' || c == '\\\\')\t\t\t\t\t      \\\n+\t    putc ('\\\\', asm_out_file);\t\t\t\t\t      \\\n+\t  if (c >= ' ' && c < 0177)\t\t\t\t\t      \\\n+\t    putc (c, asm_out_file);\t\t\t\t\t      \\\n+\t  else\t\t\t\t\t\t\t\t      \\\n+\t    {\t\t\t\t\t\t\t\t      \\\n+\t      fprintf (asm_out_file, \"\\\\%o\", c);\t\t\t      \\\n+\t      /* After an octal-escape, if a digit follows,\t\t      \\\n+\t\t terminate one string constant and start another.\t      \\\n+\t\t The Vax assembler fails to stop reading the escape\t      \\\n+\t\t after three digits, so this is the only way we\t\t      \\\n+\t\t can get it to parse the data properly.  */\t\t      \\\n+\t      if (i < thissize - 1\t\t\t\t\t      \\\n+\t\t  && p[i + 1] >= '0' && p[i + 1] <= '9')\t\t      \\\n+\t\tfprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");\t\t      \\\n+\t  }\t\t\t\t\t\t\t\t      \\\n+\t}\t\t\t\t\t\t\t\t      \\\n+      fprintf (asm_out_file, \"\\\"\\n\");\t\t\t\t\t      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n+  }\t\t\t\t\t\t\t\t\t      \\\n+  while (0)\n+#endif\n+\n #ifndef ASM_OUTPUT_DWARF_STRING\n #define ASM_OUTPUT_DWARF_STRING(FILE,P) \\\n   ASM_OUTPUT_ASCII ((FILE), P, strlen (P)+1)"}]}