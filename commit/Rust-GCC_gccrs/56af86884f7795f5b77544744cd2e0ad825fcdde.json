{"sha": "56af86884f7795f5b77544744cd2e0ad825fcdde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhZjg2ODg0Zjc3OTVmNWI3NzU0NDc0NGNkMmUwYWQ4MjVmY2RkZQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T09:44:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T09:44:22Z"}, "message": "[multiple changes]\n\n2017-12-15  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): If the\n\tInit_Assignment is rewritten, we need to set Assignment_OK on the new\n\tnode.  Otherwise, we will get spurious errors when initializing via\n\tassignment statement.\n\n2017-12-15  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_unst.adb (Visit_Node): Refine handling of 'Access to ignore non\n\trelevant nodes.\n\t(Has_Non_Null_Statements): Moved to sem_util for later reuse.\n\n2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Fix comment.\n\t* libgnat/s-fatgen.adb (Model): Use Machine attribute.\n\t(Truncation): Likewise.\n\n2017-12-15  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch7.adb (Expand_Cleanup_Actions): Make sure the block and handled\n\tstatement sequence generated for certain extended return statements\n\thave a Sloc that is not No_Location. Otherwise, the back end doesn't\n\tset any location and ends up reading uninitialized variables.\n\nFrom-SVN: r255680", "tree": {"sha": "390ed312f8d85dc1e2e5dfc9a2af026a79cc7977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390ed312f8d85dc1e2e5dfc9a2af026a79cc7977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56af86884f7795f5b77544744cd2e0ad825fcdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56af86884f7795f5b77544744cd2e0ad825fcdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56af86884f7795f5b77544744cd2e0ad825fcdde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56af86884f7795f5b77544744cd2e0ad825fcdde/comments", "author": null, "committer": null, "parents": [{"sha": "e83a74b0db9c27bb2be72a6caa361f9a3ffe792e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83a74b0db9c27bb2be72a6caa361f9a3ffe792e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83a74b0db9c27bb2be72a6caa361f9a3ffe792e"}], "stats": {"total": 120, "additions": 90, "deletions": 30}, "files": [{"sha": "9077056ae25e2beab157531c479af040018dde3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -1,3 +1,29 @@\n+2017-12-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): If the\n+\tInit_Assignment is rewritten, we need to set Assignment_OK on the new\n+\tnode.  Otherwise, we will get spurious errors when initializing via\n+\tassignment statement.\n+\n+2017-12-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_unst.adb (Visit_Node): Refine handling of 'Access to ignore non\n+\trelevant nodes.\n+\t(Has_Non_Null_Statements): Moved to sem_util for later reuse.\n+\n+2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Fix comment.\n+\t* libgnat/s-fatgen.adb (Model): Use Machine attribute.\n+\t(Truncation): Likewise.\n+\n+2017-12-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_Cleanup_Actions): Make sure the block and handled\n+\tstatement sequence generated for certain extended return statements\n+\thave a Sloc that is not No_Location. Otherwise, the back end doesn't\n+\tset any location and ends up reading uninitialized variables.\n+\n 2017-12-15  Bob Duff  <duff@adacore.com>\n \n \t* types.ads, exp_ch6.adb, libgnat/s-regexp.ads, opt.ads: Partly revert"}, {"sha": "b181c1d532157ea2ba630c6fd17d070dd7839145", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -8274,7 +8274,7 @@ package body Exp_Attr is\n    --  Start of processing for Is_Inline_Floating_Point_Attribute\n \n    begin\n-      --  Machine and Model can be expanded by the GCC and AAMP back ends only\n+      --  Machine and Model can be expanded by the GCC back end only\n \n       if Id = Attribute_Machine or else Id = Attribute_Model then\n          return Is_GCC_Target;"}, {"sha": "43731c802392a42e56f7962eb7034e32b908f231", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -5370,6 +5370,10 @@ package body Exp_Ch6 is\n                         Rewrite (Name (Init_Assignment),\n                           Make_Explicit_Dereference (Loc,\n                             Prefix => New_Occurrence_Of (Alloc_Obj_Id, Loc)));\n+                        pragma Assert\n+                          (Assignment_OK\n+                             (Original_Node (Name (Init_Assignment))));\n+                        Set_Assignment_OK (Name (Init_Assignment));\n \n                         Set_Etype (Name (Init_Assignment), Etype (Ret_Obj_Id));\n \n@@ -7310,7 +7314,7 @@ package body Exp_Ch6 is\n             begin\n                --  ???For now, enable build-in-place for a very narrow set of\n                --  controlled types. Change \"if True\" to \"if False\" to\n-               --  experiment more controlled types. Eventually, we would\n+               --  experiment with more controlled types. Eventually, we might\n                --  like to enable build-in-place for all tagged types, all\n                --  types that need finalization, and all caller-unknown-size\n                --  types."}, {"sha": "4ce2ea1c2c01a1a6847ba6d27335b8156e8345e2", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -4310,20 +4310,6 @@ package body Exp_Ch7 is\n          return;\n       end if;\n \n-      --  If we are generating expanded code for debugging purposes, use the\n-      --  Sloc of the point of insertion for the cleanup code. The Sloc will be\n-      --  updated subsequently to reference the proper line in .dg files. If we\n-      --  are not debugging generated code, use No_Location instead, so that\n-      --  no debug information is generated for the cleanup code. This makes\n-      --  the behavior of the NEXT command in GDB monotonic, and makes the\n-      --  placement of breakpoints more accurate.\n-\n-      if Debug_Generated_Code then\n-         Loc := Sloc (Scop);\n-      else\n-         Loc := No_Location;\n-      end if;\n-\n       --  If an extended return statement contains something like\n       --     X := F (...);\n       --  where F is a build-in-place function call returning a controlled\n@@ -4350,13 +4336,13 @@ package body Exp_Ch7 is\n       if Nkind (N) = N_Extended_Return_Statement then\n          declare\n             Block : constant Node_Id :=\n-              Make_Block_Statement (Loc,\n+              Make_Block_Statement (Sloc (N),\n                Declarations => Empty_List,\n                Handled_Statement_Sequence =>\n                  Handled_Statement_Sequence (N));\n          begin\n             Set_Handled_Statement_Sequence\n-              (N, Make_Handled_Sequence_Of_Statements (Loc,\n+              (N, Make_Handled_Sequence_Of_Statements (Sloc (N),\n                     Statements => New_List (Block)));\n             Analyze (Block);\n          end;\n@@ -4380,6 +4366,20 @@ package body Exp_Ch7 is\n          Old_Poll  : Boolean;\n \n       begin\n+         --  If we are generating expanded code for debugging purposes, use the\n+         --  Sloc of the point of insertion for the cleanup code. The Sloc will\n+         --  be updated subsequently to reference the proper line in .dg files.\n+         --  If we are not debugging generated code, use No_Location instead,\n+         --  so that no debug information is generated for the cleanup code.\n+         --  This makes the behavior of the NEXT command in GDB monotonic, and\n+         --  makes the placement of breakpoints more accurate.\n+\n+         if Debug_Generated_Code then\n+            Loc := Sloc (Scop);\n+         else\n+            Loc := No_Location;\n+         end if;\n+\n          --  Set polling off. The finalization and cleanup code is executed\n          --  with aborts deferred.\n "}, {"sha": "558e986852452d5bdd7f3959314bed1e7e31e1f2", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -586,18 +586,20 @@ package body Exp_Unst is\n                         | Attribute_Unchecked_Access\n                         | Attribute_Unrestricted_Access\n                      =>\n-                        Ent := Entity (Prefix (N));\n+                        if Nkind (Prefix (N)) in N_Has_Entity then\n+                           Ent := Entity (Prefix (N));\n \n-                        --  We are only interested in calls to subprograms\n-                        --  nested within Subp.\n+                           --  We are only interested in calls to subprograms\n+                           --  nested within Subp.\n \n-                        if Scope_Within (Ent, Subp) then\n-                           if Is_Imported (Ent) then\n-                              null;\n+                           if Scope_Within (Ent, Subp) then\n+                              if Is_Imported (Ent) then\n+                                 null;\n \n-                           elsif Is_Subprogram (Ent) then\n-                              Append_Unique_Call\n-                                ((N, Current_Subprogram, Ent));\n+                              elsif Is_Subprogram (Ent) then\n+                                 Append_Unique_Call\n+                                   ((N, Current_Subprogram, Ent));\n+                              end if;\n                            end if;\n                         end if;\n "}, {"sha": "f6dff9cbb67de07c3fea5a2b01d6067df8225986", "filename": "gcc/ada/libgnat/s-fatgen.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -394,7 +394,7 @@ package body System.Fat_Gen is\n \n    function Model (X : T) return T is\n    begin\n-      return Machine (X);\n+      return T'Machine (X);\n    end Model;\n \n    ----------\n@@ -739,10 +739,11 @@ package body System.Fat_Gen is\n       Result := abs X;\n \n       if Result >= Radix_To_M_Minus_1 then\n-         return Machine (X);\n+         return T'Machine (X);\n \n       else\n-         Result := Machine (Radix_To_M_Minus_1 + Result) - Radix_To_M_Minus_1;\n+         Result :=\n+           T'Machine (Radix_To_M_Minus_1 + Result) - Radix_To_M_Minus_1;\n \n          if Result > abs X then\n             Result := Result - 1.0;"}, {"sha": "5bdbd5b372bdc6bf7fa0b24f61ee4c5a6c8a5033", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -10619,6 +10619,30 @@ package body Sem_Util is\n           and then Nkind (Node (First_Elmt (Constits))) /= N_Null;\n    end Has_Non_Null_Refinement;\n \n+   -----------------------------\n+   -- Has_Non_Null_Statements --\n+   -----------------------------\n+\n+   function Has_Non_Null_Statements (L : List_Id) return Boolean is\n+      Node : Node_Id;\n+\n+   begin\n+      if Is_Non_Empty_List (L) then\n+         Node := First (L);\n+\n+         loop\n+            if Nkind (Node) /= N_Null_Statement then\n+               return True;\n+            end if;\n+\n+            Next (Node);\n+            exit when Node = Empty;\n+         end loop;\n+      end if;\n+\n+      return False;\n+   end Has_Non_Null_Statements;\n+\n    ----------------------------------\n    -- Has_Non_Trivial_Precondition --\n    ----------------------------------"}, {"sha": "e94515dcf076045717db0322f8d967ed3d92e15c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56af86884f7795f5b77544744cd2e0ad825fcdde/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=56af86884f7795f5b77544744cd2e0ad825fcdde", "patch": "@@ -1290,6 +1290,9 @@ package Sem_Util is\n    --  in pragma Refined_State. This function does not take into account the\n    --  visible refinement region of abstract state Id.\n \n+   function Has_Non_Null_Statements (L : List_Id) return Boolean;\n+   --  Return True if L has non-null statements\n+\n    function Has_Overriding_Initialize (T : Entity_Id) return Boolean;\n    --  Predicate to determine whether a controlled type has a user-defined\n    --  Initialize primitive (and, in Ada 2012, whether that primitive is"}]}