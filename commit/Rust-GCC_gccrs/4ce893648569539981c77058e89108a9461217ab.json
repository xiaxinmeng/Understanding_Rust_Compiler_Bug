{"sha": "4ce893648569539981c77058e89108a9461217ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlODkzNjQ4NTY5NTM5OTgxYzc3MDU4ZTg5MTA4YTk0NjEyMTdhYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-05T00:13:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-05T00:13:53Z"}, "message": "function.h (insert_block_after_note): Declare.\n\n\t* function.h (insert_block_after_note): Declare.\n\t* function.c (insert_block_after_note): Split out from ...\n\t(retrofit_block): ... here.\n\nFrom-SVN: r30776", "tree": {"sha": "4c623881730c17325e6c2b7f1279503b27e53cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c623881730c17325e6c2b7f1279503b27e53cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ce893648569539981c77058e89108a9461217ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce893648569539981c77058e89108a9461217ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce893648569539981c77058e89108a9461217ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce893648569539981c77058e89108a9461217ab/comments", "author": null, "committer": null, "parents": [{"sha": "12f612289556bf30dd2d25854feec38ab43c7f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f612289556bf30dd2d25854feec38ab43c7f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f612289556bf30dd2d25854feec38ab43c7f73"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "8b26d1bdb08541f28d0840d1d0142db6a7c9a9ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce893648569539981c77058e89108a9461217ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce893648569539981c77058e89108a9461217ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ce893648569539981c77058e89108a9461217ab", "patch": "@@ -1,5 +1,9 @@\n 1999-12-04  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* function.h (insert_block_after_note): Declare.\n+\t* function.c (insert_block_after_note): Split out from ...\n+\t(retrofit_block): ... here.\n+\n \t* stmt.c (expand_fixup): Fix typo in comment.\n \n Sat Dec  4 14:13:38 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>"}, {"sha": "67f5e4161ef01164f1dd145fc569e949d2fbb548", "filename": "gcc/function.c", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce893648569539981c77058e89108a9461217ab/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce893648569539981c77058e89108a9461217ab/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4ce893648569539981c77058e89108a9461217ab", "patch": "@@ -5482,6 +5482,37 @@ round_trampoline_addr (tramp)\n   return tramp;\n }\n \f\n+/* Insert the BLOCK in the block-tree, knowing that the previous\n+   block-note is for OLD_BLOCK.  BEGIN_P is non-zero if the previous\n+   block-note was the for the beginning of a BLOCK.  FN is the\n+   FUNCTION_DECL into which the BLOCK is being inserted.  */\n+\n+void \n+insert_block_after_note (block, old_block, begin_p, fn)\n+     tree block;\n+     tree old_block;\n+     int begin_p;\n+     tree fn;\n+{\n+  if (begin_p)\n+    {\n+      /* If there was no previous block, use the top-level block for\n+\t the function.  */\n+      if (!old_block)\n+\told_block = DECL_INITIAL (fn);\n+\n+      BLOCK_SUPERCONTEXT (block) = old_block;\n+      BLOCK_CHAIN (block) = BLOCK_SUBBLOCKS (old_block);\n+      BLOCK_SUBBLOCKS (old_block) = block;\n+    }\n+  else\n+    {\n+      BLOCK_SUPERCONTEXT (block) = BLOCK_SUPERCONTEXT (old_block);\n+      BLOCK_CHAIN (block) = BLOCK_CHAIN (old_block);\n+      BLOCK_CHAIN (old_block) = block;\n+    }\n+}\n+\n /* Insert the BLOCK in the block-tree before LAST_INSN.  */\n \n void\n@@ -5502,27 +5533,13 @@ retrofit_block (block, last_insn)\n \t&& (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG\n \t    || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END))\n       break;\n-  if (!insn || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG)\n-    {\n-      tree superblock;\n \n-      if (insn)\n-\tsuperblock = NOTE_BLOCK (insn);\n-      else\n-\tsuperblock = DECL_INITIAL (current_function_decl);\n-\n-      BLOCK_SUPERCONTEXT (block) = superblock;\n-      BLOCK_CHAIN (block) = BLOCK_SUBBLOCKS (superblock);\n-      BLOCK_SUBBLOCKS (superblock) = block;\n-    }\n-  else\n-    {\n-      tree prevblock = NOTE_BLOCK (insn);\n-\n-      BLOCK_SUPERCONTEXT (block) = BLOCK_SUPERCONTEXT (prevblock);\n-      BLOCK_CHAIN (block) = BLOCK_CHAIN (prevblock);\n-      BLOCK_CHAIN (prevblock) = block;\n-    }\n+  insert_block_after_note (block, \n+\t\t\t   insn ? NOTE_BLOCK (insn) : NULL_TREE,\n+\t\t\t   insn \n+\t\t\t   ? (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG)\n+\t\t\t   : 1,\n+\t\t\t   current_function_decl);\n }\n \n /* The functions identify_blocks and reorder_blocks provide a way to"}, {"sha": "dc0b507e5d1501d434edaa32f2ceeb54f25579c6", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce893648569539981c77058e89108a9461217ab/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce893648569539981c77058e89108a9461217ab/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=4ce893648569539981c77058e89108a9461217ab", "patch": "@@ -541,6 +541,11 @@ extern struct function *outer_function_chain;\n    Also store in each NOTE for the beginning or end of a block\n    the index of that block in the vector.  */\n extern void identify_blocks PROTO((tree, rtx));\n+/* Insert the BLOCK in the block-tree, knowing that the previous\n+   block-note is for OLD_BLOCK.  BEGIN_P is non-zero if the previous\n+   block-note was the for the beginning of a BLOCK.  FN is the\n+   FUNCTION_DECL into which the BLOCK is being inserted.  */\n+extern void insert_block_after_note PROTO((tree, tree, int, tree));\n /* Insert a new BLOCK at an appropriate place in the block tree.  */\n extern void retrofit_block PROTO((tree, rtx));\n "}]}