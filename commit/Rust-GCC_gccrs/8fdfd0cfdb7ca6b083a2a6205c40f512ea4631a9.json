{"sha": "8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkZmQwY2ZkYjdjYTZiMDgzYTJhNjIwNWM0MGY1MTJlYTQ2MzFhOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-02T13:28:55Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-02T15:53:01Z"}, "message": "aarch64: Reimplement vqmovun_high* intrinsics using builtins\n\nAnother transition from inline asm to builtin.\nOnly 3 intrinsics converted this time but they use the \"+w\" constraint in their inline asm\nso are more likely to generate redundant moves so benefit more from reimplementation.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sqxtun2): Define builtin.\n\t* config/aarch64/aarch64-simd.md (aarch64_sqxtun2<mode>_le): Define.\n\t(aarch64_sqxtun2<mode>_be): Likewise.\n\t(aarch64_sqxtun2<mode>): Likewise.\n\t* config/aarch64/arm_neon.h (vqmovun_high_s16): Reimplement using builtin.\n\t(vqmovun_high_s32): Likewise.\n\t(vqmovun_high_s64): Likewise.\n\t* config/aarch64/iterators.md (UNSPEC_SQXTUN2): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust sqxtun2 scan.", "tree": {"sha": "53eaae50dbe49f42450ab069e16bd36f2ccaaebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53eaae50dbe49f42450ab069e16bd36f2ccaaebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831ff94a882149616b17132d23478c9d1fcbdcd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831ff94a882149616b17132d23478c9d1fcbdcd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831ff94a882149616b17132d23478c9d1fcbdcd6"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "2f50ecc6d2fcedd16f7e8a79e37c55d2e0282cee", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "patch": "@@ -241,6 +241,10 @@\n   BUILTIN_VQW (TERNOPU, umlsl_hi, 0, NONE)\n \n   BUILTIN_VSQN_HSDI (UNOPUS, sqmovun, 0, NONE)\n+\n+  /* Implemented by aarch64_sqxtun2<mode>.  */\n+  BUILTIN_VQN (BINOP_UUS, sqxtun2, 0, NONE)\n+\n   /* Implemented by aarch64_<sur>qmovn<mode>.  */\n   BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0, NONE)\n   BUILTIN_VSQN_HSDI (UNOP, uqmovn, 0, NONE)"}, {"sha": "eea5c87576d44908b49ed967b0605901cc264426", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "patch": "@@ -4256,6 +4256,45 @@\n   }\n )\n \n+(define_insn \"aarch64_sqxtun2<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (unspec:<VNARROWQ>\n+\t    [(match_operand:VQN 2 \"register_operand\" \"w\")] UNSPEC_SQXTUN2)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"sqxtun2\\\\t%0.<V2ntype>, %2.<Vtype>\"\n+   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_sqxtun2<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ>\n+\t    [(match_operand:VQN 2 \"register_operand\" \"w\")] UNSPEC_SQXTUN2)\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"sqxtun2\\\\t%0.<V2ntype>, %2.<Vtype>\"\n+   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_sqxtun2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (unspec:<VNARROWQ>\n+     [(match_operand:VQN 2 \"register_operand\")] UNSPEC_SQXTUN2)]\n+  \"TARGET_SIMD\"\n+  {\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_sqxtun2<mode>_be (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n+    else\n+      emit_insn (gen_aarch64_sqxtun2<mode>_le (operands[0], operands[1],\n+\t\t\t\t\t       operands[2]));\n+    DONE;\n+  }\n+)\n+\n ;; <su>q<absneg>\n \n (define_insn \"aarch64_s<optab><mode>\""}, {"sha": "e32f7ab91412adcfcbcce674c0775b85c9fd5777", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "patch": "@@ -9105,36 +9105,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovun_high_s16 (uint8x8_t __a, int16x8_t __b)\n {\n-  uint8x16_t __result = vcombine_u8 (__a, vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.16b, %1.8h\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtun2v8hi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovun_high_s32 (uint16x4_t __a, int32x4_t __b)\n {\n-  uint16x8_t __result = vcombine_u16 (__a, vcreate_u16 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.8h, %1.4s\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtun2v4si_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqmovun_high_s64 (uint32x2_t __a, int64x2_t __b)\n {\n-  uint32x4_t __result = vcombine_u32 (__a, vcreate_u32 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.4s, %1.2d\"\n-           : \"+w\"(__result)\n-           : \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sqxtun2v2di_uus (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t"}, {"sha": "fb6e228651eae6a2db8c1ac755885ae7ad9225d6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "patch": "@@ -522,6 +522,7 @@\n     UNSPEC_USQADD\t; Used in aarch64-simd.md.\n     UNSPEC_SUQADD\t; Used in aarch64-simd.md.\n     UNSPEC_SQXTUN\t; Used in aarch64-simd.md.\n+    UNSPEC_SQXTUN2\t; Used in aarch64-simd.md.\n     UNSPEC_SQXTN\t; Used in aarch64-simd.md.\n     UNSPEC_UQXTN\t; Used in aarch64-simd.md.\n     UNSPEC_SSRA\t\t; Used in aarch64-simd.md."}, {"sha": "6d9e831052540b55e3e9682500e1db803708d0c9", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=8fdfd0cfdb7ca6b083a2a6205c40f512ea4631a9", "patch": "@@ -121,5 +121,5 @@ ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n /* { dg-final { scan-assembler-times \"uqrshrn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"uqxtn2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"sqxtn2\\\\tv\" 3} }  */\n-/* { dg-final { scan-assembler-times \"sqxtun2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqxtun2\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 6} }  */"}]}