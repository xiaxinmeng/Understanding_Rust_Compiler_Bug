{"sha": "0ca8de87c419963448108ba0fde0d818bd18df79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhOGRlODdjNDE5OTYzNDQ4MTA4YmEwZmRlMGQ4MThiZDE4ZGY3OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-09T16:00:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-09T16:00:48Z"}, "message": "lto-symtab.c (lto_cgraph_replace_node): Use types_compatible_p for diagnostics.\n\n2011-05-09  Richard Guenther  <rguenther@suse.de>\n\n\t* lto-symtab.c (lto_cgraph_replace_node): Use types_compatible_p\n\tfor diagnostics.\n\t(lto_symtab_merge): Likewise.  Do not register types here.\n\t(lto_symtab_merge_decls_2): Likewise.\n\t(lto_symtab_merge_decls_1): Likewise.\n\t* gimple.h (enum gtc_mode, gimple_types_compatible_p): Do not declare.\n\t* gimple.c (enum gtc_mode): Declare.\n\t(gimple_types_compatible_p): Make static.\n\nFrom-SVN: r173575", "tree": {"sha": "a79ad85086404751a02141c8c0a58cefebf305df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79ad85086404751a02141c8c0a58cefebf305df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ca8de87c419963448108ba0fde0d818bd18df79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca8de87c419963448108ba0fde0d818bd18df79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca8de87c419963448108ba0fde0d818bd18df79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca8de87c419963448108ba0fde0d818bd18df79/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b04fa7381131433b4019acea6b8e95aadd60aec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fa7381131433b4019acea6b8e95aadd60aec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04fa7381131433b4019acea6b8e95aadd60aec4"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1f63e237cee6202f33d97a83f416205e22ca5443", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ca8de87c419963448108ba0fde0d818bd18df79", "patch": "@@ -1,3 +1,14 @@\n+2011-05-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-symtab.c (lto_cgraph_replace_node): Use types_compatible_p\n+\tfor diagnostics.\n+\t(lto_symtab_merge): Likewise.  Do not register types here.\n+\t(lto_symtab_merge_decls_2): Likewise.\n+\t(lto_symtab_merge_decls_1): Likewise.\n+\t* gimple.h (enum gtc_mode, gimple_types_compatible_p): Do not declare.\n+\t* gimple.c (enum gtc_mode): Declare.\n+\t(gimple_types_compatible_p): Make static.\n+\n 2011-05-09  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (TD/TF mem to reg move splitter): Make the"}, {"sha": "af866171b4f873068f84fbba49f8e2ee5ad32dda", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=0ca8de87c419963448108ba0fde0d818bd18df79", "patch": "@@ -3208,6 +3208,8 @@ gimple_call_copy_skip_args (gimple stmt, bitmap args_to_skip)\n }\n \n \n+enum gtc_mode { GTC_MERGE = 0, GTC_DIAG = 1 };\n+\n static hashval_t gimple_type_hash_1 (const void *, enum gtc_mode);\n \n /* Structure used to maintain a cache of some type pairs compared by\n@@ -3908,7 +3910,7 @@ gimple_types_compatible_p_1 (tree t1, tree t2, enum gtc_mode mode,\n    FOR_MERGING_P is true the an incomplete type and a complete type\n    are considered different, otherwise they are considered compatible.  */\n \n-bool\n+static bool\n gimple_types_compatible_p (tree t1, tree t2, enum gtc_mode mode)\n {\n   VEC(type_pair_t, heap) *sccstack = NULL;"}, {"sha": "064888812399ab431e6121ba3417b8071f557fc2", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0ca8de87c419963448108ba0fde0d818bd18df79", "patch": "@@ -965,8 +965,6 @@ extern void recalculate_side_effects (tree);\n extern bool gimple_compare_field_offset (tree, tree);\n extern tree gimple_register_type (tree);\n extern tree gimple_register_canonical_type (tree);\n-enum gtc_mode { GTC_MERGE = 0, GTC_DIAG = 1 };\n-extern bool gimple_types_compatible_p (tree, tree, enum gtc_mode);\n extern void print_gimple_types_stats (void);\n extern void free_gimple_type_tables (void);\n extern tree gimple_unsigned_type (tree);"}, {"sha": "8dc10e8e6c5ce25ff60c76b399b4cfce25c04a63", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca8de87c419963448108ba0fde0d818bd18df79/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=0ca8de87c419963448108ba0fde0d818bd18df79", "patch": "@@ -243,8 +243,8 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n \n   /* Redirect all incoming edges.  */\n   compatible_p\n-    = gimple_types_compatible_p (TREE_TYPE (TREE_TYPE (prevailing_node->decl)),\n-\t\t\t\t TREE_TYPE (TREE_TYPE (node->decl)), GTC_DIAG);\n+    = types_compatible_p (TREE_TYPE (TREE_TYPE (prevailing_node->decl)),\n+\t\t\t  TREE_TYPE (TREE_TYPE (node->decl)));\n   for (e = node->callers; e; e = next)\n     {\n       next = e->next_caller;\n@@ -360,8 +360,8 @@ lto_symtab_merge (lto_symtab_entry_t prevailing, lto_symtab_entry_t entry)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      if (!gimple_types_compatible_p (TREE_TYPE (prevailing_decl),\n-\t\t\t\t      TREE_TYPE (decl), GTC_DIAG))\n+      if (!types_compatible_p (TREE_TYPE (prevailing_decl),\n+\t\t\t       TREE_TYPE (decl)))\n \t/* If we don't have a merged type yet...sigh.  The linker\n \t   wouldn't complain if the types were mismatched, so we\n \t   probably shouldn't either.  Just use the type from\n@@ -390,11 +390,7 @@ lto_symtab_merge (lto_symtab_entry_t prevailing, lto_symtab_entry_t entry)\n   prevailing_type = TYPE_MAIN_VARIANT (TREE_TYPE (prevailing_decl));\n   type = TYPE_MAIN_VARIANT (TREE_TYPE (decl));\n \n-  /* We have to register and fetch canonical types here as the global\n-     fixup process didn't yet run.  */\n-  prevailing_type = gimple_register_type (prevailing_type);\n-  type = gimple_register_type (type);\n-  if (!gimple_types_compatible_p (prevailing_type, type, GTC_DIAG))\n+  if (!types_compatible_p (prevailing_type, type))\n     {\n       if (COMPLETE_TYPE_P (type))\n \treturn false;\n@@ -419,9 +415,7 @@ lto_symtab_merge (lto_symtab_entry_t prevailing, lto_symtab_entry_t entry)\n \t  if (TREE_CODE (tem1) != TREE_CODE (tem2))\n \t    return false;\n \n-\t  if (!gimple_types_compatible_p (gimple_register_type (tem1),\n-\t\t\t\t\t  gimple_register_type (tem2),\n-\t\t\t\t\t  GTC_DIAG))\n+\t  if (!types_compatible_p (tem1, tem2))\n \t    return false;\n \t}\n \n@@ -620,8 +614,7 @@ lto_symtab_merge_decls_2 (void **slot, bool diagnosed_p)\n   /* Diagnose all mismatched re-declarations.  */\n   FOR_EACH_VEC_ELT (tree, mismatches, i, decl)\n     {\n-      if (!gimple_types_compatible_p (TREE_TYPE (prevailing->decl),\n-\t\t\t\t      TREE_TYPE (decl), GTC_DIAG))\n+      if (!types_compatible_p (TREE_TYPE (prevailing->decl), TREE_TYPE (decl)))\n \tdiagnosed_p |= warning_at (DECL_SOURCE_LOCATION (decl), 0,\n \t\t\t\t   \"type of %qD does not match original \"\n \t\t\t\t   \"declaration\", decl);\n@@ -744,10 +737,6 @@ lto_symtab_merge_decls_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n       inform (DECL_SOURCE_LOCATION (prevailing->decl),\n \t      \"previously declared here\");\n \n-  /* Register and adjust types of the entries.  */\n-  for (e = (lto_symtab_entry_t) *slot; e; e = e->next)\n-    TREE_TYPE (e->decl) = gimple_register_type (TREE_TYPE (e->decl));\n-\n   /* Merge the chain to the single prevailing decl and diagnose\n      mismatches.  */\n   lto_symtab_merge_decls_2 (slot, diagnosed_p);"}]}