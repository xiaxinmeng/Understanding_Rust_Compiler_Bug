{"sha": "9411c061aaeae0be39c678e0885472c37b112141", "node_id": "C_kwDOANBUbNoAKDk0MTFjMDYxYWFlYWUwYmUzOWM2NzhlMDg4NTQ3MmMzN2IxMTIxNDE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-14T17:35:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-16T14:24:41Z"}, "message": "Refactor TypeBoundPredicate to be below the definition for SubstitutionRef\n\nThis means TypeBoundPredicate will now be able to inherit all behaviours\nof normal generics so we do not duplicate the work in handling generics\nit will also allow us to more easily check for unconstrained type\nparameters on traits.", "tree": {"sha": "7f25d69af3808678bae8bf88b051a5c723e4ea2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f25d69af3808678bae8bf88b051a5c723e4ea2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9411c061aaeae0be39c678e0885472c37b112141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9411c061aaeae0be39c678e0885472c37b112141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9411c061aaeae0be39c678e0885472c37b112141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9411c061aaeae0be39c678e0885472c37b112141/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dfc19647774cb26a0f735bda8006068a40cfba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfc19647774cb26a0f735bda8006068a40cfba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfc19647774cb26a0f735bda8006068a40cfba0"}], "stats": {"total": 178, "additions": 103, "deletions": 75}, "files": [{"sha": "bc1e76ef69f60fa2c487ca30625b584d9dde2018", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9411c061aaeae0be39c678e0885472c37b112141/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9411c061aaeae0be39c678e0885472c37b112141/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=9411c061aaeae0be39c678e0885472c37b112141", "patch": "@@ -67,6 +67,10 @@ TypeCheckBase::resolve_trait_path (HIR::TypePath &path)\n \n namespace TyTy {\n \n+TypeBoundPredicate::TypeBoundPredicate (DefId reference, Location locus)\n+  : reference (reference), locus (locus), args (nullptr)\n+{}\n+\n std::string\n TypeBoundPredicate::as_string () const\n {\n@@ -192,5 +196,55 @@ TypeBoundPredicateItem::needs_implementation () const\n   return !get_raw_item ()->is_optional ();\n }\n \n+// TypeBoundsMappings\n+\n+TypeBoundsMappings::TypeBoundsMappings (\n+  std::vector<TypeBoundPredicate> specified_bounds)\n+  : specified_bounds (specified_bounds)\n+{}\n+\n+std::vector<TypeBoundPredicate> &\n+TypeBoundsMappings::get_specified_bounds ()\n+{\n+  return specified_bounds;\n+}\n+\n+const std::vector<TypeBoundPredicate> &\n+TypeBoundsMappings::get_specified_bounds () const\n+{\n+  return specified_bounds;\n+}\n+\n+size_t\n+TypeBoundsMappings::num_specified_bounds () const\n+{\n+  return specified_bounds.size ();\n+}\n+\n+std::string\n+TypeBoundsMappings::raw_bounds_as_string () const\n+{\n+  std::string buf;\n+  for (size_t i = 0; i < specified_bounds.size (); i++)\n+    {\n+      const TypeBoundPredicate &b = specified_bounds.at (i);\n+      bool has_next = (i + 1) < specified_bounds.size ();\n+      buf += b.get_name () + (has_next ? \" + \" : \"\");\n+    }\n+  return buf;\n+}\n+\n+std::string\n+TypeBoundsMappings::bounds_as_string () const\n+{\n+  return \"bounds:[\" + raw_bounds_as_string () + \"]\";\n+}\n+\n+void\n+TypeBoundsMappings::add_bound (TypeBoundPredicate predicate)\n+{\n+  specified_bounds.push_back (predicate);\n+}\n+\n } // namespace TyTy\n } // namespace Rust"}, {"sha": "d1c2170ba340c28b5d0ab52808f54c8eb8cca928", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 49, "deletions": 75, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9411c061aaeae0be39c678e0885472c37b112141/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9411c061aaeae0be39c678e0885472c37b112141/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=9411c061aaeae0be39c678e0885472c37b112141", "patch": "@@ -108,92 +108,24 @@ class TypeBoundPredicateItem\n   const Resolver::TraitItemReference *trait_item_ref;\n };\n \n-class TypeBoundPredicate\n-{\n-public:\n-  TypeBoundPredicate (DefId reference, Location locus)\n-    : reference (reference), locus (locus), args (nullptr)\n-  {}\n-\n-  std::string as_string () const;\n-\n-  const Resolver::TraitReference *get () const;\n-\n-  Location get_locus () const { return locus; }\n-\n-  std::string get_name () const;\n-\n-  // check that this predicate is object-safe see:\n-  // https://doc.rust-lang.org/reference/items/traits.html#object-safety\n-  bool is_object_safe (bool emit_error, Location locus) const;\n-\n-  void apply_generic_arguments (HIR::GenericArgs *generic_args);\n-\n-  bool contains_item (const std::string &search) const;\n-\n-  TypeBoundPredicateItem\n-  lookup_associated_item (const std::string &search) const;\n-\n-  HIR::GenericArgs *get_generic_args () { return args; }\n-\n-  const HIR::GenericArgs *get_generic_args () const { return args; }\n-\n-  bool has_generic_args () const\n-  {\n-    if (args == nullptr)\n-      return false;\n-\n-    return args->has_generic_args ();\n-  }\n-\n-private:\n-  DefId reference;\n-  Location locus;\n-  HIR::GenericArgs *args;\n-};\n-\n class TypeBoundsMappings\n {\n protected:\n-  TypeBoundsMappings (std::vector<TypeBoundPredicate> specified_bounds)\n-    : specified_bounds (specified_bounds)\n-  {}\n+  TypeBoundsMappings (std::vector<TypeBoundPredicate> specified_bounds);\n \n public:\n-  std::vector<TypeBoundPredicate> &get_specified_bounds ()\n-  {\n-    return specified_bounds;\n-  }\n+  std::vector<TypeBoundPredicate> &get_specified_bounds ();\n \n-  const std::vector<TypeBoundPredicate> &get_specified_bounds () const\n-  {\n-    return specified_bounds;\n-  }\n+  const std::vector<TypeBoundPredicate> &get_specified_bounds () const;\n \n-  size_t num_specified_bounds () const { return specified_bounds.size (); }\n+  size_t num_specified_bounds () const;\n \n-  std::string raw_bounds_as_string () const\n-  {\n-    std::string buf;\n-    for (size_t i = 0; i < specified_bounds.size (); i++)\n-      {\n-\tconst TypeBoundPredicate &b = specified_bounds.at (i);\n-\tbool has_next = (i + 1) < specified_bounds.size ();\n-\tbuf += b.get_name () + (has_next ? \" + \" : \"\");\n-      }\n-    return buf;\n-  }\n+  std::string raw_bounds_as_string () const;\n \n-  std::string bounds_as_string () const\n-  {\n-    return \"bounds:[\" + raw_bounds_as_string () + \"]\";\n-  }\n+  std::string bounds_as_string () const;\n \n protected:\n-  void add_bound (TypeBoundPredicate predicate)\n-  {\n-    specified_bounds.push_back (predicate);\n-  }\n+  void add_bound (TypeBoundPredicate predicate);\n \n   std::vector<TypeBoundPredicate> specified_bounds;\n };\n@@ -1007,6 +939,48 @@ class SubstitutionRef\n   SubstitutionArgumentMappings used_arguments;\n };\n \n+class TypeBoundPredicate\n+{\n+public:\n+  TypeBoundPredicate (DefId reference, Location locus);\n+\n+  std::string as_string () const;\n+\n+  const Resolver::TraitReference *get () const;\n+\n+  Location get_locus () const { return locus; }\n+\n+  std::string get_name () const;\n+\n+  // check that this predicate is object-safe see:\n+  // https://doc.rust-lang.org/reference/items/traits.html#object-safety\n+  bool is_object_safe (bool emit_error, Location locus) const;\n+\n+  void apply_generic_arguments (HIR::GenericArgs *generic_args);\n+\n+  bool contains_item (const std::string &search) const;\n+\n+  TypeBoundPredicateItem\n+  lookup_associated_item (const std::string &search) const;\n+\n+  HIR::GenericArgs *get_generic_args () { return args; }\n+\n+  const HIR::GenericArgs *get_generic_args () const { return args; }\n+\n+  bool has_generic_args () const\n+  {\n+    if (args == nullptr)\n+      return false;\n+\n+    return args->has_generic_args ();\n+  }\n+\n+private:\n+  DefId reference;\n+  Location locus;\n+  HIR::GenericArgs *args;\n+};\n+\n // https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.VariantDef.html\n class VariantDef\n {"}]}