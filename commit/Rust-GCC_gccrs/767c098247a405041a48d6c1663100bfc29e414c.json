{"sha": "767c098247a405041a48d6c1663100bfc29e414c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3YzA5ODI0N2E0MDUwNDFhNDhkNmMxNjYzMTAwYmZjMjllNDE0Yw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-18T08:20:16Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-19T03:49:13Z"}, "message": "Fix middle-end/102395: reg_class having only NO_REGS and ALL_REGS.\n\nSo this is a simple fix is to just add to the assert that\nsclass and dclass are both greater than or equal to NO_REGS.\nNO_REGS is documented as the first register class so it should\nhave the value of 0.\n\ngcc/ChangeLog:\n\n\t* lra-constraints.c (check_and_process_move): Assert\n\tthat dclass and sclass are greater than or equal to NO_REGS.", "tree": {"sha": "2cd43fb885858c0ca8076417053c8934b882fb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cd43fb885858c0ca8076417053c8934b882fb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767c098247a405041a48d6c1663100bfc29e414c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767c098247a405041a48d6c1663100bfc29e414c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767c098247a405041a48d6c1663100bfc29e414c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767c098247a405041a48d6c1663100bfc29e414c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf74e7b57bc2e94fdd752d824fa221d1d529fad8"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "4d734548c3879076dd158ffec736b336f0e83847", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767c098247a405041a48d6c1663100bfc29e414c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767c098247a405041a48d6c1663100bfc29e414c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=767c098247a405041a48d6c1663100bfc29e414c", "patch": "@@ -1276,7 +1276,7 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n   sclass = dclass = NO_REGS;\n   if (REG_P (dreg))\n     dclass = get_reg_class (REGNO (dreg));\n-  gcc_assert (dclass < LIM_REG_CLASSES);\n+  gcc_assert (dclass < LIM_REG_CLASSES && dclass >= NO_REGS);\n   if (dclass == ALL_REGS)\n     /* ALL_REGS is used for new pseudos created by transformations\n        like reload of SUBREG_REG (see function\n@@ -1288,7 +1288,7 @@ check_and_process_move (bool *change_p, bool *sec_mem_p ATTRIBUTE_UNUSED)\n     return false;\n   if (REG_P (sreg))\n     sclass = get_reg_class (REGNO (sreg));\n-  gcc_assert (sclass < LIM_REG_CLASSES);\n+  gcc_assert (sclass < LIM_REG_CLASSES && sclass >= NO_REGS);\n   if (sclass == ALL_REGS)\n     /* See comments above.  */\n     return false;"}]}