{"sha": "e87f67eb5d8671bc7c98dbf10106fda34114b293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3ZjY3ZWI1ZDg2NzFiYzdjOThkYmYxMDEwNmZkYTM0MTE0YjI5Mw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-08T08:12:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:12:46Z"}, "message": "[Ada] Spurious visibility error on dynamic_predicate aspect in generic\n\nThis patch fixes a spurious error when verifying that the visibility of\nthe expression of an aspect has not changed between the freeze point of\nthe entity to which it applies, and the end of the enclosing declarative\npart. If the entity is a composite type its components must be made\ndirectly visible for the analysis of the expression. In a generic\ncontext this must be done explicitly at the end of the declarative part.\n\n2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): For an\n\tunanalized aspect in a generic context that has not been\n\tanalyzed yet, if the aspect applies to a type, place the type on\n\tthe scope stack to make its components visible, before checking\n\tconformance with the version of the expression analyzed at the\n\tfreeze point.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate8.adb, gnat.dg/predicate8_pkg.adb,\n\tgnat.dg/predicate8_pkg.ads: New testcase.\n\nFrom-SVN: r273197", "tree": {"sha": "53fc10cf58e2116f346a3564daa34930c9c264df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53fc10cf58e2116f346a3564daa34930c9c264df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e87f67eb5d8671bc7c98dbf10106fda34114b293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87f67eb5d8671bc7c98dbf10106fda34114b293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87f67eb5d8671bc7c98dbf10106fda34114b293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87f67eb5d8671bc7c98dbf10106fda34114b293/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19713b78d24d7d991d942e3de8f33585088bb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19713b78d24d7d991d942e3de8f33585088bb16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19713b78d24d7d991d942e3de8f33585088bb16"}], "stats": {"total": 192, "additions": 189, "deletions": 3}, "files": [{"sha": "687c4abefae558cddf9d2bb55dc7361d443cf3a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -1,3 +1,12 @@\n+2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): For an\n+\tunanalized aspect in a generic context that has not been\n+\tanalyzed yet, if the aspect applies to a type, place the type on\n+\tthe scope stack to make its components visible, before checking\n+\tconformance with the version of the expression analyzed at the\n+\tfreeze point.\n+\n 2019-07-05  Justin Squirek  <squirek@adacore.com>\n \n \t* checks.adb (Apply_Accessibility_Check): Add logic to fetch the"}, {"sha": "b62e2971defc1127d5fea32fe75aa9b70cf5776c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -3491,7 +3491,9 @@ package body Sem_Ch13 is\n \n                   --  Build the precondition/postcondition pragma\n \n-                  --  Add note about why we do NOT need Copy_Tree here???\n+                  --  We use Relocate_Node here rather than New_Copy_Tree\n+                  --  because subsequent visibility analysis of the aspect\n+                  --  depends on this sharing. This should be cleaned up???\n \n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n@@ -9358,10 +9360,20 @@ package body Sem_Ch13 is\n \n       else\n          --  In a generic context freeze nodes are not always generated, so\n-         --  analyze the expression now.\n+         --  analyze the expression now. If the aspect is for a type, this\n+         --  makes its potential components accessible.\n \n          if not Analyzed (Freeze_Expr) and then Inside_A_Generic then\n-            Preanalyze (Freeze_Expr);\n+            if A_Id = Aspect_Dynamic_Predicate\n+              or else A_Id = Aspect_Predicate\n+              or else A_Id = Aspect_Priority\n+            then\n+               Push_Type (Ent);\n+               Preanalyze (Freeze_Expr);\n+               Pop_Type (Ent);\n+            else\n+               Preanalyze (Freeze_Expr);\n+            end if;\n          end if;\n \n          --  Indicate that the expression comes from an aspect specification,"}, {"sha": "a5a44a557a73b461730c2808736e54bcd57ae48f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -1,3 +1,8 @@\n+2019-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate8.adb, gnat.dg/predicate8_pkg.adb,\n+\tgnat.dg/predicate8_pkg.ads: New testcase.\n+\n 2019-07-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83518"}, {"sha": "00196996afaf22a435dd0098191b1967a62b119e", "filename": "gcc/testsuite/gnat.dg/predicate8.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8.adb?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+\n+pragma Spark_Mode (On);\n+\n+with Predicate8_Pkg;\n+\n+procedure Predicate8 is\n+   package Ring_Buffer is new Predicate8_Pkg (Element_Type => Integer);\n+   use Ring_Buffer;\n+\n+   X : Ring_Buffer_Type (4);\n+\n+begin\n+   Put (X, 1);\n+end Predicate8;"}, {"sha": "20626d943935b0fcc9eb41f43608a5f04eb4dc59", "filename": "gcc/testsuite/gnat.dg/predicate8_pkg.adb", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.adb?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -0,0 +1,64 @@\n+pragma Spark_Mode (On);\n+\n+package body Predicate8_Pkg is\n+   function Empty\n+     (Buffer : in Ring_Buffer_Type) return Boolean\n+   is (Size (Buffer) = 0);\n+\n+   function Full\n+     (Buffer : in Ring_Buffer_Type) return Boolean\n+   is (Size (Buffer) = Buffer.Max_Size);\n+\n+   function Size\n+     (Buffer : in Ring_Buffer_Type) return Natural\n+   is (Buffer.Count);\n+\n+   function Free\n+     (Buffer : in Ring_Buffer_Type) return Natural\n+   is (Buffer.Max_Size - Size (Buffer));\n+\n+   function First\n+     (Buffer : in Ring_Buffer_Type) return Element_Type\n+   is (Buffer.Items (Buffer.Head));\n+\n+   function Last\n+     (Buffer : in Ring_Buffer_Type) return Element_Type\n+   is (Buffer.Items (Buffer.Tail));\n+\n+   procedure Get\n+     (Buffer   : in out Ring_Buffer_Type;\n+      Element  :    out Element_Type)\n+   is\n+   begin\n+      Element := Buffer.Items (Buffer.Head);\n+      Buffer  :=\n+        Buffer'Update\n+          (Head  =>\n+            (if Buffer.Head = Buffer.Max_Size then 1 else Buffer.Head + 1),\n+           Count => Buffer.Count - 1);\n+   end Get;\n+\n+   procedure Put\n+     (Buffer   : in out Ring_Buffer_Type;\n+      Element  : in     Element_Type)\n+   is\n+    begin\n+      if Buffer.Tail = Buffer.Max_Size then\n+         Buffer.Tail := 1;\n+      else\n+         Buffer.Tail := Buffer.Tail + 1;\n+      end if;\n+\n+      Buffer.Items (Buffer.Tail) := Element;\n+      Buffer.Count := Buffer.Count + 1;\n+   end Put;\n+\n+   procedure Clear\n+     (Buffer : in out Ring_Buffer_Type)\n+   is\n+   begin\n+      Buffer.Head  := 1;\n+      Buffer.Tail  := Buffer.Max_Size;\n+      Buffer.Count := 0;\n+   end Clear;\n+end Predicate8_Pkg;"}, {"sha": "fd25294ea389e85b97408607385007f0fb9d6394", "filename": "gcc/testsuite/gnat.dg/predicate8_pkg.ads", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87f67eb5d8671bc7c98dbf10106fda34114b293/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate8_pkg.ads?ref=e87f67eb5d8671bc7c98dbf10106fda34114b293", "patch": "@@ -0,0 +1,81 @@\n+pragma Spark_Mode (On);\n+\n+generic\n+  type Element_Type is private;\n+\n+package Predicate8_Pkg is\n+   pragma Annotate (GNATprove, Terminating, Predicate8_Pkg);\n+\n+   subtype Small_Natural  is Natural range 0 .. Natural'Last / 2;\n+   subtype Small_Positive is Natural range 1 .. Natural'Last / 2;\n+\n+   type Element_Array_Type is array (Small_Positive range <>) of Element_Type;\n+\n+   type Ring_Buffer_Type (Max_Size : Small_Positive) is private\n+     with Default_Initial_Condition => Empty (Ring_Buffer_Type);\n+\n+   function Empty\n+     (Buffer : in Ring_Buffer_Type) return Boolean;\n+\n+   function Full\n+     (Buffer : in Ring_Buffer_Type) return Boolean;\n+\n+   function Size\n+     (Buffer : in Ring_Buffer_Type) return Natural;\n+\n+   function Free\n+     (Buffer : in Ring_Buffer_Type) return Natural;\n+\n+   function First\n+     (Buffer : in Ring_Buffer_Type) return Element_Type\n+   with\n+     Pre => not Empty (Buffer);\n+\n+   function Last\n+     (Buffer : in Ring_Buffer_Type) return Element_Type\n+   with\n+     Pre => not Empty (Buffer);\n+\n+   procedure Get\n+     (Buffer   : in out Ring_Buffer_Type;\n+      Element  :    out Element_Type)\n+   with\n+     Pre   => not Empty (Buffer) and\n+              Size (Buffer) >= 1,\n+     Post  => not Full (Buffer) and then\n+              Element = First (Buffer'Old) and then\n+              Size (Buffer) = Size (Buffer'Old) - 1;\n+\n+   procedure Put\n+     (Buffer   : in out Ring_Buffer_Type;\n+      Element  : in     Element_Type)\n+   with\n+     Pre   => not Full (Buffer),\n+     Post  => not Empty (Buffer) and then\n+              Last (Buffer) = Element and then\n+              Size (Buffer) = Size (Buffer'Old) + 1;\n+\n+   procedure Clear\n+     (Buffer : in out Ring_Buffer_Type)\n+   with\n+     Post => Empty (Buffer) and then\n+             not Full (Buffer) and then\n+             Size (Buffer) = 0;\n+\n+private\n+   type Ring_Buffer_Type (Max_Size : Small_Positive) is record\n+      Count : Small_Natural  := 0;\n+      Head  : Small_Positive := 1;\n+      Tail  : Small_Positive := Max_Size;\n+      Items : Element_Array_Type (1 .. Max_Size);\n+   end record\n+     with Dynamic_Predicate =>\n+       (Max_Size <= Small_Positive'Last and\n+        Count    <= Max_Size and\n+        Head     <= Max_Size and\n+        Tail     <= Max_Size and\n+        ((Count = 0 and Tail = Max_Size and Head = 1) or\n+         (Count = Max_Size + Tail - Head + 1) or\n+         (Count = Tail - Head + 1)));\n+\n+end Predicate8_Pkg;"}]}