{"sha": "02ea1c7689351ad76d17e423dbc4e91badb921ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlYTFjNzY4OTM1MWFkNzZkMTdlNDIzZGJjNGU5MWJhZGI5MjFjYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-01-04T09:42:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-01-04T09:42:01Z"}, "message": "re PR rtl-optimization/83628 (performance regression when accessing arrays on alpha)\n\n\tPR target/83628\n\t* config/alpha/alpha.md (*sadd<modesuffix>): Use ASHIFT\n\tinstead of MULT rtx.  Update all corresponding splitters.\n\t(*saddl_se): Ditto.\n\t(*ssub<modesuffix>): Ditto.\n\t(*ssubl_se): Ditto.\n\t(*cmp_sadd_di): Update split patterns.\n\t(*cmp_sadd_si): Ditto.\n\t(*cmp_sadd_sidi): Ditto.\n\t(*cmp_ssub_di): Ditto.\n\t(*cmp_ssub_si): Ditto.\n\t(*cmp_ssub_sidi): Ditto.\n\t* config/alpha/predicates.md (const23_operand): New predicate.\n\t* config/alpha/alpha.c (alpha_rtx_costs) [PLUS, MINUS]:\n\tLook for ASHIFT, not MULT inner operand.\n\t(alpha_split_conditional_move): Update for *sadd<modesuffix> change.\n\ntestsuite/ChangeLog:\n\n\tPR target/83628\n\t* gcc.target/alpha/pr83628-1.c: New test.\n\t* gcc.target/alpha/pr83628-2.c: Ditto.\n\nFrom-SVN: r256228", "tree": {"sha": "c99c5ad75f8e659b2518af2f51ce0e9ba43285db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c99c5ad75f8e659b2518af2f51ce0e9ba43285db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ea1c7689351ad76d17e423dbc4e91badb921ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ea1c7689351ad76d17e423dbc4e91badb921ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ea1c7689351ad76d17e423dbc4e91badb921ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ea1c7689351ad76d17e423dbc4e91badb921ca/comments", "author": null, "committer": null, "parents": [{"sha": "6f3102fdbbfd0596c6f86a953a0e0a955ade4540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3102fdbbfd0596c6f86a953a0e0a955ade4540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3102fdbbfd0596c6f86a953a0e0a955ade4540"}], "stats": {"total": 150, "additions": 117, "deletions": 33}, "files": [{"sha": "f62f43f3dbfe44c368c837cfdfebe5bf9eb7721e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -1,3 +1,22 @@\n+2018-01-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83628\n+\t* config/alpha/alpha.md (*sadd<modesuffix>): Use ASHIFT\n+\tinstead of MULT rtx.  Update all corresponding splitters.\n+\t(*saddl_se): Ditto.\n+\t(*ssub<modesuffix>): Ditto.\n+\t(*ssubl_se): Ditto.\n+\t(*cmp_sadd_di): Update split patterns.\n+\t(*cmp_sadd_si): Ditto.\n+\t(*cmp_sadd_sidi): Ditto.\n+\t(*cmp_ssub_di): Ditto.\n+\t(*cmp_ssub_si): Ditto.\n+\t(*cmp_ssub_sidi): Ditto.\n+\t* config/alpha/predicates.md (const23_operand): New predicate.\n+\t* config/alpha/alpha.c (alpha_rtx_costs) [PLUS, MINUS]:\n+\tLook for ASHIFT, not MULT inner operand.\n+\t(alpha_split_conditional_move): Update for *sadd<modesuffix> change.\n+\n 2018-01-04  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/83669\n@@ -1204,9 +1223,9 @@\n \n 2018-01-02  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n-        * config/rs6000/rs6000-string.c (expand_block_move): Allow the use of\n-        unaligned VSX load/store on P8/P9.\n-        (expand_block_clear): Allow the use of unaligned VSX\n+\t* config/rs6000/rs6000-string.c (expand_block_move): Allow the use of\n+\tunaligned VSX load/store on P8/P9.\n+\t(expand_block_clear): Allow the use of unaligned VSX\n \tload/store on P8/P9.\n \n 2018-01-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>"}, {"sha": "2f6d118606a33cb66b72edfcfa9a20e9f0f03f65", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -1435,8 +1435,8 @@ alpha_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno, int *total,\n     case MINUS:\n       if (float_mode_p)\n \t*total = cost_data->fp_add;\n-      else if (GET_CODE (XEXP (x, 0)) == MULT\n-\t       && const48_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n+      else if (GET_CODE (XEXP (x, 0)) == ASHIFT\n+\t       && const23_operand (XEXP (XEXP (x, 0), 1), VOIDmode))\n \t{\n \t  *total = (rtx_cost (XEXP (XEXP (x, 0), 0), mode,\n \t\t\t      (enum rtx_code) outer_code, opno, speed)\n@@ -2963,8 +2963,8 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n \t  add_op = GEN_INT (f);\n \t  if (sext_add_operand (add_op, mode))\n \t    {\n-\t      tmp = gen_rtx_MULT (DImode, copy_rtx (subtarget),\n-\t\t\t\t  GEN_INT (diff));\n+\t      tmp = gen_rtx_ASHIFT (DImode, copy_rtx (subtarget),\n+\t\t\t\t    GEN_INT (exact_log2 (diff)));\n \t      tmp = gen_rtx_PLUS (DImode, tmp, add_op);\n \t      emit_insn (gen_rtx_SET (target, tmp));\n \t    }"}, {"sha": "7493f3e9d3510124212e3c4628176a6639a89a68", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -337,8 +337,8 @@\n   \"! sext_add_operand (operands[2], SImode) && INTVAL (operands[2]) > 0\n    && INTVAL (operands[2]) % 4 == 0\"\n   [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 0) (sign_extend:DI (plus:SI (mult:SI (match_dup 3)\n-\t\t\t\t\t\t\t(match_dup 5))\n+   (set (match_dup 0) (sign_extend:DI (plus:SI (ashift:SI (match_dup 3)\n+\t\t\t\t\t\t\t  (match_dup 5))\n \t\t\t\t\t       (match_dup 1))))]\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]) / 4;\n@@ -348,7 +348,7 @@\n     val /= 2, mult = 8;\n \n   operands[4] = GEN_INT (val);\n-  operands[5] = GEN_INT (mult);\n+  operands[5] = GEN_INT (exact_log2 (mult));\n })\n \n (define_split\n@@ -519,38 +519,38 @@\n (define_insn \"*sadd<modesuffix>\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r,r\")\n \t(plus:I48MODE\n-\t (mult:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t       (match_operand:I48MODE 2 \"const48_operand\" \"I,I\"))\n+\t (ashift:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t\t (match_operand:I48MODE 2 \"const23_operand\" \"I,I\"))\n \t (match_operand:I48MODE 3 \"sext_add_operand\" \"rI,O\")))]\n   \"\"\n   \"@\n-   s%2add<modesuffix> %1,%3,%0\n-   s%2sub<modesuffix> %1,%n3,%0\")\n+   s%P2add<modesuffix> %1,%3,%0\n+   s%P2sub<modesuffix> %1,%n3,%0\")\n \n (define_insn \"*saddl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t (plus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n+\t (plus:SI (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r,r\")\n+\t\t\t     (match_operand:SI 2 \"const23_operand\" \"I,I\"))\n \t\t  (match_operand:SI 3 \"sext_add_operand\" \"rI,O\"))))]\n   \"\"\n   \"@\n-   s%2addl %1,%3,%0\n-   s%2subl %1,%n3,%0\")\n+   s%P2addl %1,%3,%0\n+   s%P2subl %1,%n3,%0\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(sign_extend:DI\n-\t (plus:SI (mult:SI (match_operator:SI 1 \"comparison_operator\"\n+\t (plus:SI (ashift:SI (match_operator:SI 1 \"comparison_operator\"\n \t\t\t\t\t      [(match_operand 2)\n \t\t\t\t\t       (match_operand 3)])\n-\t\t\t   (match_operand:SI 4 \"const48_operand\"))\n+\t\t\t   (match_operand:SI 4 \"const23_operand\"))\n \t\t  (match_operand:SI 5 \"sext_add_operand\"))))\n    (clobber (match_operand:DI 6 \"reg_not_elim_operand\"))]\n   \"\"\n   [(set (match_dup 6) (match_dup 7))\n    (set (match_dup 0)\n-\t(sign_extend:DI (plus:SI (mult:SI (match_dup 8) (match_dup 4))\n+\t(sign_extend:DI (plus:SI (ashift:SI (match_dup 8) (match_dup 4))\n \t\t\t\t (match_dup 5))))]\n {\n   operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[1]), DImode,\n@@ -621,20 +621,20 @@\n (define_insn \"*ssub<modesuffix>\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n \t(minus:I48MODE\n-\t (mult:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r\")\n-\t\t       (match_operand:I48MODE 2 \"const48_operand\" \"I\"))\n+\t (ashift:I48MODE (match_operand:I48MODE 1 \"reg_not_elim_operand\" \"r\")\n+\t\t\t (match_operand:I48MODE 2 \"const23_operand\" \"I\"))\n \t\t  (match_operand:I48MODE 3 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"s%2sub<modesuffix> %1,%3,%0\")\n+  \"s%P2sub<modesuffix> %1,%3,%0\")\n \n (define_insn \"*ssubl_se\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (minus:SI (mult:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n-\t\t\t    (match_operand:SI 2 \"const48_operand\" \"I\"))\n+\t (minus:SI (ashift:SI (match_operand:SI 1 \"reg_not_elim_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const23_operand\" \"I\"))\n \t\t   (match_operand:SI 3 \"reg_or_8bit_operand\" \"rI\"))))]\n   \"\"\n-  \"s%2subl %1,%3,%0\")\n+  \"s%P2subl %1,%3,%0\")\n \n (define_insn \"subv<mode>3\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=r\")\n@@ -3075,9 +3075,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(plus:DI (mult:DI (match_dup 5) (match_dup 3))\n+\t(plus:DI (ashift:DI (match_dup 5) (match_dup 3))\n \t\t (match_dup 4)))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))\n@@ -3100,9 +3101,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(plus:SI (mult:SI (match_dup 6) (match_dup 3))\n+\t(plus:SI (ashift:SI (match_dup 6) (match_dup 3))\n \t\t (match_dup 4)))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))\n@@ -3128,9 +3130,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(sign_extend:DI (plus:SI (mult:SI (match_dup 6) (match_dup 3))\n+\t(sign_extend:DI (plus:SI (ashift:SI (match_dup 6) (match_dup 3))\n \t\t\t\t (match_dup 4))))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))\n@@ -3155,9 +3158,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(minus:DI (mult:DI (match_dup 5) (match_dup 3))\n+\t(minus:DI (ashift:DI (match_dup 5) (match_dup 3))\n \t\t  (match_dup 4)))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))\n@@ -3180,9 +3184,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(minus:SI (mult:SI (match_dup 6) (match_dup 3))\n+\t(minus:SI (ashift:SI (match_dup 6) (match_dup 3))\n \t\t (match_dup 4)))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))\n@@ -3208,9 +3213,10 @@\n   [(set (match_dup 5)\n \t(match_op_dup:DI 1 [(match_dup 2) (const_int 0)]))\n    (set (match_dup 0)\n-\t(sign_extend:DI (minus:SI (mult:SI (match_dup 6) (match_dup 3))\n+\t(sign_extend:DI (minus:SI (ashift:SI (match_dup 6) (match_dup 3))\n \t\t\t\t  (match_dup 4))))]\n {\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands [3])));\n   if (can_create_pseudo_p ())\n     operands[5] = gen_reg_rtx (DImode);\n   else if (reg_overlap_mentioned_p (operands[5], operands[4]))"}, {"sha": "d6789348894b40a37dab0caa4249980aa636336e", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -74,6 +74,11 @@\n   (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (not (match_test \"op == CONST0_RTX (mode)\"))))\n \n+;; Return 1 if OP is the constant 2 or 3.\n+(define_predicate \"const23_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 2 || INTVAL (op) == 3\")))\n+\n ;; Return 1 if OP is the constant 4 or 8.\n (define_predicate \"const48_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "3a93d177db6908c77b50afbd4cd194ca582dffbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -1,3 +1,9 @@\n+2018-01-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/83628\n+\t* gcc.target/alpha/pr83628-1.c: New test.\n+\t* gcc.target/alpha/pr83628-2.c: Ditto.\n+\n 2018-01-04  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/82352"}, {"sha": "a4a32d989693af2eeaed36a1e80f98aee224490d", "filename": "gcc/testsuite/gcc.target/alpha/pr83628-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-1.c?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/83628 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+int\n+get_int (int *p, size_t idx)\n+{\n+  return p[idx];\n+}\n+\n+long\n+get_long (long *p, size_t idx)\n+{\n+  return p[idx];\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]add\\[ql\\]\" } } */"}, {"sha": "0910d38be00df8afb4d6fcf0ffe35a57fca45cd7", "filename": "gcc/testsuite/gcc.target/alpha/pr83628-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ea1c7689351ad76d17e423dbc4e91badb921ca/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr83628-2.c?ref=02ea1c7689351ad76d17e423dbc4e91badb921ca", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/83628 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+s4l (int a, int b)\n+{\n+  return a + b * 4;\n+}\n+\n+int\n+s8l (int a, int b)\n+{\n+  return a + b * 8;\n+}\n+\n+long\n+s4q (long a, long b)\n+{\n+  return a + b * 4;\n+}\n+\n+long\n+s8q (long a, long b)\n+{\n+  return a + b * 8;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]add\\[ql\\]\" } } */"}]}