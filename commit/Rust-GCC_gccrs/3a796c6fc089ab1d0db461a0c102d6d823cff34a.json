{"sha": "3a796c6fc089ab1d0db461a0c102d6d823cff34a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3OTZjNmZjMDg5YWIxZDBkYjQ2MWEwYzEwMmQ2ZDgyM2NmZjM0YQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebpop@gmail.com", "date": "2007-07-23T22:30:38Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-07-23T22:30:38Z"}, "message": "tree-data-ref.c (find_vertex_for_stmt, [...]): New.\n\n\t* tree-data-ref.c (find_vertex_for_stmt, create_rdg_edge_for_ddr,\n\tcreate_rdg_edges_for_scalar, create_rdg_edges, create_rdg_vertices,\n\tstmts_from_loop, known_dependences_p, build_rdg): New.\n\t* tree-data-ref.h: Depends on graphds.h.\n\t(rdg_vertex, RDGV_STMT, rdg_dep_type, rdg_edge, RDGE_TYPE): New.\n\t(build_rdg): Declared.\n\t* Makefile.in (TREE_DATA_REF_H): Depends on graphds.h.\n\nFrom-SVN: r126859", "tree": {"sha": "26eb49b8909738f80720418d1592ee732c4f16b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26eb49b8909738f80720418d1592ee732c4f16b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a796c6fc089ab1d0db461a0c102d6d823cff34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a796c6fc089ab1d0db461a0c102d6d823cff34a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a796c6fc089ab1d0db461a0c102d6d823cff34a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a796c6fc089ab1d0db461a0c102d6d823cff34a/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "9d8ea76e64d3c76f3ea0b96ee4c5be6312454a21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a796c6fc089ab1d0db461a0c102d6d823cff34a", "patch": "@@ -1,3 +1,13 @@\n+2007-07-23  Sebastian Pop  <sebpop@gmail.com>\n+\n+\t* tree-data-ref.c (find_vertex_for_stmt, create_rdg_edge_for_ddr,\n+\tcreate_rdg_edges_for_scalar, create_rdg_edges, create_rdg_vertices,\n+\tstmts_from_loop, known_dependences_p, build_rdg): New.\n+\t* tree-data-ref.h: Depends on graphds.h.\n+\t(rdg_vertex, RDGV_STMT, rdg_dep_type, rdg_edge, RDGE_TYPE): New.\n+\t(build_rdg): Declared.\n+\t* Makefile.in (TREE_DATA_REF_H): Depends on graphds.h.\n+\n 2007-07-23  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-propagate.c (valid_gimple_expression_p): Match up with"}, {"sha": "dc1f3908640d074e72d4d4992c69db09b01ba589", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3a796c6fc089ab1d0db461a0c102d6d823cff34a", "patch": "@@ -812,7 +812,7 @@ DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H) options.h\n C_PRETTY_PRINT_H = c-pretty-print.h $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n SCEV_H = tree-scalar-evolution.h $(GGC_H) tree-chrec.h $(PARAMS_H)\n LAMBDA_H = lambda.h $(TREE_H) vec.h $(GGC_H)\n-TREE_DATA_REF_H = tree-data-ref.h $(LAMBDA_H) omega.h\n+TREE_DATA_REF_H = tree-data-ref.h $(LAMBDA_H) omega.h graphds.h\n VARRAY_H = varray.h $(MACHMODE_H) $(SYSTEM_H) coretypes.h $(TM_H)\n TREE_INLINE_H = tree-inline.h $(VARRAY_H) pointer-set.h\n REAL_H = real.h $(MACHMODE_H)"}, {"sha": "d217a2467232e7f4ac7d4d3aa8085d5c2a39e0b7", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=3a796c6fc089ab1d0db461a0c102d6d823cff34a", "patch": "@@ -4312,3 +4312,187 @@ free_data_refs (VEC (data_reference_p, heap) *datarefs)\n   VEC_free (data_reference_p, heap, datarefs);\n }\n \n+\f\n+\n+/* Returns the index of STMT in RDG.  */\n+\n+static int\n+find_vertex_for_stmt (struct graph *rdg, tree stmt)\n+{\n+  int i;\n+\n+  for (i = 0; i < rdg->n_vertices; i++)\n+    if (RDGV_STMT (&(rdg->vertices[i])) == stmt)\n+      return i;\n+\n+  gcc_unreachable ();\n+  return 0;\n+}\n+\n+/* Creates an edge in RDG for each distance vector from DDR.  */\n+\n+static void\n+create_rdg_edge_for_ddr (struct graph *rdg, ddr_p ddr)\n+{\n+  int va, vb;\n+  data_reference_p dra;\n+  data_reference_p drb;\n+  struct graph_edge *e;\n+\n+  if (DDR_REVERSED_P (ddr))\n+    {\n+      dra = DDR_B (ddr);\n+      drb = DDR_A (ddr);\n+    }\n+  else\n+    {\n+      dra = DDR_A (ddr);\n+      drb = DDR_B (ddr);\n+    }\n+\n+  va = find_vertex_for_stmt (rdg, DR_STMT (dra));\n+  vb = find_vertex_for_stmt (rdg, DR_STMT (drb));\n+\n+  e = add_edge (rdg, va, vb);\n+  e->data = XNEW (struct rdg_edge);\n+\n+  /* Determines the type of the data dependence.  */\n+  if (DR_IS_READ (dra) && DR_IS_READ (drb))\n+    RDGE_TYPE (e) = input_dd;\n+  else if (!DR_IS_READ (dra) && !DR_IS_READ (drb))\n+    RDGE_TYPE (e) = output_dd;\n+  else if (!DR_IS_READ (dra) && DR_IS_READ (drb))\n+    RDGE_TYPE (e) = flow_dd;\n+  else if (DR_IS_READ (dra) && !DR_IS_READ (drb))\n+    RDGE_TYPE (e) = anti_dd;\n+}\n+\n+/* Creates dependence edges in RDG for all the uses of DEF.  IDEF is\n+   the index of DEF in RDG.  */\n+\n+static void\n+create_rdg_edges_for_scalar (struct graph *rdg, tree def, int idef)\n+{\n+  use_operand_p imm_use_p;\n+  imm_use_iterator iterator;\n+           \n+  FOR_EACH_IMM_USE_FAST (imm_use_p, iterator, def)\n+    {\n+      int use = find_vertex_for_stmt (rdg, USE_STMT (imm_use_p));\n+      struct graph_edge *e = add_edge (rdg, idef, use);\n+\n+      e->data = XNEW (struct rdg_edge);\n+      RDGE_TYPE (e) = flow_dd;\n+    }\n+}\n+\n+/* Creates the edges of the reduced dependence graph RDG.  */\n+\n+static void\n+create_rdg_edges (struct graph *rdg, VEC (ddr_p, heap) *ddrs)\n+{\n+  int i;\n+  struct data_dependence_relation *ddr;\n+  def_operand_p def_p;\n+  ssa_op_iter iter;\n+\n+  for (i = 0; VEC_iterate (ddr_p, ddrs, i, ddr); i++)\n+    if (DDR_ARE_DEPENDENT (ddr) == NULL_TREE)\n+      create_rdg_edge_for_ddr (rdg, ddr);\n+\n+  for (i = 0; i < rdg->n_vertices; i++)\n+    FOR_EACH_PHI_OR_STMT_DEF (def_p, RDGV_STMT (&(rdg->vertices[i])),\n+\t\t\t      iter, SSA_OP_ALL_DEFS)\n+      create_rdg_edges_for_scalar (rdg, DEF_FROM_PTR (def_p), i);\n+}\n+\n+/* Build the vertices of the reduced dependence graph RDG.  */\n+\n+static void\n+create_rdg_vertices (struct graph *rdg, VEC (tree, heap) *stmts)\n+{\n+  int i;\n+  tree s;\n+\n+  for (i = 0; VEC_iterate (tree, stmts, i, s); i++)\n+    {\n+      struct vertex *v = &(rdg->vertices[i]);\n+\n+      v->data = XNEW (struct rdg_vertex);\n+      RDGV_STMT (v) = s;\n+    }\n+}\n+\n+/* Initialize STMTS with all the statements and PHI nodes of LOOP.  */\n+\n+static void\n+stmts_from_loop (struct loop *loop, VEC (tree, heap) **stmts)\n+{\n+  unsigned int i;\n+  basic_block *bbs = get_loop_body_in_dom_order (loop);\n+\n+  for (i = 0; i < loop->num_nodes; i++)\n+    {\n+      tree phi;\n+      basic_block bb = bbs[i];\n+      block_stmt_iterator bsi;\n+\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\tVEC_safe_push (tree, heap, *stmts, phi);\n+\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\tVEC_safe_push (tree, heap, *stmts, bsi_stmt (bsi));\n+    }\n+\n+  free (bbs);\n+}\n+\n+/* Returns true when all the dependences are computable.  */\n+\n+static bool\n+known_dependences_p (VEC (ddr_p, heap) *dependence_relations)\n+{\n+  ddr_p ddr;\n+  unsigned int i;\n+\n+  for (i = 0; VEC_iterate (ddr_p, dependence_relations, i, ddr); i++)\n+    if (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know)\n+      return false;\n+ \n+  return true;\n+}\n+\n+/* Build a Reduced Dependence Graph with one vertex per statement of the\n+   loop nest and one edge per data dependence or scalar dependence.  */\n+\n+struct graph *\n+build_rdg (struct loop *loop)\n+{\n+  int nb_data_refs = 10;\n+  struct graph *rdg = NULL;\n+  VEC (ddr_p, heap) *dependence_relations;\n+  VEC (data_reference_p, heap) *datarefs;\n+  VEC (tree, heap) *stmts = VEC_alloc (tree, heap, 10);\n+  \n+  dependence_relations = VEC_alloc (ddr_p, heap, nb_data_refs * nb_data_refs) ;\n+  datarefs = VEC_alloc (data_reference_p, heap, nb_data_refs);\n+  compute_data_dependences_for_loop (loop, \n+                                     false,\n+                                     &datarefs,\n+                                     &dependence_relations);\n+  \n+  if (!known_dependences_p (dependence_relations))\n+    goto end_rdg;\n+\n+  stmts_from_loop (loop, &stmts);\n+  rdg = new_graph (VEC_length (tree, stmts));\n+  create_rdg_vertices (rdg, stmts);\n+  create_rdg_edges (rdg, dependence_relations);\n+\n+ end_rdg:\n+  free_dependence_relations (dependence_relations);\n+  free_data_refs (datarefs);\n+  VEC_free (tree, heap, stmts);\n+\n+  return rdg;\n+}"}, {"sha": "b5a66404e12ba051058435ee490b36229772da90", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a796c6fc089ab1d0db461a0c102d6d823cff34a/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=3a796c6fc089ab1d0db461a0c102d6d823cff34a", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #ifndef GCC_TREE_DATA_REF_H\n #define GCC_TREE_DATA_REF_H\n \n+#include \"graphds.h\"\n #include \"lambda.h\"\n #include \"omega.h\"\n \n@@ -329,6 +330,46 @@ bool find_loop_nest (struct loop *, VEC (loop_p, heap) **);\n void compute_all_dependences (VEC (data_reference_p, heap) *,\n \t\t\t      VEC (ddr_p, heap) **, VEC (loop_p, heap) *, bool);\n \n+\f\n+\n+/* A RDG vertex representing a statement.  */\n+typedef struct rdg_vertex\n+{\n+  /* The statement represented by this vertex.  */\n+  tree stmt;\n+} *rdg_vertex_p;\n+\n+#define RDGV_STMT(V)       ((struct rdg_vertex *) ((V)->data))->stmt\n+\n+/* Data dependence type.  */\n+\n+enum rdg_dep_type \n+{\n+  /* Read After Write (RAW).  */\n+  flow_dd = 'f',\n+  \n+  /* Write After Read (WAR).  */\n+  anti_dd = 'a',\n+  \n+  /* Write After Write (WAW).  */\n+  output_dd = 'o', \n+  \n+  /* Read After Read (RAR).  */\n+  input_dd = 'i' \n+};\n+\n+/* Dependence information attached to an edge of the RDG.  */\n+\n+typedef struct rdg_edge \n+{\n+  /* Type of the dependence.  */\n+  enum rdg_dep_type type;\n+} *rdg_edge_p;\n+\n+#define RDGE_TYPE(E)        ((struct rdg_edge *) ((E)->data))->type\n+\n+struct graph *build_rdg (struct loop *);\n+\n /* Return the index of the variable VAR in the LOOP_NEST array.  */\n \n static inline int"}]}