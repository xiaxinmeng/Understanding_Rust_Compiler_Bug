{"sha": "83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNjdjMGNkN2ZkMTFmNmNhNmE4OGQyZTdkYjU5NGVmNzQ0OTQ1NA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2019-01-30T15:01:40Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2019-01-30T15:01:40Z"}, "message": "rs6000-c.c (altivec-resolve_overloaded_builtin): Change handling of ALTIVEC_BUILTIN_VEC_EXTRACT.\n\ngcc/ChangeLog:\n\n2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-c.c (altivec-resolve_overloaded_builtin):\n\tChange handling of ALTIVEC_BUILTIN_VEC_EXTRACT.  Coerce result to\n\ttype of vector element when vec_extract is implemented by direct\n\tmove.\n\ngcc/testsuite/ChangeLog:\n\n2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-extract-schar-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-sint-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-sint128-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-slong-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-sshort-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-uchar-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-uint-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-uint128-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-ulong-1.c: New test.\n\t* gcc.target/powerpc/vec-extract-ushort-1.c: New test.\n\nFrom-SVN: r268391", "tree": {"sha": "28890fbd53dd762c8eb9a05c9f391c8fc9e1ae6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28890fbd53dd762c8eb9a05c9f391c8fc9e1ae6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/comments", "author": null, "committer": null, "parents": [{"sha": "c7e503a5922d1926cd9e03e7919fc5180dcefb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e503a5922d1926cd9e03e7919fc5180dcefb56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e503a5922d1926cd9e03e7919fc5180dcefb56"}], "stats": {"total": 310, "additions": 309, "deletions": 1}, "files": [{"sha": "e63082a724937b03b153e001bb7b0a40eedcc267", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -1,3 +1,10 @@\n+2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-c.c (altivec-resolve_overloaded_builtin):\n+\tChange handling of ALTIVEC_BUILTIN_VEC_EXTRACT.  Coerce result to\n+\ttype of vector element when vec_extract is implemented by direct\n+\tmove.\n+\n 2019-01-30  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* doc/invoke.texi (C Language Options): List \"-fopenacc-dim\"."}, {"sha": "ae39eb77ea1d6245bf98942517839ab2a0a708c5", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -6645,7 +6645,13 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    }\n \n \t  if (call)\n-\t    return build_call_expr (call, 2, arg1, arg2);\n+\t    {\n+\t      tree result = build_call_expr (call, 2, arg1, arg2);\n+\t      /* Coerce the result to vector element type.  May be no-op.  */\n+\t      arg1_inner_type = TREE_TYPE (arg1_type);\n+\t      result = fold_convert (arg1_inner_type, result);\n+\t      return result;\n+\t    }\n \t}\n \n       /* Build *(((arg1_inner_type*)&(vector type){arg1})+arg2). */"}, {"sha": "3d02efb8ade42ac9922835bb2211dbe47c2693c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -1,3 +1,16 @@\n+2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-extract-schar-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-sint-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-sint128-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-slong-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-sshort-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-uchar-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-uint-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-uint128-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-ulong-1.c: New test.\n+\t* gcc.target/powerpc/vec-extract-ushort-1.c: New test.\n+\t\n 2019-01-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89111"}, {"sha": "bd4d8b62f360a1c9dcf4abe48ba6283d75a919e8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-schar-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-schar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-schar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-schar-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed chars remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(signed char sc) {\n+  int sce;\n+\n+  vector signed char v = vec_splats(sc);\n+  sce = vec_extract(v,0);\n+\n+  if (sce != sc)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf6);\n+  test1 (0x76);\n+  test1 (0x06);\n+  return 0;\n+}"}, {"sha": "9e32de3c60d74ac079a89c5981b75c88e9230332", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-sint-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed ints remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(signed int si) {\n+  long long int sie;\n+\n+  vector signed int v = vec_splats(si);\n+  sie = vec_extract(v,0);\n+\n+  if (sie != si)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf6000000);\n+  test1 (0x76000000);\n+  test1 (0x06000000);\n+  return 0;\n+}"}, {"sha": "7e160740e21e1e48f398a5384ac8dca0b5f3289c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-sint128-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sint128-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,27 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed __int128s remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(signed __int128 st) {\n+\n+  vector signed __int128 v = vec_splats(st);\n+\n+  if (vec_extract (v, 0) > st)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (((__int128) 0xf600000000000000LL) << 64);\n+  test1 (((__int128) 0x7600000000000000LL) << 64);\n+  test1 (((__int128) 0x0600000000000000LL) << 64);\n+  return 0;\n+}"}, {"sha": "9b341272419ca8e4c151bac393330d7c3c48f6b1", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-slong-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-slong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-slong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-slong-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,27 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed longs remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(signed long long int sl) {\n+\n+  vector signed long long int v = vec_splats(sl);\n+\n+  if (vec_extract (v, 0) > sl)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf600000000000000LL);\n+  test1 (0x7600000000000000LL);\n+  test1 (0x0600000000000000LL);\n+  return 0;\n+}"}, {"sha": "24d2e28bf920391d880ddb0240d265b4d08b4f00", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-sshort-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sshort-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sshort-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-sshort-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed shorts remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(signed short ss) {\n+  int sse;\n+\n+  vector signed short v = vec_splats(ss);\n+  sse = vec_extract(v,0);\n+\n+  if (sse != ss)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf600);\n+  test1 (0x7600);\n+  test1 (0x0600);\n+  return 0;\n+}"}, {"sha": "ed4cb0ac67d1bab10856c8d0f0bfe8fdd2ba495a", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-uchar-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uchar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uchar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uchar-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   unsigned chars remains unsigned.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(unsigned char uc) {\n+  int uce;\n+\n+  vector unsigned char v = vec_splats(uc);\n+  uce = vec_extract(v,0);\n+\n+  if (uce != uc)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf6);\n+  test1 (0x76);\n+  test1 (0x06);\n+  return 0;\n+}"}, {"sha": "aa485f7c0254e81fa4e6e9050379a4a72fd62907", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-uint-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   unsigned ints remains unsigned.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(unsigned int ui) {\n+  long long int uie;\n+\n+  vector unsigned int v = vec_splats(ui);\n+  uie = vec_extract(v,0);\n+\n+  if (uie != ui)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf6000000);\n+  test1 (0x76000000);\n+  test1 (0x06000000);\n+  return 0;\n+}"}, {"sha": "a4ff9c7f831dc74a0077d48df01a887ccfe1ee29", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-uint128-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-uint128-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,27 @@\n+/* Test to verify that the vec_extract from a vector of\n+   unsigned __int128s remains unsigned.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(unsigned __int128 ul) {\n+\n+  vector unsigned __int128 v = vec_splats(ul);\n+\n+  if (vec_extract (v, 0) < ul)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (((__int128) 0xf600000000000000LL) << 64);\n+  test1 (((__int128) 0x7600000000000000LL) << 64);\n+  test1 (((__int128) 0x0600000000000000LL) << 64);\n+  return 0;\n+}"}, {"sha": "be9d6a68766b4d99a6551e637aa84343f5d2f1b0", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-ulong-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ulong-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ulong-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ulong-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,27 @@\n+/* Test to verify that the vec_extract from a vector of\n+   unsigned longs remains unsigned.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(unsigned long long int ul) {\n+\n+  vector unsigned long long int v = vec_splats(ul);\n+\n+  if (vec_extract (v, 0) < ul)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf600000000000000LL);\n+  test1 (0x7600000000000000LL);\n+  test1 (0x0600000000000000LL);\n+  return 0;\n+}"}, {"sha": "1c36832c60d004e82b264c182575affd280967c2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-extract-ushort-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ushort-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a67c0cd7fd11f6ca6a88d2e7db594ef7449454/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ushort-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-extract-ushort-1.c?ref=83a67c0cd7fd11f6ca6a88d2e7db594ef7449454", "patch": "@@ -0,0 +1,29 @@\n+/* Test to verify that the vec_extract from a vector of\n+   signed shorts remains signed.  */\n+/* { dg-do run } */\n+/* { dg-options \"-ansi -mcpu=power8 \" } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int test1(unsigned short us) {\n+  int use;\n+\n+  vector unsigned short v = vec_splats(us);\n+  use = vec_extract(v,0);\n+\n+  if (use != us)\n+    abort();\n+  return 0;\n+}\n+\n+int main()\n+{\n+  test1 (0xf600);\n+  test1 (0x7600);\n+  test1 (0x0600);\n+  return 0;\n+}"}]}