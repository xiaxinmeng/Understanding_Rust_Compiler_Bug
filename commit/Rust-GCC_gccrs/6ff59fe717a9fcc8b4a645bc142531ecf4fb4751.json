{"sha": "6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmNTlmZTcxN2E5ZmNjOGI0YTY0NWJjMTQyNTMxZWNmNGZiNDc1MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2005-05-02T21:17:37Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-05-02T21:17:37Z"}, "message": "mmix.opt: New file.\n\n\t* config/mmix/mmix.opt: New file.\n\t* config/mmix/mmix.h: Move options-related comments to mmix.opt.\n \t(mmix_cc1_ignored_option): Don't declare.\n\t(TARGET_OPTIONS, TARGET_MASK_LIBFUNCS, TARGET_MASK_ABI_GNU)\n\t(TARGET_MASK_FCMP_EPSILON, TARGET_MASK_ZERO_EXTEND)\n\t(TARGET_MASK_KNUTH_DIVISION, TARGET_MASK_TOPLEVEL_SYMBOLS)\n\t(TARGET_MASK_BRANCH_PREDICT, TARGET_MASK_USE_RETURN_INSN)\n\t(TARGET_MASK_BASE_ADDRESSES, TARGET_LIBFUNC, TARGET_ABI_GNU,\n\t(TARGET_FCMP_EPSILON, TARGET_ZERO_EXTEND, TARGET_KNUTH_DIVISION)\n\t(TARGET_TOPLEVEL_SYMBOLS, TARGET_BRANCH_PREDICT)\n\t(TARGET_BASE_ADDRESSES, TARGET_USE_RETURN_INSN, TARGET_SWITCHES):\n\tDon't define.\n\t(TARGET_DEFAULT): Change TARGET_MASK_... to MASK_...\n\t* config/mmix/mmix.c (mmix_cc1_ignored_option): Remove.\n\t(TARGET_DEFAULT_TARGET_FLAGS): Override default.\n\nFrom-SVN: r99122", "tree": {"sha": "d9821c4e11c438b7f285a3e241b818cc8f2212bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9821c4e11c438b7f285a3e241b818cc8f2212bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/comments", "author": null, "committer": null, "parents": [{"sha": "aff447417f3d5cd331129f0646d5da16e915b3fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff447417f3d5cd331129f0646d5da16e915b3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff447417f3d5cd331129f0646d5da16e915b3fe"}], "stats": {"total": 208, "additions": 121, "deletions": 87}, "files": [{"sha": "f0a7f151e45777ac2b6c575c6cb2be8b6cef50ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "patch": "@@ -1,3 +1,21 @@\n+2005-05-02  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.opt: New file.\n+\t* config/mmix/mmix.h: Move options-related comments to mmix.opt.\n+ \t(mmix_cc1_ignored_option): Don't declare.\n+\t(TARGET_OPTIONS, TARGET_MASK_LIBFUNCS, TARGET_MASK_ABI_GNU)\n+\t(TARGET_MASK_FCMP_EPSILON, TARGET_MASK_ZERO_EXTEND)\n+\t(TARGET_MASK_KNUTH_DIVISION, TARGET_MASK_TOPLEVEL_SYMBOLS)\n+\t(TARGET_MASK_BRANCH_PREDICT, TARGET_MASK_USE_RETURN_INSN)\n+\t(TARGET_MASK_BASE_ADDRESSES, TARGET_LIBFUNC, TARGET_ABI_GNU,\n+\t(TARGET_FCMP_EPSILON, TARGET_ZERO_EXTEND, TARGET_KNUTH_DIVISION)\n+\t(TARGET_TOPLEVEL_SYMBOLS, TARGET_BRANCH_PREDICT)\n+\t(TARGET_BASE_ADDRESSES, TARGET_USE_RETURN_INSN, TARGET_SWITCHES):\n+\tDon't define.\n+\t(TARGET_DEFAULT): Change TARGET_MASK_... to MASK_...\n+\t* config/mmix/mmix.c (mmix_cc1_ignored_option): Remove.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Override default.\n+\n 2005-05-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/15698"}, {"sha": "7ee39cd6f1e89461b0bc9cf9eca5c0bc8635af9a", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "patch": "@@ -107,11 +107,6 @@ Boston, MA 02111-1307, USA.  */\n rtx mmix_compare_op0;\n rtx mmix_compare_op1;\n \n-/* We ignore some options with arguments.  They are passed to the linker,\n-   but also ends up here because they start with \"-m\".  We tell the driver\n-   to store them in a variable we don't inspect.  */\n-const char *mmix_cc1_ignored_option;\n-\n /* Declarations of locals.  */\n \n /* Intermediate for insn output.  */\n@@ -209,6 +204,8 @@ static bool mmix_pass_by_reference (const CUMULATIVE_ARGS *,\n #define TARGET_PASS_BY_REFERENCE mmix_pass_by_reference\n #undef TARGET_CALLEE_COPIES\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "52aa98cfc25d1079f9e9bb4d1896459a61bd0304", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "patch": "@@ -124,15 +124,6 @@ struct machine_function GTY(())\n      %{!r:--defsym __.MMIX.start..text=0x100}}}\\\n   %{!melf:%{!r:-m mmo}}%{melf|r:-m elf64mmix}\"\n \n-/* Put unused option values here.  */\n-extern const char *mmix_cc1_ignored_option;\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\\\n-   {{\"set-program-start=\", &mmix_cc1_ignored_option,\t\\\n-  N_(\"Set start-address of the program\"), 0},\t\t\\\n-    {\"set-data-start=\", &mmix_cc1_ignored_option,\t\\\n-  N_(\"Set start-address of data\"), 0} }\n-\n /* FIXME: There's no provision for profiling here.  */\n #define STARTFILE_SPEC  \\\n   \"crti%O%s crtbegin%O%s\"\n@@ -156,80 +147,8 @@ extern const char *mmix_cc1_ignored_option;\n \n extern int target_flags;\n \n-#define TARGET_MASK_LIBFUNCS 1\n-#define TARGET_MASK_ABI_GNU 2\n-#define TARGET_MASK_FCMP_EPSILON 4\n-#define TARGET_MASK_ZERO_EXTEND 8\n-#define TARGET_MASK_KNUTH_DIVISION 16\n-#define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n-#define TARGET_MASK_BRANCH_PREDICT 64\n-#define TARGET_MASK_USE_RETURN_INSN 128\n-\n-/* We use the term \"base address\" since that's what Knuth uses.  The base\n-   address goes in a global register.  When addressing, it's more like\n-   \"base address plus offset\", with the offset being 0..255 from the base,\n-   which itself can be a symbol plus an offset.  The effect is like having\n-   a constant pool in global registers, code offsetting from those\n-   registers (automatically causing a request for a suitable constant base\n-   address register) without having to know the specific register or the\n-   specific offset.  The setback is that there's a limited number of\n-   registers, and you'll not find out until link time whether you\n-   should have compiled with -mno-base-addresses.  */\n-#define TARGET_MASK_BASE_ADDRESSES 128\n-\n-/* FIXME: Get rid of this one.  */\n-#define TARGET_LIBFUNC (target_flags & TARGET_MASK_LIBFUNCS)\n-#define TARGET_ABI_GNU (target_flags & TARGET_MASK_ABI_GNU)\n-#define TARGET_FCMP_EPSILON (target_flags & TARGET_MASK_FCMP_EPSILON)\n-#define TARGET_ZERO_EXTEND (target_flags & TARGET_MASK_ZERO_EXTEND)\n-#define TARGET_KNUTH_DIVISION (target_flags & TARGET_MASK_KNUTH_DIVISION)\n-#define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n-#define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n-#define TARGET_BASE_ADDRESSES (target_flags & TARGET_MASK_BASE_ADDRESSES)\n-#define TARGET_USE_RETURN_INSN (target_flags & TARGET_MASK_USE_RETURN_INSN)\n-\n #define TARGET_DEFAULT \\\n- (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_BASE_ADDRESSES \\\n-  | TARGET_MASK_USE_RETURN_INSN)\n-\n-/* FIXME: Provide a way to *load* the epsilon register.  */\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n- {{\"libfuncs\",\t\tTARGET_MASK_LIBFUNCS,\t\t\t\t\\\n-   N_(\"For intrinsics library: pass all parameters in registers\")},\t\\\n-  {\"no-libfuncs\",\t-TARGET_MASK_LIBFUNCS, \"\"},\t\t\t\\\n-  {\"abi=mmixware\",\t-TARGET_MASK_ABI_GNU,\t\t\t\t\\\n-   N_(\"Use register stack for parameters and return value\")},\t\t\\\n-  {\"abi=gnu\",\t\tTARGET_MASK_ABI_GNU,\t\t\t\t\\\n-   N_(\"Use call-clobbered registers for parameters and return value\")},\t\\\n-  {\"epsilon\",\t\tTARGET_MASK_FCMP_EPSILON,\t\t\t\\\n-   N_(\"Use epsilon-respecting floating point compare instructions\")},\t\\\n-  {\"no-epsilon\",\t-TARGET_MASK_FCMP_EPSILON, \"\"},\t\t\t\\\n-  {\"zero-extend\",\tTARGET_MASK_ZERO_EXTEND,\t\t\t\\\n-   N_(\"Use zero-extending memory loads, not sign-extending ones\")},\t\\\n-  {\"no-zero-extend\",\t-TARGET_MASK_ZERO_EXTEND,  \"\"},\t\t\t\\\n-  {\"knuthdiv\",\t\tTARGET_MASK_KNUTH_DIVISION,\t\t\t\\\n-   N_(\"Generate divide results with reminder having the same sign as the\\\n- divisor (not the dividend)\")},\t\t\t\t\t\t\\\n-  {\"no-knuthdiv\",\t-TARGET_MASK_KNUTH_DIVISION, \"\"},\t\t\\\n-  {\"toplevel-symbols\",\tTARGET_MASK_TOPLEVEL_SYMBOLS,\t\t\t\\\n-   N_(\"Prepend global symbols with \\\":\\\" (for use with PREFIX)\")},\t\\\n-  {\"no-toplevel-symbols\", -TARGET_MASK_TOPLEVEL_SYMBOLS,\t\t\\\n-   N_(\"Do not provide a default start-address 0x100 of the program\")},\t\\\n-  {\"elf\", 0,\t\t\t\t\t\t\t\t\\\n-   N_(\"Link to emit program in ELF format (rather than mmo)\")},\t\t\\\n-  {\"branch-predict\",\tTARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n-   N_(\"Use P-mnemonics for branches statically predicted as taken\")},\t\\\n-  {\"no-branch-predict\",\t-TARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n-   N_(\"Don't use P-mnemonics for branches\")},\t\t\t\t\\\n-  {\"base-addresses\",\tTARGET_MASK_BASE_ADDRESSES,\t\t\t\\\n-   N_(\"Use addresses that allocate global registers\")},\t\t\t\\\n-  {\"no-base-addresses\",\t-TARGET_MASK_BASE_ADDRESSES,\t\t\t\\\n-   N_(\"Do not use addresses that allocate global registers\")},\t\t\\\n-  {\"single-exit\",\t-TARGET_MASK_USE_RETURN_INSN,\t\t\t\\\n-   N_(\"Generate a single exit point for each function\")},\t\t\\\n-  {\"no-single-exit\",\tTARGET_MASK_USE_RETURN_INSN,\t\t\t\\\n-   N_(\"Do not generate a single exit point for each function\")},\t\\\n-  {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n+ (MASK_BRANCH_PREDICT | MASK_BASE_ADDRESSES | MASK_USE_RETURN_INSN)\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */\n #define TARGET_VERSION \\"}, {"sha": "5bbad5fcbb13ecfc0952d73edb36ba8cdb146f42", "filename": "gcc/config/mmix/mmix.opt", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff59fe717a9fcc8b4a645bc142531ecf4fb4751/gcc%2Fconfig%2Fmmix%2Fmmix.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.opt?ref=6ff59fe717a9fcc8b4a645bc142531ecf4fb4751", "patch": "@@ -0,0 +1,100 @@\n+; Options for the MMIX port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+; FIXME: Get rid of this one.\n+mlibfuncs\n+Target Report Mask(LIBFUNC)\n+For intrinsics library: pass all parameters in registers\n+\n+mabi=mmixware\n+Target Report RejectNegative InverseMask(ABI_GNU)\n+Use register stack for parameters and return value\n+\n+mabi=gnu\n+Target Report RejectNegative Mask(ABI_GNU)\n+Use call-clobbered registers for parameters and return value\n+\n+; FIXME: Provide a way to *load* the epsilon register.\n+mepsilon\n+Target Report Mask(FCMP_EPSILON)\n+Use epsilon-respecting floating point compare instructions\n+\n+mzero-extend\n+Target Report Mask(ZERO_EXTEND)\n+Use zero-extending memory loads, not sign-extending ones\n+\n+mknuthdiv\n+Target Report Mask(KNUTH_DIVISION)\n+Generate divide results with reminder having the same sign as the divisor (not the dividend)\n+\n+mtoplevel-symbols\n+Target Report Mask(TOPLEVEL_SYMBOLS)\n+Prepend global symbols with \\\":\\\" (for use with PREFIX)\n+\n+mno-set-program-start\n+Target Report RejectNegative\n+Do not provide a default start-address 0x100 of the program\n+\n+melf\n+Target Report RejectNegative\n+Link to emit program in ELF format (rather than mmo)\n+\n+mbranch-predict\n+Target Report RejectNegative Mask(BRANCH_PREDICT)\n+Use P-mnemonics for branches statically predicted as taken\n+\n+mno-branch-predict\n+Target Report RejectNegative InverseMask(BRANCH_PREDICT)\n+Don't use P-mnemonics for branches\n+\n+; We use the term \"base address\" since that's what Knuth uses.  The base\n+; address goes in a global register.  When addressing, it's more like\n+; \"base address plus offset\", with the offset being 0..255 from the base,\n+; which itself can be a symbol plus an offset.  The effect is like having\n+; a constant pool in global registers, code offsetting from those\n+; registers (automatically causing a request for a suitable constant base\n+; address register) without having to know the specific register or the\n+; specific offset.  The setback is that there's a limited number of\n+; registers, and you'll not find out until link time whether you\n+; should have compiled with -mno-base-addresses.\n+mbase-addresses\n+Target Report RejectNegative Mask(BASE_ADDRESSES)\n+Use addresses that allocate global registers\n+\n+mno-base-addresses\n+Target Report RejectNegative InverseMask(BASE_ADDRESSES)\n+Do not use addresses that allocate global registers\n+\n+msingle-exit\n+Target Report RejectNegative InverseMask(USE_RETURN_INSN)\n+Generate a single exit point for each function\n+\n+mno-single-exit\n+Target Report RejectNegative Mask(USE_RETURN_INSN)\n+Do not generate a single exit point for each function\n+\n+mset-program-start=\n+Target Report RejectNegative Joined\n+Set start-address of the program\n+\n+mset-data-start=\n+Target Report RejectNegative Joined\n+Set start-address of data"}]}