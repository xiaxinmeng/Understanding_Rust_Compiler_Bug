{"sha": "ddd46293e2b508b260eefe1adbad6720df7a5dd2", "node_id": "C_kwDOANBUbNoAKGRkZDQ2MjkzZTJiNTA4YjI2MGVlZmUxYWRiYWQ2NzIwZGY3YTVkZDI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-10T16:34:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-10T16:34:08Z"}, "message": "isel: Fix up gimple_expand_vec_set_expr [PR105528]\n\nThe following testcase ICEs (and only without -g), because we don't replace\none VEC_COND_EXPR with .VCOND* call.\nWe don't do that because gimple_expand_vec_set_expr adds some stmts before\n*gsi and then uses gsi_remove to remove it.  gsi_remove moves the iterator\nto the next stmt and in the caller we then do gsi_next before looking at\nanother stmt, which means we can skip processing of one stmt, which in this\ncase happened to be a VEC_COND_EXPR but with -g is some debug stmt in\nbetween.  As we always emit some stmts before it, it is easy to update the\niterator to the last stmt emitted there, so that caller continues really\nwith the next stmt.\n\n2022-05-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/105528\n\t* gimple-isel.cc (gimple_expand_vec_set_expr): After gsi_remove\n\tset *gsi to gsi_for_stmt (ass_stmt).  Fix up function comment.\n\n\t* gcc.dg/pr105528.c: New test.", "tree": {"sha": "555382746978580de7a70db630435b065f9f2c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555382746978580de7a70db630435b065f9f2c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd46293e2b508b260eefe1adbad6720df7a5dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd46293e2b508b260eefe1adbad6720df7a5dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd46293e2b508b260eefe1adbad6720df7a5dd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd46293e2b508b260eefe1adbad6720df7a5dd2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b9d83947e137fbbd85ac6593df4e27fe37cef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b9d83947e137fbbd85ac6593df4e27fe37cef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b9d83947e137fbbd85ac6593df4e27fe37cef3"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "44d086d8b289527d47cbc0f4252490c8558e785e", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd46293e2b508b260eefe1adbad6720df7a5dd2/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd46293e2b508b260eefe1adbad6720df7a5dd2/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=ddd46293e2b508b260eefe1adbad6720df7a5dd2", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Expand all ARRAY_REF(VIEW_CONVERT_EXPR) gimple assignments into calls to\n    internal function based on vector type of selected expansion.\n    i.e.:\n-     VIEW_CONVERT_EXPR<int[4]>(u)[_1] =  = i_4(D);\n+     VIEW_CONVERT_EXPR<int[4]>(u)[_1] = i_4(D);\n    =>\n      _7 = u;\n      _8 = .VEC_SET (_7, i_4(D), _1);\n@@ -104,6 +104,7 @@ gimple_expand_vec_set_expr (struct function *fun, gimple_stmt_iterator *gsi)\n \t  if (gsi_remove (gsi, true)\n \t      && gimple_purge_dead_eh_edges (bb))\n \t    cfg_changed = true;\n+\t  *gsi = gsi_for_stmt (ass_stmt);\n \t}\n     }\n "}, {"sha": "e380d56ee060771a6bcc8d56ea9889a1e38a86e3", "filename": "gcc/testsuite/gcc.dg/pr105528.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd46293e2b508b260eefe1adbad6720df7a5dd2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd46293e2b508b260eefe1adbad6720df7a5dd2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105528.c?ref=ddd46293e2b508b260eefe1adbad6720df7a5dd2", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/105528 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi -fcompare-debug\" } */\n+/* { dg-additional-options \"-mavx512f\" { target i?86-*-* x86_64-*-* } } */\n+\n+typedef unsigned V __attribute__((__vector_size__ (64)));\n+V g;\n+\n+V\n+bar (V v)\n+{\n+  V w;\n+  v <<= (V){(V){}[53]} >= v & 5;\n+  w[w[5]] -= ~0;\n+  v %= ~0;\n+  return v + w;\n+}\n+\n+void\n+foo (void)\n+{\n+  g -= (V){bar((V){~0})[3]};\n+}"}]}