{"sha": "cafd2e45872e1b3512101ef63c7ed58aa723e686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmZDJlNDU4NzJlMWIzNTEyMTAxZWY2M2M3ZWQ1OGFhNzIzZTY4Ng==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-12T15:42:31Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-12T15:42:31Z"}, "message": "arm-fpus.def: Replace booleans with feature flags.\n\n\t* config/arm/arm-fpus.def: Replace booleans with feature flags.\n\tUpdate comment.\n\t* config/arm/arm.c (ARM_FPU): Update macro.\n\t* config/arm/arm.h (TARGET_NEON_FP16): Update feature test.\n\t(TARGET_FP16): Likewise.\n\t(TARGET_CRYPTO): Likewise.\n\t(TARGET_NEON): Likewise.\n\t(struct arm_fpu_desc): Remove fields neon, fp16 and crypto.  Add\n\tfield features.\n\nFrom-SVN: r226821", "tree": {"sha": "c4bcab68250694f9a4802c41927ff4cfcc7ea31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4bcab68250694f9a4802c41927ff4cfcc7ea31d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cafd2e45872e1b3512101ef63c7ed58aa723e686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafd2e45872e1b3512101ef63c7ed58aa723e686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafd2e45872e1b3512101ef63c7ed58aa723e686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafd2e45872e1b3512101ef63c7ed58aa723e686/comments", "author": null, "committer": null, "parents": [{"sha": "441fb2cdb76e26ef0e559d87d3f0f1302a0c4b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441fb2cdb76e26ef0e559d87d3f0f1302a0c4b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441fb2cdb76e26ef0e559d87d3f0f1302a0c4b7c"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "6de87026c4a09d92da0c43b0ba2887a68d76a049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cafd2e45872e1b3512101ef63c7ed58aa723e686", "patch": "@@ -1,3 +1,15 @@\n+2015-08-12  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm-fpus.def: Replace booleans with feature flags.\n+\tUpdate comment.\n+\t* config/arm/arm.c (ARM_FPU): Update macro.\n+\t* config/arm/arm.h (TARGET_NEON_FP16): Update feature test.\n+\t(TARGET_FP16): Likewise.\n+\t(TARGET_CRYPTO): Likewise.\n+\t(TARGET_NEON): Likewise.\n+\t(struct arm_fpu_desc): Remove fields neon, fp16 and crypto.  Add\n+\tfield features.\n+\n 2015-08-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR other/67092"}, {"sha": "efd589628feae11f76b4f07938e81fdfd1dc3560", "filename": "gcc/config/arm/arm-fpus.def", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=cafd2e45872e1b3512101ef63c7ed58aa723e686", "patch": "@@ -19,30 +19,30 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO)\n+      ARM_FPU(NAME, MODEL, REV, VFP_REGS, FEATURES)\n \n    The arguments are the fields of struct arm_fpu_desc.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, false, false, false)\n-ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false, false)\n-ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, true, false)\n-ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, false, false)\n-ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, true, false)\n-ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, false, false)\n-ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, true, false)\n-ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , false, false)\n-ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true, true, false)\n-ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, false, true, false)\n-ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, false, true, false)\n-ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, false, true, false)\n-ARM_FPU(\"fpv5-sp-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_SINGLE, false, true, false)\n-ARM_FPU(\"fpv5-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_D16, false, true, false)\n-ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, true, true, false)\n-ARM_FPU(\"fp-armv8\",\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, false, true, false)\n-ARM_FPU(\"neon-fp-armv8\",ARM_FP_MODEL_VFP, 8, VFP_REG_D32, true, true, false)\n+ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, FPU_FL_NONE)\n+ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NEON)\n+ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n+ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"fpv5-sp-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_SINGLE, FPU_FL_FP16)\n+ARM_FPU(\"fpv5-d16\",\tARM_FP_MODEL_VFP, 5, VFP_REG_D16, FPU_FL_FP16)\n+ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n+ARM_FPU(\"fp-armv8\",\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_FP16)\n+ARM_FPU(\"neon-fp-armv8\",ARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16)\n ARM_FPU(\"crypto-neon-fp-armv8\",\n-\t\t\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, true, true, true)\n+\t\t\tARM_FP_MODEL_VFP, 8, VFP_REG_D32, FPU_FL_NEON | FPU_FL_FP16 | FPU_FL_CRYPTO)\n /* Compatibility aliases.  */\n-ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false, false)\n+ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, FPU_FL_NONE)"}, {"sha": "6e15bf272aa30208f21d44d8fd869f6ed07a03d1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cafd2e45872e1b3512101ef63c7ed58aa723e686", "patch": "@@ -2230,8 +2230,8 @@ char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n \n static const struct arm_fpu_desc all_fpus[] =\n {\n-#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO) \\\n-  { NAME, MODEL, REV, VFP_REGS, NEON, FP16, CRYPTO },\n+#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, FEATURES) \\\n+  { NAME, MODEL, REV, VFP_REGS, FEATURES },\n #include \"arm-fpus.def\"\n #undef ARM_FPU\n };"}, {"sha": "eee9e8b551ffa11f0d7109db815f6687bf3554c2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafd2e45872e1b3512101ef63c7ed58aa723e686/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=cafd2e45872e1b3512101ef63c7ed58aa723e686", "patch": "@@ -193,11 +193,13 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_VFP_DOUBLE (TARGET_VFP && arm_fpu_desc->regs != VFP_REG_SINGLE)\n \n /* FPU supports half-precision floating-point with NEON element load/store.  */\n-#define TARGET_NEON_FP16 \\\n-  (TARGET_VFP && arm_fpu_desc->neon && arm_fpu_desc->fp16)\n+#define TARGET_NEON_FP16\t\t\t\t\t\t\\\n+  (TARGET_VFP\t\t\t\t\t\t\t\t\\\n+   && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_NEON | FPU_FL_FP16))\n \n /* FPU supports VFP half-precision floating-point.  */\n-#define TARGET_FP16 (TARGET_VFP && arm_fpu_desc->fp16)\n+#define TARGET_FP16\t\t\t\t\t\t\t\\\n+  (TARGET_VFP && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_FP16))\n \n /* FPU supports fused-multiply-add operations.  */\n #define TARGET_FMA (TARGET_VFP && arm_fpu_desc->rev >= 4)\n@@ -206,14 +208,18 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_FPU_ARMV8 (TARGET_VFP && arm_fpu_desc->rev >= 8)\n \n /* FPU supports Crypto extensions.  */\n-#define TARGET_CRYPTO (TARGET_VFP && arm_fpu_desc->crypto)\n+#define TARGET_CRYPTO\t\t\t\t\t\t\t\\\n+  (TARGET_VFP && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_CRYPTO))\n+\n \n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n    available.  */\n-#define TARGET_NEON (TARGET_32BIT && TARGET_HARD_FLOAT \\\n-\t\t     && TARGET_VFP && arm_fpu_desc->neon)\n+#define TARGET_NEON\t\t\t\t\t\t\t\\\n+  (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\t\t\t\\\n+   && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_NEON))\n+\n \n /* Q-bit is present.  */\n #define TARGET_ARM_QBIT_P(flags) \\\n@@ -353,9 +359,7 @@ extern const struct arm_fpu_desc\n   enum arm_fp_model model;\n   int rev;\n   enum vfp_reg_type regs;\n-  int neon;\n-  int fp16;\n-  int crypto;\n+  arm_fpu_feature_set features;\n } *arm_fpu_desc;\n \n /* Which floating point hardware to schedule for.  */"}]}