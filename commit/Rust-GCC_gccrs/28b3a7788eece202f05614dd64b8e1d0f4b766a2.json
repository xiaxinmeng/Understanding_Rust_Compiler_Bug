{"sha": "28b3a7788eece202f05614dd64b8e1d0f4b766a2", "node_id": "C_kwDOANBUbNoAKDI4YjNhNzc4OGVlY2UyMDJmMDU2MTRkZDY0YjhlMWQwZjRiNzY2YTI", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-24T19:05:35Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-27T19:21:58Z"}, "message": "Fortran: make some match* functions static\n\ngfc_match_small_int_expr was unused, delete it.\ngfc_match_gcc_unroll should use gfc_match_small_literal_int and then\ngfc_match_small_int can be deleted since it will be unused.\n\ngcc/fortran/ChangeLog:\n\n\t* decl.c (gfc_match_old_kind_spec, set_com_block_bind_c,\n\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n\tget_bind_c_idents, gfc_match_suffix, gfc_get_type_attr_spec,\n\tcheck_extended_derived_type): Make static.\n\t(gfc_match_gcc_unroll): Add comment.\n\t* match.c (gfc_match_small_int_expr): Delete definition.\n\t* match.h (gfc_match_small_int_expr): Delete declaration.\n\t(gfc_match_name_C, gfc_match_old_kind_spec, set_com_block_bind_c,\n\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n\tget_bind_c_idents, gfc_match_suffix,\n\tgfc_get_type_attr_spec): Delete declaration.", "tree": {"sha": "a3e0634ad73e37e7780615979de2b5fdc6fd35b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e0634ad73e37e7780615979de2b5fdc6fd35b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b3a7788eece202f05614dd64b8e1d0f4b766a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b3a7788eece202f05614dd64b8e1d0f4b766a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b3a7788eece202f05614dd64b8e1d0f4b766a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b3a7788eece202f05614dd64b8e1d0f4b766a2/comments", "author": null, "committer": null, "parents": [{"sha": "fd39c4bf5568bf3b71a2c547304795bd947b8efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd39c4bf5568bf3b71a2c547304795bd947b8efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd39c4bf5568bf3b71a2c547304795bd947b8efd"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "2788348d1be07110d6deca56ade1f5856a70a900", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=28b3a7788eece202f05614dd64b8e1d0f4b766a2", "patch": "@@ -3128,7 +3128,7 @@ variable_decl (int elem)\n    This assumes that the byte size is equal to the kind number for\n    non-COMPLEX types, and equal to twice the kind number for COMPLEX.  */\n \n-match\n+static match\n gfc_match_old_kind_spec (gfc_typespec *ts)\n {\n   match m;\n@@ -5851,7 +5851,7 @@ set_binding_label (const char **dest_label, const char *sym_name,\n /* Set the status of the given common block as being BIND(C) or not,\n    depending on the given parameter, is_bind_c.  */\n \n-void\n+static void\n set_com_block_bind_c (gfc_common_head *com_block, int is_bind_c)\n {\n   com_block->is_bind_c = is_bind_c;\n@@ -6039,7 +6039,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n    the type is C interoperable.  Errors are reported by the functions\n    used to set/test these fields.  */\n \n-bool\n+static bool\n set_verify_bind_c_sym (gfc_symbol *tmp_sym, int num_idents)\n {\n   bool retval = true;\n@@ -6059,7 +6059,7 @@ set_verify_bind_c_sym (gfc_symbol *tmp_sym, int num_idents)\n /* Set the fields marking the given common block as BIND(C), including\n    a binding label, and report any errors encountered.  */\n \n-bool\n+static bool\n set_verify_bind_c_com_block (gfc_common_head *com_block, int num_idents)\n {\n   bool retval = true;\n@@ -6079,7 +6079,7 @@ set_verify_bind_c_com_block (gfc_common_head *com_block, int num_idents)\n /* Retrieve the list of one or more identifiers that the given bind(c)\n    attribute applies to.  */\n \n-bool\n+static bool\n get_bind_c_idents (void)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n@@ -6788,7 +6788,7 @@ match_result (gfc_symbol *function, gfc_symbol **result)\n    clause and BIND(C), either one, or neither.  The draft does not\n    require them to come in a specific order.  */\n \n-match\n+static match\n gfc_match_suffix (gfc_symbol *sym, gfc_symbol **result)\n {\n   match is_bind_c;   /* Found bind(c).  */\n@@ -10100,7 +10100,7 @@ check_extended_derived_type (char *name)\n    not a handled attribute, and MATCH_YES otherwise.  TODO: More error\n    checking on attribute conflicts needs to be done.  */\n \n-match\n+static match\n gfc_get_type_attr_spec (symbol_attribute *attr, char *name)\n {\n   /* See if the derived type is marked as private.  */\n@@ -11778,6 +11778,7 @@ gfc_match_gcc_unroll (void)\n {\n   int value;\n \n+  /* FIXME: use gfc_match_small_literal_int instead, delete small_int  */\n   if (gfc_match_small_int (&value) == MATCH_YES)\n     {\n       if (value < 0 || value > USHRT_MAX)"}, {"sha": "5d07f897e4556041d4792d8574da72879387e79f", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=28b3a7788eece202f05614dd64b8e1d0f4b766a2", "patch": "@@ -530,32 +530,6 @@ gfc_match_small_int (int *value)\n }\n \n \n-/* This function is the same as the gfc_match_small_int, except that\n-   we're keeping the pointer to the expr.  This function could just be\n-   removed and the previously mentioned one modified, though all calls\n-   to it would have to be modified then (and there were a number of\n-   them).  Return MATCH_ERROR if fail to extract the int; otherwise,\n-   return the result of gfc_match_expr().  The expr (if any) that was\n-   matched is returned in the parameter expr.  */\n-\n-match\n-gfc_match_small_int_expr (int *value, gfc_expr **expr)\n-{\n-  match m;\n-  int i;\n-\n-  m = gfc_match_expr (expr);\n-  if (m != MATCH_YES)\n-    return m;\n-\n-  if (gfc_extract_int (*expr, &i, 1))\n-    m = MATCH_ERROR;\n-\n-  *value = i;\n-  return m;\n-}\n-\n-\n /* Matches a statement label.  Uses gfc_match_small_literal_int() to\n    do most of the work.  */\n "}, {"sha": "e9368db281dad7ae5d3173b3cccfedf007266f06", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a7788eece202f05614dd64b8e1d0f4b766a2/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=28b3a7788eece202f05614dd64b8e1d0f4b766a2", "patch": "@@ -48,9 +48,7 @@ match gfc_match_eos (void);\n match gfc_match_small_literal_int (int *, int *);\n match gfc_match_st_label (gfc_st_label **);\n match gfc_match_small_int (int *);\n-match gfc_match_small_int_expr (int *, gfc_expr **);\n match gfc_match_name (char *);\n-match gfc_match_name_C (const char **buffer);\n match gfc_match_symbol (gfc_symbol **, int);\n match gfc_match_sym_tree (gfc_symtree **, int);\n match gfc_match_intrinsic_op (gfc_intrinsic_op *);\n@@ -236,7 +234,6 @@ match gfc_match_omp_end_single (void);\n match gfc_match_data (void);\n match gfc_match_null (gfc_expr **);\n match gfc_match_kind_spec (gfc_typespec *, bool);\n-match gfc_match_old_kind_spec (gfc_typespec *);\n match gfc_match_decl_type_spec (gfc_typespec *, int);\n \n match gfc_match_end (gfc_statement *);\n@@ -295,14 +292,8 @@ match gfc_match_volatile (void);\n \n /* Fortran 2003 c interop.\n    TODO: some of these should be moved to another file rather than decl.c */\n-void set_com_block_bind_c (gfc_common_head *, int);\n-bool set_verify_bind_c_sym (gfc_symbol *, int);\n-bool set_verify_bind_c_com_block (gfc_common_head *, int);\n-bool get_bind_c_idents (void);\n match gfc_match_bind_c_stmt (void);\n-match gfc_match_suffix (gfc_symbol *, gfc_symbol **);\n match gfc_match_bind_c (gfc_symbol *, bool);\n-match gfc_get_type_attr_spec (symbol_attribute *, char*);\n \n /* primary.c.  */\n match gfc_match_structure_constructor (gfc_symbol *, gfc_expr **);"}]}