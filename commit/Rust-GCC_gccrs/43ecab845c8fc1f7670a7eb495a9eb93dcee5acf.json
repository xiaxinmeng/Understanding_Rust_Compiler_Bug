{"sha": "43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNlY2FiODQ1YzhmYzFmNzY3MGE3ZWI0OTVhOWViOTNkY2VlNWFjZg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2011-03-24T16:58:56Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2011-03-24T16:58:56Z"}, "message": "configure.ac: Remove all mentions of tentative_cc.\n\n2011-03-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Remove all mentions of tentative_cc.\n\t* configure: Regenerate.\n\nFrom-SVN: r171415", "tree": {"sha": "db3ac46c0e18747814fb1db0f9767e54c6aa19ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3ac46c0e18747814fb1db0f9767e54c6aa19ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6db794ec5b4dfb2c9ce1e552b0496993e3fcc64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db794ec5b4dfb2c9ce1e552b0496993e3fcc64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db794ec5b4dfb2c9ce1e552b0496993e3fcc64c"}], "stats": {"total": 55, "additions": 5, "deletions": 50}, "files": [{"sha": "ae05c9d0d65c877591df7b174f38f3f2af9485fd", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "patch": "@@ -1,3 +1,8 @@\n+2011-03-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Remove all mentions of tentative_cc.\n+\t* configure: Regenerate.\n+\n 2011-03-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* configure.ac (i[[3456789]]86-*-vsta, i[[3456789]]86-*-go32*,"}, {"sha": "c9e8f0a76add6fe919c0806e0329ba32d406bdb9", "filename": "configure", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "patch": "@@ -3588,7 +3588,6 @@ case \"${noconfigdirs}\" in\n esac\n \n # Work in distributions that contain no compiler tools, like Autoconf.\n-tentative_cc=\"\"\n host_makefile_frag=/dev/null\n if test -d ${srcdir}/config ; then\n case \"${host}\" in\n@@ -3631,18 +3630,15 @@ fi\n     host_makefile_frag=\"config/mh-solaris\"\n     ;;\n   hppa*-hp-hpux10*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"config/mh-pa-hpux10\"\n     ;;\n   hppa*-hp-hpux*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n   hppa*-*)\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n   *-hp-hpux*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     ;;\n   *-*-darwin*)\n     host_makefile_frag=\"config/mh-darwin\"\n@@ -3654,8 +3650,6 @@ fi\n     host_makefile_frag=\"config/mh-ppc-aix\"\n     ;;\n   *-*-lynxos*)\n-    # /bin/cc is less than useful for our purposes.  Always use GCC\n-    tentative_cc=\"/bin/gcc\"\n     ;;\n   # This is placed last to prevent interfering with the cases above.\n   i[3456789]86-*-*)\n@@ -3665,25 +3659,6 @@ fi\n esac\n fi\n \n-# If we aren't going to be using gcc, see if we can extract a definition\n-# of CC from the fragment.\n-# Actually, use the 'pre-extracted' version above.\n-if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n-  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-  found=\n-  for dir in $PATH; do\n-    test -z \"$dir\" && dir=.\n-    if test -f $dir/gcc; then\n-      found=yes\n-      break\n-    fi\n-  done\n-  IFS=\"$save_ifs\"\n-  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n-    CC=$tentative_cc\n-  fi\n-fi\n-\n if test \"${build}\" != \"${host}\" ; then\n   AR_FOR_BUILD=${AR_FOR_BUILD-ar}\n   AS_FOR_BUILD=${AS_FOR_BUILD-as}"}, {"sha": "e292c91507b7688e016f44426b319ab01ba25a99", "filename": "configure.ac", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ecab845c8fc1f7670a7eb495a9eb93dcee5acf/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=43ecab845c8fc1f7670a7eb495a9eb93dcee5acf", "patch": "@@ -1034,7 +1034,6 @@ case \"${noconfigdirs}\" in\n esac\n \n # Work in distributions that contain no compiler tools, like Autoconf.\n-tentative_cc=\"\"\n host_makefile_frag=/dev/null\n if test -d ${srcdir}/config ; then\n case \"${host}\" in\n@@ -1058,18 +1057,15 @@ case \"${host}\" in\n     host_makefile_frag=\"config/mh-solaris\"\n     ;;\n   hppa*-hp-hpux10*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"config/mh-pa-hpux10\"\n     ;;\n   hppa*-hp-hpux*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n   hppa*-*)\t\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n   *-hp-hpux*)\n-    tentative_cc=\"cc -Wp,-H256000\"\n     ;;\n   *-*-darwin*)\n     host_makefile_frag=\"config/mh-darwin\"\n@@ -1081,8 +1077,6 @@ case \"${host}\" in\n     host_makefile_frag=\"config/mh-ppc-aix\"\n     ;;\n   *-*-lynxos*)\n-    # /bin/cc is less than useful for our purposes.  Always use GCC\n-    tentative_cc=\"/bin/gcc\"\n     ;;\n   # This is placed last to prevent interfering with the cases above.\n   i[[3456789]]86-*-*)\n@@ -1092,25 +1086,6 @@ case \"${host}\" in\n esac\n fi\n \n-# If we aren't going to be using gcc, see if we can extract a definition\n-# of CC from the fragment.\n-# Actually, use the 'pre-extracted' version above.\n-if test -z \"${CC}\" && test \"${build}\" = \"${host}\" ; then\n-  IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n-  found=\n-  for dir in $PATH; do\n-    test -z \"$dir\" && dir=.\n-    if test -f $dir/gcc; then\n-      found=yes\n-      break\n-    fi\n-  done\n-  IFS=\"$save_ifs\"\n-  if test -z \"${found}\" && test -n \"${tentative_cc}\" ; then\n-    CC=$tentative_cc\n-  fi\n-fi\n-\n if test \"${build}\" != \"${host}\" ; then\n   AR_FOR_BUILD=${AR_FOR_BUILD-ar}\n   AS_FOR_BUILD=${AS_FOR_BUILD-as}"}]}