{"sha": "93b855862a72458bf60ba9596bb7494bcf74bdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiODU1ODYyYTcyNDU4YmY2MGJhOTU5NmJiNzQ5NGJjZjc0YmRmNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-06-19T15:19:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-06-19T15:19:53Z"}, "message": "std_cwchar.h: Guard.\n\n\n2002-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c/std_cwchar.h: Guard. Add mbstate_t bits.\n\t* include/c/std_cwctype.h: Guard.\n\n\t* libsupc++/eh_alloc.cc: Tweak include order.\n\t* libsupc++/pure.cc: Use cstdio.\n\t* libsupc++/new_op.cc: Remove malloc forward declaration, as\n\tcstdlib brings it in. Use std::malloc.\n\n\t* src/Makefile.am (sources): Remove cmath.cc.\n\t* src/Makefile.in: Regenerate.\n\t* src/cmath.cc: Remove.\n\nFrom-SVN: r54782", "tree": {"sha": "f6a252bc522acab89485cfd3ab34f6038957e14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a252bc522acab89485cfd3ab34f6038957e14c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b855862a72458bf60ba9596bb7494bcf74bdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b855862a72458bf60ba9596bb7494bcf74bdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b855862a72458bf60ba9596bb7494bcf74bdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b855862a72458bf60ba9596bb7494bcf74bdf7/comments", "author": null, "committer": null, "parents": [{"sha": "ccf160f16c907ee744b8b035c00f40cfdc95c0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf160f16c907ee744b8b035c00f40cfdc95c0bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf160f16c907ee744b8b035c00f40cfdc95c0bf"}], "stats": {"total": 2695, "additions": 1393, "deletions": 1302}, "files": [{"sha": "1f9f1757e32c28c5afdfff41ba7d90512d7108fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -1,3 +1,17 @@\n+2002-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c/std_cwchar.h: Guard. Add mbstate_t bits.\n+\t* include/c/std_cwctype.h: Guard.\n+\n+\t* libsupc++/eh_alloc.cc: Tweak include order.\n+\t* libsupc++/pure.cc: Use cstdio.\n+\t* libsupc++/new_op.cc: Remove malloc forward declaration, as\n+\tcstdlib brings it in. Use std::malloc.\n+\n+\t* src/Makefile.am (sources): Remove cmath.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/cmath.cc: Remove.\n+\t\n 2002-06-18  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* configure.target:  Force mips to use the generic cpu routines."}, {"sha": "9354279f2d0605ed06ef6b2c3c4dd09885ef78b6", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -196,9 +196,9 @@ AM_MAKEFLAGS = \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n \t\"WERROR=$(WERROR)\" \n \n+\n # Subdir rules rely on $(FLAGS_TO_PASS)\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)\n-\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h\n CONFIG_CLEAN_FILES =  mkcheck testsuite_flags"}, {"sha": "24ff2e0c8493a69f3dfc97f2ffc4816114f034af", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -1,6 +1,6 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n \n-dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n dnl with or without modifications, as long as this notice is preserved.\n@@ -2202,12 +2202,37 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n+# isc-posix.m4 serial 1 (gettext-0.10.40)\n+dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+\n+# This test replaces the one in autoconf.\n+# Currently this macro should have the same name as the autoconf macro\n+# because gettext's gettext.m4 (distributed in the automake package)\n+# still uses it.  Otherwise, the use in gettext.m4 makes autoheader\n+# give these diagnostics:\n+#   configure.in:556: AC_TRY_COMPILE was called before AC_ISC_POSIX\n+#   configure.in:556: AC_TRY_RUN was called before AC_ISC_POSIX\n+\n+undefine([AC_ISC_POSIX])\n+\n+AC_DEFUN([AC_ISC_POSIX],\n+  [\n+    dnl This test replaces the obsolescent AC_ISC_POSIX kludge.\n+    AC_CHECK_LIB(cposix, strerror, [LIBS=\"$LIBS -lcposix\"])\n+  ]\n+)\n+\n # Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n \n # serial 1\n \n-AC_DEFUN(AM_MAINTAINER_MODE,\n+AC_DEFUN([AM_MAINTAINER_MODE],\n [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n   dnl maintainer-mode is disabled by default\n   AC_ARG_ENABLE(maintainer-mode,\n@@ -2224,7 +2249,7 @@ AC_DEFUN(AM_MAINTAINER_MODE,\n \n # Define a conditional.\n \n-AC_DEFUN(AM_CONDITIONAL,\n+AC_DEFUN([AM_CONDITIONAL],\n [AC_SUBST($1_TRUE)\n AC_SUBST($1_FALSE)\n if $2; then\n@@ -2244,7 +2269,7 @@ fi])\n dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n-AC_DEFUN(AM_INIT_AUTOMAKE,\n+AC_DEFUN([AM_INIT_AUTOMAKE],\n [AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n@@ -2272,7 +2297,7 @@ AC_REQUIRE([AC_PROG_MAKE_SET])])\n # Check to make sure that the build environment is sane.\n #\n \n-AC_DEFUN(AM_SANITY_CHECK,\n+AC_DEFUN([AM_SANITY_CHECK],\n [AC_MSG_CHECKING([whether build environment is sane])\n # Just in case\n sleep 1\n@@ -2313,7 +2338,7 @@ AC_MSG_RESULT(yes)])\n \n dnl AM_MISSING_PROG(NAME, PROGRAM, DIRECTORY)\n dnl The program must properly implement --version.\n-AC_DEFUN(AM_MISSING_PROG,\n+AC_DEFUN([AM_MISSING_PROG],\n [AC_MSG_CHECKING(for working $2)\n # Run test in a subshell; some versions of sh will print an error if\n # an executable is not found, even if stderr is redirected.\n@@ -2329,7 +2354,7 @@ AC_SUBST($1)])\n \n # Like AC_CONFIG_HEADER, but automatically create stamp file.\n \n-AC_DEFUN(AM_CONFIG_HEADER,\n+AC_DEFUN([AM_CONFIG_HEADER],\n [AC_PREREQ([2.12])\n AC_CONFIG_HEADER([$1])\n dnl When config.status generates a header, we must update the stamp-h file."}, {"sha": "07b7f930d42caeb38e2e2aa71f7b2c0698b8f0f0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1244, "deletions": 1220, "changes": 2464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7"}, {"sha": "ebb51e382fc41b2c3dda7f847e511b5f61f69982", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}, {"sha": "19739853736890f69b544576150d4988d4747b3a", "filename": "libstdc++-v3/include/c/std_cwchar.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwchar.h?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -36,6 +36,27 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n+\n+#if _GLIBCPP_HAVE_WCHAR_H\n #include_next <wchar.h>\n+#endif\n+\n+// Need to do a bit of trickery here with mbstate_t as char_traits\n+// assumes it is in wchar.h, regardless of wchar_t specializations.\n+#ifndef _GLIBCPP_HAVE_MBSTATE_T\n+extern \"C\" \n+{\n+  typedef struct \n+  {\n+    int __fill[6];\n+  } mbstate_t;\n+}\n+#endif\n+\n+namespace std \n+{\n+  using ::mbstate_t;\n+}\n \n #endif "}, {"sha": "d51569843a67011848ede4aa0d9d1931b702598a", "filename": "libstdc++-v3/include/c/std_cwctype.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cwctype.h?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -36,6 +36,10 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n+\n+#if _GLIBCPP_HAVE_WCTYPE_H\n #include_next <wctype.h>\n+#endif\n \n #endif "}, {"sha": "b328acbc914c4adcfcfe3f07b2c3b59160aa7098", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -30,10 +30,10 @@\n // This is derived from the C++ ABI for IA-64.  Where we diverge\n // for cross-architecture compatibility are noted with \"@@@\".\n \n-#include <exception>\n #include <cstdlib>\n #include <cstring>\n #include <climits>\n+#include <exception>\n #include \"unwind-cxx.h\"\n #include \"bits/c++config.h\"\n #include \"bits/gthr.h\""}, {"sha": "6e83b39bb1f1e53c3c8771470d4d61f85ddf32dd", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -1,5 +1,5 @@\n // Support routines for the -*- C++ -*- dynamic memory management.\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation\n //\n // This file is part of GNU CC.\n //\n@@ -33,8 +33,8 @@\n \n using std::new_handler;\n using std::bad_alloc;\n+using std::malloc;\n \n-extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n void *"}, {"sha": "1f351334b745e6d13b3655b7d26cbc773d19728f", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -39,8 +39,8 @@\n /*#  define write(fd, buf, n)\t__write((fd), (buf), (n))*/\n # endif\n #else\n-# include <stdio.h>\n-# define writestr(str)\tfputs(str, stderr)\n+# include <cstdio>\n+# define writestr(str)\tstd::fputs(str, stderr)\n #endif\n \n extern \"C\" void"}, {"sha": "eaa294e0fae08fa40c066632702f0566b3df481b", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -64,7 +64,6 @@ sources = \\\n \tbasic_file.cc \\\n \tbitset.cc \\\n \tc++locale.cc \\\n-\tcmath.cc \\\n \tcodecvt.cc \\\n \tcollate.cc \\\n \tcomplex_io.cc \\"}, {"sha": "45c696e85f11a22cab98e8088098bfd0180aebf0", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -144,11 +144,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -158,22 +160,64 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n-\n-\n-sources =  \tbasic_file.cc \tbitset.cc \tc++locale.cc \tcmath.cc \tcodecvt.cc \tcollate.cc \tcomplex_io.cc \tconcept-inst.cc \tctype.cc \text-inst.cc \tfstream-inst.cc \tfunctexcept.cc \tglobals.cc \tio-inst.cc \tios.cc \tistream-inst.cc \tlimits.cc \tlocale-inst.cc \tlocale.cc \tlocalename.cc \tmessages.cc \tmisc-inst.cc \tmonetary.cc \tnumeric.cc \tostream-inst.cc \tsstream-inst.cc \tstdexcept.cc \tstl-inst.cc \tstreambuf-inst.cc \tstring-inst.cc \tstrstream.cc \ttime.cc \tvalarray-inst.cc \tvterminate.cc \twstring-inst.cc\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n+\n+\n+sources = \\\n+\tbasic_file.cc \\\n+\tbitset.cc \\\n+\tc++locale.cc \\\n+\tcodecvt.cc \\\n+\tcollate.cc \\\n+\tcomplex_io.cc \\\n+\tconcept-inst.cc \\\n+\tctype.cc \\\n+\text-inst.cc \\\n+\tfstream-inst.cc \\\n+\tfunctexcept.cc \\\n+\tglobals.cc \\\n+\tio-inst.cc \\\n+\tios.cc \\\n+\tistream-inst.cc \\\n+\tlimits.cc \\\n+\tlocale-inst.cc \\\n+\tlocale.cc \\\n+\tlocalename.cc \\\n+\tmessages.cc \\\n+\tmisc-inst.cc \\\n+\tmonetary.cc \\\n+\tnumeric.cc \\\n+\tostream-inst.cc \\\n+\tsstream-inst.cc \\\n+\tstdexcept.cc \\\n+\tstl-inst.cc \\\n+\tstreambuf-inst.cc \\\n+\tstring-inst.cc \\\n+\tstrstream.cc \\\n+\ttime.cc \\\n+\tvalarray-inst.cc \\\n+\tvterminate.cc \\\n+\twstring-inst.cc\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=linker.map\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=linker.map\n @GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n-libstdc___la_LDFLAGS =  \t-version-info @libtool_VERSION@ ${version_arg} \t-lm @LIBUNWIND_FLAG@ \n+libstdc___la_LDFLAGS = \\\n+\t-version-info @libtool_VERSION@ ${version_arg} \\\n+\t-lm @LIBUNWIND_FLAG@ \n \n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD) linker.map\n@@ -187,7 +231,12 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -208,7 +257,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -217,7 +267,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -228,9 +279,9 @@ DEFS = @DEFS@ -I. -I$(srcdir) -I..\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n-libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n-codecvt.lo collate.lo complex_io.lo concept-inst.lo ctype.lo \\\n-ext-inst.lo fstream-inst.lo functexcept.lo globals.lo io-inst.lo ios.lo \\\n+libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo codecvt.lo \\\n+collate.lo complex_io.lo concept-inst.lo ctype.lo ext-inst.lo \\\n+fstream-inst.lo functexcept.lo globals.lo io-inst.lo ios.lo \\\n istream-inst.lo limits.lo locale-inst.lo locale.lo localename.lo \\\n messages.lo misc-inst.lo monetary.lo numeric.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n@@ -244,7 +295,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libstdc___la_SOURCES)\n OBJECTS = $(libstdc___la_OBJECTS)"}, {"sha": "7a7433a1cf38288f80d00442243431413641fb58", "filename": "libstdc++-v3/src/cmath.cc", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf160f16c907ee744b8b035c00f40cfdc95c0bf/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf160f16c907ee744b8b035c00f40cfdc95c0bf/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc?ref=ccf160f16c907ee744b8b035c00f40cfdc95c0bf", "patch": "@@ -1,47 +0,0 @@\n-// Explicit instantiation file for -*- C++ -*- math library.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-// These are explicit instantiations of the behind-the-scenes internal\n-// helper functions used in the math routines of libstdc++.\n-\n-\n-#include <cmath>\n-\n-namespace std\n-{\n-    // This function is only declared/used in the cheaders=c_std case.\n-    template float\n-      __cmath_power<float>(float, unsigned int);\n-    template double\n-      __cmath_power<double>(double, unsigned int);\n-    template long double\n-      __cmath_power<long double>(long double, unsigned int);\n-  \n-} // namespace std"}, {"sha": "a46e3b9052e14b40e39b045dd58761ee9cb8dbc5", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b855862a72458bf60ba9596bb7494bcf74bdf7/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=93b855862a72458bf60ba9596bb7494bcf74bdf7", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved."}]}