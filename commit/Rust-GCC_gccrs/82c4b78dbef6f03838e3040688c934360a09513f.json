{"sha": "82c4b78dbef6f03838e3040688c934360a09513f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjNGI3OGRiZWY2ZjAzODM4ZTMwNDA2ODhjOTM0MzYwYTA5NTEzZg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-06T13:32:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-12T07:28:38Z"}, "message": "Replace std::vector<> usage in ipa-fnsummary.c with GCC's vec<>.\n\ngcc/ChangeLog:\n\n\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Use vec<>\n\tinstead of std::vector<>.\n\t(evaluate_properties_for_edge): Same.\n\t(ipa_fn_summary_t::duplicate): Same.\n\t(estimate_ipcp_clone_size_and_time): Same.\n\t* vec.h (<T, A, vl_embed>::embedded_size): Change vec_embedded\n\ttype to contain a char[].", "tree": {"sha": "a9f14337376752faafbcdbd3f398730773e54941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f14337376752faafbcdbd3f398730773e54941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82c4b78dbef6f03838e3040688c934360a09513f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c4b78dbef6f03838e3040688c934360a09513f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c4b78dbef6f03838e3040688c934360a09513f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c4b78dbef6f03838e3040688c934360a09513f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220ffae474db36ba20487427be699f0987a00b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220ffae474db36ba20487427be699f0987a00b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220ffae474db36ba20487427be699f0987a00b0c"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "2cfab40156e516e3d45910ff6cea5526f9f17194", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c4b78dbef6f03838e3040688c934360a09513f/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c4b78dbef6f03838e3040688c934360a09513f/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=82c4b78dbef6f03838e3040688c934360a09513f", "patch": "@@ -331,7 +331,7 @@ static void\n evaluate_conditions_for_known_args (struct cgraph_node *node,\n \t\t\t\t    bool inline_p,\n \t\t\t\t    vec<tree> known_vals,\n-\t\t\t\t    const std::vector<value_range> &known_value_ranges,\n+\t\t\t\t    vec<value_range> known_value_ranges,\n \t\t\t\t    vec<ipa_agg_value_set> known_aggs,\n \t\t\t\t    clause_t *ret_clause,\n \t\t\t\t    clause_t *ret_nonspec_clause)\n@@ -446,7 +446,7 @@ evaluate_conditions_for_known_args (struct cgraph_node *node,\n \t      continue;\n \t    }\n \t}\n-      if (c->operand_num < (int) known_value_ranges.size ()\n+      if (c->operand_num < (int) known_value_ranges.length ()\n \t  && !c->agg_contents\n \t  && !known_value_ranges[c->operand_num].undefined_p ()\n \t  && !known_value_ranges[c->operand_num].varying_p ()\n@@ -555,7 +555,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n {\n   struct cgraph_node *callee = e->callee->ultimate_alias_target ();\n   class ipa_fn_summary *info = ipa_fn_summaries->get (callee);\n-  std::vector<value_range> known_value_ranges (32);\n+  auto_vec<value_range, 32> known_value_ranges;\n   class ipa_edge_args *args;\n \n   if (clause_ptr)\n@@ -630,11 +630,11 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t\t\t\t\t\t\t   i));\n \t\t    if (!vr.undefined_p () && !vr.varying_p ())\n \t\t      {\n-\t\t\tif (!known_value_ranges.size ())\n+\t\t\tif (!known_value_ranges.length ())\n \t\t\t  {\n-\t\t\t    known_value_ranges.resize (count);\n+\t\t\t    known_value_ranges.safe_grow (count);\n \t\t\t    for (int i = 0; i < count; ++i)\n-\t\t\t      known_value_ranges[i].set_undefined ();\n+\t\t\t      new (&known_value_ranges[i]) value_range ();\n \t\t\t  }\n \t\t\tknown_value_ranges[i] = vr;\n \t\t      }\n@@ -808,7 +808,7 @@ ipa_fn_summary_t::duplicate (cgraph_node *src,\n \t}\n       evaluate_conditions_for_known_args (dst, false,\n \t\t\t\t\t  known_vals,\n-\t\t\t\t\t  std::vector<value_range> (),\n+\t\t\t\t\t  vNULL,\n \t\t\t\t\t  vNULL,\n \t\t\t\t\t  &possible_truths,\n \t\t\t\t\t  /* We are going to specialize,\n@@ -3692,8 +3692,7 @@ estimate_ipcp_clone_size_and_time (struct cgraph_node *node,\n   clause_t clause, nonspec_clause;\n \n   /* TODO: Also pass known value ranges.  */\n-  evaluate_conditions_for_known_args (node, false, known_vals,\n-\t\t\t\t      std::vector<value_range> (),\n+  evaluate_conditions_for_known_args (node, false, known_vals, vNULL,\n \t\t\t\t      known_aggs, &clause, &nonspec_clause);\n   ipa_call_context ctx (node, clause, nonspec_clause,\n \t\t        known_vals, known_contexts,"}, {"sha": "db48e979d77843ef98607ed97603b385ad59b1d0", "filename": "gcc/vec.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c4b78dbef6f03838e3040688c934360a09513f/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c4b78dbef6f03838e3040688c934360a09513f/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=82c4b78dbef6f03838e3040688c934360a09513f", "patch": "@@ -1281,7 +1281,10 @@ template<typename T, typename A>\n inline size_t\n vec<T, A, vl_embed>::embedded_size (unsigned alloc)\n {\n-  typedef vec<T, A, vl_embed> vec_embedded;\n+  struct alignas (T) U { char data[sizeof (T)]; };\n+  typedef vec<U, A, vl_embed> vec_embedded;\n+  static_assert (sizeof (vec_embedded) == sizeof(vec), \"\");\n+  static_assert (alignof (vec_embedded) == alignof(vec), \"\");\n   return offsetof (vec_embedded, m_vecdata) + alloc * sizeof (T);\n }\n "}]}