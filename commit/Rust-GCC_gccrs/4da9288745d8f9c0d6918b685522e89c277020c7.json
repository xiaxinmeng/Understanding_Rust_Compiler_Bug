{"sha": "4da9288745d8f9c0d6918b685522e89c277020c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhOTI4ODc0NWQ4ZjljMGQ2OTE4YjY4NTUyMmU4OWMyNzcwMjBjNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-03-18T11:07:54Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-03-18T11:07:54Z"}, "message": "libgomp testsuite - disable long double for AMDGCN\n\n\t* testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C: Add\n\t#define DO_LONG_DOUBLE; set to 1, except for nvidia + gcn.\n\t* libgomp.oacc-c-c++-common/firstprivate-mappings-1.c: Likewise.\n\n\t* g++.dg/goacc/firstprivate-mappings-1.C: Only set DO_LONG_DOUBLE if\n\tnot defined; update comments.\n\t* c-c++-common/goacc/firstprivate-mappings-1.c: Likewise.", "tree": {"sha": "2c3f532a2464c1dc19ff1a5b4de978d904bffef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3f532a2464c1dc19ff1a5b4de978d904bffef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4da9288745d8f9c0d6918b685522e89c277020c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da9288745d8f9c0d6918b685522e89c277020c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da9288745d8f9c0d6918b685522e89c277020c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da9288745d8f9c0d6918b685522e89c277020c7/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3d3e40726e1b68bf52fa205c68495124ea60b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3d3e40726e1b68bf52fa205c68495124ea60b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3d3e40726e1b68bf52fa205c68495124ea60b8"}], "stats": {"total": 104, "additions": 63, "deletions": 41}, "files": [{"sha": "0b2e4b813f204228995ad7f4b7413df5e88b69e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -1,3 +1,9 @@\n+2020-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* g++.dg/goacc/firstprivate-mappings-1.C: Only set DO_LONG_DOUBLE if\n+\tnot defined; update comments.\n+\t* c-c++-common/goacc/firstprivate-mappings-1.c: Likewise.\n+\n 2020-03-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94188\n@@ -33,8 +39,8 @@\n \tDEFAULT_CXXFLAGS has a value, even if unset by a higher level.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n@@ -72,8 +78,8 @@\n \t* gcc.target/arm/mve/intrinsics/vshlcq_u8.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabdq_f16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vabdq_f32.c: Likewise.\n@@ -222,8 +228,8 @@\n \t* gcc.target/arm/mve/intrinsics/vsubq_f32.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabdq_s16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vabdq_s32.c: Likewise.\n@@ -587,8 +593,8 @@\n \t* gcc.target/arm/mve/intrinsics/vsubq_u8.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n@@ -606,8 +612,8 @@\n \t* gcc.target/arm/mve/intrinsics/vshlq_u8.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n@@ -629,8 +635,8 @@\n \t* gcc.target/arm/mve/intrinsics/vshrq_n_u8.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vbrsrq_n_f32.c: Likewise.\n@@ -644,8 +650,8 @@\n \t* gcc.target/arm/mve/intrinsics/vsubq_n_f32.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vctp16q.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vctp32q.c: Likewise.\n@@ -654,8 +660,8 @@\n \t* gcc.target/arm/mve/intrinsics/vpnot.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabsq_s16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vabsq_s32.c: Likewise.\n@@ -738,8 +744,8 @@\n \t* gcc.dg/pr94015.c: New test.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vcvtq_s16_f16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vcvtq_s32_f32.c: Likewise.\n@@ -757,8 +763,8 @@\n \t* gcc.target/arm/mve/intrinsics/vrev64q_u8.c: Likewise.\n \n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabsq_f16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vabsq_f32.c: Likewise.\n@@ -789,8 +795,8 @@\n \t* gcc.target/arm/mve/intrinsics/vrndxq_f32.c: Likewise.\n \n 2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vst4q_f16.c: New test.\n \t* gcc.target/arm/mve/intrinsics/vst4q_f32.c: Likewise.\n@@ -866,8 +872,8 @@\n \n \n 2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n-            Mihail Ionescu  <mihail.ionescu@arm.com>\n-            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n+\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_vector_float.c: New test.\n \t* gcc.target/arm/mve/intrinsics/mve_vector_float1.c: Likewise.\n@@ -1296,7 +1302,7 @@\n 2020-03-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/93986\n-        * gcc.dg/pr93986.c: New test.\n+\t* gcc.dg/pr93986.c: New test.\n \n 2020-03-04  David Malcolm  <dmalcolm@redhat.com>\n "}, {"sha": "7987beaed9a2eee5204e9d3865084996e0f9ab24", "filename": "gcc/testsuite/c-c++-common/goacc/firstprivate-mappings-1.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -2,7 +2,9 @@\n \n /* This file is also sourced from\n    '../../../../libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c'\n-   as an execution test.  */\n+   as an execution test.\n+\n+   'long double' tests are compiled/used unless DO_LONG_DOUBLE is set to 0.  */\n \n /* See also '../../g++.dg/goacc/firstprivate-mappings-1.C'.  */\n \n@@ -24,13 +26,7 @@\n # define HAVE_INT128 0\n #endif\n \n-\n-/* The one is only relevant for offloading compilation; will always be enabled\n-   when doing tree scanning.  */\n-#ifdef ACC_DEVICE_TYPE_nvidia\n-/* PR71064.  */\n-# define DO_LONG_DOUBLE 0\n-#else\n+#ifndef DO_LONG_DOUBLE\n # define DO_LONG_DOUBLE 1\n #endif\n "}, {"sha": "1b1badb1a9040c419b169b88e48410e2a82e75f9", "filename": "gcc/testsuite/g++.dg/goacc/firstprivate-mappings-1.C", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -2,7 +2,9 @@\n \n /* This file is also sourced from\n    '../../../../libgomp/testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C'\n-   as an execution test.  */\n+   as an execution test.\n+\n+   'long double' tests are compiled/used unless DO_LONG_DOUBLE is set to 0.  */\n \n /* See also '../../c-c++-common/goacc/firstprivate-mappings-1.c'.  */\n \n@@ -21,13 +23,7 @@\n # define HAVE_INT128 0\n #endif\n \n-\n-/* The one is only relevant for offloading compilation; will always be enabled\n-   when doing tree scanning.  */\n-#ifdef ACC_DEVICE_TYPE_nvidia\n-/* PR71064.  */\n-# define DO_LONG_DOUBLE 0\n-#else\n+#ifndef DO_LONG_DOUBLE\n # define DO_LONG_DOUBLE 1\n #endif\n "}, {"sha": "3dbe94bc982dcc6eed3729a263a7a6ec8b5d2ae4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -1,3 +1,9 @@\n+2020-03-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C: Add\n+\t#define DO_LONG_DOUBLE; set to 1, except for nvidia + gcn.\n+\t* libgomp.oacc-c-c++-common/firstprivate-mappings-1.c: Likewise.\n+\n 2020-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93566"}, {"sha": "7b3e670073c9beddb89feb083a1f2a5977b08266", "filename": "libgomp/testsuite/libgomp.oacc-c++/firstprivate-mappings-1.C", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Ffirstprivate-mappings-1.C?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -1,3 +1,12 @@\n /* Verify OpenACC 'firstprivate' mappings for C++ reference types.  */\n \n+/* PR middle-end/48591 */\n+/* PR other/71064 */\n+/* Set to 0 for offloading targets not supporting long double.  */\n+#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_gcn)\n+# define DO_LONG_DOUBLE 0\n+#else\n+# define DO_LONG_DOUBLE 1\n+#endif\n+\n #include \"../../../gcc/testsuite/g++.dg/goacc/firstprivate-mappings-1.C\""}, {"sha": "253f8bf0bd0267b39ab69c0da6d784cfb8b8b0f4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-mappings-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da9288745d8f9c0d6918b685522e89c277020c7/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-mappings-1.c?ref=4da9288745d8f9c0d6918b685522e89c277020c7", "patch": "@@ -3,4 +3,13 @@\n /* { dg-additional-options \"-Wno-psabi\" } as apparently we're doing funny\n    things with vector arguments.  */\n \n+/* PR middle-end/48591 */\n+/* PR other/71064 */\n+/* Set to 0 for offloading targets not supporting long double.  */\n+#if defined(ACC_DEVICE_TYPE_nvidia) || defined(ACC_DEVICE_TYPE_gcn)\n+# define DO_LONG_DOUBLE 0\n+#else\n+# define DO_LONG_DOUBLE 1\n+#endif\n+\n #include \"../../../gcc/testsuite/c-c++-common/goacc/firstprivate-mappings-1.c\""}]}