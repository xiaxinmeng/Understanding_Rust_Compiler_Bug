{"sha": "5f0be3d01adba827ac9a6376bf1c95785c28dc82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYmUzZDAxYWRiYTgyN2FjOWE2Mzc2YmYxYzk1Nzg1YzI4ZGM4Mg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-11-26T03:55:10Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-26T03:55:10Z"}, "message": "re PR middle-end/17957 (vector type node used after garbage-collected)\n\n2004-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17957\n        * testsuite/gcc.dg/pr17957.c: New test.\n\n2004-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17957\n        * tree-complex.c (vector_inner_type): New variable moved from\n        build_word_mode_vector_type.\n        (vector_last_type): Likewise.\n        (vector_last_nunits): Likewise.\n        (build_word_mode_vector_type): Use the new variables.\n        * Makefile.in (tree-complex.o): Add gt-tree-complex.h $(GGC_H).\n        (GTFILES): Add tree-complex.c.\n        (gt-tree-complex.h): New rule, add it to the rest of the gt-* rules.\n\nFrom-SVN: r91322", "tree": {"sha": "b02b389d6887174f0ac7668669e2cd531c33602a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02b389d6887174f0ac7668669e2cd531c33602a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0be3d01adba827ac9a6376bf1c95785c28dc82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0be3d01adba827ac9a6376bf1c95785c28dc82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0be3d01adba827ac9a6376bf1c95785c28dc82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0be3d01adba827ac9a6376bf1c95785c28dc82/comments", "author": null, "committer": null, "parents": [{"sha": "c0b57a5aad32336b1619a3dbed53ea2932f8084b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b57a5aad32336b1619a3dbed53ea2932f8084b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b57a5aad32336b1619a3dbed53ea2932f8084b"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "183fd91e1d5cbdf214ec9d73d67138932380cf42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0be3d01adba827ac9a6376bf1c95785c28dc82", "patch": "@@ -1,3 +1,15 @@\n+2004-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/17957\n+\t* tree-complex.c (vector_inner_type): New variable moved from\n+\tbuild_word_mode_vector_type.\n+\t(vector_last_type): Likewise.\n+\t(vector_last_nunits): Likewise.\n+\t(build_word_mode_vector_type): Use the new variables.\n+\t* Makefile.in (tree-complex.o): Add gt-tree-complex.h $(GGC_H).\n+\t(GTFILES): Add tree-complex.c.\n+\t(gt-tree-complex.h): New rule, add it to the rest of the gt-* rules.\n+\n 2004-11-25  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.h (TARGET_CPU_CPP_BUILTINS): Define"}, {"sha": "74d362ccc81ff0d3c207a40c09721879d14144d7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f0be3d01adba827ac9a6376bf1c95785c28dc82", "patch": "@@ -1962,7 +1962,7 @@ tree-sra.o : tree-sra.c $(CONFIG_H) system.h errors.h $(TREE_H) $(RTL_H) \\\n tree-complex.o : tree-complex.c $(CONFIG_H) system.h $(TREE_H) \\\n     $(TM_H) $(TREE_FLOW_H) $(TREE_GIMPLE_H) tree-iterator.h tree-pass.h \\\n     $(FLAGS_H) $(OPTABS_H) $(RTL_H) $(MACHMODE_H) $(EXPR_H) \\\n-    langhooks.h $(FLAGS_H) $(DIAGNOSTIC_H)\n+    langhooks.h $(FLAGS_H) $(DIAGNOSTIC_H) gt-tree-complex.h $(GGC_H)\n df.o : df.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) function.h $(REGS_H) alloc-pool.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(DF_H)\n@@ -2420,7 +2420,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-phinodes.c $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \\\n   $(srcdir)/tree-iterator.c $(srcdir)/gimplify.c \\\n-  $(srcdir)/tree-chrec.h \\\n+  $(srcdir)/tree-chrec.h $(srcdir)/tree-complex.c \\\n   $(srcdir)/tree-ssa-operands.h $(srcdir)/tree-ssa-operands.c \\\n   $(srcdir)/tree-profile.c $(srcdir)/rtl-profile.c $(srcdir)/tree-nested.c \\\n   $(out_file) \\\n@@ -2439,7 +2439,7 @@ gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h gt-dojump.h \\\n gt-dwarf2out.h gt-ra-build.h gt-reg-stack.h gt-dwarf2asm.h \\\n gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parse.h \\\n gt-c-pragma.h gtype-c.h gt-input.h gt-cfglayout.h \\\n-gt-tree-mudflap.h \\\n+gt-tree-mudflap.h gt-tree-complex.h \\\n gt-tree-ssa-ccp.h gt-tree-eh.h \\\n gt-tree-ssanames.h gt-tree-iterator.h gt-gimplify.h \\\n gt-tree-phinodes.h gt-tree-cfg.h gt-tree-nested.h \\"}, {"sha": "67da0286f4cf7e6a7383c532efa955a292dd636a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f0be3d01adba827ac9a6376bf1c95785c28dc82", "patch": "@@ -1,3 +1,8 @@\n+2004-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/17957\n+\t* testsuite/gcc.dg/pr17957.c: New test.\n+\n 2004-11-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/18445"}, {"sha": "292dbb5dda35bc313cdd334a2739a2a82b9ba8d5", "filename": "gcc/testsuite/gcc.dg/pr17957.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17957.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17957.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17957.c?ref=5f0be3d01adba827ac9a6376bf1c95785c28dc82", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--param ggc-min-expand=0 -param ggc-min-heapsize=0\" } */\n+__attribute__ ((vector_size (64))) unsigned char v1, v2, v3;\n+void\n+vadd (void)\n+{\n+  v1 = v2 + v3;\n+}\n+void\n+test_add (void)\n+{\n+  vadd ();\n+}\n+void\n+vsub (void)\n+{\n+  v1 = v2 - v3;\n+}"}, {"sha": "4a4ba62a05bc0f9d485524e7bd69bc19fbd5cd17", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0be3d01adba827ac9a6376bf1c95785c28dc82/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=5f0be3d01adba827ac9a6376bf1c95785c28dc82", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\"\n+#include \"ggc.h\"\n \n \n /* Extract the real or imaginary part of a complex variable or constant.\n@@ -509,25 +510,30 @@ build_replicated_const (tree type, tree inner_type, HOST_WIDE_INT value)\n   return ret;\n }\n \n+static GTY(()) tree vector_inner_type;\n+static GTY(()) tree vector_last_type;\n+static GTY(()) int vector_last_nunits;\n+\n /* Return a suitable vector types made of SUBPARTS units each of mode\n    \"word_mode\" (the global variable).  */\n static tree\n build_word_mode_vector_type (int nunits)\n {\n-  static tree innertype;\n-  static tree last;\n-  static int last_nunits;\n-\n-  if (!innertype)\n-    innertype = lang_hooks.types.type_for_mode (word_mode, 1);\n-  else if (last_nunits == nunits)\n-    return last;\n+  if (!vector_inner_type)\n+    vector_inner_type = lang_hooks.types.type_for_mode (word_mode, 1);\n+  else if (vector_last_nunits == nunits)\n+    {\n+      gcc_assert (TREE_CODE (vector_last_type) == VECTOR_TYPE);\n+      return vector_last_type;\n+    }\n \n   /* We build a new type, but we canonicalize it nevertheless,\n      because it still saves some memory.  */\n-  last_nunits = nunits;\n-  last = type_hash_canon (nunits, build_vector_type (innertype, nunits));\n-  return last;\n+  vector_last_nunits = nunits;\n+  vector_last_type = type_hash_canon (nunits,\n+\t\t\t\t      build_vector_type (vector_inner_type,\n+\t\t\t\t\t\t\t nunits));\n+  return vector_last_type;\n }\n \n typedef tree (*elem_op_func) (block_stmt_iterator *,\n@@ -953,3 +959,5 @@ struct tree_opt_pass pass_pre_expand =\n     | TODO_verify_stmts,\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n+\n+#include \"gt-tree-complex.h\""}]}