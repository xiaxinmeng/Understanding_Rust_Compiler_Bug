{"sha": "ed881c38adb627c7b8ed10d98f6937834ef90d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4ODFjMzhhZGI2MjdjN2I4ZWQxMGQ5OGY2OTM3ODM0ZWY5MGQ0Mw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2015-11-26T14:56:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2015-11-26T14:56:24Z"}, "message": "DWARF: fix loc. descr. generation for DW_AT_static_link\n\ngcc/ChangeLog:\n\n\tPR debug/53927\n\t* tree-nested.c (finalize_nesting_tree_1): Append a field to\n\thold the frame base address.\n\t* dwarf2out.c (gen_subprogram_die): Generate for\n\tDW_AT_static_link a location description that computes the value\n\tof this field.\n\nFrom-SVN: r230968", "tree": {"sha": "26e86a526df43e3c7ee7962c8e476e804f433978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e86a526df43e3c7ee7962c8e476e804f433978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed881c38adb627c7b8ed10d98f6937834ef90d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed881c38adb627c7b8ed10d98f6937834ef90d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed881c38adb627c7b8ed10d98f6937834ef90d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed881c38adb627c7b8ed10d98f6937834ef90d43/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09c5c12e560b7804b14f599e858929787193da30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c5c12e560b7804b14f599e858929787193da30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c5c12e560b7804b14f599e858929787193da30"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "07ed7baaa2a63d04f3cf60c1a0ec62cf5cc0eadf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed881c38adb627c7b8ed10d98f6937834ef90d43", "patch": "@@ -1,3 +1,12 @@\n+2015-11-26  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\tPR debug/53927\n+\t* tree-nested.c (finalize_nesting_tree_1): Append a field to\n+\thold the frame base address.\n+\t* dwarf2out.c (gen_subprogram_die): Generate for\n+\tDW_AT_static_link a location description that computes the value\n+\tof this field.\n+\n 2015-11-26  Tom de Vries  <tom@codesourcery.com>\n \n \trevert:"}, {"sha": "add22045377fb1f00eee38e800d35f6ef92ea9cb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ed881c38adb627c7b8ed10d98f6937834ef90d43", "patch": "@@ -19113,9 +19113,23 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       compute_frame_pointer_to_fb_displacement (cfa_fb_offset);\n \n       if (fun->static_chain_decl)\n-\tadd_AT_location_description\n-\t  (subr_die, DW_AT_static_link,\n-\t   loc_list_from_tree (fun->static_chain_decl, 2, NULL));\n+\t{\n+\t  /* DWARF requires here a location expression that computes the\n+\t     address of the enclosing subprogram's frame base.  The machinery\n+\t     in tree-nested.c is supposed to store this specific address in the\n+\t     last field of the FRAME record.  */\n+\t  const tree frame_type\n+\t    = TREE_TYPE (TREE_TYPE (fun->static_chain_decl));\n+\t  const tree fb_decl = tree_last (TYPE_FIELDS (frame_type));\n+\n+\t  tree fb_expr\n+\t    = build1 (INDIRECT_REF, frame_type, fun->static_chain_decl);\n+\t  fb_expr = build3 (COMPONENT_REF, TREE_TYPE (fb_decl),\n+\t\t\t    fb_expr, fb_decl, NULL_TREE);\n+\n+\t  add_AT_location_description (subr_die, DW_AT_static_link,\n+\t\t\t\t       loc_list_from_tree (fb_expr, 0, NULL));\n+\t}\n     }\n \n   /* Generate child dies for template paramaters.  */"}, {"sha": "280d29b92473bc6faf48bad310b46f3fbf116bec", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed881c38adb627c7b8ed10d98f6937834ef90d43/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=ed881c38adb627c7b8ed10d98f6937834ef90d43", "patch": "@@ -2722,10 +2722,10 @@ fold_mem_refs (tree *const &e, void *data ATTRIBUTE_UNUSED)\n   return true;\n }\n \n-/* Do \"everything else\" to clean up or complete state collected by the\n-   various walking passes -- lay out the types and decls, generate code\n-   to initialize the frame decl, store critical expressions in the\n-   struct function for rtl to find.  */\n+/* Do \"everything else\" to clean up or complete state collected by the various\n+   walking passes -- create a field to hold the frame base address, lay out the\n+   types and decls, generate code to initialize the frame decl, store critical\n+   expressions in the struct function for rtl to find.  */\n \n static void\n finalize_nesting_tree_1 (struct nesting_info *root)\n@@ -2741,20 +2741,70 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n      out at this time.  */\n   if (root->frame_type)\n     {\n+      /* Debugging information needs to compute the frame base address of the\n+\t parent frame out of the static chain from the nested frame.\n+\n+\t The static chain is the address of the FRAME record, so one could\n+\t imagine it would be possible to compute the frame base address just\n+\t adding a constant offset to this address.  Unfortunately, this is not\n+\t possible: if the FRAME object has alignment constraints that are\n+\t stronger than the stack, then the offset between the frame base and\n+\t the FRAME object will be dynamic.\n+\n+\t What we do instead is to append a field to the FRAME object that holds\n+\t the frame base address: then debug info just has to fetch this\n+\t field.  */\n+\n+      /* Debugging information will refer to the CFA as the frame base\n+\t address: we will do the same here.  */\n+      const tree frame_addr_fndecl\n+        = builtin_decl_explicit (BUILT_IN_DWARF_CFA);\n+\n+      /* Create a field in the FRAME record to hold the frame base address for\n+\t this stack frame.  Since it will be used only by the debugger, put it\n+\t at the end of the record in order not to shift all other offsets.  */\n+      tree fb_decl = make_node (FIELD_DECL);\n+\n+      DECL_NAME (fb_decl) = get_identifier (\"FRAME_BASE.PARENT\");\n+      TREE_TYPE (fb_decl) = ptr_type_node;\n+      TREE_ADDRESSABLE (fb_decl) = 1;\n+      DECL_CONTEXT (fb_decl) = root->frame_type;\n+      TYPE_FIELDS (root->frame_type) = chainon (TYPE_FIELDS (root->frame_type),\n+\t\t\t\t\t\tfb_decl);\n+\n       /* In some cases the frame type will trigger the -Wpadded warning.\n \t This is not helpful; suppress it. */\n       int save_warn_padded = warn_padded;\n-      tree *adjust;\n-\n       warn_padded = 0;\n       layout_type (root->frame_type);\n       warn_padded = save_warn_padded;\n       layout_decl (root->frame_decl, 0);\n \n+      /* Initialize the frame base address field.  If the builtin we need is\n+\t not available, set it to NULL so that debugging information does not\n+\t reference junk.  */\n+      tree fb_ref = build3 (COMPONENT_REF, TREE_TYPE (fb_decl),\n+\t\t\t    root->frame_decl, fb_decl, NULL_TREE);\n+      tree fb_tmp;\n+\n+      if (frame_addr_fndecl != NULL_TREE)\n+\t{\n+\t  gcall *fb_gimple = gimple_build_call (frame_addr_fndecl, 1,\n+\t\t\t\t\t\tinteger_zero_node);\n+\t  gimple_stmt_iterator gsi = gsi_last (stmt_list);\n+\n+\t  fb_tmp = init_tmp_var_with_call (root, &gsi, fb_gimple);\n+\t}\n+      else\n+\tfb_tmp = build_int_cst (TREE_TYPE (fb_ref), 0);\n+      gimple_seq_add_stmt (&stmt_list,\n+\t\t\t   gimple_build_assign (fb_ref, fb_tmp));\n+\n       /* Remove root->frame_decl from root->new_local_var_chain, so\n \t that we can declare it also in the lexical blocks, which\n \t helps ensure virtual regs that end up appearing in its RTL\n \t expression get substituted in instantiate_virtual_regs().  */\n+      tree *adjust;\n       for (adjust = &root->new_local_var_chain;\n \t   *adjust != root->frame_decl;\n \t   adjust = &DECL_CHAIN (*adjust))"}]}