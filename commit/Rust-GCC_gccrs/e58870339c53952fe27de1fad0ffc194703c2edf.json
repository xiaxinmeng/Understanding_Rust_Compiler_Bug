{"sha": "e58870339c53952fe27de1fad0ffc194703c2edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4ODcwMzM5YzUzOTUyZmUyN2RlMWZhZDBmZmMxOTQ3MDNjMmVkZg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-29T02:53:44Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-29T02:53:44Z"}, "message": "varasm.c (enum in_section): Define in_bss if BSS_SECTION_ASM_OP is defined.\n\n\t* varasm.c (enum in_section): Define in_bss if BSS_SECTION_ASM_OP\n\tis defined.\n\t(bss_section,asm_output_bss,asm_output_aligned_bss): New functions.\n\t(assemble_variable): Delete redundant test for too large an object.\n\tRewrite test for uninitialized variables.  Use new macros\n\tASM_OUTPUT{,_ALIGNED}_BSS if defined to output global uninitialized\n\tbut not common variables.\n\nFrom-SVN: r11364", "tree": {"sha": "beebba16adf57d011a32c04a4f5e85b0eaf867c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beebba16adf57d011a32c04a4f5e85b0eaf867c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58870339c53952fe27de1fad0ffc194703c2edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58870339c53952fe27de1fad0ffc194703c2edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58870339c53952fe27de1fad0ffc194703c2edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58870339c53952fe27de1fad0ffc194703c2edf/comments", "author": null, "committer": null, "parents": [{"sha": "58b57c2c7045c0db32a3e1d3c3eb8f40040ebcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b57c2c7045c0db32a3e1d3c3eb8f40040ebcc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b57c2c7045c0db32a3e1d3c3eb8f40040ebcc7"}], "stats": {"total": 139, "additions": 125, "deletions": 14}, "files": [{"sha": "f9f5dd0f0c615ad3afb5654ddf06be1a8ebe92d3", "filename": "gcc/varasm.c", "status": "modified", "additions": 125, "deletions": 14, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58870339c53952fe27de1fad0ffc194703c2edf/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58870339c53952fe27de1fad0ffc194703c2edf/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e58870339c53952fe27de1fad0ffc194703c2edf", "patch": "@@ -146,13 +146,14 @@ static int output_addressed_constants\tPROTO((tree));\n static void bc_assemble_integer\t\tPROTO((tree, int));\n static void output_constructor\t\tPROTO((tree, int));\n \f\n+static enum in_section { no_section, in_text, in_data, in_named\n+#ifdef BSS_SECTION_ASM_OP\n+  , in_bss\n+#endif\n #ifdef EXTRA_SECTIONS\n-static enum in_section {no_section, in_text, in_data, in_named, EXTRA_SECTIONS} in_section\n-  = no_section;\n-#else\n-static enum in_section {no_section, in_text, in_data, in_named} in_section\n-  = no_section;\n+  , EXTRA_SECTIONS\n #endif\n+} in_section = no_section;\n \n /* Return a non-zero value if DECL has a section attribute.  */\n #define IN_NAMED_SECTION(DECL) \\\n@@ -268,6 +269,76 @@ named_section (decl, name)\n     }\n }\n \n+#ifdef BSS_SECTION_ASM_OP\n+\n+/* Tell the assembler to switch to the bss section.  */\n+\n+void\n+bss_section (decl, name)\n+{\n+  if (in_section != in_bss)\n+    {\n+      if (output_bytecode)\n+\tbc_data ();\n+      else\n+\t{\n+#ifdef SHARED_BSS_SECTION_ASM_OP\n+\t  if (flag_shared_data)\n+\t    fprintf (asm_out_file, \"%s\\n\", SHARED_BSS_SECTION_ASM_OP);\n+\t  else\n+#endif\n+\t    fprintf (asm_out_file, \"%s\\n\", BSS_SECTION_ASM_OP);\n+\t}\n+\n+      in_section = in_bss;\n+    }\n+}\n+\n+#ifdef ASM_OUTPUT_BSS\n+\n+/* Utility function for ASM_OUTPUT_BSS for targets to use if\n+   they don't support alignments in .bss.\n+   ??? It is believed that this function will work in most cases so such\n+   support is localized here.  */\n+\n+static void\n+asm_output_bss (file, name, size, rounded)\n+     FILE *file;\n+     char *name;\n+     int size, rounded;\n+{\n+  ASM_GLOBALIZE_LABEL (file, name);\n+  bss_section ();\n+  ASM_OUTPUT_LABEL (file, name);\n+  ASM_OUTPUT_SKIP (file, rounded);\n+}\n+\n+#endif\n+\n+#ifdef ASM_OUTPUT_ALIGNED_BSS\n+\n+/* Utility function for targets to use in implementing\n+   ASM_OUTPUT_ALIGNED_BSS.\n+   ??? It is believed that this function will work in most cases so such\n+   support is localized here.  */\n+\n+static void\n+asm_output_aligned_bss (file, name, size, align)\n+     FILE *file;\n+     char *name;\n+     int size, align;\n+{\n+  ASM_GLOBALIZE_LABEL (file, name);\n+  bss_section ();\n+  ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n+  ASM_OUTPUT_LABEL (file, name);\n+  ASM_OUTPUT_SKIP (file, size);\n+}\n+\n+#endif\n+\n+#endif /* BSS_SECTION_ASM_OP */\n+\n /* Switch to the section for function DECL.\n \n    If DECL is NULL_TREE, switch to the text section.\n@@ -305,7 +376,12 @@ variable_section (decl, reloc)\n \n \t error_mark_node is used by the C front end to indicate that the\n \t initializer has not been seen yet.  In this case, we assume that\n-\t the initializer must be constant.  */\n+\t the initializer must be constant.\n+\n+\t C++ uses error_mark_node for variables that have complicated\n+\t initializers, but these variables go in BSS so we won't be called\n+\t for them.  */\n+\n #ifdef SELECT_SECTION\n       SELECT_SECTION (decl, reloc);\n #else\n@@ -1134,16 +1210,19 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n      initializer equal to zero.  (Section 3.7.2)\n      -fno-common gives strict ANSI behavior.  Usually you don't want it.\n      This matters only for variables with external linkage.  */\n-  if ((! flag_no_common || ! TREE_PUBLIC (decl))\n+\n+  if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node)\n+      /* If the target can't output uninitialized but not common global data\n+\t in .bss, then we have to use .data.  */\n+#if ! defined (ASM_OUTPUT_BSS) && ! defined (ASM_OUTPUT_ALIGNED_BSS)\n+      && (! flag_no_common || ! TREE_PUBLIC (decl))\n       && DECL_COMMON (decl)\n-      && ! dont_output_data\n-      && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n+#endif\n+      && ! dont_output_data)\n     {\n       int size = TREE_INT_CST_LOW (size_tree);\n       int rounded = size;\n \n-      if (TREE_INT_CST_HIGH (size_tree) != 0)\n-\terror_with_decl (decl, \"size of variable `%s' is too large\");\n       /* Don't allocate zero bytes of common,\n \t since that means \"undefined external\" in the linker.  */\n       if (size == 0) rounded = 1;\n@@ -1174,11 +1253,18 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \t while we are doing our final traversal of the chain of file-scope\n \t declarations.  */\n \n-#if 0\n+#if 0 /* ??? We should either delete this or add a comment describing what\n+\t it was intended to do and why we shouldn't delete it.  */\n       if (flag_shared_data)\n \tdata_section ();\n #endif\n-      if (TREE_PUBLIC (decl))\n+\n+      if (TREE_PUBLIC (decl)\n+#if defined (ASM_OUTPUT_BSS) || defined (ASM_OUTPUT_ALIGNED_BSS)\n+\t  && DECL_COMMON (decl)\n+\t  && ! flag_no_common\n+#endif\n+\t  )\n \t{\n #ifdef ASM_OUTPUT_SHARED_COMMON\n \t  if (flag_shared_data)\n@@ -1199,6 +1285,29 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #endif\n \t      }\n \t}\n+#if defined (ASM_OUTPUT_BSS) || defined (ASM_OUTPUT_ALIGNED_BSS)\n+      else if (TREE_PUBLIC (decl))\n+\t{\n+#ifdef ASM_OUTPUT_SHARED_BSS\n+\t  if (flag_shared_data)\n+\t    ASM_OUTPUT_SHARED_BSS (asm_out_file, name, size, rounded);\n+\t  else\n+#endif\n+\t    if (output_bytecode)\n+\t      {\n+\t\tBC_OUTPUT_BSS (asm_out_file, name, size, rounded);\n+\t      }\n+\t    else\n+\t      {\n+#ifdef ASM_OUTPUT_ALIGNED_BSS\n+\t\tASM_OUTPUT_ALIGNED_BSS (asm_out_file, name, size,\n+\t\t\t\t\tDECL_ALIGN (decl));\n+#else\n+\t\tASM_OUTPUT_BSS (asm_out_file, name, size, rounded);\n+#endif\n+\t      }\n+\t}\n+#endif /* ASM_OUTPUT_BSS || ASM_OUTPUT_ALIGNED_BSS */\n       else\n \t{\n #ifdef ASM_OUTPUT_SHARED_LOCAL\n@@ -1223,7 +1332,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       goto finish;\n     }\n \n-  /* Handle initialized definitions.  */\n+  /* Handle initialized definitions.\n+     Also handle uninitialized global definitions if -fno-common and the\n+     target doesn't support ASM_OUTPUT_BSS.  */\n \n   /* First make the assembler name(s) global if appropriate.  */\n   if (TREE_PUBLIC (decl) && DECL_NAME (decl))"}]}