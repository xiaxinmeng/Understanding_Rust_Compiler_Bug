{"sha": "9bfa80fb88707e345517a65a5697e398d674f34c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmYTgwZmI4ODcwN2UzNDU1MTdhNjVhNTY5N2UzOThkNjc0ZjM0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-09T21:00:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-09T21:00:49Z"}, "message": "dbxout.c: Include expr.h.\n\n        * dbxout.c: Include expr.h.\n        (dbxout_global_decl): Don't suppress for DECL_RTL unset.\n        (dbxout_symbol): Handle DECL_VALUE_EXPR.\n        * Makefile.in (dbxout.o): Add EXPR_H.\ncp/\n        * cp-tree.def (ALIAS_DECL): Remove.\n        * cp-lang.c (cp_init_ts): Remove support for it.\n        * error.c (dump_decl): Likewise.\n        * name-lookup.c (pushdecl): Likewise.\n        * semantics.c (finish_id_expression): Likewise.\n        * decl2.c (build_anon_union_vars): Use a VAR_DECL with\n        DECL_VALUE_EXPR instead.\n\nFrom-SVN: r104106", "tree": {"sha": "f2b0299f3ac13dea0d2e51a788d52e8423748b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b0299f3ac13dea0d2e51a788d52e8423748b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bfa80fb88707e345517a65a5697e398d674f34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfa80fb88707e345517a65a5697e398d674f34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfa80fb88707e345517a65a5697e398d674f34c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfa80fb88707e345517a65a5697e398d674f34c/comments", "author": null, "committer": null, "parents": [{"sha": "e27edcd4526ab71fc35de142e8036b6abfa9be88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27edcd4526ab71fc35de142e8036b6abfa9be88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27edcd4526ab71fc35de142e8036b6abfa9be88"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "1672806b59abe82074d14ac74d21771ef8de89b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -1,3 +1,11 @@\n+2005-09-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/20998\n+\t* dbxout.c: Include expr.h.\n+\t(dbxout_global_decl): Don't suppress for DECL_RTL unset.\n+\t(dbxout_symbol): Handle DECL_VALUE_EXPR.\n+\t* Makefile.in (dbxout.o): Add EXPR_H.\n+\n 2005-09-09  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/23509"}, {"sha": "f260f37a9fe40219e26ff30b767dbdb602d607a8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -2103,10 +2103,10 @@ optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h \\\n    $(RECOG_H) reload.h toplev.h $(GGC_H) real.h $(TM_P_H) except.h \\\n    gt-optabs.h $(BASIC_BLOCK_H) $(TARGET_H) function.h\n-dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n-   $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n-   insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\\n-   $(GGC_H) $(OBSTACK_H) gt-dbxout.h\n+dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n+   $(RTL_H) $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h \\\n+   langhooks.h insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h \\\n+   toplev.h $(GGC_H) $(OBSTACK_H) $(EXPR_H) gt-dbxout.h\n debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n    $(TREE_H) $(GGC_H) $(RTL_H) $(REGS_H) $(FLAGS_H) insn-config.h \\"}, {"sha": "7aa392f7464f220be18725b10fbede968419025d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -1,3 +1,14 @@\n+2005-09-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/20998\n+\t* cp-tree.def (ALIAS_DECL): Remove.\n+\t* cp-lang.c (cp_init_ts): Remove support for it.\n+\t* error.c (dump_decl): Likewise.\n+\t* name-lookup.c (pushdecl): Likewise.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\t* decl2.c (build_anon_union_vars): Use a VAR_DECL with\n+\tDECL_VALUE_EXPR instead.\n+\n 2005-09-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22252"}, {"sha": "38e2e5acd82edd9926335d357f568ea08d717693", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -117,27 +117,22 @@ cp_init_ts (void)\n   tree_contains_struct[NAMESPACE_DECL][TS_DECL_NON_COMMON] = 1;\n   tree_contains_struct[USING_DECL][TS_DECL_NON_COMMON] = 1;\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[ALIAS_DECL][TS_DECL_NON_COMMON] = 1;\n \n   tree_contains_struct[NAMESPACE_DECL][TS_DECL_WITH_VIS] = 1;\n   tree_contains_struct[USING_DECL][TS_DECL_WITH_VIS] = 1;\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[ALIAS_DECL][TS_DECL_WITH_VIS] = 1;\n \n   tree_contains_struct[NAMESPACE_DECL][TS_DECL_WRTL] = 1;\n   tree_contains_struct[USING_DECL][TS_DECL_WRTL] = 1;\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[ALIAS_DECL][TS_DECL_WRTL] = 1;\n   \n   tree_contains_struct[NAMESPACE_DECL][TS_DECL_COMMON] = 1;\n   tree_contains_struct[USING_DECL][TS_DECL_COMMON] = 1;\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[ALIAS_DECL][TS_DECL_COMMON] = 1;\n  \n   tree_contains_struct[NAMESPACE_DECL][TS_DECL_MINIMAL] = 1;\n   tree_contains_struct[USING_DECL][TS_DECL_MINIMAL] = 1;\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[ALIAS_DECL][TS_DECL_MINIMAL] = 1;\n \n   init_shadowed_var_for_decl ();\n "}, {"sha": "096d00a8be0d10c0198fd818c000a1803ae51631", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -87,10 +87,6 @@ DEFTREECODE (THROW_EXPR, \"throw_expr\", tcc_expression, 1)\n    these to avoid actually creating instances of the empty classes.  */\n DEFTREECODE (EMPTY_CLASS_EXPR, \"empty_class_expr\", tcc_expression, 0)\n \n-/* A DECL which is really just a placeholder for an expression.  Used to\n-   implement non-class scope anonymous unions.  */\n-DEFTREECODE (ALIAS_DECL, \"alias_decl\", tcc_declaration, 0)\n-\n /* A reference to a member function or member functions from a base\n    class.  BASELINK_FUNCTIONS gives the FUNCTION_DECL,\n    TEMPLATE_DECL, OVERLOAD, or TEMPLATE_ID_EXPR corresponding to the"}, {"sha": "8ef6fa863fd06d7b98e6a712889245e318b8c5b5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -1057,7 +1057,7 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n }\n \f\n /* Walks through the namespace- or function-scope anonymous union\n-   OBJECT, with the indicated TYPE, building appropriate ALIAS_DECLs.\n+   OBJECT, with the indicated TYPE, building appropriate VAR_DECLs.\n    Returns one of the fields for use in the mangled name.  */\n \n static tree\n@@ -1101,11 +1101,12 @@ build_anon_union_vars (tree type, tree object)\n \n       if (DECL_NAME (field))\n \t{\n-\t  decl = build_decl (ALIAS_DECL, DECL_NAME (field), TREE_TYPE (field));\n-\t  DECL_INITIAL (decl) = ref;\n-\t  TREE_PUBLIC (decl) = 0;\n-\t  TREE_STATIC (decl) = 0;\n-\t  DECL_EXTERNAL (decl) = 1;\n+\t  decl = build_decl (VAR_DECL, DECL_NAME (field), TREE_TYPE (field));\n+\t  TREE_PUBLIC (decl) = TREE_PUBLIC (object);\n+\t  TREE_STATIC (decl) = TREE_PUBLIC (object);\n+\t  DECL_EXTERNAL (decl) = DECL_EXTERNAL (object);\n+\t  SET_DECL_VALUE_EXPR (decl, ref);\n+\t  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n \t  decl = pushdecl (decl);\n \t}\n       else if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))"}, {"sha": "12201198630acc0a9cb319da7d0b6472b5ae64ad", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -744,7 +744,6 @@ dump_decl (tree t, int flags)\n       /* Else fall through.  */\n     case FIELD_DECL:\n     case PARM_DECL:\n-    case ALIAS_DECL:\n       dump_simple_decl (t, TREE_TYPE (t), flags);\n       break;\n "}, {"sha": "cba939335880ab45300c4e881c67efc26ced8b17", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -831,7 +831,6 @@ pushdecl (tree x)\n \t\t&& t != NULL_TREE)\n \t      && (TREE_CODE (x) == TYPE_DECL\n \t\t  || TREE_CODE (x) == VAR_DECL\n-\t\t  || TREE_CODE (x) == ALIAS_DECL\n \t\t  || TREE_CODE (x) == NAMESPACE_DECL\n \t\t  || TREE_CODE (x) == CONST_DECL\n \t\t  || TREE_CODE (x) == TEMPLATE_DECL))"}, {"sha": "0e926bf1d2694614ae6efa4c9aa0bd977377f096", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -2747,11 +2747,6 @@ finish_id_expression (tree id_expression,\n \n \t  decl = convert_from_reference (decl);\n \t}\n-\n-      /* Resolve references to variables of anonymous unions\n-\t into COMPONENT_REFs.  */\n-      if (TREE_CODE (decl) == ALIAS_DECL)\n-\tdecl = unshare_expr (DECL_INITIAL (decl));\n     }\n \n   if (TREE_DEPRECATED (decl))"}, {"sha": "48c00b5100a3b49867be82c786a609e7308faa95", "filename": "gcc/dbxout.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfa80fb88707e345517a65a5697e398d674f34c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9bfa80fb88707e345517a65a5697e398d674f34c", "patch": "@@ -89,6 +89,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"target.h\"\n #include \"langhooks.h\"\n #include \"obstack.h\"\n+#include \"expr.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -1319,9 +1320,7 @@ dbxout_function_decl (tree decl)\n static void\n dbxout_global_decl (tree decl)\n {\n-  if (TREE_CODE (decl) == VAR_DECL\n-      && ! DECL_EXTERNAL (decl)\n-      && DECL_RTL_SET_P (decl))\t/* Not necessary?  */\n+  if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl))\n     {\n       int saved_tree_used = TREE_USED (decl);\n       TREE_USED (decl) = 1;\n@@ -2337,6 +2336,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n   tree type = TREE_TYPE (decl);\n   tree context = NULL_TREE;\n   int result = 0;\n+  rtx decl_rtl;\n \n   /* \"Intercept\" dbxout_symbol() calls like we do all debug_hooks.  */\n   ++debug_nesting;\n@@ -2421,7 +2421,8 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n       break;\n \n     case FUNCTION_DECL:\n-      if (DECL_RTL (decl) == 0)\n+      decl_rtl = DECL_RTL_IF_SET (decl);\n+      if (!decl_rtl)\n \tDBXOUT_DECR_NESTING_AND_RETURN (0);\n       if (DECL_EXTERNAL (decl))\n \tbreak;\n@@ -2432,8 +2433,8 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n       /* Don't mention an inline instance of a nested function.  */\n       if (context && DECL_FROM_INLINE (decl))\n \tbreak;\n-      if (!MEM_P (DECL_RTL (decl))\n-\t  || GET_CODE (XEXP (DECL_RTL (decl), 0)) != SYMBOL_REF)\n+      if (!MEM_P (decl_rtl)\n+\t  || GET_CODE (XEXP (decl_rtl, 0)) != SYMBOL_REF)\n \tbreak;\n \n       dbxout_begin_complex_stabs ();\n@@ -2457,8 +2458,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t  stabstr_I (DECL_NAME (context));\n \t}\n \n-      dbxout_finish_complex_stabs (decl, N_FUN, XEXP (DECL_RTL (decl), 0),\n-\t\t\t\t   0, 0);\n+      dbxout_finish_complex_stabs (decl, N_FUN, XEXP (decl_rtl, 0), 0, 0);\n       break;\n \n     case TYPE_DECL:\n@@ -2609,14 +2609,25 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \n     case RESULT_DECL:\n       /* Named return value, treat like a VAR_DECL.  */\n+      decl_rtl = DECL_RTL_IF_SET (decl);\n+      goto do_var_decl;\n+\n     case VAR_DECL:\n-      if (! DECL_RTL_SET_P (decl))\n-\tDBXOUT_DECR_NESTING_AND_RETURN (0);\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n       if (DECL_EXTERNAL (decl))\n \tbreak;\n \n+      if (DECL_HAS_VALUE_EXPR_P (decl))\n+\tdecl_rtl = expand_expr (DECL_VALUE_EXPR (decl), NULL_RTX, VOIDmode,\n+\t\t\t\tEXPAND_INITIALIZER);\n+      else\n+\tdecl_rtl = DECL_RTL_IF_SET (decl);\n+\n+    do_var_decl:\n+      if (!decl_rtl)\n+\tDBXOUT_DECR_NESTING_AND_RETURN (0);\n+\n       /* If the variable is really a constant\n \t and not written in memory, inform the debugger.\n \n@@ -2649,13 +2660,13 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t}\n       /* else it is something we handle like a normal variable.  */\n \n-      SET_DECL_RTL (decl, eliminate_regs (DECL_RTL (decl), 0, NULL_RTX));\n+      decl_rtl = eliminate_regs (decl_rtl, 0, NULL_RTX);\n #ifdef LEAF_REG_REMAP\n       if (current_function_uses_only_leaf_regs)\n-\tleaf_renumber_regs_insn (DECL_RTL (decl));\n+\tleaf_renumber_regs_insn (decl_rtl);\n #endif\n \n-      result = dbxout_symbol_location (decl, type, 0, DECL_RTL (decl));\n+      result = dbxout_symbol_location (decl, type, 0, decl_rtl);\n       break;\n \n     default:"}]}