{"sha": "4ca4d1e95e39d256095f8274d8dd0d04aed603da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhNGQxZTk1ZTM5ZDI1NjA5NWY4Mjc0ZDhkZDBkMDRhZWQ2MDNkYQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2017-02-19T18:43:49Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2017-02-19T18:43:49Z"}, "message": "re PR fortran/79229 (ICE in gfc_trans_assignment_1 with -fcheck=mem)\n\ngcc/testsuite/ChangeLog:\n\n2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/79229\n\t* gfortran.dg/class_allocate_24.f90: New test.\n\n\ngcc/fortran/ChangeLog:\n\n2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/79229\n\t* trans-expr.c (gfc_trans_assignment_1): Deref indirect refs when\n\tcompiling with -fcheck=mem to check the pointer and not the data.\n\nFrom-SVN: r245581", "tree": {"sha": "bb58e020c2ac474097b535a37750596b6616dbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb58e020c2ac474097b535a37750596b6616dbf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca4d1e95e39d256095f8274d8dd0d04aed603da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca4d1e95e39d256095f8274d8dd0d04aed603da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca4d1e95e39d256095f8274d8dd0d04aed603da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca4d1e95e39d256095f8274d8dd0d04aed603da/comments", "author": null, "committer": null, "parents": [{"sha": "dea71ad06f751484f3eb5c52bf12622e4c06b33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea71ad06f751484f3eb5c52bf12622e4c06b33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea71ad06f751484f3eb5c52bf12622e4c06b33a"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "3dfbbc5ed5b4d4bd85198b1a425f2d1e5f03edb3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ca4d1e95e39d256095f8274d8dd0d04aed603da", "patch": "@@ -5,6 +5,12 @@\n \t(gfc_resolve_expr): Call it for dummy variables with a unique\n \tsymtree name.\n \n+2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79229\n+\t* trans-expr.c (gfc_trans_assignment_1): Deref indirect refs when\n+\tcompiling with -fcheck=mem to check the pointer and not the data.\n+\n 2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/79335"}, {"sha": "9c4715b44be102d8fac22e62605889f8ac84632a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4ca4d1e95e39d256095f8274d8dd0d04aed603da", "patch": "@@ -9961,13 +9961,16 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t  tree cond;\n \t  const char* msg;\n \n+\t  tmp = INDIRECT_REF_P (lse.expr)\n+\t      ? gfc_build_addr_expr (NULL_TREE, lse.expr) : lse.expr;\n+\n \t  /* We should only get array references here.  */\n-\t  gcc_assert (TREE_CODE (lse.expr) == POINTER_PLUS_EXPR\n-\t\t      || TREE_CODE (lse.expr) == ARRAY_REF);\n+\t  gcc_assert (TREE_CODE (tmp) == POINTER_PLUS_EXPR\n+\t\t      || TREE_CODE (tmp) == ARRAY_REF);\n \n \t  /* 'tmp' is either the pointer to the array(POINTER_PLUS_EXPR)\n \t     or the array itself(ARRAY_REF).  */\n-\t  tmp = TREE_OPERAND (lse.expr, 0);\n+\t  tmp = TREE_OPERAND (tmp, 0);\n \n \t  /* Provide the address of the array.  */\n \t  if (TREE_CODE (lse.expr) == ARRAY_REF)"}, {"sha": "eb74a459abfe60e20e1fce04f6a8e5eef5c1f80f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ca4d1e95e39d256095f8274d8dd0d04aed603da", "patch": "@@ -1,3 +1,8 @@\n+2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79229\n+\t* gfortran.dg/class_allocate_24.f90: New test.\n+\n 2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79402"}, {"sha": "883247dd7b886ff6e66aa4147b27f7cd75db33a4", "filename": "gcc/testsuite/gfortran.dg/class_allocate_24.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca4d1e95e39d256095f8274d8dd0d04aed603da/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_24.f90?ref=4ca4d1e95e39d256095f8274d8dd0d04aed603da", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-fcheck=mem\" }\n+! \n+! Compile time check only, to test that the ICE is fixed in the assignment of the\n+! default initializer of the class to sf.\n+\n+implicit none\n+\n+type :: t\n+  integer, pointer :: data => null ()\n+end type\n+\n+class(t), dimension(:), allocatable :: sf\n+allocate (t :: sf (1))\n+end\n+"}]}