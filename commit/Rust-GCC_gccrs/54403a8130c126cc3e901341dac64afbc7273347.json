{"sha": "54403a8130c126cc3e901341dac64afbc7273347", "node_id": "C_kwDOANBUbNoAKDU0NDAzYTgxMzBjMTI2Y2MzZTkwMTM0MWRhYzY0YWZiYzcyNzMzNDc", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-11-30T20:54:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-05T11:32:35Z"}, "message": "[Ada] Simplify making of null procedure wrappers\n\ngcc/ada/\n\n\t* exp_ch3.adb (Make_Null_Procedure_Specs): Simplify by reusing\n\tCopy_Subprogram_Spec.\n\t* sem_util.ads (Copy_Subprogram_Spec): Add New_Sloc parameter.\n\t* sem_util.adb (Copy_Subprogram_Spec): Pass New_Sloc to\n\tNew_Copy_Tree.", "tree": {"sha": "eaf1b08decd2b7e11dd76f46a12fa422d355f3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf1b08decd2b7e11dd76f46a12fa422d355f3eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54403a8130c126cc3e901341dac64afbc7273347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54403a8130c126cc3e901341dac64afbc7273347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54403a8130c126cc3e901341dac64afbc7273347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54403a8130c126cc3e901341dac64afbc7273347/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af28783eb43e0b64c40e919103d024e8edf795a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af28783eb43e0b64c40e919103d024e8edf795a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af28783eb43e0b64c40e919103d024e8edf795a0"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "e1e323227c1579bdd91bc956532d7b218600c3c3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=54403a8130c126cc3e901341dac64afbc7273347", "patch": "@@ -10265,8 +10265,8 @@ package body Exp_Ch3 is\n       Decl_List      : constant List_Id    := New_List;\n       Loc            : constant Source_Ptr := Sloc (Tag_Typ);\n       Formal         : Entity_Id;\n-      Formal_List    : List_Id;\n       New_Param_Spec : Node_Id;\n+      New_Spec       : Node_Id;\n       Parent_Subp    : Entity_Id;\n       Prim_Elmt      : Elmt_Id;\n       Subp           : Entity_Id;\n@@ -10285,59 +10285,47 @@ package body Exp_Ch3 is\n          if Present (Parent_Subp)\n            and then Is_Null_Interface_Primitive (Parent_Subp)\n          then\n-            Formal := First_Formal (Subp);\n-\n-            if Present (Formal) then\n-               Formal_List := New_List;\n-\n-               while Present (Formal) loop\n+            --  The null procedure spec is copied from the inherited procedure,\n+            --  except for the IS NULL (which must be added) and the overriding\n+            --  indicators (which must be removed, if present).\n \n-                  --  Copy the parameter spec including default expressions\n+            New_Spec :=\n+              Copy_Subprogram_Spec (Subprogram_Specification (Subp), Loc);\n \n-                  New_Param_Spec :=\n-                    New_Copy_Tree (Parent (Formal), New_Sloc => Loc);\n+            Set_Null_Present      (New_Spec, True);\n+            Set_Must_Override     (New_Spec, False);\n+            Set_Must_Not_Override (New_Spec, False);\n \n-                  --  Generate a new defining identifier for the new formal.\n-                  --  Required because New_Copy_Tree does not duplicate\n-                  --  semantic fields (except itypes).\n+            Formal := First_Formal (Subp);\n+            New_Param_Spec := First (Parameter_Specifications (New_Spec));\n \n-                  Set_Defining_Identifier (New_Param_Spec,\n-                    Make_Defining_Identifier (Sloc (Formal),\n-                      Chars => Chars (Formal)));\n+            while Present (Formal) loop\n \n-                  --  For controlling arguments we must change their parameter\n-                  --  type to reference the tagged type (instead of the\n-                  --  interface type).\n+               --  For controlling arguments we must change their parameter\n+               --  type to reference the tagged type (instead of the interface\n+               --  type).\n \n-                  if Is_Controlling_Formal (Formal) then\n-                     if Nkind (Parameter_Type (Parent (Formal))) = N_Identifier\n-                     then\n-                        Set_Parameter_Type (New_Param_Spec,\n-                          New_Occurrence_Of (Tag_Typ, Loc));\n-\n-                     else pragma Assert\n-                            (Nkind (Parameter_Type (Parent (Formal))) =\n-                                                        N_Access_Definition);\n-                        Set_Subtype_Mark (Parameter_Type (New_Param_Spec),\n-                          New_Occurrence_Of (Tag_Typ, Loc));\n-                     end if;\n+               if Is_Controlling_Formal (Formal) then\n+                  if Nkind (Parameter_Type (Parent (Formal))) = N_Identifier\n+                  then\n+                     Set_Parameter_Type (New_Param_Spec,\n+                       New_Occurrence_Of (Tag_Typ, Loc));\n+\n+                  else pragma Assert\n+                         (Nkind (Parameter_Type (Parent (Formal))) =\n+                                                     N_Access_Definition);\n+                     Set_Subtype_Mark (Parameter_Type (New_Param_Spec),\n+                       New_Occurrence_Of (Tag_Typ, Loc));\n                   end if;\n+               end if;\n \n-                  Append (New_Param_Spec, Formal_List);\n-\n-                  Next_Formal (Formal);\n-               end loop;\n-            else\n-               Formal_List := No_List;\n-            end if;\n+               Next_Formal (Formal);\n+               Next (New_Param_Spec);\n+            end loop;\n \n             Append_To (Decl_List,\n               Make_Subprogram_Declaration (Loc,\n-                Make_Procedure_Specification (Loc,\n-                  Defining_Unit_Name       =>\n-                    Make_Defining_Identifier (Loc, Chars (Subp)),\n-                  Parameter_Specifications => Formal_List,\n-                  Null_Present             => True)));\n+                Specification => New_Spec));\n          end if;\n \n          Next_Elmt (Prim_Elmt);"}, {"sha": "49a58e3c615f9dd74fb4dc3113982d4b97a0d120", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=54403a8130c126cc3e901341dac64afbc7273347", "patch": "@@ -6871,7 +6871,10 @@ package body Sem_Util is\n    -- Copy_Subprogram_Spec --\n    --------------------------\n \n-   function Copy_Subprogram_Spec (Spec : Node_Id) return Node_Id is\n+   function Copy_Subprogram_Spec\n+     (Spec     : Node_Id;\n+      New_Sloc : Source_Ptr := No_Location) return Node_Id\n+   is\n       Def_Id      : Node_Id;\n       Formal_Spec : Node_Id;\n       Result      : Node_Id;\n@@ -6880,7 +6883,7 @@ package body Sem_Util is\n       --  The structure of the original tree must be replicated without any\n       --  alterations. Use New_Copy_Tree for this purpose.\n \n-      Result := New_Copy_Tree (Spec);\n+      Result := New_Copy_Tree (Spec, New_Sloc => New_Sloc);\n \n       --  However, the spec of a null procedure carries the corresponding null\n       --  statement of the body (created by the parser), and this cannot be"}, {"sha": "c37038f7ae1eb5b29b9271da5364e6bb34d6cd86", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54403a8130c126cc3e901341dac64afbc7273347/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=54403a8130c126cc3e901341dac64afbc7273347", "patch": "@@ -623,10 +623,13 @@ package Sem_Util is\n    --  aspect specifications. If From has no aspects, the routine has no\n    --  effect.\n \n-   function Copy_Subprogram_Spec (Spec : Node_Id) return Node_Id;\n+   function Copy_Subprogram_Spec\n+     (Spec     : Node_Id;\n+      New_Sloc : Source_Ptr := No_Location) return Node_Id;\n    --  Replicate a function or a procedure specification denoted by Spec. The\n    --  resulting tree is an exact duplicate of the original tree. New entities\n-   --  are created for the unit name and the formal parameters.\n+   --  are created for the unit name and the formal parameters. For definition\n+   --  of New_Sloc, see the comment for New_Copy_Tree.\n \n    function Corresponding_Generic_Type (T : Entity_Id) return Entity_Id;\n    --  If a type is a generic actual type, return the corresponding formal in"}]}