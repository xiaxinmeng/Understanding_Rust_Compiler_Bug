{"sha": "4f0473fe89e68bf7c09542ee5c3684da25a5b435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwNDczZmU4OWU2OGJmN2MwOTU0MmVlNWMzNjg0ZGEyNWE1YjQzNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-05-12T19:04:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-12T19:04:05Z"}, "message": "compare-elim.c (try_eliminate_compare): Canonicalize operation with embedded compare to [(set (reg:CCM) (compare:CCM...\n\n\t* compare-elim.c (try_eliminate_compare): Canonicalize\n\toperation with embedded compare to\n\t[(set (reg:CCM) (compare:CCM (operation) (immediate)))\n\t (set (reg) (operation)].\n\n\t* config/i386/i386.c (TARGET_FLAGS_REGNUM): New define.\n\nFrom-SVN: r247992", "tree": {"sha": "4c30e423d62fc42b58f267231981db14ab16fd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c30e423d62fc42b58f267231981db14ab16fd32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0473fe89e68bf7c09542ee5c3684da25a5b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0473fe89e68bf7c09542ee5c3684da25a5b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0473fe89e68bf7c09542ee5c3684da25a5b435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0473fe89e68bf7c09542ee5c3684da25a5b435/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88ce9dc38a0590608dd036e08758b478f8ca429c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce9dc38a0590608dd036e08758b478f8ca429c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ce9dc38a0590608dd036e08758b478f8ca429c"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "1e14b0397d70dd836f53f275993834c518b31467", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0473fe89e68bf7c09542ee5c3684da25a5b435", "patch": "@@ -1,3 +1,12 @@\n+2017-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* compare-elim.c (try_eliminate_compare): Canonicalize\n+\toperation with embedded compare to\n+\t[(set (reg:CCM) (compare:CCM (operation) (immediate)))\n+\t (set (reg) (operation)].\n+\n+\t* config/i386/i386.c (TARGET_FLAGS_REGNUM): New define.\n+\n 2017-05-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80723"}, {"sha": "69b1de73ba8308cbba60e9f126553021a77d350c", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=4f0473fe89e68bf7c09542ee5c3684da25a5b435", "patch": "@@ -45,9 +45,9 @@ along with GCC; see the file COPYING3.  If not see\n    (3) If an insn of form (2) can usefully set the flags, there is\n        another pattern of the form\n \n-\t[(set (reg) (operation)\n-\t (set (reg:CCM) (compare:CCM (operation) (immediate)))]\n-\n+\t[(set (reg:CCM) (compare:CCM (operation) (immediate)))\n+\t (set (reg) (operation)]\n+\t \n        The mode CCM will be chosen as if by SELECT_CC_MODE.\n \n    Note that unlike NOTICE_UPDATE_CC, we do not handle memory operands.\n@@ -582,7 +582,7 @@ equivalent_reg_at_start (rtx reg, rtx_insn *end, rtx_insn *start)\n static bool\n try_eliminate_compare (struct comparison *cmp)\n {\n-  rtx x, flags, in_a, in_b, cmp_src;\n+  rtx flags, in_a, in_b, cmp_src;\n \n   /* We must have found an interesting \"clobber\" preceding the compare.  */\n   if (cmp->prev_clobber == NULL)\n@@ -628,7 +628,8 @@ try_eliminate_compare (struct comparison *cmp)\n      Validate that PREV_CLOBBER itself does in fact refer to IN_A.  Do\n      recall that we've already validated the shape of PREV_CLOBBER.  */\n   rtx_insn *insn = cmp->prev_clobber;\n-  x = XVECEXP (PATTERN (insn), 0, 0);\n+\n+  rtx x = XVECEXP (PATTERN (insn), 0, 0);\n   if (rtx_equal_p (SET_DEST (x), in_a))\n     cmp_src = SET_SRC (x);\n \n@@ -666,13 +667,24 @@ try_eliminate_compare (struct comparison *cmp)\n     flags = gen_rtx_REG (cmp->orig_mode, targetm.flags_regnum);\n \n   /* Generate a new comparison for installation in the setter.  */\n-  x = copy_rtx (cmp_src);\n-  x = gen_rtx_COMPARE (GET_MODE (flags), x, in_b);\n-  x = gen_rtx_SET (flags, x);\n+  rtx y = copy_rtx (cmp_src);\n+  y = gen_rtx_COMPARE (GET_MODE (flags), y, in_b);\n+  y = gen_rtx_SET (flags, y);\n+\n+  /* Canonicalize instruction to:\n+     [(set (reg:CCM) (compare:CCM (operation) (immediate)))\n+      (set (reg) (operation)]  */\n \n+  rtvec v = rtvec_alloc (2);\n+  RTVEC_ELT (v, 0) = y;\n+  RTVEC_ELT (v, 1) = x;\n+  \n+  rtx pat = gen_rtx_PARALLEL (VOIDmode, v);\n+  \n   /* Succeed if the new instruction is valid.  Note that we may have started\n      a change group within maybe_select_cc_mode, therefore we must continue. */\n-  validate_change (insn, &XVECEXP (PATTERN (insn), 0, 1), x, true);\n+  validate_change (insn, &PATTERN (insn), pat, true);\n+  \n   if (!apply_change_group ())\n     return false;\n "}, {"sha": "a0d9207c72450346867126ced841a69273c282d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0473fe89e68bf7c09542ee5c3684da25a5b435/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4f0473fe89e68bf7c09542ee5c3684da25a5b435", "patch": "@@ -51826,6 +51826,8 @@ ix86_run_selftests (void)\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST ix86_address_cost\n \n+#undef TARGET_FLAGS_REGNUM\n+#define TARGET_FLAGS_REGNUM FLAGS_REG\n #undef TARGET_FIXED_CONDITION_CODE_REGS\n #define TARGET_FIXED_CONDITION_CODE_REGS ix86_fixed_condition_code_regs\n #undef TARGET_CC_MODES_COMPATIBLE"}]}