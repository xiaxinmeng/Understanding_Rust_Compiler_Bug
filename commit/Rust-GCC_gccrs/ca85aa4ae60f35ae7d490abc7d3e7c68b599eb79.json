{"sha": "ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4NWFhNGFlNjBmMzVhZTdkNDkwYWJjN2QzZTdjNjhiNTk5ZWI3OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-11-27T09:17:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-27T09:17:23Z"}, "message": "re PR middle-end/59138 (possible packed struct miscompile)\n\n\tPR middle-end/59138\n\t* expr.c (emit_group_store): Don't write past the end of the structure.\n\t(store_bit_field): Fix formatting.\n\nFrom-SVN: r205436", "tree": {"sha": "6dcdbca51f50fc8cde2140689b89c15c8ef3d440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dcdbca51f50fc8cde2140689b89c15c8ef3d440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/comments", "author": null, "committer": null, "parents": [{"sha": "43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ad66aa4a3c9eaec46354dcddaadebd3df71f69"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "05a31a8e42a86b4a87ab0528b69694d0b167ecc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "patch": "@@ -1,3 +1,9 @@\n+2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/59138\n+\t* expr.c (emit_group_store): Don't write past the end of the structure.\n+\t(store_bit_field): Fix formatting.\n+\n 2013-11-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59288"}, {"sha": "8f8b5272846c18cb30ce2b05b0e1b034e95c0f4d", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "patch": "@@ -2061,12 +2061,14 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED, int ssize)\n       HOST_WIDE_INT bytepos = INTVAL (XEXP (XVECEXP (src, 0, i), 1));\n       enum machine_mode mode = GET_MODE (tmps[i]);\n       unsigned int bytelen = GET_MODE_SIZE (mode);\n-      unsigned int adj_bytelen = bytelen;\n+      unsigned int adj_bytelen;\n       rtx dest = dst;\n \n       /* Handle trailing fragments that run over the size of the struct.  */\n       if (ssize >= 0 && bytepos + (HOST_WIDE_INT) bytelen > ssize)\n \tadj_bytelen = ssize - bytepos;\n+      else\n+\tadj_bytelen = bytelen;\n \n       if (GET_CODE (dst) == CONCAT)\n \t{\n@@ -2107,6 +2109,7 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED, int ssize)\n \t    }\n \t}\n \n+      /* Handle trailing fragments that run over the size of the struct.  */\n       if (ssize >= 0 && bytepos + (HOST_WIDE_INT) bytelen > ssize)\n \t{\n \t  /* store_bit_field always takes its value from the lsb.\n@@ -2124,16 +2127,22 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED, int ssize)\n \t      tmps[i] = expand_shift (RSHIFT_EXPR, mode, tmps[i],\n \t\t\t\t      shift, tmps[i], 0);\n \t    }\n-\t  bytelen = adj_bytelen;\n+\n+\t  /* Make sure not to write past the end of the struct.  */\n+\t  store_bit_field (dest,\n+\t\t\t   adj_bytelen * BITS_PER_UNIT, bytepos * BITS_PER_UNIT,\n+\t\t\t   bytepos * BITS_PER_UNIT, ssize * BITS_PER_UNIT,\n+\t\t\t   VOIDmode, tmps[i]);\n \t}\n \n       /* Optimize the access just a bit.  */\n-      if (MEM_P (dest)\n-\t  && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (dest))\n-\t      || MEM_ALIGN (dest) >= GET_MODE_ALIGNMENT (mode))\n-\t  && bytepos * BITS_PER_UNIT % GET_MODE_ALIGNMENT (mode) == 0\n-\t  && bytelen == GET_MODE_SIZE (mode))\n+      else if (MEM_P (dest)\n+\t       && (!SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (dest))\n+\t\t   || MEM_ALIGN (dest) >= GET_MODE_ALIGNMENT (mode))\n+\t       && bytepos * BITS_PER_UNIT % GET_MODE_ALIGNMENT (mode) == 0\n+\t       && bytelen == GET_MODE_SIZE (mode))\n \temit_move_insn (adjust_address (dest, mode, bytepos), tmps[i]);\n+\n       else\n \tstore_bit_field (dest, bytelen * BITS_PER_UNIT, bytepos * BITS_PER_UNIT,\n \t\t\t 0, 0, mode, tmps[i]);\n@@ -4776,8 +4785,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t  expand_insn (icode, 2, ops);\n \t}\n       else\n-\tstore_bit_field (mem, GET_MODE_BITSIZE (mode),\n-\t\t\t 0, 0, 0, mode, reg);\n+\tstore_bit_field (mem, GET_MODE_BITSIZE (mode), 0, 0, 0, mode, reg);\n       return;\n     }\n "}, {"sha": "74273b21e48b096e914061ea8a58fcbf6540a530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "patch": "@@ -1,3 +1,7 @@\n+2013-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20131127-1.c: New test.\n+\n 2013-11-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59288"}, {"sha": "8ec49657741cc710a550211f456f9620649a9592", "filename": "gcc/testsuite/gcc.c-torture/execute/20131127-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20131127-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20131127-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20131127-1.c?ref=ca85aa4ae60f35ae7d490abc7d3e7c68b599eb79", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/59138 */\n+/* Testcase by John Regehr <regehr@cs.utah.edu> */\n+\n+extern void abort (void);\n+\n+#pragma pack(1)\n+\n+struct S0 {\n+  int f0;\n+  int f1;\n+  int f2;\n+  short f3;\n+};\n+\n+short a = 1;\n+\n+struct S0 b = { 1 }, c, d, e;\n+\n+struct S0 fn1() { return c; }\n+\n+void fn2 (void)\n+{\n+  b = fn1 ();\n+  a = 0;\n+  d = e;\n+}\n+\n+int main (void)\n+{\n+  fn2 ();\n+  if (a != 0)\n+    abort ();\n+  return 0;\n+}"}]}