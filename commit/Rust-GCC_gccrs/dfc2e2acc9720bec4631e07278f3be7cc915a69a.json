{"sha": "dfc2e2acc9720bec4631e07278f3be7cc915a69a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjMmUyYWNjOTcyMGJlYzQ2MzFlMDcyNzhmM2JlN2NjOTE1YTY5YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-19T10:32:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-19T10:32:29Z"}, "message": "re PR tree-optimization/54976 (FAIL: gcc.dg/torture/pr47975.c (internal compiler error))\n\n2012-10-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/54976\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n\tRobustify against odd inner_mode inputs.\n\nFrom-SVN: r192611", "tree": {"sha": "662e3a1f66037369a977c4a97761a98e983b085c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/662e3a1f66037369a977c4a97761a98e983b085c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfc2e2acc9720bec4631e07278f3be7cc915a69a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc2e2acc9720bec4631e07278f3be7cc915a69a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc2e2acc9720bec4631e07278f3be7cc915a69a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc2e2acc9720bec4631e07278f3be7cc915a69a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57fc62cb326ab913d7eef6d0ac0cd7788edd1797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57fc62cb326ab913d7eef6d0ac0cd7788edd1797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57fc62cb326ab913d7eef6d0ac0cd7788edd1797"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "3741614ea83ab4161ee514d674aa5d2e423742f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc2e2acc9720bec4631e07278f3be7cc915a69a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc2e2acc9720bec4631e07278f3be7cc915a69a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfc2e2acc9720bec4631e07278f3be7cc915a69a", "patch": "@@ -1,3 +1,9 @@\n+2012-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54976\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n+\tRobustify against odd inner_mode inputs.\n+\n 2012-10-19  Zhenqiang Chen <zhenqiang.chen@linaro.org>\n \n \tPR target/54892"}, {"sha": "09c85967d4327657aaa01f36413944ead10194c0", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfc2e2acc9720bec4631e07278f3be7cc915a69a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfc2e2acc9720bec4631e07278f3be7cc915a69a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=dfc2e2acc9720bec4631e07278f3be7cc915a69a", "patch": "@@ -6082,16 +6082,21 @@ get_vectype_for_scalar_type_and_size (tree scalar_type, unsigned size)\n      When the component mode passes the above test simply use a type\n      corresponding to that mode.  The theory is that any use that\n      would cause problems with this will disable vectorization anyway.  */\n-  if (!SCALAR_FLOAT_TYPE_P (scalar_type)\n-      && !INTEGRAL_TYPE_P (scalar_type)\n-      && !POINTER_TYPE_P (scalar_type))\n+  else if (!SCALAR_FLOAT_TYPE_P (scalar_type)\n+\t   && !INTEGRAL_TYPE_P (scalar_type)\n+\t   && !POINTER_TYPE_P (scalar_type))\n     scalar_type = lang_hooks.types.type_for_mode (inner_mode, 1);\n \n   /* We can't build a vector type of elements with alignment bigger than\n      their size.  */\n-  if (nbytes < TYPE_ALIGN_UNIT (scalar_type))\n+  else if (nbytes < TYPE_ALIGN_UNIT (scalar_type))\n     scalar_type = lang_hooks.types.type_for_mode (inner_mode, 1);\n \n+  /* If we felt back to using the mode fail if there was\n+     no scalar type for it.  */\n+  if (scalar_type == NULL_TREE)\n+    return NULL_TREE;\n+\n   /* If no size was supplied use the mode the target prefers.   Otherwise\n      lookup a vector mode of the specified size.  */\n   if (size == 0)"}]}