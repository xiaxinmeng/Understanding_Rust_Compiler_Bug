{"sha": "d9c695fff183dd61b20b19160b2743d9a9286ce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljNjk1ZmZmMTgzZGQ2MWIyMGIxOTE2MGIyNzQzZDlhOTI4NmNlMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-13T20:43:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-13T20:43:13Z"}, "message": "rtlanal.c (find_reg_equal_equiv_note): New function.\n\n\t* rtlanal.c (find_reg_equal_equiv_note): New function.\n\t* simplify-rtx.c (simplify_gen_unary, simplify_gen_ternary): New fns.\n\t(simplify_gen_relational, simplify_replace_rtx): Likewise.\n\t* rtl.h: Add declarations for above functions.\n\nFrom-SVN: r39644", "tree": {"sha": "1db29b09e26f9b5b55426aa24f11a97d2d706d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db29b09e26f9b5b55426aa24f11a97d2d706d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c695fff183dd61b20b19160b2743d9a9286ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c695fff183dd61b20b19160b2743d9a9286ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c695fff183dd61b20b19160b2743d9a9286ce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c695fff183dd61b20b19160b2743d9a9286ce3/comments", "author": null, "committer": null, "parents": [{"sha": "848e0190fb94ea253031af77f52842117522f79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848e0190fb94ea253031af77f52842117522f79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848e0190fb94ea253031af77f52842117522f79b"}], "stats": {"total": 193, "additions": 180, "deletions": 13}, "files": [{"sha": "ed6a413a3263bb34243c1e308f7ac7cfc640dfc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9c695fff183dd61b20b19160b2743d9a9286ce3", "patch": "@@ -1,3 +1,10 @@\n+Tue Feb 13 15:42:05 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rtlanal.c (find_reg_equal_equiv_note): New function.\n+\t* simplify-rtx.c (simplify_gen_unary, simplify_gen_ternary): New fns.\n+\t(simplify_gen_relational, simplify_replace_rtx): Likewise.\n+\t* rtl.h: Add declarations for above functions.\n+\n Tue Feb 13 21:09:11 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* cse.c (cse_main): Converts ifdefs on PIC_OFFSET_TABLE_REGNUM to"}, {"sha": "f6eb251d6ce546f77391d83ed18e47c5729a1e42", "filename": "gcc/rtl.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d9c695fff183dd61b20b19160b2743d9a9286ce3", "patch": "@@ -1311,12 +1311,33 @@ extern rtx try_split\t\t\tPARAMS ((rtx, rtx, int));\n extern rtx split_insns\t\t\tPARAMS ((rtx, rtx));\n \n /* In simplify-rtx.c  */\n-extern rtx simplify_unary_operation\tPARAMS ((enum rtx_code, enum machine_mode, rtx, enum machine_mode));\n-extern rtx simplify_binary_operation\tPARAMS ((enum rtx_code, enum machine_mode, rtx, rtx));\n-extern rtx simplify_ternary_operation\tPARAMS ((enum rtx_code, enum machine_mode, enum machine_mode, rtx, rtx, rtx));\n-extern rtx simplify_relational_operation PARAMS ((enum rtx_code, enum machine_mode, rtx, rtx));\n-extern rtx simplify_gen_binary\t\tPARAMS ((enum rtx_code, enum machine_mode,\n-\t\t\t\t\t       rtx, rtx));\n+extern rtx simplify_unary_operation\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n+extern rtx simplify_binary_operation\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode, rtx,\n+\t\t\t\t\t\t rtx));\n+extern rtx simplify_ternary_operation\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t enum machine_mode, rtx, rtx,\n+\t\t\t\t\t\t rtx));\n+extern rtx simplify_relational_operation PARAMS ((enum rtx_code,\n+\t\t\t\t\t\t  enum machine_mode, rtx,\n+\t\t\t\t\t\t  rtx));\n+extern rtx simplify_gen_binary\t\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t rtx, rtx));\n+extern rtx simplify_gen_unary\t\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n+extern rtx simplify_gen_ternary\t\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t rtx, rtx, rtx));\n+extern rtx simplify_gen_relational\tPARAMS ((enum rtx_code,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t rtx, rtx));\n+extern rtx simplify_replace_rtx\t\tPARAMS ((rtx, rtx, rtx));\n extern rtx simplify_rtx\t\t\tPARAMS ((rtx));\n \n /* In optabs.c  */\n@@ -1388,6 +1409,7 @@ extern int dead_or_set_regno_p\t\tPARAMS ((rtx, unsigned int));\n extern rtx find_reg_note\t\tPARAMS ((rtx, enum reg_note, rtx));\n extern rtx find_regno_note\t\tPARAMS ((rtx, enum reg_note,\n \t\t\t\t\t\t unsigned int));\n+extern rtx find_reg_equal_equiv_note\tPARAMS ((rtx));\n extern int find_reg_fusage\t\tPARAMS ((rtx, enum rtx_code, rtx));\n extern int find_regno_fusage\t\tPARAMS ((rtx, enum rtx_code,\n \t\t\t\t\t\t unsigned int));"}, {"sha": "0eefa70da52f1ec23f26916b10815448aa0571dd", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d9c695fff183dd61b20b19160b2743d9a9286ce3", "patch": "@@ -1485,6 +1485,23 @@ find_regno_note (insn, kind, regno)\n   return 0;\n }\n \n+/* Return a REG_EQUIV or REG_EQUAL note if insn has only a single set and\n+   has such a note.  */\n+\n+rtx\n+find_reg_equal_equiv_note (insn)\n+     rtx insn;\n+{\n+  rtx note;\n+\n+  if (single_set (insn) == 0)\n+    return 0;\n+  else if ((note = find_reg_note (insn, REG_EQUIV, NULL_RTX)) != 0)\n+    return note;\n+  else\n+    return find_reg_note (insn, REG_EQUAL, NULL_RTX);\n+}\n+\n /* Return true if DATUM, or any overlap of DATUM, of kind CODE is found\n    in the CALL_INSN_FUNCTION_USAGE information of INSN.  */\n "}, {"sha": "43d650c387db78fb0f9e897087c2c8cdbbe3fdab", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 128, "deletions": 7, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c695fff183dd61b20b19160b2743d9a9286ce3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d9c695fff183dd61b20b19160b2743d9a9286ce3", "patch": "@@ -140,6 +140,128 @@ simplify_gen_binary (code, mode, op0, op1)\n     return gen_rtx_fmt_ee (code, mode, op0, op1);\n }\n \f\n+/* Make a unary operation by first seeing if it folds and otherwise making\n+   the specified operation.  */\n+\n+rtx\n+simplify_gen_unary (code, mode, op, op_mode)\n+     enum rtx_code code;\n+     enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode op_mode;\n+{\n+  rtx tem;\n+\n+  /* If this simplifies, use it.  */\n+  if ((tem = simplify_unary_operation (code, mode, op, op_mode)) != 0)\n+    return tem;\n+\n+  return gen_rtx_fmt_e (code, mode, op);\n+}\n+\n+/* Likewise for ternary operations.  */\n+\n+rtx\n+simplify_gen_ternary (code, mode, op0_mode, op0, op1, op2)\n+     enum rtx_code code;\n+     enum machine_mode mode, op0_mode;\n+     rtx op0, op1, op2;\n+{\n+  rtx tem;\n+\n+  /* If this simplifies, use it.  */\n+  if (0 != (tem = simplify_ternary_operation (code, mode, op0_mode,\n+\t\t\t\t\t      op0, op1, op2)))\n+    return tem;\n+\n+  return gen_rtx_fmt_eee (code, mode, op0, op1, op2);\n+}\n+\f\n+/* Likewise, for relational operations.  */\n+\n+rtx\n+simplify_gen_relational (code, mode, op0, op1)\n+     enum rtx_code code;\n+     enum machine_mode mode;\n+     rtx op0, op1;\n+{\n+  rtx tem;\n+\n+  if ((tem = simplify_relational_operation (code, mode, op0, op1)) != 0)\n+    return tem;\n+\n+  /* Put complex operands first and constants second.  */\n+  if ((CONSTANT_P (op0) && GET_CODE (op1) != CONST_INT)\n+      || (GET_RTX_CLASS (GET_CODE (op0)) == 'o'\n+\t  && GET_RTX_CLASS (GET_CODE (op1)) != 'o')\n+      || (GET_CODE (op0) == SUBREG\n+\t  && GET_RTX_CLASS (GET_CODE (SUBREG_REG (op0))) == 'o'\n+\t  && GET_RTX_CLASS (GET_CODE (op1)) != 'o'))\n+    tem = op0, op0 = op1, op1 = tem, code = swap_condition (code);\n+\n+  return gen_rtx_fmt_ee (code, mode, op0, op1);\n+}\n+\f\n+/* Replace all occurrences of OLD in X with NEW and try to simplify the\n+   resulting RTX.  Return a new RTX which is as simplified as possible.  */\n+\n+rtx\n+simplify_replace_rtx (x, old, new)\n+     rtx x;\n+     rtx old;\n+     rtx new;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  enum machine_mode mode = GET_MODE (x);\n+\n+  /* If X is OLD, return NEW.  Otherwise, if this is an expression, try\n+     to build a new expression substituting recursively.  If we can't do\n+     anything, return our input.  */\n+\n+  if (x == old)\n+    return new;\n+\n+  switch (GET_RTX_CLASS (code))\n+    {\n+    case '1':\n+      {\n+\tenum machine_mode op_mode = GET_MODE (XEXP (x, 0));\n+\trtx op = (XEXP (x, 0) == old\n+\t\t  ? new : simplify_replace_rtx (XEXP (x, 0), old, new));\n+\n+\treturn simplify_gen_unary (code, mode, op, op_mode);\n+      }\n+\n+    case '2':\n+    case 'c':\n+      return\n+\tsimplify_gen_binary (code, mode,\n+\t\t\t     simplify_replace_rtx (XEXP (x, 0), old, new),\n+\t\t\t     simplify_replace_rtx (XEXP (x, 1), old, new));\n+\n+    case '3':\n+    case 'b':\n+      return\n+\tsimplify_gen_ternary (code, mode, GET_MODE (XEXP (x, 0)),\n+\t\t\t      simplify_replace_rtx (XEXP (x, 0), old, new),\n+\t\t\t      simplify_replace_rtx (XEXP (x, 1), old, new),\n+\t\t\t      simplify_replace_rtx (XEXP (x, 2), old, new));\n+\n+    case 'x':\n+      /* The only case we try to handle is a lowpart SUBREG of a single-word\n+\t CONST_INT.  */\n+      if (code == SUBREG && subreg_lowpart_p (x) && old == SUBREG_REG (x)\n+\t  && GET_CODE (new) == CONST_INT\n+\t  && GET_MODE_SIZE (GET_MODE (old)) <= UNITS_PER_WORD)\n+\treturn GEN_INT (INTVAL (new) & GET_MODE_MASK (mode));\n+\n+      return x;\n+\n+    default:\n+      return x;\n+    }\n+}\n+\f\n /* Try to simplify a unary operation CODE whose output mode is to be\n    MODE with input operand OP whose mode was originally OP_MODE.\n    Return zero if no simplification can be made.  */\n@@ -2063,11 +2185,8 @@ rtx\n simplify_rtx (x)\n      rtx x;\n {\n-  enum rtx_code code;\n-  enum machine_mode mode;\n-\n-  mode = GET_MODE (x);\n-  code = GET_CODE (x);\n+  enum rtx_code code = GET_CODE (x);\n+  enum machine_mode mode = GET_MODE (x);\n \n   switch (GET_RTX_CLASS (code))\n     {\n@@ -2081,11 +2200,13 @@ simplify_rtx (x)\n     case '3':\n     case 'b':\n       return simplify_ternary_operation (code, mode, GET_MODE (XEXP (x, 0)),\n-\t\t\t\t\t XEXP (x, 0), XEXP (x, 1), XEXP (x, 2));\n+\t\t\t\t\t XEXP (x, 0), XEXP (x, 1),\n+\t\t\t\t\t XEXP (x, 2));\n \n     case '<':\n       return simplify_relational_operation (code,\n-\t\t\t\t\t    (GET_MODE (XEXP (x, 0)) != VOIDmode\n+\t\t\t\t\t    ((GET_MODE (XEXP (x, 0))\n+\t\t\t\t\t      != VOIDmode)\n \t\t\t\t\t     ? GET_MODE (XEXP (x, 0))\n \t\t\t\t\t     : GET_MODE (XEXP (x, 1))),\n \t\t\t\t\t    XEXP (x, 0), XEXP (x, 1));"}]}