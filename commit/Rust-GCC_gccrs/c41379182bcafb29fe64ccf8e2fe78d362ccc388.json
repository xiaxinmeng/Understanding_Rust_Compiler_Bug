{"sha": "c41379182bcafb29fe64ccf8e2fe78d362ccc388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxMzc5MTgyYmNhZmIyOWZlNjRjY2Y4ZTJmZTc4ZDM2MmNjYzM4OA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2010-03-07T15:20:12Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-03-07T15:20:12Z"}, "message": "re PR middle-end/42220 (FAIL: gfortran.dg/complex_intrinsic_5.f90  -m64 -O -frename-registers)\n\n\tPR rtl-optimization/42220\n\t* regrename.c (scan_rtx) <case STRICT_LOW_PART, ZERO_EXTRACT>:\n\tUse verify_reg_tracked to determine if we should use OP_OUT rather\n\tthan OP_INOUT.\n\t(build_def_use): If we see an in-out operand for a register that we\n\tknow nothing about, treat is an output if possible, fail the block if\n\tnot.\n\nFrom-SVN: r157263", "tree": {"sha": "ae26214452e5ac1cf2db92de594dd9a347be2161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae26214452e5ac1cf2db92de594dd9a347be2161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c41379182bcafb29fe64ccf8e2fe78d362ccc388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41379182bcafb29fe64ccf8e2fe78d362ccc388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41379182bcafb29fe64ccf8e2fe78d362ccc388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41379182bcafb29fe64ccf8e2fe78d362ccc388/comments", "author": null, "committer": null, "parents": [{"sha": "f7cf1ce042f8a3f1f069a3e25c2ea3417c2be861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7cf1ce042f8a3f1f069a3e25c2ea3417c2be861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7cf1ce042f8a3f1f069a3e25c2ea3417c2be861"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "25c0efdf8dcb2685f9e2c79801a39b8f7394e54c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41379182bcafb29fe64ccf8e2fe78d362ccc388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41379182bcafb29fe64ccf8e2fe78d362ccc388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c41379182bcafb29fe64ccf8e2fe78d362ccc388", "patch": "@@ -1,3 +1,13 @@\n+2010-03-07  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\tPR rtl-optimization/42220\n+\t* regrename.c (scan_rtx) <case STRICT_LOW_PART, ZERO_EXTRACT>:\n+\tUse verify_reg_tracked to determine if we should use OP_OUT rather\n+\tthan OP_INOUT.\n+\t(build_def_use): If we see an in-out operand for a register that we\n+\tknow nothing about, treat is an output if possible, fail the block if\n+\tnot.\n+\n 2010-03-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42897"}, {"sha": "f7891d1b0178acfb9cf8fbe65a57e8e189605303", "filename": "gcc/regrename.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41379182bcafb29fe64ccf8e2fe78d362ccc388/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41379182bcafb29fe64ccf8e2fe78d362ccc388/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=c41379182bcafb29fe64ccf8e2fe78d362ccc388", "patch": "@@ -889,13 +889,15 @@ scan_rtx (rtx insn, rtx *loc, enum reg_class cl, enum scan_actions action,\n       return;\n \n     case STRICT_LOW_PART:\n-      scan_rtx (insn, &XEXP (x, 0), cl, action, OP_INOUT);\n+      scan_rtx (insn, &XEXP (x, 0), cl, action,\n+\t\tverify_reg_tracked (XEXP (x, 0)) ? OP_INOUT : OP_OUT);\n       return;\n \n     case ZERO_EXTRACT:\n     case SIGN_EXTRACT:\n       scan_rtx (insn, &XEXP (x, 0), cl, action,\n-\t\ttype == OP_IN ? OP_IN : OP_INOUT);\n+\t\t(type == OP_IN ? OP_IN :\n+\t\t verify_reg_tracked (XEXP (x, 0)) ? OP_INOUT : OP_OUT));\n       scan_rtx (insn, &XEXP (x, 1), cl, action, OP_IN);\n       scan_rtx (insn, &XEXP (x, 2), cl, action, OP_IN);\n       return;\n@@ -1067,6 +1069,7 @@ build_def_use (basic_block bb)\n \t  int n_ops;\n \t  rtx note;\n \t  rtx old_operands[MAX_RECOG_OPERANDS];\n+\t  bool has_dup[MAX_RECOG_OPERANDS];\n \t  rtx old_dups[MAX_DUP_OPERANDS];\n \t  int i;\n \t  int alt;\n@@ -1105,6 +1108,10 @@ build_def_use (basic_block bb)\n \t  n_ops = recog_data.n_operands;\n \t  untracked_operands = 0;\n \n+\t  memset (has_dup, 0, sizeof has_dup);\n+\t  for (i = 0; i < recog_data.n_dups; i++)\n+\t    has_dup[(int)recog_data.dup_num[i]] = true;\n+\n \t  /* Simplify the code below by rewriting things to reflect\n \t     matching constraints.  Also promote OP_OUT to OP_INOUT in\n \t     predicated instructions, but only for register operands\n@@ -1137,6 +1144,20 @@ build_def_use (basic_block bb)\n \t\t      untracked_operands |= 1 << matches;\n \t\t    }\n \t\t}\n+\t      /* If there's an in-out operand with a register that is not\n+\t\t being tracked at all yet, convert it to an earlyclobber\n+\t\t output operand.\n+\t\t This only works if the operand isn't duplicated, i.e. for\n+\t\t a ZERO_EXTRACT in a SET_DEST.  */\n+\t      if (recog_data.operand_type[i] == OP_INOUT\n+\t\t  && !(untracked_operands & (1 << i))\n+\t\t  && !verify_reg_tracked (recog_data.operand[i]))\n+\t\t{\n+\t\t  if (has_dup[i])\n+\t\t    fail_current_block = true;\n+\t\t  recog_data.operand_type[i] = OP_OUT;\n+\t\t  recog_op_alt[i][alt].earlyclobber = 1;\n+\t\t}\n \t    }\n \n \t  if (fail_current_block)"}]}