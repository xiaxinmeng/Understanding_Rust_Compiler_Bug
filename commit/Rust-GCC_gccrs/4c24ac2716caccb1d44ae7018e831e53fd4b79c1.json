{"sha": "4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyNGFjMjcxNmNhY2NiMWQ0NGFlNzAxOGU4MzFlNTNmZDRiNzljMQ==", "commit": {"author": {"name": "Raif S. Naffah", "email": "raif@fl.net.au", "date": "2003-02-20T16:55:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-02-20T16:55:15Z"}, "message": "BigInteger.java (euclidInv): Take result array as an argument.\n\n2003-02-20  Raif S. Naffah <raif@fl.net.au>\n\n\t* java/math/BigInteger.java (euclidInv): Take result array as an\n\targument.  Updated all callers.\n\t(modInverse): Removed unused variables.\n\nFrom-SVN: r63170", "tree": {"sha": "ea5acbe8c41e9f0300a9d814fb213636e34ce8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5acbe8c41e9f0300a9d814fb213636e34ce8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24ac2716caccb1d44ae7018e831e53fd4b79c1/comments", "author": null, "committer": null, "parents": [{"sha": "3a24c5134f3160dfe0f618333465ff68978c6427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a24c5134f3160dfe0f618333465ff68978c6427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a24c5134f3160dfe0f618333465ff68978c6427"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "659311f4ec741f29372f73a3ef41890924f4d7f3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ac2716caccb1d44ae7018e831e53fd4b79c1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ac2716caccb1d44ae7018e831e53fd4b79c1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "patch": "@@ -1,3 +1,9 @@\n+2003-02-20  Raif S. Naffah <raif@fl.net.au>\n+\n+\t* java/math/BigInteger.java (euclidInv): Take result array as an\n+\targument.  Updated all callers.\n+\t(modInverse): Removed unused variables.\n+\n 2003-02-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in: Propagate ORIGINAL_LD_FOR_MULTILIBS to"}, {"sha": "6f919f785cc0c2b5a181cb43167c50d67864d570", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c24ac2716caccb1d44ae7018e831e53fd4b79c1/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c24ac2716caccb1d44ae7018e831e53fd4b79c1/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=4c24ac2716caccb1d44ae7018e831e53fd4b79c1", "patch": "@@ -1017,8 +1017,8 @@ private static final int[] euclidInv(int a, int b, int prevDiv)\n     return xy;\n   }\n \n-  private static final BigInteger[] euclidInv(BigInteger a, BigInteger b,\n-\t\t\t\t\t      BigInteger prevDiv)\n+  private static final void euclidInv(BigInteger a, BigInteger b,\n+                                      BigInteger prevDiv, BigInteger[] xy)\n   {\n     if (b.isZero())\n       throw new ArithmeticException(\"not invertible\");\n@@ -1027,20 +1027,19 @@ private static final BigInteger[] euclidInv(BigInteger a, BigInteger b,\n       {\n \t// Success:  values are indeed invertible!\n \t// Bottom of the recursion reached; start unwinding.\n-\treturn new BigInteger[] { neg(prevDiv), ONE };\n+\txy[0] = neg(prevDiv);\n+        xy[1] = ONE;\n+\treturn;\n       }\n \n-    BigInteger[] result;\n     // Recursion happens in the following conditional!\n \n     // If a just contains an int, then use integer math for the rest.\n     if (a.words == null)\n       {\n         int[] xyInt = euclidInv(b.ival, a.ival % b.ival, a.ival / b.ival);\n-\tresult = new BigInteger[] { // non-shared BI\n-\t  new BigInteger(xyInt[0]),\n-\t  new BigInteger(xyInt[1])\n-\t};\n+\txy[0] = new BigInteger(xyInt[0]);\n+        xy[1] = new BigInteger(xyInt[1]);\n       }\n     else\n       {\n@@ -1050,13 +1049,12 @@ private static final BigInteger[] euclidInv(BigInteger a, BigInteger b,\n         // quot and rem may not be in canonical form. ensure\n         rem.canonicalize();\n         quot.canonicalize();\n-\tresult = euclidInv(b, rem, quot);\n+\teuclidInv(b, rem, quot, xy);\n       }\n \n-    BigInteger t = result[0];\n-    result[0] = add(result[1], times(t, prevDiv), -1);\n-    result[1] = t;\n-    return result;\n+    BigInteger t = xy[0];\n+    xy[0] = add(xy[1], times(t, prevDiv), -1);\n+    xy[1] = t;\n   }\n \n   public BigInteger modInverse(BigInteger y)\n@@ -1124,9 +1122,8 @@ public BigInteger modInverse(BigInteger y)\n         // quot and rem may not be in canonical form. ensure\n         rem.canonicalize();\n         quot.canonicalize();\n-        BigInteger xy0 = new BigInteger();\n-        BigInteger xy1 = new BigInteger();\n-\tBigInteger[] xy = euclidInv(y, rem, quot);\n+\tBigInteger[] xy = new BigInteger[2];\n+\teuclidInv(y, rem, quot, xy);\n \tresult = swapped ? xy[0] : xy[1];\n \n \t// Result can't be negative, so make it positive by adding the"}]}