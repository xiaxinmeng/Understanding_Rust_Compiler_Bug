{"sha": "5d7bed9d6fd21fe349914dd394b75a353a3e480e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3YmVkOWQ2ZmQyMWZlMzQ5OTE0ZGQzOTRiNzVhMzUzYTNlNDgwZQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2003-02-01T21:12:55Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2003-02-01T21:12:55Z"}, "message": "dwarf2out.c (gen_type_die): Check for typedefs before calling for TYPE_MAIN_VARIANT.\n\n\t* dwarf2out.c (gen_type_die): Check for typedefs before calling\n\tfor TYPE_MAIN_VARIANT.\n\nFrom-SVN: r62258", "tree": {"sha": "b342e72b5e44a5fc6b007ce46bb7e5f7c63071bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b342e72b5e44a5fc6b007ce46bb7e5f7c63071bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d7bed9d6fd21fe349914dd394b75a353a3e480e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7bed9d6fd21fe349914dd394b75a353a3e480e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7bed9d6fd21fe349914dd394b75a353a3e480e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7bed9d6fd21fe349914dd394b75a353a3e480e/comments", "author": null, "committer": null, "parents": [{"sha": "53585c36db4e5cf2118ee4ff70a57276a9356f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53585c36db4e5cf2118ee4ff70a57276a9356f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53585c36db4e5cf2118ee4ff70a57276a9356f0c"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "95aff18e988f19800a6ceef0b1feae47c6e9fc6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7bed9d6fd21fe349914dd394b75a353a3e480e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7bed9d6fd21fe349914dd394b75a353a3e480e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d7bed9d6fd21fe349914dd394b75a353a3e480e", "patch": "@@ -1,3 +1,8 @@\n+2003-02-01  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* dwarf2out.c (gen_type_die): Check for typedefs before calling\n+\tfor TYPE_MAIN_VARIANT.\n+\n 2003-02-01  Richard Henderson  <rth@redhat.com>\n \n \t* libgcc2.c: Include auto-host.h."}, {"sha": "64aac19c6eb807b07f0c20916b42a4cf31baec3c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7bed9d6fd21fe349914dd394b75a353a3e480e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7bed9d6fd21fe349914dd394b75a353a3e480e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5d7bed9d6fd21fe349914dd394b75a353a3e480e", "patch": "@@ -11606,20 +11606,12 @@ gen_type_die (type, context_die)\n   if (type == NULL_TREE || type == error_mark_node)\n     return;\n \n-  /* We are going to output a DIE to represent the unqualified version\n-     of this type (i.e. without any const or volatile qualifiers) so\n-     get the main variant (i.e. the unqualified version) of this type\n-     now.  (Vectors are special because the debugging info is in the\n-     cloned type itself).  */\n-  if (TREE_CODE (type) != VECTOR_TYPE)\n-    type = type_main_variant (type);\n-\n-  if (TREE_ASM_WRITTEN (type))\n-    return;\n-\n   if (TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n       && DECL_ORIGINAL_TYPE (TYPE_NAME (type)))\n     {\n+      if (TREE_ASM_WRITTEN (type))\n+\treturn;\n+\n       /* Prevent broken recursion; we can't hand off to the same type.  */\n       if (DECL_ORIGINAL_TYPE (TYPE_NAME (type)) == type)\n \tabort ();\n@@ -11629,6 +11621,17 @@ gen_type_die (type, context_die)\n       return;\n     }\n \n+  /* We are going to output a DIE to represent the unqualified version\n+     of this type (i.e. without any const or volatile qualifiers) so\n+     get the main variant (i.e. the unqualified version) of this type\n+     now.  (Vectors are special because the debugging info is in the\n+     cloned type itself).  */\n+  if (TREE_CODE (type) != VECTOR_TYPE)\n+    type = type_main_variant (type);\n+\n+  if (TREE_ASM_WRITTEN (type))\n+    return;\n+\n   switch (TREE_CODE (type))\n     {\n     case ERROR_MARK:"}]}