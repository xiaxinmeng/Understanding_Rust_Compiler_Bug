{"sha": "2f2da9e931c163c6f4ce6433972854e5d0e62216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyZGE5ZTkzMWMxNjNjNmY0Y2U2NDMzOTcyODU0ZTVkMGU2MjIxNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-04T10:37:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-04T10:37:04Z"}, "message": "i386.c (ix86_expand_adjust_ufix_to_sfix_si): Add XORP argument.\n\n\t* config/i386/i386.c (ix86_expand_adjust_ufix_to_sfix_si): Add\n\tXORP argument.  Subtract 0x1p31 instead of 0x1p32.  Use normal\n\tsignalling comparison instead of non-signalling.  Store into\n\t*XORP pseudo holding 0x80000000 integers if 0x1p31 has been\n\tsubtracted and 0 otherwise.\n\t* config/i386/i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si):\n\tAdjust prototype.\n\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Enable\n\talready for TARGET_SSE2.  Xor in vector initialized by\n\tix86_expand_adjust_ufix_to_sfix_si at the end.\n\t(vec_pack_ufix_trunc_<mode>): Likewise.\n\n\t* gcc.dg/torture/vec-cvt-1.c: Enable flttointtestui test.\n\nFrom-SVN: r180933", "tree": {"sha": "2f291b3b9530d77f63f97664d765fa8f25486b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f291b3b9530d77f63f97664d765fa8f25486b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2da9e931c163c6f4ce6433972854e5d0e62216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2da9e931c163c6f4ce6433972854e5d0e62216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2da9e931c163c6f4ce6433972854e5d0e62216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2da9e931c163c6f4ce6433972854e5d0e62216/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a00c76146c2e39d7c56ad93cdee3c4e13561ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a00c76146c2e39d7c56ad93cdee3c4e13561ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a00c76146c2e39d7c56ad93cdee3c4e13561ac6"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "07f286c0dd5c6f6ab88a411e1ee5a08bc0ada76c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -1,5 +1,17 @@\n 2011-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (ix86_expand_adjust_ufix_to_sfix_si): Add\n+\tXORP argument.  Subtract 0x1p31 instead of 0x1p32.  Use normal\n+\tsignalling comparison instead of non-signalling.  Store into\n+\t*XORP pseudo holding 0x80000000 integers if 0x1p31 has been\n+\tsubtracted and 0 otherwise.\n+\t* config/i386/i386-protos.h (ix86_expand_adjust_ufix_to_sfix_si):\n+\tAdjust prototype.\n+\t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): Enable\n+\talready for TARGET_SSE2.  Xor in vector initialized by\n+\tix86_expand_adjust_ufix_to_sfix_si at the end.\n+\t(vec_pack_ufix_trunc_<mode>): Likewise.\n+\n \t* tree-vect-stmts.c (vectorizable_conversion): Rewritten to handle\n \tnot just FLOAT_EXPR and FIX_TRUNC_EXPR, but also CONVERT_EXPR_CODE_P,\n \tWIDEN_MULT_EXPR and WIDEN_LSHIFT_EXPR to handle what"}, {"sha": "ec4becef8fef65815dc6a89ece93f181f5944510", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -109,7 +109,7 @@ extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sidf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sisf_sse (rtx, rtx);\n extern void ix86_expand_convert_sign_didf_sse (rtx, rtx);\n-extern rtx ix86_expand_adjust_ufix_to_sfix_si (rtx);\n+extern rtx ix86_expand_adjust_ufix_to_sfix_si (rtx, rtx *);\n extern enum ix86_fpcmp_strategy ix86_fp_comparison_strategy (enum rtx_code);\n extern void ix86_expand_fp_absneg_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\t    rtx[]);"}, {"sha": "d1730ed9b74e612ca50bad170da7b16ac53d91e5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -17018,16 +17018,17 @@ ix86_expand_convert_uns_sisf_sse (rtx target, rtx input)\n \n /* Adjust a V*SFmode/V*DFmode value VAL so that *sfix_trunc* resp. fix_trunc*\n    pattern can be used on it instead of *ufix_trunc* resp. fixuns_trunc*.\n-   This is done by subtracting 0x1p32 from VAL if VAL is greater or equal\n-   (non-signalling) than 0x1p31.  */\n+   This is done by doing just signed conversion if < 0x1p31, and otherwise by\n+   subtracting 0x1p31 first and xoring in 0x80000000 from *XORP afterwards.  */\n \n rtx\n-ix86_expand_adjust_ufix_to_sfix_si (rtx val)\n+ix86_expand_adjust_ufix_to_sfix_si (rtx val, rtx *xorp)\n {\n-  REAL_VALUE_TYPE MTWO32r, TWO31r;\n-  rtx two31r, mtwo32r, tmp[3];\n+  REAL_VALUE_TYPE TWO31r;\n+  rtx two31r, tmp[4];\n   enum machine_mode mode = GET_MODE (val);\n   enum machine_mode scalarmode = GET_MODE_INNER (mode);\n+  enum machine_mode intmode = GET_MODE_SIZE (mode) == 32 ? V8SImode : V4SImode;\n   rtx (*cmp) (rtx, rtx, rtx, rtx);\n   int i;\n \n@@ -17037,22 +17038,33 @@ ix86_expand_adjust_ufix_to_sfix_si (rtx val)\n   two31r = const_double_from_real_value (TWO31r, scalarmode);\n   two31r = ix86_build_const_vector (mode, 1, two31r);\n   two31r = force_reg (mode, two31r);\n-  real_ldexp (&MTWO32r, &dconstm1, 32);\n-  mtwo32r = const_double_from_real_value (MTWO32r, scalarmode);\n-  mtwo32r = ix86_build_const_vector (mode, 1, mtwo32r);\n-  mtwo32r = force_reg (mode, mtwo32r);\n   switch (mode)\n     {\n-    case V8SFmode: cmp = gen_avx_cmpv8sf3; break;\n-    case V4SFmode: cmp = gen_avx_cmpv4sf3; break;\n-    case V4DFmode: cmp = gen_avx_cmpv4df3; break;\n-    case V2DFmode: cmp = gen_avx_cmpv2df3; break;\n+    case V8SFmode: cmp = gen_avx_maskcmpv8sf3; break;\n+    case V4SFmode: cmp = gen_sse_maskcmpv4sf3; break;\n+    case V4DFmode: cmp = gen_avx_maskcmpv4df3; break;\n+    case V2DFmode: cmp = gen_sse2_maskcmpv2df3; break;\n     default: gcc_unreachable ();\n     }\n-  emit_insn (cmp (tmp[0], val, two31r, GEN_INT (29)));\n-  tmp[1] = expand_simple_binop (mode, AND, tmp[0], mtwo32r, tmp[1],\n+  tmp[3] = gen_rtx_LE (mode, two31r, val);\n+  emit_insn (cmp (tmp[0], two31r, val, tmp[3]));\n+  tmp[1] = expand_simple_binop (mode, AND, tmp[0], two31r, tmp[1],\n \t\t\t\t0, OPTAB_DIRECT);\n-  return expand_simple_binop (mode, PLUS, val, tmp[1], tmp[2],\n+  if (intmode == V4SImode || TARGET_AVX2)\n+    *xorp = expand_simple_binop (intmode, ASHIFT,\n+\t\t\t\t gen_lowpart (intmode, tmp[0]),\n+\t\t\t\t GEN_INT (31), NULL_RTX, 0,\n+\t\t\t\t OPTAB_DIRECT);\n+  else\n+    {\n+      rtx two31 = GEN_INT ((unsigned HOST_WIDE_INT) 1 << 31);\n+      two31 = ix86_build_const_vector (intmode, 1, two31);\n+      *xorp = expand_simple_binop (intmode, AND,\n+\t\t\t\t   gen_lowpart (intmode, tmp[0]),\n+\t\t\t\t   two31, NULL_RTX, 0,\n+\t\t\t\t   OPTAB_DIRECT);\n+    }\n+  return expand_simple_binop (mode, MINUS, val, tmp[1], tmp[2],\n \t\t\t      0, OPTAB_DIRECT);\n }\n "}, {"sha": "535f6f9fed31f4782a255a5d18a3f815e10219ca", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -2325,10 +2325,13 @@\n (define_expand \"fixuns_trunc<mode><sseintvecmodelower>2\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\" \"\")\n    (match_operand:VF1 1 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n+  \"TARGET_SSE2\"\n {\n-  rtx tmp = ix86_expand_adjust_ufix_to_sfix_si (operands[1]);\n-  emit_insn (gen_fix_trunc<mode><sseintvecmodelower>2 (operands[0], tmp));\n+  rtx tmp[3];\n+  tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1], &tmp[2]);\n+  tmp[1] = gen_reg_rtx (<sseintvecmode>mode);\n+  emit_insn (gen_fix_trunc<mode><sseintvecmodelower>2 (tmp[1], tmp[0]));\n+  emit_insn (gen_xor<sseintvecmodelower>3 (operands[0], tmp[1], tmp[2]));\n   DONE;\n })\n \n@@ -3115,12 +3118,29 @@\n   [(match_operand:<ssepackfltmode> 0 \"register_operand\" \"\")\n    (match_operand:VF2 1 \"register_operand\" \"\")\n    (match_operand:VF2 2 \"register_operand\" \"\")]\n-  \"TARGET_AVX\"\n+  \"TARGET_SSE2\"\n {\n-  rtx tmp[2];\n-  tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1]);\n-  tmp[1] = ix86_expand_adjust_ufix_to_sfix_si (operands[2]);\n-  emit_insn (gen_vec_pack_sfix_trunc_<mode> (operands[0], tmp[0], tmp[1]));\n+  rtx tmp[7];\n+  tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1], &tmp[2]);\n+  tmp[1] = ix86_expand_adjust_ufix_to_sfix_si (operands[2], &tmp[3]);\n+  tmp[4] = gen_reg_rtx (<ssepackfltmode>mode);\n+  emit_insn (gen_vec_pack_sfix_trunc_<mode> (tmp[4], tmp[0], tmp[1]));\n+  if (<ssepackfltmode>mode == V4SImode || TARGET_AVX2)\n+    {\n+      tmp[5] = gen_reg_rtx (<ssepackfltmode>mode);\n+      ix86_expand_vec_extract_even_odd (tmp[5], tmp[2], tmp[3], 0);\n+    }\n+  else\n+    {\n+      tmp[5] = gen_reg_rtx (V8SFmode);\n+      ix86_expand_vec_extract_even_odd (tmp[5], gen_lowpart (V8SFmode, tmp[2]),\n+\t\t\t\t\tgen_lowpart (V8SFmode, tmp[3]), 0);\n+      tmp[5] = gen_lowpart (V8SImode, tmp[5]);\n+    }\n+  tmp[6] = expand_simple_binop (<ssepackfltmode>mode, XOR, tmp[4], tmp[5],\n+\t\t\t\toperands[0], 0, OPTAB_DIRECT);\n+  if (tmp[6] != operands[0])\n+    emit_move_insn (operands[0], tmp[6]);\n   DONE;\n })\n "}, {"sha": "8a7f4e2809c8dd0b8d2f04fbd562894110569c95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -1,5 +1,7 @@\n 2011-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/torture/vec-cvt-1.c: Enable flttointtestui test.\n+\n \t* gcc.dg/torture/vec-cvt-1.c: New test.\n \n 2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "f9a5514f0c561411d51658a6e9d369d050aea704", "filename": "gcc/testsuite/gcc.dg/torture/vec-cvt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvec-cvt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2da9e931c163c6f4ce6433972854e5d0e62216/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvec-cvt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvec-cvt-1.c?ref=2f2da9e931c163c6f4ce6433972854e5d0e62216", "patch": "@@ -197,7 +197,7 @@ main ()\n   flttointtestsl ();\n   flttointtestuc ();\n   flttointtestus ();\n-//  flttointtestui ();\n+  flttointtestui ();\n   flttointtestul ();\n   inttoflttestsc ();\n   inttoflttestss ();"}]}