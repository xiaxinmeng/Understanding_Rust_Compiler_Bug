{"sha": "e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwYmZiZDE4ZTY0YjhhYjk0MjhhYTUxOGI1ZDdiNzRhNzM0NjFkOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-29T00:07:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-12-29T00:07:06Z"}, "message": "runtime: prevent deadlock when profiling signal arrives in stack scan\n    \n    Precise stack scan needs to unwind the stack. When it is\n    unwinding the stack, if a profiling signal arrives, which also\n    does a traceback, it may deadlock in dl_iterate_phdr. Prevent\n    this deadlock by setting up runtime_in_callers before traceback.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/155766\n\nFrom-SVN: r267457", "tree": {"sha": "a5200fb4bd7b40981b58590f089defa85c251512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5200fb4bd7b40981b58590f089defa85c251512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/comments", "author": null, "committer": null, "parents": [{"sha": "50bec22834e0b147fca92bea80501bccc309ce4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bec22834e0b147fca92bea80501bccc309ce4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bec22834e0b147fca92bea80501bccc309ce4d"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "a36396c3910720898d67db42e9a3360799fdf52d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "patch": "@@ -1,4 +1,4 @@\n-d9a30434440469c640a120fe7132057f5644d38c\n+0e482bef69d73b9381dbc543e200a1fe57275e81\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "78ada7a26e9bb0ef0c1b916de14fe218b3213f8d", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "patch": "@@ -16,7 +16,7 @@\n    older versions of glibc when a SIGPROF signal arrives while\n    collecting a backtrace.  */\n \n-static uint32 runtime_in_callers;\n+uint32 __go_runtime_in_callers;\n \n /* Argument passed to callback function.  */\n \n@@ -185,7 +185,7 @@ bool alreadyInCallers(void)\n bool\n alreadyInCallers()\n {\n-  return runtime_atomicload(&runtime_in_callers) > 0;\n+  return runtime_atomicload(&__go_runtime_in_callers) > 0;\n }\n \n /* Gather caller PC's.  */\n@@ -203,9 +203,9 @@ runtime_callers (int32 skip, Location *locbuf, int32 m, bool keep_thunks)\n   data.max = m;\n   data.keep_thunks = keep_thunks;\n   state = __go_get_backtrace_state ();\n-  runtime_xadd (&runtime_in_callers, 1);\n+  runtime_xadd (&__go_runtime_in_callers, 1);\n   backtrace_full (state, 0, callback, error_callback, &data);\n-  runtime_xadd (&runtime_in_callers, -1);\n+  runtime_xadd (&__go_runtime_in_callers, -1);\n \n   /* For some reason GCC sometimes loses the name of a thunk function\n      at the top of the stack.  If we are skipping thunks, skip that"}, {"sha": "158cbd07968efa01d6504b1c2fa96226421dba23", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "patch": "@@ -792,7 +792,9 @@ bool\n scanstackwithmap (void *gcw)\n {\n   _Unwind_Reason_Code code;\n+  runtime_xadd (&__go_runtime_in_callers, 1);\n   code = _Unwind_Backtrace (scanstackwithmap_callback, gcw);\n+  runtime_xadd (&__go_runtime_in_callers, -1);\n   return code == _URC_END_OF_STACK;\n }\n "}, {"sha": "9f6e251b1cd504c49302fc43b0023176a2d563aa", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20bfbd18e64b8ab9428aa518b5d7b74a73461d9/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=e20bfbd18e64b8ab9428aa518b5d7b74a73461d9", "patch": "@@ -515,3 +515,9 @@ bool runtime_usestackmaps;\n \n bool probestackmaps(void)\n   __asm__(\"runtime.probestackmaps\");\n+\n+// This is set to non-zero when calling backtrace_full.  This is used\n+// to avoid getting hanging on a recursive lock in dl_iterate_phdr on\n+// older versions of glibc when a SIGPROF signal arrives while\n+// collecting a backtrace.\n+extern uint32 __go_runtime_in_callers;"}]}