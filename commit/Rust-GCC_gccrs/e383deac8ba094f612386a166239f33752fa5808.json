{"sha": "e383deac8ba094f612386a166239f33752fa5808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4M2RlYWM4YmEwOTRmNjEyMzg2YTE2NjIzOWYzMzc1MmZhNTgwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-13T17:22:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-13T17:22:57Z"}, "message": "libstdc++/71856 Define _GLIBCXX_PARALLEL_ASSERTIONS\n\n\tPR libstdc++/71856\n\t* include/bits/c++config (_GLIBCXX_ASSERTIONS): Define to 1 not empty.\n\t* include/parallel/compiletime_settings.h (_GLIBCXX_ASSERTIONS):\n\tRename to _GLIBCXX_PARALLEL_ASSERTIONS and make default value depend\n\ton _GLIBCXX_ASSERTIONS.\n\t* include/parallel/balanced_quicksort.h: Rename _GLIBCXX_ASSERTIONS.\n\tInclude <unistd.h> for sleep.\n\t* include/parallel/losertree.h: Rename _GLIBCXX_ASSERTIONS.\n\t* include/parallel/merge.h: Likewise.\n\t* include/parallel/multiway_merge.h: Likewise.\n\t* include/parallel/partition.h: Likewise.\n\t* include/parallel/queue.h: Likewise.\n\t* include/parallel/sort.h: Likewise.\n\t* testsuite/25_algorithms/headers/algorithm/\n\tparallel_algorithm_assert.cc: New.\n\nFrom-SVN: r238307", "tree": {"sha": "e875a53d86f58a21dc9d0ac7f93f968fd5cf427b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e875a53d86f58a21dc9d0ac7f93f968fd5cf427b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e383deac8ba094f612386a166239f33752fa5808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e383deac8ba094f612386a166239f33752fa5808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e383deac8ba094f612386a166239f33752fa5808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e383deac8ba094f612386a166239f33752fa5808/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f8dc9367493b5bd97d67c40de8c13041393891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f8dc9367493b5bd97d67c40de8c13041393891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f8dc9367493b5bd97d67c40de8c13041393891"}], "stats": {"total": 147, "additions": 97, "deletions": 50}, "files": [{"sha": "264f7935e94a11f97d30b1fb018fae286c28ecba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -1,5 +1,21 @@\n 2016-07-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/71856\n+\t* include/bits/c++config (_GLIBCXX_ASSERTIONS): Define to 1 not empty.\n+\t* include/parallel/compiletime_settings.h (_GLIBCXX_ASSERTIONS):\n+\tRename to _GLIBCXX_PARALLEL_ASSERTIONS and make default value depend\n+\ton _GLIBCXX_ASSERTIONS.\n+\t* include/parallel/balanced_quicksort.h: Rename _GLIBCXX_ASSERTIONS.\n+\tInclude <unistd.h> for sleep.\n+\t* include/parallel/losertree.h: Rename _GLIBCXX_ASSERTIONS.\n+\t* include/parallel/merge.h: Likewise.\n+\t* include/parallel/multiway_merge.h: Likewise.\n+\t* include/parallel/partition.h: Likewise.\n+\t* include/parallel/queue.h: Likewise.\n+\t* include/parallel/sort.h: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_assert.cc: New.\n+\n \t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n \t(replace(__const_iterator, __const_iterator, initializer_list<C>)):\n \tForward to different overload."}, {"sha": "462560742517b3600c744da82a1fca17c9dc4886", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -414,7 +414,7 @@ namespace std\n \n // Debug Mode implies checking assertions.\n #ifdef _GLIBCXX_DEBUG\n-# define _GLIBCXX_ASSERTIONS\n+# define _GLIBCXX_ASSERTIONS 1\n #endif\n \n // Disable std::string explicit instantiation declarations in order to assert."}, {"sha": "9d09ed2ceba7c61120197f5c0d7775fc9d3de73a", "filename": "libstdc++-v3/include/parallel/balanced_quicksort.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -51,8 +51,11 @@\n #include <parallel/random_number.h>\n #include <parallel/queue.h>\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n #include <parallel/checkers.h>\n+#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n #endif\n \n namespace __gnu_parallel\n@@ -110,7 +113,7 @@ namespace __gnu_parallel\n \t__median_of_three_iterators(__begin, __begin + (__end - __begin) / 2,\n \t\t\t\t    __end  - 1, __comp);\n \n-#if defined(_GLIBCXX_ASSERTIONS)\n+#if defined(_GLIBCXX_PARALLEL_ASSERTIONS)\n       // Must be in between somewhere.\n       _DifferenceType __n = __end - __begin;\n \n@@ -147,7 +150,7 @@ namespace __gnu_parallel\n       std::iter_swap(__begin + __split_pos, __pivot_pos);\n       __pivot_pos = __begin + __split_pos;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _RAIter __r;\n       for (__r = __begin; __r != __pivot_pos; ++__r)\n \t_GLIBCXX_PARALLEL_ASSERT(__comp(*__r, *__pivot_pos));\n@@ -194,7 +197,7 @@ namespace __gnu_parallel\n       _DifferenceType __split_pos =\n \t__qsb_divide(__begin, __end, __comp, __num_threads);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(0 <= __split_pos &&\n                                __split_pos < (__end - __begin));\n #endif\n@@ -267,7 +270,7 @@ namespace __gnu_parallel\n       _Piece __current = __tl._M_initial;\n \n       _DifferenceType __elements_done = 0;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _DifferenceType __total_elements_done = 0;\n #endif\n \n@@ -297,7 +300,7 @@ namespace __gnu_parallel\n \t\t\t\t\t\t\t __pred);\n \n               // Left side: < __pivot_pos; __right side: >= __pivot_pos.\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n               _GLIBCXX_PARALLEL_ASSERT(__begin <= __split_pos1\n                                        && __split_pos1 < __end);\n #endif\n@@ -328,7 +331,7 @@ namespace __gnu_parallel\n \n               // Elements equal to pivot are done.\n               __elements_done += (__split_pos2 - __split_pos1);\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n               __total_elements_done += (__split_pos2 - __split_pos1);\n #endif\n               // Always push larger part onto stack.\n@@ -359,7 +362,7 @@ namespace __gnu_parallel\n             {\n               __gnu_sequential::sort(__begin, __end, __comp);\n               __elements_done += __n;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n               __total_elements_done += __n;\n #endif\n \n@@ -372,15 +375,15 @@ namespace __gnu_parallel\n \n               __elements_done = 0;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n               double __search_start = omp_get_wtime();\n #endif\n \n               // Look for new work.\n               bool __successfully_stolen = false;\n               while (__wait && *__tl._M_elements_leftover > 0\n                      && !__successfully_stolen\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n                       // Possible dead-lock.\n                      && (omp_get_wtime() < (__search_start + 1.0))\n #endif\n@@ -399,7 +402,7 @@ namespace __gnu_parallel\n #endif\n         \t}\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n               if (omp_get_wtime() >= (__search_start + 1.0))\n         \t{\n                   sleep(1);\n@@ -409,7 +412,7 @@ namespace __gnu_parallel\n #endif\n               if (!__successfully_stolen)\n         \t{\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n                   _GLIBCXX_PARALLEL_ASSERT(*__tl._M_elements_leftover == 0);\n #endif\n                   return;\n@@ -475,7 +478,7 @@ namespace __gnu_parallel\n       __qsb_conquer(__tls, __begin, __begin + __n, __comp, 0,\n \t\t    __num_threads, true);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       // All stack must be empty.\n       _Piece __dummy;\n       for (_ThreadIndex __i = 1; __i < __num_threads; ++__i)"}, {"sha": "47f0a59f8e494b9d0404a9c11c9de247fb595bc0", "filename": "libstdc++-v3/include/parallel/compiletime_settings.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompiletime_settings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompiletime_settings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompiletime_settings.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -55,10 +55,10 @@\n #define _GLIBCXX_SCALE_DOWN_FPU 0\n #endif\n \n-#ifndef _GLIBCXX_ASSERTIONS\n+#ifndef _GLIBCXX_PARALLEL_ASSERTIONS\n /** @brief Switch on many _GLIBCXX_PARALLEL_ASSERTions in parallel code.\n  *  Should be switched on only locally. */\n-#define _GLIBCXX_ASSERTIONS 0\n+#define _GLIBCXX_PARALLEL_ASSERTIONS (_GLIBCXX_ASSERTIONS+0)\n #endif\n \n #ifndef _GLIBCXX_RANDOM_SHUFFLE_CONSIDER_L1"}, {"sha": "f1ee128773247ea23ec13276b52563b0f397e68d", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -222,7 +222,7 @@ namespace __gnu_parallel\n       __delete_min_insert(_Tp __key, bool __sup)\n       {\n         using std::swap;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -324,7 +324,7 @@ namespace __gnu_parallel\n       __delete_min_insert(_Tp __key, bool __sup)\n       {\n         using std::swap;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -451,7 +451,7 @@ namespace __gnu_parallel\n \n       void __delete_min_insert(const _Tp& __key, bool __sup)\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -533,7 +533,7 @@ namespace __gnu_parallel\n \n       void __delete_min_insert(const _Tp& __key, bool __sup)\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -620,7 +620,7 @@ namespace __gnu_parallel\n       int\n       __get_min_source()\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -687,7 +687,7 @@ namespace __gnu_parallel\n       {\n \t_M_losers[0] = _M_losers[__init_winner(1)];\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top at the beginning\n \t// (0 sequences!)\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n@@ -700,7 +700,7 @@ namespace __gnu_parallel\n       __delete_min_insert(_Tp __key, bool)\n       {\n         using std::swap;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -755,7 +755,7 @@ namespace __gnu_parallel\n \t    unsigned int __left = __init_winner(2 * __root);\n \t    unsigned int __right = __init_winner(2 * __root + 1);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t    // If __left one is sentinel then __right one must be, too.\n \t    if (_M_losers[__left]._M_source == -1)\n \t      _GLIBCXX_PARALLEL_ASSERT(_M_losers[__right]._M_source == -1);\n@@ -782,7 +782,7 @@ namespace __gnu_parallel\n       {\n \t_M_losers[0] = _M_losers[__init_winner(1)];\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top at the beginning\n \t// (0 sequences!)\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n@@ -795,7 +795,7 @@ namespace __gnu_parallel\n       __delete_min_insert(_Tp __key, bool)\n       {\n         using std::swap;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -865,7 +865,7 @@ namespace __gnu_parallel\n       int\n       __get_min_source()\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -932,7 +932,7 @@ namespace __gnu_parallel\n       {\n \t_M_losers[0] = _M_losers[__init_winner(1)];\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top at the beginning\n \t// (0 sequences!)\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n@@ -942,7 +942,7 @@ namespace __gnu_parallel\n       void\n       __delete_min_insert(const _Tp& __key, bool __sup)\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif\n@@ -998,7 +998,7 @@ namespace __gnu_parallel\n \t    unsigned int __left = __init_winner(2 * __root);\n \t    unsigned int __right = __init_winner(2 * __root + 1);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t    // If __left one is sentinel then __right one must be, too.\n \t    if (_M_losers[__left]._M_source == -1)\n \t      _GLIBCXX_PARALLEL_ASSERT(_M_losers[__right]._M_source == -1);\n@@ -1025,7 +1025,7 @@ namespace __gnu_parallel\n       {\n \t_M_losers[0] = _M_losers[__init_winner(1)];\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top at the beginning\n \t// (0 sequences!)\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n@@ -1035,7 +1035,7 @@ namespace __gnu_parallel\n       void\n       __delete_min_insert(const _Tp& __key, bool __sup)\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t// no dummy sequence can ever be at the top!\n \t_GLIBCXX_PARALLEL_ASSERT(_M_losers[0]._M_source != -1);\n #endif"}, {"sha": "717054ff90d8c217c13c24d2be07dc7955e7e901", "filename": "libstdc++-v3/include/parallel/merge.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -113,7 +113,7 @@ namespace __gnu_parallel\n       typedef typename std::iterator_traits<_RAIter2>::value_type\n         _ValueType2;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(__max_length >= 0);\n #endif\n "}, {"sha": "9e9fdf8a5dd5531472d277e7a6d02ef16aa7af41", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -46,7 +46,7 @@\n #include <parallel/parallel.h>\n #include <parallel/losertree.h>\n #include <parallel/multiseq_selection.h>\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n #include <parallel/checkers.h>\n #endif\n \n@@ -256,7 +256,7 @@ namespace __gnu_parallel\n       if (__length == 0)\n \treturn __target;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _DifferenceTp __orig_length = __length;\n #endif\n \n@@ -310,7 +310,7 @@ namespace __gnu_parallel\n     __finish:\n       ;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n     _GLIBCXX_PARALLEL_ASSERT(\n \t((_RAIter1)__seq0 - __seqs_begin[0].first) +\n \t((_RAIter1)__seq1 - __seqs_begin[1].first) +\n@@ -597,7 +597,7 @@ namespace __gnu_parallel\n \n       for (_SeqNumber __t = 0; __t < __k; ++__t)\n \t{\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n           _GLIBCXX_PARALLEL_ASSERT(__seqs_begin[__t].first\n                                    != __seqs_begin[__t].second);\n #endif\n@@ -608,7 +608,7 @@ namespace __gnu_parallel\n \n       _SeqNumber __source;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _DifferenceType __i = 0;\n #endif\n \n@@ -618,7 +618,7 @@ namespace __gnu_parallel\n           // Take out.\n           __source = __lt.__get_min_source();\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n           _GLIBCXX_PARALLEL_ASSERT(0 <= __source && __source < __k);\n           _GLIBCXX_PARALLEL_ASSERT(__i == 0\n               || !__comp(*(__seqs_begin[__source].first), *(__target - 1)));\n@@ -627,7 +627,7 @@ namespace __gnu_parallel\n           // Feed.\n           *(__target++) = *(__seqs_begin[__source].first++);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n           ++__i;\n #endif\n           // Replace from same __source.\n@@ -690,7 +690,7 @@ namespace __gnu_parallel\n       __target_end = multiway_merge_loser_tree_unguarded<UnguardedLoserTree>\n \t(__seqs_begin, __seqs_end, __target, __sentinel, __length, __comp);\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(__target_end == __target + __length);\n       _GLIBCXX_PARALLEL_ASSERT(__is_sorted(__target, __target_end, __comp));\n #endif\n@@ -936,7 +936,7 @@ namespace __gnu_parallel\n       typedef typename std::iterator_traits<_RAIter1>::value_type\n \t_ValueType;\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       for (_RAIterIterator __s = __seqs_begin; __s != __seqs_end; ++__s)\n \t{\n           _GLIBCXX_PARALLEL_ASSERT(__is_sorted((*__s).first,\n@@ -990,7 +990,7 @@ namespace __gnu_parallel\n \t    (__seqs_begin, __seqs_end, __target, __sentinel, __length, __comp);\n \t  break;\n \t}\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n       _GLIBCXX_PARALLEL_ASSERT(\n \t__is_sorted(__target, __target + __length, __comp));\n #endif\n@@ -1230,7 +1230,7 @@ namespace __gnu_parallel\n                             _Compare __comp,\n                             _ThreadIndex __num_threads)\n       {\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t_GLIBCXX_PARALLEL_ASSERT(__seqs_end - __seqs_begin > 1);\n #endif\n \n@@ -1318,7 +1318,7 @@ namespace __gnu_parallel\n \t  delete[] __chunks;\n \t} // parallel\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t_GLIBCXX_PARALLEL_ASSERT(\n           __is_sorted(__target, __target + __length, __comp));\n #endif"}, {"sha": "16dadf52884113defad7fc62fade5e953fe5f309", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -234,7 +234,7 @@ namespace __gnu_parallel\n                         break;\n                       }\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t\t  _GLIBCXX_PARALLEL_ASSERT(__swapstart != -1);\n #endif\n \n@@ -257,15 +257,15 @@ namespace __gnu_parallel\n                         break;\n                       }\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n \t\t  _GLIBCXX_PARALLEL_ASSERT(__swapstart != -1);\n #endif\n \n \t\t  std::swap_ranges(__begin + __thread_right_border,\n \t\t\t\t   __begin + __thread_right_border\n \t\t\t\t   + __chunk_size, __begin + __swapstart);\n \t      }\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n #             pragma omp barrier\n \n #             pragma omp single"}, {"sha": "cb525c2bf501bace130a7d135e293a9bc82701bb", "filename": "libstdc++-v3/include/parallel/queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -86,7 +86,7 @@ namespace __gnu_parallel\n         int __former_front, __former_back;\n         __decode2(__former_borders, __former_front, __former_back);\n         *(_M_base + __former_front % _M_max_size) = __t;\n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n         // Otherwise: front - back > _M_max_size eventually.\n         _GLIBCXX_PARALLEL_ASSERT(((__former_front + 1) - __former_back)\n                                  <= _M_max_size);"}, {"sha": "12cef0def329dd1a01d769d6e440ed9ec9c36bc5", "filename": "libstdc++-v3/include/parallel/sort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -36,7 +36,7 @@\n #include <parallel/features.h>\n #include <parallel/parallel.h>\n \n-#if _GLIBCXX_ASSERTIONS\n+#if _GLIBCXX_PARALLEL_ASSERTIONS\n #include <parallel/checkers.h>\n #endif\n "}, {"sha": "b9a60169f6c450c67a5458104acb99ff9b140498", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_assert.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e383deac8ba094f612386a166239f33752fa5808/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert.cc?ref=e383deac8ba094f612386a166239f33752fa5808", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-require-parallel-mode \"\" }\n+// { dg-options \"-fopenmp\" { target *-*-* } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef _GLIBCXX_ASSERTIONS\n+# define _GLIBCXX_ASSERTIONS 1\n+#endif\n+#include <parallel/algorithm>\n+#ifndef _GLIBCXX_PARALLEL_ASSERTIONS\n+# error \"_GLIBCXX_ASSERTIONS does not enable _GLIBCXX_PARALLEL_ASSERTIONS\"\n+#endif"}]}