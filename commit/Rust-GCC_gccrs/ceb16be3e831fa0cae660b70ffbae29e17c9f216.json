{"sha": "ceb16be3e831fa0cae660b70ffbae29e17c9f216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViMTZiZTNlODMxZmEwY2FlNjYwYjcwZmZiYWUyOWUxN2M5ZjIxNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-23T07:38:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-23T07:38:54Z"}, "message": "tree-ssa-loop-manip.c (add_exit_phis_var): Allow virtual operands.\n\n2012-08-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-loop-manip.c (add_exit_phis_var): Allow virtual operands.\n\t(find_uses_to_rename_use): Likewise.\n\t(find_uses_to_rename_bb): Likewise.\n\t(find_uses_to_rename_stmt): Walk over all operands.\n\nFrom-SVN: r190614", "tree": {"sha": "8fa736313a6a16f60f9845329bf1c70501f02bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fa736313a6a16f60f9845329bf1c70501f02bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb16be3e831fa0cae660b70ffbae29e17c9f216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb16be3e831fa0cae660b70ffbae29e17c9f216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb16be3e831fa0cae660b70ffbae29e17c9f216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb16be3e831fa0cae660b70ffbae29e17c9f216/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610d0e16cfd973432dfdb1a7bed95d0cb47903ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610d0e16cfd973432dfdb1a7bed95d0cb47903ff"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "ef1b5ca3dac84d48cdd7f9d1f15a2a402e79e5f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb16be3e831fa0cae660b70ffbae29e17c9f216/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb16be3e831fa0cae660b70ffbae29e17c9f216/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceb16be3e831fa0cae660b70ffbae29e17c9f216", "patch": "@@ -1,3 +1,10 @@\n+2012-08-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-manip.c (add_exit_phis_var): Allow virtual operands.\n+\t(find_uses_to_rename_use): Likewise.\n+\t(find_uses_to_rename_bb): Likewise.\n+\t(find_uses_to_rename_stmt): Walk over all operands.\n+\n 2012-08-22  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54089"}, {"sha": "832a5011493f90f181050eed3d5c6a63f0f65ff3", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb16be3e831fa0cae660b70ffbae29e17c9f216/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb16be3e831fa0cae660b70ffbae29e17c9f216/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=ceb16be3e831fa0cae660b70ffbae29e17c9f216", "patch": "@@ -303,8 +303,7 @@ add_exit_phis_var (tree var, bitmap use_blocks, bitmap *loop_exits)\n   basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (var));\n   bitmap live_exits = BITMAP_ALLOC (&loop_renamer_obstack);\n \n-  gcc_checking_assert (! virtual_operand_p (var));\n-  gcc_assert (! bitmap_bit_p (use_blocks, def_bb->index));\n+  gcc_checking_assert (! bitmap_bit_p (use_blocks, def_bb->index));\n \n   compute_live_loop_exits (live_exits, use_blocks, loop_exits, def_bb);\n \n@@ -367,10 +366,6 @@ find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks,\n   if (TREE_CODE (use) != SSA_NAME)\n     return;\n \n-  /* We don't need to keep virtual operands in loop-closed form.  */\n-  if (virtual_operand_p (use))\n-    return;\n-\n   ver = SSA_NAME_VERSION (use);\n   def_bb = gimple_bb (SSA_NAME_DEF_STMT (use));\n   if (!def_bb)\n@@ -408,7 +403,7 @@ find_uses_to_rename_stmt (gimple stmt, bitmap *use_blocks, bitmap need_phis)\n   if (is_gimple_debug (stmt))\n     return;\n \n-  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n+  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_ALL_USES)\n     find_uses_to_rename_use (bb, var, use_blocks, need_phis);\n }\n \n@@ -428,9 +423,8 @@ find_uses_to_rename_bb (basic_block bb, bitmap *use_blocks, bitmap need_phis)\n     for (bsi = gsi_start_phis (e->dest); !gsi_end_p (bsi); gsi_next (&bsi))\n       {\n         gimple phi = gsi_stmt (bsi);\n-\tif (! virtual_operand_p (gimple_phi_result (phi)))\n-\t  find_uses_to_rename_use (bb, PHI_ARG_DEF_FROM_EDGE (phi, e),\n-\t\t\t\t   use_blocks, need_phis);\n+\tfind_uses_to_rename_use (bb, PHI_ARG_DEF_FROM_EDGE (phi, e),\n+\t\t\t\t use_blocks, need_phis);\n       }\n \n   for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n@@ -474,6 +468,9 @@ find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis)\n \n    1) Updating it during unrolling/peeling/versioning is trivial, since\n       we do not need to care about the uses outside of the loop.\n+      The same applies to virtual operands which are also rewritten into\n+      loop closed SSA form.  Note that virtual operands are always live\n+      until function exit.\n    2) The behavior of all uses of an induction variable is the same.\n       Without this, you need to distinguish the case when the variable\n       is used outside of the loop it is defined in, for example"}]}