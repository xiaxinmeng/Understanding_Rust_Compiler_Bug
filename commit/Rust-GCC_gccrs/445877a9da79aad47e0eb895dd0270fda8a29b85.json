{"sha": "445877a9da79aad47e0eb895dd0270fda8a29b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1ODc3YTlkYTc5YWFkNDdlMGViODk1ZGQwMjcwZmRhOGEyOWI4NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-03T23:11:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-03T23:11:46Z"}, "message": "testsuite_iterators.h: Don't include <cstddef>, don't use NULL, use std::size_t and std::ptrdiff_t.\n\n2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/util/testsuite_iterators.h: Don't include <cstddef>,\n\tdon't use NULL, use std::size_t and std::ptrdiff_t.\n\t* testsuite/18_support/exception/38732.cc: Likewise.\n\t* testsuite/22_locale/time_put/put/wchar_t/12439_1.cc: Likewise.\n\t* testsuite/22_locale/time_put/put/wchar_t/12439_2.cc: Likewise.\n\t* testsuite/22_locale/time_put/put/wchar_t/12439_3.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n\t* testsuite/util/testsuite_hooks.cc: Likewise.\n\t* config/locale/gnu/codecvt_members.cc: Likewise.\n\t* config/locale/gnu/messages_members.cc: Likewise.\n\t* config/locale/gnu/c_locale.h: Likewise.\n\t* config/locale/gnu/messages_members.h: Likewise.\n\t* config/locale/gnu/monetary_members.cc: Likewise.\n\t* config/locale/gnu/time_members.cc: Likewise.\n\t* config/locale/gnu/time_members.h: Likewise.\n\t* config/locale/generic/c_locale.cc: Likewise.\n\t* config/locale/generic/codecvt_members.cc: Likewise.\n\t* config/locale/generic/c_locale.h: Likewise.\n\t* config/locale/generic/time_members.cc: Likewise.\n\t* config/locale/generic/time_members.h: Likewise.\n\nFrom-SVN: r160238", "tree": {"sha": "eb879b8d32b59d997be9b0c425cc28a80cfcb039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb879b8d32b59d997be9b0c425cc28a80cfcb039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445877a9da79aad47e0eb895dd0270fda8a29b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445877a9da79aad47e0eb895dd0270fda8a29b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445877a9da79aad47e0eb895dd0270fda8a29b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445877a9da79aad47e0eb895dd0270fda8a29b85/comments", "author": null, "committer": null, "parents": [{"sha": "bb6c4ac85a9fe189488bbe48541218b61342937f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6c4ac85a9fe189488bbe48541218b61342937f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6c4ac85a9fe189488bbe48541218b61342937f"}], "stats": {"total": 167, "additions": 94, "deletions": 73}, "files": [{"sha": "c42c1bb7e84829306bfc225d477b5f0b0c1b4259", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,3 +1,29 @@\n+2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/util/testsuite_iterators.h: Don't include <cstddef>,\n+\tdon't use NULL, use std::size_t and std::ptrdiff_t.\n+\t* testsuite/18_support/exception/38732.cc: Likewise.\n+\t* testsuite/22_locale/time_put/put/wchar_t/12439_1.cc: Likewise.\n+\t* testsuite/22_locale/time_put/put/wchar_t/12439_2.cc: Likewise.\n+\t* testsuite/22_locale/time_put/put/wchar_t/12439_3.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n+\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n+\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n+\t* testsuite/util/testsuite_hooks.cc: Likewise.\n+\t* config/locale/gnu/codecvt_members.cc: Likewise.\n+\t* config/locale/gnu/messages_members.cc: Likewise.\n+\t* config/locale/gnu/c_locale.h: Likewise.\n+\t* config/locale/gnu/messages_members.h: Likewise.\n+\t* config/locale/gnu/monetary_members.cc: Likewise.\n+\t* config/locale/gnu/time_members.cc: Likewise.\n+\t* config/locale/gnu/time_members.h: Likewise.\n+\t* config/locale/generic/c_locale.cc: Likewise.\n+\t* config/locale/generic/codecvt_members.cc: Likewise.\n+\t* config/locale/generic/c_locale.h: Likewise.\n+\t* config/locale/generic/time_members.cc: Likewise.\n+\t* config/locale/generic/time_members.h: Likewise.\n+\n 2010-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/c++config (std::size_t, std::ptrdiff_t,"}, {"sha": "468816092d71612f0265a3a48d8b22f6f0347e3e", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -36,7 +36,6 @@\n #include <cstdio>\n #include <locale>\n #include <limits>\n-#include <cstddef>\n \n #ifdef _GLIBCXX_HAVE_IEEEFP_H\n #include <ieeefp.h>\n@@ -50,7 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __len = strlen(__old) + 1;\n       char* __sav = new char[__len];\n       memcpy(__sav, __old, __len);\n@@ -115,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __len = strlen(__old) + 1;\n       char* __sav = new char[__len];\n       memcpy(__sav, __old, __len);\n@@ -160,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   ios_base::iostate& __err, const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __len = strlen(__old) + 1;\n       char* __sav = new char[__len];\n       memcpy(__sav, __old, __len);\n@@ -212,15 +211,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   {\n     // Currently, the generic model only supports the \"C\" locale.\n     // See http://gcc.gnu.org/ml/libstdc++/2003-02/msg00345.html\n-    __cloc = NULL;\n+    __cloc = 0;\n     if (strcmp(__s, \"C\"))\n       __throw_runtime_error(__N(\"locale::facet::_S_create_c_locale \"\n \t\t\t    \"name not valid\"));\n   }\n \n   void\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n-  { __cloc = NULL; }\n+  { __cloc = 0; }\n \n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale&) throw()"}, {"sha": "7d685b8b6070c7497c0f4a38c7d00aeed44391bc", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,7 +40,6 @@\n #pragma GCC system_header\n \n #include <clocale>\n-#include <cstddef>\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n \n@@ -57,8 +56,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const int __size __attribute__((__unused__)),\n \t\t   const char* __fmt, ...)\n   {\n-    char* __old = std::setlocale(LC_NUMERIC, NULL);\n-    char* __sav = NULL;\n+    char* __old = std::setlocale(LC_NUMERIC, 0);\n+    char* __sav = 0;\n     if (__builtin_strcmp(__old, \"C\"))\n       {\n \tconst size_t __len = __builtin_strlen(__old) + 1;"}, {"sha": "655ce822666922cf677c610e677eb5ca71cc3730", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // std::codecvt implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     while (__from < __end && __max)\n       {\n-\tsize_t __conv = mbrtowc(NULL, __from, __end - __from, &__tmp_state);\n+\tsize_t __conv = mbrtowc(0, __from, __end - __from, &__tmp_state);\n \tif (__conv == static_cast<size_t>(-1))\n \t  {\n \t    // Invalid source character"}, {"sha": "040e228fd05fbda4b26be7b4b74a91bc6e308448", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -42,7 +42,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_put(char* __s, size_t __maxlen, const char* __format,\n \t   const tm* __tm) const throw()\n     {\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __llen = strlen(__old) + 1;\n       char* __sav = new char[__llen];\n       memcpy(__sav, __old, __llen);\n@@ -127,7 +127,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format,\n \t   const tm* __tm) const throw()\n     {\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __llen = strlen(__old) + 1;\n       char* __sav = new char[__llen];\n       memcpy(__sav, __old, __llen);"}, {"sha": "394989edd117a015cbe3ac78a2a43ee62f0181a5", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,7 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : facet(__refs), _M_data(NULL)\n+    : facet(__refs), _M_data(0)\n     { \n       _M_name_timepunct = _S_get_c_name();\n       _M_initialize_timepunct(); \n@@ -56,7 +57,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s, \n \t\t\t\t     size_t __refs) \n-    : facet(__refs), _M_data(NULL)\n+    : facet(__refs), _M_data(0)\n     {\n       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n \t{"}, {"sha": "1809119d384a0a9d157f50f3e39beca3978089da", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -40,7 +40,6 @@\n #pragma GCC system_header\n \n #include <clocale>\n-#include <cstddef>\n \n #define _GLIBCXX_C_LOCALE_GNU 1\n \n@@ -71,8 +70,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n #else\n-    char* __old = std::setlocale(LC_NUMERIC, NULL);\n-    char* __sav = NULL;\n+    char* __old = std::setlocale(LC_NUMERIC, 0);\n+    char* __sav = 0;\n     if (__builtin_strcmp(__old, \"C\"))\n       {\n \tconst size_t __len = __builtin_strlen(__old) + 1;"}, {"sha": "7cc12edc1915b379e21bdd08027d344e3ad8f7d1", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // std::codecvt implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    // mbrtowc.\n \t    for (__from = __tmp_from;; __from += __conv)\n \t      {\n-\t\t__conv = mbrtowc(NULL, __from, __end - __from,\n+\t\t__conv = mbrtowc(0, __from, __end - __from,\n \t\t\t\t &__tmp_state);\n \t\tif (__conv == static_cast<size_t>(-1)\n \t\t    || __conv == static_cast<size_t>(-2))"}, {"sha": "94ebcb5fa7f2a9c646a85e61a15bb67be8bfa828", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __uselocale(__old);\n       return string(__msg);\n #else\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __len = strlen(__old) + 1;\n       char* __sav = new char[__len];\n       memcpy(__sav, __old, __len);\n@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __uselocale(__old);\n       return _M_convert_from_char(__msg);\n # else\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __len = strlen(__old) + 1;\n       char* __sav = new char[__len];\n       memcpy(__sav, __old, __len);"}, {"sha": "b633efa54fd8ffb40d298d4bec6b5f5f7d21ef01", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT>\n      messages<_CharT>::messages(__c_locale __cloc, const char* __s, \n \t\t\t\tsize_t __refs) \n-     : facet(__refs), _M_c_locale_messages(NULL), _M_name_messages(NULL)\n+     : facet(__refs), _M_c_locale_messages(0), _M_name_messages(0)\n      {\n        if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n \t {"}, {"sha": "e5f90ca5b0f32cc6e61932d160a66e0dd2ad1664", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -574,7 +574,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __c_locale __old = __uselocale(__cloc);\n #else\n \t  // Switch to named locale so that mbsrtowcs will work.\n-\t  char* __old = setlocale(LC_ALL, NULL);\n+\t  char* __old = setlocale(LC_ALL, 0);\n           const size_t __llen = strlen(__old) + 1;\n           char* __sav = new char[__llen];\n           memcpy(__sav, __old, __llen);\n@@ -757,7 +757,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __c_locale __old = __uselocale(__cloc);\n #else\n \t  // Switch to named locale so that mbsrtowcs will work.\n-\t  char* __old = setlocale(LC_ALL, NULL);\n+\t  char* __old = setlocale(LC_ALL, 0);\n           const size_t __llen = strlen(__old) + 1;\n           char* __sav = new char[__llen];\n           memcpy(__sav, __old, __llen);"}, {"sha": "cf139716ee97df2d1f39a34d10f09632ed6f00b6", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -45,7 +45,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const size_t __len = __strftime_l(__s, __maxlen, __format, __tm,\n \t\t\t\t\t_M_c_locale_timepunct);\n #else\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __llen = strlen(__old) + 1;  \n       char* __sav = new char[__llen];\n       memcpy(__sav, __old, __llen);\n@@ -201,7 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const size_t __len = __wcsftime_l(__s, __maxlen, __format, __tm,\n \t\t\t\t\t_M_c_locale_timepunct);\n #else\n-      char* __old = setlocale(LC_ALL, NULL);\n+      char* __old = setlocale(LC_ALL, 0);\n       const size_t __llen = strlen(__old) + 1;\n       char* __sav = new char[__llen];\n       memcpy(__sav, __old, __llen);"}, {"sha": "5b81d9ce2fc6cee496c3597837de2738b80d2d35", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,6 +1,7 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,21 +40,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(size_t __refs) \n-    : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs) \n-    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(NULL), \n+    : facet(__refs), _M_data(__cache), _M_c_locale_timepunct(0), \n       _M_name_timepunct(_S_get_c_name())\n     { _M_initialize_timepunct(); }\n \n   template<typename _CharT>\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,\n \t\t\t\t     size_t __refs) \n-    : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n-      _M_name_timepunct(NULL)\n+    : facet(__refs), _M_data(0), _M_c_locale_timepunct(0), \n+      _M_name_timepunct(0)\n     {\n       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n \t{"}, {"sha": "7c70f3a17b3a6ba44b587b1fb39de6343076a14f", "filename": "libstdc++-v3/testsuite/18_support/exception/38732.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,7 +17,6 @@\n \n #include <typeinfo>\n #include <exception>\n-#include <cstddef>\n #include \"unwind.h\"\n #include <testsuite_hooks.h>\n \n@@ -67,21 +66,21 @@ void test01 ()\n     throw 0;\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n-    VERIFY ( exc != NULL );\n+    VERIFY ( exc != 0 );\n     VERIFY ( typeid(int) == *exc->exceptionType );\n   }\n   try {\n     throw 0LL;\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n-    VERIFY ( exc != NULL );\n+    VERIFY ( exc != 0 );\n     VERIFY ( typeid(long long int) == *exc->exceptionType );\n   }\n   try {\n     throw 0.0;\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n-    VERIFY ( exc != NULL );\n+    VERIFY ( exc != 0 );\n     VERIFY ( typeid(double) == *exc->exceptionType );\n   }\n }"}, {"sha": "5b882cce68318293520ef1fdc0aa016a4a950073", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12658_thread-2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -3,7 +3,7 @@\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n // { dg-require-namedlocale \"\" }\n \n-// Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2007, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,10 +55,10 @@ main()\n     loc[j] = std::locale(j % 2 ? \"en_US\" : \"fr_FR\");  \n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_create(&tid[i], NULL, thread_main, 0);\n+    pthread_create(&tid[i], 0, thread_main, 0);\n   \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_join(tid[i], NULL);\n+    pthread_join(tid[i], 0);\n \n   return 0;\n }"}, {"sha": "1298fa9e5e96495b3c3e3ab291b1f5e854b8d55a", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/12439_1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,7 +45,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n   \n   wostringstream stream;\n-  time_t tt = time(NULL);\n+  time_t tt = time(0);\n   \n   const wchar_t* fmt = L\"%c\";\n   "}, {"sha": "c231354743e5ac1e08221aa02e768b135c0ca42c", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/12439_2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_2.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,7 +42,7 @@ void test02()\n   \n   locale loc;\n   const tp_type& tp = use_facet<tp_type>(loc);\n-  time_t tt = time(NULL);\n+  time_t tt = time(0);\n   wostringstream stream;\n   \n   tp.put(tp_type::iter_type(stream), stream, stream.fill(),"}, {"sha": "2ec4225ba9ca429ac07c1a936980715c827768fa", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/12439_3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2009 Free Software Foundation\n+// Copyright (C) 2003, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +44,7 @@ void test03()\n   bool test __attribute__((unused)) = true;\n   \n   wostringstream stream;\n-  time_t tt = time(NULL);\n+  time_t tt = time(0);\n   \n   const wchar_t* fmt = L\"%c\";\n   "}, {"sha": "00dc817b15262e10722a1d7b69e251df29c64108", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread1.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -31,7 +31,6 @@\n \n #include <list>\n #include <cstdlib>\n-#include <cstddef>\n #include <pthread.h>\n \n const int thread_cycles = 10;\n@@ -46,9 +45,9 @@ class task_queue\n public:\n   task_queue ()\n   {\n-    pthread_mutex_init (&fooLock, NULL);\n-    pthread_cond_init (&fooCond1, NULL);\n-    pthread_cond_init (&fooCond2, NULL);\n+    pthread_mutex_init (&fooLock, 0);\n+    pthread_cond_init (&fooCond1, 0);\n+    pthread_cond_init (&fooCond2, 0);\n   }\n   ~task_queue ()\n   {\n@@ -116,14 +115,14 @@ main()\n       for (int i = 0; i < thread_pairs; i++)\n \t{\n \t  tq[i] = new task_queue;\n-\t  pthread_create (&prod[i], NULL, produce, static_cast<void*> (tq[i]));\n-\t  pthread_create (&cons[i], NULL, consume, static_cast<void*> (tq[i]));\n+\t  pthread_create (&prod[i], 0, produce, static_cast<void*> (tq[i]));\n+\t  pthread_create (&cons[i], 0, consume, static_cast<void*> (tq[i]));\n \t}\n \n       for (int i = 0; i < thread_pairs; i++)\n \t{\n-\t  pthread_join (prod[i], NULL);\n-\t  pthread_join (cons[i], NULL);\n+\t  pthread_join (prod[i], 0);\n+\t  pthread_join (cons[i], 0);\n \t  delete tq[i];\n \t}\n     }"}, {"sha": "38c20ed647f3b57cbf3c9453df906352d0b45d71", "filename": "libstdc++-v3/testsuite/23_containers/map/pthread6.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -26,7 +26,6 @@\n #include <string>\n #include <map>\n #include <vector>\n-#include <cstddef>\n #include <pthread.h>\n \n const int max_thread_count = 8;\n@@ -79,10 +78,10 @@ main (void)\n #endif\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_create (&tid[i], NULL, thread_main, 0);\n+    pthread_create (&tid[i], 0, thread_main, 0);\n \n   for (int i = 0; i < max_thread_count; i++)\n-    pthread_join (tid[i], NULL);\n+    pthread_join (tid[i], 0);\n \n   return 0;\n }"}, {"sha": "1ead3485175684c183a3f5cf29ba6fd317cdb7e7", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -32,7 +32,6 @@\n #include <list>\n #include <string>\n #include <stdexcept>\n-#include <cstddef>\n #include <clocale>\n #include <cstdlib>\n #include <locale>\n@@ -176,7 +175,7 @@ namespace __gnu_test\n \tconst func_callback::test_type* tests = l.tests();\n \tfor (int i = 0; i < l.size(); ++i)\n \t  (*tests[i])();\n-\tstring postLC_ALL= setlocale(LC_ALL, NULL);\n+\tstring postLC_ALL= setlocale(LC_ALL, 0);\n \tVERIFY( preLC_ALL == postLC_ALL );\n       }\n     else"}, {"sha": "e7a068d208d32502070eb4511e3dfe43666f797b", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445877a9da79aad47e0eb895dd0270fda8a29b85/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=445877a9da79aad47e0eb895dd0270fda8a29b85", "patch": "@@ -118,7 +118,7 @@ namespace __gnu_test\n    */\n   template<class T>\n   struct output_iterator_wrapper\n-  : public std::iterator<std::output_iterator_tag, T, ptrdiff_t, T*, T&>\n+  : public std::iterator<std::output_iterator_tag, T, std::ptrdiff_t, T*, T&>\n   {\n     typedef OutputContainer<T> ContainerType;\n     T* ptr;\n@@ -179,7 +179,7 @@ namespace __gnu_test\n    */\n   template<class T>\n   class input_iterator_wrapper\n-  : public std::iterator<std::input_iterator_tag, T, ptrdiff_t, T*, T&>\n+  : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T&>\n   {\n   protected:\n     input_iterator_wrapper()\n@@ -435,7 +435,7 @@ namespace __gnu_test\n     }\n \n     random_access_iterator_wrapper&\n-    operator+=(ptrdiff_t n)\n+    operator+=(std::ptrdiff_t n)\n     {\n       if(n > 0)\n \t{\n@@ -451,25 +451,25 @@ namespace __gnu_test\n     }\n \n     random_access_iterator_wrapper&\n-    operator-=(ptrdiff_t n)\n+    operator-=(std::ptrdiff_t n)\n     { return *this += -n; }\n \n     random_access_iterator_wrapper\n-    operator-(ptrdiff_t n) const\n+    operator-(std::ptrdiff_t n) const\n     {\n       random_access_iterator_wrapper<T> tmp = *this;\n       return tmp -= n;\n     }\n \n-    ptrdiff_t\n+    std::ptrdiff_t\n     operator-(const random_access_iterator_wrapper<T>& in) const\n     {\n       ITERATOR_VERIFY(this->SharedInfo == in.SharedInfo);\n       return this->ptr - in.ptr;\n     }\n \n     T&\n-    operator[](ptrdiff_t n) const\n+    operator[](std::ptrdiff_t n) const\n     { return *(*this + n); }\n \n     bool\n@@ -500,12 +500,12 @@ namespace __gnu_test\n \n   template<typename T>\n     random_access_iterator_wrapper<T>\n-    operator+(random_access_iterator_wrapper<T> it, ptrdiff_t n)\n+    operator+(random_access_iterator_wrapper<T> it, std::ptrdiff_t n)\n     { return it += n; }\n \n   template<typename T>\n     random_access_iterator_wrapper<T>\n-    operator+(ptrdiff_t n, random_access_iterator_wrapper<T> it) \n+    operator+(std::ptrdiff_t n, random_access_iterator_wrapper<T> it) \n     { return it += n; }\n \n "}]}