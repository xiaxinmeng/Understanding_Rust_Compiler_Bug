{"sha": "5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1YzY0MzVjNmYwNTc2ZDA4ZWZjNmQxMDVlZjE1ZTZhNWE1NzFhMA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-05-06T16:59:53Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-05-06T16:59:53Z"}, "message": "re PR middle-end/39986 (decimal float constant is incorrect when cc1 is a 64-bit binary)\n\n\tPR middle-end/39986\n\t* dfp.c (encode_decimal32, decode_decimal32, encode_decimal64,\n\tdecode_decimal64, encode_decimal128, decode_decimal128): Avoid\n\t32-bit memcpy into long.\n\n\t* gcc.dg/dfp/pr39986.c: New test.\n\nFrom-SVN: r147188", "tree": {"sha": "928ac88253beb44b86c88a28f7a5efaf4bc5f574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/928ac88253beb44b86c88a28f7a5efaf4bc5f574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/comments", "author": null, "committer": null, "parents": [{"sha": "96474f366fef95a6645cb06e5b2d30a6fce77783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96474f366fef95a6645cb06e5b2d30a6fce77783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96474f366fef95a6645cb06e5b2d30a6fce77783"}], "stats": {"total": 127, "additions": 101, "deletions": 26}, "files": [{"sha": "921d498ba39fa9c07ba8acc6e42dc6e932cec703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "patch": "@@ -1,3 +1,10 @@\n+2009-05-06  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR middle-end/39986\n+\t* dfp.c (encode_decimal32, decode_decimal32, encode_decimal64,\n+\tdecode_decimal64, encode_decimal128, decode_decimal128): Avoid\n+\t32-bit memcpy into long.\n+\n 2009-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (new_reg_loc_descr): Don't ever create DW_OP_regX."}, {"sha": "5e1dbcc41eb3f30e7affd958a94dc80001a45122", "filename": "gcc/dfp.c", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "patch": "@@ -133,14 +133,16 @@ encode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decimal32 d32;\n   decContext set;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n   decimal_to_decnumber (r, &dn); \n   decimal32FromNumber (&d32, &dn, &set);\n \n-  memcpy (&buf[0], d32.bytes, sizeof (uint32_t));\n+  memcpy (&image, d32.bytes, sizeof (int32_t));\n+  buf[0] = image;\n }\n \n /* Decode an IEEE 754 decimal32 type into a real.  */\n@@ -152,11 +154,13 @@ decode_decimal32 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decimal32 d32;\n   decContext set;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n-  memcpy (&d32.bytes, &buf[0], sizeof (uint32_t));\n+  image = buf[0];\n+  memcpy (&d32.bytes, &image, sizeof (int32_t));\n \n   decimal32ToNumber (&d32, &dn);\n   decimal_from_decnumber (r, &dn, &set); \n@@ -171,6 +175,7 @@ encode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decimal64 d64;\n   decContext set;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n@@ -180,13 +185,17 @@ encode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n   if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n     {\n-      memcpy (&buf[0], &d64.bytes[0], sizeof (uint32_t));\n-      memcpy (&buf[1], &d64.bytes[4], sizeof (uint32_t));\n+      memcpy (&image, &d64.bytes[0], sizeof (int32_t));\n+      buf[0] = image;\n+      memcpy (&image, &d64.bytes[4], sizeof (int32_t));\n+      buf[1] = image;\n     }\n   else\n     {\n-      memcpy (&buf[0], &d64.bytes[4], sizeof (uint32_t));\n-      memcpy (&buf[1], &d64.bytes[0], sizeof (uint32_t));\n+      memcpy (&image, &d64.bytes[4], sizeof (int32_t));\n+      buf[0] = image;\n+      memcpy (&image, &d64.bytes[0], sizeof (int32_t));\n+      buf[1] = image;\n     }\n }\n \n@@ -199,19 +208,24 @@ decode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decimal64 d64;\n   decContext set;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n   if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n     {\n-      memcpy (&d64.bytes[0], &buf[0], sizeof (uint32_t));\n-      memcpy (&d64.bytes[4], &buf[1], sizeof (uint32_t));\n+      image = buf[0];\n+      memcpy (&d64.bytes[0], &image, sizeof (int32_t));\n+      image = buf[1];\n+      memcpy (&d64.bytes[4], &image, sizeof (int32_t));\n     }\n   else\n     {\n-      memcpy (&d64.bytes[0], &buf[1], sizeof (uint32_t));\n-      memcpy (&d64.bytes[4], &buf[0], sizeof (uint32_t));\n+      image = buf[1];\n+      memcpy (&d64.bytes[0], &image, sizeof (int32_t));\n+      image = buf[0];\n+      memcpy (&d64.bytes[4], &image, sizeof (int32_t));\n     }\n \n   decimal64ToNumber (&d64, &dn);\n@@ -227,6 +241,7 @@ encode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decContext set;\n   decimal128 d128;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n@@ -236,17 +251,25 @@ encode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n   if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n     {\n-      memcpy (&buf[0], &d128.bytes[0], sizeof (uint32_t));\n-      memcpy (&buf[1], &d128.bytes[4], sizeof (uint32_t));\n-      memcpy (&buf[2], &d128.bytes[8], sizeof (uint32_t));\n-      memcpy (&buf[3], &d128.bytes[12], sizeof (uint32_t));\n+      memcpy (&image, &d128.bytes[0], sizeof (int32_t));\n+      buf[0] = image;\n+      memcpy (&image, &d128.bytes[4], sizeof (int32_t));\n+      buf[1] = image;\n+      memcpy (&image, &d128.bytes[8], sizeof (int32_t));\n+      buf[2] = image;\n+      memcpy (&image, &d128.bytes[12], sizeof (int32_t));\n+      buf[3] = image;\n     }\n   else\n     {\n-      memcpy (&buf[0], &d128.bytes[12], sizeof (uint32_t));\n-      memcpy (&buf[1], &d128.bytes[8], sizeof (uint32_t));\n-      memcpy (&buf[2], &d128.bytes[4], sizeof (uint32_t));\n-      memcpy (&buf[3], &d128.bytes[0], sizeof (uint32_t));\n+      memcpy (&image, &d128.bytes[12], sizeof (int32_t));\n+      buf[0] = image;\n+      memcpy (&image, &d128.bytes[8], sizeof (int32_t));\n+      buf[1] = image;\n+      memcpy (&image, &d128.bytes[4], sizeof (int32_t));\n+      buf[2] = image;\n+      memcpy (&image, &d128.bytes[0], sizeof (int32_t));\n+      buf[3] = image;\n     }\n }\n \n@@ -259,23 +282,32 @@ decode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decNumber dn;\n   decimal128 d128;\n   decContext set;\n+  int32_t image;\n \n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n   if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n     {\n-      memcpy (&d128.bytes[0],  &buf[0], sizeof (uint32_t));\n-      memcpy (&d128.bytes[4],  &buf[1], sizeof (uint32_t));\n-      memcpy (&d128.bytes[8],  &buf[2], sizeof (uint32_t));\n-      memcpy (&d128.bytes[12], &buf[3], sizeof (uint32_t));\n+      image = buf[0];\n+      memcpy (&d128.bytes[0],  &image, sizeof (int32_t));\n+      image = buf[1];\n+      memcpy (&d128.bytes[4],  &image, sizeof (int32_t));\n+      image = buf[2];\n+      memcpy (&d128.bytes[8],  &image, sizeof (int32_t));\n+      image = buf[3];\n+      memcpy (&d128.bytes[12], &image, sizeof (int32_t));\n     }\n   else\n     {\n-      memcpy (&d128.bytes[0],  &buf[3], sizeof (uint32_t));\n-      memcpy (&d128.bytes[4],  &buf[2], sizeof (uint32_t));\n-      memcpy (&d128.bytes[8],  &buf[1], sizeof (uint32_t));\n-      memcpy (&d128.bytes[12], &buf[0], sizeof (uint32_t));\n+      image = buf[3];\n+      memcpy (&d128.bytes[0],  &image, sizeof (int32_t));\n+      image = buf[2];\n+      memcpy (&d128.bytes[4],  &image, sizeof (int32_t));\n+      image = buf[1];\n+      memcpy (&d128.bytes[8],  &image, sizeof (int32_t));\n+      image = buf[0];\n+      memcpy (&d128.bytes[12], &image, sizeof (int32_t));\n     }\n \n   decimal128ToNumber (&d128, &dn);"}, {"sha": "f639c581acd87fdd2d48d0427b7ee9140608c14d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "patch": "@@ -1,3 +1,8 @@\n+2009-05-06  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR middle-end/39986\n+\t* gcc.dg/dfp/pr39986.c: New test.\n+\n 2009-05-06  Michael Matz  <matz@suse.de>\n \n \t* gfortran.dg/pr40021.f: New test."}, {"sha": "53bda3c824aebe9ccc2b0321da06b0822baa843e", "filename": "gcc/testsuite/gcc.dg/dfp/pr39986.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5c6435c6f0576d08efc6d105ef15e6a5a571a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c?ref=5a5c6435c6f0576d08efc6d105ef15e6a5a571a0", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Check that the compiler generates the correct decimal float constants.  */\n+\n+_Decimal32 a = 100.223df;\n+_Decimal32 b = -2.3df;\n+_Decimal64 c = 3.4e-4dd;\n+_Decimal64 d = -4.500dd;\n+_Decimal128 e = 5678901234567.89e+200dl;\n+_Decimal128 f = -678901.234e-6dl;\n+\n+/* The first value is DPD, the second is BID.  The order differs depending\n+   on whether the target is big-endian or little-endian.  */\n+\n+/* { dg-final { scan-assembler \".long\\t(572653859|822183807)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \".long\\t(-1572863965|-1308622825)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \".long\\t(52|34)\\n\" } } */\n+/* { dg-final { scan-assembler \".long\\t(572784640|824180736)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \".long\\t(4736|4500)\\n\" } } */\n+/* { dg-final { scan-assembler \".long\\t(-1574174720|-1319108608)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \".long\\t(-1975952433|957645077)\\n\" } } */\n+/* { dg-final { scan-assembler \".long\\t(190215|132222)\\n\" } } */\n+/* { dg-final { scan-assembler \".long\\t(574193664|835452928)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \".long\\t(931280180|678901234)\\n\" } } */\n+/* { dg-final { scan-assembler \".long\\t(-1576681472|-1339162624)\\n\" } } */"}]}