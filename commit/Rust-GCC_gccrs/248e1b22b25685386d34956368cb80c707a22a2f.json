{"sha": "248e1b22b25685386d34956368cb80c707a22a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4ZTFiMjJiMjU2ODUzODZkMzQ5NTYzNjhjYjgwYzcwN2EyMmEyZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2008-12-10T01:23:28Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2008-12-10T01:23:28Z"}, "message": "re PR c++/37971 (Rejects default  argument that is a template via access failure)\n\n\tPR c++/37971\n\t* class.c (resolve_address_of_overloaded_function): Check\n\taccessibility of member functions unless FLAGS indicates\n\totherwise.\n\t* call.c (standard_conversion): Adjust flags passed to\n\tinstantiate_type.\n\t(convert_default_arg): Do not perform access checks.\n\t* cp-tree.h (tsubst_flags_t): Add tf_no_access_control.\n\n\tPR c++/37971\n\t* g++.dg/overload/defarg2.C: New test.\n\t* g++.dg/overload/defarg3.C: Likewise.\n\nFrom-SVN: r142628", "tree": {"sha": "97ac3a7e5ee833b3c762010f7695178c02fc047a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ac3a7e5ee833b3c762010f7695178c02fc047a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248e1b22b25685386d34956368cb80c707a22a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248e1b22b25685386d34956368cb80c707a22a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248e1b22b25685386d34956368cb80c707a22a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248e1b22b25685386d34956368cb80c707a22a2f/comments", "author": null, "committer": null, "parents": [{"sha": "3725c2e30240d59b7dfe47da43e2eb5d566b9109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3725c2e30240d59b7dfe47da43e2eb5d566b9109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3725c2e30240d59b7dfe47da43e2eb5d566b9109"}], "stats": {"total": 129, "additions": 99, "deletions": 30}, "files": [{"sha": "9c27cd04b8542c0bbbbe35c9f4e2d928ca4fc7f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -1,3 +1,14 @@\n+2008-12-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/37971\n+\t* class.c (resolve_address_of_overloaded_function): Check\n+\taccessibility of member functions unless FLAGS indicates\n+\totherwise.\n+\t* call.c (standard_conversion): Adjust flags passed to\n+\tinstantiate_type.\n+\t(convert_default_arg): Do not perform access checks.\n+\t* cp-tree.h (tsubst_flags_t): Add tf_no_access_control.\n+\n 2008-12-08  Steve Ellcey  <sje@cup.hp.com>\n \n \t* decl2.c (mark_used): Remove assemble_external call."}, {"sha": "952e151f94b9fdb84046105a6fa7790e50f802ed", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -706,7 +706,10 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   if ((TYPE_PTRFN_P (to) || TYPE_PTRMEMFUNC_P (to))\n       && expr && type_unknown_p (expr))\n     {\n-      expr = instantiate_type (to, expr, tf_conv);\n+      tsubst_flags_t tflags = tf_conv;\n+      if (!(flags & LOOKUP_PROTECT))\n+\ttflags |= tf_no_access_control;\n+      expr = instantiate_type (to, expr, tflags);\n       if (expr == error_mark_node)\n \treturn NULL;\n       from = TREE_TYPE (expr);\n@@ -1360,9 +1363,8 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n \n /* Returns the implicit conversion sequence (see [over.ics]) from type\n    FROM to type TO.  The optional expression EXPR may affect the\n-   conversion.  FLAGS are the usual overloading flags.  Only\n-   LOOKUP_NO_CONVERSION is significant.  If C_CAST_P is true, this\n-   conversion is coming from a C-style cast.  */\n+   conversion.  FLAGS are the usual overloading flags.  If C_CAST_P is\n+   true, this conversion is coming from a C-style cast.  */\n \n static conversion *\n implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n@@ -4954,8 +4956,17 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n   if (fn && DECL_TEMPLATE_INFO (fn))\n     arg = tsubst_default_argument (fn, type, arg);\n \n-  arg = break_out_target_exprs (arg);\n+  /* Due to:\n+\n+       [dcl.fct.default]\n \n+       The names in the expression are bound, and the semantic\n+       constraints are checked, at the point where the default\n+       expressions appears.\n+\n+     we must not perform access checks here.  */\n+  push_deferring_access_checks (dk_no_check);\n+  arg = break_out_target_exprs (arg);\n   if (TREE_CODE (arg) == CONSTRUCTOR)\n     {\n       arg = digest_init (type, arg);\n@@ -4978,6 +4989,7 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum)\n                                         tf_warning_or_error);\n       arg = convert_for_arg_passing (type, arg);\n     }\n+  pop_deferring_access_checks();\n \n   VEC_pop (tree, default_arg_context);\n "}, {"sha": "805e51322e834064e5465c09417c5e95ae9abeda", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -5923,9 +5923,13 @@ pop_lang_context (void)\n    control of FLAGS.  Permit pointers to member function if FLAGS\n    permits.  If TEMPLATE_ONLY, the name of the overloaded function was\n    a template-id, and EXPLICIT_TARGS are the explicitly provided\n-   template arguments.  If OVERLOAD is for one or more member\n-   functions, then ACCESS_PATH is the base path used to reference\n-   those member functions.  */\n+   template arguments.  \n+\n+   If OVERLOAD is for one or more member functions, then ACCESS_PATH\n+   is the base path used to reference those member functions.  If\n+   TF_NO_ACCESS_CONTROL is not set in FLAGS, and the address is\n+   resolved to a member function, access checks will be performed and\n+   errors issued if appropriate.  */\n \n static tree\n resolve_address_of_overloaded_function (tree target_type,\n@@ -6190,14 +6194,16 @@ resolve_address_of_overloaded_function (tree target_type,\n \treturn error_mark_node;\n       \n       mark_used (fn);\n-      /* We could not check access when this expression was originally\n-\t created since we did not know at that time to which function\n-\t the expression referred.  */\n-      if (DECL_FUNCTION_MEMBER_P (fn))\n-\t{\n-\t  gcc_assert (access_path);\n-\t  perform_or_defer_access_check (access_path, fn, fn);\n-\t}\n+    }\n+\n+  /* We could not check access to member functions when this\n+     expression was originally created since we did not know at that\n+     time to which function the expression referred.  */\n+  if (!(flags & tf_no_access_control) \n+      && DECL_FUNCTION_MEMBER_P (fn))\n+    {\n+      gcc_assert (access_path);\n+      perform_or_defer_access_check (access_path, fn, fn);\n     }\n \n   if (TYPE_PTRFN_P (target_type) || TYPE_PTRMEMFUNC_P (target_type))"}, {"sha": "bf22eb4d85f1bca2b5c5a3a1f1634e4cc1c90771", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -3560,20 +3560,22 @@ typedef enum linkage_kind {\n \n /* Bitmask flags to control type substitution.  */\n typedef enum tsubst_flags_t {\n-  tf_none = 0,\t\t\t/* nothing special */\n-  tf_error = 1 << 0,\t\t/* give error messages  */\n-  tf_warning = 1 << 1,\t\t/* give warnings too  */\n-  tf_ignore_bad_quals = 1 << 2,\t/* ignore bad cvr qualifiers */\n-  tf_keep_type_decl = 1 << 3,\t/* retain typedef type decls\n-\t\t\t\t   (make_typename_type use) */\n-  tf_ptrmem_ok = 1 << 4,\t/* pointers to member ok (internal\n-\t\t\t\t   instantiate_type use) */\n-  tf_user = 1 << 5,\t\t/* found template must be a user template\n-\t\t\t\t   (lookup_template_class use) */\n-  tf_conv = 1 << 6,\t\t/* We are determining what kind of\n-\t\t\t\t   conversion might be permissible,\n-\t\t\t\t   not actually performing the\n-\t\t\t\t   conversion.  */\n+  tf_none = 0,\t\t\t /* nothing special */\n+  tf_error = 1 << 0,\t\t /* give error messages  */\n+  tf_warning = 1 << 1,\t \t /* give warnings too  */\n+  tf_ignore_bad_quals = 1 << 2,\t /* ignore bad cvr qualifiers */\n+  tf_keep_type_decl = 1 << 3,\t /* retain typedef type decls\n+\t\t\t\t    (make_typename_type use) */\n+  tf_ptrmem_ok = 1 << 4,\t /* pointers to member ok (internal\n+\t\t\t\t    instantiate_type use) */\n+  tf_user = 1 << 5,\t\t /* found template must be a user template\n+\t\t\t\t    (lookup_template_class use) */\n+  tf_conv = 1 << 6,\t\t /* We are determining what kind of\n+\t\t\t\t    conversion might be permissible,\n+\t\t\t\t    not actually performing the\n+\t\t\t\t    conversion.  */\n+  tf_no_access_control = 1 << 7, /* Do not perform access checks, even\n+\t\t\t\t    when issuing other errors.   */\n   /* Convenient substitution flags combinations.  */\n   tf_warning_or_error = tf_warning | tf_error\n } tsubst_flags_t;"}, {"sha": "3a14097d584b2fd9a3be95fe5ea6bfa260ea5678", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -1,3 +1,9 @@\n+2008-12-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/37971\n+\t* g++.dg/overload/defarg2.C: New test.\n+\t* g++.dg/overload/defarg3.C: Likewise.\n+\n 2008-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38454"}, {"sha": "6b1a423dd0ab2761c6b8903ff4fc5a07662d9d60", "filename": "gcc/testsuite/g++.dg/overload/defarg2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg2.C?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/37391\n+// { dg-do compile }\n+\n+class C {\n+private:\n+  static int f(int);\n+  static int f(char);\n+\n+public:  \n+  static void g(int (*)(int) = f);\n+};\n+\n+void h() {\n+  /* Although C::f is inaccessible here, it is accessible in the\n+     context of C::g, so there is no error.  */\n+  C::g();\n+}"}, {"sha": "83ee111f15e514196ca47dea430efb1eefa527f7", "filename": "gcc/testsuite/g++.dg/overload/defarg3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e1b22b25685386d34956368cb80c707a22a2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg3.C?ref=248e1b22b25685386d34956368cb80c707a22a2f", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/37391\n+// { dg-do compile }\n+\n+class C {\n+private:\n+  static int f(int); // { dg-error \"private\" }\n+  static int f(char);\n+};\n+\n+class D {\n+public:\n+  /* C::f is inaccessible, so this is an error, even if this function\n+     is never called.  */\n+  static void g(int (*)(int) = C::f); // { dg-error \"context\" }\n+};"}]}