{"sha": "ef9462581076218d2370fabb09c39d2c83814b9a", "node_id": "C_kwDOANBUbNoAKGVmOTQ2MjU4MTA3NjIxOGQyMzcwZmFiYjA5YzM5ZDJjODM4MTRiOWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T18:21:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T18:21:30Z"}, "message": "c++: Fix ICEs with OBJ_TYPE_REF pretty printing [PR101597]\n\nThe following testcase ICEs, because middle-end uses the C++ FE pretty\nprinting code through langhooks in the diagnostics.\nThe FE expects OBJ_TYPE_REF_OBJECT's type to be useful (pointer to the\nclass type it is called on), but in the middle-end conversions between\npointer types are useless, so the actual type can be some random\nunrelated pointer type (in the testcase void * pointer).  The pretty\nprinting code then ICEs on it.\n\nThe following patch fixes that by sticking the original\nOBJ_TYPE_REF_OBJECT's also as type of OBJ_TYPE_REF_TOKEN operand.\nThat one must be an INTEGER_CST, all the current uses of\nOBJ_TYPE_REF_TOKEN just use tree_to_uhwi or tree_to_shwi on it,\nand because it is constant, there is no risk of the middle-end propagating\ninto it some other pointer type.  So, approach similar to how MEM_REF\ntreats its second operand or a couple of internal functions (e.g.\nIFN_VA_ARG) some of its parameters.\n\n2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101597\ngcc/\n\t* tree.def (OBJ_TYPE_REF): Document type of OBJ_TYPE_REF_TOKEN.\ngcc/cp/\n\t* class.c (build_vfn_ref): Build OBJ_TYPE_REF with INTEGER_CST\n\tOBJ_TYPE_REF_TOKEN with type equal to OBJ_TYPE_REF_OBJECT type.\n\t* error.c (resolve_virtual_fun_from_obj_type_ref): Use type of\n\tOBJ_TYPE_REF_TOKEN rather than type of OBJ_TYPE_REF_OBJECT as\n\tobj_type.\ngcc/objc/\n\t* objc-act.c (objc_rewrite_function_call): Build OBJ_TYPE_REF\n\twith INTEGER_CST OBJ_TYPE_REF_TOKEN with type equal to\n\tOBJ_TYPE_REF_OBJECT type.\n\t* objc-next-runtime-abi-01.c (build_objc_method_call): Likewise.\n\t* objc-gnu-runtime-abi-01.c (build_objc_method_call): Likewise.\n\t* objc-next-runtime-abi-02.c (build_v2_objc_method_fixup_call,\n\tbuild_v2_build_objc_method_call): Likewise.\ngcc/testsuite/\n\t* g++.dg/opt/pr101597.C: New test.", "tree": {"sha": "107dbc2569a7f2c4b734fe75d6efbbde98c8b078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107dbc2569a7f2c4b734fe75d6efbbde98c8b078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef9462581076218d2370fabb09c39d2c83814b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9462581076218d2370fabb09c39d2c83814b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9462581076218d2370fabb09c39d2c83814b9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9462581076218d2370fabb09c39d2c83814b9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20e4a5e573e76f4379b353cc736215a5f10cdb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e4a5e573e76f4379b353cc736215a5f10cdb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e4a5e573e76f4379b353cc736215a5f10cdb84"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "e5cc6f10e3b05721e1b1b8705a9dc70e103a2c60", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -778,7 +778,8 @@ build_vfn_ref (tree instance_ptr, tree idx)\n \t\t   cp_build_addr_expr (aref, tf_warning_or_error));\n \n   /* Remember this as a method reference, for later devirtualization.  */\n-  aref = build3 (OBJ_TYPE_REF, TREE_TYPE (aref), aref, instance_ptr, idx);\n+  aref = build3 (OBJ_TYPE_REF, TREE_TYPE (aref), aref, instance_ptr,\n+\t\t fold_convert (TREE_TYPE (instance_ptr), idx));\n \n   return aref;\n }"}, {"sha": "8a3b7b5537ca6d3ed9a2d627663042649d1c4e52", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -2149,7 +2149,7 @@ dump_expr_init_vec (cxx_pretty_printer *pp, vec<constructor_elt, va_gc> *v,\n static tree\n resolve_virtual_fun_from_obj_type_ref (tree ref)\n {\n-  tree obj_type = TREE_TYPE (OBJ_TYPE_REF_OBJECT (ref));\n+  tree obj_type = TREE_TYPE (OBJ_TYPE_REF_TOKEN (ref));\n   HOST_WIDE_INT index = tree_to_uhwi (OBJ_TYPE_REF_TOKEN (ref));\n   tree fun = BINFO_VIRTUALS (TYPE_BINFO (TREE_TYPE (obj_type)));\n   while (index)"}, {"sha": "4d95bc6488577aaded12d787f1b4de29a6c01b33", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -9644,11 +9644,9 @@ objc_rewrite_function_call (tree function, tree first_param)\n       && TREE_CODE (TREE_OPERAND (function, 0)) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (TREE_OPERAND (function, 0), 0))\n \t == FUNCTION_DECL)\n-    {\n-      function = build3 (OBJ_TYPE_REF, TREE_TYPE (function),\n-\t\t\t TREE_OPERAND (function, 0),\n-\t\t\t first_param, size_zero_node);\n-    }\n+    function = build3 (OBJ_TYPE_REF, TREE_TYPE (function),\n+\t\t       TREE_OPERAND (function, 0), first_param,\n+\t\t       build_int_cst (TREE_TYPE (first_param), 0));\n \n   return function;\n }"}, {"sha": "8aa2044f118aede98e3b94ef796c06d49fe4e3aa", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -725,7 +725,8 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n       parms->quick_push (TREE_VALUE (method_params));\n \n   /* Build an obj_type_ref, with the correct cast for the method call.  */\n-  t = build3 (OBJ_TYPE_REF, sender_cast, method, lookup_object, size_zero_node);\n+  t = build3 (OBJ_TYPE_REF, sender_cast, method, lookup_object,\n+\t      build_int_cst (TREE_TYPE (lookup_object), 0));\n   t = build_function_call_vec (loc, vNULL, t, parms, NULL);\n   vec_free (parms);\n   return t;"}, {"sha": "a4287e4cee5137280e0b210f16ea199ff7dd0f56", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -883,7 +883,7 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n \n   /* Build an obj_type_ref, with the correct cast for the method call.  */\n   t = build3 (OBJ_TYPE_REF, sender_cast, method,\n-\t\t\t    lookup_object, size_zero_node);\n+\t      lookup_object, build_int_cst (TREE_TYPE (lookup_object), 0));\n   t = build_function_call_vec (loc, vNULL, t, parms, NULL);\n   vec_free (parms);\n   return t;"}, {"sha": "e50ca6e89f59bf0464eca95ac0b8afedd8c45b4a", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -1663,7 +1663,8 @@ build_v2_objc_method_fixup_call (int super_flag, tree method_prototype,\n   method_params = tree_cons (NULL_TREE, lookup_object,\n                              tree_cons (NULL_TREE, selector,\n                                         method_params));\n-  t = build3 (OBJ_TYPE_REF, sender_cast, sender, lookup_object, size_zero_node);\n+  t = build3 (OBJ_TYPE_REF, sender_cast, sender, lookup_object,\n+\t      build_int_cst (TREE_TYPE (lookup_object), 0));\n   ret_val =  build_function_call (input_location, t, method_params);\n   if (check_for_nil)\n     {\n@@ -1772,7 +1773,7 @@ build_v2_build_objc_method_call (int super, tree method_prototype,\n \n   /* Build an obj_type_ref, with the correct cast for the method call.  */\n   t = build3 (OBJ_TYPE_REF, sender_cast, method,\n-\t\t\t    lookup_object, size_zero_node);\n+\t      lookup_object, build_int_cst (TREE_TYPE (lookup_object), 0));\n   tree ret_val = build_function_call_vec (loc, vNULL, t, parms, NULL);\n   vec_free (parms);\n   if (check_for_nil)"}, {"sha": "3b7b34ffe32cc266d27411fe14aea76755febdc3", "filename": "gcc/testsuite/g++.dg/opt/pr101597.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr101597.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr101597.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr101597.C?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/101597\n+// { dg-do compile }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct S { virtual void *foo (size_t) __attribute__((alloc_size (2))); };\n+\n+int\n+foo (void *p)\n+{\n+  char *q = static_cast<char *> (static_cast<S *> (p)->foo (32));\n+  return q[64];\t\t// { dg-warning \"array subscript 64 is outside array bounds of\" }\n+}"}, {"sha": "36b91f0973d8ce67763fd0b721d20fca5544d3ea", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9462581076218d2370fabb09c39d2c83814b9a/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=ef9462581076218d2370fabb09c39d2c83814b9a", "patch": "@@ -470,7 +470,11 @@ DEFTREECODE (INDIRECT_REF, \"indirect_ref\", tcc_reference, 1)\n    OBJ_TYPE_REF_OBJECT: Is the object on whose behalf the lookup is\n    being performed.  Through this the optimizers may be able to statically\n    determine the dynamic type of the object.\n-   OBJ_TYPE_REF_TOKEN: An integer index to the virtual method table.  */\n+   OBJ_TYPE_REF_TOKEN: An integer index to the virtual method table.\n+   The integer index should have as type the original type of\n+   OBJ_TYPE_REF_OBJECT; as pointer type conversions are useless in GIMPLE,\n+   the type of OBJ_TYPE_REF_OBJECT can change to an unrelated pointer\n+   type during optimizations.  */\n DEFTREECODE (OBJ_TYPE_REF, \"obj_type_ref\", tcc_expression, 3)\n \n /* Used to represent the brace-enclosed initializers for a structure or an"}]}