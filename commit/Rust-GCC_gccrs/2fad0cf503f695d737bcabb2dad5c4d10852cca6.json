{"sha": "2fad0cf503f695d737bcabb2dad5c4d10852cca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZhZDBjZjUwM2Y2OTVkNzM3YmNhYmIyZGFkNWM0ZDEwODUyY2NhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-20T19:11:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-20T19:11:34Z"}, "message": "re PR target/84406 ([MSP430] ICE on valid code in find_widening_optab_handler_and_mode, at optabs-query.c:476)\n\n\tPR middle-end/84406\n\t* optabs-query.c (find_widening_optab_handler_and_mode): If from_mode\n\tis a scalar_int_mode, assert that to_mode is a scalar_int_mode with\n\tgreater precision.  If to_mode is a MODE_PARTIAL_INT, stop the\n\tsearch at the associated MODE_INT.\n\nFrom-SVN: r257858", "tree": {"sha": "fa807849e74c330eb4c83653fede33ed0db07e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa807849e74c330eb4c83653fede33ed0db07e80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fad0cf503f695d737bcabb2dad5c4d10852cca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fad0cf503f695d737bcabb2dad5c4d10852cca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fad0cf503f695d737bcabb2dad5c4d10852cca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fad0cf503f695d737bcabb2dad5c4d10852cca6/comments", "author": null, "committer": null, "parents": [{"sha": "e506dc87a0d7d0f55a6b727885e170dcc2948014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e506dc87a0d7d0f55a6b727885e170dcc2948014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e506dc87a0d7d0f55a6b727885e170dcc2948014"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "b2622df859a2bc02cfe32e3df8427920035707be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fad0cf503f695d737bcabb2dad5c4d10852cca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fad0cf503f695d737bcabb2dad5c4d10852cca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fad0cf503f695d737bcabb2dad5c4d10852cca6", "patch": "@@ -1,3 +1,11 @@\n+2018-02-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR middle-end/84406\n+\t* optabs-query.c (find_widening_optab_handler_and_mode): If from_mode\n+\tis a scalar_int_mode, assert that to_mode is a scalar_int_mode with\n+\tgreater precision.  If to_mode is a MODE_PARTIAL_INT, stop the\n+\tsearch at the associated MODE_INT.\n+\n 2018-02-20  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/82123"}, {"sha": "5e5d620d4377d5fd89969468612c375edac4500e", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fad0cf503f695d737bcabb2dad5c4d10852cca6/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fad0cf503f695d737bcabb2dad5c4d10852cca6/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=2fad0cf503f695d737bcabb2dad5c4d10852cca6", "patch": "@@ -473,9 +473,23 @@ find_widening_optab_handler_and_mode (optab op, machine_mode to_mode,\n \t\t\t\t      machine_mode from_mode,\n \t\t\t\t      machine_mode *found_mode)\n {\n-  gcc_checking_assert (GET_MODE_CLASS (from_mode) == GET_MODE_CLASS (to_mode));\n-  gcc_checking_assert (from_mode < to_mode);\n-  FOR_EACH_MODE (from_mode, from_mode, to_mode)\n+  machine_mode limit_mode = to_mode;\n+  if (is_a <scalar_int_mode> (from_mode))\n+    {\n+      gcc_checking_assert (is_a <scalar_int_mode> (to_mode)\n+\t\t\t   && known_lt (GET_MODE_PRECISION (from_mode),\n+\t\t\t\t\tGET_MODE_PRECISION (to_mode)));\n+      /* The modes after FROM_MODE are all MODE_INT, so the only\n+\t MODE_PARTIAL_INT mode we consider is FROM_MODE itself.\n+\t If LIMIT_MODE is MODE_PARTIAL_INT, stop at the containing\n+\t MODE_INT.  */\n+      if (GET_MODE_CLASS (limit_mode) == MODE_PARTIAL_INT)\n+\tlimit_mode = GET_MODE_WIDER_MODE (limit_mode).require ();\n+    }\n+  else\n+    gcc_checking_assert (GET_MODE_CLASS (from_mode) == GET_MODE_CLASS (to_mode)\n+\t\t\t && from_mode < to_mode);\n+  FOR_EACH_MODE (from_mode, from_mode, limit_mode)\n     {\n       enum insn_code handler = convert_optab_handler (op, to_mode, from_mode);\n "}]}