{"sha": "30bf947649e7381402637d1434d6b1ef22d031f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiZjk0NzY0OWU3MzgxNDAyNjM3ZDE0MzRkNmIxZWYyMmQwMzFmMQ==", "commit": {"author": {"name": "Cl\u00e9ment Chigot", "email": "clement.chigot@atos.net", "date": "2020-09-16T12:03:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-09-22T17:24:07Z"}, "message": "compiler: call runtime.eqtype for non-interface type switch on aix\n\nAll type switch clauses must call runtime.eqtype if the linker isn't\nable to merge type descriptors pointers. Previously, only interface-type\nclauses were doing it.\n\nUpdates golang/go#39276\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/255202", "tree": {"sha": "2403b6e131a5985677735a0797fd12782a1bdc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2403b6e131a5985677735a0797fd12782a1bdc14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30bf947649e7381402637d1434d6b1ef22d031f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bf947649e7381402637d1434d6b1ef22d031f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30bf947649e7381402637d1434d6b1ef22d031f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bf947649e7381402637d1434d6b1ef22d031f1/comments", "author": null, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74c87f85f510248874cb90ad0b0527b015034b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74c87f85f510248874cb90ad0b0527b015034b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74c87f85f510248874cb90ad0b0527b015034b9"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "a8ba5a35e44df5ed76d81488258a04a89d2e3831", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=30bf947649e7381402637d1434d6b1ef22d031f1", "patch": "@@ -1,4 +1,4 @@\n-a59167c29d6ad2ddf533b3a12b365f72df0e1476\n+b24062f0b2e8f6173731d5654afe0addf857270e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ad898070f6e58d4533b90368eade0517a126db4f", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=30bf947649e7381402637d1434d6b1ef22d031f1", "patch": "@@ -4627,7 +4627,8 @@ Type_case_clauses::Type_case_clause::traverse(Traverse* traverse)\n // statements.\n \n void\n-Type_case_clauses::Type_case_clause::lower(Type* switch_val_type,\n+Type_case_clauses::Type_case_clause::lower(Gogo* gogo,\n+\t\t\t\t\t   Type* switch_val_type,\n \t\t\t\t\t   Block* b,\n \t\t\t\t\t   Temporary_statement* descriptor_temp,\n \t\t\t\t\t   Unnamed_label* break_label,\n@@ -4666,9 +4667,16 @@ Type_case_clauses::Type_case_clause::lower(Type* switch_val_type,\n \t\t\t\t       Expression::make_nil(loc),\n \t\t\t\t       loc);\n       else if (type->interface_type() == NULL)\n-        cond = Expression::make_binary(OPERATOR_EQEQ, ref,\n-                                       Expression::make_type_descriptor(type, loc),\n-                                       loc);\n+\t{\n+\t  if (!gogo->need_eqtype())\n+\t    cond = Expression::make_binary(OPERATOR_EQEQ, ref,\n+\t\t\t\t           Expression::make_type_descriptor(type, loc),\n+\t\t\t\t           loc);\n+\t  else\n+\t    cond = Runtime::make_call(Runtime::EQTYPE, loc, 2,\n+\t\t\t\t      Expression::make_type_descriptor(type, loc),\n+\t\t\t\t      ref);\n+\t}\n       else\n \tcond = Runtime::make_call(Runtime::IFACET2IP, loc, 2,\n \t\t\t\t  Expression::make_type_descriptor(type, loc),\n@@ -4826,7 +4834,8 @@ Type_case_clauses::check_duplicates() const\n // BREAK_LABEL is the label at the end of the type switch.\n \n void\n-Type_case_clauses::lower(Type* switch_val_type, Block* b,\n+Type_case_clauses::lower(Gogo* gogo, Type* switch_val_type,\n+\t\t\t Block* b,\n \t\t\t Temporary_statement* descriptor_temp,\n \t\t\t Unnamed_label* break_label) const\n {\n@@ -4838,7 +4847,7 @@ Type_case_clauses::lower(Type* switch_val_type, Block* b,\n        ++p)\n     {\n       if (!p->is_default())\n-\tp->lower(switch_val_type, b, descriptor_temp, break_label,\n+\tp->lower(gogo, switch_val_type, b, descriptor_temp, break_label,\n \t\t &stmts_label);\n       else\n \t{\n@@ -4850,7 +4859,7 @@ Type_case_clauses::lower(Type* switch_val_type, Block* b,\n   go_assert(stmts_label == NULL);\n \n   if (default_case != NULL)\n-    default_case->lower(switch_val_type, b, descriptor_temp, break_label,\n+    default_case->lower(gogo, switch_val_type, b, descriptor_temp, break_label,\n \t\t\tNULL);\n }\n \n@@ -4905,7 +4914,7 @@ Type_switch_statement::do_traverse(Traverse* traverse)\n // equality testing.\n \n Statement*\n-Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n+Type_switch_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n \t\t\t\tStatement_inserter*)\n {\n   const Location loc = this->location();\n@@ -4943,7 +4952,7 @@ Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   b->add_statement(s);\n \n   if (this->clauses_ != NULL)\n-    this->clauses_->lower(val_type, b, descriptor_temp, this->break_label());\n+    this->clauses_->lower(gogo, val_type, b, descriptor_temp, this->break_label());\n \n   s = Statement::make_unnamed_label_statement(this->break_label_);\n   b->add_statement(s);"}, {"sha": "47092b4912a394d0c04ce61b23ac360e18510902", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30bf947649e7381402637d1434d6b1ef22d031f1/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=30bf947649e7381402637d1434d6b1ef22d031f1", "patch": "@@ -2089,7 +2089,7 @@ class Type_case_clauses\n \n   // Lower to if and goto statements.\n   void\n-  lower(Type*, Block*, Temporary_statement* descriptor_temp,\n+  lower(Gogo*, Type*, Block*, Temporary_statement* descriptor_temp,\n \tUnnamed_label* break_label) const;\n \n   // Return true if these clauses may fall through to the statements\n@@ -2138,7 +2138,7 @@ class Type_case_clauses\n \n     // Lower to if and goto statements.\n     void\n-    lower(Type*, Block*, Temporary_statement* descriptor_temp,\n+    lower(Gogo*, Type*, Block*, Temporary_statement* descriptor_temp,\n \t  Unnamed_label* break_label, Unnamed_label** stmts_label) const;\n \n     // Return true if this clause may fall through to execute the"}]}