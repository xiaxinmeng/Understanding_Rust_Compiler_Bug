{"sha": "1e8eb102200902e12c1b00e867e338be0a92c292", "node_id": "C_kwDOANBUbNoAKDFlOGViMTAyMjAwOTAyZTEyYzFiMDBlODY3ZTMzOGJlMGE5MmMyOTI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-27T13:50:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:31Z"}, "message": "gccrs: dump: Emit visibility when dumping items\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::emit_visibility): New function.\n\t(Dump::visit): Call into `emit_visibility`.\n\t(Dump::format_function_common): Likewise.\n\t* ast/rust-ast-dump.h: Declare `emit_visibility`.", "tree": {"sha": "469ee65281fe32e659ebd04cf6e3050c8ec8ded2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/469ee65281fe32e659ebd04cf6e3050c8ec8ded2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e8eb102200902e12c1b00e867e338be0a92c292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8eb102200902e12c1b00e867e338be0a92c292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8eb102200902e12c1b00e867e338be0a92c292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8eb102200902e12c1b00e867e338be0a92c292/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7080854461891d61bb99cb5e69cc5270409c6d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7080854461891d61bb99cb5e69cc5270409c6d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7080854461891d61bb99cb5e69cc5270409c6d71"}], "stats": {"total": 159, "additions": 123, "deletions": 36}, "files": [{"sha": "3d1b42d70e334e332060f5a8f69553fcfc90ba58", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 107, "deletions": 35, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8eb102200902e12c1b00e867e338be0a92c292/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8eb102200902e12c1b00e867e338be0a92c292/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=1e8eb102200902e12c1b00e867e338be0a92c292", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n \n // This file is part of GCC.\n \n@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-dump.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n namespace AST {\n@@ -51,7 +52,7 @@ Dump::go (AST::Crate &crate)\n     {\n       stream << indentation;\n       item->accept_vis (*this);\n-      stream << \"\\n\";\n+      stream << '\\n';\n     }\n }\n \n@@ -72,8 +73,7 @@ Dump::format_function_param (FunctionParam &param)\n void\n Dump::emit_attrib (const Attribute &attrib)\n {\n-  stream << \"#\";\n-  stream << \"[\";\n+  stream << \"#[\";\n \n   for (size_t i = 0; i < attrib.get_path ().get_segments ().size (); i++)\n     {\n@@ -108,6 +108,38 @@ Dump::emit_attrib (const Attribute &attrib)\n   stream << \"]\";\n }\n \n+void\n+Dump::emit_visibility (const Visibility &vis)\n+{\n+  switch (vis.get_vis_type ())\n+    {\n+    case Visibility::PUB:\n+      stream << \"pub \";\n+      break;\n+    case Visibility::PUB_CRATE:\n+      stream << \"pub(crate) \";\n+      break;\n+    case Visibility::PUB_SELF:\n+      stream << \"pub(self) \";\n+      break;\n+    case Visibility::PUB_SUPER:\n+      stream << \"pub(super) \";\n+      break;\n+    case Visibility::PUB_IN_PATH:\n+      stream << \"pub(in \" << vis.get_path ().as_string () << \") \";\n+      break;\n+    case Visibility::PRIV:\n+      break;\n+    }\n+}\n+\n+std::ostream &\n+Dump::emit_indented_string (const std::string &value,\n+\t\t\t    const std::string &comment)\n+{\n+  return stream << indentation << value << comment;\n+}\n+\n void\n Dump::visit (Token &tok)\n {}\n@@ -141,7 +173,9 @@ Dump::visit (ConstGenericParam &lifetime_param)\n // rust-path.h\n void\n Dump::visit (PathInExpression &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (TypePathSegment &segment)\n@@ -163,7 +197,9 @@ Dump::visit (TypePath &path)\n \n void\n Dump::visit (QualifiedPathInExpression &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (QualifiedPathInType &path)\n@@ -207,53 +243,52 @@ Dump::visit (NegationExpr &expr)\n void\n Dump::visit (ArithmeticOrLogicalExpr &expr)\n {\n-  expr.get_left_expr ()->accept_vis (*this);\n-  stream << \" \";\n-\n+  auto op = \"\";\n   switch (expr.get_expr_type ())\n     {\n     case ArithmeticOrLogicalOperator::ADD:\n-      stream << \"+\";\n+      op = \"+\";\n       break;\n \n     case ArithmeticOrLogicalOperator::SUBTRACT:\n-      stream << \"-\";\n+      op = \"-\";\n       break;\n \n     case ArithmeticOrLogicalOperator::MULTIPLY:\n-      stream << \"*\";\n+      op = \"*\";\n       break;\n \n     case ArithmeticOrLogicalOperator::DIVIDE:\n-      stream << \"/\";\n+      op = \"/\";\n       break;\n \n     case ArithmeticOrLogicalOperator::MODULUS:\n-      stream << \"%\";\n+      op = \"%\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_AND:\n-      stream << \"&\";\n+      op = \"&\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_OR:\n-      stream << \"|\";\n+      op = \"|\";\n       break;\n \n     case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-      stream << \"^\";\n+      op = \"^\";\n       break;\n \n     case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-      stream << \"<<\";\n+      op = \"<<\";\n       break;\n \n     case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n-      stream << \">>\";\n+      op = \">>\";\n       break;\n     }\n \n-  stream << \" \";\n+  expr.get_left_expr ()->accept_vis (*this);\n+  stream << \" \" << op << \" \";\n   expr.get_right_expr ()->accept_vis (*this);\n }\n \n@@ -331,7 +366,23 @@ Dump::visit (StructExprStructBase &expr)\n \n void\n Dump::visit (CallExpr &expr)\n-{}\n+{\n+  expr.get_function_expr ()->accept_vis (*this);\n+  stream << '(';\n+\n+  indentation.increment ();\n+\n+  for (auto &arg : expr.get_params ())\n+    {\n+      stream << '\\n' << indentation;\n+      arg->accept_vis (*this);\n+      stream << ',';\n+    }\n+\n+  indentation.decrement ();\n+\n+  stream << '\\n' << indentation << ')';\n+}\n \n void\n Dump::visit (MethodCallExpr &expr)\n@@ -355,13 +406,14 @@ Dump::visit (BlockExpr &expr)\n     {\n       stream << indentation;\n       stmt->accept_vis (*this);\n-      stream << \";\\n\";\n+      stream << \"; /* stmt */\\n\";\n     }\n \n   if (expr.has_tail_expr ())\n     {\n       stream << indentation;\n       expr.get_tail_expr ()->accept_vis (*this);\n+      stream << \" /* tail expr */\";\n     }\n \n   indentation.decrement ();\n@@ -495,7 +547,10 @@ Dump::visit (TypeBoundWhereClauseItem &item)\n void\n Dump::visit (Method &method)\n {\n-  stream << indentation << \"fn \" << method.get_method_name () << '(';\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+  emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_method_name () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -552,6 +607,7 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n+  emit_visibility (function.get_visibility ());\n   stream << \"fn \" << function.get_function_name ();\n \n   if (function.has_generics ())\n@@ -647,6 +703,7 @@ void\n Dump::format_function_common (std::unique_ptr<Type> &return_type,\n \t\t\t      std::unique_ptr<BlockExpr> &block)\n {\n+  // FIXME: This should format the `<vis> fn <name> ( [args] )` as well\n   if (return_type)\n     {\n       stream << \"-> \";\n@@ -656,8 +713,10 @@ Dump::format_function_common (std::unique_ptr<Type> &return_type,\n   if (block)\n     {\n       if (return_type)\n-\tstream << ' ';\n-      block->accept_vis (*this);\n+\t{\n+\t  stream << ' ';\n+\t  block->accept_vis (*this);\n+\t}\n     }\n   else\n     stream << \";\\n\";\n@@ -685,7 +744,13 @@ void\n Dump::visit (TraitItemMethod &item)\n {\n   auto method = item.get_trait_method_decl ();\n-  stream << indentation << \"fn \" << method.get_identifier () << '(';\n+\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+\n+  // FIXME: Can we have visibility here?\n+  // emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_identifier () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -725,6 +790,8 @@ Dump::visit (Trait &trait)\n       stream << \"\\n\" << indentation;\n     }\n \n+  emit_visibility (trait.get_visibility ());\n+\n   stream << \"trait \" << trait.get_identifier ();\n \n   // Traits actually have an implicit Self thrown at the start so we must expect\n@@ -784,12 +851,15 @@ Dump::visit (TraitImpl &impl)\n   impl.get_trait_path ().accept_vis (*this);\n   stream << \" for \";\n   impl.get_type ()->accept_vis (*this);\n-\n   stream << \" {\\n\";\n+\n   indentation.increment ();\n \n   for (auto &item : impl.get_impl_items ())\n-    item->accept_vis (*this);\n+    {\n+      stream << indentation;\n+      item->accept_vis (*this);\n+    }\n \n   indentation.decrement ();\n   stream << \"\\n}\\n\";\n@@ -802,6 +872,8 @@ Dump::visit (ExternalStaticItem &item)\n void\n Dump::visit (ExternalFunctionItem &function)\n {\n+  emit_visibility (function.get_visibility ());\n+\n   stream << \"fn \" << function.get_identifier () << '(';\n \n   for (size_t i = 0; i < function.get_function_params ().size (); i++)\n@@ -830,11 +902,7 @@ Dump::visit (ExternBlock &block)\n   stream << \"extern \";\n \n   if (block.has_abi ())\n-    {\n-      stream << \"\\\"\";\n-      stream << block.get_abi ();\n-      stream << \"\\\" \";\n-    }\n+    stream << \"\\\"\" << block.get_abi () << \"\\\" \";\n \n   stream << \"{\\n\";\n   indentation.increment ();\n@@ -1014,11 +1082,15 @@ Dump::visit (LetStmt &stmt)\n \n void\n Dump::visit (ExprStmtWithoutBlock &stmt)\n-{}\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ExprStmtWithBlock &stmt)\n-{}\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n \n // rust-type.h\n void"}, {"sha": "a5a99f2b03e4a90d93b19c099da7e86f56283714", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8eb102200902e12c1b00e867e338be0a92c292/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8eb102200902e12c1b00e867e338be0a92c292/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=1e8eb102200902e12c1b00e867e338be0a92c292", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n \n // This file is part of GCC.\n \n@@ -80,8 +80,23 @@ class Dump : public ASTVisitor\n    * Format a function's definition parameter\n    */\n   void format_function_param (FunctionParam &param);\n+\n+  /**\n+   * Emit an attribute\n+   */\n   void emit_attrib (const Attribute &attrib);\n \n+  /**\n+   * Emit an item's visibility\n+   */\n+  void emit_visibility (const Visibility &vis);\n+\n+  /**\n+   * Emit an indented string with an optional extra comment\n+   */\n+  std::ostream &emit_indented_string (const std::string &value,\n+\t\t\t\t      const std::string &comment = \"\");\n+\n   // rust-ast.h\n   void visit (Token &tok);\n   void visit (DelimTokenTree &delim_tok_tree);"}]}