{"sha": "5e8d6dff27050ebc334cb17293c69a8f858120ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4ZDZkZmYyNzA1MGViYzMzNGNiMTcyOTNjNjlhOGY4NTgxMjBlZg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2016-03-18T09:36:32Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-03-18T09:36:32Z"}, "message": "re PR tree-optimization/70252 (ICE in vect_get_vec_def_for_stmt_copy with -O3 -march=skylake-avx512.)\n\ngcc/\n\n\tPR tree-optimization/70252\n\t* tree-vect-stmts.c (supportable_widening_operation): Check resulting\n\tboolean vector has a proper number of elements.\n\t(supportable_narrowing_operation): Likewise.\n\ngcc/testsuite/\n\n\tPR tree-optimization/70252\n\t* gcc.dg/pr70252.c: New test.\n\nFrom-SVN: r234323", "tree": {"sha": "42f389cfffa246b157719b2d2902da132808ecac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42f389cfffa246b157719b2d2902da132808ecac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e8d6dff27050ebc334cb17293c69a8f858120ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8d6dff27050ebc334cb17293c69a8f858120ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8d6dff27050ebc334cb17293c69a8f858120ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8d6dff27050ebc334cb17293c69a8f858120ef/comments", "author": null, "committer": null, "parents": [{"sha": "d0e7e4031976bf938fad5cf8e1357ed218691ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e7e4031976bf938fad5cf8e1357ed218691ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e7e4031976bf938fad5cf8e1357ed218691ab5"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "11a2a2d07dd0d499fbaf9af7298c829763d67025", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e8d6dff27050ebc334cb17293c69a8f858120ef", "patch": "@@ -1,3 +1,10 @@\n+2016-03-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/70252\n+\t* tree-vect-stmts.c (supportable_widening_operation): Check resulting\n+\tboolean vector has a proper number of elements.\n+\t(supportable_narrowing_operation): Likewise.\n+\n 2016-03-18  Tom de Vries  <tom@codesourcery.com>\n \n \tPR ipa/70269"}, {"sha": "27ef47515d4f9ebe09218a7035956c0a936de2c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e8d6dff27050ebc334cb17293c69a8f858120ef", "patch": "@@ -1,3 +1,8 @@\n+2016-03-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/70252\n+\t* gcc.dg/pr70252.c: New test.\n+\n 2016-03-18  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/pr70161-2.c: New test."}, {"sha": "209e691eceeb7a73a3cc169d2b01a44c50fb1b59", "filename": "gcc/testsuite/gcc.dg/pr70252.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70252.c?ref=5e8d6dff27050ebc334cb17293c69a8f858120ef", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-march=skylake-avx512\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+extern unsigned char a [150];\n+extern unsigned char b [150];\n+extern unsigned char c [150];\n+extern unsigned char d [150];\n+extern unsigned char e [150];\n+\n+void foo () {\n+  for (int i = 92; i <= 141; i += 2) {\n+    int tmp = (d [i] && b [i]) <= (a [i] > c [i]);\n+    e [i] = tmp >> b [i];\n+  }\n+}"}, {"sha": "d12c06281962cc5e597211102ef3963dece36970", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d6dff27050ebc334cb17293c69a8f858120ef/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=5e8d6dff27050ebc334cb17293c69a8f858120ef", "patch": "@@ -8940,7 +8940,12 @@ supportable_widening_operation (enum tree_code code, gimple *stmt,\n \n   if (insn_data[icode1].operand[0].mode == TYPE_MODE (wide_vectype)\n       && insn_data[icode2].operand[0].mode == TYPE_MODE (wide_vectype))\n-    return true;\n+      /* For scalar masks we may have different boolean\n+\t vector types having the same QImode.  Thus we\n+\t add additional check for elements number.  */\n+    return (!VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t    || (TYPE_VECTOR_SUBPARTS (vectype) / 2\n+\t\t== TYPE_VECTOR_SUBPARTS (wide_vectype)));\n \n   /* Check if it's a multi-step conversion that can be done using intermediate\n      types.  */\n@@ -8991,7 +8996,9 @@ supportable_widening_operation (enum tree_code code, gimple *stmt,\n \n       if (insn_data[icode1].operand[0].mode == TYPE_MODE (wide_vectype)\n \t  && insn_data[icode2].operand[0].mode == TYPE_MODE (wide_vectype))\n-\treturn true;\n+\treturn (!VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t\t|| (TYPE_VECTOR_SUBPARTS (intermediate_type) / 2\n+\t\t    == TYPE_VECTOR_SUBPARTS (wide_vectype)));\n \n       prev_type = intermediate_type;\n       prev_mode = intermediate_mode;\n@@ -9075,7 +9082,12 @@ supportable_narrowing_operation (enum tree_code code,\n   *code1 = c1;\n \n   if (insn_data[icode1].operand[0].mode == TYPE_MODE (narrow_vectype))\n-    return true;\n+    /* For scalar masks we may have different boolean\n+       vector types having the same QImode.  Thus we\n+       add additional check for elements number.  */\n+    return (!VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t    || (TYPE_VECTOR_SUBPARTS (vectype) * 2\n+\t\t== TYPE_VECTOR_SUBPARTS (narrow_vectype)));\n \n   /* Check if it's a multi-step conversion that can be done using intermediate\n      types.  */\n@@ -9140,7 +9152,9 @@ supportable_narrowing_operation (enum tree_code code,\n       (*multi_step_cvt)++;\n \n       if (insn_data[icode1].operand[0].mode == TYPE_MODE (narrow_vectype))\n-\treturn true;\n+\treturn (!VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t\t|| (TYPE_VECTOR_SUBPARTS (intermediate_type) * 2\n+\t\t    == TYPE_VECTOR_SUBPARTS (narrow_vectype)));\n \n       prev_mode = intermediate_mode;\n       prev_type = intermediate_type;"}]}