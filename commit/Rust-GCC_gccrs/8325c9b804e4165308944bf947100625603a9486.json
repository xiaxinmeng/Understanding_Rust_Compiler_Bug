{"sha": "8325c9b804e4165308944bf947100625603a9486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyNWM5YjgwNGU0MTY1MzA4OTQ0YmY5NDcxMDA2MjU2MDNhOTQ4Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-09T20:11:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-09T20:11:53Z"}, "message": "re PR debug/43293 (Invalid unwind info for i?86 -fpic)\n\n\tPR debug/43293\n\t* config/i386/t-i386 (i386.o): Depend on debug.h and dwarf2out.h.\n\t* config/i386/i386.c: Include debug.h and dwarf2out.h.\n\t(ix86_file_end): If dwarf2out_do_cfi_asm (), emit .cfi_startproc\n\tand .cfi_endproc around the pic thunks.\n\t(output_set_got): For TARGET_DEEP_BRANCH_PREDICTION pic, ensure\n\tall queued unwind info register saves are saved before the call.\n\tFor !TARGET_DEEP_BRANCH_PREDICTION pic, ensure the call is\n\tconsidered as sp-=4 for unwind info and the pop as sp+=4 which\n\talso clobbers dest, but doesn't actually restore it.\n\nFrom-SVN: r157325", "tree": {"sha": "ab7572bf283d52e87e2f0464a7c644b796abb31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7572bf283d52e87e2f0464a7c644b796abb31b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8325c9b804e4165308944bf947100625603a9486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8325c9b804e4165308944bf947100625603a9486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8325c9b804e4165308944bf947100625603a9486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8325c9b804e4165308944bf947100625603a9486/comments", "author": null, "committer": null, "parents": [{"sha": "eb1fcdaa11c571780374065c383708826624f22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1fcdaa11c571780374065c383708826624f22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1fcdaa11c571780374065c383708826624f22d"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "087c30ff92cdf07184fda0065fa79b1cdb48c7d3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8325c9b804e4165308944bf947100625603a9486/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8325c9b804e4165308944bf947100625603a9486/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8325c9b804e4165308944bf947100625603a9486", "patch": "@@ -53,6 +53,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm-constrs.h\"\n #include \"params.h\"\n #include \"cselib.h\"\n+#include \"debug.h\"\n+#include \"dwarf2out.h\"\n \n static rtx legitimize_dllimport_symbol (rtx, bool);\n \n@@ -7584,6 +7586,9 @@ ix86_file_end (void)\n   for (regno = 0; regno < 8; ++regno)\n     {\n       char name[32];\n+#ifdef DWARF2_UNWIND_INFO\n+      bool do_cfi;\n+#endif\n \n       if (! ((pic_labels_used >> regno) & 1))\n \tcontinue;\n@@ -7629,10 +7634,19 @@ ix86_file_end (void)\n \t  ASM_OUTPUT_LABEL (asm_out_file, name);\n \t}\n \n+#ifdef DWARF2_UNWIND_INFO\n+      do_cfi = dwarf2out_do_cfi_asm ();\n+      if (do_cfi)\n+\tfprintf (asm_out_file, \"\\t.cfi_startproc\\n\");\n+#endif\n       xops[0] = gen_rtx_REG (Pmode, regno);\n       xops[1] = gen_rtx_MEM (Pmode, stack_pointer_rtx);\n       output_asm_insn (\"mov%z0\\t{%1, %0|%0, %1}\", xops);\n       output_asm_insn (\"ret\", xops);\n+#ifdef DWARF2_UNWIND_INFO\n+      if (do_cfi)\n+\tfprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n+#endif\n     }\n \n   if (NEED_INDICATE_EXEC_STACK)\n@@ -7673,7 +7687,24 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n       if (!flag_pic)\n \toutput_asm_insn (\"mov%z0\\t{%2, %0|%0, %2}\", xops);\n       else\n-\toutput_asm_insn (\"call\\t%a2\", xops);\n+\t{\n+\t  output_asm_insn (\"call\\t%a2\", xops);\n+#ifdef DWARF2_UNWIND_INFO\n+\t  /* The call to next label acts as a push.  */\n+\t  if (dwarf2out_do_frame ())\n+\t    {\n+\t      rtx insn;\n+\t      start_sequence ();\n+\t      insn = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t\t   GEN_INT (-4))));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      dwarf2out_frame_debug (insn, true);\n+\t      end_sequence ();\n+\t    }\n+#endif\n+\t}\n \n #if TARGET_MACHO\n       /* Output the Mach-O \"canonical\" label name (\"Lxx$pb\") here too.  This\n@@ -7686,14 +7717,46 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n \t\t\t\t CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n \n       if (flag_pic)\n-\toutput_asm_insn (\"pop%z0\\t%0\", xops);\n+\t{\n+\t  output_asm_insn (\"pop%z0\\t%0\", xops);\n+#ifdef DWARF2_UNWIND_INFO\n+\t  /* The pop is a pop and clobbers dest, but doesn't restore it\n+\t     for unwind info purposes.  */\n+\t  if (dwarf2out_do_frame ())\n+\t    {\n+\t      rtx insn;\n+\t      start_sequence ();\n+\t      insn = emit_insn (gen_rtx_SET (VOIDmode, dest, const0_rtx));\n+\t      dwarf2out_frame_debug (insn, true);\n+\t      insn = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t\t   GEN_INT (4))));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      dwarf2out_frame_debug (insn, true);\n+\t      end_sequence ();\n+\t    }\n+#endif\n+\t}\n     }\n   else\n     {\n       char name[32];\n       get_pc_thunk_name (name, REGNO (dest));\n       pic_labels_used |= 1 << REGNO (dest);\n \n+#ifdef DWARF2_UNWIND_INFO\n+      /* Ensure all queued register saves are flushed before the\n+\t call.  */\n+      if (dwarf2out_do_frame ())\n+\t{\n+\t  rtx insn;\n+\t  start_sequence ();\n+\t  insn = emit_barrier ();\n+\t  end_sequence ();\n+\t  dwarf2out_frame_debug (insn, false);\n+\t}\n+#endif\n       xops[2] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n       xops[2] = gen_rtx_MEM (QImode, xops[2]);\n       output_asm_insn (\"call\\t%X2\", xops);"}, {"sha": "ba3b4e4b42aa231b0fd197e06cdb31acaad83b22", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8325c9b804e4165308944bf947100625603a9486/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8325c9b804e4165308944bf947100625603a9486/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=8325c9b804e4165308944bf947100625603a9486", "patch": "@@ -23,7 +23,7 @@ i386.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RECOG_H) $(EXPR_H) $(OPTABS_H) toplev.h $(BASIC_BLOCK_H) \\\n   $(GGC_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h $(CGRAPH_H) \\\n   $(TREE_GIMPLE_H) $(DWARF2_H) $(DF_H) tm-constrs.h $(PARAMS_H) \\\n-  i386-builtin-types.inc\n+  i386-builtin-types.inc debug.h dwarf2out.h\n \n i386-c.o: $(srcdir)/config/i386/i386-c.c \\\n   $(srcdir)/config/i386/i386-protos.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}]}