{"sha": "409d55557baad029d590862b7958d34f18fb09a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA5ZDU1NTU3YmFhZDAyOWQ1OTA4NjJiNzk1OGQzNGYxOGZiMDlhNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-18T13:47:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-18T13:47:33Z"}, "message": "Document libstdc++.so versioning in manual\n\n\t* doc/xml/manual/build_hacking.xml: New section on shared library\n\tversioning.\n\nFrom-SVN: r239572", "tree": {"sha": "227e4fa4966a64ca1dc79592a7ba8accf39ebe7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227e4fa4966a64ca1dc79592a7ba8accf39ebe7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/409d55557baad029d590862b7958d34f18fb09a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/409d55557baad029d590862b7958d34f18fb09a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/409d55557baad029d590862b7958d34f18fb09a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/409d55557baad029d590862b7958d34f18fb09a5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8107a983fb78418329a23574f8b915b7d909f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8107a983fb78418329a23574f8b915b7d909f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8107a983fb78418329a23574f8b915b7d909f04"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "b6628023cf527532199ff1a184c121376ee166ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409d55557baad029d590862b7958d34f18fb09a5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409d55557baad029d590862b7958d34f18fb09a5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=409d55557baad029d590862b7958d34f18fb09a5", "patch": "@@ -1,5 +1,8 @@\n 2016-08-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/build_hacking.xml: New section on shared library\n+\tversioning.\n+\n \t* doc/xml/manual/build_hacking.xml: Improve markup.\n \t* doc/xml/manual/test.xml: Likewise. Change section title from \"Test\"\n \tto \"Testing\"."}, {"sha": "90489d18dd6266b89a2a9afa3ab3ced49cd3cd46", "filename": "libstdc++-v3/doc/xml/manual/build_hacking.xml", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409d55557baad029d590862b7958d34f18fb09a5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409d55557baad029d590862b7958d34f18fb09a5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml?ref=409d55557baad029d590862b7958d34f18fb09a5", "patch": "@@ -398,6 +398,121 @@ in the build directory starts the build process. The <literal>all</literal> targ\n   and an error message.\n </para>\n \n+</section>\n+\n+<section xml:id=\"build_hacking.configure.version\"><info><title>Shared Library Versioning</title></info>\n+\n+<para>\n+The <filename class=\"library\">libstdc++.so</filename> shared library must\n+be carefully managed to maintain binary compatible with older versions\n+of the library. This ensures a new version of the library is still usable by\n+programs that were linked against an older version.\n+</para>\n+\n+<para>\n+Dependent on the target supporting it, the library uses <link\n+xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+xlink:href=\"https://www.akkadia.org/drepper/symbol-versioning\">ELF\n+symbol versioning</link> for all exported symbols. The symbol versions\n+are defined by a <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+xlink:href=\"https://sourceware.org/binutils/docs/ld/VERSION.html\">linker\n+script</link> that assigns a version to every symbol.\n+The set of symbols in each version is fixed when a GCC\n+release is made, and must not change after that.\n+</para>\n+\n+<para> When new symbols are added to the library they must be added\n+to a new symbol version, which must be created the first time new symbols\n+are added after a release. Adding a new symbol version involves the\n+following steps:\n+</para>\n+\n+<itemizedlist>\n+<listitem><para>\n+Edit <filename>acinclude.m4</filename> to update the \"revision\" value of\n+<varname>libtool_VERSION</varname>, e.g. from <literal>6:22:0</literal>\n+to <literal>6:23:0</literal>, which will cause the shared library to be\n+built as <filename class=\"library\">libstdc++.so.6.0.23</filename>.\n+</para>\n+</listitem>\n+<listitem><para>\n+Regenerate the <filename>configure</filename> script by running the\n+<command>autoreconf</command> tool from the correct version of the Autoconf\n+package (as dictated by the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+xlink:href=\"https://gcc.gnu.org/install/prerequisites.html\">GCC\n+prerequisites</link>).\n+</para>\n+</listitem>\n+<listitem><para>\n+Edit the file <filename>config/abi/pre/gnu.ver</filename> to\n+add a new version node after the last new node. The node name should be\n+<literal>GLIBCXX_3.4.X</literal> where <literal>X</literal> is the new\n+revision set in <filename>acinclude.m4</filename>, and the node should\n+depend on the previous version e.g.\n+<programlisting>\n+    GLIBCXX_3.4.23 {\n+\n+    } GLIBCXX_3.4.22;\n+</programlisting>\n+For symbols in the ABI runtime, libsupc++, the symbol version naming uses\n+<literal>CXXABI_1.3.Y</literal> where <literal>Y</literal> increases\n+monotonically with each new version. Again, the new node must depend on the\n+previous version node e.g.\n+<programlisting>\n+    CXXABI_1.3.11 {\n+\n+    } CXXABI_1.3.10;\n+</programlisting>\n+</para>\n+</listitem>\n+<listitem><para>\n+In order for the <link linkend=\"test.run.variations\">check-abi</link> test\n+target to pass the testsuite must be updated to know about the new symbol\n+version(s). Edit the file <filename>testsuite/util/testsuite_abi.cc</filename>\n+file to add the new versions to the <varname>known_versions</varname> list,\n+and update the checks for the latest versions that set the\n+<varname>latestp</varname> variable).\n+</para>\n+</listitem>\n+</itemizedlist>\n+\n+<para>\n+Once the new symbol version has been added you can add the names of your new\n+symbols in the new version node:\n+<programlisting>\n+    GLIBCXX_3.4.23 {\n+\n+      # basic_string&lt;C, T, A&gt;::_Alloc_hider::_Alloc_hider(C*, A&amp;&amp;)\n+      _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_Alloc_hiderC[12]EP[cw]OS3_;\n+\n+    } GLIBCXX_3.4.22;\n+</programlisting>\n+You can either use mangled names, or demangled names inside an\n+<literal>extern \"C++\"</literal> block. You might find that the new symbol\n+matches an existing pattern in an old symbol version (causing the\n+<literal>check-abi</literal> test target to fail). If that happens then the\n+existing pattern must be adjusted to be more specific so that it doesn't\n+match the new symbol.\n+</para>\n+\n+<para>\n+For an example of these steps, including adjusting old patterns to be less\n+greedy, see <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+xlink:href=\"https://gcc.gnu.org/ml/gcc-patches/2016-07/msg01926.html\">https://gcc.gnu.org/ml/gcc-patches/2016-07/msg01926.html</link>\n+and the attached patch.\n+</para>\n+\n+<para>\n+If it wasn't done for the last release, you might also need to regenerate\n+the <filename>baseline_symbols.txt</filename> file that defines the set\n+of expected symbols for old symbol versions. A new baseline file can be\n+generated by running <userinput>make new-abi-baseline</userinput> in the\n+<filename class=\"directory\"><replaceable>libbuildir</replaceable>/testsuite</filename>\n+directory. Be sure to generate the baseline from a clean build using\n+unmodified sources, or you will incorporate your local changes into the\n+baseline file.\n+</para>\n+\n </section>\n </section> <!-- configure -->\n "}]}