{"sha": "b2a06efa610db53a7d1840649128f70c8bc10ae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhMDZlZmE2MTBkYjUzYTdkMTg0MDY0OTEyOGY3MGM4YmMxMGFlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-09-02T06:52:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-09-02T06:52:24Z"}, "message": "re PR c++/26917 (ICE with -frepo on invalid code)\n\n\tPR c++/26917\n\t* repo.c (repo_file): Remove.\n\t(open_repo_file, reopen_repo_file_for_write): Return fopened\n\tFILE * instead of setting global repo_file variable.\n\t(init_repo): Adjust caller.\n\t(finish_repo): Likewise.  Return instead of goto out before\n\treopen_repo_file_for_write has been called.\n\nFrom-SVN: r116654", "tree": {"sha": "7c0f9d57466484b3bb7265d6bc6ad12fd35d834b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0f9d57466484b3bb7265d6bc6ad12fd35d834b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a06efa610db53a7d1840649128f70c8bc10ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a06efa610db53a7d1840649128f70c8bc10ae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a06efa610db53a7d1840649128f70c8bc10ae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a06efa610db53a7d1840649128f70c8bc10ae8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0166ff05ca0605e631452f1e504dad60d90f9e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0166ff05ca0605e631452f1e504dad60d90f9e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0166ff05ca0605e631452f1e504dad60d90f9e26"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "5f37ddecd4b83a7dd02991bad12d208c139ece50", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a06efa610db53a7d1840649128f70c8bc10ae8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a06efa610db53a7d1840649128f70c8bc10ae8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2a06efa610db53a7d1840649128f70c8bc10ae8", "patch": "@@ -1,3 +1,13 @@\n+2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/26917\n+\t* repo.c (repo_file): Remove.\n+\t(open_repo_file, reopen_repo_file_for_write): Return fopened\n+\tFILE * instead of setting global repo_file variable.\n+\t(init_repo): Adjust caller.\n+\t(finish_repo): Likewise.  Return instead of goto out before\n+\treopen_repo_file_for_write has been called.\n+\n 2006-09-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/28705"}, {"sha": "2bf0303302f31837d520d2ca0d4871ff810407bb", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a06efa610db53a7d1840649128f70c8bc10ae8/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a06efa610db53a7d1840649128f70c8bc10ae8/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=b2a06efa610db53a7d1840649128f70c8bc10ae8", "patch": "@@ -40,13 +40,12 @@ Boston, MA 02110-1301, USA.  */\n \n static char *extract_string (char **);\n static const char *get_base_filename (const char *);\n-static void open_repo_file (const char *);\n+static FILE *open_repo_file (const char *);\n static char *afgets (FILE *);\n-static void reopen_repo_file_for_write (void);\n+static FILE *reopen_repo_file_for_write (void);\n \n static GTY(()) tree pending_repo;\n static char *repo_name;\n-static FILE *repo_file;\n \n static const char *old_args, *old_dir, *old_main;\n \n@@ -118,14 +117,14 @@ get_base_filename (const char *filename)\n   return lbasename (filename);\n }\n \n-static void\n+static FILE *\n open_repo_file (const char *filename)\n {\n   const char *p;\n   const char *s = get_base_filename (filename);\n \n   if (s == NULL)\n-    return;\n+    return NULL;\n \n   p = lbasename (s);\n   p = strrchr (p, '.');\n@@ -136,7 +135,7 @@ open_repo_file (const char *filename)\n   memcpy (repo_name, s, p - s);\n   memcpy (repo_name + (p - s), \".rpo\", 5);\n \n-  repo_file = fopen (repo_name, \"r\");\n+  return fopen (repo_name, \"r\");\n }\n \n static char *\n@@ -155,6 +154,7 @@ void\n init_repo (void)\n {\n   char *buf;\n+  FILE *repo_file;\n \n   if (! flag_use_repository)\n     return;\n@@ -167,7 +167,7 @@ init_repo (void)\n   if (!temporary_obstack_initialized_p)\n     gcc_obstack_init (&temporary_obstack);\n \n-  open_repo_file (main_input_filename);\n+  repo_file = open_repo_file (main_input_filename);\n \n   if (repo_file == 0)\n     return;\n@@ -205,16 +205,18 @@ init_repo (void)\n   fclose (repo_file);\n }\n \n-static void\n+static FILE *\n reopen_repo_file_for_write (void)\n {\n-  repo_file = fopen (repo_name, \"w\");\n+  FILE *repo_file = fopen (repo_name, \"w\");\n \n   if (repo_file == 0)\n     {\n       error (\"can't create repository information file %qs\", repo_name);\n       flag_use_repository = 0;\n     }\n+\n+  return repo_file;\n }\n \n /* Emit any pending repos.  */\n@@ -224,14 +226,15 @@ finish_repo (void)\n {\n   tree t;\n   char *dir, *args;\n+  FILE *repo_file;\n \n   if (!flag_use_repository)\n     return;\n \n   if (errorcount || sorrycount)\n-    goto out;\n+    return;\n \n-  reopen_repo_file_for_write ();\n+  repo_file = reopen_repo_file_for_write ();\n   if (repo_file == 0)\n     goto out;\n "}]}