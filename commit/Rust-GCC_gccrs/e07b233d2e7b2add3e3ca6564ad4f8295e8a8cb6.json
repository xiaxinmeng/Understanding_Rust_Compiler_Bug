{"sha": "e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3YjIzM2QyZTdiMmFkZDNlM2NhNjU2NGFkNGY4Mjk1ZThhOGNiNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-06-28T07:50:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-06-28T07:50:34Z"}, "message": "c++config: Remove __regex nested namespace.\n\n2012-06-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/c++config: Remove __regex nested namespace.\n\t* include/bits/regex_compiler.h: Change __regex to\n\t__detail. Adjust doxygen markup, add regex-details group.\n\t* include/bits/regex_constants.h: Same.\n\t* include/bits/regex_cursor.h: Same.\n\t* include/bits/regex_error.h: Same.\n\t* include/bits/regex_grep_matcher.h: Same.\n\t* include/bits/regex_grep_matcher.tcc: Same.\n\t* include/bits/regex_nfa.h: Same.\n\t* include/bits/regex_nfa.tcc: Same.\n\t* include/bits/regex.h: Same. Remove static from global constants.\n\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n\n\t* include/bits/locale_classes.tcc: Add use_facet, has_facet to\n\tlocales group.\n\nFrom-SVN: r189039", "tree": {"sha": "2a062c359a277b1340ecf6b4d4551677b63409ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a062c359a277b1340ecf6b4d4551677b63409ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/comments", "author": null, "committer": null, "parents": [{"sha": "7fefe030cc5c85c32fc73704737fd069d978287c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fefe030cc5c85c32fc73704737fd069d978287c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fefe030cc5c85c32fc73704737fd069d978287c"}], "stats": {"total": 705, "additions": 367, "deletions": 338}, "files": [{"sha": "4598181352456fda316c04a2d1ecf1d5cd837397", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,3 +1,22 @@\n+2012-06-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/c++config: Remove __regex nested namespace.\n+\t* include/bits/regex_compiler.h: Change __regex to\n+\t__detail. Adjust doxygen markup, add regex-details group.\n+\t* include/bits/regex_constants.h: Same.\n+\t* include/bits/regex_cursor.h: Same.\n+\t* include/bits/regex_error.h: Same.\n+\t* include/bits/regex_grep_matcher.h: Same.\n+\t* include/bits/regex_grep_matcher.tcc: Same.\n+\t* include/bits/regex_nfa.h: Same.\n+\t* include/bits/regex_nfa.tcc: Same.\n+\t* include/bits/regex.h: Same. Remove static from global constants.\n+\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line numbers.\n+\n+\t* include/bits/locale_classes.tcc: Add use_facet, has_facet to\n+\tlocales group.\n+\n 2012-06-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/tr2/bool_set (count, size, num_blocks, empty, max_size):"}, {"sha": "1806151916784bd3fddad56acf172a103412bc95", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,7 +1,7 @@\n // Predefined symbols and macros -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -210,7 +210,6 @@ namespace std\n   namespace this_thread { inline namespace __7 { } }\n \n   namespace __detail { inline namespace __7 { } }\n-  namespace __regex { inline namespace __7 { } }\n }\n \n namespace __gnu_cxx"}, {"sha": "306fe4605113be6fe4a855b77c111dea69dbbdbe", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -89,6 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Test for the presence of a facet.\n+   *  @ingroup locales\n    *\n    *  has_facet tests the locale argument for the presence of the facet type\n    *  provided as the template parameter.  Facets derived from the facet\n@@ -114,6 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  Return a facet.\n+   *  @ingroup locales\n    *\n    *  use_facet looks for and returns a reference to a facet of type Facet\n    *  where Facet is the template parameter.  If has_facet(locale) is true,"}, {"sha": "897b8a484dd22bb634cd106524eb3ce8e7b745d0", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 158, "deletions": 194, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,15 +32,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-/**\n- * @defgroup regex Regular Expressions\n- * A facility for performing regular expression pattern matching.\n- */\n- //@{\n+  /**\n+   * @addtogroup regex\n+   * @{\n+   */\n \n-  // [7.7] Class regex_traits\n   /**\n-   * @brief Describes aspects of a regular expression.\n+   * @brief Class regex_traits. Describes aspects of a regular expression.\n    *\n    * A regular expression traits class that satisfies the requirements of \n    * section [28.7].\n@@ -53,17 +51,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct regex_traits\n     {\n     public:\n-      typedef _Ch_type                     char_type;\n-      typedef std::basic_string<char_type> string_type;\n-      typedef std::locale                  locale_type;\n-      typedef std::ctype_base::mask        char_class_type;\n+      typedef _Ch_type                     \tchar_type;\n+      typedef std::basic_string<char_type> \tstring_type;\n+      typedef std::locale                  \tlocale_type;\n+      typedef std::ctype_base::mask        \tchar_class_type;\n \n     public:\n       /**\n        * @brief Constructs a default traits object.\n        */\n-      regex_traits()\n-      { }\n+      regex_traits() { }\n       \n       /**\n        * @brief Gives the length of a C-style string starting at @p __p.\n@@ -101,10 +98,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       char_type\n       translate_nocase(char_type __c) const\n-      {\n-\tusing std::ctype;\n-\tusing std::use_facet;\n-\treturn use_facet<ctype<char_type> >(_M_locale).tolower(__c);\n+      { \n+\ttypedef std::ctype<char_type> __ctype_type;\n+\tconst __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n+\treturn __fctyp.tolower(__c); \n       }\n       \n       /**\n@@ -131,12 +128,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         string_type\n         transform(_Fwd_iter __first, _Fwd_iter __last) const\n         {\n-\t  using std::collate;\n-\t  using std::use_facet;\n-\t  const collate<_Ch_type>& __c(use_facet<\n-\t\t\t\t       collate<_Ch_type> >(_M_locale));\n+\t  typedef std::collate<char_type> __collate_type;\n+\t  const __collate_type& __fclt(use_facet<__collate_type>(_M_locale));\n \t  string_type __s(__first, __last);\n-\t  return __c.transform(__s.data(), __s.data() + __s.size());\n+\t  return __fclt.transform(__s.data(), __s.data() + __s.size());\n \t}\n \n       /**\n@@ -284,16 +279,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     regex_traits<_Ch_type>::\n     isctype(_Ch_type __c, char_class_type __f) const\n     {\n-      using std::ctype;\n-      using std::use_facet;\n-      const ctype<_Ch_type>& __ctype(use_facet<\n-\t\t\t\t     ctype<_Ch_type> >(_M_locale));\n+      typedef std::ctype<char_type> __ctype_type;\n+      const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));\n       \n-      if (__ctype.is(__f, __c))\n+      if (__fctyp.is(__f, __c))\n \treturn true;\n       \n       // special case of underscore in [[:w:]]\n-      if (__c == __ctype.widen('_'))\n+      if (__c == __fctyp.widen('_'))\n \t{\n \t  const char __wb[] = \"w\";\n \t  char_class_type __wt = this->lookup_classname(__wb,\n@@ -303,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     \n       // special case of [[:space:]] in [[:blank:]]\n-      if (__ctype.is(std::ctype_base::space, __c))\n+      if (__fctyp.is(std::ctype_base::space, __c))\n \t{\n \t  const char __bb[] = \"blank\";\n \t  char_class_type __bt = this->lookup_classname(__bb,\n@@ -320,7 +313,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     regex_traits<_Ch_type>::\n     value(_Ch_type __ch, int __radix) const\n     {\n-      std::basic_istringstream<_Ch_type> __is(string_type(1, __ch));\n+      std::basic_istringstream<char_type> __is(string_type(1, __ch));\n       int __v;\n       if (__radix == 8)\n \t__is >> std::oct;\n@@ -354,26 +347,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * std [28.8.1](1)\n        */\n       //@{\n-      static constexpr regex_constants::syntax_option_type icase\n-        = regex_constants::icase;\n-      static constexpr regex_constants::syntax_option_type nosubs\n-        = regex_constants::nosubs;\n-      static constexpr regex_constants::syntax_option_type optimize\n-        = regex_constants::optimize;\n-      static constexpr regex_constants::syntax_option_type collate\n-        = regex_constants::collate;\n-      static constexpr regex_constants::syntax_option_type ECMAScript\n-        = regex_constants::ECMAScript;\n-      static constexpr regex_constants::syntax_option_type basic\n-        = regex_constants::basic;\n-      static constexpr regex_constants::syntax_option_type extended\n-        = regex_constants::extended;\n-      static constexpr regex_constants::syntax_option_type awk\n-        = regex_constants::awk;\n-      static constexpr regex_constants::syntax_option_type grep\n-        = regex_constants::grep;\n-      static constexpr regex_constants::syntax_option_type egrep\n-        = regex_constants::egrep;\n+      static constexpr flag_type icase = regex_constants::icase;\n+      static constexpr flag_type nosubs = regex_constants::nosubs;\n+      static constexpr flag_type optimize = regex_constants::optimize;\n+      static constexpr flag_type collate = regex_constants::collate;\n+      static constexpr flag_type ECMAScript = regex_constants::ECMAScript;\n+      static constexpr flag_type basic = regex_constants::basic;\n+      static constexpr flag_type extended = regex_constants::extended;\n+      static constexpr flag_type awk = regex_constants::awk;\n+      static constexpr flag_type grep = regex_constants::grep;\n+      static constexpr flag_type egrep = regex_constants::egrep;\n       //@}\n \n       // [7.8.2] construct/copy/destroy\n@@ -382,8 +365,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * character sequence.\n        */\n       basic_regex()\n-      : _M_flags(regex_constants::ECMAScript),\n-        _M_automaton(__regex::__compile<const _Ch_type*, _Rx_traits>(0, 0,\n+      : _M_flags(ECMAScript),\n+        _M_automaton(__detail::__compile<const _Ch_type*, _Rx_traits>(0, 0,\n                      _M_traits, _M_flags))\n       { }\n \n@@ -399,10 +382,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @throws regex_error if @p __p is not a valid regular expression.\n        */\n       explicit\n-      basic_regex(const _Ch_type* __p,\n-\t\t  flag_type __f = regex_constants::ECMAScript)\n+      basic_regex(const _Ch_type* __p, flag_type __f = ECMAScript)\n       : _M_flags(__f),\n-        _M_automaton(__regex::__compile(__p, __p + _Rx_traits::length(__p),\n+        _M_automaton(__detail::__compile(__p, __p + _Rx_traits::length(__p),\n         \t\t\t\t_M_traits, _M_flags))\n       { }\n \n@@ -420,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       basic_regex(const _Ch_type* __p, std::size_t __len, flag_type __f)\n       : _M_flags(__f),\n-        _M_automaton(__regex::__compile(__p, __p + __len, _M_traits, _M_flags))\n+        _M_automaton(__detail::__compile(__p, __p + __len, _M_traits, _M_flags))\n       { }\n \n       /**\n@@ -454,11 +436,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Ch_traits, typename _Ch_alloc>\n         explicit\n-        basic_regex(const std::basic_string<_Ch_type, _Ch_traits,\n-\t\t    _Ch_alloc>& __s,\n-\t\t    flag_type __f = regex_constants::ECMAScript)\n+        basic_regex(const std::basic_string<_Ch_type, _Ch_traits, \n+\t\t\t\t\t    _Ch_alloc>& __s,\n+\t\t    flag_type __f = ECMAScript)\n \t: _M_flags(__f),\n-\t  _M_automaton(__regex::__compile(__s.begin(), __s.end(),\n+\t  _M_automaton(__detail::__compile(__s.begin(), __s.end(),\n \t  \t\t\t\t  _M_traits, _M_flags))\n         { }\n \n@@ -477,9 +459,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _InputIterator>\n         basic_regex(_InputIterator __first, _InputIterator __last, \n-\t\t    flag_type __f = regex_constants::ECMAScript)\n+\t\t    flag_type __f = ECMAScript)\n \t: _M_flags(__f),\n-\t  _M_automaton(__regex::__compile(__first, __last, _M_traits, _M_flags))\n+\t  _M_automaton(__detail::__compile(__first, __last, _M_traits, _M_flags))\n         { }\n \n       /**\n@@ -491,9 +473,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @throws regex_error if @p __l is not a valid regular expression.\n        */\n       basic_regex(initializer_list<_Ch_type> __l,\n-\t\t  flag_type __f = regex_constants::ECMAScript)\n+\t\t  flag_type __f = ECMAScript)\n       : _M_flags(__f),\n-        _M_automaton(__regex::__compile(__l.begin(), __l.end(),\n+        _M_automaton(__detail::__compile(__l.begin(), __l.end(),\n         \t\t\t\t_M_traits, _M_flags))\n       { }\n \n@@ -534,9 +516,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __s A pointer to a string containing a regular expression.\n        */\n-      template<typename _Ch_typeraits, typename _Allocator>\n+      template<typename _Ch_typeraits, typename _Alloc>\n         basic_regex&\n-        operator=(const basic_string<_Ch_type, _Ch_typeraits, _Allocator>& __s)\n+        operator=(const basic_string<_Ch_type, _Ch_typeraits, _Alloc>& __s)\n         { return this->assign(__s, flags()); }\n \n       // [7.8.3] assign\n@@ -580,8 +562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * regex_error is thrown, *this remains unchanged.\n        */\n       basic_regex&\n-      assign(const _Ch_type* __p,\n-\t     flag_type __flags = regex_constants::ECMAScript)\n+      assign(const _Ch_type* __p, flag_type __flags = ECMAScript)\n       { return this->assign(string_type(__p), __flags); }\n \n       /**\n@@ -612,10 +593,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * expression pattern interpreted according to @p __flags.  If\n        * regex_error is thrown, *this remains unchanged.\n        */\n-      template<typename _Ch_typeraits, typename _Allocator>\n+      template<typename _Ch_typeraits, typename _Alloc>\n         basic_regex&\n-        assign(const basic_string<_Ch_type, _Ch_typeraits, _Allocator>& __s,\n-\t       flag_type __flags = regex_constants::ECMAScript)\n+        assign(const basic_string<_Ch_type, _Ch_typeraits, _Alloc>& __s,\n+\t       flag_type __flags = ECMAScript)\n         { \n \t  basic_regex __tmp(__s, __flags);\n \t  this->swap(__tmp);\n@@ -638,7 +619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _InputIterator>\n         basic_regex&\n         assign(_InputIterator __first, _InputIterator __last,\n-\t       flag_type __flags = regex_constants::ECMAScript)\n+\t       flag_type __flags = ECMAScript)\n         { return this->assign(string_type(__first, __last), __flags); }\n \n       /**\n@@ -653,8 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * unchanged.\n        */\n       basic_regex&\n-      assign(initializer_list<_Ch_type> __l,\n-\t     flag_type __flags = regex_constants::ECMAScript)\n+      assign(initializer_list<_Ch_type> __l, flag_type __flags = ECMAScript)\n       { return this->assign(__l.begin(), __l.end(), __flags); }\n \n       // [7.8.4] const operations\n@@ -701,8 +681,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       swap(basic_regex& __rhs)\n       {\n-\tstd::swap(_M_flags,     __rhs._M_flags);\n-\tstd::swap(_M_traits,    __rhs._M_traits);\n+\tstd::swap(_M_flags, __rhs._M_flags);\n+\tstd::swap(_M_traits, __rhs._M_traits);\n \tstd::swap(_M_automaton, __rhs._M_automaton);\n       }\n \n@@ -712,18 +692,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _M_automaton->_M_dot(__ostr); }\n #endif\n       \n-      const __regex::_AutomatonPtr&\n+      const __detail::_AutomatonPtr&\n       _M_get_automaton() const\n       { return _M_automaton; }\n \n     protected:\n       flag_type              _M_flags;\n       _Rx_traits             _M_traits;\n-      __regex::_AutomatonPtr _M_automaton;\n+      __detail::_AutomatonPtr _M_automaton;\n     };\n   \n   /** @brief Standard regular expressions. */\n   typedef basic_regex<char>    regex;\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   /** @brief Standard wide-character regular expressions. */\n   typedef basic_regex<wchar_t> wregex;\n@@ -759,14 +740,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _BiIter>\n     class sub_match : public std::pair<_BiIter, _BiIter>\n     {\n+      typedef iterator_traits<_BiIter>\t\t\t__iter_traits;\n+\t\n     public:\n-      typedef typename iterator_traits<_BiIter>::value_type      value_type;\n-      typedef typename iterator_traits<_BiIter>::difference_type\n-                                                            difference_type;\n-      typedef _BiIter                                              iterator;\n-      typedef std::basic_string<value_type>                     string_type;\n+      typedef typename __iter_traits::value_type      \tvalue_type;\n+      typedef typename __iter_traits::difference_type \tdifference_type;\n+      typedef _BiIter                                   iterator;\n+      typedef std::basic_string<value_type>             string_type;\n \n-    public:\n       bool matched;\n       \n       constexpr sub_match() : matched() { }\n@@ -851,11 +832,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n   /** @brief Standard regex submatch over a C-style null-terminated string. */\n   typedef sub_match<const char*>             csub_match;\n+\n   /** @brief Standard regex submatch over a standard string. */\n   typedef sub_match<string::const_iterator>  ssub_match;\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   /** @brief Regex submatch over a C-style null-terminated wide string. */\n   typedef sub_match<const wchar_t*>          wcsub_match;\n+\n   /** @brief Regex submatch over a standard wide string. */\n   typedef sub_match<wstring::const_iterator> wssub_match;\n #endif\n@@ -870,8 +854,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator==(const sub_match<_BiIter>& __lhs,\n-\t       const sub_match<_BiIter>& __rhs)\n+    operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) == 0; }\n \n   /**\n@@ -882,8 +865,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator!=(const sub_match<_BiIter>& __lhs,\n-\t       const sub_match<_BiIter>& __rhs)\n+    operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) != 0; }\n \n   /**\n@@ -894,8 +876,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator<(const sub_match<_BiIter>& __lhs,\n-\t      const sub_match<_BiIter>& __rhs)\n+    operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) < 0; }\n \n   /**\n@@ -906,8 +887,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator<=(const sub_match<_BiIter>& __lhs,\n-\t       const sub_match<_BiIter>& __rhs)\n+    operator<=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) <= 0; }\n \n   /**\n@@ -918,8 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator>=(const sub_match<_BiIter>& __lhs,\n-\t       const sub_match<_BiIter>& __rhs)\n+    operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) >= 0; }\n \n   /**\n@@ -930,10 +909,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _BiIter>\n     inline bool\n-    operator>(const sub_match<_BiIter>& __lhs,\n-\t      const sub_match<_BiIter>& __rhs)\n+    operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n     { return __lhs.compare(__rhs) > 0; }\n \n+  // Alias for sub_match'd string.\n+  template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n+    using __sub_match_string = basic_string<\n+                              typename iterator_traits<_Bi_iter>::value_type,\n+                              _Ch_traits, _Ch_alloc>;\n+\n   /**\n    * @brief Tests the equivalence of a string and a regular expression\n    *        submatch.\n@@ -943,9 +927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator==(const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __lhs,\n+    operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n     { return __rhs.compare(__lhs.c_str()) == 0; }\n \n@@ -958,9 +940,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator!=(const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n+    operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n+\t       const sub_match<_Bi_iter>& __rhs)\n     { return !(__lhs == __rhs); }\n \n   /**\n@@ -971,9 +952,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator<(const basic_string<\n-\t      typename iterator_traits<_Bi_iter>::value_type,\n-\t      _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n+    operator<(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n+\t      const sub_match<_Bi_iter>& __rhs)\n      { return __rhs.compare(__lhs.c_str()) > 0; }\n \n   /**\n@@ -984,9 +964,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator>(const basic_string<\n-\t      typename iterator_traits<_Bi_iter>::value_type, \n-\t      _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n+    operator>(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n+\t      const sub_match<_Bi_iter>& __rhs)\n     { return __rhs < __lhs; }\n \n   /**\n@@ -997,9 +976,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator>=(const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n+    operator>=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n+\t       const sub_match<_Bi_iter>& __rhs)\n     { return !(__lhs < __rhs); }\n \n   /**\n@@ -1010,9 +988,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n-    operator<=(const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n+    operator<=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n+\t       const sub_match<_Bi_iter>& __rhs)\n     { return !(__rhs < __lhs); }\n \n   /**\n@@ -1025,9 +1002,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n     operator==(const sub_match<_Bi_iter>& __lhs,\n-\t       const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __rhs)\n+\t       const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return __lhs.compare(__rhs.c_str()) == 0; }\n \n   /**\n@@ -1040,9 +1015,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, typename _Ch_traits, typename _Ch_alloc>\n     inline bool\n     operator!=(const sub_match<_Bi_iter>& __lhs,\n-\t       const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __rhs)\n+\t       const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return !(__lhs == __rhs); }\n \n   /**\n@@ -1054,9 +1027,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, class _Ch_traits, class _Ch_alloc>\n     inline bool\n     operator<(const sub_match<_Bi_iter>& __lhs,\n-\t      const basic_string<\n-\t      typename iterator_traits<_Bi_iter>::value_type,\n-\t      _Ch_traits, _Ch_alloc>& __rhs)\n+\t      const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return __lhs.compare(__rhs.c_str()) < 0; }\n \n   /**\n@@ -1068,9 +1039,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, class _Ch_traits, class _Ch_alloc>\n     inline bool\n     operator>(const sub_match<_Bi_iter>& __lhs,\n-\t      const basic_string<\n-\t      typename iterator_traits<_Bi_iter>::value_type,\n-\t      _Ch_traits, _Ch_alloc>& __rhs)\n+\t      const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return __rhs < __lhs; }\n \n   /**\n@@ -1082,9 +1051,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, class _Ch_traits, class _Ch_alloc>\n     inline bool\n     operator>=(const sub_match<_Bi_iter>& __lhs,\n-\t       const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __rhs)\n+\t       const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return !(__lhs < __rhs); }\n \n   /**\n@@ -1096,9 +1063,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Bi_iter, class _Ch_traits, class _Ch_alloc>\n     inline bool\n     operator<=(const sub_match<_Bi_iter>& __lhs,\n-\t       const basic_string<\n-\t       typename iterator_traits<_Bi_iter>::value_type,\n-\t       _Ch_traits, _Ch_alloc>& __rhs)\n+\t       const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __rhs)\n     { return !(__rhs < __lhs); }\n \n   /**\n@@ -1261,8 +1226,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n     {\n-      return __rhs.compare(typename sub_match<_Bi_iter>::string_type(1, __lhs))\n-             == 0;\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __rhs.compare(string_type(1, __lhs)) == 0;\n     }\n \n   /**\n@@ -1289,8 +1254,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n     {\n-      return __rhs.compare(typename sub_match<_Bi_iter>::string_type(1, __lhs))\n-             > 0;\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __rhs.compare(string_type(1, __lhs)) > 0;\n     }\n \n   /**\n@@ -1341,8 +1306,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n     {\n-      return __lhs.compare(typename sub_match<_Bi_iter>::string_type(1, __rhs))\n-             == 0;\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __lhs.compare(string_type(1, __rhs)) == 0;\n     }\n \n   /**\n@@ -1369,8 +1334,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<(const sub_match<_Bi_iter>& __lhs,\n \t      typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n     {\n-      return __lhs.compare(typename sub_match<_Bi_iter>::string_type(1, __rhs))\n-             < 0;\n+      typedef typename sub_match<_Bi_iter>::string_type string_type;\n+      return __lhs.compare(string_type(1, __rhs)) < 0;\n     }\n \n   /**\n@@ -1460,9 +1425,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @nosubgrouping\n    */\n   template<typename _Bi_iter,\n-\t   typename _Allocator = allocator<sub_match<_Bi_iter> > >\n+\t   typename _Alloc = allocator<sub_match<_Bi_iter> > >\n     class match_results\n-    : private std::vector<sub_match<_Bi_iter>, _Allocator>\n+    : private std::vector<sub_match<_Bi_iter>, _Alloc>\n     {\n     private:\n       /*\n@@ -1476,26 +1441,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * [n+1] prefix\n        * [n+2] suffix\n        */\n-      typedef std::vector<sub_match<_Bi_iter>, _Allocator>    _Base_type;\n+      typedef std::vector<sub_match<_Bi_iter>, _Alloc>     _Base_type;\n+      typedef std::iterator_traits<_Bi_iter>   \t   \t   __iter_traits;\n+      typedef regex_constants::match_flag_type\t\t   match_flag_type;\n \n     public:\n       /**\n        * @name 10.? Public Types\n        */\n       //@{\n-      typedef sub_match<_Bi_iter>                             value_type;\n-      typedef const value_type&                               const_reference;\n-      typedef const_reference                                 reference;\n-      typedef typename _Base_type::const_iterator             const_iterator;\n-      typedef const_iterator                                  iterator;\n-      typedef typename std::iterator_traits<_Bi_iter>::difference_type\n-                                                              difference_type;\n-      typedef typename allocator_traits<_Allocator>::size_type\n-                                                              size_type;\n-      typedef _Allocator                                      allocator_type;\n-      typedef typename std::iterator_traits<_Bi_iter>::value_type\n-                                                              char_type;\n-      typedef std::basic_string<char_type>                    string_type;\n+      typedef _Alloc                                       allocator_type;\n+      typedef sub_match<_Bi_iter>                          value_type;\n+      typedef const value_type&                            const_reference;\n+      typedef const_reference                              reference;\n+      typedef typename _Base_type::const_iterator          const_iterator;\n+      typedef const_iterator                               iterator;\n+      typedef typename __iter_traits::difference_type\t   difference_type;\n+      typedef typename __iter_traits::value_type \t   char_type;\n+      typedef typename allocator_traits<_Alloc>::size_type size_type;\n+\n+\n+      typedef std::basic_string<char_type>                 string_type;\n       //@}\n   \n     public:\n@@ -1509,7 +1475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @post size() returns 0 and str() returns an empty string.\n        */\n       explicit\n-      match_results(const _Allocator& __a = _Allocator())\n+      match_results(const _Alloc& __a = _Alloc())\n       : _Base_type(__a)\n       { }\n \n@@ -1751,8 +1717,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _Out_iter\n         format(_Out_iter __out, const char_type* __fmt_first,\n \t       const char_type* __fmt_last,\n-\t       regex_constants::match_flag_type __flags\n-\t       = regex_constants::format_default) const\n+\t       match_flag_type __flags = regex_constants::format_default) const\n         { return __out; }\n \n       /**\n@@ -1761,8 +1726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Out_iter, typename _St, typename _Sa>\n         _Out_iter\n         format(_Out_iter __out, const basic_string<char_type, _St, _Sa>& __fmt,\n-\t       regex_constants::match_flag_type __flags\n-\t       = regex_constants::format_default) const\n+\t       match_flag_type __flags = regex_constants::format_default) const\n         {\n           return format(__out, __fmt.data(), __fmt.data() + __fmt.size(),\n                         __flags);\n@@ -1774,8 +1738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Out_iter, typename _St, typename _Sa>\n         basic_string<char_type, _St, _Sa>\n         format(const basic_string<char_type, _St, _Sa>& __fmt,\n-\t       regex_constants::match_flag_type __flags\n-\t       = regex_constants::format_default) const\n+\t       match_flag_type __flags = regex_constants::format_default) const\n         {\n           basic_string<char_type, _St, _Sa> __result;\n           format(std::back_inserter(__result), __fmt, __flags);\n@@ -1787,8 +1750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       string_type\n       format(const char_type* __fmt,\n-\t     regex_constants::match_flag_type __flags\n-\t     = regex_constants::format_default) const\n+\t     match_flag_type __flags = regex_constants::format_default) const\n       {\n         string_type __result;\n         format(std::back_inserter(__result),\n@@ -1827,7 +1789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       //@} \n       \n     private:\n-      friend class __regex::_SpecializedResults<_Bi_iter, _Allocator>;\n+      friend class __detail::_SpecializedResults<_Bi_iter, _Alloc>;\n     };\n   \n   typedef match_results<const char*>             cmatch;\n@@ -1843,10 +1805,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @returns true if the two objects refer to the same match,\n    * false otherwise.\n    */\n-  template<typename _Bi_iter, typename _Allocator>\n+  template<typename _Bi_iter, typename _Alloc>\n     inline bool\n-    operator==(const match_results<_Bi_iter, _Allocator>& __m1,\n-\t       const match_results<_Bi_iter, _Allocator>& __m2)\n+    operator==(const match_results<_Bi_iter, _Alloc>& __m1,\n+\t       const match_results<_Bi_iter, _Alloc>& __m2)\n     {\n       if (__m1.ready() != __m2.ready())\n         return false;\n@@ -1867,10 +1829,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @returns true if the two objects do not refer to the same match,\n    * false otherwise.\n    */\n-  template<typename _Bi_iter, class _Allocator>\n+  template<typename _Bi_iter, class _Alloc>\n     inline bool\n-    operator!=(const match_results<_Bi_iter, _Allocator>& __m1,\n-\t       const match_results<_Bi_iter, _Allocator>& __m2)\n+    operator!=(const match_results<_Bi_iter, _Alloc>& __m1,\n+\t       const match_results<_Bi_iter, _Alloc>& __m2)\n     { return !(__m1 == __m2); }\n \n   // [7.10.6] match_results swap\n@@ -1881,10 +1843,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * The contents of the two match_results objects are swapped.\n    */\n-  template<typename _Bi_iter, typename _Allocator>\n+  template<typename _Bi_iter, typename _Alloc>\n     inline void\n-    swap(match_results<_Bi_iter, _Allocator>& __lhs,\n-\t match_results<_Bi_iter, _Allocator>& __rhs)\n+    swap(match_results<_Bi_iter, _Alloc>& __lhs,\n+\t match_results<_Bi_iter, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n   // [7.11.2] Function template regex_match\n@@ -1910,21 +1872,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * @todo Implement this function.\n    */\n-  template<typename _Bi_iter, typename _Allocator,\n+  template<typename _Bi_iter, typename _Alloc,\n \t   typename _Ch_type, typename _Rx_traits>\n     bool\n     regex_match(_Bi_iter                                 __s,\n                 _Bi_iter                                 __e,\n-                match_results<_Bi_iter, _Allocator>&     __m,\n+                match_results<_Bi_iter, _Alloc>&     __m,\n                 const basic_regex<_Ch_type, _Rx_traits>& __re,\n                 regex_constants::match_flag_type         __flags\n                                = regex_constants::match_default)\n     {\n-      __regex::_AutomatonPtr __a = __re._M_get_automaton();\n-      __regex::_Automaton::_SizeT __sz = __a->_M_sub_count();\n-      __regex::_SpecializedCursor<_Bi_iter> __cs(__s, __e);\n-      __regex::_SpecializedResults<_Bi_iter, _Allocator> __r(__sz, __cs, __m);\n-      __regex::_Grep_matcher __matcher(__cs, __r, __a, __flags);\n+      __detail::_AutomatonPtr __a = __re._M_get_automaton();\n+      __detail::_Automaton::_SizeT __sz = __a->_M_sub_count();\n+      __detail::_SpecializedCursor<_Bi_iter> __cs(__s, __e);\n+      __detail::_SpecializedResults<_Bi_iter, _Alloc> __r(__sz, __cs, __m);\n+      __detail::_Grep_matcher __matcher(__cs, __r, __a, __flags);\n       return __m[0].matched;\n     }\n \n@@ -1967,10 +1929,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * @throws an exception of type regex_error.\n    */\n-  template<typename _Ch_type, typename _Allocator, typename _Rx_traits>\n+  template<typename _Ch_type, typename _Alloc, typename _Rx_traits>\n     inline bool\n     regex_match(const _Ch_type* __s,\n-\t\tmatch_results<const _Ch_type*, _Allocator>& __m,\n+\t\tmatch_results<const _Ch_type*, _Alloc>& __m,\n \t\tconst basic_regex<_Ch_type, _Rx_traits>& __re,\n \t\tregex_constants::match_flag_type __f\n \t\t= regex_constants::match_default)\n@@ -1991,11 +1953,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _Ch_alloc,\n-\t   typename _Allocator, typename _Ch_type, typename _Rx_traits>\n+\t   typename _Alloc, typename _Ch_type, typename _Rx_traits>\n     inline bool\n     regex_match(const basic_string<_Ch_type, _Ch_traits, _Ch_alloc>& __s,\n \t\tmatch_results<typename basic_string<_Ch_type, \n-\t\t_Ch_traits, _Ch_alloc>::const_iterator, _Allocator>& __m,\n+\t\t_Ch_traits, _Ch_alloc>::const_iterator, _Alloc>& __m,\n \t\tconst basic_regex<_Ch_type, _Rx_traits>& __re,\n \t\tregex_constants::match_flag_type __flags\n \t\t= regex_constants::match_default)\n@@ -2060,11 +2022,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * @todo Implement this function.\n    */\n-  template<typename _Bi_iter, typename _Allocator,\n+  template<typename _Bi_iter, typename _Alloc,\n \t   typename _Ch_type, typename _Rx_traits>\n     inline bool\n     regex_search(_Bi_iter __first, _Bi_iter __last,\n-\t\t match_results<_Bi_iter, _Allocator>& __m,\n+\t\t match_results<_Bi_iter, _Alloc>& __m,\n \t\t const basic_regex<_Ch_type, _Rx_traits>& __re,\n \t\t regex_constants::match_flag_type __flags\n \t\t = regex_constants::match_default)\n@@ -2106,10 +2068,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * @throws an exception of type regex_error.\n    */\n-  template<typename _Ch_type, class _Allocator, class _Rx_traits>\n+  template<typename _Ch_type, class _Alloc, class _Rx_traits>\n     inline bool\n     regex_search(const _Ch_type* __s,\n-\t\t match_results<const _Ch_type*, _Allocator>& __m,\n+\t\t match_results<const _Ch_type*, _Alloc>& __m,\n \t\t const basic_regex<_Ch_type, _Rx_traits>& __e,\n \t\t regex_constants::match_flag_type __f\n \t\t = regex_constants::match_default)\n@@ -2168,12 +2130,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @throws an exception of type regex_error.\n    */\n   template<typename _Ch_traits, typename _Ch_alloc,\n-\t   typename _Allocator, typename _Ch_type,\n+\t   typename _Alloc, typename _Ch_type,\n \t   typename _Rx_traits>\n     inline bool\n     regex_search(const basic_string<_Ch_type, _Ch_traits, _Ch_alloc>& __s,\n \t\t match_results<typename basic_string<_Ch_type,\n-\t\t _Ch_traits, _Ch_alloc>::const_iterator, _Allocator>& __m,\n+\t\t _Ch_traits, _Ch_alloc>::const_iterator, _Alloc>& __m,\n \t\t const basic_regex<_Ch_type, _Rx_traits>& __e,\n \t\t regex_constants::match_flag_type __f\n \t\t = regex_constants::match_default)\n@@ -2249,7 +2211,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef const value_type&                  reference;\n       typedef std::forward_iterator_tag          iterator_category;\n \n-    public:\n       /**\n        * @brief Provides a singular iterator, useful for indicating\n        * one-past-the-end of a range.\n@@ -2506,11 +2467,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** @brief Token iterator for C-style NULL-terminated strings. */\n   typedef regex_token_iterator<const char*>             cregex_token_iterator;\n+\n   /** @brief Token iterator for standard strings. */\n   typedef regex_token_iterator<string::const_iterator>  sregex_token_iterator;\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   /** @brief Token iterator for C-style NULL-terminated wide strings. */\n   typedef regex_token_iterator<const wchar_t*>          wcregex_token_iterator;\n+\n   /** @brief Token iterator for standard wide-character strings. */\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;\n #endif"}, {"sha": "5b1aaa10fab4af4e25acce359ac7db42253d726e", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,10 +30,16 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   * @addtogroup regex-detail\n+   * @{\n+   */\n+\n+  /// Base class for scanner.\n   struct _Scanner_base\n   {\n     typedef unsigned int _StateT;\n@@ -45,16 +51,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual ~_Scanner_base() { };\n   };\n \n-  //\n-  // @brief Scans an input range for regex tokens.\n-  //\n-  // The %_Scanner class interprets the regular expression pattern in the input\n-  // range passed to its constructor as a sequence of parse tokens passed to\n-  // the regular expression compiler.  The sequence of tokens provided depends\n-  // on the flag settings passed to the constructor:  different regular\n-  // expression grammars will interpret the same input pattern in\n-  // syntactically different ways.\n-  //\n+  /**\n+   * @brief struct _Scanner. Scans an input range for regex tokens.\n+   *\n+   * The %_Scanner class interprets the regular expression pattern in\n+   * the input range passed to its constructor as a sequence of parse\n+   * tokens passed to the regular expression compiler.  The sequence\n+   * of tokens provided depends on the flag settings passed to the\n+   * constructor: different regular expression grammars will interpret\n+   * the same input pattern in syntactically different ways.\n+   */\n   template<typename _InputIterator>\n     class _Scanner: public _Scanner_base\n     {\n@@ -65,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef regex_constants::syntax_option_type                   _FlagT;\n       typedef const std::ctype<_CharT>                              _CtypeT;\n \n-      // Token types returned from the scanner.\n+      /// Token types returned from the scanner.\n       enum _TokenT\n       {\n \t_S_token_anychar,\n@@ -99,7 +105,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_token_unknown\n       };\n \n-    public:\n       _Scanner(_IteratorT __begin, _IteratorT __end, _FlagT __flags,\n \t       std::locale __loc)\n       : _M_current(__begin) , _M_end(__end) , _M_flags(__flags),\n@@ -141,7 +146,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_eat_collsymbol();\n \n-    private:\n       _IteratorT  _M_current;\n       _IteratorT  _M_end;\n       _FlagT      _M_flags;\n@@ -625,7 +629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n-  // Builds an NFA from an input iterator interval.\n+  /// Builds an NFA from an input iterator interval.\n   template<typename _InIter, typename _TraitsT>\n     class _Compiler\n     {\n@@ -635,7 +639,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::basic_string<_CharT>                          _StringT;\n       typedef regex_constants::syntax_option_type                _FlagT;\n \n-    public:\n       _Compiler(const _InIter& __b, const _InIter& __e,\n \t\t_TraitsT& __traits, _FlagT __flags);\n \n@@ -704,7 +707,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       int\n       _M_cur_int_value(int __radix);\n \n-    private:\n       _TraitsT&      _M_traits;\n       _ScannerT      _M_scanner;\n       _StringT       _M_cur_value;\n@@ -1102,8 +1104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return _AutomatonPtr(new _Nfa(_Compiler<_InIter, _TraitsT>(__b, __e, __t,\n                                         __f)._M_nfa())); }\n \n+ //@} regex-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n+} // namespace __detail\n } // namespace std\n-\n-/* vim: set ts=8 sw=2 sts=2: */"}, {"sha": "61052e9cb70038e0bb6f6053ea627f75b4266630", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,13 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+/**\n+ * @defgroup regex Regular Expressions\n+ *\n+ * A facility for performing regular expression pattern matching.\n+ * @{\n+ */\n+\n /**\n  * @namespace std::regex_constants\n  * @brief ISO C++-0x entities sub namespace for regex.\n@@ -76,28 +83,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Specifies that the matching of regular expressions against a character\n    * sequence shall be performed without regard to case.\n    */\n-  static constexpr syntax_option_type icase      = 1 << _S_icase;\n+  constexpr syntax_option_type icase      = 1 << _S_icase;\n \n   /**\n    * Specifies that when a regular expression is matched against a character\n    * container sequence, no sub-expression matches are to be stored in the\n    * supplied match_results structure.\n    */\n-  static constexpr syntax_option_type nosubs     = 1 << _S_nosubs;\n+  constexpr syntax_option_type nosubs     = 1 << _S_nosubs;\n \n   /**\n    * Specifies that the regular expression engine should pay more attention to\n    * the speed with which regular expressions are matched, and less to the\n    * speed with which regular expression objects are constructed. Otherwise\n    * it has no detectable effect on the program output.\n    */\n-  static constexpr syntax_option_type optimize   = 1 << _S_optimize;\n+  constexpr syntax_option_type optimize   = 1 << _S_optimize;\n \n   /**\n    * Specifies that character ranges of the form [a-b] should be locale\n    * sensitive.\n    */\n-  static constexpr syntax_option_type collate    = 1 << _S_collate;\n+  constexpr syntax_option_type collate    = 1 << _S_collate;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -107,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * in the PERL scripting language but extended with elements found in the\n    * POSIX regular expression grammar.\n    */\n-  static constexpr syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n+  constexpr syntax_option_type ECMAScript = 1 << _S_ECMAScript;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -116,15 +123,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n    * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  static constexpr syntax_option_type basic      = 1 << _S_basic;\n+  constexpr syntax_option_type basic      = 1 << _S_basic;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n    * Portable Operating System Interface (POSIX), Base Definitions and Headers,\n    * Section 9, Regular Expressions.\n    */\n-  static constexpr syntax_option_type extended   = 1 << _S_extended;\n+  constexpr syntax_option_type extended   = 1 << _S_extended;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n@@ -134,23 +141,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos;, &apos;,\n    * and \\\\ddd (where ddd is one, two, or three octal digits).  \n    */\n-  static constexpr syntax_option_type awk        = 1 << _S_awk;\n+  constexpr syntax_option_type awk        = 1 << _S_awk;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n    * identical to syntax_option_type basic, except that newlines are treated\n    * as whitespace.\n    */\n-  static constexpr syntax_option_type grep       = 1 << _S_grep;\n+  constexpr syntax_option_type grep       = 1 << _S_grep;\n \n   /**\n    * Specifies that the grammar recognized by the regular expression engine is\n    * that used by POSIX utility grep when given the -E option in\n    * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type \n    * extended, except that newlines are treated as whitespace.\n    */\n-  static constexpr syntax_option_type egrep      = 1 << _S_egrep;\n+  constexpr syntax_option_type egrep      = 1 << _S_egrep;\n \n   //@}\n \n@@ -193,56 +200,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    * The default matching rules.\n    */\n-  static constexpr match_flag_type match_default     = 0;\n+  constexpr match_flag_type match_default     = 0;\n \n   /**\n    * The first character in the sequence [first, last) is treated as though it\n    * is not at the beginning of a line, so the character (^) in the regular\n    * expression shall not match [first, first).\n    */\n-  static constexpr match_flag_type match_not_bol     = 1 << _S_not_bol;\n+  constexpr match_flag_type match_not_bol     = 1 << _S_not_bol;\n \n   /**\n    * The last character in the sequence [first, last) is treated as though it\n    * is not at the end of a line, so the character ($) in the regular\n    * expression shall not match [last, last).\n    */\n-  static constexpr match_flag_type match_not_eol     = 1 << _S_not_eol;\n+  constexpr match_flag_type match_not_eol     = 1 << _S_not_eol;\n    \n   /**\n    * The expression \\\\b is not matched against the sub-sequence\n    * [first,first).\n    */\n-  static constexpr match_flag_type match_not_bow     = 1 << _S_not_bow;\n+  constexpr match_flag_type match_not_bow     = 1 << _S_not_bow;\n    \n   /**\n    * The expression \\\\b should not be matched against the sub-sequence\n    * [last,last).\n    */\n-  static constexpr match_flag_type match_not_eow     = 1 << _S_not_eow;\n+  constexpr match_flag_type match_not_eow     = 1 << _S_not_eow;\n    \n   /**\n    * If more than one match is possible then any match is an acceptable\n    * result.\n    */\n-  static constexpr match_flag_type match_any         = 1 << _S_any;\n+  constexpr match_flag_type match_any         = 1 << _S_any;\n    \n   /**\n    * The expression does not match an empty sequence.\n    */\n-  static constexpr match_flag_type match_not_null    = 1 << _S_not_null;\n+  constexpr match_flag_type match_not_null    = 1 << _S_not_null;\n    \n   /**\n    * The expression only matches a sub-sequence that begins at first .\n    */\n-  static constexpr match_flag_type match_continuous  = 1 << _S_continuous;\n+  constexpr match_flag_type match_continuous  = 1 << _S_continuous;\n    \n   /**\n    * --first is a valid iterator position.  When this flag is set then the\n    * flags match_not_bol and match_not_bow are ignored by the regular\n    * expression algorithms 28.11 and iterators 28.12.\n    */\n-  static constexpr match_flag_type match_prev_avail  = 1 << _S_prev_avail;\n+  constexpr match_flag_type match_prev_avail  = 1 << _S_prev_avail;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n@@ -270,32 +277,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *         undefined, use the empty string instead. If\n    *         nn > match_results::size(), the result is implementation-defined.\n    */\n-  static constexpr match_flag_type format_default    = 0;\n+  constexpr match_flag_type format_default    = 0;\n \n   /**\n    * When a regular expression match is to be replaced by a new string, the\n    * new string is constructed using the rules used by the POSIX sed utility\n    * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n    * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n    */\n-  static constexpr match_flag_type format_sed        = 1 << _S_sed;\n+  constexpr match_flag_type format_sed        = 1 << _S_sed;\n \n   /**\n    * During a search and replace operation, sections of the character\n    * container sequence being searched that do not match the regular\n    * expression shall not be copied to the output string.\n    */\n-  static constexpr match_flag_type format_no_copy    = 1 << _S_no_copy;\n+  constexpr match_flag_type format_no_copy    = 1 << _S_no_copy;\n \n   /**\n    * When specified during a search and replace operation, only the first\n    * occurrence of the regular expression shall be replaced.\n    */\n-  static constexpr match_flag_type format_first_only = 1 << _S_first_only;\n+  constexpr match_flag_type format_first_only = 1 << _S_first_only;\n \n   //@}\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace regex_constants\n-} // namespace\n+\n+/* @} */ // group regex\n+} // namespace std\n "}, {"sha": "281f3c14d9fdfae6fded47b3ea957af8fc6901c2", "filename": "libstdc++-v3/include/bits/regex_cursor.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,19 +30,25 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // ABC for pattern matching\n+  /**\n+   *  @defgroup regex-detail Base and Implementation Classes\n+   *  @ingroup regex\n+   *  @{\n+   */\n+\n+  /// ABC for pattern matching\n   struct _PatternCursor\n   {\n     virtual ~_PatternCursor() { };\n     virtual void _M_next() = 0;\n     virtual bool _M_at_end() const = 0;\n   };\n \n-  // Provides a cursor into the specific target string.\n+  /// Provides a cursor into the specific target string.\n   template<typename _FwdIterT>\n     class _SpecializedCursor\n     : public _PatternCursor\n@@ -88,6 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __cursor(const _FwdIterT& __b, const _FwdIterT __e)\n     { return _SpecializedCursor<_FwdIterT>(__b, __e); }\n \n+ //@} regex-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n+} // namespace __detail\n } // namespace"}, {"sha": "eec6212457945bb52b2baa4f8140cc64669a4090", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,11 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+/**\n+ * @addtogroup regex\n+ * @{\n+ */\n+\n namespace regex_constants\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -60,60 +65,60 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /** The expression contained an invalid collating element name. */\n-  static constexpr error_type error_collate(_S_error_collate);\n+  constexpr error_type error_collate(_S_error_collate);\n \n   /** The expression contained an invalid character class name. */\n-  static constexpr error_type error_ctype(_S_error_ctype);\n+  constexpr error_type error_ctype(_S_error_ctype);\n \n   /**\n    * The expression contained an invalid escaped character, or a trailing\n    * escape.\n    */\n-  static constexpr error_type error_escape(_S_error_escape);\n+  constexpr error_type error_escape(_S_error_escape);\n \n   /** The expression contained an invalid back reference. */\n-  static constexpr error_type error_backref(_S_error_backref);\n+  constexpr error_type error_backref(_S_error_backref);\n \n   /** The expression contained mismatched [ and ]. */\n-  static constexpr error_type error_brack(_S_error_brack);\n+  constexpr error_type error_brack(_S_error_brack);\n \n   /** The expression contained mismatched ( and ). */\n-  static constexpr error_type error_paren(_S_error_paren);\n+  constexpr error_type error_paren(_S_error_paren);\n \n   /** The expression contained mismatched { and } */\n-  static constexpr error_type error_brace(_S_error_brace);\n+  constexpr error_type error_brace(_S_error_brace);\n \n   /** The expression contained an invalid range in a {} expression. */\n-  static constexpr error_type error_badbrace(_S_error_badbrace);\n+  constexpr error_type error_badbrace(_S_error_badbrace);\n \n   /**\n    * The expression contained an invalid character range,\n    * such as [b-a] in most encodings.\n    */\n-  static constexpr error_type error_range(_S_error_range);\n+  constexpr error_type error_range(_S_error_range);\n \n   /**\n    * There was insufficient memory to convert the expression into a\n    * finite state machine.\n    */\n-  static constexpr error_type error_space(_S_error_space);\n+  constexpr error_type error_space(_S_error_space);\n \n   /**\n    * One of <em>*?+{</em> was not preceded by a valid regular expression.\n    */\n-  static constexpr error_type error_badrepeat(_S_error_badrepeat);\n+  constexpr error_type error_badrepeat(_S_error_badrepeat);\n \n   /**\n    * The complexity of an attempted match against a regular expression\n    * exceeded a pre-set level.\n    */\n-  static constexpr error_type error_complexity(_S_error_complexity);\n+  constexpr error_type error_complexity(_S_error_complexity);\n \n   /**\n    * There was insufficient memory to determine whether the\n    * regular expression could match the specified character sequence.\n    */\n-  static constexpr error_type error_stack(_S_error_stack);\n+  constexpr error_type error_stack(_S_error_stack);\n \n   //@}\n _GLIBCXX_END_NAMESPACE_VERSION\n@@ -153,6 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return _M_code; }\n   };\n \n+  //@} // group regex\n \n   void\n   __throw_regex_error(regex_constants::error_type __ecode);"}, {"sha": "9cade17f65570d7c53533491bfb6f854a4d36601", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,11 +40,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n   \n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // A _Results facade specialized for wrapping a templated match_results.\n+  /**\n+   *  @defgroup regex-detail Base and Implementation Classes\n+   *  @ingroup regex\n+   *  @{\n+   */\n+\n+  /// A _Results facade specialized for wrapping a templated match_results.\n   template<typename _FwdIterT, typename _Alloc>\n     class _SpecializedResults\n     : public _Results\n@@ -95,12 +101,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_results.at(__i).second = __c._M_pos()+1;\n     }\n \n-  // A stack of states used in evaluating the NFA.\n+  /// A stack of states used in evaluating the NFA.\n   typedef std::stack<_StateIdT, std::vector<_StateIdT> > _StateStack;\n \n-  // Executes a regular expression NFA/DFA over a range using a variant of\n-  // the parallel execution algorithm featured in the grep utility, modified\n-  // to use Laurikari tags.\n+  /// Executes a regular expression NFA/DFA over a range using a\n+  /// variant of the parallel execution algorithm featured in the grep\n+  /// utility, modified to use Laurikari tags.\n   class _Grep_matcher\n   {\n   public:\n@@ -119,14 +125,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _StateSet\n     _M_e_closure(_StateStack& __stack, const _StateSet& __s);\n \n-  private:\n     const std::shared_ptr<_Nfa>        _M_nfa;\n     _PatternCursor&                    _M_pattern;\n     _Results&                          _M_results;\n   };\n \n+ //@} regex-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n-} // namespace\n+} // namespace __detail\n+} // namespace std\n \n #include <bits/regex_grep_matcher.tcc>"}, {"sha": "5323046e4e30dcc690aa8bef190037e0e86cbb7f", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,26 +35,26 @@ namespace std _GLIBCXX_VISIBILITY(default)\n namespace\n {\n   // A stack of states used in evaluating the NFA.\n-  typedef std::stack<std::__regex::_StateIdT,\n-                     std::vector<std::__regex::_StateIdT>\n+  typedef std::stack<std::__detail::_StateIdT,\n+                     std::vector<std::__detail::_StateIdT>\n \t\t     > _StateStack;\n \n   // Obtains the next state set given the current state set __s and the current\n   // input character.\n-  inline std::__regex::_StateSet\n-  __move(const std::__regex::_PatternCursor& __p,\n-         const std::__regex::_Nfa& __nfa,\n-         const std::__regex::_StateSet& __s)\n+  inline std::__detail::_StateSet\n+  __move(const std::__detail::_PatternCursor& __p,\n+         const std::__detail::_Nfa& __nfa,\n+         const std::__detail::_StateSet& __s)\n   {\n-    std::__regex::_StateSet __m;\n-    for (std::__regex::_StateSet::const_iterator __i = __s.begin();\n+    std::__detail::_StateSet __m;\n+    for (std::__detail::_StateSet::const_iterator __i = __s.begin();\n \t __i != __s.end(); ++__i)\n       {\n-\tif (*__i == std::__regex::_S_invalid_state_id)\n+\tif (*__i == std::__detail::_S_invalid_state_id)\n \t  continue;\n \n-\tconst std::__regex::_State& __state = __nfa[*__i];\n-\tif (__state._M_opcode == std::__regex::_S_opcode_match\n+\tconst std::__detail::_State& __state = __nfa[*__i];\n+\tif (__state._M_opcode == std::__detail::_S_opcode_match\n \t    && __state._M_matches(__p))\n \t  __m.insert(__state._M_next);\n       }\n@@ -63,13 +63,13 @@ namespace\n \n   // returns true if (__s intersect __t) is not empty\n   inline bool\n-  __includes_some(const std::__regex::_StateSet& __s,\n-                  const std::__regex::_StateSet& __t)\n+  __includes_some(const std::__detail::_StateSet& __s,\n+                  const std::__detail::_StateSet& __t)\n   {\n     if (__s.size() > 0 && __t.size() > 0)\n       {\n-\tstd::__regex::_StateSet::const_iterator __first = __s.begin();\n-\tstd::__regex::_StateSet::const_iterator __second = __t.begin();\n+\tstd::__detail::_StateSet::const_iterator __first = __s.begin();\n+\tstd::__detail::_StateSet::const_iterator __second = __t.begin();\n \twhile (__first != __s.end() && __second != __t.end())\n \t  {\n \t    if (*__first < *__second)\n@@ -86,9 +86,9 @@ namespace\n   // If an identified state __u is not already in the current state set __e,\n   // insert it and push it on the current state stack __s.\n   inline void\n-  __add_visited_state(const std::__regex::_StateIdT __u,\n+  __add_visited_state(const std::__detail::_StateIdT __u,\n                       _StateStack&                  __s,\n-                      std::__regex::_StateSet&      __e)\n+                      std::__detail::_StateSet&      __e)\n   {\n     if (__e.count(__u) == 0)\n       {\n@@ -99,7 +99,7 @@ namespace\n \n } // anonymous namespace\n \n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n@@ -109,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\tregex_constants::match_flag_type __flags)\n   : _M_nfa(static_pointer_cast<_Nfa>(__nfa)), _M_pattern(__p), _M_results(__r)\n   {\n-    __regex::_StateSet __t = this->_M_e_closure(_M_nfa->_M_start());\n+    __detail::_StateSet __t = this->_M_e_closure(_M_nfa->_M_start());\n     for (; !_M_pattern._M_at_end(); _M_pattern._M_next())\n       __t = this->_M_e_closure(__move(_M_pattern, *_M_nfa, __t));\n \n@@ -175,5 +175,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n+} // namespace __detail\n } // namespace"}, {"sha": "234fa20c3473f832b982bb87b5a08d0de3678674", "filename": "libstdc++-v3/include/bits/regex_nfa.h", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.h?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,11 +30,16 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // Base class for, um, automata.  Could be an NFA or a DFA.  Your choice.\n+  /**\n+   * @addtogroup regex-detail\n+   * @{\n+   */\n+\n+  /// Base class for, um, automata.  Could be an NFA or a DFA.  Your choice.\n   class _Automaton\n   {\n   public:\n@@ -53,11 +58,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n-  // Generic shared pointer to an automaton.  \n+  /// Generic shared pointer to an automaton.  \n   typedef std::shared_ptr<_Automaton> _AutomatonPtr;\n \n-  // Operation codes that define the type of transitions within the base NFA\n-  // that represents the regular expression.\n+  /// Operation codes that define the type of transitions within the base NFA\n+  /// that represents the regular expression.\n   enum _Opcode\n   {\n       _S_opcode_unknown       =   0,\n@@ -68,16 +73,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_opcode_accept        = 255\n   };\n \n-  // Provides a generic facade for a templated match_results.\n+  /// Provides a generic facade for a templated match_results.\n   struct _Results\n   {\n     virtual void _M_set_pos(int __i, int __j, const _PatternCursor& __p) = 0;\n     virtual void _M_set_matched(int __i, bool __is_matched) = 0;\n   };\n \n-  // Tags current state (for subexpr begin/end).\n+  /// Tags current state (for subexpr begin/end).\n   typedef std::function<void (const _PatternCursor&, _Results&)> _Tagger;\n \n+  /// Start state tag.\n   template<typename _FwdIterT, typename _TraitsT>\n     struct _StartTagger\n     {\n@@ -93,6 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       int       _M_index;\n     };\n \n+  /// End state tag.\n   template<typename _FwdIterT, typename _TraitsT>\n     struct _EndTagger\n     {\n@@ -108,15 +115,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       int       _M_index;\n       _FwdIterT _M_pos;\n     };\n-  // Indicates if current state matches cursor current.\n+\n+  /// Indicates if current state matches cursor current.\n   typedef std::function<bool (const _PatternCursor&)> _Matcher;\n \n-  // Matches any character\n+  /// Matches any character\n   inline bool\n   _AnyMatcher(const _PatternCursor&)\n   { return true; }\n \n-  // Matches a single character\n+  /// Matches a single character\n   template<typename _InIterT, typename _TraitsT>\n     struct _CharMatcher\n     {\n@@ -139,7 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       char_type       _M_c;\n     };\n \n-  // Matches a character range (bracket expression)\n+  /// Matches a character range (bracket expression)\n   template<typename _InIterT, typename _TraitsT>\n     struct _RangeMatcher\n     {\n@@ -183,20 +191,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool            _M_is_non_matching;\n     };\n \n-  // Identifies a state in the NFA.\n+  /// Identifies a state in the NFA.\n   typedef int _StateIdT;\n \n-  // The special case in which a state identifier is not an index.\n+  /// The special case in which a state identifier is not an index.\n   static const _StateIdT _S_invalid_state_id  = -1;\n \n \n-  // An individual state in an NFA\n-  //\n-  // In this case a \"state\" is an entry in the NFA definition coupled with its\n-  // outgoing transition(s).  All states have a single outgoing transition,\n-  // except for accepting states (which have no outgoing transitions) and alt\n-  // states, which have two outgoing transitions.\n-  //\n+  /**\n+   * @brief struct _State\n+   *\n+   * An individual state in an NFA\n+   *\n+   * In this case a \"state\" is an entry in the NFA definition coupled\n+   * with its outgoing transition(s).  All states have a single outgoing\n+   * transition, except for accepting states (which have no outgoing\n+   * transitions) and alt states, which have two outgoing transitions.\n+   */\n   struct _State\n   {\n     typedef int  _OpcodeT;\n@@ -236,22 +247,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   \n-  // The Grep Matcher works on sets of states.  Here are sets of states.\n+  /// The Grep Matcher works on sets of states.  Here are sets of states.\n   typedef std::set<_StateIdT> _StateSet;\n \n- // A collection of all states making up an NFA\n-  //\n-  // An NFA is a 4-tuple M = (K, S, s, F), where\n-  //    K is a finite set of states,\n-  //    S is the alphabet of the NFA,\n-  //    s is the initial state,\n-  //    F is a set of final (accepting) states.\n-  //\n-  // This NFA class is templated on S, a type that will hold values of the\n-  // underlying alphabet (without regard to semantics of that alphabet).  The\n-  // other elements of the tuple are generated during construction of the NFA\n-  // and are available through accessor member functions.\n-  //\n+  /**\n+   * @brief struct _Nfa\n+   *\n+   * A collection of all states making up an NFA.\n+   *\n+   * An NFA is a 4-tuple M = (K, S, s, F), where\n+   *    K is a finite set of states,\n+   *    S is the alphabet of the NFA,\n+   *    s is the initial state,\n+   *    F is a set of final (accepting) states.\n+   *\n+   * This NFA class is templated on S, a type that will hold values of the\n+   * underlying alphabet (without regard to semantics of that alphabet).  The\n+   * other elements of the tuple are generated during construction of the NFA\n+   * and are available through accessor member functions.\n+   */\n   class _Nfa\n   : public _Automaton, public std::vector<_State>\n   {\n@@ -260,7 +274,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typedef unsigned int                        _SizeT;\n     typedef regex_constants::syntax_option_type _FlagT;\n \n-  public:\n     _Nfa(_FlagT __f)\n     : _M_flags(__f), _M_start_state(0), _M_subexpr_count(0)\n     { }\n@@ -309,7 +322,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _StateIdT\n     _M_insert_subexpr_begin(const _Tagger& __t)\n     {\n-      this->push_back(_StateT(_S_opcode_subexpr_begin, _M_subexpr_count++, __t));\n+      this->push_back(_StateT(_S_opcode_subexpr_begin, _M_subexpr_count++,\n+\t\t\t      __t));\n       return this->size()-1;\n     }\n \n@@ -332,9 +346,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _SizeT     _M_subexpr_count;\n   };\n \n-  // Describes a sequence of one or more %_State, its current start and end(s).\n-  //\n-  // This structure contains fragments of an NFA during construction.\n+  /// Describes a sequence of one or more %_State, its current start\n+  /// and end(s).  This structure contains fragments of an NFA during\n+  /// construction.\n   class _StateSeq\n   {\n   public:\n@@ -392,8 +406,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   };\n \n+ //@} regex-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n+} // namespace __detail\n } // namespace std\n \n #include <bits/regex_nfa.tcc>"}, {"sha": "c48ebe3ac0e9205122d4183a3094855dd7119e5f", "filename": "libstdc++-v3/include/bits/regex_nfa.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_nfa.tcc?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,7 +31,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-namespace __regex\n+namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n@@ -170,5 +170,5 @@ _M_clone()\n { return 0; }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace __regex\n+} // namespace __detail\n } // namespace"}, {"sha": "104fc4be16848d6d8050a73325e22d84a99fd81a", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 263 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 262 }"}]}