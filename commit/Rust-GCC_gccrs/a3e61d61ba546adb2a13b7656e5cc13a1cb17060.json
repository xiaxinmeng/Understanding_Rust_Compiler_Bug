{"sha": "a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlNjFkNjFiYTU0NmFkYjJhMTNiNzY1NmU1Y2MxM2ExY2IxNzA2MA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2017-09-15T16:20:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-15T16:20:21Z"}, "message": "Add comments to struct cgraph_thunk_info\n\nThis commit adds comments to fields in the cgraph_thunk_info structure\ndeclaration from cgraph.h.  They will hopefully answer questions that\npeople like myself can ask while discovering the thunk machinery.  I\nalso made an assertion stricter in cgraph_node::create_thunk.\n\nBootsrapped and regtested on x86_64-linux.\n\ngcc/\n\n\t* cgraph.h (cgraph_thunk_info): Add comments.\n\t* cgraph.c (cgraph_node::create_thunk): Adjust comment, make\n\tassert for VIRTUAL_* arguments stricter.\n\nFrom-SVN: r252828", "tree": {"sha": "5622929d75f96b1b8b73f3fb8003a4e7ac7b6f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5622929d75f96b1b8b73f3fb8003a4e7ac7b6f8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed17cb57b8ddfa4d0c48e0428d0b1df4384a90c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17cb57b8ddfa4d0c48e0428d0b1df4384a90c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed17cb57b8ddfa4d0c48e0428d0b1df4384a90c5"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "b3d3407f17182fbbb0091b1784594315867fedf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "patch": "@@ -1,3 +1,9 @@\n+2017-09-15  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* cgraph.h (cgraph_thunk_info): Add comments.\n+\t* cgraph.c (cgraph_node::create_thunk): Adjust comment, make\n+\tassert for VIRTUAL_* arguments stricter.\n+\n 2017-09-15  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \tPR tree-optimization/71026"}, {"sha": "8bffdec8fb785e8e9abee7fa4e746c7803cde7ff", "filename": "gcc/cgraph.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "patch": "@@ -603,7 +603,7 @@ cgraph_node::create_same_body_alias (tree alias, tree decl)\n \n /* Add thunk alias into callgraph.  The alias declaration is ALIAS and it\n    aliases DECL with an adjustments made into the first parameter.\n-   See comments in thunk_adjust for detail on the parameters.  */\n+   See comments in struct cgraph_thunk_info for detail on the parameters.  */\n \n cgraph_node *\n cgraph_node::create_thunk (tree alias, tree, bool this_adjusting,\n@@ -619,13 +619,17 @@ cgraph_node::create_thunk (tree alias, tree, bool this_adjusting,\n     node->reset ();\n   else\n     node = cgraph_node::create (alias);\n-  gcc_checking_assert (!virtual_offset\n-\t\t       || wi::eq_p (virtual_offset, virtual_value));\n+\n+  /* Make sure that if VIRTUAL_OFFSET is in sync with VIRTUAL_VALUE.  */\n+  gcc_checking_assert (virtual_offset\n+\t\t       ? wi::eq_p (virtual_offset, virtual_value)\n+\t\t       : virtual_value == 0);\n+\n   node->thunk.fixed_offset = fixed_offset;\n-  node->thunk.this_adjusting = this_adjusting;\n   node->thunk.virtual_value = virtual_value;\n-  node->thunk.virtual_offset_p = virtual_offset != NULL;\n   node->thunk.alias = real_alias;\n+  node->thunk.this_adjusting = this_adjusting;\n+  node->thunk.virtual_offset_p = virtual_offset != NULL;\n   node->thunk.thunk_p = true;\n   node->definition = true;\n "}, {"sha": "c668b37ef828db020166221eb6f9f39137f9e676", "filename": "gcc/cgraph.h", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e61d61ba546adb2a13b7656e5cc13a1cb17060/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=a3e61d61ba546adb2a13b7656e5cc13a1cb17060", "patch": "@@ -629,17 +629,48 @@ extern const char * const cgraph_availability_names[];\n extern const char * const ld_plugin_symbol_resolution_names[];\n extern const char * const tls_model_names[];\n \n-/* Information about thunk, used only for same body aliases.  */\n+/* Sub-structure of cgraph_node.  Holds information about thunk, used only for\n+   same body aliases.\n+\n+   Thunks are basically wrappers around methods which are introduced in case\n+   of multiple inheritance in order to adjust the value of the \"this\" pointer\n+   or of the returned value.\n+\n+   In the case of this-adjusting thunks, each back-end can override the\n+   can_output_mi_thunk/output_mi_thunk target hooks to generate a minimal thunk\n+   (with a tail call for instance) directly as assembly.  For the default hook\n+   or for the case where the can_output_mi_thunk hooks return false, the thunk\n+   is gimplified and lowered using the regular machinery.  */\n \n struct GTY(()) cgraph_thunk_info {\n-  /* Information about the thunk.  */\n+  /* Offset used to adjust \"this\".  */\n   HOST_WIDE_INT fixed_offset;\n+\n+  /* Offset in the virtual table to get the offset to adjust \"this\".  Valid iff\n+     VIRTUAL_OFFSET_P is true.  */\n   HOST_WIDE_INT virtual_value;\n+\n+  /* Thunk target, i.e. the method that this thunk wraps.  Depending on the\n+     TARGET_USE_LOCAL_THUNK_ALIAS_P macro, this may have to be a new alias.  */\n   tree alias;\n+\n+  /* Nonzero for a \"this\" adjusting thunk and zero for a result adjusting\n+     thunk.  */\n   bool this_adjusting;\n+\n+  /* If true, this thunk is what we call a virtual thunk.  In this case:\n+     * for this-adjusting thunks, after the FIXED_OFFSET based adjustment is\n+       done, add to the result the offset found in the vtable at:\n+\t vptr + VIRTUAL_VALUE\n+     * for result-adjusting thinks, the FIXED_OFFSET adjustment is done after\n+       the virtual one.  */\n   bool virtual_offset_p;\n+\n+  /* ??? True for special kind of thunks, seems related to instrumentation.  */\n   bool add_pointer_bounds_args;\n-  /* Set to true when alias node is thunk.  */\n+\n+  /* Set to true when alias node (the cgraph_node to which this struct belong)\n+     is a thunk.  Access to any other fields is invalid if this is false.  */\n   bool thunk_p;\n };\n \n@@ -983,7 +1014,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n \n   /* Add thunk alias into callgraph.  The alias declaration is ALIAS and it\n      aliases DECL with an adjustments made into the first parameter.\n-     See comments in thunk_adjust for detail on the parameters.  */\n+     See comments in struct cgraph_thunk_info for detail on the parameters.  */\n   cgraph_node * create_thunk (tree alias, tree, bool this_adjusting,\n \t\t\t      HOST_WIDE_INT fixed_offset,\n \t\t\t      HOST_WIDE_INT virtual_value,"}]}