{"sha": "921c44189aae73ef85ea7ac4712e54f667fdd4f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxYzQ0MTg5YWFlNzNlZjg1ZWE3YWM0NzEyZTU0ZjY2N2ZkZDRmNg==", "commit": {"author": {"name": "Rask Ingemann Lambertsen", "email": "rask@sygehus.dk", "date": "2007-09-09T19:21:59Z"}, "committer": {"name": "Rask Ingemann Lambertsen", "email": "rask@gcc.gnu.org", "date": "2007-09-09T19:21:59Z"}, "message": "re PR target/30315 (optimize unsigned-add overflow test on x86 to use cpu flags from addl)\n\n\tPR target/30315\n\t* config/i386/i386.h (CANONICALIZE_COMPARISON): Delete.\n\t* simplify-rtx.c (simplify_relational_operation_1): Add the\n\tcanonicalization from i386.h.\n\t* doc/md.texi (Canonicalization of Instructions): Document it.\n\nFrom-SVN: r128305", "tree": {"sha": "9cf93feb394109316dfdca4d1a5926ddbe2320f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf93feb394109316dfdca4d1a5926ddbe2320f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/921c44189aae73ef85ea7ac4712e54f667fdd4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921c44189aae73ef85ea7ac4712e54f667fdd4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/921c44189aae73ef85ea7ac4712e54f667fdd4f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/921c44189aae73ef85ea7ac4712e54f667fdd4f6/comments", "author": null, "committer": null, "parents": [{"sha": "0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0098d8068657d4d1aa61585993a0a3e5ef6be2c8"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "4c58b2865f5b7c153cd8653e2748797771f7434f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=921c44189aae73ef85ea7ac4712e54f667fdd4f6", "patch": "@@ -1,3 +1,11 @@\n+2007-09-09  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n+\n+\tPR target/30315\n+\t* config/i386/i386.h (CANONICALIZE_COMPARISON): Delete.\n+\t* simplify-rtx.c (simplify_relational_operation_1): Add the\n+\tcanonicalization from i386.h.\n+\t* doc/md.texi (Canonicalization of Instructions): Document it.\n+\n 2007-09-09  Jan Hubicka  <jh@suse.cz>\n             Dwarakanath Rajagopal <dwarak.rajagopal@amd.com>\n "}, {"sha": "4f8a531ed6fd6ff1e80c014d517221cdd8f4199d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=921c44189aae73ef85ea7ac4712e54f667fdd4f6", "patch": "@@ -2070,16 +2070,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define SELECT_CC_MODE(OP, X, Y) ix86_cc_mode ((OP), (X), (Y))\n \n-/* Canonicalize overflow checks to save on the insn patterns. We change\n-   \"a + b < b\" into \"a + b < a\" and \"a + b >= b\" into \"a + b >= a\".  */\n-#define CANONICALIZE_COMPARISON(code, op0, op1)\t\\\n-{\t\t\t\t\t\t\\\n-  if ((code == LTU || code == GEU)\t\t\\\n-      && GET_CODE (op0) == PLUS\t\t\t\\\n-      && rtx_equal_p (op1, XEXP (op0, 1)))\t\\\n-    op1 = XEXP (op0, 0);\t\t\t\\\n-}\n-\n /* Return nonzero if MODE implies a floating point inequality can be\n    reversed.  */\n "}, {"sha": "c75b9838af152d07a3ccabce0c48aabbcdecf366", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=921c44189aae73ef85ea7ac4712e54f667fdd4f6", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,\n-@c 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+@c 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -5513,6 +5513,11 @@ An operand of @code{neg}, @code{not}, @code{mult}, @code{plus}, or\n @code{minus} is made the first operand under the same conditions as\n above.\n \n+@item\n+@code{(ltu (plus @var{a} @var{b}) @var{b})} is converted to\n+@code{(ltu (plus @var{a} @var{b}) @var{a})}. Likewise with @code{geu} instead\n+of @code{ltu}.\n+\n @item\n @code{(minus @var{x} (const_int @var{n}))} is converted to\n @code{(plus @var{x} (const_int @var{-n}))}."}, {"sha": "02f9e2b4c36e7bc47470c22433d6196a8dfd3eab", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/921c44189aae73ef85ea7ac4712e54f667fdd4f6/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=921c44189aae73ef85ea7ac4712e54f667fdd4f6", "patch": "@@ -3813,6 +3813,12 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t}\n     }\n \n+  /* Canonicalize (LTU/GEU (PLUS a b) b) as (LTU/GEU (PLUS a b) a).  */\n+  if ((code == LTU || code == GEU)\n+      && GET_CODE (op0) == PLUS\n+      && rtx_equal_p (op1, XEXP (op0, 1)))\n+    return simplify_gen_relational (code, mode, cmp_mode, op0, XEXP (op0, 0));\n+\n   if (op1 == const0_rtx)\n     {\n       /* Canonicalize (GTU x 0) as (NE x 0).  */"}]}