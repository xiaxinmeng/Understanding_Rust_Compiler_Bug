{"sha": "e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzZjdjY2YxNTllMzdlNjFmY2UwMzdiNWMwZGY1OWUwNDdmYTZiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T10:59:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T10:59:25Z"}, "message": "[multiple changes]\n\n2014-02-19  Yannick Moy  <moy@adacore.com>\n\n\t* sinfo.ads: Minor comment update.\n\n2014-02-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* atree.ads: Minor reformatting (change Entity_Info to Einfo).\n\n2014-02-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch7.adb (Find_Node_To_Be_Wrapped): An assignment statement\n\tthat has the No_Ctrl_Actions flag is a suitable node to be\n\twrapped if the assigned expression has no finalization actions.\n\t* sem_eval.adb (Eval_Entity_Name): For a compile time known\n\tboolean value, mark the corresponding condition SCO as constant.\n\n2014-02-19  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb: Minor reformatting.\n\t* exp_util.ads (Matching_Standard_Type): New function.\n\t* exp_ch7.adb: Minor reformatting.\n\n2014-02-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Get_Cursor_Type): Use scope of iterable type\n\tto find declaration for Cursor, to handle properly the case of\n\ta discriminated iterable type.\n\n2014-02-19  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (GNATCmd): Always replace the object dirs of\n\timported library projects with the library ALI dirs, when setting\n\tthe object paths.\n\t* prj-env.ads (Ada_Objects_Path): Correct comments about\n\targument Including_Libraries.\n\nFrom-SVN: r207888", "tree": {"sha": "512339d8d5c47e1ed090cf7aaa7d72d449b57b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/512339d8d5c47e1ed090cf7aaa7d72d449b57b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/comments", "author": null, "committer": null, "parents": [{"sha": "4877d85f404cfaa4eb33a5efd178d7f6d0e65769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4877d85f404cfaa4eb33a5efd178d7f6d0e65769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4877d85f404cfaa4eb33a5efd178d7f6d0e65769"}], "stats": {"total": 219, "additions": 193, "deletions": 26}, "files": [{"sha": "92b835580d674cad46cf9b2979c6eb20e454a122", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -1,3 +1,39 @@\n+2014-02-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinfo.ads: Minor comment update.\n+\n+2014-02-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* atree.ads: Minor reformatting (change Entity_Info to Einfo).\n+\n+2014-02-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Node_To_Be_Wrapped): An assignment statement\n+\tthat has the No_Ctrl_Actions flag is a suitable node to be\n+\twrapped if the assigned expression has no finalization actions.\n+\t* sem_eval.adb (Eval_Entity_Name): For a compile time known\n+\tboolean value, mark the corresponding condition SCO as constant.\n+\n+2014-02-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb: Minor reformatting.\n+\t* exp_util.ads (Matching_Standard_Type): New function.\n+\t* exp_ch7.adb: Minor reformatting.\n+\n+2014-02-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Get_Cursor_Type): Use scope of iterable type\n+\tto find declaration for Cursor, to handle properly the case of\n+\ta discriminated iterable type.\n+\n+2014-02-19  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (GNATCmd): Always replace the object dirs of\n+\timported library projects with the library ALI dirs, when setting\n+\tthe object paths.\n+\t* prj-env.ads (Ada_Objects_Path): Correct comments about\n+\targument Including_Libraries.\n+\n 2014-02-19  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat_rm.texi: Minor spelling fixes."}, {"sha": "0603d113b4bebb941f4d4e11de3ca50752714161", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -47,18 +47,17 @@ package Atree is\n --  program internally. Syntactic and semantic information is combined in\n --  this tree. There is no separate symbol table structure.\n \n---  WARNING: There is a C version of this package. Any changes to this\n---  source file must be properly reflected in the C header file atree.h\n+--  WARNING: There is a C version of this package. Any changes to this source\n+--  file must be properly reflected in the C header file atree.h\n \n --  Package Atree defines the basic structure of the tree and its nodes and\n---  provides the basic abstract interface for manipulating the tree. Two\n---  other packages use this interface to define the representation of Ada\n---  programs using this tree format. The package Sinfo defines the basic\n---  representation of the syntactic structure of the program, as output\n---  by the parser. The package Entity_Info defines the semantic information\n---  which is added to the tree nodes that represent declared entities (i.e.\n---  the information which might typically be described in a separate symbol\n---  table structure).\n+--  provides the basic abstract interface for manipulating the tree. Two other\n+--  packages use this interface to define the representation of Ada programs\n+--  using this tree format. The package Sinfo defines the basic representation\n+--  of the syntactic structure of the program, as output by the parser. The\n+--  package Einfo defines the semantic information which is added to the tree\n+--  nodes that represent declared entities (i.e. the information which might\n+--  typically be described in a separate symbol table structure).\n \n --  The front end of the compiler first parses the program and generates a\n --  tree that is simply a syntactic representation of the program in abstract"}, {"sha": "79b609d56fd8e3acdb790c51cfdd6f1b2a1eb502", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -4184,10 +4184,15 @@ package body Exp_Ch7 is\n \n             --  Usually assignments are good candidate for wrapping except\n             --  when they have been generated as part of a controlled aggregate\n-            --  where the wrapping should take place more globally.\n+            --  where the wrapping should take place more globally. Note that\n+            --  No_Ctrl_Actions may be set also for non-controlled assignements\n+            --  in order to disable the use of dispatching _assign, so we need\n+            --  to test explicitly for a controlled type here.\n \n             when N_Assignment_Statement =>\n-               if No_Ctrl_Actions (The_Parent) then\n+               if No_Ctrl_Actions (The_Parent)\n+                 and then Needs_Finalization (Etype (Name (The_Parent)))\n+               then\n                   null;\n                else\n                   return The_Parent;"}, {"sha": "27559d7caff4ad49fb22d491fec63f397d1476ec", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -3950,6 +3950,43 @@ package body Exp_Util is\n       end if;\n    end Insert_Actions_After;\n \n+   ------------------------\n+   -- Insert_Declaration --\n+   ------------------------\n+\n+   procedure Insert_Declaration (N : Node_Id; Decl : Node_Id) is\n+      P : Node_Id;\n+\n+   begin\n+      pragma Assert (Nkind (N) in N_Subexpr);\n+\n+      --  Climb until we find a procedure or a package\n+\n+      P := Parent (N);\n+      loop\n+         if Is_List_Member (P) then\n+            exit when Nkind_In (Parent (P), N_Package_Specification,\n+                                            N_Package_Body,\n+                                            N_Subprogram_Body);\n+\n+            --  Special handling for handled sequence of statements, we must\n+            --  insert in the statements not the exception handlers!\n+\n+            if Nkind (Parent (P)) = N_Handled_Sequence_Of_Statements then\n+               P := First (Statements (Parent (P)));\n+               exit;\n+            end if;\n+         end if;\n+\n+         P := Parent (P);\n+      end loop;\n+\n+      --  Now do the insertion\n+\n+      Insert_Before (P, Decl);\n+      Analyze (Decl);\n+   end Insert_Declaration;\n+\n    ---------------------------------\n    -- Insert_Library_Level_Action --\n    ---------------------------------\n@@ -5924,6 +5961,68 @@ package body Exp_Util is\n               Constraints => List_Constr));\n    end Make_Subtype_From_Expr;\n \n+   ----------------------------\n+   -- Matching_Standard_Type --\n+   ----------------------------\n+\n+   function Matching_Standard_Type (Typ : Entity_Id) return Entity_Id is\n+      pragma Assert (Is_Scalar_Type (Typ));\n+      Siz : constant Uint := Esize (Typ);\n+\n+   begin\n+      --  Float-point cases\n+\n+      if Is_Floating_Point_Type (Typ) then\n+         if Siz <= Esize (Standard_Short_Float) then\n+            return Standard_Short_Float;\n+         elsif Siz <= Esize (Standard_Float) then\n+            return Standard_Float;\n+         elsif Siz <= Esize (Standard_Long_Float) then\n+            return Standard_Long_Float;\n+         elsif Siz <= Esize (Standard_Long_Long_Float) then\n+            return Standard_Long_Long_Float;\n+         else\n+            raise Program_Error;\n+         end if;\n+\n+      --  Integer cases (includes fixed-point types)\n+\n+      --  Unsigned cases (includes normal enumeration types)\n+\n+      elsif Is_Unsigned_Type (Typ) then\n+         if Siz <= Esize (Standard_Short_Short_Unsigned) then\n+            return Standard_Short_Short_Unsigned;\n+         elsif Siz <= Esize (Standard_Short_Unsigned) then\n+            return Standard_Short_Unsigned;\n+         elsif Siz <= Esize (Standard_Unsigned) then\n+            return Standard_Unsigned;\n+         elsif Siz <= Esize (Standard_Long_Unsigned) then\n+            return Standard_Long_Unsigned;\n+         elsif Siz <= Esize (Standard_Long_Long_Unsigned) then\n+            return Standard_Long_Long_Unsigned;\n+         else\n+            raise Program_Error;\n+         end if;\n+\n+      --  Signed cases\n+\n+      else\n+         if Siz <= Esize (Standard_Short_Short_Integer) then\n+            return Standard_Short_Short_Integer;\n+         elsif Siz <= Esize (Standard_Short_Integer) then\n+            return Standard_Short_Integer;\n+         elsif Siz <= Esize (Standard_Integer) then\n+            return Standard_Integer;\n+         elsif Siz <= Esize (Standard_Long_Integer) then\n+            return Standard_Long_Integer;\n+         elsif Siz <= Esize (Standard_Long_Long_Integer) then\n+            return Standard_Long_Long_Integer;\n+         else\n+            raise Program_Error;\n+         end if;\n+      end if;\n+   end Matching_Standard_Type;\n+\n    -----------------------------\n    -- May_Generate_Large_Temp --\n    -----------------------------"}, {"sha": "f14117c1926d6ba88b3dd559c095908f7d8f14ba", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -140,6 +140,18 @@ package Exp_Util is\n    --  generalize to expressions if there is a need but this is tricky to\n    --  implement because of short-circuits (among other things).???\n \n+   procedure Insert_Declaration (N : Node_Id; Decl : Node_Id);\n+   --  N must be a subexpression (Nkind in N_Subexpr). This is similar to\n+   --  Insert_Action (N, Decl), but inserts Decl outside the expression in\n+   --  which N appears. This is called Insert_Declaration because the intended\n+   --  use is for declarations that have no associated code. We can't go\n+   --  moving other kinds of things out of the current expression, since they\n+   --  could be executed conditionally (e.g. right operand of short circuit,\n+   --  or THEN/ELSE of if expression). This is currently used only in\n+   --  Modify_Tree_For_C mode, where it is needed because in C we have no\n+   --  way of having declarations within an expression (a really annoying\n+   --  limitation).\n+\n    procedure Insert_Library_Level_Action (N : Node_Id);\n    --  This procedure inserts and analyzes the node N as an action at the\n    --  library level for the current unit (i.e. it is attached to the\n@@ -678,6 +690,12 @@ package Exp_Util is\n    --  expression E. Unc_Typ is an unconstrained array or record, or\n    --  a classwide type.\n \n+   function Matching_Standard_Type (Typ : Entity_Id) return Entity_Id;\n+   --  Given a scalar subtype Typ, returns a matching type in standard that\n+   --  has the same object size value. For example, a 16 bit signed type will\n+   --  typically return Standard_Short_Integer. For fixed-point types, this\n+   --  will return integer types of the corresponding size.\n+\n    function May_Generate_Large_Temp (Typ : Entity_Id) return Boolean;\n    --  Determines if the given type, Typ, may require a large temporary of the\n    --  kind that causes back-end trouble if stack checking is enabled. The"}, {"sha": "5d8a935cb80597d83ce37b627e89cf634d9b1199", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -1040,6 +1040,7 @@ procedure GNATCmd is\n                 \"accept project file switches -vPx, -Pprj and -Xnam=val\");\n       New_Line;\n    end Non_VMS_Usage;\n+\n    ------------------\n    -- Process_Link --\n    ------------------\n@@ -2106,7 +2107,7 @@ begin\n          --  Set up the env vars for project path files\n \n          Prj.Env.Set_Ada_Paths\n-           (Project, Project_Tree, Including_Libraries => False);\n+           (Project, Project_Tree, Including_Libraries => True);\n \n          --  For gnatcheck, gnatstub, gnatmetric, gnatpp and gnatelim, create\n          --  a configuration pragmas file, if necessary."}, {"sha": "0bb0eb192aa87bdfc93c78bd356330a17b62b868", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -1681,8 +1681,6 @@ package body Prj.Env is\n          Path : Path_Name_Type;\n \n       begin\n-         --  ??? This is almost the equivalent of For_All_Source_Dirs\n-\n          if Process_Source_Dirs then\n \n             --  Add to path all source directories of this project if there are"}, {"sha": "21239b43ee827a1eb9c57f8786e9281b3cf9bf77", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -92,7 +92,7 @@ package Prj.Env is\n       Including_Libraries : Boolean := True) return String_Access;\n    --  Get the ADA_OBJECTS_PATH of a Project file. For the first call with the\n    --  exact same parameters, compute it and cache it. When Including_Libraries\n-   --  is False, the object directory of a library project is replaced with the\n+   --  is True, the object directory of a library project is replaced with the\n    --  library ALI directory of this project (usually the library directory of\n    --  the project, except when attribute Library_ALI_Dir is declared) except\n    --  when the library ALI directory does not contain any ALI file."}, {"sha": "7c4d266d98c9e1cc72e7195a69f651cc99438c66", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -128,9 +128,9 @@ package body Sem_Ch13 is\n    --  Uint value. If the value is inappropriate, then error messages are\n    --  posted as required, and a value of No_Uint is returned.\n \n-   function Get_Cursor_Type return Entity_Id;\n-   --  Find Cursor type by name in the current scope, used to resolve primitive\n-   --  operations of an iterable type.\n+   function Get_Cursor_Type (S : Entity_Id) return Entity_Id;\n+   --  Find Cursor type by name in the scope of an iterable type, for use in\n+   --  resolving the primitive operations of the type.\n \n    function Is_Operational_Item (N : Node_Id) return Boolean;\n    --  A specification for a stream attribute is allowed before the full type\n@@ -8059,7 +8059,7 @@ package body Sem_Ch13 is\n             T := Entity (ASN);\n \n             declare\n-               Cursor : constant Entity_Id := Get_Cursor_Type;\n+               Cursor : constant Entity_Id := Get_Cursor_Type (Scope (T));\n                Assoc  : Node_Id;\n                Expr   : Node_Id;\n             begin\n@@ -9749,7 +9749,7 @@ package body Sem_Ch13 is\n    -- Get_Cursor_Type --\n    ---------------------\n \n-   function Get_Cursor_Type return Entity_Id is\n+   function Get_Cursor_Type (S : Entity_Id) return Entity_Id is\n       C : Entity_Id;\n       E : Entity_Id;\n \n@@ -9758,7 +9758,7 @@ package body Sem_Ch13 is\n       --  used in iterable primitives.\n \n       C := Empty;\n-      E := First_Entity (Current_Scope);\n+      E := First_Entity (S);\n       while Present (E) loop\n          if Chars (E) = Name_Cursor and then Is_Type (E) then\n             C := E;\n@@ -11455,7 +11455,7 @@ package body Sem_Ch13 is\n       Expr  : Node_Id;\n \n       Prim   : Node_Id;\n-      Cursor : constant Entity_Id := Get_Cursor_Type;\n+      Cursor : constant Entity_Id := Get_Cursor_Type (Scope (Typ));\n \n       First_Id       : Entity_Id;\n       Next_Id        : Entity_Id;"}, {"sha": "51b84f6d9f0337cdf7a6a2cba43d4abae6b33c15", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -37,6 +37,7 @@ with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n+with Par_SCO;  use Par_SCO;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n@@ -1955,8 +1956,8 @@ package body Sem_Eval is\n \n       elsif Ekind (Def_Id) = E_Constant then\n \n-         --  Deferred constants must always be treated as nonstatic\n-         --  outside the scope of their full view.\n+         --  Deferred constants must always be treated as nonstatic outside the\n+         --  scope of their full view.\n \n          if Present (Full_View (Def_Id))\n            and then not In_Open_Scopes (Scope (Def_Id))\n@@ -1978,6 +1979,16 @@ package body Sem_Eval is\n                Validate_Static_Object_Name (N);\n             end if;\n \n+            --  Mark constant condition in SCOs\n+\n+            if Generate_SCO\n+              and then Comes_From_Source (N)\n+              and then Is_Boolean_Type (Etype (Def_Id))\n+              and then Compile_Time_Known_Value (N)\n+            then\n+               Set_SCO_Condition (N, Expr_Value_E (N) = Standard_True);\n+            end if;\n+\n             return;\n          end if;\n       end if;"}, {"sha": "cb8b0ee6a4d15fcb7ee184dbaee2183126e8ba45", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03f7ccf159e37e61fce037b5c0df59e047fa6b9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=e03f7ccf159e37e61fce037b5c0df59e047fa6b9", "patch": "@@ -550,7 +550,7 @@ package Sinfo is\n    --  do not lead to data dependences for subprograms can be safely ignored.\n \n    --  In addition pragma Debug statements are removed from the tree (rewritten\n-   --  to NULL stmt), since they should be taken into account in flow analysis.\n+   --  to NULL stmt), since they should be ignored in formal verification.\n \n    --  An error is also issued for missing subunits, similar to the warning\n    --  issued when generating code, to avoid formal verification of a partial"}]}