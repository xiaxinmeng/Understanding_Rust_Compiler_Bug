{"sha": "9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkMGYwYmM2YjNmZjA2NmI2YTBlMGZmZjE3OTFkNjY1NDU2ODlmZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-18T04:15:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-18T04:15:46Z"}, "message": "Correct gcc/go/gofrontend/lex.cc and libgo/aclocal.m4 to the versions in the gofrontend repo...\n\nCorrect gcc/go/gofrontend/lex.cc and libgo/aclocal.m4 to the versions\nin the gofrontend repo, which is supposed to be the master copy.\n\nRemove a few files in libgo that somehow were not deleted in the past.\n\nFrom-SVN: r242583", "tree": {"sha": "7b442b5b45c798240c72a27d8be3f688f14f1e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b442b5b45c798240c72a27d8be3f688f14f1e21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd/comments", "author": null, "committer": null, "parents": [{"sha": "54f0deb00f65f3c4936ca3be72096caac4dc48ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f0deb00f65f3c4936ca3be72096caac4dc48ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f0deb00f65f3c4936ca3be72096caac4dc48ab"}], "stats": {"total": 219, "additions": 7, "deletions": 212}, "files": [{"sha": "e834c13aaf9739c886f30e0884537ee4af8a4ef8", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "patch": "@@ -882,7 +882,7 @@ Lex::gather_identifier()\n \t      && (cc < '0' || cc > '9'))\n \t    {\n \t      // Check for an invalid character here, as we get better\n-\t      // error behavior if we swallow them as part of the\n+\t      // error behaviour if we swallow them as part of the\n \t      // identifier we are building.\n \t      if ((cc >= ' ' && cc < 0x7f)\n \t\t  || cc == '\\t'\n@@ -923,7 +923,7 @@ Lex::gather_identifier()\n \t    {\n \t      // There is no valid place for a non-ASCII character\n \t      // other than an identifier, so we get better error\n-\t      // handling behavior if we swallow this character after\n+\t      // handling behaviour if we swallow this character after\n \t      // giving an error.\n \t      if (!issued_error)\n \t\tgo_error_at(this->location(),"}, {"sha": "aefbad20a0b5dbf016866c6eba22dfb8a3bffd80", "filename": "libgo/aclocal.m4", "status": "modified", "additions": 5, "deletions": 89, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd/libgo%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd/libgo%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Faclocal.m4?ref=9bd0f0bc6b3ff066b6a0e0fff1791d66545689fd", "patch": "@@ -579,27 +579,6 @@ if test x\"${install_sh}\" != xset; then\n fi\n AC_SUBST(install_sh)])\n \n-# Copyright (C) 2003, 2005  Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n-\n-# serial 2\n-\n-# Check whether the underlying file-system supports filenames\n-# with a leading dot.  For instance MS-DOS doesn't.\n-AC_DEFUN([AM_SET_LEADING_DOT],\n-[rm -rf .tst 2>/dev/null\n-mkdir .tst 2>/dev/null\n-if test -d .tst; then\n-  am__leading_dot=.\n-else\n-  am__leading_dot=_\n-fi\n-rmdir .tst 2>/dev/null\n-AC_SUBST([am__leading_dot])])\n-\n # Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n # From Jim Meyering\n \n@@ -764,74 +743,6 @@ case $mkdir_p in\n esac\n ])\n \n-# Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2012\n-# Free Software Foundation, Inc.\n-#\n-# This file is free software; the Free Software Foundation\n-# gives unlimited permission to copy and/or distribute it,\n-# with or without modifications, as long as this notice is preserved.\n-\n-# serial 6\n-\n-# AM_ENABLE_MULTILIB([MAKEFILE], [REL-TO-TOP-SRCDIR])\n-# ---------------------------------------------------\n-# Add --enable-multilib to configure.\n-AC_DEFUN([AM_ENABLE_MULTILIB],\n-[m4_warn([obsolete], [$0 will be removed from Automake core soon.\n-Files implementing the \"multilib\" feature are (and will remain) available\n-to the 'contrib/' directory in the Automake distribution.])]dnl\n-[# Default to --enable-multilib\n-AC_ARG_ENABLE(multilib,\n-[  --enable-multilib       build many library versions (default)],\n-[case \"$enableval\" in\n-  yes) multilib=yes ;;\n-  no)  multilib=no ;;\n-  *)   AC_MSG_ERROR([bad value $enableval for multilib option]) ;;\n- esac],\n-\t      [multilib=yes])\n-\n-# We may get other options which we leave undocumented:\n-# --with-target-subdir, --with-multisrctop, --with-multisubdir\n-# See config-ml.in if you want the gory details.\n-\n-if test \"$srcdir\" = \".\"; then\n-  if test \"$with_target_subdir\" != \".\"; then\n-    multi_basedir=\"$srcdir/$with_multisrctop../$2\"\n-  else\n-    multi_basedir=\"$srcdir/$with_multisrctop$2\"\n-  fi\n-else\n-  multi_basedir=\"$srcdir/$2\"\n-fi\n-AC_SUBST(multi_basedir)\n-\n-# Even if the default multilib is not a cross compilation,\n-# it may be that some of the other multilibs are.\n-if test $cross_compiling = no && test $multilib = yes \\\n-   && test \"x${with_multisubdir}\" != x ; then\n-   cross_compiling=maybe\n-fi\n-\n-AC_OUTPUT_COMMANDS([\n-# Only add multilib support code if we just rebuilt the top-level\n-# Makefile.\n-case \" $CONFIG_FILES \" in\n- *\" ]m4_default([$1],Makefile)[ \"*)\n-   ac_file=]m4_default([$1],Makefile)[ . ${multi_basedir}/config-ml.in\n-   ;;\n-esac],\n-\t\t   [\n-srcdir=\"$srcdir\"\n-host=\"$host\"\n-target=\"$target\"\n-with_multisubdir=\"$with_multisubdir\"\n-with_multisrctop=\"$with_multisrctop\"\n-with_target_subdir=\"$with_target_subdir\"\n-ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n-multi_basedir=\"$multi_basedir\"\n-CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n-CC=\"$CC\"])])dnl\n-\n # Helper functions for option handling.                     -*- Autoconf -*-\n \n # Copyright (C) 2001, 2002, 2003, 2005, 2008, 2010 Free Software\n@@ -1077,6 +988,11 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n+m4_include([../config/depstand.m4])\n+m4_include([../config/lead-dot.m4])\n+m4_include([../config/multi.m4])\n+m4_include([../config/override.m4])\n+m4_include([../config/unwind_ipinfo.m4])\n m4_include([config/go.m4])\n m4_include([config/libtool.m4])\n m4_include([config/ltoptions.m4])"}, {"sha": "a5ebb1eb285116af391137bc94beac0c8a6834b4", "filename": "libgo/go/exp/html/testdata/webkit/pending-spec-changes-plain-text-unsafe.dat", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fpending-spec-changes-plain-text-unsafe.dat?ref=54f0deb00f65f3c4936ca3be72096caac4dc48ab"}, {"sha": "2f40e83babcdf5d287c0bf9463388fd7c2399e7f", "filename": "libgo/go/exp/html/testdata/webkit/plain-text-unsafe.dat", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fplain-text-unsafe.dat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fplain-text-unsafe.dat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fhtml%2Ftestdata%2Fwebkit%2Fplain-text-unsafe.dat?ref=54f0deb00f65f3c4936ca3be72096caac4dc48ab", "patch": "@@ -1,8 +0,0 @@\n-#data\n-FOO&#x000D;ZOO\n-#errors\n-#document\n-| <html>\n-|   <head>\n-|   <body>\n-|     \"FOO\rZOO\""}, {"sha": "17f73d4f569ff1f1c73b8195f445c41df24e8aa8", "filename": "libgo/runtime/go-trampoline.c", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fruntime%2Fgo-trampoline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f0deb00f65f3c4936ca3be72096caac4dc48ab/libgo%2Fruntime%2Fgo-trampoline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-trampoline.c?ref=54f0deb00f65f3c4936ca3be72096caac4dc48ab", "patch": "@@ -1,113 +0,0 @@\n-/* go-trampoline.c -- allocate a trampoline for a nested function.\n-\n-   Copyright 2009 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"config.h\"\n-\n-#include <stddef.h>\n-#include <stdint.h>\n-#include <unistd.h>\n-\n-#ifdef HAVE_SYS_MMAN_H\n-#include <sys/mman.h>\n-#endif\n-\n-#include \"runtime.h\"\n-#include \"arch.h\"\n-#include \"malloc.h\"\n-#include \"go-assert.h\"\n-\n-/* Trampolines need to run in memory that is both writable and\n-   executable.  In order to implement them, we grab a page of memory\n-   and mprotect it.  We fill in the page with trampolines as they are\n-   required.  When we run out of space, we drop the pointer to the\n-   page and allocate a new one.  The page will be freed by the garbage\n-   collector when there are no more variables of type func pointing to\n-   it.  */\n-\n-/* A lock to control access to the page of closures.  */\n-\n-static Lock trampoline_lock;\n-\n-/* The page of closures.  */\n-\n-static unsigned char *trampoline_page;\n-\n-/* The size of trampoline_page.  */\n-\n-static uintptr_t trampoline_page_size;\n-\n-/* The number of bytes we have used on trampoline_page.  */\n-\n-static uintptr_t trampoline_page_used;\n-\n-/* Allocate a trampoline of SIZE bytes that will use the closure in\n-   CLOSURE.  */\n-\n-void *\n-__go_allocate_trampoline (uintptr_t size, void *closure)\n-{\n-  uintptr_t ptr_size;\n-  uintptr_t full_size;\n-  unsigned char *ret;\n-\n-  /* Because the garbage collector only looks at aligned addresses, we\n-     need to store the closure at an aligned address to ensure that it\n-     sees it.  */\n-  ptr_size = sizeof (void *);\n-  full_size = (((size + ptr_size - 1) / ptr_size) * ptr_size);\n-  full_size += ptr_size;\n-\n-  runtime_lock (&trampoline_lock);\n-\n-  if (full_size < trampoline_page_size - trampoline_page_used)\n-    trampoline_page = NULL;\n-\n-  if (trampoline_page == NULL)\n-    {\n-      uintptr_t page_size;\n-      unsigned char *page;\n-\n-      page_size = getpagesize ();\n-      __go_assert (page_size >= full_size);\n-      page = (unsigned char *) runtime_mallocgc (2 * page_size - 1, 0, 0, 0);\n-      page = (unsigned char *) (((uintptr_t) page + page_size - 1)\n-\t\t\t\t& ~ (page_size - 1));\n-\n-#ifdef HAVE_SYS_MMAN_H\n-      {\n-\tint i;\n-\n-\ti = mprotect (page, page_size, PROT_READ | PROT_WRITE | PROT_EXEC);\n-\t__go_assert (i == 0);\n-      }\n-#endif\n-\n-      trampoline_page = page;\n-      trampoline_page_size = page_size;\n-      trampoline_page_used = 0;\n-    }\n-\n-  ret = trampoline_page + trampoline_page_used;\n-  trampoline_page_used += full_size;\n-\n-  runtime_unlock (&trampoline_lock);\n-\n-  __builtin_memcpy (ret + full_size - ptr_size, &closure, ptr_size);\n-\n-  return (void *) ret;\n-}\n-\n-/* Scan the trampoline page when running the garbage collector.  This\n-   just makes sure that the garbage collector sees the pointer in\n-   trampoline_page, so that the page itself is not freed if there are\n-   no other references to it.  */\n-\n-void\n-runtime_trampoline_scan (void (*addroot) (Obj))\n-{\n-  if (trampoline_page != NULL)\n-    addroot ((Obj){(byte *) &trampoline_page, sizeof trampoline_page, 0});\n-}"}]}