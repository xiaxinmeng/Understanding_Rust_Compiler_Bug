{"sha": "af02a866e673002ed038f42de832dc179c2be70f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwMmE4NjZlNjczMDAyZWQwMzhmNDJkZTgzMmRjMTc5YzJiZTcwZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-04-20T13:28:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:28:50Z"}, "message": "sem_attr.adb (Eval_Attribute, [...]): Catch more cases where this attribute can be evaluated at compile time.\n\n2009-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute, case Length): Catch more cases where\n\tthis attribute can be evaluated at compile time.\n\t(Eval_Attribute, case Range_Length): Same improvement\n\n\t* sem_eval.ads, sem_eval.adb (Compile_Time_Compare): New procedure\n\nFrom-SVN: r146420", "tree": {"sha": "4a29e935582d93705c8fce50251b42b4e20017c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a29e935582d93705c8fce50251b42b4e20017c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af02a866e673002ed038f42de832dc179c2be70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02a866e673002ed038f42de832dc179c2be70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af02a866e673002ed038f42de832dc179c2be70f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02a866e673002ed038f42de832dc179c2be70f/comments", "author": null, "committer": null, "parents": [{"sha": "fed5ae113c0cfdb7525cbdd8b0c18e26f512e9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed5ae113c0cfdb7525cbdd8b0c18e26f512e9c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed5ae113c0cfdb7525cbdd8b0c18e26f512e9c6"}], "stats": {"total": 119, "additions": 109, "deletions": 10}, "files": [{"sha": "d4545c0a1e55f6425b0a04b080ae4dc4177e0fcc", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=af02a866e673002ed038f42de832dc179c2be70f", "patch": "@@ -6168,13 +6168,42 @@ package body Sem_Attr is\n \n          Set_Bounds;\n \n+         --  For two compile time values, we can compute length\n+\n          if Compile_Time_Known_Value (Lo_Bound)\n            and then Compile_Time_Known_Value (Hi_Bound)\n          then\n             Fold_Uint (N,\n               UI_Max (0, 1 + (Expr_Value (Hi_Bound) - Expr_Value (Lo_Bound))),\n               True);\n          end if;\n+\n+         --  One more case is where Hi_Bound and Lo_Bound are compile-time\n+         --  comparable, and we can figure out the difference between them.\n+\n+         declare\n+            Diff : aliased Uint;\n+\n+         begin\n+            case\n+              Compile_Time_Compare\n+                (Lo_Bound, Hi_Bound, Diff'Access, Assume_Valid => False)\n+            is\n+               when EQ =>\n+                  Fold_Uint (N, Uint_1, False);\n+\n+               when GT =>\n+                  Fold_Uint (N, Uint_0, False);\n+\n+               when LT =>\n+                  if Diff /= No_Uint then\n+                     Fold_Uint (N, Diff + 1, False);\n+                  end if;\n+\n+               when others =>\n+                  null;\n+            end case;\n+         end;\n       end Length;\n \n       -------------\n@@ -6666,6 +6695,8 @@ package body Sem_Attr is\n       when Attribute_Range_Length =>\n          Set_Bounds;\n \n+         --  Can fold if both bounds are compile time known\n+\n          if Compile_Time_Known_Value (Hi_Bound)\n            and then Compile_Time_Known_Value (Lo_Bound)\n          then\n@@ -6675,6 +6706,33 @@ package body Sem_Attr is\n                  Static);\n          end if;\n \n+         --  One more case is where Hi_Bound and Lo_Bound are compile-time\n+         --  comparable, and we can figure out the difference between them.\n+\n+         declare\n+            Diff : aliased Uint;\n+\n+         begin\n+            case\n+              Compile_Time_Compare\n+                (Lo_Bound, Hi_Bound, Diff'Access, Assume_Valid => False)\n+            is\n+               when EQ =>\n+                  Fold_Uint (N, Uint_1, False);\n+\n+               when GT =>\n+                  Fold_Uint (N, Uint_0, False);\n+\n+               when LT =>\n+                  if Diff /= No_Uint then\n+                     Fold_Uint (N, Diff + 1, False);\n+                  end if;\n+\n+               when others =>\n+                  null;\n+            end case;\n+         end;\n+\n       ---------------\n       -- Remainder --\n       ---------------"}, {"sha": "b659853ae1188df4445aa24825380000abda81f1", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=af02a866e673002ed038f42de832dc179c2be70f", "patch": "@@ -380,6 +380,16 @@ package body Sem_Eval is\n \n    function Compile_Time_Compare\n      (L, R         : Node_Id;\n+      Assume_Valid : Boolean) return Compare_Result\n+   is\n+      Discard : aliased Uint;\n+   begin\n+      return Compile_Time_Compare (L, R, Discard'Access, Assume_Valid);\n+   end Compile_Time_Compare;\n+\n+   function Compile_Time_Compare\n+     (L, R         : Node_Id;\n+      Diff         : access Uint;\n       Assume_Valid : Boolean;\n       Rec          : Boolean := False) return Compare_Result\n    is\n@@ -390,6 +400,8 @@ package body Sem_Eval is\n       --  invalid representations using the value of the base type, in\n       --  accordance with RM 13.9.1(10).\n \n+      Discard : aliased Uint;\n+\n       procedure Compare_Decompose\n         (N : Node_Id;\n          R : out Node_Id;\n@@ -654,6 +666,8 @@ package body Sem_Eval is\n    --  Start of processing for Compile_Time_Compare\n \n    begin\n+      Diff.all := No_Uint;\n+\n       --  If either operand could raise constraint error, then we cannot\n       --  know the result at compile time (since CE may be raised!)\n \n@@ -724,10 +738,14 @@ package body Sem_Eval is\n \n             begin\n                if Lo < Hi then\n+                  Diff.all := Hi - Lo;\n                   return LT;\n+\n                elsif Lo = Hi then\n                   return EQ;\n+\n                else\n+                  Diff.all := Lo - Hi;\n                   return GT;\n                end if;\n             end;\n@@ -813,31 +831,39 @@ package body Sem_Eval is\n             --  a bound of the other operand (four possible tests here).\n \n             case Compile_Time_Compare (L, Type_Low_Bound (Rtyp),\n-                                       Assume_Valid, Rec => True) is\n+                                       Discard'Access,\n+                                       Assume_Valid, Rec => True)\n+            is\n                when LT => return LT;\n                when LE => return LE;\n                when EQ => return LE;\n                when others => null;\n             end case;\n \n             case Compile_Time_Compare (L, Type_High_Bound (Rtyp),\n-                                       Assume_Valid, Rec => True) is\n+                                       Discard'Access,\n+                                       Assume_Valid, Rec => True)\n+            is\n                when GT => return GT;\n                when GE => return GE;\n                when EQ => return GE;\n                when others => null;\n             end case;\n \n             case Compile_Time_Compare (Type_Low_Bound (Ltyp), R,\n-                                       Assume_Valid, Rec => True) is\n+                                       Discard'Access,\n+                                       Assume_Valid, Rec => True)\n+            is\n                when GT => return GT;\n                when GE => return GE;\n                when EQ => return GE;\n                when others => null;\n             end case;\n \n             case Compile_Time_Compare (Type_High_Bound (Ltyp), R,\n-                                       Assume_Valid, Rec => True) is\n+                                       Discard'Access,\n+                                       Assume_Valid, Rec => True)\n+            is\n                when LT => return LT;\n                when LE => return LE;\n                when EQ => return LE;\n@@ -871,9 +897,11 @@ package body Sem_Eval is\n                   return EQ;\n \n                elsif Loffs < Roffs then\n+                  Diff.all := Roffs - Loffs;\n                   return LT;\n \n                else\n+                  Diff.all := Loffs - Roffs;\n                   return GT;\n                end if;\n             end if;\n@@ -943,6 +971,7 @@ package body Sem_Eval is\n             if Op = N_Op_Le then\n                Op := N_Op_Lt;\n                Opv := Opv + 1;\n+\n             elsif Op = N_Op_Ge then\n                Op := N_Op_Gt;\n                Opv := Opv - 1;"}, {"sha": "565ce6758735f6da94bc9d09c71599cd10f2a3b5", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02a866e673002ed038f42de832dc179c2be70f/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=af02a866e673002ed038f42de832dc179c2be70f", "patch": "@@ -132,10 +132,12 @@ package Sem_Eval is\n    type Compare_Result is (LT, LE, EQ, GT, GE, NE, Unknown);\n    subtype Compare_GE is Compare_Result range EQ .. GE;\n    subtype Compare_LE is Compare_Result range LT .. EQ;\n+   --  Result subtypes for Compile_Time_Compare subprograms\n+\n    function Compile_Time_Compare\n      (L, R         : Node_Id;\n-      Assume_Valid : Boolean;\n-      Rec          : Boolean := False) return Compare_Result;\n+      Assume_Valid : Boolean) return Compare_Result;\n+   pragma Inline (Compile_Time_Compare);\n    --  Given two expression nodes, finds out whether it can be determined at\n    --  compile time how the runtime values will compare. An Unknown result\n    --  means that the result of a comparison cannot be determined at compile\n@@ -145,9 +147,19 @@ package Sem_Eval is\n    --  the result of assuming that entities involved in the comparison have\n    --  valid representations. If Assume_Valid is false, then the base type of\n    --  any involved entity is used so that no assumption of validity is made.\n-   --  Rec is a parameter that is set True for a recursive call from within\n-   --  Compile_Time_Compare to avoid some infinite recursion cases. It should\n-   --  never be set by a client.\n+\n+   function Compile_Time_Compare\n+     (L, R         : Node_Id;\n+      Diff         : access Uint;\n+      Assume_Valid : Boolean;\n+      Rec          : Boolean := False) return Compare_Result;\n+   --  This version of Compile_Time_Compare returns extra information if the\n+   --  result is GT or LT. In these cases, if the magnitude of the difference\n+   --  can be determined at compile time, this (positive) magnitude is returned\n+   --  in Diff.all. If the magnitude of the difference cannot be determined\n+   --  then Diff.all contains No_Uint on return. Rec is a parameter that is set\n+   --  True for a recursive call from within Compile_Time_Compare to avoid some\n+   --  infinite recursion cases. It should never be set by a client.\n \n    procedure Flag_Non_Static_Expr (Msg : String; Expr : Node_Id);\n    --  This procedure is called after it has been determined that Expr is not\n@@ -311,7 +323,7 @@ package Sem_Eval is\n    --  literals list for the enumeration case. Is_Static_Expression is set True\n    --  in the result node. The result is fully analyzed/resolved. Static\n    --  indicates whether the result should be considered static or not (True =\n-   --  consider static). The point here is that normally all string literals\n+   --  consider static). The point here is that normally all integer literals\n    --  are static, but if this was the result of some sequence of evaluation\n    --  where values were known at compile time but not static, then the result\n    --  is not static."}]}