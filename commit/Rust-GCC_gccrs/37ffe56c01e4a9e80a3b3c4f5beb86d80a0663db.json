{"sha": "37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmZmU1NmMwMWU0YTllODBhM2IzYzRmNWJlYjg2ZDgwYTA2NjNkYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-24T11:34:58Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-29T07:26:07Z"}, "message": "Revert \"switch lowering: limit number of cluster attemps\"\n\nThis reverts commit c6df6039e9180c580945266302ec14047d358364.", "tree": {"sha": "f9bb78637f38787cc173b2ca9260573dbb1989bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9bb78637f38787cc173b2ca9260573dbb1989bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82693c4421d8a372e538ff1bd385f9ac4a34ce6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82693c4421d8a372e538ff1bd385f9ac4a34ce6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82693c4421d8a372e538ff1bd385f9ac4a34ce6f"}], "stats": {"total": 75, "additions": 0, "deletions": 75}, "files": [{"sha": "9f956b51aee8c44cc21d91a3af59b6b5fd173986", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "patch": "@@ -13492,10 +13492,6 @@ The smallest number of different values for which it is best to use a\n jump-table instead of a tree of conditional branches.  If the value is\n 0, use the default for the machine.\n \n-@item max-switch-clustering-attempts\n-The maximum number of clustering attempts used\n-in bit-test and jump-table switch expansion.\n-\n @item jump-table-max-growth-ratio-for-size\n The maximum code size growth ratio when expanding\n into a jump table (in percent).  The parameter is used when"}, {"sha": "a232161ac05929e094065ae49f0108d92657242b", "filename": "gcc/params.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "patch": "@@ -82,10 +82,6 @@ The maximum length of a constant string for a builtin string cmp call eligible f\n Common Joined UInteger Var(param_case_values_threshold) Param Optimization\n The smallest number of different values for which it is best to use a jump-table instead of a tree of conditional branches, if 0, use the default for the machine.\n \n--param=max-switch-clustering-attempts=\n-Common Joined UInteger Var(param_max_switch_clustering_attempts) Param Optimization Init(10000)\n-The maximum number of clustering attempts used in bit-test and jump-table switch expansion.\n-\n -param=comdat-sharing-probability=\n Common Joined UInteger Var(param_comdat_sharing_probability) Init(20) Param Optimization\n Probability that COMDAT function will be shared with different compilation unit."}, {"sha": "85c703a140d4a3e59474d6842f4064d5f7f6a778", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr96979.C", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82693c4421d8a372e538ff1bd385f9ac4a34ce6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96979.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82693c4421d8a372e538ff1bd385f9ac4a34ce6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96979.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr96979.C?ref=82693c4421d8a372e538ff1bd385f9ac4a34ce6f", "patch": "@@ -1,50 +0,0 @@\n-/* PR tree-optimization/96979 */\n-/* { dg-do compile } */\n-/* { dg-options \"-std=c++17 -O2 -fdump-tree-switchlower1\" } */\n-\n-using u64 = unsigned long long;\n-\n-constexpr inline u64\n-foo (const char *str) noexcept\n-{\n-  u64 value = 0xcbf29ce484222325ULL;\n-  for (u64 i = 0; str[i]; i++)\n-    value = (value ^ u64(str[i])) * 0x100000001b3ULL;\n-  return value;\n-}\n-\n-struct V\n-{\n-  enum W\n-  {\n-#define A(n) n,\n-#define B(n) A(n##0) A(n##1) A(n##2) A(n##3) A(n##4) A(n##5) A(n##6) A(n##7) A(n##8) A(n##9)\n-#define C(n) B(n##0) B(n##1) B(n##2) B(n##3) B(n##4) B(n##5) B(n##6) B(n##7) B(n##8) B(n##9)\n-#define D(n) C(n##0) C(n##1) C(n##2) C(n##3) C(n##4) C(n##5) C(n##6) C(n##7) C(n##8) C(n##9)\n-#define E D(foo1) D(foo2) D(foo3)\n-    E\n-    last\n-  };\n-\n-  constexpr static W\n-  bar (const u64 h) noexcept\n-  {\n-    switch (h)\n-      {\n-#undef A\n-#define F(n) #n\n-#define A(n) case foo (F(n)): return n;\n-        E\n-      }\n-    return last;\n-  }\n-};\n-\n-int\n-baz (const char *s)\n-{\n-  const u64 h = foo (s);\n-  return V::bar (h);\n-}\n-\n-/* { dg-final { scan-tree-dump-times \";; Bail out: --param=max-switch-clustering-attempts reached\" 2 \"switchlower1\" } } */"}, {"sha": "186411ff3c42b04fe30885e0e9df220200e1b7a6", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=37ffe56c01e4a9e80a3b3c4f5beb86d80a0663db", "patch": "@@ -1183,7 +1183,6 @@ jump_table_cluster::find_jump_tables (vec<cluster *> &clusters)\n \n   min.quick_push (min_cluster_item (0, 0, 0));\n \n-  HOST_WIDE_INT attempts = 0;\n   for (unsigned i = 1; i <= l; i++)\n     {\n       /* Set minimal # of clusters with i-th item to infinite.  */\n@@ -1195,14 +1194,6 @@ jump_table_cluster::find_jump_tables (vec<cluster *> &clusters)\n \t  if (i - j < case_values_threshold ())\n \t    s += i - j;\n \n-\t  if (attempts++ == param_max_switch_clustering_attempts)\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \";; Bail out: \"\n-\t\t\t \"--param=max-switch-clustering-attempts reached\\n\");\n-\t      return clusters.copy ();\n-\t    }\n-\n \t  /* Prefer clusters with smaller number of numbers covered.  */\n \t  if ((min[j].m_count + 1 < min[i].m_count\n \t       || (min[j].m_count + 1 == min[i].m_count\n@@ -1317,21 +1308,13 @@ bit_test_cluster::find_bit_tests (vec<cluster *> &clusters)\n \n   min.quick_push (min_cluster_item (0, 0, 0));\n \n-  HOST_WIDE_INT attempts = 0;\n   for (unsigned i = 1; i <= l; i++)\n     {\n       /* Set minimal # of clusters with i-th item to infinite.  */\n       min.quick_push (min_cluster_item (INT_MAX, INT_MAX, INT_MAX));\n \n       for (unsigned j = 0; j < i; j++)\n \t{\n-\t  if (attempts++ == param_max_switch_clustering_attempts)\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \";; Bail out: \"\n-\t\t\t \"--param=max-switch-clustering-attempts reached\\n\");\n-\t      return clusters.copy ();\n-\t    }\n \t  if (min[j].m_count + 1 < min[i].m_count\n \t      && can_be_handled (clusters, j, i - 1))\n \t    min[i] = min_cluster_item (min[j].m_count + 1, j, INT_MAX);"}]}