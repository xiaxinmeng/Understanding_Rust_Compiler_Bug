{"sha": "f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgyNWUyMzVhOGE1MmY5YmI0ZjhjODBhODFiMWM4NmY4NTRhZmM1NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-04-21T02:48:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-04-21T02:48:35Z"}, "message": "List.java: Wrote.\n\n\t* java/awt/List.java: Wrote.\n\t* java/awt/Dialog.java: Wrote.\n\nFrom-SVN: r41476", "tree": {"sha": "54447dd4a8eef3e869a33fca9294765629c6a8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54447dd4a8eef3e869a33fca9294765629c6a8df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/comments", "author": null, "committer": null, "parents": [{"sha": "968b956afbc4bc6ce30273784b4f6acf7a4ffa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968b956afbc4bc6ce30273784b4f6acf7a4ffa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968b956afbc4bc6ce30273784b4f6acf7a4ffa40"}], "stats": {"total": 583, "additions": 576, "deletions": 7}, "files": [{"sha": "2a91fb4489f47796f5f7d80fb6eccee3a64f8e61", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "patch": "@@ -1,3 +1,8 @@\n+2001-04-20  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/List.java: Wrote.\n+\t* java/awt/Dialog.java: Wrote.\n+\n 2001-04-20  Warren Levy  <warrenl@redhat.com>\n \n \t* java/lang/natSystem.cc (getSystemTimeZone): Adjust for DST."}, {"sha": "82f5fef3a7fcff5c1e09d2970e675e1eeeb36d8b", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 146, "deletions": 4, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -8,13 +8,155 @@\n \n package java.awt;\n \n-/* A very incomplete placeholder. */\n+import java.awt.peer.DialogPeer;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 17, 2001\n+ */\n \n public class Dialog extends Window\n {\n+  public Dialog (Dialog owner)\n+  {\n+    this (owner, \"\", false);\n+  }\n+\n+  public Dialog (Dialog owner, String title)\n+  {\n+    this (owner, title, false);\n+  }\n+\n+  public Dialog (Dialog owner, String title, boolean modal)\n+  {\n+    super (owner);\n+    this.modal = modal;\n+    this.title = title;\n+    setLayout (new BorderLayout ());\n+  }\n+\n   public Dialog (Frame owner)\n   {\n-    super(owner);\n-    // FIXME\n+    this (owner, \"\", false);\n   }\n+\n+  public Dialog (Frame owner, boolean modal)\n+  {\n+    this (owner, \"\", modal);\n+  }\n+\n+  public Dialog (Frame owner, String title)\n+  {\n+    this (owner, title, false);\n+  }\n+\n+  public Dialog (Frame owner, String title, boolean modal)\n+  {\n+    super (owner);\n+    this.modal = modal;\n+    this.title = title;\n+    setLayout (new BorderLayout ());\n+  }\n+\n+  /** Create the peer if it does not already exist.  */\n+  public void addNotify ()\n+  {\n+    if (peer == null)\n+      peer = getToolkit ().createDialog (this);\n+  }\n+\n+  public boolean isModal ()\n+  {\n+    return modal;\n+  }\n+\n+  public void setModal (boolean modal)\n+  {\n+    this.modal = modal;\n+  }\n+\n+  public String getTitle ()\n+  {\n+    return title;\n+  }\n+\n+  public void setTitle (String title)\n+  {\n+    this.title = title;\n+    if (peer != null)\n+      {\n+\tDialogPeer d = (DialogPeer) peer;\n+\td.setTitle (title);\n+      }\n+  }\n+\n+  public void show ()\n+  {\n+    boolean vis = isVisible ();\n+    super.show ();\n+    if (modal && vis)\n+      {\n+\t// Don't return until something happens.  We lock on the peer\n+\t// instead of `this' so that we don't interfere with whatever\n+\t// locks the caller might want to use.\n+\tsynchronized (peer)\n+\t  {\n+\t    try\n+\t      {\n+\t\tpeer.wait ();\n+\t      }\n+\t    catch (InterruptedException _)\n+\t      {\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  public void hide ()\n+  {\n+    super.hide ();\n+    synchronized (peer)\n+      {\n+\tpeer.notify ();\n+      }\n+  }\n+\n+  public void dispose ()\n+  {\n+    super.dispose ();\n+    synchronized (peer)\n+      {\n+\tpeer.notify ();\n+      }\n+  }\n+\n+  public boolean isResizable ()\n+  {\n+    return resizable;\n+  }\n+\n+  public void setResizable (boolean resizable)\n+  {\n+    this.resizable = resizable;\n+    if (peer != null)\n+      {\n+\tDialogPeer d = (DialogPeer) peer;\n+\td.setResizable (resizable);\n+      }\n+  }\n+\n+  protected String paramString ()\n+  {\n+    return (\"Dialog[\"\n+\t    + title + \",\"\n+\t    + modal + \",\"\n+\t    + resizable + \"]\");\n+  }\n+\n+  // True if dialog is modal.\n+  private boolean modal;\n+  // True if dialog is resizable by the user.\n+  private boolean resizable = false;\n+  // Dialog title.\n+  private String title;\n }"}, {"sha": "c0ac3023ced03eef6a6bf32bcc4e670d294a5362", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 425, "deletions": 3, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f825e235a8a52f9bb4f8c80a81b1c86f854afc54/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=f825e235a8a52f9bb4f8c80a81b1c86f854afc54", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -8,8 +8,430 @@\n \n package java.awt;\n \n-/* A very incomplete placeholder. */\n+import java.awt.peer.ListPeer;\n+import java.awt.event.*;\n+import java.util.Vector;\n \n-public class List extends Component\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date April 17, 2001\n+ * Status: incomplete\n+ */\n+\n+public class List extends Component implements ItemSelectable\n {\n+  /** Creates a new scrolling list with four rows.\n+   * Initially, multiple selections are not allowed.\n+   */\n+  public List ()\n+  {\n+    this (4, false);\n+  }\n+\n+  /** Create a new scrolling list with the indicated number of rows.\n+   * Initially, multiple selections are not allowed.\n+   * @param rows Number of rows\n+   */\n+  public List (int rows)\n+  {\n+    this (rows, false);\n+  }\n+\n+  /** Create a new scrolling list with the indicated number of rows.\n+   * @param rows Number of rows\n+   * @param multiple True if multiple selections allowed\n+   */\n+  public List (int rows, boolean multiple)\n+  {\n+    this.rows = rows;\n+    this.multipleMode = multiple;\n+  }\n+\n+  /** Create the peer if it does not already exist.  */\n+  public void addNotify ()\n+  {\n+    if (peer != null)\n+      peer = getToolkit ().createList (this);\n+  }\n+\n+  public int getItemCount ()\n+  {\n+    return items.size ();\n+  }\n+\n+  /** @deprecated Use getItemCount() instead.  */\n+  public int countItems ()\n+  {\n+    return getItemCount ();\n+  }\n+\n+  public String getItem (int index)\n+  {\n+    return (String) items.elementAt (index);\n+  }\n+\n+  public String[] getItems ()\n+  {\n+    String[] els = new String[items.size ()];\n+    items.copyInto (els);\n+    return els;\n+  }\n+\n+  public void add (String item)\n+  {\n+    add (item, items.size ());\n+  }\n+\n+  /** @deprecated Use add() instead.  */\n+  public void addItem (String item)\n+  {\n+    add (item);\n+  }\n+\n+  public void add (String item, int index)\n+  {\n+    items.insertElementAt (item, index);\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.add (item, index);\n+      }\n+  }\n+\n+  /** @deprecated Use add() instead.  */\n+  public void addItem (String item, int index)\n+  {\n+    add (item, index);\n+  }\n+\n+  public void replaceItem (String item, int index)\n+  {\n+    items.setElementAt (item, index);\n+    // FIXME: notify peer\n+  }\n+\n+  public void removeAll ()\n+  {\n+    items.clear ();\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.removeAll ();\n+      }\n+  }\n+\n+  /** @deprecated Use removeAll() instead.  */\n+  public void clear ()\n+  {\n+    removeAll ();\n+  }\n+\n+  public void remove (String item)\n+  {\n+    remove (items.indexOf (item));\n+  }\n+\n+  public void remove (int index)\n+  {\n+    items.removeElementAt (index);\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.delItems (index, index);\n+      }\n+  }\n+\n+  /** @deprecated Use remove() instead.  */\n+  public void delItem (int index)\n+  {\n+    remove (index);\n+  }\n+\n+  public int getSelectedIndex ()\n+  {\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tselected = l.getSelectedIndexes ();\n+      }\n+\n+    if (selected == null || selected.length > 1)\n+      return -1;\n+    return selected[0];\n+  }\n+\n+  public int[] getSelectedIndexes ()\n+  {\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tselected = l.getSelectedIndexes ();\n+      }\n+    return selected;\n+  }\n+\n+  public String getSelectedItem ()\n+  {\n+    int i = getSelectedIndex ();\n+    return i == -1 ? null : (String) items.elementAt (i);\n+  }\n+\n+  public String[] getSelectedItems ()\n+  {\n+    int[] is = getSelectedIndexes ();\n+    if (is == null)\n+      return null;\n+    String[] r = new String[is.length];\n+    for (int i = 0; i < is.length; ++i)\n+      r[i] = (String) items.elementAt (is[i]);\n+    return r;\n+  }\n+\n+  public Object[] getSelectedObjects ()\n+  {\n+    return getSelectedItems ();\n+  }\n+\n+  public void select (int index)\n+  {\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.select (index);\n+      }\n+    else if (selected == null)\n+      {\n+\tselected = new int[1];\n+\tselected[0] = index;\n+      }\n+    else\n+      {\n+\tint i;\n+\tfor (i = 0; i < selected.length; ++i)\n+\t  {\n+\t    if (selected[i] == index)\n+\t      return;\n+\t    if (selected[i] > index)\n+\t      break;\n+\t  }\n+\n+\tint[] ns = new int[selected.length + 1];\n+\tSystem.arraycopy (selected, 0, ns, 0, i);\n+\tns[i] = index;\n+\tSystem.arraycopy (selected, i, ns, i + 1, selected.length - i);\n+\n+\tselected = ns;\n+      }\n+  }\n+\n+  public void deselect (int index)\n+  {\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.deselect (index);\n+      }\n+    else if (selected != null)\n+      {\n+\tint i;\n+\tfor (i = 0; i < selected.length; ++i)\n+\t  {\n+\t    if (selected[i] == index)\n+\t      break;\n+\t  }\n+\tif (i < selected.length)\n+\t  {\n+\t    int[] ns = new int[selected.length - 1];\n+\t    System.arraycopy (selected, 0, ns, 0, i);\n+\t    System.arraycopy (selected, i + 1, ns, i, selected.length - i);\n+\t    selected = ns;\n+\t  }\n+      }\n+  }\n+\n+  public boolean isIndexSelected (int index)\n+  {\n+    int[] is = getSelectedIndexes ();\n+    for (int i = 0; i < is.length; ++i)\n+      {\n+\tif (is[i] == index)\n+\t  return true;\n+      }\n+    return false;\n+  }\n+\n+  /** @deprecated Use isIndexSelected().  */\n+  public boolean isSelected (int index)\n+  {\n+    return isIndexSelected (index);\n+  }\n+\n+  public int getRows ()\n+  {\n+    return rows;\n+  }\n+\n+  public boolean isMultipleMode ()\n+  {\n+    return multipleMode;\n+  }\n+\n+  /** @deprecated Use isMultipleMode().  */\n+  public boolean allowsMultipleSelections ()\n+  {\n+    return isMultipleMode ();\n+  }\n+\n+  public void setMultipleMode (boolean multiple)\n+  {\n+    this.multipleMode = multiple;\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.setMultipleMode (multiple);\n+      }\n+  }\n+\n+  /** @deprecated Use setMultipleMode().  */\n+  public void setMultipleSelections (boolean multiple)\n+  {\n+    setMultipleMode (multiple);\n+  }\n+\n+  public int getVisibleIndex ()\n+  {\n+    return visibleIndex;\n+  }\n+\n+  public void makeVisible (int index)\n+  {\n+    visibleIndex = index;\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.makeVisible (index);\n+      }\n+  }\n+\n+  public Dimension getPreferredSize (int rows)\n+  {\n+    return null;\t\t// FIXME\n+  }\n+\n+  /** @deprecated Use getPreferredSize(int).  */\n+  public Dimension preferredSize (int rows)\n+  {\n+    return getPreferredSize (rows);\n+  }\n+\n+  public Dimension getPreferredSize ()\n+  {\n+    return null;\t\t// FIXME\n+  }\n+\n+  /** @deprecated Use getPreferredSize().  */\n+  public Dimension preferredSize ()\n+  {\n+    return getPreferredSize ();\n+  }\n+\n+  public Dimension getMinimumSize (int rows)\n+  {\n+    return null;\t\t// FIXME\n+  }\n+\n+  /** @deprecated Use getMinimumSize(int).  */\n+  public Dimension minimumSize (int rows)\n+  {\n+    return getMinimumSize (rows);\n+  }\n+  \n+  public Dimension getMinimumSize ()\n+  {\n+    return null;\t\t// FIXME\n+  }\n+\n+  /** @deprecated Use getMinimumSize().  */\n+  public Dimension minimumSize ()\n+  {\n+    return getMinimumSize ();\n+  }\n+\n+  public void addItemListener (ItemListener listen)\n+  {\n+    item_listeners = AWTEventMulticaster.add (item_listeners, listen);\n+  }\n+\n+  public void removeItemListener (ItemListener listen)\n+  {\n+    item_listeners = AWTEventMulticaster.remove (item_listeners, listen);\n+  }\n+\n+  public void addActionListener (ActionListener listen)\n+  {\n+    action_listeners = AWTEventMulticaster.add (action_listeners, listen);\n+  }\n+\n+  public void removeActionListener (ActionListener listen)\n+  {\n+    action_listeners = AWTEventMulticaster.remove (action_listeners, listen);\n+  }\n+\n+  protected void processEvent (AWTEvent e)\n+  {\n+    if (e instanceof ItemEvent)\n+      processItemEvent ((ItemEvent) e);\n+    else if (e instanceof ActionEvent)\n+      processActionEvent ((ActionEvent) e);\n+    else\n+      super.processEvent (e);\n+  }\n+\n+  protected void processItemEvent (ItemEvent e)\n+  {\n+    if (item_listeners != null)\n+      item_listeners.itemStateChanged (e);\n+  }\n+\n+  protected void processActionEvent (ActionEvent e)\n+  {\n+    if (action_listeners != null)\n+      action_listeners.actionPerformed (e);\n+  }\n+\n+  protected String paramString ()\n+  {\n+    return (\"List[multiple=\" + multipleMode\n+\t    + \",rows=\" + rows\n+\t    + \"]\");\n+  }\n+\n+  /** @deprecated */\n+  public void delItems (int start, int end)\n+  {\n+    for (int i = end; i >= start; --i)\n+      items.removeElementAt (i);\n+    if (peer != null)\n+      {\n+\tListPeer l = (ListPeer) peer;\n+\tl.delItems (start, end);\n+      }\n+  }\n+\n+  // Vector of items in the list.\n+  private Vector items;\n+  // True if multiple selection mode enabled.\n+  private boolean multipleMode;\n+  // Number of rows.\n+  private int rows;\n+  // Array of indices of selected items.  When there is no peer, we\n+  // maintain this in place.  When there is a peer, the peer maintains\n+  // the list and we ask for it whenever needed.\n+  private int[] selected;\n+  // Value used by makeVisible().\n+  private int visibleIndex;\n+\n+  // Listeners.\n+  private ActionListener action_listeners;\n+  private ItemListener item_listeners;\n }"}]}