{"sha": "73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "node_id": "C_kwDOANBUbNoAKDczZTRkOWYxNzUxZmQ2ZDNjMTgyOTg4YjJmOWQwMTk5Yzg2MDUzYzk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-16T21:00:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-16T22:48:15Z"}, "message": "libstdc++: Fix tests for constexpr std::string\n\nSome tests fail when run with -D_GLIBCXX_USE_CXX11_ABI or -stdgnu++20.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (operator<=>): Use constexpr\n\tunconditionally.\n\t* testsuite/21_strings/basic_string/modifiers/constexpr.cc:\n\tRequire cxx11-abit effective target.\n\t* testsuite/21_strings/headers/string/synopsis.cc: Add\n\tconditional constexpr to declarations, and adjust relational\n\toperators for C++20.", "tree": {"sha": "132326ada854bdc758a27f765f7a32e57f72aa82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132326ada854bdc758a27f765f7a32e57f72aa82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395848255cfa88f6f0f33a9b14c79e584a05d6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395848255cfa88f6f0f33a9b14c79e584a05d6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395848255cfa88f6f0f33a9b14c79e584a05d6fc"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "0b7d6c0a98181a817b5b31e7d20c5d19ff0a0252", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "patch": "@@ -3546,8 +3546,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n-    inline auto\n+    constexpr auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept\n     -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))\n@@ -3561,8 +3560,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n-    inline auto\n+    constexpr auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst _CharT* __rhs) noexcept\n     -> decltype(__detail::__char_traits_cmp_cat<_Traits>(0))"}, {"sha": "a4627714d9a8c98a305bf646aba5a768be888489", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/constexpr.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc?ref=73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++20\" }\n // { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>"}, {"sha": "f12345ed426384a25e76931c23f7f2db8a3e329f", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/synopsis.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e4d9f1751fd6d3c182988b2f9d0199c86053c9/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc?ref=73e4d9f1751fd6d3c182988b2f9d0199c86053c9", "patch": "@@ -26,6 +26,12 @@\n # define NOTHROW\n #endif\n \n+#if __cplusplus >= 202002L\n+# define CONSTEXPR constexpr\n+#else\n+# define CONSTEXPR\n+#endif\n+\n namespace std {\n   //  lib.char.traits, character traits:\n   template<class charT>\n@@ -40,33 +46,52 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n \n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   basic_string<charT,traits,Allocator>\n   operator+(const basic_string<charT,traits,Allocator>& lhs,\n \t    const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   basic_string<charT,traits,Allocator>\n   operator+(const charT* lhs,\n \t    const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   basic_string<charT,traits,Allocator>\n   operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   basic_string<charT,traits,Allocator>\n   operator+(const basic_string<charT,traits,Allocator>& lhs,\n \t    const charT* rhs);\n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   basic_string<charT,traits,Allocator>\n   operator+(const basic_string<charT,traits,Allocator>& lhs, charT rhs);\n \n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n-  bool operator==(const charT* lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n-  template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const charT* rhs);\n+\n+#if __cpp_lib_three_way_comparison\n+  template<class charT, class traits, class Allocator>\n+  constexpr\n+  bool operator<=>(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t   const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n+  template<class charT, class traits, class Allocator>\n+  constexpr\n+  bool operator<=>(const basic_string<charT,traits,Allocator>& lhs,\n+\t\t   const charT* rhs);\n+#else\n+  template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n+  bool operator==(const charT* lhs,\n+\t\t  const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n   bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n@@ -114,9 +139,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   template<class charT, class traits, class Allocator>\n   bool operator>=(const charT* lhs,\n \t\t  const basic_string<charT,traits,Allocator>& rhs);\n+#endif\n \n   //  lib.string.special:\n   template<class charT, class traits, class Allocator>\n+  CONSTEXPR\n   void swap(basic_string<charT,traits,Allocator>& lhs,\n \t    basic_string<charT,traits,Allocator>& rhs)\n #if __cplusplus >= 201103L"}]}