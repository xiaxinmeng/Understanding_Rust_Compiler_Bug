{"sha": "348b0c310505a37e779ad69065190f1991253854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ4YjBjMzEwNTA1YTM3ZTc3OWFkNjkwNjUxOTBmMTk5MTI1Mzg1NA==", "commit": {"author": {"name": "Falk Hueffner", "email": "falk.hueffner@student.uni-tuebingen.de", "date": "2003-02-03T19:37:53Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-03T19:37:53Z"}, "message": "std_bitset.h: Replace CHAR_BIT with __CHAR_BIT__, use numeric_limits for bits-per-word values.\n\n2003-02-03  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n            Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/std/std_bitset.h:  Replace CHAR_BIT with __CHAR_BIT__, use\n\tnumeric_limits for bits-per-word values.\n\t(_Base_bitset::_M_do_count, _Base_bitset<1>::_M_do_count):\n\tUse __builtin_popcountl instead.\n\t(_Base_bitset::_M_do_find_first, _Base_bitset::_M_do_find_next,\n\t_Base_bitset<1>::_M_do_find_first, _Base_bitset<1>::_M_do_find_next):\n\tUse __builtin_ctzl instead.\n\t(_S_bit_count, _S_first_one):  Remove.\n\t* config/linker-map.gnu (GLIBCPP_3.4):  Remove std::_S_bit_count.\n\t* src/Makefile.am (sources):  Remove bitset.cc.\n\t* src/bitset.cc:  Delete file.\n\t* src/Makefile.in:  Regenerate.\n\nCo-Authored-By: Phil Edwards <pme@gcc.gnu.org>\n\nFrom-SVN: r62335", "tree": {"sha": "c68af5e7bf92bec5bf7e50ae027db8379d1f5d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c68af5e7bf92bec5bf7e50ae027db8379d1f5d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/348b0c310505a37e779ad69065190f1991253854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b0c310505a37e779ad69065190f1991253854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348b0c310505a37e779ad69065190f1991253854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b0c310505a37e779ad69065190f1991253854/comments", "author": null, "committer": null, "parents": [{"sha": "2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0"}], "stats": {"total": 449, "additions": 76, "deletions": 373}, "files": [{"sha": "81411d8636322f1e11512ac8750beba4291cca0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=348b0c310505a37e779ad69065190f1991253854", "patch": "@@ -1,3 +1,19 @@\n+2003-02-03  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n+            Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/std/std_bitset.h:  Replace CHAR_BIT with __CHAR_BIT__, use\n+\tnumeric_limits for bits-per-word values.\n+\t(_Base_bitset::_M_do_count, _Base_bitset<1>::_M_do_count):\n+\tUse __builtin_popcountl instead.\n+\t(_Base_bitset::_M_do_find_first, _Base_bitset::_M_do_find_next,\n+\t_Base_bitset<1>::_M_do_find_first, _Base_bitset<1>::_M_do_find_next):\n+\tUse __builtin_ctzl instead.\n+\t(_S_bit_count, _S_first_one):  Remove.\n+\t* config/linker-map.gnu (GLIBCPP_3.4):  Remove std::_S_bit_count.\n+\t* src/Makefile.am (sources):  Remove bitset.cc.\n+\t* src/bitset.cc:  Delete file.\n+\t* src/Makefile.in:  Regenerate.\n+\n 2003-02-03  Phil Edwards  <pme@gcc.gnu.org>\n \n \tPR libstdc++/9527, PR libstdc++/8713"}, {"sha": "da5f7ecc91b8a63cb71e286ac85b589db8701628", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=348b0c310505a37e779ad69065190f1991253854", "patch": "@@ -62,8 +62,7 @@ GLIBCPP_3.4 {\n       std::__basic_file*;\n       std::__num_base*;\n       std::__timepunct*;\n-      std::__numeric_limits_base*;\n-      std::_S_bit_count\n+      std::__numeric_limits_base*\n     };\n \n     # Names not in an 'extern' block are mangled names."}, {"sha": "f390ce66c88113a3e70c4b3c0bb49bdb07cbd81e", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 40, "deletions": 77, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=348b0c310505a37e779ad69065190f1991253854", "patch": "@@ -1,6 +1,6 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -52,22 +52,20 @@\n \n #include <cstddef>     // for size_t\n #include <cstring>     // for memset\n+#include <limits>      // for numeric_limits\n #include <string>\n #include <bits/functexcept.h>   // for invalid_argument, out_of_range,\n                                 // overflow_error\n #include <ostream>     // for ostream (operator<<)\n #include <istream>     // for istream (operator>>)\n \n \n-#define _GLIBCPP_BITSET_BITS_PER_WORD (CHAR_BIT*sizeof(unsigned long))\n+#define _GLIBCPP_BITSET_BITS_PER_WORD  numeric_limits<unsigned long>::digits\n #define _GLIBCPP_BITSET_WORDS(__n) \\\n  ((__n) < 1 ? 0 : ((__n) + _GLIBCPP_BITSET_BITS_PER_WORD - 1)/_GLIBCPP_BITSET_BITS_PER_WORD)\n \n namespace std\n {\n-  extern unsigned char \t_S_bit_count[256];\n-  extern unsigned char \t_S_first_one[256];\n-\n   /**\n    *  @if maint\n    *  Base class, general case.  It is a class inveriant that _Nw will be\n@@ -97,7 +95,7 @@ namespace std\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n+      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n@@ -191,14 +189,8 @@ namespace std\n       _M_do_count() const\n       {\n \tsize_t __result = 0;\n-\tconst unsigned char* __byte_ptr = (const unsigned char*)_M_w;\n-\tconst unsigned char* __end_ptr = (const unsigned char*)(_M_w + _Nw);\n-\n-\twhile ( __byte_ptr < __end_ptr )\n-\t  {\n-\t    __result += _S_bit_count[*__byte_ptr];\n-\t    __byte_ptr++;\n-\t  }\n+\tfor (size_t __i = 0; __i < _Nw; __i++)\n+\t  __result += __builtin_popcountl(_M_w[__i]);\n \treturn __result;\n       }\n \n@@ -280,23 +272,12 @@ namespace std\n     size_t\n     _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const\n     {\n-      for (size_t __i = 0; __i < _Nw; __i++ )\n+      for (size_t __i = 0; __i < _Nw; __i++)\n \t{\n \t  _WordT __thisword = _M_w[__i];\n-\t  if ( __thisword != static_cast<_WordT>(0) )\n-\t    {\n-\t      // find byte within word\n-\t      for (size_t __j = 0; __j < sizeof(_WordT); __j++ )\n-\t\t{\n-\t\t  unsigned char __this_byte\n-\t\t    = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-\t\t  if (__this_byte)\n-\t\t    return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-\t\t      _S_first_one[__this_byte];\n-\n-\t\t  __thisword >>= CHAR_BIT;\n-\t\t}\n-\t    }\n+\t  if (__thisword != static_cast<_WordT>(0))\n+\t    return __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\t      + __builtin_ctzl(__thisword);\n \t}\n       // not found, so return an indication of failure.\n       return __not_found;\n@@ -318,44 +299,20 @@ namespace std\n       _WordT __thisword = _M_w[__i];\n \n       // mask off bits below bound\n-      __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n+      __thisword >>= __prev + 1;\n \n-      if ( __thisword != static_cast<_WordT>(0) )\n-\t{\n-\t  // find byte within word\n-\t  // get first byte into place\n-\t  __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n-\t  for (size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++)\n-\t    {\n-\t      unsigned char __this_byte\n-\t\t= static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-\t      if ( __this_byte )\n-\t\treturn __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-\t\t  _S_first_one[__this_byte];\n-\n-\t      __thisword >>= CHAR_BIT;\n-\t    }\n-\t}\n+      if (__thisword != static_cast<_WordT>(0))\n+\treturn __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\t  + __builtin_ctzl(__thisword);\n \n       // check subsequent words\n       __i++;\n       for ( ; __i < _Nw; __i++ )\n \t{\n \t  __thisword = _M_w[__i];\n-\t  if ( __thisword != static_cast<_WordT>(0) )\n-\t    {\n-\t      // find byte within word\n-\t      for (size_t __j = 0; __j < sizeof(_WordT); __j++ )\n-\t\t{\n-\t\t  unsigned char __this_byte\n-\t\t    = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-\t\t  if ( __this_byte )\n-\t\t    return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-\t\t      _S_first_one[__this_byte];\n-\n-\t\t  __thisword >>= CHAR_BIT;\n-\t\t}\n-\t    }\n+\t  if (__thisword != static_cast<_WordT>(0))\n+\t    return __i * _GLIBCPP_BITSET_BITS_PER_WORD\n+\t      + __builtin_ctzl(__thisword);\n \t}\n       // not found, so return an indication of failure.\n       return __not_found;\n@@ -384,7 +341,7 @@ namespace std\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n+      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n@@ -438,29 +395,34 @@ namespace std\n       _M_is_any() const { return _M_w != 0; }\n \n       size_t\n-      _M_do_count() const\n-      {\n-\tsize_t __result = 0;\n-\tconst unsigned char* __byte_ptr = (const unsigned char*)&_M_w;\n-\tconst unsigned char* __end_ptr\n-\t  = ((const unsigned char*)&_M_w)+sizeof(_M_w);\n-\twhile ( __byte_ptr < __end_ptr )\n-\t  {\n-\t    __result += _S_bit_count[*__byte_ptr];\n-\t    __byte_ptr++;\n-\t  }\n-\treturn __result;\n-      }\n+      _M_do_count() const { return __builtin_popcountl(_M_w); }\n \n       unsigned long\n       _M_do_to_ulong() const { return _M_w; }\n \n       size_t\n-      _M_do_find_first(size_t __not_found) const;\n+      _M_do_find_first(size_t __not_found) const\n+      {\n+        if (_M_w != 0)\n+          return __builtin_ctzl(_M_w);\n+        else\n+          return __not_found;\n+      }\n \n       // find the next \"on\" bit that follows \"prev\"\n       size_t\n-      _M_do_find_next(size_t __prev, size_t __not_found) const;\n+      _M_do_find_next(size_t __prev, size_t __not_found) const\n+      {\n+\t++__prev;\n+\tif (__prev >= _GLIBCPP_BITSET_BITS_PER_WORD)\n+\t  return __not_found;\n+\n+\t_WordT __x = _M_w >> __prev;\n+\tif (__x != 0)\n+\t  return __builtin_ctzl(__x) + __prev;\n+\telse\n+\t  return __not_found;\n+      }\n     };\n \n \n@@ -485,7 +447,7 @@ namespace std\n \n       static size_t\n       _S_whichbyte(size_t __pos )\n-      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n+      { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static size_t\n       _S_whichbit(size_t __pos )\n@@ -1248,5 +1210,6 @@ namespace std\n } // namespace std\n \n #undef _GLIBCPP_BITSET_WORDS\n+#undef _GLIBCPP_BITSET_BITS_PER_WORD\n \n #endif /* _GLIBCPP_BITSET_H */"}, {"sha": "21ff70c5367cd9ecdfc7bd0043343e0c0800c71c", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=348b0c310505a37e779ad69065190f1991253854", "patch": "@@ -117,7 +117,6 @@ basic_file.cc: ${glibcpp_srcdir}/@BASIC_FILE_CC@\n \n # Sources present in the src directory.\n sources = \\\n-\tbitset.cc \\\n \tcodecvt.cc \\\n \tcomplex_io.cc \\\n \tconcept-inst.cc \\"}, {"sha": "a9853267f6c734dca3d5ba0a9fd021e7c47d61cb", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 19, "deletions": 74, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b0c310505a37e779ad69065190f1991253854/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=348b0c310505a37e779ad69065190f1991253854", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -146,7 +146,7 @@ glibcpp_builddir = @glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n @GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n@@ -155,13 +155,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-CONFIG_CXXFLAGS = \\\n-\t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n+CONFIG_CXXFLAGS =  \t@SECTION_FLAGS@ @EXTRA_CXX_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -171,79 +169,33 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t$(GLIBCPP_INCLUDES) \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\n+INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target.\n-target_sources = \\\n-\tcodecvt_members.cc \\\n-\tcollate_members.cc \\\n-\tctype_members.cc \\\n-\tmessages_members.cc \\\n-\tmonetary_members.cc \\\n-\tnumeric_members.cc \\\n-\ttime_members.cc\n+target_sources =  \tcodecvt_members.cc \tcollate_members.cc \tctype_members.cc \tmessages_members.cc \tmonetary_members.cc \tnumeric_members.cc \ttime_members.cc\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target, but with ad hoc naming rules.\n-target_sources_extra = \\\n-\tbasic_file.cc \\\n-\tc++locale.cc \n+target_sources_extra =  \tbasic_file.cc \tc++locale.cc \n \n \n # Sources present in the src directory.\n-sources = \\\n-\tbitset.cc \\\n-\tcodecvt.cc \\\n-\tcomplex_io.cc \\\n-\tconcept-inst.cc \\\n-\tctype.cc \\\n-\text-inst.cc \\\n-\tfstream.cc \\\n-\tfstream-inst.cc \\\n-\tfunctexcept.cc \\\n-\tglobals.cc \\\n-\tio-inst.cc \\\n-\tios.cc \\\n-\tistream-inst.cc \\\n-\tlimits.cc \\\n-\tlocale.cc \\\n-\tlocale-inst.cc \\\n-\tlocalename.cc \\\n-\tmisc-inst.cc \\\n-\tostream-inst.cc \\\n-\tsstream-inst.cc \\\n-\tstdexcept.cc \\\n-\tstl-inst.cc \\\n-\tstreambuf-inst.cc \\\n-\tstring-inst.cc \\\n-\tstrstream.cc \\\n-\tvalarray-inst.cc \\\n-\twstring-inst.cc \\\n-\t${target_sources} \\\n-\t${target_sources_extra}\n+sources =  \tcodecvt.cc \tcomplex_io.cc \tconcept-inst.cc \tctype.cc \text-inst.cc \tfstream.cc \tfstream-inst.cc \tfunctexcept.cc \tglobals.cc \tio-inst.cc \tios.cc \tistream-inst.cc \tlimits.cc \tlocale.cc \tlocale-inst.cc \tlocalename.cc \tmisc-inst.cc \tostream-inst.cc \tsstream-inst.cc \tstdexcept.cc \tstl-inst.cc \tstreambuf-inst.cc \tstring-inst.cc \tstrstream.cc \tvalarray-inst.cc \twstring-inst.cc \t${target_sources} \t${target_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD = \\\n-\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n-\t$(top_builddir)/libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD =  \t$(top_builddir)/libmath/libmath.la @libio_la@ \t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n \n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n-libstdc___la_LDFLAGS = \\\n-\t-version-info @libtool_VERSION@ ${version_arg} \\\n-\t-lm @LIBUNWIND_FLAG@ \n+libstdc___la_LDFLAGS =  \t-version-info @libtool_VERSION@ ${version_arg} \t-lm @LIBUNWIND_FLAG@ \n \n \n # Use special rules for the deprecated source files so that they find\n@@ -255,12 +207,7 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. \n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)  \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -281,8 +228,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -291,8 +237,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n debugdir = debug\n@@ -305,10 +250,10 @@ DEFS = @DEFS@ -I. -I$(srcdir) -I..\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n-libstdc___la_OBJECTS =  bitset.lo codecvt.lo complex_io.lo \\\n-concept-inst.lo ctype.lo ext-inst.lo fstream.lo fstream-inst.lo \\\n-functexcept.lo globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo \\\n-locale.lo locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n+libstdc___la_OBJECTS =  codecvt.lo complex_io.lo concept-inst.lo \\\n+ctype.lo ext-inst.lo fstream.lo fstream-inst.lo functexcept.lo \\\n+globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo locale.lo \\\n+locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n codecvt_members.lo collate_members.lo ctype_members.lo \\\n@@ -322,7 +267,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libstdc___la_SOURCES)\n OBJECTS = $(libstdc___la_OBJECTS)\n@@ -434,7 +379,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n "}, {"sha": "4849a6a5cebbd739c77bff3edc9d9ed2823978ef", "filename": "libstdc++-v3/src/bitset.cc", "status": "removed", "additions": 0, "deletions": 219, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc?ref=2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "patch": "@@ -1,219 +0,0 @@\n-// Bitset definitions -*- C++ -*-\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- * Copyright (c) 1998\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-#include <bitset>\n-\n-//\n-// Definitions of non-inline functions from the single-word version of\n-//  _Base_bitset.\n-//\n-\n-std::size_t\n-std::_Base_bitset<1>::_M_do_find_first(std::size_t __not_found) const\n-{\n-  _WordT __thisword = _M_w;\n-\n-  if ( __thisword != static_cast<_WordT>(0) ) {\n-    // find byte within word\n-    for (std::size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n-      unsigned char __this_byte\n-        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-      if ( __this_byte )\n-        return __j * CHAR_BIT + _S_first_one[__this_byte];\n-\n-      __thisword >>= CHAR_BIT;\n-    }\n-  }\n-  // not found, so return a value that indicates failure.\n-  return __not_found;\n-}\n-\n-std::size_t\n-std::_Base_bitset<1>::_M_do_find_next(std::size_t __prev,\n-\t\t\t\t      std::size_t __not_found) const\n-{\n-  // make bound inclusive\n-  ++__prev;\n-\n-  // check out of bounds\n-  if ( __prev >= _GLIBCPP_BITSET_BITS_PER_WORD )\n-    return __not_found;\n-\n-    // search first (and only) word\n-  _WordT __thisword = _M_w;\n-\n-  // mask off bits below bound\n-  __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n-\n-  if ( __thisword != static_cast<_WordT>(0) ) {\n-    // find byte within word\n-    // get first byte into place\n-    __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n-    for ( std::size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++ ) {\n-      unsigned char __this_byte\n-        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-      if ( __this_byte )\n-        return __j * CHAR_BIT + _S_first_one[__this_byte];\n-\n-      __thisword >>= CHAR_BIT;\n-    }\n-  }\n-\n-  // not found, so return a value that indicates failure.\n-  return __not_found;\n-} // end _M_do_find_next\n-\n-\n-// Lookup tables for find and count operations.  In _S_bit_count, the value\n-// *at* an index is the number of bits set *in* that index.\n-unsigned char std::_S_bit_count[256] =\n-{\n-  0, /*   0 */ 1, /*   1 */ 1, /*   2 */ 2, /*   3 */ 1, /*   4 */\n-  2, /*   5 */ 2, /*   6 */ 3, /*   7 */ 1, /*   8 */ 2, /*   9 */\n-  2, /*  10 */ 3, /*  11 */ 2, /*  12 */ 3, /*  13 */ 3, /*  14 */\n-  4, /*  15 */ 1, /*  16 */ 2, /*  17 */ 2, /*  18 */ 3, /*  19 */\n-  2, /*  20 */ 3, /*  21 */ 3, /*  22 */ 4, /*  23 */ 2, /*  24 */\n-  3, /*  25 */ 3, /*  26 */ 4, /*  27 */ 3, /*  28 */ 4, /*  29 */\n-  4, /*  30 */ 5, /*  31 */ 1, /*  32 */ 2, /*  33 */ 2, /*  34 */\n-  3, /*  35 */ 2, /*  36 */ 3, /*  37 */ 3, /*  38 */ 4, /*  39 */\n-  2, /*  40 */ 3, /*  41 */ 3, /*  42 */ 4, /*  43 */ 3, /*  44 */\n-  4, /*  45 */ 4, /*  46 */ 5, /*  47 */ 2, /*  48 */ 3, /*  49 */\n-  3, /*  50 */ 4, /*  51 */ 3, /*  52 */ 4, /*  53 */ 4, /*  54 */\n-  5, /*  55 */ 3, /*  56 */ 4, /*  57 */ 4, /*  58 */ 5, /*  59 */\n-  4, /*  60 */ 5, /*  61 */ 5, /*  62 */ 6, /*  63 */ 1, /*  64 */\n-  2, /*  65 */ 2, /*  66 */ 3, /*  67 */ 2, /*  68 */ 3, /*  69 */\n-  3, /*  70 */ 4, /*  71 */ 2, /*  72 */ 3, /*  73 */ 3, /*  74 */\n-  4, /*  75 */ 3, /*  76 */ 4, /*  77 */ 4, /*  78 */ 5, /*  79 */\n-  2, /*  80 */ 3, /*  81 */ 3, /*  82 */ 4, /*  83 */ 3, /*  84 */\n-  4, /*  85 */ 4, /*  86 */ 5, /*  87 */ 3, /*  88 */ 4, /*  89 */\n-  4, /*  90 */ 5, /*  91 */ 4, /*  92 */ 5, /*  93 */ 5, /*  94 */\n-  6, /*  95 */ 2, /*  96 */ 3, /*  97 */ 3, /*  98 */ 4, /*  99 */\n-  3, /* 100 */ 4, /* 101 */ 4, /* 102 */ 5, /* 103 */ 3, /* 104 */\n-  4, /* 105 */ 4, /* 106 */ 5, /* 107 */ 4, /* 108 */ 5, /* 109 */\n-  5, /* 110 */ 6, /* 111 */ 3, /* 112 */ 4, /* 113 */ 4, /* 114 */\n-  5, /* 115 */ 4, /* 116 */ 5, /* 117 */ 5, /* 118 */ 6, /* 119 */\n-  4, /* 120 */ 5, /* 121 */ 5, /* 122 */ 6, /* 123 */ 5, /* 124 */\n-  6, /* 125 */ 6, /* 126 */ 7, /* 127 */ 1, /* 128 */ 2, /* 129 */\n-  2, /* 130 */ 3, /* 131 */ 2, /* 132 */ 3, /* 133 */ 3, /* 134 */\n-  4, /* 135 */ 2, /* 136 */ 3, /* 137 */ 3, /* 138 */ 4, /* 139 */\n-  3, /* 140 */ 4, /* 141 */ 4, /* 142 */ 5, /* 143 */ 2, /* 144 */\n-  3, /* 145 */ 3, /* 146 */ 4, /* 147 */ 3, /* 148 */ 4, /* 149 */\n-  4, /* 150 */ 5, /* 151 */ 3, /* 152 */ 4, /* 153 */ 4, /* 154 */\n-  5, /* 155 */ 4, /* 156 */ 5, /* 157 */ 5, /* 158 */ 6, /* 159 */\n-  2, /* 160 */ 3, /* 161 */ 3, /* 162 */ 4, /* 163 */ 3, /* 164 */\n-  4, /* 165 */ 4, /* 166 */ 5, /* 167 */ 3, /* 168 */ 4, /* 169 */\n-  4, /* 170 */ 5, /* 171 */ 4, /* 172 */ 5, /* 173 */ 5, /* 174 */\n-  6, /* 175 */ 3, /* 176 */ 4, /* 177 */ 4, /* 178 */ 5, /* 179 */\n-  4, /* 180 */ 5, /* 181 */ 5, /* 182 */ 6, /* 183 */ 4, /* 184 */\n-  5, /* 185 */ 5, /* 186 */ 6, /* 187 */ 5, /* 188 */ 6, /* 189 */\n-  6, /* 190 */ 7, /* 191 */ 2, /* 192 */ 3, /* 193 */ 3, /* 194 */\n-  4, /* 195 */ 3, /* 196 */ 4, /* 197 */ 4, /* 198 */ 5, /* 199 */\n-  3, /* 200 */ 4, /* 201 */ 4, /* 202 */ 5, /* 203 */ 4, /* 204 */\n-  5, /* 205 */ 5, /* 206 */ 6, /* 207 */ 3, /* 208 */ 4, /* 209 */\n-  4, /* 210 */ 5, /* 211 */ 4, /* 212 */ 5, /* 213 */ 5, /* 214 */\n-  6, /* 215 */ 4, /* 216 */ 5, /* 217 */ 5, /* 218 */ 6, /* 219 */\n-  5, /* 220 */ 6, /* 221 */ 6, /* 222 */ 7, /* 223 */ 3, /* 224 */\n-  4, /* 225 */ 4, /* 226 */ 5, /* 227 */ 4, /* 228 */ 5, /* 229 */\n-  5, /* 230 */ 6, /* 231 */ 4, /* 232 */ 5, /* 233 */ 5, /* 234 */\n-  6, /* 235 */ 5, /* 236 */ 6, /* 237 */ 6, /* 238 */ 7, /* 239 */\n-  4, /* 240 */ 5, /* 241 */ 5, /* 242 */ 6, /* 243 */ 5, /* 244 */\n-  6, /* 245 */ 6, /* 246 */ 7, /* 247 */ 5, /* 248 */ 6, /* 249 */\n-  6, /* 250 */ 7, /* 251 */ 6, /* 252 */ 7, /* 253 */ 7, /* 254 */\n-  8  /* 255 */\n-}; // end _S_bit_count\n-\n-unsigned char std::_S_first_one[256] =\n-{\n-  0, /*   0 */ 0, /*   1 */ 1, /*   2 */ 0, /*   3 */ 2, /*   4 */\n-  0, /*   5 */ 1, /*   6 */ 0, /*   7 */ 3, /*   8 */ 0, /*   9 */\n-  1, /*  10 */ 0, /*  11 */ 2, /*  12 */ 0, /*  13 */ 1, /*  14 */\n-  0, /*  15 */ 4, /*  16 */ 0, /*  17 */ 1, /*  18 */ 0, /*  19 */\n-  2, /*  20 */ 0, /*  21 */ 1, /*  22 */ 0, /*  23 */ 3, /*  24 */\n-  0, /*  25 */ 1, /*  26 */ 0, /*  27 */ 2, /*  28 */ 0, /*  29 */\n-  1, /*  30 */ 0, /*  31 */ 5, /*  32 */ 0, /*  33 */ 1, /*  34 */\n-  0, /*  35 */ 2, /*  36 */ 0, /*  37 */ 1, /*  38 */ 0, /*  39 */\n-  3, /*  40 */ 0, /*  41 */ 1, /*  42 */ 0, /*  43 */ 2, /*  44 */\n-  0, /*  45 */ 1, /*  46 */ 0, /*  47 */ 4, /*  48 */ 0, /*  49 */\n-  1, /*  50 */ 0, /*  51 */ 2, /*  52 */ 0, /*  53 */ 1, /*  54 */\n-  0, /*  55 */ 3, /*  56 */ 0, /*  57 */ 1, /*  58 */ 0, /*  59 */\n-  2, /*  60 */ 0, /*  61 */ 1, /*  62 */ 0, /*  63 */ 6, /*  64 */\n-  0, /*  65 */ 1, /*  66 */ 0, /*  67 */ 2, /*  68 */ 0, /*  69 */\n-  1, /*  70 */ 0, /*  71 */ 3, /*  72 */ 0, /*  73 */ 1, /*  74 */\n-  0, /*  75 */ 2, /*  76 */ 0, /*  77 */ 1, /*  78 */ 0, /*  79 */\n-  4, /*  80 */ 0, /*  81 */ 1, /*  82 */ 0, /*  83 */ 2, /*  84 */\n-  0, /*  85 */ 1, /*  86 */ 0, /*  87 */ 3, /*  88 */ 0, /*  89 */\n-  1, /*  90 */ 0, /*  91 */ 2, /*  92 */ 0, /*  93 */ 1, /*  94 */\n-  0, /*  95 */ 5, /*  96 */ 0, /*  97 */ 1, /*  98 */ 0, /*  99 */\n-  2, /* 100 */ 0, /* 101 */ 1, /* 102 */ 0, /* 103 */ 3, /* 104 */\n-  0, /* 105 */ 1, /* 106 */ 0, /* 107 */ 2, /* 108 */ 0, /* 109 */\n-  1, /* 110 */ 0, /* 111 */ 4, /* 112 */ 0, /* 113 */ 1, /* 114 */\n-  0, /* 115 */ 2, /* 116 */ 0, /* 117 */ 1, /* 118 */ 0, /* 119 */\n-  3, /* 120 */ 0, /* 121 */ 1, /* 122 */ 0, /* 123 */ 2, /* 124 */\n-  0, /* 125 */ 1, /* 126 */ 0, /* 127 */ 7, /* 128 */ 0, /* 129 */\n-  1, /* 130 */ 0, /* 131 */ 2, /* 132 */ 0, /* 133 */ 1, /* 134 */\n-  0, /* 135 */ 3, /* 136 */ 0, /* 137 */ 1, /* 138 */ 0, /* 139 */\n-  2, /* 140 */ 0, /* 141 */ 1, /* 142 */ 0, /* 143 */ 4, /* 144 */\n-  0, /* 145 */ 1, /* 146 */ 0, /* 147 */ 2, /* 148 */ 0, /* 149 */\n-  1, /* 150 */ 0, /* 151 */ 3, /* 152 */ 0, /* 153 */ 1, /* 154 */\n-  0, /* 155 */ 2, /* 156 */ 0, /* 157 */ 1, /* 158 */ 0, /* 159 */\n-  5, /* 160 */ 0, /* 161 */ 1, /* 162 */ 0, /* 163 */ 2, /* 164 */\n-  0, /* 165 */ 1, /* 166 */ 0, /* 167 */ 3, /* 168 */ 0, /* 169 */\n-  1, /* 170 */ 0, /* 171 */ 2, /* 172 */ 0, /* 173 */ 1, /* 174 */\n-  0, /* 175 */ 4, /* 176 */ 0, /* 177 */ 1, /* 178 */ 0, /* 179 */\n-  2, /* 180 */ 0, /* 181 */ 1, /* 182 */ 0, /* 183 */ 3, /* 184 */\n-  0, /* 185 */ 1, /* 186 */ 0, /* 187 */ 2, /* 188 */ 0, /* 189 */\n-  1, /* 190 */ 0, /* 191 */ 6, /* 192 */ 0, /* 193 */ 1, /* 194 */\n-  0, /* 195 */ 2, /* 196 */ 0, /* 197 */ 1, /* 198 */ 0, /* 199 */\n-  3, /* 200 */ 0, /* 201 */ 1, /* 202 */ 0, /* 203 */ 2, /* 204 */\n-  0, /* 205 */ 1, /* 206 */ 0, /* 207 */ 4, /* 208 */ 0, /* 209 */\n-  1, /* 210 */ 0, /* 211 */ 2, /* 212 */ 0, /* 213 */ 1, /* 214 */\n-  0, /* 215 */ 3, /* 216 */ 0, /* 217 */ 1, /* 218 */ 0, /* 219 */\n-  2, /* 220 */ 0, /* 221 */ 1, /* 222 */ 0, /* 223 */ 5, /* 224 */\n-  0, /* 225 */ 1, /* 226 */ 0, /* 227 */ 2, /* 228 */ 0, /* 229 */\n-  1, /* 230 */ 0, /* 231 */ 3, /* 232 */ 0, /* 233 */ 1, /* 234 */\n-  0, /* 235 */ 2, /* 236 */ 0, /* 237 */ 1, /* 238 */ 0, /* 239 */\n-  4, /* 240 */ 0, /* 241 */ 1, /* 242 */ 0, /* 243 */ 2, /* 244 */\n-  0, /* 245 */ 1, /* 246 */ 0, /* 247 */ 3, /* 248 */ 0, /* 249 */\n-  1, /* 250 */ 0, /* 251 */ 2, /* 252 */ 0, /* 253 */ 1, /* 254 */\n-  0, /* 255 */\n-}; // end _S_first_one\n-"}]}