{"sha": "6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "node_id": "C_kwDOANBUbNoAKDY2NjdkNWZlYjljYmIxNGZjNGUyYTRmOTBkOWRmYTE0ZTI0ZDViZDk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-21T16:43:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-21T21:23:00Z"}, "message": "libstdc++: Suppress Doxygen docs for more implementation details\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/alloc_traits.h: Suppress doxygen documentation.\n\t* include/bits/allocated_ptr.h: Likewise.\n\t* include/bits/enable_special_members.h: Likewise.\n\t* include/bits/hashtable.h: Likewise.\n\t* include/bits/hashtable_policy.h: Likewise.\n\t* include/bits/uses_allocator.h: Likewise.\n\t* include/bits/node_handle.h: Document node handles and suppress\n\tdocumentation for protected members.\n\t* include/std/any: Suppress documentation for implementation\n\tdetails.", "tree": {"sha": "01b491215fac71701bd7f14d0fa8b4f64753908c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b491215fac71701bd7f14d0fa8b4f64753908c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d100354317475412161a487ffbcf36582115c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d100354317475412161a487ffbcf36582115c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d100354317475412161a487ffbcf36582115c5"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "602a90d4d8a63a19e89820fda7fc0acd4039064e", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -45,6 +45,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n #define __cpp_lib_allocator_traits_is_always_equal 201411\n \n+  /// @cond undocumented\n   struct __allocator_traits_base\n   {\n     template<typename _Tp, typename _Up, typename = void>\n@@ -77,10 +78,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Alloc, typename _Up>\n     using __alloc_rebind\n       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;\n+  /// @endcond\n \n   /**\n    * @brief  Uniform interface to all allocator types.\n+   * @headerfile memory\n    * @ingroup allocators\n+   * @since C++11\n   */\n   template<typename _Alloc>\n     struct allocator_traits : __allocator_traits_base"}, {"sha": "695695f7d11fb18267aa018fd5152da519da6cf4", "filename": "libstdc++-v3/include/bits/allocated_ptr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocated_ptr.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -40,6 +40,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+/// @cond undocumented\n \n   /// Non-standard RAII type for managing pointers obtained from allocators.\n   template<typename _Alloc>\n@@ -97,6 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };\n     }\n \n+/// @endcond\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "ac59f72e328958c424a314511126909ce8cc0d56", "filename": "libstdc++-v3/include/bits/enable_special_members.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -37,6 +37,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+/// @cond undocumented\n \n   struct _Enable_default_constructor_tag\n   {\n@@ -308,6 +309,7 @@ template<typename _Tag>\n     operator=(_Enable_copy_move&&) noexcept                         = delete;\n   };\n \n+/// @endcond\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "25c45d3ba85370985b2da8975a95aabd988c3e02", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -41,6 +41,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+/// @cond undocumented\n \n   template<typename _Tp, typename _Hash>\n     using __cache_default\n@@ -2546,6 +2547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       = __enable_if_t<!__or_<is_integral<_Hash>, __is_allocator<_Hash>>::value>;\n #endif\n \n+/// @endcond\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "8c72043e368ec12457cbf6baa61aeaa7434a2822", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -38,6 +38,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+/// @cond undocumented\n \n   template<typename _Key, typename _Value, typename _Alloc,\n \t   typename _ExtractKey, typename _Equal,\n@@ -1970,6 +1971,7 @@ namespace __detail\n \n  ///@} hashtable-detail\n } // namespace __detail\n+/// @endcond\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "7d8d0dc8cea8b0035c60a2addf5623a3809a896e", "filename": "libstdc++-v3/include/bits/node_handle.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -44,6 +44,21 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   * @defgroup node_handles Node handles\n+   * @ingroup associative_containers\n+   * @since C++17\n+   *\n+   * The associative containers (`map`, `set`, `multimap` and `multiset`)\n+   * support extracting and re-inserting nodes from the container. Those\n+   * operations use the container's `node_handle` type, which is an alias\n+   * for a `_Node_handle<...>` type. You should always use the container's\n+   * `node_handle` type (e.g. `std::set<int>::node_handle`) to refer to\n+   * these types, not the non-standard internal `_Node_handle` names.\n+   *\n+   * @{\n+   */\n+\n   /// Base class for node handle types of maps and sets.\n   template<typename _Val, typename _NodeAlloc>\n     class _Node_handle_common\n@@ -64,6 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       [[nodiscard]] bool empty() const noexcept { return _M_ptr == nullptr; }\n \n+    /// @cond undocumented\n     protected:\n       constexpr _Node_handle_common() noexcept : _M_ptr() { }\n \n@@ -214,6 +230,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Key2, typename _Value2, typename _KeyOfValue,\n \t       typename _Compare, typename _ValueAlloc>\n \tfriend class _Rb_tree;\n+\n+      /// @endcond\n     };\n \n   /// Node handle type for maps.\n@@ -367,6 +385,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _NodeHandle\tnode;\n     };\n \n+  /// @}\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "bd4467094a2594985cad23e915b0450b81df2296", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -35,6 +35,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+/// @cond undocumented\n \n   // This is used for std::experimental::erased_type from Library Fundamentals.\n   struct __erased_type { };\n@@ -188,6 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  std::forward<_Args>(__args)...);\n     }\n \n+/// @endcond\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "9c102a58b26cf8405c946e01bf8645f4461e1c4e", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=6667d5feb9cbb14fc4e2a4f90d9dfa14e24d5bd9", "patch": "@@ -72,8 +72,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @brief A type-safe container of any type.\n    *\n-   *  An @c any object's state is either empty or it stores a contained object\n+   *  An `any` object's state is either empty or it stores a contained object\n    *  of CopyConstructible type.\n+   *\n+   *  @since C++17\n    */\n   class any\n   {\n@@ -337,9 +339,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+    /// @cond undocumented\n     template<typename _Tp>\n       static constexpr bool __is_valid_cast()\n       { return __or_<is_reference<_Tp>, is_copy_constructible<_Tp>>::value; }\n+    /// @endcond\n \n   private:\n     enum _Op {\n@@ -356,8 +360,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void (*_M_manager)(_Op, const any*, _Arg*);\n     _Storage _M_storage;\n \n+    /// @cond undocumented\n     template<typename _Tp>\n       friend void* __any_caster(const any* __any);\n+    /// @endcond\n \n     // Manage in-place contained object.\n     template<typename _Tp>"}]}