{"sha": "fec283b63d7f24f4c37792dd07ab1055186ba88f", "node_id": "C_kwDOANBUbNoAKGZlYzI4M2I2M2Q3ZjI0ZjRjMzc3OTJkZDA3YWIxMDU1MTg2YmE4OGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T19:48:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:50Z"}, "message": "libstdc++: Remove unnecessary uses of _GLIBCXX_USE_WCHAR_T in testsuite [PR98725]\n\nNow that std::wstring and other specializations for wchar_t are defined\nunconditionally, many checks for _GLIBCXX_USE_WCHAR_T in the testsuite\nare unnecessary and can be removed. Tests for iostreams, locales, regex\nand filesystem::path still need to be guarded by _GLIBCXX_USE_WCHAR_T\nbecause those components depend on libc support in <wchar.h> and other\nheaders.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98725\n\t* testsuite/18_support/numeric_limits/lowest.cc: Remove use of\n\t_GLIBCXX_USE_WCHAR_T.\n\t* testsuite/18_support/numeric_limits/min_max.cc: Replace use of\n\t_GLIBCXX_USE_WCHAR_T with checks for WCHAR_MIN and WCHAR_MAX.\n\t* testsuite/20_util/from_chars/1_neg.cc: Remove use of\n\t_GLIBCXX_USE_WCHAR_T.\n\t* testsuite/20_util/function_objects/searchers.cc: Likewise. Use\n\tchar_traits<wchar_t>::length instead of wcslen.\n\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n\tLikewise.\n\t* testsuite/20_util/is_arithmetic/value.cc: Likewise.\n\t* testsuite/20_util/is_compound/value.cc: Likewise.\n\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n\t* testsuite/20_util/is_fundamental/value.cc: Likewise.\n\t* testsuite/20_util/is_integral/value.cc: Likewise.\n\t* testsuite/20_util/is_signed/value.cc: Likewise.\n\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n\t* testsuite/20_util/is_void/value.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-4.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc:\n\tLikewise.\n\t* testsuite/20_util/to_chars/3.cc: Likewise.\n\t* testsuite/20_util/type_identity/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/hash/debug.cc: Likewise.\n\t* testsuite/21_strings/basic_string/hash/hash.cc: Likewise.\n\t* testsuite/21_strings/basic_string/literals/types-char8_t.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/literals/types.cc: Likewise.\n\t* testsuite/21_strings/basic_string/literals/values-char8_t.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/literals/values.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/modifiers/64422.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/citerators.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/literals/types-char8_t.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/literals/types.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/literals/values-char8_t.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/literals/values.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/typedefs.cc: Likewise.\n\t* testsuite/21_strings/char_traits/requirements/constexpr_functions.cc:\n\tLikewise.\n\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc:\n\tLikewise.\n\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n\tLikewise.\n\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Likewise.\n\t* testsuite/25_algorithms/fill/4.cc: Likewise.\n\t* testsuite/25_algorithms/fill_n/1.cc: Likewise.\n\t* testsuite/experimental/functional/searchers.cc: Likewise. Use\n\tchar_traits<wchar_t>::length instead of wcslen.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/literals/types-char8_t.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/literals/types.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/literals/values-char8_t.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/literals/values.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/range_access/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/experimental/string_view/typedefs.cc: Likewise.\n\t* testsuite/ext/vstring/range_access.cc: Likewise.\n\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/integral.cc:\n\tLikewise.\n\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/signed_integral.cc:\n\tLikewise.\n\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/unsigned_integral.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_arithmetic/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_compound/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_floating_point/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_fundamental/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_integral/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_signed/value.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/is_unsigned/value.cc:\n\tLikewise.\n\t* testsuite/tr1/4_metaprogramming/is_void/value.cc: Likewise.\n\t* testsuite/tr1/6_containers/hash/24799.cc: Likewise.", "tree": {"sha": "7b3d207f4294387618b351fc9081b1a1040c8c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b3d207f4294387618b351fc9081b1a1040c8c56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fec283b63d7f24f4c37792dd07ab1055186ba88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec283b63d7f24f4c37792dd07ab1055186ba88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec283b63d7f24f4c37792dd07ab1055186ba88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec283b63d7f24f4c37792dd07ab1055186ba88f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a89281c4005a51eeed058ca66bcce8df1dd1b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a89281c4005a51eeed058ca66bcce8df1dd1b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a89281c4005a51eeed058ca66bcce8df1dd1b24"}], "stats": {"total": 207, "additions": 18, "deletions": 189}, "files": [{"sha": "54866966ee02b8aff1ec86414ff153ad425a367b", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -52,9 +52,7 @@ void test01()\n   do_test<char>();\n   do_test<signed char>();\n   do_test<unsigned char>();\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   do_test<wchar_t>();\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   do_test<char8_t>();\n #endif"}, {"sha": "6a76a93d3bbeb812043724d456a7be390ce5f08e", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/min_max.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -48,9 +48,9 @@ DEFINE_EXTREMA(unsigned, 0U, UINT_MAX);\n DEFINE_EXTREMA(long, LONG_MIN, LONG_MAX);\n DEFINE_EXTREMA(unsigned long, 0UL, ULONG_MAX);\n \n-#if _GLIBCXX_USE_WCHAR_T\n+#if defined WCHAR_MIN && defined WCHAR_MAX\n DEFINE_EXTREMA(wchar_t, WCHAR_MIN, WCHAR_MAX);\n-#endif //_GLIBCXX_USE_WCHAR_T\n+#endif\n \n DEFINE_EXTREMA(float, FLT_MIN, FLT_MAX);\n DEFINE_EXTREMA(double, DBL_MIN, DBL_MAX);\n@@ -74,7 +74,7 @@ int main()\n   test_extrema<char>();\n   test_extrema<signed char>();\n   test_extrema<unsigned char>();\n-  \n+\n   test_extrema<short>();\n   test_extrema<unsigned short>();\n "}, {"sha": "08bd63a854b5cf0d0df6da2998cf01e3553cc9a4", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1_neg.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1_neg.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -22,11 +22,7 @@\n void\n test01(const char* first, const char* last)\n {\n-#if _GLIBCXX_USE_WCHAR_T\n   wchar_t wc;\n-#else\n-  enum W { } wc;\n-#endif\n   std::from_chars(first, last, wc); // { dg-error \"no matching\" }\n   std::from_chars(first, last, wc, 10); // { dg-error \"no matching\" }\n "}, {"sha": "bd32776a6105caf4407257970693fb4481310ce5", "filename": "libstdc++-v3/testsuite/20_util/function_objects/searchers.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -18,11 +18,9 @@\n // { dg-do run { target c++17 } }\n \n #include <functional>\n+#include <string_view>\n #include <cstring>\n #include <cctype>\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-# include <cwchar>\n-#endif\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n@@ -84,7 +82,6 @@ test01()\n void\n test02()\n {\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   const wchar_t s[] = { L'a', (wchar_t)-97, L'a', L'\\0' };\n   const wchar_t* needles[] = {\n     s, L\"\", L\"a\", L\"aa\", L\"aaa\", L\"ab\", L\"cd\", L\"abcd\", L\"abcdabcd\", L\"abcabcd\"\n@@ -96,14 +93,14 @@ test02()\n \n   for (auto n : needles)\n   {\n-    auto nlen = std::wcslen(n);\n+    auto nlen = std::char_traits<wchar_t>::length(n);\n     auto ne = n + nlen;\n     default_searcher d(n, ne);\n     boyer_moore_searcher bm(n, ne);\n     boyer_moore_horspool_searcher bmh(n, ne);\n     for (auto h : haystacks)\n     {\n-      auto he = h + std::wcslen(h);\n+      auto he = h + std::char_traits<wchar_t>::length(h);\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n       VERIFY( d_res.first == res );\n@@ -125,7 +122,6 @@ test02()\n \tVERIFY( bmh_res.second == (bmh_res.first + nlen) );\n     }\n   }\n-#endif\n }\n \n void"}, {"sha": "9f76daae381d4d92409e15e21316a630c09bb1a5", "filename": "libstdc++-v3/testsuite/20_util/hash/requirements/explicit_instantiation.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -47,8 +47,5 @@ template class std::hash<std::error_code>;\n template class std::hash<std::error_condition>;\n #endif\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n template class std::hash<wchar_t>;\n template class std::hash<std::wstring>;\n-#endif\n-"}, {"sha": "644830a95d2f5629dad08616a7431223c232a590", "filename": "libstdc++-v3/testsuite/20_util/is_arithmetic/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_arithmetic%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_arithmetic%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_arithmetic%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -30,9 +30,7 @@ void test01()\n   static_assert(test_category<is_arithmetic, char>(true), \"\");\n   static_assert(test_category<is_arithmetic, signed char>(true), \"\");\n   static_assert(test_category<is_arithmetic, unsigned char>(true), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_arithmetic, wchar_t>(true), \"\");\n-#endif\n   static_assert(test_category<is_arithmetic, short>(true), \"\");\n   static_assert(test_category<is_arithmetic, unsigned short>(true), \"\");\n   static_assert(test_category<is_arithmetic, int>(true), \"\");"}, {"sha": "1ffa133b604fb78d77c8a949769c05a5452636b7", "filename": "libstdc++-v3/testsuite/20_util/is_compound/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_compound%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -29,9 +29,7 @@ void test01()\n   static_assert(test_category<is_compound, char>(false), \"\");\n   static_assert(test_category<is_compound, signed char>(false), \"\");\n   static_assert(test_category<is_compound, unsigned char>(false), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_compound, wchar_t>(false), \"\");\n-#endif\n   static_assert(test_category<is_compound, short>(false), \"\");\n   static_assert(test_category<is_compound, unsigned short>(false), \"\");\n   static_assert(test_category<is_compound, int>(false), \"\");"}, {"sha": "ad4aeeaa6c6d9d005aa6878cb37378bb49bbf015", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -30,9 +30,7 @@ void test01()\n   static_assert(test_category<is_floating_point, char>(false), \"\");\n   static_assert(test_category<is_floating_point, signed char>(false), \"\");\n   static_assert(test_category<is_floating_point, unsigned char>(false), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_floating_point, wchar_t>(false), \"\");\n-#endif\n   static_assert(test_category<is_floating_point, short>(false), \"\");\n   static_assert(test_category<is_floating_point, unsigned short>(false), \"\");\n   static_assert(test_category<is_floating_point, int>(false), \"\");"}, {"sha": "f3c7a7645f0d406dd0ff6795dd250ecd4a031b1e", "filename": "libstdc++-v3/testsuite/20_util/is_fundamental/value.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_fundamental%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -24,14 +24,12 @@ void test01()\n {\n   using std::is_fundamental;\n   using namespace __gnu_test;\n-  \n+\n   static_assert(test_category<is_fundamental, void>(true), \"\");\n   static_assert(test_category<is_fundamental, char>(true), \"\");\n   static_assert(test_category<is_fundamental, signed char>(true), \"\");\n   static_assert(test_category<is_fundamental, unsigned char>(true), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_fundamental, wchar_t>(true), \"\");\n-#endif\n   static_assert(test_category<is_fundamental, short>(true), \"\");\n   static_assert(test_category<is_fundamental, unsigned short>(true), \"\");\n   static_assert(test_category<is_fundamental, int>(true), \"\");"}, {"sha": "043601706fec61ed41513d23a4bf2534bb9184f1", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -28,13 +28,11 @@ void test01()\n   using namespace __gnu_test;\n \n   static_assert(test_category<is_integral, void>(false), \"\");\n-  \n+\n   static_assert(test_category<is_integral, char>(true), \"\");\n   static_assert(test_category<is_integral, signed char>(true), \"\");\n   static_assert(test_category<is_integral, unsigned char>(true), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_integral, wchar_t>(true), \"\");\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   static_assert(test_category<is_integral, char8_t>(true), \"\");\n #endif"}, {"sha": "cce9ac2a555bf962c2eb0218114e8374beaef212", "filename": "libstdc++-v3/testsuite/20_util/is_signed/value.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -26,16 +26,14 @@ void test01()\n {\n   using std::is_signed;\n   using namespace __gnu_test;\n-  \n+\n   static_assert(test_category<is_signed, void>(false), \"\");\n-  \n+\n   static_assert(test_category<is_signed, char>(char(-1) < char(0)), \"\");\n   static_assert(test_category<is_signed, signed char>(true), \"\");\n   static_assert(test_category<is_signed, unsigned char>(false), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_signed, wchar_t>\n \t\t(wchar_t(-1) < wchar_t(0)), \"\");\n-#endif\n   static_assert(test_category<is_signed, short>(true), \"\");\n   static_assert(test_category<is_signed, unsigned short>(false), \"\");\n   static_assert(test_category<is_signed, int>(true), \"\");"}, {"sha": "37a52b8e99b93379cba9c14684b2c7c70b49a6fb", "filename": "libstdc++-v3/testsuite/20_util/is_unsigned/value.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -28,14 +28,12 @@ void test01()\n   using namespace __gnu_test;\n \n   static_assert(test_category<is_unsigned, void>(false), \"\");\n-  \n+\n   static_assert(test_category<is_unsigned, char>(char(-1) > char(0)), \"\");\n   static_assert(test_category<is_unsigned, signed char>(false), \"\");\n   static_assert(test_category<is_unsigned, unsigned char>(true), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_unsigned, wchar_t>\n \t\t(wchar_t(-1) > wchar_t(0)), \"\");\n-#endif\n   static_assert(test_category<is_unsigned, short>(false), \"\");\n   static_assert(test_category<is_unsigned, unsigned short>(true), \"\");\n   static_assert(test_category<is_unsigned, int>(false), \"\");"}, {"sha": "31791a6119cb7162b8ce50582e291147f7618efc", "filename": "libstdc++-v3/testsuite/20_util/is_void/value.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_void%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_void%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_void%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -26,13 +26,11 @@ void test01()\n   using namespace __gnu_test;\n \n   static_assert(test_category<is_void, void>(true), \"\");\n-  \n+\n   static_assert(test_category<is_void, char>(false), \"\");\n   static_assert(test_category<is_void, signed char>(false), \"\");\n   static_assert(test_category<is_void, unsigned char>(false), \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test_category<is_void, wchar_t>(false), \"\");\n-#endif\n   static_assert(test_category<is_void, short>(false), \"\");\n   static_assert(test_category<is_void, unsigned short>(false), \"\");\n   static_assert(test_category<is_void, int>(false), \"\");"}, {"sha": "ec6141b4db408ad46dfa6e6d18682a35c79fd5a3", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -51,13 +51,11 @@ void test01()\n   static_assert( is_same<test22_type, const signed char>::value,\n                  \"make_signed<const char>\" );\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n   static_assert( is_signed<test23_type>::value\n                  && is_volatile<test23_type>::value\n                  && sizeof(test23_type) == sizeof(volatile wchar_t),\n                  \"make_signed<volatile wchar_t>\" );\n-#endif\n \n   // Chapter 48, chapter 20. Smallest rank such that new signed type same size.\n   typedef make_signed<test_enum>::type  \ttest24_type;"}, {"sha": "22685e03f308a61077559d53a4b2c7ec98bf07e7", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -49,12 +49,10 @@ void test01()\n   typedef make_signed<const char>::type  \ttest22_type;\n   static_assert(is_same<test22_type, const signed char>::value, \"\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n   static_assert(is_signed<test23_type>::value\n                  && is_volatile<test23_type>::value\n                  && sizeof(test23_type) == sizeof(volatile wchar_t), \"\");\n-#endif\n \n   typedef make_signed<test_enum>::type  \ttest24_type;\n   static_assert(is_same<test24_type, short>::value, \"\");"}, {"sha": "b428e03a7b81f95080704714deb61721d9d1b8f7", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -72,8 +72,6 @@ static_assert(is_same<make_signed<char16_t const>::type, I6 const>::value, \"\");\n using I7 = smallest_rank_t<char32_t>;\n static_assert(is_same<make_signed<char32_t>::type, I7>::value, \"\");\n static_assert(is_same<make_signed<char32_t const>::type, I7 const>::value, \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n using I8 = smallest_rank_t<wchar_t>;\n static_assert(is_same<make_signed<wchar_t>::type, I8>::value, \"\");\n static_assert(is_same<make_signed<wchar_t const>::type, I8 const>::value, \"\");\n-#endif"}, {"sha": "55f0018d9dfcfb65f6b9d8d7bc9ee1b672d86d4f", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-4.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-4.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -22,11 +22,9 @@\n // libstdc++/60326\n \n using namespace std;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n using wchar_signed = make_signed<wchar_t>::type;\n using wchar_unsigned = make_unsigned<wchar_t>::type;\n static_assert( !is_same<wchar_signed, wchar_unsigned>::value, \"wchar_t\" );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( is_signed<make_signed<char8_t>::type>::value, \"char8_t\");\n #endif"}, {"sha": "bb986930d9aefd2f7f6a7503df7cc0512aa9063e", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -47,12 +47,10 @@ void test01()\n   typedef make_unsigned<const char>::type  \ttest22_type;\n   static_assert(is_same<test22_type, const unsigned char>::value, \"\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n   static_assert(is_unsigned<test23_type>::value\n                 && is_volatile<test23_type>::value\n                 && sizeof(test23_type) == sizeof(volatile wchar_t), \"\");\n-#endif\n \n   // Chapter 48, chapter 20. Smallest rank such that new unsigned type\n   // same size."}, {"sha": "5b4a1d4a249075947f014228af0f3ddd81b728e9", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -49,12 +49,10 @@ void test01()\n   typedef make_unsigned<const char>::type  \ttest22_type;\n   static_assert(is_same<test22_type, const unsigned char>::value, \"\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n   static_assert(is_unsigned<test23_type>::value\n                 && is_volatile<test23_type>::value\n                 && sizeof(test23_type) == sizeof(volatile wchar_t), \"\");\n-#endif\n \n   typedef make_unsigned<test_enum>::type  \t  test24_type;\n   static_assert(is_same<test24_type, unsigned short>::value, \"\");"}, {"sha": "737ec6fb0e0bfbe13fd2c8e8c0fa38eb1adc2c3b", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -72,8 +72,6 @@ static_assert(is_same<make_unsigned<char16_t const>::type, I6 const>::value, \"\")\n using I7 = smallest_rank_t<char32_t>;\n static_assert(is_same<make_unsigned<char32_t>::type, I7>::value, \"\");\n static_assert(is_same<make_unsigned<char32_t const>::type, I7 const>::value, \"\");\n-#ifdef _GLIBCXX_USE_WCHAR_T\n using I8 = smallest_rank_t<wchar_t>;\n static_assert(is_same<make_unsigned<wchar_t>::type, I8>::value, \"\");\n static_assert(is_same<make_unsigned<wchar_t const>::type, I8 const>::value, \"\");\n-#endif"}, {"sha": "b40ba8703826731b9f29bfd2f2453d05104b309a", "filename": "libstdc++-v3/testsuite/20_util/to_chars/3.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -48,9 +48,7 @@ test01()\n {\n   VERIFY( check_to_chars(u'\\x21') );\n   VERIFY( check_to_chars(U'\\x21') );\n-#if _GLIBCXX_USE_WCHAR_T\n   VERIFY( check_to_chars(L'\\x21') );\n-#endif\n }\n \n int main()"}, {"sha": "cfdc716fad588256db9a9bc61d55cc963ca7250d", "filename": "libstdc++-v3/testsuite/20_util/type_identity/requirements/typedefs.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftype_identity%2Frequirements%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -38,10 +38,7 @@ void test01()\n   static_assert(test<volatile unsigned int>::value, \"\");\n   static_assert(test<const volatile unsigned int>::value, \"\");\n   static_assert(test<const unsigned char>::value, \"\");\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(test<volatile wchar_t>::value, \"\" );\n-#endif\n \n   // Pointers\n   static_assert(test<void*>::value, \"\");"}, {"sha": "59952e4e4b508fa05b957b7015d8f5f57cfc8ea2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/debug.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -43,9 +43,7 @@ test01()\n #endif\n   VERIFY( test(__gnu_debug::u16string(u\"a utf-16 string\")) );\n   VERIFY( test(__gnu_debug::u32string(U\"a utf-32 string\")) );\n-#if _GLIBCXX_USE_WCHAR_T\n   VERIFY( test(__gnu_debug::wstring(L\"a wide string\")) );\n-#endif\n }\n \n #if _GLIBCXX_USE_CHAR8_T"}, {"sha": "2e739c02cef16e81fe09115c8bc6168877e10585", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -40,9 +40,7 @@ test01()\n   VERIFY( test(std::string(\"a narrow string\")) );\n   VERIFY( test(std::u16string(u\"a utf-16 string\")) );\n   VERIFY( test(std::u32string(U\"a utf-32 string\")) );\n-#if _GLIBCXX_USE_WCHAR_T\n   VERIFY( test(std::wstring(L\"a wide string\")) );\n-#endif\n }\n \n void\n@@ -52,10 +50,8 @@ test02()\n   VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n   VERIFY( test(std::pmr::u16string(u\"a utf-16 string, but with PMR!\")) );\n   VERIFY( test(std::pmr::u32string(U\"a utf-32 string, but with PMR!\")) );\n-#if _GLIBCXX_USE_WCHAR_T\n   VERIFY( test(std::pmr::wstring(L\"a wide string, but with PMR!\")) );\n #endif\n-#endif\n }\n \n int"}, {"sha": "e050b2ffe0dde6819a2bb1fef4cbd1e124063cd6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types-char8_t.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -38,10 +38,8 @@ test01()\n #endif\n \n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"s), std::wstring>::value,\n \t\t\"L\\\"Hello\\\"s is std::wstring\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"s), std::u16string>::value,\n \t\t\"u\\\"Hello\\\"s is std::u16string\");"}, {"sha": "3196fd338f90ffc3066248e8f9828b8687c7eea3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -37,10 +37,8 @@ test01()\n   static_assert(std::is_same<decltype(u8\"Hello\"s), u8string>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"s), std::wstring>::value,\n \t\t\"L\\\"Hello\\\"s is std::wstring\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"s), std::u16string>::value,\n \t\t\"u\\\"Hello\\\"s is std::u16string\");"}, {"sha": "cf6c9bc21005483a23695dce149489859862e89d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values-char8_t.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -27,9 +27,7 @@ test01()\n   using namespace std::literals::string_literals;\n \n   std::string planet = \"Mercury\"s;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring wplanet = L\"Venus\"s;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   std::u8string u8planet = u8\"Mars\"s;\n #else\n@@ -39,9 +37,7 @@ test01()\n   std::u32string u32planet = U\"Saturn\"s;\n \n   VERIFY( planet == std::string(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring(L\"Venus\") );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   VERIFY( u8planet == std::u8string(u8\"Mars\") );\n #else"}, {"sha": "8057b3e33e1baeb0d676993e9f33e799ec57e77f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,17 +32,13 @@ test01()\n   using namespace std::literals::string_literals;\n \n   std::string planet = \"Mercury\"s;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring wplanet = L\"Venus\"s;\n-#endif\n   u8string u8planet = u8\"Mars\"s;\n   std::u16string u16planet = u\"Jupiter\"s;\n   std::u32string u32planet = U\"Saturn\"s;\n \n   VERIFY( planet == std::string(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring(L\"Venus\") );\n-#endif\n   VERIFY( u8planet == u8string(u8\"Mars\") );\n   VERIFY( u16planet == std::u16string(u\"Jupiter\") );\n   VERIFY( u32planet == std::u32string(U\"Saturn\") );"}, {"sha": "2cdd3084363e918276b8755991cf8056fcdcea66", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/64422.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -34,7 +34,6 @@ main ()\n   x.replace (x.begin (), x.end (), best, best + 4);\n   x.replace (x.begin (), x.end (), x);\n   x.erase (x.begin (), x.end ());\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring w;\n   w.insert (w.begin (), 10, L'x');\n   const wchar_t west[] = L\"west\";\n@@ -44,6 +43,5 @@ main ()\n   w.replace (w.begin (), w.end (), rest, rest + 4);\n   w.replace (w.begin (), w.end (), w);\n   w.erase (w.begin (), w.end ());\n-#endif\n   return 0;\n }"}, {"sha": "c307b1a1479c674a1ec8ec495a4c924c6664af9d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/range_access/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frange_access%2Fwchar_t%2F1.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -24,9 +24,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring ws(L\"Hello, World!\");\n   (void) std::begin(ws);\n   (void) std::end(ws);\n-#endif\n }"}, {"sha": "c7d22f22bdecd727c77ed45332690167b5ea7b1b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/citerators.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -27,9 +27,7 @@ int main()\n {\n   __gnu_test::citerator<std::string> test1;\n   __gnu_test::citerator<__gnu_debug::string> dtest1;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   __gnu_test::citerator<std::wstring> test2;\n   __gnu_test::citerator<__gnu_debug::wstring> dtest2;\n-#endif\n   return 0;\n }"}, {"sha": "33f35304e9889249ed7266df99304d6e1f52a7a9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/typedefs.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -24,7 +24,5 @@\n // Check container for required typedefs.\n __gnu_test::types<std::string> t1;\n __gnu_test::types<__gnu_debug::string> dt1;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n __gnu_test::types<std::wstring> t2;\n __gnu_test::types<__gnu_debug::wstring> dt2;\n-#endif"}, {"sha": "7b383fc534e597cbf82e78ce4304c2426c835ca6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/types/pmr_typedefs.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ftypes%2Fpmr_typedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -44,7 +44,6 @@ static_assert(std::is_same_v<std::pmr::u32string,\n     std::basic_string<char32_t, std::char_traits<char32_t>,\n \t\t      std::pmr::polymorphic_allocator<char32_t>>>);\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert(std::is_same_v<std::pmr::basic_string<wchar_t>,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n \t\t      std::pmr::polymorphic_allocator<wchar_t>>>);\n@@ -54,4 +53,3 @@ static_assert(std::is_same_v<std::pmr::basic_string<wchar_t, T>,\n static_assert(std::is_same_v<std::pmr::wstring,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n \t\t      std::pmr::polymorphic_allocator<wchar_t>>>);\n-#endif"}, {"sha": "6c5c1aa5d4fcab32954f5f5d3e1c8d8ab5c2c06a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/types-char8_t.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -37,10 +37,8 @@ test01()\n \t\t\"u8\\\"Hello\\\"sv is std::string_view\");\n #endif\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"sv), std::wstring_view>::value,\n \t\t\"L\\\"Hello\\\"sv is std::wstring_view\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"sv), std::u16string_view>::value,\n \t\t\"u\\\"Hello\\\"sv is std::u16string_view\");"}, {"sha": "851501d673498b1ce3ed8f5c883d19fa8a980d92", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/types.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -37,10 +37,8 @@ test01()\n   static_assert(std::is_same<decltype(u8\"Hello\"sv), u8string_view>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string_view\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"sv), std::wstring_view>::value,\n \t\t\"L\\\"Hello\\\"s is std::wstring_view\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"sv), std::u16string_view>::value,\n \t\t\"u\\\"Hello\\\"s is std::u16string_view\");"}, {"sha": "54e8cb25b116ade50c3321bcc0a68aac41280143", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/values-char8_t.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -27,9 +27,7 @@ test01()\n   using namespace std::literals::string_view_literals;\n \n   std::string_view planet = \"Mercury\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet = L\"Venus\"sv;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   std::u8string_view u8planet = u8\"Mars\"sv;\n #else\n@@ -39,9 +37,7 @@ test01()\n   std::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::string_view(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring_view(L\"Venus\") );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   VERIFY( u8planet == std::u8string_view(u8\"Mars\") );\n #else\n@@ -57,9 +53,7 @@ test02()\n   using namespace std::literals::string_view_literals;\n \n   std::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   std::u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n #else\n@@ -69,9 +63,7 @@ test02()\n   std::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n \n   VERIFY( planet_cratered == std::string_view(\"Mercury\\0cratered\", 16) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet_cratered == std::wstring_view(L\"Venus\\0cratered\", 14) );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   VERIFY( u8planet_cratered == std::u8string_view(u8\"Mars\\0cratered\", 13) );\n #else"}, {"sha": "28e648ff7646de6b91ca4a3c297bf9ad4e892dd0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/values.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,17 +32,13 @@ test01()\n   using namespace std::literals::string_view_literals;\n \n   std::string_view planet = \"Mercury\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet = L\"Venus\"sv;\n-#endif\n   u8string_view u8planet = u8\"Mars\"sv;\n   std::u16string_view u16planet = u\"Jupiter\"sv;\n   std::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::string_view(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring_view(L\"Venus\") );\n-#endif\n   VERIFY( u8planet == u8string_view(u8\"Mars\") );\n   VERIFY( u16planet == std::u16string_view(u\"Jupiter\") );\n   VERIFY( u32planet == std::u32string_view(U\"Saturn\") );\n@@ -54,17 +50,13 @@ test02()\n   using namespace std::literals::string_view_literals;\n \n   std::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n-#endif\n   u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n   std::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n   std::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n \n   VERIFY( planet_cratered == std::string_view(\"Mercury\\0cratered\", 16) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet_cratered == std::wstring_view(L\"Venus\\0cratered\", 14) );\n-#endif\n   VERIFY( u8planet_cratered == u8string_view(u8\"Mars\\0cratered\", 13) );\n   VERIFY( u16planet_cratered == std::u16string_view(u\"Jupiter\\0cratered\", 16) );\n   VERIFY( u32planet_cratered == std::u32string_view(U\"Saturn\\0cratered\", 15) );"}, {"sha": "c75029a022a41cc32ed912ec48e042e314052ae1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/typedefs.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -39,11 +39,9 @@ __gnu_test::basic_types<std::string_view> t1b;\n __gnu_test::reversible_types<std::string_view> t1r;\n typedef typename std::string_view::traits_type traits_type1;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n __gnu_test::basic_types<std::wstring_view> t2b;\n __gnu_test::reversible_types<std::wstring_view> t2r;\n typedef typename std::wstring_view::traits_type traits_type2;\n-#endif\n \n static_assert(std::is_same<std::string_view::pointer, char*>(),\n     \"pointer should be value_type*\");"}, {"sha": "b14610d452ca36241fd1882733b6c4bc9a3a5dde", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/typedefs.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,6 +33,4 @@ using check4_t = std::u16string_view;\n using check5_t = std::u32string_view;\n #endif\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n using check6_t = std::wstring_view;\n-#endif"}, {"sha": "8bfac4af220f045475b94aa504cf9ad4af1f551d", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -31,7 +31,7 @@ namespace __gnu_test\n \tstruct _Concept\n \t{\n \t  void __constraint()\n-\t  { \n+\t  {\n \t    typedef typename _Ttesttype::char_type char_type;\n \t    typedef typename _Ttesttype::int_type int_type;\n \t    const char_type c1(0);\n@@ -64,9 +64,7 @@ int main()\n {\n   __gnu_test::constexpr_member_functions test;\n   test.operator()<std::char_traits<char>>();\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   test.operator()<std::char_traits<wchar_t>>();\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   test.operator()<std::char_traits<char8_t>>();\n #endif"}, {"sha": "fa82be2fc58eb94f2d74efcbe7b42f3627f80043", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -89,12 +89,10 @@ static_assert( test_assign<std::char_traits<char>>() );\n static_assert( test_compare<std::char_traits<char>>() );\n static_assert( test_length<std::char_traits<char>>() );\n static_assert( test_find<std::char_traits<char>>() );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( test_assign<std::char_traits<wchar_t>>() );\n static_assert( test_compare<std::char_traits<wchar_t>>() );\n static_assert( test_length<std::char_traits<wchar_t>>() );\n static_assert( test_find<std::char_traits<wchar_t>>() );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( test_assign<std::char_traits<char8_t>>() );\n static_assert( test_compare<std::char_traits<char8_t>>() );"}, {"sha": "0577cb1c0bc7269bff4ee42395c3977ff774dedb", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B20.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -44,9 +44,7 @@ template<typename CT>\n #endif\n \n static_assert( test_move<std::char_traits<char>>() );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( test_move<std::char_traits<wchar_t>>() );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( test_move<std::char_traits<char8_t>>() );\n #endif"}, {"sha": "71772427815bdee32a93c130015f94d3bf0bb8bc", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/string/89728_neg.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -52,7 +52,6 @@ void test01()\n   std::tolower(make_str<char, 12>(), loc);\t// { dg-error \"required from here\" }\n }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n void test02()\n {\n   const std::locale& loc = std::locale::classic();\n@@ -74,4 +73,3 @@ void test02()\n   std::toupper(make_str<wchar_t, 11>(), loc);\t// { dg-error \"required from here\" }\n   std::tolower(make_str<wchar_t, 12>(), loc);\t// { dg-error \"required from here\" }\n }\n-#endif"}, {"sha": "1b2402d36cbc9d47a0e245ac9ba7971d5dd9fb54", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/4.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -30,7 +30,7 @@ test01()\n \n   const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n   const int N1 = sizeof(A1) / sizeof(int);\n-  \n+\n   int i1[N1];\n   fill(i1, i1 + N1, 3);\n   VERIFY( equal(i1, i1 + N1, A1) );\n@@ -51,7 +51,6 @@ test01()\n   fill(v2.begin(), v2.end(), '\\3');\n   VERIFY( equal(v2.begin(), v2.end(), A2) );\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   const wchar_t A3[] = {L'\\3', L'\\3', L'\\3', L'\\3', L'\\3',\n \t\t\tL'\\3', L'\\3', L'\\3', L'\\3', L'\\3'};\n   const int N3 = sizeof(A3) / sizeof(wchar_t);\n@@ -63,7 +62,6 @@ test01()\n   vector<wchar_t> v3(N3);\n   fill(v3.begin(), v3.end(), L'\\3');\n   VERIFY( equal(v3.begin(), v3.end(), A3) );\n-#endif\n }\n \n int"}, {"sha": "893aa5b4ebf4d33114aef06df286d09d074fac46", "filename": "libstdc++-v3/testsuite/25_algorithms/fill_n/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill_n%2F1.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -44,7 +44,7 @@ test01()\n \n   const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n   const int N1 = sizeof(A1) / sizeof(int);\n-  \n+\n   int i1[N1];\n   test_container<int, output_iterator_wrapper> c1(i1, i1 + N1);\n   fill_n(c1.begin(), N1, 3);\n@@ -66,7 +66,6 @@ test01()\n   fill_n(v2.begin(), N2, '\\3');\n   VERIFY( equal(v2.begin(), v2.end(), A2) );\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   const wchar_t A3[] = {L'\\3', L'\\3', L'\\3', L'\\3', L'\\3',\n \t\t\tL'\\3', L'\\3', L'\\3', L'\\3', L'\\3'};\n   const int N3 = sizeof(A3) / sizeof(wchar_t);\n@@ -78,7 +77,6 @@ test01()\n   vector<wchar_t> v3(N3);\n   fill_n(v3.begin(), N3, L'\\3');\n   VERIFY( equal(v3.begin(), v3.end(), A3) );\n-#endif\n }\n \n int"}, {"sha": "050d03c74c239438cad9c561c890cf027cb8ee50", "filename": "libstdc++-v3/testsuite/experimental/functional/searchers.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fsearchers.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -18,10 +18,8 @@\n // { dg-do run { target c++14 } }\n \n #include <experimental/functional>\n+#include <experimental/string_view>\n #include <cstring>\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-# include <cwchar>\n-#endif\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n@@ -64,7 +62,6 @@ test01()\n void\n test02()\n {\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   const wchar_t s[] = { L'a', (wchar_t)-97, L'a', L'\\0' };\n   const wchar_t* needles[] = {\n     s, L\"\", L\"a\", L\"aa\", L\"aaa\", L\"ab\", L\"cd\", L\"abcd\", L\"abcdabcd\", L\"abcabcd\"\n@@ -76,13 +73,13 @@ test02()\n \n   for (auto n : needles)\n   {\n-    auto ne = n + std::wcslen(n);\n+    auto ne = n + std::char_traits<wchar_t>::length(n);\n     auto d = make_default_searcher(n, ne);\n     auto bm = make_boyer_moore_searcher(n, ne);\n     auto bmh = make_boyer_moore_horspool_searcher(n, ne);\n     for (auto h : haystacks)\n     {\n-      auto he = h + std::wcslen(h);\n+      auto he = h + std::char_traits<wchar_t>::length(h);\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n       VERIFY( d_res == res );\n@@ -92,7 +89,6 @@ test02()\n       VERIFY( bmh_res == res );\n     }\n   }\n-#endif\n }\n \n void"}, {"sha": "a73e0b6675d32c947ae8e2fbe5ff7b740bfd055d", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -51,7 +51,6 @@ static_assert(std::is_same<xpmr::u32string,\n \t\t      xpmr::polymorphic_allocator<char32_t>>>::value,\n     \"pmr::u32string\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert(std::is_same<xpmr::basic_string<wchar_t>,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n \t\t      xpmr::polymorphic_allocator<wchar_t>>>::value,\n@@ -64,4 +63,3 @@ static_assert(std::is_same<xpmr::wstring,\n     std::basic_string<wchar_t, std::char_traits<wchar_t>,\n \t\t      xpmr::polymorphic_allocator<wchar_t>>>::value,\n     \"pmr::wstring\");\n-#endif"}, {"sha": "1d320961f84dbeeac9fa4cdd993f9ed02ea2b662", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/types-char8_t.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -37,10 +37,8 @@ test01()\n \t\t\"u8\\\"Hello\\\"sv is std::string_view\");\n #endif\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"sv), std::experimental::wstring_view>::value,\n \t\t\"L\\\"Hello\\\"sv is std::wstring_view\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"sv), std::experimental::u16string_view>::value,\n \t\t\"u\\\"Hello\\\"sv is std::u16string_view\");"}, {"sha": "f9d2fc970b1547e2bdf53002ac6093494403014f", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/types.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -37,10 +37,8 @@ test01()\n   static_assert(std::is_same<decltype(u8\"Hello\"sv), u8string_view>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string_view\");\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   static_assert(std::is_same<decltype(L\"Hello\"sv), std::experimental::wstring_view>::value,\n \t\t\"L\\\"Hello\\\"s is std::wstring_view\");\n-#endif\n \n   static_assert(std::is_same<decltype(u\"Hello\"sv), std::experimental::u16string_view>::value,\n \t\t\"u\\\"Hello\\\"s is std::u16string_view\");"}, {"sha": "1a8d906014f83aeac787e1b5aee52624e6110178", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values-char8_t.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -27,9 +27,7 @@ test01()\n   using namespace std::experimental::literals::string_view_literals;\n \n   std::experimental::string_view planet = \"Mercury\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet = L\"Venus\"sv;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   std::experimental::u8string_view u8planet = u8\"Mars\"sv;\n #else\n@@ -39,9 +37,7 @@ test01()\n   std::experimental::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::experimental::string_view(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::experimental::wstring_view(L\"Venus\") );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   VERIFY( u8planet == std::experimental::u8string_view(u8\"Mars\") );\n #else\n@@ -57,9 +53,7 @@ test02()\n   using namespace std::experimental::literals::string_view_literals;\n \n   std::experimental::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   std::experimental::u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n #else\n@@ -70,10 +64,8 @@ test02()\n \n   VERIFY( planet_cratered ==\n \t  std::experimental::string_view(\"Mercury\\0cratered\", 16) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet_cratered ==\n \t  std::experimental::wstring_view(L\"Venus\\0cratered\", 14) );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   VERIFY( u8planet_cratered ==\n \t  std::experimental::u8string_view(u8\"Mars\\0cratered\", 13) );"}, {"sha": "8e1770507e24e0d758c88aebc5d87adfbc12be54", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,17 +32,13 @@ test01()\n   using namespace std::experimental::literals::string_view_literals;\n \n   std::experimental::string_view planet = \"Mercury\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet = L\"Venus\"sv;\n-#endif\n   u8string_view u8planet = u8\"Mars\"sv;\n   std::experimental::u16string_view u16planet = u\"Jupiter\"sv;\n   std::experimental::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::experimental::string_view(\"Mercury\") );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::experimental::wstring_view(L\"Venus\") );\n-#endif\n   VERIFY( u8planet == u8string_view(u8\"Mars\") );\n   VERIFY( u16planet == std::experimental::u16string_view(u\"Jupiter\") );\n   VERIFY( u32planet == std::experimental::u32string_view(U\"Saturn\") );\n@@ -54,19 +50,15 @@ test02()\n   using namespace std::experimental::literals::string_view_literals;\n \n   std::experimental::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n-#endif\n   u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n   std::experimental::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n   std::experimental::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n \n   VERIFY( planet_cratered ==\n \t  std::experimental::string_view(\"Mercury\\0cratered\", 16) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet_cratered ==\n \t  std::experimental::wstring_view(L\"Venus\\0cratered\", 14) );\n-#endif\n   VERIFY( u8planet_cratered == u8string_view(u8\"Mars\\0cratered\", 13) );\n   VERIFY( u16planet_cratered ==\n \t  std::experimental::u16string_view(u\"Jupiter\\0cratered\", 16) );"}, {"sha": "920574668a17844dd4966c54e121333d77d0bf61", "filename": "libstdc++-v3/testsuite/experimental/string_view/range_access/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frange_access%2Fwchar_t%2F1.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -24,9 +24,7 @@\n void\n test01()\n {\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view ws(L\"Hello, World!\");\n   (void) std::begin(ws);\n   (void) std::end(ws);\n-#endif\n }"}, {"sha": "bc9dec02611dea1794434d43675540062ea7199f", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/typedefs.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -38,11 +38,9 @@ __gnu_test::basic_types<std::experimental::string_view> t1b;\n __gnu_test::reversible_types<std::experimental::string_view> t1r;\n typedef typename std::experimental::string_view::traits_type traits_type1;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n __gnu_test::basic_types<std::experimental::wstring_view> t2b;\n __gnu_test::reversible_types<std::experimental::wstring_view> t2r;\n typedef typename std::experimental::wstring_view::traits_type traits_type2;\n-#endif\n \n static_assert(\n     std::is_same<std::experimental::string_view::pointer, char*>(),"}, {"sha": "c6290f8c198ff68465cb60b67ffdcbef5dfbe6ea", "filename": "libstdc++-v3/testsuite/experimental/string_view/typedefs.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Ftypedefs.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,7 +33,4 @@ using check4_t = std::experimental::fundamentals_v1::u16string_view;\n using check5_t = std::experimental::fundamentals_v1::u32string_view;\n #endif\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n using check6_t = std::experimental::fundamentals_v1::wstring_view;\n-#endif\n-"}, {"sha": "3876b80d50d8d1dd4276e8ae6a9de42d0f1cb14e", "filename": "libstdc++-v3/testsuite/ext/vstring/range_access.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frange_access.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -28,9 +28,7 @@ test01()\n   (void) std::begin(s);\n   (void) std::end(s);\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   __gnu_cxx::__wvstring ws(L\"Hello, World!\");\n   (void) std::begin(ws);\n   (void) std::end(ws);\n-#endif\n }"}, {"sha": "c206b9bb1fa4346f62f11cd67c252e0e24c8c117", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.arithmetic/integral.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fintegral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fintegral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fintegral.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -39,9 +39,7 @@ static_assert( std::integral<bool> );\n static_assert( std::integral<char> );\n static_assert( std::integral<char16_t> );\n static_assert( std::integral<char32_t> );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( std::integral<wchar_t> );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( std::integral<char8_t> );\n #endif"}, {"sha": "bf067e39f62f687a3017af11e3f4c59b75527d84", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.arithmetic/signed_integral.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fsigned_integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fsigned_integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Fsigned_integral.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -39,9 +39,7 @@ static_assert( !std::signed_integral<bool> );\n static_assert( std::is_signed_v<char> ? std::signed_integral<char> : true );\n static_assert( !std::signed_integral<char16_t> );\n static_assert( !std::signed_integral<char32_t> );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( std::is_signed_v<wchar_t> ? std::signed_integral<wchar_t> : true );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( !std::signed_integral<char8_t> );\n #endif"}, {"sha": "e6b7c5ee701ef108317fe5e25c1c3de43c78f4b7", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.arithmetic/unsigned_integral.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Funsigned_integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Funsigned_integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.arithmetic%2Funsigned_integral.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -39,9 +39,7 @@ static_assert( std::unsigned_integral<bool> );\n static_assert( std::is_signed_v<char> ? true : std::unsigned_integral<char> );\n static_assert( std::unsigned_integral<char16_t> );\n static_assert( std::unsigned_integral<char32_t> );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n static_assert( std::is_signed_v<wchar_t> ? true : std::unsigned_integral<wchar_t> );\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n static_assert( std::unsigned_integral<char8_t> );\n #endif"}, {"sha": "df5f0c5771bd14a288e7d04c808f89b7d2c343ab", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_arithmetic/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_arithmetic%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,9 +33,7 @@ void test01()\n   VERIFY( (test_category<is_arithmetic, char>(true)) );\n   VERIFY( (test_category<is_arithmetic, signed char>(true)) );\n   VERIFY( (test_category<is_arithmetic, unsigned char>(true)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_arithmetic, wchar_t>(true)) );\n-#endif\n   VERIFY( (test_category<is_arithmetic, short>(true)) );\n   VERIFY( (test_category<is_arithmetic, unsigned short>(true)) );\n   VERIFY( (test_category<is_arithmetic, int>(true)) );"}, {"sha": "3f89cb533c05dd13707e6ec5a5e6634b1e5563e8", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_compound/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_compound%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,9 +32,7 @@ void test01()\n   VERIFY( (test_category<is_compound, char>(false)) );\n   VERIFY( (test_category<is_compound, signed char>(false)) );\n   VERIFY( (test_category<is_compound, unsigned char>(false)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_compound, wchar_t>(false)) );\n-#endif\n   VERIFY( (test_category<is_compound, short>(false)) );\n   VERIFY( (test_category<is_compound, unsigned short>(false)) );\n   VERIFY( (test_category<is_compound, int>(false)) );"}, {"sha": "a5aa1460597c5e6e8beadf26358514ddc8adf753", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_floating_point/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_floating_point%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,9 +32,7 @@ void test01()\n   VERIFY( (test_category<is_floating_point, char>(false)) );\n   VERIFY( (test_category<is_floating_point, signed char>(false)) );\n   VERIFY( (test_category<is_floating_point, unsigned char>(false)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_floating_point, wchar_t>(false)) );\n-#endif\n   VERIFY( (test_category<is_floating_point, short>(false)) );\n   VERIFY( (test_category<is_floating_point, unsigned short>(false)) );\n   VERIFY( (test_category<is_floating_point, int>(false)) );"}, {"sha": "0c30b35e0b7a9dd85b5e9f3b7f6e8789977c990f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_fundamental/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_fundamental%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -32,9 +32,7 @@ void test01()\n   VERIFY( (test_category<is_fundamental, char>(true)) );\n   VERIFY( (test_category<is_fundamental, signed char>(true)) );\n   VERIFY( (test_category<is_fundamental, unsigned char>(true)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_fundamental, wchar_t>(true)) );\n-#endif\n   VERIFY( (test_category<is_fundamental, short>(true)) );\n   VERIFY( (test_category<is_fundamental, unsigned short>(true)) );\n   VERIFY( (test_category<is_fundamental, int>(true)) );"}, {"sha": "8866b7cb455df7448f90fd837e727448efc0761f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_integral/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_integral%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,9 +33,7 @@ void test01()\n   VERIFY( (test_category<is_integral, char>(true)) );\n   VERIFY( (test_category<is_integral, signed char>(true)) );\n   VERIFY( (test_category<is_integral, unsigned char>(true)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_integral, wchar_t>(true)) );\n-#endif\n   VERIFY( (test_category<is_integral, short>(true)) );\n   VERIFY( (test_category<is_integral, unsigned short>(true)) );\n   VERIFY( (test_category<is_integral, int>(true)) );"}, {"sha": "82ab7a5dbdeacf6e8a2d10cad632deee5d617bcb", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_signed/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_signed%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,9 +33,7 @@ void test01()\n   VERIFY( (test_category<is_signed, char>(false)) );\n   VERIFY( (test_category<is_signed, signed char>(true)) );\n   VERIFY( (test_category<is_signed, unsigned char>(false)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_signed, wchar_t>(false)) );\n-#endif\n   VERIFY( (test_category<is_signed, short>(true)) );\n   VERIFY( (test_category<is_signed, unsigned short>(false)) );\n   VERIFY( (test_category<is_signed, int>(true)) );"}, {"sha": "41c6682cff1ff8cef309f923c547ef6015206316", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_unsigned/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_unsigned%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,9 +33,7 @@ void test01()\n   VERIFY( (test_category<is_unsigned, char>(false)) );\n   VERIFY( (test_category<is_unsigned, signed char>(false)) );\n   VERIFY( (test_category<is_unsigned, unsigned char>(true)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_unsigned, wchar_t>(false)) );\n-#endif\n   VERIFY( (test_category<is_unsigned, short>(false)) );\n   VERIFY( (test_category<is_unsigned, unsigned short>(true)) );\n   VERIFY( (test_category<is_unsigned, int>(false)) );"}, {"sha": "291c5b85fb350c30bf03a4ad5e5c1bed4c906104", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/is_void/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fis_void%2Fvalue.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -33,9 +33,7 @@ void test01()\n   VERIFY( (test_category<is_void, char>(false)) );\n   VERIFY( (test_category<is_void, signed char>(false)) );\n   VERIFY( (test_category<is_void, unsigned char>(false)) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( (test_category<is_void, wchar_t>(false)) );\n-#endif\n   VERIFY( (test_category<is_void, short>(false)) );\n   VERIFY( (test_category<is_void, unsigned short>(false)) );\n   VERIFY( (test_category<is_void, int>(false)) );"}, {"sha": "36ed00989fa325a922391873aef58d86d53ad269", "filename": "libstdc++-v3/testsuite/tr1/6_containers/hash/24799.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2F24799.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec283b63d7f24f4c37792dd07ab1055186ba88f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2F24799.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2F24799.cc?ref=fec283b63d7f24f4c37792dd07ab1055186ba88f", "patch": "@@ -58,10 +58,8 @@ void test01()\n   do_test<double>();\n   do_test<long double>();\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n   do_test<wchar_t>();\n   do_test<std::wstring>();\n-#endif\n }\n \n int main()"}]}