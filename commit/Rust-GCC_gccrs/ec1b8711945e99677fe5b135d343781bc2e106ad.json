{"sha": "ec1b8711945e99677fe5b135d343781bc2e106ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxYjg3MTE5NDVlOTk2NzdmZTViMTM1ZDM0Mzc4MWJjMmUxMDZhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T13:52:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T13:52:45Z"}, "message": "Fix segfault on elaboration of empty 1-element array at -O\n\nThis is a rather obscure case where the elaboration of an empty array\nwhose base type is an array type of length at most 1 goes awry when\nthe code is compiled with optimization.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (can_be_lower_p): Remove.\n\t(Regular_Loop_to_gnu): Add ENTRY_COND unconditionally if\n\tBOTTOM_COND is non-zero.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/opt89.adb: New test.", "tree": {"sha": "ddffaa1186f42cf949f26c8ee1adb502a5d9e8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddffaa1186f42cf949f26c8ee1adb502a5d9e8b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec1b8711945e99677fe5b135d343781bc2e106ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1b8711945e99677fe5b135d343781bc2e106ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1b8711945e99677fe5b135d343781bc2e106ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1b8711945e99677fe5b135d343781bc2e106ad/comments", "author": null, "committer": null, "parents": [{"sha": "1c91516aeb8362696786e17f83d8366de9a31f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c91516aeb8362696786e17f83d8366de9a31f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c91516aeb8362696786e17f83d8366de9a31f81"}], "stats": {"total": 67, "additions": 25, "deletions": 42}, "files": [{"sha": "065fcd2f956e2d62f8394ed0015be40e4420bfa9", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1b8711945e99677fe5b135d343781bc2e106ad/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1b8711945e99677fe5b135d343781bc2e106ad/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ec1b8711945e99677fe5b135d343781bc2e106ad", "patch": "@@ -2814,38 +2814,6 @@ can_equal_max_val_p (tree val, tree type, bool reverse)\n   return can_equal_min_or_max_val_p (val, type, !reverse);\n }\n \n-/* Return true if VAL1 can be lower than VAL2.  */\n-\n-static bool\n-can_be_lower_p (tree val1, tree val2)\n-{\n-  if (TREE_CODE (val1) == NOP_EXPR)\n-    {\n-      tree type = TREE_TYPE (TREE_OPERAND (val1, 0));\n-      if (can_be_lower_p (TYPE_MAX_VALUE (type), TYPE_MIN_VALUE (type)))\n-\treturn true;\n-\n-      val1 = TYPE_MIN_VALUE (type);\n-    }\n-\n-  if (TREE_CODE (val1) != INTEGER_CST)\n-    return true;\n-\n-  if (TREE_CODE (val2) == NOP_EXPR)\n-    {\n-      tree type = TREE_TYPE (TREE_OPERAND (val2, 0));\n-      if (can_be_lower_p (TYPE_MAX_VALUE (type), TYPE_MIN_VALUE (type)))\n-\treturn true;\n-\n-      val2 = TYPE_MAX_VALUE (type);\n-    }\n-\n-  if (TREE_CODE (val2) != INTEGER_CST)\n-    return true;\n-\n-  return tree_int_cst_lt (val1, val2);\n-}\n-\n /* Replace EXPR1 and EXPR2 by invariant expressions if possible.  Return\n    true if both expressions have been replaced and false otherwise.  */\n \n@@ -3126,19 +3094,16 @@ Regular_Loop_to_gnu (Node_Id gnat_node, tree *gnu_cond_expr_p)\n \t}\n \n       /* If we use the BOTTOM_COND, we can turn the test into an inequality\n-\t test but we may have to add ENTRY_COND to protect the empty loop.  */\n+\t test but we have to add ENTRY_COND to protect the empty loop.  */\n       if (LOOP_STMT_BOTTOM_COND_P (gnu_loop_stmt))\n \t{\n \t  test_code = NE_EXPR;\n-\t  if (can_be_lower_p (gnu_high, gnu_low))\n-\t    {\n-\t      gnu_cond_expr\n-\t\t= build3 (COND_EXPR, void_type_node,\n-\t\t\t  build_binary_op (LE_EXPR, boolean_type_node,\n-\t\t\t\t\t   gnu_low, gnu_high),\n-\t\t\t  NULL_TREE, alloc_stmt_list ());\n-\t      set_expr_location_from_node (gnu_cond_expr, gnat_iter_scheme);\n-\t    }\n+\t  gnu_cond_expr\n+\t    = build3 (COND_EXPR, void_type_node,\n+\t\t      build_binary_op (LE_EXPR, boolean_type_node,\n+\t\t\t\t       gnu_low, gnu_high),\n+\t\t      NULL_TREE, alloc_stmt_list ());\n+\t  set_expr_location_from_node (gnu_cond_expr, gnat_iter_scheme);\n \t}\n \n       /* Open a new nesting level that will surround the loop to declare the"}, {"sha": "37520086616b4eca8598ce99e9d157532060e619", "filename": "gcc/testsuite/gnat.dg/opt89.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1b8711945e99677fe5b135d343781bc2e106ad/gcc%2Ftestsuite%2Fgnat.dg%2Fopt89.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1b8711945e99677fe5b135d343781bc2e106ad/gcc%2Ftestsuite%2Fgnat.dg%2Fopt89.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt89.adb?ref=ec1b8711945e99677fe5b135d343781bc2e106ad", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+procedure Opt89 is\n+\n+  type Rec is record\n+    I : Integer := 3;\n+  end record;\n+\n+  subtype Index is Natural range 0..0;\n+\n+  type Arr is array (Index range <>) of Rec;\n+\n+  X : Arr (0 .. -1);\n+\n+begin\n+  null;\n+end;"}]}