{"sha": "6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1OTFlYzBiYWIwODk3YzE4ZTk0YTc4NWQxZjViY2I1NDNhNDJhMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-19T04:51:14Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-10-19T04:51:14Z"}, "message": "[multiple changes]\n\n2006-10-19  Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29216\n\tPR fortran/29314\n\t* gfortran.h : Add EXEC_INIT_ASSIGN.\n\t* dump-parse-tree.c (gfc_show_code_node): The same.\n\t* trans-openmp.c (gfc_trans_omp_array_reduction): Set new\n\targument for gfc_trans_assignment to false.\n\t* trans-stmt.c (gfc_trans_forall_1): The same.\n\t* trans-expr.c (gfc_conv_function_call, gfc_trans_assign,\n\tgfc_trans_arrayfunc_assign, gfc_trans_assignment): The\n\tsame. In the latter function, use the new flag to stop\n\tthe checking of the lhs for deallocation.\n\t(gfc_trans_init_assign): New function.\n\t* trans-stmt.h : Add prototype for gfc_trans_init_assign.\n\t* trans.c (gfc_trans_code): Implement EXEC_INIT_ASSIGN.\n\t* trans.h : Add new boolean argument to the prototype of\n\tgfc_trans_assignment.\n\t* resolve.c (resolve_allocate_exp): Replace EXEC_ASSIGN by\n\tEXEC_INIT_ASSIGN.\n\t(resolve_code): EXEC_INIT_ASSIGN does not need resolution.\n\t(apply_default_init): New function.\n\t(resolve_symbol): Call it for derived types that become\n\tdefined but which do not already have an initialization\n\texpression..\n\t* st.c (gfc_free_statement): Include EXEC_INIT_ASSIGN.\n\n2006-10-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29216\n\t* gfortran.dg/result_default_init_1.f90: New test.\n\n\tPR fortran/29314\n\t* gfortran.dg/automatic_default_init_1.f90: New test.\n\n\t* gfortran.dg/alloc_comp_basics_1.f90: Reduce deallocate count\n\tfrom 38 to 33.\n\nFrom-SVN: r117879", "tree": {"sha": "0a238ae277da6e261a574bc4c7f6ff8fd90829f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a238ae277da6e261a574bc4c7f6ff8fd90829f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/comments", "author": null, "committer": null, "parents": [{"sha": "2d142abdf326e15d183330ddca63a734fa56b478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d142abdf326e15d183330ddca63a734fa56b478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d142abdf326e15d183330ddca63a734fa56b478"}], "stats": {"total": 212, "additions": 200, "deletions": 12}, "files": [{"sha": "e2c2bcfdc5b1585eee19048b7965c765de52fb24", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -1,3 +1,30 @@\n+2006-10-19  Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29216\n+\tPR fortran/29314\n+\t* gfortran.h : Add EXEC_INIT_ASSIGN.\n+\t* dump-parse-tree.c (gfc_show_code_node): The same.\n+\t* trans-openmp.c (gfc_trans_omp_array_reduction): Set new\n+\targument for gfc_trans_assignment to false.\n+\t* trans-stmt.c (gfc_trans_forall_1): The same.\n+\t* trans-expr.c (gfc_conv_function_call, gfc_trans_assign,\n+\tgfc_trans_arrayfunc_assign, gfc_trans_assignment): The\n+\tsame. In the latter function, use the new flag to stop\n+\tthe checking of the lhs for deallocation.\n+\t(gfc_trans_init_assign): New function.\n+\t* trans-stmt.h : Add prototype for gfc_trans_init_assign.\n+\t* trans.c (gfc_trans_code): Implement EXEC_INIT_ASSIGN.\n+\t* trans.h : Add new boolean argument to the prototype of\n+\tgfc_trans_assignment.\n+\t* resolve.c (resolve_allocate_exp): Replace EXEC_ASSIGN by\n+\tEXEC_INIT_ASSIGN.\n+\t(resolve_code): EXEC_INIT_ASSIGN does not need resolution.\n+\t(apply_default_init): New function.\n+\t(resolve_symbol): Call it for derived types that become\n+\tdefined but which do not already have an initialization\n+\texpression..\n+\t* st.c (gfc_free_statement): Include EXEC_INIT_ASSIGN.\n+\n 2006-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \t* primary.c: Revert 'significand'-to-'significant' comment change."}, {"sha": "8a7eab5262ab55363c647a66576f7a374391637c", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -1021,6 +1021,7 @@ gfc_show_code_node (int level, gfc_code * c)\n       gfc_status (\"ENTRY %s\", c->ext.entry->sym->name);\n       break;\n \n+    case EXEC_INIT_ASSIGN:\n     case EXEC_ASSIGN:\n       gfc_status (\"ASSIGN \");\n       gfc_show_expr (c->expr);"}, {"sha": "c89c136f6c099b949aeb96b52cd251dcdbd14a95", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -1507,7 +1507,7 @@ typedef enum\n {\n   EXEC_NOP = 1, EXEC_ASSIGN, EXEC_LABEL_ASSIGN, EXEC_POINTER_ASSIGN,\n   EXEC_GOTO, EXEC_CALL, EXEC_ASSIGN_CALL, EXEC_RETURN, EXEC_ENTRY,\n-  EXEC_PAUSE, EXEC_STOP, EXEC_CONTINUE,\n+  EXEC_PAUSE, EXEC_STOP, EXEC_CONTINUE, EXEC_INIT_ASSIGN,\n   EXEC_IF, EXEC_ARITHMETIC_IF, EXEC_DO, EXEC_DO_WHILE, EXEC_SELECT,\n   EXEC_FORALL, EXEC_WHERE, EXEC_CYCLE, EXEC_EXIT,\n   EXEC_ALLOCATE, EXEC_DEALLOCATE,"}, {"sha": "d3722e61f75738a2fa64310532b01edddc93e5eb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -3556,7 +3556,7 @@ resolve_allocate_expr (gfc_expr * e, gfc_code * code)\n     {\n         init_st = gfc_get_code ();\n         init_st->loc = code->loc;\n-        init_st->op = EXEC_ASSIGN;\n+        init_st->op = EXEC_INIT_ASSIGN;\n         init_st->expr = expr_to_initialize (e);\n \tinit_st->expr2 = init_e;\n         init_st->next = code->next;\n@@ -4907,6 +4907,9 @@ resolve_code (gfc_code * code, gfc_namespace * ns)\n \t\t       \"INTEGER return specifier\", &code->expr->where);\n \t  break;\n \n+\tcase EXEC_INIT_ASSIGN:\n+\t  break;\n+\n \tcase EXEC_ASSIGN:\n \t  if (t == FAILURE)\n \t    break;\n@@ -5222,6 +5225,75 @@ is_non_constant_shape_array (gfc_symbol *sym)\n   return not_constant;\n }\n \n+\n+/* Assign the default initializer to a derived type variable or result.  */\n+\n+static void\n+apply_default_init (gfc_symbol *sym)\n+{\n+  gfc_expr *lval;\n+  gfc_expr *init = NULL;\n+  gfc_code *init_st;\n+  gfc_namespace *ns = sym->ns;\n+\n+  if (sym->attr.flavor != FL_VARIABLE && !sym->attr.function)\n+    return;\n+\n+  if (sym->ts.type == BT_DERIVED && sym->ts.derived)\n+    init = gfc_default_initializer (&sym->ts);\n+\n+  if (init == NULL)\n+    return;\n+\n+  /* Search for the function namespace if this is a contained\n+     function without an explicit result.  */\n+  if (sym->attr.function && sym == sym->result\n+\t&& sym->name != sym->ns->proc_name->name)\n+    {\n+      ns = ns->contained;\n+      for (;ns; ns = ns->sibling)\n+\tif (strcmp (ns->proc_name->name, sym->name) == 0)\n+\t  break;\n+    }\n+\n+  if (ns == NULL)\n+    {\n+      gfc_free_expr (init);\n+      return;\n+    }\n+\n+  /* Build an l-value expression for the result.  */\n+  lval = gfc_get_expr ();\n+  lval->expr_type = EXPR_VARIABLE;\n+  lval->where = sym->declared_at;\n+  lval->ts = sym->ts;\n+  lval->symtree = gfc_find_symtree (sym->ns->sym_root, sym->name);\n+\n+  /* It will always be a full array.  */\n+  lval->rank = sym->as ? sym->as->rank : 0;\n+  if (lval->rank)\n+    {\n+      lval->ref = gfc_get_ref ();\n+      lval->ref->type = REF_ARRAY;\n+      lval->ref->u.ar.type = AR_FULL;\n+      lval->ref->u.ar.dimen = lval->rank;\n+      lval->ref->u.ar.where = sym->declared_at;\n+      lval->ref->u.ar.as = sym->as;\n+    }\n+\n+  /* Add the code at scope entry.  */\n+  init_st = gfc_get_code ();\n+  init_st->next = ns->code;\n+  ns->code = init_st;\n+\n+  /* Assign the default initializer to the l-value.  */\n+  init_st->loc = sym->declared_at;\n+  init_st->op = EXEC_INIT_ASSIGN;\n+  init_st->expr = lval;\n+  init_st->expr2 = init;\n+}\n+\n+\n /* Resolution of common features of flavors variable and procedure. */\n \n static try\n@@ -5960,6 +6032,22 @@ resolve_symbol (gfc_symbol * sym)\n           && (sym->ns->proc_name == NULL\n               || sym->ns->proc_name->attr.flavor != FL_MODULE)))\n     gfc_error (\"Threadprivate at %L isn't SAVEd\", &sym->declared_at);\n+\n+  /* If we have come this far we can apply default-initializers, as\n+     described in 14.7.5, to those variables that have not already\n+     been assigned one.  */\n+  if (sym->ts.type == BT_DERIVED && sym->ns == gfc_current_ns && !sym->value\n+\t&& !sym->attr.allocatable && !sym->attr.alloc_comp)\n+    {\n+      symbol_attribute *a = &sym->attr;\n+\n+      if ((!a->save && !a->dummy && !a->pointer\n+\t\t&& !a->in_common && !a->use_assoc\n+\t\t&& !(a->function && sym != sym->result))\n+\t     ||\n+\t  (a->dummy && a->intent == INTENT_OUT))\n+\tapply_default_init (sym);\n+    }\n }\n \n "}, {"sha": "24c69da8f3f9d75c5b32b067c5aeef4cd64a380d", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -93,6 +93,7 @@ gfc_free_statement (gfc_code * p)\n     {\n     case EXEC_NOP:\n     case EXEC_ASSIGN:\n+    case EXEC_INIT_ASSIGN:\n     case EXEC_GOTO:\n     case EXEC_CYCLE:\n     case EXEC_RETURN:"}, {"sha": "3e7844ed4455a6d0379d4abc26b3df2fbef9d5ad", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -2031,7 +2031,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t\t    && fsym->value)\n \t\t{\n \t\t  gcc_assert (!fsym->attr.allocatable);\n-\t\t  tmp = gfc_trans_assignment (e, fsym->value);\n+\t\t  tmp = gfc_trans_assignment (e, fsym->value, false);\n \t\t  gfc_add_expr_to_block (&se->pre, tmp);\n \t\t}\n \n@@ -3363,7 +3363,7 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n    setting up the scalarizer.  */\n \n tree\n-gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2)\n+gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n {\n   gfc_se lse;\n   gfc_se rse;\n@@ -3466,7 +3466,8 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2)\n   else\n     gfc_conv_expr (&lse, expr1);\n \n-  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts, l_is_temp,\n+  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n+\t\t\t\t l_is_temp || init_flag,\n \t\t\t\t expr2->expr_type == EXPR_VARIABLE);\n   gfc_add_expr_to_block (&body, tmp);\n \n@@ -3500,7 +3501,8 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  gcc_assert (lse.ss == gfc_ss_terminator\n \t\t      && rse.ss == gfc_ss_terminator);\n \n-\t  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts, false, false);\n+\t  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n+\t\t\t\t\t false, false);\n \t  gfc_add_expr_to_block (&body, tmp);\n \t}\n \n@@ -3517,8 +3519,14 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2)\n   return gfc_finish_block (&block);\n }\n \n+tree\n+gfc_trans_init_assign (gfc_code * code)\n+{\n+  return gfc_trans_assignment (code->expr, code->expr2, true);\n+}\n+\n tree\n gfc_trans_assign (gfc_code * code)\n {\n-  return gfc_trans_assignment (code->expr, code->expr2);\n+  return gfc_trans_assignment (code->expr, code->expr2, false);\n }"}, {"sha": "32020cc433a6197773b73b95036d561d0fa5d153", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -424,7 +424,7 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n \n   /* Create the init statement list.  */\n   pushlevel (0);\n-  stmt = gfc_trans_assignment (e1, e2);\n+  stmt = gfc_trans_assignment (e1, e2, false);\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0, 0));\n   else\n@@ -433,7 +433,7 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n \n   /* Create the merge statement list.  */\n   pushlevel (0);\n-  stmt = gfc_trans_assignment (e3, e4);\n+  stmt = gfc_trans_assignment (e3, e4, false);\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0, 0));\n   else"}, {"sha": "08ba113cc0750226f03fd821762f13a8e276ff03", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -2638,7 +2638,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n           else\n             {\n               /* Use the normal assignment copying routines.  */\n-              assign = gfc_trans_assignment (c->expr, c->expr2);\n+              assign = gfc_trans_assignment (c->expr, c->expr2, false);\n \n               /* Generate body and loops.  */\n               tmp = gfc_trans_nested_forall_loop (nested_forall_info, assign, 1, 1);"}, {"sha": "2a8cf3c3be566668c5aea48a078dbe53970934b8", "filename": "gcc/fortran/trans-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.h?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -28,6 +28,7 @@ tree gfc_trans_code (gfc_code *);\n /* trans-expr.c */\n tree gfc_trans_assign (gfc_code *);\n tree gfc_trans_pointer_assign (gfc_code *);\n+tree gfc_trans_init_assign (gfc_code *);\n \n /* trans-stmt.c */\n tree gfc_trans_cycle (gfc_code *);"}, {"sha": "69a702e6034e0c8c9444343944f349827b6ec6ee", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -477,6 +477,10 @@ gfc_trans_code (gfc_code * code)\n \t  res = gfc_trans_pointer_assign (code);\n \t  break;\n \n+\tcase EXEC_INIT_ASSIGN:\n+\t  res = gfc_trans_init_assign (code);\n+\t  break;\n+\n \tcase EXEC_CONTINUE:\n \t  res = NULL_TREE;\n \t  break;"}, {"sha": "13c21aa25818f625564de9d7ed898b65d73f4d20", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -426,7 +426,7 @@ bool get_array_ctor_strlen (gfc_constructor *, tree *);\n void gfc_trans_runtime_check (tree, const char *, stmtblock_t *, locus *);\n \n /* Generate code for an assignment, includes scalarization.  */\n-tree gfc_trans_assignment (gfc_expr *, gfc_expr *);\n+tree gfc_trans_assignment (gfc_expr *, gfc_expr *, bool);\n \n /* Generate code for a pointer assignment.  */\n tree gfc_trans_pointer_assignment (gfc_expr *, gfc_expr *);"}, {"sha": "45304d802d3becac7ff6734e72f9d3db2cad39a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -1,3 +1,14 @@\n+2006-10-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29216\n+\t* gfortran.dg/result_default_init_1.f90: New test.\n+\n+\tPR fortran/29314\n+\t* gfortran.dg/automatic_default_init_1.f90: New test.\n+\n+\t* gfortran.dg/alloc_comp_basics_1.f90: Reduce deallocate count\n+\tfrom 38 to 33.\n+\n 2006-10-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++.old-deja/g++.robertl/eb133b.C: Add XFAILed error for"}, {"sha": "649c4a72252e34ff5e4bb1a8023404a395bb6556", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -139,5 +139,5 @@ subroutine check_alloc2(b)\n     end subroutine check_alloc2\n \n end program alloc\n-! { dg-final { scan-tree-dump-times \"deallocate\" 38 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"deallocate\" 33 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "525632b36d059cb2257c53cdd275ab1e285ff348", "filename": "gcc/testsuite/gfortran.dg/automatic_default_init_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! { dg-options \"-O\" }\n+! Test the fix for PR29394 in which automatic arrays did not\n+! get default initialization.\n+! Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org> \n+!\n+MODULE M1\n+  TYPE T1 \n+    INTEGER :: I=7 \n+  END TYPE T1 \n+CONTAINS \n+  SUBROUTINE S1(I) \n+    INTEGER, INTENT(IN) :: I \n+    TYPE(T1) :: D(1:I)\n+    IF (any (D(:)%I.NE.7)) CALL ABORT() \n+  END SUBROUTINE S1 \n+END MODULE M1\n+  USE M1 \n+  CALL S1(2) \n+END \n+! { dg-final { cleanup-modules \"m1\" } }"}, {"sha": "58872dfa65b2d5ef31bbf1a0512112778bb7e99f", "filename": "gcc/testsuite/gfortran.dg/result_default_init_1.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_default_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b591ec0bab0897c18e94a785d1f5bcb543a42a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_default_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_default_init_1.f90?ref=6b591ec0bab0897c18e94a785d1f5bcb543a42a3", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+! { dg-options \"-O\" }\n+! Test the fix for PR29216 in which function results did not\n+! get default initialization.\n+! Contributed by Stephan Kramer  <stephan.kramer@imperial.ac.uk>  \n+!\n+  type A\n+    integer, pointer:: p => null ()\n+    integer:: i=3\n+  end type A\n+  type(A):: x,y\n+  if (associated(x%p) .or. x%i /= 3) call abort ()\n+  x=f()\n+  if (associated(x%p) .or. x%i /= 3) call abort ()\n+  x=g()\n+  if (associated(x%p) .or. x%i /= 3) call abort ()\n+contains\n+  function f() result (fr)\n+    type(A):: fr\n+    if (associated(fr%p) .or. fr%i /= 3) call abort ()\n+  end function f\n+  function g()\n+    type(A):: g\n+    if (associated(g%p) .or. g%i /= 3) call abort ()\n+  end function g\n+end"}]}