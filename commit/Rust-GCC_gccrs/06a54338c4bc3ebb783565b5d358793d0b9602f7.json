{"sha": "06a54338c4bc3ebb783565b5d358793d0b9602f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhNTQzMzhjNGJjM2ViYjc4MzU2NWI1ZDM1ODc5M2QwYjk2MDJmNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-16T20:24:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-16T20:24:32Z"}, "message": "re PR fortran/34246 (gfortran.dg/bind_c_usage_16.f03 doesn't  work)\n\n2007-12-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34246\n        * trans-types.c (gfc_init_types): Change build_type_variant\n        to build_qualified_type.\n        (gfc_sym_type): Return gfc_character1_type_node for\n        character-returning bind(C) functions.\n        * trans-expr.c (gfc_conv_function_call): Do not set\n        se->string_length for character-returning bind(c) functions.\n        (gfc_trans_string_copy,gfc_trans_scalar_assign):\n         Support also single characters.\n\n2007-12-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34246\n        * gfortran.dg/bind_c_usage_16.f03: Extend test.\n\nFrom-SVN: r130991", "tree": {"sha": "6a16035d550f41e9b55498f13c53215642dda315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a16035d550f41e9b55498f13c53215642dda315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06a54338c4bc3ebb783565b5d358793d0b9602f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a54338c4bc3ebb783565b5d358793d0b9602f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a54338c4bc3ebb783565b5d358793d0b9602f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a54338c4bc3ebb783565b5d358793d0b9602f7/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac8bb1ec43d74b8d6cd8627a8ab06ad567f01b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8bb1ec43d74b8d6cd8627a8ab06ad567f01b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8bb1ec43d74b8d6cd8627a8ab06ad567f01b29"}], "stats": {"total": 116, "additions": 85, "deletions": 31}, "files": [{"sha": "ac72fb2ceaec3621541cf1531fc4c2f1c109739b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=06a54338c4bc3ebb783565b5d358793d0b9602f7", "patch": "@@ -1,3 +1,15 @@\n+2007-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34246\n+\t* trans-types.c (gfc_init_types): Change build_type_variant\n+\tto build_qualified_type.\n+\t(gfc_sym_type): Return gfc_character1_type_node for\n+\tcharacter-returning bind(C) functions.\n+\t* trans-expr.c (gfc_conv_function_call): Do not set\n+\tse->string_length for character-returning bind(c) functions.\n+\t(gfc_trans_string_copy,gfc_trans_scalar_assign):\n+\tSupport also single characters.\n+\n 2007-12-16  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* errors.c (gfc_notify_std): As originally stated but improperly"}, {"sha": "53cd7e6445030b93668f85226e5459fa19288224", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=06a54338c4bc3ebb783565b5d358793d0b9602f7", "patch": "@@ -2559,7 +2559,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   gfc_finish_interface_mapping (&mapping, &se->pre, &se->post);\n \n   ts = sym->ts;\n-  if (ts.type == BT_CHARACTER)\n+  if (ts.type == BT_CHARACTER && !sym->attr.is_bind_c)\n     {\n       if (sym->ts.cl->length == NULL)\n \t{\n@@ -2736,15 +2736,6 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n       && !sym->attr.always_explicit)\n     se->expr = fold_convert (gfc_get_real_type (sym->ts.kind), se->expr);\n \n-  /* Bind(C) character variables may have only length 1.  */\n-  if (sym->ts.type == BT_CHARACTER && sym->attr.is_bind_c)\n-    {\n-      gcc_assert (sym->ts.cl->length\n-\t\t  && sym->ts.cl->length->expr_type == EXPR_CONSTANT\n-\t\t  && mpz_cmp_si (sym->ts.cl->length->value.integer, 1) == 0);\n-      se->string_length = build_int_cst (gfc_charlen_type_node, 1);\n-    }\n-\n   /* A pure function may still have side-effects - it may modify its\n      parameters.  */\n   TREE_SIDE_EFFECTS (se->expr) = 1;\n@@ -2820,12 +2811,34 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n   tree tmp4;\n   stmtblock_t tempblock;\n \n-  dlen = fold_convert (size_type_node, gfc_evaluate_now (dlength, block));\n-  slen = fold_convert (size_type_node, gfc_evaluate_now (slength, block));\n+  if (slength != NULL_TREE)\n+    {\n+      slen = fold_convert (size_type_node, gfc_evaluate_now (slength, block));\n+      ssc = gfc_to_single_character (slen, src);\n+    }\n+  else\n+    {\n+      slen = build_int_cst (size_type_node, 1);\n+      ssc =  src;\n+    }\n+\n+  if (dlength != NULL_TREE)\n+    {\n+      dlen = fold_convert (size_type_node, gfc_evaluate_now (dlength, block));\n+      dsc = gfc_to_single_character (slen, dest);\n+    }\n+  else\n+    {\n+      dlen = build_int_cst (size_type_node, 1);\n+      dsc =  dest;\n+    }\n+\n+  if (slength != NULL_TREE && POINTER_TYPE_P (TREE_TYPE (src)))\n+    ssc = gfc_to_single_character (slen, src);\n+  if (dlength != NULL_TREE && POINTER_TYPE_P (TREE_TYPE (dest)))\n+    dsc = gfc_to_single_character (dlen, dest);\n+\n \n-  /* Deal with single character specially.  */\n-  dsc = gfc_to_single_character (dlen, dest);\n-  ssc = gfc_to_single_character (slen, src);\n   if (dsc != NULL_TREE && ssc != NULL_TREE)\n     {\n       gfc_add_modify_expr (block, dsc, ssc);\n@@ -2859,8 +2872,15 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n      We're now doing it here for better optimization, but the logic\n      is the same.  */\n \n-  dest = fold_convert (pvoid_type_node, dest);\n-  src = fold_convert (pvoid_type_node, src);\n+  if (dlength)\n+    dest = fold_convert (pvoid_type_node, dest);\n+  else\n+    dest = gfc_build_addr_expr (pvoid_type_node, dest);\n+\n+  if (slength)\n+    src = fold_convert (pvoid_type_node, src);\n+  else\n+    src = gfc_build_addr_expr (pvoid_type_node, src);\n \n   /* Truncate string if source is too long.  */\n   cond2 = fold_build2 (GE_EXPR, boolean_type_node, slen, dlen);\n@@ -3806,17 +3826,25 @@ gfc_trans_scalar_assign (gfc_se * lse, gfc_se * rse, gfc_typespec ts,\n \n   if (ts.type == BT_CHARACTER)\n     {\n-      gcc_assert (lse->string_length != NULL_TREE\n-\t      && rse->string_length != NULL_TREE);\n+      tree rlen = NULL;\n+      tree llen = NULL;\n \n-      gfc_conv_string_parameter (lse);\n-      gfc_conv_string_parameter (rse);\n+      if (lse->string_length != NULL_TREE)\n+\t{\n+\t  gfc_conv_string_parameter (lse);\n+\t  gfc_add_block_to_block (&block, &lse->pre);\n+\t  llen = lse->string_length;\n+\t}\n \n-      gfc_add_block_to_block (&block, &lse->pre);\n-      gfc_add_block_to_block (&block, &rse->pre);\n+      if (rse->string_length != NULL_TREE)\n+\t{\n+\t  gcc_assert (rse->string_length != NULL_TREE);\n+\t  gfc_conv_string_parameter (rse);\n+\t  gfc_add_block_to_block (&block, &rse->pre);\n+\t  rlen = rse->string_length;\n+\t}\n \n-      gfc_trans_string_copy (&block, lse->string_length, lse->expr,\n-\t\t\t     rse->string_length, rse->expr);\n+      gfc_trans_string_copy (&block, llen, lse->expr, rlen, rse->expr);\n     }\n   else if (ts.type == BT_DERIVED && ts.derived->attr.alloc_comp)\n     {"}, {"sha": "2d10ddad080dedaf8062f428db32cfffb3935cfc", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=06a54338c4bc3ebb783565b5d358793d0b9602f7", "patch": "@@ -717,8 +717,8 @@ gfc_init_types (void)\n       PUSH_TYPE (name_buf, type);\n     }\n \n-  gfc_character1_type_node = build_type_variant (unsigned_char_type_node, \n-\t\t\t\t\t\t 0, 0);\n+  gfc_character1_type_node = build_qualified_type (unsigned_char_type_node, \n+\t\t\t\t\t\t   TYPE_UNQUALIFIED);\n   PUSH_TYPE (\"character(kind=1)\", gfc_character1_type_node);\n \n   PUSH_TYPE (\"byte\", unsigned_char_type_node);\n@@ -1555,7 +1555,11 @@ gfc_sym_type (gfc_symbol * sym)\n   if (sym->backend_decl && !sym->attr.function)\n     return TREE_TYPE (sym->backend_decl);\n \n-  type = gfc_typenode_for_spec (&sym->ts);\n+  if (sym->ts.type == BT_CHARACTER && sym->attr.is_bind_c\n+      && (sym->attr.function || sym->attr.result))\n+    type = gfc_character1_type_node;\n+  else\n+    type = gfc_typenode_for_spec (&sym->ts);\n \n   if (sym->attr.dummy && !sym->attr.function && !sym->attr.value)\n     byref = 1;"}, {"sha": "d915cdac8d157db73b7878366d47ca000a235886", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06a54338c4bc3ebb783565b5d358793d0b9602f7", "patch": "@@ -1,3 +1,8 @@\n+2007-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34246\n+\t* gfortran.dg/bind_c_usage_16.f03: Extend test.\n+\n 2007-12-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31213"}, {"sha": "990918fcc59f275713cd3c71bbfce3bff5d38ff6", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_16.f03", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06a54338c4bc3ebb783565b5d358793d0b9602f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03?ref=06a54338c4bc3ebb783565b5d358793d0b9602f7", "patch": "@@ -24,9 +24,11 @@ subroutine test() bind(c)\n   use mod\n   implicit none\n   character(len=1,kind=c_char) :: a\n-  character(len=5,kind=c_char) :: b\n+  character(len=3,kind=c_char) :: b\n   character(len=1,kind=c_char) :: c(3)\n-  character(len=5,kind=c_char) :: d(3)\n+  character(len=3,kind=c_char) :: d(3)\n+  integer :: i\n+\n   a = 'z'\n   b = 'fffff'\n   c = 'h'\n@@ -35,7 +37,7 @@ subroutine test() bind(c)\n   a = bar('x')\n   if (a /= 'A') call abort()\n   b = bar('y')\n-  if (b /= 'A') call abort()\n+  if (b /= 'A' .or. iachar(b(2:2))/=32 .or. iachar(b(3:3))/=32) call abort()\n   c = bar('x')\n   if (any(c /= 'A')) call abort()\n   d = bar('y')\n@@ -49,4 +51,7 @@ subroutine test() bind(c)\n   if (any(c /= 'B')) call abort()\n   d = foo()\n   if (any(d /= 'B')) call abort()\n+  do i = 1,3\n+    if(iachar(d(i)(2:2)) /=32 .or. iachar(d(i)(3:3)) /= 32) call abort()\n+  end do\n end subroutine"}]}