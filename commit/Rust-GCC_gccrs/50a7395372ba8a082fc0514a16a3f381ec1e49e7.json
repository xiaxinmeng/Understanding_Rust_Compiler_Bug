{"sha": "50a7395372ba8a082fc0514a16a3f381ec1e49e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhNzM5NTM3MmJhOGEwODJmYzA1MTRhMTZhM2YzODFlYzFlNDllNw==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2019-09-18T08:32:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:32:37Z"}, "message": "[Ada] Don't fail a front-end assertion if errors have already been detected\n\nIn sem_eval.adb, we have an assertion that the type of a \"null\" literal\nis an access type. It turns out that this assertion can fail when\nprocessing an illegal program, e.g. one that contains something like\n\"Integer'(null)\".  This leads to differences in the compiler's generated\noutput for such tests depending on whether assertions are/aren't\nenabled; in particular, the \"compilation abandoned due to previous\nerror\" message generated in Comperr.Compiler_Abort. In order to avoid\nthese differences, we change the assertion so that it does not fail if\nerrors have already been posted on the given node.\n\n2019-09-18  Steve Baird  <baird@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Expr_Value): Do not fail \"the type of a null\n\tliteral must be an access type\" assertion if errors have already\n\tbeen posted on the given node.\n\nFrom-SVN: r275852", "tree": {"sha": "6200def24fd5a0a9263fc111b9f44a465539f6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6200def24fd5a0a9263fc111b9f44a465539f6bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a7395372ba8a082fc0514a16a3f381ec1e49e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a7395372ba8a082fc0514a16a3f381ec1e49e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a7395372ba8a082fc0514a16a3f381ec1e49e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a7395372ba8a082fc0514a16a3f381ec1e49e7/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "432a3b3644f52822cb61da7f529edf35b4390dd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432a3b3644f52822cb61da7f529edf35b4390dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432a3b3644f52822cb61da7f529edf35b4390dd8"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "88957a24b1beffcab09c94db5f4c6eafc1dfaf1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a7395372ba8a082fc0514a16a3f381ec1e49e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a7395372ba8a082fc0514a16a3f381ec1e49e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=50a7395372ba8a082fc0514a16a3f381ec1e49e7", "patch": "@@ -1,3 +1,9 @@\n+2019-09-18  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_eval.adb (Expr_Value): Do not fail \"the type of a null\n+\tliteral must be an access type\" assertion if errors have already\n+\tbeen posted on the given node.\n+\n 2019-09-18  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* exp_dbug.ads, exp_dbug.adb (Get_Homonym_Number): Refine type"}, {"sha": "5f26ecd834dc662db0e87db4a6e1806788969628", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a7395372ba8a082fc0514a16a3f381ec1e49e7/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a7395372ba8a082fc0514a16a3f381ec1e49e7/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=50a7395372ba8a082fc0514a16a3f381ec1e49e7", "patch": "@@ -4278,7 +4278,8 @@ package body Sem_Eval is\n       --  The NULL access value\n \n       elsif Kind = N_Null then\n-         pragma Assert (Is_Access_Type (Underlying_Type (Etype (N))));\n+         pragma Assert (Is_Access_Type (Underlying_Type (Etype (N)))\n+           or else Error_Posted (N));\n          Val := Uint_0;\n \n       --  Character literal"}]}