{"sha": "abc24d932cf028c4ba363c89aad530fd0f49d93f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjMjRkOTMyY2YwMjhjNGJhMzYzYzg5YWFkNTMwZmQwZjQ5ZDkzZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-01T08:36:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-01T08:36:20Z"}, "message": "c-ada-spec.c (dump_ada_declaration): Generate a forward declaration for a typedef independently of whether the...\n\n\t* c-ada-spec.c (dump_ada_declaration) <TYPE_DECL>: Generate a forward\n\tdeclaration for a typedef independently of whether the declaration of\n\tthe subtype is generated.\n\nFrom-SVN: r261058", "tree": {"sha": "8ca1ef4b9a3cf43e2cc3d0bebef3cd0021d05c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca1ef4b9a3cf43e2cc3d0bebef3cd0021d05c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc24d932cf028c4ba363c89aad530fd0f49d93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc24d932cf028c4ba363c89aad530fd0f49d93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc24d932cf028c4ba363c89aad530fd0f49d93f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc24d932cf028c4ba363c89aad530fd0f49d93f/comments", "author": null, "committer": null, "parents": [{"sha": "67e5c59afb1696a624bdd2c49ada60db52158af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e5c59afb1696a624bdd2c49ada60db52158af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e5c59afb1696a624bdd2c49ada60db52158af4"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "319e546534ada904371cb2f9e328e0d12040ce04", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc24d932cf028c4ba363c89aad530fd0f49d93f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc24d932cf028c4ba363c89aad530fd0f49d93f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=abc24d932cf028c4ba363c89aad530fd0f49d93f", "patch": "@@ -1,3 +1,9 @@\n+2018-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_declaration) <TYPE_DECL>: Generate a forward\n+\tdeclaration for a typedef independently of whether the declaration of\n+\tthe subtype is generated.\n+\n 2018-05-31  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/82063"}, {"sha": "30fdb59d55c933e028399b80f243ed67f877f751", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc24d932cf028c4ba363c89aad530fd0f49d93f/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc24d932cf028c4ba363c89aad530fd0f49d93f/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=abc24d932cf028c4ba363c89aad530fd0f49d93f", "patch": "@@ -2734,19 +2734,25 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n \t  if (TYPE_NAME (typ))\n \t    {\n-\t      /* If types have same representation, and same name (ignoring\n-\t\t casing), then ignore the second type.  */\n+\t      /* If the types have the same name (ignoring casing), then ignore\n+\t\t the second type, but forward declare the first if need be.  */\n \t      if (type_name (typ) == type_name (TREE_TYPE (t))\n \t\t  || !strcasecmp (type_name (typ), type_name (TREE_TYPE (t))))\n \t\t{\n+\t\t  if (RECORD_OR_UNION_TYPE_P (typ) && !TREE_VISITED (stub))\n+\t\t    {\n+\t\t      INDENT (spc);\n+\t\t      dump_forward_type (buffer, typ, t, 0);\n+\t\t    }\n+\n \t\t  TREE_VISITED (t) = 1;\n \t\t  return 0;\n \t\t}\n \n \t      INDENT (spc);\n \n-\t      if (RECORD_OR_UNION_TYPE_P (typ))\n-\t\tdump_forward_type (buffer, stub, t, spc);\n+\t      if (RECORD_OR_UNION_TYPE_P (typ) && !TREE_VISITED (stub))\n+\t\tdump_forward_type (buffer, typ, t, spc);\n \n \t      pp_string (buffer, \"subtype \");\n \t      dump_ada_node (buffer, t, type, spc, false, true);"}]}