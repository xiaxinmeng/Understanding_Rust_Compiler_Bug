{"sha": "985b3bdde0252a291086a90ec59a118b371b0fa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1YjNiZGRlMDI1MmEyOTEwODZhOTBlYzU5YTExOGIzNzFiMGZhNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T03:17:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T03:17:41Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r896", "tree": {"sha": "73080ff9f5ac721b5c979bb2361691984cb193d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73080ff9f5ac721b5c979bb2361691984cb193d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985b3bdde0252a291086a90ec59a118b371b0fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b3bdde0252a291086a90ec59a118b371b0fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985b3bdde0252a291086a90ec59a118b371b0fa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b3bdde0252a291086a90ec59a118b371b0fa6/comments", "author": null, "committer": null, "parents": [{"sha": "61abc2ca7a92093b27890da2e062193287453c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61abc2ca7a92093b27890da2e062193287453c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61abc2ca7a92093b27890da2e062193287453c6c"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "7001ea29738f157cc85bbfa8e250388312305da8", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b3bdde0252a291086a90ec59a118b371b0fa6/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b3bdde0252a291086a90ec59a118b371b0fa6/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=985b3bdde0252a291086a90ec59a118b371b0fa6", "patch": "@@ -1183,15 +1183,20 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'.\n-   On the Vax, the codes used are:\n-   `#', indicating that either `d' or `g' should be printed,\n-   depending on whether we're using dfloat or gfloat.\n-   `C', indicating the reverse of the condition name specified by the\n-   operand.\n-   `P', indicating one plus a constant operand\n-   `N', indicating the one's complement of a constant operand\n-   `H', indicating the low-order 16 bits of the one's complement of a constant\n-   `B', similarly for the low-order 8 bits.  */\n+\n+VAX operand formatting codes:\n+\n+ letter\t   print\n+   C\treverse branch condition\n+   B\tthe low 8 bits of the complement of a constant operand\n+   H\tthe low 16 bits of the complement of a constant operand\n+   M\t(1 << const) - 1\n+   N\tthe complement of a constant integer operand\n+   P\tconstant operand plus 1\n+   R\t32 - constant operand\n+   b\tthe low 8 bits of a negated constant operand\n+   h\tthe low 16 bits of a negated constant operand\n+   #\t'd' or 'g' depending on whether dfloat or gfloat is used  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '#')\n@@ -1210,8 +1215,14 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n     fprintf (FILE, \"$%d\", 32 - INTVAL (X));\t\t\t\t\\\n   else if (CODE == 'H' && GET_CODE (X) == CONST_INT)\t\t\t\\\n     fprintf (FILE, \"$%d\", 0xffff & ~ INTVAL (X));\t\t\t\\\n+  else if (CODE == 'h' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+    fprintf (FILE, \"$%d\", (short) - INTVAL (x));\t\t\t\\\n   else if (CODE == 'B' && GET_CODE (X) == CONST_INT)\t\t\t\\\n     fprintf (FILE, \"$%d\", 0xff & ~ INTVAL (X));\t\t\t\t\\\n+  else if (CODE == 'b' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+    fprintf (FILE, \"$%d\", 0xff & - INTVAL (X));\t\t\t\t\\\n+  else if (CODE == 'M' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+    fprintf (FILE, \"$%d\", ~((1 << INTVAL (x)) - 1));\t\t\t\\\n   else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n     fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\"}]}