{"sha": "56b7aede9188eeda696eff95effb2288289ddc52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiN2FlZGU5MTg4ZWVkYTY5NmVmZjk1ZWZmYjIyODgyODlkZGM1Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-12-13T09:14:47Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-12-13T09:14:47Z"}, "message": "Add pretty printer for ASAN_MARK and add a helper fn\n\n\t* asan.c (asan_mark_poison_p): Remove.\n\t(asan_mark_p): New function.\n\t(transform_statements): Use the function.\n\t(asan_expand_mark_ifn): Do not use masked enum.\n\t* asan.h (enum asan_mark_flags): Declare it via a macro.\n\t* gimple-pretty-print.c (dump_gimple_call_args): Dump first\n\targument of ASAN_MARK.\n\t* gimplify.c (build_asan_poison_call_expr): Use new enum values.\n\t(asan_poison_variable): Likewise.\n\t* gcc.dg/asan/use-after-scope-goto-1.c: Update first argument of\n\tscanned pattern ASAN_MARK.\n\t* gcc.dg/asan/use-after-scope-goto-2.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-1.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-2.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-3.c: Likewise.\n\nFrom-SVN: r243597", "tree": {"sha": "66f2e4c8f7d1959d8514c378e37c394920cb9300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66f2e4c8f7d1959d8514c378e37c394920cb9300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b7aede9188eeda696eff95effb2288289ddc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b7aede9188eeda696eff95effb2288289ddc52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b7aede9188eeda696eff95effb2288289ddc52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b7aede9188eeda696eff95effb2288289ddc52/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd6d518b2978157020752ae1b5627e7619923930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6d518b2978157020752ae1b5627e7619923930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6d518b2978157020752ae1b5627e7619923930"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "9ae13c5ed054be31ea65619a3480115329376676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -1,3 +1,15 @@\n+2016-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c (asan_mark_poison_p): Remove.\n+\t(asan_mark_p): New function.\n+\t(transform_statements): Use the function.\n+\t(asan_expand_mark_ifn): Do not use masked enum.\n+\t* asan.h (enum asan_mark_flags): Declare it via a macro.\n+\t* gimple-pretty-print.c (dump_gimple_call_args): Dump first\n+\targument of ASAN_MARK.\n+\t* gimplify.c (build_asan_poison_call_expr): Use new enum values.\n+\t(asan_poison_variable): Likewise.\n+\n 2016-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/77905"}, {"sha": "e297784270d18cf19270eea3307ad8a7e710128d", "filename": "gcc/asan.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -245,15 +245,6 @@ static unsigned HOST_WIDE_INT asan_shadow_offset_value;\n static bool asan_shadow_offset_computed;\n static vec<char *> sanitized_sections;\n \n-/* Return true if STMT is ASAN_MARK poisoning internal function call.  */\n-static inline bool\n-asan_mark_poison_p (gimple *stmt)\n-{\n-  return (gimple_call_internal_p (stmt, IFN_ASAN_MARK)\n-\t  && tree_to_uhwi (gimple_call_arg (stmt, 0)) == ASAN_MARK_CLOBBER);\n-\n-}\n-\n /* Set of variable declarations that are going to be guarded by\n    use-after-scope sanitizer.  */\n \n@@ -303,6 +294,13 @@ set_sanitized_sections (const char *sections)\n     }\n }\n \n+bool\n+asan_mark_p (gimple *stmt, enum asan_mark_flags flag)\n+{\n+  return (gimple_call_internal_p (stmt, IFN_ASAN_MARK)\n+\t  && tree_to_uhwi (gimple_call_arg (stmt, 0)) == flag);\n+}\n+\n bool\n asan_sanitize_stack_p (void)\n {\n@@ -2222,7 +2220,8 @@ transform_statements (void)\n \t\t miss some instrumentation opportunities.  Do the same\n \t\t for a ASAN_MARK poisoning internal function.  */\n \t      if (is_gimple_call (s)\n-\t\t  && (!nonfreeing_call_p (s) || asan_mark_poison_p (s)))\n+\t\t  && (!nonfreeing_call_p (s)\n+\t\t      || asan_mark_p (s, ASAN_MARK_POISON)))\n \t\tempty_mem_ref_hash_table ();\n \n \t      gsi_next (&i);\n@@ -2777,9 +2776,8 @@ asan_expand_mark_ifn (gimple_stmt_iterator *iter)\n {\n   gimple *g = gsi_stmt (*iter);\n   location_t loc = gimple_location (g);\n-  HOST_WIDE_INT flags = tree_to_shwi (gimple_call_arg (g, 0));\n-  gcc_assert (flags < ASAN_MARK_LAST);\n-  bool is_clobber = (flags & ASAN_MARK_CLOBBER) != 0;\n+  HOST_WIDE_INT flag = tree_to_shwi (gimple_call_arg (g, 0));\n+  bool is_poison = ((asan_mark_flags)flag) == ASAN_MARK_POISON;\n \n   tree base = gimple_call_arg (g, 1);\n   gcc_checking_assert (TREE_CODE (base) == ADDR_EXPR);\n@@ -2827,7 +2825,7 @@ asan_expand_mark_ifn (gimple_stmt_iterator *iter)\n \t  if (s > size_in_bytes)\n \t    last_chunk_size = ASAN_SHADOW_GRANULARITY - (s - size_in_bytes);\n \n-\t  asan_store_shadow_bytes (iter, loc, shadow, offset, is_clobber,\n+\t  asan_store_shadow_bytes (iter, loc, shadow, offset, is_poison,\n \t\t\t\t   size, last_chunk_size);\n \t  offset += size;\n \t}\n@@ -2840,7 +2838,7 @@ asan_expand_mark_ifn (gimple_stmt_iterator *iter)\n       gsi_insert_before (iter, g, GSI_SAME_STMT);\n       tree sz_arg = gimple_assign_lhs (g);\n \n-      tree fun = builtin_decl_implicit (is_clobber ? BUILT_IN_ASAN_CLOBBER_N\n+      tree fun = builtin_decl_implicit (is_poison ? BUILT_IN_ASAN_CLOBBER_N\n \t\t\t\t\t: BUILT_IN_ASAN_UNCLOBBER_N);\n       g = gimple_build_call (fun, 2, base_addr, sz_arg);\n       gimple_set_location (g, loc);"}, {"sha": "355a350bfeb8c91ca09d9ee4a2de8b9ea7db234d", "filename": "gcc/asan.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -75,13 +75,18 @@ enum asan_check_flags\n };\n \n /* Flags for Asan check builtins.  */\n+#define IFN_ASAN_MARK_FLAGS DEF(POISON), DEF(UNPOISON)\n+\n enum asan_mark_flags\n {\n-  ASAN_MARK_CLOBBER = 1 << 0,\n-  ASAN_MARK_UNCLOBBER = 1 << 1,\n-  ASAN_MARK_LAST = 1 << 2\n+#define DEF(X) ASAN_MARK_##X\n+  IFN_ASAN_MARK_FLAGS\n+#undef DEF\n };\n \n+/* Return true if STMT is ASAN_MARK with FLAG as first argument.  */\n+extern bool asan_mark_p (gimple *stmt, enum asan_mark_flags flag);\n+\n /* Return the size of padding needed to insert after a protected\n    decl of SIZE.  */\n "}, {"sha": "1bd4cde03cf0e06f46e182503b9ef21f51c299d1", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"trans-mem.h\"\n #include \"cfganal.h\"\n+#include \"asan.h\"\n \n #define INDENT(SPACE)\t\t\t\t\t\t\t\\\n   do { int i; for (i = 0; i < SPACE; i++) pp_space (buffer); } while (0)\n@@ -644,6 +645,14 @@ dump_gimple_call_args (pretty_printer *buffer, gcall *gs, int flags)\n \t  limit = ARRAY_SIZE (reduction_args);\n \t  break;\n \n+\tcase IFN_ASAN_MARK:\n+#define DEF(X) #X\n+\t  static const char *const asan_mark_args[] = {IFN_ASAN_MARK_FLAGS};\n+#undef DEF\n+\t  enums = asan_mark_args;\n+\t  limit = ARRAY_SIZE (asan_mark_args);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "23e59c2f12354905f614ac7e739d516a081320fc", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -2631,7 +2631,7 @@ nonfreeing_call_p (gimple *call)\n       case IFN_ABNORMAL_DISPATCHER:\n         return true;\n       case IFN_ASAN_MARK:\n-\treturn tree_to_uhwi (gimple_call_arg (call, 0)) == ASAN_MARK_UNCLOBBER;\n+\treturn tree_to_uhwi (gimple_call_arg (call, 0)) == ASAN_MARK_UNPOISON;\n       default:\n \tif (gimple_call_flags (call) & ECF_LEAF)\n \t  return true;"}, {"sha": "87615a95fb5c714e40b8c866430eed783634f33a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -1109,7 +1109,7 @@ build_asan_poison_call_expr (tree decl)\n   return build_call_expr_internal_loc (UNKNOWN_LOCATION, IFN_ASAN_MARK,\n \t\t\t\t       void_type_node, 3,\n \t\t\t\t       build_int_cst (integer_type_node,\n-\t\t\t\t\t\t      ASAN_MARK_CLOBBER),\n+\t\t\t\t\t\t      ASAN_MARK_POISON),\n \t\t\t\t       base, unit_size);\n }\n \n@@ -1138,7 +1138,7 @@ asan_poison_variable (tree decl, bool poison, gimple_stmt_iterator *it,\n   if (DECL_ALIGN_UNIT (decl) <= ASAN_SHADOW_GRANULARITY)\n     SET_DECL_ALIGN (decl, BITS_PER_UNIT * ASAN_SHADOW_GRANULARITY);\n \n-  HOST_WIDE_INT flags = poison ? ASAN_MARK_CLOBBER : ASAN_MARK_UNCLOBBER;\n+  HOST_WIDE_INT flags = poison ? ASAN_MARK_POISON : ASAN_MARK_UNPOISON;\n \n   gimple *g\n     = gimple_build_call_internal (IFN_ASAN_MARK, 3,"}, {"sha": "ff7bd7868bce1447c6db1380da62be21d9f6baca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -1,3 +1,12 @@\n+2016-12-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/asan/use-after-scope-goto-1.c: Update first argument of\n+\tscanned pattern ASAN_MARK.\n+\t* gcc.dg/asan/use-after-scope-goto-2.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-1.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-2.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-3.c: Likewise.\n+\n 2016-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/77905"}, {"sha": "c1538e4e29b63b34d39877823f475739c38dd69a", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-goto-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -42,6 +42,6 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, 4\\\\);\" 2 \"asan0\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &c, 4\\\\);\" 2 \"asan0\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &e, 4\\\\);\" 2 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &a, 4\\\\);\" 2 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &c, 4\\\\);\" 2 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &e, 4\\\\);\" 2 \"asan0\" } }  */"}, {"sha": "7c396141d9bc7ff119f915a0223fbe563fb78a3d", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-goto-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -22,4 +22,4 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, 4\\\\);\" 1 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &a, 4\\\\);\" 1 \"asan0\" } }  */"}, {"sha": "d4d753936bb4899e78d6fbf87d98e8707e49e09d", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -21,5 +21,5 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(POISON, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}, {"sha": "5a5ea375e183ea671c477e269117f9b34abfa32b", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -25,9 +25,9 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &b, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &c, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &b, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &c, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &b, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &c, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(POISON, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(POISON, &b, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(POISON, &c, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}, {"sha": "f361591351b7ed16e913368c31b631cd58ee9731", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7aede9188eeda696eff95effb2288289ddc52/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c?ref=56b7aede9188eeda696eff95effb2288289ddc52", "patch": "@@ -32,5 +32,5 @@ main (int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 4 \"gimple\" } }  */\n-/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(UNPOISON, &a, \\[0-9\\]\\\\);\" 4 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(POISON, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}]}