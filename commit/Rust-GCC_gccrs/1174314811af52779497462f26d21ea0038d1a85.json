{"sha": "1174314811af52779497462f26d21ea0038d1a85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3NDMxNDgxMWFmNTI3Nzk0OTc0NjJmMjZkMjFlYTAwMzhkMWE4NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-13T09:57:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-04-13T09:57:55Z"}, "message": "Fix thinko in libcpp preparation patch for modules\n\nThe problem is that the new IS_MACRO_LOC macro:\n\ninline bool\nIS_MACRO_LOC (location_t loc)\n{\n  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);\n}\n\nis not fully correct since the position of the macro lines is not fixed:\n\n/* Returns the lowest location [of a token resulting from macro\n   expansion] encoded in this line table.  */\ninline location_t\nLINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)\n{\n  return LINEMAPS_MACRO_USED (set)\n         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))\n         : MAX_LOCATION_T + 1;\n}\n\nIn Ada, LINEMAPS_MACRO_USED is false so LINEMAPS_MACRO_LOWEST_LOCATION is\nMAX_LOCATION_T + 1, but IS_MACRO_LOC nevertheless returns true for anything\nin the range [LINE_MAP_MAX_LOCATION; MAX_LOCATION_T], thus yielding an ICE\nin linemap_macro_map_lookup for very large files.\n\nlibcpp/\n\t* include/line-map.h (IS_MACRO_LOC): Delete.\n\t* line-map.c (linemap_location_from_macro_expansion_p): Test\n\tLINEMAPS_MACRO_LOWEST_LOCATION of the linemap.\ngcc/cp/\n\t* module.cc (ordinary_loc_of): Test LINEMAPS_MACRO_LOWEST_LOCATION\n\tof the linemap.\n\t(module_state::write_location): Likewise.", "tree": {"sha": "aad313e4824374849b6d2af98aaa348318d7380f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aad313e4824374849b6d2af98aaa348318d7380f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1174314811af52779497462f26d21ea0038d1a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174314811af52779497462f26d21ea0038d1a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1174314811af52779497462f26d21ea0038d1a85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174314811af52779497462f26d21ea0038d1a85/comments", "author": null, "committer": null, "parents": [{"sha": "89e95ad2e7679322b2f5ee9070ff2721d5ca1d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e95ad2e7679322b2f5ee9070ff2721d5ca1d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e95ad2e7679322b2f5ee9070ff2721d5ca1d6d"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "ab8b1f1caad927278e1dc04aa59cebaf9730c457", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1174314811af52779497462f26d21ea0038d1a85/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1174314811af52779497462f26d21ea0038d1a85/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=1174314811af52779497462f26d21ea0038d1a85", "patch": "@@ -13709,7 +13709,7 @@ ordinary_loc_of (line_maps *lmaps, location_t from)\n     {\n       if (IS_ADHOC_LOC (from))\n \tfrom = get_location_from_adhoc_loc (lmaps, from);\n-      if (IS_MACRO_LOC (from))\n+      if (from >= LINEMAPS_MACRO_LOWEST_LOCATION (lmaps))\n \t{\n \t  /* Find the ordinary location nearest FROM.  */\n \t  const line_map *map = linemap_lookup (lmaps, from);\n@@ -15554,7 +15554,7 @@ module_state::write_location (bytes_out &sec, location_t loc)\n       write_location (sec, range.m_start);\n       write_location (sec, range.m_finish);\n     }\n-  else if (IS_MACRO_LOC (loc))\n+  else if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n     {\n       if (const loc_spans::span *span = spans.macro (loc))\n \t{"}, {"sha": "7d964172469cf7d41421c5ec1c33d40ea238d5c7", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1174314811af52779497462f26d21ea0038d1a85/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1174314811af52779497462f26d21ea0038d1a85/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=1174314811af52779497462f26d21ea0038d1a85", "patch": "@@ -563,26 +563,22 @@ struct GTY((tag (\"2\"))) line_map_macro : public line_map {\n #define linemap_assert_fails(EXPR) (! (EXPR))\n #endif\n \n-/* Get whether location LOC is an ad-hoc, ordinary or macro location.  */\n+/* Get whether location LOC is an ordinary location.  */\n \n inline bool\n IS_ORDINARY_LOC (location_t loc)\n {\n   return loc < LINE_MAP_MAX_LOCATION;\n }\n \n+/* Get whether location LOC is an ad-hoc location.  */\n+\n inline bool\n IS_ADHOC_LOC (location_t loc)\n {\n   return loc > MAX_LOCATION_T;\n }\n \n-inline bool\n-IS_MACRO_LOC (location_t loc)\n-{\n-  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);\n-}\n-\n /* Categorize line map kinds.  */\n \n inline bool"}, {"sha": "1bf0e8211f20f8a4928bc812bcee3cfd9cba3ee2", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1174314811af52779497462f26d21ea0038d1a85/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1174314811af52779497462f26d21ea0038d1a85/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=1174314811af52779497462f26d21ea0038d1a85", "patch": "@@ -1321,7 +1321,7 @@ linemap_location_from_macro_expansion_p (const class line_maps *set,\n   if (IS_ADHOC_LOC (location))\n     location = get_location_from_adhoc_loc (set, location);\n \n-  return IS_MACRO_LOC (location);\n+  return location >= LINEMAPS_MACRO_LOWEST_LOCATION (set);\n }\n \n /* Given two virtual locations *LOC0 and *LOC1, return the first"}]}