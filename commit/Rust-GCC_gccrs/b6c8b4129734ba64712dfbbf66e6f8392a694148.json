{"sha": "b6c8b4129734ba64712dfbbf66e6f8392a694148", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjOGI0MTI5NzM0YmE2NDcxMmRmYmJmNjZlNmY4MzkyYTY5NDE0OA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-03-01T20:37:30Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-03-01T20:37:30Z"}, "message": "* config/cris/cris.c (cris_eligible_for_epilogue_delay)\n\t(cris_delay_slots_for_epilogue): Remove.\n\t(save_last): Move into cris_target_asm_function_epilogue.\n\t(cris_target_asm_function_epilogue): Remove tests for file being\n\tNULL.\n\t* config/cris/cris-protos.h (cris_eligible_for_epilogue_delay)\n\t(cris_delay_slots_for_epilogue): Remove prototypes.\n\t* config/cris/cris.h (DELAY_SLOTS_FOR_EPILOGUE)\n\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Do not define.\n\nFrom-SVN: r95754", "tree": {"sha": "578a78460c182d86834fa09436e6c30b26f139ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/578a78460c182d86834fa09436e6c30b26f139ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c8b4129734ba64712dfbbf66e6f8392a694148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c8b4129734ba64712dfbbf66e6f8392a694148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c8b4129734ba64712dfbbf66e6f8392a694148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c8b4129734ba64712dfbbf66e6f8392a694148/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a80dc82134278316098f463dfbaf41dc9c409a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a80dc82134278316098f463dfbaf41dc9c409a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a80dc82134278316098f463dfbaf41dc9c409a4"}], "stats": {"total": 192, "additions": 51, "deletions": 141}, "files": [{"sha": "bd1a44f4ae1938ca869e71dcf277c155afdf69c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6c8b4129734ba64712dfbbf66e6f8392a694148", "patch": "@@ -1,3 +1,15 @@\n+2005-03-01  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c (cris_eligible_for_epilogue_delay)\n+\t(cris_delay_slots_for_epilogue): Remove.\n+\t(save_last): Move into cris_target_asm_function_epilogue.\n+\t(cris_target_asm_function_epilogue): Remove tests for file being\n+\tNULL.\n+\t* config/cris/cris-protos.h (cris_eligible_for_epilogue_delay)\n+\t(cris_delay_slots_for_epilogue): Remove prototypes.\n+\t* config/cris/cris.h (DELAY_SLOTS_FOR_EPILOGUE)\n+\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Do not define.\n+\n 2005-03-01  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/predicates.md (branch_comparison_operator): Change"}, {"sha": "e47327ffb1eba8e89a82b6e662f3a1ceebf2ff92", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=b6c8b4129734ba64712dfbbf66e6f8392a694148", "patch": "@@ -30,7 +30,6 @@ extern void cris_conditional_register_usage (void);\n extern int cris_simple_epilogue (void);\n #ifdef RTX_CODE\n extern const char *cris_op_str (rtx);\n-extern int cris_eligible_for_epilogue_delay (rtx);\n extern void cris_notice_update_cc (rtx, rtx);\n extern void cris_print_operand (FILE *, rtx, int);\n extern void cris_print_operand_address (FILE *, rtx);\n@@ -61,5 +60,3 @@ extern void cris_override_options (void);\n extern int cris_initial_elimination_offset (int, int);\n \n extern void cris_init_expanders (void);\n-\n-extern int cris_delay_slots_for_epilogue (void);"}, {"sha": "e1b3a657161025b1b915ce693e3c61989e96dd27", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 39, "deletions": 131, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b6c8b4129734ba64712dfbbf66e6f8392a694148", "patch": "@@ -126,11 +126,6 @@ static bool cris_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n \n-/* The function cris_target_asm_function_epilogue puts the last insn to\n-   output here.  It always fits; there won't be a symbol operand.  Used in\n-   delay_slots_for_epilogue and function_epilogue.  */\n-static char save_last[80];\n-\n /* This is the argument from the \"-max-stack-stackframe=\" option.  */\n const char *cris_max_stackframe_str;\n \n@@ -996,66 +991,7 @@ saved_regs_mentioned (rtx x)\n   return 0;\n }\n \n-/* Figure out if the insn may be put in the epilogue.  */\n-\n-int\n-cris_eligible_for_epilogue_delay (rtx insn)\n-{\n-  /* First of all, it must be as slottable as for a delayed branch insn.  */\n-  if (get_attr_slottable (insn) != SLOTTABLE_YES)\n-    return 0;\n-\n-  /* It must not refer to the stack pointer (may be valid for some cases\n-     that I can't think of).  */\n-  if (reg_mentioned_p (stack_pointer_rtx, PATTERN (insn)))\n-    return 0;\n-\n-  /* The frame pointer will be restored in the epilogue, before the\n-     \"ret\", so it can't be referred to.  */\n-  if (frame_pointer_needed\n-      && reg_mentioned_p (frame_pointer_rtx, PATTERN (insn)))\n-    return 0;\n-\n-  /* All saved regs are restored before the delayed insn.\n-     This means that we cannot have any instructions that mention the\n-     registers that are restored by the epilogue.  */\n-  if (saved_regs_mentioned (PATTERN (insn)))\n-    return 0;\n-\n-  /* It seems to be ok.  */\n-  return 1;\n-}\n-\n-/* Return the number of delay-slots in the epilogue: return 1 if it\n-   contains \"ret\", else 0.  */\n-\n-int\n-cris_delay_slots_for_epilogue (void)\n-{\n-  /* Check if we use a return insn, which we only do for leaf functions.\n-     Else there is no slot to fill.  */\n-  if (regs_ever_live[CRIS_SRP_REGNUM]\n-      || cfun->machine->needs_return_address_on_stack != 0)\n-    return 0;\n-\n-  /* By calling function_epilogue with the same parameters as from gcc\n-     we can get info about if the epilogue can fill the delay-slot by itself.\n-     If it is filled from the epilogue, then the corresponding string\n-     is in save_last.\n-      This depends on that the \"size\" argument to function_epilogue\n-     always is get_frame_size.\n-     FIXME:  Kludgy.  At least make it a separate function that is not\n-     misnamed or abuses the stream parameter.  */\n-  cris_target_asm_function_epilogue (NULL, get_frame_size ());\n-\n-  if (*save_last)\n-    return 1;\n-  return 0;\n-}\n-\n-/* Textual function epilogue.  When file is NULL, it serves doubly as\n-   a test for whether the epilogue can fill any \"ret\" delay-slots by\n-   itself by storing the delay insn in save_last.  */\n+/* Textual function epilogue.  */\n \n static void\n cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n@@ -1068,13 +1004,14 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n   int return_address_on_stack\n     = regs_ever_live[CRIS_SRP_REGNUM]\n     || cfun->machine->needs_return_address_on_stack != 0;\n+  char save_last[80];\n \n   save_last[0] = 0;\n \n-  if (file && !TARGET_PROLOGUE_EPILOGUE)\n+  if (!TARGET_PROLOGUE_EPILOGUE)\n     return;\n \n-  if (TARGET_PDEBUG && file)\n+  if (TARGET_PDEBUG)\n     fprintf (file, \";;\\n\");\n \n   /* Align byte count of stack frame.  */\n@@ -1094,7 +1031,7 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t  || (GET_CODE (insn) == JUMP_INSN\n \t      && GET_CODE (PATTERN (insn)) == RETURN)))\n     {\n-      if (TARGET_PDEBUG && file)\n+      if (TARGET_PDEBUG)\n \tfprintf (file, \";;;;;\\n\");\n       return;\n     }\n@@ -1150,17 +1087,16 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t  {\n \t    /* There is an area for outgoing parameters located before\n \t       the saved registers.  We have to adjust for that.  */\n-\t    if (file)\n-\t      fprintf (file, \"\\tAdd%s %d,$sp\\n\",\n-\t\t       ADDITIVE_SIZE_MODIFIER (argspace_offset),\n-\t\t       argspace_offset);\n+\t    fprintf (file, \"\\tAdd%s %d,$sp\\n\",\n+\t\t     ADDITIVE_SIZE_MODIFIER (argspace_offset),\n+\t\t     argspace_offset);\n \n \t    /* Make sure we only do this once.  */\n \t    argspace_offset = 0;\n \t  }\n \n \t/* Flush previous non-movem:ed registers.  */\n-\tif (*save_last && file)\n+\tif (*save_last)\n \t  fprintf (file, save_last);\n \tsprintf (save_last, \"\\tPop $%s\\n\", reg_names[regno]);\n       }\n@@ -1171,33 +1107,31 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t{\n \t  /* Adjust for the outgoing parameters area, if that's not\n \t     handled yet.  */\n-\t  if (*save_last && file)\n+\t  if (*save_last)\n \t    {\n \t      fprintf (file, save_last);\n \t      *save_last = 0;\n \t    }\n \n-\t  if (file)\n-\t    fprintf (file, \"\\tAdd%s %d,$sp\\n\",\n-\t\t     ADDITIVE_SIZE_MODIFIER (argspace_offset),\n-\t\t     argspace_offset);\n+\t  fprintf (file, \"\\tAdd%s %d,$sp\\n\",\n+\t\t   ADDITIVE_SIZE_MODIFIER (argspace_offset),\n+\t\t   argspace_offset);\n \t  argspace_offset = 0;\n \t}\n       /* Flush previous non-movem:ed registers.  */\n-      else if (*save_last && file)\n+      else if (*save_last)\n \tfprintf (file, save_last);\n       sprintf (save_last, \"\\tmovem [$sp+],$%s\\n\", reg_names[last_movem_reg]);\n     }\n \n   /* Restore frame pointer if necessary.  */\n   if (frame_pointer_needed)\n     {\n-      if (*save_last && file)\n+      if (*save_last)\n \tfprintf (file, save_last);\n \n-      if (file)\n-\tfprintf (file, \"\\tmove.d $%s,$sp\\n\",\n-\t\t reg_names[FRAME_POINTER_REGNUM]);\n+      fprintf (file, \"\\tmove.d $%s,$sp\\n\",\n+\t       reg_names[FRAME_POINTER_REGNUM]);\n       sprintf (save_last, \"\\tPop $%s\\n\",\n \t       reg_names[FRAME_POINTER_REGNUM]);\n     }\n@@ -1212,7 +1146,7 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \n       if (size)\n \t{\n-\t  if (*save_last && file)\n+\t  if (*save_last)\n \t    fprintf (file, save_last);\n \n \t  sprintf (save_last, \"\\tadd%s \"HOST_WIDE_INT_PRINT_DEC\",$sp\\n\",\n@@ -1223,8 +1157,7 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t it here.  */\n       if (size > 63)\n \t{\n-\t  if (file)\n-\t    fprintf (file, save_last);\n+\t  fprintf (file, save_last);\n \t  *save_last = 0;\n \t}\n     }\n@@ -1234,27 +1167,21 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n      just jump-return here.  */\n   if (return_address_on_stack && pretend == 0)\n     {\n-      if (*save_last && file)\n+      if (*save_last)\n \tfprintf (file, save_last);\n       *save_last = 0;\n \n-      if (file)\n+      if (current_function_calls_eh_return)\n \t{\n-\t  if (current_function_calls_eh_return)\n-\t    {\n-\t      /* The installed EH-return address is in *this* frame, so we\n-\t\t need to pop it before we return.  */\n-\t      fprintf (file, \"\\tpop $srp\\n\");\n-\t      fprintf (file, \"\\tret\\n\");\n-\t      fprintf (file, \"\\tadd.d $%s,$sp\\n\", reg_names[CRIS_STACKADJ_REG]);\n-\t    }\n-\t  else\n-\t    fprintf (file, \"\\tJump [$sp+]\\n\");\n-\n-\t  /* Do a sanity check to avoid generating invalid code.  */\n-\t  if (current_function_epilogue_delay_list)\n-\t    internal_error (\"allocated but unused delay list in epilogue\");\n+\t  /* The installed EH-return address is in *this* frame, so we\n+\t     need to pop it before we return.  */\n+\t  fprintf (file, \"\\tpop $srp\\n\");\n+\t  fprintf (file, \"\\tret\\n\");\n+\t  fprintf (file, \"\\tadd.d $%s,$sp\\n\", reg_names[CRIS_STACKADJ_REG]);\n \t}\n+      else\n+\tfprintf (file, \"\\tJump [$sp+]\\n\");\n+\n       return;\n     }\n \n@@ -1273,47 +1200,28 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n       /* Since srp is stored on the way, we need to restore it first.  */\n       if (return_address_on_stack)\n \t{\n-\t  if (*save_last && file)\n+\t  if (*save_last)\n \t    fprintf (file, save_last);\n \t  *save_last = 0;\n \n-\t  if (file)\n-\t    fprintf (file, \"\\tpop $srp\\n\");\n+\t  fprintf (file, \"\\tpop $srp\\n\");\n \t}\n \n-      if (*save_last && file)\n+      if (*save_last)\n \tfprintf (file, save_last);\n \n       sprintf (save_last, \"\\tadd%s %d,$sp\\n\",\n \t       ADDITIVE_SIZE_MODIFIER (pretend), pretend);\n     }\n \n-  /* Here's where we have a delay-slot we need to fill.  */\n-  if (file && current_function_epilogue_delay_list)\n-    {\n-      /* If gcc has allocated an insn for the epilogue delay slot, but\n-\t things were arranged so we now thought we could do it\n-\t ourselves, don't forget to flush that insn.  */\n-      if (*save_last)\n-\tfprintf (file, save_last);\n-\n-      fprintf (file, \"\\tRet\\n\");\n+  fprintf (file, \"\\tRet\\n\");\n \n-      /* Output the delay-slot-insn the mandated way.  */\n-      final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n-\t\t       file, 1, -2, 1, NULL);\n-    }\n-  else if (file)\n-    {\n-      fprintf (file, \"\\tRet\\n\");\n-\n-      /* If the GCC did not do it, we have to use whatever insn we have,\n-\t or a nop.  */\n-      if (*save_last)\n-\tfprintf (file, save_last);\n-      else\n-\tfprintf (file, \"\\tnOp\\n\");\n-    }\n+  /* If the GCC did not do it, we have to use whatever insn we have, or\n+     a nop.  */\n+  if (*save_last)\n+    fprintf (file, save_last);\n+  else\n+    fprintf (file, \"\\tnOp\\n\");\n }\n \n /* The PRINT_OPERAND worker.  */"}, {"sha": "50b81cf6273744b1fa3a4bb2570469180c4af327", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c8b4129734ba64712dfbbf66e6f8392a694148/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=b6c8b4129734ba64712dfbbf66e6f8392a694148", "patch": "@@ -1003,13 +1003,6 @@ struct cum_args {int regs;};\n /* See cris.c for TARGET_ASM_FUNCTION_PROLOGUE and\n    TARGET_ASM_FUNCTION_EPILOGUE.  */\n \n-/* If the epilogue uses the \"ret\" insn, we need to fill the\n-   delay slot.  */\n-#define DELAY_SLOTS_FOR_EPILOGUE cris_delay_slots_for_epilogue ()\n-\n-#define ELIGIBLE_FOR_EPILOGUE_DELAY(INSN, N) \\\n-  cris_eligible_for_epilogue_delay (INSN)\n-\n /* Node: Profiling */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\"}]}