{"sha": "71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmOWI5YmQwYWNjN2QwNzQ5ZTE1OWVmYjFiOWI0YzU3MTk3YTc3ZA==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-02-03T15:49:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:29Z"}, "message": "libstdc++: Immediate feedback with -v\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/driver.sh: Remove executable on\n\tSIGINT. Process compiler and test executable output: In verbose\n\tmode print messages immediately, limited to 1000 lines and\n\tbreaking long lines to below $COLUMNS (or 1024 if not set).\n\tCommunicating the exit status of the compiler / test with the\n\tnecessary pipe is done via a message through stdout/-in.", "tree": {"sha": "f3ee9728762dc162b55826016a1e44a204670259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ee9728762dc162b55826016a1e44a204670259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8bc61fe0222245dcdc1d8967554167099cf2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8bc61fe0222245dcdc1d8967554167099cf2a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8bc61fe0222245dcdc1d8967554167099cf2a5"}], "stats": {"total": 194, "additions": 116, "deletions": 78}, "files": [{"sha": "314c6a16f866df96b445a3c6515598adc3e0a4b2", "filename": "libstdc++-v3/testsuite/experimental/simd/driver.sh", "status": "modified", "additions": 116, "deletions": 78, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh?ref=71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "patch": "@@ -172,81 +172,14 @@ unsupported() {\n   echo \"UNSUPPORTED: $src $type $abiflag ($*)\" >> \"$log\"\n }\n \n-verify_compilation() {\n-  failed=$1\n-  if [ $failed -eq 0 ]; then\n-    warnings=$(grep -ic 'warning:' \"$log\")\n-    if [ $warnings -gt 0 ]; then\n-      fail \"excess warnings:\" $warnings\n-      if $verbose; then\n-        cat \"$log\"\n-      elif ! $quiet; then\n-        grep -i 'warning:' \"$log\" | head -n5\n-      fi\n-    elif [ \"$xfail\" = \"compile\" ]; then\n-      xpass \"test for excess errors\"\n-    else\n-      pass \"test for excess errors\"\n-    fi\n-  else\n-    if [ $failed -eq 124 ]; then\n-      fail \"timeout: test for excess errors\"\n-    else\n-      errors=$(grep -ic 'error:' \"$log\")\n-      if [ \"$xfail\" = \"compile\" ]; then\n-        xfail \"excess errors:\" $errors\n-        exit 0\n-      else\n-        fail \"excess errors:\" $errors\n-      fi\n-    fi\n-    if $verbose; then\n-      cat \"$log\"\n-    elif ! $quiet; then\n-      grep -i 'error:' \"$log\" | head -n5\n-    fi\n-    exit 0\n-  fi\n-}\n-\n-verify_test() {\n-  failed=$1\n-  if [ $failed -eq 0 ]; then\n-    rm \"$exe\"\n-    if [ \"$xfail\" = \"run\" ]; then\n-      xpass \"execution test\"\n-    else\n-      pass \"execution test\"\n-    fi\n-  else\n-    $keep_failed || rm \"$exe\"\n-    if [ $failed -eq 124 ]; then\n-      fail \"timeout: execution test\"\n-    elif [ \"$xfail\" = \"run\" ]; then\n-      xfail \"execution test\"\n-    else\n-      fail \"execution test\"\n-    fi\n-    if $verbose; then\n-      lines=$(wc -l < \"$log\")\n-      lines=$((lines-3))\n-      if [ $lines -gt 1000 ]; then\n-        echo \"[...]\"\n-        tail -n1000 \"$log\"\n-      else\n-        tail -n$lines \"$log\"\n-      fi\n-    elif ! $quiet; then\n-      grep -i fail \"$log\" | head -n5\n-    fi\n-    exit 0\n-  fi\n-}\n-\n write_log_and_verbose() {\n   echo \"$*\" >> \"$log\"\n   if $verbose; then\n-    echo \"$*\"\n+    if [ -z \"$COLUMNS\" ] || ! type fmt>/dev/null; then\n+      echo \"$*\"\n+    else\n+      echo \"$*\" | fmt -w $COLUMNS -s - || cat\n+    fi\n   fi\n }\n \n@@ -277,7 +210,7 @@ test_selector() {\n   return 1\n }\n \n-trap \"rm -f '$log' '$sum'; exit\" INT\n+trap \"rm -f '$log' '$sum' $exe; exit\" INT\n rm -f \"$log\" \"$sum\"\n touch \"$log\" \"$sum\"\n \n@@ -317,17 +250,122 @@ if [ -n \"$xfail\" ]; then\n   fi\n fi\n \n+log_output() {\n+  if $verbose; then\n+    maxcol=${1:-1024}\n+    awk \"\n+BEGIN { count = 0 }\n+/^###exitstatus### [0-9]+$/ { exit \\$2 }\n+{\n+  print >> \\\"$log\\\"\n+  if (count >= 1000) next\n+  ++count\n+  if (length(\\$0) > $maxcol) {\n+    i = 1\n+    while (i + $maxcol <= length(\\$0)) {\n+      len = $maxcol\n+      line = substr(\\$0, i, len)\n+      len = match(line, / [^ ]*$/)\n+      if (len <= 0) {\n+        len = match(substr(\\$0, i), / [^ ]/)\n+        if (len <= 0) len = $maxcol\n+      }\n+      print substr(\\$0, i, len)\n+      i += len\n+    }\n+    print substr(\\$0, i)\n+  } else {\n+    print\n+  }\n+}\n+END { close(\\\"$log\\\") }\n+\"\n+  else\n+    awk \"\n+/^###exitstatus### [0-9]+$/ { exit \\$2 }\n+{ print >> \\\"$log\\\" }\n+END { close(\\\"$log\\\") }\n+\"\n+  fi\n+}\n+\n+verify_compilation() {\n+  log_output $COLUMNS\n+  exitstatus=$?\n+  if [ $exitstatus -eq 0 ]; then\n+    warnings=$(grep -ic 'warning:' \"$log\")\n+    if [ $warnings -gt 0 ]; then\n+      fail \"excess warnings:\" $warnings\n+      if ! $verbose && ! $quiet; then\n+        grep -i 'warning:' \"$log\" | head -n5\n+      fi\n+    elif [ \"$xfail\" = \"compile\" ]; then\n+      xpass \"test for excess errors\"\n+    else\n+      pass \"test for excess errors\"\n+    fi\n+    return 0\n+  else\n+    if [ $exitstatus -eq 124 ]; then\n+      fail \"timeout: test for excess errors\"\n+    else\n+      errors=$(grep -ic 'error:' \"$log\")\n+      if [ \"$xfail\" = \"compile\" ]; then\n+        xfail \"excess errors:\" $errors\n+        exit 0\n+      else\n+        fail \"excess errors:\" $errors\n+      fi\n+    fi\n+    if ! $verbose && ! $quiet; then\n+      grep -i 'error:' \"$log\" | head -n5\n+    fi\n+    return 1\n+  fi\n+}\n+\n+verify_test() {\n+  log_output $COLUMNS\n+  exitstatus=$?\n+  if [ $exitstatus -eq 0 ]; then\n+    if [ \"$xfail\" = \"run\" ]; then\n+      $keep_failed || rm \"$exe\"\n+      xpass \"execution test\"\n+    else\n+      rm \"$exe\"\n+      pass \"execution test\"\n+    fi\n+    return 0\n+  else\n+    $keep_failed || rm \"$exe\"\n+    if ! $verbose && ! $quiet; then\n+      grep -i fail \"$log\" | head -n5\n+    fi\n+    if [ $exitstatus -eq 124 ]; then\n+      fail \"timeout: execution test\"\n+    elif [ \"$xfail\" = \"run\" ]; then\n+      xfail \"execution test\"\n+    else\n+      fail \"execution test\"\n+    fi\n+    return 1\n+  fi\n+}\n+\n write_log_and_verbose \"$CXX $src $@ -D_GLIBCXX_SIMD_TESTTYPE=$type $abiflag -o $exe\"\n-timeout --foreground $timeout \"$CXX\" \"$src\" \"$@\" \"-D_GLIBCXX_SIMD_TESTTYPE=$type\" $abiflag -o \"$exe\" >> \"$log\" 2>&1\n-verify_compilation $?\n+{\n+  timeout --foreground $timeout \"$CXX\" \"$src\" \"$@\" \"-D_GLIBCXX_SIMD_TESTTYPE=$type\" $abiflag -o \"$exe\" 2>&1 <&-\n+  printf \"###exitstatus### %d\\n\" $?\n+} | verify_compilation || exit 0\n if [ -n \"$sim\" ]; then\n   write_log_and_verbose \"$sim ./$exe\"\n-  timeout --foreground $timeout $sim \"./$exe\" >> \"$log\" 2>&1 <&-\n else\n   write_log_and_verbose \"./$exe\"\n   timeout=$(awk \"BEGIN { print int($timeout / 2) }\")\n-  timeout --foreground $timeout \"./$exe\" >> \"$log\" 2>&1 <&-\n fi\n-verify_test $?\n+{\n+  timeout --foreground $timeout $sim \"./$exe\" 2>&1 <&-\n+  printf \"###exitstatus### %d\\n\" $?\n+} | verify_test || exit 0\n \n # vim: sw=2 et cc=81 si"}]}