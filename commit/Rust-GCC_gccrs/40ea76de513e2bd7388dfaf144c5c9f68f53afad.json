{"sha": "40ea76de513e2bd7388dfaf144c5c9f68f53afad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlYTc2ZGU1MTNlMmJkNzM4OGRmYWYxNDRjNWM5ZjY4ZjUzYWZhZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-06T07:30:25Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-06T07:30:25Z"}, "message": "cpperror.c: Remove #ifdef EMACS block.\n\n\t* cpperror.c: Remove #ifdef EMACS block.\n\t* cppmain.c: Likewise.\n\t* cpphash.c: Remove #if 0 blocks.\n\t* cppinit.c: Remove #if 0 blocks, and the -lint option.\n\t* cpplib.c: Remove #if 0 blocks and code referencing\n\tpcp_inside_if or for_lint.  Remove duplicate error message.\n\tFix error messages for #else after #else or #elif.  Reformat.\n\tRemove archaic TODO list.\n\t* cpplib.h: Remove pcp_inside_if and for_lint flags.\n\nFrom-SVN: r31817", "tree": {"sha": "4302b34cfa658453c0f2005d1fc2b74f7da47536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4302b34cfa658453c0f2005d1fc2b74f7da47536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ea76de513e2bd7388dfaf144c5c9f68f53afad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ea76de513e2bd7388dfaf144c5c9f68f53afad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ea76de513e2bd7388dfaf144c5c9f68f53afad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ea76de513e2bd7388dfaf144c5c9f68f53afad/comments", "author": null, "committer": null, "parents": [{"sha": "fd81d24f991f53d3cdd71e482e6d83f351e1759d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd81d24f991f53d3cdd71e482e6d83f351e1759d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd81d24f991f53d3cdd71e482e6d83f351e1759d"}], "stats": {"total": 251, "additions": 68, "deletions": 183}, "files": [{"sha": "5d4967e592e87c62bc817e5de60c670cdd14b7fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1,3 +1,15 @@\n+2000-02-05  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpperror.c: Remove #ifdef EMACS block.\n+\t* cppmain.c: Likewise.\n+\t* cpphash.c: Remove #if 0 blocks.\n+\t* cppinit.c: Remove #if 0 blocks, and the -lint option.\n+\t* cpplib.c: Remove #if 0 blocks and code referencing\n+\tpcp_inside_if or for_lint.  Remove duplicate error message.\n+\tFix error messages for #else after #else or #elif.  Reformat.\n+\tRemove archaic TODO list.\n+\t* cpplib.h: Remove pcp_inside_if and for_lint flags.\n+\n 2000-02-05  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* i386/osf1elf.h: Add missing backslash to multiline string."}, {"sha": "9d504646d02f181fe5100179f9ba8d6fadfa16f5", "filename": "gcc/cpperror.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1,5 +1,6 @@\n /* Default error handlers for CPP Library.\n-   Copyright (C) 1986, 87, 89, 92-95, 98, 99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-95, 98, 99, 2000\n+   Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -22,13 +23,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n  You are forbidden to forbid anyone else to use, share and improve\n  what you give them.   Help stamp out software-hoarding!  */\n \n-#ifndef EMACS\n #include \"config.h\"\n #include \"system.h\"\n-#else\n-#include <stdio.h>\n-#endif /* not EMACS */\n-\n #include \"cpplib.h\"\n #include \"intl.h\"\n "}, {"sha": "c2244c9ba4d94d8e71e69f307b3bfbdd37a4684f", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1,5 +1,6 @@\n /* Part of CPP library.  (Macro handling.)\n-   Copyright (C) 1986, 87, 89, 92-96, 98, 99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-96, 98, 99, 2000\n+   Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -440,11 +441,6 @@ collect_expansion (pfile, buf, limit, nargs, arglist)\n \t\t  p += 1;\n \t\t  while (p < limit && !(p[-2] == '*' && p[-1] == '/'))\n \t\t    p++;\n-#if 0\n-\t\t  /* Mark this as a concatenation-point,\n-\t\t     as if it had been ##.  */\n-\t\t  concat = p;\n-#endif\n \t\t}\n \t      break;\n \t    }\n@@ -1003,19 +999,9 @@ macroexpand (pfile, hp)\n   int xbuf_len;\n   struct argdata *args = 0;\n   long old_written = CPP_WRITTEN (pfile);\n-#if 0\n-  int start_line = instack[indepth].lineno;\n-#endif\n   int rest_args, rest_zero = 0;\n   register int i;\n \n-#if 0\n-  /* This macro is being used inside a #if, which means it must be */\n-  /* recorded as a precondition.  */\n-  if (pcp_inside_if && pcp_outfile && defn->predefined)\n-    dump_single_macro (hp, pcp_outfile);\n-#endif\n-\n   cpp_buf_line_and_col (cpp_file_buffer (pfile), &start_line, &start_column);\n \n   /* Check for and handle special symbols. */"}, {"sha": "1e511ded50ea4cde7fb8fc43a1ac9c9cdb5dbc0f", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library.\n-   Copyright (C) 1986, 87, 89, 92-98, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-99, 2000 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -200,7 +200,8 @@ static void append_include_chain\tPARAMS ((cpp_reader *,\n static char *base_name\t\t\tPARAMS ((const char *));\n static void dump_special_to_buffer\tPARAMS ((cpp_reader *, const char *));\n static void initialize_dependency_output PARAMS ((cpp_reader *));\n-static void new_pending_define PARAMS ((struct cpp_options *, const char *));\n+static void new_pending_define\t\tPARAMS ((struct cpp_options *,\n+\t\t\t\t\t\t const char *));\n \n /* Last argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n@@ -418,9 +419,6 @@ cpp_reader_init (pfile)\n      cpp_reader *pfile;\n {\n   bzero ((char *) pfile, sizeof (cpp_reader));\n-#if 0\n-  pfile->get_token = cpp_get_token;\n-#endif\n \n   pfile->token_buffer_size = 200;\n   pfile->token_buffer = (U_CHAR *) xmalloc (pfile->token_buffer_size);\n@@ -1283,17 +1281,6 @@ cpp_handle_option (pfile, argc, argv)\n \t    CPP_PEDANTIC (pfile) = 1;\n \t    opts->pedantic_errors = 1;\n \t  }\n-#if 0\n-\telse if (!strcmp (argv[i], \"-pcp\")) {\n-\t  char *pcp_fname = argv[++i];\n-\t  pcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n-\t\t\t ? fopen (pcp_fname, \"w\")\n-\t\t\t : fdopen (dup (fileno (stdout)), \"w\"));\n-\t  if (pcp_outfile == 0)\n-\t    cpp_pfatal_with_name (pfile, pcp_fname);\n-\t  no_precomp = 1;\n-\t}\n-#endif\n \tbreak;\n       \n       case 't':\n@@ -1332,8 +1319,6 @@ cpp_handle_option (pfile, argc, argv)\n \t  opts->lang_asm = 1;\n \tif (! strcmp (argv[i], \"-lang-fortran\"))\n \t  opts->lang_fortran = 1, opts->cplusplus_comments = 0;\n-\tif (! strcmp (argv[i], \"-lint\"))\n-\t  opts->for_lint = 1;\n \tif (! strcmp (argv[i], \"-lang-chill\"))\n \t  opts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n \t    opts->traditional = 1;\n@@ -1633,10 +1618,6 @@ cpp_handle_option (pfile, argc, argv)\n \telse if (!strcmp (argv[i], \"-nostdinc++\"))\n \t  /* -nostdinc++ causes no default C++-specific include directories. */\n \t  opts->no_standard_cplusplus_includes = 1;\n-#if 0\n-\telse if (!strcmp (argv[i], \"-noprecomp\"))\n-\t  no_precomp = 1;\n-#endif\n \tbreak;\n       \n       case 'r':"}, {"sha": "6c9d14b6f8a8f1409b831c0ee78feb51bbbda6e3", "filename": "gcc/cpplib.c", "status": "modified", "additions": 48, "deletions": 122, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1796,35 +1796,35 @@ do_elif (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack) {\n-    cpp_error (pfile, \"`#elif' not within a conditional\");\n-    return 0;\n-  } else {\n-    if (pfile->if_stack->type != T_IF && pfile->if_stack->type != T_ELIF) {\n-      cpp_error (pfile, \"`#elif' after `#else'\");\n-#if 0\n-      fprintf (stderr, \" (matches line %d\", pfile->if_stack->lineno);\n-#endif\n-      if (pfile->if_stack->fname != NULL && CPP_BUFFER (pfile)->fname != NULL\n-\t  && strcmp (pfile->if_stack->fname,\n-\t\t     CPP_BUFFER (pfile)->nominal_fname) != 0)\n-\tfprintf (stderr, \", file %s\", pfile->if_stack->fname);\n-      fprintf (stderr, \")\\n\");\n+  if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack)\n+    {\n+      cpp_error (pfile, \"`#elif' not within a conditional\");\n+      return 0;\n+    }\n+  else\n+    {\n+      if (pfile->if_stack->type != T_IF && pfile->if_stack->type != T_ELIF)\n+\t{\n+\t  cpp_error (pfile, \"`#elif' after `#else'\");\n+\t  cpp_error_with_line (pfile, pfile->if_stack->lineno, -1,\n+\t\t\t       \"the conditional began here\");\n+\t}\n+      pfile->if_stack->type = T_ELIF;\n     }\n-    pfile->if_stack->type = T_ELIF;\n-  }\n \n   if (pfile->if_stack->if_succeeded)\n     skip_if_group (pfile);\n-  else {\n-    HOST_WIDEST_INT value = eval_if_expression (pfile);\n-    if (value == 0)\n-      skip_if_group (pfile);\n-    else {\n-      ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n-      output_line_command (pfile, same_file);\n+  else\n+    {\n+      HOST_WIDEST_INT value = eval_if_expression (pfile);\n+      if (value == 0)\n+\tskip_if_group (pfile);\n+      else\n+\t{\n+\t  ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n+\t  output_line_command (pfile, same_file);\n+\t}\n     }\n-  }\n   return 0;\n }\n \n@@ -1840,9 +1840,7 @@ eval_if_expression (pfile)\n   HOST_WIDEST_INT value;\n   long old_written = CPP_WRITTEN (pfile);\n \n-  pfile->pcp_inside_if = 1;\n   value = cpp_parse_expr (pfile);\n-  pfile->pcp_inside_if = 0;\n \n   CPP_SET_WRITTEN (pfile, old_written); /* Pop */\n \n@@ -1918,20 +1916,6 @@ do_xifdef (pfile, keyword)\n     }\n   skip_rest_of_line (pfile);\n \n-#if 0\n-    if (pcp_outfile) {\n-      /* Output a precondition for this macro.  */\n-      if (hp && hp->value.defn->predefined)\n-\tfprintf (pcp_outfile, \"#define %s\\n\", hp->name);\n-      else {\n-\tU_CHAR *cp = buf;\n-\tfprintf (pcp_outfile, \"#undef \");\n-\twhile (is_idchar(*cp)) /* Ick! */\n-\t  fputc (*cp++, pcp_outfile);\n-\tputc ('\\n', pcp_outfile);\n-      }\n-#endif\n-\n   conditional_skip (pfile, skip, T_IF, control_macro);\n   return 0;\n }\n@@ -2010,9 +1994,6 @@ consider_directive_while_skipping (pfile, stack)\n \t      validate_else (pfile, \"#else\");\n \t    /* fall through */\n \tcase T_ELIF:\n-\t    if (pfile->if_stack->type == T_ELSE)\n-\t      cpp_error (pfile, \"`%s' after `#else'\", kt->name);\n-\t    \n \t    if (pfile->if_stack == stack)\n \t      return 1;\n \t    else\n@@ -2136,35 +2117,36 @@ do_else (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  cpp_buffer *ip = CPP_BUFFER (pfile);\n-\n   validate_else (pfile, \"#else\");\n   skip_rest_of_line (pfile);\n \n-  if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack) {\n-    cpp_error (pfile, \"`#else' not within a conditional\");\n-    return 0;\n-  } else {\n-    /* #ifndef can't have its special treatment for containing the whole file\n-       if it has a #else clause.  */\n-    pfile->if_stack->control_macro = 0;\n-\n-    if (pfile->if_stack->type != T_IF && pfile->if_stack->type != T_ELIF) {\n-      cpp_error (pfile, \"`#else' after `#else'\");\n-      fprintf (stderr, \" (matches line %d\", pfile->if_stack->lineno);\n-      if (strcmp (pfile->if_stack->fname, ip->nominal_fname) != 0)\n-\tfprintf (stderr, \", file %s\", pfile->if_stack->fname);\n-      fprintf (stderr, \")\\n\");\n-    }\n-    pfile->if_stack->type = T_ELSE;\n-  }\n+  if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack)\n+    {\n+      cpp_error (pfile, \"`#else' not within a conditional\");\n+      return 0;\n+    }\n+  else\n+    {\n+      /* #ifndef can't have its special treatment for containing the whole file\n+\t if it has a #else clause.  */\n+      pfile->if_stack->control_macro = 0;\n+\n+      if (pfile->if_stack->type != T_IF && pfile->if_stack->type != T_ELIF)\n+\t{\n+\t  cpp_error (pfile, \"`#else' after `#else'\");\n+\t  cpp_error_with_line (pfile, pfile->if_stack->lineno, -1,\n+\t\t\t       \"the conditional began here\");\n+\t}\n+      pfile->if_stack->type = T_ELSE;\n+    }\n \n   if (pfile->if_stack->if_succeeded)\n     skip_if_group (pfile);\n-  else {\n-    ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n-    output_line_command (pfile, same_file);\n-  }\n+  else\n+    {\n+      ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n+      output_line_command (pfile, same_file);\n+    }\n   return 0;\n }\n \n@@ -2347,51 +2329,7 @@ cpp_get_token (pfile)\n \t      CPP_PUTC (pfile, c);\n \t      return CPP_HSPACE;\n \t    }\n-#if 0\n-\t  if (opts->for_lint) {\n-\t    U_CHAR *argbp;\n-\t    int cmdlen, arglen;\n-\t    char *lintcmd = get_lintcmd (ibp, limit, &argbp, &arglen, &cmdlen);\n-\t    \n-\t    if (lintcmd != NULL) {\n-\t      /* I believe it is always safe to emit this newline: */\n-\t      obp[-1] = '\\n';\n-\t      bcopy (\"#pragma lint \", (char *) obp, 13);\n-\t      obp += 13;\n-\t      bcopy (lintcmd, (char *) obp, cmdlen);\n-\t      obp += cmdlen;\n-\n-\t      if (arglen != 0) {\n-\t\t*(obp++) = ' ';\n-\t\tbcopy (argbp, (char *) obp, arglen);\n-\t\tobp += arglen;\n-\t      }\n-\n-\t      /* OK, now bring us back to the state we were in before we entered\n-\t\t this branch.  We need #line because the newline for the pragma\n-\t\t could mess things up.  */\n-\t      output_line_command (pfile, same_file);\n-\t      *(obp++) = ' ';\t/* just in case, if comments are copied thru */\n-\t      *(obp++) = '/';\n-\t    }\n-\t  }\n-#endif\n-\n \tcase '#':\n-#if 0\n-\t  /* If this is expanding a macro definition, don't recognize\n-\t     preprocessor directives.  */\n-\t  if (ip->macro != 0)\n-\t    goto randomchar;\n-\t  /* If this is expand_into_temp_buffer, recognize them\n-\t     only after an actual newline at this level,\n-\t     not at the beginning of the input level.  */\n-\t  if (ip->fname == 0 && beg_of_line == ip->buf)\n-\t    goto randomchar;\n-\t  if (ident_length)\n-\t    goto specialchar;\n-#endif\n-\n \t  if (!pfile->only_seen_white)\n \t    goto randomchar;\n \t  /* -traditional directives are recognized only with the # in\n@@ -3555,15 +3493,3 @@ cpp_perror_with_name (pfile, name)\n {\n   cpp_message (pfile, 1, \"%s: %s: %s\", progname, name, my_strerror (errno));\n }\n-\n-/* TODO:\n- * No pre-compiled header file support.\n- *\n- * Possibly different enum token codes for each C/C++ token.\n- *\n- * Find and cleanup remaining uses of static variables,\n- *\n- * Support -dM flag (dump_all_macros).\n- *\n- * Support for_lint flag.\n- */"}, {"sha": "1207f84511be564e1c89feed5616412f9949e37b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -200,11 +200,6 @@ struct cpp_reader\n \n   struct if_stack *if_stack;\n \n-  /* Nonzero means we are inside an IF during a -pcp run.  In this mode\n-     macro expansion is done, and preconditions are output for all macro\n-     uses requiring them. */\n-  char pcp_inside_if;\n-\n   /* Nonzero means we have printed (while error reporting) a list of\n      containing files that matches the current status. */\n   char input_stack_listing_current;\n@@ -369,10 +364,6 @@ struct cpp_options {\n \n   char lang_fortran;\n \n-  /* Nonzero means turn NOTREACHED into #pragma NOTREACHED etc */\n-\n-  char for_lint;\n-\n   /* Nonzero means handle CHILL comment syntax\n      and output CHILL string delimiter for __DATE___ etc. */\n "}, {"sha": "b7bfee560be557678ae4bf9007bc0bada1f5a5f3", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ea76de513e2bd7388dfaf144c5c9f68f53afad/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=40ea76de513e2bd7388dfaf144c5c9f68f53afad", "patch": "@@ -1,5 +1,5 @@\n /* CPP main program, using CPP Library.\n-   Copyright (C) 1995, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1997-1999, 2000 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -20,15 +20,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n  You are forbidden to forbid anyone else to use, share and improve\n  what you give them.   Help stamp out software-hoarding!  */\n \n-#ifndef EMACS\n #include \"config.h\"\n #include \"system.h\"\n-#else\n-#include <stdio.h>\n-\n-extern char *getenv ();\n-#endif /* not EMACS */\n-\n #include \"cpplib.h\"\n #include \"intl.h\"\n "}]}