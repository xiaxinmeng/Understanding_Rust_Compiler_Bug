{"sha": "9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "node_id": "C_kwDOANBUbNoAKDljMWNlMTdiYzRhZWQzN2JjNDJiYmU0NzIxMGM1NjJlYTRmYTY4NjQ", "commit": {"author": {"name": "Murray Steele", "email": "murray.steele@arm.com", "date": "2021-12-22T14:55:07Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-12-22T14:57:46Z"}, "message": "arm: Declare MVE types internally via pragma\n\nMove the implementation of MVE ACLE types from arm_mve_types.h to\ninside GCC via a new pragma, which replaces the prior type\ndefinitions.  This allows for the types to be used internally for\nintrinsic function definitions.\n\ngcc/ChangeLog:\n\n\t* config.gcc (arm*-*-*): Add arm-mve-builtins.o to extra_objs.\n\t* config/arm/arm-c.c (arm_pragma_arm): Handle \"#pragma GCC arm\".\n\t(arm_register_target_pragmas): Register it.\n\t* config/arm/arm-protos.h: (arm_mve::arm_handle_mve_types_h): New\n\tprototype.\n\t* config/arm/arm_mve_types.h: Replace MVE type definitions with\n\tnew pragma.\n\t* config/arm/t-arm: (arm-mve-builtins.o): New target rule.\n\t* config/arm/arm-mve-builtins.cc: New file.\n\t* config/arm/arm-mve-builtins.def: New file.\n\t* config/arm/arm-mve-builtins.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/mve.exp: Add new subdirectories.\n\t* gcc.target/arm/mve/general-c/type_redef_1.c: New test.\n\t* gcc.target/arm/mve/general/double_pragmas_1.c: New test.\n\t* gcc.target/arm/mve/general/nomve_1.c: New test.", "tree": {"sha": "a6bedb2ec34545616c774bc86b24cb860e176703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6bedb2ec34545616c774bc86b24cb860e176703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/comments", "author": {"login": "arm-murray", "id": 137165131, "node_id": "U_kgDOCCz5Sw", "avatar_url": "https://avatars.githubusercontent.com/u/137165131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arm-murray", "html_url": "https://github.com/arm-murray", "followers_url": "https://api.github.com/users/arm-murray/followers", "following_url": "https://api.github.com/users/arm-murray/following{/other_user}", "gists_url": "https://api.github.com/users/arm-murray/gists{/gist_id}", "starred_url": "https://api.github.com/users/arm-murray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arm-murray/subscriptions", "organizations_url": "https://api.github.com/users/arm-murray/orgs", "repos_url": "https://api.github.com/users/arm-murray/repos", "events_url": "https://api.github.com/users/arm-murray/events{/privacy}", "received_events_url": "https://api.github.com/users/arm-murray/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c61cefe2b5091e5361a85768f847732463275d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c61cefe2b5091e5361a85768f847732463275d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c61cefe2b5091e5361a85768f847732463275d5"}], "stats": {"total": 430, "additions": 399, "deletions": 31}, "files": [{"sha": "bf1c7454e050c9516b31aee2270726f8265476a6", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -353,14 +353,14 @@ arc*-*-*)\n \t;;\n arm*-*-*)\n \tcpu_type=arm\n-\textra_objs=\"arm-builtins.o aarch-common.o\"\n+\textra_objs=\"arm-builtins.o arm-mve-builtins.o aarch-common.o\"\n \textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve_types.h arm_mve.h arm_cde.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n \td_target_objs=\"arm-d.o\"\n \textra_options=\"${extra_options} arm/arm-tables.opt\"\n-\ttarget_gtfiles=\"\\$(srcdir)/config/arm/arm-builtins.c\"\n+\ttarget_gtfiles=\"\\$(srcdir)/config/arm/arm-builtins.c \\$(srcdir)/config/arm/arm-mve-builtins.h \\$(srcdir)/config/arm/arm-mve-builtins.cc\"\n \t;;\n avr-*-*)\n \tcpu_type=avr"}, {"sha": "d1414f6e0e1c2bd0a7364b837c16adf493221376", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -28,6 +28,7 @@\n #include \"c-family/c-pragma.h\"\n #include \"stringpool.h\"\n #include \"arm-builtins.h\"\n+#include \"arm-protos.h\"\n \n tree\n arm_resolve_cde_builtin (location_t loc, tree fndecl, void *arglist)\n@@ -129,6 +130,24 @@ arm_resolve_cde_builtin (location_t loc, tree fndecl, void *arglist)\n   return call_expr;\n }\n \n+/* Implement \"#pragma GCC arm\".  */\n+static void\n+arm_pragma_arm (cpp_reader *)\n+{\n+  tree x;\n+  if (pragma_lex (&x) != CPP_STRING)\n+    {\n+      error (\"%<#pragma GCC arm%> requires a string parameter\");\n+      return;\n+    }\n+\n+  const char *name = TREE_STRING_POINTER (x);\n+  if (strcmp (name, \"arm_mve_types.h\") == 0)\n+    arm_mve::handle_arm_mve_types_h ();\n+  else\n+    error (\"unknown %<#pragma GCC arm%> option %qs\", name);\n+}\n+\n /* Implement TARGET_RESOLVE_OVERLOADED_BUILTIN.  This is currently only\n    used for the MVE related builtins for the CDE extension.\n    Here we ensure the type of arguments is such that the size is correct, and\n@@ -476,6 +495,8 @@ arm_register_target_pragmas (void)\n   targetm.target_option.pragma_parse = arm_pragma_target_parse;\n   targetm.resolve_overloaded_builtin = arm_resolve_overloaded_builtin;\n \n+  c_register_pragma (\"GCC\", \"arm\", arm_pragma_arm);\n+\n #ifdef REGISTER_SUBTARGET_PRAGMAS\n   REGISTER_SUBTARGET_PRAGMAS ();\n #endif"}, {"sha": "71838a83caa417195971114239accc1633c238fb", "filename": "gcc/config/arm/arm-mve-builtins.cc", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-mve-builtins.cc?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,196 @@\n+/* ACLE support for Arm MVE\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"fold-const.h\"\n+#include \"langhooks.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n+#include \"diagnostic.h\"\n+#include \"arm-protos.h\"\n+#include \"arm-builtins.h\"\n+#include \"arm-mve-builtins.h\"\n+\n+namespace arm_mve {\n+\n+/* Static information about each single-predicate or single-vector\n+   ACLE type.  */\n+struct vector_type_info\n+{\n+  /* The name of the type as declared by arm_mve.h.  */\n+  const char *acle_name;\n+\n+  /* Whether the type requires a floating point abi.  */\n+  const bool requires_float;\n+};\n+\n+/* Flag indicating whether the arm MVE types have been handled.  */\n+static bool handle_arm_mve_types_p;\n+\n+/* Information about each single-predicate or single-vector type.  */\n+static CONSTEXPR const vector_type_info vector_types[] = {\n+#define DEF_MVE_TYPE(ACLE_NAME, SCALAR_TYPE) \\\n+  { #ACLE_NAME, REQUIRES_FLOAT },\n+#include \"arm-mve-builtins.def\"\n+#undef DEF_MVE_TYPE\n+};\n+\n+/* The scalar type associated with each vector type.  */\n+GTY(()) tree scalar_types[NUM_VECTOR_TYPES];\n+\n+/* The single-predicate and single-vector types, with their built-in\n+   \"__simd128_..._t\" name.  Allow an index of NUM_VECTOR_TYPES, which always\n+   yields a null tree.  */\n+static GTY(()) tree abi_vector_types[NUM_VECTOR_TYPES + 1];\n+\n+/* Same, but with the arm_mve.h names.  */\n+GTY(()) tree acle_vector_types[3][NUM_VECTOR_TYPES + 1];\n+\n+/* Return the MVE abi type with element of type TYPE.  */\n+static tree\n+arm_mve_type_for_scalar_type (tree eltype)\n+{\n+  for (unsigned int i = 0; i < __TYPE_FINAL; ++i)\n+      if (arm_simd_types[i].eltype == eltype\n+\t  && GET_MODE_SIZE (arm_simd_types[i].mode) == 16)\n+\treturn arm_simd_types[i].itype;\n+\n+  gcc_unreachable ();\n+}\n+\n+/* Register the built-in MVE ABI vector types, such as uint32x4_t.  */\n+static void\n+register_builtin_types ()\n+{\n+#define DEF_MVE_TYPE(ACLE_NAME, SCALAR_TYPE) \\\n+  scalar_types[VECTOR_TYPE_ ## ACLE_NAME] = SCALAR_TYPE;\n+#include \"arm-mve-builtins.def\"\n+#undef DEF_MVE_TYPE\n+  for (unsigned int i = 0; i < NUM_VECTOR_TYPES; ++i)\n+    {\n+      if (vector_types[i].requires_float && !TARGET_HAVE_MVE_FLOAT)\n+\tcontinue;\n+      tree eltype = scalar_types[i];\n+      tree vectype;\n+      if (eltype == boolean_type_node)\n+\t{\n+\t  vectype = get_typenode_from_name (UINT16_TYPE);\n+\t  gcc_assert (GET_MODE_SIZE (TYPE_MODE (vectype)) == 2);\n+\t}\n+      else\n+\t{\n+\t  vectype = arm_mve_type_for_scalar_type (eltype);\n+\t  gcc_assert (VECTOR_MODE_P (TYPE_MODE (vectype))\n+\t\t      && GET_MODE_SIZE (TYPE_MODE (vectype)) == 16);\n+\t}\n+      abi_vector_types[i] = vectype;\n+    }\n+}\n+\n+/* Register vector type TYPE under its arm_mve.h name.  */\n+static void\n+register_vector_type (vector_type_index type)\n+{\n+  if (vector_types[type].requires_float && !TARGET_HAVE_MVE_FLOAT)\n+    return;\n+  tree vectype = abi_vector_types[type];\n+  tree id = get_identifier (vector_types[type].acle_name);\n+  tree decl = build_decl (input_location, TYPE_DECL, id, vectype);\n+  decl = lang_hooks.decls.pushdecl (decl);\n+\n+  /* Record the new ACLE type if pushdecl succeeded without error.  Use\n+     the ABI type otherwise, so that the type we record at least has the\n+     right form, even if it doesn't have the right name.  This should give\n+     better error recovery behavior than installing error_mark_node or\n+     installing an incorrect type.  */\n+  if (decl\n+      && TREE_CODE (decl) == TYPE_DECL\n+      && TREE_TYPE (decl) != error_mark_node\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (decl)) == vectype)\n+    vectype = TREE_TYPE (decl);\n+  acle_vector_types[0][type] = vectype;\n+}\n+\n+/* Register tuple type TYPE with NUM_VECTORS arity under its\n+   arm_mve_types.h name.  */\n+static void\n+register_builtin_tuple_types (vector_type_index type)\n+{\n+  const vector_type_info* info = &vector_types[type];\n+  if (scalar_types[type] == boolean_type_node\n+      || (info->requires_float && !TARGET_HAVE_MVE_FLOAT))\n+    return;\n+  const char *vector_type_name = info->acle_name;\n+  char buffer[sizeof (\"float32x4x2_t\")];\n+  for (unsigned int num_vectors = 2; num_vectors <= 4; num_vectors += 2)\n+    {\n+      snprintf (buffer, sizeof (buffer), \"%.*sx%d_t\",\n+\t\t(int) strlen (vector_type_name) - 2, vector_type_name,\n+\t\tnum_vectors);\n+\n+      tree vectype = acle_vector_types[0][type];\n+      tree arrtype = build_array_type_nelts (vectype, num_vectors);\n+      gcc_assert (TYPE_MODE_RAW (arrtype) == TYPE_MODE (arrtype));\n+      tree field = build_decl (input_location, FIELD_DECL,\n+\t\t\t       get_identifier (\"val\"), arrtype);\n+\n+      tree t = lang_hooks.types.simulate_record_decl (input_location, buffer,\n+\t\t\t\t\t\t      make_array_slice (&field,\n+\t\t\t\t\t\t\t\t\t1));\n+      gcc_assert (TYPE_MODE_RAW (t) == TYPE_MODE (t));\n+      acle_vector_types[num_vectors >> 1][type] = TREE_TYPE (t);\n+    }\n+}\n+\n+/* Implement #pragma GCC arm \"arm_mve_types.h\".  */\n+void\n+handle_arm_mve_types_h ()\n+{\n+  if (handle_arm_mve_types_p)\n+    {\n+      error (\"duplicate definition of %qs\", \"arm_mve_types.h\");\n+      return;\n+    }\n+  handle_arm_mve_types_p = true;\n+  if (!TARGET_HAVE_MVE)\n+    {\n+      error (\"this definition requires the MVE ISA extension\");\n+      return;\n+    }\n+  register_builtin_types ();\n+  for (unsigned int type_i = 0; type_i < NUM_VECTOR_TYPES; ++type_i)\n+    {\n+      vector_type_index type = vector_type_index (type_i);\n+      register_vector_type (type);\n+      if (type_i != VECTOR_TYPE_mve_pred16_t)\n+\tregister_builtin_tuple_types (type);\n+    }\n+}\n+\n+} /* end namespace arm_mve */\n+\n+using namespace arm_mve;\n+\n+#include \"gt-arm-mve-builtins.h\""}, {"sha": "31bfa60d678c914a732a23704dfd3728f0873ef8", "filename": "gcc/config/arm/arm-mve-builtins.def", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-mve-builtins.def?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,39 @@\n+/* Builtin lists for Arm MVE\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef DEF_MVE_TYPE\n+#error \"arm-mve-builtins.def included without defining DEF_MVE_TYPE\"\n+#endif\n+\n+#define REQUIRES_FLOAT false\n+DEF_MVE_TYPE (mve_pred16_t, boolean_type_node)\n+DEF_MVE_TYPE (uint8x16_t, unsigned_intQI_type_node)\n+DEF_MVE_TYPE (uint16x8_t, unsigned_intHI_type_node)\n+DEF_MVE_TYPE (uint32x4_t, unsigned_intSI_type_node)\n+DEF_MVE_TYPE (uint64x2_t, unsigned_intDI_type_node)\n+DEF_MVE_TYPE (int8x16_t, intQI_type_node)\n+DEF_MVE_TYPE (int16x8_t, intHI_type_node)\n+DEF_MVE_TYPE (int32x4_t, intSI_type_node)\n+DEF_MVE_TYPE (int64x2_t, intDI_type_node)\n+#undef REQUIRES_FLOAT\n+\n+#define REQUIRES_FLOAT true\n+DEF_MVE_TYPE (float16x8_t, arm_fp16_type_node)\n+DEF_MVE_TYPE (float32x4_t, float_type_node)\n+#undef REQUIRES_FLOAT"}, {"sha": "aa5c2cc483552886db63ceafd9b508ad197e6efa", "filename": "gcc/config/arm/arm-mve-builtins.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-mve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-mve-builtins.h?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,41 @@\n+/* ACLE support for Arm MVE\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ARM_MVE_BUILTINS_H\n+#define GCC_ARM_MVE_BUILTINS_H\n+\n+namespace arm_mve {\n+\n+/* Enumerates the MVE predicate and (data) vector types, together called\n+   \"vector types\" for brevity.  */\n+enum vector_type_index\n+{\n+#define DEF_MVE_TYPE(ACLE_NAME, SCALAR_TYPE) \\\n+  VECTOR_TYPE_ ## ACLE_NAME,\n+#include \"arm-mve-builtins.def\"\n+  NUM_VECTOR_TYPES\n+#undef DEF_MVE_TYPE\n+};\n+\n+extern tree scalar_types[NUM_VECTOR_TYPES];\n+extern tree acle_vector_types[3][NUM_VECTOR_TYPES + 1];\n+\n+} /* end namespace arm_mve */\n+\n+#endif /* GCC_ARM_MVE_BUILTINS_H */"}, {"sha": "c91cb5ad69b9d911c31e6018a2ca6bf2ac6239d3", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -204,6 +204,11 @@ extern int arm_apply_result_size (void);\n \n #endif /* RTX_CODE */\n \n+/* MVE functions.  */\n+namespace arm_mve {\n+  void handle_arm_mve_types_h ();\n+}\n+\n /* Thumb functions.  */\n extern void arm_init_expanders (void);\n extern const char *thumb1_unexpanded_epilogue (void);"}, {"sha": "7fbc89b5982ea73de973dfc25774a8f67ca8bf48", "filename": "gcc/config/arm/arm_mve_types.h", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Farm_mve_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_types.h?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -25,37 +25,9 @@\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n typedef __fp16 float16_t;\n typedef float float32_t;\n-typedef __simd128_float16_t float16x8_t;\n-typedef __simd128_float32_t float32x4_t;\n-\n-typedef struct { float16x8_t val[2]; } float16x8x2_t;\n-typedef struct { float16x8_t val[4]; } float16x8x4_t;\n-typedef struct { float32x4_t val[2]; } float32x4x2_t;\n-typedef struct { float32x4_t val[4]; } float32x4x4_t;\n #endif\n \n-typedef uint16_t mve_pred16_t;\n-typedef __simd128_uint8_t uint8x16_t;\n-typedef __simd128_uint16_t uint16x8_t;\n-typedef __simd128_uint32_t uint32x4_t;\n-typedef __simd128_uint64_t uint64x2_t;\n-typedef __simd128_int8_t int8x16_t;\n-typedef __simd128_int16_t int16x8_t;\n-typedef __simd128_int32_t int32x4_t;\n-typedef __simd128_int64_t int64x2_t;\n-\n-typedef struct { int16x8_t val[2]; } int16x8x2_t;\n-typedef struct { int16x8_t val[4]; } int16x8x4_t;\n-typedef struct { int32x4_t val[2]; } int32x4x2_t;\n-typedef struct { int32x4_t val[4]; } int32x4x4_t;\n-typedef struct { int8x16_t val[2]; } int8x16x2_t;\n-typedef struct { int8x16_t val[4]; } int8x16x4_t;\n-typedef struct { uint16x8_t val[2]; } uint16x8x2_t;\n-typedef struct { uint16x8_t val[4]; } uint16x8x4_t;\n-typedef struct { uint32x4_t val[2]; } uint32x4x2_t;\n-typedef struct { uint32x4_t val[4]; } uint32x4x4_t;\n-typedef struct { uint8x16_t val[2]; } uint8x16x2_t;\n-typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n+#pragma GCC arm \"arm_mve_types.h\"\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}, {"sha": "f655f369724ca711f0a389abaf0e70adb3ab4b7c", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -153,6 +153,16 @@ arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/arm-builtins.c\n \n+arm-mve-builtins.o: $(srcdir)/config/arm/arm-mve-builtins.cc $(CONFIG_H) \\\n+  $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n+  fold-const.h langhooks.h stringpool.h attribs.h diagnostic.h \\\n+  $(srcdir)/config/arm/arm-protos.h \\\n+  $(srcdir)/config/arm/arm-builtins.h \\\n+  $(srcdir)/config/arm/arm-mve-builtins.h \\\n+  $(srcdir)/config/arm/arm-mve-builtins.def\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/arm/arm-mve-builtins.cc\n+\n arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "cd230f14b2bb136c4b4ab7b335394bc31eb04f71", "filename": "gcc/testsuite/gcc.target/arm/mve/general-c/type_redef_1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral-c%2Ftype_redef_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral-c%2Ftype_redef_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral-c%2Ftype_redef_1.c?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+\n+int mve_pred16_t; /* { dg-message \"note: previous declaration of 'mve_pred16_t'\" } */\n+int int8x16_t; /* { dg-message \"note: previous declaration of 'int8x16_t'\" } */\n+int int16x8_t; /* { dg-message \"note: previous declaration of 'int16x8_t'\" } */\n+int int32x4_t; /* { dg-message \"note: previous declaration of 'int32x4_t'\" } */\n+int int64x2_t; /* { dg-message \"note: previous declaration of 'int64x2_t'\" } */\n+int uint8x16_t; /* { dg-message \"note: previous declaration of 'uint8x16_t'\" } */\n+int uint16x8_t; /* { dg-message \"note: previous declaration of 'uint16x8_t'\" } */\n+int uint32x4_t; /* { dg-message \"note: previous declaration of 'uint32x4_t'\" } */\n+int uint64x2_t; /* { dg-message \"note: previous declaration of 'uint64x2_t'\" } */\n+int float16x8_t; /* { dg-message \"note: previous declaration of 'float16x8_t'\" } */\n+int float32x4_t; /* { dg-message \"note: previous declaration of 'float32x4_t'\" } */\n+int int8x16x2_t; /* { dg-message \"note: previous declaration of 'int8x16x2_t'\" } */\n+int int8x16x4_t; /* { dg-message \"note: previous declaration of 'int8x16x4_t'\" } */\n+int int16x8x2_t; /* { dg-message \"note: previous declaration of 'int16x8x2_t'\" } */\n+int int16x8x4_t; /* { dg-message \"note: previous declaration of 'int16x8x4_t'\" } */\n+int int32x4x2_t; /* { dg-message \"note: previous declaration of 'int32x4x2_t'\" } */\n+int int32x4x4_t; /* { dg-message \"note: previous declaration of 'int32x4x4_t'\" } */\n+int int64x2x2_t; /* { dg-message \"note: previous declaration of 'int64x2x2_t'\" } */\n+int int64x2x4_t; /* { dg-message \"note: previous declaration of 'int64x2x4_t'\" } */\n+int uint8x16x2_t; /* { dg-message \"note: previous declaration of 'uint8x16x2_t'\" } */\n+int uint8x16x4_t; /* { dg-message \"note: previous declaration of 'uint8x16x4_t'\" } */\n+int uint16x8x2_t; /* { dg-message \"note: previous declaration of 'uint16x8x2_t'\" } */\n+int uint16x8x4_t; /* { dg-message \"note: previous declaration of 'uint16x8x4_t'\" } */\n+int uint32x4x2_t; /* { dg-message \"note: previous declaration of 'uint32x4x2_t'\" } */\n+int uint32x4x4_t; /* { dg-message \"note: previous declaration of 'uint32x4x4_t'\" } */\n+int uint64x2x2_t; /* { dg-message \"note: previous declaration of 'uint64x2x2_t'\" } */\n+int uint64x2x4_t; /* { dg-message \"note: previous declaration of 'uint64x2x4_t'\" } */\n+int float16x8x2_t; /* { dg-message \"note: previous declaration of 'float16x8x2_t'\" } */\n+int float16x8x4_t; /* { dg-message \"note: previous declaration of 'float16x8x4_t'\" } */\n+int float32x4x2_t; /* { dg-message \"note: previous declaration of 'float32x4x2_t'\" } */\n+int float32x4x4_t; /* { dg-message \"note: previous declaration of 'float32x4x4_t'\" } */\n+\n+#pragma GCC arm \"arm_mve_types.h\"  /* { dg-error {'mve_pred16_t' redeclared} } */\n+  /* { dg-error {'int8x16_t' redeclared} \"\" {target *-*-*} .-1 } */\n+  /* { dg-error {'int16x8_t' redeclared} \"\" {target *-*-*} .-2 } */\n+  /* { dg-error {'int32x4_t' redeclared} \"\" {target *-*-*} .-3 } */\n+  /* { dg-error {'int64x2_t' redeclared} \"\" {target *-*-*} .-4 } */\n+  /* { dg-error {'uint8x16_t' redeclared} \"\" {target *-*-*} .-5 } */\n+  /* { dg-error {'uint16x8_t' redeclared} \"\" {target *-*-*} .-6 } */\n+  /* { dg-error {'uint32x4_t' redeclared} \"\" {target *-*-*} .-7 } */\n+  /* { dg-error {'uint64x2_t' redeclared} \"\" {target *-*-*} .-8 } */\n+  /* { dg-error {'float16x8_t' redeclared} \"\" {target *-*-*} .-9 } */\n+  /* { dg-error {'float32x4_t' redeclared} \"\" {target *-*-*} .-10 } */\n+  /* { dg-error {'int8x16x2_t' redeclared} \"\" {target *-*-*} .-11 } */\n+  /* { dg-error {'int8x16x4_t' redeclared} \"\" {target *-*-*} .-12 } */\n+  /* { dg-error {'int16x8x2_t' redeclared} \"\" {target *-*-*} .-13 } */\n+  /* { dg-error {'int16x8x4_t' redeclared} \"\" {target *-*-*} .-14 } */\n+  /* { dg-error {'int32x4x2_t' redeclared} \"\" {target *-*-*} .-15 } */\n+  /* { dg-error {'int32x4x4_t' redeclared} \"\" {target *-*-*} .-16 } */\n+  /* { dg-error {'int64x2x2_t' redeclared} \"\" {target *-*-*} .-17 } */\n+  /* { dg-error {'int64x2x4_t' redeclared} \"\" {target *-*-*} .-18 } */\n+  /* { dg-error {'uint8x16x2_t' redeclared} \"\" {target *-*-*} .-19 } */\n+  /* { dg-error {'uint8x16x4_t' redeclared} \"\" {target *-*-*} .-20 } */\n+  /* { dg-error {'uint16x8x2_t' redeclared} \"\" {target *-*-*} .-21 } */\n+  /* { dg-error {'uint16x8x4_t' redeclared} \"\" {target *-*-*} .-22 } */\n+  /* { dg-error {'uint32x4x2_t' redeclared} \"\" {target *-*-*} .-23 } */\n+  /* { dg-error {'uint32x4x4_t' redeclared} \"\" {target *-*-*} .-24 } */\n+  /* { dg-error {'uint64x2x2_t' redeclared} \"\" {target *-*-*} .-25 } */\n+  /* { dg-error {'uint64x2x4_t' redeclared} \"\" {target *-*-*} .-26 } */\n+  /* { dg-error {'float16x8x2_t' redeclared} \"\" {target *-*-*} .-27 } */\n+  /* { dg-error {'float16x8x4_t' redeclared} \"\" {target *-*-*} .-28 } */\n+  /* { dg-error {'float32x4x2_t' redeclared} \"\" {target *-*-*} .-29 } */\n+  /* { dg-error {'float32x4x4_t' redeclared} \"\" {target *-*-*} .-30 } */"}, {"sha": "58466db6940d3f272ca6f90ea697a4b35440bbe6", "filename": "gcc/testsuite/gcc.target/arm/mve/general/double_pragmas_1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fdouble_pragmas_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fdouble_pragmas_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fdouble_pragmas_1.c?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+\n+/* It doesn't really matter if this produces errors about redefinitions,\n+   but it mustn't trigger an ICE.  */\n+#pragma GCC arm \"arm_mve_types.h\"\n+#pragma GCC arm \"arm_mve_types.h\" /* { dg-error \"duplicate definition of 'arm_mve_types.h'\" } */"}, {"sha": "cdfb974b7a23c70b2beb9138a75ea88cc39eca5d", "filename": "gcc/testsuite/gcc.target/arm/mve/general/nomve_1.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fnomve_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fnomve_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fgeneral%2Fnomve_1.c?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mfloat-abi=soft\" } */\n+\n+#pragma GCC arm \"arm_mve_types.h\"  /* { dg-error {this definition requires the MVE ISA extension} } */"}, {"sha": "7cea03d6befc9a7080acb58b0245af576a19e61c", "filename": "gcc/testsuite/gcc.target/arm/mve/mve.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1ce17bc4aed37bc42bbe47210c562ea4fa6864/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve.exp?ref=9c1ce17bc4aed37bc42bbe47210c562ea4fa6864", "patch": "@@ -44,6 +44,12 @@ dg-init\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/intrinsics/*.\\[cCS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/general/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/general-c/*.\\[cCS\\]]] \\\n+        \"\" $DEFAULT_CFLAGS\n+\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n "}]}