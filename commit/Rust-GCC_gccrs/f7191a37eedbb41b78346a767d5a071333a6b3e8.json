{"sha": "f7191a37eedbb41b78346a767d5a071333a6b3e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxOTFhMzdlZWRiYjQxYjc4MzQ2YTc2N2Q1YTA3MTMzM2E2YjNlOA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-21T19:44:41Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-21T19:44:41Z"}, "message": "P0646R1 Improving the Return Value of Erase-Like Algorithms I\n\n2018-08-21  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tP0646R1 Improving the Return Value of Erase-Like Algorithms I\n\t* include/debug/forward_list (forward_list::__remove_return_type):\n\tDefine typedef as size_type or void, according to __cplusplus value.\n\t(_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n\tempty, according to __cplusplus value.\n\t(_GLIBCXX20_ONLY): Define macro.\n\t(forward_list::remove, forward_list::unique): Use typedef and macro\n\tto change return type and add abi-tag for C++2a. Return number of\n\tremoved elements for C++2a.\n\t(forward_list::remove_if<Pred>, forward_list::unique<BinPred>): Use\n\ttypedef to change return type for C++2a. Return number of removed\n\telements for C++2a.\n\t* include/debug/list (list::__remove_return_type): Define typedef as\n\tsize_type or void, according to __cplusplus value.\n\t(_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n\tempty, according to __cplusplus value.\n\t(_GLIBCXX20_ONLY): Define macro.\n\t(list::remove, list::unique): Use typedef and macro to change return\n\ttype and add abi-tag for C++2a. Return number of removed elements for\n\tC++2a.\n\t(list::remove_if<Predicate>, list::unique<BinaryPredicate>): Use typedef\n\tto change return type for C++2a. Return number of removed elements for\n\tC++2a.\n\nFrom-SVN: r263752", "tree": {"sha": "feb7413ac10e362d9a85edab1e2ed7fdf801b012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb7413ac10e362d9a85edab1e2ed7fdf801b012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7191a37eedbb41b78346a767d5a071333a6b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7191a37eedbb41b78346a767d5a071333a6b3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7191a37eedbb41b78346a767d5a071333a6b3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7191a37eedbb41b78346a767d5a071333a6b3e8/comments", "author": null, "committer": null, "parents": [{"sha": "fa3d2d38107033fc7620171474fbb7e2894cc79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3d2d38107033fc7620171474fbb7e2894cc79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3d2d38107033fc7620171474fbb7e2894cc79e"}], "stats": {"total": 260, "additions": 199, "deletions": 61}, "files": [{"sha": "a7d11660a6ac05c35c74d9541eca09d13ad713e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7191a37eedbb41b78346a767d5a071333a6b3e8", "patch": "@@ -1,3 +1,29 @@\n+2018-08-21  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tP0646R1 Improving the Return Value of Erase-Like Algorithms I\n+\t* include/debug/forward_list (forward_list::__remove_return_type):\n+\tDefine typedef as size_type or void, according to __cplusplus value.\n+\t(_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n+\tempty, according to __cplusplus value.\n+\t(_GLIBCXX20_ONLY): Define macro.\n+\t(forward_list::remove, forward_list::unique): Use typedef and macro\n+\tto change return type and add abi-tag for C++2a. Return number of\n+\tremoved elements for C++2a.\n+\t(forward_list::remove_if<Pred>, forward_list::unique<BinPred>): Use\n+\ttypedef to change return type for C++2a. Return number of removed\n+\telements for C++2a.\n+\t* include/debug/list (list::__remove_return_type): Define typedef as\n+\tsize_type or void, according to __cplusplus value.\n+\t(_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n+\tempty, according to __cplusplus value.\n+\t(_GLIBCXX20_ONLY): Define macro.\n+\t(list::remove, list::unique): Use typedef and macro to change return\n+\ttype and add abi-tag for C++2a. Return number of removed elements for\n+\tC++2a.\n+\t(list::remove_if<Predicate>, list::unique<BinaryPredicate>): Use typedef\n+\tto change return type for C++2a. Return number of removed elements for\n+\tC++2a.\n+\n 2018-08-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* testsuite/18_support/new_nothrow.cc: XFAIL on AIX."}, {"sha": "75d4f63af8fbb7f4639bb4c6be3d2eb92b9f598d", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 71, "deletions": 28, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=f7191a37eedbb41b78346a767d5a071333a6b3e8", "patch": "@@ -653,70 +653,113 @@ namespace __debug\n \t\t   const_iterator __before, const_iterator __last)\n       { splice_after(__pos, std::move(__list), __before, __last); }\n \n-      void\n+    private:\n+#if __cplusplus > 201703L\n+      using __remove_return_type = size_type;\n+# define _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG \\\n+      __attribute__((__abi_tag__(\"__cxx20\")))\n+# define _GLIBCXX20_ONLY(__expr) __expr\n+#else\n+      using __remove_return_type = void;\n+# define _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+# define _GLIBCXX20_ONLY(__expr)\n+#endif\n+\n+    public:\n+      _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       remove(const _Tp& __val)\n       {\n+\tif (!this->_M_iterators && !this->_M_const_iterators)\n+\t  return _Base::remove(__val);\n+\n+\tsize_type __removed __attribute__((__unused__)) = 0;\n \t_Base_iterator __x = _Base::before_begin();\n \t_Base_iterator __old = __x++;\n+\t_Base_iterator __extra = _Base::end();\n \twhile (__x != _Base::end())\n \t  {\n \t    if (*__x == __val)\n-\t      __x = _M_erase_after(__old);\n-\t    else\n-\t      __old = __x++;\n+\t      {\n+\t\tif (std::__addressof(*__x) != std::__addressof(__val))\n+\t\t  {\n+\t\t    __x = _M_erase_after(__old);\n+\t\t    _GLIBCXX20_ONLY( __removed++ );\n+\t\t    continue;\n+\t\t  }\n+\t\telse\n+\t\t  __extra = __old;\n+\t      }\n+\t    __old = __x++;\n \t  }\n+\n+\tif (__extra != _Base::end())\n+\t  {\n+\t    this->_M_erase_after(__extra);\n+\t    _GLIBCXX20_ONLY( __removed++ );\n+\t  }\n+\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n       template<typename _Pred>\n-\tvoid\n+\t__remove_return_type\n \tremove_if(_Pred __pred)\n \t{\n+\t  if (!this->_M_iterators && !this->_M_const_iterators)\n+\t    return _Base::remove_if(__pred);\n+\n+\t  size_type __removed __attribute__((__unused__)) = 0;\n \t  _Base_iterator __x = _Base::before_begin();\n \t  _Base_iterator __old = __x++;\n \t  while (__x != _Base::end())\n-\t    {\n-\t      if (__pred(*__x))\n+\t    if (__pred(*__x))\n+\t      {\n \t\t__x = _M_erase_after(__old);\n-\t      else\n-\t\t__old = __x++;\n-\t    }\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n+\t    else\n+\t      __old = __x++;\n+\n+\t  return _GLIBCXX20_ONLY( __removed );\n \t}\n \n-      void\n+      _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       unique()\n-      {\n-\t_Base_iterator __first = _Base::begin();\n-\t_Base_iterator __last = _Base::end();\n-\tif (__first == __last)\n-\t  return;\n-\t_Base_iterator __next = std::next(__first);\n-\twhile (__next != __last)\n-\t  {\n-\t    if (*__first == *__next)\n-\t      __next = _M_erase_after(__first);\n-\t    else\n-\t      __first = __next++;\n-\t  }\n-      }\n+      { return unique(std::equal_to<_Tp>()); }\n \n       template<typename _BinPred>\n-\tvoid\n+\t__remove_return_type\n \tunique(_BinPred __binary_pred)\n \t{\n+\t  if (!this->_M_iterators && !this->_M_const_iterators)\n+\t    return _Base::unique(__binary_pred);\n+\n \t  _Base_iterator __first = _Base::begin();\n \t  _Base_iterator __last = _Base::end();\n \t  if (__first == __last)\n-\t    return;\n+\t    return _GLIBCXX20_ONLY(0);\n+\n+\t  size_type __removed __attribute__((__unused__)) = 0;\n \t  _Base_iterator __next = std::next(__first);\n \t  while (__next != __last)\n \t    {\n \t      if (__binary_pred(*__first, *__next))\n-\t\t__next = _M_erase_after(__first);\n+\t\t{\n+\t\t  __next = _M_erase_after(__first);\n+\t\t  _GLIBCXX20_ONLY( __removed++ );\n+\t\t}\n \t      else\n \t\t__first = __next++;\n \t    }\n+\n+\t  return _GLIBCXX20_ONLY( __removed );\n \t}\n \n+#undef _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+#undef _GLIBCXX20_ONLY\n+\n       void\n       merge(forward_list&& __list)\n       {"}, {"sha": "80fa3047d3ad8087e05a17e0cc115ed49bcb7756", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 102, "deletions": 33, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7191a37eedbb41b78346a767d5a071333a6b3e8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=f7191a37eedbb41b78346a767d5a071333a6b3e8", "patch": "@@ -641,66 +641,135 @@ namespace __debug\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n \n-      void\n+    private:\n+#if __cplusplus > 201703L\n+      typedef size_type __remove_return_type;\n+# define _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG \\\n+      __attribute__((__abi_tag__(\"__cxx20\")))\n+# define _GLIBCXX20_ONLY(__expr) __expr\n+#else\n+      typedef void __remove_return_type;\n+# define _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+# define _GLIBCXX20_ONLY(__expr)\n+#endif\n+\n+    public:\n+      _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       remove(const _Tp& __value)\n       {\n-\tfor (_Base_iterator __x = _Base::begin(); __x != _Base::end(); )\n+\tif (!this->_M_iterators && !this->_M_const_iterators)\n+\t  return _Base::remove(__value);\n+\n+\tsize_type __removed __attribute__((__unused__)) = 0;\n+\t_Base_iterator __first = _Base::begin();\n+\t_Base_iterator __last = _Base::end();\n+\t_Base_iterator __extra = __last;\n+\twhile (__first != __last)\n \t  {\n-\t    if (*__x == __value)\n-\t      __x = _M_erase(__x);\n+\t    if (*__first == __value)\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 526. Is it undefined if a function in the standard changes\n+\t      // in parameters?\n+\t      if (std::__addressof(*__first) != std::__addressof(__value))\n+\t\t{\n+\t\t  __first = _M_erase(__first);\n+\t\t  _GLIBCXX20_ONLY( __removed++ );\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __extra = __first;\n+\t\t  ++__first;\n+\t\t}\n \t    else\n-\t      ++__x;\n+\t      ++__first;\n \t  }\n+\n+\tif (__extra != __last)\n+\t  {\n+\t    _M_erase(__extra);\n+\t    _GLIBCXX20_ONLY( __removed++ );\n+\t  }\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n       template<class _Predicate>\n-\tvoid\n+\t__remove_return_type\n \tremove_if(_Predicate __pred)\n \t{\n+\t  if (!this->_M_iterators && !this->_M_const_iterators)\n+\t    return _Base::remove_if(__pred);\n+\n+\t  size_type __removed __attribute__((__unused__)) = 0;\n \t  for (_Base_iterator __x = _Base::begin(); __x != _Base::end(); )\n-\t    {\n-\t      if (__pred(*__x))\n+\t    if (__pred(*__x))\n+\t      {\n \t\t__x = _M_erase(__x);\n-\t      else\n-\t\t++__x;\n-\t    }\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n+\t    else\n+\t      ++__x;\n+\n+\t  return _GLIBCXX20_ONLY( __removed );\n \t}\n \n-      void\n+      _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       unique()\n       {\n+\tif (!this->_M_iterators && !this->_M_const_iterators)\n+\t  return _Base::unique();\n+\n+\tif (empty())\n+\t  return _GLIBCXX20_ONLY(0);\n+\n+        size_type __removed __attribute__((__unused__)) = 0;\n \t_Base_iterator __first = _Base::begin();\n \t_Base_iterator __last = _Base::end();\n-\tif (__first == __last)\n-\t  return;\n-\t_Base_iterator __next = __first; ++__next;\n-\twhile (__next != __last)\n-\t  {\n-\t    if (*__first == *__next)\n-\t      __next = _M_erase(__next);\n-\t    else\n-\t      __first = __next++;\n-\t  }\n+\t_Base_iterator __next = __first;\n+\twhile (++__next != __last)\n+\t  if (*__first == *__next)\n+\t    {\n+\t      _M_erase(__next);\n+\t      __next = __first;\n+\t      _GLIBCXX20_ONLY( __removed++ );\n+\t    }\n+\t  else\n+\t    __first = __next;\n+\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n       template<class _BinaryPredicate>\n-\tvoid\n+\t__remove_return_type\n \tunique(_BinaryPredicate __binary_pred)\n \t{\n+\t  if (!this->_M_iterators && !this->_M_const_iterators)\n+\t    return _Base::unique(__binary_pred);\n+\n+\t  if (empty())\n+\t    return _GLIBCXX20_ONLY(0);\n+\n+\t  size_type __removed __attribute__((__unused__)) = 0;\n \t  _Base_iterator __first = _Base::begin();\n \t  _Base_iterator __last = _Base::end();\n-\t  if (__first == __last)\n-\t    return;\n-\t  _Base_iterator __next = __first; ++__next;\n-\t  while (__next != __last)\n-\t    {\n-\t      if (__binary_pred(*__first, *__next))\n-\t\t__next = _M_erase(__next);\n-\t      else\n-\t\t__first = __next++;\n-\t    }\n+\t  _Base_iterator __next = __first;;\n+\t  while (++__next != __last)\n+\t    if (__binary_pred(*__first, *__next))\n+\t      {\n+\t\t_M_erase(__next);\n+\t\t__next = __first;\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n+\t    else\n+\t      __first = __next;\n+\n+\t  return _GLIBCXX20_ONLY( __removed );\n \t}\n \n+#undef _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+#undef _GLIBCXX20_ONLY\n+\n       void\n #if __cplusplus >= 201103L\n       merge(list&& __x)"}]}