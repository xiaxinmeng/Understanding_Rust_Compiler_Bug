{"sha": "af8d2409beff727cf7d29025c09abded080d4cf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY4ZDI0MDliZWZmNzI3Y2Y3ZDI5MDI1YzA5YWJkZWQwODBkNGNmNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-03T16:59:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-03T16:59:37Z"}, "message": "i386.md: Use {} for multi-line preparation statements.\n\n\t* config/i386/i386.md: Use {} for multi-line preparation statements.\n\nFrom-SVN: r180832", "tree": {"sha": "95e8cd4dfa8258fac188711ecc822bdd2e2500a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e8cd4dfa8258fac188711ecc822bdd2e2500a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af8d2409beff727cf7d29025c09abded080d4cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8d2409beff727cf7d29025c09abded080d4cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8d2409beff727cf7d29025c09abded080d4cf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8d2409beff727cf7d29025c09abded080d4cf7/comments", "author": null, "committer": null, "parents": [{"sha": "12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e55ac79dfb42727098dd9bcc60c62bfcec75a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e55ac79dfb42727098dd9bcc60c62bfcec75a6"}], "stats": {"total": 201, "additions": 112, "deletions": 89}, "files": [{"sha": "539551a6a6e46c66b25acab35756f2a3c2a9ee55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8d2409beff727cf7d29025c09abded080d4cf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8d2409beff727cf7d29025c09abded080d4cf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af8d2409beff727cf7d29025c09abded080d4cf7", "patch": "@@ -1,3 +1,7 @@\n+2011-11-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Use {} for multi-line preparation statements.\n+\n 2011-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.md (movtf_insn_sp32_no_fpu): Consolidate into...\n@@ -156,8 +160,7 @@\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n \n-\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list):\n-\tRemove.\n+\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list): Remove.\n \t* configure: Regenerate.\n \t* Makefile.in (libgcc_tm_file_list, libgcc_tm_include_list): Remove.\n \t(TM_H): Remove libgcc_tm.h, $(libgcc_tm_file_list).\n@@ -211,7 +214,7 @@\n \t* config/t-libunwind (TARGET_LIBGCC2_CFLAGS): Remove.\n \t* config/t-linux: Remove.\n \t* config/t-lynx (TARGET_LIBGCC2_CFLAGS, LIBGCC, INSTALL_LIBGCC):\n-\tRemove\n+\tRemove.\n \t* config/t-openbsd-thread: Move to ../libgcc/config.\n \t* config/t-rtems (LIBGCC2_INCLUDES): Remove.\n \t* config/t-sol2 (TARGET_LIBGCC2_CFLAGS): Remove.\n@@ -221,8 +224,7 @@\n \t* config/vxlib.c, config/vxlib-tls.c: Move to ../libgcc/config.\n \t* config/alpha/qrnnd.asm: Move to ../libgcc/config/alpha/qrnnd.S.\n \t* config/alpha/t-alpha, config/alpha/t-ieee: Remove.\n-\t* config/alpha/t-vms (LIB2FUNCS_EXTRA, LIBGCC, INSTALL_LIBGCC):\n-\tRemove.\n+\t* config/alpha/t-vms (LIB2FUNCS_EXTRA, LIBGCC, INSTALL_LIBGCC): Remove.\n \t* config/alpha/vms-gcc_shell_handler.c: Move to ../libgcc/config/alpha.\n \t* config/arm/bpabi.c, config/arm/unaligned-funcs.c,\n \tconfig/arm/fp16.c, config/arm/linux-atomic.c,\n@@ -247,8 +249,7 @@\n \tconfig/c6x/gef.c, config/c6x/gtd.c, config/c6x/gtf.c,\n \tconfig/c6x/led.c, config/c6x/lef.c, config/c6x/ltd.c,\n \tconfig/c6x/ltf.c: Move to ../libgcc/config/c6x.\n-\t* config/c6x/t-c6x-elf (LIB2FUNCS_EXCLUDE, LIB2FUNCS_EXTRA):\n-\tRemove.\n+\t* config/c6x/t-c6x-elf (LIB2FUNCS_EXCLUDE, LIB2FUNCS_EXTRA): Remove.\n \t* config/c6x/t-c6x-uclinux (TARGET_LIBGCC2_CFLAGS): Remove.\n \t* config/cris/arit.c: Move to ../libgcc/config/cris.\n \t* config/cris/cris_abi_symbol.c: Remove.\n@@ -399,8 +400,8 @@\n \t(LIB2FUNCS_STATIC_EXTRA, tramp.S, crtsavfpr.S, crtresfpr.S)\n \t(crtsavgpr.S, crtresgpr.S, crtresxfpr.S, crtresxgpr.S, LIBGCC)\n \t(INSTALL_LIBGCC, $(T)crtsavfpr$(objext), $(T)crtresfpr$(objext))\n-\t(($(T)crtsavgpr$(objext), $(T)crtresgpr$(objext),\n-\t$(T)crtresxfpr$(objext), $(T)crtresxgpr$(objext)): Remove.\n+\t($(T)crtsavgpr$(objext), $(T)crtresgpr$(objext))\n+\t($(T)crtresxfpr$(objext), $(T)crtresxgpr$(objext)): Remove.\n \t* config/rs6000/t-ppccomm (LIB2FUNCS_EXTRA)\n \t(LIB2FUNCS_STATIC_EXTRA, eabi.S, tramp.S): Remove.\n \t* config/rs6000/t-spe (LIBGCC, INSTALL_LIBGCC): Remove.\n@@ -473,8 +474,7 @@\n \t(*-*-netbsd*): Remove t-libgcc-pic from tmake_file.\n \t(*-*-openbsd*): Likewise.\n \tRemove t-openbsd-thread for posix threads.\n-\t(alpha*-*-linux*): Remove alpha/t-alpha, alpha/t-ieee\n-\tfrom tmake_file.\n+\t(alpha*-*-linux*): Remove alpha/t-alpha, alpha/t-ieee from tmake_file.\n \t(alpha*-*-freebsd*): Likewise.\n \t(alpha*-*-netbsd*): Likewise.\n \t(alpha*-*-openbsd*): Likewise.\n@@ -531,20 +531,16 @@\n \t* config/arm/t-wince-pe: Likewise.\n \t* config/avr/libgcc.S: Move to ../libgcc/config/avr.\n \t* config/avr/t-avr (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n-\t* config/bfin/lib1funcs.asm: Move to\n-\t../libgcc/config/bfin/lib1funcs.S.\n+\t* config/bfin/lib1funcs.asm: Move to ../libgcc/config/bfin/lib1funcs.S.\n \t* config/bfin/t-bfin: Remove.\n \t* config/bfin/t-bfin-elf (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n \t* config/bfin/t-bfin-linux: Likewise.\n \t* config/bfin/t-bfin-uclinux: Likewise.\n-\t* config/c6x/lib1funcs.asm: Move to\n-\t../libgcc/config/c6x/lib1funcs.S.\n+\t* config/c6x/lib1funcs.asm: Move to ../libgcc/config/c6x/lib1funcs.S.\n \t* config/c6x/t-c6x-elf (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n-\t* config/fr30/lib1funcs.asm: Move to\n-\t../libgcc/config/fr30/lib1funcs.S.\n+\t* config/fr30/lib1funcs.asm: Move to ../libgcc/config/fr30/lib1funcs.S.\n \t* config/fr30/t-fr30 (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n-\t* config/frv/lib1funcs.asm: Move to\n-\t../libgcc/config/frv/lib1funcs.S.\n+\t* config/frv/lib1funcs.asm: Move to ../libgcc/config/frv/lib1funcs.S.\n \t* config/frv/t-frv (CROSS_LIBGCC1, LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n \t* config/h8300/fixunssfsi.c: Update lib1funcs.asm filename.\n \t* config/h8300/lib1funcs.asm: Move to\n@@ -553,8 +549,7 @@\n \t* config/i386/cygwin.asm: Move to ../libgcc/config/i386/cygwin.S.\n \t* config/i386/t-cygming (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n \t* config/i386/t-interix: Likewise.\n-\t* config/ia64/lib1funcs.asm: Move to\n-\t../libgcc/config/ia64/lib1funcs.S.\n+\t* config/ia64/lib1funcs.asm: Move to ../libgcc/config/ia64/lib1funcs.S.\n \t* config/ia64/t-hpux (LIB1ASMFUNCS, LIBGCC1_TEST): Remove.\n \t* config/ia64/t-ia64 (LIB1ASMSRC, LIB1ASMFUNCS): Remove.\n \t* config/iq2000/t-iq2000 (LIBGCC1, CROSS_LIBGCC1): Remove.\n@@ -645,7 +640,8 @@\n \tt-libc-ok from tmake_file.\n \t(i[34567]86-*-linux*, i[34567]86-*-kfreebsd*-gnu,\n \ti[34567]86-*-knetbsd*-gnu, i[34567]86-*-gnu*,\n-\ti[34567]86-*-kopensolaris*-gnu): Remove i386/t-crtstuff from tmake_file.\n+\ti[34567]86-*-kopensolaris*-gnu): Remove i386/t-crtstuff from\n+\ttmake_file.\n \tRemove extra_parts.\n \t(x86_64-*-linux*, x86_64-*-kfreebsd*-gnu, x86_64-*-knetbsd*-gnu):\n \tRemove i386/t-crtstuff from tmake_file.\n@@ -750,10 +746,8 @@\n \t* config/i386/t-i386elf: Remove.\n \t* config/i386/t-linux64 (EXTRA_MULTILIB_PARTS): Remove.\n \t* config/i386/t-nto (CRTSTUFF_T_CFLAGS, EXTRA_PARTS): Remove.\n-\t* config/ia64/crtbegin.asm: Move to\n-\t../libgcc/config/ia64/crtbegin.S.\n-\t* config/ia64/crtend.asm: Move to\n-\t../libgcc/config/ia64/crtend.S.\n+\t* config/ia64/crtbegin.asm: Move to ../libgcc/config/ia64/crtbegin.S.\n+\t* config/ia64/crtend.asm: Move to ../libgcc/config/ia64/crtend.S.\n \t* config/ia64/crti.asm: Move to ../libgcc/config/ia64/crti.S.\n \t* config/ia64/crtn.asm: Move to ../libgcc/config/ia64/crtn.S.\n \t* config/ia64/t-vms: Remove.\n@@ -834,7 +828,7 @@\n \t* config/rs6000/t-ppccomm (EXTRA_MULTILIB_PARTS): Remove.\n \t(ecrti.S, ecrtn.S, ncrti.S, ncrtn.S): Remove.\n \t($(T)ecrti$(objext), $(T)ecrtn$(objext), $(T)ncrti$(objext),\n-\t$(T)ncrtn$(objext)): Remove.\n+\t($(T)ncrtn$(objext)): Remove.\n \t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n \t* config/rs6000/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n \t* config/rx/t-rx (EXTRA_MULTILIB_PARTS): Remove.\n@@ -884,8 +878,7 @@\n \t* config/vms/vms-ucrt0.c: Move to ../libgcc/config/vms.\n \t* config/xtensa/crti.asm: Move to ../libgcc/config/xtensa/crti.S.\n \t* config/xtensa/crtn.asm: Move to ../libgcc/config/xtensa/crtn.S.\n-\t* config/xtensa/t-elf (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S):\n-\tRemove.\n+\t* config/xtensa/t-elf (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n \t(EXTRA_MULTILIB_PARTS): Remove.\n \t* config/xtensa/t-linux: Remove.\n \t* config/xtensa/t-xtensa ($(T)crti.o, $(T)crtn.o): Remove.\n@@ -1115,7 +1108,7 @@\n \n \tPR target/50940\n \t* config/i386/i386.md (floatsi<mode>2_vector_sse_with_temp splitter):\n-\tCompare <ssevecmode>mode with V4SFmode, not V4SImode.\n+\tCompare <ssevecmode>mode to V4SFmode, not V4SImode.\n \n 2011-11-01  Peter Bergner  <bergner@vnet.ibm.com>\n "}, {"sha": "6fe06b4579c203d140c12253045d09f5efa9d0a6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 89, "deletions": 59, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af8d2409beff727cf7d29025c09abded080d4cf7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af8d2409beff727cf7d29025c09abded080d4cf7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=af8d2409beff727cf7d29025c09abded080d4cf7", "patch": "@@ -7702,8 +7702,10 @@\n \t  [(and:SI (zero_extract:SI (match_dup 2) (const_int 8) (const_int 8))\n \t\t   (match_dup 3))\n \t   (const_int 0)]))]\n-  \"operands[2] = gen_lowpart (SImode, operands[2]);\n-   operands[3] = gen_int_mode (INTVAL (operands[3]) >> 8, SImode);\")\n+{\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[3] = gen_int_mode (INTVAL (operands[3]) >> 8, SImode);\n+})\n \n (define_split\n   [(set (match_operand 0 \"flags_reg_operand\" \"\")\n@@ -7721,8 +7723,10 @@\n   [(set (match_dup 0)\n \t(match_op_dup 1 [(and:QI (match_dup 2) (match_dup 3))\n \t\t\t (const_int 0)]))]\n-  \"operands[2] = gen_lowpart (QImode, operands[2]);\n-   operands[3] = gen_lowpart (QImode, operands[3]);\")\n+{\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+  operands[3] = gen_lowpart (QImode, operands[3]);\n+})\n \n ;; %%% This used to optimize known byte-wide and operations to memory,\n ;; and sometimes to QImode registers.  If this is considered useful,\n@@ -8147,9 +8151,11 @@\n \t\t\t\t\t    (const_int 8) (const_int 8))\n \t\t\t   (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[1] = gen_lowpart (SImode, operands[1]);\n-   operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\n+})\n \n ;; Since AND can be encoded with sign extended immediate, this is only\n ;; profitable when 7th bit is not set.\n@@ -8168,9 +8174,11 @@\n \t\t   (and:QI (match_dup 1)\n \t\t\t   (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (QImode, operands[0]);\n-   operands[1] = gen_lowpart (QImode, operands[1]);\n-   operands[2] = gen_lowpart (QImode, operands[2]);\")\n+{\n+  operands[0] = gen_lowpart (QImode, operands[0]);\n+  operands[1] = gen_lowpart (QImode, operands[1]);\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+})\n \f\n ;; Logical inclusive and exclusive OR instructions\n \n@@ -8402,9 +8410,11 @@\n \t\t\t\t\t       (const_int 8) (const_int 8))\n \t\t\t      (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[1] = gen_lowpart (SImode, operands[1]);\n-   operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_int_mode ((INTVAL (operands[2]) >> 8) & 0xff, SImode);\n+})\n \n ;; Since OR can be encoded with sign extended immediate, this is only\n ;; profitable when 7th bit is set.\n@@ -8423,9 +8433,11 @@\n \t\t   (any_or:QI (match_dup 1)\n \t\t\t      (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (QImode, operands[0]);\n-   operands[1] = gen_lowpart (QImode, operands[1]);\n-   operands[2] = gen_lowpart (QImode, operands[2]);\")\n+{\n+  operands[0] = gen_lowpart (QImode, operands[0]);\n+  operands[1] = gen_lowpart (QImode, operands[1]);\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+})\n \n (define_expand \"xorqi_cc_ext_1\"\n   [(parallel [\n@@ -16631,14 +16643,18 @@\n \n   ;; The % modifier is not operational anymore in peephole2's, so we have to\n   ;; swap the operands manually in the case of addition and multiplication.\n-  \"if (COMMUTATIVE_ARITH_P (operands[2]))\n-     operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]),\n-\t\t\t\t   GET_MODE (operands[2]),\n-\t\t\t\t   operands[0], operands[1]);\n-   else\n-     operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]),\n-\t\t\t\t   GET_MODE (operands[2]),\n-\t\t\t\t   operands[1], operands[0]);\")\n+{\n+  rtx op0, op1;\n+\n+  if (COMMUTATIVE_ARITH_P (operands[2]))\n+    op0 = operands[0], op1 = operands[1];\n+  else\n+    op0 = operands[1], op1 = operands[0];\n+\n+  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]),\n+\t\t\t\tGET_MODE (operands[2]),\n+\t\t\t\top0, op1);\n+})\n \n ;; Conditional addition patterns\n (define_expand \"add<mode>cc\"\n@@ -16837,11 +16853,13 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[1] = gen_lowpart (SImode, operands[1]);\n-   if (GET_CODE (operands[3]) != ASHIFT)\n-     operands[2] = gen_lowpart (SImode, operands[2]);\n-   PUT_MODE (operands[3], SImode);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  if (GET_CODE (operands[3]) != ASHIFT)\n+    operands[2] = gen_lowpart (SImode, operands[2]);\n+  PUT_MODE (operands[3], SImode);\n+})\n \n ; Promote the QImode tests, as i386 has encoding of the AND\n ; instruction with 32-bit sign-extended immediate and thus the\n@@ -16911,8 +16929,10 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (neg:SI (match_dup 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[1] = gen_lowpart (SImode, operands[1]);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+})\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n@@ -16924,8 +16944,10 @@\n \t       || optimize_insn_for_size_p ())))\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[1] = gen_lowpart (SImode, operands[1]);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+})\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n@@ -16940,9 +16962,11 @@\n \t       || optimize_insn_for_size_p ())))\"\n   [(set (match_dup 0)\n \t(if_then_else:SI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\n-   operands[2] = gen_lowpart (SImode, operands[2]);\n-   operands[3] = gen_lowpart (SImode, operands[3]);\")\n+{\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[3] = gen_lowpart (SImode, operands[3]);\n+})\n \f\n ;; RTL Peephole optimizations, run before sched2.  These primarily look to\n ;; transform a complex memory operation into two memory to register operations.\n@@ -17228,12 +17252,14 @@\n   [(parallel [(set (match_dup 4) (match_dup 5))\n \t      (set (match_dup 1) (match_op_dup 3 [(match_dup 1)\n \t\t\t\t\t\t  (match_dup 2)]))])]\n-  \"operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\t copy_rtx (operands[1]),\n-\t\t\t\t copy_rtx (operands[2]));\n-   operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t\t\t  operands[5], const0_rtx);\")\n+{\n+  operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\tcopy_rtx (operands[1]),\n+\t\t\t\tcopy_rtx (operands[2]));\n+  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t\t\t operands[5], const0_rtx);\n+})\n \n (define_peephole2\n   [(parallel [(set (match_operand:SWI 0 \"register_operand\" \"\")\n@@ -17253,12 +17279,14 @@\n   [(parallel [(set (match_dup 3) (match_dup 4))\n \t      (set (match_dup 1) (match_op_dup 2 [(match_dup 1)\n \t\t\t\t\t\t  (match_dup 0)]))])]\n-  \"operands[3] = SET_DEST (PATTERN (peep2_next_insn (2)));\n-   operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]), <MODE>mode,\n-\t\t\t\t copy_rtx (operands[1]),\n-\t\t\t\t copy_rtx (operands[0]));\n-   operands[4] = gen_rtx_COMPARE (GET_MODE (operands[3]),\n-\t\t\t\t  operands[4], const0_rtx);\")\n+{\n+  operands[3] = SET_DEST (PATTERN (peep2_next_insn (2)));\n+  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]), <MODE>mode,\n+\t\t\t\tcopy_rtx (operands[1]),\n+\t\t\t\tcopy_rtx (operands[0]));\n+  operands[4] = gen_rtx_COMPARE (GET_MODE (operands[3]),\n+\t\t\t\t operands[4], const0_rtx);\n+})\n \n (define_peephole2\n   [(set (match_operand:SWI12 0 \"register_operand\" \"\")\n@@ -17281,15 +17309,17 @@\n \t\t\t ? CCGOCmode : CCNOmode)\"\n   [(parallel [(set (match_dup 4) (match_dup 5))\n \t      (set (match_dup 1) (match_dup 6))])]\n-  \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\n-   operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n-   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\t copy_rtx (operands[1]), operands[2]);\n-   operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n-\t\t\t\t  operands[5], const0_rtx);\n-   operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n-\t\t\t\t copy_rtx (operands[1]),\n-\t\t\t\t copy_rtx (operands[2]));\")\n+{\n+  operands[2] = gen_lowpart (<MODE>mode, operands[2]);\n+  operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\tcopy_rtx (operands[1]), operands[2]);\n+  operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t\t\t operands[5], const0_rtx);\n+  operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\tcopy_rtx (operands[1]),\n+\t\t\t\tcopy_rtx (operands[2]));\n+})\n \n ;; Attempt to always use XOR for zeroing registers.\n (define_peephole2\n@@ -18075,8 +18105,8 @@\n \t\t     (match_operand:SI 3 \"const_int_operand\" \"i\")]\n \t\t    UNSPECV_LWPVAL_INTRINSIC)]\n   \"TARGET_LWP\"\n-  \"/* Avoid unused variable warning.  */\n-   (void) operand0;\")\n+  ;; Avoid unused variable warning.\n+  \"(void) operand0;\")\n \n (define_insn \"*lwp_lwpval<mode>3_1\"\n   [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")"}]}