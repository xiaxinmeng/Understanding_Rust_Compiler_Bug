{"sha": "130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwZmNhYjAyZjFmYmIwOTdmYzUyZmM5YTg4OTI0NzJlM2ZhMGM2Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-08-29T07:46:10Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-08-29T07:46:10Z"}, "message": "Fix --help=target (PR other/39851).\n\n2017-08-29  Martin Liska  <mliska@suse.cz>\n\n\tPR other/39851\n\t* gcc.c (driver_handle_option): Add new argument.\n\t* opts-common.c (handle_option): Pass\n\ttarget_option_override_hook.\n\t* opts-global.c (lang_handle_option): Add new option.\n\t(set_default_handlers):  Add new argument.\n\t(decode_options): Likewise.\n\t* opts.c (target_handle_option): Likewise.\n\t(common_handle_option): Call target_option_override_hook.\n\t* opts.h (struct cl_option_handler_func): Add hook for\n\ttarget option override.\n\t(struct cl_option_handlers): Likewise.\n\t(set_default_handlers): Add new argument.\n\t(decode_options): Likewise.\n\t(common_handle_option): Likewise.\n\t(target_handle_option): Likewise.\n\t* toplev.c (toplev::main): Pass targetm.target_option.override\n\thook.\n2017-08-29  Martin Liska  <mliska@suse.cz>\n\n\tPR other/39851\n\t* c-common.c (parse_optimize_options): Add argument to function\n\tcall.\n\t* c-pragma.c (handle_pragma_diagnostic): Likewise.\n\nFrom-SVN: r251400", "tree": {"sha": "046ad3bcd18ba4f41c0aa0e8b5abc176198fc723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046ad3bcd18ba4f41c0aa0e8b5abc176198fc723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faa5399be693b2cdea641b976156f0fc89fa10cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa5399be693b2cdea641b976156f0fc89fa10cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa5399be693b2cdea641b976156f0fc89fa10cf"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "6c853d9932132136ca546b0325fe7bdaa7e685cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -1,3 +1,24 @@\n+2017-08-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR other/39851\n+\t* gcc.c (driver_handle_option): Add new argument.\n+\t* opts-common.c (handle_option): Pass\n+\ttarget_option_override_hook.\n+\t* opts-global.c (lang_handle_option): Add new option.\n+\t(set_default_handlers):  Add new argument.\n+\t(decode_options): Likewise.\n+\t* opts.c (target_handle_option): Likewise.\n+\t(common_handle_option): Call target_option_override_hook.\n+\t* opts.h (struct cl_option_handler_func): Add hook for\n+\ttarget option override.\n+\t(struct cl_option_handlers): Likewise.\n+\t(set_default_handlers): Add new argument.\n+\t(decode_options): Likewise.\n+\t(common_handle_option): Likewise.\n+\t(target_handle_option): Likewise.\n+\t* toplev.c (toplev::main): Pass targetm.target_option.override\n+\thook.\n+\n 2017-08-29  Richard Biener  <rguenther@suse.de>\n \tDominik Infuehr <dominik.infuehr@theobroma-systems.com>\n "}, {"sha": "fc5a807ccfef95b40f958607f553849757ed8cf1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -1,3 +1,10 @@\n+2017-08-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR other/39851\n+\t* c-common.c (parse_optimize_options): Add argument to function\n+\tcall.\n+\t* c-pragma.c (handle_pragma_diagnostic): Likewise.\n+\n 2017-08-24  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-lex.c (interpret_float): Use token location"}, {"sha": "f4f2819aeceee70477613424f80affadba9def61", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -5497,7 +5497,7 @@ parse_optimize_options (tree args, bool attr_p)\n   /* And apply them.  */\n   decode_options (&global_options, &global_options_set,\n \t\t  decoded_options, decoded_options_count,\n-\t\t  input_location, global_dc);\n+\t\t  input_location, global_dc, NULL);\n \n   targetm.override_options_after_change();\n "}, {"sha": "3b49aefc6ffee858365a4d3cdeadfab3209de074", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -815,7 +815,7 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n     }\n \n   struct cl_option_handlers handlers;\n-  set_default_handlers (&handlers);\n+  set_default_handlers (&handlers, NULL);\n   const char *arg = NULL;\n   if (cl_options[option_index].flags & CL_JOINED)\n     arg = option_string + 1 + cl_options[option_index].opt_len;"}, {"sha": "f1aad1f23b6ad5bb75599e62259c1ebb9192c1c7", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -3769,7 +3769,8 @@ driver_handle_option (struct gcc_options *opts,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n-\t\t      diagnostic_context *dc)\n+\t\t      diagnostic_context *dc,\n+\t\t      void (*) (void))\n {\n   size_t opt_index = decoded->opt_index;\n   const char *arg = decoded->arg;"}, {"sha": "d756814576851cb66871cca5375d9d3605ab10dc", "filename": "gcc/opts-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -993,7 +993,8 @@ handle_option (struct gcc_options *opts,\n       {\n \tif (!handlers->handlers[i].handler (opts, opts_set, decoded,\n \t\t\t\t\t    lang_mask, kind, loc,\n-\t\t\t\t\t    handlers, dc))\n+\t\t\t\t\t    handlers, dc,\n+\t\t\t\t\t    handlers->target_option_override_hook))\n \t  return false;\n       }\n   "}, {"sha": "343dbd3ac2c3892d8f17996395eef89e27417d90", "filename": "gcc/opts-global.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -169,7 +169,8 @@ lang_handle_option (struct gcc_options *opts,\n \t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t    location_t loc,\n \t\t    const struct cl_option_handlers *handlers,\n-\t\t    diagnostic_context *dc)\n+\t\t    diagnostic_context *dc,\n+\t\t    void (*) (void))\n {\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n@@ -269,10 +270,12 @@ decode_cmdline_options_to_array_default_mask (unsigned int argc,\n /* Set *HANDLERS to the default set of option handlers for use in the\n    compilers proper (not the driver).  */\n void\n-set_default_handlers (struct cl_option_handlers *handlers)\n+set_default_handlers (struct cl_option_handlers *handlers,\n+\t\t      void (*target_option_override_hook) (void))\n {\n   handlers->unknown_option_callback = unknown_option_callback;\n   handlers->wrong_lang_callback = complain_wrong_lang;\n+  handlers->target_option_override_hook = target_option_override_hook;\n   handlers->num_handlers = 3;\n   handlers->handlers[0].handler = lang_handle_option;\n   handlers->handlers[0].mask = initial_lang_mask;\n@@ -290,15 +293,16 @@ void\n decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\tstruct cl_decoded_option *decoded_options,\n \t\tunsigned int decoded_options_count,\n-\t\tlocation_t loc, diagnostic_context *dc)\n+\t\tlocation_t loc, diagnostic_context *dc,\n+\t\tvoid (*target_option_override_hook) (void))\n {\n   struct cl_option_handlers handlers;\n \n   unsigned int lang_mask;\n \n   lang_mask = initial_lang_mask;\n \n-  set_default_handlers (&handlers);\n+  set_default_handlers (&handlers, target_option_override_hook);\n \n   default_options_optimization (opts, opts_set,\n \t\t\t\tdecoded_options, decoded_options_count,"}, {"sha": "a7f926b587fb3b60b7570639562cd5fa60c524af", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -217,7 +217,7 @@ target_handle_option (struct gcc_options *opts,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n-\t\t      diagnostic_context *dc)\n+\t\t      diagnostic_context *dc, void (*) (void))\n {\n   gcc_assert (dc == global_dc);\n   gcc_assert (kind == DK_UNSPECIFIED);\n@@ -1716,7 +1716,8 @@ common_handle_option (struct gcc_options *opts,\n \t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n \t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers,\n-\t\t      diagnostic_context *dc)\n+\t\t      diagnostic_context *dc,\n+\t\t      void (*target_option_override_hook) (void))\n {\n   size_t scode = decoded->opt_index;\n   const char *arg = decoded->arg;\n@@ -1743,6 +1744,7 @@ common_handle_option (struct gcc_options *opts,\n \tundoc_mask = ((opts->x_verbose_flag | opts->x_extra_warnings)\n \t\t      ? 0\n \t\t      : CL_UNDOCUMENTED);\n+\ttarget_option_override_hook ();\n \t/* First display any single language specific options.  */\n \tfor (i = 0; i < cl_lang_count; i++)\n \t  print_specific_help\n@@ -1762,6 +1764,7 @@ common_handle_option (struct gcc_options *opts,\n       if (lang_mask == CL_DRIVER)\n \tbreak;\n \n+      target_option_override_hook ();\n       print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0, opts, lang_mask);\n       opts->x_exit_after_options = true;\n       break;\n@@ -1888,8 +1891,11 @@ common_handle_option (struct gcc_options *opts,\n \t  }\n \n \tif (include_flags)\n-\t  print_specific_help (include_flags, exclude_flags, 0, opts,\n-\t\t\t       lang_mask);\n+\t  {\n+\t    target_option_override_hook ();\n+\t    print_specific_help (include_flags, exclude_flags, 0, opts,\n+\t\t\t\t lang_mask);\n+\t  }\n \topts->x_exit_after_options = true;\n \tbreak;\n       }"}, {"sha": "2774e2c8b40bdb042bf9a251b7dd1dca72b2bb41", "filename": "gcc/opts.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -272,7 +272,8 @@ struct cl_option_handler_func\n \t\t   const struct cl_decoded_option *decoded,\n \t\t   unsigned int lang_mask, int kind, location_t loc,\n \t\t   const struct cl_option_handlers *handlers,\n-\t\t   diagnostic_context *dc);\n+\t\t   diagnostic_context *dc,\n+\t\t   void (*target_option_override_hook) (void));\n \n   /* The mask that must have some bit in common with the flags for the\n      option for this particular handler to be used.  */\n@@ -294,6 +295,9 @@ struct cl_option_handlers\n   void (*wrong_lang_callback) (const struct cl_decoded_option *decoded,\n \t\t\t       unsigned int lang_mask);\n \n+  /* Target option override hook.  */\n+  void (*target_option_override_hook) (void);\n+\n   /* The number of individual handlers.  */\n   size_t num_handlers;\n \n@@ -338,13 +342,15 @@ extern void decode_cmdline_options_to_array_default_mask (unsigned int argc,\n \t\t\t\t\t\t\t  const char **argv, \n \t\t\t\t\t\t\t  struct cl_decoded_option **decoded_options,\n \t\t\t\t\t\t\t  unsigned int *decoded_options_count);\n-extern void set_default_handlers (struct cl_option_handlers *handlers);\n+extern void set_default_handlers (struct cl_option_handlers *handlers,\n+\t\t\t\t  void (*target_option_override_hook) (void));\n extern void decode_options (struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    struct cl_decoded_option *decoded_options,\n \t\t\t    unsigned int decoded_options_count,\n \t\t\t    location_t loc,\n-\t\t\t    diagnostic_context *dc);\n+\t\t\t    diagnostic_context *dc,\n+\t\t\t    void (*target_option_override_hook) (void));\n extern int option_enabled (int opt_idx, void *opts);\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);\n@@ -391,14 +397,16 @@ extern bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  unsigned int lang_mask, int kind,\n \t\t\t\t  location_t loc,\n \t\t\t\t  const struct cl_option_handlers *handlers,\n-\t\t\t\t  diagnostic_context *dc);\n+\t\t\t\t  diagnostic_context *dc,\n+\t\t\t\t  void (*target_option_override_hook) (void));\n extern bool target_handle_option (struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n \t\t\t\t  location_t loc,\n \t\t\t\t  const struct cl_option_handlers *handlers,\n-\t\t\t\t  diagnostic_context *dc);\n+\t\t\t\t  diagnostic_context *dc,\n+\t\t\t\t  void (*target_option_override_hook) (void));\n extern void finish_options (struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    location_t loc);"}, {"sha": "7d2b8fffa0bc545159302e7537beb098c616bedf", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130fcab02f1fbb097fc52fc9a8892472e3fa0c6c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=130fcab02f1fbb097fc52fc9a8892472e3fa0c6c", "patch": "@@ -2149,7 +2149,8 @@ toplev::main (int argc, char **argv)\n      enough to default flags appropriately.  */\n   decode_options (&global_options, &global_options_set,\n \t\t  save_decoded_options, save_decoded_options_count,\n-\t\t  UNKNOWN_LOCATION, global_dc);\n+\t\t  UNKNOWN_LOCATION, global_dc,\n+\t\t  targetm.target_option.override);\n \n   handle_common_deferred_options ();\n "}]}