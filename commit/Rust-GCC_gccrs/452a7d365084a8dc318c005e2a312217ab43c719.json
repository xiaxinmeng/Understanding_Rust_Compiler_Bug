{"sha": "452a7d365084a8dc318c005e2a312217ab43c719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUyYTdkMzY1MDg0YThkYzMxOGMwMDVlMmEzMTIyMTdhYjQzYzcxOQ==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-03-30T08:25:30Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-03-30T08:25:30Z"}, "message": "rs6000.c (output_vec_const_move): Find all cases of EASY_VECTOR_15_ADD_SELF.\n\n        * config/rs6000/rs6000.c (output_vec_const_move):\n        Find all cases of EASY_VECTOR_15_ADD_SELF.\n        (easy_vector_constant_add_self): Accept\n        all vector constant loadable by vsplt* and vadd*.\n        (easy_vector_same): Use easy_vector_splat_const.\n        (easy_vector_const): Use easy_vector_splat_const.\n        (easy_vector_splat_const): New function.\n        (gen_easy_vector_constant_add_self): New function.\n\n        * config/rs6000/rs6000-protos.c (gen_easy_vector_constant_add_self):\n        New prototype.\n\n        * config/rs6000/altivec.md (movv4si splitter): Change to\n        emit move insn with halfed vector constant.\n        (*movv8hi splitter): Likewise.\n        (*movv16qi splitter): Likewise.\n\nFrom-SVN: r80077", "tree": {"sha": "83efd8553d09111a4a7bdf99ac19f4d1fe4aed48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83efd8553d09111a4a7bdf99ac19f4d1fe4aed48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/452a7d365084a8dc318c005e2a312217ab43c719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452a7d365084a8dc318c005e2a312217ab43c719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452a7d365084a8dc318c005e2a312217ab43c719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452a7d365084a8dc318c005e2a312217ab43c719/comments", "author": null, "committer": null, "parents": [{"sha": "708d2456294faee1a7dbbebee014e889f2b525d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708d2456294faee1a7dbbebee014e889f2b525d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708d2456294faee1a7dbbebee014e889f2b525d6"}], "stats": {"total": 158, "additions": 108, "deletions": 50}, "files": [{"sha": "5b197fc1a449427c964cba0aa8df61644aabf8da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=452a7d365084a8dc318c005e2a312217ab43c719", "patch": "@@ -1,3 +1,22 @@\n+2004-03-30  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+        * config/rs6000/rs6000.c (output_vec_const_move):\n+        Find all cases of EASY_VECTOR_15_ADD_SELF.\n+        (easy_vector_constant_add_self): Accept\n+        all vector constant loadable by vsplt* and vadd*.\n+\t(easy_vector_same): Use easy_vector_splat_const.\n+\t(easy_vector_const): Use easy_vector_splat_const.\n+        (easy_vector_splat_const): New function.\n+\t(gen_easy_vector_constant_add_self): New function.\n+\t\n+\t* config/rs6000/rs6000-protos.c (gen_easy_vector_constant_add_self):\n+\tNew prototype.\n+\n+        * config/rs6000/altivec.md (movv4si splitter): Change to\n+\temit move insn with halfed vector constant.\n+\t(*movv8hi splitter): Likewise.\n+\t(*movv16qi splitter): Likewise.\n+    \t\n 2004-03-30  Hartmut Penner  <hpenner@de.ibm.com>\n \n \tPR 11591\t"}, {"sha": "3e27a1b86c21617f360f4bc6761a1df4770a0e0b", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=452a7d365084a8dc318c005e2a312217ab43c719", "patch": "@@ -124,13 +124,14 @@\n   [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"\")\n \t(match_operand:V4SI 1 \"easy_vector_constant_add_self\" \"\"))]\n   \"TARGET_ALTIVEC && reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:V4SI [(match_dup 3)] UNSPEC_VSPLTISW))\n+  [(set (match_dup 0) (match_dup 3))\n    (set (match_dup 0)\n \t(plus:V4SI (match_dup 0)\n \t\t   (match_dup 0)))]\n   \"\n-{ operands[3] = GEN_INT (INTVAL (CONST_VECTOR_ELT (operands[1], 0)) >> 1); }\")\n+{ \n+  operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n+}\")    \n \n (define_expand \"movv8hi\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"\")\n@@ -172,13 +173,14 @@\n   [(set (match_operand:V8HI 0 \"altivec_register_operand\" \"\")\n \t(match_operand:V8HI 1 \"easy_vector_constant_add_self\" \"\"))]\n   \"TARGET_ALTIVEC && reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:V8HI [(match_dup 3)] UNSPEC_VSPLTISH))\n+  [(set (match_dup 0) (match_dup 3))\n    (set (match_dup 0)\n \t(plus:V8HI (match_dup 0)\n \t\t   (match_dup 0)))]\n   \"\n-{ operands[3] = GEN_INT (INTVAL (CONST_VECTOR_ELT (operands[1], 0)) >> 1); }\")\n+{\n+  operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n+}\")\n \n (define_expand \"movv16qi\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"\")\n@@ -220,13 +222,14 @@\n   [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"\")\n \t(match_operand:V16QI 1 \"easy_vector_constant_add_self\" \"\"))]\n   \"TARGET_ALTIVEC && reload_completed\"\n-  [(set (match_dup 0)\n-\t(unspec:V16QI [(match_dup 3)] UNSPEC_VSPLTISB))\n+  [(set (match_dup 0) (match_dup 3))\n    (set (match_dup 0)\n \t(plus:V16QI (match_dup 0)\n \t\t   (match_dup 0)))]\n   \"\n-{ operands[3] = GEN_INT (INTVAL (CONST_VECTOR_ELT (operands[1], 0)) >> 1); }\")\n+{\n+  operands[3] = gen_easy_vector_constant_add_self (operands[1]);\n+}\")\n \n (define_expand \"movv4sf\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")"}, {"sha": "95a506b4fcc4b371ea08e3b67993b1ea928f5f26", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=452a7d365084a8dc318c005e2a312217ab43c719", "patch": "@@ -57,6 +57,7 @@ extern int got_no_const_operand (rtx, enum machine_mode);\n extern int num_insns_constant (rtx, enum machine_mode);\n extern int easy_fp_constant (rtx, enum machine_mode);\n extern int easy_vector_constant (rtx, enum machine_mode);\n+extern rtx gen_easy_vector_constant_add_self (rtx);\n extern const char *output_vec_const_move (rtx *);\n extern int zero_fp_constant (rtx, enum machine_mode);\n extern int zero_constant (rtx, enum machine_mode);"}, {"sha": "bd649fa5695b3498d1a141be129d40abe76f0311", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 76, "deletions": 41, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452a7d365084a8dc318c005e2a312217ab43c719/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=452a7d365084a8dc318c005e2a312217ab43c719", "patch": "@@ -60,12 +60,9 @@\n #define TARGET_NO_PROTOTYPE 0\n #endif\n \n-#define EASY_VECTOR_15(n, x, y) ((n) >= -16 && (n) <= 15 \\\n-\t\t\t\t && easy_vector_same (x, y))\n-\n-#define EASY_VECTOR_15_ADD_SELF(n, x, y) ((n) >= 0x10 && (n) <= 0x1e \\\n-                                          && !((n) & 1)              \\\n-\t\t\t\t\t  && easy_vector_same (x, y))\n+#define EASY_VECTOR_15(n) ((n) >= -16 && (n) <= 15)\n+#define EASY_VECTOR_15_ADD_SELF(n) ((n) >= 0x10 && (n) <= 0x1e \\\n+                                          && !((n) & 1))\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n #define max(A,B)\t((A) > (B) ? (A) : (B))\n@@ -411,6 +408,7 @@ static void is_altivec_return_reg (rtx, void *);\n static rtx generate_set_vrsave (rtx, rs6000_stack_t *, int);\n int easy_vector_constant (rtx, enum machine_mode);\n static int easy_vector_same (rtx, enum machine_mode);\n+static int easy_vector_splat_const (int, enum machine_mode);\n static bool is_ev64_opaque_type (tree);\n static rtx rs6000_dwarf_register_span (rtx);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n@@ -1677,6 +1675,38 @@ easy_fp_constant (rtx op, enum machine_mode mode)\n     abort ();\n }\n \n+/* Returns the constant for the splat instrunction, if exists.  */\n+\n+static int\n+easy_vector_splat_const (int cst, enum machine_mode mode)\n+{\n+  switch (mode) \n+    {\n+    case V4SImode:\n+      if (EASY_VECTOR_15 (cst) \n+\t  || EASY_VECTOR_15_ADD_SELF (cst)) \n+\treturn cst;\n+      if ((cst & 0xffff) != ((cst >> 16) & 0xffff))\n+\tbreak;\n+      cst = cst >> 16;\n+    case V8HImode:\n+      if (EASY_VECTOR_15 (cst) \n+\t  || EASY_VECTOR_15_ADD_SELF (cst)) \n+\treturn cst;\n+      if ((cst & 0xff) != ((cst >> 8) & 0xff))\n+\tbreak;\n+      cst = cst >> 8;\n+    case V16QImode:\n+\t  if (EASY_VECTOR_15 (cst) \n+\t      || EASY_VECTOR_15_ADD_SELF (cst)) \n+\t    return cst;\n+    default: \n+      break;\n+    }\n+  return 0;\n+}\n+\n+\n /* Return nonzero if all elements of a vector have the same value.  */\n \n static int\n@@ -1690,7 +1720,7 @@ easy_vector_same (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   for (i = 1; i < units; ++i)\n     if (INTVAL (CONST_VECTOR_ELT (op, i)) != cst)\n       break;\n-  if (i == units)\n+  if (i == units && easy_vector_splat_const (cst, mode))\n     return 1;\n   return 0;\n }\n@@ -1736,31 +1766,14 @@ easy_vector_constant (rtx op, enum machine_mode mode)\n       && cst2 >= -0x7fff && cst2 <= 0x7fff)\n     return 1;\n \n-  if (TARGET_ALTIVEC)\n-    switch (mode) \n-      {\n-      case V4SImode:\n-\tif (EASY_VECTOR_15 (cst, op, mode))\n-\t  return 1;\n-\tif ((cst & 0xffff) != ((cst >> 16) & 0xffff))\n-\t  break;\n-\tcst = cst >> 16;\n-      case V8HImode:\n-\tif (EASY_VECTOR_15 (cst, op, mode))\n-\t  return 1;\n-\tif ((cst & 0xff) != ((cst >> 8) & 0xff))\n-\t  break;\n-\tcst = cst >> 8;\n-      case V16QImode:\n-\tif (EASY_VECTOR_15 (cst, op, mode))\n-\t  return 1;\n-      default: \n-\tbreak;\n-      }\n-\n-  if (TARGET_ALTIVEC && EASY_VECTOR_15_ADD_SELF (cst, op, mode))\n-    return 1;\n-\n+  if (TARGET_ALTIVEC \n+      && easy_vector_same (op, mode))\n+    {\n+      cst = easy_vector_splat_const (cst, mode);\n+      if (EASY_VECTOR_15_ADD_SELF (cst) \n+\t  || EASY_VECTOR_15 (cst))\n+\treturn 1;\n+    }  \n   return 0;\n }\n \n@@ -1770,13 +1783,31 @@ int\n easy_vector_constant_add_self (rtx op, enum machine_mode mode)\n {\n   int cst;\n+  if (TARGET_ALTIVEC\n+      && GET_CODE (op) == CONST_VECTOR\n+      && easy_vector_same (op, mode))\n+    {\n+      cst = easy_vector_splat_const (INTVAL (CONST_VECTOR_ELT (op, 0)), mode);\n+      if (EASY_VECTOR_15_ADD_SELF (cst))\n+\treturn 1;  \n+    }\n+  return 0;\n+}\n \n-  if (!easy_vector_constant (op, mode))\n-    return 0;\n+/* Generate easy_vector_constant out of a easy_vector_constant_add_self.  */\n \n-  cst = INTVAL (CONST_VECTOR_ELT (op, 0));\n+rtx \n+gen_easy_vector_constant_add_self (rtx op)\n+{\n+  int i, units;\n+  rtvec v;\n+  units = GET_MODE_NUNITS (GET_MODE (op));\n+  v = rtvec_alloc (units);\n \n-  return TARGET_ALTIVEC && EASY_VECTOR_15_ADD_SELF (cst, op, mode);\n+  for (i = 0; i < units; i++)\n+    RTVEC_ELT (v, i) = \n+      GEN_INT (INTVAL (CONST_VECTOR_ELT (op, i)) >> 1);\n+  return gen_rtx_raw_CONST_VECTOR (GET_MODE (op), v);\n }\n \n const char *\n@@ -1797,33 +1828,37 @@ output_vec_const_move (rtx *operands)\n     {\n       if (zero_constant (vec, mode))\n \treturn \"vxor %0,%0,%0\";\n-      else if (EASY_VECTOR_15_ADD_SELF (cst, vec, mode))\n-\treturn \"#\";\n       else if (easy_vector_constant (vec, mode))\n \t{\n \t  operands[1] = GEN_INT (cst);\n \t  switch (mode)\n \t    {\n \t    case V4SImode:\n-\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t      if (EASY_VECTOR_15 (cst))\n \t\t{\n \t\t  operands[1] = GEN_INT (cst);\n \t\t  return \"vspltisw %0,%1\";\n \t\t}\n+\t      else if (EASY_VECTOR_15_ADD_SELF (cst))\n+\t\treturn \"#\";\n \t      cst = cst >> 16;\n \t    case V8HImode:\n-\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t      if (EASY_VECTOR_15 (cst))\n \t\t{\n \t\t  operands[1] = GEN_INT (cst);\n \t\t  return \"vspltish %0,%1\";\n \t\t}\n+\t      else if (EASY_VECTOR_15_ADD_SELF (cst))\n+\t\treturn \"#\";\n \t      cst = cst >> 8;\n \t    case V16QImode:\n-\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t      if (EASY_VECTOR_15 (cst))\n \t\t{\n \t\t  operands[1] = GEN_INT (cst);\n \t\t  return \"vspltisb %0,%1\";\n \t\t}\n+\t      else if (EASY_VECTOR_15_ADD_SELF (cst))\n+\t\treturn \"#\";\n \t    default:\n \t      abort ();\n \t    }"}]}