{"sha": "906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2YTkyODNhNWQ1M2YyMWYwMzJhZjhlNGEyMjM1OGIxYjBmMWVjOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-12-21T03:34:06Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-12-21T03:34:06Z"}, "message": "PR c++/88196 - ICE with class non-type template parameter.\n\n\t* pt.c (convert_nontype_argument): If the expr is a PTRMEM_CST, also\n\tcheck if the type we're converting it to is TYPE_PTRMEM_P.\n\n\t* g++.dg/cpp0x/ptrmem-cst-arg1.C: Tweak dg-error.\n\t* g++.dg/cpp2a/nontype-class10.C: New test.\n\t* g++.dg/template/pr54858.C: Tweak dg-error.\n\nFrom-SVN: r267319", "tree": {"sha": "004d3f42778cd2106784612f357fe3cf9efb6f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/004d3f42778cd2106784612f357fe3cf9efb6f2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6647c1e86f3b311d906a19b85182eed010ec03cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6647c1e86f3b311d906a19b85182eed010ec03cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6647c1e86f3b311d906a19b85182eed010ec03cf"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "f4295f33d5eb647667ebae97f2956eea63e0f640", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -1,3 +1,9 @@\n+2018-12-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88196 - ICE with class non-type template parameter.\n+\t* pt.c (convert_nontype_argument): If the expr is a PTRMEM_CST, also\n+\tcheck if the type we're converting it to is TYPE_PTRMEM_P.\n+\n 2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/51628"}, {"sha": "18b093e7d2d2e529fcafdf90c256eeac939a73b9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -6775,7 +6775,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n      to a null value, but otherwise still need to be of a specific form.  */\n   if (cxx_dialect >= cxx11)\n     {\n-      if (TREE_CODE (expr) == PTRMEM_CST)\n+      if (TREE_CODE (expr) == PTRMEM_CST && TYPE_PTRMEM_P (type))\n \t/* A PTRMEM_CST is already constant, and a valid template\n \t   argument for a parameter of pointer to member type, we just want\n \t   to leave it in that form rather than lower it to a"}, {"sha": "d814641a966159b746d5bd314e6c010533240e7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -1,3 +1,10 @@\n+2018-12-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88196 - ICE with class non-type template parameter.\n+\t* g++.dg/cpp0x/ptrmem-cst-arg1.C: Tweak dg-error.\n+\t* g++.dg/cpp2a/nontype-class10.C: New test.\n+\t* g++.dg/template/pr54858.C: Tweak dg-error.\n+\n 2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/51628"}, {"sha": "38b3e24241c4aaa466d3c0c2ba41895d495ffdd3", "filename": "gcc/testsuite/g++.dg/cpp0x/ptrmem-cst-arg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst-arg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst-arg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst-arg1.C?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -5,5 +5,5 @@ template<int> struct A {};\n struct B\n {\n     int i;\n-    A<&B::i> a; // { dg-error \"could not convert template argument\" }\n+    A<&B::i> a; // { dg-error \"could not convert\" }\n };"}, {"sha": "5cc179300ca52b74715a6c75861e2eb3410ea090", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class10.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class10.C?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/88196\n+// { dg-do compile { target c++2a } }\n+\n+struct C { C *c; };\n+template <C> struct D;\n+D <&C::c> d; // { dg-error \"could not convert\" }"}, {"sha": "6d23decfbb97871e989c051d36045234d86b0b43", "filename": "gcc/testsuite/g++.dg/template/pr54858.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr54858.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906a9283a5d53f21f032af8e4a22358b1b0f1ec9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr54858.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr54858.C?ref=906a9283a5d53f21f032af8e4a22358b1b0f1ec9", "patch": "@@ -5,17 +5,17 @@ template <int> struct A {};\n template <typename T, T *> struct B {};\n template <typename D> struct C\n {\n-  A<0> c0; B<A<0>, &C::c0> d0;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c1; B<A<0>, &C::c1> d1;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c2; B<A<0>, &C::c2> d2;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c3; B<A<0>, &C::c3> d3;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c4; B<A<0>, &C::c4> d4;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c5; B<A<0>, &C::c5> d5;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c6; B<A<0>, &C::c6> d6;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c7; B<A<0>, &C::c7> d7;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c8; B<A<0>, &C::c8> d8;\t// { dg-error \"could not convert template argument\" }\n-  A<0> c9; B<A<0>, &C::c9> d9;\t// { dg-error \"could not convert template argument\" }\n-  A<0> ca; B<A<0>, &C::ca> da;\t// { dg-error \"could not convert template argument\" }\n-  A<0> cb; B<A<0>, &C::cb> db;\t// { dg-error \"could not convert template argument\" }\n+  A<0> c0; B<A<0>, &C::c0> d0;\t// { dg-error \"could not convert\" }\n+  A<0> c1; B<A<0>, &C::c1> d1;\t// { dg-error \"could not convert\" }\n+  A<0> c2; B<A<0>, &C::c2> d2;\t// { dg-error \"could not convert\" }\n+  A<0> c3; B<A<0>, &C::c3> d3;\t// { dg-error \"could not convert\" }\n+  A<0> c4; B<A<0>, &C::c4> d4;\t// { dg-error \"could not convert\" }\n+  A<0> c5; B<A<0>, &C::c5> d5;\t// { dg-error \"could not convert\" }\n+  A<0> c6; B<A<0>, &C::c6> d6;\t// { dg-error \"could not convert\" }\n+  A<0> c7; B<A<0>, &C::c7> d7;\t// { dg-error \"could not convert\" }\n+  A<0> c8; B<A<0>, &C::c8> d8;\t// { dg-error \"could not convert\" }\n+  A<0> c9; B<A<0>, &C::c9> d9;\t// { dg-error \"could not convert\" }\n+  A<0> ca; B<A<0>, &C::ca> da;\t// { dg-error \"could not convert\" }\n+  A<0> cb; B<A<0>, &C::cb> db;\t// { dg-error \"could not convert\" }\n };\n C<int> e;"}]}