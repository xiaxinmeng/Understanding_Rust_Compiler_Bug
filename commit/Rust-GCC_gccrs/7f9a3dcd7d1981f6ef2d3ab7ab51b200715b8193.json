{"sha": "7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5YTNkY2Q3ZDE5ODFmNmVmMmQzYWI3YWI1MWIyMDA3MTViODE5Mw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-10-19T12:17:35Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-10-19T12:17:35Z"}, "message": "re PR target/50310 (ICE: in gen_vcondv2div2df, at config/i386/sse.md:1435 with -O -ftree-vectorize and __builtin_isunordered())\n\n\tPR target/50310\n\t* config/spu/spu.c (spu_emit_vector_compare): Support unordered\n\tfloating-point comparisons.\n\nFrom-SVN: r180184", "tree": {"sha": "92876f93036515c56b2bed131eccda5fa4b05c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92876f93036515c56b2bed131eccda5fa4b05c94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193/comments", "author": null, "committer": null, "parents": [{"sha": "a66f86bbc475f720f64fd6ae3873bf8e36a8e1e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a66f86bbc475f720f64fd6ae3873bf8e36a8e1e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a66f86bbc475f720f64fd6ae3873bf8e36a8e1e7"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "115c5d920c191cfb5449d6c332c070a364d8debf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "patch": "@@ -1,3 +1,9 @@\n+2011-10-19  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR target/50310\n+\t* config/spu/spu.c (spu_emit_vector_compare): Support unordered\n+\tfloating-point comparisons.\n+\n 2011-10-19  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (handle_alias_pairs): Also handle wekref with destination"}, {"sha": "734c2beec4cc1534561974cde8a61d5e4acfccf4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "patch": "@@ -6415,13 +6415,24 @@ spu_emit_vector_compare (enum rtx_code rcode,\n           try_again = true;\n           break;\n         case NE:\n+\tcase UNEQ:\n+\tcase UNLE:\n+\tcase UNLT:\n+\tcase UNGE:\n+\tcase UNGT:\n+\tcase UNORDERED:\n           /* Treat A != B as ~(A==B).  */\n           {\n+\t    enum rtx_code rev_code;\n             enum insn_code nor_code;\n-            rtx eq_rtx = spu_emit_vector_compare (EQ, op0, op1, dest_mode);\n+\t    rtx rev_mask;\n+\n+\t    rev_code = reverse_condition_maybe_unordered (rcode);\n+            rev_mask = spu_emit_vector_compare (rev_code, op0, op1, dest_mode);\n+\n             nor_code = optab_handler (one_cmpl_optab, dest_mode);\n             gcc_assert (nor_code != CODE_FOR_nothing);\n-            emit_insn (GEN_FCN (nor_code) (mask, eq_rtx));\n+            emit_insn (GEN_FCN (nor_code) (mask, rev_mask));\n             if (dmode != dest_mode)\n               {\n                 rtx temp = gen_reg_rtx (dest_mode);\n@@ -6466,6 +6477,48 @@ spu_emit_vector_compare (enum rtx_code rcode,\n             return mask;\n           }\n           break;\n+        case LTGT:\n+          /* Try LT OR GT */\n+          {\n+            rtx lt_rtx, gt_rtx;\n+            enum insn_code ior_code;\n+\n+            lt_rtx = spu_emit_vector_compare (LT, op0, op1, dest_mode);\n+            gt_rtx = spu_emit_vector_compare (GT, op0, op1, dest_mode);\n+\n+            ior_code = optab_handler (ior_optab, dest_mode);\n+            gcc_assert (ior_code != CODE_FOR_nothing);\n+            emit_insn (GEN_FCN (ior_code) (mask, lt_rtx, gt_rtx));\n+            if (dmode != dest_mode)\n+              {\n+                rtx temp = gen_reg_rtx (dest_mode);\n+                convert_move (temp, mask, 0);\n+                return temp;\n+              }\n+            return mask;\n+          }\n+          break;\n+        case ORDERED:\n+          /* Implement as (A==A) & (B==B) */\n+          {\n+            rtx a_rtx, b_rtx;\n+            enum insn_code and_code;\n+\n+            a_rtx = spu_emit_vector_compare (EQ, op0, op0, dest_mode);\n+            b_rtx = spu_emit_vector_compare (EQ, op1, op1, dest_mode);\n+\n+            and_code = optab_handler (and_optab, dest_mode);\n+            gcc_assert (and_code != CODE_FOR_nothing);\n+            emit_insn (GEN_FCN (and_code) (mask, a_rtx, b_rtx));\n+            if (dmode != dest_mode)\n+              {\n+                rtx temp = gen_reg_rtx (dest_mode);\n+                convert_move (temp, mask, 0);\n+                return temp;\n+              }\n+            return mask;\n+          }\n+          break;\n         default:\n           gcc_unreachable ();\n         }"}]}