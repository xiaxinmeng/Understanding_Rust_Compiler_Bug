{"sha": "4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YWY4ZDk4NDFjMzdjODlhN2VhZTlkNGY4MzFjZTRjYzAwODAxZg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-16T06:14:00Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-16T06:14:00Z"}, "message": "attributes weak and alias\n\nFrom-SVN: r9391", "tree": {"sha": "84e2fb5271a2abf2b906a48c8ee5704a2f8d7184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e2fb5271a2abf2b906a48c8ee5704a2f8d7184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/comments", "author": null, "committer": null, "parents": [{"sha": "822e3422fb522797881e6212ffe124690cf0b04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822e3422fb522797881e6212ffe124690cf0b04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822e3422fb522797881e6212ffe124690cf0b04a"}], "stats": {"total": 155, "additions": 138, "deletions": 17}, "files": [{"sha": "18d6265b7106a43676db40212862b21d1e364b45", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "patch": "@@ -30,7 +30,7 @@ extern struct obstack permanent_obstack;\n \n enum attrs {A_PACKED, A_NOCOMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_CONSTRUCTOR, A_DESTRUCTOR, A_MODE, A_SECTION, A_ALIGNED,\n-\t    A_FORMAT};\n+\t    A_FORMAT, A_WEAK, A_ALIAS};\n \n static void declare_hidden_char_array\tPROTO((char *, char *));\n static void add_attribute\t\tPROTO((enum attrs, char *,\n@@ -258,6 +258,8 @@ init_attributes ()\n   add_attribute (A_SECTION, \"section\", 1, 1, 1);\n   add_attribute (A_ALIGNED, \"aligned\", 0, 1, 0);\n   add_attribute (A_FORMAT, \"format\", 3, 3, 1);\n+  add_attribute (A_WEAK, \"weak\", 0, 0, 1);\n+  add_attribute (A_ALIAS, \"alias\", 1, 1, 1);\n }\n \f\n /* Process the attributes listed in ATTRIBUTES and PREFIX_ATTRIBUTES\n@@ -606,6 +608,29 @@ decl_attributes (node, attributes, prefix_attributes)\n \t\t\t\t    is_scan, format_num, first_arg_num);\n \t    break;\n \t  }\n+\n+\tcase A_WEAK:\n+\t  declare_weak (decl);\n+\t  break;\n+\n+\tcase A_ALIAS:\n+\t  if ((TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl))\n+\t      || TREE_CODE (decl) != FUNCTION_DECL && ! DECL_EXTERNAL (decl))\n+\t    error_with_decl (decl,\n+\t\t\t     \"`%s' defined both normally and as an alias\");\n+\t  else if (decl_function_context (decl) == 0)\n+\t    {\n+\t      tree id = get_identifier (TREE_STRING_POINTER\n+\t\t\t\t\t(TREE_VALUE (args)));\n+\t      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t\tDECL_INITIAL (decl) = error_mark_node;\n+\t      else\n+\t\tDECL_EXTERNAL (decl) = 0;\n+\t      assemble_alias (decl, id);\n+\t    }\n+\t  else\n+\t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  break;\n \t}\n     }\n }"}, {"sha": "f7bfc905982b510e0b16cf28813eacbb15596618", "filename": "gcc/config/aoutos.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fconfig%2Faoutos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fconfig%2Faoutos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faoutos.h?ref=4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "patch": "@@ -85,3 +85,18 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n+\n+/* If we're using GNU as and ld, we support weak symbols.  */\n+\n+#define HANDLE_PRAGMA_WEAK flag_gnu_linker\n+#define WEAK_ASM_OP\t\".weak\"\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n+ do { if (flag_gnu_linker)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fprintf ((FILE), \"\\t%s\\t\", \".set\");\t\t\t\t\\\n+\t  assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "fd108e85db868047213f2da6b2a0eeb015f8ddcd", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "patch": "@@ -20,3 +20,18 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define SUNOS4_SHARED_LIBRARIES 1\n \n #include \"sparc/sparc.h\"\n+\n+/* If we're using GNU as and ld, we support weak symbols.  */\n+\n+#define HANDLE_PRAGMA_WEAK flag_gnu_linker\n+#define WEAK_ASM_OP\t\".weak\"\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n+ do { if (flag_gnu_linker)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fprintf ((FILE), \"\\t%s\\t\", \".set\");\t\t\t\t\\\n+\t  assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n+\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "b6afc47f30c6f2a1440c6db21d3effa3ffe50ea8", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "patch": "@@ -2574,6 +2574,10 @@ compile_file (name)\n       }\n   }\n \n+  /* Write out any pending weak symbol declarations.  */\n+\n+  weak_finish ();\n+\n   /* Do dbx symbols */\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n   if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)"}, {"sha": "c4249a9c5d2972aab8b2eb0cfbda59dea4a75b6c", "filename": "gcc/varasm.c", "status": "modified", "additions": 78, "deletions": 16, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8af8d9841c37c89a7eae9d4f831ce4cc00801f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4b8af8d9841c37c89a7eae9d4f831ce4cc00801f", "patch": "@@ -97,8 +97,13 @@ int size_directive_output;\n tree last_assemble_variable_decl;\n \n /* Nonzero if at least one function definition has been seen.  */\n+\n static int function_defined;\n \n+/* Any weak symbol declarations waiting to be emitted.  */\n+\n+static tree weak_decls;\n+\n struct addr_const;\n struct constant_descriptor;\n struct rtx_const;\n@@ -3911,12 +3916,13 @@ output_constructor (exp, size)\n     assemble_zeros (size - total_bytes);\n }\n \n-\n-#ifdef HANDLE_SYSV_PRAGMA\n-\n /* Support #pragma weak by default if WEAK_ASM_OP and ASM_OUTPUT_DEF\n    are defined.  */\n-#if defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n+#if !defined (HANDLE_PRAGMA_WEAK) && defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n+#define HANDLE_PRAGMA_WEAK 1\n+#endif\n+\n+#if defined (HANDLE_SYSV_PRAGMA) && defined (HANDLE_PRAGMA_WEAK)\n \n /* See c-pragma.c for an identical definition.  */\n enum pragma_state\n@@ -3943,21 +3949,77 @@ handle_pragma_weak (what, asm_out_file, name, value)\n {\n   if (what == ps_name || what == ps_value)\n     {\n-      fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n-\n-      if (output_bytecode)\n-\tBC_OUTPUT_LABELREF (asm_out_file, name);\n-      else\n-\tASM_OUTPUT_LABELREF (asm_out_file, name);\n-\n-      fputc ('\\n', asm_out_file);\n-      if (what == ps_value)\n-\tASM_OUTPUT_DEF (asm_out_file, name, value);\n+      weak_decls = perm_tree_cons (what == ps_value ? value : NULL_TREE,\n+\t\t\t\t   name, weak_decls);\n     }\n   else if (! (what == ps_done || what == ps_start))\n     warning (\"malformed `#pragma weak'\");\n }\n \n-#endif /* HANDLE_PRAGMA_WEAK or (WEAK_ASM_OP and SET_ASM_OP) */\n+#endif /* HANDLE_SYSV_PRAGMA && HANDLE_PRAGMA_WEAK */\n+\n+/* Declare DECL to be a weak symbol.  */\n+\n+void\n+declare_weak (decl)\n+     tree decl;\n+{\n+  if (! TREE_PUBLIC (decl))\n+    error_with_decl (decl, \"weak declaration of `%s' must be public\");\n+  else\n+    weak_decls = perm_tree_cons (NULL_TREE, DECL_ASSEMBLER_NAME (decl),\n+\t\t\t\t weak_decls);\n+}\n+\n+/* Emit any pending weak declarations.  */\n+\n+void\n+weak_finish ()\n+{\n+#ifdef HANDLE_PRAGMA_WEAK\n+  if (HANDLE_PRAGMA_WEAK)\n+    {\n+      tree t;\n+      for (t = weak_decls; t; t = TREE_CHAIN (t))\n+\t{\n+\t  tree decl = TREE_VALUE (t);\n+\t  char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \n-#endif /* WEAK_ASM_OP && ASM_OUTPUT_DEF */\n+\t  fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n+\n+\t  if (output_bytecode)\n+\t    BC_OUTPUT_LABELREF (asm_out_file, name);\n+\t  else\n+\t    ASM_OUTPUT_LABELREF (asm_out_file, name);\n+\n+\t  fputc ('\\n', asm_out_file);\n+\t}\n+    }\n+#endif\n+}\n+\n+void\n+assemble_alias (decl, target)\n+     tree decl, target;\n+{\n+#ifdef ASM_OUTPUT_DEF\n+  char *name;\n+\n+  make_decl_rtl (decl, (char*)0, 1);\n+  name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+\n+  /* Make name accessible from other files, if appropriate.  */\n+\n+  if (TREE_PUBLIC (decl))\n+    {\n+      if (output_bytecode)\n+\tBC_GLOBALIZE_LABEL (asm_out_file, name);\n+      else\n+\tASM_GLOBALIZE_LABEL (asm_out_file, name);\n+    }\n+\n+  ASM_OUTPUT_DEF (asm_out_file, name, IDENTIFIER_POINTER (target));\n+#else\n+  warning (\"alias definitions not supported in this configuration\");\n+#endif\n+}"}]}