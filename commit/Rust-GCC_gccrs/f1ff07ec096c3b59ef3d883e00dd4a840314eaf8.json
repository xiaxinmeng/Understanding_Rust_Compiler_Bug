{"sha": "f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmZjA3ZWMwOTZjM2I1OWVmM2Q4ODNlMDBkZDRhODQwMzE0ZWFmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-06T09:31:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-06T09:31:13Z"}, "message": "trans.c (gnat_to_gnu): Rework special code dealing with boolean rvalues and set the location directly.\n\n\t* gcc-interface/trans.c (gnat_to_gnu): Rework special code dealing\n\twith boolean rvalues and set the location directly.  Do not set the\n\tlocation in the other cases for a simple name.\n\t(gnat_to_gnu_external): Clear the location on the expression.\n\nFrom-SVN: r237123", "tree": {"sha": "314a89953c8874cecc3aa9104af7f010aa90f458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314a89953c8874cecc3aa9104af7f010aa90f458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8/comments", "author": null, "committer": null, "parents": [{"sha": "d5ebeb8c1b41ad58235374766579fb8c6cf1297b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ebeb8c1b41ad58235374766579fb8c6cf1297b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ebeb8c1b41ad58235374766579fb8c6cf1297b"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "a958655efe38c67bd078dcd2ae4b07dffd704e7c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "patch": "@@ -1,3 +1,10 @@\n+2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu): Rework special code dealing\n+\twith boolean rvalues and set the location directly.  Do not set the\n+\tlocation in the other cases for a simple name.\n+\t(gnat_to_gnu_external): Clear the location on the expression.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Component>: Remove"}, {"sha": "d0071d39e55c5aa5c8d18561b5a1b7052618c8c1", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "patch": "@@ -7686,10 +7686,11 @@ gnat_to_gnu (Node_Id gnat_node)\n     current_function_decl = NULL_TREE;\n \n   /* When not optimizing, turn boolean rvalues B into B != false tests\n-     so that the code just below can put the location information of the\n-     reference to B on the inequality operator for better debug info.  */\n+     so that we can put the location information of the reference to B on\n+     the inequality operator for better debug info.  */\n   if (!optimize\n       && TREE_CODE (gnu_result) != INTEGER_CST\n+      && TREE_CODE (gnu_result) != TYPE_DECL\n       && (kind == N_Identifier\n \t  || kind == N_Expanded_Name\n \t  || kind == N_Explicit_Dereference\n@@ -7698,15 +7699,19 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  || kind == N_Selected_Component)\n       && TREE_CODE (get_base_type (gnu_result_type)) == BOOLEAN_TYPE\n       && !lvalue_required_p (gnat_node, gnu_result_type, false, false, false))\n-    gnu_result = build_binary_op (NE_EXPR, gnu_result_type,\n-\t\t\t\t  convert (gnu_result_type, gnu_result),\n-\t\t\t\t  convert (gnu_result_type,\n-\t\t\t\t\t   boolean_false_node));\n-\n-  /* Set the location information on the result.  Note that we may have\n-     no result if we tried to build a CALL_EXPR node to a procedure with\n-     no side-effects and optimization is enabled.  */\n-  if (gnu_result && EXPR_P (gnu_result))\n+    {\n+      gnu_result\n+\t= build_binary_op (NE_EXPR, gnu_result_type,\n+\t\t\t   convert (gnu_result_type, gnu_result),\n+\t\t\t   convert (gnu_result_type, boolean_false_node));\n+      if (TREE_CODE (gnu_result) != INTEGER_CST)\n+\tset_gnu_expr_location_from_node (gnu_result, gnat_node);\n+    }\n+\n+  /* Set the location information on the result if it's not a simple name.\n+     Note that we may have no result if we tried to build a CALL_EXPR node\n+     to a procedure with no side-effects and optimization is enabled.  */\n+  else if (kind != N_Identifier && gnu_result && EXPR_P (gnu_result))\n     set_gnu_expr_location_from_node (gnu_result, gnat_node);\n \n   /* If we're supposed to return something of void_type, it means we have\n@@ -7858,6 +7863,10 @@ gnat_to_gnu_external (Node_Id gnat_node)\n   if (went_into_elab_proc)\n     current_function_decl = NULL_TREE;\n \n+  /* Do not import locations from external units.  */\n+  if (gnu_result && EXPR_P (gnu_result))\n+    SET_EXPR_LOCATION (gnu_result, UNKNOWN_LOCATION);\n+\n   return gnu_result;\n }\n \f"}]}