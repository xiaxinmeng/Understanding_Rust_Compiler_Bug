{"sha": "cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5NmI0ZTJkYmU0NzFiYmYzZTc0M2NkNTcxYjlhMTZmMDAyYThhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T19:27:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T19:27:07Z"}, "message": "Correct handling of undefined name as key in map composite literal.\n\nFrom-SVN: r167810", "tree": {"sha": "310e9976ba5a3f26a539a8c933f3bd626698332e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/310e9976ba5a3f26a539a8c933f3bd626698332e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7/comments", "author": null, "committer": null, "parents": [{"sha": "7ed66e6669a256d701ea2b41c5ec340729d3aeca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed66e6669a256d701ea2b41c5ec340729d3aeca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed66e6669a256d701ea2b41c5ec340729d3aeca"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "cb73ea960e161840112363482b3a97f45cd082e3", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "patch": "@@ -11162,7 +11162,7 @@ class Composite_literal_expression : public Parser_expression\n   make_array(Type*, Expression_list*);\n \n   Expression*\n-  lower_map(Type*);\n+  lower_map(Gogo*, Named_object*, Type*);\n \n   // The type of the composite literal.\n   Type* type_;\n@@ -11191,7 +11191,7 @@ Composite_literal_expression::do_traverse(Traverse* traverse)\n // the type.\n \n Expression*\n-Composite_literal_expression::do_lower(Gogo*, Named_object*, int)\n+Composite_literal_expression::do_lower(Gogo* gogo, Named_object* function, int)\n {\n   Type* type = this->type_;\n \n@@ -11218,7 +11218,7 @@ Composite_literal_expression::do_lower(Gogo*, Named_object*, int)\n   else if (type->array_type() != NULL)\n     return this->lower_array(type);\n   else if (type->map_type() != NULL)\n-    return this->lower_map(type);\n+    return this->lower_map(gogo, function, type);\n   else\n     {\n       error_at(this->location(),\n@@ -11477,7 +11477,8 @@ Composite_literal_expression::make_array(Type* type, Expression_list* vals)\n // Lower a map composite literal.\n \n Expression*\n-Composite_literal_expression::lower_map(Type* type)\n+Composite_literal_expression::lower_map(Gogo* gogo, Named_object* function,\n+\t\t\t\t\tType* type)\n {\n   source_location location = this->location();\n   if (this->vals_ != NULL)\n@@ -11488,7 +11489,7 @@ Composite_literal_expression::lower_map(Type* type)\n \t  return Expression::make_error(location);\n \t}\n \n-      for (Expression_list::const_iterator p = this->vals_->begin();\n+      for (Expression_list::iterator p = this->vals_->begin();\n \t   p != this->vals_->end();\n \t   p += 2)\n \t{\n@@ -11499,6 +11500,16 @@ Composite_literal_expression::lower_map(Type* type)\n \t\t       \"map composite literal must have keys for every value\");\n \t      return Expression::make_error(location);\n \t    }\n+\t  // Make sure we have lowered the key; it may not have been\n+\t  // lowered in order to handle keys for struct composite\n+\t  // literals.  Lower it now to get the right error message.\n+\t  if ((*p)->unknown_expression() != NULL)\n+\t    {\n+\t      (*p)->unknown_expression()->clear_is_composite_literal_key();\n+\t      gogo->lower_expression(function, &*p);\n+\t      gcc_assert((*p)->is_error_expression());\n+\t      return Expression::make_error(location);\n+\t    }\n \t}\n     }\n "}, {"sha": "53cca06d42e9801c707a62cab56fffe6b7ebfa8f", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=cd96b4e2dbe471bbf3e743cd571b9a16f002a8a7", "patch": "@@ -1384,6 +1384,12 @@ class Unknown_expression : public Parser_expression\n   set_is_composite_literal_key()\n   { this->is_composite_literal_key_ = true; }\n \n+  // Note that this expression should no longer be treated as a\n+  // composite literal key.\n+  void\n+  clear_is_composite_literal_key()\n+  { this->is_composite_literal_key_ = false; }\n+\n  protected:\n   Expression*\n   do_lower(Gogo*, Named_object*, int);"}]}