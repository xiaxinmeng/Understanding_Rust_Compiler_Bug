{"sha": "6cc886bf4279461b8931c4ca544185a85cd69f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNjODg2YmY0Mjc5NDYxYjg5MzFjNGNhNTQ0MTg1YTg1Y2Q2OWYyNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-12T10:13:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-12T11:34:28Z"}, "message": "middle-end/38474 - fix alias walk budget accounting in IPA analysis\n\nThe walk_aliased_vdef calls do not update the walking budget until\nit is hit by a single call (and then in one case it resumes with\nno limit at all).  The following rectifies this in multiple places.\nIt also makes the updates more consistend and fixes\ndetermine_known_aggregate_parts to account its own alias queries.\n\n2021-02-12  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/38474\n\t* ipa-fnsummary.c (unmodified_parm_1): Only walk when\n\tfbi->aa_walk_budget is bigger than zero.  Update\n\tfbi->aa_walk_budget.\n\t(param_change_prob): Likewise.\n\t* ipa-prop.c (detect_type_change_from_memory_writes):\n\tProperly account walk_aliased_vdefs.\n\t(parm_preserved_before_stmt_p): Canonicalize updates.\n\t(parm_ref_data_preserved_p): Likewise.\n\t(parm_ref_data_pass_through_p): Likewise.\n\t(determine_known_aggregate_parts): Account own alias queries.", "tree": {"sha": "2cbecc9e245890f234cb1a7f6b4b3e49d7fa3a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cbecc9e245890f234cb1a7f6b4b3e49d7fa3a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cc886bf4279461b8931c4ca544185a85cd69f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc886bf4279461b8931c4ca544185a85cd69f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc886bf4279461b8931c4ca544185a85cd69f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc886bf4279461b8931c4ca544185a85cd69f26/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6087c57540bfdcde533bc90197b6553fb8003c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6087c57540bfdcde533bc90197b6553fb8003c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6087c57540bfdcde533bc90197b6553fb8003c"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "e32e69cd3adf43d83b019163f727769728ae7b93", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc886bf4279461b8931c4ca544185a85cd69f26/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc886bf4279461b8931c4ca544185a85cd69f26/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=6cc886bf4279461b8931c4ca544185a85cd69f26", "patch": "@@ -1197,20 +1197,22 @@ unmodified_parm_1 (ipa_func_body_info *fbi, gimple *stmt, tree op,\n       return SSA_NAME_VAR (op);\n     }\n   /* Non-SSA parm reference?  */\n-  if (TREE_CODE (op) == PARM_DECL)\n+  if (TREE_CODE (op) == PARM_DECL\n+      && fbi->aa_walk_budget > 0)\n     {\n       bool modified = false;\n \n       ao_ref refd;\n       ao_ref_init (&refd, op);\n       int walked = walk_aliased_vdefs (&refd, gimple_vuse (stmt),\n \t\t\t\t       mark_modified, &modified, NULL, NULL,\n-\t\t\t\t       fbi->aa_walk_budget + 1);\n+\t\t\t\t       fbi->aa_walk_budget);\n       if (walked < 0)\n \t{\n \t  fbi->aa_walk_budget = 0;\n \t  return NULL_TREE;\n \t}\n+      fbi->aa_walk_budget -= walked;\n       if (!modified)\n \t{\n \t  if (size_p)\n@@ -2240,7 +2242,7 @@ param_change_prob (ipa_func_body_info *fbi, gimple *stmt, int i)\n \n       if (init != error_mark_node)\n \treturn 0;\n-      if (!bb->count.nonzero_p ())\n+      if (!bb->count.nonzero_p () || fbi->aa_walk_budget == 0)\n \treturn REG_BR_PROB_BASE;\n       if (dump_file)\n \t{\n@@ -2255,8 +2257,12 @@ param_change_prob (ipa_func_body_info *fbi, gimple *stmt, int i)\n       int walked\n \t= walk_aliased_vdefs (&refd, gimple_vuse (stmt), record_modified, &info,\n \t\t\t      NULL, NULL, fbi->aa_walk_budget);\n+      if (walked > 0)\n+\tfbi->aa_walk_budget -= walked;\n       if (walked < 0 || bitmap_bit_p (info.bb_set, bb->index))\n \t{\n+\t  if (walked < 0)\n+\t    fbi->aa_walk_budget = 0;\n \t  if (dump_file)\n \t    {\n \t      if (walked < 0)"}, {"sha": "010c43f33e83dcc503435d9bf1b79b95cc0ecaef", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc886bf4279461b8931c4ca544185a85cd69f26/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc886bf4279461b8931c4ca544185a85cd69f26/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=6cc886bf4279461b8931c4ca544185a85cd69f26", "patch": "@@ -803,6 +803,9 @@ detect_type_change_from_memory_writes (ipa_func_body_info *fbi, tree arg,\n       || !BINFO_VTABLE (TYPE_BINFO (TYPE_MAIN_VARIANT (comp_type))))\n     return true;\n \n+  if (fbi->aa_walk_budget == 0)\n+    return false;\n+\n   ao_ref_init (&ao, arg);\n   ao.base = base;\n   ao.offset = offset;\n@@ -815,7 +818,11 @@ detect_type_change_from_memory_writes (ipa_func_body_info *fbi, tree arg,\n \n   int walked\n     = walk_aliased_vdefs (&ao, gimple_vuse (call), check_stmt_for_type_change,\n-\t\t\t  &tci, NULL, NULL, fbi->aa_walk_budget + 1);\n+\t\t\t  &tci, NULL, NULL, fbi->aa_walk_budget);\n+  if (walked >= 0)\n+    fbi->aa_walk_budget -= walked;\n+  else\n+    fbi->aa_walk_budget = 0;\n \n   if (walked >= 0 && !tci.type_maybe_changed)\n     return false;\n@@ -948,21 +955,20 @@ parm_preserved_before_stmt_p (struct ipa_func_body_info *fbi, int index,\n \n   gcc_checking_assert (fbi);\n   paa = parm_bb_aa_status_for_bb (fbi, gimple_bb (stmt), index);\n-  if (paa->parm_modified)\n+  if (paa->parm_modified || fbi->aa_walk_budget == 0)\n     return false;\n \n   gcc_checking_assert (gimple_vuse (stmt) != NULL_TREE);\n   ao_ref_init (&refd, parm_load);\n   int walked = walk_aliased_vdefs (&refd, gimple_vuse (stmt), mark_modified,\n \t\t\t\t   &modified, NULL, NULL,\n-\t\t\t\t   fbi->aa_walk_budget + 1);\n+\t\t\t\t   fbi->aa_walk_budget);\n   if (walked < 0)\n     {\n       modified = true;\n-      if (fbi)\n-\tfbi->aa_walk_budget = 0;\n+      fbi->aa_walk_budget = 0;\n     }\n-  else if (fbi)\n+  else\n     fbi->aa_walk_budget -= walked;\n   if (paa && modified)\n     paa->parm_modified = true;\n@@ -1010,14 +1016,14 @@ parm_ref_data_preserved_p (struct ipa_func_body_info *fbi,\n \n   gcc_checking_assert (fbi);\n   paa = parm_bb_aa_status_for_bb (fbi, gimple_bb (stmt), index);\n-  if (paa->ref_modified)\n+  if (paa->ref_modified || fbi->aa_walk_budget == 0)\n     return false;\n \n   gcc_checking_assert (gimple_vuse (stmt));\n   ao_ref_init (&refd, ref);\n   int walked = walk_aliased_vdefs (&refd, gimple_vuse (stmt), mark_modified,\n \t\t\t\t   &modified, NULL, NULL,\n-\t\t\t\t   fbi->aa_walk_budget + 1);\n+\t\t\t\t   fbi->aa_walk_budget);\n   if (walked < 0)\n     {\n       modified = true;\n@@ -1051,13 +1057,13 @@ parm_ref_data_pass_through_p (struct ipa_func_body_info *fbi, int index,\n   struct ipa_param_aa_status *paa = parm_bb_aa_status_for_bb (fbi,\n \t\t\t\t\t\t\t      gimple_bb (call),\n \t\t\t\t\t\t\t      index);\n-  if (paa->pt_modified)\n+  if (paa->pt_modified || fbi->aa_walk_budget == 0)\n     return false;\n \n   ao_ref_init_from_ptr_and_size (&refd, parm, NULL_TREE);\n   int walked = walk_aliased_vdefs (&refd, gimple_vuse (call), mark_modified,\n \t\t\t\t   &modified, NULL, NULL,\n-\t\t\t\t   fbi->aa_walk_budget + 1);\n+\t\t\t\t   fbi->aa_walk_budget);\n   if (walked < 0)\n     {\n       fbi->aa_walk_budget = 0;\n@@ -2040,7 +2046,8 @@ determine_known_aggregate_parts (struct ipa_func_body_info *fbi,\n      of the aggregate is affected by definition of the virtual operand, it\n      builds a sorted linked list of ipa_agg_jf_list describing that.  */\n \n-  for (tree dom_vuse = gimple_vuse (call); dom_vuse;)\n+  for (tree dom_vuse = gimple_vuse (call);\n+       dom_vuse && fbi->aa_walk_budget > 0;)\n     {\n       gimple *stmt = SSA_NAME_DEF_STMT (dom_vuse);\n \n@@ -2052,6 +2059,7 @@ determine_known_aggregate_parts (struct ipa_func_body_info *fbi,\n \t  continue;\n \t}\n \n+      fbi->aa_walk_budget--;\n       if (stmt_may_clobber_ref_p_1 (stmt, &r))\n \t{\n \t  struct ipa_known_agg_contents_list *content"}]}