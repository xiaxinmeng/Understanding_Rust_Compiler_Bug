{"sha": "c363985db8d82f3c097689203d7d805716b6d950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2Mzk4NWRiOGQ4MmYzYzA5NzY4OTIwM2Q3ZDgwNTcxNmI2ZDk1MA==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2005-03-01T09:23:26Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2005-03-01T09:23:26Z"}, "message": "libiberty.h: Declare unlink_if_ordinary.\n\ninclude/\n2005-03-01  Jan Beulich  <jbeulich@novell.com>\n\n\t* libiberty.h: Declare unlink_if_ordinary.\n\nlibiberty/\n2005-03-01  Jan Beulich  <jbeulich@novell.com>\n\n\t* Makefile.in (CFILES): Add unlink-if-ordinary.c\n\t(REQUIRED_OFILES): Add unlink-if-ordinary.o.\n\tAdd dependencies and rule for unlink-if-ordinary.o.\n\t* unlink-if-ordinary.c: New.\n\nFrom-SVN: r95732", "tree": {"sha": "44af8693fce72cb222dd5012a6fbdea0108a87bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44af8693fce72cb222dd5012a6fbdea0108a87bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c363985db8d82f3c097689203d7d805716b6d950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c363985db8d82f3c097689203d7d805716b6d950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c363985db8d82f3c097689203d7d805716b6d950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c363985db8d82f3c097689203d7d805716b6d950/comments", "author": null, "committer": null, "parents": [{"sha": "d7459fa85fa50f05654298030be3b685b07248d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7459fa85fa50f05654298030be3b685b07248d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7459fa85fa50f05654298030be3b685b07248d6"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "5d65bdcef634cfbc71195e60f4685c0d8ca50d50", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c363985db8d82f3c097689203d7d805716b6d950/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c363985db8d82f3c097689203d7d805716b6d950/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c363985db8d82f3c097689203d7d805716b6d950", "patch": "@@ -1,3 +1,7 @@\n+2005-03-01  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* libiberty.h: Declare unlink_if_ordinary.\n+\n 2005-02-14  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR bootstrap/19818"}, {"sha": "4df814092c539aba67b2bd731fcff272c07c808d", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c363985db8d82f3c097689203d7d805716b6d950/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c363985db8d82f3c097689203d7d805716b6d950/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=c363985db8d82f3c097689203d7d805716b6d950", "patch": "@@ -163,6 +163,10 @@ extern char *choose_temp_base PARAMS ((void)) ATTRIBUTE_MALLOC;\n \n extern char *make_temp_file PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n+/* Remove a link to a file unless it is special. */\n+\n+extern int unlink_if_ordinary PARAMS((const char *));\n+\n /* Allocate memory filled with spaces.  Allocates using malloc.  */\n \n extern const char *spaces PARAMS ((int count));"}, {"sha": "6cf88d2ebdd359b2334c51a9c1dcbc99002a9606", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c363985db8d82f3c097689203d7d805716b6d950", "patch": "@@ -1,3 +1,10 @@\n+2005-03-01  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* Makefile.in (CFILES): Add unlink-if-ordinary.c\n+\t(REQUIRED_OFILES): Add unlink-if-ordinary.o.\n+\tAdd dependencies and rule for unlink-if-ordinary.o.\n+\t* unlink-if-ordinary.c: New.\n+\n 2005-03-01  Ben Elliston  <bje@au.ibm.com>\n \n \t* hashtab.c (htab_find_slot_with_hash): Make function"}, {"sha": "3a2b20bff3beff5ec505d8c7a259566cb34a6c5f", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=c363985db8d82f3c097689203d7d805716b6d950", "patch": "@@ -151,6 +151,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t strerror.c strncasecmp.c strncmp.c strrchr.c strsignal.c\t\\\n \t strstr.c strtod.c strtol.c strtoul.c\t\t\t\t\\\n \tternary.c tmpnam.c\t\t\t\t\t\t\\\n+\tunlink-if-ordinary.c\t\t\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n \twaitpid.c\t\t\t\t\t\t\t\\\n \txatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c\n@@ -171,6 +172,7 @@ REQUIRED_OFILES = ./regex.o ./cplus-dem.o ./cp-demangle.o ./md5.o\t\\\n \t./safe-ctype.o ./sort.o ./spaces.o ./splay-tree.o ./strerror.o\t\\\n \t ./strsignal.o\t\t\t\t\t\t\t\\\n \t./ternary.o\t\t\t\t\t\t\t\\\n+\t./unlink-if-ordinary.o\t\t\t\t\t\t\\\n \t./xatexit.o ./xexit.o ./xmalloc.o ./xmemdup.o ./xstrdup.o\t\\\n \t ./xstrerror.o\n \n@@ -973,6 +975,13 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/tmpnam.c $(OUTPUT_OPTION)\n \n+./unlink-if-ordinary.o: $(srcdir)/unlink-if-ordinary.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/unlink-if-ordinary.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/unlink-if-ordinary.c $(OUTPUT_OPTION)\n+\n ./vasprintf.o: $(srcdir)/vasprintf.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/libiberty.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\"}, {"sha": "297b14bbc7d9e0324a0ab6632290dbf02df66abc", "filename": "libiberty/unlink-if-ordinary.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2Funlink-if-ordinary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c363985db8d82f3c097689203d7d805716b6d950/libiberty%2Funlink-if-ordinary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Funlink-if-ordinary.c?ref=c363985db8d82f3c097689203d7d805716b6d950", "patch": "@@ -0,0 +1,71 @@\n+/* unlink-if-ordinary.c - remove link to a file unless it is special\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.  This library is free\n+software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+This library is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+As a special exception, if you link this library with files\n+compiled with a GNU compiler to produce an executable, this does not cause\n+the resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why\n+the executable file might be covered by the GNU General Public License. */\n+\n+/*\n+\n+@deftypefn Supplemental int unlink_if_ordinary (const char*)\n+\n+Unlinks the named file, unless it is special (e.g. a device file).\n+Returns 0 when the file was unlinked, a negative value (and errno set) when\n+there was an error deleting the file, and a positive value if no attempt\n+was made to unlink the file because it is special.\n+\n+@end deftypefn\n+\n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#if HAVE_SYS_STAT_H\n+#include <sys/stat.h>\n+#endif\n+\n+#include \"libiberty.h\"\n+\n+#ifndef S_ISLNK\n+#ifdef S_IFLNK\n+#define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)\n+#else\n+#define S_ISLNK(m) 0\n+#define lstat stat\n+#endif\n+#endif\n+\n+int\n+unlink_if_ordinary (name)\n+  const char *name;\n+{\n+  struct stat st;\n+\n+  if (lstat (name, &st) == 0\n+      && (S_ISREG (st.st_mode) || S_ISLNK (st.st_mode)))\n+    return unlink (name);\n+\n+  return 1;\n+}"}]}