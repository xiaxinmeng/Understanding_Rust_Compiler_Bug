{"sha": "8275b011ca18ef074a86f39f67b16718e0d647fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3NWIwMTFjYTE4ZWYwNzRhODZmMzlmNjdiMTY3MThlMGQ2NDdmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-09T18:35:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-09T18:35:22Z"}, "message": "libgcc-std.ver (__clztf2): New.\n\n        * libgcc-std.ver (__clztf2): New.\n        (__ctztf2, __popcounttf2, __paritytf2): New.\n        * libgcc2.c (__clzSI2, __clzDI2, __ctzSI2, __ctzDI2, __popcountSI2,\n        __popcountDI2, __paritySI2, __parityDI2): Use UWmode and UDWmode;\n        adjust code to match the different type sizes.\n        * libgcc2.h (__clzSI2, __ctzSI2, __popcountSI2, __paritySI2,\n        __clzDI2, __ctzDI2, __popcountDI2, __parityDI2): New macros.\n\n        * optabs.c (init_integral_libfuncs): Don't hard-code SImode and\n        TImode; select word_mode and twice that.\n        (init_floating_libfuncs): Don't hard-code SFmode and TFmode;\n        select the modes from float, double, and long double.\n        (init_optabs): Remove duplicate initializations.\n\nFrom-SVN: r62606", "tree": {"sha": "c8d1fe4271c9afc4b804ffb4eb37b6fa41c21ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d1fe4271c9afc4b804ffb4eb37b6fa41c21ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8275b011ca18ef074a86f39f67b16718e0d647fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8275b011ca18ef074a86f39f67b16718e0d647fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8275b011ca18ef074a86f39f67b16718e0d647fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8275b011ca18ef074a86f39f67b16718e0d647fc/comments", "author": null, "committer": null, "parents": [{"sha": "5d4b76c0a92e9392304030f8400c760d5a674bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4b76c0a92e9392304030f8400c760d5a674bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4b76c0a92e9392304030f8400c760d5a674bd4"}], "stats": {"total": 200, "additions": 111, "deletions": 89}, "files": [{"sha": "7188c9fe0aad3a8002dc01d58ce7c10dd9be823e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8275b011ca18ef074a86f39f67b16718e0d647fc", "patch": "@@ -1,3 +1,19 @@\n+2003-02-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* libgcc-std.ver (__clztf2): New.\n+\t(__ctztf2, __popcounttf2, __paritytf2): New.\n+\t* libgcc2.c (__clzSI2, __clzDI2, __ctzSI2, __ctzDI2, __popcountSI2,\n+\t__popcountDI2, __paritySI2, __parityDI2): Use UWmode and UDWmode;\n+\tadjust code to match the different type sizes.\n+\t* libgcc2.h (__clzSI2, __ctzSI2, __popcountSI2, __paritySI2,\n+\t__clzDI2, __ctzDI2, __popcountDI2, __parityDI2): New macros.\n+\n+\t* optabs.c (init_integral_libfuncs): Don't hard-code SImode and\n+\tTImode; select word_mode and twice that.\n+\t(init_floating_libfuncs): Don't hard-code SFmode and TFmode;\n+\tselect the modes from float, double, and long double.\n+\t(init_optabs): Remove duplicate initializations.\n+\n 2003-02-09  Wolfgang Bangerth  <bangerth@ticam.utexas.edu>\n \n \t* doc/install.texi: Squeeze and streamline section on"}, {"sha": "21847be6b92eb07b6551a7c538111996805434f2", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=8275b011ca18ef074a86f39f67b16718e0d647fc", "patch": "@@ -186,10 +186,14 @@ GCC_3.4 {\n   # bit scanning and counting built-ins\n   __clzsi2\n   __clzdi2\n+  __clzti2\n   __ctzsi2\n   __ctzdi2\n+  __ctzti2\n   __popcountsi2\n   __popcountdi2\n-  __paritysi2  \n-  __paritydi2  \n+  __popcountti2\n+  __paritysi2\n+  __paritydi2\n+  __parityti2\n }"}, {"sha": "069aedb14c1d88d669c8d9a86f1dd7bd5c93f7a5", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=8275b011ca18ef074a86f39f67b16718e0d647fc", "patch": "@@ -539,41 +539,33 @@ const UQItype __clz_tab[] =\n \f\n #ifdef L_clzsi2\n #undef int\n-extern int __clzsi2 (USItype x);\n+extern int __clzSI2 (UWtype x);\n int\n-__clzsi2 (USItype x)\n+__clzSI2 (UWtype x)\n {\n-  UWtype w = x;\n   Wtype ret;\n \n-  count_leading_zeros (ret, w);\n-  ret -= (sizeof(w) - sizeof(x)) * BITS_PER_UNIT;\n+  count_leading_zeros (ret, x);\n \n   return ret;\n }\n #endif\n \f\n #ifdef L_clzdi2\n #undef int\n-extern int __clzdi2 (UDItype x);\n+extern int __clzDI2 (UDWtype x);\n int\n-__clzdi2 (UDItype x)\n+__clzDI2 (UDWtype x)\n {\n+  DWunion uu;\n   UWtype word;\n   Wtype ret, add;\n \n-  if (sizeof(x) > sizeof(word))\n-    {\n-      DWunion uu;\n-\n-      uu.ll = x;\n-      if (uu.s.high)\n-\tword = uu.s.high, add = 0;\n-      else\n-\tword = uu.s.low, add = W_TYPE_SIZE;\n-    }\n+  uu.ll = x;\n+  if (uu.s.high)\n+    word = uu.s.high, add = 0;\n   else\n-    word = x, add = (Wtype)(sizeof(x) - sizeof(word)) * BITS_PER_UNIT;\n+    word = uu.s.low, add = W_TYPE_SIZE;\n \n   count_leading_zeros (ret, word);\n   return ret + add;\n@@ -582,9 +574,9 @@ __clzdi2 (UDItype x)\n \f\n #ifdef L_ctzsi2\n #undef int\n-extern int __ctzsi2 (USItype x);\n+extern int __ctzSI2 (UWtype x);\n int\n-__ctzsi2 (USItype x)\n+__ctzSI2 (UWtype x)\n {\n   Wtype ret;\n \n@@ -596,25 +588,19 @@ __ctzsi2 (USItype x)\n \f\n #ifdef L_ctzdi2\n #undef int\n-extern int __ctzdi2 (UDItype x);\n+extern int __ctzDI2 (UDWtype x);\n int\n-__ctzdi2 (UDItype x)\n+__ctzDI2 (UDWtype x)\n {\n+  DWunion uu;\n   UWtype word;\n   Wtype ret, add;\n \n-  if (sizeof(x) > sizeof(word))\n-    {\n-      DWunion uu;\n-\n-      uu.ll = x;\n-      if (uu.s.low)\n-\tword = uu.s.low, add = 0;\n-      else\n-\tword = uu.s.high, add = W_TYPE_SIZE;\n-    }\n+  uu.ll = x;\n+  if (uu.s.low)\n+    word = uu.s.low, add = 0;\n   else\n-    word = x, add = 0;\n+    word = uu.s.high, add = W_TYPE_SIZE;\n \n   count_trailing_zeros (ret, word);\n   return ret + add;\n@@ -642,57 +628,77 @@ const UQItype __popcount_tab[] =\n \f\n #ifdef L_popcountsi2\n #undef int\n-extern int __popcountsi2 (USItype x);\n+extern int __popcountSI2 (UWtype x);\n int\n-__popcountsi2 (USItype x)\n+__popcountSI2 (UWtype x)\n {\n-  return __popcount_tab[(x >>  0) & 0xff]\n-       + __popcount_tab[(x >>  8) & 0xff]\n-       + __popcount_tab[(x >> 16) & 0xff]\n-       + __popcount_tab[(x >> 24) & 0xff];\n+  UWtype i, ret = 0;\n+\n+  for (i = 0; i < W_TYPE_SIZE; i += 8)\n+    ret += __popcount_tab[(x >> i) & 0xff];\n+\n+  return ret;\n }\n #endif\n \f\n #ifdef L_popcountdi2\n #undef int\n-extern int __popcountdi2 (UDItype x);\n+extern int __popcountDI2 (UDWtype x);\n int\n-__popcountdi2 (UDItype x)\n+__popcountDI2 (UDWtype x)\n {\n-  return __popcount_tab[(x >>  0) & 0xff]\n-       + __popcount_tab[(x >>  8) & 0xff]\n-       + __popcount_tab[(x >> 16) & 0xff]\n-       + __popcount_tab[(x >> 24) & 0xff]\n-       + __popcount_tab[(x >> 32) & 0xff]\n-       + __popcount_tab[(x >> 40) & 0xff]\n-       + __popcount_tab[(x >> 48) & 0xff]\n-       + __popcount_tab[(x >> 56) & 0xff];\n+  UWtype i, ret = 0;\n+\n+  for (i = 0; i < 2*W_TYPE_SIZE; i += 8)\n+    ret += __popcount_tab[(x >> i) & 0xff];\n+\n+  return ret;\n }\n #endif\n \f\n #ifdef L_paritysi2\n #undef int\n-extern int __paritysi2 (USItype x);\n+extern int __paritySI2 (UWtype x);\n int\n-__paritysi2 (USItype x)\n+__paritySI2 (UWtype x)\n {\n-  UWtype nx = x;\n-  nx ^= nx >> 16;\n-  nx ^= nx >> 8;\n-  nx ^= nx >> 4;\n-  nx &= 0xf;\n-  return (0x6996 >> nx) & 1;\n+#if W_TYPE_SIZE > 64\n+# error \"fill out the table\"\n+#endif\n+#if W_TYPE_SIZE > 32\n+  x ^= x >> 32;\n+#endif\n+#if W_TYPE_SIZE > 16\n+  x ^= x >> 16;\n+#endif\n+  x ^= x >> 8;\n+  x ^= x >> 4;\n+  x &= 0xf;\n+  return (0x6996 >> x) & 1;\n }\n #endif\n \f\n #ifdef L_paritydi2\n #undef int\n-extern int __paritydi2 (UDItype x);\n+extern int __parityDI2 (UDWtype x);\n int\n-__paritydi2 (UDItype x)\n+__parityDI2 (UDWtype x)\n {\n-  UWtype nx = x ^ (x >> 32);\n+  DWunion uu;\n+  UWtype nx;\n+\n+  uu.ll = x;\n+  nx = uu.s.low ^ uu.s.high;\n+\n+#if W_TYPE_SIZE > 64\n+# error \"fill out the table\"\n+#endif\n+#if W_TYPE_SIZE > 32\n+  nx ^= nx >> 32;\n+#endif\n+#if W_TYPE_SIZE > 16\n   nx ^= nx >> 16;\n+#endif\n   nx ^= nx >> 8;\n   nx ^= nx >> 4;\n   nx &= 0xf;"}, {"sha": "09c1b0810207d11a1fcaa398c3c85529b314994a", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=8275b011ca18ef074a86f39f67b16718e0d647fc", "patch": "@@ -203,7 +203,15 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define __fixunssfSI\t__NW(fixunssf,)\n \n #define __ffsSI2\t__NW(ffs,2)\n+#define __clzSI2\t__NW(clz,2)\n+#define __ctzSI2\t__NW(ctz,2)\n+#define __popcountSI2\t__NW(popcount,2)\n+#define __paritySI2\t__NW(parity,2)\n #define __ffsDI2\t__NDW(ffs,2)\n+#define __clzDI2\t__NDW(clz,2)\n+#define __ctzDI2\t__NDW(ctz,2)\n+#define __popcountDI2\t__NDW(popcount,2)\n+#define __parityDI2\t__NDW(parity,2)\n \n extern DWtype __muldi3 (DWtype, DWtype);\n extern DWtype __divdi3 (DWtype, DWtype);\n@@ -226,20 +234,6 @@ extern DWtype __lshrdi3 (DWtype, word_type);\n extern DWtype __ashldi3 (DWtype, word_type);\n extern DWtype __ashrdi3 (DWtype, word_type);\n \n-/* ??? Ought to get these named properly for DSPs.  */\n-#if BITS_PER_UNIT != 8 || MIN_UNITS_PER_WORD < 4\n-# undef L_clzsi2\n-# undef L_ctzsi2\n-# undef L_popcountsi2\n-# undef L_paritysi2\n-# if LONG_LONG_TYPE_SIZE <= 32\n-#  undef L_clzdi2\n-#  undef L_ctzdi2\n-#  undef L_popcountdi2\n-#  undef L_paritydi2\n-# endif\n-#endif\n-\n /* __udiv_w_sdiv is static inline when building other libgcc2 portions.  */\n #if (!defined(L_udivdi3) && !defined(L_divdi3) && \\\n      !defined(L_umoddi3) && !defined(L_moddi3))"}, {"sha": "fbd7bdf43a186c0d578e6c9fdb2c2b592bcd8947", "filename": "gcc/optabs.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8275b011ca18ef074a86f39f67b16718e0d647fc/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=8275b011ca18ef074a86f39f67b16718e0d647fc", "patch": "@@ -5396,7 +5396,9 @@ init_integral_libfuncs (optable, opname, suffix)\n      const char *opname;\n      int suffix;\n {\n-  init_libfuncs (optable, SImode, TImode, opname, suffix);\n+  init_libfuncs (optable, word_mode,\n+\t\t mode_for_size (2*BITS_PER_WORD, MODE_INT, 0),\n+\t\t opname, suffix);\n }\n \n /* Initialize the libfunc fields of an entire group of entries in some\n@@ -5410,7 +5412,18 @@ init_floating_libfuncs (optable, opname, suffix)\n      const char *opname;\n      int suffix;\n {\n-  init_libfuncs (optable, SFmode, TFmode, opname, suffix);\n+  enum machine_mode fmode, dmode, lmode;\n+\n+  fmode = float_type_node ? TYPE_MODE (float_type_node) : VOIDmode;\n+  dmode = double_type_node ? TYPE_MODE (double_type_node) : VOIDmode;\n+  lmode = long_double_type_node ? TYPE_MODE (long_double_type_node) : VOIDmode;\n+\n+  if (fmode != VOIDmode)\n+    init_libfuncs (optable, fmode, fmode, opname, suffix);\n+  if (dmode != fmode && dmode != VOIDmode)\n+    init_libfuncs (optable, dmode, dmode, opname, suffix);\n+  if (lmode != dmode && lmode != VOIDmode)\n+    init_libfuncs (optable, lmode, lmode, opname, suffix);\n }\n \n rtx\n@@ -5659,17 +5672,6 @@ init_optabs ()\n   /* The ffs function operates on `int'.  */\n   ffs_optab->handlers[(int) mode_for_size (INT_TYPE_SIZE, MODE_INT, 0)].libfunc\n     = init_one_libfunc (\"ffs\");\n-  ffs_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__ffsdi2\");\n-  clz_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__clzsi2\");\n-  clz_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__clzdi2\");\n-  ctz_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__ctzsi2\");\n-  ctz_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__ctzdi2\");\n-  popcount_optab->handlers[(int) SImode].libfunc\n-      = init_one_libfunc (\"__popcountsi2\");\n-  popcount_optab->handlers[(int) DImode].libfunc\n-      = init_one_libfunc (\"__popcountdi2\");\n-  parity_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__paritysi2\");\n-  parity_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__paritydi2\");\n \n   extendsfdf2_libfunc = init_one_libfunc (\"__extendsfdf2\");\n   extendsfxf2_libfunc = init_one_libfunc (\"__extendsfxf2\");"}]}