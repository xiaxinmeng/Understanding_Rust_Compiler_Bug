{"sha": "8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyYTMxMDc5ODBhMWRiODNhYjBkNGJkYzc0ZThjMDBlNTU4YjU3Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-28T11:42:46Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-28T11:42:46Z"}, "message": "Handle loop fields in IPA ICF (PR ipa/90555).\n\n2019-05-28  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/90555\n\t* ipa-icf-gimple.c (func_checker::compare_loops): New function.\n\t* ipa-icf-gimple.h (func_checker::compare_loops): Likewise.\n\t(func_checker::compare_bb): Call compare_loops.\n2019-05-28  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/90555\n\t* gcc.dg/ipa/pr90555.c: New test.\n\nFrom-SVN: r271695", "tree": {"sha": "b5ae2bf84c0e11107f83f9f18bb803bb50ba8776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ae2bf84c0e11107f83f9f18bb803bb50ba8776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abdb813b23c039aa2b8f3f66cbbe618c12fefe2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdb813b23c039aa2b8f3f66cbbe618c12fefe2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdb813b23c039aa2b8f3f66cbbe618c12fefe2b"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "4c2bb69a1c833b8305d65c555c8de0ee5003c126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "patch": "@@ -1,3 +1,10 @@\n+2019-05-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/90555\n+\t* ipa-icf-gimple.c (func_checker::compare_loops): New function.\n+\t* ipa-icf-gimple.h (func_checker::compare_loops): Likewise.\n+\t(func_checker::compare_bb): Call compare_loops.\n+\n 2019-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (gimplify_scan_omp_clauses): Allow lastprivate conditional"}, {"sha": "0713e125898718137b4c9e5a9b2fc436965e8dde", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"tree-eh.h\"\n #include \"builtins.h\"\n+#include \"cfgloop.h\"\n \n #include \"ipa-icf-gimple.h\"\n \n@@ -605,6 +606,40 @@ func_checker::compare_variable_decl (tree t1, tree t2)\n   return return_with_debug (ret);\n }\n \n+/* Compare loop information for basic blocks BB1 and BB2.  */\n+\n+bool\n+func_checker::compare_loops (basic_block bb1, basic_block bb2)\n+{\n+  if ((bb1->loop_father == NULL) != (bb2->loop_father == NULL))\n+    return return_false ();\n+\n+  struct loop *l1 = bb1->loop_father;\n+  struct loop *l2 = bb2->loop_father;\n+  if (l1 == NULL)\n+    return true;\n+\n+  if ((bb1 == l1->header) != (bb2 == l2->header))\n+    return return_false_with_msg (\"header\");\n+  if ((bb1 == l1->latch) != (bb2 == l2->latch))\n+    return return_false_with_msg (\"latch\");\n+  if (l1->simdlen != l2->simdlen)\n+    return return_false_with_msg (\"simdlen\");\n+  if (l1->safelen != l2->safelen)\n+    return return_false_with_msg (\"safelen\");\n+  if (l1->can_be_parallel != l2->can_be_parallel)\n+    return return_false_with_msg (\"can_be_parallel\");\n+  if (l1->dont_vectorize != l2->dont_vectorize)\n+    return return_false_with_msg (\"dont_vectorize\");\n+  if (l1->force_vectorize != l2->force_vectorize)\n+    return return_false_with_msg (\"force_vectorize\");\n+  if (l1->unroll != l2->unroll)\n+    return return_false_with_msg (\"unroll\");\n+  if (!compare_variable_decl (l1->simduid, l2->simduid))\n+    return return_false_with_msg (\"simduid\");\n+\n+  return true;\n+}\n \n /* Function visits all gimple labels and creates corresponding\n    mapping between basic blocks and labels.  */\n@@ -727,6 +762,9 @@ func_checker::compare_bb (sem_bb *bb1, sem_bb *bb2)\n   if (!gsi_end_p (gsi2))\n     return return_false ();\n \n+  if (!compare_loops (bb1->bb, bb2->bb))\n+    return return_false ();\n+\n   return true;\n }\n "}, {"sha": "51aadced9eabf8b5fe7b1762902064c98a08b146", "filename": "gcc/ipa-icf-gimple.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Fipa-icf-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Fipa-icf-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.h?ref=8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "patch": "@@ -226,6 +226,9 @@ class func_checker\n   /* Verifies that trees T1 and T2 do correspond.  */\n   bool compare_variable_decl (tree t1, tree t2);\n \n+  /* Compare loop information for basic blocks BB1 and BB2.  */\n+  bool compare_loops (basic_block bb1, basic_block bb2);\n+\n   /* Return true if types are compatible for polymorphic call analysis.\n      COMPARE_PTR indicates if polymorphic type comparsion should be\n      done for pointers, too.  */"}, {"sha": "fe90a4fda8ba8ee5c0b1dc9d8f4536fd9bbfc5e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "patch": "@@ -1,3 +1,8 @@\n+2019-05-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/90555\n+\t* gcc.dg/ipa/pr90555.c: New test.\n+\n 2019-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/machine_attr1.ad[sb]: New test."}, {"sha": "a9c751cd63cd3644bbe11f775229081e054ca289", "filename": "gcc/testsuite/gcc.dg/ipa/pr90555.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2a3107980a1db83ab0d4bdc74e8c00e558b57b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c?ref=8d2a3107980a1db83ab0d4bdc74e8c00e558b57b", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -O2 -mavx512f -fdump-ipa-icf\" } */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+\n+#define N 1024\n+int a[N];\n+\n+void\n+test_simdlen1 (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (4)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+test_simdlen2 (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (8)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+test_safelen1 (void)\n+{\n+  int i;\n+  #pragma omp simd safelen (4)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+test_safelen2 (void)\n+{\n+  int i;\n+  #pragma omp simd safelen (8)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+int d[1024];\n+\n+int\n+test_simduid1 (int j, int b)\n+{\n+  int l, c = 0;\n+#pragma omp simd reduction(+: c)\n+  for (l = 0; l < b; ++l)\n+    c += d[j + l];\n+  return c;\n+}\n+\n+int\n+test_simduid2 (int j, int b)\n+{\n+  int l, c2 = 0;\n+#pragma omp simd reduction(+: c2)\n+  for (l = 0; l < b; ++l)\n+    c2 += d[j + l];\n+  return c2;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:test_simduid1->test_simduid2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}]}