{"sha": "c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhMmU1ODVkM2I0ZTgyOWY0OGZjYjNjMmE4MjU1ODQ4OTBiNGZkYQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-07-31T09:55:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-31T09:55:48Z"}, "message": "[Ada] Spurious warning on iteration over range of 64-bit modular type\n\nThis patch suppresses a spurious warning on the use of a 64-bit modular type\nin a quantified expression, where the range of iteration will include a bound\nthat appears larger than the run-time representation of Universal_Integer'last.\n\n2018-07-31  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Check_Non_Static_Context): Do not warn on an\n\tinteger literal greater than the upper bound of\n\tUniversal_Integer'Last when expansion is disabled, to avoid a\n\tspurious warning over ranges involving 64-bit modular types.\n\ngcc/testsuite/\n\n\t* gnat.dg/iter3.adb: New testcase.\n\nFrom-SVN: r263095", "tree": {"sha": "2c76177eefdccd1a103a4a6318068a90456d026c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c76177eefdccd1a103a4a6318068a90456d026c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e739bf78ec49cdb24787d0447c6a44ff20a3a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e739bf78ec49cdb24787d0447c6a44ff20a3a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e739bf78ec49cdb24787d0447c6a44ff20a3a00"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "8b286057c1c4e2e31b085246a2544bdb995ac711", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "patch": "@@ -1,3 +1,10 @@\n+2018-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Check_Non_Static_Context): Do not warn on an\n+\tinteger literal greater than the upper bound of\n+\tUniversal_Integer'Last when expansion is disabled, to avoid a\n+\tspurious warning over ranges involving 64-bit modular types.\n+\n 2018-07-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* einfo.adb (Write_Entity_Flags): Also print"}, {"sha": "4560a512fb8563f263fa71d381cb1713fd6d2921", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "patch": "@@ -547,9 +547,15 @@ package body Sem_Eval is\n       --  called in contexts like the expression of a number declaration where\n       --  we certainly want to allow out of range values.\n \n+      --  We inhibit the warning when expansion is disabled, because the\n+      --  preanalysis of a range of a 64-bit modular type may appear to\n+      --  violate the constraint on non-static Universal_Integer. If there\n+      --  is a true overflow it will be diagnosed during full analysis.\n+\n       if Etype (N) = Universal_Integer\n         and then Nkind (N) = N_Integer_Literal\n         and then Nkind (Parent (N)) in N_Subexpr\n+        and then Expander_Active\n         and then\n           (Intval (N) < Expr_Value (Type_Low_Bound (Universal_Integer))\n              or else"}, {"sha": "fd3079cf9079cdc5c326a1f8e81dda9d9fb985a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "patch": "@@ -1,3 +1,7 @@\n+2018-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/iter3.adb: New testcase.\n+\n 2018-07-31  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tRevert 'AsyncI/O patch committed'"}, {"sha": "28c90a145d0d58b99dcaf4118fa091e0cd1ea202", "filename": "gcc/testsuite/gnat.dg/iter3.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Ftestsuite%2Fgnat.dg%2Fiter3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a2e585d3b4e829f48fcb3c2a825584890b4fda/gcc%2Ftestsuite%2Fgnat.dg%2Fiter3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fiter3.adb?ref=c4a2e585d3b4e829f48fcb3c2a825584890b4fda", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+procedure Iter3 is\n+   type Mod64 is mod 2 ** 64;\n+\n+   function F (X : Mod64) return Boolean is (X /= Mod64'Last);\n+begin\n+   pragma Assert (for all X in Mod64 => F(X));\n+   pragma Assert (for all X in Mod64'Range => F(X));\n+\n+  for X in Mod64'Range loop\n+      null;\n+  end loop;\n+end;"}]}