{"sha": "70df40cab6f268ba7f05c6d1421928cca0834ee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkZjQwY2FiNmYyNjhiYTdmMDVjNmQxNDIxOTI4Y2NhMDgzNGVlMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-04-08T15:16:55Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-04-08T15:16:55Z"}, "message": "Allow new/delete operator deletion only for replaceable.\n\n\tPR c++/94314\n\t* gimple.c (gimple_call_operator_delete_p): Rename to...\n\t(gimple_call_replaceable_operator_delete_p): ... this.\n\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n\t* gimple.h (gimple_call_operator_delete_p): Rename to ...\n\t(gimple_call_replaceable_operator_delete_p): ... this.\n\t* tree-core.h (tree_function_decl): Add replaceable_operator\n\tflag.\n\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1):\n\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n\t(propagate_necessity): Use gimple_call_replaceable_operator_delete_p.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n\tPack DECL_IS_REPLACEABLE_OPERATOR.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n\tUnpack the field here.\n\t* tree.h (DECL_IS_REPLACEABLE_OPERATOR): New.\n\t(DECL_IS_REPLACEABLE_OPERATOR_NEW_P): New.\n\t(DECL_IS_REPLACEABLE_OPERATOR_DELETE_P): New.\n\t* cgraph.c (cgraph_node::dump): Dump if an operator is replaceable.\n\t* ipa-icf.c (sem_item::compare_referenced_symbol_properties): Compare\n\treplaceable operator flags.\n\tPR c++/94314\n\t* decl.c (duplicate_decls): Duplicate also DECL_IS_REPLACEABLE_OPERATOR.\n\t(cxx_init_decl_processing): Mark replaceable all implicitly defined\n\toperators.\n\tPR c++/94314\n\t* lto-common.c (compare_tree_sccs_1): Compare also\n\tDECL_IS_REPLACEABLE_OPERATOR.\n\tPR c++/94314\n\t* g++.dg/pr94314-2.C: New test.\n\t* g++.dg/pr94314-3.C: New test.\n\t* g++.dg/pr94314.C: New test.", "tree": {"sha": "6e450dab8ef417ec03b6fbee3f5deeffcd5284bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e450dab8ef417ec03b6fbee3f5deeffcd5284bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70df40cab6f268ba7f05c6d1421928cca0834ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6N6ucACgkQTcGC3A+n\nN4VFHgf8C7wF826waFsOmuRjHUznrdHE8IGprGhG83CjPpQWexeexnLL48JgEv0J\ncHR0UI0UdzLNKS6CrbKdasCnqVWkYhwPnkq3qPytCuDcefpVEg3hUqi7XF0jmRwR\n5Kxsuh5aoBJk79CABXvCX4O7rfNViH49yIf3wDLxvgV2FCGH4QSAM1WlYNS8UwtK\naUTv7XZ3CHrm28uLCEy/eclhuRhkspNjWIHcZlaBprCREyetq7e+kObk6L32xc9H\nVui9TPwlrdiSaLaosQD0CxIW+ZPD0fLOLQfaxJBOICsPzY3VHuG+vRdoxdLzlrlQ\nPY/K5yMB+xdw5PD7PFqTP2Iy98faJg==\n=J4O5\n-----END PGP SIGNATURE-----", "payload": "tree 6e450dab8ef417ec03b6fbee3f5deeffcd5284bf\nparent e18cd376e0d5ffc2a2b21eba0c396a771c30e1d4\nauthor Martin Liska <mliska@suse.cz> 1586359015 +0200\ncommitter Martin Liska <mliska@suse.cz> 1586359015 +0200\n\nAllow new/delete operator deletion only for replaceable.\n\n\tPR c++/94314\n\t* gimple.c (gimple_call_operator_delete_p): Rename to...\n\t(gimple_call_replaceable_operator_delete_p): ... this.\n\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n\t* gimple.h (gimple_call_operator_delete_p): Rename to ...\n\t(gimple_call_replaceable_operator_delete_p): ... this.\n\t* tree-core.h (tree_function_decl): Add replaceable_operator\n\tflag.\n\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1):\n\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n\t(propagate_necessity): Use gimple_call_replaceable_operator_delete_p.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n\tPack DECL_IS_REPLACEABLE_OPERATOR.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n\tUnpack the field here.\n\t* tree.h (DECL_IS_REPLACEABLE_OPERATOR): New.\n\t(DECL_IS_REPLACEABLE_OPERATOR_NEW_P): New.\n\t(DECL_IS_REPLACEABLE_OPERATOR_DELETE_P): New.\n\t* cgraph.c (cgraph_node::dump): Dump if an operator is replaceable.\n\t* ipa-icf.c (sem_item::compare_referenced_symbol_properties): Compare\n\treplaceable operator flags.\n\tPR c++/94314\n\t* decl.c (duplicate_decls): Duplicate also DECL_IS_REPLACEABLE_OPERATOR.\n\t(cxx_init_decl_processing): Mark replaceable all implicitly defined\n\toperators.\n\tPR c++/94314\n\t* lto-common.c (compare_tree_sccs_1): Compare also\n\tDECL_IS_REPLACEABLE_OPERATOR.\n\tPR c++/94314\n\t* g++.dg/pr94314-2.C: New test.\n\t* g++.dg/pr94314-3.C: New test.\n\t* g++.dg/pr94314.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70df40cab6f268ba7f05c6d1421928cca0834ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70df40cab6f268ba7f05c6d1421928cca0834ee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70df40cab6f268ba7f05c6d1421928cca0834ee3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18cd376e0d5ffc2a2b21eba0c396a771c30e1d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18cd376e0d5ffc2a2b21eba0c396a771c30e1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18cd376e0d5ffc2a2b21eba0c396a771c30e1d4"}], "stats": {"total": 268, "additions": 255, "deletions": 13}, "files": [{"sha": "88e7952080702cbf902befe16dbf4a335a189caf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1,3 +1,28 @@\n+2020-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/94314\n+\t* gimple.c (gimple_call_operator_delete_p): Rename to...\n+\t(gimple_call_replaceable_operator_delete_p): ... this.\n+\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n+\t* gimple.h (gimple_call_operator_delete_p): Rename to ...\n+\t(gimple_call_replaceable_operator_delete_p): ... this.\n+\t* tree-core.h (tree_function_decl): Add replaceable_operator\n+\tflag.\n+\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1):\n+\tUse DECL_IS_REPLACEABLE_OPERATOR_DELETE_P.\n+\t(propagate_necessity): Use gimple_call_replaceable_operator_delete_p.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n+\tPack DECL_IS_REPLACEABLE_OPERATOR.\n+\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n+\tUnpack the field here.\n+\t* tree.h (DECL_IS_REPLACEABLE_OPERATOR): New.\n+\t(DECL_IS_REPLACEABLE_OPERATOR_NEW_P): New.\n+\t(DECL_IS_REPLACEABLE_OPERATOR_DELETE_P): New.\n+\t* cgraph.c (cgraph_node::dump): Dump if an operator is replaceable.\n+\t* ipa-icf.c (sem_item::compare_referenced_symbol_properties): Compare\n+\treplaceable operator flags.\n+\n 2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n \t    Matthew Malcomson  <matthew.malcomson@arm.com>\n "}, {"sha": "ecb234d032f6ec53bbf8df78fd719656a66701d5", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -2157,10 +2157,11 @@ cgraph_node::dump (FILE *f)\n   if (parallelized_function)\n     fprintf (f, \" parallelized_function\");\n   if (DECL_IS_OPERATOR_NEW_P (decl))\n-    fprintf (f, \" operator_new\");\n+    fprintf (f, \" %soperator_new\",\n+\t     DECL_IS_REPLACEABLE_OPERATOR (decl) ? \"replaceable_\" : \"\");\n   if (DECL_IS_OPERATOR_DELETE_P (decl))\n-    fprintf (f, \" operator_delete\");\n-\n+    fprintf (f, \" %soperator_delete\",\n+\t     DECL_IS_REPLACEABLE_OPERATOR (decl) ? \"replaceable_\" : \"\");\n \n   fprintf (f, \"\\n\");\n "}, {"sha": "7c5edc266d60e82d9ef336cf7db75b3c9380060c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1,3 +1,10 @@\n+2020-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/94314\n+\t* decl.c (duplicate_decls): Duplicate also DECL_IS_REPLACEABLE_OPERATOR.\n+\t(cxx_init_decl_processing): Mark replaceable all implicitly defined\n+\toperators.\n+\n 2020-04-08  Patrick Palka  <ppalka@redhat.com>\n \n \tCore issues 1001 and 1322"}, {"sha": "a6a1340e63179f1d7719361b49878e2940955987", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -2368,6 +2368,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    DECL_SET_IS_OPERATOR_NEW (newdecl, true);\n \t  DECL_LOOPING_CONST_OR_PURE_P (newdecl)\n \t    |= DECL_LOOPING_CONST_OR_PURE_P (olddecl);\n+\t  DECL_IS_REPLACEABLE_OPERATOR (newdecl)\n+\t    |= DECL_IS_REPLACEABLE_OPERATOR (olddecl);\n \n \t  if (merge_attr)\n \t    merge_attribute_bits (newdecl, olddecl);\n@@ -4438,13 +4440,17 @@ cxx_init_decl_processing (void)\n     tree opnew = push_cp_library_fn (NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n     DECL_SET_IS_OPERATOR_NEW (opnew, true);\n+    DECL_IS_REPLACEABLE_OPERATOR (opnew) = 1;\n     opnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n     DECL_SET_IS_OPERATOR_NEW (opnew, true);\n+    DECL_IS_REPLACEABLE_OPERATOR (opnew) = 1;\n     tree opdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n     DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+    DECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n     opdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n     DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+    DECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n     if (flag_sized_deallocation)\n       {\n \t/* Also push the sized deallocation variants:\n@@ -4458,8 +4464,10 @@ cxx_init_decl_processing (void)\n \tdeltype = build_exception_variant (deltype, empty_except_spec);\n \topdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n \tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n \topdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n \tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n       }\n \n     if (aligned_new_threshold)\n@@ -4478,9 +4486,11 @@ cxx_init_decl_processing (void)\n \topnew = push_cp_library_fn (NEW_EXPR, newtype, 0);\n \tDECL_IS_MALLOC (opnew) = 1;\n \tDECL_SET_IS_OPERATOR_NEW (opnew, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opnew) = 1;\n \topnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n \tDECL_IS_MALLOC (opnew) = 1;\n \tDECL_SET_IS_OPERATOR_NEW (opnew, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opnew) = 1;\n \n \t/* operator delete (void *, align_val_t); */\n \tdeltype = build_function_type_list (void_type_node, ptr_type_node,\n@@ -4489,8 +4499,10 @@ cxx_init_decl_processing (void)\n \tdeltype = build_exception_variant (deltype, empty_except_spec);\n \topdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n \tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n \topdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n \tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\tDECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n \n \tif (flag_sized_deallocation)\n \t  {\n@@ -4502,8 +4514,10 @@ cxx_init_decl_processing (void)\n \t    deltype = build_exception_variant (deltype, empty_except_spec);\n \t    opdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n \t    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\t    DECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n \t    opdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n \t    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\t    DECL_IS_REPLACEABLE_OPERATOR (opdel) = 1;\n \t  }\n       }\n "}, {"sha": "10c562f4deffdd7237be2663aefb1594c1a8c426", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -2730,15 +2730,15 @@ gimple_builtin_call_types_compatible_p (const gimple *stmt, tree fndecl)\n   return true;\n }\n \n-/* Return true when STMT is operator delete call.  */\n+/* Return true when STMT is operator a replaceable delete call.  */\n \n bool\n-gimple_call_operator_delete_p (const gcall *stmt)\n+gimple_call_replaceable_operator_delete_p (const gcall *stmt)\n {\n   tree fndecl;\n \n   if ((fndecl = gimple_call_fndecl (stmt)) != NULL_TREE)\n-    return DECL_IS_OPERATOR_DELETE_P (fndecl);\n+    return DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (fndecl);\n   return false;\n }\n "}, {"sha": "ca7fec6247ea64286ff15c15a81e131acd60c86c", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1615,7 +1615,7 @@ extern alias_set_type gimple_get_alias_set (tree);\n extern bool gimple_ior_addresses_taken (bitmap, gimple *);\n extern bool gimple_builtin_call_types_compatible_p (const gimple *, tree);\n extern combined_fn gimple_call_combined_fn (const gimple *);\n-extern bool gimple_call_operator_delete_p (const gcall *);\n+extern bool gimple_call_replaceable_operator_delete_p (const gcall *);\n extern bool gimple_call_builtin_p (const gimple *);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_class);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_function);"}, {"sha": "069de9d82fb3e2c6385b54b412e9e81a6993ab1c", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -347,6 +347,10 @@ sem_item::compare_referenced_symbol_properties (symtab_node *used_by,\n       if (DECL_IS_OPERATOR_NEW_P (n1->decl)\n \t  != DECL_IS_OPERATOR_NEW_P (n2->decl))\n \treturn return_false_with_msg (\"operator new flags are different\");\n+\n+      if (DECL_IS_REPLACEABLE_OPERATOR (n1->decl)\n+\t  != DECL_IS_REPLACEABLE_OPERATOR (n2->decl))\n+\treturn return_false_with_msg (\"replaceable operator flags are different\");\n     }\n \n   /* Merging two definitions with a reference to equivalent vtables, but"}, {"sha": "829b26d40051ac57ff29c3e6c68862a53fbbfbe6", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1,3 +1,9 @@\n+2020-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/94314\n+\t* lto-common.c (compare_tree_sccs_1): Compare also\n+\tDECL_IS_REPLACEABLE_OPERATOR.\n+\n 2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94223"}, {"sha": "e073abce2e732a0a25e6280a4136cf4135a94abe", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1236,6 +1236,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_DISREGARD_INLINE_LIMITS);\n       compare_values (DECL_PURE_P);\n       compare_values (DECL_LOOPING_CONST_OR_PURE_P);\n+      compare_values (DECL_IS_REPLACEABLE_OPERATOR);\n       compare_values (DECL_FINAL_P);\n       compare_values (DECL_CXX_CONSTRUCTOR_P);\n       compare_values (DECL_CXX_DESTRUCTOR_P);"}, {"sha": "a420deaad0554dac95714c451c005d07ae7d44ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1,3 +1,10 @@\n+2020-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/94314\n+\t* g++.dg/pr94314-2.C: New test.\n+\t* g++.dg/pr94314-3.C: New test.\n+\t* g++.dg/pr94314.C: New test.\n+\n 2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/acle/cde_v_1.c: New test."}, {"sha": "36b93ed6d4d3601e9bb35cafe6e6861c4cd0fce7", "filename": "gcc/testsuite/g++.dg/pr94314-2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -0,0 +1,26 @@\n+/* PR c++/94314.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-cddce-details\" } */\n+/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n+\n+#include <stdio.h>\n+\n+struct A\n+{\n+  __attribute__((always_inline)) A(int x)\n+  {\n+    if (x == 123)\n+      throw x;\n+  }\n+};\n+\n+int\n+main(int argc, char **argv)\n+{\n+  A *a = new A (argc);\n+  delete a;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleting : operator delete\" 2 \"cddce1\"} } */"}, {"sha": "a5b1013929040bdf4154eb84732f51443bab051d", "filename": "gcc/testsuite/g++.dg/pr94314-3.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -0,0 +1,55 @@\n+/* PR c++/94314.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --param early-inlining-insns=100 -fdump-tree-cddce-details\" } */\n+/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n+\n+#include <stdio.h>\n+\n+volatile int idx;\n+\n+struct base\n+{\n+  __attribute__ ((malloc, noinline)) static void *\n+  operator new (unsigned long sz)\n+  {\n+    return ::operator new (sz);\n+  }\n+\n+  __attribute__ ((noinline)) static void operator delete (void *ptr)\n+  {\n+    int c = count[idx];\n+    count[idx] = c - 1;\n+    ::operator delete (ptr);\n+  }\n+  volatile static int count[2];\n+};\n+\n+volatile int base::count[2] = {0, 0};\n+\n+struct B : base\n+{\n+  static void *operator new (unsigned long sz)\n+  {\n+    int c = count[idx];\n+    count[idx] = c + 1;\n+    return base::operator new (sz);\n+  }\n+};\n+\n+volatile int c = 1;\n+\n+int\n+main ()\n+{\n+  for (int i; i < c; i++)\n+    {\n+      idx = 0;\n+      delete new B;\n+      if (B::count[0] != 0)\n+\t__builtin_abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Deleting : operator delete\" \"cddce1\"} } */"}, {"sha": "a06800d2219b98d5f650e4567dfd307ae4db36ce", "filename": "gcc/testsuite/g++.dg/pr94314.C", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -0,0 +1,85 @@\n+/* PR c++/94314.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-cddce-details\" } */\n+/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n+\n+#include <stdio.h>\n+\n+struct A\n+{\n+  __attribute__((malloc,noinline))\n+  static void* operator new(unsigned long sz)\n+  {\n+    ++count;\n+    return ::operator new(sz);\n+  }\n+\n+  static void operator delete(void* ptr)\n+  {\n+    --count;\n+    ::operator delete(ptr);\n+  }\n+\n+  static int count;\n+};\n+\n+int A::count = 0;\n+\n+struct B\n+{\n+  __attribute__((malloc,noinline))\n+  static void* operator new(unsigned long sz)\n+  {\n+    ++count;\n+    return ::operator new(sz);\n+  }\n+\n+  __attribute__((noinline))\n+  static void operator delete(void* ptr)\n+  {\n+    --count;\n+    ::operator delete(ptr);\n+  }\n+\n+  static int count;\n+};\n+\n+int B::count = 0;\n+\n+struct C\n+{\n+  static void* operator new(unsigned long sz)\n+  {\n+    ++count;\n+    return ::operator new(sz);\n+  }\n+\n+  static void operator delete(void* ptr)\n+  {\n+    --count;\n+    ::operator delete(ptr);\n+  }\n+\n+  static int count;\n+};\n+\n+int C::count = 0;\n+\n+int main(){\n+  delete new A;\n+  if (A::count != 0)\n+    __builtin_abort ();\n+\n+  delete new B;\n+  if (B::count != 0)\n+    __builtin_abort ();\n+\n+  delete new C;\n+  if (C::count != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleting : operator delete\" 1 \"cddce1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleting : B::operator delete\" \"cddce1\"} } */"}, {"sha": "d84fe959acccc98a31a75f368b4e9e414c545ade", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -1896,8 +1896,9 @@ struct GTY(()) tree_function_decl {\n   ENUM_BITFIELD(function_decl_type) decl_type: 2;\n   unsigned has_debug_args_flag : 1;\n   unsigned versioned_function : 1;\n+  unsigned replaceable_operator : 1;\n \n-  /* 12 bits left for future expansion.  */\n+  /* 11 bits left for future expansion.  */\n };\n \n struct GTY(()) tree_translation_unit_decl {"}, {"sha": "fd5f24c746ca0359fdf5f883bfefeaf87e473848", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -614,7 +614,7 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \n       if (callee != NULL_TREE\n \t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n-\t      || DECL_IS_OPERATOR_DELETE_P (callee)))\n+\t      || DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (callee)))\n \treturn false;\n     }\n \n@@ -806,7 +806,7 @@ propagate_necessity (bool aggressive)\n \t     processing the argument.  */\n \t  bool is_delete_operator\n \t    = (is_gimple_call (stmt)\n-\t       && gimple_call_operator_delete_p (as_a <gcall *> (stmt)));\n+\t       && gimple_call_replaceable_operator_delete_p (as_a <gcall *> (stmt)));\n \t  if (is_delete_operator\n \t      || gimple_call_builtin_p (stmt, BUILT_IN_FREE))\n \t    {\n@@ -896,7 +896,7 @@ propagate_necessity (bool aggressive)\n \n \t      if (callee != NULL_TREE\n \t\t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n-\t\t      || DECL_IS_OPERATOR_DELETE_P (callee)))\n+\t\t      || DECL_IS_REPLACEABLE_OPERATOR_DELETE_P (callee)))\n \t\tcontinue;\n \n \t      /* Calls implicitly load from memory, their arguments\n@@ -1321,7 +1321,7 @@ eliminate_unnecessary_stmts (void)\n \t  if (gimple_plf (stmt, STMT_NECESSARY)\n \t      && (gimple_call_builtin_p (stmt, BUILT_IN_FREE)\n \t\t  || (is_gimple_call (stmt)\n-\t\t      && gimple_call_operator_delete_p (as_a <gcall *> (stmt)))))\n+\t\t      && gimple_call_replaceable_operator_delete_p (as_a <gcall *> (stmt)))))\n \t    {\n \t      tree ptr = gimple_call_arg (stmt, 0);\n \t      if (TREE_CODE (ptr) == SSA_NAME)"}, {"sha": "0bfc272d0763d569d4037963f1a93f79387a15fc", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -343,6 +343,7 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_DISREGARD_INLINE_LIMITS (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_LOOPING_CONST_OR_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  DECL_IS_REPLACEABLE_OPERATOR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   unsigned int fcode = 0;\n   if (cl != NOT_BUILT_IN)\n     {"}, {"sha": "5bbcebba87ed2dacdd07fe12cd249bf6275aebc6", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -305,6 +305,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_DISREGARD_INLINE_LIMITS (expr), 1);\n   bp_pack_value (bp, DECL_PURE_P (expr), 1);\n   bp_pack_value (bp, DECL_LOOPING_CONST_OR_PURE_P (expr), 1);\n+  bp_pack_value (bp, DECL_IS_REPLACEABLE_OPERATOR (expr), 1);\n   if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n     bp_pack_value (bp, DECL_UNCHECKED_FUNCTION_CODE (expr), 32);\n }"}, {"sha": "1c28785d411f1c4d92597333356a7e2de3e3c2e3", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70df40cab6f268ba7f05c6d1421928cca0834ee3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=70df40cab6f268ba7f05c6d1421928cca0834ee3", "patch": "@@ -3037,14 +3037,19 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n     FUNCTION_DECL_DECL_TYPE (decl) = NONE;\n }\n \n+/* Nonzero in a FUNCTION_DECL means this function is a replaceable\n+   function (like replaceable operators new or delete).  */\n+#define DECL_IS_REPLACEABLE_OPERATOR(NODE)\\\n+   (FUNCTION_DECL_CHECK (NODE)->function_decl.replaceable_operator)\n+\n /* Nonzero in a FUNCTION_DECL means this function should be treated as\n    C++ operator new, meaning that it returns a pointer for which we\n    should not use type based aliasing.  */\n #define DECL_IS_OPERATOR_NEW_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_NEW)\n \n #define DECL_IS_REPLACEABLE_OPERATOR_NEW_P(NODE) \\\n-  (DECL_IS_OPERATOR_NEW_P (NODE) && DECL_IS_MALLOC (NODE))\n+  (DECL_IS_OPERATOR_NEW_P (NODE) && DECL_IS_REPLACEABLE_OPERATOR (NODE))\n \n #define DECL_SET_IS_OPERATOR_NEW(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_NEW, VAL)\n@@ -3054,6 +3059,9 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n #define DECL_IS_OPERATOR_DELETE_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_DELETE)\n \n+#define DECL_IS_REPLACEABLE_OPERATOR_DELETE_P(NODE) \\\n+  (DECL_IS_OPERATOR_DELETE_P (NODE) && DECL_IS_REPLACEABLE_OPERATOR (NODE))\n+\n #define DECL_SET_IS_OPERATOR_DELETE(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_DELETE, VAL)\n "}]}