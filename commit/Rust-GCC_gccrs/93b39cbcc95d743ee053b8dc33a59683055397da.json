{"sha": "93b39cbcc95d743ee053b8dc33a59683055397da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiMzljYmNjOTVkNzQzZWUwNTNiOGRjMzNhNTk2ODMwNTUzOTdkYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-31T09:10:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-31T09:10:01Z"}, "message": "copysign1.c: Special case sizeof long double for intel double extended format.\n\n        * gcc.c-torture/execute/ieee/copysign1.c: Special case sizeof\n        long double for intel double extended format.\n        * gcc.c-torture/execute/ieee/copysign2.c: Likewise.\n\nFrom-SVN: r94472", "tree": {"sha": "6637e1e193d4d1984d188ce81fa7d4b39ef04825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6637e1e193d4d1984d188ce81fa7d4b39ef04825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b39cbcc95d743ee053b8dc33a59683055397da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b39cbcc95d743ee053b8dc33a59683055397da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b39cbcc95d743ee053b8dc33a59683055397da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b39cbcc95d743ee053b8dc33a59683055397da/comments", "author": null, "committer": null, "parents": [{"sha": "ae3946599e779ef6d8e64ef375b100946d36acc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3946599e779ef6d8e64ef375b100946d36acc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3946599e779ef6d8e64ef375b100946d36acc5"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "648c97b6a01047b2848ce6ef77d1fc5e5cf50837", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93b39cbcc95d743ee053b8dc33a59683055397da", "patch": "@@ -1,3 +1,9 @@\n+2005-01-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/execute/ieee/copysign1.c: Special case sizeof\n+\tlong double for intel double extended format.\n+\t* gcc.c-torture/execute/ieee/copysign2.c: Likewise.\n+\n 2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19555"}, {"sha": "6f6a215ad489d0ad03b69edea709e1ea1fda0d49", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/copysign1.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c?ref=93b39cbcc95d743ee053b8dc33a59683055397da", "patch": "@@ -1,5 +1,22 @@\n #include <string.h>\n #include <stdlib.h>\n+#include <float.h>\n+\n+#define fpsizeoff\tsizeof(float)\n+#define fpsizeof\tsizeof(double)\n+#define fpsizeofl\tsizeof(long double)\n+\n+/* Work around the fact that with the Intel double-extended precision,\n+   we've got a 10 byte type stuffed into some amount of padding.  And\n+   the fact that -ffloat-store is going to stuff this value temporarily\n+   into some bit of stack frame that we've no control over and can't zero.  */\n+#if LDBL_MANT_DIG == 64\n+# if defined(__i386__) || defined(__x86_64__) || defined (__ia64__)\n+#  undef fpsizeofl\n+#  define fpsizeofl\t10\n+# endif\n+#endif\n+\n \n #define TEST(TYPE, EXT)\t\t\t\t\t\t\\\n TYPE c##EXT (TYPE x, TYPE y)\t\t\t\t\t\\\n@@ -25,12 +42,10 @@ void test##EXT (void)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   int i, n = sizeof (T##EXT) / sizeof (T##EXT[0]);\t\t\\\n   TYPE r;\t\t\t\t\t\t\t\\\n-  /* Make sure to avoid comparing unused bits in the type.  */\t\\\n-  memset (&r, 0, sizeof r);\t\t\t\t\t\\\n   for (i = 0; i < n; ++i)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       r = c##EXT (T##EXT[i].x, T##EXT[i].y);\t\t\t\\\n-      if (memcmp (&r, &T##EXT[i].z, sizeof r) != 0)\t\t\\\n+      if (memcmp (&r, &T##EXT[i].z, fpsizeof##EXT) != 0)\t\\\n \tabort ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }"}, {"sha": "a39d11574f2e48f3ee21f1b347847938444a318d", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/copysign2.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b39cbcc95d743ee053b8dc33a59683055397da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c?ref=93b39cbcc95d743ee053b8dc33a59683055397da", "patch": "@@ -1,5 +1,23 @@\n #include <string.h>\n #include <stdlib.h>\n+#include <float.h>\n+\n+#define fpsizeoff\tsizeof(float)\n+#define fpsizeof\tsizeof(double)\n+#define fpsizeofl\tsizeof(long double)\n+\n+/* Work around the fact that with the Intel double-extended precision,\n+   we've got a 10 byte type stuffed into some amount of padding.  And\n+   the fact that -ffloat-store is going to stuff this value temporarily\n+   into some bit of stack frame that we've no control over and can't zero.  */\n+#if LDBL_MANT_DIG == 64\n+# if defined(__i386__) || defined(__x86_64__) || defined (__ia64__)\n+#  undef fpsizeofl\n+#  define fpsizeofl\t10\n+# endif\n+#endif\n+\n+\n \n #define TEST(TYPE, EXT)\t\t\t\t\t\t\\\n static TYPE Y##EXT[] = {\t\t\t\t\t\\\n@@ -13,8 +31,7 @@ static const TYPE Z##EXT[] = {\t\t\t\t\t\\\n void test##EXT (void)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   TYPE r[8];\t\t\t\t\t\t\t\\\n-  /* Make sure to avoid comparing unused bits in the type.  */\t\\\n-  memset (r, 0, sizeof r);\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n   r[0] = __builtin_copysign##EXT (1.0, Y##EXT[0]);\t\t\\\n   r[1] = __builtin_copysign##EXT (1.0, Y##EXT[1]);\t\t\\\n   r[2] = __builtin_copysign##EXT (-1.0, Y##EXT[2]);\t\t\\\n@@ -23,8 +40,9 @@ void test##EXT (void)\t\t\t\t\t\t\\\n   r[5] = __builtin_copysign##EXT (-0.0, Y##EXT[5]);\t\t\\\n   r[6] = __builtin_copysign##EXT (__builtin_inf##EXT (), Y##EXT[6]); \\\n   r[7] = __builtin_copysign##EXT (-__builtin_nan##EXT (\"\"), Y##EXT[7]); \\\n-  if (memcmp (r, Z##EXT, sizeof r) != 0)\t\t\t\\\n-    abort ();\t\t\t\t\t\t\t\\\n+  for (i = 0; i < 8; ++i)\t\t\t\t\t\\\n+    if (memcmp (r+i, Z##EXT+i, fpsizeof##EXT) != 0)\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n }\n \n TEST(float, f)"}]}