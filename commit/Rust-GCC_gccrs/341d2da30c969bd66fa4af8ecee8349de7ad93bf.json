{"sha": "341d2da30c969bd66fa4af8ecee8349de7ad93bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxZDJkYTMwYzk2OWJkNjZmYTRhZjhlY2VlODM0OWRlN2FkOTNiZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-17T19:54:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-17T19:54:10Z"}, "message": "i386.c (ix86_function_arg): Nest TARGET_64BIT code.\n\n\t* config/i386/i386.c (ix86_function_arg): Nest TARGET_64BIT code.\n\t(ix86_function_arg_advance): Ditto.\n\t(ix86_pass_by_reference): Ditto.  Rewrite MS_ABI part.\n\nFrom-SVN: r224576", "tree": {"sha": "1e13fedf202ea906b30f74189278bc1a71049e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e13fedf202ea906b30f74189278bc1a71049e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341d2da30c969bd66fa4af8ecee8349de7ad93bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341d2da30c969bd66fa4af8ecee8349de7ad93bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341d2da30c969bd66fa4af8ecee8349de7ad93bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341d2da30c969bd66fa4af8ecee8349de7ad93bf/comments", "author": null, "committer": null, "parents": [{"sha": "2bb8cb5896c5133b9397da7ab97127c062a774b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb8cb5896c5133b9397da7ab97127c062a774b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb8cb5896c5133b9397da7ab97127c062a774b3"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "e71021725e9ef23e6dbdf020fd0315b2f4582cc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341d2da30c969bd66fa4af8ecee8349de7ad93bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341d2da30c969bd66fa4af8ecee8349de7ad93bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341d2da30c969bd66fa4af8ecee8349de7ad93bf", "patch": "@@ -1,3 +1,9 @@\n+2015-06-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_function_arg): Nest TARGET_64BIT code.\n+\t(ix86_function_arg_advance): Ditto.\n+\t(ix86_pass_by_reference): Ditto.  Rewrite MS_ABI part.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* function.h (struct rtl_data): Remove struct and accessor macros.\n@@ -37,11 +43,11 @@\n \n 2017-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* tree-core.h (tree_target_option): Make opts field a pointer to a \n+\t* tree-core.h (tree_target_option): Make opts field a pointer to a\n \tcl_target_option instead of an instance of the struct.\n \t* tree.h (TREE_TARGET_OPTION): Return the pointer, not an address of\n \tthe structure.\n-\t* tree.c (make_node_stat ): Allocate a cl_target_option struct for \n+\t* tree.c (make_node_stat ): Allocate a cl_target_option struct for\n \tTARGET_OPTION_NODE.\n \t(copy_node_stat): Allocate and copy struct cl_target_option.\n "}, {"sha": "bd548a969fb24c5334fd8f7c7896ce741257a3ce", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341d2da30c969bd66fa4af8ecee8349de7ad93bf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341d2da30c969bd66fa4af8ecee8349de7ad93bf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=341d2da30c969bd66fa4af8ecee8349de7ad93bf", "patch": "@@ -7657,10 +7657,15 @@ ix86_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n       cum->force_bnd_pass = 0;\n     }\n \n-  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n-    nregs = function_arg_advance_ms_64 (cum, bytes, words);\n-  else if (TARGET_64BIT)\n-    nregs = function_arg_advance_64 (cum, mode, type, words, named);\n+  if (TARGET_64BIT)\n+    {\n+      enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n+\n+      if (call_abi == MS_ABI)\n+\tnregs = function_arg_advance_ms_64 (cum, bytes, words);\n+      else\n+\tnregs = function_arg_advance_64 (cum, mode, type, words, named);\n+    }\n   else\n     nregs = function_arg_advance_32 (cum, mode, type, bytes, words);\n \n@@ -7947,10 +7952,15 @@ ix86_function_arg (cumulative_args_t cum_v, machine_mode omode,\n   if (type && TREE_CODE (type) == VECTOR_TYPE)\n     mode = type_natural_mode (type, cum, false);\n \n-  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n-    arg = function_arg_ms_64 (cum, mode, omode, named, bytes);\n-  else if (TARGET_64BIT)\n-    arg = function_arg_64 (cum, mode, omode, type, named);\n+  if (TARGET_64BIT)\n+    {\n+      enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n+\n+      if (call_abi == MS_ABI)\n+\targ = function_arg_ms_64 (cum, mode, omode, named, bytes);\n+      else\n+\targ = function_arg_64 (cum, mode, omode, type, named);\n+    }\n   else\n     arg = function_arg_32 (cum, mode, omode, type, bytes, words);\n \n@@ -7974,36 +7984,37 @@ ix86_pass_by_reference (cumulative_args_t cum_v, machine_mode mode,\n       || POINTER_BOUNDS_MODE_P (mode))\n     return false;\n \n-  /* See Windows x64 Software Convention.  */\n-  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n+  if (TARGET_64BIT)\n     {\n-      int msize = (int) GET_MODE_SIZE (mode);\n-      if (type)\n+      enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n+\n+      /* See Windows x64 Software Convention.  */\n+      if (call_abi == MS_ABI)\n \t{\n-\t  /* Arrays are passed by reference.  */\n-\t  if (TREE_CODE (type) == ARRAY_TYPE)\n-\t    return true;\n+\t  HOST_WIDE_INT msize = GET_MODE_SIZE (mode);\n \n-\t  if (AGGREGATE_TYPE_P (type))\n+\t  if (type)\n \t    {\n-\t      /* Structs/unions of sizes other than 8, 16, 32, or 64 bits\n-\t         are passed by reference.  */\n-\t      msize = int_size_in_bytes (type);\n+\t      /* Arrays are passed by reference.  */\n+\t      if (TREE_CODE (type) == ARRAY_TYPE)\n+\t\treturn true;\n+\n+\t      if (RECORD_OR_UNION_TYPE_P (type))\n+\t\t{\n+\t\t  /* Structs/unions of sizes other than 8, 16, 32, or 64 bits\n+\t\t     are passed by reference.  */\n+\t\t  msize = int_size_in_bytes (type);\n+\t\t}\n \t    }\n-\t}\n \n-      /* __m128 is passed by reference.  */\n-      switch (msize) {\n-      case 1: case 2: case 4: case 8:\n-        break;\n-      default:\n-        return true;\n-      }\n+\t  /* __m128 is passed by reference.  */\n+\t  return msize != 1 && msize != 2 && msize != 4 && msize != 8;\n+\t}\n+      else if (type && int_size_in_bytes (type) == -1)\n+\treturn true;\n     }\n-  else if (TARGET_64BIT && type && int_size_in_bytes (type) == -1)\n-    return 1;\n \n-  return 0;\n+  return false;\n }\n \n /* Return true when TYPE should be 128bit aligned for 32bit argument"}]}