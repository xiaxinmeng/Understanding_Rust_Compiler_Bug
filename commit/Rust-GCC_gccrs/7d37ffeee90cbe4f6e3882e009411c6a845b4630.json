{"sha": "7d37ffeee90cbe4f6e3882e009411c6a845b4630", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzN2ZmZWVlOTBjYmU0ZjZlMzg4MmUwMDk0MTFjNmE4NDViNDYzMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-10-12T14:55:47Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-10-12T14:55:47Z"}, "message": "Add selftest::read_file\n\ngcc/ChangeLog:\n\t* selftest.c (selftest::read_file): New function.\n\t(selftest::test_read_file): New function.\n\t(selftest::selftest_c_tests): Call test_read_file.\n\t* selftest.h (selftest::read_file): New decl.\n\nFrom-SVN: r241055", "tree": {"sha": "a22a8a2aa4940831b986332ea86b0125547dedfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22a8a2aa4940831b986332ea86b0125547dedfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d37ffeee90cbe4f6e3882e009411c6a845b4630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d37ffeee90cbe4f6e3882e009411c6a845b4630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d37ffeee90cbe4f6e3882e009411c6a845b4630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d37ffeee90cbe4f6e3882e009411c6a845b4630/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f92d15222878878d23dcc0ab54d4e3e7660608d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92d15222878878d23dcc0ab54d4e3e7660608d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92d15222878878d23dcc0ab54d4e3e7660608d2"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "ff670802ce5bd522160fa11c37cbbca4725b9b58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d37ffeee90cbe4f6e3882e009411c6a845b4630", "patch": "@@ -1,3 +1,10 @@\n+2016-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* selftest.c (selftest::read_file): New function.\n+\t(selftest::test_read_file): New function.\n+\t(selftest::selftest_c_tests): Call test_read_file.\n+\t* selftest.h (selftest::read_file): New decl.\n+\n 2016-10-12  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/77947"}, {"sha": "2a729be9b5e59637d1ffd2520584d3c842b1aa33", "filename": "gcc/selftest.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=7d37ffeee90cbe4f6e3882e009411c6a845b4630", "patch": "@@ -151,6 +151,53 @@ temp_source_file::temp_source_file (const location &loc,\n   fclose (out);\n }\n \n+/* Read the contents of PATH into memory, returning a 0-terminated buffer\n+   that must be freed by the caller.\n+   Fail (and abort) if there are any problems, with LOC as the reported\n+   location of the failure.  */\n+\n+char *\n+read_file (const location &loc, const char *path)\n+{\n+  FILE *f_in = fopen (path, \"r\");\n+  if (!f_in)\n+    fail_formatted (loc, \"unable to open file: %s\", path);\n+\n+  /* Read content, allocating FIXME.  */\n+  char *result = NULL;\n+  size_t total_sz = 0;\n+  size_t alloc_sz = 0;\n+  char buf[4096];\n+  size_t iter_sz_in;\n+\n+  while ( (iter_sz_in = fread (buf, 1, sizeof (buf), f_in)) )\n+    {\n+      gcc_assert (alloc_sz >= total_sz);\n+      size_t old_total_sz = total_sz;\n+      total_sz += iter_sz_in;\n+      /* Allow 1 extra byte for 0-termination.  */\n+      if (alloc_sz < (total_sz + 1))\n+\t{\n+\t  size_t new_alloc_sz = alloc_sz ? alloc_sz * 2: total_sz + 1;\n+\t  result = (char *)xrealloc (result, new_alloc_sz);\n+\t  alloc_sz = new_alloc_sz;\n+\t}\n+      memcpy (result + old_total_sz, buf, iter_sz_in);\n+    }\n+\n+  if (!feof (f_in))\n+    fail_formatted (loc, \"error reading from %s: %s\", path,\n+\t\t    xstrerror (errno));\n+\n+  fclose (f_in);\n+\n+  /* 0-terminate the buffer.  */\n+  gcc_assert (total_sz < alloc_sz);\n+  result[total_sz] = '\\0';\n+\n+  return result;\n+}\n+\n /* Selftests for the selftest system itself.  */\n \n /* Sanity-check the ASSERT_ macros with various passing cases.  */\n@@ -181,13 +228,26 @@ test_named_temp_file ()\n   fclose (f);\n }\n \n+/* Verify read_file (and also temp_source_file).  */\n+\n+static void\n+test_read_file ()\n+{\n+  temp_source_file t (SELFTEST_LOCATION, \"test1.s\",\n+\t\t      \"\\tjmp\\t.L2\\n\");\n+  char *buf = read_file (SELFTEST_LOCATION, t.get_filename ());\n+  ASSERT_STREQ (\"\\tjmp\\t.L2\\n\", buf);\n+  free (buf);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n selftest_c_tests ()\n {\n   test_assertions ();\n   test_named_temp_file ();\n+  test_read_file ();\n }\n \n } // namespace selftest"}, {"sha": "1a55e4b836e92ef0e0f96d08b8af55fd15803ef3", "filename": "gcc/selftest.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d37ffeee90cbe4f6e3882e009411c6a845b4630/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=7d37ffeee90cbe4f6e3882e009411c6a845b4630", "patch": "@@ -146,6 +146,13 @@ class line_table_test\n extern void\n for_each_line_table_case (void (*testcase) (const line_table_case &));\n \n+/* Read the contents of PATH into memory, returning a 0-terminated buffer\n+   that must be freed by the caller.\n+   Fail (and abort) if there are any problems, with LOC as the reported\n+   location of the failure.  */\n+\n+extern char *read_file (const location &loc, const char *path);\n+\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();"}]}