{"sha": "48188959fd8a9bb1d7da833466f314210693bc11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxODg5NTlmZDhhOWJiMWQ3ZGE4MzM0NjZmMzE0MjEwNjkzYmMxMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-03-10T19:39:05Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-03-10T19:39:05Z"}, "message": "re PR fortran/65024 ([OOP] unlimited polymorphic pointer structure not built when it should be)\n\n2015-03-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/65024\n\t* trans-expr.c (gfc_conv_component_ref): If the component\n\tbackend declaration is missing and the derived type symbol is\n\tavailable in the reference, call gfc_build_derived_type.\n\n2015-03-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/65024\n\t* gfortran.dg/unlimited_polymorphic_23.f90: New test\n\nFrom-SVN: r221334", "tree": {"sha": "0221006f58a79ee652d8b698c5ec3d634a53c2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0221006f58a79ee652d8b698c5ec3d634a53c2a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48188959fd8a9bb1d7da833466f314210693bc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48188959fd8a9bb1d7da833466f314210693bc11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48188959fd8a9bb1d7da833466f314210693bc11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48188959fd8a9bb1d7da833466f314210693bc11/comments", "author": null, "committer": null, "parents": [{"sha": "704c79040af06477eaa18ee560270f22214a359a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704c79040af06477eaa18ee560270f22214a359a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704c79040af06477eaa18ee560270f22214a359a"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "b9f34a33c67a8266f6f13575aa6bb3df34ed57de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48188959fd8a9bb1d7da833466f314210693bc11", "patch": "@@ -1,3 +1,10 @@\n+2015-03-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/65024\n+\t* trans-expr.c (gfc_conv_component_ref): If the component\n+\tbackend declaration is missing and the derived type symbol is\n+\tavailable in the reference, call gfc_build_derived_type.\n+\n 2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "353d0120d9de31688e5a37edc4a75099ef3b4466", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=48188959fd8a9bb1d7da833466f314210693bc11", "patch": "@@ -1930,10 +1930,12 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n \n   c = ref->u.c.component;\n \n-  gcc_assert (c->backend_decl);\n+  if (c->backend_decl == NULL_TREE\n+      && ref->u.c.sym != NULL)\n+    gfc_get_derived_type (ref->u.c.sym);\n \n   field = c->backend_decl;\n-  gcc_assert (TREE_CODE (field) == FIELD_DECL);\n+  gcc_assert (field && TREE_CODE (field) == FIELD_DECL);\n   decl = se->expr;\n \n   /* Components can correspond to fields of different containing"}, {"sha": "5acef589ff2debd983f988ce4e4328d57887e8d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48188959fd8a9bb1d7da833466f314210693bc11", "patch": "@@ -1,3 +1,8 @@\n+2015-03-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/65024\n+\t* gfortran.dg/unlimited_polymorphic_23.f90: New test\n+\n 2015-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/65127"}, {"sha": "27eff31053273f9e9730989acb3ebd45c6092186", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_23.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48188959fd8a9bb1d7da833466f314210693bc11/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_23.f90?ref=48188959fd8a9bb1d7da833466f314210693bc11", "patch": "@@ -0,0 +1,35 @@\n+! {dg-do run }\n+!\n+! Test the fix for PR65024, in which the structure for the 'info'\n+! component of type 'T' was not being converted into TREE_SSA and\n+! so caused an ICE in trans-expr.c:gfc_conv_component_ref.\n+!\n+! Reported by  <matt@gneilson.plus.com>\n+!\n+MODULE X\n+  TYPE T\n+    CLASS(*), pointer :: info\n+  END TYPE\n+END MODULE\n+\n+PROGRAM P\n+  call bug\n+CONTAINS\n+  SUBROUTINE BUG\n+    USE X\n+    CLASS(T), pointer :: e\n+    integer, target :: i = 42\n+    allocate(e)\n+    e%info => NULL ()      ! used to ICE\n+    if (.not.associated(e%info)) e%info => i      ! used to ICE\n+    select type (z => e%info)\n+      type is (integer)\n+        if (z .ne.i) call abort\n+    end select\n+  END SUBROUTINE\n+\n+  SUBROUTINE NEXT\n+    USE X\n+    CLASS (T), pointer :: e\n+  END SUBROUTINE\n+END"}]}