{"sha": "37bde2f87267908a93c07856317a28827f8284f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiZGUyZjg3MjY3OTA4YTkzYzA3ODU2MzE3YTI4ODI3ZjgyODRmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-19T11:14:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-19T11:14:39Z"}, "message": "tree-cfg: Fix up gimple_merge_blocks FORCED_LABEL handling [PR99034]\n\nThe verifiers require that DECL_NONLOCAL or EH_LANDING_PAD_NR\nlabels are always the first label if there is more than one label.\n\nWhen merging blocks, we don't honor that though.\nOn the following testcase, we try to merge blocks:\n<bb 13> [count: 0]:\n<L2>:\nS::~S (&s);\n\nand\n<bb 15> [count: 0]:\n<L0>:\nresx 1\n\nwhere <L2> is landing pad and <L0> is FORCED_LABEL.  And the code puts\nthe FORCED_LABEL before the landing pad label, violating the verification\nrequirements.\n\nThe following patch fixes it by moving the FORCED_LABEL after the\nDECL_NONLOCAL or EH_LANDING_PAD_NR label if it is the first label.\n\n2021-02-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR ipa/99034\n\t* tree-cfg.c (gimple_merge_blocks): If bb a starts with eh landing\n\tpad or non-local label, put FORCED_LABELs from bb b after that label\n\trather than before it.\n\n\t* g++.dg/opt/pr99034.C: New test.", "tree": {"sha": "001c43c5c65c3bff4f09ea8fb130395349bfa939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001c43c5c65c3bff4f09ea8fb130395349bfa939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37bde2f87267908a93c07856317a28827f8284f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bde2f87267908a93c07856317a28827f8284f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bde2f87267908a93c07856317a28827f8284f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bde2f87267908a93c07856317a28827f8284f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d449189ee4304ce4f250351c8aa393324421eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d449189ee4304ce4f250351c8aa393324421eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d449189ee4304ce4f250351c8aa393324421eef"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "d791a14b136a125b08a199bfc1078444aba0b12b", "filename": "gcc/testsuite/g++.dg/opt/pr99034.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bde2f87267908a93c07856317a28827f8284f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bde2f87267908a93c07856317a28827f8284f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99034.C?ref=37bde2f87267908a93c07856317a28827f8284f7", "patch": "@@ -0,0 +1,23 @@\n+// PR ipa/99034\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+void *b[5];\n+void foo (void);\n+struct S { ~S (); };\n+\n+static inline void\n+__attribute__((always_inline))\n+bar (int d)\n+{\n+  S s;\n+  while (d)\n+    foo ();\n+}\n+\n+void\n+baz (void)\n+{\n+  bar (2);\n+  __builtin_setjmp (b);\n+}"}, {"sha": "8d4ac2b4dc3dd349a0b2860becee36f4397372c0", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bde2f87267908a93c07856317a28827f8284f7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bde2f87267908a93c07856317a28827f8284f7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=37bde2f87267908a93c07856317a28827f8284f7", "patch": "@@ -2124,7 +2124,17 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t  if (FORCED_LABEL (label))\n \t    {\n \t      gimple_stmt_iterator dest_gsi = gsi_start_bb (a);\n-\t      gsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n+\t      tree first_label = NULL_TREE;\n+\t      if (!gsi_end_p (dest_gsi))\n+\t\tif (glabel *first_label_stmt\n+\t\t    = dyn_cast <glabel *> (gsi_stmt (dest_gsi)))\n+\t\t  first_label = gimple_label_label (first_label_stmt);\n+\t      if (first_label\n+\t\t  && (DECL_NONLOCAL (first_label)\n+\t\t      || EH_LANDING_PAD_NR (first_label) != 0))\n+\t\tgsi_insert_after (&dest_gsi, stmt, GSI_NEW_STMT);\n+\t      else\n+\t\tgsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n \t    }\n \t  /* Other user labels keep around in a form of a debug stmt.  */\n \t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_BIND_STMTS)"}]}