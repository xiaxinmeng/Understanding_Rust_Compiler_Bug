{"sha": "89f6025db00b9b67420d24303d6d26ebf3554156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmNjAyNWRiMDBiOWI2NzQyMGQyNDMwM2Q2ZDI2ZWJmMzU1NDE1Ng==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2002-09-30T20:25:44Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2002-09-30T20:25:44Z"}, "message": "xtensa.h (REG_CLASS_NAMES, [...]): Add new RL_REGS register class.\n\n        * config/xtensa/xtensa.h (REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n        Add new RL_REGS register class.\n        (PREFERRED_RELOAD_CLASS, PREFERRED_OUTPUT_RELOAD_CLASS):\n        Call xtensa_preferred_reload_class for both input and output reloads.\n        * config/xtensa/xtensa.c (xtensa_regno_to_class): Use new RL_REGS class.\n        (xtensa_preferred_reload_class): Handle output reloads; use RL_REGS\n        instead of either AR_REGS or GR_REGS classes.\n        (xtensa_secondary_reload_class): Use new RL_REGS class.\n        * config/xtensa/xtensa-protos.h (xtensa_preferred_reload_class): Update.\n\nFrom-SVN: r57666", "tree": {"sha": "f03fc94aed032267eb9548e49ed24a6030883be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f03fc94aed032267eb9548e49ed24a6030883be5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f6025db00b9b67420d24303d6d26ebf3554156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f6025db00b9b67420d24303d6d26ebf3554156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f6025db00b9b67420d24303d6d26ebf3554156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f6025db00b9b67420d24303d6d26ebf3554156/comments", "author": null, "committer": null, "parents": [{"sha": "50bd210bdec76695888b3aef818fe642820c9dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bd210bdec76695888b3aef818fe642820c9dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bd210bdec76695888b3aef818fe642820c9dfd"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "6e3f57b3498e028d2497fb19d8ad351de33311a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89f6025db00b9b67420d24303d6d26ebf3554156", "patch": "@@ -1,3 +1,15 @@\n+2002-09-30  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa.h (REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n+\tAdd new RL_REGS register class.\n+\t(PREFERRED_RELOAD_CLASS, PREFERRED_OUTPUT_RELOAD_CLASS):\n+        Call xtensa_preferred_reload_class for both input and output reloads.\n+\t* config/xtensa/xtensa.c (xtensa_regno_to_class): Use new RL_REGS class.\n+\t(xtensa_preferred_reload_class): Handle output reloads; use RL_REGS\n+\tinstead of either AR_REGS or GR_REGS classes.\n+\t(xtensa_secondary_reload_class): Use new RL_REGS class.\n+\t* config/xtensa/xtensa-protos.h (xtensa_preferred_reload_class): Update.\n+\n 2002-09-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (hppa_encode_label): Don't drop '*' from function labels."}, {"sha": "051c81e6939d3d1851f6901db7186ae679aa95e3", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=89f6025db00b9b67420d24303d6d26ebf3554156", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for GNU compiler for Xtensa.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright 2001,2002 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -89,7 +89,7 @@ extern void xtensa_reorg PARAMS ((rtx));\n extern rtx xtensa_return_addr PARAMS ((int, rtx));\n extern rtx xtensa_builtin_saveregs PARAMS ((void));\n extern enum reg_class xtensa_preferred_reload_class\n-  PARAMS ((rtx, enum reg_class));\n+  PARAMS ((rtx, enum reg_class, int));\n extern enum reg_class xtensa_secondary_reload_class\n   PARAMS ((enum reg_class, enum machine_mode, rtx, int));\n extern int a7_overlap_mentioned_p PARAMS ((rtx x));"}, {"sha": "ae7c994d9a857161c0c86c834c419cd18999d419", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=89f6025db00b9b67420d24303d6d26ebf3554156", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Tensilica's Xtensa architecture.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright 2001,2002 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -107,10 +107,10 @@ const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER] =\n /* Map hard register number to register class */\n const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =\n {\n-  GR_REGS,\tSP_REG,\t\tGR_REGS,\tGR_REGS,\n-  GR_REGS,\tGR_REGS,\tGR_REGS,\tGR_REGS,\n-  GR_REGS,\tGR_REGS,\tGR_REGS,\tGR_REGS,\n-  GR_REGS,\tGR_REGS,\tGR_REGS,\tGR_REGS,\n+  RL_REGS,\tSP_REG,\t\tRL_REGS,\tRL_REGS,\n+  RL_REGS,\tRL_REGS,\tRL_REGS,\tGR_REGS,\n+  RL_REGS,\tRL_REGS,\tRL_REGS,\tRL_REGS,\n+  RL_REGS,\tRL_REGS,\tRL_REGS,\tRL_REGS,\n   AR_REGS,\tAR_REGS,\tBR_REGS,\n   FP_REGS,\tFP_REGS,\tFP_REGS,\tFP_REGS,\n   FP_REGS,\tFP_REGS,\tFP_REGS,\tFP_REGS,\n@@ -2614,16 +2614,22 @@ xtensa_va_arg (valist, type)\n \n \n enum reg_class\n-xtensa_preferred_reload_class (x, class)\n+xtensa_preferred_reload_class (x, class, isoutput)\n      rtx x;\n      enum reg_class class;\n+     int isoutput;\n {\n-  if (CONSTANT_P (x) && GET_CODE (x) == CONST_DOUBLE)\n+  if (!isoutput && CONSTANT_P (x) && GET_CODE (x) == CONST_DOUBLE)\n     return NO_REGS;\n \n-  /* Don't use sp for reloads! */\n-  if (class == AR_REGS)\n-    return GR_REGS;\n+  /* Don't use the stack pointer or hard frame pointer for reloads!\n+     The hard frame pointer would normally be OK except that it may\n+     briefly hold an incoming argument in the prologue, and reload\n+     won't know that it is live because the hard frame pointer is\n+     treated specially.  */\n+\n+  if (class == AR_REGS || class == GR_REGS)\n+    return RL_REGS;\n \n   return class;\n }\n@@ -2645,13 +2651,13 @@ xtensa_secondary_reload_class (class, mode, x, isoutput)\n   if (!isoutput)\n     {\n       if (class == FP_REGS && constantpool_mem_p (x))\n-\treturn GR_REGS;\n+\treturn RL_REGS;\n     }\n \n   if (ACC_REG_P (regno))\n-    return (class == GR_REGS ? NO_REGS : GR_REGS);\n+    return ((class == GR_REGS || class == RL_REGS) ? NO_REGS : RL_REGS);\n   if (class == ACC_REG)\n-    return (GP_REG_P (regno) ? NO_REGS : GR_REGS);\n+    return (GP_REG_P (regno) ? NO_REGS : RL_REGS);\n \n   return NO_REGS;\n }"}, {"sha": "d1867a2b4ce0464488f326123dab6552dbfbdd0e", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f6025db00b9b67420d24303d6d26ebf3554156/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=89f6025db00b9b67420d24303d6d26ebf3554156", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of Tensilica's Xtensa target machine for GNU compiler.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright 2001,2002 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -554,6 +554,7 @@ enum reg_class\n   FP_REGS,\t\t\t/* floating point registers */\n   ACC_REG,\t\t\t/* MAC16 accumulator */\n   SP_REG,\t\t\t/* sp register (aka a1) */\n+  RL_REGS,\t\t\t/* preferred reload regs (not sp or fp) */\n   GR_REGS,\t\t\t/* integer registers except sp */\n   AR_REGS,\t\t\t/* all integer registers */\n   ALL_REGS,\t\t\t/* all registers */\n@@ -574,6 +575,7 @@ enum reg_class\n   \"FP_REGS\",\t\t\t\t\t\t\t\t\\\n   \"ACC_REG\",\t\t\t\t\t\t\t\t\\\n   \"SP_REG\",\t\t\t\t\t\t\t\t\\\n+  \"RL_REGS\",\t\t\t\t\t\t\t\t\\\n   \"GR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"AR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n@@ -589,6 +591,7 @@ enum reg_class\n   { 0xfff80000, 0x00000007 }, /* floating-point registers */ \\\n   { 0x00000000, 0x00000008 }, /* MAC16 accumulator */ \\\n   { 0x00000002, 0x00000000 }, /* stack pointer register */ \\\n+  { 0x0000ff7d, 0x00000000 }, /* preferred reload registers */ \\\n   { 0x0000fffd, 0x00000000 }, /* general-purpose registers */ \\\n   { 0x0003ffff, 0x00000000 }, /* integer registers */ \\\n   { 0xffffffff, 0x0000000f }  /* all registers */ \\\n@@ -704,10 +707,10 @@ extern enum reg_class xtensa_char_to_class[256];\n    : FALSE)\n \n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\t\t\\\n-  xtensa_preferred_reload_class (X, CLASS)\n+  xtensa_preferred_reload_class (X, CLASS, 0)\n \n #define PREFERRED_OUTPUT_RELOAD_CLASS(X, CLASS)\t\t\t\t\\\n-  (CLASS)\n+  xtensa_preferred_reload_class (X, CLASS, 1)\n   \n #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X)\t\t\t\\\n   xtensa_secondary_reload_class (CLASS, MODE, X, 0)"}]}