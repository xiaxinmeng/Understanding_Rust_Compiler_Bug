{"sha": "b588c7f866a67ae221505af7184189acfe9fbbc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU4OGM3Zjg2NmE2N2FlMjIxNTA1YWY3MTg0MTg5YWNmZTlmYmJjNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-22T09:19:35Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-22T09:19:35Z"}, "message": "avr.c (TARGET_SECONDARY_RELOAD): Remove hook define...\n\n\t* config/avr/avr.c (TARGET_SECONDARY_RELOAD): Remove hook define...\n\t(avr_secondary_reload): ...and implementation.\n\t(avr_adjust_insn_length) [ADJUST_LEN_LPM]: Remove handling.\n\t* config/avr/avr.md (reload_in<mode>): Remove insns.\n\t(adjust_len) [lpm]: Remove insn attribute value.\n\t* config/avr/predicates.md (flash_operand): Remove insn predicate.\n\nFrom-SVN: r238634", "tree": {"sha": "d82f334a4dbdede1be16725db31d84bba04284bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d82f334a4dbdede1be16725db31d84bba04284bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b588c7f866a67ae221505af7184189acfe9fbbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b588c7f866a67ae221505af7184189acfe9fbbc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b588c7f866a67ae221505af7184189acfe9fbbc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b588c7f866a67ae221505af7184189acfe9fbbc4/comments", "author": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1182b907ad9d5b37d509a9a19ed23c42776bd87c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1182b907ad9d5b37d509a9a19ed23c42776bd87c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1182b907ad9d5b37d509a9a19ed23c42776bd87c"}], "stats": {"total": 85, "additions": 11, "deletions": 74}, "files": [{"sha": "36104da3cc490b738aac7deb7e2dc8e7423e4244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b588c7f866a67ae221505af7184189acfe9fbbc4", "patch": "@@ -1,10 +1,19 @@\n+2016-07-22  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (TARGET_SECONDARY_RELOAD): Remove hook define...\n+\t(avr_secondary_reload): ...and implementation.\n+\t(avr_adjust_insn_length) [ADJUST_LEN_LPM]: Remove handling.\n+\t* config/avr/avr.md (reload_in<mode>): Remove insns.\n+\t(adjust_len) [lpm]: Remove insn attribute value.\n+\t* config/avr/predicates.md (flash_operand): Remove insn predicate.\n+\n 2016-07-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/71876\n \t* builtin-attrs.def (ATTR_RT_NOTHROW_LEAF_LIST): New return twice\n \tattribute.\n \t* builtins.def (BUILT_IN_SETJMP): Use ATTR_RT_NOTHROW_LEAF_LIST here.\n-\t* calls.c (special_function_p): Remove the special handling of the \n+\t* calls.c (special_function_p): Remove the special handling of the\n \t\"__builtin_\" prefix.\n \n 2016-07-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>"}, {"sha": "0f2c708c9f85dfd3dff6f95429c62125bd173f94", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b588c7f866a67ae221505af7184189acfe9fbbc4", "patch": "@@ -2048,50 +2048,6 @@ avr_legitimize_reload_address (rtx *px, machine_mode mode,\n }\n \n \n-/* Implement `TARGET_SECONDARY_RELOAD' */\n-\n-static reg_class_t\n-avr_secondary_reload (bool in_p, rtx x,\n-                      reg_class_t reload_class ATTRIBUTE_UNUSED,\n-                      machine_mode mode, secondary_reload_info *sri)\n-{\n-  if (in_p\n-      && MEM_P (x)\n-      && !ADDR_SPACE_GENERIC_P (MEM_ADDR_SPACE (x))\n-      && ADDR_SPACE_MEMX != MEM_ADDR_SPACE (x))\n-    {\n-      /* For the non-generic 16-bit spaces we need a d-class scratch.  */\n-\n-      switch (mode)\n-        {\n-        default:\n-          gcc_unreachable();\n-\n-        case QImode:  sri->icode = CODE_FOR_reload_inqi; break;\n-        case QQmode:  sri->icode = CODE_FOR_reload_inqq; break;\n-        case UQQmode: sri->icode = CODE_FOR_reload_inuqq; break;\n-\n-        case HImode:  sri->icode = CODE_FOR_reload_inhi; break;\n-        case HQmode:  sri->icode = CODE_FOR_reload_inhq; break;\n-        case HAmode:  sri->icode = CODE_FOR_reload_inha; break;\n-        case UHQmode: sri->icode = CODE_FOR_reload_inuhq; break;\n-        case UHAmode: sri->icode = CODE_FOR_reload_inuha; break;\n-\n-        case PSImode: sri->icode = CODE_FOR_reload_inpsi; break;\n-\n-        case SImode:  sri->icode = CODE_FOR_reload_insi; break;\n-        case SFmode:  sri->icode = CODE_FOR_reload_insf; break;\n-        case SQmode:  sri->icode = CODE_FOR_reload_insq; break;\n-        case SAmode:  sri->icode = CODE_FOR_reload_insa; break;\n-        case USQmode: sri->icode = CODE_FOR_reload_inusq; break;\n-        case USAmode: sri->icode = CODE_FOR_reload_inusa; break;\n-        }\n-    }\n-\n-  return NO_REGS;\n-}\n-\n-\n /* Helper function to print assembler resp. track instruction\n    sequence lengths.  Always return \"\".\n \n@@ -8847,7 +8803,6 @@ avr_adjust_insn_length (rtx_insn *insn, int len)\n     case ADJUST_LEN_MOV32: output_movsisf (insn, op, &len); break;\n     case ADJUST_LEN_MOVMEM: avr_out_movmem (insn, op, &len); break;\n     case ADJUST_LEN_XLOAD: avr_out_xload (insn, op, &len); break;\n-    case ADJUST_LEN_LPM: avr_out_lpm (insn, op, &len); break;\n     case ADJUST_LEN_SEXT: avr_out_sign_extend (insn, op, &len); break;\n \n     case ADJUST_LEN_SFRACT: avr_out_fract (insn, op, true, &len); break;\n@@ -13888,9 +13843,6 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_MODE_DEPENDENT_ADDRESS_P\n #define TARGET_MODE_DEPENDENT_ADDRESS_P avr_mode_dependent_address_p\n \n-#undef  TARGET_SECONDARY_RELOAD\n-#define TARGET_SECONDARY_RELOAD avr_secondary_reload\n-\n #undef  TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND avr_print_operand\n #undef  TARGET_PRINT_OPERAND_ADDRESS"}, {"sha": "6dbbf1c88a583b87406f317d9ec162ca29f74bd7", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=b588c7f866a67ae221505af7184189acfe9fbbc4", "patch": "@@ -151,7 +151,7 @@\n    tsthi, tstpsi, tstsi, compare, compare64, call,\n    mov8, mov16, mov24, mov32, reload_in16, reload_in24, reload_in32,\n    ufract, sfract, round,\n-   xload, lpm, movmem,\n+   xload, movmem,\n    ashlqi, ashrqi, lshrqi,\n    ashlhi, ashrhi, lshrhi,\n    ashlsi, ashrsi, lshrsi,\n@@ -455,23 +455,6 @@\n ;;========================================================================\n ;; Move stuff around\n \n-;; Secondary input reload from non-generic 16-bit address spaces\n-(define_insn \"reload_in<mode>\"\n-  [(set (match_operand:MOVMODE 0 \"register_operand\"   \"=r\")\n-        (match_operand:MOVMODE 1 \"flash_operand\"       \"m\"))\n-   (clobber (match_operand:QI 2 \"d_register_operand\"  \"=d\"))]\n-  ;; Fixme: The insn condition must not test the address space.\n-  ;;   Because the gen tools refuse to generate insns for address spaces\n-  ;;   and will generate insn-codes.h to look like:\n-  ;;   #define CODE_FOR_reload_inhi CODE_FOR_nothing\n-  \"reload_completed || reload_in_progress\"\n-  {\n-    return avr_out_lpm (insn, operands, NULL);\n-  }\n-  [(set_attr \"adjust_len\" \"lpm\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-\n ;; \"loadqi_libgcc\"\n ;; \"loadhi_libgcc\"\n ;; \"loadpsi_libgcc\""}, {"sha": "9114c52ba482e4fe397d4636057f1a831e2461a8", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588c7f866a67ae221505af7184189acfe9fbbc4/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=b588c7f866a67ae221505af7184189acfe9fbbc4", "patch": "@@ -76,13 +76,6 @@\n        (not (match_test \"avr_load_libgcc_p (op)\"))\n        (not (match_test \"avr_mem_memx_p (op)\"))))\n \n-;; Return 1 if OP is a memory operand in one of the __flash* address spaces\n-(define_predicate \"flash_operand\"\n-  (and (match_operand 0 \"memory_operand\")\n-       (match_test \"Pmode == mode\")\n-       (ior (match_test \"!MEM_P (op)\")\n-            (match_test \"avr_mem_flash_p (op)\"))))\n-\n ;; Return 1 if OP is the zero constant for MODE.\n (define_predicate \"const0_operand\"\n   (and (match_code \"const_int,const_fixed,const_double\")"}]}