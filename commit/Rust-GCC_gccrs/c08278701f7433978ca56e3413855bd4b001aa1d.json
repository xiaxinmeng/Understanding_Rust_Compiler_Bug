{"sha": "c08278701f7433978ca56e3413855bd4b001aa1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA4Mjc4NzAxZjc0MzM5NzhjYTU2ZTM0MTM4NTViZDRiMDAxYWExZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:27:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:27:35Z"}, "message": "zlib: Add --enable-cet to configure\n\nWhen --enable-cet is used to configure GCC, enable Intel CET in target\nzlib.\n\n\t* Makefile.am (AM_CFLAGS): New.\n\t* configure.ac (CET_FLAGS): Add GCC_CET_FLAGS and AC_SUBST.\n\t* Makefile.in: Regenerated.\n\t* aclocal.m4: Likewise.\n\t* configure.ac: Likewise.", "tree": {"sha": "6c95b8bdf9c8c71e2a227165fe9d335e25c51b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c95b8bdf9c8c71e2a227165fe9d335e25c51b40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c08278701f7433978ca56e3413855bd4b001aa1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08278701f7433978ca56e3413855bd4b001aa1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08278701f7433978ca56e3413855bd4b001aa1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08278701f7433978ca56e3413855bd4b001aa1d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21486483579c2205fcabf1308b155000af86fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21486483579c2205fcabf1308b155000af86fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21486483579c2205fcabf1308b155000af86fe1"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "c1d24fe85c9af2d02880542178f963be9db84191", "filename": "zlib/ChangeLog.gcj", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog.gcj?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -1,3 +1,11 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.am (AM_CFLAGS): New.\n+\t* configure.ac (CET_FLAGS): Add GCC_CET_FLAGS and AC_SUBST.\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.m4: Likewise.\n+\t* configure.ac: Likewise.\n+\n 2020-01-24  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure.ac: Handle `--with-toolexeclibdir='."}, {"sha": "3098677f893e07e615dfec4c0ff2f19ba6ce26b9", "filename": "zlib/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FMakefile.am?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -19,6 +19,8 @@ libz_a_SOURCES = $(ZLIB_SOURCES)\n libz_a_CFLAGS = $(AM_CFLAGS) $(PICFLAG)\n endif\n \n+AM_CFLAGS = $(CET_FLAGS)\n+\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile."}, {"sha": "3f5102d1b87373b428746a56d60b3f4fec794fe0", "filename": "zlib/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FMakefile.in?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -92,7 +92,9 @@ host_triplet = @host@\n target_triplet = @target@\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/cet.m4 \\\n+\t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n@@ -275,6 +277,7 @@ AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n CCDEPMODE = @CCDEPMODE@\n+CET_FLAGS = @CET_FLAGS@\n CFLAGS = @CFLAGS@\n COMPPATH = @COMPPATH@\n CPP = @CPP@\n@@ -400,6 +403,7 @@ zconf.h.in zlib.h zutil.c zutil.h\n @TARGET_LIBRARY_FALSE@toolexeclib_LIBRARIES = libz.a\n @TARGET_LIBRARY_FALSE@libz_a_SOURCES = $(ZLIB_SOURCES)\n @TARGET_LIBRARY_FALSE@libz_a_CFLAGS = $(AM_CFLAGS) $(PICFLAG)\n+AM_CFLAGS = $(CET_FLAGS)\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and"}, {"sha": "f3676e70476c3a0f6e7d83143fb3db927effc498", "filename": "zlib/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Faclocal.m4?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -1167,7 +1167,9 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n+m4_include([../config/cet.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/override.m4])"}, {"sha": "51a6ef36e2822422c33eb494b4b361cdeb6edf6e", "filename": "zlib/configure", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -658,6 +658,7 @@ EGREP\n GREP\n SED\n LIBTOOL\n+CET_FLAGS\n am__fastdepCC_FALSE\n am__fastdepCC_TRUE\n CCDEPMODE\n@@ -768,6 +769,7 @@ with_target_subdir\n with_cross_host\n with_system_zlib\n enable_dependency_tracking\n+enable_cet\n enable_shared\n enable_static\n with_pic\n@@ -1411,6 +1413,7 @@ Optional Features:\n                           do not reject slow dependency extractors\n   --disable-dependency-tracking\n                           speeds up one-time build\n+  --enable-cet            enable Intel CET in target libraries [default=no]\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n   --enable-fast-install[=PKGS]\n@@ -3400,11 +3403,11 @@ done\n \n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-\n+#include <stdio.h>\n int\n main ()\n {\n-\n+printf (\"hello world\\n\");\n   ;\n   return 0;\n }\n@@ -4142,6 +4145,91 @@ fi\n \n \n \n+# Add CET specific flags if CET is enabled\n+\n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=no\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_cet=no\n+    ;;\n+esac\n+if test x$enable_cet = xyes; then\n+  CET_FLAGS=\"-fcf-protection -mshstk\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+\n case `pwd` in\n   *\\ * | *\\\t*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&5\n@@ -6032,7 +6120,6 @@ fi\n \n \n \n-\n \n \n # Check whether --enable-libtool-lock was given.\n@@ -10652,7 +10739,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10655 \"configure\"\n+#line 10742 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10758,7 +10845,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10761 \"configure\"\n+#line 10848 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "be1cfe296512dd65384fbd9569d86519a626e831", "filename": "zlib/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08278701f7433978ca56e3413855bd4b001aa1d/zlib%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure.ac?ref=c08278701f7433978ca56e3413855bd4b001aa1d", "patch": "@@ -59,6 +59,10 @@ m4_rename_force([real_PRECIOUS],[_AC_ARG_VAR_PRECIOUS])\n \n AC_SUBST(CFLAGS)\n \n+# Add CET specific flags if CET is enabled\n+GCC_CET_FLAGS(CET_FLAGS)\n+AC_SUBST(CET_FLAGS)\n+\n AC_PROG_LIBTOOL\n \n # Find CPP now so that any conditional tests below won't do it and"}]}