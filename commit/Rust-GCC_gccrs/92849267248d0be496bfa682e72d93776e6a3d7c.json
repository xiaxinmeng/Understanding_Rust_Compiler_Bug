{"sha": "92849267248d0be496bfa682e72d93776e6a3d7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4NDkyNjcyNDhkMGJlNDk2YmZhNjgyZTcyZDkzNzc2ZTZhM2Q3Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-24T18:58:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-08-24T18:58:00Z"}, "message": "pt.c (resolve_overloaded_unification): Use coerce_template_parms instead of get_bindings.\n\n\t* pt.c (resolve_overloaded_unification): Use coerce_template_parms\n\tinstead of get_bindings.\n\t(resolve_nondeduced_context): Likewise.\n\nFrom-SVN: r190653", "tree": {"sha": "04c0f3b95e5eb900944fab73faf832319f7e2d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c0f3b95e5eb900944fab73faf832319f7e2d54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92849267248d0be496bfa682e72d93776e6a3d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92849267248d0be496bfa682e72d93776e6a3d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92849267248d0be496bfa682e72d93776e6a3d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92849267248d0be496bfa682e72d93776e6a3d7c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60b5de49ef8049c7d6d48130cb501cc97794b6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b5de49ef8049c7d6d48130cb501cc97794b6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b5de49ef8049c7d6d48130cb501cc97794b6ad"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "be3a95ad0bdc89bd54d6fee01520bac5f3cf9ec2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92849267248d0be496bfa682e72d93776e6a3d7c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92849267248d0be496bfa682e72d93776e6a3d7c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92849267248d0be496bfa682e72d93776e6a3d7c", "patch": "@@ -1,5 +1,9 @@\n 2012-08-24  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (resolve_overloaded_unification): Use coerce_template_parms\n+\tinstead of get_bindings.\n+\t(resolve_nondeduced_context): Likewise.\n+\n \t* pt.c (register_specialization): Correct argument to\n \tcheck_specialization_namespace.\n \t(determine_specialization): Don't consider members of"}, {"sha": "eff0b4df0881bbb151d5e45ff98e088a029d9c20", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92849267248d0be496bfa682e72d93776e6a3d7c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92849267248d0be496bfa682e72d93776e6a3d7c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=92849267248d0be496bfa682e72d93776e6a3d7c", "patch": "@@ -15246,10 +15246,12 @@ resolve_overloaded_unification (tree tparms,\n \t  if (TREE_CODE (fn) != TEMPLATE_DECL)\n \t    continue;\n \n-\t  ++processing_template_decl;\n-\t  subargs = get_bindings (fn, DECL_TEMPLATE_RESULT (fn),\n-\t\t\t\t  expl_subargs, /*check_ret=*/false);\n-\t  if (subargs && !any_dependent_template_arguments_p (subargs))\n+\t  subargs = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n+\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none,\n+\t\t\t\t\t   /*require_all_args=*/true,\n+\t\t\t\t\t   /*use_default_args=*/true);\n+\t  if (subargs != error_mark_node\n+\t      && !any_dependent_template_arguments_p (subargs))\n \t    {\n \t      elem = tsubst (TREE_TYPE (fn), subargs, tf_none, NULL_TREE);\n \t      if (try_one_overload (tparms, targs, tempargs, parm,\n@@ -15262,7 +15264,6 @@ resolve_overloaded_unification (tree tparms,\n \t    }\n \t  else if (subargs)\n \t    ++ok;\n-\t  --processing_template_decl;\n \t}\n       /* If no templates (or more than one) are fully resolved by the\n \t explicit arguments, this template-id is a non-deduced context; it\n@@ -15367,10 +15368,12 @@ resolve_nondeduced_context (tree orig_expr)\n \t  if (TREE_CODE (fn) != TEMPLATE_DECL)\n \t    continue;\n \n-\t  ++processing_template_decl;\n-\t  subargs = get_bindings (fn, DECL_TEMPLATE_RESULT (fn),\n-\t\t\t\t  expl_subargs, /*check_ret=*/false);\n-\t  if (subargs && !any_dependent_template_arguments_p (subargs))\n+\t  subargs = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n+\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none,\n+\t\t\t\t\t   /*require_all_args=*/true,\n+\t\t\t\t\t   /*use_default_args=*/true);\n+\t  if (subargs != error_mark_node\n+\t      && !any_dependent_template_arguments_p (subargs))\n \t    {\n \t      elem = instantiate_template (fn, subargs, tf_none);\n \t      if (elem == error_mark_node)\n@@ -15384,7 +15387,6 @@ resolve_nondeduced_context (tree orig_expr)\n \t\t  ++good;\n \t\t}\n \t    }\n-\t  --processing_template_decl;\n \t}\n       if (good == 1)\n \t{\n@@ -15435,6 +15437,9 @@ try_one_overload (tree tparms,\n   tree tempargs;\n   int i;\n \n+  if (arg == error_mark_node)\n+    return 0;\n+\n   /* [temp.deduct.type] A template-argument can be deduced from a pointer\n      to function or pointer to member function argument if the set of\n      overloaded functions does not contain function templates and at most\n@@ -17129,40 +17134,13 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n {\n   int ntparms = DECL_NTPARMS (fn);\n   tree targs = make_tree_vec (ntparms);\n-  tree decl_type;\n+  tree decl_type = TREE_TYPE (decl);\n   tree decl_arg_types;\n   tree *args;\n   unsigned int nargs, ix;\n   tree arg;\n \n-  /* Substitute the explicit template arguments into the type of DECL.\n-     The call to fn_type_unification will handle substitution into the\n-     FN.  */\n-  decl_type = TREE_TYPE (decl);\n-  if (explicit_args && decl == DECL_TEMPLATE_RESULT (fn))\n-    {\n-      tree tmpl;\n-      tree converted_args;\n-\n-      if (DECL_TEMPLATE_INFO (decl))\n-\ttmpl = DECL_TI_TEMPLATE (decl);\n-      else\n-\t/* We can get here for some invalid specializations.  */\n-\treturn NULL_TREE;\n-\n-      converted_args\n-\t= coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n-\t\t\t\t explicit_args, NULL_TREE,\n-\t\t\t\t tf_none,\n-\t\t\t\t /*require_all_args=*/false,\n-\t\t\t\t /*use_default_args=*/false);\n-      if (converted_args == error_mark_node)\n-\treturn NULL_TREE;\n-\n-      decl_type = tsubst (decl_type, converted_args, tf_none, NULL_TREE);\n-      if (decl_type == error_mark_node)\n-\treturn NULL_TREE;\n-    }\n+  gcc_assert (decl != DECL_TEMPLATE_RESULT (fn));\n \n   /* Never do unification on the 'this' parameter.  */\n   decl_arg_types = skip_artificial_parms_for (decl, "}]}