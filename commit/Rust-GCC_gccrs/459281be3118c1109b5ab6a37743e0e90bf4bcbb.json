{"sha": "459281be3118c1109b5ab6a37743e0e90bf4bcbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5MjgxYmUzMTE4YzExMDliNWFiNmEzNzc0M2UwZTkwYmY0YmNiYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-07T17:10:27Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-07T17:10:27Z"}, "message": "* cse.c: Update comments.\n\nFrom-SVN: r94705", "tree": {"sha": "13020a59e73f84bfcd3312e54f0140c067b14091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13020a59e73f84bfcd3312e54f0140c067b14091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/459281be3118c1109b5ab6a37743e0e90bf4bcbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459281be3118c1109b5ab6a37743e0e90bf4bcbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459281be3118c1109b5ab6a37743e0e90bf4bcbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459281be3118c1109b5ab6a37743e0e90bf4bcbb/comments", "author": null, "committer": null, "parents": [{"sha": "17385e0d3b42d32671fed15cf3c79ac4f231c4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17385e0d3b42d32671fed15cf3c79ac4f231c4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17385e0d3b42d32671fed15cf3c79ac4f231c4f7"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "91ba10b4b6f0270b1a41ecf9e37919378af407e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459281be3118c1109b5ab6a37743e0e90bf4bcbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459281be3118c1109b5ab6a37743e0e90bf4bcbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=459281be3118c1109b5ab6a37743e0e90bf4bcbb", "patch": "@@ -5,6 +5,8 @@\n \tconfig/rs6000/altivec.md, config/rs6000/darwin-tramp.asm:\n \tUpdate copyright.\n \n+\t* cse.c: Update comments.\n+\n 2005-02-07  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \tPR middle-end/19775"}, {"sha": "4a130d36a5973e77e7652c47210f214e54ab37cd", "filename": "gcc/cse.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459281be3118c1109b5ab6a37743e0e90bf4bcbb/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459281be3118c1109b5ab6a37743e0e90bf4bcbb/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=459281be3118c1109b5ab6a37743e0e90bf4bcbb", "patch": "@@ -80,11 +80,11 @@ Registers and \"quantity numbers\":\n    copies one register into another, we copy the quantity number.\n    When a register is loaded in any other way, we allocate a new\n    quantity number to describe the value generated by this operation.\n-   `reg_qty' records what quantity a register is currently thought\n+   `REG_QTY (N)' records what quantity register N is currently thought\n    of as containing.\n \n    All real quantity numbers are greater than or equal to zero.\n-   If register N has not been assigned a quantity, reg_qty[N] will\n+   If register N has not been assigned a quantity, `REG_QTY (N)' will\n    equal -N - 1, which is always negative.\n \n    Quantity numbers below zero do not exist and none of the `qty_table'\n@@ -172,18 +172,20 @@ Other expressions:\n    the register's new value.  This sequence of circumstances is rare\n    within any one basic block.\n \n-   The vectors `reg_tick' and `reg_in_table' are used to detect this case.\n-   reg_tick[i] is incremented whenever a value is stored in register i.\n-   reg_in_table[i] holds -1 if no references to register i have been\n-   entered in the table; otherwise, it contains the value reg_tick[i] had\n-   when the references were entered.  If we want to enter a reference\n-   and reg_in_table[i] != reg_tick[i], we must scan and remove old references.\n-   Until we want to enter a new entry, the mere fact that the two vectors\n-   don't match makes the entries be ignored if anyone tries to match them.\n+   `REG_TICK' and `REG_IN_TABLE', accessors for members of\n+   cse_reg_info, are used to detect this case.  REG_TICK (i) is\n+   incremented whenever a value is stored in register i.\n+   REG_IN_TABLE (i) holds -1 if no references to register i have been\n+   entered in the table; otherwise, it contains the value REG_TICK (i)\n+   had when the references were entered.  If we want to enter a\n+   reference and REG_IN_TABLE (i) != REG_TICK (i), we must scan and\n+   remove old references.  Until we want to enter a new entry, the\n+   mere fact that the two vectors don't match makes the entries be\n+   ignored if anyone tries to match them.\n \n    Registers themselves are entered in the hash table as well as in\n-   the equivalent-register chains.  However, the vectors `reg_tick'\n-   and `reg_in_table' do not apply to expressions which are simple\n+   the equivalent-register chains.  However, `REG_TICK' and\n+   `REG_IN_TABLE' do not apply to expressions which are simple\n    register references.  These expressions are removed from the table\n    immediately when they become invalid, and this can be done even if\n    we do not immediately search for all the expressions that refer to\n@@ -289,7 +291,7 @@ static rtx this_insn;\n \n    Or -1 if this register is at the end of the chain.\n \n-   If reg_qty[N] == N, reg_eqv_table[N].next is undefined.  */\n+   If REG_QTY (N) == -N - 1, reg_eqv_table[N].next is undefined.  */\n \n /* Per-register equivalence chain.  */\n struct reg_eqv_elem"}]}