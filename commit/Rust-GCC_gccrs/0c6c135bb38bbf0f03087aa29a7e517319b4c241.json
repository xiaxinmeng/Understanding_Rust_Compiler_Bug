{"sha": "0c6c135bb38bbf0f03087aa29a7e517319b4c241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2YzEzNWJiMzhiYmYwZjAzMDg3YWEyOWE3ZTUxNzMxOWI0YzI0MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-02-09T18:15:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-02-09T18:15:40Z"}, "message": "fold-const.c (try_move_mult_to_index): Remove redundant type argument.\n\n2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\t* fold-const.c (try_move_mult_to_index): Remove redundant\n\ttype argument.  Create ADDR_EXPR with correct type.\n\t(fold): Update callers of try_move_mult_to_index.  Convert\n\tresult to the appropriate type.\n\n\t* g++.dg/tree-ssa/tmmti.C: New testcase.\n\nFrom-SVN: r94767", "tree": {"sha": "5c71fda4c499bb7084c78f6b142edb8a17c5e2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c71fda4c499bb7084c78f6b142edb8a17c5e2f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6c135bb38bbf0f03087aa29a7e517319b4c241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6c135bb38bbf0f03087aa29a7e517319b4c241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6c135bb38bbf0f03087aa29a7e517319b4c241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6c135bb38bbf0f03087aa29a7e517319b4c241/comments", "author": null, "committer": null, "parents": [{"sha": "8f2bf9f18d96cfdda037ee14619ff866bc021e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2bf9f18d96cfdda037ee14619ff866bc021e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2bf9f18d96cfdda037ee14619ff866bc021e73"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "33996957d16307b893d80b0fbb98b688f2a674ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c6c135bb38bbf0f03087aa29a7e517319b4c241", "patch": "@@ -1,3 +1,11 @@\n+2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19854\n+\t* fold-const.c (try_move_mult_to_index): Remove redundant\n+\ttype argument.  Create ADDR_EXPR with correct type.\n+\t(fold): Update callers of try_move_mult_to_index.  Convert\n+\tresult to the appropriate type.\n+\n 2005-02-09  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/19597"}, {"sha": "294f94cbf1b67cdda2713b6f61962ed8118f751a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0c6c135bb38bbf0f03087aa29a7e517319b4c241", "patch": "@@ -6172,12 +6172,12 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n }\n \n /* Tries to replace &a[idx] CODE s * delta with &a[idx CODE delta], if s is\n-   step of the array.  TYPE is the type of the expression.  ADDR is the address.\n-   MULT is the multiplicative expression.  If the function succeeds, the new\n-   address expression is returned.  Otherwise NULL_TREE is returned.  */\n+   step of the array.  ADDR is the address. MULT is the multiplicative expression.\n+   If the function succeeds, the new address expression is returned.  Otherwise\n+   NULL_TREE is returned.  */\n \n static tree\n-try_move_mult_to_index (tree type, enum tree_code code, tree addr, tree mult)\n+try_move_mult_to_index (enum tree_code code, tree addr, tree mult)\n {\n   tree s, delta, step;\n   tree arg0 = TREE_OPERAND (mult, 0), arg1 = TREE_OPERAND (mult, 1);\n@@ -6214,7 +6214,7 @@ try_move_mult_to_index (tree type, enum tree_code code, tree addr, tree mult)\n \n \t  /* If the type sizes do not match, we might run into problems\n \t     when one of them would overflow.  */\n-\t  if (TYPE_PRECISION (itype) != TYPE_PRECISION (type))\n+\t  if (TYPE_PRECISION (itype) != TYPE_PRECISION (TREE_TYPE (s)))\n \t    continue;\n \n \t  if (!operand_equal_p (step, fold_convert (itype, s), 0))\n@@ -6246,7 +6246,7 @@ try_move_mult_to_index (tree type, enum tree_code code, tree addr, tree mult)\n \t\t\t\t\tTREE_OPERAND (pos, 1),\n \t\t\t\t\tdelta));\n \n-  return build1 (ADDR_EXPR, type, ret);\n+  return build1 (ADDR_EXPR, TREE_TYPE (addr), ret);\n }\n \n \n@@ -6944,16 +6944,16 @@ fold (tree expr)\n \t  if (TREE_CODE (arg0) == ADDR_EXPR\n \t      && TREE_CODE (arg1) == MULT_EXPR)\n \t    {\n-\t      tem = try_move_mult_to_index (type, PLUS_EXPR, arg0, arg1);\n+\t      tem = try_move_mult_to_index (PLUS_EXPR, arg0, arg1);\n \t      if (tem)\n-\t\treturn fold (tem);\n+\t\treturn fold_convert (type, fold (tem));\n \t    }\n \t  else if (TREE_CODE (arg1) == ADDR_EXPR\n \t\t   && TREE_CODE (arg0) == MULT_EXPR)\n \t    {\n-\t      tem = try_move_mult_to_index (type, PLUS_EXPR, arg1, arg0);\n+\t      tem = try_move_mult_to_index (PLUS_EXPR, arg1, arg0);\n \t      if (tem)\n-\t\treturn fold (tem);\n+\t\treturn fold_convert (type, fold (tem));\n \t    }\n \t}\n       else\n@@ -7332,9 +7332,9 @@ fold (tree expr)\n       if (TREE_CODE (arg0) == ADDR_EXPR\n \t  && TREE_CODE (arg1) == MULT_EXPR)\n \t{\n-\t  tem = try_move_mult_to_index (type, MINUS_EXPR, arg0, arg1);\n+\t  tem = try_move_mult_to_index (MINUS_EXPR, arg0, arg1);\n \t  if (tem)\n-\t    return fold (tem);\n+\t    return fold_convert (type, fold (tem));\n \t}\n \n       if (TREE_CODE (arg0) == MULT_EXPR"}, {"sha": "135e31dabd65cdf98e801d50a849b054800549a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c6c135bb38bbf0f03087aa29a7e517319b4c241", "patch": "@@ -1,3 +1,8 @@\n+2005-02-09  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19854\n+\t* g++.dg/tree-ssa/tmmti.C: New testcase.\n+\n 2005-02-09  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/rtti/tinfo1.C: Allow newline after assembler label."}, {"sha": "111127b0d93a7b2ab8132cf54374c5bc1a9b7a83", "filename": "gcc/testsuite/g++.dg/tree-ssa/tmmti.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c135bb38bbf0f03087aa29a7e517319b4c241/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftmmti.C?ref=0c6c135bb38bbf0f03087aa29a7e517319b4c241", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+\n+void bar(unsigned int i)\n+{\n+\tint a[4];\n+\tchar *p = (char*)&a[1] + 4*i;\n+}"}]}