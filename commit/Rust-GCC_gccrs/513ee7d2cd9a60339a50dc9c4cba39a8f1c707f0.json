{"sha": "513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzZWU3ZDJjZDlhNjAzMzlhNTBkYzljNGNiYTM5YThmMWM3MDdmMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-28T21:21:50Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-28T21:21:50Z"}, "message": "tree: Don't reuse types if TYPE_USER_ALIGN differ [PR94775]\n\nA year ago I submitted this patch:\n\n~~\nHere we trip on the TYPE_USER_ALIGN (t) assert in strip_typedefs: it\ngets \"const d[0]\" with TYPE_USER_ALIGN=0 but the result built by\nbuild_cplus_array_type is \"const char[0]\" with TYPE_USER_ALIGN=1.\n\nWhen we strip_typedefs the element of the array \"const d\", we see it's\na typedef_variant_p, so we look at its DECL_ORIGINAL_TYPE, which is\nchar, but we need to add the const qualifier, so we call\ncp_build_qualified_type -> build_qualified_type\nwhere get_qualified_type checks to see if we already have such a type\nby walking the variants list, which in this case is:\n\n  char -> c -> const char -> const char -> d -> const d\n\nBecause check_base_type only checks TYPE_ALIGN and not TYPE_USER_ALIGN,\nwe choose the first const char, which has TYPE_USER_ALIGN set.  If the\nelement type of an array has TYPE_USER_ALIGN, the array type gets it too.\n\nSo we can make check_base_type stricter.  I was afraid that it might make\nus reuse types less often, but measuring showed that we build the same\namount of types with and without the patch, while bootstrapping.\n~~\n\nHowever, the patch broke a few tests on STRICT_ALIGNMENT platforms and\nhad to be reverted.  This is another try.  The original patch is kept\nunchanged, but I added the finalize_type_size hunk that ought to fix the\nSTRICT_ALIGNMENT issues.\n\nThe problem is that finalize_type_size can clear TYPE_USER_ALIGN on the\nmain variant of a type, but doesn't clear it on any of the variants.\nThen we end up with types which share the same TYPE_MAIN_VARIANT, but\ntheir TYPE_CANONICAL differs and then the usual \"canonical types differ\nfor identical types\" follows.\n\nI've created alignas19.C to exercise this scenario.  What happens is:\n- when parsing the class S we create a type S in xref_tag,\n- we see alignas(8) so common_handle_aligned_attribute sets T_U_A in S,\n- we parse the member function fn and build_memfn_type creates a copy\n  of S to add const; this variant has T_U_A set,\n- we finish_struct S which calls layout_class_type -> finish_record_type\n  -> finalize_size_type where we reset T_U_A in S (but const S keeps it),\n- finish_non_static_data_member for arr calls maybe_dummy_object with\n  type = S,\n- maybe_dummy_object calls same_type_ignoring_top_level_qualifiers_p\n  to check if S and TREE_TYPE (current_class_ref), which is const S,\n  are the same,\n- same_type_ignoring_top_level_qualifiers_p creates cv-unqualified\n  versions of the passed types.  Previously we'd use our main variant\n  S when stripping \"const S\" of const, but since the T_U_A flags don't\n  match (check_base_type), we create a new variant S'.  Then we crash in\n  comptypes because S and S' have the same TYPE_MAIN_VARIANT but\n  different TYPE_CANONICALs.\n\nWith my patch we'll clear T_U_A for S's variants too, and then instead\nof S' we'll just use S.\n\ngcc/ChangeLog:\n\n\tPR c++/94775\n\t* stor-layout.c (finalize_type_size): If we reset TYPE_USER_ALIGN in\n\tthe main variant, maybe reset it in its variants too.\n\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n\t(check_aligned_type): Check if TYPE_USER_ALIGN match.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94775\n\t* g++.dg/cpp0x/alignas19.C: New test.\n\t* g++.dg/warn/Warray-bounds15.C: New test.", "tree": {"sha": "98d78524466262a1ede32be83fe4593d4f999f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d78524466262a1ede32be83fe4593d4f999f65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a054608c9c409245575e3dfe61b9a36e1bf7ffcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a054608c9c409245575e3dfe61b9a36e1bf7ffcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a054608c9c409245575e3dfe61b9a36e1bf7ffcf"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "784f131ebb89364024ae0000fe5549c63cd33006", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "patch": "@@ -1926,6 +1926,7 @@ finalize_type_size (tree type)\n      However, where strict alignment is not required, avoid\n      over-aligning structures, since most compilers do not do this\n      alignment.  */\n+  bool tua_cleared_p = false;\n   if (TYPE_MODE (type) != BLKmode\n       && TYPE_MODE (type) != VOIDmode\n       && (STRICT_ALIGNMENT || !AGGREGATE_TYPE_P (type)))\n@@ -1937,7 +1938,9 @@ finalize_type_size (tree type)\n       if (mode_align >= TYPE_ALIGN (type))\n \t{\n \t  SET_TYPE_ALIGN (type, mode_align);\n-\t  TYPE_USER_ALIGN (type) = 0;\n+\t  /* Remember that we're about to reset this flag.  */\n+\t  tua_cleared_p = TYPE_USER_ALIGN (type);\n+\t  TYPE_USER_ALIGN (type) = false;\n \t}\n     }\n \n@@ -1991,14 +1994,21 @@ finalize_type_size (tree type)\n \n       /* Copy it into all variants.  */\n       for (variant = TYPE_MAIN_VARIANT (type);\n-\t   variant != 0;\n+\t   variant != NULL_TREE;\n \t   variant = TYPE_NEXT_VARIANT (variant))\n \t{\n \t  TYPE_SIZE (variant) = size;\n \t  TYPE_SIZE_UNIT (variant) = size_unit;\n \t  unsigned valign = align;\n \t  if (TYPE_USER_ALIGN (variant))\n-\t    valign = MAX (valign, TYPE_ALIGN (variant));\n+\t    {\n+\t      valign = MAX (valign, TYPE_ALIGN (variant));\n+\t      /* If we reset TYPE_USER_ALIGN on the main variant, we might\n+\t\t need to reset it on the variants too.  TYPE_MODE will be set\n+\t\t to MODE in this variant, so we can use that.  */\n+\t      if (tua_cleared_p && GET_MODE_ALIGNMENT (mode) >= valign)\n+\t\tTYPE_USER_ALIGN (variant) = false;\n+\t    }\n \t  else\n \t    TYPE_USER_ALIGN (variant) = user_align;\n \t  SET_TYPE_ALIGN (variant, valign);"}, {"sha": "892125b54df19681ce2ef241ee0507fcee8cbcea", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas19.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas19.C?ref=513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/94775\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-mstrict-align\" { target { aarch64*-*-* powerpc*-*-linux* powerpc*-*-elf* } } }\n+\n+struct alignas(8) S {\n+  S *arr[1];\n+  void fn () const { (void) arr[0]; }\n+};"}, {"sha": "0a18f637e0e510e65916ede189cf426e452f0658", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds15.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds15.C?ref=513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/94775\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+template <typename> using a = int;\n+template <bool, typename, typename> using b = int;\n+typedef char d;\n+template <long> using e = int;\n+template <int f, int q> struct h { using i = b<q, a<e<f>>, e<f>>; };\n+template <long f, bool g> using j = typename h<f, g>::i;\n+long ab, k, aj;\n+const d l[]{};\n+class m {\n+public:\n+  m(int);\n+};\n+class n {\n+  void ad() const;\n+  template <class ae> void o(long) const {\n+    using c __attribute__((aligned(1))) = const ae;\n+  }\n+  long p;\n+  template <class, class>\n+  auto s(unsigned long, unsigned long, unsigned long, unsigned long) const;\n+  template <bool = false> auto q(unsigned long, unsigned long) const;\n+};\n+template <class, class>\n+auto n::s(unsigned long, unsigned long, unsigned long, unsigned long t) const {\n+  o<d>(p);\n+  return t;\n+}\n+template <bool g> auto n::q(unsigned long p1, unsigned long p2) const {\n+  using r = j<4, false>;\n+  using ai = j<4, g>;\n+  return s<ai, r>(ab, k, p1, p2);\n+}\n+void n::ad() const {\n+  long f(l[aj]); // { dg-warning \"outside array bounds\" }\n+  m(q(8, f));\n+}"}, {"sha": "430b76168b2b0203fe0bae98a9e380bb0a9b1252", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=513ee7d2cd9a60339a50dc9c4cba39a8f1c707f0", "patch": "@@ -6573,7 +6573,8 @@ check_base_type (const_tree cand, const_tree base)\n \t\t\t        TYPE_ATTRIBUTES (base)))\n     return false;\n   /* Check alignment.  */\n-  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base))\n+  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base)\n+      && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base))\n     return true;\n   /* Atomic types increase minimal alignment.  We must to do so as well\n      or we get duplicated canonical types. See PR88686.  */\n@@ -6608,6 +6609,7 @@ check_aligned_type (const_tree cand, const_tree base, unsigned int align)\n \t  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)\n \t  /* Check alignment.  */\n \t  && TYPE_ALIGN (cand) == align\n+\t  && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base)\n \t  && attribute_list_equal (TYPE_ATTRIBUTES (cand),\n \t\t\t\t   TYPE_ATTRIBUTES (base))\n \t  && check_lang_type (cand, base));"}]}