{"sha": "6c74ce92d54a4477b46288f6b3cd13d55885d350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3NGNlOTJkNTRhNDQ3N2I0NjI4OGY2YjNjZDEzZDU1ODg1ZDM1MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-20T04:35:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-20T04:35:13Z"}, "message": "compiler: Fix struct hash and equality with _ fields.\n\nFrom-SVN: r191511", "tree": {"sha": "933dcc0498ade9d1da2fc7361de7f9b022b580b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/933dcc0498ade9d1da2fc7361de7f9b022b580b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c74ce92d54a4477b46288f6b3cd13d55885d350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c74ce92d54a4477b46288f6b3cd13d55885d350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c74ce92d54a4477b46288f6b3cd13d55885d350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c74ce92d54a4477b46288f6b3cd13d55885d350/comments", "author": null, "committer": null, "parents": [{"sha": "9d12bc687646448ab491066f34f25f5932d6144a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d12bc687646448ab491066f34f25f5932d6144a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d12bc687646448ab491066f34f25f5932d6144a"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "ea24849657b49a40ce99e0d13db4799429c46c6e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c74ce92d54a4477b46288f6b3cd13d55885d350/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c74ce92d54a4477b46288f6b3cd13d55885d350/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6c74ce92d54a4477b46288f6b3cd13d55885d350", "patch": "@@ -5178,6 +5178,9 @@ Binary_expression::lower_struct_comparison(Gogo* gogo,\n        pf != fields->end();\n        ++pf, ++field_index)\n     {\n+      if (Gogo::is_sink_name(pf->field_name()))\n+\tcontinue;\n+\n       if (field_index > 0)\n \t{\n \t  if (left_temp == NULL)"}, {"sha": "5c210cb28d918912807922db857e6e331c3150fd", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c74ce92d54a4477b46288f6b3cd13d55885d350/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c74ce92d54a4477b46288f6b3cd13d55885d350/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=6c74ce92d54a4477b46288f6b3cd13d55885d350", "patch": "@@ -579,6 +579,9 @@ Type::are_compatible_for_comparison(bool is_equality_op, const Type *t1,\n \t       p != fields->end();\n \t       ++p)\n \t    {\n+\t      if (Gogo::is_sink_name(p->field_name()))\n+\t\tcontinue;\n+\n \t      if (!p->type()->is_comparable())\n \t\t{\n \t\t  if (reason != NULL)\n@@ -4294,6 +4297,9 @@ Struct_type::do_compare_is_identity(Gogo* gogo) const\n        pf != fields->end();\n        ++pf)\n     {\n+      if (Gogo::is_sink_name(pf->field_name()))\n+\treturn false;\n+\n       if (!pf->type()->compare_is_identity(gogo))\n \treturn false;\n \n@@ -4767,6 +4773,9 @@ Struct_type::write_hash_function(Gogo* gogo, Named_type*,\n        pf != fields->end();\n        ++pf)\n     {\n+      if (Gogo::is_sink_name(pf->field_name()))\n+\tcontinue;\n+\n       if (first)\n \tfirst = false;\n       else\n@@ -4858,6 +4867,9 @@ Struct_type::write_equal_function(Gogo* gogo, Named_type* name)\n        pf != fields->end();\n        ++pf, ++field_index)\n     {\n+      if (Gogo::is_sink_name(pf->field_name()))\n+\tcontinue;\n+\n       // Compare one field in both P1 and P2.\n       Expression* f1 = Expression::make_temporary_reference(p1, bloc);\n       f1 = Expression::make_unary(OPERATOR_MULT, f1, bloc);"}]}