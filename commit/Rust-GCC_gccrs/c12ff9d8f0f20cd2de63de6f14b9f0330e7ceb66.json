{"sha": "c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyZmY5ZDhmMGYyMGNkMmRlNjNkZTZmMTRiOWYwMzMwZTdjZWI2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-28T01:53:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-28T01:53:34Z"}, "message": "re PR c++/40975 (ICE in copy_tree_r on array new)\n\n\tPR c++/40975\n\t* cp-tree.def (VEC_INIT_EXPR): Add third operand.\n\t* cp-tree.h (VEC_INIT_EXPR_NELTS): New.\n\t* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.\n\t* tree.c (build_vec_init_expr): Handle getting pointer/nelts.\n\t(build_vec_init_elt): Don't expect an array type.\n\t(build_array_copy): Adjust.\n\t* init.c (perform_member_init): Adjust.\n\t(build_new_1): Use build_vec_init_expr.\n\nFrom-SVN: r173056", "tree": {"sha": "7fc7f017ff214e07e3790efe9c01bfe2b4b52bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fc7f017ff214e07e3790efe9c01bfe2b4b52bdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbaf0d0c082815cf67d958b7c9f596b1f814eca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbaf0d0c082815cf67d958b7c9f596b1f814eca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbaf0d0c082815cf67d958b7c9f596b1f814eca0"}], "stats": {"total": 211, "additions": 166, "deletions": 45}, "files": [{"sha": "8864a3238e92cd3784c0250c25e2aec4be700b0c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -1,3 +1,8 @@\n+2011-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (make_tree_vector_from_list): New.\n+\t* c-common.h: Declare it.\n+\n 2011-04-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR preprocessor/48248"}, {"sha": "802040d9b0327bf342870312dafec1255e1365d5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -9580,6 +9580,17 @@ make_tree_vector_single (tree t)\n   return ret;\n }\n \n+/* Get a new tree vector of the TREE_VALUEs of a TREE_LIST chain.  */\n+\n+VEC(tree,gc) *\n+make_tree_vector_from_list (tree list)\n+{\n+  VEC(tree,gc) *ret = make_tree_vector ();\n+  for (; list; list = TREE_CHAIN (list))\n+    VEC_safe_push (tree, gc, ret, TREE_VALUE (list));\n+  return ret;\n+}\n+\n /* Get a new tree vector which is a copy of an existing one.  */\n \n VEC(tree,gc) *"}, {"sha": "ad6da6be4a8056af7e7c4c32f4bad6d198f396f1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -959,6 +959,7 @@ extern void set_underlying_type (tree x);\n extern VEC(tree,gc) *make_tree_vector (void);\n extern void release_tree_vector (VEC(tree,gc) *);\n extern VEC(tree,gc) *make_tree_vector_single (tree);\n+extern VEC(tree,gc) *make_tree_vector_from_list (tree);\n extern VEC(tree,gc) *make_tree_vector_copy (const VEC(tree,gc) *);\n \n /* In c-gimplify.c  */"}, {"sha": "737ba2e30ea446eaa0aed2b1dc7d2c0df4a78044", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -1,5 +1,15 @@\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/40975\n+\t* cp-tree.def (VEC_INIT_EXPR): Add third operand.\n+\t* cp-tree.h (VEC_INIT_EXPR_NELTS): New.\n+\t* cp-gimplify.c (cp_gimplify_expr) [VEC_INIT_EXPR]: Handle it.\n+\t* tree.c (build_vec_init_expr): Handle getting pointer/nelts.\n+\t(build_vec_init_elt): Don't expect an array type.\n+\t(build_array_copy): Adjust.\n+\t* init.c (perform_member_init): Adjust.\n+\t(build_new_1): Use build_vec_init_expr.\n+\n \t* class.c (resolve_address_of_overloaded_function): Don't\n \tchange OVERLOAD to TREE_LIST.\n \t* pt.c (print_candidates_1): Remove nonsensical assert."}, {"sha": "dc2e0fb4473f0ea3538e72fb657bdf952599c039", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -530,10 +530,12 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       {\n \tlocation_t loc = input_location;\n \ttree init = VEC_INIT_EXPR_INIT (*expr_p);\n-\tint from_array = (init && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);\n+\tint from_array = (init && TREE_TYPE (init)\n+\t\t\t  && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);\n \tgcc_assert (EXPR_HAS_LOCATION (*expr_p));\n \tinput_location = EXPR_LOCATION (*expr_p);\n-\t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p), NULL_TREE,\n+\t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p),\n+\t\t\t\t  VEC_INIT_EXPR_NELTS (*expr_p),\n \t\t\t\t  init, VEC_INIT_EXPR_VALUE_INIT (*expr_p),\n \t\t\t\t  from_array,\n \t\t\t\t  tf_warning_or_error);"}, {"sha": "c9fc9707311de20ac8f2c5eabe01bae755bc75d7", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -83,8 +83,8 @@ DEFTREECODE (AGGR_INIT_EXPR, \"aggr_init_expr\", tcc_vl_exp, 3)\n \n /* Initialization of an array from another array, expressed at a high level\n    so that it works with TARGET_EXPR.  Operand 0 is the target, operand 1\n-   is the initializer.  */\n-DEFTREECODE (VEC_INIT_EXPR, \"vec_init_expr\", tcc_expression, 2)\n+   is the initializer, operand 2 is the number of elements or NULL_TREE.  */\n+DEFTREECODE (VEC_INIT_EXPR, \"vec_init_expr\", tcc_expression, 3)\n \n /* A throw expression.  operand 0 is the expression, if there was one,\n    else it is NULL_TREE.  */"}, {"sha": "a65998d31006beb20dede478d985fe81a53405dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -2896,8 +2896,9 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n        (arg) = next_aggr_init_expr_arg (&(iter)))\n \n /* VEC_INIT_EXPR accessors.  */\n-#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (NODE, 0)\n-#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (NODE, 1)\n+#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 0)\n+#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 1)\n+#define VEC_INIT_EXPR_NELTS(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 2)\n \n /* Indicates that a VEC_INIT_EXPR is a potential constant expression.\n    Only set when the current function is constexpr.  */\n@@ -5022,6 +5023,7 @@ extern tree get_copy_ctor\t\t\t(tree);\n extern tree get_copy_assign\t\t\t(tree);\n extern tree get_default_ctor\t\t\t(tree);\n extern tree get_dtor\t\t\t\t(tree);\n+extern tree get_dtor_sfinae\t\t\t(tree, tsubst_flags_t);\n extern tree locate_ctor\t\t\t\t(tree);\n \n /* In optimize.c */\n@@ -5418,7 +5420,7 @@ extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern tree build_array_copy\t\t\t(tree);\n-extern tree build_vec_init_expr\t\t\t(tree, tree);\n+extern tree build_vec_init_expr\t\t\t(tree, tree, tree, tsubst_flags_t);\n extern void diagnose_non_constexpr_vec_init\t(tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);"}, {"sha": "883734f65f6907e589c93b7fc8623d905cb71331", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -506,7 +506,8 @@ perform_member_init (tree member, tree init)\n       /* mem() means value-initialization.  */\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  init = build_vec_init_expr (type, init);\n+\t  init = build_vec_init_expr (type, init, NULL_TREE,\n+\t\t\t\t      tf_warning_or_error);\n \t  init = build2 (INIT_EXPR, type, decl, init);\n \t  finish_expr_stmt (init);\n \t}\n@@ -541,7 +542,8 @@ perform_member_init (tree member, tree init)\n \t      || same_type_ignoring_top_level_qualifiers_p (type,\n \t\t\t\t\t\t\t    TREE_TYPE (init)))\n \t    {\n-\t      init = build_vec_init_expr (type, init);\n+\t      init = build_vec_init_expr (type, init, NULL_TREE,\n+\t\t\t\t\t  tf_warning_or_error);\n \t      init = build2 (INIT_EXPR, type, decl, init);\n \t      finish_expr_stmt (init);\n \t    }\n@@ -2384,15 +2386,14 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t      vecinit = build_tree_list_vec (*init);\n             }\n \t  init_expr\n-\t    = build_vec_init (data_addr,\n-\t\t\t      cp_build_binary_op (input_location,\n-\t\t\t\t\t\t  MINUS_EXPR, outer_nelts,\n-\t\t\t\t\t\t  integer_one_node,\n-\t\t\t\t\t\t  complain),\n-\t\t\t      vecinit,\n-\t\t\t      explicit_value_init_p,\n-\t\t\t      /*from_array=*/0,\n-                              complain);\n+\t    = build_vec_init_expr (data_addr,\n+\t\t\t\t   (explicit_value_init_p\n+\t\t\t\t    ? void_type_node: vecinit),\n+\t\t\t\t   cp_build_binary_op (input_location,\n+\t\t\t\t\t\t       MINUS_EXPR, outer_nelts,\n+\t\t\t\t\t\t       integer_one_node,\n+\t\t\t\t\t\t       complain),\n+\t\t\t\t   complain);\n \n \t  /* An array initialization is stable because the initialization\n \t     of each element is a full-expression, so the temporaries don't"}, {"sha": "8b1b4dcf40c24b59c75603f55e03af01fe62b51b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -842,11 +842,17 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n \n /* Locate the dtor of TYPE.  */\n \n+tree\n+get_dtor_sfinae (tree type, tsubst_flags_t complain)\n+{\n+  return locate_fn_flags (type, complete_dtor_identifier, NULL_TREE,\n+\t\t\t  LOOKUP_NORMAL, complain);\n+}\n+\n tree\n get_dtor (tree type)\n {\n-  tree fn = locate_fn_flags (type, complete_dtor_identifier, NULL_TREE,\n-\t\t\t     LOOKUP_NORMAL, tf_warning_or_error);\n+  tree fn = get_dtor_sfinae (type, tf_warning_or_error);\n   if (fn == error_mark_node)\n     return NULL_TREE;\n   return fn;"}, {"sha": "2f082a6ff542d5b57167caeeaea9c911605c45dd", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 70, "deletions": 25, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -473,63 +473,107 @@ build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n    another array to copy.  */\n \n static tree\n-build_vec_init_elt (tree type, tree init)\n+build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n {\n-  tree inner_type = strip_array_types (type);\n+  tree inner_type = strip_array_types (TREE_TYPE (type));\n   VEC(tree,gc) *argvec;\n \n-  if (integer_zerop (array_type_nelts_total (type))\n-      || !CLASS_TYPE_P (inner_type))\n+  if (!CLASS_TYPE_P (inner_type))\n     /* No interesting initialization to do.  */\n     return integer_zero_node;\n   else if (init == void_type_node)\n     return build_value_init (inner_type, tf_warning_or_error);\n \n-  gcc_assert (init == NULL_TREE\n-\t      || (same_type_ignoring_top_level_qualifiers_p\n-\t\t  (type, TREE_TYPE (init))));\n-\n-  argvec = make_tree_vector ();\n-  if (init)\n+  if (init == NULL_TREE)\n+    argvec = make_tree_vector ();\n+  else if (TREE_CODE (init) == TREE_LIST)\n+    /* Array init extension, i.e. g++.robertl/eb58.C. */\n+    argvec = make_tree_vector_from_list (init);\n+  else if (same_type_ignoring_top_level_qualifiers_p\n+\t   (inner_type, strip_array_types (TREE_TYPE (init))))\n     {\n+      /* Array copy or list-initialization.  */\n       tree dummy = build_dummy_object (inner_type);\n       if (!real_lvalue_p (init))\n \tdummy = move (dummy);\n-      VEC_quick_push (tree, argvec, dummy);\n+      argvec = make_tree_vector_single (dummy);\n     }\n-  return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+  else\n+    gcc_unreachable ();\n+  init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &argvec, inner_type, LOOKUP_NORMAL,\n-\t\t\t\t    tf_warning_or_error);\n+\t\t\t\t    complain);\n+  release_tree_vector (argvec);\n+\n+  /* For array new, also mark the destructor as used.  */\n+  if (TREE_CODE (type) == POINTER_TYPE\n+      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (inner_type))\n+    {\n+      tree dtor = get_dtor_sfinae (inner_type, complain);\n+      if (dtor == error_mark_node)\n+\treturn error_mark_node;\n+      else if (dtor)\n+\tmark_used (dtor);\n+    }\n+  return init;\n }\n \n-/* Return a TARGET_EXPR which expresses the initialization of an array to\n-   be named later, either default-initialization or copy-initialization\n-   from another array of the same type.  */\n+/* Return a TARGET_EXPR which expresses the initialization of an array.  If\n+   TARGET is an array type, the initialization is of an array to be named\n+   later, and the initialization will be wrapped in a TARGET_EXPR.  If\n+   TARGET is an expression, it is the array to be initialized.  INIT is the\n+   initializer, or void_type_node for value-initialization.  If TARGET is\n+   an expression, NELTS is the number of elements to initialize. */\n \n tree\n-build_vec_init_expr (tree type, tree init)\n+build_vec_init_expr (tree target, tree init, tree nelts,\n+\t\t     tsubst_flags_t complain)\n {\n-  tree slot;\n+  tree slot, type;\n   bool value_init = false;\n-  tree elt_init = build_vec_init_elt (type, init);\n+  tree elt_init;\n+  tree real_nelts;\n+\n+  if (TYPE_P (target))\n+    {\n+      gcc_assert (TREE_CODE (target) == ARRAY_TYPE && nelts == NULL_TREE);\n+      type = target;\n+      slot = build_local_temp (type);\n+    }\n+  else\n+    {\n+      gcc_assert (EXPR_P (target));\n+      slot = target;\n+      type = TREE_TYPE (slot);\n+      gcc_assert (TREE_CODE (type) == POINTER_TYPE && nelts != NULL_TREE);\n+    }\n \n   if (init == void_type_node)\n     {\n       value_init = true;\n       init = NULL_TREE;\n     }\n \n-  slot = build_local_temp (type);\n-  init = build2 (VEC_INIT_EXPR, type, slot, init);\n+  real_nelts = nelts ? nelts : array_type_nelts_total (type);\n+  if (integer_zerop (real_nelts))\n+    /* No elements to initialize.  */\n+    elt_init = integer_zero_node;\n+  else\n+    elt_init = build_vec_init_elt (type, init, complain);\n+\n+  init = build3 (VEC_INIT_EXPR, type, slot, init, nelts);\n   SET_EXPR_LOCATION (init, input_location);\n \n   if (cxx_dialect >= cxx0x\n       && potential_constant_expression (elt_init))\n     VEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n   VEC_INIT_EXPR_VALUE_INIT (init) = value_init;\n \n-  init = build_target_expr (slot, init, tf_warning_or_error);\n-  TARGET_EXPR_IMPLICIT_P (init) = 1;\n+  if (slot != target)\n+    {\n+      init = build_target_expr (slot, init, complain);\n+      TARGET_EXPR_IMPLICIT_P (init) = 1;\n+    }\n \n   return init;\n }\n@@ -547,14 +591,15 @@ diagnose_non_constexpr_vec_init (tree expr)\n   else\n     init = VEC_INIT_EXPR_INIT (expr);\n \n-  elt_init = build_vec_init_elt (type, init);\n+  elt_init = build_vec_init_elt (type, init, tf_warning_or_error);\n   require_potential_constant_expression (elt_init);\n }\n \n tree\n build_array_copy (tree init)\n {\n-  return build_vec_init_expr (TREE_TYPE (init), init);\n+  return build_vec_init_expr (TREE_TYPE (init), init, NULL_TREE,\n+\t\t\t      tf_warning_or_error);\n }\n \n /* Build a TARGET_EXPR using INIT to initialize a new temporary of the"}, {"sha": "73060c0a9b4a8db34358cde5e15cfe3514272e6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -1,3 +1,8 @@\n+2011-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/initlist49.C: New.\n+\t* g++.dg/init/new30.C: New.\n+\n 2011-04-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48788"}, {"sha": "752c4331afb0d4b3d23ef0073bc8d4a0bc5e3cbf", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist49.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist49.C?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -0,0 +1,18 @@\n+// Test for non-trivial list-initialization with array new.\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+struct A\n+{\n+  enum E { c_string, number } e;\n+  A(const char *): e(c_string) {}\n+  A(int): e(number) {}\n+};\n+\n+int main()\n+{\n+  A* ap = new A[2]{1, \"\"};\n+  if (ap[0].e != A::number || ap[1].e != A::c_string)\n+    return 1;\n+  delete[] ap;\n+}"}, {"sha": "24582d8fb1cbda61848f96cb7e867410cab99f70", "filename": "gcc/testsuite/g++.dg/init/new30.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew30.C?ref=c12ff9d8f0f20cd2de63de6f14b9f0330e7ceb66", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/40975\n+\n+struct data_type\n+{\n+    // constructor required to reproduce compiler bug\n+    data_type() {}\n+};\n+\n+struct ptr_type\n+{\n+    // array new as default argument required to reproduce compiler bug\n+    ptr_type (data_type* ptr = new data_type[1]) { delete[] ptr; }\n+};\n+\n+ptr_type obj;"}]}