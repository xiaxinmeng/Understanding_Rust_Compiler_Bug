{"sha": "9288d1120423d9743dd6b4c419f201c4749122f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4OGQxMTIwNDIzZDk3NDNkZDZiNGM0MTlmMjAxYzQ3NDkxMjJmNg==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2004-02-12T00:17:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-02-12T00:17:26Z"}, "message": "ToggleButtonModel.java: Remove dead class.\n\n2004-02-09  Graydon Hoare  <graydon@redhat.com>\n\n\t* javax/swing/ToggleButtonModel.java: Remove dead class.\n\t* javax/swing/plaf/basic/BasicDefaults.java: Remove dead class.\n\t* javax/swing/plaf/basic/BasicButtonListener.java: New class.\n\t* javax/swing/plaf/basic/BasicRootPaneUI.java: New class.\n\t* Makefile.am: Update for new and removed files.\n\t* Makefile.in: Regenerate.\n\n\t* gnu/java/awt/peer/gtk/GdkGraphics2D.java: Initialize default hints.\n\t* javax/swing/AbstractButton.java\n\t(AbstractButton): Initialize fields correctly in ctor.\n\t* javax/swing/JCheckbox.java\n\t(JCheckBox): Override painting flags.\n\t* javax/swing/DefaultButtonModel.java: Conform to sun.\n\t* javax/swing/JComponent.java (paint): Fill with background color\n\tif available.\n\t(processComponentKeyEvent)\n\t(processFocusEvent)\n\t(processKeyEvent)\n\t(processMouseMotionEvent): Remove event-consuming empty methods.\n\t(getUIClassID): Return \"ComponentUI\" not \"JComponent\"\n\t* javax/swing/JFrame.java: Remove some debugging chatter.\n\t(JFrame): Subscribe to window events.\n\t* javax/swing/JRadioButton.java\n\t(JRadioButton): Override painting flags.\n\t* javax/swing/JRootPane.java\n\t(JRootPane): Set background from UIDefaults.\n\t* javax/swing/JToggleButton.java\n\t(ToggleButtonModel): New inner class.\n\t(JToggleButton): Override layout alighment.\n\t* javax/swing/SwingUtilities.java:\n\t(getLocalBounds): Return width and height, not x and y.\n\t(calculateInnerArea): Use local bounds, not bounds.\n\t(layoutCompoundLabel): Provide overridden form.\n\t(layoutCompoundLabel): Correct bugs.\n\t* javax/swing/UIDefaults.java: Correct comment.\n\t* javax/swing/plaf/basic/BasicButtonUI.java:\n\tMove most logic into defaults, external listener.\n\t(paintIcon): Implement icon painting.\n\t(paint): Fix state painting to conform to changes in model.\n\t* javax/swing/plaf/basic/BasicCheckBoxUI.java:\n\tRemove most dead/wrong methods.\n\t(getDefaultIcon): Return defaults.getIcon(\"CheckBox.icon\").\n\t* javax/swing/plaf/basic/BasicIconFactory.java:\n\t(DummyIcon): New class.\n\t(getMenuItemCheckIcon)\n\t(getMenuItemArrowIcon)\n\t(getMenuArrowIcon)\n\t(getCheckBoxMenuItemIcon)\n\t(getRadioButtonMenuItemIcon)\n\t(createEmptyFrameIcon): Return DummyIcons, not null.\n\t(getCheckBoxIcon): Implement an icon that looks like sun's.\n\t(getRadioButtonIcon): Implement an icon that looks like sun's.\n\t* javax/swing/plaf/basic/BasicLookAndFeel.java\n\t(initComponentDefaults): Fix impossible values, add some missing.\n\t* javax/swing/plaf/basic/BasicPanelUI.java (gap): Remove field.\n\t* javax/swing/plaf/basic/BasicRadioButtonUI.java:\n\tRemove most dead/wrong methods.\n\t(icon): New field.\n\t(getDefaultIcon): New method.\n\t* javax/swing/plaf/basic/BasicToggleButtonUI.java:\n\tRemove most dead/wrong methods.\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(getDefaults): Return super.getDefaults(), not BasicDefaults.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c\n\t(Java_gnu_java_awt_peer_gtk_GdkGraphics_clearRect):\n\tImplement \"clearing\" as drawing, when on pixmap drawables.\n\n\t* javax/swing/JButton.java (getUIClassID):\n\t* javax/swing/JCheckBox.java (getUIClassID):\n\t* javax/swing/JEditorPane.java (getUIClassID):\n\t* javax/swing/JLabel.java (getUIClassID):\n\t* javax/swing/JList.java (getUIClassID):\n\t* javax/swing/JOptionPane.java (getUIClassID):\n\t* javax/swing/JPanel.java (getUIClassID):\n\t* javax/swing/JPasswordField.java (uiClassID):\n\t* javax/swing/JRadioButton.java (getUIClassID):\n\t* javax/swing/JRootPane.java (getUIClassID):\n\t* javax/swing/JScrollPane.java (getUIClassID):\n\t* javax/swing/JTabbedPane.java (getUIClassID):\n\t* javax/swing/JToggleButton.java (getUIClassID):\n\t* javax/swing/JTree.java (getUIClassID):\n\t* javax/swing/JViewport.java (getUIClassID):\n\t* javax/swing/text/JTextComponent.java (getUIClassID):\n\tReturn \"fooUI\" not \"Jfoo\"\n\nFrom-SVN: r77686", "tree": {"sha": "fcb9c2df4781981800f59c865ef83b1963ac0eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb9c2df4781981800f59c865ef83b1963ac0eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9288d1120423d9743dd6b4c419f201c4749122f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9288d1120423d9743dd6b4c419f201c4749122f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9288d1120423d9743dd6b4c419f201c4749122f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9288d1120423d9743dd6b4c419f201c4749122f6/comments", "author": null, "committer": null, "parents": [{"sha": "feec8922812c116dd9739928800e24ce06820f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feec8922812c116dd9739928800e24ce06820f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feec8922812c116dd9739928800e24ce06820f26"}], "stats": {"total": 1622, "additions": 873, "deletions": 749}, "files": [{"sha": "b5b260bb3f561595436f6fcfbf169da011711368", "filename": "libjava/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -1,3 +1,90 @@\n+2004-02-09  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* javax/swing/ToggleButtonModel.java: Remove dead class.\n+\t* javax/swing/plaf/basic/BasicDefaults.java: Remove dead class.\n+\t* javax/swing/plaf/basic/BasicButtonListener.java: New class.\n+\t* javax/swing/plaf/basic/BasicRootPaneUI.java: New class.\n+\t* Makefile.am: Update for new and removed files.\n+\t* Makefile.in: Regenerate.\n+\n+\t* gnu/java/awt/peer/gtk/GdkGraphics2D.java: Initialize default hints.\n+\t* javax/swing/AbstractButton.java \n+\t(AbstractButton): Initialize fields correctly in ctor.\n+\t* javax/swing/JCheckbox.java \n+\t(JCheckBox): Override painting flags.\n+\t* javax/swing/DefaultButtonModel.java: Conform to sun.\n+\t* javax/swing/JComponent.java (paint): Fill with background color\n+\tif available.\n+\t(processComponentKeyEvent)\n+\t(processFocusEvent)\n+\t(processKeyEvent)\n+\t(processMouseMotionEvent): Remove event-consuming empty methods.\n+\t(getUIClassID): Return \"ComponentUI\" not \"JComponent\"\n+\t* javax/swing/JFrame.java: Remove some debugging chatter.\n+\t(JFrame): Subscribe to window events.\n+\t* javax/swing/JRadioButton.java \n+\t(JRadioButton): Override painting flags.\n+\t* javax/swing/JRootPane.java \n+\t(JRootPane): Set background from UIDefaults.\n+\t* javax/swing/JToggleButton.java \n+\t(ToggleButtonModel): New inner class.\n+\t(JToggleButton): Override layout alighment.\n+\t* javax/swing/SwingUtilities.java:\n+\t(getLocalBounds): Return width and height, not x and y.\n+\t(calculateInnerArea): Use local bounds, not bounds.\n+\t(layoutCompoundLabel): Provide overridden form.\n+\t(layoutCompoundLabel): Correct bugs.\n+\t* javax/swing/UIDefaults.java: Correct comment.\n+\t* javax/swing/plaf/basic/BasicButtonUI.java: \n+\tMove most logic into defaults, external listener.\n+\t(paintIcon): Implement icon painting.\n+\t(paint): Fix state painting to conform to changes in model.\n+\t* javax/swing/plaf/basic/BasicCheckBoxUI.java:\n+\tRemove most dead/wrong methods.\n+\t(getDefaultIcon): Return defaults.getIcon(\"CheckBox.icon\").\n+\t* javax/swing/plaf/basic/BasicIconFactory.java:\n+\t(DummyIcon): New class.\n+\t(getMenuItemCheckIcon)\n+\t(getMenuItemArrowIcon) \n+\t(getMenuArrowIcon)\n+\t(getCheckBoxMenuItemIcon)\n+\t(getRadioButtonMenuItemIcon)\n+\t(createEmptyFrameIcon): Return DummyIcons, not null.\n+\t(getCheckBoxIcon): Implement an icon that looks like sun's.\n+\t(getRadioButtonIcon): Implement an icon that looks like sun's.\n+\t* javax/swing/plaf/basic/BasicLookAndFeel.java \n+\t(initComponentDefaults): Fix impossible values, add some missing.\n+\t* javax/swing/plaf/basic/BasicPanelUI.java (gap): Remove field.\n+\t* javax/swing/plaf/basic/BasicRadioButtonUI.java:\n+\tRemove most dead/wrong methods.\n+\t(icon): New field.\n+\t(getDefaultIcon): New method.\n+\t* javax/swing/plaf/basic/BasicToggleButtonUI.java:\n+\tRemove most dead/wrong methods.\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(getDefaults): Return super.getDefaults(), not BasicDefaults.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c\n+\t(Java_gnu_java_awt_peer_gtk_GdkGraphics_clearRect):\n+\tImplement \"clearing\" as drawing, when on pixmap drawables.\n+\n+\t* javax/swing/JButton.java (getUIClassID): \n+\t* javax/swing/JCheckBox.java (getUIClassID):\n+\t* javax/swing/JEditorPane.java (getUIClassID):\n+\t* javax/swing/JLabel.java (getUIClassID): \n+\t* javax/swing/JList.java (getUIClassID): \n+\t* javax/swing/JOptionPane.java (getUIClassID): \n+\t* javax/swing/JPanel.java (getUIClassID): \n+\t* javax/swing/JPasswordField.java (uiClassID): \n+\t* javax/swing/JRadioButton.java (getUIClassID): \n+\t* javax/swing/JRootPane.java (getUIClassID): \n+\t* javax/swing/JScrollPane.java (getUIClassID): \n+\t* javax/swing/JTabbedPane.java (getUIClassID): \n+\t* javax/swing/JToggleButton.java (getUIClassID): \n+\t* javax/swing/JTree.java (getUIClassID): \n+\t* javax/swing/JViewport.java (getUIClassID): \n+\t* javax/swing/text/JTextComponent.java (getUIClassID):\n+\tReturn \"fooUI\" not \"Jfoo\"\n+\n 2004-02-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java"}, {"sha": "d99da5681aa96f47f05fa33056bb60f864c150cb", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -1287,16 +1287,18 @@ javax/swing/border/TitledBorder.java \\\n javax/swing/GrayFilter.java \\\n javax/swing/AbstractAction.java \\\n javax/swing/AbstractButton.java \\\n+javax/swing/plaf/basic/BasicButtonListener.java \\\n javax/swing/plaf/basic/BasicButtonUI.java \\\n javax/swing/plaf/basic/BasicCheckBoxUI.java \\\n-javax/swing/plaf/basic/BasicDefaults.java \\\n javax/swing/plaf/basic/BasicGraphicsUtils.java \\\n javax/swing/plaf/basic/BasicLabelUI.java \\\n javax/swing/plaf/basic/BasicListUI.java \\\n javax/swing/plaf/basic/BasicOptionPaneUI.java \\\n javax/swing/plaf/basic/BasicPanelUI.java \\\n+javax/swing/plaf/basic/BasicRootPaneUI.java \\\n javax/swing/plaf/basic/BasicRadioButtonUI.java \\\n javax/swing/plaf/basic/BasicScrollPaneUI.java \\\n+javax/swing/plaf/basic/BasicSliderUI.java \\\n javax/swing/plaf/basic/BasicSplitPaneDivider.java \\\n javax/swing/plaf/basic/BasicSplitPaneUI.java \\\n javax/swing/plaf/basic/BasicTabbedPaneUI.java \\\n@@ -1416,7 +1418,6 @@ javax/swing/Scrollable.java \\\n javax/swing/SwingConstants.java \\\n javax/swing/SwingUtilities.java \\\n javax/swing/Timer.java \\\n-javax/swing/ToggleButtonModel.java \\\n javax/swing/UIDefaults.java \\\n javax/swing/UIManager.java \\\n javax/swing/UnsupportedLookAndFeelException.java \\"}, {"sha": "4b0d034cd8b61bd3572c080f8d05be447967988d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 91, "deletions": 90, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -992,16 +992,18 @@ javax/swing/border/TitledBorder.java \\\n javax/swing/GrayFilter.java \\\n javax/swing/AbstractAction.java \\\n javax/swing/AbstractButton.java \\\n+javax/swing/plaf/basic/BasicButtonListener.java \\\n javax/swing/plaf/basic/BasicButtonUI.java \\\n javax/swing/plaf/basic/BasicCheckBoxUI.java \\\n-javax/swing/plaf/basic/BasicDefaults.java \\\n javax/swing/plaf/basic/BasicGraphicsUtils.java \\\n javax/swing/plaf/basic/BasicLabelUI.java \\\n javax/swing/plaf/basic/BasicListUI.java \\\n javax/swing/plaf/basic/BasicOptionPaneUI.java \\\n javax/swing/plaf/basic/BasicPanelUI.java \\\n+javax/swing/plaf/basic/BasicRootPaneUI.java \\\n javax/swing/plaf/basic/BasicRadioButtonUI.java \\\n javax/swing/plaf/basic/BasicScrollPaneUI.java \\\n+javax/swing/plaf/basic/BasicSliderUI.java \\\n javax/swing/plaf/basic/BasicSplitPaneDivider.java \\\n javax/swing/plaf/basic/BasicSplitPaneUI.java \\\n javax/swing/plaf/basic/BasicTabbedPaneUI.java \\\n@@ -1121,7 +1123,6 @@ javax/swing/Scrollable.java \\\n javax/swing/SwingConstants.java \\\n javax/swing/SwingUtilities.java \\\n javax/swing/Timer.java \\\n-javax/swing/ToggleButtonModel.java \\\n javax/swing/UIDefaults.java \\\n javax/swing/UIManager.java \\\n javax/swing/UnsupportedLookAndFeelException.java \\\n@@ -2734,83 +2735,6 @@ org/w3c/dom/traversal/NodeFilter.lo \\\n org/w3c/dom/traversal/NodeIterator.lo \\\n org/w3c/dom/traversal/TreeWalker.lo\n lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES = \n-@GTK_CAIRO_FALSE@lib_gnu_java_awt_peer_gtk_la_OBJECTS =  \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkClasspathFontPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkClasspathFontPeerMetrics.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkFontMetrics.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGlyphVector.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGraphics.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGraphics2D.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkPixbufDecoder.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkArg.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkArgList.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkButtonPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCanvasPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkChoicePeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkClipboard.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkContainerPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkDialogPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFileDialogPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFontPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFramePeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkGenericPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkImage.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkImagePainter.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkLabelPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkListPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMainThread.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuBarPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuItemPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkOffScreenImage.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkPanelPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkPopupMenuPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkScrollPanePeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkScrollbarPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextAreaPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextFieldPeer.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkToolkit.lo \\\n-@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkWindowPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.lo \\\n-@GTK_CAIRO_FALSE@jni/gtk-peer/gthread-jni.lo jni/classpath/jcl.lo \\\n-@GTK_CAIRO_FALSE@jni/classpath/jnilink.lo jni/classpath/native_state.lo \\\n-@GTK_CAIRO_FALSE@jni/classpath/primlib.lo\n @GTK_CAIRO_TRUE@lib_gnu_java_awt_peer_gtk_la_OBJECTS =  \\\n @GTK_CAIRO_TRUE@gnu/java/awt/peer/gtk/GdkClasspathFontPeer.lo \\\n @GTK_CAIRO_TRUE@gnu/java/awt/peer/gtk/GdkClasspathFontPeerMetrics.lo \\\n@@ -2892,6 +2816,83 @@ lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES =\n @GTK_CAIRO_TRUE@jni/gtk-peer/gthread-jni.lo jni/classpath/jcl.lo \\\n @GTK_CAIRO_TRUE@jni/classpath/jnilink.lo jni/classpath/native_state.lo \\\n @GTK_CAIRO_TRUE@jni/classpath/primlib.lo\n+@GTK_CAIRO_FALSE@lib_gnu_java_awt_peer_gtk_la_OBJECTS =  \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkClasspathFontPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkClasspathFontPeerMetrics.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkFontMetrics.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGlyphVector.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGraphics.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkGraphics2D.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GdkPixbufDecoder.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkArg.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkArgList.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkButtonPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCanvasPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkCheckboxPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkChoicePeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkClipboard.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkContainerPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkDialogPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkEmbeddedWindowPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFileDialogPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFontPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkFramePeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkGenericPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkImage.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkImagePainter.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkLabelPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkListPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMainThread.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuBarPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuItemPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkMenuPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkOffScreenImage.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkPanelPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkPopupMenuPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkScrollPanePeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkScrollbarPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextAreaPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkTextFieldPeer.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkToolkit.lo \\\n+@GTK_CAIRO_FALSE@gnu/java/awt/peer/gtk/GtkWindowPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.lo \\\n+@GTK_CAIRO_FALSE@jni/gtk-peer/gthread-jni.lo jni/classpath/jcl.lo \\\n+@GTK_CAIRO_FALSE@jni/classpath/jnilink.lo jni/classpath/native_state.lo \\\n+@GTK_CAIRO_FALSE@jni/classpath/primlib.lo\n lib_gnu_awt_xlib_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n gnu/gcj/xlib/natColormap.lo gnu/gcj/xlib/natDisplay.lo \\\n gnu/gcj/xlib/natDrawable.lo gnu/gcj/xlib/natFont.lo \\\n@@ -4368,9 +4369,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/swing/SingleSelectionModel.P \\\n .deps/javax/swing/SizeRequirements.P .deps/javax/swing/SizeSequence.P \\\n .deps/javax/swing/SwingConstants.P .deps/javax/swing/SwingUtilities.P \\\n-.deps/javax/swing/Timer.P .deps/javax/swing/ToggleButtonModel.P \\\n-.deps/javax/swing/ToolTipManager.P .deps/javax/swing/UIDefaults.P \\\n-.deps/javax/swing/UIManager.P \\\n+.deps/javax/swing/Timer.P .deps/javax/swing/ToolTipManager.P \\\n+.deps/javax/swing/UIDefaults.P .deps/javax/swing/UIManager.P \\\n .deps/javax/swing/UnsupportedLookAndFeelException.P \\\n .deps/javax/swing/ViewportLayout.P .deps/javax/swing/WindowConstants.P \\\n .deps/javax/swing/border/AbstractBorder.P \\\n@@ -4466,9 +4466,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/swing/plaf/ToolTipUI.P .deps/javax/swing/plaf/TreeUI.P \\\n .deps/javax/swing/plaf/UIResource.P .deps/javax/swing/plaf/ViewportUI.P \\\n .deps/javax/swing/plaf/basic/BasicBorders.P \\\n+.deps/javax/swing/plaf/basic/BasicButtonListener.P \\\n .deps/javax/swing/plaf/basic/BasicButtonUI.P \\\n .deps/javax/swing/plaf/basic/BasicCheckBoxUI.P \\\n-.deps/javax/swing/plaf/basic/BasicDefaults.P \\\n .deps/javax/swing/plaf/basic/BasicGraphicsUtils.P \\\n .deps/javax/swing/plaf/basic/BasicIconFactory.P \\\n .deps/javax/swing/plaf/basic/BasicLabelUI.P \\\n@@ -4477,7 +4477,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/swing/plaf/basic/BasicOptionPaneUI.P \\\n .deps/javax/swing/plaf/basic/BasicPanelUI.P \\\n .deps/javax/swing/plaf/basic/BasicRadioButtonUI.P \\\n+.deps/javax/swing/plaf/basic/BasicRootPaneUI.P \\\n .deps/javax/swing/plaf/basic/BasicScrollPaneUI.P \\\n+.deps/javax/swing/plaf/basic/BasicSliderUI.P \\\n .deps/javax/swing/plaf/basic/BasicSplitPaneDivider.P \\\n .deps/javax/swing/plaf/basic/BasicSplitPaneUI.P \\\n .deps/javax/swing/plaf/basic/BasicTabbedPaneUI.P \\\n@@ -4652,8 +4654,7 @@ Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)\n \t  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n $(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ configure.in  acinclude.m4 \\\n-\t\t./acinclude.m4 ./aclocal.m4 ./glib-2.0.m4 ./gtk-2.0.m4 \\\n-\t\t./libart.m4\n+\t\t./acinclude.m4 ./aclocal.m4 ./pkg.m4\n \tcd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n \n config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n@@ -4887,7 +4888,7 @@ uninstall-toolexecmainlibDATA:\n all-recursive install-data-recursive install-exec-recursive \\\n installdirs-recursive install-recursive uninstall-recursive  \\\n check-recursive installcheck-recursive info-recursive dvi-recursive:\n-\t@set fnord $(MAKEFLAGS); amf=$$2; \\\n+\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n \tdot_seen=no; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\\n \tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n@@ -4907,11 +4908,11 @@ check-recursive installcheck-recursive info-recursive dvi-recursive:\n \n mostlyclean-recursive clean-recursive distclean-recursive \\\n maintainer-clean-recursive:\n-\t@set fnord $(MAKEFLAGS); amf=$$2; \\\n+\t@set fnord $$MAKEFLAGS; amf=$$2; \\\n \tdot_seen=no; \\\n \trev=''; list='$(SUBDIRS)'; for subdir in $$list; do \\\n \t  rev=\"$$subdir $$rev\"; \\\n-\t  test \"$$subdir\" = \".\" && dot_seen=yes; \\\n+\t  test \"$$subdir\" != \".\" || dot_seen=yes; \\\n \tdone; \\\n \ttest \"$$dot_seen\" = \"no\" && rev=\". $$rev\"; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\"}, {"sha": "e985696d9515cca27013b2327fa52c7d605c2a7f", "filename": "libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -158,7 +158,7 @@ public Graphics create (int x, int y, int width, int height)\n     setFont (new Font(\"SansSerif\", Font.PLAIN, 12));\n     setTransform (new AffineTransform ());\n     setStroke (new BasicStroke ());\n-    setRenderingHints (new HashMap ());\n+    setRenderingHints (getDefaultHints());\n \n     stateStack = new Stack();\n   }\n@@ -174,7 +174,7 @@ public Graphics create (int x, int y, int width, int height)\n     setFont (new Font(\"SansSerif\", Font.PLAIN, 12));\n     setTransform (new AffineTransform ());\n     setStroke (new BasicStroke ());\n-    setRenderingHints (new HashMap ());\n+    setRenderingHints (getDefaultHints());\n \n     stateStack = new Stack ();\n   }"}, {"sha": "12244b3133e19adf7c1d426fb7ec6b5de691cb77", "filename": "libjava/javax/swing/AbstractButton.java", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FAbstractButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FAbstractButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractButton.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -186,19 +186,19 @@ public abstract class AbstractButton extends JComponent\n   String text;\n \n   /** The vertical alignment of the button's text and icon. */\n-  int vert_align = CENTER;\n+  int vert_align;\n \n   /** The horizontal alignment of the button's text and icon. */\n-  int hori_align = CENTER;\n+  int hori_align;\n \n   /** The horizontal position of the button's text relative to its icon. */\n-  int hori_text_pos = CENTER;\n+  int hori_text_pos;\n \n   /** The vertical position of the button's text relative to its icon. */\n-  int vert_text_pos = CENTER;\n+  int vert_text_pos;\n \n   /** Whether or not the button paints its border. */\n-  boolean paint_border = true;\n+  boolean paint_border;\n \n   /** Whether or not the button paints its focus state. */\n   boolean paint_focus;\n@@ -487,8 +487,16 @@ public void focusGained(FocusEvent event)\n     model.addChangeListener(changeListener);\n     model.addItemListener(itemListener);\n \n+    hori_align = CENTER;\n+    hori_text_pos = TRAILING;\n+    vert_align = CENTER;\n+    vert_text_pos = CENTER;\n+    paint_border = true;\n+    content_area_filled = true;\n+\n     setAlignmentX(LEFT_ALIGNMENT);\n     setAlignmentY(CENTER_ALIGNMENT);\n+\n     addFocusListener(new ButtonFocusListener());\n     updateUI();\n   }"}, {"sha": "edffc39d6e51c04693dc41cc3bc4c4c128f036b2", "filename": "libjava/javax/swing/DefaultButtonModel.java", "status": "modified", "additions": 52, "deletions": 42, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -55,15 +55,23 @@\n  * button. The concrete button type holding this state may be a a \"toggle\"\n  * button (checkbox, radio button) or a \"push\" button (menu button, button).\n  * \n- * Any change to the model's properties will trigger the firing of a\n- * ChangeEvent.\n+ * If the model is disabled, only the \"selected\" property can be changed.\n+ * An attempt to change the \"armed\", \"rollover\" or \"pressed\" properties \n+ * while the model is disabled will be blocked.\n  *\n- * Any change to the \"pressed\" property will trigger the firing of an\n- * ItemEvent in addition to ChangeEvent.\n+ * Any successful (non-blocked) change to the model's properties will\n+ * trigger the firing of a ChangeEvent.\n  *\n- * Any change which causes the enabled, armed and pressed properties to\n- * simultaneously become <code>true</code> will trigger the firing of an\n- * ActionEvent in addition to the ChangeEvent.\n+ * Any change to the \"selected\" property will trigger the firing of an\n+ * ItemEvent in addition to ChangeEvent. This is true whether the model is\n+ * enabled or not.\n+ *\n+ * One other state change is special: the transition from \"enabled, armed\n+ * and pressd\" to \"enabled, armed and not-pressed\". This is considered the\n+ * \"trailing edge\" of a successful mouse click, and therefore fires an \n+ * ActionEvent in addition to a ChangeEvent.\n+ *\n+ * In all other respects this class is just a container of boolean flags.\n  *\n  * @author Graydon Hoare (graydon&064;redhat.com)\n  */\n@@ -80,9 +88,9 @@ public class DefaultButtonModel implements ButtonModel, Serializable\n    be pressed or selected unless they are enabled. */\n   static int ENABLED = 2;\n \n-  /** State constant indicating that the button has been fully\n-   pressed. This usually happens when a user has released the mouse over a\n-   previously \"armed\" button. */\n+  /** State constant indicating that the user is holding down the button.\n+   When this transitions from true to false, an ActionEvent may be fired,\n+   depending on the value of the \"armed\" property.*/\n   static int PRESSED = 4;\n \n   /** State constant indicating that the mouse is currently positioned over\n@@ -108,8 +116,8 @@ public class DefaultButtonModel implements ButtonModel, Serializable\n \n   /** The group this model belongs to. Only one button in a group may be\n       selected at any given time. */\n-    ButtonGroup group;\n-\n+  ButtonGroup group;\n+  \n   /** The key code (one of {@link java.awt.event.KeyEvent} VK_*) used to\n       press this button via a keyboard interface. */\n   int mnemonic;\n@@ -120,7 +128,8 @@ public class DefaultButtonModel implements ButtonModel, Serializable\n \n   public DefaultButtonModel()\n   {\n-    stateMask = 0;\n+    stateMask = ENABLED;\n+    mnemonic = java.awt.event.KeyEvent.VK_UNDEFINED;\n     listenerList = new EventListenerList();    \n     changeEvent = new ChangeEvent(this);\n   }\n@@ -143,10 +152,10 @@ public Object[] getSelectedObjects()\n    * @param l The listener to add\n    */\n   public void addActionListener(ActionListener l)\n-\t    {\n+  {\n     listenerList.add(ActionListener.class, l);\n-    }\n-\n+  }\n+  \n   /**\n    * Remove an ActionListener to the model. Usually only called to\n    * unsubscribe an AbstractButton's listener to the model.\n@@ -262,13 +271,15 @@ protected void changeState(int stateflag, boolean b)\n     if (oldstate == newstate)\n       return;\n \n+    if ((stateflag != SELECTED) \n+        && (stateflag != ENABLED)\n+        && (stateMask & ENABLED) == 0)\n+      return;\n+\n     stateMask = newstate;\n \n     fireStateChanged(changeEvent);\n \n-    if ((newstate & ENABLED) == 0)\n-      return;\n-\n     if ((oldstate & SELECTED) == 0\n         && (newstate & SELECTED) == SELECTED)\n       fireItemStateChanged(new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, \n@@ -278,27 +289,26 @@ else if ((oldstate & SELECTED) == SELECTED\n              && (newstate & SELECTED) == 0)\n       fireItemStateChanged(new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, \n                                          null, ItemEvent.DESELECTED));\n-\n-    else if ((newstate & ARMED) == ARMED\n-             && (newstate & PRESSED) == PRESSED)\n-\t    {\n+    \n+    else if (((oldstate & ARMED) == ARMED && (oldstate & PRESSED) == PRESSED)\n+             &&\n+             ((newstate & ARMED) == ARMED && (newstate & PRESSED) == 0))\n+      {\n         fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED,\n                                             actionCommand));\n-        stateMask = stateMask & ~(PRESSED | ARMED);\n-\t    }\n-    \n+      }\n     }\n-\n+  \n   /**\n    * Get the value of the model's \"armed\" property.\n    * \n    * @return The current \"armed\" property \n    */\n   public boolean isArmed()\n-\t    {\n+  {\n     return (stateMask & ARMED) == ARMED;\n-    }\n-\n+  }\n+  \n   /**\n    * Set the value of the model's \"armed\" property.\n    *\n@@ -396,7 +406,7 @@ public boolean isRollover()\n    * @return The current \"mnemonic\" property\n    */\n   public int getMnemonic()\n-    { \n+  { \n     return mnemonic;\n   }\n \n@@ -406,14 +416,14 @@ public int getMnemonic()\n    * @param key The new \"mnemonic\" property\n    */\n   public void setMnemonic(int key)\n-\t    {\n+  {\n     if (mnemonic != key)\n-\t\t    {\n+      {\n         mnemonic = key;\n         fireStateChanged(changeEvent);\n-\t\t    }\n+      }\n   }\n-\n+  \n   /**\n    * Set the value of the model's \"actionCommand\" property. This property\n    * is used as the \"command\" property of the {@link ActionEvent} fired\n@@ -422,14 +432,14 @@ public void setMnemonic(int key)\n    * @param s The new \"actionCommand\" property.\n    */\n   public void setActionCommand(String s)\n-\t\t    {\n+  {\n     if (actionCommand != s)\n       {\n         actionCommand = s;\n         fireStateChanged(changeEvent);\n-\t\t    }\n-\t    } \n-\n+      }\n+  } \n+  \n   /**\n    * Set the value of the model's \"actionCommand\" property. This property\n    * is used as the \"command\" property of the {@link ActionEvent} fired\n@@ -438,7 +448,7 @@ public void setActionCommand(String s)\n    * @return The current \"actionCommand\" property\n    */\n   public String getActionCommand()\n-\t    {\n+  {\n     return actionCommand;\n   }\n \n@@ -456,6 +466,6 @@ public void setGroup(ButtonGroup g)\n       {\n         group = g;\n         fireStateChanged(changeEvent);\n-\t    }\n-    }\n+      }\n+  }\n }"}, {"sha": "4ec9fd19ceea769d51a7c7d71108713d0e5f8f5e", "filename": "libjava/javax/swing/JButton.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJButton.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -98,7 +98,7 @@ public AccessibleContext getAccessibleContext()\n     public String getUIClassID()\n     {\n \t//Returns a string that specifies the name of the L&F class that renders this component.  \n-\treturn \"JButton\";\n+\treturn \"ButtonUI\";\n     }\n   \n     public boolean isDefaultButton()"}, {"sha": "b1a484d9a9b4c5abdcc80ac3734cdc45c3ef6bdf", "filename": "libjava/javax/swing/JCheckBox.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJCheckBox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJCheckBox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJCheckBox.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -70,6 +70,8 @@ public JCheckBox(String text)\n     public JCheckBox(String text, Icon icon)\n     {\n \tsuper(text, icon);\n+        paint_border = false;\n+        content_area_filled = false;\n     }\n \n     \n@@ -82,7 +84,7 @@ public AccessibleContext getAccessibleContext()\n     public String getUIClassID()\n     {\n \t//Returns a string that specifies the name of the L&F class that renders this component.  \n-\treturn \"JCheckBox\";\n+\treturn \"CheckBoxUI\";\n     }\n   \n     protected  String paramString()"}, {"sha": "afe5700d13e82548eec7e16b3117a02f36d1b035", "filename": "libjava/javax/swing/JComponent.java", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJComponent.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -763,9 +763,17 @@ public void paint(Graphics g)\n \t\t\n \t\tif (use_double_buffer)\n \t\t{\n-\t\t\tim = createImage (r.width, r.height);\n-\t\t\tg2 = im.getGraphics ();\n-\t\t\tg2.clearRect (0, 0, r.width, r.height);\n+                  im = createImage (r.width, r.height);\n+                  g2 = im.getGraphics ();\n+                  if (this.getBackground() != null)\n+                    {\n+                      Color save = g2.getColor();\n+                      g2.setColor(this.getBackground());\n+                      g2.fillRect (0, 0, r.width, r.height);\n+                      g2.setColor(save);\n+                    }\n+                  else\n+                    g2.clearRect(0, 0, r.width, r.height);\n \t\t}\n \t\t\n \t\tpaintBorder(g2);\n@@ -837,28 +845,6 @@ protected  String paramString()\n \t\t//      Returns a string representation of this JComponent.\n \t\treturn \"JComponent\";\n \t}\n-\tprotected  void processComponentKeyEvent(KeyEvent e)\n-\t{\n-\t\t//     Process any key events that the component itself recognizes.\n-\t    //System.out.println(\"COMP_KEY-EVENT: \" + e);\n-\t}\n-\tprotected  void processFocusEvent(FocusEvent e)\n-\t{\n-\t\t//      Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.\n-\t    //System.out.println(\"FOCUS_EVENT: \" + e);\n-\t}\n-\n-\tprotected  void processKeyEvent(KeyEvent e)\n-\t{\n-\t\t//      Override processKeyEvent to process events protected\n-\t    //System.out.println(\"KEY-EVENT: \" + e);\n-\t}\n-\n-        public void processMouseMotionEvent(MouseEvent e)\n-\t{\n-\t    //      Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects.\n-\t    //System.out.println(\"COMP_MOUSE-EVENT: \" + e + \", MEMORY = \" + Runtime.getRuntime().freeMemory());\n-\t}\n \n \tpublic void registerKeyboardAction(ActionListener anAction,\n \t                            KeyStroke aKeyStroke,\n@@ -1044,7 +1030,7 @@ public void update(Graphics g)\n         public String getUIClassID()\n \t{\n \t\t///          Return the UIDefaults key used to look up the name of the swing.\n-\t\treturn \"JComponent\";\n+\t\treturn \"ComponentUI\";\n \t}\n \n \tprotected void setUI(ComponentUI newUI)"}, {"sha": "4722e1e1ebcf617caac31ccc44c294c022d75197", "filename": "libjava/javax/swing/JEditorPane.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJEditorPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJEditorPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJEditorPane.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -137,7 +137,7 @@ public String getText()\n     { return super.getText();    }\n     \n     public String getUIClassID()\n-    {    return \"JEditorPane\";  }\n+    {    return \"EditorPaneUI\";  }\n \n     public boolean isFocusCycleRoot()\n     { return focus_root;    }"}, {"sha": "864f6bae4e0e0a13395d4fbae5db0156292f104d", "filename": "libjava/javax/swing/JFrame.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJFrame.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -38,6 +38,7 @@\n \n package javax.swing;\n \n+import java.awt.AWTEvent;\n import java.awt.BorderLayout;\n import java.awt.Component;\n import java.awt.Container;\n@@ -105,6 +106,7 @@ public JFrame(String title)\n     protected  void frameInit()\n     {\n       super.setLayout(new BorderLayout(1, 1));\n+      enableEvents(AWTEvent.WINDOW_EVENT_MASK);\n       getRootPane(); // will do set/create\n     }\n   \n@@ -201,9 +203,7 @@ protected  String paramString()\n \n     protected  void processWindowEvent(WindowEvent e)\n     {\n-\t//\tSystem.out.println(\"PROCESS_WIN_EV-1: \" + e);\n \tsuper.processWindowEvent(e); \n-\t//\tSystem.out.println(\"PROCESS_WIN_EV-2: \" + e);\n \tswitch (e.getID())\n \t    {\n \t    case WindowEvent.WINDOW_CLOSING:\n@@ -212,13 +212,11 @@ protected  void processWindowEvent(WindowEvent e)\n \t\t\t{\n \t\t\tcase EXIT_ON_CLOSE:\n \t\t\t    {\n-\t\t\t\tSystem.out.println(\"user requested exit on close\");\n \t\t\t\tSystem.exit(1);\n \t\t\t\tbreak;\n \t\t\t    }\n \t\t\tcase DISPOSE_ON_CLOSE:\n \t\t\t    {\n-\t\t\t\tSystem.out.println(\"user requested dispose on close\");\n \t\t\t\tdispose();\n \t\t\t\tbreak;\n \t\t\t    }"}, {"sha": "2d1c440ca2c7691781ec339a4797dabd9a8304f9", "filename": "libjava/javax/swing/JLabel.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJLabel.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -148,7 +148,7 @@ public String getText()\n     {\treturn text;    }\n \n     public String getUIClassID()\n-    {\treturn \"JLabel\";    }\n+    {\treturn \"LabelUI\";    }\n \n     public int getVerticalAlignment()\n     {"}, {"sha": "f87ce6201a94ec32a25c8e79e768201b7a27111b", "filename": "libjava/javax/swing/JList.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJList.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -212,7 +212,7 @@ public void updateUI()\n \n     public String getUIClassID()\n     {\n-\treturn \"JList\";\n+\treturn \"ListUI\";\n     }\n \n "}, {"sha": "2992d2441a52bb426737cf64851858ca6f0ded49", "filename": "libjava/javax/swing/JOptionPane.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJOptionPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJOptionPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJOptionPane.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -161,7 +161,7 @@ public Object getValue()\n     {\treturn val;    }\n \n     public String getUIClassID()\n-    {\treturn \"JOptionPane\";    }\n+    {\treturn \"OptionPaneUI\";    }\n \n \n     public void setUI(OptionPaneUI ui) {"}, {"sha": "29abffc6ceef981f67275bd21d88b4bd96688c6c", "filename": "libjava/javax/swing/JPanel.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJPanel.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -85,7 +85,7 @@ public JPanel(LayoutManager layout,\n     } \n \n     public String getUIClassID()\n-    {\treturn \"JPanel\";    }\n+    {\treturn \"PanelUI\";    }\n \n \n     public void setUI(PanelUI ui) {"}, {"sha": "a67f33caffb718f7d901f70747c10ebedf996fd4", "filename": "libjava/javax/swing/JPasswordField.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJPasswordField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJPasswordField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJPasswordField.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -102,7 +102,7 @@ public AccessibleRole getAccessibleRole() {\n \t/**\n \t * uiClassID\n \t */\n-\tprivate static final String uiClassID = \"PasswordFIeldUI\";\n+\tprivate static final String uiClassID = \"PasswordFieldUI\";\n \n \t/**\n \t * echoChar.  Default is 0"}, {"sha": "0f657300027510e3e31793426d3dc49a5d52749d", "filename": "libjava/javax/swing/JRadioButton.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJRadioButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJRadioButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJRadioButton.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -65,6 +65,8 @@ public JRadioButton(String text)\n     public JRadioButton(String text, Icon icon)\n     {\n \tsuper(text, icon);\n+        paint_border = false;\n+        content_area_filled = false;\n     }\n \n     \n@@ -77,7 +79,7 @@ public AccessibleContext getAccessibleContext()\n     public String getUIClassID()\n     {\n \t//Returns a string that specifies the name of the L&F class that renders this component.  \n-\treturn \"JRadioButton\";\n+\treturn \"RadioButtonUI\";\n     }\n   \n     protected  String paramString()"}, {"sha": "e7ec0bf806fffb3969e70d93dd8483497d5c3cf5", "filename": "libjava/javax/swing/JRootPane.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJRootPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJRootPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJRootPane.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -75,7 +75,6 @@ static protected class RootLayout extends BorderLayout\n       public Dimension preferredLayoutSize ( Container c )\n \t{\t    \n \t  Dimension p = super.preferredLayoutSize(c);\n-\t  System.out.println(\"              PREF-SIZE from RootLayout = \" + p);\n \t  return p;\n \t}        \n     }\n@@ -97,7 +96,7 @@ public Dimension preferredLayoutSize ( Container c )\n     /********************************************************/\n \n     public String getUIClassID()\n-    {\treturn \"JPanel\";    }\n+    {\treturn \"RootPaneUI\";    }\n \n     \n     void setJMenuBar(JMenuBar m)\n@@ -169,7 +168,7 @@ public void setLayeredPane(JLayeredPane f)\n     JRootPane()\n     {\n \tsetLayout(createRootLayout());\n-\t\n+\tsetBackground(UIManager.getColor(\"control\"));\n \tgetGlassPane();\n \tgetLayeredPane();\n \tgetContentPane();"}, {"sha": "6a63be5f2e7a911eece7171548945287a892ebc8", "filename": "libjava/javax/swing/JScrollPane.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJScrollPane.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -86,7 +86,7 @@ public JScrollPane(Component view, int vsbPolicy, int hsbPolicy)\n     public String getUIClassID()\n     {\n \t//Returns a string that specifies the name of the L&F class that renders this component.  \n-\treturn \"JScrollPane\";\n+\treturn \"ScrollPaneUI\";\n     }\n \n     public JViewport getViewport()"}, {"sha": "7373c50808e41e983ba3175f106aac3e8f125374", "filename": "libjava/javax/swing/JTabbedPane.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJTabbedPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJTabbedPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJTabbedPane.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -102,7 +102,7 @@ public Component getComponentAt(int i)\n     }\n     \n     public String getUIClassID()\n-    {\treturn \"JTabbedPane\";    }\n+    {\treturn \"TabbedPaneUI\";    }\n \n \n     public void setUI(TabbedPaneUI ui) {"}, {"sha": "297bbc929feefb2a835b7c11f0931c745b6cf19f", "filename": "libjava/javax/swing/JToggleButton.java", "status": "modified", "additions": 64, "deletions": 47, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJToggleButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJToggleButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJToggleButton.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -44,66 +44,83 @@\n \n public class JToggleButton extends AbstractButton implements Accessible\n {\n-    public JToggleButton()\n-    {\n-\tthis(null, null);\n-    }\n-    public JToggleButton(Action a)\n-    {\n-\tthis();\n-\tsetAction(a);\n-    }\n \n-    public JToggleButton(Icon icon)\n-    { \n-\tthis(null, icon);\n-    }    \n-  \n-    public JToggleButton(String text)\n+  public class ToggleButtonModel extends DefaultButtonModel\n+  {\n+    public void setPressed(boolean b)  \n     {\n-\tthis(text, null);\n-    }\n+      if (! isEnabled())\n+        return;\n       \n-    public JToggleButton(String text, Icon icon)\n-    {\n-\tthis(text, icon, false);\n+      super.setPressed(b);\n+      \n+      // setPressed(false) == mouse release on us,\n+      // if we were armed, we flip the selected state.\n+      if (!b && isArmed())\n+        setSelected(! isSelected());\n     }\n+  }\n+\n+\n+  public JToggleButton()\n+  {\n+    this(null, null);\n+  }\n+  public JToggleButton(Action a)\n+  {\n+    this();\n+    setAction(a);\n+  }\n+\n+  public JToggleButton(Icon icon)\n+  { \n+    this(null, icon);\n+  }    \n+  \n+  public JToggleButton(String text)\n+  {\n+    this(text, null);\n+  }\n+      \n+  public JToggleButton(String text, Icon icon)\n+  {\n+    this(text, icon, false);\n+  }\n \n-    public JToggleButton (String text, Icon icon, boolean selected) \n-    {\n-\tsuper(text, icon);\n+  public JToggleButton (String text, Icon icon, boolean selected) \n+  {\n+    super(text, icon);\n \n-        // Create the model\n-        setModel(new ToggleButtonModel());\n-\t\n-        model.setSelected(selected);\n-    }\n+    hori_align = LEADING;\n+    setModel(new ToggleButtonModel());\t\n+    model.setSelected(selected);\n+  }\n \n \n     \n-    public AccessibleContext getAccessibleContext()\n-    {\n-\t//Gets the AccessibleContext associated with this JToggleButton. \n-\treturn null;\n-    }\n+  public AccessibleContext getAccessibleContext()\n+  {\n+    //Gets the AccessibleContext associated with this JToggleButton. \n+    return null;\n+  }\n   \n-    public String getUIClassID()\n-    {\n-\t//Returns a string that specifies the name of the L&F class that renders this component.  \n-\treturn \"JToggleButton\";\n-    }\n+  public String getUIClassID()\n+  {\n+    //Returns a string that specifies the name of the L&F class that renders this component.  \n+    return \"ToggleButtonUI\";\n+  }\n   \n-    protected  String paramString()\n-    {\n-\treturn \"JToggleButton\";\n-    }\n+  protected  String paramString()\n+  {\n+    return \"JToggleButton\";\n+  }\n   \n   \n-    public void updateUI()\n-    {\t\n-\tButtonUI b = (ButtonUI)UIManager.getUI(this);\n-\tsetUI(b);\n-    }\n+  public void updateUI()\n+  {\t\n+    ButtonUI b = (ButtonUI)UIManager.getUI(this);\n+    setUI(b);\n+  }\n }\n \n "}, {"sha": "bdf519b911eba5616ff088c1a66e3e7d4de4a163", "filename": "libjava/javax/swing/JTree.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJTree.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJTree.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJTree.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -83,7 +83,7 @@ public void updateUI()\n     \n     public String getUIClassID()\n     {\n-\treturn \"JTree\";\n+\treturn \"TreeUI\";\n     }\n \n "}, {"sha": "18365bcf9ec8fd4df44871c0024fe4ec443fd19f", "filename": "libjava/javax/swing/JViewport.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJViewport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FJViewport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJViewport.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -69,7 +69,7 @@ void setView(Component c)\n \n     public String getUIClassID()\n     {\n-\treturn \"JViewport\";\n+\treturn \"ViewportUI\";\n     }\n \n     public void updateUI()"}, {"sha": "590c3032fb72950caa4a57a12ed2ddb4cc2df027", "filename": "libjava/javax/swing/SwingUtilities.java", "status": "modified", "additions": 132, "deletions": 30, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FSwingUtilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FSwingUtilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FSwingUtilities.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -95,7 +95,9 @@ public static Rectangle calculateInsetArea(Rectangle base, Insets insets,\n   /**\n    * Calculates the portion of the component's bounds which is inside the\n    * component's border insets. This area is usually the area a component\n-   * should confine its painting to.\n+   * should confine its painting to. The coordinates are returned in terms\n+   * of the <em>component's</em> coordinate system, where (0,0) is the\n+   * upper left corner of the component's bounds.\n    *\n    * @param c The component to measure the bounds of\n    * @param r A Rectangle to store the return value in, or\n@@ -108,7 +110,8 @@ public static Rectangle calculateInsetArea(Rectangle base, Insets insets,\n    */\n   public static Rectangle calculateInnerArea(JComponent c, Rectangle r)\n   {\n-    return calculateInsetArea(c.getBounds(), c.getInsets(), r);\n+    Rectangle b = getLocalBounds(c);\n+    return calculateInsetArea(b, c.getInsets(), r);\n   }\n \n   /**\n@@ -123,7 +126,7 @@ public static Rectangle calculateInnerArea(JComponent c, Rectangle r)\n   public static Rectangle getLocalBounds(Component aComponent)\n   {\n     Rectangle bounds = aComponent.getBounds();\n-    return new Rectangle(0, 0, bounds.x, bounds.y);\n+    return new Rectangle(0, 0, bounds.width, bounds.height);\n   }\n \n   /**\n@@ -460,6 +463,7 @@ public static void updateComponentTreeUI(Component comp)\n       ((JComponent)comp).updateUI();\n   }\n \n+\n   /**\n    * <p>Layout a \"compound label\" consisting of a text string and an icon\n    * which is to be placed near the rendered text. Once the text and icon\n@@ -472,9 +476,10 @@ public static void updateComponentTreeUI(Component comp)\n    *\n    * <p>The position values control where the text is placed relative to\n    * the icon. The horizontal position value should be one of the constants\n-   * <code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>. The\n-   * vertical position value should be one fo the constants\n-   * <code>TOP</code>, <code>BOTTOM</code>, <code>CENTER</code>.</p>\n+   * <code>LEADING</code>, <code>TRAILING</code>, <code>LEFT</code>,\n+   * <code>RIGHT</code> or <code>CENTER</code>. The vertical position value\n+   * should be one fo the constants <code>TOP</code>, <code>BOTTOM</code>\n+   * or <code>CENTER</code>.</p>\n    *\n    * <p>The text-icon gap value controls the number of pixels between the\n    * icon and the text.</p>\n@@ -488,12 +493,12 @@ public static void updateComponentTreeUI(Component comp)\n    * <code>CENTER</code>.</p>\n    *\n    * <p>If the <code>LEADING</code> or <code>TRAILING</code> constants are\n-   * given for horizontal alignment, they are interpreted relative to the\n-   * provided component's orientation property, a constant in the {@link\n-   * java.awt.ComponentOrientation} class. For example, if the component's\n-   * orientation is <code>LEFT_TO_RIGHT</code>, then the\n-   * <code>LEADING</code> alignment is a synonym for <code>LEFT</code> and\n-   * the <code>TRAILING</code> alignment is a synonym for\n+   * given for horizontal alignment or horizontal text position, they are\n+   * interpreted relative to the provided component's orientation property,\n+   * a constant in the {@link java.awt.ComponentOrientation} class. For\n+   * example, if the component's orientation is <code>LEFT_TO_RIGHT</code>,\n+   * then the <code>LEADING</code> value is a synonym for <code>LEFT</code>\n+   * and the <code>TRAILING</code> value is a synonym for\n    * <code>RIGHT</code></p>\n    *\n    * <p>If the text and icon are equal to or larger than the view\n@@ -523,6 +528,7 @@ public static void updateComponentTreeUI(Component comp)\n    * @return The string of characters, possibly truncated with an elipsis,\n    * which is laid out in this label\n    */\n+\n   public static String layoutCompoundLabel(JComponent c, \n                                            FontMetrics fm,\n                                            String text, \n@@ -537,6 +543,119 @@ public static String layoutCompoundLabel(JComponent c,\n                                            int textIconGap)\n   {\n \n+    // Fix up the orientation-based horizontal positions.\n+\n+    if (horizontalTextPosition == LEADING)\n+      {\n+        if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n+          horizontalTextPosition = RIGHT;\n+        else\n+          horizontalTextPosition = LEFT;\n+      }\n+    else if (horizontalTextPosition == TRAILING)\n+      {\n+        if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n+          horizontalTextPosition = LEFT;\n+        else\n+          horizontalTextPosition = RIGHT;\n+      }\n+\n+    // Fix up the orientation-based alignments.\n+\n+    if (horizontalAlignment == LEADING)\n+      {\n+        if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n+          horizontalAlignment = RIGHT;\n+        else\n+          horizontalAlignment = LEFT;\n+      }\n+    else if (horizontalAlignment == TRAILING)\n+      {\n+        if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n+          horizontalAlignment = LEFT;\n+        else\n+          horizontalAlignment = RIGHT;\n+      }\n+    \n+    return layoutCompoundLabel(fm, text, icon,\n+                               verticalAlignment,\n+                               horizontalAlignment,\n+                               verticalTextPosition,\n+                               horizontalTextPosition,\n+                               viewR, iconR, textR, textIconGap);\n+  }\n+\n+  /**\n+   * <p>Layout a \"compound label\" consisting of a text string and an icon\n+   * which is to be placed near the rendered text. Once the text and icon\n+   * are laid out, the text rectangle and icon rectangle parameters are\n+   * altered to store the calculated positions.</p>\n+   *\n+   * <p>The size of the text is calculated from the provided font metrics\n+   * object.  This object should be the metrics of the font you intend to\n+   * paint the label with.</p>\n+   *\n+   * <p>The position values control where the text is placed relative to\n+   * the icon. The horizontal position value should be one of the constants\n+   * <code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>. The\n+   * vertical position value should be one fo the constants\n+   * <code>TOP</code>, <code>BOTTOM</code> or <code>CENTER</code>.</p>\n+   *\n+   * <p>The text-icon gap value controls the number of pixels between the\n+   * icon and the text.</p>\n+   *\n+   * <p>The alignment values control where the text and icon are placed, as\n+   * a combined unit, within the view rectangle. The horizontal alignment\n+   * value should be one of the constants <code>LEFT</code>, <code>RIGHT</code> or\n+   * <code>CENTER</code>. The vertical alignment valus should be one of the\n+   * constants <code>TOP</code>, <code>BOTTOM</code> or\n+   * <code>CENTER</code>.</p>\n+   *\n+   * <p>If the text and icon are equal to or larger than the view\n+   * rectangle, the horizontal and vertical alignment values have no\n+   * affect.</p>\n+   *\n+   * <p>Note that this method does <em>not</em> know how to deal with\n+   * horizontal alignments or positions given as <code>LEADING</code> or\n+   * <code>TRAILING</code> values. Use the other overloaded variant of this\n+   * method if you wish to use such values.\n+   *\n+   * @param fm The font metrics used to measure the text\n+   * @param text The text to place in the compound label\n+   * @param icon The icon to place next to the text\n+   * @param verticalAlignment The vertical alignment of the label relative\n+   * to its component\n+   * @param horizontalAlignment The horizontal alignment of the label\n+   * relative to its component\n+   * @param verticalTextPosition The vertical position of the label's text\n+   * relative to its icon\n+   * @param horizontalTextPosition The horizontal position of the label's\n+   * text relative to its icon\n+   * @param viewR The view rectangle, specifying the area which layout is\n+   * constrained to\n+   * @param iconR A rectangle which is modified to hold the laid-out\n+   * position of the icon\n+   * @param textR A rectangle which is modified to hold the laid-out\n+   * position of the text\n+   * @param textIconGap The distance between text and icon\n+   *\n+   * @return The string of characters, possibly truncated with an elipsis,\n+   * which is laid out in this label\n+   */\n+\n+  public static String layoutCompoundLabel(FontMetrics fm,\n+                                           String text,\n+                                           Icon icon,\n+                                           int verticalAlignment,\n+                                           int horizontalAlignment,\n+                                           int verticalTextPosition,\n+                                           int horizontalTextPosition,\n+                                           Rectangle viewR,\n+                                           Rectangle iconR,\n+                                           Rectangle textR,\n+                                           int textIconGap)\n+  {\n+\n     // Work out basic height and width.\n \n     if (icon == null)\n@@ -545,7 +664,7 @@ public static String layoutCompoundLabel(JComponent c,\n         iconR.width = 0;\n         iconR.height = 0;\n       }\n-      else\n+    else\n       {\n         iconR.width = icon.getIconWidth();\n         iconR.height = icon.getIconWidth();\n@@ -591,23 +710,6 @@ public static String layoutCompoundLabel(JComponent c,\n         break;\n       }\n \n-    // Fix up the orientation-based alignments.\n-\n-    if (horizontalAlignment == LEADING)\n-      {\n-        if (c.getComponentOrientation() == ComponentOrientation.LEFT_TO_RIGHT)\n-          horizontalAlignment = LEFT;\n-        else if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n-          horizontalAlignment = RIGHT;\n-      }\n-    else if (horizontalAlignment == TRAILING)\n-      {\n-        if (c.getComponentOrientation() == ComponentOrientation.LEFT_TO_RIGHT)\n-          horizontalAlignment = RIGHT;\n-        else if (c.getComponentOrientation() == ComponentOrientation.RIGHT_TO_LEFT)\n-          horizontalAlignment = LEFT;\n-      }\n-\n     // The two rectangles are laid out correctly now, but only assuming\n     // that their upper left corner is at (0,0). If we have any alignment other\n     // than TOP and LEFT, we need to adjust them."}, {"sha": "722f922e194b0b61c074efc0b8dd4244ce0be5bc", "filename": "libjava/javax/swing/UIDefaults.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FUIDefaults.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -61,7 +61,7 @@\n /**\n  * UIDefaults is a database where all settings and interface bindings are\n  * stored into. An PLAF implementation fills one of these (see for example\n- * plaf/basic/BasicDefaults.java) with \"JButton\" -> new BasicButtonUI().\n+ * plaf/basic/BasicLookAndFeel.java) with \"ButtonUI\" -> new BasicButtonUI().\n  *\n  * @author Ronald Veldema (rveldema@cs.vu.nl)\n  */"}, {"sha": "7d59fc2467d44651a5b376536619b19067472ad5", "filename": "libjava/javax/swing/plaf/basic/BasicButtonUI.java", "status": "modified", "additions": 179, "deletions": 223, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -47,36 +47,32 @@\n import java.awt.Stroke;\n import java.awt.Insets;\n import java.awt.Rectangle;\n+import java.awt.event.FocusListener;\n import java.awt.event.FocusAdapter;\n import java.awt.event.FocusEvent;\n import java.awt.event.InputEvent;\n import java.awt.event.MouseAdapter;\n import java.awt.event.MouseEvent;\n import javax.swing.AbstractButton;\n+import javax.swing.ButtonModel;\n+import javax.swing.Icon;\n import javax.swing.JComponent;\n import javax.swing.SwingUtilities;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n+import javax.swing.event.MouseInputListener;\n import javax.swing.plaf.ButtonUI;\n import javax.swing.plaf.ComponentUI;\n \n public class BasicButtonUI extends ButtonUI\n {\n   /** A constant used to pad out elements in the button's layout and\n       preferred size calculations. */\n-    int gap = 3;\n+  int defaultTextIconGap = 3;\n \n-  /** The color that text will be painted when the button is enabled */\n-  Color textColor;\n-\n-  /** The color that text will be painted when the button is disabled */\n-  Color disabledTextColor;\n-\n-  /** The color that the button's background will be painted when the\n-      button is pressed. */\n-    Color pressedBackgroundColor;\n-\n-  /** The color that the button's background will be painted when the\n-      button is not pressed. */\n-  Color normalBackgroundColor;\n+  /** A constant added to the defaultTextIconGap to adjust the text\n+      within this particular button. */\n+  int defaultTextShiftOffset = 0;\n \n   /**\n    * Factory method to create an instance of BasicButtonUI for a given\n@@ -86,125 +82,65 @@ public class BasicButtonUI extends ButtonUI\n    *\n    * @return A new UI capable of drawing the component\n    */\n-    public static ComponentUI createUI(final JComponent c) \n-    {\n-\treturn new BasicButtonUI();\n-    }\n+  public static ComponentUI createUI(final JComponent c) \n+  {\n+    return new BasicButtonUI();\n+  }\n \n-  /**\n-   * Helper class which listens to a button's focus events and disarms the\n-   * button's model when focus is lost.\n-   */\n-  private static class FocusUIListener extends FocusAdapter\n+  public int getDefaultTextIconGap(AbstractButton b)\n   {\n-    /** Button to listen to focus events from */\n-    AbstractButton button;\n-\n-    /**\n-     * Creates a new FocusUIListener object.\n-     *\n-     * @param b The button to listen to\n-     */\n-    FocusUIListener(AbstractButton b)\n-    {\n-      button = b;\n-    }\n-    \n-    /**\n-     * Called when the button loses focus.\n-     *\n-     * @param event The loss of focus event.\n-     */\n-    public void focusLost(FocusEvent event)\n-    {\n-      // System.err.println(\"ButtonUI :: lost focus -- disarming\");\n-      button.getModel().setArmed(false);\n-    }\n+    return defaultTextIconGap;\n   }\n \n-  /**\n-   * A helper class which interprets mouse events as \n-   * state changes to the button's underlying model.\n-   */\n-  private static class ButtonUIListener extends MouseAdapter\n+  protected void installDefaults(AbstractButton b)\n+  {\n+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n+    b.setForeground(defaults.getColor(\"Button.foreground\"));\n+    b.setBackground(defaults.getColor(\"Button.background\"));\n+    b.setMargin(defaults.getInsets(\"Button.margin\"));\n+    b.setBorder(defaults.getBorder(\"Button.border\"));\n+  }\n+\n+  protected void uninstallDefaults(AbstractButton b)\n+  {\n+    b.setForeground(null);\n+    b.setBackground(null);\n+    b.setBorder(null);\n+    b.setMargin(null);\n+  }\n+\n+  protected BasicButtonListener listener;\n+\n+  protected BasicButtonListener createButtonListener(AbstractButton b)\n+  {\n+    return new BasicButtonListener();\n+  }\n+\n+  public void installListeners(AbstractButton b)\n+  {\n+    listener = createButtonListener(b);\n+    b.addChangeListener(listener);\n+    b.addPropertyChangeListener(listener);\n+    b.addFocusListener(listener);    \n+    b.addMouseListener(listener);\n+    b.addMouseMotionListener(listener);\n+  }\n+\n+  public void uninstallListeners(AbstractButton b)\n+  {\n+    b.removeChangeListener(listener);\n+    b.removePropertyChangeListener(listener);\n+    b.removeFocusListener(listener);    \n+    b.removeMouseListener(listener);\n+    b.removeMouseMotionListener(listener);\n+  }\n+\n+  protected void installKeyboardActions(AbstractButton b)\n+  {\n+  }\n+\n+  protected void uninstallKeyboardActions(AbstractButton b)\n   {\n-    /** The button to change the model of */\n-    AbstractButton button;\n-\n-    /**\n-     * Creates a new ButtonUIListener object.\n-     *\n-     * @param b The button to change the model of\n-     */\n-    public ButtonUIListener(AbstractButton b)\n-    {\n-      button = b;\n-    }\n-\n-    /**\n-     * Accept a mouse press event and arm the button's model.\n-     *\n-     * @param e The mouse press event to accept\n-     */\n-    public void mousePressed(MouseEvent e)\n-    {\n-      // System.err.println(\"ButtonUI :: mouse pressed\");\n-      if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0)\n-        {\n-          // System.err.println(\"ButtonUI :: arming\");\n-          button.getModel().setArmed(true);\n-        }\n-    }\n-\n-    /**\n-     * Accept a mouse enter event and set the button's model's\n-     * \"rollover\" property to <code>true</code>. If the button's\n-     * model is currently armed and the mouse button is not held\n-     * down, this enter event will also disarm the model.\n-     *\n-     * @param e The mouse enter event to accept\n-     */\n-    public void mouseEntered(MouseEvent e)\n-    {\n-      // System.err.println(\"ButtonUI :: mouse entered\");\n-      // System.err.println(\"ButtonUI :: rolling over\");\n-      button.getModel().setRollover(true);\n-      if (button.getModel().isArmed() \n-          && (e.getModifiers() & InputEvent.BUTTON1_MASK) == 0)\n-        {\n-          // System.err.println(\"ButtonUI :: no button pressed -- disarming\");\n-          button.getModel().setArmed(false);\n-        }\n-    }\n-\n-    /**\n-     * Accept a mouse exit event and set the button's model's\n-     * \"rollover\" property to <code>false</code>.\n-     *\n-     * @param e The mouse exit event to accept\n-     */\n-    public void mouseExited(MouseEvent e)\n-    {\n-      // System.err.println(\"ButtonUI :: mouse exited\");\n-      button.getModel().setRollover(false);\n-    }\n-\n-    /**\n-     * Accept a mouse release event and set the button's model's\n-     * \"pressed\" property to <code>true</code>, if the model\n-     * is armed. If the model is not armed, ignore the event.\n-     *\n-     * @param e The mouse release event to accept\n-     */\n-    public void mouseReleased(MouseEvent e)\n-    {\n-      // System.err.println(\"ButtonUI :: mouse released\");\n-      if (button.getModel().isArmed()\n-          && (e.getModifiers() & InputEvent.BUTTON1_MASK) != 0)\n-        {\n-          button.getModel().setPressed(true);\n-        }\n-    }\n   }\n \n   /**\n@@ -215,22 +151,16 @@ public void mouseReleased(MouseEvent e)\n    *\n    * @param c The component to install the UI into\n    */\n-    public void installUI(final JComponent c) \n-    {\n-\tsuper.installUI(c);\n-\n-\ttextColor                = new Color(0,0,0);\n-\tdisabledTextColor        = new Color(130, 130, 130);\n-\tpressedBackgroundColor   = new Color(150,150,150);\n-\tpressedBackgroundColor   = new Color(150,150,150);\n-\tnormalBackgroundColor    = new Color(192,192,192);\n-\n-    // this tells the border (if we have one) how to paint.\n-    c.setBackground(normalBackgroundColor);\n-    ((AbstractButton)c).setMargin (new Insets(10,10,10,10));\n-\n-    c.addMouseListener(new ButtonUIListener((AbstractButton) c));\n-    c.addFocusListener(new FocusUIListener((AbstractButton) c));\n+  public void installUI(final JComponent c) \n+  {\n+    super.installUI(c);\n+    if (c instanceof AbstractButton)\n+      {\n+        AbstractButton b = (AbstractButton) c;\n+        installDefaults(b);\n+        installListeners(b);\n+        installKeyboardActions(b);\n+      }\n   }\n \n   /**\n@@ -241,66 +171,88 @@ public void installUI(final JComponent c)\n    *\n    * @return The preferred dimensions of the component\n    */\n-    public Dimension getPreferredSize(JComponent c) \n-    {\n-\tAbstractButton b = (AbstractButton)c;\n-\tDimension d = BasicGraphicsUtils.getPreferredButtonSize(b, gap);\n-\treturn d;\n-    }\n-    \n+  public Dimension getPreferredSize(JComponent c) \n+  {\n+    AbstractButton b = (AbstractButton)c;\n+    Dimension d = \n+      BasicGraphicsUtils.getPreferredButtonSize\n+      (b, defaultTextIconGap + defaultTextShiftOffset);\n+    return d;\n+  }\n+\n+  static private Icon currentIcon(AbstractButton b)\n+  {\n+    Icon i = b.getIcon();\n+    ButtonModel model = b.getModel();\n+\n+    if (model.isPressed() && b.getPressedIcon() != null)\n+      i = b.getPressedIcon();\n+\n+    else if (model.isRollover())\n+      {\n+        if (b.isSelected() && b.getRolloverSelectedIcon() != null)\n+          i = b.getRolloverSelectedIcon();\n+        else if (b.getRolloverIcon() != null)\n+          i = b.getRolloverIcon();\n+      }    \n+\n+    else if (b.isSelected())\n+      {\n+        if (b.isEnabled() && b.getSelectedIcon() != null)\n+          i = b.getSelectedIcon();\n+        else if (b.getDisabledSelectedIcon() != null)\n+          i = b.getDisabledSelectedIcon();\n+      }\n+\n+    else if (! b.isEnabled() && b.getDisabledIcon() != null)\n+      i = b.getDisabledIcon();\n+\n+    return i;\n+  }\n+\n   /**\n    * Paint the component, which is an {@link AbstractButton}, according to \n    * its current state.\n    *\n    * @param g The graphics context to paint with\n    * @param c The component to paint the state of\n    */\n-    public void paint(Graphics g, JComponent c)\n-    {      \n-\tAbstractButton b = (AbstractButton) c;\n+  public void paint(Graphics g, JComponent c)\n+  {      \n+    AbstractButton b = (AbstractButton) c;\n \n-\tRectangle tr = new Rectangle();\n-\tRectangle ir = new Rectangle();\n-\tRectangle vr = new Rectangle();\n+    Rectangle tr = new Rectangle();\n+    Rectangle ir = new Rectangle();\n+    Rectangle vr = new Rectangle();\n     Rectangle br = new Rectangle();\n \n-        Font f = c.getFont();\n-\n-        g.setFont(f);\n-\n-        FontMetrics fm = g.getFontMetrics(f);\n-\n-    Insets border = b.getInsets();\n-    Insets margin = b.getMargin();\n-\n-    br.x = border.left;\n-    br.y = border.top;\n-    br.width = b.getWidth() - (border.right + border.left);\n-    br.height = b.getHeight() - (border.top + border.bottom);\n-\n-    vr.x = br.x + margin.left;\n-    vr.y = br.y + margin.top;\n-    vr.width = br.width - (margin.right + margin.left);\n-    vr.height = br.height - (margin.top + margin.bottom);\n-\n-    String text = SwingUtilities.layoutCompoundLabel(c, fm, b.getText(),\n-\t\t\t\t\t\t\t b.getIcon(),\n-\t\t\t\t\t\t\t b.getVerticalAlignment(), \n-\t\t\t\t\t\t\t b.getHorizontalAlignment(),\n-\t\t\t\t\t\t\t b.getVerticalTextPosition(), \n-\t\t\t\t\t\t\t b.getHorizontalTextPosition(),\n-                                                     vr, ir, tr, gap);\n-\n-    if ((b.getModel().isRollover() && b.getModel().isArmed()) \n-        || b.getModel().isSelected())\n+    Font f = c.getFont();\n+\n+    g.setFont(f);\n+\n+    SwingUtilities.calculateInnerArea(b, br);\n+    SwingUtilities.calculateInsetArea(br, b.getMargin(), vr);    \n+    String text = SwingUtilities.layoutCompoundLabel(c, g.getFontMetrics(f), \n+                                                     b.getText(),\n+                                                     currentIcon(b),\n+                                                     b.getVerticalAlignment(), \n+                                                     b.getHorizontalAlignment(),\n+                                                     b.getVerticalTextPosition(), \n+                                                     b.getHorizontalTextPosition(),\n+                                                     vr, ir, tr, \n+                                                     defaultTextIconGap \n+                                                     + defaultTextShiftOffset);\n+    \n+    if ((b.getModel().isArmed() && b.getModel().isPressed()) \n+        || b.isSelected())\n       paintButtonPressed(g, br, c);\n-\telse\n+    else\n       paintButtonNormal(g, br, c);\n \t\n-\tpaintIcon(g, c, ir);\n-\tpaintText(g, c, tr, b.getText());\n-\tpaintFocus(g, c, vr, tr, ir);\n-    }\n+    paintIcon(g, c, ir);\n+    paintText(g, c, tr, b.getText());\n+    paintFocus(g, c, vr, tr, ir);\n+  }\n \n   /**\n    * Paint any focus decoration this {@link JComponent} might have.  The\n@@ -322,7 +274,7 @@ protected void paintFocus(Graphics g, JComponent c, Rectangle vr,\n   {\n     AbstractButton b = (AbstractButton) c;\n     if (b.hasFocus() && b.isFocusPainted())\n-    {\n+      {\n         Graphics2D g2 = (Graphics2D) g;\n         Stroke saved_stroke = g2.getStroke();\n         Color saved_color = g2.getColor();\n@@ -340,7 +292,7 @@ protected void paintFocus(Graphics g, JComponent c, Rectangle vr,\n         g2.setStroke(saved_stroke);\n         g2.setColor(saved_color);\n       }\n-    }\n+  }\n \n   /**\n    * Paint the icon for this component. Depending on the state of the\n@@ -352,15 +304,17 @@ protected void paintFocus(Graphics g, JComponent c, Rectangle vr,\n    * @param iconRect Rectangle in which the icon should be painted\n    */\n   protected void paintIcon(Graphics g, JComponent c, Rectangle iconRect)\n-    {\n-\tAbstractButton b = (AbstractButton) c;\n-\tif (b.getIcon() != null)\n-\t    {\n-\t\tint x = iconRect.x;\n-\t\tint y = iconRect.y;\n-\t\tb.getIcon().paintIcon(c, g, x, y);\n-\t    }\n-    }\n+  {\n+    AbstractButton b = (AbstractButton) c;\n+    Icon i = currentIcon(b);\n+\n+    if (i != null)\n+      {\n+        int x = iconRect.x;\n+        int y = iconRect.y;\n+        i.paintIcon(c, g, x, y);\n+      }\n+  }\n \n   /**\n    * Paints the background area of an {@link AbstractButton} in the pressed\n@@ -372,12 +326,13 @@ protected void paintIcon(Graphics g, JComponent c, Rectangle iconRect)\n    * @param b The component to paint the state of\n    */\n   protected void paintButtonPressed(Graphics g, Rectangle area, JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(pressedBackgroundColor);\n-    g.fillRect(area.x, area.y, area.width, area.height);\n-    }\n+  {\n+    if (((AbstractButton)b).isContentAreaFilled())\n+      {\n+        g.setColor(b.getBackground().darker());\n+        g.fillRect(area.x, area.y, area.width, area.height);\n+      }\n+  }\n     \n   /**\n    * Paints the background area of an {@link AbstractButton} in the normal,\n@@ -389,11 +344,13 @@ protected void paintButtonPressed(Graphics g, Rectangle area, JComponent b)\n    * @param b The component to paint the state of\n    */\n   protected void paintButtonNormal(Graphics g, Rectangle area, JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\tg.setColor(normalBackgroundColor);\n-    g.fillRect(area.x, area.y, area.width, area.height);\n-    }\n+  {\n+    if (((AbstractButton)b).isContentAreaFilled())\n+      {\n+        g.setColor(b.getBackground());\n+        g.fillRect(area.x, area.y, area.width, area.height);\n+      }\n+  }\n     \n   /**\n    * Paints the \"text\" property of an {@link AbstractButton}, using the\n@@ -405,15 +362,14 @@ protected void paintButtonNormal(Graphics g, Rectangle area, JComponent b)\n    * @param text The text to paint\n    */\n   protected void paintText(Graphics g, JComponent c, Rectangle textRect,\n-\t\t\t     String text) \n-    {\t\n-\tFont f = c.getFont();\n-        g.setFont(f);\n-        FontMetrics fm = g.getFontMetrics(f);\n-\tg.setColor(c.isEnabled() ? textColor : disabledTextColor);\n-    BasicGraphicsUtils.drawString(g, text, \n-\t\t\t\t      0,\n-\t\t\t\t      textRect.x, \n+                           String text) \n+  {\t\n+    Font f = c.getFont();\n+    g.setFont(f);\n+    FontMetrics fm = g.getFontMetrics(f);\n+    g.setColor(c.getForeground());\n+    BasicGraphicsUtils.drawString(g, text, 0,\n+                                  textRect.x, \n                                   textRect.y + fm.getAscent());\n-    } \n+  } \n }"}, {"sha": "0efc7ab35e69a080ef929dc25e72818c51fa2ffa", "filename": "libjava/javax/swing/plaf/basic/BasicCheckBoxUI.java", "status": "modified", "additions": 17, "deletions": 71, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicCheckBoxUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicCheckBoxUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicCheckBoxUI.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -38,82 +38,28 @@\n \n package javax.swing.plaf.basic;\n \n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.Graphics;\n-import java.awt.Rectangle;\n-import javax.swing.AbstractButton;\n+import javax.swing.Icon;\n import javax.swing.JComponent;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n import javax.swing.plaf.ComponentUI;\n \n public class BasicCheckBoxUI extends BasicRadioButtonUI\n {  \n-    public static ComponentUI createUI(final JComponent c)  {\n-\treturn new BasicCheckBoxUI();\n-    }\n-\n-    \n-    public void installUI(final JComponent c)  {\n-\tsuper.installUI(c);\n-    }\n-    \n-    public Dimension getPreferredSize(JComponent c) \n-    {\n-\tAbstractButton b = (AbstractButton)c;\n-\tDimension d = BasicGraphicsUtils.getPreferredButtonSize(b, gap);\n-\t//System.out.println(\"^^^^^^^^^^^^^^^^^^^^^^   BASIC-PREF=\"+d + \",T=\"+b.text);\n-\treturn d;\n-    }\n-    \n-    protected void paintFocus(Graphics g, \n-\t\t\t      JComponent c,\n-\t\t\t      Rectangle vr,\n-\t\t\t      Rectangle tr,\n-\t\t\t      Rectangle ir)\n-    {\n-    }\n-\n-    protected void paintIcon(Graphics g, \n-\t\t\t     JComponent c, \n-\t\t\t     Rectangle iconRect)\n-    {\n-    }\n-\n-    protected void paintButtonPressed(Graphics g,\n-\t\t\t\t      JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(pressedBackgroundColor);\n-\tg.fillRect(1,1,size.width-2, size.height-2);                \n-\n-    }\n-    \n-    protected void paintButtonNormal(Graphics g,\n-\t\t\t\t     JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(normalBackgroundColor);\n-\tg.fillRect(1,1,size.width-2, size.height-2);                \n-\n-    }\n-    protected void paintText(Graphics g,\n-\t\t\t     JComponent c,\n-\t\t\t     Rectangle textRect,\n-\t\t\t     String text) \n-    {\n-\t//        AbstractButton b = (AbstractButton) c;\n-\t\n-\t//\tSystem.out.println(\"drawing string: \" + text + \", at:\" + textRect);\n-\t\n-\tg.setColor(textColor);\n-\tBasicGraphicsUtils.drawString(g,\n-\t\t\t\t      text, \n-\t\t\t\t      0,\n-\t\t\t\t      textRect.x, \n-\t\t\t\t      textRect.y);\n-    } \n+  \n+  public static ComponentUI createUI(final JComponent c)  {\n+    return new BasicCheckBoxUI();\n+  }\n+\n+  public Icon getDefaultIcon()\n+  {\n+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n+    return defaults.getIcon(\"CheckBox.icon\");\n+  }\n+  \n+  public void installUI(final JComponent c)  {\n+    super.installUI(c);\n+  }  \n }\n \n "}, {"sha": "39e86b6fbbc8d46c4a93471f427d1668eff59934", "filename": "libjava/javax/swing/plaf/basic/BasicIconFactory.java", "status": "modified", "additions": 132, "deletions": 8, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicIconFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicIconFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicIconFactory.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -39,47 +39,171 @@\n package javax.swing.plaf.basic;\n \n import java.io.Serializable;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Polygon;\n+import javax.swing.AbstractButton;\n import javax.swing.Icon;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n /**\n  * STUBBED\n  */\n public class BasicIconFactory implements Serializable\n {\n   static final long serialVersionUID = 5605588811185324383L;\n \n+  static private class DummyIcon \n+    implements Icon\n+  {    \n+    public int getIconHeight() { return 10; }\n+    public int getIconWidth() { return 10; }\n+    public void paintIcon(Component c, Graphics g, int x, int y)\n+    {\n+      Color save = g.getColor();\n+      g.setColor(c.getForeground());\n+      g.drawRect(x, y, 10, 10);\n+      g.setColor(save);\n+    }\n+  }\n+\n+\n   public BasicIconFactory()\n   {\n   }\n   public static Icon getMenuItemCheckIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n   public static Icon getMenuItemArrowIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n   public static Icon getMenuArrowIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n+\n   public static Icon getCheckBoxIcon()\n   {\n-    return null;\n+    return new Icon()\n+      {        \n+        public int getIconHeight() \n+        { \n+          return 10; \n+        }\n+        public int getIconWidth() \n+        { \n+          return 10; \n+        }\n+        public void paintIcon(Component c, Graphics g, int x, int y)\n+        {\n+          if (c instanceof AbstractButton)\n+            {\n+              UIDefaults defaults;\n+              defaults = UIManager.getLookAndFeelDefaults();\n+              Color hi = defaults.getColor(\"CheckBox.highlight\");\n+              Color low = defaults.getColor(\"CheckBox.darkShadow\");\n+              Color sel = defaults.getColor(\"CheckBox.foreground\");\n+              Color dim = defaults.getColor(\"CheckBox.shadow\");\n+              Polygon check = new Polygon(new int[] {x+3, x+3, x+8},\n+                                          new int[] {y+5, y+9, y+3}, 3);\n+              AbstractButton b = (AbstractButton) c;\n+              Color saved = g.getColor();\n+              if (b.isEnabled())\n+                {\n+                  g.setColor(low);\n+                  g.drawRect(x, y, 10, 10);\n+                  g.setColor(hi);\n+                  g.drawRect(x+1, y+1, 10, 10);\n+                  if (b.isSelected())\n+                    {\n+                      g.setColor(sel);\n+                      if (b.isSelected())\n+                        {\n+                          g.drawLine(x+3, y+5, x+3, y+8);\n+                          g.drawLine(x+4, y+5, x+4, y+8);\n+                          g.drawLine(x+3, y+8, x+8, y+3);\n+                          g.drawLine(x+4, y+8, x+8, y+3);\n+                        }\n+                    }\n+                }\n+              else\n+                {                  \n+                  g.setColor(hi);\n+                  g.drawRect(x, y, 10, 10);\n+                  if (b.isSelected())\n+                    {\n+                      g.drawLine(x+3, y+5, x+3, y+9);\n+                      g.drawLine(x+3, y+9, x+8, y+3);\n+                    }\n+                }\n+              g.setColor(saved);\n+            }\n+        }\n+      };\n   }\n+\n   public static Icon getRadioButtonIcon()\n   {\n-    return null;\n+    return new Icon()\n+      {        \n+        public int getIconHeight() \n+        { \n+          return 12; \n+        }\n+        public int getIconWidth() \n+        { \n+          return 12; \n+        }\n+        public void paintIcon(Component c, Graphics g, int x, int y)\n+        {\n+          UIDefaults defaults;      \n+          defaults = UIManager.getLookAndFeelDefaults();\n+          Color hi = defaults.getColor(\"RadioButton.highlight\");\n+          Color low = defaults.getColor(\"RadioButton.darkShadow\");\n+          Color sel = defaults.getColor(\"RadioButton.foreground\");\n+          Color dim = defaults.getColor(\"RadioButton.shadow\");\n+\n+          if (c instanceof AbstractButton)\n+            {\n+              AbstractButton b = (AbstractButton) c;\n+              Color saved = g.getColor();\n+              if (b.isEnabled())\n+                {\n+                  g.setColor(low);\n+                  g.drawOval(x, y, 12, 12);\n+                  g.setColor(hi);\n+                  g.drawOval(x+1, y+1, 12, 12);\n+                  if (b.isSelected())\n+                    {\n+                      g.setColor(sel);\n+                      g.fillOval(x+4, y+4, 6, 6);\n+                    }\n+                }\n+              else\n+                {                  \n+                  g.setColor(hi);\n+                  g.drawOval(x, y, 12, 12);\n+                  if (b.isSelected())\n+                    g.fillOval(x+4, y+4, 6, 6);\n+                }\n+              g.setColor(saved);\n+            }\n+        }\n+      };\n   }\n   public static Icon getCheckBoxMenuItemIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n   public static Icon getRadioButtonMenuItemIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n   public static Icon createEmptyFrameIcon()\n   {\n-    return null;\n+    return new DummyIcon();\n   }\n } // class BasicIconFactory"}, {"sha": "901ea516e95c01cd58294ccd5fd186b81beca78b", "filename": "libjava/javax/swing/plaf/basic/BasicLookAndFeel.java", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -227,29 +227,40 @@ protected void initComponentDefaults(UIDefaults defaults)\n   {\n     Object[] uiDefaults;\n     uiDefaults = new Object[] {\n+\n+      \"AbstractUndoableEdit.undoText\", \"Undo\",\n+      \"AbstractUndoableEdit.redoText\", \"Redo\",\n+\n       \"Button.background\", new ColorUIResource(Color.lightGray),\n-      \"Button.border\", new BorderUIResource.CompoundBorderUIResource(null,\n-                                                                     null),\n+      \"Button.border\", BorderUIResource.getEtchedBorderUIResource(),\n+      \"Button.darkShadow\", new ColorUIResource(Color.darkGray),\n       \"Button.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"Button.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"Button.foreground\", new ColorUIResource(Color.black),\n+      \"Button.highlight\", new ColorUIResource(Color.white),\n+      \"Button.light\", new ColorUIResource(Color.lightGray.brighter()),\n       \"Button.margin\", new InsetsUIResource(2, 14, 2, 14),\n+      \"Button.shadow\", new ColorUIResource(Color.gray),\n       \"Button.textIconGap\", new Integer(4),\n       \"Button.textShiftOffset\", new Integer(0),\n       \"CheckBox.background\", new ColorUIResource(Color.lightGray),\n       \"CheckBox.border\", new BorderUIResource.CompoundBorderUIResource(null,\n                                                                        null),\n+      \"CheckBox.darkShadow\", new ColorUIResource(Color.darkGray),\n       \"CheckBox.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"CheckBox.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"CheckBox.foreground\", new ColorUIResource(Color.black),\n+      \"CheckBox.highlight\", new ColorUIResource(Color.white),\n       \"CheckBox.icon\", BasicIconFactory.getCheckBoxIcon(),\n+      \"CheckBox.light\", new ColorUIResource(Color.lightGray.brighter()),\n       \"CheckBox.margin\",new InsetsUIResource(2, 2, 2, 2),\n+      \"CheckBox.shadow\", new ColorUIResource(Color.gray),\n       \"CheckBox.textIconGap\", new Integer(4),\n       \"CheckBox.textShiftOffset\", new Integer(0),\n       \"CheckBoxMenuItem.acceleratorFont\", new FontUIResource(\"Dialog\",\n@@ -540,7 +551,7 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"PopupMenu.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"PopupMenu.foreground\", new ColorUIResource(Color.black),\n       \"ProgressBar.background\", new ColorUIResource(Color.lightGray),\n-      \"ProgressBar.border\", new BorderUIResource.LineBorderUIResource(null),\n+      \"ProgressBar.border\", new BorderUIResource.LineBorderUIResource(Color.darkGray),\n       \"ProgressBar.cellLength\", new Integer(1),\n       \"ProgressBar.cellSpacing\", new Integer(0),\n       \"ProgressBar.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n@@ -550,14 +561,18 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"RadioButton.background\", new ColorUIResource(Color.lightGray),\n       \"RadioButton.border\", new BorderUIResource.CompoundBorderUIResource(null,\n                                                                           null),\n+      \"RadioButton.darkShadow\", new ColorUIResource(Color.darkGray),\n       \"RadioButton.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"RadioButton.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"RadioButton.foreground\", new ColorUIResource(Color.black),\n+      \"RadioButton.highlight\", new ColorUIResource(Color.white),\n       \"RadioButton.icon\", BasicIconFactory.getRadioButtonIcon(),\n+      \"RadioButton.light\", new ColorUIResource(Color.lightGray.brighter()),\n       \"RadioButton.margin\", new InsetsUIResource(2, 2, 2, 2),\n+      \"RadioButton.shadow\", new ColorUIResource(Color.gray),\n       \"RadioButton.textIconGap\", new Integer(4),\n       \"RadioButton.textShiftOffset\", new Integer(0),\n       \"RadioButtonMenuItem.acceleratorFont\", new FontUIResource(\"Dialog\",\n@@ -742,7 +757,7 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"Table.background\", new ColorUIResource(Color.white),\n       \"Table.focusCellBackground\", new ColorUIResource(Color.white),\n       \"Table.focusCellForeground\", new ColorUIResource(Color.black),\n-      \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(null),\n+      \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(Color.white),\n       \"Table.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"Table.foreground\", new ColorUIResource(Color.black),\n       \"Table.gridColor\", new ColorUIResource(Color.gray),\n@@ -849,7 +864,7 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"ToolBar.foreground\", new ColorUIResource(Color.black),\n       \"ToolBar.separatorSize\", new DimensionUIResource(10, 10),\n       \"ToolTip.background\", new ColorUIResource(Color.white),\n-      \"ToolTip.border\", new BorderUIResource.LineBorderUIResource(null),\n+      \"ToolTip.border\", new BorderUIResource.LineBorderUIResource(Color.lightGray),\n       \"ToolTip.font\", new FontUIResource(\"SansSerif\", Font.PLAIN, 12),\n       \"ToolTip.foreground\", new ColorUIResource(Color.black),\n       \"Tree.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n@@ -860,7 +875,7 @@ protected void initComponentDefaults(UIDefaults defaults)\n       // XXX Don't use gif\n       \"Tree.closedIcon\", new IconUIResource(new ImageIcon(\"icons/TreeClosed.gif\")),\n       \"Tree.drawsFocusBorderAroundIcon\", Boolean.FALSE,\n-      \"Tree.editorBorder\", new BorderUIResource.LineBorderUIResource(null),\n+      \"Tree.editorBorder\", new BorderUIResource.LineBorderUIResource(Color.lightGray),\n       \"Tree.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"shift PAGE_DOWN\", \"scrollDownExtendSelection\",\n         \"PAGE_DOWN\", \"scrollDownChangeSelection\","}, {"sha": "7e72d730d205609c7ff384dbea62a8fb8619e3e0", "filename": "libjava/javax/swing/plaf/basic/BasicPanelUI.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPanelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPanelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPanelUI.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -44,15 +44,13 @@\n \n public class BasicPanelUI extends PanelUI\n {\n-    int gap = 3;\n-\n     public static ComponentUI createUI(JComponent x) \n     {\n         return new BasicPanelUI();\n     }\n \n     public void installUI(JComponent c)\n     {\n-\tsuper.installUI(c);\n+      super.installUI(c);\n     }\n }"}, {"sha": "15d2e7af932a661f6c3986a946eee3b244396f66", "filename": "libjava/javax/swing/plaf/basic/BasicRadioButtonUI.java", "status": "modified", "additions": 28, "deletions": 102, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRadioButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRadioButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicRadioButtonUI.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -38,116 +38,42 @@\n \n package javax.swing.plaf.basic;\n \n-import java.awt.Color;\n-import java.awt.Dimension;\n-import java.awt.Graphics;\n-import java.awt.Rectangle;\n import javax.swing.AbstractButton;\n+import javax.swing.Icon;\n import javax.swing.JComponent;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n import javax.swing.plaf.ComponentUI;\n \n public class BasicRadioButtonUI extends BasicToggleButtonUI\n {\n-  int large_circle_width = 20;\n-  int circle_width = large_circle_width - 8; // FIXME: sun == ?\n-  \n-    public static ComponentUI createUI(final JComponent c)  {\n-\treturn new BasicRadioButtonUI();\n-    }\n \n+  protected Icon icon;\n+\n+  public static ComponentUI createUI(final JComponent c)  {\n+    return new BasicRadioButtonUI();\n+  }\n+\n+  public BasicRadioButtonUI()\n+  {\n+    icon = getDefaultIcon();\n+  }\n+\n+  public void installUI(final JComponent c)  {\n+    super.installUI(c);\n+    if (c instanceof AbstractButton)\n+      {\n+        AbstractButton b = (AbstractButton) c;        \n+        b.setIcon(icon);\n+      }\n+  }\n+\n+  public Icon getDefaultIcon()\n+  {\n+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n+    return defaults.getIcon(\"RadioButton.icon\");\n+  }\n     \n-    public void installUI(final JComponent c)  {\n-\tsuper.installUI(c);\n-    }\n-    \n-    public Dimension getPreferredSize(JComponent c) \n-    {\n-\tAbstractButton b = (AbstractButton)c;\n-\tDimension d = BasicGraphicsUtils.getPreferredButtonSize(b, gap);\n-\t\n-\t// and add a little something for the circles:\n-\n-\td.width += large_circle_width;\n-\td.height = Math.max(large_circle_width, d.height);\n-\t\n-\t//System.out.println(\"^^^^^^^^^^^^^^^^^^^^^^   BASIC-PREF=\"+d + \",T=\"+b.text);\n-\treturn d;\n-    }\n-    \n-    protected void paintFocus(Graphics g, \n-\t\t\t      JComponent c,\n-\t\t\t      Rectangle vr,\n-\t\t\t      Rectangle tr,\n-\t\t\t      Rectangle ir)\n-    {\n-    }\n-\n-    protected void paintIcon(Graphics g, \n-\t\t\t     JComponent c, \n-\t\t\t     Rectangle iconRect)\n-    {\n-    }\n-\n-    protected void paintButtonPressed(Graphics g,\n-\t\t\t\t      JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tpaintButtonNormal(g, b);\n-\n-\tint x = gap;\n-\tint y = gap;\n-\n-\tint diffp = 2;\n-\tint diff = 3;\n-\t\n-\tg.setColor(textColor);\n-\tg.fillArc(x+diffp, y+diffp, \n-\t\t  circle_width-diff, circle_width-diff,\n-\t\t  0, 360);\n-    }\n-    \n-    protected void paintButtonNormal(Graphics g,\n-\t\t\t\t     JComponent c)\n-    {\n-\tAbstractButton b = (AbstractButton) c;\n-\t\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(normalBackgroundColor);\n-\tg.fillRect(1,1,size.width-2, size.height-2);  \n-\t\n-\tint x = gap;\n-\tint y = gap;\n-\t\n-\tg.setColor(pressedBackgroundColor);\n-\tg.drawArc(x, y,\n-\t\t  circle_width, circle_width,\n-\t\t  0, 360);\n-\n-\tg.setColor(new Color(255,255,255));\n-\tg.drawArc(x, y,\n-\t\t  circle_width+1, circle_width+1,\n-\t\t  145, 160);\n-    }\n-    \n-    protected void paintText(Graphics g,\n-\t\t\t     JComponent c,\n-\t\t\t     Rectangle textRect,\n-\t\t\t     String text) \n-    {\n-\t//        AbstractButton b = (AbstractButton) c;\n-\t\n-\t//System.out.println(\"drawing string: \" + text + \", \" + c.isEnabled());\n-\t\n-\tg.setColor(c.isEnabled() ? textColor : disabledTextColor);\n-\t\n-\tBasicGraphicsUtils.drawString(g,\n-\t\t\t\t      text, \n-\t\t\t\t      0,\n-\t\t\t\t      textRect.x + circle_width + gap, \n-\t\t\t\t      textRect.y);\n-    } \n }\n \n "}, {"sha": "c6b3bdb06708f4e61ee63c814f31b524bfae1640", "filename": "libjava/javax/swing/plaf/basic/BasicToggleButtonUI.java", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToggleButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToggleButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToggleButtonUI.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -50,72 +50,7 @@ public class BasicToggleButtonUI extends BasicButtonUI\n   \n     public static ComponentUI createUI(final JComponent c)  {\n \treturn new BasicToggleButtonUI();\n-    }\n-\n-    \n-    public void installUI(final JComponent c)  {\n-\tsuper.installUI(c);\n-    }\n-    \n-    public Dimension getPreferredSize(JComponent c) \n-    {\n-\tAbstractButton b = (AbstractButton)c;\n-\tDimension d = BasicGraphicsUtils.getPreferredButtonSize(b, gap);\n-\t\t\t\t\t\t\t  \n-\t//System.out.println(\"^^^^^^^^^^^^^^^^^^^^^^   BASIC-PREF=\"+d + \",T=\"+b.text);\n-\treturn d;\n-    }\n-    \n-    protected void paintFocus(Graphics g, \n-\t\t\t      JComponent c,\n-\t\t\t      Rectangle vr,\n-\t\t\t      Rectangle tr,\n-\t\t\t      Rectangle ir)\n-    {\n-    }\n-\n-    protected void paintIcon(Graphics g, \n-\t\t\t     JComponent c, \n-\t\t\t     Rectangle iconRect)\n-    {\n-    }\n-\n-    protected void paintButtonPressed(Graphics g,\n-\t\t\t\t      JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(pressedBackgroundColor);\n-\tg.fillRect(1,1,size.width-2, size.height-2);                \n-\n-    }\n-    \n-    protected void paintButtonNormal(Graphics g,\n-\t\t\t\t     JComponent b)\n-    {\n-\tDimension size = b.getSize();\n-\t\n-\tg.setColor(normalBackgroundColor);\n-\tg.fillRect(1,1,size.width-2, size.height-2);                \n-\n-    }\n-    protected void paintText(Graphics g,\n-\t\t\t     JComponent c,\n-\t\t\t     Rectangle textRect,\n-\t\t\t     String text) \n-    {\n-\t//        AbstractButton b = (AbstractButton) c;\n-\t\n-\t//\tSystem.out.println(\"drawing string: \" + text + \", at:\" + textRect);\n-\t\n-\tg.setColor(textColor);\n-\n-\tBasicGraphicsUtils.drawString(g,\n-\t\t\t\t      text, \n-\t\t\t\t      0,\t\n-\t\t\t\t      textRect.x, \n-\t\t\t\t      textRect.y);\n-    } \n+    }    \n }\n \n "}, {"sha": "20becaf7ec8a47c4a7fabf984ccf2f7eb41085f3", "filename": "libjava/javax/swing/plaf/metal/MetalLookAndFeel.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -40,7 +40,6 @@\n package javax.swing.plaf.metal;\n \n import javax.swing.UIDefaults;\n-import javax.swing.plaf.basic.BasicDefaults;\n import javax.swing.plaf.basic.BasicLookAndFeel;\n \n public class MetalLookAndFeel extends BasicLookAndFeel\n@@ -61,7 +60,7 @@ public MetalLookAndFeel()\n      public UIDefaults getDefaults()\n \t {\n \t   if (LAF_defaults == null)\n-\t     LAF_defaults = new BasicDefaults();\n+\t     LAF_defaults = super.getDefaults();\n \t     \n \t     //      Returns the default values for this look and feel. \n \t     return LAF_defaults;"}, {"sha": "e112cb42c62f7fe0db6e1244bec355e9e0c01ee1", "filename": "libjava/javax/swing/text/JTextComponent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -406,7 +406,7 @@ public String getText()\n     public String getUIClassID()\n     {\n \t//          Returns a string that specifies the name of the l&f class that renders this component.  \n-\treturn \"JTextComponent\";\n+\treturn \"TextComponentUI\";\n     }\n     public int getVerticalAlignment()\n     {"}, {"sha": "d53a69ac8d4db972d72cb4d49ca602f28fd5f10d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9288d1120423d9743dd6b4c419f201c4749122f6/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c?ref=9288d1120423d9743dd6b4c419f201c4749122f6", "patch": "@@ -316,12 +316,24 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_clearRect\n   (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n {\n   struct graphics *g;\n+  GdkGCValues saved;\n \n   g = (struct graphics *) NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n-  gdk_window_clear_area ((GdkWindow *)g->drawable, \n-\t\t\t x + g->x_offset, y + g->y_offset, width, height);\n+  if (GDK_IS_WINDOW (g->drawable))\n+    {\n+      gdk_window_clear_area ((GdkWindow *)g->drawable, \n+\t\t\t     x + g->x_offset, y + g->y_offset, width, height);\n+    }\n+  else\n+    {\n+      gdk_gc_get_values (g->gc, &saved);\n+      gdk_gc_set_foreground (g->gc, &(saved.background));\n+      gdk_draw_rectangle (g->drawable, g->gc, TRUE, \n+\t\t\t  x + g->x_offset, y + g->y_offset, width, height);\n+      gdk_gc_set_foreground (g->gc, &(saved.foreground));\n+    }\n   gdk_threads_leave ();\n }\n "}]}