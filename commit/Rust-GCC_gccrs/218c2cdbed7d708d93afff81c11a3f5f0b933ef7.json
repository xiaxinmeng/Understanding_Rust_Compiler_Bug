{"sha": "218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4YzJjZGJlZDdkNzA4ZDkzYWZmZjgxYzExYTNmNWYwYjkzM2VmNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1997-11-18T23:42:00Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-11-18T23:42:00Z"}, "message": "Fix gcc2 irix5 c-torture failures, EH/large frame errors\n\nFix gcc2 irix5 c-torture failures, EH/large frame errors\n\t* mips/mips.c (save_restore_insns): If gp_offset or fp_offset are\n\tlarge_int, emit two insns instead of one splitable insn.\n\t* dwarf2out.c (dwarf2out_frame_debug): When set cfa_store_offset\n\tfrom cfa_temp_value, use cfa_offset.  Add assert checking that\n\tcfa_reg is SP.\n\nFrom-SVN: r16573", "tree": {"sha": "454e6222091b9bea566c62aecbbc717b0fe950be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454e6222091b9bea566c62aecbbc717b0fe950be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/comments", "author": null, "committer": null, "parents": [{"sha": "15ec0729351b354a05bb6a0ac9a2f4da593efb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ec0729351b354a05bb6a0ac9a2f4da593efb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ec0729351b354a05bb6a0ac9a2f4da593efb62"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "e35094a81f936f71c9e622711506eb0b6fef62d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "patch": "@@ -1,3 +1,11 @@\n+Tue Nov 18 15:39:59 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* mips/mips.c (save_restore_insns): If gp_offset or fp_offset are\n+\tlarge_int, emit two insns instead of one splitable insn.\n+\t* dwarf2out.c (dwarf2out_frame_debug): When set cfa_store_offset\n+\tfrom cfa_temp_value, use cfa_offset.  Add assert checking that\n+\tcfa_reg is SP.\n+\n Mon Nov 17 15:35:38 1997  Tom Tromey  <tromey@cygnus.com>\n \n \t* cccp.c (deps_output): Properly quote file names for make."}, {"sha": "706a9bfe7bf3aa109874d970c7b3bbea0a96e97f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "patch": "@@ -5011,9 +5011,32 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t  base_offset  = gp_offset;\n \t  if (file == (FILE *)0)\n \t    {\n-\t      insn = emit_move_insn (base_reg_rtx, GEN_INT (gp_offset));\n-\t      if (store_p)\n-\t\tRTX_FRAME_RELATED_P (insn) = 1;\n+\t      rtx gp_offset_rtx = GEN_INT (gp_offset);\n+\n+\t      /* Instruction splitting doesn't preserve the RTX_FRAME_RELATED_P\n+\t\t bit, so make sure that we don't emit anything that can be\n+\t\t split.  */\n+\t      /* ??? There is no DImode ori immediate pattern, so we can only\n+\t\t do this for 32 bit code.  */\n+\t      if (large_int (gp_offset_rtx)\n+\t\t  && GET_MODE (base_reg_rtx) == SImode)\n+\t\t{\n+\t\t  insn = emit_move_insn (base_reg_rtx,\n+\t\t\t\t\t GEN_INT (gp_offset & 0xffff0000));\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t  insn = emit_insn (gen_iorsi3 (base_reg_rtx, base_reg_rtx,\n+\t\t\t\t\t\tGEN_INT (gp_offset & 0x0000ffff)));\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  insn = emit_move_insn (base_reg_rtx, gp_offset_rtx);\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t}\n+\n \t      if (TARGET_LONG64)\n \t\tinsn = emit_insn (gen_adddi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n \t      else\n@@ -5131,7 +5154,32 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t  base_offset  = fp_offset;\n \t  if (file == (FILE *)0)\n \t    {\n-\t      insn = emit_move_insn (base_reg_rtx, GEN_INT (fp_offset));\n+\t      rtx fp_offset_rtx = GEN_INT (fp_offset);\n+\n+\t      /* Instruction splitting doesn't preserve the RTX_FRAME_RELATED_P\n+\t\t bit, so make sure that we don't emit anything that can be\n+\t\t split.  */\n+\t      /* ??? There is no DImode ori immediate pattern, so we can only\n+\t\t do this for 32 bit code.  */\n+\t      if (large_int (fp_offset_rtx)\n+\t\t  && GET_MODE (base_reg_rtx) == SImode)\n+\t\t{\n+\t\t  insn = emit_move_insn (base_reg_rtx,\n+\t\t\t\t\t GEN_INT (fp_offset & 0xffff0000));\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t  insn = emit_insn (gen_iorsi3 (base_reg_rtx, base_reg_rtx,\n+\t\t\t\t\t\tGEN_INT (fp_offset & 0x0000ffff)));\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  insn = emit_move_insn (base_reg_rtx, fp_offset_rtx);\n+\t\t  if (store_p)\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t}\n+\n \t      if (store_p)\n \t\tRTX_FRAME_RELATED_P (insn) = 1;\n \t      if (TARGET_LONG64)"}, {"sha": "db472755bb205d15d2dad7e6dafdd78d978181ee", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218c2cdbed7d708d93afff81c11a3f5f0b933ef7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=218c2cdbed7d708d93afff81c11a3f5f0b933ef7", "patch": "@@ -1194,8 +1194,10 @@ dwarf2out_frame_debug (insn)\n \t      if (GET_CODE (XEXP (src, 0)) != REG\n \t\t  || REGNO (XEXP (src, 0)) != cfa_temp_reg)\n \t\tabort ();\n+\t      if (cfa_reg != STACK_POINTER_REGNUM)\n+\t\tabort ();\n \t      cfa_store_reg = REGNO (dest);\n-\t      cfa_store_offset -= cfa_temp_value;\n+\t      cfa_store_offset = cfa_offset - cfa_temp_value;\n \t    }\n \t  break;\n "}]}