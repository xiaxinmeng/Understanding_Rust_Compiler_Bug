{"sha": "a8da523f8a442f95c34dd3687771589579a08918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkYTUyM2Y4YTQ0MmY5NWMzNGRkMzY4Nzc3MTU4OTU3OWEwODkxOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-03-29T13:32:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-03-29T13:32:13Z"}, "message": "re PR tree-optimization/28850 (missed call -> jmp transformation; redundant unwind stuff with empty finally)\n\n\n\tPR middle-end/28850\n\t* tree-pass.h (pass_cleanup_eh): New function.\n\t(remove_unreachable_regions): Break code handling RTL\n\tto rtl_remove_unreachable_regions; remove ERT_MUST_NOT_THROW\n\tthat can not be reached by runtime.\n\t(can_be_reached_by_runtime): New function.\n\t(label_to_region_map): New function.\n\t(num_eh_regions): New function.\n\t(rtl_remove_unreachable_regions): New function.\n\t(convert_from_eh_region_ranges): Call rtl_remove_unreachable_regions.\n\t(remove_eh_region): New function.\n\t* except.h: Include sbitmap and vecprim.\n\t(remove_eh_region, remove_unreachable_regions, label_to_region_map,\n\tnum_eh_regions): Declare.\n\t* passes.c (init_optimization_passes): Schedule cleanup_eh.\n\t* Makefile.in (EXCEPT_H): New; replace all uses of except.h\n\tby it.\n\t* tree-eh.c (tree_remove_unreachable_handlers): New function.\n\t(tree_empty_eh_handler_p): New function.\n\t(cleanup_empty_eh): New function.\n\t(cleanup_eh): New function.\n\t(pass_cleanup_eh): New function.\n\nFrom-SVN: r145233", "tree": {"sha": "1577a1a0b3cbaa114690527d99170c1034533481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1577a1a0b3cbaa114690527d99170c1034533481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8da523f8a442f95c34dd3687771589579a08918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8da523f8a442f95c34dd3687771589579a08918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8da523f8a442f95c34dd3687771589579a08918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8da523f8a442f95c34dd3687771589579a08918/comments", "author": null, "committer": null, "parents": [{"sha": "98f358e55f3a003ab3ca4213ba59ce93c5cd9fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f358e55f3a003ab3ca4213ba59ce93c5cd9fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f358e55f3a003ab3ca4213ba59ce93c5cd9fc1"}], "stats": {"total": 670, "additions": 571, "deletions": 99}, "files": [{"sha": "b8b7547488073a158662900170dcb27107cdf908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -1,3 +1,28 @@\n+2009-03-29  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/28850\n+\t* tree-pass.h (pass_cleanup_eh): New function.\n+\t(remove_unreachable_regions): Break code handling RTL\n+\tto rtl_remove_unreachable_regions; remove ERT_MUST_NOT_THROW\n+\tthat can not be reached by runtime.\n+\t(can_be_reached_by_runtime): New function.\n+\t(label_to_region_map): New function.\n+\t(num_eh_regions): New function.\n+\t(rtl_remove_unreachable_regions): New function.\n+\t(convert_from_eh_region_ranges): Call rtl_remove_unreachable_regions.\n+\t(remove_eh_region): New function.\n+\t* except.h: Include sbitmap and vecprim.\n+\t(remove_eh_region, remove_unreachable_regions, label_to_region_map,\n+\tnum_eh_regions): Declare.\n+\t* passes.c (init_optimization_passes): Schedule cleanup_eh.\n+\t* Makefile.in (EXCEPT_H): New; replace all uses of except.h\n+\tby it.\n+\t* tree-eh.c (tree_remove_unreachable_handlers): New function.\n+\t(tree_empty_eh_handler_p): New function.\n+\t(cleanup_empty_eh): New function.\n+\t(cleanup_eh): New function.\n+\t(pass_cleanup_eh): New function.\n+\n 2009-03-29  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (verify_eh_tree): Fix handling of fun!=cfun; be ready"}, {"sha": "7464d3ec617080cada01c415c05b4dc005dbdeb8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 62, "deletions": 61, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -780,6 +780,7 @@ REVISION_s  :=\n endif\n \n # Shorthand variables for dependency lists.\n+EXCEPT_H = except.h sbitmap.h vecprim.h\n TOPLEV_H = toplev.h input.h\n TARGET_H = $(TM_H) target.h insn-modes.h\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n@@ -1810,7 +1811,7 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) $(FUNCTION_H) output.h \\\n     $(EXPR_H) debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) $(TIMEVAR_H) \\\n     opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) $(HASHTAB_H) libfuncs.h \\\n-    except.h $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n+    $(EXCEPT_H) $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n     $(DIAGNOSTIC_H) $(INPUT_H) langhooks.h $(GIMPLE_H) tree-mudflap.h  \\\n     pointer-set.h $(BASIC_BLOCK_H) $(GIMPLE_H) tree-iterator.h\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -1894,7 +1895,7 @@ c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) $(FLAGS_H) \\\n-\t$(TOPLEV_H) output.h except.h $(REAL_H) $(TARGET_H) $(TM_P_H) \\\n+\t$(TOPLEV_H) output.h $(EXCEPT_H) $(REAL_H) $(TARGET_H) $(TM_P_H) \\\n \t$(BASEVER) debug.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) -DBASEVER=$(BASEVER_s) \\\n \t\t$< $(OUTPUT_OPTION)\n@@ -1911,7 +1912,7 @@ c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) la\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(FLAGS_H) $(TOPLEV_H) output.h $(RTL_H) $(GGC_H) \\\n-\t$(PREDICT_H) $(TREE_INLINE_H) $(C_COMMON_H) except.h $(FUNCTION_H) \\\n+\t$(PREDICT_H) $(TREE_INLINE_H) $(C_COMMON_H) $(EXCEPT_H) $(FUNCTION_H) \\\n \tlanghooks.h $(SPLAY_TREE_H) $(TIMEVAR_H) $(GIMPLE_H) \\\n \t$(VARRAY_H) tree-iterator.h\n \n@@ -2008,7 +2009,7 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \tinput.h $(TREE_H) $(RTL_H) $(FUNCTION_H) insn-config.h $(EXPR_H) \\\n \thard-reg-set.h $(BASIC_BLOCK_H) cselib.h $(INSN_ADDR_H) $(OPTABS_H) \\\n \tlibfuncs.h debug.h $(GGC_H) $(CGRAPH_H) $(TREE_FLOW_H) reload.h \\\n-\t$(CPP_ID_DATA_H) tree-chrec.h $(CFGLAYOUT_H) except.h output.h \\\n+\t$(CPP_ID_DATA_H) tree-chrec.h $(CFGLAYOUT_H) $(EXCEPT_H) output.h \\\n \t$(CFGLOOP_H)\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n@@ -2054,7 +2055,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n    $(VARRAY_H) $(HASHTAB_H) $(TOPLEV_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n    intl.h $(FUNCTION_H) $(GGC_H) $(GIMPLE_H) \\\n-   debug.h $(DIAGNOSTIC_H) except.h $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n+   debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h tree-pass.h $(TARGET_H) $(INTEGRATE_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) langhooks.h $(REAL_H) tree-iterator.h fixed-value.h \\\n@@ -2177,13 +2178,13 @@ tree-vrp.o : tree-vrp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) tree-pass.h \\\n+   $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h $(CFGLOOP_H) tree-pass.h \\\n    $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h $(TOPLEV_H) \\\n    value-prof.h tree-ssa-propagate.h $(TREE_INLINE_H)\n tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    $(DIAGNOSTIC_H) $(TOPLEV_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) tree-pass.h \\\n+   $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h $(CFGLOOP_H) tree-pass.h \\\n    $(CFGLAYOUT_H) $(BASIC_BLOCK_H) hard-reg-set.h $(HASHTAB_H) $(TOPLEV_H) \\\n    tree-ssa-propagate.h tree-scalar-evolution.h\n rtl-factoring.o : rtl-factoring.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n@@ -2192,7 +2193,7 @@ rtl-factoring.o : rtl-factoring.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(TIMEVAR_H) output.h $(DF_H)\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) $(DIAGNOSTIC_H) except.h tree-pass.h $(FLAGS_H) langhooks.h \\\n+   $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(EXCEPT_H) tree-pass.h $(FLAGS_H) langhooks.h \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(DBGCNT_H)\n tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n@@ -2221,7 +2222,7 @@ tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) tree-pass.h $(TOPLEV_H) \\\n    coretypes.h langhooks.h $(IPA_REFERENCE_H)\n tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) except.h langhooks.h \\\n+   $(RTL_H) $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) langhooks.h \\\n    $(GGC_H) tree-pass.h coretypes.h $(TIMEVAR_H) $(TM_P_H) pointer-set.h \\\n    $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h $(TOPLEV_H)\n tree-ssa-loop.o : tree-ssa-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2301,7 +2302,7 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(DIAGNOSTIC_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(TOPLEV_H) $(FUNCTION_H) langhooks.h $(FLAGS_H) $(CGRAPH_H) \\\n    $(TREE_INLINE_H) tree-mudflap.h $(GGC_H) graph.h $(CGRAPH_H) tree-pass.h \\\n-   $(CFGLOOP_H) except.h\n+   $(CFGLOOP_H) $(EXCEPT_H)\n \n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(C_TREE_H) $(C_COMMON_H) $(DIAGNOSTIC_H) $(GIMPLE_H) $(VARRAY_H) \\\n@@ -2311,20 +2312,20 @@ c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    $(DIAGNOSTIC_H) $(GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(CGRAPH_H) $(TIMEVAR_H) $(TM_H) \\\n-   coretypes.h except.h $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) output.h \\\n+   coretypes.h $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) output.h \\\n    $(GGC_H) gt-gimplify.h $(HASHTAB_H) $(TARGET_H) $(TOPLEV_H) $(OPTABS_H) \\\n    $(REAL_H) $(SPLAY_TREE_H) vec.h tree-iterator.h\n gimple-iterator.o : gimple-iterator.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) value-prof.h\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_H) $(GIMPLE_H) $(TREE_INLINE_H) $(VARRAY_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   except.h $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) tree-pass.h \\\n+   $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) tree-pass.h \\\n    $(HASHTAB_H) $(TOPLEV.H) tree-iterator.h\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_H) \\\n    $(TREE_FLOW_H) $(TIMEVAR_H) $(FLAGS_H) $(EXPR_H) $(TOPLEV_H) tree-pass.h \\\n-   $(GGC_H) except.h $(SPLAY_TREE_H) $(OPTABS_H) $(CFGLOOP_H) \\\n+   $(GGC_H) $(EXCEPT_H) $(SPLAY_TREE_H) $(OPTABS_H) $(CFGLOOP_H) \\\n    tree-iterator.h\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n@@ -2429,7 +2430,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    version.h $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) \\\n    $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) debug.h insn-config.h intl.h \\\n    $(RECOG_H) Makefile $(TOPLEV_H) dwarf2out.h sdbout.h dbxout.h $(EXPR_H) \\\n-   hard-reg-set.h $(BASIC_BLOCK_H) graph.h except.h $(REGS_H) $(TIMEVAR_H) \\\n+   hard-reg-set.h $(BASIC_BLOCK_H) graph.h $(EXCEPT_H) $(REGS_H) $(TIMEVAR_H) \\\n    value-prof.h $(PARAMS_H) $(TM_P_H) reload.h ira.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(CFGLOOP_H) hosthooks.h \\\n    $(CGRAPH_H) $(COVERAGE_H) alloc-pool.h $(GGC_H) $(INTEGRATE_H) \\\n@@ -2442,7 +2443,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) $(INSN_ATTR_H) output.h \\\n    $(DIAGNOSTIC_H) debug.h insn-config.h intl.h $(RECOG_H) $(TOPLEV_H) \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n-   graph.h except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n+   graph.h $(EXCEPT_H) $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(REAL_H) $(CFGLOOP_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) tree-pass.h $(TREE_DUMP_H) \\\n@@ -2477,26 +2478,26 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) $(GIMPLE_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) \\\n    $(OPTABS_H) libfuncs.h $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n-   output.h $(TOPLEV_H) except.h $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n+   output.h $(TOPLEV_H) $(EXCEPT_H) $(HASHTAB_H) $(GGC_H) $(TM_P_H) langhooks.h \\\n    gt-function.h $(TARGET_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) $(PREDICT_H) \\\n    tree-pass.h $(DF_H) $(TIMEVAR_H) vecprim.h\n statistics.o : statistics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    tree-pass.h $(TREE_DUMP_H) $(HASHTAB_H) statistics.h $(TM_H) $(FUNCTION_H)\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) insn-config.h hard-reg-set.h $(EXPR_H) \\\n-   libfuncs.h except.h $(RECOG_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n+   libfuncs.h $(EXCEPT_H) $(RECOG_H) $(TOPLEV_H) output.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) $(OPTABS_H) $(TARGET_H) $(MACHMODE_H) \\\n    $(REGS_H) alloc-pool.h\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) $(FLAGS_H) except.h $(FUNCTION_H) $(EXPR_H) libfuncs.h \\\n+   $(TREE_H) $(FLAGS_H) $(EXCEPT_H) $(FUNCTION_H) $(EXPR_H) libfuncs.h \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h $(TOPLEV_H) $(HASHTAB_H) intl.h $(GGC_H) \\\n-   gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) dwarf2.h \\\n+   gt-$(EXCEPT_H) $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) dwarf2.h \\\n    $(TARGET_H) $(TM_P_H) tree-pass.h $(TIMEVAR_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    libfuncs.h $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n-   typeclass.h hard-reg-set.h $(TOPLEV_H) hard-reg-set.h except.h reload.h \\\n+   typeclass.h hard-reg-set.h $(TOPLEV_H) hard-reg-set.h $(EXCEPT_H) reload.h \\\n    $(GGC_H) langhooks.h intl.h $(TM_P_H) $(REAL_H) $(TARGET_H) \\\n    tree-iterator.h gt-expr.h $(MACHMODE_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n    tree-pass.h $(DF_H) $(DIAGNOSTIC_H) vecprim.h\n@@ -2506,23 +2507,23 @@ dojump.o : dojump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(GIMPLE_H) $(FLAGS_H) $(TARGET_H) $(FUNCTION_H) $(REGS_H) \\\n    $(EXPR_H) $(OPTABS_H) insn-config.h $(RECOG_H) output.h typeclass.h \\\n-   hard-reg-set.h $(TOPLEV_H) hard-reg-set.h except.h $(TM_P_H) $(PREDICT_H) \\\n+   hard-reg-set.h $(TOPLEV_H) hard-reg-set.h $(EXCEPT_H) $(TM_P_H) $(PREDICT_H) \\\n    libfuncs.h $(REAL_H) langhooks.h $(BASIC_BLOCK_H) tree-mudflap.h \\\n    $(BUILTINS_DEF) $(MACHMODE_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) value-prof.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n    libfuncs.h $(REGS_H) $(TOPLEV_H) output.h $(FUNCTION_H) $(TIMEVAR_H) $(TM_P_H) \\\n-   $(CGRAPH_H) except.h sbitmap.h $(DBGCNT_H) $(TREE_FLOW_H)\n+   $(CGRAPH_H) $(EXCEPT_H) sbitmap.h $(DBGCNT_H) $(TREE_FLOW_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(REAL_H) \\\n    $(TOPLEV_H) $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H)\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n-   $(TOPLEV_H) except.h $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n+   $(TOPLEV_H) $(EXCEPT_H) $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n    $(TARGET_H) output.h\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h \\\n-   $(RECOG_H) reload.h $(TOPLEV_H) $(GGC_H) $(REAL_H) $(TM_P_H) except.h \\\n+   $(RECOG_H) reload.h $(TOPLEV_H) $(GGC_H) $(REAL_H) $(TM_P_H) $(EXCEPT_H) \\\n    gt-optabs.h $(BASIC_BLOCK_H) $(TARGET_H) $(FUNCTION_H)\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(FLAGS_H) $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) $(FUNCTION_H) \\\n@@ -2536,7 +2537,7 @@ sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) debug.h \\\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) version.h $(RTL_H) dwarf2.h debug.h $(FLAGS_H) insn-config.h \\\n    output.h $(DIAGNOSTIC_H) $(REAL_H) hard-reg-set.h $(REGS_H) $(EXPR_H) \\\n-   libfuncs.h $(TOPLEV_H) dwarf2out.h reload.h $(GGC_H) except.h dwarf2asm.h \\\n+   libfuncs.h $(TOPLEV_H) dwarf2out.h reload.h $(GGC_H) $(EXCEPT_H) dwarf2asm.h \\\n    $(TM_P_H) langhooks.h $(HASHTAB_H) gt-dwarf2out.h $(TARGET_H) $(CGRAPH_H) \\\n    $(MD5_H) $(INPUT_H) $(FUNCTION_H) $(VARRAY_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2561,11 +2562,11 @@ fixed-value.o: fixed-value.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(FLAGS_H) debug.h $(INTEGRATE_H) insn-config.h \\\n    $(EXPR_H) $(REAL_H) $(REGS_H) intl.h $(FUNCTION_H) output.h $(RECOG_H) \\\n-   except.h $(TOPLEV_H) $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h \\\n+   $(EXCEPT_H) $(TOPLEV_H) $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h \\\n    gt-integrate.h $(GGC_H) tree-pass.h $(DF_H)\n jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) \\\n-   $(REAL_H) except.h $(FUNCTION_H) tree-pass.h $(DIAGNOSTIC_H) \\\n+   $(REAL_H) $(EXCEPT_H) $(FUNCTION_H) tree-pass.h $(DIAGNOSTIC_H) \\\n    $(TOPLEV_H) $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) \\\n    $(TIMEVAR_H) $(TARGET_H)\n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -2648,7 +2649,7 @@ cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) $(EXPR_H) $(TOPLEV_H) \\\n    output.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n-   except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h tree-pass.h $(REAL_H) \\\n+   $(EXCEPT_H) $(TARGET_H) $(PARAMS_H) rtlhooks-def.h tree-pass.h $(REAL_H) \\\n    $(DF_H) $(DBGCNT_H)\n dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(DF_H) cselib.h \\\n@@ -2671,11 +2672,11 @@ see.o : see.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n-   $(TM_P_H) $(PARAMS_H) except.h gt-gcse.h $(TREE_H) cselib.h $(TIMEVAR_H) \\\n+   $(TM_P_H) $(PARAMS_H) $(EXCEPT_H) gt-gcse.h $(TREE_H) cselib.h $(TIMEVAR_H) \\\n    intl.h $(OBSTACK_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(REGS_H) $(FLAGS_H) output.h $(RESOURCE_H) $(DF_H) \\\n-   $(FUNCTION_H) $(TOPLEV_H) $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n+   $(FUNCTION_H) $(TOPLEV_H) $(INSN_ATTR_H) $(EXCEPT_H) $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(RECOG_H) \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) output.h $(REAL_H)\n@@ -2722,7 +2723,7 @@ df-core.o : df-core.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n df-problems.o : df-problems.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h $(TIMEVAR_H) \\\n-   $(TM_P_H) $(FLAGS_H) output.h except.h dce.h vecprim.h\n+   $(TM_P_H) $(FLAGS_H) output.h $(EXCEPT_H) dce.h vecprim.h\n df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) $(FUNCTION_H) $(REGS_H) alloc-pool.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(BITMAP_H) sbitmap.h $(TIMEVAR_H) \\\n@@ -2731,7 +2732,7 @@ df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n df-byte-scan.o : df-byte-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    tm_p.h $(DF_H) output.h $(DBGCNT_H)\n regstat.o : regstat.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TM_P_H) $(FLAGS_H) $(REGS_H) output.h except.h hard-reg-set.h \\\n+   $(TM_P_H) $(FLAGS_H) $(REGS_H) output.h $(EXCEPT_H) hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(TIMEVAR_H) $(DF_H)\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h $(FLAGS_H) \\\n@@ -2758,30 +2759,30 @@ loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n auto-inc-dec.o : auto-inc-dec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(TM_P_H) hard-reg-set.h $(BASIC_BLOCK_H) insn-config.h \\\n-   $(REGS_H) $(FLAGS_H) output.h $(FUNCTION_H) except.h $(TOPLEV_H) $(RECOG_H) \\\n+   $(REGS_H) $(FLAGS_H) output.h $(FUNCTION_H) $(EXCEPT_H) $(TOPLEV_H) $(RECOG_H) \\\n    $(EXPR_H) $(TIMEVAR_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n-   $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) $(FUNCTION_H) except.h $(GGC_H) \\\n+   $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) $(FUNCTION_H) $(EXCEPT_H) $(GGC_H) \\\n    $(TM_P_H) $(TIMEVAR_H) $(OBSTACK_H) $(TREE_H) alloc-pool.h \\\n    $(HASHTAB_H) $(DF_H) $(CFGLOOP_H) $(TREE_FLOW_H) tree-pass.h\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) $(TOPLEV_H) $(CFGLOOP_H)\n cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) \\\n-   coretypes.h $(TREE_DUMP_H) except.h langhooks.h tree-pass.h $(RTL_H) \\\n+   coretypes.h $(TREE_DUMP_H) $(EXCEPT_H) langhooks.h tree-pass.h $(RTL_H) \\\n    $(DIAGNOSTIC_H) $(TOPLEV_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n    value-prof.h $(TREE_INLINE_H) $(TARGET_H)\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n-   output.h $(TOPLEV_H) $(FUNCTION_H) except.h $(TM_P_H) insn-config.h $(EXPR_H) \\\n+   output.h $(TOPLEV_H) $(FUNCTION_H) $(EXCEPT_H) $(TM_P_H) insn-config.h $(EXPR_H) \\\n    $(CFGLAYOUT_H) $(CFGLOOP_H) $(OBSTACK_H) $(TARGET_H) $(TREE_H) \\\n    tree-pass.h $(DF_H) $(GGC_H)\n cfganal.o : cfganal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h insn-config.h $(RECOG_H) $(TM_P_H) \\\n    $(TIMEVAR_H) $(OBSTACK_H) $(TOPLEV_H) vecprim.h\n cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(TOPLEV_H) \\\n-   $(FUNCTION_H) except.h $(TIMEVAR_H) $(TREE_H)\n+   $(FUNCTION_H) $(EXCEPT_H) $(TIMEVAR_H) $(TREE_H)\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) hard-reg-set.h output.h $(FLAGS_H) $(RECOG_H) \\\n    $(TOPLEV_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n@@ -2802,7 +2803,7 @@ loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) coretypes.h \\\n    $(TM_H) $(TM_P_H) $(FUNCTION_H) $(FLAGS_H) $(DF_H) $(OBSTACK_H) output.h \\\n-   $(HASHTAB_H) except.h $(PARAMS_H)\n+   $(HASHTAB_H) $(EXCEPT_H) $(PARAMS_H)\n cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) output.h \\\n    coretypes.h $(TM_H) cfghooks.h $(OBSTACK_H) $(TREE_FLOW_H)\n@@ -2844,31 +2845,31 @@ reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h $(FUNCTION_H) $(TOPLEV_H) $(TM_P_H) \\\n-   addresses.h except.h $(TREE_H) $(REAL_H) $(FLAGS_H) $(MACHMODE_H) \\\n+   addresses.h $(EXCEPT_H) $(TREE_H) $(REAL_H) $(FLAGS_H) $(MACHMODE_H) \\\n    $(OBSTACK_H) $(DF_H) $(TARGET_H) $(EMIT_RTL_H) ira.h\n rtlhooks.o :  rtlhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    rtlhooks-def.h $(EXPR_H) $(RECOG_H)\n postreload.o : postreload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REAL_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) \\\n    hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) output.h \\\n-   $(FUNCTION_H) $(TOPLEV_H) cselib.h $(TM_P_H) except.h $(TREE_H) $(MACHMODE_H) \\\n+   $(FUNCTION_H) $(TOPLEV_H) cselib.h $(TM_P_H) $(EXCEPT_H) $(TREE_H) $(MACHMODE_H) \\\n    $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h $(DF_H) $(DBGCNT_H)\n postreload-gcse.o : postreload-gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) \\\n-   $(TM_P_H) except.h $(TREE_H) $(TARGET_H) $(HASHTAB_H) intl.h $(OBSTACK_H) \\\n+   $(TM_P_H) $(EXCEPT_H) $(TREE_H) $(TARGET_H) $(HASHTAB_H) intl.h $(OBSTACK_H) \\\n    $(PARAMS_H) $(TIMEVAR_H) tree-pass.h $(REAL_H) $(DBGCNT_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n    addresses.h $(RECOG_H) reload.h $(EXPR_H) $(TOPLEV_H) $(TM_P_H) $(DF_H) \\\n    output.h ira.h gt-caller-save.h $(GGC_H)\n-bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) except.h \\\n+bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(EXCEPT_H) \\\n    $(RTL_H) hard-reg-set.h $(REGS_H) $(TM_P_H) $(FIBHEAP_H) output.h $(EXPR_H) \\\n    $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) tree-pass.h $(TOPLEV_H) \\\n    $(DF_H) vecprim.h $(RECOG_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    conditions.h hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n-   $(INSN_ATTR_H) except.h $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n+   $(INSN_ATTR_H) $(EXCEPT_H) $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n    $(EXPR_H) $(TOPLEV_H) $(PARAMS_H) $(TM_P_H) $(OBSTACK_H) $(RESOURCE_H) \\\n    $(TIMEVAR_H) $(TARGET_H) tree-pass.h\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -2904,7 +2905,7 @@ ira-emit.o: ira-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(PARAMS_H) \\\n    $(IRA_INT_H)\n ira-lives.o: ira-lives.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TARGET_H) $(RTL_H) $(REGS_H) except.h hard-reg-set.h $(FLAGS_H) \\\n+   $(TARGET_H) $(RTL_H) $(REGS_H) $(EXCEPT_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h $(RECOG_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(PARAMS_H) \\\n    $(DF_H) sparseset.h $(IRA_INT_H)\n ira.o: ira.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2916,62 +2917,62 @@ ira.o: ira.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(TIMEVAR_H) tree-pass.h $(DF_H)\\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) $(FUNCTION_H) \\\n-   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) except.h reload.h\n+   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(EXCEPT_H) reload.h\n combine-stack-adj.o : combine-stack-adj.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) insn-config.h $(TIMEVAR_H) tree-pass.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) $(FUNCTION_H) \\\n-   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(DF_H) except.h reload.h\n+   $(EXPR_H) $(BASIC_BLOCK_H) $(TOPLEV_H) $(TM_P_H) $(DF_H) $(EXCEPT_H) reload.h\n ddg.o : ddg.c $(DDG_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n    $(TOPLEV_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n-   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) except.h $(RECOG_H) \\\n+   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(EXCEPT_H) $(RECOG_H) \\\n    $(SCHED_INT_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) $(BITMAP_H) \\\n    hard-reg-set.h sbitmap.h $(TM_H)\n modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TARGET_H) $(TOPLEV_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n-   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) except.h $(RECOG_H) \\\n+   $(FLAGS_H) insn-config.h $(INSN_ATTR_H) $(EXCEPT_H) $(RECOG_H) \\\n    $(SCHED_INT_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) $(PARAMS_H) \\\n    cfghooks.h $(GCOV_IO_H) hard-reg-set.h $(TM_H) $(TIMEVAR_H) tree-pass.h \\\n    $(DF_H) $(DBGCNT_H)\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n-   $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(TM_P_H) $(TARGET_H) output.h \\\n+   $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) $(TARGET_H) output.h \\\n    $(PARAMS_H) $(DBGCNT_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h cselib.h \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) cselib.h \\\n    $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(PARAMS_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h  \\\n    $(DBGCNT_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) except.h $(TM_P_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) $(TOPLEV_H) $(RECOG_H) $(EXCEPT_H) $(TM_P_H) \\\n    $(PARAMS_H) $(CFGLAYOUT_H) $(TARGET_H) output.h\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(OBSTACK_H) \\\n    $(REAL_H) tree-pass.h $(INSN_ATTR_H)\n sel-sched.o : sel-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h  \\\n    $(SCHED_INT_H) $(GGC_H) $(TREE_H) $(LANGHOOKS_DEF_H) \\\n    $(SEL_SCHED_IR_H) $(SEL_SCHED_DUMP_H) sel-sched.h\n sel-sched-dump.o : sel-sched-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h \\\n    $(SEL_SCHED_DUMP_H) $(GGC_H) $(TREE_H) $(LANGHOOKS_DEF_H) $(SEL_SCHED_IR_H)\n sel-sched-ir.o : sel-sched-ir.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n-   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) $(EXCEPT_H) $(PARAMS_H) \\\n    $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h \\\n    $(SCHED_INT_H) $(GGC_H) $(TREE_H) $(LANGHOOKS_DEF_H) $(SEL_SCHED_IR_H)\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) intl.h $(REGS_H) $(RECOG_H) conditions.h \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) output.h hard-reg-set.h \\\n-   except.h debug.h xcoffout.h $(TOPLEV_H) reload.h dwarf2out.h tree-pass.h \\\n+   $(EXCEPT_H) debug.h xcoffout.h $(TOPLEV_H) reload.h dwarf2out.h tree-pass.h \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) $(EXPR_H) $(CFGLAYOUT_H) dbxout.h \\\n    $(TIMEVAR_H) $(CGRAPH_H) $(COVERAGE_H) $(REAL_H) $(DF_H) vecprim.h $(GGC_H) \\\n    $(CFGLOOP_H) $(PARAMS_H)\n@@ -2988,7 +2989,7 @@ reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) \\\n-   hard-reg-set.h output.h $(TOPLEV_H) $(RECOG_H) $(FUNCTION_H) except.h \\\n+   hard-reg-set.h output.h $(TOPLEV_H) $(RECOG_H) $(FUNCTION_H) $(EXCEPT_H) \\\n    $(TM_P_H) $(PREDICT_H) sreal.h $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) \\\n    $(COVERAGE_H) $(SCEV_H) $(GGC_H) predict.def $(TIMEVAR_H) $(TREE_DUMP_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(EXPR_H) pointer-set.h\n@@ -3015,7 +3016,7 @@ regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    addresses.h reload.h $(TOPLEV_H) $(TIMEVAR_H) tree-pass.h $(DF_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) $(TOPLEV_H) $(FLAGS_H) insn-config.h $(FUNCTION_H) $(RECOG_H) \\\n-   $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) \\\n+   $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h $(EXCEPT_H) $(TM_P_H) \\\n    $(REAL_H) $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h $(TIMEVAR_H) tree-pass.h \\\n    $(DF_H) $(DBGCNT_H)\n lambda-mat.o : lambda-mat.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n@@ -3038,7 +3039,7 @@ dbgcnt.o: dbgcnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h errors.h $(DBGCNT_H) \\\n lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(MACHMODE_H) $(TM_H) $(RTL_H) $(TM_P_H) $(TIMEVAR_H) $(FLAGS_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) $(OBSTACK_H) $(BITMAP_H) \\\n-   $(EXPR_H) except.h $(REGS_H) tree-pass.h $(DF_H)\n+   $(EXPR_H) $(EXCEPT_H) $(REGS_H) tree-pass.h $(DF_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\\n@@ -3121,7 +3122,7 @@ insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TARGET_H) tm-constrs.h\n insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   insn-config.h $(RTL_H) $(TM_P_H) $(REGS_H) output.h $(REAL_H)\t\t\\\n-  $(RECOG_H) except.h $(FUNCTION_H) $(TOPLEV_H) $(FLAGS_H) tm-constrs.h\n+  $(RECOG_H) $(EXCEPT_H) $(FUNCTION_H) $(TOPLEV_H) $(FLAGS_H) tm-constrs.h\n insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   $(TM_H) $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) output.h\t\t\\\n   $(FLAGS_H) $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\t\\\n@@ -3358,7 +3359,7 @@ build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h vec.h \\\n build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   coretypes.h $(GTM_H) insn-constants.h $(RTL_H) $(TM_P_H)\t\t\\\n   $(FUNCTION_H) $(REGS_H) $(RECOG_H) $(REAL_H) output.h $(FLAGS_H)\t\\\n-  $(RESOURCE_H) $(TOPLEV_H) reload.h except.h tm-constrs.h\n+  $(RESOURCE_H) $(TOPLEV_H) reload.h $(EXCEPT_H) tm-constrs.h\n # This pulls in tm-pred.h which contains inline functions wrapping up\n # predicates from the back-end so those functions must be discarded.\n # No big deal since gencondmd.c is a dummy file for non-GCC compilers."}, {"sha": "41f799af07ef58311da567aae7567b7a303113b9", "filename": "gcc/except.c", "status": "modified", "additions": 203, "deletions": 38, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -227,8 +227,6 @@ static hashval_t t2r_hash (const void *);\n static void add_type_for_runtime (tree);\n static tree lookup_type_for_runtime (tree);\n \n-static void remove_unreachable_regions (rtx);\n-\n static int ttypes_filter_eq (const void *, const void *);\n static hashval_t ttypes_filter_hash (const void *);\n static int ehspec_filter_eq (const void *, const void *);\n@@ -622,69 +620,145 @@ collect_eh_region_array (void)\n     }\n }\n \n-/* Remove all regions whose labels are not reachable from insns.  */\n+/* R is MUST_NOT_THROW region that is not reachable via local\n+   RESX instructions.  It still must be kept in the tree in case runtime\n+   can unwind through it, or we will eliminate out terminate call\n+   runtime would do otherwise.  Return TRUE if R contains throwing statements\n+   or some of the exceptions in inner regions can be unwound up to R. \n+   \n+   CONTAINS_STMT is bitmap of all regions that contains some throwing\n+   statements.  \n+   \n+   Function looks O(^3) at first sight.  In fact the function is called at most\n+   once for every MUST_NOT_THROW in EH tree from remove_unreachable_regions\n+   Because the outer loop walking subregions does not dive in MUST_NOT_THROW,\n+   the outer loop examines every region at most once.  The inner loop\n+   is doing unwinding from the throwing statement same way as we do during\n+   CFG construction, so it is O(^2) in size of EH tree, but O(n) in size\n+   of CFG.  In practice Eh trees are wide, not deep, so this is not\n+   a problem.  */\n \n-static void\n-remove_unreachable_regions (rtx insns)\n+static bool\n+can_be_reached_by_runtime (sbitmap contains_stmt, struct eh_region *r)\n {\n-  int i, *uid_region_num;\n-  bool *reachable;\n-  struct eh_region *r;\n-  rtx insn;\n+  struct eh_region *i = r->inner;\n+  unsigned n;\n+  bitmap_iterator bi;\n \n-  uid_region_num = XCNEWVEC (int, get_max_uid ());\n-  reachable = XCNEWVEC (bool, cfun->eh->last_region_number + 1);\n-\n-  for (i = cfun->eh->last_region_number; i > 0; --i)\n+  if (TEST_BIT (contains_stmt, r->region_number))\n+    return true;\n+  if (r->aka)\n+    EXECUTE_IF_SET_IN_BITMAP (r->aka, 0, n, bi)\n+      if (TEST_BIT (contains_stmt, n))\n+      return true;\n+  if (!i)\n+    return false;\n+  while (1)\n     {\n-      r = VEC_index (eh_region, cfun->eh->region_array, i);\n-      if (!r || r->region_number != i)\n-\tcontinue;\n-\n-      if (r->resume)\n+      /* It is pointless to look into MUST_NOT_THROW\n+         or dive into subregions.  They never unwind up.  */\n+      if (i->type != ERT_MUST_NOT_THROW)\n \t{\n-\t  gcc_assert (!uid_region_num[INSN_UID (r->resume)]);\n-\t  uid_region_num[INSN_UID (r->resume)] = i;\n+\t  bool found = TEST_BIT (contains_stmt, i->region_number);\n+\t  if (!found)\n+\t    EXECUTE_IF_SET_IN_BITMAP (i->aka, 0, n, bi)\n+\t      if (TEST_BIT (contains_stmt, n))\n+\t      {\n+\t\tfound = true;\n+\t\tbreak;\n+\t      }\n+\t  /* We have nested region that contains throwing statement.\n+\t     See if resuming might lead up to the resx or we get locally\n+\t     caught sooner.  If we get locally caught sooner, we either\n+\t     know region R is not reachable or it would have direct edge\n+\t     from the EH resx and thus consider region reachable at\n+\t     firest place.  */\n+\t  if (found)\n+\t    {\n+\t      struct eh_region *i1 = i;\n+\t      tree type_thrown = NULL_TREE;\n+\n+\t      if (i1->type == ERT_THROW)\n+\t\t{\n+\t\t  type_thrown = i1->u.eh_throw.type;\n+\t\t  i1 = i1->outer;\n+\t\t}\n+\t      for (; i1 != r; i1 = i1->outer)\n+\t\tif (reachable_next_level (i1, type_thrown, NULL,\n+\t\t\t\t\t  false) >= RNL_CAUGHT)\n+\t\t  break;\n+\t      if (i1 == r)\n+\t\treturn true;\n+\t    }\n \t}\n-      if (r->label)\n+      /* If there are sub-regions, process them.  */\n+      if (i->type != ERT_MUST_NOT_THROW && i->inner)\n+\ti = i->inner;\n+      /* If there are peers, process them.  */\n+      else if (i->next_peer)\n+\ti = i->next_peer;\n+      /* Otherwise, step back up the tree to the next peer.  */\n+      else\n \t{\n-\t  gcc_assert (!uid_region_num[INSN_UID (r->label)]);\n-\t  uid_region_num[INSN_UID (r->label)] = i;\n+\t  do\n+\t    {\n+\t      i = i->outer;\n+\t      if (i == r)\n+\t\treturn false;\n+\t    }\n+\t  while (i->next_peer == NULL);\n+\t  i = i->next_peer;\n \t}\n     }\n+}\n \n-  for (insn = insns; insn; insn = NEXT_INSN (insn))\n-    reachable[uid_region_num[INSN_UID (insn)]] = true;\n+/* Remove all regions whose labels are not reachable.\n+   REACHABLE is bitmap of all regions that are used by the function\n+   CONTAINS_STMT is bitmap of all regions that contains stmt (or NULL). */\n+void\n+remove_unreachable_regions (sbitmap reachable, sbitmap contains_stmt)\n+{\n+  int i;\n+  struct eh_region *r;\n \n   for (i = cfun->eh->last_region_number; i > 0; --i)\n     {\n       r = VEC_index (eh_region, cfun->eh->region_array, i);\n-      if (r && r->region_number == i && !reachable[i])\n+      if (!r)\n+\tcontinue;\n+      if (r->region_number == i && !TEST_BIT (reachable, i) && !r->resume)\n \t{\n \t  bool kill_it = true;\n+\n+\t  r->tree_label = NULL;\n \t  switch (r->type)\n \t    {\n \t    case ERT_THROW:\n \t      /* Don't remove ERT_THROW regions if their outer region\n-\t\t is reachable.  */\n-\t      if (r->outer && reachable[r->outer->region_number])\n+\t         is reachable.  */\n+\t      if (r->outer && TEST_BIT (reachable, r->outer->region_number))\n \t\tkill_it = false;\n \t      break;\n-\n \t    case ERT_MUST_NOT_THROW:\n \t      /* MUST_NOT_THROW regions are implementable solely in the\n-\t\t runtime, but their existence continues to affect calls\n-\t\t within that region.  Never delete them here.  */\n-\t      kill_it = false;\n+\t         runtime, but we need them when inlining function.\n+\n+\t         Keep them if outer region is not MUST_NOT_THROW a well\n+\t         and if they contain some statement that might unwind through\n+\t         them.  */\n+\t      if ((!r->outer || r->outer->type != ERT_MUST_NOT_THROW)\n+\t\t  && (!contains_stmt\n+\t\t      || can_be_reached_by_runtime (contains_stmt, r)))\n+\t\tkill_it = false;\n \t      break;\n-\n \t    case ERT_TRY:\n \t      {\n \t\t/* TRY regions are reachable if any of its CATCH regions\n \t\t   are reachable.  */\n \t\tstruct eh_region *c;\n-\t\tfor (c = r->u.eh_try.eh_catch; c ; c = c->u.eh_catch.next_catch)\n-\t\t  if (reachable[c->region_number])\n+\t\tfor (c = r->u.eh_try.eh_catch; c;\n+\t\t     c = c->u.eh_catch.next_catch)\n+\t\t  if (TEST_BIT (reachable, c->region_number))\n \t\t    {\n \t\t      kill_it = false;\n \t\t      break;\n@@ -697,11 +771,91 @@ remove_unreachable_regions (rtx insns)\n \t    }\n \n \t  if (kill_it)\n-\t    remove_eh_handler (r);\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"Removing unreachable eh region %i\\n\",\n+\t\t\t r->region_number);\n+\t      remove_eh_handler (r);\n+\t    }\n \t}\n     }\n+#ifdef ENABLE_CHECKING\n+  verify_eh_tree (cfun);\n+#endif\n+}\n+\n+/* Return array mapping LABEL_DECL_UID to region such that region's tree_label\n+   is identical to label.  */\n+\n+VEC(int,heap) *\n+label_to_region_map (void)\n+{\n+  VEC(int,heap) * label_to_region = NULL;\n+  int i;\n+\n+  VEC_safe_grow_cleared (int, heap, label_to_region,\n+\t\t\t cfun->cfg->last_label_uid + 1);\n+  for (i = cfun->eh->last_region_number; i > 0; --i)\n+    {\n+      struct eh_region *r = VEC_index (eh_region, cfun->eh->region_array, i);\n+      if (r && r->tree_label && LABEL_DECL_UID (r->tree_label) >= 0)\n+\t{\n+\t  if ((unsigned) LABEL_DECL_UID (r->tree_label) >\n+\t      VEC_length (int, label_to_region))\n+\t      VEC_safe_grow_cleared (int, heap, label_to_region,\n+\t\t\t\t     LABEL_DECL_UID (r->tree_label));\n+\t  VEC_replace (int, label_to_region, LABEL_DECL_UID (r->tree_label),\n+\t\t       i);\n+\t}\n+    }\n+  return label_to_region;\n+}\n+\n+/* Return number of EH regions.  */\n+int\n+num_eh_regions (void)\n+{\n+  return cfun->eh->last_region_number + 1;\n+}\n+\n+/* Remove all regions whose labels are not reachable from insns.  */\n+\n+static void\n+rtl_remove_unreachable_regions (rtx insns)\n+{\n+  int i, *uid_region_num;\n+  sbitmap reachable;\n+  struct eh_region *r;\n+  rtx insn;\n+\n+  uid_region_num = XCNEWVEC (int, get_max_uid ());\n+  reachable = sbitmap_alloc (cfun->eh->last_region_number + 1);\n+  sbitmap_zero (reachable);\n \n-  free (reachable);\n+  for (i = cfun->eh->last_region_number; i > 0; --i)\n+    {\n+      r = VEC_index (eh_region, cfun->eh->region_array, i);\n+      if (!r || r->region_number != i)\n+\tcontinue;\n+\n+      if (r->resume)\n+\t{\n+\t  gcc_assert (!uid_region_num[INSN_UID (r->resume)]);\n+\t  uid_region_num[INSN_UID (r->resume)] = i;\n+\t}\n+      if (r->label)\n+\t{\n+\t  gcc_assert (!uid_region_num[INSN_UID (r->label)]);\n+\t  uid_region_num[INSN_UID (r->label)] = i;\n+\t}\n+    }\n+\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    SET_BIT (reachable, uid_region_num[INSN_UID (insn)]);\n+\n+  remove_unreachable_regions (reachable, NULL);\n+\n+  sbitmap_free (reachable);\n   free (uid_region_num);\n }\n \n@@ -726,7 +880,7 @@ convert_from_eh_region_ranges (void)\n \tregion->label = DECL_RTL_IF_SET (region->tree_label);\n     }\n \n-  remove_unreachable_regions (insns);\n+  rtl_remove_unreachable_regions (insns);\n }\n \n static void\n@@ -2324,6 +2478,17 @@ maybe_remove_eh_handler (rtx label)\n     remove_eh_handler (region);\n }\n \n+/* Remove Eh region R that has turned out to have no code in its handler.  */\n+\n+void\n+remove_eh_region (int r)\n+{\n+  struct eh_region *region;\n+\n+  region = VEC_index (eh_region, cfun->eh->region_array, r);\n+  remove_eh_handler (region);\n+}\n+\n /* Invokes CALLBACK for every exception handler label.  Only used by old\n    loop hackery; should not be used by new code.  */\n "}, {"sha": "e407ec2c7f80d45e0f05da207b5f34daaa572902", "filename": "gcc/except.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -19,6 +19,8 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+#include \"sbitmap.h\"\n+#include \"vecprim.h\"\n \n struct function;\n \n@@ -61,6 +63,7 @@ extern void init_eh_for_function (void);\n \n extern rtx reachable_handlers (rtx);\n extern void maybe_remove_eh_handler (rtx);\n+void remove_eh_region (int);\n \n extern void convert_from_eh_region_ranges (void);\n extern unsigned int convert_to_eh_region_ranges (void);\n@@ -174,3 +177,6 @@ struct throw_stmt_node GTY(())\n \n extern struct htab *get_eh_throw_stmt_table (struct function *);\n extern void set_eh_throw_stmt_table (struct function *, struct htab *);\n+extern void remove_unreachable_regions (sbitmap, sbitmap);\n+extern VEC(int,heap) * label_to_region_map (void);\n+extern int num_eh_regions (void);"}, {"sha": "41904a9ce6b58156614a90e24852e1d132934c28", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -562,6 +562,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_simple_dse);\n \t  NEXT_PASS (pass_tail_recursion);\n \t  NEXT_PASS (pass_convert_switch);\n+          NEXT_PASS (pass_cleanup_eh);\n           NEXT_PASS (pass_profile);\n           NEXT_PASS (pass_local_pure_const);\n \t}\n@@ -589,6 +590,7 @@ init_optimization_passes (void)\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n       NEXT_PASS (pass_strip_predict_hints);\n+      NEXT_PASS (pass_cleanup_eh);\n       NEXT_PASS (pass_update_address_taken);\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_complete_unrolli);\n@@ -686,6 +688,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_phi_only_cprop);\n       NEXT_PASS (pass_cd_dce);\n       NEXT_PASS (pass_tracer);\n+      NEXT_PASS (pass_cleanup_eh);\n \n       /* FIXME: If DCE is not run before checking for uninitialized uses,\n \t we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c)."}, {"sha": "20e62edbf05ef8b33b34f0f94f7ba73ec50fee70", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -2639,3 +2639,274 @@ struct gimple_opt_pass pass_refactor_eh =\n   TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };\n+\n+/* Walk statements, see what regions are really references and remove unreachable ones.  */\n+\n+static void\n+tree_remove_unreachable_handlers (void)\n+{\n+  sbitmap reachable, contains_stmt;\n+  VEC(int,heap) * label_to_region;\n+  basic_block bb;\n+\n+  label_to_region = label_to_region_map ();\n+  reachable = sbitmap_alloc (num_eh_regions ());\n+  sbitmap_zero (reachable);\n+  contains_stmt = sbitmap_alloc (num_eh_regions ());\n+  sbitmap_zero (contains_stmt);\n+\n+  FOR_EACH_BB (bb)\n+  {\n+    gimple_stmt_iterator gsi;\n+    int region;\n+    bool has_eh_preds = false;\n+    edge e;\n+    edge_iterator ei;\n+\n+    FOR_EACH_EDGE (e, ei, bb->preds) if (e->flags & EDGE_EH)\n+      has_eh_preds = true;\n+\n+    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgimple stmt = gsi_stmt (gsi);\n+\n+\tif (gimple_code (stmt) == GIMPLE_LABEL && has_eh_preds)\n+\t  {\n+\t    int uid = LABEL_DECL_UID (gimple_label_label (stmt));\n+\t    if (uid <= cfun->cfg->last_label_uid)\n+\t      {\n+\t\tint region = VEC_index (int, label_to_region, uid);\n+\t\tSET_BIT (reachable, region);\n+\t      }\n+\t  }\n+\tif (gimple_code (stmt) == RESX)\n+\t  SET_BIT (reachable, gimple_resx_region (stmt));\n+\tif ((region = lookup_stmt_eh_region (stmt)) >= 0)\n+\t  SET_BIT (contains_stmt, region);\n+      }\n+  }\n+\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"Before removal of unreachable regions:\\n\");\n+      dump_eh_tree (dump_file, cfun);\n+      fprintf (dump_file, \"Reachable regions: \");\n+      dump_sbitmap_file (dump_file, reachable);\n+      fprintf (dump_file, \"Regions containing insns: \");\n+      dump_sbitmap_file (dump_file, contains_stmt);\n+    }\n+\n+  remove_unreachable_regions (reachable, contains_stmt);\n+  sbitmap_free (reachable);\n+  sbitmap_free (contains_stmt);\n+  VEC_free (int, heap, label_to_region);\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"\\n\\nAfter removal of unreachable regions:\\n\");\n+      dump_eh_tree (dump_file, cfun);\n+      fprintf (dump_file, \"\\n\\n\");\n+    }\n+}\n+\n+/* Pattern match emtpy EH receiver looking like:\n+  \n+   save_filt.6352_662 = [filter_expr] <<<filter object>>>;\n+   save_eptr.6351_663 = [exc_ptr_expr] <<<exception object>>>;\n+   <<<exception object>>> = save_eptr.6351_663;\n+   <<<filter object>>> = save_filt.6352_662;\n+   resx 1\n+ */\n+\n+static int\n+tree_empty_eh_handler_p (basic_block bb)\n+{\n+  gimple_stmt_iterator gsi;\n+  int region;\n+\n+  gsi = gsi_last_bb (bb);\n+\n+  /* RESX  */\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) != GIMPLE_RESX)\n+    return 0;\n+  region = gimple_resx_region (gsi_stmt (gsi));\n+\n+  /* filter_object set.  */\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) != GIMPLE_ASSIGN)\n+    return 0;\n+  if (TREE_CODE (gimple_assign_lhs (gsi_stmt (gsi))) != FILTER_EXPR)\n+    return 0;\n+\n+  /* filter_object set.  */\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) != GIMPLE_ASSIGN)\n+    return 0;\n+  if (TREE_CODE (gimple_assign_lhs (gsi_stmt (gsi))) != EXC_PTR_EXPR)\n+    return 0;\n+\n+  /* filter_object get.  */\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) != GIMPLE_ASSIGN)\n+    return 0;\n+  if (TREE_CODE (gimple_assign_rhs1 (gsi_stmt (gsi))) != EXC_PTR_EXPR)\n+    return 0;\n+\n+  /* filter_object get.  */\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) != GIMPLE_ASSIGN)\n+    return 0;\n+  if (TREE_CODE (gimple_assign_rhs1 (gsi_stmt (gsi))) != FILTER_EXPR)\n+    return 0;\n+\n+  /* label.  */\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+  if (gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n+    return region;\n+  else\n+    return 0;\n+}\n+\n+static bool dominance_info_invalidated;\n+\n+/* Look for basic blocks containing empty exception handler and remove them.\n+   This is similar to jump forwarding, just across EH edges.  */\n+\n+static bool\n+cleanup_empty_eh (basic_block bb)\n+{\n+  int region;\n+\n+  /* When handler of EH region winds up to be empty, we can safely\n+     remove it.  This leads to inner EH regions to be redirected\n+     to outer one, if present in function. So we need to rebuild\n+     EH edges in all sources.   */\n+  if ((region = tree_empty_eh_handler_p (bb)))\n+    {\n+      edge_iterator ei;\n+      edge e;\n+      gimple_stmt_iterator si;\n+\n+      remove_eh_region (region);\n+\n+      /* It is safe to mark symbol for renaming because we have abnormal PHI\n+         here.  Once EH edges are made redirectable we might need to add here\n+         similar updating as jump threading does.  */\n+\n+      for (si = gsi_start_phis (bb); !gsi_end_p (si); gsi_next (&si))\n+\tmark_sym_for_renaming (SSA_NAME_VAR (PHI_RESULT (gsi_stmt (si))));\n+\n+      while ((e = ei_safe_edge (ei_start (bb->preds))))\n+\t{\n+\t  basic_block src = e->src;\n+\t  gcc_assert (e->flags & EDGE_EH);\n+\t  for (ei = ei_start (src->succs); (e = ei_safe_edge (ei));)\n+\t    {\n+\t      if (e->flags & EDGE_EH)\n+\t\t{\n+\t\t  remove_edge (e);\n+\t\t  dominance_info_invalidated = true;\n+\t\t}\n+\t      else\n+\t\tei_next (&ei);\n+\t    }\n+\t  if (!stmt_can_throw_internal (last_stmt (src)))\n+\t    continue;\n+\t  make_eh_edges (last_stmt (src));\n+\t  FOR_EACH_EDGE (e, ei, src->succs) if (e->flags & EDGE_EH)\n+\t    {\n+\t      dominance_info_invalidated = true;\n+\t      for (si = gsi_start_phis (e->dest); !gsi_end_p (si);\n+\t\t   gsi_next (&si))\n+\t\tmark_sym_for_renaming (SSA_NAME_VAR\n+\t\t\t\t       (PHI_RESULT (gsi_stmt (si))));\n+\t    }\n+\t}\n+      if (dump_file)\n+\tfprintf (dump_file, \"Empty EH handler %i removed\\n\", region);\n+      delete_basic_block (bb);\n+      return true;\n+    }\n+  return false;\n+}\n+\n+\n+/* Perform cleanups and lowering of exception handling\n+    1) cleanups regions with handlers doing nothing are optimized out\n+    2) MUST_NOT_THROW regions that became dead because of 1) are optimized out\n+    3) Info about regions that are containing instructions, and regions\n+       reachable via local EH edges is collected\n+    4) Eh tree is pruned for regions no longer neccesary.\n+ */\n+\n+static unsigned int\n+cleanup_eh (void)\n+{\n+  bool changed = false;\n+  basic_block bb;\n+  int i;\n+\n+  if (!cfun->eh)\n+    return 0;\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"Before cleanups:\\n\");\n+      dump_eh_tree (dump_file, cfun);\n+    }\n+\n+  dominance_info_invalidated = false;\n+  /* We cannot use FOR_EACH_BB, since the basic blocks may get removed.  */\n+  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n+    {\n+      bb = BASIC_BLOCK (i);\n+      if (bb)\n+\tchanged |= cleanup_empty_eh (bb);\n+    }\n+  if (dominance_info_invalidated)\n+    {\n+      free_dominance_info (CDI_DOMINATORS);\n+      free_dominance_info (CDI_POST_DOMINATORS);\n+    }\n+\n+  /* Removing contained cleanup can render MUST_NOT_THROW regions empty.  */\n+  if (changed)\n+    delete_unreachable_blocks ();\n+\n+  tree_remove_unreachable_handlers ();\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"After cleanups:\\n\");\n+      dump_eh_tree (dump_file, cfun);\n+    }\n+\n+  return (changed ? TODO_cleanup_cfg | TODO_update_ssa : 0);\n+}\n+\n+struct gimple_opt_pass pass_cleanup_eh = {\n+  {\n+   GIMPLE_PASS,\n+   \"ehcleanup\",\t\t\t/* name */\n+   NULL,\t\t\t/* gate */\n+   cleanup_eh,\t\t\t/* execute */\n+   NULL,\t\t\t/* sub */\n+   NULL,\t\t\t/* next */\n+   0,\t\t\t\t/* static_pass_number */\n+   TV_TREE_EH,\t\t\t/* tv_id */\n+   PROP_gimple_lcf,\t\t/* properties_required */\n+   0,\t\t\t\t/* properties_provided */\n+   0,\t\t\t\t/* properties_destroyed */\n+   0,\t\t\t\t/* todo_flags_start */\n+   TODO_dump_func\t\t/* todo_flags_finish */\n+   }\n+};"}, {"sha": "77896725ae3f8d78c0c1eea7ff5ccfa5804e1c09", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8da523f8a442f95c34dd3687771589579a08918/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=a8da523f8a442f95c34dd3687771589579a08918", "patch": "@@ -309,6 +309,7 @@ extern struct gimple_opt_pass pass_tree_profile;\n extern struct gimple_opt_pass pass_early_tree_profile;\n extern struct gimple_opt_pass pass_cleanup_cfg;\n extern struct gimple_opt_pass pass_referenced_vars;\n+extern struct gimple_opt_pass pass_cleanup_eh;\n extern struct gimple_opt_pass pass_fixup_cfg;\n extern struct gimple_opt_pass pass_sra;\n extern struct gimple_opt_pass pass_sra_early;"}]}