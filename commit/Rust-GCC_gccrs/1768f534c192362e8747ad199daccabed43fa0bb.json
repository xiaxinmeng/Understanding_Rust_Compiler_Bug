{"sha": "1768f534c192362e8747ad199daccabed43fa0bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2OGY1MzRjMTkyMzYyZTg3NDdhZDE5OWRhY2NhYmVkNDNmYTBiYg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-21T06:47:03Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-21T06:47:03Z"}, "message": "Fix discrepancy in Walloca test on 32-bit systems.\n\nThere is a discrepancy in the way we report -Walloca-larger-than=\nerrors on 32-bit versus 64-bit architectures, due to the nature of\nranges derived from a cast operation.\n\nFor the Walloca-1 tests on 64-bits we get:\n\n  int num.0_1;\n  long unsigned int _2;\n\n  <bb 2> [local count: 1073741824]:\n  num.0_1 = num;\n  _2 = (long unsigned int) num.0_1;\n  s_8 = __builtin_alloca (_2);\n\nBecause of the cast of a 32-bit quantity into a 64-bit quantity in _2,\nranger calculates its range as:\n\n\tlong unsigned int [0, 2147483647][18446744071562067968, +INF]\n\nThus excluding the numbers that can't exist in _2.\n\nThis causes the Walloca pass to report that the argument to alloca may be\ntoo large.\n\nHowever, for -m32 on x86, the gimple is:\n\n  int num.0_1;\n  unsigned int num.1_2;\n\n  <bb 2> [local count: 1073741824]:\n  num.0_1 = num;\n  num.1_2 = (unsigned int) num.0_1;\n  s_8 = __builtin_alloca (num.1_2);\n\nSince num.0_1 and num.1_2 are of the same size, we cannot determine\nany useful range, so we return VARYING.  In the Walloca pass, VARYING\nbasically means \"unbounded\" (no known bounds for the alloca call argument).\nSo on 32-bits, the error message issued is slightly different:\n\n\twarning: unbounded use of \u2018alloca\u2019\n\nversus on 64-bits, where due to the cast, it is:\n\n\twarning: argument to \u2018alloca\u2019 may be too large\n\nIn reality both versions of the IL show an unbounded call, but in one\nversion (64-bits) we can exclude some values so we assume the range\nwas provided, but it was out of bounds.\n\nI've mentioned various times that all these diagnostics passes\n(alloca, restrict, printf, etc), could benefit from less specific error\nmessages since what we have can potentially confuse the user.  However,\nno consensus has been reached on how to report these things.\n\nIn the meantime, this patch adjusts the testcase to accept both variants.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Walloca-1.c: Adjust for 32-bits.", "tree": {"sha": "7381f72862ba35a0f6e666fd23e30a023ca9d9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7381f72862ba35a0f6e666fd23e30a023ca9d9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1768f534c192362e8747ad199daccabed43fa0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1768f534c192362e8747ad199daccabed43fa0bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1768f534c192362e8747ad199daccabed43fa0bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1768f534c192362e8747ad199daccabed43fa0bb/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e04288542667307df925f7d0a4b0fa2030f741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e04288542667307df925f7d0a4b0fa2030f741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e04288542667307df925f7d0a4b0fa2030f741"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "37ee1912187717ce3e1440cef4bf200b6af29949", "filename": "gcc/testsuite/gcc.dg/Walloca-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1768f534c192362e8747ad199daccabed43fa0bb/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1768f534c192362e8747ad199daccabed43fa0bb/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c?ref=1768f534c192362e8747ad199daccabed43fa0bb", "patch": "@@ -24,7 +24,7 @@ void foo1 (size_t len, size_t len2, size_t len3)\n   char *s = alloca (123);\n   useit (s);\t\t\t// OK, constant argument to alloca\n \n-  s = alloca (num);\t\t// { dg-warning \"may be too large\" }\n+  s = alloca (num);\t\t// { dg-warning \"\\(may be too large|unbounded use\\)\" }\n   useit (s);\n \n   s = alloca (30000);\t\t/* { dg-warning \"is too large\" } */"}]}