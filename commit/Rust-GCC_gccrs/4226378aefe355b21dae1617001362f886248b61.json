{"sha": "4226378aefe355b21dae1617001362f886248b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyNjM3OGFlZmUzNTViMjFkYWUxNjE3MDAxMzYyZjg4NjI0OGI2MQ==", "commit": {"author": {"name": "Paul Koning", "email": "pkoning@equallogic.com", "date": "2002-08-30T19:18:51Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2002-08-30T19:18:51Z"}, "message": "c-tree.texi (RDIV_EXPR): Fix typo.\n\n\t* doc/c-tree.texi (RDIV_EXPR): Fix typo.\n\t* doc/rtl.texi (post_modify): Remove misplaced text, remove \"not\n\timplemented\" note.\n\t* doc/md.texi (IP2K): Move machine-specific constraints before MIPS\n\tfor alphabetic order.\n\t* doc/tm.texi (TARGET_FLOAT_FORMAT): Update description for\n\tVAX_FLOAT_FORMAT.  Remove reference to HOST_FLOAT_FORMAT.\n\t(VAX_HALFWORD_ORDER): Document.\n\t(LARGEST_EXPONENT_IS_NORMAL): Remove note about being only for\n\tIEEE float format.\n\t(TARGET_SCHED_ISSUE_RATE): Reword reference to MAX_DFA_ISSUE_RATE.\n\t(ASM_OUTPUT_LABEL_REF): Fix font.\n\t(CASE_VECTOR_SHORTEN_MODE): Ditto.\n\nFrom-SVN: r56687", "tree": {"sha": "710e5e1ffba1986bcaf31e3064b6c4aef3b2ac0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710e5e1ffba1986bcaf31e3064b6c4aef3b2ac0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4226378aefe355b21dae1617001362f886248b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4226378aefe355b21dae1617001362f886248b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4226378aefe355b21dae1617001362f886248b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4226378aefe355b21dae1617001362f886248b61/comments", "author": null, "committer": null, "parents": [{"sha": "b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8074dbe8abf279b6bf0422718b630e91ea6c9c9"}], "stats": {"total": 179, "additions": 98, "deletions": 81}, "files": [{"sha": "c1f50dcdfbffedfb505dafff23e4d08cf6f3ea39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4226378aefe355b21dae1617001362f886248b61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4226378aefe355b21dae1617001362f886248b61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4226378aefe355b21dae1617001362f886248b61", "patch": "@@ -1,3 +1,19 @@\n+2002-08-30  Paul Koning <pkoning@equallogic.com>\n+\n+\t* doc/c-tree.texi (RDIV_EXPR): Fix typo.\n+\t* doc/rtl.texi (post_modify): Remove misplaced text, remove \"not\n+\timplemented\" note.\n+\t* doc/md.texi (IP2K): Move machine-specific constraints before MIPS\n+\tfor alphabetic order.\n+\t* doc/tm.texi (TARGET_FLOAT_FORMAT): Update description for\n+\tVAX_FLOAT_FORMAT.  Remove reference to HOST_FLOAT_FORMAT.\n+\t(VAX_HALFWORD_ORDER): Document.\n+\t(LARGEST_EXPONENT_IS_NORMAL): Remove note about being only for\n+\tIEEE float format.\n+\t(TARGET_SCHED_ISSUE_RATE): Reword reference to MAX_DFA_ISSUE_RATE.\n+\t(ASM_OUTPUT_LABEL_REF): Fix font.\n+\t(CASE_VECTOR_SHORTEN_MODE): Ditto.\n+\n 2002-08-30  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/ip2k/ip2k.c (ip2k_set_compare): Remove all const_double"}, {"sha": "16927fca7e2ab08de6287852be807aefcb7530b4", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=4226378aefe355b21dae1617001362f886248b61", "patch": "@@ -2063,7 +2063,7 @@ integral type.\n \n The result of a @code{TRUNC_DIV_EXPR} is always rounded towards zero.\n The @code{TRUNC_MOD_EXPR} of two operands @code{a} and @code{b} is\n-always @code{a - a/b} where the division is as if computed by a\n+always @code{a - (a/b)*b} where the division is as if computed by a\n @code{TRUNC_DIV_EXPR}.\n \n @item ARRAY_REF"}, {"sha": "b54105b3ef2112fbf4dac6d68309cda067582f9e", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=4226378aefe355b21dae1617001362f886248b61", "patch": "@@ -1744,70 +1744,6 @@ Integer constant in the range 1 to 4 for @code{shladd} instruction\n Memory operand except postincrement and postdecrement\n @end table\n \n-@item MIPS---@file{mips.h}\n-@table @code\n-@item d\n-General-purpose integer register\n-\n-@item f\n-Floating-point register (if available)\n-\n-@item h\n-@samp{Hi} register\n-\n-@item l\n-@samp{Lo} register\n-\n-@item x\n-@samp{Hi} or @samp{Lo} register\n-\n-@item y\n-General-purpose integer register\n-\n-@item z\n-Floating-point status register\n-\n-@item I\n-Signed 16-bit constant (for arithmetic instructions)\n-\n-@item J\n-Zero\n-\n-@item K\n-Zero-extended 16-bit constant (for logic instructions)\n-\n-@item L\n-Constant with low 16 bits zero (can be loaded with @code{lui})\n-\n-@item M\n-32-bit constant which requires two instructions to load (a constant\n-which is not @samp{I}, @samp{K}, or @samp{L})\n-\n-@item N\n-Negative 16-bit constant\n-\n-@item O\n-Exact power of two\n-\n-@item P\n-Positive 16-bit constant\n-\n-@item G\n-Floating point zero\n-\n-@item Q\n-Memory reference that can be loaded with more than one instruction\n-(@samp{m} is preferable for @code{asm} statements)\n-\n-@item R\n-Memory reference that can be loaded with one instruction\n-(@samp{m} is preferable for @code{asm} statements)\n-\n-@item S\n-Memory reference in external OSF/rose PIC format\n-(@samp{m} is preferable for @code{asm} statements)\n-@end table\n-\n @item IP2K---@file{ip2k.h}\n @table @code\n @item a\n@@ -1878,6 +1814,70 @@ Zero\n Integers from 0 to 255\n @end table\n \n+@item MIPS---@file{mips.h}\n+@table @code\n+@item d\n+General-purpose integer register\n+\n+@item f\n+Floating-point register (if available)\n+\n+@item h\n+@samp{Hi} register\n+\n+@item l\n+@samp{Lo} register\n+\n+@item x\n+@samp{Hi} or @samp{Lo} register\n+\n+@item y\n+General-purpose integer register\n+\n+@item z\n+Floating-point status register\n+\n+@item I\n+Signed 16-bit constant (for arithmetic instructions)\n+\n+@item J\n+Zero\n+\n+@item K\n+Zero-extended 16-bit constant (for logic instructions)\n+\n+@item L\n+Constant with low 16 bits zero (can be loaded with @code{lui})\n+\n+@item M\n+32-bit constant which requires two instructions to load (a constant\n+which is not @samp{I}, @samp{K}, or @samp{L})\n+\n+@item N\n+Negative 16-bit constant\n+\n+@item O\n+Exact power of two\n+\n+@item P\n+Positive 16-bit constant\n+\n+@item G\n+Floating point zero\n+\n+@item Q\n+Memory reference that can be loaded with more than one instruction\n+(@samp{m} is preferable for @code{asm} statements)\n+\n+@item R\n+Memory reference that can be loaded with one instruction\n+(@samp{m} is preferable for @code{asm} statements)\n+\n+@item S\n+Memory reference in external OSF/rose PIC format\n+(@samp{m} is preferable for @code{asm} statements)\n+@end table\n+\n @item Motorola 680x0---@file{m68k.h}\n @table @code\n @item a"}, {"sha": "99ad12c99ca302e33f2637f0477b8f11c659f29a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=4226378aefe355b21dae1617001362f886248b61", "patch": "@@ -2577,9 +2577,6 @@ Represents the side effect of setting @var{x} to @var{y} and\n represents @var{x} before @var{x} is modified.  @var{x} must be a\n @code{reg} or @code{mem}, but most machines allow only a @code{reg}.\n @var{m} must be the machine mode for pointers on the machine in use.\n-The amount @var{x} is decremented by is the length in bytes of the\n-machine mode of the containing memory reference of which this expression\n-serves as the address.  Note that this is not currently implemented.\n \n The expression @var{y} must be one of three forms:\n @table @code"}, {"sha": "be3f9b475b7ad528508eb3b01a91193fd78abf8d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4226378aefe355b21dae1617001362f886248b61/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4226378aefe355b21dae1617001362f886248b61", "patch": "@@ -1320,7 +1320,8 @@ need to define this macro when the format is IEEE@.\n \n @findex VAX_FLOAT_FORMAT\n @item VAX_FLOAT_FORMAT\n-This code indicates the ``D float'' format used on the VAX@.\n+This code indicates the ``F float'' (for @code{float}) and ``D float''\n+or ``G float'' formats (for @code{double}) used on the VAX and PDP-11@.\n \n @findex IBM_FLOAT_FORMAT\n @item IBM_FLOAT_FORMAT\n@@ -1335,15 +1336,20 @@ This code indicates the format used on the TMS320C3x/C4x.\n This code indicates any other format.\n @end table\n \n-The value of this macro is compared with @code{HOST_FLOAT_FORMAT}, which\n-is defined by the @command{configure} script, to determine whether the\n-target machine has the same format as the host machine.  If any other\n+If any other\n formats are actually in use on supported machines, new codes should be\n defined for them.\n \n The ordering of the component words of floating point values stored in\n memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN}.\n \n+@findex VAX_HALFWORD_ORDER\n+@item VAX_HALFWORD_ORDER\n+This macro is only used if @code{TARGET_FLOAT_FORMAT} is\n+@code{VAX_FLOAT_FORMAT}.  If defaulted or defined as 1, the halfwords of\n+the generated floating point data are in the order used by the VAX.  If\n+defined as 0, they are reversed, which is used by the PDP-11 target.\n+\n @findex MODE_HAS_NANS\n @item MODE_HAS_NANS (@var{mode})\n When defined, this macro should be true if @var{mode} has a NaN\n@@ -1422,8 +1428,7 @@ Not defining this macro is equivalent to returning zero.\n \n @findex LARGEST_EXPONENT_IS_NORMAL\n @item LARGEST_EXPONENT_IS_NORMAL (@var{size})\n-This macro should only be defined when the target float format is\n-described as IEEE@.  It should return true if floats with @var{size}\n+This macro should return true if floats with @var{size}\n bits do not have a NaN or infinity representation, but use the largest\n exponent for normal numbers instead.\n \n@@ -5467,9 +5472,8 @@ This value must be constant over the entire compilation.  If you need\n it to vary depending on what the instructions are, you must use\n @samp{TARGET_SCHED_VARIABLE_ISSUE}.\n \n-You could use the value of macro @samp{MAX_DFA_ISSUE_RATE} to return\n-the value of the hook @samp{TARGET_SCHED_ISSUE_RATE} for the automaton\n-based pipeline interface.\n+For the automaton based pipeline interface, you could define this hook\n+to return the value of the macro @code{MAX_DFA_ISSUE_RATE}.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_SCHED_VARIABLE_ISSUE (FILE *@var{file}, int @var{verbose}, rtx @var{insn}, int @var{more})\n@@ -6688,12 +6692,12 @@ encoded by @code{TARGET_ENCODE_SECTION_INFO}.\n @findex ASM_OUTPUT_LABEL_REF\n @item ASM_OUTPUT_LABEL_REF (@var{stream}, @var{buf})\n A C statement (sans semicolon) to output a reference to @var{buf}, the\n-result of ASM_GENERATE_INTERNAL_LABEL.  If not defined,\n+result of @code{ASM_GENERATE_INTERNAL_LABEL}.  If not defined,\n @code{assemble_name} will be used to output the name of the symbol.\n This macro is not used by @code{output_asm_label}, or the @code{%l}\n specifier that calls it; the intention is that this macro should be set\n-when it is necessary to output a label differently when its address\n-is being taken.\n+when it is necessary to output a label differently when its address is\n+being taken.\n \n @findex ASM_OUTPUT_INTERNAL_LABEL\n @item ASM_OUTPUT_INTERNAL_LABEL (@var{stream}, @var{prefix}, @var{num})\n@@ -8439,7 +8443,7 @@ elements of a jump-table should have.\n Optional: return the preferred mode for an @code{addr_diff_vec}\n when the minimum and maximum offset are known.  If you define this,\n it enables extra code in branch shortening to deal with @code{addr_diff_vec}.\n-To make this work, you also have to define INSN_ALIGN and\n+To make this work, you also have to define @code{INSN_ALIGN} and\n make the alignment for @code{addr_diff_vec} explicit.\n The @var{body} argument is provided so that the offset_unsigned and scale\n flags can be updated."}]}