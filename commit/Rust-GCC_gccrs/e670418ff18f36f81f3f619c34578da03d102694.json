{"sha": "e670418ff18f36f81f3f619c34578da03d102694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3MDQxOGZmMThmMzZmODFmM2Y2MTljMzQ1NzhkYTAzZDEwMjY5NA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T16:27:45Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T16:27:45Z"}, "message": "rs6000: wi->wa, wt->wa\n\n\"wi\" and \"wt\" mean just the same as \"wa\" these days.  Change them to\nthe simpler name.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wi\"):\n\tDelete.\n\t(define_register_constraint \"wt\"): Delete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wi and RS6000_CONSTRAINT_wt.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271914", "tree": {"sha": "621c6bf80d8a3bc92c2810b2bff366b02838935d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/621c6bf80d8a3bc92c2810b2bff366b02838935d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e670418ff18f36f81f3f619c34578da03d102694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670418ff18f36f81f3f619c34578da03d102694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e670418ff18f36f81f3f619c34578da03d102694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670418ff18f36f81f3f619c34578da03d102694/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8c470690a80a39b11255ca192694848857ee0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c470690a80a39b11255ca192694848857ee0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c470690a80a39b11255ca192694848857ee0c8"}], "stats": {"total": 135, "additions": 62, "deletions": 73}, "files": [{"sha": "b2c7bae6c312996f10f52dc84ae9d0c8a7068de7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -1,3 +1,16 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wi\"):\n+\tDelete.\n+\t(define_register_constraint \"wt\"): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wi and RS6000_CONSTRAINT_wt.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_asm_output_external): Remove"}, {"sha": "edf825d8557fbd521344b7b274b5583c4577de7d", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -68,9 +68,6 @@\n (define_register_constraint \"wf\" \"rs6000_constraints[RS6000_CONSTRAINT_wf]\"\n   \"VSX vector register to hold vector float data or NO_REGS.\")\n \n-(define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n-  \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n-\n ;; NO_REGs register constraint, used to merge mov{sd,sf}, since movsd can use\n ;; direct move directly, and movsf can't to move between the register sets.\n ;; There is a mode_attr that resolves to wa for SDmode and wn for SFmode\n@@ -88,9 +85,6 @@\n (define_register_constraint \"ws\" \"rs6000_constraints[RS6000_CONSTRAINT_ws]\"\n   \"VSX vector register to hold scalar double values or NO_REGS.\")\n \n-(define_register_constraint \"wt\" \"rs6000_constraints[RS6000_CONSTRAINT_wt]\"\n-  \"VSX vector register to hold 128 bit integer or NO_REGS.\")\n-\n (define_register_constraint \"wv\" \"rs6000_constraints[RS6000_CONSTRAINT_wv]\"\n   \"Altivec register to use for double loads/stores  or NO_REGS.\")\n "}, {"sha": "0d2c2e17f4d1b9df8668ec91b66463366b87a085", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -2511,12 +2511,10 @@ rs6000_debug_reg_global (void)\n \t   \"wd reg_class = %s\\n\"\n \t   \"we reg_class = %s\\n\"\n \t   \"wf reg_class = %s\\n\"\n-\t   \"wi reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n \t   \"ws reg_class = %s\\n\"\n-\t   \"wt reg_class = %s\\n\"\n \t   \"wv reg_class = %s\\n\"\n \t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n@@ -2529,12 +2527,10 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wd]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ws]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wt]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wv]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n@@ -3148,11 +3144,9 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twc - Reserved to represent individual CR bits (used in LLVM).\n \twd - Preferred register class for V2DFmode.\n \twf - Preferred register class for V4SFmode.\n-\twi - FP or VSX register to hold 64-bit integers for VSX insns.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n \tws - Register class to do ISA 2.06 DF operations.\n-\twt - VSX register for TImode in VSX registers.\n \twv - Altivec register for ISA 2.06 VSX DF/DI load/stores.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.  */\n@@ -3170,8 +3164,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\t/* DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wv] = ALTIVEC_REGS;\t/* DFmode  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wi] = VSX_REGS;\t/* DImode  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wt] = VSX_REGS;\t/* TImode  */\n     }\n \n   /* Add conditional constraints based on various options, to allow us to"}, {"sha": "6cfb0adf22dc857f7906a8d0c73081b4e920f2b3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -1259,12 +1259,10 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wd,\t\t/* VSX register for V2DF */\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n-  RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n   RS6000_CONSTRAINT_ws,\t\t/* VSX register for DF */\n-  RS6000_CONSTRAINT_wt,\t\t/* VSX register for TImode */\n   RS6000_CONSTRAINT_wv,\t\t/* Altivec register for double load/stores.  */\n   RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */"}, {"sha": "07c27a12d6039b706eb5b4a4d0d388852d65408b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -526,12 +526,12 @@\n ; ISA 2.06 (power7).  This includes instructions that normally target DF mode,\n ; but are used on SFmode, since internally SFmode values are kept in the DFmode\n ; format.\n-(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"ws\") (DI \"wi\")])\n+(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"ws\") (DI \"wa\")])\n \n ; SF/DF constraint for arithmetic on VSX registers.  This is intended to be\n ; used for DFmode instructions added in ISA 2.06 (power7) and SFmode\n ; instructions added in ISA 2.07 (power8)\n-(define_mode_attr Fv2\t\t[(SF \"wa\") (DF \"ws\") (DI \"wi\")])\n+(define_mode_attr Fv2\t\t[(SF \"wa\") (DF \"ws\") (DI \"wa\")])\n \n ; Which isa is needed for those float instructions?\n (define_mode_attr Fisa\t\t[(SF \"p8v\")  (DF \"*\") (DI \"*\")])\n@@ -656,7 +656,7 @@\n ;; either.\n \n ;; Mode attribute for boolean operation register constraints for output\n-(define_mode_attr BOOL_REGS_OUTPUT\t[(TI\t\"&r,r,r,wt,v\")\n+(define_mode_attr BOOL_REGS_OUTPUT\t[(TI\t\"&r,r,r,wa,v\")\n \t\t\t\t\t (PTI\t\"&r,r,r\")\n \t\t\t\t\t (V16QI\t\"wa,v,&?r,?r,?r\")\n \t\t\t\t\t (V8HI\t\"wa,v,&?r,?r,?r\")\n@@ -667,7 +667,7 @@\n \t\t\t\t\t (V1TI\t\"wa,v,&?r,?r,?r\")])\n \n ;; Mode attribute for boolean operation register constraints for operand1\n-(define_mode_attr BOOL_REGS_OP1\t\t[(TI\t\"r,0,r,wt,v\")\n+(define_mode_attr BOOL_REGS_OP1\t\t[(TI\t\"r,0,r,wa,v\")\n \t\t\t\t\t (PTI\t\"r,0,r\")\n \t\t\t\t\t (V16QI\t\"wa,v,r,0,r\")\n \t\t\t\t\t (V8HI\t\"wa,v,r,0,r\")\n@@ -678,7 +678,7 @@\n \t\t\t\t\t (V1TI\t\"wa,v,r,0,r\")])\n \n ;; Mode attribute for boolean operation register constraints for operand2\n-(define_mode_attr BOOL_REGS_OP2\t\t[(TI\t\"r,r,0,wt,v\")\n+(define_mode_attr BOOL_REGS_OP2\t\t[(TI\t\"r,r,0,wa,v\")\n \t\t\t\t\t (PTI\t\"r,r,0\")\n \t\t\t\t\t (V16QI\t\"wa,v,r,r,0\")\n \t\t\t\t\t (V8HI\t\"wa,v,r,r,0\")\n@@ -691,7 +691,7 @@\n ;; Mode attribute for boolean operation register constraints for operand1\n ;; for one_cmpl.  To simplify things, we repeat the constraint where 0\n ;; is used for operand1 or operand2\n-(define_mode_attr BOOL_REGS_UNARY\t[(TI\t\"r,0,0,wt,v\")\n+(define_mode_attr BOOL_REGS_UNARY\t[(TI\t\"r,0,0,wa,v\")\n \t\t\t\t\t (PTI\t\"r,0,0\")\n \t\t\t\t\t (V16QI\t\"wa,v,r,0,0\")\n \t\t\t\t\t (V8HI\t\"wa,v,r,0,0\")\n@@ -835,7 +835,7 @@\n \n \n (define_insn \"zero_extendsi<mode>2\"\n-  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,d,wa,wi,r,wa\")\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,d,wa,wa,r,wa\")\n \t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wa,wa\")))]\n   \"\"\n   \"@\n@@ -1020,7 +1020,7 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   d,     wa,    wi,    v,      v,     wr\")\n+\t\t     \"=r, r,   d,     wa,    wa,    v,      v,     wr\")\n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n \t\t     \"YZ, r,   Z,     Z,     r,     v,      v,     ?wa\")))]\n   \"\"\n@@ -5234,7 +5234,7 @@\n ; We don't define lfiwax/lfiwzx with the normal definition, because we\n ; don't want to support putting SImode in FPR registers.\n (define_insn \"lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,wi,v\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa,wa,v\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,v\")]\n \t\t   UNSPEC_LFIWAX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX\"\n@@ -5254,7 +5254,7 @@\n (define_insn_and_split \"floatsi<mode>2_lfiwax\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Fv>\")\n \t(float:SFDF (match_operand:SI 1 \"nonimmediate_operand\" \"r\")))\n-   (clobber (match_scratch:DI 2 \"=wi\"))]\n+   (clobber (match_scratch:DI 2 \"=wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX\n    && <SI_CONVERT_FP> && can_create_pseudo_p ()\"\n   \"#\"\n@@ -5295,7 +5295,7 @@\n \t(float:SFDF\n \t (sign_extend:DI\n \t  (match_operand:SI 1 \"indexed_or_indirect_operand\" \"Z\"))))\n-   (clobber (match_scratch:DI 2 \"=wi\"))]\n+   (clobber (match_scratch:DI 2 \"=wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX && <SI_CONVERT_FP>\"\n   \"#\"\n   \"\"\n@@ -5315,7 +5315,7 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_insn \"lfiwzx\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,wi,wa\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa,wa,wa\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wa\")]\n \t\t   UNSPEC_LFIWZX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX\"\n@@ -5330,7 +5330,7 @@\n (define_insn_and_split \"floatunssi<mode>2_lfiwzx\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Fv>\")\n \t(unsigned_float:SFDF (match_operand:SI 1 \"nonimmediate_operand\" \"r\")))\n-   (clobber (match_scratch:DI 2 \"=wi\"))]\n+   (clobber (match_scratch:DI 2 \"=wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX && <SI_CONVERT_FP>\"\n   \"#\"\n   \"\"\n@@ -5370,7 +5370,7 @@\n \t(unsigned_float:SFDF\n \t (zero_extend:DI\n \t  (match_operand:SI 1 \"indexed_or_indirect_operand\" \"Z\"))))\n-   (clobber (match_scratch:DI 2 \"=wi\"))]\n+   (clobber (match_scratch:DI 2 \"=wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX && <SI_CONVERT_FP>\"\n   \"#\"\n   \"\"\n@@ -5569,7 +5569,7 @@\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(float:FP_ISA3\n \t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"v,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=v,wi,v\"))\n+   (clobber (match_scratch:DI 2 \"=v,wa,v\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))\n    (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,v\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n@@ -5622,7 +5622,7 @@\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(unsigned_float:FP_ISA3\n \t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"v,r,Z\")))\n-   (clobber (match_scratch:DI 2 \"=v,wi,wa\"))\n+   (clobber (match_scratch:DI 2 \"=v,wa,wa\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n@@ -5748,7 +5748,7 @@\n   \"\")\n \n (define_insn \"*fix_trunc<mode>di2_fctidz\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(fix:DI (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFID\"\n   \"@\n@@ -5765,7 +5765,7 @@\n (define_insn_and_split \"fix<uns>_trunc<SFDF:mode><QHI:mode>2\"\n   [(set (match_operand:<QHI:MODE> 0 \"gpc_reg_operand\" \"=d,wa,r\")\n \t(any_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d,wa,wa\")))\n-   (clobber (match_scratch:SI 2 \"=X,X,wi\"))]\n+   (clobber (match_scratch:SI 2 \"=X,X,wa\"))]\n   \"TARGET_DIRECT_MOVE\"\n   \"@\n    fctiw<u>z %0,%1\n@@ -5867,7 +5867,7 @@\n    (set_attr \"type\" \"fp\")])\n \n (define_insn \"fixuns_trunc<mode>di2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(unsigned_fix:DI (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCTIDUZ\"\n   \"@\n@@ -6002,7 +6002,7 @@\n ;; because the first makes it clear that operand 0 is not live\n ;; before the instruction.\n (define_insn \"fctiwz_<mode>\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(unspec:DI [(fix:SI\n \t\t     (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\"))]\n \t\t   UNSPEC_FCTIWZ))]\n@@ -6013,7 +6013,7 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fctiwuz_<mode>\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(unspec:DI [(unsigned_fix:SI\n \t\t     (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\"))]\n \t\t   UNSPEC_FCTIWUZ))]\n@@ -6224,7 +6224,7 @@\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n-\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n+\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_FCFID && TARGET_HARD_FLOAT\"\n   \"@\n    fcfid %0,%1\n@@ -6239,7 +6239,7 @@\n (define_insn_and_split \"*floatdidf2_mem\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n \t(float:DF (match_operand:DI 1 \"memory_operand\" \"m,Z\")))\n-   (clobber (match_scratch:DI 2 \"=d,wi\"))]\n+   (clobber (match_scratch:DI 2 \"=d,wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFID\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -6258,7 +6258,7 @@\n \n (define_insn \"*floatunsdidf2_fcfidu\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n-\t(unsigned_float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n+\t(unsigned_float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDU\"\n   \"@\n    fcfidu %0,%1\n@@ -6268,7 +6268,7 @@\n (define_insn_and_split \"*floatunsdidf2_mem\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n \t(unsigned_float:DF (match_operand:DI 1 \"memory_operand\" \"m,Z\")))\n-   (clobber (match_scratch:DI 2 \"=d,wi\"))]\n+   (clobber (match_scratch:DI 2 \"=d,wa\"))]\n   \"TARGET_HARD_FLOAT && (TARGET_FCFIDU || VECTOR_UNIT_VSX_P (DFmode))\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -6301,7 +6301,7 @@\n \n (define_insn \"floatdisf2_fcfids\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n-\t(float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n+\t(float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDS\"\n   \"@\n    fcfids %0,%1\n@@ -6312,7 +6312,7 @@\n (define_insn_and_split \"*floatdisf2_mem\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa,wa\")\n \t(float:SF (match_operand:DI 1 \"memory_operand\" \"m,m,Z\")))\n-   (clobber (match_scratch:DI 2 \"=d,d,wi\"))]\n+   (clobber (match_scratch:DI 2 \"=d,d,wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDS\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -6382,7 +6382,7 @@\n \n (define_insn \"floatunsdisf2_fcfidus\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n-        (unsigned_float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n+        (unsigned_float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDUS\"\n   \"@\n    fcfidus %0,%1\n@@ -6393,7 +6393,7 @@\n (define_insn_and_split \"*floatunsdisf2_mem\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa,wa\")\n \t(unsigned_float:SF (match_operand:DI 1 \"memory_operand\" \"m,m,Z\")))\n-   (clobber (match_scratch:DI 2 \"=d,d,wi\"))]\n+   (clobber (match_scratch:DI 2 \"=d,d,wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDUS\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -8742,12 +8742,12 @@\n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n          \"=Y,        r,         r,         m,         ^d,        ^d,\n-          r,         wY,        Z,         ^v,        $wv,       ^wi,\n-          wa,        wa,        wv,        wi,        *i,        wv,\n+          r,         wY,        Z,         ^v,        $wv,       ^wa,\n+          wa,        wa,        wv,        wa,        *i,        wv,\n           wv\")\n \t(match_operand:DI 1 \"input_operand\"\n          \"r,         Y,         r,         ^d,        m,         ^d,\n-          IJKnF,     ^v,        $wv,       wY,        Z,         ^wi,\n+          IJKnF,     ^v,        $wv,       wY,        Z,         ^wa,\n           Oj,        wM,        OjwM,      Oj,        wM,        wS,\n           wB\"))]\n   \"! TARGET_POWERPC64\n@@ -8826,15 +8826,15 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=YZ,       r,         r,         r,         r,          r,\n                 m,         ^d,        ^d,        wY,        Z,          $v,\n-                $wv,       ^wi,       wa,        wa,        wv,         wi,\n-                wi,        wv,        wv,        r,         *h,         *h,\n-                ?r,        ?wi\")\n+                $wv,       ^wa,       wa,        wa,        wv,         wa,\n+                wa,        wv,        wv,        r,         *h,         *h,\n+                ?r,        ?wa\")\n \t(match_operand:DI 1 \"input_operand\"\n                \"r,         YZ,        r,         I,         L,          nF,\n                 ^d,        m,         ^d,        ^v,        $wv,        wY,\n-                Z,         ^wi,       Oj,        wM,        OjwM,       Oj,\n+                Z,         ^wa,       Oj,        wM,        OjwM,       Oj,\n                 wM,        wS,        wB,        *h,        r,          0,\n-                wi,        r\"))]\n+                wa,        r\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -12654,7 +12654,7 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0))\n \t\t      (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wa*c*l\")\n \t(plus:P (match_dup 1)\n \t\t(const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -12730,7 +12730,7 @@\n \t\t       (const_int 0)]))\n \t  (label_ref (match_operand 0))\n \t  (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wa*c*l\")\n \t(plus:P (match_dup 1)\n \t\t(const_int -1)))\n    (clobber (match_scratch:P 5 \"=X,X,&r,r\"))"}, {"sha": "f5ef5b8afa41cfe808742be1189198f0f5dbf4de", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -114,13 +114,13 @@\n \t\t\t (V4SF  \"wf\")\n \t\t\t (V2DI  \"wd\")\n \t\t\t (V2DF  \"wd\")\n-\t\t\t (DI\t\"wi\")\n+\t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"ws\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (TF\t\"wp\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (V1TI  \"v\")\n-\t\t\t (TI    \"wt\")])\n+\t\t\t (TI    \"wa\")])\n \n ;; Map the register class used for float<->int conversions (floating point side)\n ;; VSr2 is the preferred register class, VSr3 is any register class that will\n@@ -129,15 +129,15 @@\n \t\t\t (V4SF  \"wf\")\n \t\t\t (DF    \"ws\")\n \t\t\t (SF\t\"ww\")\n-\t\t\t (DI\t\"wi\")\n+\t\t\t (DI\t\"wa\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n \n (define_mode_attr VSr3\t[(V2DF  \"wa\")\n \t\t\t (V4SF  \"wa\")\n \t\t\t (DF    \"ws\")\n \t\t\t (SF\t\"ww\")\n-\t\t\t (DI\t\"wi\")\n+\t\t\t (DI\t\"wa\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n \n@@ -162,11 +162,11 @@\n \t\t\t (V4SF  \"wa\")\n \t\t\t (V2DI  \"wa\")\n \t\t\t (V2DF  \"wa\")\n-\t\t\t (DI\t\"wi\")\n+\t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"ws\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (V1TI\t\"wa\")\n-\t\t\t (TI    \"wt\")\n+\t\t\t (TI    \"wa\")\n \t\t\t (TF\t\"wp\")\n \t\t\t (KF\t\"wq\")])\n \n@@ -278,7 +278,7 @@\n ;; Map register class for 64-bit element in 128-bit vector for normal register\n ;; to register moves\n (define_mode_attr VS_64reg [(V2DF\t\"ws\")\n-\t\t\t    (V2DI\t\"wi\")])\n+\t\t\t    (V2DI\t\"wa\")])\n \n ;; Iterators for loading constants with xxspltib\n (define_mode_iterator VSINT_84  [V4SI V2DI DI SI])\n@@ -4151,7 +4151,7 @@\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa,we\")\n \t(vec_duplicate:V4SI\n \t (truncate:SI\n-\t  (match_operand:DI 1 \"gpc_reg_operand\" \"wi,r\"))))]\n+\t  (match_operand:DI 1 \"gpc_reg_operand\" \"wa,r\"))))]\n   \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"@\n    xxspltw %x0,%x1,1"}, {"sha": "ccab18b511e2ee1ff30416cf5185be0abe5709a3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670418ff18f36f81f3f619c34578da03d102694/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e670418ff18f36f81f3f619c34578da03d102694", "patch": "@@ -3196,10 +3196,8 @@ Altivec vector register\n @item wa\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n-When using any of the register constraints (@code{wa}, @code{wd},\n-@code{wf}, @code{wi},\n-@code{wp}, @code{wq}, @code{ws},\n-@code{wt}, @code{wv}, or @code{ww})\n+When using any of the register constraints (@code{wa}, @code{wd}, @code{wf},\n+@code{wp}, @code{wq}, @code{ws}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3256,9 +3254,6 @@ were used or NO_REGS.\n @item wf\n VSX vector register to hold vector float data or NO_REGS.\n \n-@item wi\n-FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n-\n @item wn\n No register (NO_REGS).\n \n@@ -3274,9 +3269,6 @@ General purpose register if 64-bit instructions are enabled or NO_REGS.\n @item ws\n VSX vector register to hold scalar double values or NO_REGS.\n \n-@item wt\n-VSX vector register to hold 128 bit integer or NO_REGS.\n-\n @item wv\n Altivec register to use for double loads/stores  or NO_REGS.\n "}]}