{"sha": "cfea7b86f2430b9cb8018379b071f4004233119c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlYTdiODZmMjQzMGI5Y2I4MDE4Mzc5YjA3MWY0MDA0MjMzMTE5Yw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-09-16T18:12:21Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-09-16T18:12:21Z"}, "message": "Fortran - fix handling of optional allocatable DT arguments with INTENT(OUT)\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/102287\n\t* trans-expr.c (gfc_conv_procedure_call): Wrap deallocation of\n\tallocatable components of optional allocatable derived type\n\tprocedure arguments with INTENT(OUT) into a presence check.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/102287\n\t* gfortran.dg/intent_out_14.f90: New test.", "tree": {"sha": "cf0f208ec70d6b3318eaf216e2097968ba249308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf0f208ec70d6b3318eaf216e2097968ba249308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfea7b86f2430b9cb8018379b071f4004233119c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfea7b86f2430b9cb8018379b071f4004233119c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfea7b86f2430b9cb8018379b071f4004233119c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfea7b86f2430b9cb8018379b071f4004233119c/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1a65d9364fe72c2fff65fb2dec051728b6f3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1a65d9364fe72c2fff65fb2dec051728b6f3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1a65d9364fe72c2fff65fb2dec051728b6f3fa"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "4a81f4695d9a1db236ccd84b329fa8f6b631e943", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfea7b86f2430b9cb8018379b071f4004233119c/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfea7b86f2430b9cb8018379b071f4004233119c/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=cfea7b86f2430b9cb8018379b071f4004233119c", "patch": "@@ -6548,6 +6548,17 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t    // deallocate the components first\n \t\t    tmp = gfc_deallocate_alloc_comp (fsym->ts.u.derived,\n \t\t\t\t\t\t     parmse.expr, e->rank);\n+\t\t    /* But check whether dummy argument is optional.  */\n+\t\t    if (tmp != NULL_TREE\n+\t\t\t&& fsym->attr.optional\n+\t\t\t&& e->expr_type == EXPR_VARIABLE\n+\t\t\t&& e->symtree->n.sym->attr.optional)\n+\t\t      {\n+\t\t\ttree present;\n+\t\t\tpresent = gfc_conv_expr_present (e->symtree->n.sym);\n+\t\t\ttmp = build3_v (COND_EXPR, present, tmp,\n+\t\t\t\t\tbuild_empty_stmt (input_location));\n+\t\t      }\n \t\t    if (tmp != NULL_TREE)\n \t\t      gfc_add_expr_to_block (&se->pre, tmp);\n \t\t  }"}, {"sha": "e59946350086916cee36d307ddaf18ba7aca2e6c", "filename": "gcc/testsuite/gfortran.dg/intent_out_14.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfea7b86f2430b9cb8018379b071f4004233119c/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfea7b86f2430b9cb8018379b071f4004233119c/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintent_out_14.f90?ref=cfea7b86f2430b9cb8018379b071f4004233119c", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! PR fortran/102287 - optional allocatable DT array arguments (intent out)\n+\n+module m\n+  type t\n+     integer, allocatable :: a\n+  end type t\n+contains\n+  subroutine a (x, v)\n+    type(t), optional, allocatable, intent(out) :: x(:)\n+    type(t), optional,              intent(out) :: v(:)\n+    call b (x, v)\n+  end subroutine a\n+\n+  subroutine b (y, w)\n+    type(t), optional, allocatable, intent(out) :: y(:)\n+    type(t), optional,              intent(out) :: w(:)\n+  end subroutine b\n+end module m\n+\n+program p\n+  use m\n+  call a ()\n+end"}]}