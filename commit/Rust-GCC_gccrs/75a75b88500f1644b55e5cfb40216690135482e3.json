{"sha": "75a75b88500f1644b55e5cfb40216690135482e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNzViODg1MDBmMTY0NGI1NWU1Y2ZiNDAyMTY2OTAxMzU0ODJlMw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-12-29T15:14:12Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-12-29T15:14:12Z"}, "message": "fpgnulib.c (__extendsfdf2): Handle negative zero.\n\n2005-12-29  Paul Brook  <paul@codesourcery.com>\n\n\t* config/m68k/fpgnulib.c (__extendsfdf2): Handle negative zero.\n\t(__truncdfsf2): Ditto.\n\t(__extenddfxf2): Ditto.\n\t(__truncxfdf2): Ditto.\n\t* config/m68k/lb1sf68.asm (__addsf3): Return -0.0 for -0.0 + -0.0.\n\t(__adddf3): Ditto.\n\nFrom-SVN: r109143", "tree": {"sha": "5a99e7969d557864843870fe0c70845038db7f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a99e7969d557864843870fe0c70845038db7f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a75b88500f1644b55e5cfb40216690135482e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a75b88500f1644b55e5cfb40216690135482e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a75b88500f1644b55e5cfb40216690135482e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a75b88500f1644b55e5cfb40216690135482e3/comments", "author": null, "committer": null, "parents": [{"sha": "338276300ec3b1b537ca687ea82abd777de15894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338276300ec3b1b537ca687ea82abd777de15894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338276300ec3b1b537ca687ea82abd777de15894"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "5382a0672c5bade94bfba2aa1c79011205383ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75a75b88500f1644b55e5cfb40216690135482e3", "patch": "@@ -1,3 +1,12 @@\n+2005-12-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/m68k/fpgnulib.c (__extendsfdf2): Handle negative zero.\n+\t(__truncdfsf2): Ditto.\n+\t(__extenddfxf2): Ditto.\n+\t(__truncxfdf2): Ditto.\n+\t* config/m68k/lb1sf68.asm (__addsf3): Return -0.0 for -0.0 + -0.0.\n+\t(__adddf3): Ditto.\n+\n 2005-12-29  Daniel Jacobowitz  <dan@codesourcery.com>\n \tPaul Brook  <paul@codesourcery.com>\n "}, {"sha": "1ef43c758f02cd86ea3330f5406c5b8cf057f68a", "filename": "gcc/config/m68k/fpgnulib.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c?ref=75a75b88500f1644b55e5cfb40216690135482e3", "patch": "@@ -241,13 +241,13 @@ __extendsfdf2 (float a1)\n \n   fl1.f = a1;\n \n-  if (!fl1.l)\n+  dl.l.upper = SIGN (fl1.l);\n+  if ((fl1.l & ~SIGNBIT) == 0)\n     {\n-      dl.l.upper = dl.l.lower = 0;\n+      dl.l.lower = 0;\n       return dl.d;\n     }\n \n-  dl.l.upper = SIGN (fl1.l);\n   exp = EXP(fl1.l);\n   mant = MANT (fl1.l) & ~HIDDEN;\n   if (exp == 0)\n@@ -280,8 +280,11 @@ __truncdfsf2 (double a1)\n \n   dl1.d = a1;\n \n-  if (!dl1.l.upper && !dl1.l.lower)\n-    return 0;\n+  if ((dl1.l.upper & ~SIGNBIT) == 0 && !dl1.l.lower)\n+    {\n+      fl.l = SIGND(dl1);\n+      return fl.f;\n+    }\n \n   exp = EXPD (dl1) - EXCESSD + EXCESS;\n \n@@ -398,10 +401,14 @@ __extenddfxf2 (double d)\n   dl.d = d;\n   /*printf (\"dfxf in: %g\\n\", d);*/\n \n-  if (!dl.l.upper && !dl.l.lower)\n-    return 0;\n-\n   ldl.l.upper = SIGND (dl);\n+  if ((dl.l.upper & ~SIGNBIT) == 0 && !dl.l.lower)\n+    {\n+      ldl.l.middle = 0;\n+      ldl.l.lower = 0;\n+      return ldl.ld;\n+    }\n+\n   exp = EXPD (dl) - EXCESSD + EXCESSX;\n   ldl.l.upper |= exp << 16;\n   ldl.l.middle = HIDDENX;\n@@ -427,14 +434,17 @@ __truncxfdf2 (long double ld)\n   ldl.ld = ld;\n   /*printf (\"xfdf in: %s\\n\", dumpxf (ld));*/\n \n-  if (!ldl.l.upper && !ldl.l.middle && !ldl.l.lower)\n-    return 0;\n+  dl.l.upper = SIGNX (ldl);\n+  if ((ldl.l.upper & ~SIGNBIT) == 0 && !ldl.l.middle && !ldl.l.lower)\n+    {\n+      dl.l.lower = 0;\n+      return dl.d;\n+    }\n \n   exp = EXPX (ldl) - EXCESSX + EXCESSD;\n   /* ??? quick and dirty: keep `exp' sane */\n   if (exp >= EXPDMASK)\n     exp = EXPDMASK - 1;\n-  dl.l.upper = SIGNX (ldl);\n   dl.l.upper |= exp << (32 - (EXPDBITS + 1));\n   /* +1-1: add one for sign bit, but take one off for explicit-integer-bit */\n   dl.l.upper |= (ldl.l.middle & MANTXMASK) >> (EXPDBITS + 1 - 1);"}, {"sha": "2e239b33387627e544b5b72796088b69700ab502", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75b88500f1644b55e5cfb40216690135482e3/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=75a75b88500f1644b55e5cfb40216690135482e3", "patch": "@@ -1285,7 +1285,12 @@ Ladddf$b:\n | Return b (if a is zero)\n \tmovel\td2,d0\n \tmovel\td3,d1\n-\tbra\t1f\n+\tbne\t1f\t\t\t| Check if b is -0\n+\tcmpl\tIMM (0x80000000),d0\n+\tbne\t1f\n+\tandl\tIMM (0x80000000),d7\t| Use the sign of a\n+\tclrl\td0\n+\tbra\tLadddf$ret\n Ladddf$a:\n \tmovel\ta6@(8),d0\n \tmovel\ta6@(12),d1\n@@ -2570,16 +2575,13 @@ SYM (__addsf3):\n #endif\n \tmovel\ta6@(8),d0\t| get first operand\n \tmovel\ta6@(12),d1\t| get second operand\n-\tmovel\td0,d6\t\t| get d0's sign bit '\n+\tmovel\td0,a0\t\t| get d0's sign bit '\n \taddl\td0,d0\t\t| check and clear sign bit of a\n \tbeq\tLaddsf$b\t| if zero return second operand\n-\tmovel\td1,d7\t\t| save b's sign bit '\n+\tmovel\td1,a1\t\t| save b's sign bit '\n \taddl\td1,d1\t\t| get rid of sign bit\n \tbeq\tLaddsf$a\t| if zero return first operand\n \n-\tmovel\td6,a0\t\t| save signs in address registers\n-\tmovel\td7,a1\t\t| so we can use d6 and d7\n-\n | Get the exponents and check for denormalized and/or infinity.\n \n \tmovel\tIMM (0x00ffffff),d4\t| mask to get fraction\n@@ -2950,7 +2952,12 @@ Laddsf$b$den:\n Laddsf$b:\n | Return b (if a is zero).\n \tmovel\ta6@(12),d0\n-\tbra\t1f\n+\tcmpl\tIMM (0x80000000),d0\t| Check if b is -0\n+\tbne\t1f\n+\tmovel\ta0,d7\n+\tandl\tIMM (0x80000000),d7\t| Use the sign of a\n+\tclrl\td0\n+\tbra\tLaddsf$ret\n Laddsf$a:\n | Return a (if b is zero).\n \tmovel\ta6@(8),d0"}]}