{"sha": "12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkZjlhMmY5MjY3NTkxNzU1OTlkMjBjNWMyYjBjN2Y1MGI3YWQ2ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-11T08:12:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-11T08:12:33Z"}, "message": "re PR tree-optimization/52912 (ICE: verify_ssa failed)\n\n2012-04-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52912\n\t* tree-ssa-threadupdate.c (thread_block): Tell the cfg\n\tmanipulation code we are threading through a loop header\n\tto an exit destination.\n\n\t* gcc.dg/torture/pr52912.c: New testcase.\n\nFrom-SVN: r186303", "tree": {"sha": "af40e041d52aa7d52fea8c63f02402da2b3098ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af40e041d52aa7d52fea8c63f02402da2b3098ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f06fe36d991c992ec07202eae8764349db40ae15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06fe36d991c992ec07202eae8764349db40ae15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06fe36d991c992ec07202eae8764349db40ae15"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "24efa857d85edeed6d475f457fe65ab632e2e0f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "patch": "@@ -1,3 +1,10 @@\n+2012-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52912\n+\t* tree-ssa-threadupdate.c (thread_block): Tell the cfg\n+\tmanipulation code we are threading through a loop header\n+\tto an exit destination.\n+\n 2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* tree.h (warn_if_unused_value): Move declaration from here."}, {"sha": "08293166910bdab32f29dd7255368c2d6d0410b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52912\n+\t* gcc.dg/torture/pr52912.c: New testcase.\n+\n 2010-04-10  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/vect/vect-outer-1-big-array.c: Adjust."}, {"sha": "3ae57588f26dd9521ab595836b5588effc8b8ef8", "filename": "gcc/testsuite/gcc.dg/torture/pr52912.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52912.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52912.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52912.c?ref=12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+int a, b, c;\n+static int\n+fn1 (p1)\n+{\n+lbl_549:\n+      if (p1)\n+\t        goto lbl_549;\n+          return 0;\n+}\n+\n+void\n+fn2 ()\n+{\n+      b = (c && a) > fn1 (c) >= c;\n+}"}, {"sha": "018092a7a3aeec6aece7c7fe867d2f6b534ab9cc", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12df9a2f926759175599d20c5c2b0c7f50b7ad6d/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=12df9a2f926759175599d20c5c2b0c7f50b7ad6d", "patch": "@@ -661,6 +661,13 @@ thread_block (basic_block bb, bool noloop_only)\n   /* We do not update dominance info.  */\n   free_dominance_info (CDI_DOMINATORS);\n \n+  /* We know we only thread through the loop header to loop exits.\n+     Let the basic block duplication hook know we are not creating\n+     a multiple entry loop.  */\n+  if (noloop_only\n+      && bb == bb->loop_father->header)\n+    set_loop_copy (bb->loop_father, loop_outer (bb->loop_father));\n+\n   /* Now create duplicates of BB.\n \n      Note that for a block with a high outgoing degree we can waste\n@@ -692,6 +699,10 @@ thread_block (basic_block bb, bool noloop_only)\n   htab_delete (redirection_data);\n   redirection_data = NULL;\n \n+  if (noloop_only\n+      && bb == bb->loop_father->header)\n+    set_loop_copy (bb->loop_father, NULL);\n+\n   /* Indicate to our caller whether or not any jumps were threaded.  */\n   return local_info.jumps_threaded;\n }"}]}