{"sha": "ee2be8f3a49b0b1a24afa30801e15c4a93656047", "node_id": "C_kwDOANBUbNoAKGVlMmJlOGYzYTQ5YjBiMWEyNGFmYTMwODAxZTE1YzRhOTM2NTYwNDc", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2022-11-08T11:59:58Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2022-11-08T14:52:11Z"}, "message": "amdgcn: Add builtins for vectorized native versions of abs, floorf and floor\n\n2022-11-08  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-builtins.def (FABSV, FLOORVF, FLOORV): New builtins.\n\t* config/gcn/gcn.cc (gcn_expand_builtin_1): Expand GCN_BUILTIN_FABSV,\n\tGCN_BUILTIN_FLOORVF and GCN_BUILTIN_FLOORV.\n\n\tgcc/testsuite/\n\t* gcc.target/gcn/math-builtins-1.c: New test.", "tree": {"sha": "d0478b9271214a7211ca741375239da032887533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0478b9271214a7211ca741375239da032887533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee2be8f3a49b0b1a24afa30801e15c4a93656047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2be8f3a49b0b1a24afa30801e15c4a93656047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2be8f3a49b0b1a24afa30801e15c4a93656047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2be8f3a49b0b1a24afa30801e15c4a93656047/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74dd1bbd2a02a0755bc882c6e64964b2a47ba5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74dd1bbd2a02a0755bc882c6e64964b2a47ba5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74dd1bbd2a02a0755bc882c6e64964b2a47ba5d"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "c50777bd3b02df9ed093e2ad291e738dc188d613", "filename": "gcc/config/gcn/gcn-builtins.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def?ref=ee2be8f3a49b0b1a24afa30801e15c4a93656047", "patch": "@@ -64,6 +64,21 @@ DEF_BUILTIN (FABSVF, 3 /*CODE_FOR_fabsvf */,\n \t     _A2 (GCN_BTI_V64SF, GCN_BTI_V64SF),\n \t     gcn_expand_builtin_1)\n \n+DEF_BUILTIN (FABSV, 3 /*CODE_FOR_fabsv */,\n+\t     \"fabsv\", B_INSN,\n+\t     _A2 (GCN_BTI_V64DF, GCN_BTI_V64DF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FLOORVF, 3 /*CODE_FOR_floorvf */,\n+\t     \"floorvf\", B_INSN,\n+\t     _A2 (GCN_BTI_V64SF, GCN_BTI_V64SF),\n+\t     gcn_expand_builtin_1)\n+\n+DEF_BUILTIN (FLOORV, 3 /*CODE_FOR_floorv */,\n+\t     \"floorv\", B_INSN,\n+\t     _A2 (GCN_BTI_V64DF, GCN_BTI_V64DF),\n+\t     gcn_expand_builtin_1)\n+\n DEF_BUILTIN (LDEXPVF, 3 /*CODE_FOR_ldexpvf */,\n \t     \"ldexpvf\", B_INSN,\n \t     _A3 (GCN_BTI_V64SF, GCN_BTI_V64SF, GCN_BTI_V64SI),"}, {"sha": "9c5e34197488e2bc17713b31b8922f1736c29541", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=ee2be8f3a49b0b1a24afa30801e15c4a93656047", "patch": "@@ -4329,6 +4329,39 @@ gcn_expand_builtin_1 (tree exp, rtx target, rtx /*subtarget */ ,\n \temit_insn (gen_absv64sf2 (target, arg));\n \treturn target;\n       }\n+    case GCN_BUILTIN_FABSV:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx arg = force_reg (V64DFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64DFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_absv64df2 (target, arg));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FLOORVF:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx arg = force_reg (V64SFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64SFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_floorv64sf2 (target, arg));\n+\treturn target;\n+      }\n+    case GCN_BUILTIN_FLOORV:\n+      {\n+\tif (ignore)\n+\t  return target;\n+\trtx arg = force_reg (V64DFmode,\n+\t\t\t     expand_expr (CALL_EXPR_ARG (exp, 0), NULL_RTX,\n+\t\t\t\t\t  V64DFmode,\n+\t\t\t\t\t  EXPAND_NORMAL));\n+\temit_insn (gen_floorv64df2 (target, arg));\n+\treturn target;\n+      }\n     case GCN_BUILTIN_LDEXPVF:\n       {\n \tif (ignore)"}, {"sha": "e1aadfb40d9fec9da3ab86ee989c812f2da4927f", "filename": "gcc/testsuite/gcc.target/gcn/math-builtins-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fmath-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee2be8f3a49b0b1a24afa30801e15c4a93656047/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fmath-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fmath-builtins-1.c?ref=ee2be8f3a49b0b1a24afa30801e15c4a93656047", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+typedef float v64sf __attribute__ ((vector_size (256)));\n+typedef double v64df __attribute__ ((vector_size (512)));\n+typedef int v64si __attribute__ ((vector_size (256)));\n+typedef long v64di __attribute__ ((vector_size (512)));\n+\n+v64sf f (v64sf _x, v64si _y)\n+{\n+  v64sf x = _x;\n+  v64si y = _y;\n+  x = __builtin_gcn_fabsvf (x); /* { dg-final { scan-assembler \"v_add_f32\\\\s+v\\[0-9\\]+, 0, |v\\[0-9\\]+|\" } } */\n+  x = __builtin_gcn_floorvf (x); /* { dg-final { scan-assembler \"v_floor_f32\\\\s+v\\[0-9\\]+, v\\[0-9\\]+\" } }*/\n+  x = __builtin_gcn_frexpvf_mant (x); /* { dg-final { scan-assembler \"v_frexp_mant_f32\\\\s+v\\[0-9\\]+, v\\[0-9\\]+\" } }*/\n+  y = __builtin_gcn_frexpvf_exp (x); /* { dg-final { scan-assembler \"v_frexp_exp_i32_f32\\\\s+v\\[0-9\\]+, v\\[0-9\\]+\" } }*/\n+  x = __builtin_gcn_ldexpvf (x, y); /* { dg-final { scan-assembler \"v_ldexp_f32\\\\s+v\\[0-9\\]+, v\\[0-9\\]+, v\\[0-9\\]+\" } }*/\n+\n+  return x;\n+}\n+\n+v64df g (v64df _x, v64si _y)\n+{\n+  v64df x = _x;\n+  v64si y = _y;\n+  x = __builtin_gcn_fabsv (x); /* { dg-final { scan-assembler \"v_add_f64\\\\s+v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\], 0, |v\\\\\\[\\[0-9\\]+:\\[0-9\\]+\\\\\\]|\" } } */\n+  x = __builtin_gcn_floorv (x); /* { dg-final { scan-assembler \"v_floor_f64\\\\s+v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\], v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\]\" } }*/\n+  x = __builtin_gcn_frexpv_mant (x); /* { dg-final { scan-assembler \"v_frexp_mant_f64\\\\s+v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\], v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\]\" } }*/\n+  y = __builtin_gcn_frexpv_exp (x); /* { dg-final { scan-assembler \"v_frexp_exp_i32_f64\\\\s+v\\[0-9\\]+, v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\]\" } }*/\n+  x = __builtin_gcn_ldexpv (x, y); /* { dg-final { scan-assembler \"v_ldexp_f64\\\\s+v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\], v\\\\\\[\\[0-9\\]+:\\[0-9]+\\\\\\], v\\[0-9\\]+\" } }*/\n+\n+  return x;\n+}"}]}