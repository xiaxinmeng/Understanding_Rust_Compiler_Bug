{"sha": "ad611a4c8401a0ba74501d6c289f881b3de82827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2MTFhNGM4NDAxYTBiYTc0NTAxZDZjMjg5Zjg4MWIzZGU4MjgyNw==", "commit": {"author": {"name": "Virendra Pathak", "email": "virendra.pathak@broadcom.com", "date": "2016-07-15T11:17:53Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-07-15T11:17:53Z"}, "message": "[PATCH/AARCH64] Add rtx_costs routine for vulcan.\n\ngcc/ChangeLog:\n\n2016-07-15  Virendra Pathak  <virendra.pathak@broadcom.com>\n\t    Julian Brown  <julian@codesourcery.com>\n\n\t* config/aarch64/aarch64-cores.def: Update vulcan COSTS.\n\t* config/aarch64/aarch64-cost-tables.h\n\t(vulcan_extra_costs): New variable.\n\t* config/aarch64/aarch64.c\n\t(vulcan_addrcost_table): Likewise.\n\t(vulcan_regmove_cost): Likewise.\n\t(vulcan_vector_cost): Likewise.\n\t(vulcan_branch_cost): Likewise.\n\t(vulcan_tunings): Likewise.\n\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\n\nFrom-SVN: r238372", "tree": {"sha": "42a9b92d3c2ac4b8734f33010d12aa0d14366617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a9b92d3c2ac4b8734f33010d12aa0d14366617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad611a4c8401a0ba74501d6c289f881b3de82827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad611a4c8401a0ba74501d6c289f881b3de82827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad611a4c8401a0ba74501d6c289f881b3de82827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad611a4c8401a0ba74501d6c289f881b3de82827/comments", "author": null, "committer": null, "parents": [{"sha": "3ef4678208cb06208343de776ad96de2db4de25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef4678208cb06208343de776ad96de2db4de25c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef4678208cb06208343de776ad96de2db4de25c"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "dc1d9ee987202c06358915d2dcbedc6e804abaec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad611a4c8401a0ba74501d6c289f881b3de82827", "patch": "@@ -1,3 +1,16 @@\n+2016-07-15  Virendra Pathak  <virendra.pathak@broadcom.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Update vulcan COSTS.\n+\t* config/aarch64/aarch64-cost-tables.h\n+\t(vulcan_extra_costs): New variable.\n+\t* config/aarch64/aarch64.c\n+\t(vulcan_addrcost_table): Likewise.\n+\t(vulcan_regmove_cost): Likewise.\n+\t(vulcan_vector_cost): Likewise.\n+\t(vulcan_branch_cost): Likewise.\n+\t(vulcan_tunings): Likewise.\n+\n 2016-07-15  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* cgraphunit.c (cgraph_order_sort_kind): New entry ORDER_VAR_UNDEF."}, {"sha": "d9da2576deadf278a0ac64cd9902b5d1da31fc57", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=ad611a4c8401a0ba74501d6c289f881b3de82827", "patch": "@@ -52,7 +52,7 @@ AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xge\n \n /* V8.1 Architecture Processors.  */\n \n-AARCH64_CORE(\"vulcan\",  vulcan, cortexa57, 8_1A,  AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_CRYPTO, cortexa57, \"0x42\", \"0x516\")\n+AARCH64_CORE(\"vulcan\",  vulcan, cortexa57, 8_1A,  AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_CRYPTO, vulcan, \"0x42\", \"0x516\")\n \n /* V8 big.LITTLE implementations.  */\n "}, {"sha": "54e843c3d38dca138d156d9095127e8e37503e32", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=ad611a4c8401a0ba74501d6c289f881b3de82827", "patch": "@@ -127,6 +127,108 @@ const struct cpu_cost_table thunderx_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table vulcan_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,\t\t\t/* Arith.  */\n+    0,\t\t\t/* Logical.  */\n+    0,\t\t\t/* Shift.  */\n+    0,\t\t\t/* Shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* Log_shift.  */\n+    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n+    0,\t\t\t/* Extend.  */\n+    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n+    0,\t\t\t/* Bfi.  */\n+    0,\t\t\t/* Bfx.  */\n+    COSTS_N_INSNS (3),\t/* Clz.  */\n+    0,\t\t\t/* Rev.  */\n+    0,\t\t\t/* Non_exec.  */\n+    true\t\t/* Non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (4),\t/* Simple.  */\n+      COSTS_N_INSNS (4),\t/* Flag_setting.  */\n+      COSTS_N_INSNS (4),\t/* Extend.  */\n+      COSTS_N_INSNS (5),\t/* Add.  */\n+      COSTS_N_INSNS (5),\t/* Extend_add.  */\n+      COSTS_N_INSNS (18)\t/* Idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (4),       /* Simple.  */\n+      0,                       /* Flag_setting.  */\n+      COSTS_N_INSNS (4),       /* Extend.  */\n+      COSTS_N_INSNS (5),       /* Add.  */\n+      COSTS_N_INSNS (5),       /* Extend_add.  */\n+      COSTS_N_INSNS (26)       /* Idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (4),\t/* Load.  */\n+    COSTS_N_INSNS (4),\t/* Load_sign_extend.  */\n+    COSTS_N_INSNS (5),\t/* Ldrd.  */\n+    COSTS_N_INSNS (4),\t/* Ldm_1st.  */\n+    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n+    1,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),\t/* Loadf.  */\n+    COSTS_N_INSNS (4),\t/* Loadd.  */\n+    COSTS_N_INSNS (4),\t/* Load_unaligned.  */\n+    0,\t\t\t/* Store.  */\n+    0,\t\t\t/* Strd.  */\n+    0,\t\t\t/* Stm_1st.  */\n+    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n+    1,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n+    0,\t\t\t/* Storef.  */\n+    0,\t\t\t/* Stored.  */\n+    0,\t\t\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (1),\t/* Loadv.  */\n+    COSTS_N_INSNS (1)\t/* Storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (4),\t/* Div.  */\n+      COSTS_N_INSNS (1),\t/* Mult.  */\n+      COSTS_N_INSNS (1),\t/* Mult_addsub. */\n+      COSTS_N_INSNS (1),\t/* Fma.  */\n+      COSTS_N_INSNS (1),\t/* Addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fpconst. */\n+      COSTS_N_INSNS (1),\t/* Neg.  */\n+      COSTS_N_INSNS (1),\t/* Compare.  */\n+      COSTS_N_INSNS (2),\t/* Widen.  */\n+      COSTS_N_INSNS (2),\t/* Narrow.  */\n+      COSTS_N_INSNS (2),\t/* Toint.  */\n+      COSTS_N_INSNS (2),\t/* Fromint.  */\n+      COSTS_N_INSNS (2) \t/* Roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (6),\t/* Div.  */\n+      COSTS_N_INSNS (1),\t/* Mult.  */\n+      COSTS_N_INSNS (1),\t/* Mult_addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fma.  */\n+      COSTS_N_INSNS (1),\t/* Addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fpconst.  */\n+      COSTS_N_INSNS (1),\t/* Neg.  */\n+      COSTS_N_INSNS (1),\t/* Compare.  */\n+      COSTS_N_INSNS (2),\t/* Widen.  */\n+      COSTS_N_INSNS (2),\t/* Narrow.  */\n+      COSTS_N_INSNS (2),\t/* Toint.  */\n+      COSTS_N_INSNS (2),\t/* Fromint.  */\n+      COSTS_N_INSNS (2) \t/* Roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)\t/* Alu.  */\n+  }\n+};\n \n \n #endif"}, {"sha": "5b1595c075641018bf6feae17124c599e82242ba", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad611a4c8401a0ba74501d6c289f881b3de82827/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ad611a4c8401a0ba74501d6c289f881b3de82827", "patch": "@@ -266,6 +266,22 @@ static const struct cpu_addrcost_table qdf24xx_addrcost_table =\n   0 /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table vulcan_addrcost_table =\n+{\n+    {\n+      0, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      2, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  2, /* register_offset  */\n+  3, /* register_sextend  */\n+  3, /* register_zextend  */\n+  0, /* imm_offset  */\n+};\n+\n static const struct cpu_regmove_cost generic_regmove_cost =\n {\n   1, /* GP2GP  */\n@@ -333,6 +349,15 @@ static const struct cpu_regmove_cost qdf24xx_regmove_cost =\n   4 /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost vulcan_regmove_cost =\n+{\n+  1, /* GP2GP  */\n+  /* Avoid the use of int<->fp moves for spilling.  */\n+  8, /* GP2FP  */\n+  8, /* FP2GP  */\n+  4  /* FP2FP  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost generic_vector_cost =\n {\n@@ -404,6 +429,24 @@ static const struct cpu_vector_cost xgene1_vector_cost =\n   1 /* cond_not_taken_branch_cost  */\n };\n \n+/* Costs for vector insn classes for Vulcan.  */\n+static const struct cpu_vector_cost vulcan_vector_cost =\n+{\n+  6, /* scalar_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  6, /* vec_stmt_cost  */\n+  3, /* vec_permute_cost  */\n+  6, /* vec_to_scalar_cost  */\n+  5, /* scalar_to_vec_cost  */\n+  8, /* vec_align_load_cost  */\n+  8, /* vec_unalign_load_cost  */\n+  4, /* vec_unalign_store_cost  */\n+  4, /* vec_store_cost  */\n+  2, /* cond_taken_branch_cost  */\n+  1  /* cond_not_taken_branch_cost  */\n+};\n+\n /* Generic costs for branch instructions.  */\n static const struct cpu_branch_cost generic_branch_cost =\n {\n@@ -418,6 +461,13 @@ static const struct cpu_branch_cost cortexa57_branch_cost =\n   3   /* Unpredictable.  */\n };\n \n+/* Branch costs for Vulcan.  */\n+static const struct cpu_branch_cost vulcan_branch_cost =\n+{\n+  1,  /* Predictable.  */\n+  3   /* Unpredictable.  */\n+};\n+\n /* Generic approximation modes.  */\n static const cpu_approx_modes generic_approx_modes =\n {\n@@ -698,6 +748,31 @@ static const struct tune_params qdf24xx_tunings =\n   (AARCH64_EXTRA_TUNE_NONE)\t\t/* tune_flags.  */\n };\n \n+static const struct tune_params vulcan_tunings =\n+{\n+  &vulcan_extra_costs,\n+  &vulcan_addrcost_table,\n+  &vulcan_regmove_cost,\n+  &vulcan_vector_cost,\n+  &vulcan_branch_cost,\n+  &generic_approx_modes,\n+  4, /* memmov_cost.  */\n+  4, /* issue_rate.  */\n+  AARCH64_FUSE_NOTHING, /* fuseable_ops.  */\n+  16,\t/* function_align.  */\n+  8,\t/* jump_align.  */\n+  16,\t/* loop_align.  */\n+  3,\t/* int_reassoc_width.  */\n+  2,\t/* fp_reassoc_width.  */\n+  2,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n+  tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+};\n+\n /* Support for fine-grained override of the tuning structures.  */\n struct aarch64_tuning_override_function\n {"}]}