{"sha": "7130729aa07512f6349dc85d86454cdb6c152b38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzMDcyOWFhMDc1MTJmNjM0OWRjODVkODY0NTRjZGI2YzE1MmIzOA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2013-01-02T10:45:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:45:00Z"}, "message": "par_sco.adb: Add SCO generation for task types and single task declarations.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb: Add SCO generation for task types and single\n\ttask declarations.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* fe.h, gnat1drv.adb: Revert previous change.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* get_scos.adb: When adding an instance table entry for a\n\tnon-nested instantiation, make sure the Enclosing_Instance is\n\tcorrectly set to 0.\n\nFrom-SVN: r194793", "tree": {"sha": "cbd214f3fa25a835e09a2646253440c7906ea8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd214f3fa25a835e09a2646253440c7906ea8c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7130729aa07512f6349dc85d86454cdb6c152b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7130729aa07512f6349dc85d86454cdb6c152b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7130729aa07512f6349dc85d86454cdb6c152b38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7130729aa07512f6349dc85d86454cdb6c152b38/comments", "author": null, "committer": null, "parents": [{"sha": "8ed7930e45b8232ed637f207fc48222112742a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed7930e45b8232ed637f207fc48222112742a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed7930e45b8232ed637f207fc48222112742a51"}], "stats": {"total": 138, "additions": 78, "deletions": 60}, "files": [{"sha": "15f39e18424e7a5ab5606688036e875e169ba97d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -1,3 +1,11 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb: Add SCO generation for task types and single\n+\ttask declarations.\n+\t* get_scos.adb: When adding an instance table entry for a\n+\tnon-nested instantiation, make sure the Enclosing_Instance is\n+\tcorrectly set to 0.\n+\n 2013-01-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute): Skip the special _Parent\n@@ -12,8 +20,6 @@\n \t* switch-c.adb, fe.h, back_end.adb: Enable generation of instantiation\n \tinformation in debug info unconditionally when using -fdump-scos,\n \tinstead of relying on a separate command line switch -fdebug-instances.\n-\t* gcc-interface/gigi.h, gcc-interface/misc.c\n-\t(set_flag_debug_instances): New subprogram.\n \t* gcc-interface/Make-lang.in: Update dependencies.\n \n 2013-01-02  Ed Schonberg  <schonberg@adacore.com>"}, {"sha": "552a8bf1ae9c92b30c1217cd7a55db7bc10c8bff", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -182,6 +182,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n #define Exception_Extra_Info           opt__exception_extra_info\n #define Exception_Locations_Suppressed opt__exception_locations_suppressed\n #define Exception_Mechanism            opt__exception_mechanism\n+#define Generate_SCO_Instance_Table    opt__generate_sco_instance_table\n #define Global_Discard_Names           opt__global_discard_names\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n@@ -190,6 +191,7 @@ extern Boolean Back_Annotate_Rep_Info;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;\n+extern Boolean Generate_SCO_Instance_Table;\n extern Boolean Global_Discard_Names;\n \n /* restrict: */"}, {"sha": "1d0d2fb216789f5b4806bc147ba29ff60ac12f58", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -255,8 +255,6 @@ extern void gigi (Node_Id gnat_root, int max_gnat_node,\n                   Entity_Id standard_exception_type,\n                   Int gigi_operating_mode);\n \n-extern void set_flag_debug_instances (int);\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "2fd2743bbe1213821f6f0777c86a25c115e8517d", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -809,23 +809,6 @@ gnat_eh_personality (void)\n   return gnat_eh_personality_decl;\n }\n \n-/* Set flag_debug_instances.  */\n-\n-void\n-set_flag_debug_instances (int val ATTRIBUTE_UNUSED)\n-{\n-#if 0\n-  /* Temporary compatibility shim???\n-     This should be enabled when back-end support for instance info in\n-     DWARF is merged at the FSF.  */\n-  flag_debug_instances = val;\n-#else\n-  /* Until then, forcibly turn off SCO instance table generation.  */\n-  extern Boolean opt__generate_sco_instance_table;\n-  opt__generate_sco_instance_table = False;\n-#endif\n-}\n-\n /* Initialize language-specific bits of tree_contains_struct.  */\n \n static void"}, {"sha": "4d21d2c77aeeff7a8e14f6ad5922d345645129f9", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -302,6 +302,16 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \n   type_annotate_only = (gigi_operating_mode == 1);\n \n+#if 0\n+  if (Generate_SCO_Instance_Table)\n+    flag_debug_instances = 1;\n+#else\n+  /* Temporary compatibility shim: FSF head back-end does not support instance\n+     based debug info discriminators, so disable the generation of the SCO\n+     instance table.  ??? */\n+  Generate_SCO_Instance_Table = False;\n+#endif\n+\n   for (i = 0; i < number_file; i++)\n     {\n       /* Use the identifier table to make a permanent copy of the filename as"}, {"sha": "ca90a85b4f77947c5bda27d92f654c6a94a79ae6", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -205,7 +205,7 @@ procedure Get_SCOs is\n \n    Nam : Name_Id;\n \n---  Start of processing for Get_Scos\n+--  Start of processing for Get_SCOs\n \n begin\n    SCOs.Initialize;\n@@ -265,7 +265,9 @@ begin\n                         pragma Assert (C = '|');\n                         Get_Source_Location (SIE.Inst_Loc);\n \n-                        if not At_EOL then\n+                        if At_EOL then\n+                           SIE.Enclosing_Instance := 0;\n+                        else\n                            Skip_Spaces;\n                            SIE.Enclosing_Instance :=\n                              SCO_Instance_Index (Get_Int);\n@@ -342,6 +344,10 @@ begin\n                         Key := '>';\n                         Typ := Getc;\n \n+                        --  Sanity check on dominance marker type indication\n+\n+                        pragma Assert (Typ in 'A' .. 'Z');\n+\n                      when '1' .. '9' =>\n                         Typ := ' ';\n "}, {"sha": "6e90c2b6d058dbf7a5f9aa851959c3c6ebe54678", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -109,9 +109,6 @@ procedure Gnat1drv is\n    ----------------------------\n \n    procedure Adjust_Global_Switches is\n-      procedure set_flag_debug_instances (Val : Int);\n-      pragma Import (C, set_flag_debug_instances);\n-\n    begin\n       --  Debug flag -gnatd.I is a synonym for Generate_SCIL and requires code\n       --  generation.\n@@ -576,10 +573,6 @@ procedure Gnat1drv is\n          end if;\n       end if;\n \n-      --  Set back-end flag_debug_instances from corresponding front-end flag\n-\n-      set_flag_debug_instances (Boolean'Pos (Generate_SCO_Instance_Table));\n-\n       --  Finally capture adjusted value of Suppress_Options as the initial\n       --  value for Scope_Suppress, which will be modified as we move from\n       --  scope to scope (by Suppress/Unsuppress/Overflow_Checks pragmas)."}, {"sha": "c272d027bc0baa203c47f230e5f1a4835486a31f", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7130729aa07512f6349dc85d86454cdb6c152b38/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=7130729aa07512f6349dc85d86454cdb6c152b38", "patch": "@@ -154,18 +154,21 @@ package body Par_SCO is\n    --  Process L, a list of statements or declarations dominated by D.\n    --  If P is present, it is processed as though it had been prepended to L.\n \n+   --  The following Traverse_* routines perform appropriate calls to\n+   --  Traverse_Declarations_Or_Statements to traverse specific node kinds\n+\n    procedure Traverse_Generic_Package_Declaration (N : Node_Id);\n    procedure Traverse_Handled_Statement_Sequence\n      (N : Node_Id;\n       D : Dominant_Info := No_Dominant);\n-   procedure Traverse_Package_Body                (N : Node_Id);\n-   procedure Traverse_Package_Declaration         (N : Node_Id);\n-   procedure Traverse_Protected_Body              (N : Node_Id);\n-   procedure Traverse_Protected_Definition        (N : Node_Id);\n+   procedure Traverse_Package_Body        (N : Node_Id);\n+   procedure Traverse_Package_Declaration (N : Node_Id);\n    procedure Traverse_Subprogram_Or_Task_Body\n      (N : Node_Id;\n       D : Dominant_Info := No_Dominant);\n-   --  Traverse the corresponding construct, generating SCO table entries\n+\n+   procedure Traverse_Sync_Definition     (N : Node_Id);\n+   --  Traverse a protected definition or task definition\n \n    procedure Write_SCOs_To_ALI_File is new Put_SCOs;\n    --  Write SCO information to the ALI file using routines in Lib.Util\n@@ -958,9 +961,7 @@ package body Par_SCO is\n            N_Task_Body                   |\n            N_Generic_Instantiation       =>\n \n-            Traverse_Declarations_Or_Statements\n-              (L => No_List,\n-               P => Lu);\n+            Traverse_Declarations_Or_Statements (L => No_List, P => Lu);\n \n          when others =>\n \n@@ -1356,14 +1357,17 @@ package body Par_SCO is\n                  N_Timed_Entry_Call             |\n                  N_Conditional_Entry_Call       |\n                  N_Asynchronous_Select          |\n-                 N_Single_Protected_Declaration =>\n+                 N_Single_Protected_Declaration |\n+                 N_Single_Task_Declaration      =>\n                T := F;\n \n-            when N_Protected_Type_Declaration =>\n+            when N_Protected_Type_Declaration | N_Task_Type_Declaration =>\n                if Has_Aspects (N) then\n                   To_Node := Last (Aspect_Specifications (N));\n+\n                elsif Present (Discriminant_Specifications (N)) then\n                   To_Node := Last (Discriminant_Specifications (N));\n+\n                else\n                   To_Node := Defining_Identifier (N);\n                end if;\n@@ -1550,7 +1554,7 @@ package body Par_SCO is\n \n             when N_Protected_Body =>\n                Set_Statement_Entry;\n-               Traverse_Protected_Body (N);\n+               Traverse_Declarations_Or_Statements (Declarations (N));\n \n             --  Exit statement, which is an exit statement in the SCO sense,\n             --  so it is included in the current statement sequence, but\n@@ -1960,18 +1964,18 @@ package body Par_SCO is\n             --  All other cases, which extend the current statement sequence\n             --  but do not terminate it, even if they have nested decisions.\n \n-            when N_Protected_Type_Declaration =>\n+            when N_Protected_Type_Declaration | N_Task_Type_Declaration =>\n                Extend_Statement_Sequence (N, 't');\n                Process_Decisions_Defer (Discriminant_Specifications (N), 'X');\n                Set_Statement_Entry;\n \n-               Traverse_Protected_Definition (Protected_Definition (N));\n+               Traverse_Sync_Definition (N);\n \n-            when N_Single_Protected_Declaration =>\n+            when N_Single_Protected_Declaration | N_Single_Task_Declaration =>\n                Extend_Statement_Sequence (N, 'o');\n                Set_Statement_Entry;\n \n-               Traverse_Protected_Definition (Protected_Definition (N));\n+               Traverse_Sync_Definition (N);\n \n             when others =>\n \n@@ -2112,36 +2116,52 @@ package body Par_SCO is\n       Traverse_Declarations_Or_Statements (Private_Declarations (Spec));\n    end Traverse_Package_Declaration;\n \n-   -----------------------------\n-   -- Traverse_Protected_Body --\n-   -----------------------------\n+   ------------------------------\n+   -- Traverse_Sync_Definition --\n+   ------------------------------\n \n-   procedure Traverse_Protected_Body (N : Node_Id) is\n-   begin\n-      Traverse_Declarations_Or_Statements (Declarations (N));\n-   end Traverse_Protected_Body;\n+   procedure Traverse_Sync_Definition (N : Node_Id) is\n+      Dom_Info : Dominant_Info := ('S', N);\n+      --  The first declaration is dominated by the protected or task [type]\n+      --  declaration.\n \n-   -----------------------------------\n-   -- Traverse_Protected_Definition --\n-   -----------------------------------\n+      Sync_Def : Node_Id;\n+      --  N's protected or task definition\n \n-   procedure Traverse_Protected_Definition (N : Node_Id) is\n-      Dom_Info : Dominant_Info    := ('S', Parent (N));\n-      Vis_Decl : constant List_Id := Visible_Declarations (N);\n+      Vis_Decl : List_Id;\n+      --  Sync_Def's Visible_Declarations\n \n    begin\n+      case Nkind (N) is\n+         when N_Single_Protected_Declaration | N_Protected_Type_Declaration =>\n+            Sync_Def := Protected_Definition (N);\n+\n+         when N_Single_Task_Declaration      | N_Task_Type_Declaration      =>\n+            Sync_Def := Task_Definition (N);\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n+\n+      Vis_Decl := Visible_Declarations (Sync_Def);\n+\n       Traverse_Declarations_Or_Statements\n         (L => Vis_Decl,\n          D => Dom_Info);\n \n+      --  If visible declarations are present, the first private declaration\n+      --  is dominated by the last visible declaration.\n+\n+      --  This is incorrect if Last (Vis_Decl) does not generate a SCO???\n+\n       if not Is_Empty_List (Vis_Decl) then\n          Dom_Info.N := Last (Vis_Decl);\n       end if;\n \n       Traverse_Declarations_Or_Statements\n-        (L => Private_Declarations (N),\n+        (L => Private_Declarations (Sync_Def),\n          D => Dom_Info);\n-   end Traverse_Protected_Definition;\n+   end Traverse_Sync_Definition;\n \n    --------------------------------------\n    -- Traverse_Subprogram_Or_Task_Body --"}]}