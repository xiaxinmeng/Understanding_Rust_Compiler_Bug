{"sha": "30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkZjkzMmMyM2RiMGY3ZDNiNzM1M2Y2ZmVlMTFjNGVjMjdkZDljMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-15T09:21:55Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-15T09:21:55Z"}, "message": "2003-02-15  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/CheckboxMenuItem.java\n\t(CheckBoxMenuItem): Dont implement Serializable.\n\t(getListeners): New method,\n\t(getItemListeners): New method.\n\t* java/awt/Choice.java\n\t(getListeners): New method,\n\t(getItemListeners): New method.\n\t* java/awt/Container.java\n\t(getListeners): Added exception documentation.\n\t(setFocusTraversalKeys): Throw exceptions, added documentattion.\n\t(getFocusTraversalKeys): Added documentation.\n\t(areFocusTraversalKeysSet): Added documentation.\n\t(applyComponentOrientation): Added documentation.\n\t* java/awt/ContainerOrderFocusTraversalPolicy.java\n\t(implicitDownCycleTraversal): Renamed from downCycle for\n\tserialization.\n\t(ContainerOrderFocusTraversalPolicy): Added documentation.\n\t(accept): Reformated.\n\t* java/awt/Dialog.java\n\t(Dialog): Dont implement Serializable.\n\t(Dialog): Added documentation.\n\t* java/awt/Font.java\n\t(Font): Dont use absolute class name.\n\t* java/awt/Frame.java\n\t(Frame): Font implement Serializable.\n\t* java/awt/List.java\n\t(getListeners): New method,\n\t(getActionListeners): New method.\n\t(getItemListeners): New method.\n\t* java/awt/Menu.java\n\t(countItems): New deprecated method.\n\t* java/awt/Scrollbar.java\n\t(getListeners): New method,\n\t(getAdjustmentListeners): New method,\n\t* java/awt/TextComponent.java\n\t(getListeners): New method,\n\t(getTextListeners): New method,\n\t* java/awt/TextField.java\n\t(getListeners): New method,\n\t(getActionListeners): New method.\n\t* java/awt/Window.java\n\t(windowFocusListener): New member variable.\n\t(windowStateListener): New member variable.\n\t(getWindowFocusListeners): New method.\n\t(getWindowStateListeners): New method.\n\t(addWindowFocusListener): New method.\n\t(addWindowStateListener): New method.\n\t(removeWindowFocusListener): New method.\n\t(removeWindowStateListener): New method.\n\t* java/awt/datatransfer/DataFlavor.java\n\t(isRepresentationClassByteBuffer): New method.\n\t(isRepresentationClassCharBuffer): New method.\n\t(isRepresentationClassReader): New method.\n\nFrom-SVN: r62933", "tree": {"sha": "7b1568d550111d47732726dd7a7f5bdc5e660ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1568d550111d47732726dd7a7f5bdc5e660ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/comments", "author": null, "committer": null, "parents": [{"sha": "e898926c9d597ef2cfd08f278b20ed916a18a98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898926c9d597ef2cfd08f278b20ed916a18a98b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e898926c9d597ef2cfd08f278b20ed916a18a98b"}], "stats": {"total": 476, "additions": 462, "deletions": 14}, "files": [{"sha": "785c9bbae63bed496a12709d1cd3c227de8372a4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -1,3 +1,59 @@\n+2003-02-15  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/CheckboxMenuItem.java\n+\t(CheckBoxMenuItem): Dont implement Serializable.\n+\t(getListeners): New method,\n+\t(getItemListeners): New method.\n+\t* java/awt/Choice.java\n+\t(getListeners): New method,\n+\t(getItemListeners): New method.\n+\t* java/awt/Container.java\n+\t(getListeners): Added exception documentation.\n+\t(setFocusTraversalKeys): Throw exceptions, added documentattion.\n+\t(getFocusTraversalKeys): Added documentation.\n+\t(areFocusTraversalKeysSet): Added documentation.\n+\t(applyComponentOrientation): Added documentation.\n+\t* java/awt/ContainerOrderFocusTraversalPolicy.java\n+\t(implicitDownCycleTraversal): Renamed from downCycle for\n+\tserialization.\n+\t(ContainerOrderFocusTraversalPolicy): Added documentation.\n+\t(accept): Reformated.\n+\t* java/awt/Dialog.java\n+\t(Dialog): Dont implement Serializable.\n+\t(Dialog): Added documentation.\n+\t* java/awt/Font.java\n+\t(Font): Dont use absolute class name.\n+\t* java/awt/Frame.java\n+\t(Frame): Font implement Serializable.\n+\t* java/awt/List.java\n+\t(getListeners): New method,\n+\t(getActionListeners): New method.\t\n+\t(getItemListeners): New method.\n+\t* java/awt/Menu.java\n+\t(countItems): New deprecated method.\n+\t* java/awt/Scrollbar.java\n+\t(getListeners): New method,\n+\t(getAdjustmentListeners): New method,\n+\t* java/awt/TextComponent.java\n+\t(getListeners): New method,\n+\t(getTextListeners): New method,\n+\t* java/awt/TextField.java\n+\t(getListeners): New method,\n+\t(getActionListeners): New method.\t\n+\t* java/awt/Window.java\n+\t(windowFocusListener): New member variable.\n+\t(windowStateListener): New member variable.\n+\t(getWindowFocusListeners): New method.\n+\t(getWindowStateListeners): New method.\n+\t(addWindowFocusListener): New method.\n+\t(addWindowStateListener): New method.\n+\t(removeWindowFocusListener): New method.\n+\t(removeWindowStateListener): New method.\n+\t* java/awt/datatransfer/DataFlavor.java\n+\t(isRepresentationClassByteBuffer): New method.\n+\t(isRepresentationClassCharBuffer): New method.\n+\t(isRepresentationClassReader): New method.\n+\n 2003-02-14  Mark Wielaard  <mark@klomp.org>\n \n \t* java/math/BigDecimal.java (BigDecimal(String)): Always set scale to"}, {"sha": "4f41568218a5997f1971aa9c60e4914c1beca17f", "filename": "libjava/java/awt/CheckboxMenuItem.java", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -43,6 +43,7 @@\n import java.awt.peer.MenuComponentPeer;\n import java.awt.event.ItemEvent;\n import java.awt.event.ItemListener;\n+import java.util.EventListener;\n \n /**\n   * This class implements a menu item that has a checkbox on it indicating\n@@ -51,8 +52,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@redhat.com>\n   */\n-public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n-                                                          java.io.Serializable\n+public class CheckboxMenuItem extends MenuItem implements ItemSelectable\n {\n \n /*\n@@ -296,5 +296,29 @@ public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n \t  + \",\" + super.paramString());\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this <code>CheckboxMenuItem</code>. FooListeners are registered using\n+   * the addFooListener method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == ItemListener.class)\n+      return AWTEventMulticaster.getListeners (item_listeners, listenerType); \n+\t      \n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Returns an aray of all item listeners currently registered to this\n+   * <code>CheckBoxMenuItem</code>.\n+   */\n+  public ItemListener[] getItemListeners ()\n+  {\n+    return (ItemListener[]) getListeners (ItemListener.class);\n+  }\n } // class CheckboxMenuItem\n "}, {"sha": "cb8bb03649179e726a38c7b2cf1649599185498f", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -44,6 +44,7 @@\n import java.awt.event.ItemListener;\n import java.io.Serializable;\n import java.util.Vector;\n+import java.util.EventListener;\n \n /**\n   * This class implements a drop down choice list.\n@@ -474,4 +475,31 @@ else if (selectedIndex > index)\n   return (\"selectedIndex=\" + selectedIndex + \",\" + super.paramString());\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this Choice. FooListeners are registered using the addFooListener\n+   * method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   *\n+   * @since 1.3\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == ItemListener.class)\n+      return AWTEventMulticaster.getListeners (item_listeners, listenerType);\n+    \n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Returns all registered item listeners.\n+   *\n+   * @since 1.4\n+   */\n+  public ItemListener[] getItemListeners ()\n+  {\n+    return (ItemListener[]) getListeners (ItemListener.class);\n+  }\n } // class Choice "}, {"sha": "91804d7f8c95d2f205c7bb2cbd8d40135f8877ab", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -728,6 +728,9 @@ public synchronized ContainerListener[] getContainerListeners()\n    * upon this Container. FooListeners are registered using the addFooListener\n    * method.\n    *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements @see java.util.EventListener.\n+   *\n    * @since 1.3\n    */\n   public EventListener[] getListeners(Class listenerType)\n@@ -994,15 +997,48 @@ public void list(PrintWriter out, int indent)\n       }\n   }\n \n-  public void setFocusTraversalKeys(int id, Set keys)\n+  /**\n+   * Sets the focus traversal keys for a given traversal operation for this\n+   * Container.\n+   *\n+   * @exception IllegalArgumentException If id is not one of\n+   * KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS,\n+   * or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS,\n+   * or if keystrokes contains null, or if any Object in keystrokes is not an\n+   * AWTKeyStroke, or if any keystroke represents a KEY_TYPED event, or if any\n+   * keystroke already maps to another focus traversal operation for this\n+   * Container.\n+   *\n+   * @since 1.4\n+   */\n+  public void setFocusTraversalKeys(int id, Set keystrokes)\n   {\n     if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n         id != KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS &&\n         id != KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS &&\n         id != KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS)\n       throw new IllegalArgumentException ();\n+\n+    if (keystrokes == null)\n+      throw new IllegalArgumentException ();\n+\n+    throw new Error (\"not implemented\");\n   }\n   \n+  /**\n+   * Returns the Set of focus traversal keys for a given traversal operation for\n+   * this Container.\n+   *\n+   * @exception IllegalArgumentException If id is not one of\n+   * KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS,\n+   * or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS.\n+   *\n+   * @since 1.4\n+   */\n   public Set getFocusTraversalKeys(int id)\n   {\n     if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n@@ -1014,6 +1050,20 @@ public Set getFocusTraversalKeys(int id)\n     return null;\n   }\n   \n+  /**\n+   * Returns whether the Set of focus traversal keys for the given focus\n+   * traversal operation has been explicitly defined for this Container.\n+   * If this method returns false, this Container is inheriting the Set from\n+   * an ancestor, or from the current KeyboardFocusManager.\n+   *\n+   * @exception IllegalArgumentException If id is not one of\n+   * KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n+   * KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS,\n+   * or KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS.\n+   *\n+   * @since 1.4\n+   */\n   public boolean areFocusTraversalKeysSet(int id)\n   {\n     if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n@@ -1060,8 +1110,16 @@ public boolean isFocusCycleRoot()\n   public void transferFocusDownCycle()\n   {\n   }\n-  \n-  public void applyComponentOrientation(ComponentOrientation o)\n+\n+  /**\n+   * Sets the ComponentOrientation property of this container and all components\n+   * contained within it.\n+   *\n+   * @exception NullPointerException If orientation is null\n+   *\n+   * @since 1.4\n+   */\n+  public void applyComponentOrientation (ComponentOrientation orientation)\n   {\n     if (orientation == null)\n       throw new NullPointerException ();"}, {"sha": "71267a579f0645b126ef8f138f69eca25e720999", "filename": "libjava/java/awt/ContainerOrderFocusTraversalPolicy.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainerOrderFocusTraversalPolicy.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -48,8 +48,11 @@ public class ContainerOrderFocusTraversalPolicy extends FocusTraversalPolicy\n {\n   static final long serialVersionUID = 486933713763926351L;\n \n-  private boolean downCycle = true;\n+  private boolean implicitDownCycleTraversal = true;\n \n+  /**\n+   * Creates the <code>ContainerOrderFocusTraversalPolicy</code> object.\n+   */\n   public ContainerOrderFocusTraversalPolicy()\n   {\n     throw new Error(\"not implemented\");\n@@ -82,17 +85,19 @@ public Component getDefaultComponent(Container root)\n \n   public void setImplicitDownCycleTraversal(boolean value)\n   {\n-    downCycle = value;\n+    boolean implicitDownCycleTraversal = value;\n   }\n \n   public boolean getImplicitDownCycleTraversal()\n   {\n-    return downCycle;\n+    return implicitDownCycleTraversal;\n   }\n \n   protected boolean accept(Component current)\n   {\n-    return current.visible && current.isDisplayable() && current.enabled\n-      && current.focusable;\n+    return (current.visible\n+            && current.isDisplayable()\n+            && current.enabled\n+            && current.focusable);\n   }\n } // class ContainerOrderFocusTraversalPolicy"}, {"sha": "9aa2ea6f346517567dfcabe8a792b16b73f644a4", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -49,7 +49,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@redhat.com>\n   */\n-public class Dialog extends Window implements java.io.Serializable\n+public class Dialog extends Window\n {\n \n /*\n@@ -92,6 +92,10 @@ public class Dialog extends Window implements java.io.Serializable\n   * parent, that is not resizable and not modal, and which has no title.\n   *\n   * @param parent The parent frame of this dialog box.\n+  *\n+  * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n+  * is not from a screen device, or if owner is null. This exception is always\n+  * thrown when GraphicsEnvironment.isHeadless() returns true.\n   */\n public\n Dialog(Frame parent)\n@@ -108,6 +112,10 @@ public class Dialog extends Window implements java.io.Serializable\n   * @param parent The parent frame of this dialog box.\n   * @param modal <true> if this dialog box is modal, <code>false</code>\n   * otherwise.\n+  *\n+  * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n+  * is not from a screen device, or if owner is null. This exception is always\n+  * thrown when GraphicsEnvironment.isHeadless() returns true.\n   */\n public\n Dialog(Frame parent, boolean modal)\n@@ -124,6 +132,10 @@ public class Dialog extends Window implements java.io.Serializable\n   *\n   * @param parent The parent frame of this dialog box.\n   * @param title The title string for this dialog box.\n+  *\n+  * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n+  * is not from a screen device, or if owner is null. This exception is always\n+  * thrown when GraphicsEnvironment.isHeadless() returns true.\n   */\n public\n Dialog(Frame parent, String title)\n@@ -160,12 +172,30 @@ public class Dialog extends Window implements java.io.Serializable\n   this (owner, \"\", false);\n }\n \n+/**\n+ * Initializes a new instance of <code>Dialog</code> with the specified,\n+ * parent and title, that is not resizable.\n+ *\n+ * @exception IllegalArgumentException If parent is null. This exception is\n+ * always thrown when GraphicsEnvironment.isHeadless() returns true.\n+ *\n+ * @since 1.2\n+ */\n public\n Dialog (Dialog owner, String title)\n {\n   this (owner, title, false);\n }\n \n+/**\n+ * Initializes a new instance of <code>Dialog</code> with the specified,\n+ * parent, title and modality, that is not resizable.\n+ *\n+ * @exception IllegalArgumentException If parent is null. This exception is\n+ * always thrown when GraphicsEnvironment.isHeadless() returns true.\n+ *\n+ * @since 1.2\n+ */\n public\n Dialog (Dialog owner, String title, boolean modal)\n {"}, {"sha": "3723a4528ed3ca48312282428e087063c558191d", "filename": "libjava/java/awt/Font.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FFont.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FFont.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFont.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -39,6 +39,7 @@\n package java.awt;\n \n import java.awt.peer.FontPeer;\n+import java.io.Serializable;\n import java.util.StringTokenizer;\n \n /**\n@@ -47,7 +48,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Warren Levy <warrenl@cygnus.com>\n   */\n-public class Font implements java.io.Serializable\n+public class Font implements Serializable\n {\n \n /*"}, {"sha": "8c08a2e9b7b572bd6314f7e8bc679630dfde8955", "filename": "libjava/java/awt/Frame.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFrame.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -42,7 +42,6 @@\n import java.awt.peer.WindowPeer;\n import java.awt.peer.ContainerPeer;\n import java.awt.peer.ComponentPeer;\n-import java.io.Serializable;\n import java.util.Enumeration;\n import java.util.Vector;\n \n@@ -52,7 +51,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class Frame extends Window implements MenuContainer, Serializable\n+public class Frame extends Window implements MenuContainer\n {\n \n /*"}, {"sha": "9e59041f781a76da99278842c684b8c5d2f9fd6f", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -45,6 +45,7 @@\n import java.awt.event.ItemListener;\n import java.awt.peer.ListPeer;\n import java.awt.peer.ComponentPeer;\n+import java.util.EventListener;\n import java.util.Vector;\n import javax.accessibility.Accessible;\n \n@@ -1030,4 +1031,38 @@ else if (e.id <= ActionEvent.ACTION_LAST\n   return \"multiple=\" + multipleMode + \",rows=\" + rows + super.paramString();\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this <code>List</code>. FooListeners are registered using the \n+   * addFooListener method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == ActionListener.class)\n+      return AWTEventMulticaster.getListeners (action_listeners, listenerType);\n+    \n+    if (listenerType == ItemListener.class)\n+      return AWTEventMulticaster.getListeners (item_listeners, listenerType);\n+\n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Returns all action listeners registered to this object.\n+   */\n+  public ActionListener[] getActionListeners ()\n+  {\n+    return (ActionListener[]) getListeners (ActionListener.class);\n+  }\n+  \n+  /**\n+   * Returns all action listeners registered to this object.\n+   */\n+  public ItemListener[] getItemListeners ()\n+  {\n+    return (ItemListener[]) getListeners (ItemListener.class);\n+  }\n } // class List"}, {"sha": "2ca9467e2b167a625bfd3869d47811da9e5924f9", "filename": "libjava/java/awt/Menu.java", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenu.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -175,6 +175,18 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n {\n   return(items.size());\n }\n+\n+/**\n+ * Returns the number of items in this menu.\n+ *\n+ * @return The number of items in this menu.\n+ *\n+ * @deprecated As of JDK 1.1, replaced by getItemCount().\n+ */\n+public int countItems ()\n+{\n+  return getItemCount ();\n+}\n  \n /*************************************************************************/\n "}, {"sha": "f78f402d3c9f55438e3822c14b7b8225213b8e9a", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -42,6 +42,7 @@\n import java.awt.peer.ComponentPeer;\n import java.awt.event.AdjustmentListener;\n import java.awt.event.AdjustmentEvent;\n+import java.util.EventListener;\n import javax.accessibility.Accessible;\n \n /**\n@@ -699,5 +700,29 @@ public class Scrollbar extends Component implements Accessible,\n \t + super.paramString());\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this <code>Scrollbar</code>. FooListeners are registered using the \n+   * addFooListener method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == AdjustmentListener.class)\n+      return AWTEventMulticaster.getListeners (adjustment_listeners,\n+                                               listenerType);\n+\n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Returns an array of all registered adjustment listeners.\n+   */\n+  public AdjustmentListener[] getAdjustmentListeners ()\n+  {\n+    return (AdjustmentListener[]) getListeners (AdjustmentListener.class);\n+  }\n } // class Scrollbar \n "}, {"sha": "cbe7dc9169d582182309d53e323b8dbd0704531a", "filename": "libjava/java/awt/TextComponent.java", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextComponent.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -42,6 +42,7 @@\n import java.awt.event.TextListener;\n import java.awt.peer.TextComponentPeer;\n import java.awt.peer.ComponentPeer;\n+import java.util.EventListener;\n \n /**\n   * This class provides common functionality for widgets than \n@@ -442,5 +443,28 @@ public class TextComponent extends Component implements java.io.Serializable\n   return(getClass().getName() + \"(text=\" + getText() + \")\");\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this <code>TextComponent</code>. FooListeners are registered using\n+   * the addFooListener method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == TextListener.class)\n+      return AWTEventMulticaster.getListeners (textListener, listenerType);\n+\n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Returns all text listeners registered to this object.\n+   */\n+  public TextListener[] getTextListeners ()\n+  {\n+    return (TextListener[]) getListeners (TextListener.class);\n+  }\n } // class TextComponent\n "}, {"sha": "c2c2be7215e5dde240330d576d950a96cb18e92e", "filename": "libjava/java/awt/TextField.java", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextField.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -43,6 +43,7 @@\n import java.awt.peer.TextFieldPeer;\n import java.awt.peer.TextComponentPeer;\n import java.awt.peer.ComponentPeer;\n+import java.util.EventListener;\n \n /**\n   * This class implements a single line text entry field widget\n@@ -489,4 +490,32 @@ public class TextField extends TextComponent\n          getEchoChar());\n }\n \n+  /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this <code>TextField</code>. FooListeners are registered using the\n+   * addFooListener method.\n+   *\n+   * @exception ClassCastException If listenerType doesn't specify a class or\n+   * interface that implements java.util.EventListener.\n+   *\n+   * @since 1.3\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    if (listenerType == ActionListener.class)\n+      return AWTEventMulticaster.getListeners (action_listeners, listenerType);\n+\n+    return super.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * Return all ActionListeners register to this <code>TextField</code> object\n+   * as an array.\n+   *\n+   * @since 1.4\n+   */\n+  public ActionListener[] getActionListeners ()\n+  {\n+    return (ActionListener[]) getListeners (ActionListener.class);\n+  }\n } // class TextField"}, {"sha": "805152e5405f2ccdb370e316769540ce5a3f219f", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -39,7 +39,9 @@\n package java.awt;\n \n import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n import java.awt.event.WindowListener;\n+import java.awt.event.WindowStateListener;\n import java.awt.peer.WindowPeer;\n import java.awt.peer.ComponentPeer;\n import java.util.EventListener;\n@@ -61,6 +63,8 @@ public class Window extends Container\n   private int windowSerializedDataVersion = 0; // FIXME\n \n   private transient WindowListener windowListener;\n+  private transient WindowFocusListener windowFocusListener;\n+  private transient WindowStateListener windowStateListener;\n   private transient GraphicsConfiguration graphicsConfiguration;\n \n   /** \n@@ -380,6 +384,68 @@ public synchronized WindowListener[] getWindowListeners()\n                                        WindowListener.class);\n   }\n \n+  /**\n+   * Returns an array of all the window focus listeners registered on this\n+   * window.\n+   *\n+   * @since 1.4\n+   */\n+  public synchronized WindowFocusListener[] getWindowFocusListeners()\n+  {\n+    return (WindowFocusListener[])\n+      AWTEventMulticaster.getListeners(windowFocusListener,\n+                                       WindowFocusListener.class);\n+  }\n+  \n+  /**\n+   * Returns an array of all the window state listeners registered on this\n+   * window.\n+   *\n+   * @since 1.4\n+   */\n+  public synchronized WindowStateListener[] getWindowStateListeners()\n+  {\n+    return (WindowStateListener[])\n+      AWTEventMulticaster.getListeners(windowStateListener,\n+                                       WindowStateListener.class);\n+  }\n+\n+  /**\n+   * Adds the specified listener to this window.\n+   */\n+  public void addWindowFocusListener (WindowFocusListener wfl)\n+  {\n+    AWTEventMulticaster.add (windowFocusListener, wfl);\n+  }\n+  \n+  /**\n+   * Adds the specified listener to this window.\n+   *\n+   * @since 1.4\n+   */\n+  public void addWindowStateListener (WindowStateListener wsl)\n+  {\n+    AWTEventMulticaster.add (windowStateListener, wsl);  \n+  }\n+  \n+  /**\n+   * Removes the specified listener from this window.\n+   */\n+  public void removeWindowFocusListener (WindowFocusListener wfl)\n+  {\n+    AWTEventMulticaster.remove (windowFocusListener, wfl);\n+  }\n+  \n+  /**\n+   * Removes the specified listener from this window.\n+   *\n+   * @since 1.4\n+   */\n+  public void removeWindowStateListener (WindowStateListener wsl)\n+  {\n+    AWTEventMulticaster.remove (windowStateListener, wsl);\n+  }\n+\n   /**\n    * Returns an array of all the objects currently registered as FooListeners\n    * upon this Window. FooListeners are registered using the addFooListener"}, {"sha": "f542bd89286a9e3406db2b4b03dab81c9a06454d", "filename": "libjava/java/awt/datatransfer/DataFlavor.java", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30df932c23db0f7d3b7353f6fee11c4ec27dd9c2/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java?ref=30df932c23db0f7d3b7353f6fee11c4ec27dd9c2", "patch": "@@ -47,6 +47,8 @@\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.UnsupportedEncodingException;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n \n /**\n   * This class represents a particular data format used for transferring\n@@ -999,5 +1001,59 @@ public Reader getReaderForText(Transferable transferable)\n     throw new UnsupportedFlavorException(this);\n }\n \n+  /**\n+   * Returns whether the representation class for this DataFlavor is\n+   * @see java.nio.ByteBuffer or a subclass thereof.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean isRepresentationClassByteBuffer ()\n+  {\n+    try\n+      {\n+        return ByteBuffer.class.isAssignableFrom (representationClass);\n+      }\n+    catch (ClassNotFoundException e)\n+      {\n+        return false;\n+      }\n+  }\n+\n+  /**\n+   * Returns whether the representation class for this DataFlavor is\n+   * @see java.nio.CharBuffer or a subclass thereof.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean isRepresentationClassCharBuffer ()\n+  {\n+    try\n+      {\n+        return CharBuffer.class.isAssignableFrom (representationClass);\n+      }\n+    catch (ClassNotFoundException e)\n+      {\n+        return false;\n+      }\n+  }\n+\n+  /**\n+   * Returns whether the representation class for this DataFlavor is\n+   * @see java.io.Reader or a subclass thereof.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean isRepresentationClassReader ()\n+  {\n+    try\n+      {\n+        return Reader.class.isAssignableFrom (representationClass);\n+      }\n+    catch (ClassNotFoundException e)\n+      {\n+        return false;\n+      }\n+  }\n+\n } // class DataFlavor\n "}]}