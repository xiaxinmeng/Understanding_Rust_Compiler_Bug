{"sha": "d028561e3ccb2dfebd893927a9838f7cf6648a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyODU2MWUzY2NiMmRmZWJkODkzOTI3YTk4MzhmN2NmNjY0OGE4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-01-08T16:39:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-01-08T16:39:00Z"}, "message": "re PR tree-optimization/51680 (g++ 4.7 fails to inline trivial template stuff)\n\n\n\tPR tree-optimize/51680\n\t* ipa-inline-analyss.c (evaluate_properties_for_edge): Fix conditoin on when\n\tknown_vals needs to be computed; cleanup.\n\nFrom-SVN: r182995", "tree": {"sha": "87f7f468983db9f01d7513e26c69f14d1da260e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f7f468983db9f01d7513e26c69f14d1da260e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d028561e3ccb2dfebd893927a9838f7cf6648a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d028561e3ccb2dfebd893927a9838f7cf6648a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d028561e3ccb2dfebd893927a9838f7cf6648a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d028561e3ccb2dfebd893927a9838f7cf6648a87/comments", "author": null, "committer": null, "parents": [{"sha": "3e31d3ba2c9161817831df25bbfa3031aeeaffb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e31d3ba2c9161817831df25bbfa3031aeeaffb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e31d3ba2c9161817831df25bbfa3031aeeaffb2"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "01e160ceb04a593827695899649e2dbee754c841", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d028561e3ccb2dfebd893927a9838f7cf6648a87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d028561e3ccb2dfebd893927a9838f7cf6648a87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d028561e3ccb2dfebd893927a9838f7cf6648a87", "patch": "@@ -1,3 +1,9 @@\n+2012-01-08  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/51680\n+\t* ipa-inline-analyss.c (evaluate_properties_for_edge): Fix conditoin on when\n+\tknown_vals needs to be computed; cleanup.\n+\n 2012-01-08  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/51694"}, {"sha": "4026f4ed50f94e2db54349c5a4d895adee0f03c4", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d028561e3ccb2dfebd893927a9838f7cf6648a87/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d028561e3ccb2dfebd893927a9838f7cf6648a87/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=d028561e3ccb2dfebd893927a9838f7cf6648a87", "patch": "@@ -718,7 +718,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n {\n   struct cgraph_node *callee = cgraph_function_or_thunk_node (e->callee, NULL);\n   struct inline_summary *info = inline_summary (callee);\n-  int i;\n+  VEC (tree, heap) *known_vals = NULL;\n \n   if (clause_ptr)\n     *clause_ptr = inline_p ? 0 : 1 << predicate_not_inlined_condition;\n@@ -728,13 +728,13 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n     *known_binfos_ptr = NULL;\n \n   if (ipa_node_params_vector\n+      && !e->call_stmt_cannot_inline_p\n       && ((clause_ptr && info->conds) || known_vals_ptr || known_binfos_ptr))\n     {\n       struct ipa_node_params *parms_info;\n       struct ipa_edge_args *args = IPA_EDGE_REF (e);\n       struct inline_edge_summary *es = inline_edge_summary (e);\n       int i, count = ipa_get_cs_argument_count (args);\n-      VEC (tree, heap) *known_vals = NULL;\n \n       if (e->caller->global.inlined_to)\n         parms_info = IPA_NODE_REF (e->caller->global.inlined_to);\n@@ -752,9 +752,9 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t\t\t\t   ipa_get_ith_jump_func (args, i));\n \t  if (cst)\n \t    {\n-\t      if (info->conds && TREE_CODE (cst) != TREE_BINFO)\n+\t      if (known_vals && TREE_CODE (cst) != TREE_BINFO)\n \t\tVEC_replace (tree, known_vals, i, cst);\n-\t      else if (known_binfos_ptr != NULL)\n+\t      else if (known_binfos_ptr != NULL && TREE_CODE (cst) == TREE_BINFO)\n \t\tVEC_replace (tree, *known_binfos_ptr, i, cst);\n \t    }\n \t  else if (inline_p\n@@ -763,20 +763,16 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t\t\t  i)->change_prob)\n \t    VEC_replace (tree, known_vals, i, error_mark_node);\n \t}\n-\n-      if (clause_ptr && info->conds)\n-\t*clause_ptr = evaluate_conditions_for_known_args (callee, inline_p,\n-\t\t\t\t\t\t\t  known_vals);\n-\n-      if (known_vals_ptr)\n-\t*known_vals_ptr = known_vals;\n-      else\n-\tVEC_free (tree, heap, known_vals);\n     }\n \n-  if (clause_ptr && !info->conds)\n-    for (i = 0; i < (int)VEC_length (condition, info->conds); i++)\n-      *clause_ptr |= 1 << (i + predicate_first_dynamic_condition);\n+  if (clause_ptr)\n+    *clause_ptr = evaluate_conditions_for_known_args (callee, inline_p,\n+\t\t\t\t\t\t      known_vals);\n+\n+  if (known_vals_ptr)\n+    *known_vals_ptr = known_vals;\n+  else\n+    VEC_free (tree, heap, known_vals);\n }\n \n "}]}