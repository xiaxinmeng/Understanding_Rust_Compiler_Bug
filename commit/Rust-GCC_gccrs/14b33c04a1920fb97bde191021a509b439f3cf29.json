{"sha": "14b33c04a1920fb97bde191021a509b439f3cf29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiMzNjMDRhMTkyMGZiOTdiZGUxOTEwMjFhNTA5YjQzOWYzY2YyOQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-09-15T17:21:48Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-09-15T17:21:48Z"}, "message": "tree-data-ref.c (analyze_array_indexes): Add estimate_only parameter.\n\n2005-09-15  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-data-ref.c (analyze_array_indexes): Add estimate_only\n\tparameter.\n\tUpdate callers.\n\t(estimate_iters_using_array): New function.\n\t* tree-data-ref.h (estimate_iters_using_array): Prototype\n\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined):\n\tUse estimate_iters_using_array instead of analyze_array.\n\nFrom-SVN: r104312", "tree": {"sha": "be7a77e576a00aa72443ccbc713c82a161c9c2f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7a77e576a00aa72443ccbc713c82a161c9c2f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b33c04a1920fb97bde191021a509b439f3cf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b33c04a1920fb97bde191021a509b439f3cf29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b33c04a1920fb97bde191021a509b439f3cf29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b33c04a1920fb97bde191021a509b439f3cf29/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "312ea2368e81a4e198a3e414464413d1c5334038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312ea2368e81a4e198a3e414464413d1c5334038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312ea2368e81a4e198a3e414464413d1c5334038"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "baa35eb1cc477dd8705ef79bf7111b36cde44dd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14b33c04a1920fb97bde191021a509b439f3cf29", "patch": "@@ -1,3 +1,13 @@\n+2005-09-15  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-data-ref.c (analyze_array_indexes): Add estimate_only\n+\tparameter.\n+\tUpdate callers.\n+\t(estimate_iters_using_array): New function.\n+\t* tree-data-ref.h (estimate_iters_using_array): Prototype\n+\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined):\n+\tUse estimate_iters_using_array instead of analyze_array.\n+\t\n 2005-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-nested.c (get_frame_type): Mark the \"non-local frame structure\""}, {"sha": "6cf285f3180de4ea5a6b37a4e7e2d4d4c8f7ca10", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=14b33c04a1920fb97bde191021a509b439f3cf29", "patch": "@@ -799,13 +799,16 @@ estimate_niter_from_size_of_data (struct loop *loop,\n /* Given an ARRAY_REF node REF, records its access functions.\n    Example: given A[i][3], record in ACCESS_FNS the opnd1 function,\n    i.e. the constant \"3\", then recursively call the function on opnd0,\n-   i.e. the ARRAY_REF \"A[i]\".  The function returns the base name:\n-   \"A\".  */\n+   i.e. the ARRAY_REF \"A[i]\".  \n+   If ESTIMATE_ONLY is true, we just set the estimated number of loop\n+   iterations, we don't store the access function.\n+   The function returns the base name: \"A\".  */\n \n static tree\n analyze_array_indexes (struct loop *loop,\n \t\t       VEC(tree,heap) **access_fns, \n-\t\t       tree ref, tree stmt)\n+\t\t       tree ref, tree stmt,\n+\t\t       bool estimate_only)\n {\n   tree opnd0, opnd1;\n   tree access_fn;\n@@ -822,18 +825,29 @@ analyze_array_indexes (struct loop *loop,\n \n   if (chrec_contains_undetermined (loop->estimated_nb_iterations))\n     estimate_niter_from_size_of_data (loop, opnd0, access_fn, stmt);\n-  \n-  VEC_safe_push (tree, heap, *access_fns, access_fn);\n+\n+  if (!estimate_only)\n+    VEC_safe_push (tree, heap, *access_fns, access_fn);\n   \n   /* Recursively record other array access functions.  */\n   if (TREE_CODE (opnd0) == ARRAY_REF)\n-    return analyze_array_indexes (loop, access_fns, opnd0, stmt);\n+    return analyze_array_indexes (loop, access_fns, opnd0, stmt, estimate_only);\n   \n   /* Return the base name of the data access.  */\n   else\n     return opnd0;\n }\n \n+/* For an array reference REF contained in STMT, attempt to bound the\n+   number of iterations in the loop containing STMT  */\n+\n+void \n+estimate_iters_using_array (tree stmt, tree ref)\n+{\n+  analyze_array_indexes (loop_containing_stmt (stmt), NULL, ref, stmt, \n+\t\t\t true);\n+}\n+  \n /* For a data reference REF contained in the statement STMT, initialize\n    a DATA_REFERENCE structure, and return it.  IS_READ flag has to be\n    set to true when REF is in the right hand side of an\n@@ -859,7 +873,7 @@ analyze_array (tree stmt, tree ref, bool is_read)\n   DR_REF (res) = ref;\n   acc_fns = VEC_alloc (tree, heap, 3);\n   DR_BASE_OBJECT (res) = analyze_array_indexes \n-    (loop_containing_stmt (stmt), &acc_fns, ref, stmt);\n+    (loop_containing_stmt (stmt), &acc_fns, ref, stmt, false);\n   DR_TYPE (res) = ARRAY_REF_TYPE;\n   DR_SET_ACCESS_FNS (res, acc_fns);\n   DR_IS_READ (res) = is_read;"}, {"sha": "0677db5251c183b0415be6070b0831ff5042aef5", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=14b33c04a1920fb97bde191021a509b439f3cf29", "patch": "@@ -265,6 +265,7 @@ extern void free_dependence_relations (varray_type);\n extern void free_data_refs (varray_type);\n extern void compute_subscript_distance (struct data_dependence_relation *);\n extern struct data_reference *analyze_array (tree, tree, bool);\n+extern void estimate_iters_using_array (tree, tree);\n \n \n \f"}, {"sha": "544ead2850a6abde03dc4f789e8c0c9761d3f494", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b33c04a1920fb97bde191021a509b439f3cf29/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=14b33c04a1920fb97bde191021a509b439f3cf29", "patch": "@@ -1434,10 +1434,10 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \t\t/* For each array access, analyze its access function\n \t\t   and record a bound on the loop iteration domain.  */\n \t\tif (TREE_CODE (op1) == ARRAY_REF)\n-\t\t  analyze_array (stmt, op1, true);\n+\t\t  estimate_iters_using_array (stmt, op1);\n \n \t\tif (TREE_CODE (op0) == ARRAY_REF)\n-\t\t  analyze_array (stmt, op0, false);\n+\t\t  estimate_iters_using_array (stmt, op0);\n \n \t\t/* For each signed type variable in LOOP, analyze its\n \t\t   scalar evolution and record a bound of the loop\n@@ -1488,7 +1488,7 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \t\tfor (args = TREE_OPERAND (stmt, 1); args;\n \t\t     args = TREE_CHAIN (args))\n \t\t  if (TREE_CODE (TREE_VALUE (args)) == ARRAY_REF)\n-\t\t    analyze_array (stmt, TREE_VALUE (args), true);\n+\t\t    estimate_iters_using_array (stmt, TREE_VALUE (args));\n \n \t\tbreak;\n \t      }"}]}