{"sha": "4a7fca26b4c148457bef6da0975f1122aa106271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3ZmNhMjZiNGMxNDg0NTdiZWY2ZGEwOTc1ZjExMjJhYTEwNjI3MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-22T12:03:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-22T12:03:00Z"}, "message": "lra.c (lra): Remove call to recog_init.\n\ngcc/\n\t* lra.c (lra): Remove call to recog_init.\n\t* config/i386/i386.md (preferred_for_speed): New attribute\n\t(*float<SWI48:mode><MODEF:mode>2_sse): Override it instead of\n\t\"enabled\".  Remove check for sched1.\n\ngcc/testsuite/\n\t* gcc.target/i386/conversion-2.c: New test.\n\nFrom-SVN: r216557", "tree": {"sha": "e11f8bfb0f667898e5c7d0e0de42240af5ea220c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11f8bfb0f667898e5c7d0e0de42240af5ea220c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a7fca26b4c148457bef6da0975f1122aa106271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7fca26b4c148457bef6da0975f1122aa106271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a7fca26b4c148457bef6da0975f1122aa106271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7fca26b4c148457bef6da0975f1122aa106271/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "795693c185eddff2b83be4b194da5e016f0717b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795693c185eddff2b83be4b194da5e016f0717b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795693c185eddff2b83be4b194da5e016f0717b0"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "e34b69801105795c21a37852adb386e292a53056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a7fca26b4c148457bef6da0975f1122aa106271", "patch": "@@ -1,3 +1,10 @@\n+2014-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lra.c (lra): Remove call to recog_init.\n+\t* config/i386/i386.md (preferred_for_speed): New attribute\n+\t(*float<SWI48:mode><MODEF:mode>2_sse): Override it instead of\n+\t\"enabled\".  Remove check for sched1.\n+\n 2014-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* recog.h (recog_data_d): Remove enabled_alternatives."}, {"sha": "7ba07c3ae7cbb7838c53ee976aa5b12b2c227385", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4a7fca26b4c148457bef6da0975f1122aa106271", "patch": "@@ -779,6 +779,8 @@\n \t]\n \t(const_int 1)))\n \n+(define_attr \"preferred_for_speed\" \"\" (const_int 1))\n+\n ;; Describe a user's asm statement.\n (define_asm_attributes\n   [(set_attr \"length\" \"128\")\n@@ -4794,16 +4796,12 @@\n               (symbol_ref \"TARGET_MIX_SSE_I387\n                            && X87_ENABLE_FLOAT (<MODEF:MODE>mode,\n                                                 <SWI48:MODE>mode)\")\n-            (eq_attr \"alternative\" \"1\")\n-              /* ??? For sched1 we need constrain_operands to be able to\n-                 select an alternative.  Leave this enabled before RA.  */\n-              (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\n-                           || optimize_function_for_size_p (cfun)\n-                           || !(reload_completed\n-                                || reload_in_progress\n-                                || lra_in_progress)\")\n            ]\n            (symbol_ref \"true\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+              (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\")]\n+           (symbol_ref \"true\")))\n    ])\n \n (define_insn \"*float<SWI48x:mode><MODEF:mode>2_i387\""}, {"sha": "dfca2df22916aa2f19fd7ae3cd59ca77a97af3ee", "filename": "gcc/lra.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=4a7fca26b4c148457bef6da0975f1122aa106271", "patch": "@@ -2120,11 +2120,6 @@ lra (FILE *f)\n \n   lra_in_progress = 1;\n \n-  /* The enable attributes can change their values as LRA starts\n-     although it is a bad practice.  To prevent reuse of the outdated\n-     values, clear them.  */\n-  recog_init ();\n-\n   lra_live_range_iter = lra_coalesce_iter = lra_constraint_iter = 0;\n   lra_assignment_iter = lra_assignment_iter_after_spill = 0;\n   lra_inheritance_iter = lra_undo_inheritance_iter = 0;"}, {"sha": "964037a1e966736a94275e7c04467786ef6e8fd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a7fca26b4c148457bef6da0975f1122aa106271", "patch": "@@ -1,3 +1,7 @@\n+2014-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/i386/conversion-2.c: New test.\n+\n 2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n \t    Yury Gribov  <y.gribov@samsung.com>\n "}, {"sha": "cca149a616655a04d03ac4dec3309154f78c6b54", "filename": "gcc/testsuite/gcc.target/i386/conversion-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a7fca26b4c148457bef6da0975f1122aa106271/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fconversion-2.c?ref=4a7fca26b4c148457bef6da0975f1122aa106271", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-toplevel-reorder -mtune=bdver2\" } */\n+/* { dg-additional-options \"-mregparm=1 -msse -mfpmath=sse\" { target ia32 } } */\n+\n+void __attribute__ ((hot))\n+f1 (int x)\n+{\n+  register float f asm (\"%xmm0\") = x;\n+  asm volatile (\"\" :: \"x\" (f));\n+}\n+\n+void __attribute__ ((cold))\n+f2 (int x)\n+{\n+  register float f asm (\"%xmm1\") = x;\n+  asm volatile (\"\" :: \"x\" (f));\n+}\n+\n+void __attribute__ ((hot))\n+f3 (int x)\n+{\n+  register float f asm (\"%xmm2\") = x;\n+  asm volatile (\"\" :: \"x\" (f));\n+}\n+\n+void __attribute__ ((cold))\n+f4 (int x)\n+{\n+  register float f asm (\"%xmm3\") = x;\n+  asm volatile (\"\" :: \"x\" (f));\n+}\n+\n+/* { dg-final { scan-assembler \"sp\\\\\\), %xmm0\" } } */\n+/* { dg-final { scan-assembler \"(ax|di), %xmm1\" } } */\n+/* { dg-final { scan-assembler \"sp\\\\\\), %xmm2\" } } */\n+/* { dg-final { scan-assembler \"(ax|di), %xmm3\" } } */"}]}