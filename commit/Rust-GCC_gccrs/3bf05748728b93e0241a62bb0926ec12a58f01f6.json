{"sha": "3bf05748728b93e0241a62bb0926ec12a58f01f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmMDU3NDg3MjhiOTNlMDI0MWE2MmJiMDkyNmVjMTJhNThmMDFmNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-05-01T01:51:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-05-01T01:51:33Z"}, "message": "builtins.c (fold_builtin_round): Fix comment typo.\n\n\t* builtins.c (fold_builtin_round): Fix comment typo.\n\t(fold_builtin_lround): New function.\n\t(fold_builtin): Use it.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-rounding-1.c: New test.\n\t* gcc.dg/builtins-25.c: Delete.\n\t* gcc.dg/builtins-29.c: Delete.\n\nFrom-SVN: r81380", "tree": {"sha": "c6cc39f425e081d97178cd6f716c458a546f39c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cc39f425e081d97178cd6f716c458a546f39c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf05748728b93e0241a62bb0926ec12a58f01f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf05748728b93e0241a62bb0926ec12a58f01f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf05748728b93e0241a62bb0926ec12a58f01f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf05748728b93e0241a62bb0926ec12a58f01f6/comments", "author": null, "committer": null, "parents": [{"sha": "c08732313cfc81fadfe6487a722f16931f9dae6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08732313cfc81fadfe6487a722f16931f9dae6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08732313cfc81fadfe6487a722f16931f9dae6a"}], "stats": {"total": 448, "additions": 163, "deletions": 285}, "files": [{"sha": "f4e6cb7fb0c6f46570ea7d59a38ec2fe6275fa17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bf05748728b93e0241a62bb0926ec12a58f01f6", "patch": "@@ -1,3 +1,9 @@\n+2004-04-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_round): Fix comment typo.\n+\t(fold_builtin_lround): New function.\n+\t(fold_builtin): Use it.\n+\n 2004-04-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/11608"}, {"sha": "0d04f0311a99c8919c6126916587a088a1fc3159", "filename": "gcc/builtins.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3bf05748728b93e0241a62bb0926ec12a58f01f6", "patch": "@@ -6254,7 +6254,7 @@ fold_builtin_round (tree exp)\n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n     return 0;\n \n-  /* Optimize ceil of constant value.  */\n+  /* Optimize round of constant value.  */\n   arg = TREE_VALUE (arglist);\n   if (TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n     {\n@@ -6274,6 +6274,42 @@ fold_builtin_round (tree exp)\n   return fold_trunc_transparent_mathfn (exp);\n }\n \n+/* Fold function call to builtin lround, lroundf or lroundl (or the\n+   corresponding long long versions).  Return NULL_TREE if no\n+   simplification can be made.  */\n+\n+static tree\n+fold_builtin_lround (tree exp)\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg;\n+\n+  if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  /* Optimize lround of constant value.  */\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+    {\n+      const REAL_VALUE_TYPE x = TREE_REAL_CST (arg);\n+\n+      if (! REAL_VALUE_ISNAN (x) && ! REAL_VALUE_ISINF (x))\n+\t{\n+\t  tree itype = TREE_TYPE (exp), ftype = TREE_TYPE (arg), result;\n+\t  HOST_WIDE_INT hi, lo;\n+\t  REAL_VALUE_TYPE r;\n+\n+\t  real_round (&r, TYPE_MODE (ftype), &x);\n+\t  REAL_VALUE_TO_INT (&lo, &hi, r);\n+\t  result = build_int_2 (lo, hi);\n+\t  if (int_fits_type_p (result, itype))\n+\t    return fold_convert (itype, result);\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n /* Fold function call to builtin ffs, clz, ctz, popcount and parity\n    and their long and long long variants (i.e. ffsl and ffsll).\n    Return NULL_TREE if no simplification can be made.  */\n@@ -7376,6 +7412,14 @@ fold_builtin (tree exp)\n     case BUILT_IN_RINTL:\n       return fold_trunc_transparent_mathfn (exp);\n \n+    case BUILT_IN_LROUND:\n+    case BUILT_IN_LROUNDF:\n+    case BUILT_IN_LROUNDL:\n+    case BUILT_IN_LLROUND:\n+    case BUILT_IN_LLROUNDF:\n+    case BUILT_IN_LLROUNDL:\n+      return fold_builtin_lround (exp);\n+\n     case BUILT_IN_FFS:\n     case BUILT_IN_FFSL:\n     case BUILT_IN_FFSLL:"}, {"sha": "e8f8eedffb2f1ca7941c210780786e8957a47427", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bf05748728b93e0241a62bb0926ec12a58f01f6", "patch": "@@ -1,3 +1,9 @@\n+2004-04-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-rounding-1.c: New test.\n+\t* gcc.dg/builtins-25.c: Delete.\n+\t* gcc.dg/builtins-29.c: Delete.\n+\n 2004-04-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* gcc.dg/sibcall-3.c: Delete s390 from expected fail list."}, {"sha": "495056615cab43d0e97aefc7532efc10451c97bd", "filename": "gcc/testsuite/gcc.dg/builtins-25.c", "status": "removed", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08732313cfc81fadfe6487a722f16931f9dae6a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08732313cfc81fadfe6487a722f16931f9dae6a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-25.c?ref=c08732313cfc81fadfe6487a722f16931f9dae6a", "patch": "@@ -1,188 +0,0 @@\n-/* Copyright (C) 2003 Free Software Foundation.\n-\n-   Check that constant folding of built-in math functions doesn't\n-   break anything and produces the expected results.\n-\n-   Written by Roger Sayle, 28th June 2003.  */\n-\n-/* { dg-do link } */\n-/* { dg-options \"-O2\" } */\n-\n-extern void link_error(void);\n-\n-extern double trunc(double);\n-extern double floor(double);\n-extern double ceil(double);\n-\n-extern float truncf(float);\n-extern float floorf(float);\n-extern float ceilf(float);\n-\n-extern long double truncl(long double);\n-extern long double floorl(long double);\n-extern long double ceill(long double);\n-\n-void test()\n-{\n-  if (trunc (0.0) != 0.0)\n-    link_error ();\n-  if (floor (0.0) != 0.0)\n-    link_error ();\n-  if (ceil (0.0) != 0.0)\n-    link_error ();\n-\n-  if (trunc (6.0) != 6.0)\n-    link_error ();\n-  if (floor (6.0) != 6.0)\n-    link_error ();\n-  if (ceil (6.0) != 6.0)\n-    link_error ();\n-\n-  if (trunc (-8.0) != -8.0)\n-    link_error ();\n-  if (floor (-8.0) != -8.0)\n-    link_error ();\n-  if (ceil (-8.0) != -8.0)\n-    link_error ();\n-\n-  if (trunc (3.2) != 3.0)\n-    link_error ();\n-  if (floor (3.2) != 3.0)\n-    link_error ();\n-  if (ceil (3.2) != 4.0)\n-    link_error ();\n-\n-  if (trunc (-2.8) != -2.0)\n-    link_error ();\n-  if (floor (-2.8) != -3.0)\n-    link_error ();\n-  if (ceil (-2.8) != -2.0)\n-    link_error ();\n-\n-  if (trunc (0.01) != 0.0)\n-    link_error ();\n-  if (floor (0.01) != 0.0)\n-    link_error ();\n-  if (ceil (0.01) != 1.0)\n-    link_error ();\n-\n-  if (trunc (-0.7) != 0.0)\n-    link_error ();\n-  if (floor (-0.7) != -1.0)\n-    link_error ();\n-  if (ceil (-0.7) != 0.0)\n-    link_error ();\n-}\n-\n-void testf()\n-{\n-  if (truncf (0.0f) != 0.0f)\n-    link_error ();\n-  if (floorf (0.0f) != 0.0f)\n-    link_error ();\n-  if (ceilf (0.0f) != 0.0f)\n-    link_error ();\n-\n-  if (truncf (6.0f) != 6.0f)\n-    link_error ();\n-  if (floorf (6.0f) != 6.0f)\n-    link_error ();\n-  if (ceilf (6.0f) != 6.0f)\n-    link_error ();\n-\n-  if (truncf (-8.0f) != -8.0f)\n-    link_error ();\n-  if (floorf (-8.0f) != -8.0f)\n-    link_error ();\n-  if (ceilf (-8.0f) != -8.0f)\n-    link_error ();\n-\n-  if (truncf (3.2f) != 3.0f)\n-    link_error ();\n-  if (floorf (3.2f) != 3.0f)\n-    link_error ();\n-  if (ceilf (3.2f) != 4.0f)\n-    link_error ();\n-\n-  if (truncf (-2.8f) != -2.0f)\n-    link_error ();\n-  if (floorf (-2.8f) != -3.0f)\n-    link_error ();\n-  if (ceilf (-2.8f) != -2.0f)\n-    link_error ();\n-\n-  if (truncf (0.01f) != 0.0f)\n-    link_error ();\n-  if (floorf (0.01f) != 0.0f)\n-    link_error ();\n-  if (ceilf (0.01f) != 1.0f)\n-    link_error ();\n-\n-  if (truncf (-0.7f) != 0.0f)\n-    link_error ();\n-  if (floorf (-0.7f) != -1.0f)\n-    link_error ();\n-  if (ceilf (-0.7f) != 0.0f)\n-    link_error ();\n-}\n-\n-void testl()\n-{\n-  if (truncl (0.0l) != 0.0l)\n-    link_error ();\n-  if (floorl (0.0l) != 0.0l)\n-    link_error ();\n-  if (ceill (0.0l) != 0.0l)\n-    link_error ();\n-\n-  if (truncl (6.0l) != 6.0l)\n-    link_error ();\n-  if (floorl (6.0l) != 6.0l)\n-    link_error ();\n-  if (ceill (6.0l) != 6.0l)\n-    link_error ();\n-\n-  if (truncl (-8.0l) != -8.0l)\n-    link_error ();\n-  if (floorl (-8.0l) != -8.0l)\n-    link_error ();\n-  if (ceill (-8.0l) != -8.0l)\n-    link_error ();\n-\n-  if (truncl (3.2l) != 3.0l)\n-    link_error ();\n-  if (floorl (3.2l) != 3.0l)\n-    link_error ();\n-  if (ceill (3.2l) != 4.0l)\n-    link_error ();\n-\n-  if (truncl (-2.8l) != -2.0l)\n-    link_error ();\n-  if (floorl (-2.8l) != -3.0l)\n-    link_error ();\n-  if (ceill (-2.8l) != -2.0l)\n-    link_error ();\n-\n-  if (truncl (0.01l) != 0.0l)\n-    link_error ();\n-  if (floorl (0.01l) != 0.0l)\n-    link_error ();\n-  if (ceill (0.01l) != 1.0l)\n-    link_error ();\n-\n-  if (truncl (-0.7l) != 0.0l)\n-    link_error ();\n-  if (floorl (-0.7l) != -1.0l)\n-    link_error ();\n-  if (ceill (-0.7l) != 0.0l)\n-    link_error ();\n-}\n-\n-int main()\n-{\n-  test ();\n-  testf ();\n-  testl ();\n-  return 0;\n-}\n-"}, {"sha": "30f9bad4ef7dbd4d6cb0d0471639a6c4e3f6c7f5", "filename": "gcc/testsuite/gcc.dg/builtins-29.c", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08732313cfc81fadfe6487a722f16931f9dae6a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08732313cfc81fadfe6487a722f16931f9dae6a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-29.c?ref=c08732313cfc81fadfe6487a722f16931f9dae6a", "patch": "@@ -1,96 +0,0 @@\n-/* Copyright (C) 2004 Free Software Foundation.\n-\n-   Check that constant folding of round, roundf and roundl math functions\n-   doesn't break anything and produces the expected results.\n-\n-   Written by Roger Sayle, 22nd January 2004.  */\n-\n-/* { dg-do link } */\n-/* { dg-options \"-O2\" } */\n-\n-extern void link_error(void);\n-\n-extern double round(double);\n-extern float roundf(float);\n-extern long double roundl(long double);\n-\n-void test()\n-{\n-  if (round (0.0) != 0.0)\n-    link_error ();\n-  if (round (6.0) != 6.0)\n-    link_error ();\n-  if (round (-8.0) != -8.0)\n-    link_error ();\n-\n-  if (round (3.2) != 3.0)\n-    link_error ();\n-  if (round (-2.8) != -3.0)\n-    link_error ();\n-  if (round (0.01) != 0.0)\n-    link_error ();\n-  if (round (-0.7) != -1.0)\n-    link_error ();\n-\n-  if (round (2.5) != 3.0)\n-    link_error ();\n-  if (round (-1.5) != -2.0)\n-    link_error ();\n-}\n-\n-void testf()\n-{\n-  if (roundf (0.0f) != 0.0f)\n-    link_error ();\n-  if (roundf (6.0f) != 6.0f)\n-    link_error ();\n-  if (roundf (-8.0f) != -8.0f)\n-    link_error ();\n-\n-  if (roundf (3.2f) != 3.0f)\n-    link_error ();\n-  if (roundf (-2.8f) != -3.0f)\n-    link_error ();\n-  if (roundf (0.01f) != 0.0f)\n-    link_error ();\n-  if (roundf (-0.7f) != -1.0f)\n-    link_error ();\n-\n-  if (roundf (2.5f) != 3.0f)\n-    link_error ();\n-  if (roundf (-1.5f) != -2.0f)\n-    link_error ();\n-}\n-\n-void testl()\n-{\n-  if (roundl (0.0l) != 0.0l)\n-    link_error ();\n-  if (roundl (6.0l) != 6.0l)\n-    link_error ();\n-  if (roundl (-8.0l) != -8.0l)\n-    link_error ();\n-\n-  if (roundl (3.2l) != 3.0l)\n-    link_error ();\n-  if (roundl (-2.8l) != -3.0l)\n-    link_error ();\n-  if (roundl (0.01l) != 0.0l)\n-    link_error ();\n-  if (roundl (-0.7l) != -1.0l)\n-    link_error ();\n-\n-  if (roundl (2.5l) != 3.0l)\n-    link_error ();\n-  if (roundl (-1.5l) != -2.0l)\n-    link_error ();\n-}\n-\n-int main()\n-{\n-  test ();\n-  testf ();\n-  testl ();\n-  return 0;\n-}\n-"}, {"sha": "4101f911e5a763d9338edd0fd25ae21f72c15b31", "filename": "gcc/testsuite/gcc.dg/torture/builtin-rounding-1.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf05748728b93e0241a62bb0926ec12a58f01f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-rounding-1.c?ref=3bf05748728b93e0241a62bb0926ec12a58f01f6", "patch": "@@ -0,0 +1,106 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding of the rounding math functions doesn't\n+   break anything and produces the expected results.\n+\n+   Written by Kaveh Ghazi, 2004-04-29.  */\n+\n+/* { dg-do link } */\n+\n+#define PROTOTYPE(FN) \\\n+  PROTOTYPE_LINK_ERROR(FN) \\\n+  extern double FN (double); \\\n+  extern float FN##f (float); \\\n+  extern long double FN##l (long double);\n+\n+#define PROTOTYPE_RET(FN, RET) \\\n+  PROTOTYPE_LINK_ERROR(FN) \\\n+  extern RET FN (double); \\\n+  extern RET FN##f (float); \\\n+  extern RET FN##l (long double);\n+\n+#define PROTOTYPE_LINK_ERROR(FN) \\\n+  extern void link_error_##FN(void); \\\n+  extern void link_error_##FN##f(void); \\\n+  extern void link_error_##FN##l(void);\n+\n+#define TEST(FN, VALUE, RESULT) \\\n+  if (FN (VALUE) != RESULT) link_error_##FN(); \\\n+  if (FN##f (VALUE) != RESULT) link_error_##FN##f(); \\\n+  if (FN##l (VALUE) != RESULT) link_error_##FN##l(); \\\n+\n+PROTOTYPE (trunc);\n+PROTOTYPE (floor);\n+PROTOTYPE (ceil);\n+PROTOTYPE (round);\n+PROTOTYPE_RET (lround, long);\n+PROTOTYPE_RET (llround, long long);\n+\n+int\n+main (void)\n+{\n+  TEST(trunc,   0, 0);\n+  TEST(floor,   0, 0);\n+  TEST(ceil,    0, 0);\n+  TEST(round,   0, 0);\n+  TEST(lround,  0, 0);\n+  TEST(llround, 0, 0);\n+  \n+  TEST(trunc,   6, 6);\n+  TEST(floor,   6, 6);\n+  TEST(ceil,    6, 6);\n+  TEST(round,   6, 6);\n+  TEST(lround,  6, 6);\n+  TEST(llround, 6, 6);\n+  \n+  TEST(trunc,   -8, -8);\n+  TEST(floor,   -8, -8);\n+  TEST(ceil,    -8, -8);\n+  TEST(round,   -8, -8);\n+  TEST(lround,  -8, -8);\n+  TEST(llround, -8, -8);\n+  \n+  TEST(trunc,   3.2, 3);\n+  TEST(floor,   3.2, 3);\n+  TEST(ceil,    3.2, 4);\n+  TEST(round,   3.2, 3);\n+  TEST(lround,  3.2, 3);\n+  TEST(llround, 3.2, 3);\n+\n+  TEST(trunc,   -2.8, -2);\n+  TEST(floor,   -2.8, -3);\n+  TEST(ceil,    -2.8, -2);\n+  TEST(round,   -2.8, -3);\n+  TEST(lround,  -2.8, -3);\n+  TEST(llround, -2.8, -3);\n+\n+  TEST(trunc,   0.01, 0);\n+  TEST(floor,   0.01, 0);\n+  TEST(ceil,    0.01, 1);\n+  TEST(round,   0.01, 0);\n+  TEST(lround,  0.01, 0);\n+  TEST(llround, 0.01, 0);\n+\n+  TEST(trunc,   -0.7, 0);\n+  TEST(floor,   -0.7, -1);\n+  TEST(ceil,    -0.7, 0);\n+  TEST(round,   -0.7, -1);\n+  TEST(lround,  -0.7, -1);\n+  TEST(llround, -0.7, -1);\n+\n+  TEST(trunc,   2.5, 2);\n+  TEST(floor,   2.5, 2);\n+  TEST(ceil,    2.5, 3);\n+  TEST(round,   2.5, 3);\n+  TEST(lround,  2.5, 3);\n+  TEST(llround, 2.5, 3);\n+\n+  TEST(trunc,   -1.5, -1);\n+  TEST(floor,   -1.5, -2);\n+  TEST(ceil,    -1.5, -1);\n+  TEST(round,   -1.5, -2);\n+  TEST(lround,  -1.5, -2);\n+  TEST(llround, -1.5, -2);\n+\n+  return 0;\n+}"}]}