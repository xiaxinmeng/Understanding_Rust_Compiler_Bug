{"sha": "fc44b85de78353cb3930e3d59346863bf344ef93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0NGI4NWRlNzgzNTNjYjM5MzBlM2Q1OTM0Njg2M2JmMzQ0ZWY5Mw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-09-25T17:14:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-25T17:14:09Z"}, "message": "2002-09-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(DatagramSocket): Initialize new instance variables.\n\t(close): Reset new instance variables.\n\t(getLocalAddress): Remove unneeded SecurityManager usage.\n\t(getLocalPort): Check if socket is already bound.\n\t(isConnected): New method.\n\t(getInetAddress): Implemented.\n\t(getPort): Better Implementation, documentation fixed.\n\t(getRemoteSocketAddress): New method.\n\t* java/net/JarURLConnection.java\n\t(element): Typo fixed.\n\t(getMainAttributes): New method.\n\t(getAttributes): New method (stub only).\n\t(getManifest): New method (stub only).\n\t* java/net/NetPermission.java: Added serialVersionsUID.\n\t* java/net/Socket.java\n\t(connect): Check blocking mode of associated channel,\n\tdocumentation added.\n\t(getLocalSocketAddress): Better implementation.\n\t(getRemoteSocketAddress): Implemented.\n\t(isBound): New method.\n\t(setSendBufferSize): Documentation added.\n\t* java/net/SocketAddress.java: Added serialVersionsUID.\n\t* java/net/SocketPermission.java: Added serialVersionsUID.\n\t* java/net/URL.java\n\t(URL): Wrap for shorter lines, initialize new instance variables,\n\tdocumentation added.\n\t(equals): Check new instance variables too.\n\t(getContent): Documentation added.\n\t(getPath): Documentation added.\n\t(getAuthority): New method.\n\t(getHost): Documentation added.\n\t(getPort): Documentation added.\n\t(getDefaultPort): New method.\n\t(getProtocol): Documentation added.\n\t(getUserInfo): Documentation added.\n\t(set): Initialize new instance variables, documentation added.\n\t* java/net/URLStreamHandler.java\n\t(setURL): New method.\n\t* java/net/natPlainDatagramSocketImpl.cc\n\t(connect): Fix exception name.\n\t(disconnect): Fix exception name.\n\nFrom-SVN: r57501", "tree": {"sha": "c7f727fc4330f40bf9d00f1200993bfa6656a8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f727fc4330f40bf9d00f1200993bfa6656a8ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc44b85de78353cb3930e3d59346863bf344ef93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc44b85de78353cb3930e3d59346863bf344ef93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc44b85de78353cb3930e3d59346863bf344ef93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc44b85de78353cb3930e3d59346863bf344ef93/comments", "author": null, "committer": null, "parents": [{"sha": "6f950405a0751ab26cab5dbca5e4fbcecfa60350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f950405a0751ab26cab5dbca5e4fbcecfa60350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f950405a0751ab26cab5dbca5e4fbcecfa60350"}], "stats": {"total": 352, "additions": 320, "deletions": 32}, "files": [{"sha": "3132150f7ee9611b804bef872f0b780bf36f1577", "filename": "libjava/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -1,3 +1,48 @@\n+2002-09-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(DatagramSocket): Initialize new instance variables.\n+\t(close): Reset new instance variables.\n+\t(getLocalAddress): Remove unneeded SecurityManager usage.\n+\t(getLocalPort): Check if socket is already bound.\n+\t(isConnected): New method.\n+\t(getInetAddress): Implemented.\n+\t(getPort): Better Implementation, documentation fixed.\n+\t(getRemoteSocketAddress): New method.\n+\t* java/net/JarURLConnection.java\n+\t(element): Typo fixed.\n+\t(getMainAttributes): New method.\n+\t(getAttributes): New method (stub only).\n+\t(getManifest): New method (stub only).\n+\t* java/net/NetPermission.java: Added serialVersionsUID.\n+\t* java/net/Socket.java\n+\t(connect): Check blocking mode of associated channel,\n+\tdocumentation added.\n+\t(getLocalSocketAddress): Better implementation.\n+\t(getRemoteSocketAddress): Implemented.\n+\t(isBound): New method.\n+\t(setSendBufferSize): Documentation added.\n+\t* java/net/SocketAddress.java: Added serialVersionsUID.\n+\t* java/net/SocketPermission.java: Added serialVersionsUID.\n+\t* java/net/URL.java\n+\t(URL): Wrap for shorter lines, initialize new instance variables,\n+\tdocumentation added.\n+\t(equals): Check new instance variables too.\n+\t(getContent): Documentation added.\n+\t(getPath): Documentation added.\n+\t(getAuthority): New method.\n+\t(getHost): Documentation added.\n+\t(getPort): Documentation added.\n+\t(getDefaultPort): New method.\n+\t(getProtocol): Documentation added.\n+\t(getUserInfo): Documentation added.\n+\t(set): Initialize new instance variables, documentation added.\n+\t* java/net/URLStreamHandler.java\n+\t(setURL): New method.\n+\t* java/net/natPlainDatagramSocketImpl.cc\n+\t(connect): Fix exception name.\n+\t(disconnect): Fix exception name.\n+\n 2002-09-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/channels/spi/AbstractSelectableChannel.java: New file."}, {"sha": "dfbce3bcf7d14038de30470d9e194a325651165b", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -37,6 +37,9 @@\n \n   DatagramChannel ch;\n \n+  private InetAddress remoteAddress;\n+  private int remotePort;\n+\n   /**\n    * Creates a DatagramSocket\n    *\n@@ -59,6 +62,8 @@ public DatagramSocket() throws SocketException\n   protected DatagramSocket (DatagramSocketImpl impl)\n   {\n     this.impl = impl;\n+    this.remoteAddress = null;\n+    this.remotePort = -1;\n   }\n \n   /**\n@@ -134,6 +139,9 @@ public DatagramSocket(int port, InetAddress laddr) throws SocketException\n       impl.setOption(SocketOptions.SO_REUSEADDR, new Boolean(true));\n \n     impl.bind(port, laddr == null ? InetAddress.ANY_IF : laddr);\n+    \n+    remoteAddress = null;\n+    remotePort = -1;\n   }\n \n   /**\n@@ -169,6 +177,8 @@ public void bind (SocketAddress address)\n   public void close()\n   {\n     impl.close();\n+    remoteAddress = null;\n+    remotePort = -1;\n   }\n \n   /**\n@@ -198,7 +208,6 @@ public DatagramChannel getChannel()\n    */\n   public InetAddress getLocalAddress()\n   {\n-    SecurityManager s = System.getSecurityManager();\n     // FIXME: JCL p. 510 says this should call checkConnect.  But what\n     // string should be used as the hostname?  Maybe this is just a side\n     // effect of calling InetAddress.getLocalHost.\n@@ -241,6 +250,9 @@ public InetAddress getLocalAddress()\n    */\n   public int getLocalPort()\n   {\n+    if (!isBound ())\n+      return -1;\n+\n     return impl.getLocalPort();\n   }\n \n@@ -416,6 +428,16 @@ public boolean isBound()\n     return true;\n   }\n \n+  /**\n+   * Returns the connection state of the socket\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isConnected()\n+  {\n+    return remoteAddress != null;\n+  }\n+\n   /**\n    * Returns the InetAddress the socket is connected to\n    * or null if the socket is not connected\n@@ -424,18 +446,37 @@ public boolean isBound()\n    */\n   public InetAddress getInetAddress()\n   {\n-    // FIXME:\n-    return null;\n+    if (!isConnected ())\n+      return null;\n+\n+    return remoteAddress;\n   }\n \n   /**\n-   * Returns the local port number of the socket\n+   * Returns the port number the socket is connected to or -1 if not connected\n    * \n    * @since 1.2\n    */\n   public int getPort()\n   {\n-    return impl.localPort;\n+    if (!isConnected ())\n+      return -1;\n+    \n+    return remotePort;\n+  }\n+\n+  /**\n+   * Returns the SocketAddress of the host this socket is conneted to\n+   * or null if this socket is not connected\n+   * \n+   * @since 1.4\n+   */\n+  public SocketAddress getRemoteSocketAddress()\n+  {\n+    if (!isConnected ())\n+      return null;\n+\n+    return new InetSocketAddress (remoteAddress, remotePort);\n   }\n \n   /**"}, {"sha": "a90c7f3303715b8ce4e1a72ed617c067d96907dc", "filename": "libjava/java/net/JarURLConnection.java", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FJarURLConnection.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -34,7 +34,7 @@ public abstract class JarURLConnection extends URLConnection\n    *  either case this describes just the jar file itself. */\n   protected URLConnection jarFileURLConnection;\n \n-  // If this is a connection to a jar file element this is set, otherwose null.\n+  // If this is a connection to a jar file element this is set, otherwise null.\n   private final String element;\n \n   // Cached JarURLConnection's \n@@ -349,4 +349,39 @@ public Certificate[] getCertificates() throws IOException\n   {\n     return getJarEntry().getCertificates();\n   }\n+\n+  /**\n+   * Returns the main Attributes for the JAR file for this connection\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public Attributes getMainAttributes () throws IOException\n+  {\n+    return getManifest ().getMainAttributes ();\n+  }\n+\n+  /**\n+   * Return the Attributes object for this connection if the URL for it points\n+   * to a JAR file entry, null otherwise\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public Attributes getAttributes () throws IOException\n+  {\n+    // FIXME: implement this\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the Manifest for this connection, or null if none\n+   *\n+   * @exception IOException If an error occurs\n+   */\n+  public Manifest getManifest () throws IOException\n+  {\n+    JarFile file = getJarFile ();\n+\n+    // FIXME: implement this\n+    return null;\n+  }\n }"}, {"sha": "f5b625a0d6f2df220b45d084f5ae34b0c4a97cfa", "filename": "libjava/java/net/NetPermission.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FNetPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FNetPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetPermission.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -50,6 +50,8 @@\n public final class NetPermission extends BasicPermission\n   implements java.io.Serializable\n {\n+  static final long serialVersionUID = -8343910153355041693L;\n+\n   /**\n    * Initializes a new instance of <code>NetPermission</code> with the\n    * specified name."}, {"sha": "82265dd32f904cab9c5f25b6f59d9269c66de82e", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -39,6 +39,7 @@\n \n import java.io.*;\n import java.nio.channels.SocketChannel;\n+import java.nio.channels.IllegalBlockingModeException;\n \n /* Written using on-line Java Platform 1.2 API Specification.\n  * Status:  I believe all methods are implemented.\n@@ -80,7 +81,7 @@\n   SocketImpl impl;\n \n   SocketChannel ch; // this field must have been set if created by SocketChannel\n-  \n+\n   // Constructors\n \n   /**\n@@ -310,7 +311,8 @@ public void bind (SocketAddress bindpoint) throws IOException\n    *\n    * @exception IOException If an error occurs\n    * @exception IllegalArgumentException If the addess type is not supported\n-   * @exception IllegalBlockingModeException FIXME\n+   * @exception IllegalBlockingModeException If this socket has an associated\n+   * channel, and the channel is in non-blocking mode\n    * \n    * @since 1.4\n    */\n@@ -320,6 +322,9 @@ public void connect (SocketAddress endpoint)\n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n+    if (ch != null && !ch.isBlocking ())\n+      throw new IllegalBlockingModeException ();\n+    \n     impl.connect (endpoint, 0);\n   }\n \n@@ -332,7 +337,8 @@ public void connect (SocketAddress endpoint)\n    *\n    * @exception IOException If an error occurs\n    * @exception IllegalArgumentException If the address type is not supported\n-   * @exception IllegalBlockingModeException FIXME\n+   * @exception IllegalBlockingModeException If this socket has an associated\n+   * channel, and the channel is in non-blocking mode\n    * @exception SocketTimeoutException If the timeout is reached\n    * \n    * @since 1.4\n@@ -343,6 +349,9 @@ public void connect (SocketAddress endpoint, int timeout)\n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n+    if (ch != null && !ch.isBlocking ())\n+      throw new IllegalBlockingModeException ();\n+    \n     impl.connect (endpoint, timeout);\n   }\n \n@@ -432,16 +441,10 @@ public int getLocalPort ()\n    */\n   public SocketAddress getLocalSocketAddress()\n   {\n-    InetAddress addr;\n+    InetAddress addr = getLocalAddress ();\n \n-    try\n-      {\n-        addr = (InetAddress) impl.getOption (SocketOptions.SO_BINDADDR);\n-      }\n-    catch (SocketException e)\n-      {\n-\treturn null;\n-      }\n+    if (addr == null)\n+      return null;\n     \n     return new InetSocketAddress (addr, impl.getLocalPort());\n   }\n@@ -454,8 +457,7 @@ public SocketAddress getLocalSocketAddress()\n    */\n   public SocketAddress getRemoteSocketAddress()\n   {\n-    // FIXME: Implement this\n-    return null;\n+    return new InetSocketAddress (impl.getInetAddress (), impl.getPort ());\n   }\n \n   /**\n@@ -701,7 +703,7 @@ public synchronized int getSoTimeout () throws SocketException\n    * @param size The new send buffer size.\n    *\n    * @exception SocketException If an error occurs or Socket not connected\n-   * @exception IllegalArgumentException FIXME\n+   * @exception IllegalArgumentException If size is 0 or negative\n    *\n    * @since 1.2\n    */\n@@ -990,4 +992,12 @@ public void setTrafficClass (int tc) throws SocketException\n \n     impl.setOption (SocketOptions.IP_TOS, new Integer (tc));\n   }\n+\n+  /**\n+   * Checks if the socket is already bound.\n+   */\n+  public boolean isBound ()\n+  {\n+    return getLocalAddress () != null;\n+  }\n }"}, {"sha": "af20fba7bfa0e4fa811a505ac9f2c48742f16553", "filename": "libjava/java/net/SocketAddress.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocketAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocketAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketAddress.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -47,8 +47,10 @@\n \n public abstract class SocketAddress implements Serializable\n {\n-    public SocketAddress()\n-    {\n-    }\n+  static final long serialVersionUID = 5215720748342549866L;\n+\n+  public SocketAddress()\n+  {\n+  }\n }\n "}, {"sha": "061ec9c80fe609899963613ecf20682e00b37284", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -37,6 +37,7 @@\n \n package java.net;\n \n+import java.io.Serializable;\n import java.security.Permission;\n import java.security.PermissionCollection;\n \n@@ -100,8 +101,9 @@\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n public final class SocketPermission extends Permission\n-  implements java.io.Serializable\n+  implements Serializable\n {\n+  static final long serialVersionUID = -7204263841984476862L;\n \n // FIXME: Needs serialization work, including readObject/writeObject methods.\n   /**"}, {"sha": "226ad6ca68c5430fe0ea7449ca689186bfab889f", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 133, "deletions": 5, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -28,9 +28,12 @@\n public final class URL implements Serializable\n {\n   private String protocol;\n+  private String authority;\n+  private String userInfo;\n   private String host;\n   private int port = -1;\t// Initialize for constructor using context.\n   private String file;\n+  private String query;\n   private String ref;\n   private int hashCode = 0;\n   transient private URLStreamHandler handler;\n@@ -39,19 +42,50 @@ public final class URL implements Serializable\n \n   private static final long serialVersionUID = -7627629688361524110L;\n \n+  /**\n+   * Creates an URL object from the given arguments\n+   *\n+   * @param protocol The protocol of the URL\n+   * @param host The host of the URL\n+   * @param port The port of the URL\n+   * @param file The file of the URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   */\n   public URL(String protocol, String host, int port, String file)\n     throws MalformedURLException\n   {\n     this(protocol, host, port, file, null);\n   }\n \n+  /**\n+   * Creates an URL object from the given arguments\n+   *\n+   * @param protocol The protocol of the URL\n+   * @param host The host of the URL\n+   * @param file The file of the URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   */\n   public URL(String protocol, String host, String file)\n     throws MalformedURLException\n   {\n     this(protocol, host, -1, file, null);\n   }\n \n-  // JDK1.2\n+  /**\n+   * Creates an URL object from the given arguments\n+   *\n+   * @param protocol The protocol of the URL\n+   * @param host The host of the URL\n+   * @param port The port of the URL\n+   * @param file The file of the URL\n+   * @param handler The stream handler for the URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   *\n+   * @since 1.2\n+   */\n   public URL(String protocol, String host, int port, String file,\n     URLStreamHandler handler) throws MalformedURLException\n   {\n@@ -76,11 +110,14 @@ public URL(String protocol, String host, int port, String file,\n       this.handler = setURLStreamHandler(protocol);\n \n     if (this.handler == null)\n-      throw new MalformedURLException(\"Protocol handler not found: \" + protocol);\n+      throw new MalformedURLException (\n+\t\t      \"Protocol handler not found: \" + protocol);\n \n     this.host = host;\n-\n     this.port = port;\n+    this.userInfo = null;\n+    this.authority = null;\n+    this.query = null;\n \n     int hashAt = file.indexOf('#');\n     if (hashAt < 0)\n@@ -96,17 +133,42 @@ public URL(String protocol, String host, int port, String file,\n     hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n+  /**\n+   * Creates an URL object from the given arguments\n+   * \n+   * @param spec The string to parse an URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   */\n   public URL(String spec) throws MalformedURLException\n   {\n     this((URL) null, spec, (URLStreamHandler) null);\n   }\n \n+  /**\n+   * Creates an URL object from the given arguments\n+   * \n+   * @param context The context on which to parse the specification\n+   * @param spec The string to parse an URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   */\n   public URL(URL context, String spec) throws MalformedURLException\n   {\n     this(context, spec, (URLStreamHandler) null);\n   }\n \n-  // JDK1.2\n+  /**\n+   * Creates an URL from given arguments\n+   *\n+   * @param context The context in which to parse the specification\n+   * @param spec The string to parse as an URL\n+   * @param handler The stream handler for the URL\n+   *\n+   * @exception MalformedURLException If an error occurs\n+   * \n+   * @since 1.2\n+   */\n   public URL(URL context, String spec, URLStreamHandler handler)\n     throws MalformedURLException\n   {\n@@ -142,6 +204,9 @@ public URL(URL context, String spec, URLStreamHandler handler)\n \t    host = context.host;\n \t    port = context.port;\n \t    file = context.file;\n+\t    userInfo = context.userInfo;\n+\t    authority = context.authority;\n+\t    query = context.query;\n \t  }\n       }\n     else if (context != null)\n@@ -153,6 +218,9 @@ else if (context != null)\n \thost = context.host;\n \tport = context.port;\n \tfile = context.file;\n+        userInfo = context.userInfo;\n+        authority = context.authority;\n+        query = context.query;\n       }\n     else\t// Protocol NOT specified in spec. and no context available.\n       throw new\n@@ -202,14 +270,25 @@ public boolean equals(Object obj)\n     return (port == uObj.port\n \t    && ((protocol == null && uObj.protocol == null)\n \t\t|| (protocol != null && protocol.equals(uObj.protocol)))\n+\t    && ((userInfo == null && uObj.userInfo == null)\n+                || (userInfo != null && userInfo.equals(uObj.userInfo)))\n+\t    && ((authority == null && uObj.authority == null)\n+                || (authority != null && authority.equals(uObj.authority)))\n \t    && ((host == null && uObj.host == null)\n \t\t|| (host != null && host.equals(uObj.host)))\n \t    && ((file == null && uObj.file == null)\n \t\t|| (file != null && file.equals(uObj.file)))\n+\t    && ((query == null && uObj.query == null)\n+                || (query != null && query.equals(uObj.query)))\n \t    && ((ref == null && uObj.ref == null)\n \t\t|| (ref != null && ref.equals(uObj.ref))));\n   }\n \n+  /**\n+   * Gets the contents of this URL\n+   *\n+   * @since 1.3\n+   */\n   public final Object getContent() throws IOException\n   {\n     return openConnection().getContent();\n@@ -220,22 +299,54 @@ public String getFile()\n     return file;\n   }\n \n+  /**\n+   * Returns the path of the URL\n+   *\n+   * @since 1.3\n+   */\n   public String getPath()\n   {\n     int quest = file.indexOf('?');\n     return quest < 0 ? file : file.substring(0, quest);\n   }\n \n+  /**\n+   * Returns the authority of the URL\n+   * \n+   * @since 1.3\n+   */\n+  public String getAuthority()\n+  {\n+    return authority;\n+  }\n+\n+  /**\n+   * Returns the host of the URL\n+   */\n   public String getHost()\n   {\n     return host;\n   }\n \n+  /**\n+   * Returns of port of the URL\n+   */\n   public int getPort()\n   {\n     return port;\n   }\n \n+  /**\n+   * Returns the default port of the URL\n+   */\n+  public int getDefaultPort()\n+  {\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the protocol of the URL\n+   */\n   public String getProtocol()\n   {\n     return protocol;\n@@ -246,6 +357,9 @@ public String getRef()\n     return ref;\n   }\n \n+  /**\n+   * Returns the user information of the URL\n+   */\n   public String getUserInfo ()\n   {\n     int at = host.indexOf('@');\n@@ -290,6 +404,11 @@ public boolean sameFile(URL other)\n     return handler.sameFile(this, other);\n   }\n \n+  /**\n+   * Sets the specified fields of the URL. This is not a public method so\n+   * that only URLStreamHandlers can modify URL fields. URLs are otherwise\n+   * constant\n+   */\n   protected void set(String protocol, String host, int port, String file,\n \t\t     String ref)\n   {\n@@ -299,14 +418,23 @@ protected void set(String protocol, String host, int port, String file,\n     // be aware of this.\n     this.handler = setURLStreamHandler(protocol);\n     this.protocol = protocol;\n+    this.authority = null;\n+    this.userInfo = null;\n     this.port = port;\n     this.host = host;\n     this.file = file;\n+    this.query = null;\n     this.ref = ref;\n     hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n-  /** @since 1.3 */\n+  /**\n+   * Sets the specified fields of the URL. This is not a public method so\n+   * that only URLStreamHandlers can modify URL fields. URLs are otherwise\n+   * constant\n+   *\n+   * @since 1.3\n+   */\n   protected void set(String protocol, String host, int port,\n \t\t     String authority, String userInfo,\n \t\t     String path, String query, String ref)"}, {"sha": "cade4f3d066ecceddfc67f7cdc31edaa3fa5c1f7", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -183,6 +183,29 @@ protected void setURL(URL u, String protocol, String host, int port,\n     u.set(protocol, host, port, file, ref);\n   }\n \n+  /**\n+   * Sets the fields of the URL argument to the indicated values\n+   *\n+   * @param u The URL to modify\n+   * @param protocol The protocol to set\n+   * @param host The host name to set\n+   * @param port The port number to set\n+   * @param authority The authority to set\n+   * @param userInfo The user information to set\n+   * @param path The path/filename to set\n+   * @param query The query part to set\n+   * @param ref The reference\n+   *\n+   * @exception SecurityException If the protocol handler of the URL is\n+   * different from this one\n+   */\n+  protected void setURL(URL u, String protocol, String host, int port,\n+\t\t\tString authority, String userInfo, String path,\n+\t\t\tString query, String ref)\n+  {\n+    u.set(protocol, host, port, authority, userInfo, path, query, ref);\n+  }\n+\n   /**\n    * Converts an URL of a specific protocol to a string\n    *"}, {"sha": "291243928f23cc386c5349ec9c69ba25fe4c1716", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc44b85de78353cb3930e3d59346863bf344ef93/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=fc44b85de78353cb3930e3d59346863bf344ef93", "patch": "@@ -89,14 +89,14 @@ java::net::PlainDatagramSocketImpl::bind (jint, java::net::InetAddress *)\n void\n java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *, jint)\n {\n-  throw new java::io::SocketException (\n+  throw new SocketException (\n     JvNewStringLatin1 (\"DatagramSocketImpl.connect: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::disconnect ()\n {\n-  throw new java::io::SocketException (\n+  throw new SocketException (\n     JvNewStringLatin1 (\"DatagramSocketImpl.disconnect: unimplemented\"));\n }\n "}]}