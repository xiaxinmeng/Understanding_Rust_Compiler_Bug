{"sha": "8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhY2QwMTYyZTVkMTNjZDc3ZGU4Yzg1YWEyNzU5NTE5YTFjZDVlYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-17T16:22:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-17T16:22:17Z"}, "message": "tree-ssa-uncprop.c (uncprop_into_successor_phis): Fix PHI node existence check.\n\n2010-01-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-uncprop.c (uncprop_into_successor_phis): Fix PHI\n\tnode existence check.\n\t* tree-vect-loop.c (vect_analyze_loop_form): Likewise.\n\t* tree-cfgcleanup.c (merge_phi_nodes): Likewise.\n\t* tree-ssa-dce.c (forward_edge_to_pdom): Likewise.\n\t* tree-cfg.c (gimple_execute_on_growing_pred): Likewise.\n\t(gimple_execute_on_growing_pred): Likewise.\n\nFrom-SVN: r155983", "tree": {"sha": "041367621a0936e98186fa8424bcd6441b96e7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041367621a0936e98186fa8424bcd6441b96e7ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adf0570ff15ff5e3df45426bf159e6f4e5a8b3e"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "212381f2139cf2b74f4af5432e42a061a8c16286", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -1,3 +1,13 @@\n+2010-01-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-uncprop.c (uncprop_into_successor_phis): Fix PHI\n+\tnode existence check.\n+\t* tree-vect-loop.c (vect_analyze_loop_form): Likewise.\n+\t* tree-cfgcleanup.c (merge_phi_nodes): Likewise.\n+\t* tree-ssa-dce.c (forward_edge_to_pdom): Likewise.\n+\t* tree-cfg.c (gimple_execute_on_growing_pred): Likewise.\n+\t(gimple_execute_on_growing_pred): Likewise.\n+\n 2010-01-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42773"}, {"sha": "d9276981eea8ad949d2e3b50d555c03b8069af0a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -6937,7 +6937,7 @@ gimple_execute_on_growing_pred (edge e)\n {\n   basic_block bb = e->dest;\n \n-  if (phi_nodes (bb))\n+  if (!gimple_seq_empty_p (phi_nodes (bb)))\n     reserve_phi_args_for_new_edge (bb);\n }\n \n@@ -6947,7 +6947,7 @@ gimple_execute_on_growing_pred (edge e)\n static void\n gimple_execute_on_shrinking_pred (edge e)\n {\n-  if (phi_nodes (e->dest))\n+  if (!gimple_seq_empty_p (phi_nodes (e->dest)))\n     remove_phi_args (e);\n }\n "}, {"sha": "201298dc5357386235d73e0d985d3ac319bdd5b7", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -875,7 +875,7 @@ merge_phi_nodes (void)\n \n       /* We have to feed into another basic block with PHI\n \t nodes.  */\n-      if (!phi_nodes (dest)\n+      if (gimple_seq_empty_p (phi_nodes (dest))\n \t  /* We don't want to deal with a basic block with\n \t     abnormal edges.  */\n \t  || has_abnormal_incoming_edge_p (bb))"}, {"sha": "bb24b6254d28b18ec6bc930a338591126ad7af39", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -958,7 +958,7 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n   if (e2 != e)\n     return e2;\n \n-  if (phi_nodes (post_dom_bb))\n+  if (!gimple_seq_empty_p (phi_nodes (post_dom_bb)))\n     {\n       /* We are sure that for every live PHI we are seeing control dependent BB.\n          This means that we can look up the end of control dependent path leading"}, {"sha": "96c08d3c8f2115c57a75f2a822eb9d2257449e37", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -456,7 +456,7 @@ uncprop_into_successor_phis (basic_block bb)\n \n       /* If there are no PHI nodes in this destination, then there is\n \t no sense in recording any equivalences.  */\n-      if (!phis)\n+      if (gimple_seq_empty_p (phis))\n \tcontinue;\n \n       /* Record any equivalency associated with E.  */"}, {"sha": "9e17eb36670039ede4e3a7e279e5d50a2b20223a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "patch": "@@ -981,7 +981,7 @@ vect_analyze_loop_form (struct loop *loop)\n      before the loop if needed), where the loop header contains all the\n      executable statements, and the latch is empty.  */\n   if (!empty_block_p (loop->latch)\n-        || phi_nodes (loop->latch))\n+        || !gimple_seq_empty_p (phi_nodes (loop->latch)))\n     {\n       if (vect_print_dump_info (REPORT_BAD_FORM_LOOPS))\n         fprintf (vect_dump, \"not vectorized: unexpected loop form.\");"}]}