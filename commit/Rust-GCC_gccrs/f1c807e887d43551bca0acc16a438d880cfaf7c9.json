{"sha": "f1c807e887d43551bca0acc16a438d880cfaf7c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjODA3ZTg4N2Q0MzU1MWJjYTBhY2MxNmE0MzhkODgwY2ZhZjdjOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-31T17:05:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-31T19:29:09Z"}, "message": "analyzer: fix ICE getting void return value (PR 93379)\n\nPR analyzer/93379 reports an ICE within\nregion_model::update_for_return_superedge when writing the\nreturned svalue_id to the lhs of the call_stmt\n\nThe root cause is that this analyzer code assumed that for any call\nwith a non-NULL gimple_call_lhs, the called fndecl would have non-void\nreturn type, and thus that a non-null svalue_id would be returned from\nregion_model::pop_frame.  This isn't the case e.g. for a call with\nconflicting types where the callee returns void but the caller assumes\nint.\n\nThis patch fixes the ICE by moving the check for null result so that\nit also guards setting the lhs.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93379\n\t* region-model.cc (region_model::update_for_return_superedge):\n\tMove check for null result so that it also guards setting the\n\tlhs.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93379\n\t* gcc.dg/analyzer/torture/pr93379-2.c: New test.\n\t* gcc.dg/analyzer/torture/pr93379.c: New test.", "tree": {"sha": "78125ffde4cfce1245e23917660489a9d1561df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78125ffde4cfce1245e23917660489a9d1561df7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c807e887d43551bca0acc16a438d880cfaf7c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c807e887d43551bca0acc16a438d880cfaf7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c807e887d43551bca0acc16a438d880cfaf7c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c807e887d43551bca0acc16a438d880cfaf7c9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455f58ec50465aed9d92dc31d68708a05e499388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455f58ec50465aed9d92dc31d68708a05e499388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455f58ec50465aed9d92dc31d68708a05e499388"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "fa791f70d34de112bcbf87c1ebb358d2f6de2ca1", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=f1c807e887d43551bca0acc16a438d880cfaf7c9", "patch": "@@ -1,3 +1,10 @@\n+2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93379\n+\t* region-model.cc (region_model::update_for_return_superedge):\n+\tMove check for null result so that it also guards setting the\n+\tlhs.\n+\n 2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93438"}, {"sha": "d43aef3a4d79e07f75d97b5f4852ec3d2d0d46ec", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=f1c807e887d43551bca0acc16a438d880cfaf7c9", "patch": "@@ -5694,12 +5694,15 @@ region_model::update_for_return_superedge (const return_superedge &return_edge,\n   svalue_id result_sid = pop_frame (true, &stats, ctxt);\n   // TODO: do something with the stats?\n \n+  if (result_sid.null_p ())\n+    return;\n+\n   /* Set the result of the call, within the caller frame.  */\n   const gcall *call_stmt = return_edge.get_call_stmt ();\n   tree lhs = gimple_call_lhs (call_stmt);\n   if (lhs)\n     set_value (get_lvalue (lhs, ctxt), result_sid, ctxt);\n-  else if (!result_sid.null_p ())\n+  else\n     {\n       /* This could be a leak; try purging again, but this time,\n \t don't special-case the result_sid.  */"}, {"sha": "cce52ea696109fedfec30866d3b92370e183143c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1c807e887d43551bca0acc16a438d880cfaf7c9", "patch": "@@ -1,3 +1,9 @@\n+2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93379\n+\t* gcc.dg/analyzer/torture/pr93379-2.c: New test.\n+\t* gcc.dg/analyzer/torture/pr93379.c: New test.\n+\n 2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93438"}, {"sha": "6e533dbca6895519dabdb64b887ca8b5ff9152d4", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93379-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379-2.c?ref=f1c807e887d43551bca0acc16a438d880cfaf7c9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-implicit-function-declaration\" } */\n+\n+void foo (void)\n+{\n+  int i = actually_returns_void ();\n+}\n+\n+void actually_returns_void (void) /* { dg-warning \"conflicting types\" } */\n+{\n+}"}, {"sha": "01465cf60e10d53f29d27e9c03b025256c04d554", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93379.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c807e887d43551bca0acc16a438d880cfaf7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93379.c?ref=f1c807e887d43551bca0acc16a438d880cfaf7c9", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-do compile } */\n+#include \"../../torture/pr57330.c\""}]}