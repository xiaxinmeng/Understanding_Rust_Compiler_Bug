{"sha": "a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzNDc4MzlkYWY3YWI2YjljOWNlMWM4MzIzYmIyNWQ0MDJlNmFjNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T14:16:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T14:16:43Z"}, "message": "exp_ch9.adb, [...]: Minor reformatting.\n\n2011-08-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, s-tassta.adb, s-secsta.adb: Minor reformatting.\n\n2011-08-30  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch6_light.adb, exp_ch6_light.ads, exp_attr_light.adb,\n\texp_attr_light.ads, exp_ch7_light.adb, exp_ch7_light.ads,\n\texp_light.adb, exp_light.ads, exp_prag.adb, expander.adb,\n\tgnat1drv.adb, exp_ch11.adb, exp_ch6.adb, exp_ch6.ads, exp_aggr.adb:\n\tRevert change which introduced files for \"light\"\n\texpansion, to be replaced by a single file for Alfa expansion.\n\nFrom-SVN: r178316", "tree": {"sha": "2db1e0cb72d8d1ba511a2bda1908f6e9d51f3808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db1e0cb72d8d1ba511a2bda1908f6e9d51f3808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/comments", "author": null, "committer": null, "parents": [{"sha": "5b8ca141c207d428a24416d2e5a5e6a324e8770f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8ca141c207d428a24416d2e5a5e6a324e8770f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8ca141c207d428a24416d2e5a5e6a324e8770f"}], "stats": {"total": 1164, "additions": 333, "deletions": 831}, "files": [{"sha": "81574bb4798bc0e3d8121f8aff812eb220f02a91", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -1,3 +1,16 @@\n+2011-08-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, s-tassta.adb, s-secsta.adb: Minor reformatting.\n+\n+2011-08-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch6_light.adb, exp_ch6_light.ads, exp_attr_light.adb,\n+\texp_attr_light.ads, exp_ch7_light.adb, exp_ch7_light.ads,\n+\texp_light.adb, exp_light.ads, exp_prag.adb, expander.adb,\n+\tgnat1drv.adb, exp_ch11.adb, exp_ch6.adb, exp_ch6.ads, exp_aggr.adb:\n+\tRevert change which introduced files for \"light\"\n+\texpansion, to be replaced by a single file for Alfa expansion.\n+\n 2011-08-30  Robert Dewar  <dewar@adacore.com>\n \n \t* opt.ads, s-soflin.adb, exp_ch9.adb, sem_res.adb: Update comment."}, {"sha": "037a8dcc6eadc0c89d17dd092fe2974567432564", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -4664,6 +4664,12 @@ package body Exp_Aggr is\n          Check_Same_Aggr_Bounds (N, 1);\n       end if;\n \n+      --  In formal verification mode, leave the aggregate non-expanded\n+\n+      if ALFA_Mode then\n+         return;\n+      end if;\n+\n       --  STEP 2\n \n       --  Here we test for is packed array aggregate that we can handle at"}, {"sha": "95a22dd7531fd7d9db0184de0f297c4091b1882f", "filename": "gcc/ada/exp_attr_light.adb", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_attr_light.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_attr_light.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr_light.adb?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,50 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       E X P _ A T T R _ L I G H T                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Exp_Attr; use Exp_Attr;\n-with Sinfo;    use Sinfo;\n-with Snames;   use Snames;\n-\n-package body Exp_Attr_Light is\n-\n-   ----------------------------------------\n-   -- Expand_Light_N_Attribute_Reference --\n-   ----------------------------------------\n-\n-   procedure Expand_Light_N_Attribute_Reference (N : Node_Id) is\n-      Id : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n-\n-   begin\n-      case Id is\n-         when Attribute_Old    |\n-              Attribute_Result =>\n-            Expand_N_Attribute_Reference (N);\n-\n-         when others =>\n-            null;\n-      end case;\n-   end Expand_Light_N_Attribute_Reference;\n-\n-end Exp_Attr_Light;"}, {"sha": "3b2bf7df09919c37268eb5167ae80b4911e0b198", "filename": "gcc/ada/exp_attr_light.ads", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_attr_light.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_attr_light.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr_light.ads?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,35 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       E X P _ A T T R _ L I G H T                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Light expand routines for attribute references\n-\n-with Types; use Types;\n-\n-package Exp_Attr_Light is\n-\n-   procedure Expand_Light_N_Attribute_Reference (N : Node_Id);\n-   --  Expand attributes 'Old and 'Result only\n-\n-end Exp_Attr_Light;"}, {"sha": "caf66cca0e027426e2421d1ece15b41808f463b2", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -1673,6 +1673,7 @@ package body Exp_Ch11 is\n \n          if VM_Target = No_VM\n            and then not CodePeer_Mode\n+           and then not ALFA_Mode\n            and then Exception_Mechanism = Back_End_Exceptions\n          then\n             return;"}, {"sha": "b390db4c1e16482d8dd282f15a0011adfb70b499", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -156,6 +156,36 @@ package body Exp_Ch6 is\n    --  the values are not changed for the call, we know immediately that\n    --  we have an infinite recursion.\n \n+   procedure Expand_Actuals (N : Node_Id; Subp : Entity_Id);\n+   --  For each actual of an in-out or out parameter which is a numeric\n+   --  (view) conversion of the form T (A), where A denotes a variable,\n+   --  we insert the declaration:\n+   --\n+   --    Temp : T[ := T (A)];\n+   --\n+   --  prior to the call. Then we replace the actual with a reference to Temp,\n+   --  and append the assignment:\n+   --\n+   --    A := TypeA (Temp);\n+   --\n+   --  after the call. Here TypeA is the actual type of variable A. For out\n+   --  parameters, the initial declaration has no expression. If A is not an\n+   --  entity name, we generate instead:\n+   --\n+   --    Var  : TypeA renames A;\n+   --    Temp : T := Var;       --  omitting expression for out parameter.\n+   --    ...\n+   --    Var := TypeA (Temp);\n+   --\n+   --  For other in-out parameters, we emit the required constraint checks\n+   --  before and/or after the call.\n+   --\n+   --  For all parameter modes, actuals that denote components and slices of\n+   --  packed arrays are expanded into suitable temporaries.\n+   --\n+   --  For non-scalar objects that are possibly unaligned, add call by copy\n+   --  code (copy in for IN and IN OUT, copy out for OUT and IN OUT).\n+\n    procedure Expand_Ctrl_Function_Call (N : Node_Id);\n    --  N is a function call which returns a controlled object. Transform the\n    --  call into a temporary which retrieves the returned object from the"}, {"sha": "1896ce21069dd76c27ca91fce0678ce0596fa1f6", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -37,36 +37,6 @@ package Exp_Ch6 is\n    procedure Expand_N_Subprogram_Body_Stub      (N : Node_Id);\n    procedure Expand_N_Subprogram_Declaration    (N : Node_Id);\n \n-   procedure Expand_Actuals (N : Node_Id; Subp : Entity_Id);\n-   --  For each actual of an in-out or out parameter which is a numeric\n-   --  (view) conversion of the form T (A), where A denotes a variable,\n-   --  we insert the declaration:\n-   --\n-   --    Temp : T[ := T (A)];\n-   --\n-   --  prior to the call. Then we replace the actual with a reference to Temp,\n-   --  and append the assignment:\n-   --\n-   --    A := TypeA (Temp);\n-   --\n-   --  after the call. Here TypeA is the actual type of variable A. For out\n-   --  parameters, the initial declaration has no expression. If A is not an\n-   --  entity name, we generate instead:\n-   --\n-   --    Var  : TypeA renames A;\n-   --    Temp : T := Var;       --  omitting expression for out parameter.\n-   --    ...\n-   --    Var := TypeA (Temp);\n-   --\n-   --  For other in-out parameters, we emit the required constraint checks\n-   --  before and/or after the call.\n-   --\n-   --  For all parameter modes, actuals that denote components and slices of\n-   --  packed arrays are expanded into suitable temporaries.\n-   --\n-   --  For non-scalar objects that are possibly unaligned, add call by copy\n-   --  code (copy in for IN and IN OUT, copy out for OUT and IN OUT).\n-\n    procedure Expand_Call (N : Node_Id);\n    --  This procedure contains common processing for Expand_N_Function_Call,\n    --  Expand_N_Procedure_Statement, and Expand_N_Entry_Call."}, {"sha": "e07057c41f599f1bee6fdcde9b5b49feccb59656", "filename": "gcc/ada/exp_ch6_light.adb", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch6_light.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch6_light.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6_light.adb?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,193 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         E X P _ C H 6 _ L I G H T                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Atree;    use Atree;\n-with Einfo;    use Einfo;\n-with Exp_Ch6;  use Exp_Ch6;\n-with Exp_Dbug; use Exp_Dbug;\n-with Rtsfind;  use Rtsfind;\n-with Sem_Aux;  use Sem_Aux;\n-with Sem_Res;  use Sem_Res;\n-with Sinfo;    use Sinfo;\n-with Stand;    use Stand;\n-with Tbuild;   use Tbuild;\n-\n-package body Exp_Ch6_Light is\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   procedure Expand_Simple_Function_Return (N : Node_Id);\n-   --  Expand simple return from function\n-\n-   -----------------------\n-   -- Expand_Light_Call --\n-   -----------------------\n-\n-   procedure Expand_Light_Call (N : Node_Id) is\n-      Call_Node   : constant Node_Id := N;\n-      Parent_Subp : Entity_Id;\n-      Subp        : Entity_Id;\n-\n-   begin\n-      --  Ignore if previous error\n-\n-      if Nkind (Call_Node) in N_Has_Etype\n-        and then Etype (Call_Node) = Any_Type\n-      then\n-         return;\n-      end if;\n-\n-      --  Call using access to subprogram with explicit dereference\n-\n-      if Nkind (Name (Call_Node)) = N_Explicit_Dereference then\n-         Subp        := Etype (Name (Call_Node));\n-         Parent_Subp := Empty;\n-\n-      --  Case of call to simple entry, where the Name is a selected component\n-      --  whose prefix is the task, and whose selector name is the entry name\n-\n-      elsif Nkind (Name (Call_Node)) = N_Selected_Component then\n-         Subp        := Entity (Selector_Name (Name (Call_Node)));\n-         Parent_Subp := Empty;\n-\n-      --  Case of call to member of entry family, where Name is an indexed\n-      --  component, with the prefix being a selected component giving the\n-      --  task and entry family name, and the index being the entry index.\n-\n-      elsif Nkind (Name (Call_Node)) = N_Indexed_Component then\n-         Subp        := Entity (Selector_Name (Prefix (Name (Call_Node))));\n-         Parent_Subp := Empty;\n-\n-      --  Normal case\n-\n-      else\n-         Subp        := Entity (Name (Call_Node));\n-         Parent_Subp := Alias (Subp);\n-      end if;\n-\n-      --  Various expansion activities for actuals are carried out\n-\n-      Expand_Actuals (N, Subp);\n-\n-      --  If the subprogram is a renaming, replace it in the call with the name\n-      --  of the actual subprogram being called.\n-\n-      if Present (Parent_Subp) then\n-         Parent_Subp := Ultimate_Alias (Parent_Subp);\n-\n-         --  The below setting of Entity is suspect, see F109-018 discussion???\n-\n-         Set_Entity (Name (Call_Node), Parent_Subp);\n-      end if;\n-\n-   end Expand_Light_Call;\n-\n-   --------------------------------------------\n-   -- Expand_Light_N_Simple_Return_Statement --\n-   --------------------------------------------\n-\n-   procedure Expand_Light_N_Simple_Return_Statement (N : Node_Id) is\n-   begin\n-      --  Defend against previous errors (i.e. the return statement calls a\n-      --  function that is not available in configurable runtime).\n-\n-      if Present (Expression (N))\n-        and then Nkind (Expression (N)) = N_Empty\n-      then\n-         return;\n-      end if;\n-\n-      --  Distinguish the function and non-function cases:\n-\n-      case Ekind (Return_Applies_To (Return_Statement_Entity (N))) is\n-\n-         when E_Function          |\n-              E_Generic_Function  =>\n-            Expand_Simple_Function_Return (N);\n-\n-         when E_Procedure         |\n-              E_Generic_Procedure |\n-              E_Entry             |\n-              E_Entry_Family      |\n-              E_Return_Statement =>\n-            --  Expand_Non_Function_Return (N);\n-            null;\n-\n-         when others =>\n-            raise Program_Error;\n-      end case;\n-\n-   exception\n-      when RE_Not_Available =>\n-         return;\n-   end Expand_Light_N_Simple_Return_Statement;\n-\n-   ------------------------------------\n-   -- Expand_Light_N_Subprogram_Body --\n-   ------------------------------------\n-\n-   procedure Expand_Light_N_Subprogram_Body (N : Node_Id) is\n-   begin\n-      Qualify_Entity_Names (N);\n-   end Expand_Light_N_Subprogram_Body;\n-\n-   -----------------------------------\n-   -- Expand_Simple_Function_Return --\n-   -----------------------------------\n-\n-   procedure Expand_Simple_Function_Return (N : Node_Id) is\n-      Scope_Id : constant Entity_Id :=\n-                   Return_Applies_To (Return_Statement_Entity (N));\n-      --  The function we are returning from\n-\n-      R_Type : constant Entity_Id := Etype (Scope_Id);\n-      --  The result type of the function\n-\n-      Exp : constant Node_Id := Expression (N);\n-      pragma Assert (Present (Exp));\n-\n-      Exptyp : constant Entity_Id := Etype (Exp);\n-      --  The type of the expression (not necessarily the same as R_Type)\n-\n-   begin\n-      --  Check the result expression of a scalar function against the subtype\n-      --  of the function by inserting a conversion. This conversion must\n-      --  eventually be performed for other classes of types, but for now it's\n-      --  only done for scalars.\n-      --  ???\n-\n-      if Is_Scalar_Type (Exptyp) then\n-         Rewrite (Exp, Convert_To (R_Type, Exp));\n-\n-         --  The expression is resolved to ensure that the conversion gets\n-         --  expanded to generate a possible constraint check.\n-\n-         Analyze_And_Resolve (Exp, R_Type);\n-      end if;\n-   end Expand_Simple_Function_Return;\n-\n-end Exp_Ch6_Light;"}, {"sha": "0cdec5cf5a8ddbd6655226631a7ae02578880584", "filename": "gcc/ada/exp_ch6_light.ads", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch6_light.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch6_light.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6_light.ads?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,44 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         E X P _ C H 6 _ L I G H T                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Light expand routines for chapter 6 constructs\n-\n-with Types; use Types;\n-\n-package Exp_Ch6_Light is\n-\n-   procedure Expand_Light_Call (N : Node_Id);\n-   --  This procedure contains common processing for function and procedure\n-   --  calls:\n-   --  * expansion of actuals to introduce necessary temporaries\n-   --  * replacement of renaming by subprogram renamed\n-\n-   procedure Expand_Light_N_Simple_Return_Statement (N : Node_Id);\n-   --  Insert conversion on function return if necessary\n-\n-   procedure Expand_Light_N_Subprogram_Body (N : Node_Id);\n-   --  Fully qualify names of enclosed entities\n-\n-end Exp_Ch6_Light;"}, {"sha": "f4e6a871e21fd1bb3ba022d704997a0e704fa95d", "filename": "gcc/ada/exp_ch7_light.adb", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch7_light.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch7_light.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7_light.adb?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,35 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         E X P _ C H 7 _ L I G H T                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Exp_Dbug; use Exp_Dbug;\n-\n-package body Exp_Ch7_Light is\n-\n-   procedure Expand_Light_N_Package_Declaration (N : Node_Id) is\n-   begin\n-      Qualify_Entity_Names (N);\n-   end Expand_Light_N_Package_Declaration;\n-\n-end Exp_Ch7_Light;"}, {"sha": "87ab34be1013d25898e97aa227e4b27cf363979a", "filename": "gcc/ada/exp_ch7_light.ads", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch7_light.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_ch7_light.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7_light.ads?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,35 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                         E X P _ C H 7 _ L I G H T                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---              Copyright (C) 2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Light expand routines for chapter 7 constructs\n-\n-with Types; use Types;\n-\n-package Exp_Ch7_Light is\n-\n-   procedure Expand_Light_N_Package_Declaration (N : Node_Id);\n-   --  Fully qualify names of enclosed entities\n-\n-end Exp_Ch7_Light;"}, {"sha": "ae7ed12e45a824bb80b86061c43d3d2aaea0443d", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 55, "deletions": 70, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -11130,10 +11130,8 @@ package body Exp_Ch9 is\n \n          Prepend_To (Decls,\n            Make_Object_Declaration (Loc,\n-             Defining_Identifier =>\n-               B,\n-             Object_Definition =>\n-               New_Reference_To (Standard_Boolean, Loc)));\n+             Defining_Identifier => B,\n+             Object_Definition   => New_Reference_To (Standard_Boolean, Loc)));\n       end if;\n \n       --  Duration and mode processing\n@@ -11149,15 +11147,19 @@ package body Exp_Ch9 is\n \n       elsif Is_RTE (D_Type, RO_CA_Time) then\n          D_Disc := Make_Integer_Literal (Loc, 1);\n-         D_Conv := Make_Function_Call (Loc,\n-           New_Reference_To (RTE (RO_CA_To_Duration), Loc),\n-           New_List (New_Copy (Expression (D_Stat))));\n+         D_Conv :=\n+           Make_Function_Call (Loc,\n+             Name => New_Reference_To (RTE (RO_CA_To_Duration), Loc),\n+             Parameter_Associations =>\n+               New_List (New_Copy (Expression (D_Stat))));\n \n       else pragma Assert (Is_RTE (D_Type, RO_RT_Time));\n          D_Disc := Make_Integer_Literal (Loc, 2);\n-         D_Conv := Make_Function_Call (Loc,\n-           New_Reference_To (RTE (RO_RT_To_Duration), Loc),\n-           New_List (New_Copy (Expression (D_Stat))));\n+         D_Conv :=\n+           Make_Function_Call (Loc,\n+             Name => New_Reference_To (RTE (RO_RT_To_Duration), Loc),\n+             Parameter_Associations =>\n+               New_List (New_Copy (Expression (D_Stat))));\n       end if;\n \n       D := Make_Temporary (Loc, 'D');\n@@ -11167,10 +11169,8 @@ package body Exp_Ch9 is\n \n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier =>\n-            D,\n-          Object_Definition =>\n-            New_Reference_To (Standard_Duration, Loc)));\n+          Defining_Identifier => D,\n+          Object_Definition   => New_Reference_To (Standard_Duration, Loc)));\n \n       M := Make_Temporary (Loc, 'M');\n \n@@ -11179,22 +11179,17 @@ package body Exp_Ch9 is\n \n       Append_To (Decls,\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier =>\n-            M,\n-          Object_Definition =>\n-            New_Reference_To (Standard_Integer, Loc),\n-          Expression =>\n-            D_Disc));\n+          Defining_Identifier => M,\n+          Object_Definition   => New_Reference_To (Standard_Integer, Loc),\n+          Expression          => D_Disc));\n \n       --  Do the assignment at this stage only because the evaluation of the\n       --  expression must not occur before (see ACVC C97302A).\n \n       Append_To (Stmts,\n         Make_Assignment_Statement (Loc,\n-          Name =>\n-            New_Reference_To (D, Loc),\n-          Expression =>\n-            D_Conv));\n+          Name       => New_Reference_To (D, Loc),\n+          Expression => D_Conv));\n \n       --  Parameter block processing\n \n@@ -11211,8 +11206,8 @@ package body Exp_Ch9 is\n          K := Build_K (Loc, Decls, Obj);\n \n          Blk_Typ := Build_Parameter_Block (Loc, Actuals, Formals, Decls);\n-         P := Parameter_Block_Pack\n-                (Loc, Blk_Typ, Actuals, Formals, Decls, Stmts);\n+         P :=\n+           Parameter_Block_Pack (Loc, Blk_Typ, Actuals, Formals, Decls, Stmts);\n \n          --  Dispatch table slot processing, generate:\n          --    S : Integer;\n@@ -11238,9 +11233,10 @@ package body Exp_Ch9 is\n \n          Append_To (Params, New_Copy_Tree (Obj));\n          Append_To (Params, New_Reference_To (S, Loc));\n-         Append_To (Params, Make_Attribute_Reference (Loc,\n-                              Prefix => New_Reference_To (P, Loc),\n-                              Attribute_Name => Name_Address));\n+         Append_To (Params,\n+           Make_Attribute_Reference (Loc,\n+             Prefix         => New_Reference_To (P, Loc),\n+             Attribute_Name => Name_Address));\n          Append_To (Params, New_Reference_To (D, Loc));\n          Append_To (Params, New_Reference_To (M, Loc));\n          Append_To (Params, New_Reference_To (C, Loc));\n@@ -11249,12 +11245,10 @@ package body Exp_Ch9 is\n          Append_To (Conc_Typ_Stmts,\n            Make_Procedure_Call_Statement (Loc,\n              Name =>\n-               New_Reference_To (\n-                 Find_Prim_Op (Etype (Etype (Obj)),\n-                   Name_uDisp_Timed_Select),\n-                 Loc),\n-             Parameter_Associations =>\n-               Params));\n+               New_Reference_To\n+                 (Find_Prim_Op\n+                   (Etype (Etype (Obj)), Name_uDisp_Timed_Select), Loc),\n+             Parameter_Associations => Params));\n \n          --  Generate:\n          --    if C = POK_Protected_Entry\n@@ -11274,24 +11268,22 @@ package body Exp_Ch9 is\n             Append_To (Conc_Typ_Stmts,\n               Make_If_Statement (Loc,\n \n-                Condition =>\n+                Condition       =>\n                   Make_Or_Else (Loc,\n-                    Left_Opnd =>\n+                    Left_Opnd  =>\n                       Make_Op_Eq (Loc,\n-                        Left_Opnd =>\n-                          New_Reference_To (C, Loc),\n+                        Left_Opnd => New_Reference_To (C, Loc),\n                         Right_Opnd =>\n-                          New_Reference_To (RTE (\n-                            RE_POK_Protected_Entry), Loc)),\n+                          New_Reference_To\n+                            (RTE (RE_POK_Protected_Entry), Loc)),\n+\n                     Right_Opnd =>\n                       Make_Op_Eq (Loc,\n-                        Left_Opnd =>\n-                          New_Reference_To (C, Loc),\n+                        Left_Opnd  => New_Reference_To (C, Loc),\n                         Right_Opnd =>\n                           New_Reference_To (RTE (RE_POK_Task_Entry), Loc))),\n \n-                Then_Statements =>\n-                  Unpack));\n+                Then_Statements => Unpack));\n          end if;\n \n          --  Generate:\n@@ -11317,33 +11309,30 @@ package body Exp_Ch9 is\n                Make_Or_Else (Loc,\n                  Left_Opnd =>\n                    Make_Op_Eq (Loc,\n-                     Left_Opnd =>\n-                       New_Reference_To (C, Loc),\n+                     Left_Opnd  => New_Reference_To (C, Loc),\n                      Right_Opnd =>\n                        New_Reference_To (RTE (RE_POK_Procedure), Loc)),\n+\n                  Right_Opnd =>\n                    Make_Or_Else (Loc,\n                      Left_Opnd =>\n                        Make_Op_Eq (Loc,\n-                         Left_Opnd =>\n-                           New_Reference_To (C, Loc),\n+                         Left_Opnd  => New_Reference_To (C, Loc),\n                          Right_Opnd =>\n                            New_Reference_To (RTE (\n                              RE_POK_Protected_Procedure), Loc)),\n                      Right_Opnd =>\n                        Make_Op_Eq (Loc,\n-                         Left_Opnd =>\n-                           New_Reference_To (C, Loc),\n+                         Left_Opnd  => New_Reference_To (C, Loc),\n                          Right_Opnd =>\n-                           New_Reference_To (RTE (\n-                             RE_POK_Task_Procedure), Loc)))),\n+                           New_Reference_To\n+                             (RTE (RE_POK_Task_Procedure), Loc)))),\n \n-             Then_Statements =>\n-               New_List (E_Call)));\n+             Then_Statements => New_List (E_Call)));\n \n          Append_To (Conc_Typ_Stmts,\n            Make_If_Statement (Loc,\n-             Condition => New_Reference_To (B, Loc),\n+             Condition       => New_Reference_To (B, Loc),\n              Then_Statements => N_Stats,\n              Else_Statements => D_Stats));\n \n@@ -11363,18 +11352,13 @@ package body Exp_Ch9 is\n \n          Append_To (Stmts,\n            Make_If_Statement (Loc,\n-             Condition =>\n+             Condition       =>\n                Make_Op_Eq (Loc,\n-                 Left_Opnd =>\n-                   New_Reference_To (K, Loc),\n+                 Left_Opnd  => New_Reference_To (K, Loc),\n                  Right_Opnd =>\n                    New_Reference_To (RTE (RE_TK_Limited_Tagged), Loc)),\n-\n-             Then_Statements =>\n-               Lim_Typ_Stmts,\n-\n-             Else_Statements =>\n-               Conc_Typ_Stmts));\n+             Then_Statements => Lim_Typ_Stmts,\n+             Else_Statements => Conc_Typ_Stmts));\n \n       else\n          --  Skip assignments to temporaries created for in-out parameters.\n@@ -11391,7 +11375,7 @@ package body Exp_Ch9 is\n \n          Insert_Before (Stmt,\n            Make_Assignment_Statement (Loc,\n-             Name => New_Reference_To (D, Loc),\n+             Name       => New_Reference_To (D, Loc),\n              Expression => D_Conv));\n \n          Call   := Stmt;\n@@ -11451,8 +11435,9 @@ package body Exp_Ch9 is\n \n                   Rewrite (Call,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name => New_Reference_To (\n-                        RTE (RE_Timed_Protected_Single_Entry_Call), Loc),\n+                      Name =>\n+                        New_Reference_To\n+                          (RTE (RE_Timed_Protected_Single_Entry_Call), Loc),\n                       Parameter_Associations => Params));\n \n                when others =>\n@@ -11477,14 +11462,14 @@ package body Exp_Ch9 is\n \n          Append_To (Stmts,\n            Make_Implicit_If_Statement (N,\n-             Condition => New_Reference_To (B, Loc),\n+             Condition       => New_Reference_To (B, Loc),\n              Then_Statements => E_Stats,\n              Else_Statements => D_Stats));\n       end if;\n \n       Rewrite (N,\n         Make_Block_Statement (Loc,\n-          Declarations => Decls,\n+          Declarations               => Decls,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n "}, {"sha": "47aa2e64e9c3ef909f3282c6674309e64e977950", "filename": "gcc/ada/exp_light.adb", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_light.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_light.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_light.adb?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,64 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                            E X P _ L I G H T                             --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Atree;          use Atree;\n-with Exp_Attr_Light; use Exp_Attr_Light;\n-with Exp_Ch6_Light;  use Exp_Ch6_Light;\n-with Exp_Ch7_Light;  use Exp_Ch7_Light;\n-with Sinfo;          use Sinfo;\n-\n-package body Exp_Light is\n-\n-   ------------------\n-   -- Expand_Light --\n-   ------------------\n-\n-   procedure Expand_Light (N : Node_Id) is\n-   begin\n-      case Nkind (N) is\n-\n-         when N_Package_Declaration =>\n-            Expand_Light_N_Package_Declaration (N);\n-\n-         when N_Simple_Return_Statement =>\n-            Expand_Light_N_Simple_Return_Statement (N);\n-\n-         when N_Subprogram_Body =>\n-            Expand_Light_N_Subprogram_Body (N);\n-\n-         when N_Function_Call            |\n-              N_Procedure_Call_Statement =>\n-            Expand_Light_Call (N);\n-\n-         when N_Attribute_Reference =>\n-            Expand_Light_N_Attribute_Reference (N);\n-\n-         when others =>\n-            null;\n-\n-      end case;\n-   end Expand_Light;\n-\n-end Exp_Light;"}, {"sha": "26804596f23558e649765e939a7ccd5642b4eed6", "filename": "gcc/ada/exp_light.ads", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_light.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8ca141c207d428a24416d2e5a5e6a324e8770f/gcc%2Fada%2Fexp_light.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_light.ads?ref=5b8ca141c207d428a24416d2e5a5e6a324e8770f", "patch": "@@ -1,52 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                            E X P _ L I G H T                             --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package implements a light expansion which is used in formal\n---  verification mode. Instead of a complete expansion of nodes for code\n---  generation, this light expansion targets generation of intermediate code\n---  for formal verification.\n-\n---  Expand_Light is called directly by Expander.Expand.\n-\n---  Light expansion has three main objectives:\n-\n---    1. Perform limited expansion to explicit some Ada rules and constructs\n---       (translate 'Old and 'Result, replace renamings by renamed, insert\n---        conversions, expand actuals in calls to introduce temporaries)\n-\n---    2. Facilitate treatment for the formal verification back-end (fully\n---       qualify names)\n-\n---    3. Avoid the introduction of low-level code that is difficult to analyze\n---       formally, as typically done in the full expansion for high-level\n---       constructs (tasking, dispatching)\n-\n-with Types; use Types;\n-\n-package Exp_Light is\n-\n-   procedure Expand_Light (N : Node_Id);\n-\n-end Exp_Light;"}, {"sha": "5c3d2ca2777fd9f5e1cf4f119bbfe9589ba4263b", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -321,6 +321,15 @@ package body Exp_Prag is\n       --  be an explicit conditional in the source, not an implicit if, so we\n       --  do not call Make_Implicit_If_Statement.\n \n+      --  In formal verification mode, we keep the pragma check in the code,\n+      --  and its enclosed expression is not expanded. This requires that no\n+      --  transient scope is introduced for pragma check in this mode in\n+      --  Exp_Ch7.Establish_Transient_Scope.\n+\n+      if ALFA_Mode then\n+         return;\n+      end if;\n+\n       --  Case where we generate a direct raise\n \n       if ((Debug_Flag_Dot_G"}, {"sha": "95b5d978c67fc06916442af4fd03121277bf20f9", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 212, "deletions": 219, "changes": 431, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -39,7 +39,6 @@ with Exp_Ch9;   use Exp_Ch9;\n with Exp_Ch11;  use Exp_Ch11;\n with Exp_Ch12;  use Exp_Ch12;\n with Exp_Ch13;  use Exp_Ch13;\n-with Exp_Light; use Exp_Light;\n with Exp_Prag;  use Exp_Prag;\n with Opt;       use Opt;\n with Rtsfind;   use Rtsfind;\n@@ -132,331 +131,325 @@ package body Expander is\n          --  routines.\n \n          begin\n-            if ALFA_Mode then\n-               Expand_Light (N);\n-\n-            else\n-               case Nkind (N) is\n+            case Nkind (N) is\n \n-                  when N_Abort_Statement =>\n-                     Expand_N_Abort_Statement (N);\n+               when N_Abort_Statement =>\n+                  Expand_N_Abort_Statement (N);\n \n-                  when N_Accept_Statement =>\n-                     Expand_N_Accept_Statement (N);\n+               when N_Accept_Statement =>\n+                  Expand_N_Accept_Statement (N);\n \n-                  when N_Aggregate =>\n-                     Expand_N_Aggregate (N);\n+               when N_Aggregate =>\n+                  Expand_N_Aggregate (N);\n \n-                  when N_Allocator =>\n-                     Expand_N_Allocator (N);\n+               when N_Allocator =>\n+                  Expand_N_Allocator (N);\n \n-                  when N_And_Then =>\n-                     Expand_N_And_Then (N);\n+               when N_And_Then =>\n+                  Expand_N_And_Then (N);\n \n-                  when N_Assignment_Statement =>\n-                     Expand_N_Assignment_Statement (N);\n+               when N_Assignment_Statement =>\n+                  Expand_N_Assignment_Statement (N);\n \n-                  when N_Asynchronous_Select =>\n-                     Expand_N_Asynchronous_Select (N);\n+               when N_Asynchronous_Select =>\n+                  Expand_N_Asynchronous_Select (N);\n \n-                  when N_Attribute_Definition_Clause =>\n-                     Expand_N_Attribute_Definition_Clause (N);\n+               when N_Attribute_Definition_Clause =>\n+                  Expand_N_Attribute_Definition_Clause (N);\n \n-                  when N_Attribute_Reference =>\n-                     Expand_N_Attribute_Reference (N);\n+               when N_Attribute_Reference =>\n+                  Expand_N_Attribute_Reference (N);\n \n-                  when N_Block_Statement =>\n-                     Expand_N_Block_Statement (N);\n+               when N_Block_Statement =>\n+                  Expand_N_Block_Statement (N);\n \n-                  when N_Case_Expression =>\n-                     Expand_N_Case_Expression (N);\n+               when N_Case_Expression =>\n+                  Expand_N_Case_Expression (N);\n \n-                  when N_Case_Statement =>\n-                     Expand_N_Case_Statement (N);\n+               when N_Case_Statement =>\n+                  Expand_N_Case_Statement (N);\n \n-                  when N_Conditional_Entry_Call =>\n-                     Expand_N_Conditional_Entry_Call (N);\n+               when N_Conditional_Entry_Call =>\n+                  Expand_N_Conditional_Entry_Call (N);\n \n-                  when N_Conditional_Expression =>\n-                     Expand_N_Conditional_Expression (N);\n+               when N_Conditional_Expression =>\n+                  Expand_N_Conditional_Expression (N);\n \n-                  when N_Delay_Relative_Statement =>\n-                     Expand_N_Delay_Relative_Statement (N);\n+               when N_Delay_Relative_Statement =>\n+                  Expand_N_Delay_Relative_Statement (N);\n \n-                  when N_Delay_Until_Statement =>\n-                     Expand_N_Delay_Until_Statement (N);\n+               when N_Delay_Until_Statement =>\n+                  Expand_N_Delay_Until_Statement (N);\n \n-                  when N_Entry_Body =>\n-                     Expand_N_Entry_Body (N);\n+               when N_Entry_Body =>\n+                  Expand_N_Entry_Body (N);\n \n-                  when N_Entry_Call_Statement =>\n-                     Expand_N_Entry_Call_Statement (N);\n+               when N_Entry_Call_Statement =>\n+                  Expand_N_Entry_Call_Statement (N);\n \n-                  when N_Entry_Declaration =>\n-                     Expand_N_Entry_Declaration (N);\n+               when N_Entry_Declaration =>\n+                  Expand_N_Entry_Declaration (N);\n \n-                  when N_Exception_Declaration =>\n-                     Expand_N_Exception_Declaration (N);\n+               when N_Exception_Declaration =>\n+                  Expand_N_Exception_Declaration (N);\n \n-                  when N_Exception_Renaming_Declaration =>\n-                     Expand_N_Exception_Renaming_Declaration (N);\n+               when N_Exception_Renaming_Declaration =>\n+                  Expand_N_Exception_Renaming_Declaration (N);\n \n-                  when N_Exit_Statement =>\n-                     Expand_N_Exit_Statement (N);\n+               when N_Exit_Statement =>\n+                  Expand_N_Exit_Statement (N);\n \n-                  when N_Expanded_Name =>\n-                     Expand_N_Expanded_Name (N);\n+               when N_Expanded_Name =>\n+                  Expand_N_Expanded_Name (N);\n \n-                  when N_Explicit_Dereference =>\n-                     Expand_N_Explicit_Dereference (N);\n+               when N_Explicit_Dereference =>\n+                  Expand_N_Explicit_Dereference (N);\n \n-                  when N_Expression_With_Actions =>\n-                     Expand_N_Expression_With_Actions (N);\n+               when N_Expression_With_Actions =>\n+                  Expand_N_Expression_With_Actions (N);\n \n-                  when N_Extended_Return_Statement =>\n-                     Expand_N_Extended_Return_Statement (N);\n+               when N_Extended_Return_Statement =>\n+                  Expand_N_Extended_Return_Statement (N);\n \n-                  when N_Extension_Aggregate =>\n-                     Expand_N_Extension_Aggregate (N);\n+               when N_Extension_Aggregate =>\n+                  Expand_N_Extension_Aggregate (N);\n \n-                  when N_Free_Statement =>\n-                     Expand_N_Free_Statement (N);\n+               when N_Free_Statement =>\n+                  Expand_N_Free_Statement (N);\n \n-                  when N_Freeze_Entity =>\n-                     Expand_N_Freeze_Entity (N);\n+               when N_Freeze_Entity =>\n+                  Expand_N_Freeze_Entity (N);\n \n-                  when N_Full_Type_Declaration =>\n-                     Expand_N_Full_Type_Declaration (N);\n+               when N_Full_Type_Declaration =>\n+                  Expand_N_Full_Type_Declaration (N);\n \n-                  when N_Function_Call =>\n-                     Expand_N_Function_Call (N);\n+               when N_Function_Call =>\n+                  Expand_N_Function_Call (N);\n \n-                  when N_Generic_Instantiation =>\n-                     Expand_N_Generic_Instantiation (N);\n+               when N_Generic_Instantiation =>\n+                  Expand_N_Generic_Instantiation (N);\n \n-                  when N_Goto_Statement =>\n-                     Expand_N_Goto_Statement (N);\n+               when N_Goto_Statement =>\n+                  Expand_N_Goto_Statement (N);\n \n-                  when N_Handled_Sequence_Of_Statements =>\n-                     Expand_N_Handled_Sequence_Of_Statements (N);\n+               when N_Handled_Sequence_Of_Statements =>\n+                  Expand_N_Handled_Sequence_Of_Statements (N);\n \n-                  when N_Identifier =>\n-                     Expand_N_Identifier (N);\n+               when N_Identifier =>\n+                  Expand_N_Identifier (N);\n \n-                  when N_Indexed_Component =>\n-                     Expand_N_Indexed_Component (N);\n+               when N_Indexed_Component =>\n+                  Expand_N_Indexed_Component (N);\n \n-                  when N_If_Statement =>\n-                     Expand_N_If_Statement (N);\n+               when N_If_Statement =>\n+                  Expand_N_If_Statement (N);\n \n-                  when N_In =>\n-                     Expand_N_In (N);\n+               when N_In =>\n+                  Expand_N_In (N);\n \n-                  when N_Loop_Statement =>\n-                     Expand_N_Loop_Statement (N);\n+               when N_Loop_Statement =>\n+                  Expand_N_Loop_Statement (N);\n \n-                  when N_Not_In =>\n-                     Expand_N_Not_In (N);\n+               when N_Not_In =>\n+                  Expand_N_Not_In (N);\n \n-                  when N_Null =>\n-                     Expand_N_Null (N);\n+               when N_Null =>\n+                  Expand_N_Null (N);\n \n-                  when N_Object_Declaration =>\n-                     Expand_N_Object_Declaration (N);\n+               when N_Object_Declaration =>\n+                  Expand_N_Object_Declaration (N);\n \n-                  when N_Object_Renaming_Declaration =>\n-                     Expand_N_Object_Renaming_Declaration (N);\n+               when N_Object_Renaming_Declaration =>\n+                  Expand_N_Object_Renaming_Declaration (N);\n \n-                  when N_Op_Add =>\n-                     Expand_N_Op_Add (N);\n+               when N_Op_Add =>\n+                  Expand_N_Op_Add (N);\n \n-                  when N_Op_Abs =>\n-                     Expand_N_Op_Abs (N);\n+               when N_Op_Abs =>\n+                  Expand_N_Op_Abs (N);\n \n-                  when N_Op_And =>\n-                     Expand_N_Op_And (N);\n+               when N_Op_And =>\n+                  Expand_N_Op_And (N);\n \n-                  when N_Op_Concat =>\n-                     Expand_N_Op_Concat (N);\n+               when N_Op_Concat =>\n+                  Expand_N_Op_Concat (N);\n \n-                  when N_Op_Divide =>\n-                     Expand_N_Op_Divide (N);\n+               when N_Op_Divide =>\n+                  Expand_N_Op_Divide (N);\n \n-                  when N_Op_Eq =>\n-                     Expand_N_Op_Eq (N);\n+               when N_Op_Eq =>\n+                  Expand_N_Op_Eq (N);\n \n-                  when N_Op_Expon =>\n-                     Expand_N_Op_Expon (N);\n+               when N_Op_Expon =>\n+                  Expand_N_Op_Expon (N);\n \n-                  when N_Op_Ge =>\n-                     Expand_N_Op_Ge (N);\n+               when N_Op_Ge =>\n+                  Expand_N_Op_Ge (N);\n \n-                  when N_Op_Gt =>\n-                     Expand_N_Op_Gt (N);\n+               when N_Op_Gt =>\n+                  Expand_N_Op_Gt (N);\n \n-                  when N_Op_Le =>\n-                     Expand_N_Op_Le (N);\n+               when N_Op_Le =>\n+                  Expand_N_Op_Le (N);\n \n-                  when N_Op_Lt =>\n-                     Expand_N_Op_Lt (N);\n+               when N_Op_Lt =>\n+                  Expand_N_Op_Lt (N);\n \n-                  when N_Op_Minus =>\n-                     Expand_N_Op_Minus (N);\n+               when N_Op_Minus =>\n+                  Expand_N_Op_Minus (N);\n \n-                  when N_Op_Mod =>\n-                     Expand_N_Op_Mod (N);\n+               when N_Op_Mod =>\n+                  Expand_N_Op_Mod (N);\n \n-                  when N_Op_Multiply =>\n-                     Expand_N_Op_Multiply (N);\n+               when N_Op_Multiply =>\n+                  Expand_N_Op_Multiply (N);\n \n-                  when N_Op_Ne =>\n-                     Expand_N_Op_Ne (N);\n+               when N_Op_Ne =>\n+                  Expand_N_Op_Ne (N);\n \n-                  when N_Op_Not =>\n-                     Expand_N_Op_Not (N);\n+               when N_Op_Not =>\n+                  Expand_N_Op_Not (N);\n \n-                  when N_Op_Or =>\n-                     Expand_N_Op_Or (N);\n+               when N_Op_Or =>\n+                  Expand_N_Op_Or (N);\n \n-                  when N_Op_Plus =>\n-                     Expand_N_Op_Plus (N);\n+               when N_Op_Plus =>\n+                  Expand_N_Op_Plus (N);\n \n-                  when N_Op_Rem =>\n-                     Expand_N_Op_Rem (N);\n+               when N_Op_Rem =>\n+                  Expand_N_Op_Rem (N);\n \n-                  when N_Op_Rotate_Left =>\n-                     Expand_N_Op_Rotate_Left (N);\n+               when N_Op_Rotate_Left =>\n+                  Expand_N_Op_Rotate_Left (N);\n \n-                  when N_Op_Rotate_Right =>\n-                     Expand_N_Op_Rotate_Right (N);\n+               when N_Op_Rotate_Right =>\n+                  Expand_N_Op_Rotate_Right (N);\n \n-                  when N_Op_Shift_Left =>\n-                     Expand_N_Op_Shift_Left (N);\n+               when N_Op_Shift_Left =>\n+                  Expand_N_Op_Shift_Left (N);\n \n-                  when N_Op_Shift_Right =>\n-                     Expand_N_Op_Shift_Right (N);\n+               when N_Op_Shift_Right =>\n+                  Expand_N_Op_Shift_Right (N);\n \n-                  when N_Op_Shift_Right_Arithmetic =>\n-                     Expand_N_Op_Shift_Right_Arithmetic (N);\n+               when N_Op_Shift_Right_Arithmetic =>\n+                  Expand_N_Op_Shift_Right_Arithmetic (N);\n \n-                  when N_Op_Subtract =>\n-                     Expand_N_Op_Subtract (N);\n+               when N_Op_Subtract =>\n+                  Expand_N_Op_Subtract (N);\n \n-                  when N_Op_Xor =>\n-                     Expand_N_Op_Xor (N);\n+               when N_Op_Xor =>\n+                  Expand_N_Op_Xor (N);\n \n-                  when N_Or_Else =>\n-                     Expand_N_Or_Else (N);\n+               when N_Or_Else =>\n+                  Expand_N_Or_Else (N);\n \n-                  when N_Package_Body =>\n-                     Expand_N_Package_Body (N);\n+               when N_Package_Body =>\n+                  Expand_N_Package_Body (N);\n \n-                  when N_Package_Declaration =>\n-                     Expand_N_Package_Declaration (N);\n+               when N_Package_Declaration =>\n+                  Expand_N_Package_Declaration (N);\n \n-                  when N_Package_Renaming_Declaration =>\n-                     Expand_N_Package_Renaming_Declaration (N);\n+               when N_Package_Renaming_Declaration =>\n+                  Expand_N_Package_Renaming_Declaration (N);\n \n-                  when N_Subprogram_Renaming_Declaration =>\n-                     Expand_N_Subprogram_Renaming_Declaration (N);\n+               when N_Subprogram_Renaming_Declaration =>\n+                  Expand_N_Subprogram_Renaming_Declaration (N);\n \n-                  when N_Pragma =>\n-                     Expand_N_Pragma (N);\n+               when N_Pragma =>\n+                  Expand_N_Pragma (N);\n \n-                  when N_Procedure_Call_Statement =>\n-                     Expand_N_Procedure_Call_Statement (N);\n+               when N_Procedure_Call_Statement =>\n+                  Expand_N_Procedure_Call_Statement (N);\n \n-                  when N_Protected_Type_Declaration =>\n-                     Expand_N_Protected_Type_Declaration (N);\n+               when N_Protected_Type_Declaration =>\n+                  Expand_N_Protected_Type_Declaration (N);\n \n-                  when N_Protected_Body =>\n-                     Expand_N_Protected_Body (N);\n+               when N_Protected_Body =>\n+                  Expand_N_Protected_Body (N);\n \n-                  when N_Qualified_Expression =>\n-                     Expand_N_Qualified_Expression (N);\n+               when N_Qualified_Expression =>\n+                  Expand_N_Qualified_Expression (N);\n \n-                  when N_Quantified_Expression  =>\n-                     Expand_N_Quantified_Expression (N);\n+               when N_Quantified_Expression  =>\n+                  Expand_N_Quantified_Expression (N);\n \n-                  when N_Raise_Statement =>\n-                     Expand_N_Raise_Statement (N);\n+               when N_Raise_Statement =>\n+                  Expand_N_Raise_Statement (N);\n \n-                  when N_Raise_Constraint_Error =>\n-                     Expand_N_Raise_Constraint_Error (N);\n+               when N_Raise_Constraint_Error =>\n+                  Expand_N_Raise_Constraint_Error (N);\n \n-                  when N_Raise_Program_Error =>\n-                     Expand_N_Raise_Program_Error (N);\n+               when N_Raise_Program_Error =>\n+                  Expand_N_Raise_Program_Error (N);\n \n-                  when N_Raise_Storage_Error =>\n-                     Expand_N_Raise_Storage_Error (N);\n+               when N_Raise_Storage_Error =>\n+                  Expand_N_Raise_Storage_Error (N);\n \n-                  when N_Real_Literal =>\n-                     Expand_N_Real_Literal (N);\n+               when N_Real_Literal =>\n+                  Expand_N_Real_Literal (N);\n \n-                  when N_Record_Representation_Clause =>\n-                     Expand_N_Record_Representation_Clause (N);\n+               when N_Record_Representation_Clause =>\n+                  Expand_N_Record_Representation_Clause (N);\n \n-                  when N_Requeue_Statement =>\n-                     Expand_N_Requeue_Statement (N);\n+               when N_Requeue_Statement =>\n+                  Expand_N_Requeue_Statement (N);\n \n-                  when N_Simple_Return_Statement =>\n-                     Expand_N_Simple_Return_Statement (N);\n+               when N_Simple_Return_Statement =>\n+                  Expand_N_Simple_Return_Statement (N);\n \n-                  when N_Selected_Component =>\n-                     Expand_N_Selected_Component (N);\n+               when N_Selected_Component =>\n+                  Expand_N_Selected_Component (N);\n \n-                  when N_Selective_Accept =>\n-                     Expand_N_Selective_Accept (N);\n+               when N_Selective_Accept =>\n+                  Expand_N_Selective_Accept (N);\n \n-                  when N_Single_Task_Declaration =>\n-                     Expand_N_Single_Task_Declaration (N);\n+               when N_Single_Task_Declaration =>\n+                  Expand_N_Single_Task_Declaration (N);\n \n-                  when N_Slice =>\n-                     Expand_N_Slice (N);\n+               when N_Slice =>\n+                  Expand_N_Slice (N);\n \n-                  when N_Subtype_Indication =>\n-                     Expand_N_Subtype_Indication (N);\n+               when N_Subtype_Indication =>\n+                  Expand_N_Subtype_Indication (N);\n \n-                  when N_Subprogram_Body =>\n-                     Expand_N_Subprogram_Body (N);\n+               when N_Subprogram_Body =>\n+                  Expand_N_Subprogram_Body (N);\n \n-                  when N_Subprogram_Body_Stub =>\n-                     Expand_N_Subprogram_Body_Stub (N);\n+               when N_Subprogram_Body_Stub =>\n+                  Expand_N_Subprogram_Body_Stub (N);\n \n-                  when N_Subprogram_Declaration =>\n-                     Expand_N_Subprogram_Declaration (N);\n+               when N_Subprogram_Declaration =>\n+                  Expand_N_Subprogram_Declaration (N);\n \n-                  when N_Subprogram_Info =>\n-                     Expand_N_Subprogram_Info (N);\n+               when N_Subprogram_Info =>\n+                  Expand_N_Subprogram_Info (N);\n \n-                  when N_Task_Body =>\n-                     Expand_N_Task_Body (N);\n+               when N_Task_Body =>\n+                  Expand_N_Task_Body (N);\n \n-                  when N_Task_Type_Declaration =>\n-                     Expand_N_Task_Type_Declaration (N);\n+               when N_Task_Type_Declaration =>\n+                  Expand_N_Task_Type_Declaration (N);\n \n-                  when N_Timed_Entry_Call =>\n-                     Expand_N_Timed_Entry_Call (N);\n+               when N_Timed_Entry_Call =>\n+                  Expand_N_Timed_Entry_Call (N);\n \n-                  when N_Type_Conversion =>\n-                     Expand_N_Type_Conversion (N);\n+               when N_Type_Conversion =>\n+                  Expand_N_Type_Conversion (N);\n \n-                  when N_Unchecked_Expression =>\n-                     Expand_N_Unchecked_Expression (N);\n+               when N_Unchecked_Expression =>\n+                  Expand_N_Unchecked_Expression (N);\n \n-                  when N_Unchecked_Type_Conversion =>\n-                     Expand_N_Unchecked_Type_Conversion (N);\n+               when N_Unchecked_Type_Conversion =>\n+                  Expand_N_Unchecked_Type_Conversion (N);\n \n-                  when N_Variant_Part =>\n-                     Expand_N_Variant_Part (N);\n+               when N_Variant_Part =>\n+                  Expand_N_Variant_Part (N);\n \n-                  --  For all other node kinds, no expansion activity is\n-                  --  required.\n+               --  For all other node kinds, no expansion activity is required\n \n-                  when others => null;\n+               when others => null;\n \n-               end case;\n-            end if;\n+            end case;\n \n          exception\n             when RE_Not_Available =>"}, {"sha": "f371afafa45490a8d70c7707cff4485008febe33", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -435,9 +435,8 @@ procedure Gnat1drv is\n \n          Polling_Required := False;\n \n-         --  Set operating mode to Generate_Code, but full front-end expansion\n-         --  is not desirable in ALFA mode, so a light expansion is performed\n-         --  instead.\n+         --  Set operating mode to Generate_Code to benefit from full front-end\n+         --  expansion (e.g. default arguments).\n \n          Operating_Mode := Generate_Code;\n "}, {"sha": "0afea184baf4d7dd387fa53dd6f26a292dce3d9f", "filename": "gcc/ada/s-secsta.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -33,6 +33,7 @@ pragma Compiler_Unit;\n \n with System.Soft_Links;\n with System.Parameters;\n+\n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n "}, {"sha": "74d522c985a2655441f92af819bc2cd643d6c1d7", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=a0347839daf7ab6b9c9ce1c8323bb25d402e6ac5", "patch": "@@ -1023,9 +1023,10 @@ package body System.Tasking.Stages is\n       Secondary_Stack_Size :\n         constant SSE.Storage_Offset :=\n           Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size *\n-          SSE.Storage_Offset (Parameters.Sec_Stack_Percentage) / 100;\n+            SSE.Storage_Offset (Parameters.Sec_Stack_Percentage) / 100;\n \n       Secondary_Stack : aliased SSE.Storage_Array (1 .. Secondary_Stack_Size);\n+      --  Actual area allocated for secondary stack\n \n       Secondary_Stack_Address : System.Address := Secondary_Stack'Address;\n       --  Address of secondary stack. In the fixed secondary stack case, this\n@@ -1086,6 +1087,8 @@ package body System.Tasking.Stages is\n          end if;\n       end Search_Fall_Back_Handler;\n \n+   --  Start of processing for Task_Wrapper\n+\n    begin\n       pragma Assert (Self_ID.Deferral_Level = 1);\n "}]}