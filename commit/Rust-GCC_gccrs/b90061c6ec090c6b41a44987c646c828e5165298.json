{"sha": "b90061c6ec090c6b41a44987c646c828e5165298", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwMDYxYzZlYzA5MGM2YjQxYTQ0OTg3YzY0NmM4MjhlNTE2NTI5OA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-02T15:52:38Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-02T15:52:38Z"}, "message": "Prevent IPA-SRA from creating calls to local comdats (PR 92676)\n\nsince r278669 (fix for PR ipa/91956), IPA-SRA makes sure that the clone\nit creates is put into the same same_comdat as the original cgraph_node,\nso that it can call private comdats (such as the ipa-split bits of a\ncomdat that is private).\n\nHowever, that means that if there is non-comdat caller of a public\ncomdat that is modified by IPA-SRA, it now finds itself calling a\nprivate comdat, which call graph verifier does not like (and for a\nreason, in theory it can disappear and since it is private it would not\nbe available from other CUs).\n\nThe patch fixes this by performing the fix for PR 91956 only when the\nnode in question actually calls a local comdat and when it does, also\nmaking sure that no callers come from a different same_comdat (disabling\nIPA-SRA if both conditions are true), so that it plays by the rules in\nboth modes, does not violate the private comdat calling rule and at the\nsame time does not disable the transformation unnecessarily.\n\nThe patch also fixes up the calls_comdat_local of callers of the\nmodified node, despite that not triggering any known issues.\n\n2020-04-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/92676\n\t* ipa-sra.c (struct caller_issues): New fields candidate and\n\tcall_from_outside_comdat.\n\t(check_for_caller_issues): Check for calls from outsied of\n\tcandidate's same_comdat_group.\n\t(check_all_callers_for_issues): Set up issues.candidate, check result\n\tof the new check.\n\t(mark_callers_calls_comdat_local): New function.\n\t(process_isra_node_results): Set calls_comdat_local of callers if\n\tappropriate.", "tree": {"sha": "366ce819436620447d0b9af08181081b3c25a585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366ce819436620447d0b9af08181081b3c25a585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b90061c6ec090c6b41a44987c646c828e5165298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90061c6ec090c6b41a44987c646c828e5165298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90061c6ec090c6b41a44987c646c828e5165298", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90061c6ec090c6b41a44987c646c828e5165298/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75efe9cb1f8938a713ce540dc3b27bc2afcd3fae"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "e71466f9574d6b92dea58b18efcef9359dbacdb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90061c6ec090c6b41a44987c646c828e5165298/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90061c6ec090c6b41a44987c646c828e5165298/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b90061c6ec090c6b41a44987c646c828e5165298", "patch": "@@ -1,3 +1,16 @@\n+2020-04-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/92676\n+\t* ipa-sra.c (struct caller_issues): New fields candidate and\n+\tcall_from_outside_comdat.\n+\t(check_for_caller_issues): Check for calls from outsied of\n+\tcandidate's same_comdat_group.\n+\t(check_all_callers_for_issues): Set up issues.candidate, check result\n+\tof the new check.\n+\t(mark_callers_calls_comdat_local): New function.\n+\t(process_isra_node_results): Set calls_comdat_local of callers if\n+\tappropriate.\n+\n 2020-04-02  Richard Biener  <rguenther@suse.de>\n \n \tPR c/94392"}, {"sha": "f0ebaec708d81521fb034ff61346c7b1204fe2fc", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90061c6ec090c6b41a44987c646c828e5165298/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90061c6ec090c6b41a44987c646c828e5165298/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=b90061c6ec090c6b41a44987c646c828e5165298", "patch": "@@ -2897,10 +2897,14 @@ ipa_sra_ipa_function_checks (cgraph_node *node)\n \n struct caller_issues\n {\n+  /* The candidate being considered.  */\n+  cgraph_node *candidate;\n   /* There is a thunk among callers.  */\n   bool thunk;\n   /* Call site with no available information.  */\n   bool unknown_callsite;\n+  /* Call from outside the the candidate's comdat group.  */\n+  bool call_from_outside_comdat;\n   /* There is a bit-aligned load into one of non-gimple-typed arguments. */\n   bool bit_aligned_aggregate_argument;\n };\n@@ -2922,6 +2926,13 @@ check_for_caller_issues (struct cgraph_node *node, void *data)\n \t     thunks.  */\n \t  return true;\n \t}\n+      if (issues->candidate->calls_comdat_local\n+\t  && issues->candidate->same_comdat_group\n+\t  && !issues->candidate->in_same_comdat_group_p (cs->caller))\n+\t{\n+\t  issues->call_from_outside_comdat = true;\n+\t  return true;\n+\t}\n \n       isra_call_summary *csum = call_sums->get (cs);\n       if (!csum)\n@@ -2944,6 +2955,7 @@ check_all_callers_for_issues (cgraph_node *node)\n {\n   struct caller_issues issues;\n   memset (&issues, 0, sizeof (issues));\n+  issues.candidate = node;\n \n   node->call_for_symbol_and_aliases (check_for_caller_issues, &issues, true);\n   if (issues.unknown_callsite)\n@@ -2962,6 +2974,13 @@ check_all_callers_for_issues (cgraph_node *node)\n \t\t node->dump_name ());\n       return true;\n     }\n+  if (issues.call_from_outside_comdat)\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Function would become private comdat called \"\n+\t\t \"outside of its comdat group.\\n\");\n+      return true;\n+    }\n \n   if (issues.bit_aligned_aggregate_argument)\n     {\n@@ -3679,6 +3698,17 @@ push_param_adjustments_for_index (isra_func_summary *ifs, unsigned base_index,\n     }\n }\n \n+/* Worker for all call_for_symbol_thunks_and_aliases.  Set calls_comdat_local\n+   flag of all callers of NODE.  */\n+\n+static bool\n+mark_callers_calls_comdat_local (struct cgraph_node *node, void *)\n+{\n+  for (cgraph_edge *cs = node->callers; cs; cs = cs->next_caller)\n+    cs->caller->calls_comdat_local = true;\n+  return false;\n+}\n+\n \n /* Do final processing of results of IPA propagation regarding NODE, clone it\n    if appropriate.  */\n@@ -3763,8 +3793,12 @@ process_isra_node_results (cgraph_node *node,\n     = node->create_virtual_clone (callers, NULL, new_adjustments, \"isra\",\n \t\t\t\t  suffix_counter);\n   suffix_counter++;\n-  if (node->same_comdat_group)\n-    new_node->add_to_same_comdat_group (node);\n+  if (node->calls_comdat_local && node->same_comdat_group)\n+    {\n+      new_node->add_to_same_comdat_group (node);\n+      new_node->call_for_symbol_and_aliases (mark_callers_calls_comdat_local,\n+\t\t\t\t\t     NULL, true);\n+    }\n   new_node->calls_comdat_local = node->calls_comdat_local;\n \n   if (dump_file)"}]}