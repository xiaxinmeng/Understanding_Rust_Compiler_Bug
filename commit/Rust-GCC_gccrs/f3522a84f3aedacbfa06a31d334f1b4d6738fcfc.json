{"sha": "f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1MjJhODRmM2FlZGFjYmZhMDZhMzFkMzM0ZjFiNGQ2NzM4ZmNmYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-26T14:27:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-26T14:27:35Z"}, "message": "basic-block.h (ei_cond): New.\n\n\t* basic-block.h (ei_cond): New.\n\t(FOR_EACH_EDGE): Call ei_cond.\n\nFrom-SVN: r98769", "tree": {"sha": "d84d375ad74f53f9af91c2ba68d00078af10d7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84d375ad74f53f9af91c2ba68d00078af10d7f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc/comments", "author": null, "committer": null, "parents": [{"sha": "44ecf603649098d1d89bd855155a215507bf9e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ecf603649098d1d89bd855155a215507bf9e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ecf603649098d1d89bd855155a215507bf9e86"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "74a7b894c48247d4f690dc1e9df6b9690873c898", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "patch": "@@ -1,3 +1,8 @@\n+2005-04-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* basic-block.h (ei_cond): New.\n+\t(FOR_EACH_EDGE): Call ei_cond.\n+\n 2005-04-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* sched-deps.c (sched_analyze_1): On STACK_REGS targets, x87, treat"}, {"sha": "baca9d7e9e88f003d121e584d47f6326ebcdf358", "filename": "gcc/basic-block.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3522a84f3aedacbfa06a31d334f1b4d6738fcfc/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=f3522a84f3aedacbfa06a31d334f1b4d6738fcfc", "patch": "@@ -736,6 +736,25 @@ ei_safe_edge (edge_iterator i)\n   return !ei_end_p (i) ? ei_edge (i) : NULL;\n }\n \n+/* Return 1 if we should continue to iterate.  Return 0 otherwise.\n+   *Edge P is set to the next edge if we are to continue to iterate\n+   and NULL otherwise.  */\n+\n+static inline bool\n+ei_cond (edge_iterator ei, edge *p)\n+{\n+  if (!ei_end_p (ei))\n+    {\n+      *p = ei_edge (ei);\n+      return 1;\n+    }\n+  else\n+    {\n+      *p = NULL;\n+      return 0;\n+    }\n+}\n+\n /* This macro serves as a convenient way to iterate each edge in a\n    vector of predecessor or successor edges.  It must not be used when\n    an element might be removed during the traversal, otherwise\n@@ -751,9 +770,9 @@ ei_safe_edge (edge_iterator i)\n      }\n */\n \n-#define FOR_EACH_EDGE(EDGE,ITER,EDGE_VEC) \\\n-  for ((EDGE) = NULL, (ITER) = ei_start ((EDGE_VEC)); \\\n-       ((EDGE) = ei_safe_edge ((ITER))); \\\n+#define FOR_EACH_EDGE(EDGE,ITER,EDGE_VEC)\t\\\n+  for ((ITER) = ei_start ((EDGE_VEC));\t\t\\\n+       ei_cond ((ITER), &(EDGE));\t\t\\\n        ei_next (&(ITER)))\n \n struct edge_list * create_edge_list (void);"}]}