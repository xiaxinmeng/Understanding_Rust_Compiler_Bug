{"sha": "a4e5aee5863c7d898ee640296bc837e0baa8e796", "node_id": "C_kwDOANBUbNoAKGE0ZTVhZWU1ODYzYzdkODk4ZWU2NDAyOTZiYzgzN2UwYmFhOGU3OTY", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-15T18:12:20Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-11-16T21:15:54Z"}, "message": "Replace Bblock with GCC tree", "tree": {"sha": "f40c90287ae41fa3689cdc38d4bb021fb6cc8394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40c90287ae41fa3689cdc38d4bb021fb6cc8394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e5aee5863c7d898ee640296bc837e0baa8e796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e5aee5863c7d898ee640296bc837e0baa8e796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e5aee5863c7d898ee640296bc837e0baa8e796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e5aee5863c7d898ee640296bc837e0baa8e796/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95048daaffa5e16df4d663702fe80294eac7b85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95048daaffa5e16df4d663702fe80294eac7b85e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95048daaffa5e16df4d663702fe80294eac7b85e"}], "stats": {"total": 144, "additions": 60, "deletions": 84}, "files": [{"sha": "af90671da01dc2d17cab77369e9eec52b80cc108", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -30,7 +30,7 @@ class CompileBlock : public HIRCompileBase\n   using Rust::Compile::HIRCompileBase::visit;\n \n public:\n-  static Bblock *compile (HIR::BlockExpr *expr, Context *ctx, Bvariable *result)\n+  static tree compile (HIR::BlockExpr *expr, Context *ctx, Bvariable *result)\n   {\n     CompileBlock compiler (ctx, result);\n     expr->accept_vis (compiler);\n@@ -44,7 +44,7 @@ class CompileBlock : public HIRCompileBase\n     : HIRCompileBase (ctx), translated (nullptr), result (result)\n   {}\n \n-  Bblock *translated;\n+  tree translated;\n   Bvariable *result;\n };\n "}, {"sha": "1fe67d265116c879cd503e5d951bba2e12a72f15", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -112,13 +112,13 @@ class Context\n   Analysis::Mappings *get_mappings () { return mappings; }\n   ConstFold::Context *get_const_ctx () { return const_ctx; }\n \n-  void push_block (Bblock *scope)\n+  void push_block (tree scope)\n   {\n     scope_stack.push_back (scope);\n     statements.push_back ({});\n   }\n \n-  Bblock *pop_block ()\n+  tree pop_block ()\n   {\n     auto block = scope_stack.back ();\n     scope_stack.pop_back ();\n@@ -131,7 +131,7 @@ class Context\n     return block;\n   }\n \n-  Bblock *peek_enclosing_scope ()\n+  tree peek_enclosing_scope ()\n   {\n     if (scope_stack.size () == 0)\n       return nullptr;\n@@ -323,7 +323,7 @@ class Context\n   std::map<HirId, tree> compiled_consts;\n   std::map<HirId, ::Blabel *> compiled_labels;\n   std::vector<::std::vector<tree>> statements;\n-  std::vector<::Bblock *> scope_stack;\n+  std::vector<tree> scope_stack;\n   std::vector<::Bvariable *> loop_value_stack;\n   std::vector<::Blabel *> loop_begin_labels;\n   std::map<const TyTy::BaseType *, std::pair<HirId, ::tree >> mono;"}, {"sha": "fb01d8d41225a0fde71d791daae92710e84a49fc", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -176,7 +176,7 @@ CompileExpr::compile_dyn_dispatch_call (const TyTy::DynamicObjectType *dyn,\n \t\t\t\t\t       fn_vtable_access, expr_locus);\n \n   fncontext fnctx = ctx->peek_fn ();\n-  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+  tree enclosing_scope = ctx->peek_enclosing_scope ();\n   bool is_address_taken = false;\n   tree ret_var_stmt = NULL_TREE;\n   Bvariable *fn_convert_expr_tmp"}, {"sha": "52cc58a865691ea95554f6d4600cdd35a85993bf", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -514,7 +514,7 @@ class CompileExpr : public HIRCompileBase\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n-\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\ttree enclosing_scope = ctx->peek_enclosing_scope ();\n \ttree block_type = TyTyResolveCompile::compile (ctx, if_type);\n \n \tbool is_address_taken = false;\n@@ -551,7 +551,7 @@ class CompileExpr : public HIRCompileBase\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n-\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\ttree enclosing_scope = ctx->peek_enclosing_scope ();\n \ttree block_type = TyTyResolveCompile::compile (ctx, if_type);\n \n \tbool is_address_taken = false;\n@@ -587,7 +587,7 @@ class CompileExpr : public HIRCompileBase\n     if (needs_temp)\n       {\n \tfncontext fnctx = ctx->peek_fn ();\n-\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\ttree enclosing_scope = ctx->peek_enclosing_scope ();\n \ttree block_type = TyTyResolveCompile::compile (ctx, block_tyty);\n \n \tbool is_address_taken = false;\n@@ -740,7 +740,7 @@ class CompileExpr : public HIRCompileBase\n     bool needs_temp = !block_tyty->is_unit ();\n     if (needs_temp)\n       {\n-\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\ttree enclosing_scope = ctx->peek_enclosing_scope ();\n \ttree block_type = TyTyResolveCompile::compile (ctx, block_tyty);\n \n \tbool is_address_taken = false;\n@@ -773,7 +773,7 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (loop_begin_label_decl);\n     ctx->push_loop_begin_label (loop_begin_label);\n \n-    Bblock *code_block\n+    tree code_block\n       = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n     tree loop_expr\n       = ctx->get_backend ()->loop_expression (code_block, expr.get_locus ());\n@@ -811,8 +811,8 @@ class CompileExpr : public HIRCompileBase\n     Location start_location = expr.get_loop_block ()->get_locus ();\n     Location end_location = expr.get_loop_block ()->get_locus (); // FIXME\n \n-    Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-    Bblock *loop_block\n+    tree enclosing_scope = ctx->peek_enclosing_scope ();\n+    tree loop_block\n       = ctx->get_backend ()->block (fnctx.fndecl, enclosing_scope, locals,\n \t\t\t\t    start_location, end_location);\n     ctx->push_block (loop_block);\n@@ -832,7 +832,7 @@ class CompileExpr : public HIRCompileBase\n       = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n     ctx->add_statement (break_stmt);\n \n-    Bblock *code_block\n+    tree code_block\n       = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n     tree code_block_stmt = ctx->get_backend ()->block_statement (code_block);\n     ctx->add_statement (code_block_stmt);"}, {"sha": "7b412266a0a9fddbbcb7b7975bd7962b18b3fd7f", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -262,12 +262,12 @@ class CompileInherentImplItem : public HIRCompileBase\n     ok = compile_locals_for_block (*rib, fndecl, locals);\n     rust_assert (ok);\n \n-    Bblock *enclosing_scope = NULL;\n+    tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n \n-    Bblock *code_block\n+    tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n \t\t\t\t    start_location, end_location);\n     ctx->push_block (code_block);\n@@ -522,12 +522,12 @@ class CompileTraitItem : public HIRCompileBase\n     ok = compile_locals_for_block (*rib, fndecl, locals);\n     rust_assert (ok);\n \n-    Bblock *enclosing_scope = NULL;\n+    tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = func.get_block_expr ().get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n \n-    Bblock *code_block\n+    tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n \t\t\t\t    start_location, end_location);\n     ctx->push_block (code_block);"}, {"sha": "5af9ab31847491da383ac5546e4c85ce327f6cc2", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -261,12 +261,12 @@ class CompileItem : public HIRCompileBase\n     ok = compile_locals_for_block (*rib, fndecl, locals);\n     rust_assert (ok);\n \n-    Bblock *enclosing_scope = NULL;\n+    tree enclosing_scope = NULL_TREE;\n     HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n \n-    Bblock *code_block\n+    tree code_block\n       = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n \t\t\t\t    start_location, end_location);\n     ctx->push_block (code_block);"}, {"sha": "579b323ab8bb2c2af414721e85e05936f982dcc9", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -338,10 +338,9 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n   bool ok = compile_locals_for_block (*rib, fndecl, locals);\n   rust_assert (ok);\n \n-  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-  Bblock *new_block\n-    = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n-\t\t\t\t  start_location, end_location);\n+  tree enclosing_scope = ctx->peek_enclosing_scope ();\n+  tree new_block = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n+\t\t\t\t\t       start_location, end_location);\n   ctx->push_block (new_block);\n \n   for (auto &s : expr.get_statements ())\n@@ -395,8 +394,7 @@ CompileConditionalBlocks::visit (HIR::IfExpr &expr)\n   fncontext fnctx = ctx->peek_fn ();\n   tree fndecl = fnctx.fndecl;\n   tree condition_expr = CompileExpr::Compile (expr.get_if_condition (), ctx);\n-  Bblock *then_block\n-    = CompileBlock::compile (expr.get_if_block (), ctx, result);\n+  tree then_block = CompileBlock::compile (expr.get_if_block (), ctx, result);\n \n   translated\n     = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n@@ -409,10 +407,8 @@ CompileConditionalBlocks::visit (HIR::IfExprConseqElse &expr)\n   fncontext fnctx = ctx->peek_fn ();\n   tree fndecl = fnctx.fndecl;\n   tree condition_expr = CompileExpr::Compile (expr.get_if_condition (), ctx);\n-  Bblock *then_block\n-    = CompileBlock::compile (expr.get_if_block (), ctx, result);\n-  Bblock *else_block\n-    = CompileBlock::compile (expr.get_else_block (), ctx, result);\n+  tree then_block = CompileBlock::compile (expr.get_if_block (), ctx, result);\n+  tree else_block = CompileBlock::compile (expr.get_else_block (), ctx, result);\n \n   translated\n     = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n@@ -425,17 +421,15 @@ CompileConditionalBlocks::visit (HIR::IfExprConseqIf &expr)\n   fncontext fnctx = ctx->peek_fn ();\n   tree fndecl = fnctx.fndecl;\n   tree condition_expr = CompileExpr::Compile (expr.get_if_condition (), ctx);\n-  Bblock *then_block\n-    = CompileBlock::compile (expr.get_if_block (), ctx, result);\n+  tree then_block = CompileBlock::compile (expr.get_if_block (), ctx, result);\n \n   // else block\n   std::vector<Bvariable *> locals;\n   Location start_location = expr.get_conseq_if_expr ()->get_locus ();\n   Location end_location = expr.get_conseq_if_expr ()->get_locus (); // FIXME\n-  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-  Bblock *else_block\n-    = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n-\t\t\t\t  start_location, end_location);\n+  tree enclosing_scope = ctx->peek_enclosing_scope ();\n+  tree else_block = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n+\t\t\t\t\t\tstart_location, end_location);\n   ctx->push_block (else_block);\n \n   tree else_stmt_decl\n@@ -610,7 +604,7 @@ HIRCompileBase::coerce_to_dyn_object (tree compiled_ref,\n \t\t\t\t\t\t   locus);\n \n   fncontext fnctx = ctx->peek_fn ();\n-  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+  tree enclosing_scope = ctx->peek_enclosing_scope ();\n   bool is_address_taken = false;\n   tree ret_var_stmt = NULL_TREE;\n "}, {"sha": "d4d2b89065f51e34d622d3d3fcc18386811ea163", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -41,9 +41,6 @@ saw_errors (void);\n // frontend, and passed back to the backend.  The types must be\n // defined by the backend using these names.\n \n-// The backend representation of a block.\n-class Bblock;\n-\n // The backend representation of a variable.\n class Bvariable;\n \n@@ -78,7 +75,6 @@ class Backend\n \n   // debug\n   virtual void debug (tree) = 0;\n-  virtual void debug (Bblock *) = 0;\n   virtual void debug (Bvariable *) = 0;\n   virtual void debug (Blabel *) = 0;\n \n@@ -409,12 +405,12 @@ class Backend\n   virtual tree return_statement (tree, const std::vector<tree> &, Location) = 0;\n \n   // Create an if statement within a function.  ELSE_BLOCK may be NULL.\n-  virtual tree if_statement (tree, tree condition, Bblock *then_block,\n-\t\t\t     Bblock *else_block, Location)\n+  virtual tree if_statement (tree, tree condition, tree then_block,\n+\t\t\t     tree else_block, Location)\n     = 0;\n \n   // infinite loop expressions\n-  virtual tree loop_expression (Bblock *body, Location) = 0;\n+  virtual tree loop_expression (tree body, Location) = 0;\n \n   // exit expressions\n   virtual tree exit_expression (tree condition, Location) = 0;\n@@ -458,20 +454,20 @@ class Backend\n   // the initial curly brace.  END_LOCATION is the location of the end\n   // of the block, more or less the location of the final curly brace.\n   // The statements will be added after the block is created.\n-  virtual Bblock *block (tree function, Bblock *enclosing,\n-\t\t\t const std::vector<Bvariable *> &vars,\n-\t\t\t Location start_location, Location end_location)\n+  virtual tree block (tree function, tree enclosing,\n+\t\t      const std::vector<Bvariable *> &vars,\n+\t\t      Location start_location, Location end_location)\n     = 0;\n \n   // Add the statements to a block.  The block is created first.  Then\n   // the statements are created.  Then the statements are added to the\n   // block.  This will called exactly once per block.  The vector may\n   // be empty if there are no statements.\n-  virtual void block_add_statements (Bblock *, const std::vector<tree> &) = 0;\n+  virtual void block_add_statements (tree, const std::vector<tree> &) = 0;\n \n   // Return the block as a statement.  This is used to include a block\n   // in a list of statements.\n-  virtual tree block_statement (Bblock *) = 0;\n+  virtual tree block_statement (tree) = 0;\n \n   // Variables.\n \n@@ -546,7 +542,7 @@ class Backend\n   // variable, and may not be very useful.  This function should\n   // return a variable which can be referenced later and should set\n   // *PSTATEMENT to a statement which initializes the variable.\n-  virtual Bvariable *temporary_variable (tree, Bblock *, tree, tree init,\n+  virtual Bvariable *temporary_variable (tree, tree, tree, tree init,\n \t\t\t\t\t bool address_is_taken,\n \t\t\t\t\t Location location, tree *pstatement)\n     = 0;"}, {"sha": "0fa07d90d103a1a3df3b7ec1351340e694d84924", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e5aee5863c7d898ee640296bc837e0baa8e796/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=a4e5aee5863c7d898ee640296bc837e0baa8e796", "patch": "@@ -70,12 +70,6 @@ class Gcc_tree\n \n // In gcc, types, expressions, and statements are all trees.\n \n-class Bblock : public Gcc_tree\n-{\n-public:\n-  Bblock (tree t) : Gcc_tree (t) {}\n-};\n-\n class Blabel : public Gcc_tree\n {\n public:\n@@ -137,7 +131,6 @@ class Gcc_backend : public Backend\n   Gcc_backend ();\n \n   void debug (tree t) { debug_tree (t); };\n-  void debug (Bblock *t) { debug_tree (t->get_tree ()); };\n   void debug (Bvariable *t) { debug_tree (t->get_decl ()); };\n   void debug (Blabel *t) { debug_tree (t->get_tree ()); };\n \n@@ -343,8 +336,8 @@ class Gcc_backend : public Backend\n \n   tree return_statement (tree, const std::vector<tree> &, Location);\n \n-  tree if_statement (tree, tree condition, Bblock *then_block,\n-\t\t     Bblock *else_block, Location);\n+  tree if_statement (tree, tree condition, tree then_block, tree else_block,\n+\t\t     Location);\n \n   tree switch_statement (tree function, tree value,\n \t\t\t const std::vector<std::vector<tree>> &cases,\n@@ -357,18 +350,17 @@ class Gcc_backend : public Backend\n   tree exception_handler_statement (tree bstat, tree except_stmt,\n \t\t\t\t    tree finally_stmt, Location);\n \n-  tree loop_expression (Bblock *body, Location);\n+  tree loop_expression (tree body, Location);\n \n   tree exit_expression (tree condition, Location);\n \n   // Blocks.\n \n-  Bblock *block (tree, Bblock *, const std::vector<Bvariable *> &, Location,\n-\t\t Location);\n+  tree block (tree, tree, const std::vector<Bvariable *> &, Location, Location);\n \n-  void block_add_statements (Bblock *, const std::vector<tree> &);\n+  void block_add_statements (tree, const std::vector<tree> &);\n \n-  tree block_statement (Bblock *);\n+  tree block_statement (tree);\n \n   // Variables.\n \n@@ -389,7 +381,7 @@ class Gcc_backend : public Backend\n \n   Bvariable *static_chain_variable (tree, const std::string &, tree, Location);\n \n-  Bvariable *temporary_variable (tree, Bblock *, tree, tree, bool, Location,\n+  Bvariable *temporary_variable (tree, tree, tree, tree, bool, Location,\n \t\t\t\t tree *);\n \n   Bvariable *implicit_variable (const std::string &, const std::string &,\n@@ -2194,11 +2186,9 @@ Gcc_backend::exception_handler_statement (tree try_stmt, tree except_stmt,\n // If.\n \n tree\n-Gcc_backend::if_statement (tree, tree cond_tree, Bblock *then_block,\n-\t\t\t   Bblock *else_block, Location location)\n+Gcc_backend::if_statement (tree, tree cond_tree, tree then_tree, tree else_tree,\n+\t\t\t   Location location)\n {\n-  tree then_tree = then_block->get_tree ();\n-  tree else_tree = else_block == NULL ? NULL_TREE : else_block->get_tree ();\n   if (cond_tree == error_mark_node || then_tree == error_mark_node\n       || else_tree == error_mark_node)\n     return this->error_statement ();\n@@ -2210,10 +2200,10 @@ Gcc_backend::if_statement (tree, tree cond_tree, Bblock *then_block,\n // Loops\n \n tree\n-Gcc_backend::loop_expression (Bblock *body, Location locus)\n+Gcc_backend::loop_expression (tree body, Location locus)\n {\n   return fold_build1_loc (locus.gcc_location (), LOOP_EXPR, void_type_node,\n-\t\t\t  body->get_tree ());\n+\t\t\t  body);\n }\n \n tree\n@@ -2329,8 +2319,8 @@ Gcc_backend::statement_list (const std::vector<tree> &statements)\n // BIND_EXPR node points to the BLOCK node, we store the BIND_EXPR in\n // the Bblock.\n \n-Bblock *\n-Gcc_backend::block (tree fndecl, Bblock *enclosing,\n+tree\n+Gcc_backend::block (tree fndecl, tree enclosing,\n \t\t    const std::vector<Bvariable *> &vars,\n \t\t    Location start_location, Location)\n {\n@@ -2359,8 +2349,7 @@ Gcc_backend::block (tree fndecl, Bblock *enclosing,\n     }\n   else\n     {\n-      tree superbind_tree = enclosing->get_tree ();\n-      tree superblock_tree = BIND_EXPR_BLOCK (superbind_tree);\n+      tree superblock_tree = BIND_EXPR_BLOCK (enclosing);\n       gcc_assert (TREE_CODE (superblock_tree) == BLOCK);\n \n       BLOCK_SUPERCONTEXT (block_tree) = superblock_tree;\n@@ -2387,13 +2376,13 @@ Gcc_backend::block (tree fndecl, Bblock *enclosing,\n     = build3_loc (start_location.gcc_location (), BIND_EXPR, void_type_node,\n \t\t  BLOCK_VARS (block_tree), NULL_TREE, block_tree);\n   TREE_SIDE_EFFECTS (bind_tree) = 1;\n-  return new Bblock (bind_tree);\n+  return bind_tree;\n }\n \n // Add statements to a block.\n \n void\n-Gcc_backend::block_add_statements (Bblock *bblock,\n+Gcc_backend::block_add_statements (tree bind_tree,\n \t\t\t\t   const std::vector<tree> &statements)\n {\n   tree stmt_list = NULL_TREE;\n@@ -2405,17 +2394,15 @@ Gcc_backend::block_add_statements (Bblock *bblock,\n \tappend_to_statement_list (s, &stmt_list);\n     }\n \n-  tree bind_tree = bblock->get_tree ();\n   gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n   BIND_EXPR_BODY (bind_tree) = stmt_list;\n }\n \n // Return a block as a statement.\n \n tree\n-Gcc_backend::block_statement (Bblock *bblock)\n+Gcc_backend::block_statement (tree bind_tree)\n {\n-  tree bind_tree = bblock->get_tree ();\n   gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n   return bind_tree;\n }\n@@ -2659,7 +2646,7 @@ Gcc_backend::static_chain_variable (tree fndecl, const std::string &name,\n // Make a temporary variable.\n \n Bvariable *\n-Gcc_backend::temporary_variable (tree fndecl, Bblock *bblock, tree type_tree,\n+Gcc_backend::temporary_variable (tree fndecl, tree bind_tree, tree type_tree,\n \t\t\t\t tree init_tree, bool is_address_taken,\n \t\t\t\t Location location, tree *pstatement)\n {\n@@ -2685,7 +2672,7 @@ Gcc_backend::temporary_variable (tree fndecl, Bblock *bblock, tree type_tree,\n     }\n   else\n     {\n-      gcc_assert (bblock != NULL);\n+      gcc_assert (bind_tree != NULL_TREE);\n       var = build_decl (location.gcc_location (), VAR_DECL,\n \t\t\tcreate_tmp_var_name (\"RUSTTMP\"), type_tree);\n       DECL_ARTIFICIAL (var) = 1;\n@@ -2694,7 +2681,6 @@ Gcc_backend::temporary_variable (tree fndecl, Bblock *bblock, tree type_tree,\n       DECL_CONTEXT (var) = fndecl;\n \n       // We have to add this variable to the BLOCK and the BIND_EXPR.\n-      tree bind_tree = bblock->get_tree ();\n       gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n       tree block_tree = BIND_EXPR_BLOCK (bind_tree);\n       gcc_assert (TREE_CODE (block_tree) == BLOCK);"}]}