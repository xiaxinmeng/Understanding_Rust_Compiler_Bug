{"sha": "5e257178526c3ffa66107c136dfc8b74b176cca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyNTcxNzg1MjZjM2ZmYTY2MTA3YzEzNmRmYzhiNzRiMTc2Y2NhNw==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@gnat.com", "date": "2001-10-31T00:21:37Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-31T00:21:37Z"}, "message": "gnatdll.adb (Parse_Command_Line): handle -g option to be passed to the binder and linker.\n\n\t* gnatdll.adb (Parse_Command_Line): handle -g option to be passed\n\tto the binder and linker.\n\tMinor style fix.\n\n\t* mdll.ads: Fix layout.  Update copyright notice.\n\n\t* mdll.adb: Fix layout.  Update copyright notice.\n\nFrom-SVN: r46662", "tree": {"sha": "2df6b6c5dfa63cfc2e2322fec03020eaf7228012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df6b6c5dfa63cfc2e2322fec03020eaf7228012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e257178526c3ffa66107c136dfc8b74b176cca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e257178526c3ffa66107c136dfc8b74b176cca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e257178526c3ffa66107c136dfc8b74b176cca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e257178526c3ffa66107c136dfc8b74b176cca7/comments", "author": null, "committer": null, "parents": [{"sha": "1753e0ad5fadd0ed95fc1ea9eec0b2820d561c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753e0ad5fadd0ed95fc1ea9eec0b2820d561c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1753e0ad5fadd0ed95fc1ea9eec0b2820d561c13"}], "stats": {"total": 185, "additions": 101, "deletions": 84}, "files": [{"sha": "374a4144fe3ac95e7f0577ab195a1876ad9c4d46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e257178526c3ffa66107c136dfc8b74b176cca7", "patch": "@@ -1,3 +1,13 @@\n+2001-10-30  Pascal Obry <obry@gnat.com>\n+\n+\t* gnatdll.adb (Parse_Command_Line): handle -g option to be passed \n+\tto the binder and linker.\n+\tMinor style fix.\n+\t\n+\t* mdll.ads: Fix layout.  Update copyright notice.\n+\n+\t* mdll.adb: Fix layout.  Update copyright notice.\n+\n 2001-10-30  Robert Dewar <dewar@gnat.com>\n \n \t* usage.adb: Minor fix to output for -gnaty."}, {"sha": "ac70e70c8880ddd227f1013589eb6942147ed4e3", "filename": "gcc/ada/gnatdll.adb", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fgnatdll.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fgnatdll.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatdll.adb?ref=5e257178526c3ffa66107c136dfc8b74b176cca7", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.6 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1997-2000, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,7 @@ procedure Gnatdll is\n    procedure Syntax;\n    --  print out usage.\n \n-   procedure Check (Filename : in String);\n+   procedure Check (Filename : String);\n    --  check that filename exist.\n \n    procedure Parse_Command_Line;\n@@ -61,8 +61,6 @@ procedure Gnatdll is\n    procedure Check_Context;\n    --  check the context before runing any commands to build the library.\n \n-\n-\n    Syntax_Error  : exception;\n    Context_Error : exception;\n \n@@ -98,7 +96,6 @@ procedure Gnatdll is\n    Largs_Options : Argument_List_Access := Null_Argument_List_Access;\n    Bargs_Options : Argument_List_Access := Null_Argument_List_Access;\n \n-\n    type Build_Mode_State is (Import_Lib, Dynamic_Lib, Nil);\n \n    Build_Mode             : Build_Mode_State := Nil;\n@@ -111,31 +108,33 @@ procedure Gnatdll is\n \n    procedure Syntax is\n       use Text_IO;\n+\n+      procedure P (Str : in String) renames Text_IO.Put_Line;\n+\n    begin\n-      Put_Line (\"Usage : gnatdll [options] [list-of-files]\");\n+      P (\"Usage : gnatdll [options] [list-of-files]\");\n       New_Line;\n-      Put_Line\n-        (\"[list-of-files] a list of Ada libraries (.ali) and/or \" &\n+      P (\"[list-of-files] a list of Ada libraries (.ali) and/or \" &\n          \"foreign object files\");\n       New_Line;\n-      Put_Line (\"[options] can be\");\n-      Put_Line (\"   -h       help - display this message\");\n-      Put_Line (\"   -v       verbose\");\n-      Put_Line (\"   -q       quiet\");\n-      Put_Line (\"   -k       remove @nn suffix from exported names\");\n-      Put_Line (\"   -Idir    Specify source and object files search path\");\n-\n-      Put_Line (\"   -l file  \" &\n-                \"file contains a list-of-files to be added to the library\");\n-      Put_Line (\"   -e file  definition file containing exports\");\n-      Put_Line\n-        (\"   -d file  put objects in the relocatable dynamic library <file>\");\n-      Put_Line (\"   -a[addr] build non-relocatable DLL at address <addr>\");\n-      Put_Line (\"            if <addr> is not specified use \" &\n-                Default_DLL_Address);\n-      Put_Line (\"   -n       no-import - do not create the import library\");\n-      Put_Line (\"   -bargs   binder option\");\n-      Put_Line (\"   -largs   linker (library builder) option\");\n+      P (\"[options] can be\");\n+      P (\"   -h            Help - display this message\");\n+      P (\"   -v            Verbose\");\n+      P (\"   -q            Quiet\");\n+      P (\"   -k            Remove @nn suffix from exported names\");\n+      P (\"   -g            Generate debugging information\");\n+      P (\"   -Idir         Specify source and object files search path\");\n+      P (\"   -l file       File contains a list-of-files to be added to \"\n+         & \"the library\");\n+      P (\"   -e file       Definition file containing exports\");\n+      P (\"   -d file       Put objects in the relocatable dynamic \"\n+         & \"library <file>\");\n+      P (\"   -a[addr]      Build non-relocatable DLL at address <addr>\");\n+      P (\"                 if <addr> is not specified use \"\n+         & Default_DLL_Address);\n+      P (\"   -n            No-import - do not create the import library\");\n+      P (\"   -bargs opts   opts are passed to the binder\");\n+      P (\"   -largs opts   opts are passed to the linker\");\n    end Syntax;\n \n    -----------\n@@ -273,14 +272,18 @@ procedure Gnatdll is\n       --  scan gnatdll switches\n \n       loop\n-         case Getopt (\"h v q k a? d: e: l: n I:\") is\n+         case Getopt (\"g h v q k a? d: e: l: n I:\") is\n \n             when ASCII.Nul =>\n                exit;\n \n             when 'h' =>\n                Help := True;\n \n+            when 'g' =>\n+               Gopts (G) := new String'(\"-g\");\n+               G := G + 1;\n+\n             when 'v' =>\n                --  verbose mode on.\n \n@@ -501,8 +504,9 @@ begin\n       case Build_Mode is\n \n          when Import_Lib =>\n-            MDLL.Build_Import_Library (To_String (Lib_Filename),\n-                                       To_String (Def_Filename));\n+            MDLL.Build_Import_Library\n+              (To_String (Lib_Filename),\n+               To_String (Def_Filename));\n \n          when Dynamic_Lib =>\n             MDLL.Build_Dynamic_Library"}, {"sha": "c07768d7380f89c7b91d6240d5cfa3dfd6b74467", "filename": "gcc/ada/mdll.adb", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fmdll.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fmdll.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmdll.adb?ref=5e257178526c3ffa66107c136dfc8b74b176cca7", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.4 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,16 +44,16 @@ package body MDLL is\n    ---------------------------\n \n    procedure Build_Dynamic_Library\n-     (Ofiles        : in Argument_List;\n-      Afiles        : in Argument_List;\n-      Options       : in Argument_List;\n-      Bargs_Options : in Argument_List;\n-      Largs_Options : in Argument_List;\n-      Lib_Filename  : in String;\n-      Def_Filename  : in String;\n-      Lib_Address   : in String  := \"\";\n-      Build_Import  : in Boolean := False;\n-      Relocatable   : in Boolean := False)\n+     (Ofiles        : Argument_List;\n+      Afiles        : Argument_List;\n+      Options       : Argument_List;\n+      Bargs_Options : Argument_List;\n+      Largs_Options : Argument_List;\n+      Lib_Filename  : String;\n+      Def_Filename  : String;\n+      Lib_Address   : String  := \"\";\n+      Build_Import  : Boolean := False;\n+      Relocatable   : Boolean := False)\n    is\n \n       use type OS_Lib.Argument_List;\n@@ -73,28 +73,27 @@ package body MDLL is\n \n       All_Options : constant Argument_List := Options & Largs_Options;\n \n-\n       procedure Build_Reloc_DLL;\n-      --  build a relocatable DLL with only objects file specified.\n+      --  Build a relocatable DLL with only objects file specified.\n       --  this use the well known 5 steps build. (see GNAT User's Guide).\n \n       procedure Ada_Build_Reloc_DLL;\n-      --  build a relocatable DLL with Ada code.\n+      --  Build a relocatable DLL with Ada code.\n       --  this use the well known 5 steps build. (see GNAT User's Guide).\n \n       procedure Build_Non_Reloc_DLL;\n-      --  build a non relocatable DLL containing no Ada code.\n+      --  Build a non relocatable DLL containing no Ada code.\n \n       procedure Ada_Build_Non_Reloc_DLL;\n-      --  build a non relocatable DLL with Ada code.\n+      --  Build a non relocatable DLL with Ada code.\n \n       ---------------------\n       -- Build_Reloc_DLL --\n       ---------------------\n \n       procedure Build_Reloc_DLL is\n \n-         --  objects plus the export table (.exp) file\n+         --  Objects plus the export table (.exp) file\n \n          Objects_Exp_File : OS_Lib.Argument_List\n            := Exp_File'Unchecked_Access & Ofiles;\n@@ -111,37 +110,37 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  1) build base file with objects files.\n+         --  1) Build base file with objects files.\n \n          Tools.Gcc (Output_File => Jnk_File,\n                     Files       => Ofiles,\n                     Options     => All_Options,\n                     Base_File   => Bas_File,\n                     Build_Lib   => True);\n \n-         --  2) build exp from base file.\n+         --  2) Build exp from base file.\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Base_File    => Bas_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => False);\n \n-         --  3) build base file with exp file and objects files.\n+         --  3) Build base file with exp file and objects files.\n \n          Tools.Gcc (Output_File => Jnk_File,\n                     Files       => Objects_Exp_File,\n                     Options     => All_Options,\n                     Base_File   => Bas_File,\n                     Build_Lib   => True);\n \n-         --  4) build new exp from base file and the lib file (.a)\n+         --  4) Build new exp from base file and the lib file (.a)\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Base_File    => Bas_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => Build_Import);\n \n-         --  5) build the dynamic library\n+         --  5) Build the dynamic library\n \n          Tools.Gcc (Output_File => Dll_File,\n                     Files       => Objects_Exp_File,\n@@ -177,7 +176,7 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  1) build base file with objects files.\n+         --  1) Build base file with objects files.\n \n          Tools.Gnatbind (Afiles, Options & Bargs_Options);\n \n@@ -191,14 +190,14 @@ package body MDLL is\n                             Params);\n          end;\n \n-         --  2) build exp from base file.\n+         --  2) Build exp from base file.\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Base_File    => Bas_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => False);\n \n-         --  3) build base file with exp file and objects files.\n+         --  3) Build base file with exp file and objects files.\n \n          Tools.Gnatbind (Afiles, Options & Bargs_Options);\n \n@@ -215,14 +214,14 @@ package body MDLL is\n                             Params);\n          end;\n \n-         --  4) build new exp from base file and the lib file (.a)\n+         --  4) Build new exp from base file and the lib file (.a)\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Base_File    => Bas_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => Build_Import);\n \n-         --  5) build the dynamic library\n+         --  5) Build the dynamic library\n \n          Tools.Gnatbind (Afiles, Options & Bargs_Options);\n \n@@ -268,13 +267,13 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  build exp table and the lib .a file.\n+         --  Build exp table and the lib .a file.\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => Build_Import);\n \n-         --  build the DLL\n+         --  Build the DLL\n \n          Tools.Gcc (Output_File => Dll_File,\n                     Files       => Exp_File'Unchecked_Access & Ofiles,\n@@ -293,7 +292,7 @@ package body MDLL is\n       -- Ada_Build_Non_Reloc_DLL --\n       -----------------------------\n \n-      --  build a non relocatable DLL with Ada code.\n+      --  Build a non relocatable DLL with Ada code.\n \n       procedure Ada_Build_Non_Reloc_DLL is\n       begin\n@@ -309,13 +308,13 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  build exp table and the lib .a file.\n+         --  Build exp table and the lib .a file.\n \n          Tools.Dlltool (Def_File, Dll_File, Lib_File,\n                         Exp_Table    => Exp_File,\n                         Build_Import => Build_Import);\n \n-         --  build the DLL\n+         --  Build the DLL\n \n          Tools.Gnatbind (Afiles, Options & Bargs_Options);\n \n@@ -363,11 +362,13 @@ package body MDLL is\n    -- Build_Import_Library --\n    --------------------------\n \n-   procedure Build_Import_Library (Lib_Filename : in String;\n-                                   Def_Filename : in String) is\n+   procedure Build_Import_Library\n+     (Lib_Filename : String;\n+      Def_Filename : String)\n+   is\n \n-      procedure Build_Import_Library (Def_Base_Filename : in String);\n-      --  build an import library.\n+      procedure Build_Import_Library (Def_Base_Filename : String);\n+      --  Build an import library.\n       --  this is to build only a .a library to link against a DLL.\n \n       Base_Filename : constant String := MDLL.Files.Ext_To (Lib_Filename);\n@@ -376,7 +377,7 @@ package body MDLL is\n       -- Build_Import_Library --\n       --------------------------\n \n-      procedure Build_Import_Library (Def_Base_Filename : in String) is\n+      procedure Build_Import_Library (Def_Base_Filename : String) is\n \n          Def_File : String renames Def_Filename;\n          Dll_File : constant String := Def_Base_Filename & \".dll\";\n@@ -395,7 +396,7 @@ package body MDLL is\n       end Build_Import_Library;\n \n    begin\n-      --  if the library has the form lib<name>.a then the def file should\n+      --  If the library has the form lib<name>.a then the def file should\n       --  be <name>.def and the DLL to link against <name>.dll\n       --  this is a Windows convention and we try as much as possible to\n       --  follow the platform convention."}, {"sha": "2a011dc567545460cb5eaa609d727d4e9b7ede9d", "filename": "gcc/ada/mdll.ads", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fmdll.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e257178526c3ffa66107c136dfc8b74b176cca7/gcc%2Fada%2Fmdll.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmdll.ads?ref=5e257178526c3ffa66107c136dfc8b74b176cca7", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.5 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,26 +52,28 @@ package MDLL is\n \n    Kill_Suffix    : Boolean := False;\n \n-   procedure Build_Dynamic_Library (Ofiles        : in Argument_List;\n-                                    Afiles        : in Argument_List;\n-                                    Options       : in Argument_List;\n-                                    Bargs_Options : in Argument_List;\n-                                    Largs_Options : in Argument_List;\n-                                    Lib_Filename  : in String;\n-                                    Def_Filename  : in String;\n-                                    Lib_Address   : in String  := \"\";\n-                                    Build_Import  : in Boolean := False;\n-                                    Relocatable   : in Boolean := False);\n-   --  build a DLL and the import library to link against the DLL.\n+   procedure Build_Dynamic_Library\n+     (Ofiles        : Argument_List;\n+      Afiles        : Argument_List;\n+      Options       : Argument_List;\n+      Bargs_Options : Argument_List;\n+      Largs_Options : Argument_List;\n+      Lib_Filename  : String;\n+      Def_Filename  : String;\n+      Lib_Address   : String  := \"\";\n+      Build_Import  : Boolean := False;\n+      Relocatable   : Boolean := False);\n+   --  Build a DLL and the import library to link against the DLL.\n    --  this function handles relocatable and non relocatable DLL.\n    --  If the Afiles argument list contains some Ada units then it will\n    --  generate the right adainit and adafinal and integrate it in the DLL.\n    --  If the Afiles argument list is empty (there is only some object files\n    --  provided) then it will not try to build a binder file. This is ok to\n    --  build DLL containing no Ada code.\n \n-   procedure Build_Import_Library (Lib_Filename : in String;\n-                                   Def_Filename : in String);\n+   procedure Build_Import_Library\n+     (Lib_Filename : String;\n+      Def_Filename : String);\n    --  Build an import library (.a) from a definition files. An import library\n    --  is needed to link against a DLL.\n "}]}