{"sha": "3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhMzY5MGQzZDUxOTZjZGQzZWE1OWE1MWFhNTE5NDUxZmJlZDFlMg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-08-29T18:29:33Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-08-29T18:29:33Z"}, "message": "passes.c (register_pass): Add overload.\n\n\t* passes.c (register_pass): Add overload.\n\t* tree-pass.h (register_pass): Forward declare it.  Add comment.\n\nFrom-SVN: r202081", "tree": {"sha": "2750218e06eb7e348f2514611f0b4682c34c841e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2750218e06eb7e348f2514611f0b4682c34c841e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/comments", "author": null, "committer": null, "parents": [{"sha": "125b62f62b176ad0d4b9e641b20f202c58cd6b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125b62f62b176ad0d4b9e641b20f202c58cd6b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125b62f62b176ad0d4b9e641b20f202c58cd6b66"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "c5ffeadd8f83a05af6321a588b17a36e4efc8052", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "patch": "@@ -1,3 +1,8 @@\n+2013-08-29  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* passes.c (register_pass): Add overload.\n+\t* tree-pass.h (register_pass): Forward declare it.  Add comment.\n+\n 2013-08-29  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (hash_tree): Stream DECL_FINAL_P."}, {"sha": "5b4975267ebb632f2493a896c3529cb04f2b1264", "filename": "gcc/passes.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "patch": "@@ -1370,7 +1370,19 @@ void\n register_pass (struct register_pass_info *pass_info)\n {\n   g->get_passes ()->register_pass (pass_info);\n+}\n+\n+void\n+register_pass (opt_pass* pass, pass_positioning_ops pos,\n+\t       const char* ref_pass_name, int ref_pass_inst_number)\n+{\n+  register_pass_info i;\n+  i.pass = pass;\n+  i.reference_pass_name = ref_pass_name;\n+  i.ref_pass_instance_number = ref_pass_inst_number;\n+  i.pos_op = pos;\n \n+  g->get_passes ()->register_pass (&i);\n }\n \n void"}, {"sha": "a6d8a8311a66290aa2e7f8e4f34bbaff8b82ba72", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa3690d3d5196cdd3ea59a51aa519451fbed1e2/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=3fa3690d3d5196cdd3ea59a51aa519451fbed1e2", "patch": "@@ -91,7 +91,8 @@ class opt_pass : public pass_data\n   virtual opt_pass *clone ();\n \n   /* If has_gate is set, this pass and all sub-passes are executed only if\n-     the function returns true.  */\n+     the function returns true.\n+     The default implementation returns true.  */\n   virtual bool gate ();\n \n   /* This is the code to run.  If has_execute is false, then there should\n@@ -330,6 +331,14 @@ struct register_pass_info\n   enum pass_positioning_ops pos_op; /* how to insert the new pass.  */\n };\n \n+/* Registers a new pass.  Either fill out the register_pass_info or specify\n+   the individual parameters.  The pass object is expected to have been\n+   allocated using operator new and the pass manager takes the ownership of\n+   the pass object.  */\n+extern void register_pass (register_pass_info *);\n+extern void register_pass (opt_pass* pass, pass_positioning_ops pos,\n+\t\t\t   const char* ref_pass_name, int ref_pass_inst_number);\n+\n extern gimple_opt_pass *make_pass_mudflap_1 (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_mudflap_2 (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_asan (gcc::context *ctxt);\n@@ -594,7 +603,6 @@ extern void ipa_read_summaries (void);\n extern void ipa_read_optimization_summaries (void);\n extern void register_one_dump_file (struct opt_pass *);\n extern bool function_called_by_processed_nodes_p (void);\n-extern void register_pass (struct register_pass_info *);\n \n /* Set to true if the pass is called the first time during compilation of the\n    current function.  Note that using this information in the optimization"}]}