{"sha": "e182017e46105b6dc5d9a1f399a03eaf26d30016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4MjAxN2U0NjEwNWI2ZGM1ZDlhMWYzOTlhMDNlYWYyNmQzMDAxNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-09-11T09:48:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-11T09:48:41Z"}, "message": "re PR libstdc++/23781 (Implicit conversion from NULL to list<T>::iterator)\n\n2005-09-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/23781\n\t* include/bits/stl_list.h (_List_iterator<>::\n\t_List_iterator(_List_node_base*), _List_const_iterator<>::\n\t_List_const_iterator(const _List_node_base*)): Make explicit.\n\t(list<>::begin(), list<>::end(), list<>::pop_back()): Adjust\n\tconsistently.\n\t* include/bits/list.tcc (list<>::insert, list<>::erase): Adjust\n\tconsistently.\n\t* include/bits/stl_tree.h (_Rb_tree_iterator<>::\n\t_Rb_tree_iterator(_Link_type), _Rb_tree_const_iterator<>::\n\t_Rb_tree_const_iterator(_Link_type)): Make explicit.\n\t(_Rb_tree<>::begin(), _Rb_tree<>::end()): Adjust consistently.\n\t* include/ext/slist (_Slist_iterator<>::_Slist_iterator(_Node*)):\n\tMake explicit.\n\t(slist<>::erase(iterator), slist<>::erase(iterator, iterator)):\n\tAdjust consistently.\n\t* include/tr1/hashtable (hashtable_iterator<>::\n\thashtable_iterator(hash_node<>**)): Make explicit.\n\t* testsuite/23_containers/list/23781.cc: New.\n\t* testsuite/23_containers/map/23781.cc: Likewise.\n\t* testsuite/23_containers/multimap/23781.cc: Likewise.\n\t* testsuite/23_containers/multiset/23781.cc: Likewise.\n\t* testsuite/23_containers/set/23781.cc: Likewise.\n\t* testsuite/ext/slist/23781.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/23781.cc: Likewise.\n\t* testsuite/23_containers/map/operators/1_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/23_containers/set/operators/1_neg.cc: Likewise.\n\n\t* include/tr1/array (array<>::begin(), array<>::end()): Adjust\n\tstylistically for consistency with the other containers.\n\nFrom-SVN: r104139", "tree": {"sha": "b8b9478e82c734c9aadbe4ffb64a9fa061395cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b9478e82c734c9aadbe4ffb64a9fa061395cde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e182017e46105b6dc5d9a1f399a03eaf26d30016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182017e46105b6dc5d9a1f399a03eaf26d30016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e182017e46105b6dc5d9a1f399a03eaf26d30016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182017e46105b6dc5d9a1f399a03eaf26d30016/comments", "author": null, "committer": null, "parents": [{"sha": "2347f5c93113dc55430473bd32b93ec786225834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2347f5c93113dc55430473bd32b93ec786225834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2347f5c93113dc55430473bd32b93ec786225834"}], "stats": {"total": 392, "additions": 352, "deletions": 40}, "files": [{"sha": "ad1fb5d541317a09213b507c1a371e779b66e694", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -1,3 +1,37 @@\n+2005-09-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/23781\n+\t* include/bits/stl_list.h (_List_iterator<>::\n+\t_List_iterator(_List_node_base*), _List_const_iterator<>::\n+\t_List_const_iterator(const _List_node_base*)): Make explicit.\n+\t(list<>::begin(), list<>::end(), list<>::pop_back()): Adjust\n+\tconsistently.\n+\t* include/bits/list.tcc (list<>::insert, list<>::erase): Adjust\n+\tconsistently.\n+\t* include/bits/stl_tree.h (_Rb_tree_iterator<>::\n+\t_Rb_tree_iterator(_Link_type), _Rb_tree_const_iterator<>::\n+\t_Rb_tree_const_iterator(_Link_type)): Make explicit.\n+\t(_Rb_tree<>::begin(), _Rb_tree<>::end()): Adjust consistently.\n+\t* include/ext/slist (_Slist_iterator<>::_Slist_iterator(_Node*)):\n+\tMake explicit.\n+\t(slist<>::erase(iterator), slist<>::erase(iterator, iterator)):\n+\tAdjust consistently.\n+\t* include/tr1/hashtable (hashtable_iterator<>::\n+\thashtable_iterator(hash_node<>**)): Make explicit.\n+\t* testsuite/23_containers/list/23781.cc: New.\n+\t* testsuite/23_containers/map/23781.cc: Likewise.\n+\t* testsuite/23_containers/multimap/23781.cc: Likewise.\n+\t* testsuite/23_containers/multiset/23781.cc: Likewise.\n+\t* testsuite/23_containers/set/23781.cc: Likewise.\n+\t* testsuite/ext/slist/23781.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/23781.cc: Likewise.\n+\t* testsuite/23_containers/map/operators/1_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/23_containers/set/operators/1_neg.cc: Likewise.\n+\n+\t* include/tr1/array (array<>::begin(), array<>::end()): Adjust\n+\tstylistically for consistency with the other containers.\n+\n 2005-09-10  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* testsuite/26_numerics/cmath/c99_classification_macros_c.cc:"}, {"sha": "ece04300f31933e8ca10af888177cc1c46a83a4a", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -86,15 +86,15 @@ namespace _GLIBCXX_STD\n     {\n       _Node* __tmp = _M_create_node(__x);\n       __tmp->hook(__position._M_node);\n-      return __tmp;\n+      return iterator(__tmp);\n     }\n \n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n     erase(iterator __position)\n     {\n-      iterator __ret = __position._M_node->_M_next;\n+      iterator __ret = iterator(__position._M_node->_M_next);\n       _M_erase(__position);\n       return __ret;\n     }"}, {"sha": "6aa67fe55fd8043fec4eeddcf06abfadf06ff80b", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -122,6 +122,7 @@ namespace _GLIBCXX_STD\n       _List_iterator()\n       : _M_node() { }\n \n+      explicit\n       _List_iterator(_List_node_base* __x)\n       : _M_node(__x) { }\n \n@@ -199,6 +200,7 @@ namespace _GLIBCXX_STD\n       _List_const_iterator()\n       : _M_node() { }\n \n+      explicit\n       _List_const_iterator(const _List_node_base* __x)\n       : _M_node(__x) { }\n \n@@ -574,7 +576,7 @@ namespace _GLIBCXX_STD\n        */\n       iterator\n       begin()\n-      { return this->_M_impl._M_node._M_next; }\n+      { return iterator(this->_M_impl._M_node._M_next); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the\n@@ -583,15 +585,16 @@ namespace _GLIBCXX_STD\n        */\n       const_iterator\n       begin() const\n-      { return this->_M_impl._M_node._M_next; }\n+      { return const_iterator(this->_M_impl._M_node._M_next); }\n \n       /**\n        *  Returns a read/write iterator that points one past the last\n        *  element in the %list.  Iteration is done in ordinary element\n        *  order.\n        */\n       iterator\n-      end() { return &this->_M_impl._M_node; }\n+      end()\n+      { return iterator(&this->_M_impl._M_node); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points one past\n@@ -600,7 +603,7 @@ namespace _GLIBCXX_STD\n        */\n       const_iterator\n       end() const\n-      { return &this->_M_impl._M_node; }\n+      { return const_iterator(&this->_M_impl._M_node); }\n \n       /**\n        *  Returns a read/write reverse iterator that points to the last\n@@ -769,7 +772,7 @@ namespace _GLIBCXX_STD\n        */\n       void\n       pop_back()\n-      { this->_M_erase(this->_M_impl._M_node._M_prev); }\n+      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }\n \n       /**\n        *  @brief  Inserts given value into %list before specified iterator."}, {"sha": "fab8117edbe43ac8b62d6cb311d22cfdf607d378", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -164,6 +164,7 @@ namespace std\n       _Rb_tree_iterator()\n       : _M_node() { }\n \n+      explicit\n       _Rb_tree_iterator(_Link_type __x)\n       : _M_node(__x) { }\n \n@@ -235,6 +236,7 @@ namespace std\n       _Rb_tree_const_iterator()\n       : _M_node() { }\n \n+      explicit\n       _Rb_tree_const_iterator(_Link_type __x)\n       : _M_node(__x) { }\n \n@@ -579,22 +581,28 @@ namespace std\n \n       iterator\n       begin()\n-      { return static_cast<_Link_type>(this->_M_impl._M_header._M_left); }\n+      { \n+\treturn iterator(static_cast<_Link_type>\n+\t\t\t(this->_M_impl._M_header._M_left));\n+      }\n \n       const_iterator\n       begin() const\n-      {\n-\treturn static_cast<_Const_Link_type>\n-\t  (this->_M_impl._M_header._M_left);\n+      { \n+\treturn const_iterator(static_cast<_Const_Link_type>\n+\t\t\t      (this->_M_impl._M_header._M_left));\n       }\n \n       iterator\n       end()\n-      { return static_cast<_Link_type>(&this->_M_impl._M_header); }\n+      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }\n \n       const_iterator\n       end() const\n-      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }\n+      { \n+\treturn const_iterator(static_cast<_Const_Link_type>\n+\t\t\t      (&this->_M_impl._M_header));\n+      }\n \n       reverse_iterator\n       rbegin()\n@@ -641,12 +649,12 @@ namespace std\n       insert_equal(iterator __position, const value_type& __x);\n \n       template<typename _InputIterator>\n-      void\n-      insert_unique(_InputIterator __first, _InputIterator __last);\n+        void\n+        insert_unique(_InputIterator __first, _InputIterator __last);\n \n       template<typename _InputIterator>\n-      void\n-      insert_equal(_InputIterator __first, _InputIterator __last);\n+        void\n+        insert_equal(_InputIterator __first, _InputIterator __last);\n \n       void\n       erase(iterator __position);"}, {"sha": "49ce77ea6ea8d7fc7b674e65f5853ad1f33a8143", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -190,6 +190,7 @@ namespace __gnu_cxx\n       typedef _Ref             reference;\n       typedef _Slist_node<_Tp> _Node;\n \n+      explicit\n       _Slist_iterator(_Node* __x)\n       : _Slist_iterator_base(__x) {}\n \n@@ -601,20 +602,26 @@ namespace __gnu_cxx\n \n       iterator\n       erase_after(iterator __before_first, iterator __last)\n-      { return iterator((_Node*) this->_M_erase_after(__before_first._M_node,\n-\t\t\t\t\t\t      __last._M_node)); }\n+      { \n+\treturn iterator((_Node*) this->_M_erase_after(__before_first._M_node,\n+\t\t\t\t\t\t      __last._M_node));\n+      }\n \n       iterator\n       erase(iterator __pos)\n-      { return (_Node*) this->_M_erase_after(__slist_previous(&this->_M_head,\n-\t\t\t\t\t\t\t      __pos._M_node)); }\n+      { \n+\treturn iterator((_Node*) this->_M_erase_after\n+\t\t\t(__slist_previous(&this->_M_head, __pos._M_node)));\n+      }\n \n       iterator\n       erase(iterator __first, iterator __last)\n-      { return (_Node*) this->_M_erase_after(__slist_previous(&this->_M_head,\n-\t\t\t\t\t\t\t      __first._M_node),\n-\t\t\t\t\t     __last._M_node); }\n-\n+      { \n+\treturn iterator((_Node*) this->_M_erase_after\n+\t\t\t(__slist_previous(&this->_M_head, __first._M_node),\n+\t\t\t __last._M_node));\n+      }\n+      \n       void\n       resize(size_type new_size, const _Tp& __x);\n "}, {"sha": "096df4f48acec4ab845026afd7baaa9c752c6759", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -75,21 +75,21 @@ namespace tr1\n       swap(array&);\n \n       // Iterators.\n-      iterator \n+      iterator\n       begin()\n-      { return &_M_instance[0]; }\n+      { return iterator(&_M_instance[0]); }\n \n-      const_iterator \n+      const_iterator\n       begin() const \n-      { return &_M_instance[0]; }\n+      { return const_iterator(&_M_instance[0]); }\n \n-      iterator \n+      iterator\n       end() \n-      { return &_M_instance[_Nm]; }\n+      { return iterator(&_M_instance[_Nm]); }\n \n-      const_iterator \n+      const_iterator\n       end() const\n-      { return &_M_instance[_Nm]; }\n+      { return const_iterator(&_M_instance[_Nm]); }\n \n       reverse_iterator \n       rbegin()"}, {"sha": "790e7e3042709ff95fe70a1fa5b3beacdd305c47", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -261,7 +261,8 @@ namespace Internal\n       hashtable_iterator(hash_node<Value, cache>* p,\n \t\t\t hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(p, b) { }\n-  \n+\n+      explicit\n       hashtable_iterator(hash_node<Value, cache>** b)\n       : hashtable_iterator_base<Value, cache>(*b, b) { }\n   "}, {"sha": "e91536ad1d573d5a9072e2141385c8b251cf5c09", "filename": "libstdc++-v3/testsuite/23_containers/list/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <list>\n+\n+std::list<int>::iterator it = NULL; // { dg-error \"conversion\" }\n+std::list<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "ddd92900ab6ce2154c283c90825321bfedbe1327", "filename": "libstdc++-v3/testsuite/23_containers/map/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <map>\n+\n+std::map<int, int>::iterator it = NULL; // { dg-error \"conversion\" }\n+std::map<int, int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "405f8e4caa7dad1c10c43499c3ba5e118ab61f01", "filename": "libstdc++-v3/testsuite/23_containers/map/operators/1_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperators%2F1_neg.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,5 +41,5 @@ void test01()\n   test &= itr == mapByName.end(); // { dg-error \"no\" } \n }\n  \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 209 }\n-// { dg-error \"candidates are\" \"\" { target *-*-* } 213 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 210 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 214 }"}, {"sha": "06ef245aa5f442263dec866639e3330fa6362662", "filename": "libstdc++-v3/testsuite/23_containers/multimap/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <map>\n+\n+std::multimap<int, int>::iterator it = NULL; // { dg-error \"conversion\" }\n+std::multimap<int, int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "197c870792024255311dbd9cdabe41e6a489029d", "filename": "libstdc++-v3/testsuite/23_containers/multiset/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <set>\n+\n+std::multiset<int>::iterator it = NULL; // { dg-error \"conversion\" }\n+std::multiset<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "54d689c830002f9ced707477f9588e8aa62f5339", "filename": "libstdc++-v3/testsuite/23_containers/set/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <set>\n+\n+std::set<int>::iterator it = NULL; // { dg-error \"conversion\" }\n+std::set<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "a0286b0566d98294a1a814ebb7780555acf9809f", "filename": "libstdc++-v3/testsuite/23_containers/set/operators/1_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperators%2F1_neg.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,5 +39,5 @@ void test01()\n   test &= itr == setByName.end(); // { dg-error \"no\" } \n }\n \n-// { dg-error \"candidates are\" \"\" { target *-*-* } 283 }\n-// { dg-error \"candidates are\" \"\" { target *-*-* } 287 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 285 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 289 }"}, {"sha": "7ec332bd97d253a7face35304a570a28dd217804", "filename": "libstdc++-v3/testsuite/ext/slist/23781.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,36 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <ext/slist>\n+\n+__gnu_cxx::slist<int>::iterator it = NULL; // { dg-error \"conversion\" }\n+__gnu_cxx::slist<int>::const_iterator cit = NULL; // { dg-error \"conversion\" }"}, {"sha": "a5479932315058b2b693e6648c436edbdb015ae8", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/23781.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2F23781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182017e46105b6dc5d9a1f399a03eaf26d30016/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2F23781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2F23781.cc?ref=e182017e46105b6dc5d9a1f399a03eaf26d30016", "patch": "@@ -0,0 +1,43 @@\n+// 2005-09-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+// libstdc++/23781\n+#include <tr1/unordered_map>\n+#include <tr1/unordered_set>\n+\n+std::tr1::unordered_map<int, int>::iterator it1 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_map<int, int>::const_iterator cit1 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_multimap<int, int>::iterator it2 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_multimap<int, int>::const_iterator cit2 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_multiset<int>::iterator it3 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_multiset<int>::const_iterator cit3 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_set<int>::iterator it4 = NULL; // { dg-error \"conversion\" }\n+std::tr1::unordered_set<int>::const_iterator cit4 = NULL; // { dg-error \"conversion\" }"}]}