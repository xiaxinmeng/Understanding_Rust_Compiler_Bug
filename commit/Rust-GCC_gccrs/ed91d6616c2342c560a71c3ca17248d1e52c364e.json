{"sha": "ed91d6616c2342c560a71c3ca17248d1e52c364e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5MWQ2NjE2YzIzNDJjNTYwYTcxYzNjYTE3MjQ4ZDFlNTJjMzY0ZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-07-31T02:37:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-07-31T02:37:11Z"}, "message": "Add a new driver to data reference analysis.\n\n2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-data-ref.c (graphite_find_data_references_in_stmt): New.\n\t* tree-data-ref.h (graphite_find_data_references_in_stmt): Declared.\n\nFrom-SVN: r150297", "tree": {"sha": "a11ead2860cb37efe5f1938390042efa5755bbc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11ead2860cb37efe5f1938390042efa5755bbc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed91d6616c2342c560a71c3ca17248d1e52c364e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed91d6616c2342c560a71c3ca17248d1e52c364e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed91d6616c2342c560a71c3ca17248d1e52c364e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed91d6616c2342c560a71c3ca17248d1e52c364e/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37d995a09265e780d0276f8cd815f9eb32803d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37d995a09265e780d0276f8cd815f9eb32803d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37d995a09265e780d0276f8cd815f9eb32803d0"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c15abd70b0c5e03fdd0b34d5a99ddb16e2fb4570", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed91d6616c2342c560a71c3ca17248d1e52c364e", "patch": "@@ -1,3 +1,8 @@\n+2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-data-ref.c (graphite_find_data_references_in_stmt): New.\n+\t* tree-data-ref.h (graphite_find_data_references_in_stmt): Declared.\n+\n 2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-data-ref.c (debug_data_references): New."}, {"sha": "ae0a06814792407228567727570dca391bf2da59", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=ed91d6616c2342c560a71c3ca17248d1e52c364e", "patch": "@@ -4158,6 +4158,37 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n   return ret;\n }\n \n+/* Stores the data references in STMT to DATAREFS.  If there is an unanalyzable\n+   reference, returns false, otherwise returns true.  NEST is the outermost\n+   loop of the loop nest in which the references should be analyzed.  */\n+\n+bool\n+graphite_find_data_references_in_stmt (struct loop *nest, gimple stmt,\n+\t\t\t\t       VEC (data_reference_p, heap) **datarefs)\n+{\n+  unsigned i;\n+  VEC (data_ref_loc, heap) *references;\n+  data_ref_loc *ref;\n+  bool ret = true;\n+  data_reference_p dr;\n+\n+  if (get_references_in_stmt (stmt, &references))\n+    {\n+      VEC_free (data_ref_loc, heap, references);\n+      return false;\n+    }\n+\n+  for (i = 0; VEC_iterate (data_ref_loc, references, i, ref); i++)\n+    {\n+      dr = create_data_ref (nest, *ref->pos, stmt, ref->is_read);\n+      gcc_assert (dr != NULL);\n+      VEC_safe_push (data_reference_p, heap, *datarefs, dr);\n+    }\n+\n+  VEC_free (data_ref_loc, heap, references);\n+  return ret;\n+}\n+\n /* Search the data references in LOOP, and record the information into\n    DATAREFS.  Returns chrec_dont_know when failing to analyze a\n    difficult case, returns NULL_TREE otherwise.  */"}, {"sha": "fe79faea40f78ef612166db70d9b69950a0b750a", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed91d6616c2342c560a71c3ca17248d1e52c364e/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=ed91d6616c2342c560a71c3ca17248d1e52c364e", "patch": "@@ -405,6 +405,8 @@ extern void free_data_ref (data_reference_p);\n extern void free_data_refs (VEC (data_reference_p, heap) *);\n extern bool find_data_references_in_stmt (struct loop *, gimple,\n \t\t\t\t\t  VEC (data_reference_p, heap) **);\n+extern bool graphite_find_data_references_in_stmt (struct loop *, gimple,\n+\t\t\t\t\t\t   VEC (data_reference_p, heap) **);\n struct data_reference *create_data_ref (struct loop *, tree, gimple, bool);\n extern bool find_loop_nest (struct loop *, VEC (loop_p, heap) **);\n extern void compute_all_dependences (VEC (data_reference_p, heap) *,"}]}