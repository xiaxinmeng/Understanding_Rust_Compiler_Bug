{"sha": "a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxZjE1MWYxZTAzZjliMmJmNDE0OGZjM2YxOGYxMTRiYjY4MDZiMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-11T05:29:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-11T05:29:14Z"}, "message": "tree.h (id_equal): New.\n\n\t* tree.h (id_equal): New.\n\n\t* dwarf2out.c, hsa-gen.c, ipa-devirt.c, omp-expand.c,\n\tomp-simd-clone.c, read-rtl-function.c, tree-chkp.c, tree.c: Use it\n\tinstead of strcmp of IDENTIFIER_POINTER.\nc-family/\n\t* c-ada-spec.c, c-pragma.c: Use it.\ncp/\n\t* cp-tree.h, decl2.c, mangle.c, parser.c, pt.c, semantics.c: Use it.\n\nFrom-SVN: r249103", "tree": {"sha": "e673d9359df0faf119e7f7fa476fdb87ce07f1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e673d9359df0faf119e7f7fa476fdb87ce07f1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc77253832d17c57f385695119cc5344555bd913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc77253832d17c57f385695119cc5344555bd913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc77253832d17c57f385695119cc5344555bd913"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "8ddc0ee46924e142efb8722ff2db8ccd3df1386d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -1,3 +1,10 @@\n+2017-06-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (id_equal): New.\n+\t* dwarf2out.c, hsa-gen.c, ipa-devirt.c, omp-expand.c,\n+\tomp-simd-clone.c, read-rtl-function.c, tree-chkp.c, tree.c: Use it\n+\tinstead of strcmp of IDENTIFIER_POINTER.\n+\n 2017-06-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-transform.c: Include function.h, cfg.h and basic-block.h"}, {"sha": "7ea7781c6a577b7898a33c0c06ca10b8438a6e54", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -1,3 +1,7 @@\n+2017-06-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-ada-spec.c, c-pragma.c: Use id_equal.\n+\n 2017-06-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/80919"}, {"sha": "6cf298a126afc91af909de8dfde3ef3c10846dfa", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -1799,7 +1799,7 @@ is_char_array (tree t)\n \n   tmp = TREE_TYPE (tmp);\n   return num_dim == 1 && TREE_CODE (tmp) == INTEGER_TYPE\n-    && !strcmp (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (tmp))), \"char\");\n+    && id_equal (DECL_NAME (TYPE_NAME (tmp)), \"char\");\n }\n \n /* Dump in BUFFER an array type T in Ada syntax.  Assume that the \"type\""}, {"sha": "48b02b88bb5ce15c3cb4b3d9609b8631b9dfd65a", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -514,7 +514,7 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n \t      const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \t      name = targetm.strip_name_encoding (name);\n \n-\t      if (strcmp (name, IDENTIFIER_POINTER (newname)))\n+\t      if (!id_equal (newname, name))\n \t\twarning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n \t\t\t \"conflict with previous rename\");\n \t    }\n@@ -587,7 +587,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \tif (DECL_NAME (decl) == p->oldname)\n \t  {\n \t    /* Only warn if there is a conflict.  */\n-\t    if (strcmp (IDENTIFIER_POINTER (p->newname), oldname))\n+\t    if (!id_equal (p->newname, oldname))\n \t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with previous rename\");\n "}, {"sha": "da085531209c00774f119e2f252022f663699226", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -1,3 +1,8 @@\n+2017-06-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h, decl2.c, mangle.c, parser.c, pt.c, semantics.c: Use\n+\tid_equal.\n+\n 2017-06-09  Jason Merrill  <jason@redhat.com>\n \n \tMissing bits from N4268, constant evaluation for all non-type args."}, {"sha": "5dd6023be16d69544caae797ea6773ebbd0e0135", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -3015,7 +3015,7 @@ struct GTY(()) lang_decl {\n    template function.  */\n #define DECL_PRETTY_FUNCTION_P(NODE) \\\n   (DECL_NAME (NODE) \\\n-   && !strcmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__PRETTY_FUNCTION__\"))\n+   && id_equal (DECL_NAME (NODE), \"__PRETTY_FUNCTION__\"))\n \n /* Nonzero if the variable was declared to be thread-local.\n    We need a special C++ version of this test because the middle-end"}, {"sha": "d3d90020c05cbbb4bf0598cd5705bdc05472098c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -827,7 +827,7 @@ grokfield (const cp_declarator *declarator,\n \t}\n \n       if (IDENTIFIER_POINTER (name)[0] == '_'\n-\t  && ! strcmp (IDENTIFIER_POINTER (name), \"_vptr\"))\n+\t  && id_equal (name, \"_vptr\"))\n \terror (\"member %qD conflicts with virtual function table field name\",\n \t       value);\n     }"}, {"sha": "e866675bed957c8bc38dfc358678da9be3b7999d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -2900,7 +2900,7 @@ write_expression (tree expr)\n     write_template_arg_literal (expr);\n   else if (code == PARM_DECL && DECL_ARTIFICIAL (expr))\n     {\n-      gcc_assert (!strcmp (\"this\", IDENTIFIER_POINTER (DECL_NAME (expr))));\n+      gcc_assert (id_equal (DECL_NAME (expr), \"this\"));\n       write_string (\"fpT\");\n     }\n   else if (code == PARM_DECL)"}, {"sha": "d02ad360d16c983afecd4a6933be958efceca9ad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -3201,7 +3201,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t\t\"-std=c++11 or -std=gnu++11\");\n       else if (cxx_dialect < cxx11\n \t       && TREE_CODE (id) == IDENTIFIER_NODE\n-\t       && !strcmp (IDENTIFIER_POINTER (id), \"thread_local\"))\n+\t       && id_equal (id, \"thread_local\"))\n \tinform (location, \"C++11 %<thread_local%> only available with \"\n \t\t\"-std=c++11 or -std=gnu++11\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_CONCEPT])\n@@ -7823,7 +7823,7 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t\t/* ISO C++ defines alignof only with types, not with\n \t\t   expressions. So pedwarn if alignof is used with a non-\n \t\t   type expression. However, __alignof__ is ok.  */\n-\t\tif (!strcmp (IDENTIFIER_POINTER (token->u.value), \"alignof\"))\n+\t\tif (id_equal (token->u.value, \"alignof\"))\n \t\t  pedwarn (token->location, OPT_Wpedantic,\n \t\t\t   \"ISO C++ does not allow %<alignof%> \"\n \t\t\t   \"with a non-type\");\n@@ -20401,17 +20401,17 @@ cp_parser_virt_specifier_seq_opt (cp_parser* parser)\n       /* See if it's a virt-specifier-qualifier.  */\n       if (token->type != CPP_NAME)\n         break;\n-      if (!strcmp (IDENTIFIER_POINTER(token->u.value), \"override\"))\n+      if (id_equal (token->u.value, \"override\"))\n         {\n           maybe_warn_cpp0x (CPP0X_OVERRIDE_CONTROLS);\n           virt_specifier = VIRT_SPEC_OVERRIDE;\n         }\n-      else if (!strcmp (IDENTIFIER_POINTER(token->u.value), \"final\"))\n+      else if (id_equal (token->u.value, \"final\"))\n         {\n           maybe_warn_cpp0x (CPP0X_OVERRIDE_CONTROLS);\n           virt_specifier = VIRT_SPEC_FINAL;\n         }\n-      else if (!strcmp (IDENTIFIER_POINTER(token->u.value), \"__final\"))\n+      else if (id_equal (token->u.value, \"__final\"))\n         {\n           virt_specifier = VIRT_SPEC_FINAL;\n         }\n@@ -27648,7 +27648,7 @@ static bool\n token_is__thread (cp_token *token)\n {\n   gcc_assert (token->keyword == RID_THREAD);\n-  return !strcmp (IDENTIFIER_POINTER (token->u.value), \"__thread\");\n+  return id_equal (token->u.value, \"__thread\");\n }\n \n /* Set the location for a declarator specifier and check if it is\n@@ -31258,7 +31258,7 @@ cp_parser_oacc_shape_clause (cp_parser *parser, omp_clause_code kind,\n \t    }\n \t  /* Worker num: argument and vector length: arguments.  */\n \t  else if (cp_lexer_next_token_is (lexer, CPP_NAME)\n-\t\t   && strcmp (id, IDENTIFIER_POINTER (next->u.value)) == 0\n+\t\t   && id_equal (next->u.value, id)\n \t\t   && cp_lexer_nth_token_is (lexer, 2, CPP_COLON))\n \t    {\n \t      cp_lexer_consume_token (lexer);  /* id  */\n@@ -37129,10 +37129,8 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       else if (ARITHMETIC_TYPE_P (type)\n \t       && (orig_reduc_id == NULL_TREE\n \t\t   || (TREE_CODE (type) != COMPLEX_TYPE\n-\t\t       && (strcmp (IDENTIFIER_POINTER (orig_reduc_id),\n-\t\t\t\t   \"min\") == 0\n-\t\t\t   || strcmp (IDENTIFIER_POINTER (orig_reduc_id),\n-\t\t\t\t      \"max\") == 0))))\n+\t\t       && (id_equal (orig_reduc_id, \"min\")\n+\t\t\t   || id_equal (orig_reduc_id, \"max\")))))\n \terror_at (loc, \"predeclared arithmetic type %qT in \"\n \t\t       \"%<#pragma omp declare reduction%>\", type);\n       else if (TREE_CODE (type) == FUNCTION_TYPE\n@@ -38669,15 +38667,15 @@ cp_parser_cilk_simd_clause_name (cp_parser *parser)\n     clause_type = PRAGMA_CILK_CLAUSE_PRIVATE;\n   else if (!token->u.value || token->type != CPP_NAME)\n     return PRAGMA_CILK_CLAUSE_NONE;\n-  else if (!strcmp (IDENTIFIER_POINTER (token->u.value), \"vectorlength\"))\n+  else if (id_equal (token->u.value, \"vectorlength\"))\n     clause_type = PRAGMA_CILK_CLAUSE_VECTORLENGTH;\n-  else if (!strcmp (IDENTIFIER_POINTER (token->u.value), \"linear\"))\n+  else if (id_equal (token->u.value, \"linear\"))\n     clause_type = PRAGMA_CILK_CLAUSE_LINEAR;\n-  else if (!strcmp (IDENTIFIER_POINTER (token->u.value), \"firstprivate\"))\n+  else if (id_equal (token->u.value, \"firstprivate\"))\n     clause_type = PRAGMA_CILK_CLAUSE_FIRSTPRIVATE;\n-  else if (!strcmp (IDENTIFIER_POINTER (token->u.value), \"lastprivate\"))\n+  else if (id_equal (token->u.value, \"lastprivate\"))\n     clause_type = PRAGMA_CILK_CLAUSE_LASTPRIVATE;\n-  else if (!strcmp (IDENTIFIER_POINTER (token->u.value), \"reduction\"))\n+  else if (id_equal (token->u.value, \"reduction\"))\n     clause_type = PRAGMA_CILK_CLAUSE_REDUCTION;\n   else\n     return PRAGMA_CILK_CLAUSE_NONE;"}, {"sha": "8a61b74a149763bc1f338910ffc22219904e45f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -3425,7 +3425,7 @@ builtin_pack_fn_p (tree fn)\n       || !DECL_IS_BUILTIN (fn))\n     return false;\n \n-  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fn)), \"__integer_pack\") == 0)\n+  if (id_equal (DECL_NAME (fn), \"__integer_pack\"))\n     return true;\n \n   return false;\n@@ -3503,7 +3503,7 @@ expand_builtin_pack_call (tree call, tree args, tsubst_flags_t complain,\n \n   tree fn = CALL_EXPR_FN (call);\n \n-  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fn)), \"__integer_pack\") == 0)\n+  if (id_equal (DECL_NAME (fn), \"__integer_pack\"))\n     return expand_integer_pack (call, args, complain, in_decl);\n \n   return NULL_TREE;"}, {"sha": "5b5ec5483d1a4752df90e1b67dc3738a8f0ebf2a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -2913,7 +2913,7 @@ begin_class_definition (tree t)\n       if (ns && TREE_CODE (ns) == NAMESPACE_DECL\n \t  && DECL_CONTEXT (ns) == std_node\n \t  && DECL_NAME (ns)\n-\t  && !strcmp (IDENTIFIER_POINTER (DECL_NAME (ns)), \"decimal\"))\n+\t  && id_equal (DECL_NAME (ns), \"decimal\"))\n \t{\n \t  const char *n = TYPE_NAME_STRING (t);\n \t  if ((strcmp (n, \"decimal32\") == 0)"}, {"sha": "92444e3cd461558d9b7e13dbc16a5b484cb8579f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -20625,7 +20625,7 @@ add_calling_convention_attribute (dw_die_ref subr_die, tree decl)\n \t   targetm.dwarf_calling_convention (TREE_TYPE (decl)));\n \n   if (is_fortran ()\n-      && !strcmp (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), \"MAIN__\"))\n+      && id_equal (DECL_ASSEMBLER_NAME (decl), \"MAIN__\"))\n     {\n       /* DWARF 2 doesn't provide a way to identify a program's source-level\n \tentry point.  DW_AT_calling_convention attributes are only meant"}, {"sha": "85f053cbed99c38f1746a3f2c478ba4ebe5f0a0d", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -3924,7 +3924,7 @@ get_hsa_kernel_dispatch_offset (const char *field_name)\n \n   for (tree chain = TYPE_FIELDS (*hsa_kernel_dispatch_type);\n        chain != NULL_TREE; chain = TREE_CHAIN (chain))\n-    if (strcmp (field_name, IDENTIFIER_POINTER (DECL_NAME (chain))) == 0)\n+    if (id_equal (DECL_NAME (chain), field_name))\n       return int_byte_position (chain);\n \n   gcc_unreachable ();"}, {"sha": "f0bc2501c273b6c3828456e568bcf310215ed3ab", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -2359,7 +2359,7 @@ is_cxa_pure_virtual_p (tree target)\n {\n   return target && TREE_CODE (TREE_TYPE (target)) != METHOD_TYPE\n \t && DECL_NAME (target)\n-\t && !strcmp (IDENTIFIER_POINTER (DECL_NAME (target)),\n+\t && id_equal (DECL_NAME (target),\n \t\t     \"__cxa_pure_virtual\");\n }\n "}, {"sha": "53d3d3f84fd1c1c01de470e21f902b2935d448d0", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -4366,9 +4366,9 @@ expand_cilk_for (struct omp_region *region, struct omp_for_data *fd)\n   tree t, low_val = NULL_TREE, high_val = NULL_TREE;\n   for (t = DECL_ARGUMENTS (child_fndecl); t; t = TREE_CHAIN (t))\n     {\n-      if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__high\"))\n+      if (id_equal (DECL_NAME (t), \"__high\"))\n \thigh_val = t;\n-      else if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__low\"))\n+      else if (id_equal (DECL_NAME (t), \"__low\"))\n \tlow_val = t;\n     }\n   gcc_assert (low_val && high_val);"}, {"sha": "3aa8b131565e29e123cf4d2a6ceea98c4431dcd2", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -417,8 +417,7 @@ simd_clone_mangle (struct cgraph_node *node,\n      if the simdlen is assumed to be 8 for the first one, etc.  */\n   for (struct cgraph_node *clone = node->simd_clones; clone;\n        clone = clone->simdclone->next_clone)\n-    if (strcmp (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (clone->decl)),\n-\t\tstr) == 0)\n+    if (id_equal (DECL_ASSEMBLER_NAME (clone->decl), str))\n       return NULL_TREE;\n \n   return get_identifier (str);"}, {"sha": "ec25051e702fe49ee4a9200c5ee0000af4450c01", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -536,7 +536,7 @@ static tree\n find_param_by_name (tree fndecl, const char *name)\n {\n   for (tree arg = DECL_ARGUMENTS (fndecl); arg; arg = TREE_CHAIN (arg))\n-    if (strcmp (name, IDENTIFIER_POINTER (DECL_NAME (arg))) == 0)\n+    if (id_equal (DECL_NAME (arg), name))\n       return arg;\n   return NULL_TREE;\n }\n@@ -1324,7 +1324,7 @@ function_reader::parse_mem_expr (const char *desc)\n   int i;\n   tree t;\n   FOR_EACH_VEC_ELT (m_fake_scope, i, t)\n-    if (strcmp (desc, IDENTIFIER_POINTER (DECL_NAME (t))) == 0)\n+    if (id_equal (DECL_NAME (t), desc))\n       return t;\n \n   /* Not found?  Create it."}, {"sha": "ecac901d52b86e8f414b579018ff1530456a4be6", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -2430,8 +2430,7 @@ chkp_get_bound_for_parm (tree parm)\n \t to use zero bounds for input arguments of main\n \t function.  */\n       else if (flag_chkp_zero_input_bounds_for_main\n-\t       && strcmp (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (orig_decl)),\n-\t\t\t  \"main\") == 0)\n+\t       && id_equal (DECL_ASSEMBLER_NAME (orig_decl), \"main\"))\n \tbounds = chkp_get_zero_bounds ();\n       else if (BOUNDED_P (parm))\n \t{"}, {"sha": "260280317bceb261f04e323edc5455bc0f79e52f", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -6050,7 +6050,7 @@ private_is_attribute_p (const char *attr_name, size_t attr_len, const_tree ident\n \n   if (ident_len == attr_len)\n     {\n-      if (strcmp (attr_name, IDENTIFIER_POINTER (ident)) == 0)\n+      if (id_equal (ident, attr_name))\n \treturn true;\n     }\n   else if (ident_len == attr_len + 4)"}, {"sha": "bfe83f7c0a2803b554d8c5f4c86ac0ecc8184393", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01f151f1e03f9b2bf4148fc3f18f114bb6806b0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a01f151f1e03f9b2bf4148fc3f18f114bb6806b0", "patch": "@@ -3618,6 +3618,20 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n \n #endif\n \n+/* True iff an identifier matches a C string.  */\n+\n+inline bool\n+id_equal (const_tree id, const char *str)\n+{\n+  return !strcmp (IDENTIFIER_POINTER (id), str);\n+}\n+\n+inline bool\n+id_equal (const char *str, const_tree id)\n+{\n+  return !strcmp (str, IDENTIFIER_POINTER (id));\n+}\n+\n #define error_mark_node\t\t\tglobal_trees[TI_ERROR_MARK]\n \n #define intQI_type_node\t\t\tglobal_trees[TI_INTQI_TYPE]"}]}