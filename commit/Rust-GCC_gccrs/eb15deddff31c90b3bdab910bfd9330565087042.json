{"sha": "eb15deddff31c90b3bdab910bfd9330565087042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxNWRlZGRmZjMxYzkwYjNiZGFiOTEwYmZkOTMzMDU2NTA4NzA0Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-12T02:53:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-12T02:53:38Z"}, "message": "alpha.md (divmodsi_internal_er): Split, so that we represent the address load's dependency on the gp.\n\n        * config/alpha/alpha.md (divmodsi_internal_er): Split, so that\n        we represent the address load's dependency on the gp.\n        (divmoddi_internal_er): Likewise.\n        (divmodsi_internal_er_1, divmoddi_internal_er_1): New.\n\nFrom-SVN: r47914", "tree": {"sha": "7968cb6bdf28a10379ab6c6c10a29ceb46b0fe6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7968cb6bdf28a10379ab6c6c10a29ceb46b0fe6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb15deddff31c90b3bdab910bfd9330565087042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb15deddff31c90b3bdab910bfd9330565087042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb15deddff31c90b3bdab910bfd9330565087042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb15deddff31c90b3bdab910bfd9330565087042/comments", "author": null, "committer": null, "parents": [{"sha": "e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7dfe4bb07b757be04083465eb6630cd3aa6a79f"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "2755fa146fed043d1800a2709625e74fa002a10c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb15deddff31c90b3bdab910bfd9330565087042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb15deddff31c90b3bdab910bfd9330565087042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb15deddff31c90b3bdab910bfd9330565087042", "patch": "@@ -1,3 +1,10 @@\n+2001-12-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (divmodsi_internal_er): Split, so that\n+\twe represent the address load's dependency on the gp.\n+\t(divmoddi_internal_er): Likewise.\n+\t(divmodsi_internal_er_1, divmoddi_internal_er_1): New.\n+\n 2001-12-11  Richard Henderson  <rth@redhat.com>\n \n \t* emit-rtl.c (widen_memory_access): New."}, {"sha": "c5c80099bccf04fbed26e282b8ca156ba836f33c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 85, "deletions": 2, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb15deddff31c90b3bdab910bfd9330565087042/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb15deddff31c90b3bdab910bfd9330565087042/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=eb15deddff31c90b3bdab910bfd9330565087042", "patch": "@@ -1190,7 +1190,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n ;; Lengths of 8 for ldq $t12,__divq($gp); jsr $t9,($t12),__divq as\n ;; expanded by the assembler.\n \n-(define_insn \"*divmodsi_internal_er\"\n+(define_insn_and_split \"*divmodsi_internal_er\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n \t(sign_extend:DI (match_operator:SI 3 \"divmod_operator\"\n \t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n@@ -1199,9 +1199,51 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n   \"ldq $27,__%E3($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E3\\t\\t!lituse_jsr!%#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (sign_extend:DI (match_dup 3)))\n+\t      (use (match_dup 0))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])]\n+{\n+  const char *str;\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case DIV: \n+      str = \"__divl\";\n+      break; \n+    case UDIV:\n+      str = \"__divlu\";\n+      break;\n+    case MOD:\n+      str = \"__reml\";\n+      break;\n+    case UMOD:\n+      str = \"__remlu\";\n+      break;\n+    default:\n+      abort ();\n+    }\n+  emit_insn (gen_movdi_er_high_g (operands[0], pic_offset_table_rtx,\n+\t\t\t\t  gen_rtx_SYMBOL_REF (DImode, str),\n+\t\t\t\t  const0_rtx));\n+}\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"*divmodsi_internal_er_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(sign_extend:DI (match_operator:SI 3 \"divmod_operator\"\n+                        [(match_operand:DI 1 \"register_operand\" \"a\")\n+                         (match_operand:DI 2 \"register_operand\" \"b\")])))\n+   (use (match_operand:DI 4 \"register_operand\" \"c\"))\n+   (clobber (reg:DI 23))\n+   (clobber (reg:DI 28))]\n+  \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n+  \"jsr $23,($27),__%E3\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"*divmodsi_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n \t(sign_extend:DI (match_operator:SI 3 \"divmod_operator\"\n@@ -1214,7 +1256,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"*divmoddi_internal_er\"\n+(define_insn_and_split \"*divmoddi_internal_er\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n \t(match_operator:DI 3 \"divmod_operator\"\n \t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n@@ -1223,9 +1265,50 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n   \"ldq $27,__%E3($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E3\\t\\t!lituse_jsr!%#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 3))\n+\t      (use (match_dup 0))\n+\t      (clobber (reg:DI 23))\n+\t      (clobber (reg:DI 28))])]\n+{\n+  const char *str;\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case DIV: \n+      str = \"__divq\";\n+      break; \n+    case UDIV:\n+      str = \"__divqu\";\n+      break;\n+    case MOD:\n+      str = \"__remq\";\n+      break;\n+    case UMOD:\n+      str = \"__remqu\";\n+      break;\n+    default:\n+      abort ();\n+    }\n+  emit_insn (gen_movdi_er_high_g (operands[0], pic_offset_table_rtx,\n+\t\t\t\t  gen_rtx_SYMBOL_REF (DImode, str),\n+\t\t\t\t  const0_rtx));\n+}\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"*divmoddi_internal_er_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(match_operator:DI 3 \"divmod_operator\"\n+                        [(match_operand:DI 1 \"register_operand\" \"a\")\n+                         (match_operand:DI 2 \"register_operand\" \"b\")]))\n+   (use (match_operand:DI 4 \"register_operand\" \"c\"))\n+   (clobber (reg:DI 23))\n+   (clobber (reg:DI 28))]\n+  \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n+  \"jsr $23,($27),__%E3\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"*divmoddi_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n \t(match_operator:DI 3 \"divmod_operator\""}]}