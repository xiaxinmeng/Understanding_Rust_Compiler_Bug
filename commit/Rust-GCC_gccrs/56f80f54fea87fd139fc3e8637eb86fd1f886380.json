{"sha": "56f80f54fea87fd139fc3e8637eb86fd1f886380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmODBmNTRmZWE4N2ZkMTM5ZmMzZTg2MzdlYjg2ZmQxZjg4NjM4MA==", "commit": {"author": {"name": "Abderrazek Zaafrani", "email": "a.zaafrani@samsung.com", "date": "2016-01-26T22:02:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-26T22:02:11Z"}, "message": "handle isl_ast_op_select\n\n2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n            Sebastian Pop  <s.pop@samsung.com>\n\n\t* graphite-isl-ast-to-gimple.c (ternary_op_to_tree): Handle\n\tisl_ast_op_cond and isl_ast_op_select.\n\t(gcc_expression_from_isl_expr_op): Same.\n\n\t* gcc.dg/graphite/isl-ast-op-select.c: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232851", "tree": {"sha": "638f5ac175067ff03b306bcc14f058b3bdc7451b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/638f5ac175067ff03b306bcc14f058b3bdc7451b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f80f54fea87fd139fc3e8637eb86fd1f886380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f80f54fea87fd139fc3e8637eb86fd1f886380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f80f54fea87fd139fc3e8637eb86fd1f886380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f80f54fea87fd139fc3e8637eb86fd1f886380/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0909527ea43a796239cd68c7354a3a4447852b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0909527ea43a796239cd68c7354a3a4447852b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0909527ea43a796239cd68c7354a3a4447852b7"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "0358f1c04aa7849f0a2da64f8928202819d59a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f80f54fea87fd139fc3e8637eb86fd1f886380", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (ternary_op_to_tree): Handle\n+\tisl_ast_op_cond and isl_ast_op_select.\n+\t(gcc_expression_from_isl_expr_op): Same.\n+\n 2016-01-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68782"}, {"sha": "81ed3046e1dbf5b322d8e44d86f902b8a3807972", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=56f80f54fea87fd139fc3e8637eb86fd1f886380", "patch": "@@ -689,22 +689,20 @@ tree\n translate_isl_ast_to_gimple::\n ternary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n {\n-  gcc_assert (isl_ast_expr_get_op_type (expr) == isl_ast_op_minus);\n+  enum isl_ast_op_type t = isl_ast_expr_get_op_type (expr);\n+  gcc_assert (t == isl_ast_op_cond || t == isl_ast_op_select);\n   isl_ast_expr *arg_expr = isl_ast_expr_get_op_arg (expr, 0);\n-  tree tree_first_expr\n-    = gcc_expression_from_isl_expression (type, arg_expr, ip);\n+  tree a = gcc_expression_from_isl_expression (type, arg_expr, ip);\n   arg_expr = isl_ast_expr_get_op_arg (expr, 1);\n-  tree tree_second_expr\n-    = gcc_expression_from_isl_expression (type, arg_expr, ip);\n+  tree b = gcc_expression_from_isl_expression (type, arg_expr, ip);\n   arg_expr = isl_ast_expr_get_op_arg (expr, 2);\n-  tree tree_third_expr\n-    = gcc_expression_from_isl_expression (type, arg_expr, ip);\n+  tree c = gcc_expression_from_isl_expression (type, arg_expr, ip);\n   isl_ast_expr_free (expr);\n \n   if (codegen_error)\n     return NULL_TREE;\n-  return fold_build3 (COND_EXPR, type, tree_first_expr,\n-\t\t      tree_second_expr, tree_third_expr);\n+\n+  return fold_build3 (COND_EXPR, type, a, b, c);\n }\n \n /* Converts a unary isl_ast_expr_op expression E to a GCC expression tree of\n@@ -791,7 +789,6 @@ gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n     case isl_ast_op_call:\n     case isl_ast_op_and_then:\n     case isl_ast_op_or_else:\n-    case isl_ast_op_select:\n       gcc_unreachable ();\n \n     case isl_ast_op_max:\n@@ -822,6 +819,7 @@ gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n       return unary_op_to_tree (type, expr, ip);\n \n     case isl_ast_op_cond:\n+    case isl_ast_op_select:\n       return ternary_op_to_tree (type, expr, ip);\n \n     default:"}, {"sha": "ee59ff14610c45690c8d386f225e3d06ca7c1359", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56f80f54fea87fd139fc3e8637eb86fd1f886380", "patch": "@@ -1,3 +1,8 @@\n+2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* gcc.dg/graphite/isl-ast-op-select.c: New.\n+\n 2015-01-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69385"}, {"sha": "688176e0ed584263415d615cb7f1702e880f8728", "filename": "gcc/testsuite/gcc.dg/graphite/isl-ast-op-select.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-op-select.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f80f54fea87fd139fc3e8637eb86fd1f886380/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-op-select.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-op-select.c?ref=56f80f54fea87fd139fc3e8637eb86fd1f886380", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-O2 -floop-nest-optimize\" } */\n+\n+static void kernel_gemm(int ni, int nj, int nk, double alpha, double beta, double C[1024][1024], double A[1024][1024], double B[1024][1024])\n+{\n+ int i, j, k;\n+ for (i = 0; i < ni; i++)\n+   for (j = 0; j < nj; j++)\n+     {\n+       C[i][j] *= beta;\n+       for (k = 0; k < nk; ++k)\n+         C[i][j] += alpha * A[i][k] * B[k][j];\n+     }\n+}\n+\n+void *polybench_alloc_data (int, int);\n+\n+int main(int argc, char** argv) {\n+  int ni = 1024;\n+  int nj = 1024;\n+  int nk = 1024;\n+  double alpha;\n+  double beta;\n+  double (*C)[1024][1024];\n+  C = (double(*)[1024][1024])polybench_alloc_data ((1024) * (1024), sizeof(double));\n+  double (*A)[1024][1024];\n+  A = (double(*)[1024][1024])polybench_alloc_data ((1024) * (1024), sizeof(double));\n+  double (*B)[1024][1024];\n+  kernel_gemm (ni, nj, nk, alpha, beta, *C, *A, *B);\n+}"}]}