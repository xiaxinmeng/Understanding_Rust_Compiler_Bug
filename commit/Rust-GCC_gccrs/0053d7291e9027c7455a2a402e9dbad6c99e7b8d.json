{"sha": "0053d7291e9027c7455a2a402e9dbad6c99e7b8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1M2Q3MjkxZTkwMjdjNzQ1NWEyYTQwMmU5ZGJhZDZjOTllN2I4ZA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-01-14T12:52:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:05Z"}, "message": "[Ada] Incorrect accessibility level on actual in procedure call\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Add condition to check for\n\texpanded actuals and remove dead code.", "tree": {"sha": "cbf55b9567a69413cac601b9e2f4da31bbf9f7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf55b9567a69413cac601b9e2f4da31bbf9f7ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0053d7291e9027c7455a2a402e9dbad6c99e7b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0053d7291e9027c7455a2a402e9dbad6c99e7b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0053d7291e9027c7455a2a402e9dbad6c99e7b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0053d7291e9027c7455a2a402e9dbad6c99e7b8d/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965"}], "stats": {"total": 87, "additions": 23, "deletions": 64}, "files": [{"sha": "52d468cd8c41a85cf42e33090185f9b3b3dca337", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 23, "deletions": 64, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0053d7291e9027c7455a2a402e9dbad6c99e7b8d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0053d7291e9027c7455a2a402e9dbad6c99e7b8d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=0053d7291e9027c7455a2a402e9dbad6c99e7b8d", "patch": "@@ -3473,12 +3473,6 @@ package body Exp_Ch6 is\n       Scop          : Entity_Id;\n       Subp          : Entity_Id;\n \n-      Prev_Orig : Node_Id;\n-      --  Original node for an actual, which may have been rewritten. If the\n-      --  actual is a function call that has been transformed from a selected\n-      --  component, the original node is unanalyzed. Otherwise, it carries\n-      --  semantic information used to generate additional actuals.\n-\n       CW_Interface_Formals_Present : Boolean := False;\n \n    --  Start of processing for Expand_Call_Helper\n@@ -3739,7 +3733,6 @@ package body Exp_Ch6 is\n          --  Prepare to examine current entry\n \n          Prev := Actual;\n-         Prev_Orig := Original_Node (Prev);\n \n          --  Ada 2005 (AI-251): Check if any formal is a class-wide interface\n          --  to expand it in a further round.\n@@ -3828,63 +3821,6 @@ package body Exp_Ch6 is\n          --  Create possible extra actual for accessibility level\n \n          if Present (Extra_Accessibility (Formal)) then\n-\n-            --  Ada 2005 (AI-252): If the actual was rewritten as an Access\n-            --  attribute, then the original actual may be an aliased object\n-            --  occurring as the prefix in a call using \"Object.Operation\"\n-            --  notation. In that case we must pass the level of the object,\n-            --  so Prev_Orig is reset to Prev and the attribute will be\n-            --  processed by the code for Access attributes further below.\n-\n-            if Prev_Orig /= Prev\n-              and then Nkind (Prev) = N_Attribute_Reference\n-              and then Get_Attribute_Id (Attribute_Name (Prev)) =\n-                         Attribute_Access\n-              and then Is_Aliased_View (Prev_Orig)\n-            then\n-               Prev_Orig := Prev;\n-\n-            --  A class-wide precondition generates a test in which formals of\n-            --  the subprogram are replaced by actuals that came from source.\n-            --  In that case as well, the accessiblity comes from the actual.\n-            --  This is the one case in which there are references to formals\n-            --  outside of their subprogram.\n-\n-            elsif Prev_Orig /= Prev\n-              and then Is_Entity_Name (Prev_Orig)\n-              and then Present (Entity (Prev_Orig))\n-              and then Is_Formal (Entity (Prev_Orig))\n-              and then not In_Open_Scopes (Scope (Entity (Prev_Orig)))\n-            then\n-               Prev_Orig := Prev;\n-\n-            --  If the actual is a formal of an enclosing subprogram it is\n-            --  the right entity, even if it is a rewriting. This happens\n-            --  when the call is within an inherited condition or predicate.\n-\n-            elsif Is_Entity_Name (Actual)\n-              and then Is_Formal (Entity (Actual))\n-              and then In_Open_Scopes (Scope (Entity (Actual)))\n-            then\n-               Prev_Orig := Prev;\n-\n-            --  If the actual is an attribute reference that was expanded\n-            --  into a reference to an entity, then get accessibility level\n-            --  from that entity. AARM 6.1.1(27.d) says \"... the implicit\n-            --  constant declaration defines the accessibility level of X'Old\".\n-\n-            elsif Nkind (Prev_Orig) = N_Attribute_Reference\n-              and then Attribute_Name (Prev_Orig) in Name_Old | Name_Loop_Entry\n-              and then Is_Entity_Name (Prev)\n-              and then Present (Entity (Prev))\n-              and then Is_Object (Entity (Prev))\n-            then\n-               Prev_Orig := Prev;\n-\n-            elsif Nkind (Prev_Orig) = N_Type_Conversion then\n-               Prev_Orig := Expression (Prev_Orig);\n-            end if;\n-\n             --  Ada 2005 (AI-251): Thunks must propagate the extra actuals of\n             --  accessibility levels.\n \n@@ -3929,6 +3865,29 @@ package body Exp_Ch6 is\n             then\n                Add_Cond_Expression_Extra_Actual (Formal);\n \n+            --  Internal constant generated to remove side effects (normally\n+            --  from the expansion of dispatching calls).\n+\n+            --  First verify the actual is internal\n+\n+            elsif not Comes_From_Source (Prev)\n+              and then Original_Node (Prev) = Prev\n+\n+              --  Next check that the actual is a constant\n+\n+              and then Nkind (Prev) = N_Identifier\n+              and then Ekind (Entity (Prev)) = E_Constant\n+              and then Nkind (Parent (Entity (Prev))) = N_Object_Declaration\n+            then\n+               --  Generate the accessibility level based on the expression in\n+               --  the constant's declaration.\n+\n+               Add_Extra_Actual\n+                 (Expr => Accessibility_Level\n+                            (Expr  => Expression (Parent (Entity (Prev))),\n+                             Level => Dynamic_Level),\n+                  EF   => Extra_Accessibility (Formal));\n+\n             --  Normal case\n \n             else"}]}