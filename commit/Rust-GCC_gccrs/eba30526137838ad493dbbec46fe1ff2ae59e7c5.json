{"sha": "eba30526137838ad493dbbec46fe1ff2ae59e7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhMzA1MjYxMzc4MzhhZDQ5M2RiYmVjNDZmZTFmZjJhZTU5ZTdjNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-03-31T22:23:59Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-03-31T22:23:59Z"}, "message": "cppexp.c: Delete SKIP_OPERAND.\n\n\t* cppexp.c: Delete SKIP_OPERAND.  Correct priority\n\tPAREN_INNER_PRIO.\n\t(_cpp_parse_expr): Check for multiple unary +/- operators.\n\tCorrect priorities of ':' and '?'.  Treat ')' as having a\n\tvalue.\tEnsure conditional expression is not void.\n\nFrom-SVN: r32848", "tree": {"sha": "8a2fcefa85607179829942d8a10c271d58b28254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2fcefa85607179829942d8a10c271d58b28254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eba30526137838ad493dbbec46fe1ff2ae59e7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba30526137838ad493dbbec46fe1ff2ae59e7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba30526137838ad493dbbec46fe1ff2ae59e7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba30526137838ad493dbbec46fe1ff2ae59e7c5/comments", "author": null, "committer": null, "parents": [{"sha": "db048faf78eb1d18c9166c7c527c517e1583432e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db048faf78eb1d18c9166c7c527c517e1583432e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db048faf78eb1d18c9166c7c527c517e1583432e"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "6584c6c68dd8b730d30094f7e076a20f442dfd8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba30526137838ad493dbbec46fe1ff2ae59e7c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba30526137838ad493dbbec46fe1ff2ae59e7c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eba30526137838ad493dbbec46fe1ff2ae59e7c5", "patch": "@@ -1,3 +1,11 @@\n+2000-03-31  Neil Booth <NeilB@earthling.net>\n+\n+\t* cppexp.c: Delete SKIP_OPERAND.  Correct priority\n+\tPAREN_INNER_PRIO.\n+\t(_cpp_parse_expr): Check for multiple unary +/- operators.\n+\tCorrect priorities of ':' and '?'.  Treat ')' as having a\n+\tvalue.\tEnsure conditional expression is not void.\n+\t\n 2000-03-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* alias.c (canon_rtx): Make it global."}, {"sha": "20076e2907e6413c511191cb24e973ac3cff0369", "filename": "gcc/cppexp.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba30526137838ad493dbbec46fe1ff2ae59e7c5/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba30526137838ad493dbbec46fe1ff2ae59e7c5/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=eba30526137838ad493dbbec46fe1ff2ae59e7c5", "patch": "@@ -103,13 +103,6 @@ static struct operation lex PARAMS ((cpp_reader *, int));\n #define INT 309\n #define CHAR 310\n \n-#define LEFT_OPERAND_REQUIRED 1\n-#define RIGHT_OPERAND_REQUIRED 2\n-#define HAVE_VALUE 4\n-/* SKIP_OPERAND is set for '&&' '||' '?' and ':' when the\n-   following operand should be short-circuited instead of evaluated.  */\n-#define SKIP_OPERAND 8\n-\n struct operation\n {\n   short op;\n@@ -644,7 +637,7 @@ right_shift (pfile, a, unsignedp, b)\n }\n \f\n /* These priorities are all even, so we can handle associatively.  */\n-#define PAREN_INNER_PRIO 0\n+#define PAREN_INNER_PRIO 2\n #define COMMA_PRIO 4\n #define COND_PRIO (COMMA_PRIO+2)\n #define OROR_PRIO (COND_PRIO+2)\n@@ -660,6 +653,11 @@ right_shift (pfile, a, unsignedp, b)\n #define UNARY_PRIO (MUL_PRIO+2)\n #define PAREN_OUTER_PRIO (UNARY_PRIO+2)\n \n+#define LEFT_OPERAND_REQUIRED 1\n+#define RIGHT_OPERAND_REQUIRED 2\n+#define HAVE_VALUE 4\n+#define SIGN_QUALIFIED 8\n+\n #define COMPARE(OP) \\\n   top->unsignedp = 0;\\\n   top->value = (unsigned1 || unsigned2) \\\n@@ -722,9 +720,15 @@ _cpp_parse_expr (pfile)\n \t      lprio = PLUS_PRIO;\n \t      goto binop;\n \t    }\n+\t  if (top->flags & SIGN_QUALIFIED)\n+\t    {\n+\t      cpp_error (pfile, \"more than one sign operator given\");\n+\t      goto syntax_error;\n+\t    }\n+\t  flags = SIGN_QUALIFIED;\n \t  /* else fall through */\n \tcase '!':  case '~':\n-\t  flags = RIGHT_OPERAND_REQUIRED;\n+\t  flags |= RIGHT_OPERAND_REQUIRED;\n \t  rprio = UNARY_PRIO;  lprio = rprio + 1;  goto maybe_reduce;\n \tcase '*':  case '/':  case '%':\n \t  lprio = MUL_PRIO;  goto binop;\n@@ -746,12 +750,13 @@ _cpp_parse_expr (pfile)\n \t  goto maybe_reduce;\n \tcase ')':\n \t  lprio = PAREN_INNER_PRIO;  rprio = PAREN_OUTER_PRIO;\n+\t  flags = HAVE_VALUE;\t/* At least, we will have after reduction.  */\n \t  goto maybe_reduce;\n         case ':':\n-\t  lprio = COND_PRIO;  rprio = COND_PRIO;\n+\t  lprio = COND_PRIO;  rprio = COND_PRIO + 1;\n \t  goto maybe_reduce;\n         case '?':\n-\t  lprio = COND_PRIO + 1;  rprio = COND_PRIO;\n+\t  lprio = COND_PRIO;  rprio = COND_PRIO;\n \t  goto maybe_reduce;\n \tcase ERROR:\n \t  goto syntax_error;\n@@ -974,8 +979,7 @@ _cpp_parse_expr (pfile)\n \t\t}\n \t      break;\n \t    case ')':\n-\t      if ((top[1].flags & HAVE_VALUE)\n-\t\t  || ! (top[0].flags & HAVE_VALUE)\n+\t      if (! (top[0].flags & HAVE_VALUE)\n \t\t  || top[0].op != '('\n \t\t  || (top[-1].flags & HAVE_VALUE))\n \t\t{\n@@ -1002,6 +1006,8 @@ _cpp_parse_expr (pfile)\n \t{\n \t  if (top != stack)\n \t    cpp_ice (pfile, \"unbalanced stack in #if expression\");\n+\t  if (!(top->flags & HAVE_VALUE))\n+\t    cpp_error (pfile, \"#if with no expression\");\n \t  result = (top->value != 0);\n \t  goto done;\n \t}"}]}