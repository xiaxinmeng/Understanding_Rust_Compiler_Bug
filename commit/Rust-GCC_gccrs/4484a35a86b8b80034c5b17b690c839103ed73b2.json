{"sha": "4484a35a86b8b80034c5b17b690c839103ed73b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4NGEzNWE4NmI4YjgwMDM0YzViMTdiNjkwYzgzOTEwM2VkNzNiMg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-18T19:35:40Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-18T19:35:40Z"}, "message": "tree-ssa.h: Don't include gimple-low.h...\n\n\n\t* tree-ssa.h: Don't include gimple-low.h, tree-ssa-address.h, sbitmap.h,\n\ttree-ssa-threadedge.h, tree-ssa-dom.h, and tree-cfgcleanup.h.\n\t* gimple-low.c (gimple_check_call_arg,\n\tgimple_check_call_matching_types): Move to cgraph.c.\n\t* gimple-low.h: Remove prototype.\n\t* cgraph.c: (gimple_check_call_arg, gimple_check_call_matching_types):\n\tRelocate from gimple-low.c.\n\t* cgraph.h: Add prototype.  Don't include basic-block.h.\n\t* gimplify.c: Add gimple-low to include list.\n\t* omp-low.c: Add gimple-low and tree-cfgcleanup.h to include list.\n\t* tree-eh.c: Add gimple-low to include list.\n\t* tree-nested.c: Likewise.\n\t* cfgexpand.c: Add tree-ssa-address.h to include list.\n\t* expr.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-ssa-strength-reduction.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-mudflap.c: Likewise.\n\t* tree-ssa-loop-ivopts.c: Likewise.\n\t* tree-ssa-dom.c: Include tree-ssa-threadedge.h and tree-ssa-dom.h.\n\t(degenerate_phi_result): Move to tree-phinodes.c.\n\t* tree-ssa-loop-ch.c: Include tree-ssa-threadedge.h.\n\t* tree-ssa-threadedge.c: Likewise.\n\t* tree-vrp.c: Likewise.\n\t* tree-phinodes.c (degenerate_phi_result): Relocate here.\n\t* tree-ssa-dom.h (degenerate_phi_result): Remove Prototype.\n\t* tree-phinodes.h (degenerate_phi_result): Add prototype.\n\t* tree-ssa-copy.c: Include tree-ssa-dom.h.\n\t* tree-ssa-forwprop.c: Likewise.\n\t* tree-cfgcleanup.c (execute_cleanup_cfg_post_optimizing,\n\tpass_data_cleanup_cfg_post_optimizing,\n\tmake_pass_cleanup_cfg_post_optimizing): Relocate from tree-optimize.c.\n\t* tree-optimize.c: Delete File.\n\t* graphite.c: Include tree-cfgcleanup.h.\n\t* passes.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-profile.c: Likewise.\n\t* tree-ssa-dse.c: Likewise.\n\t* tree-ssa-loop-ivcanon.c: Likewise.\n\t* tree-switch-conversion.c: Don't include tree-ssa-operands.h.\n\t* tree-outof-ssa.c: Include sbitmap.h.\n\t* tree-ssa-live.c: Likewise.\n\t* tree-ssa-propagate.c: Likewise.\n\t* tree-ssa-structalias.c: Likewise.\n\t* tree-stdarg.c: Likewise.\n\t* Makefile.in (OBJS): Delete tree-optimize.o.\n\t* basic-block.h (gcov_type, gcov_type_unsigned): Move to coretypes.h.\n\t* coretypes.h (gcov_type, gcov_type_unsigned): Relocate here.\n\t* varasm.c: Include basic-block.h.\n\t* cfgloop.h: Include function.h instead of basic-block.h\n\t(bb_loop_depth): Move to cfgloop.c.\n\t* cfgloop.c (bb_loop_depth): Relocate from cfgloop.h.\n\nFrom-SVN: r203833", "tree": {"sha": "dae3f2a566777542e71127cd497bac3fc05fbf29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae3f2a566777542e71127cd497bac3fc05fbf29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4484a35a86b8b80034c5b17b690c839103ed73b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4484a35a86b8b80034c5b17b690c839103ed73b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4484a35a86b8b80034c5b17b690c839103ed73b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4484a35a86b8b80034c5b17b690c839103ed73b2/comments", "author": null, "committer": null, "parents": [{"sha": "bfaa17c183b35b1a21537b9cd7880dcba2be8540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfaa17c183b35b1a21537b9cd7880dcba2be8540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfaa17c183b35b1a21537b9cd7880dcba2be8540"}], "stats": {"total": 608, "additions": 320, "deletions": 288}, "files": [{"sha": "93a357a7481e55e821655073b6bec7fd56d4dc08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -1,3 +1,58 @@\n+2013-10-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa.h: Don't include gimple-low.h, tree-ssa-address.h, sbitmap.h,\n+\ttree-ssa-threadedge.h, tree-ssa-dom.h, and tree-cfgcleanup.h.\n+\t* gimple-low.c (gimple_check_call_arg,\n+\tgimple_check_call_matching_types): Move to cgraph.c.\n+\t* gimple-low.h: Remove prototype.\n+\t* cgraph.c: (gimple_check_call_arg, gimple_check_call_matching_types):\n+\tRelocate from gimple-low.c.\n+\t* cgraph.h: Add prototype.  Don't include basic-block.h.\n+\t* gimplify.c: Add gimple-low to include list.\n+\t* omp-low.c: Add gimple-low and tree-cfgcleanup.h to include list.\n+\t* tree-eh.c: Add gimple-low to include list.\n+\t* tree-nested.c: Likewise.\n+\t* cfgexpand.c: Add tree-ssa-address.h to include list.\n+\t* expr.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-ssa-strength-reduction.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-mudflap.c: Likewise.\n+\t* tree-ssa-loop-ivopts.c: Likewise.\n+\t* tree-ssa-dom.c: Include tree-ssa-threadedge.h and tree-ssa-dom.h.\n+\t(degenerate_phi_result): Move to tree-phinodes.c.\n+\t* tree-ssa-loop-ch.c: Include tree-ssa-threadedge.h.\n+\t* tree-ssa-threadedge.c: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\t* tree-phinodes.c (degenerate_phi_result): Relocate here.\n+\t* tree-ssa-dom.h (degenerate_phi_result): Remove Prototype.\n+\t* tree-phinodes.h (degenerate_phi_result): Add prototype.\n+\t* tree-ssa-copy.c: Include tree-ssa-dom.h.\n+\t* tree-ssa-forwprop.c: Likewise.\n+\t* tree-cfgcleanup.c (execute_cleanup_cfg_post_optimizing,\n+\tpass_data_cleanup_cfg_post_optimizing,\n+\tmake_pass_cleanup_cfg_post_optimizing): Relocate from tree-optimize.c.\n+\t* tree-optimize.c: Delete File.\n+\t* graphite.c: Include tree-cfgcleanup.h.\n+\t* passes.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-profile.c: Likewise.\n+\t* tree-ssa-dse.c: Likewise.\n+\t* tree-ssa-loop-ivcanon.c: Likewise.\n+\t* tree-switch-conversion.c: Don't include tree-ssa-operands.h.\n+\t* tree-outof-ssa.c: Include sbitmap.h.\n+\t* tree-ssa-live.c: Likewise.\n+\t* tree-ssa-propagate.c: Likewise.\n+\t* tree-ssa-structalias.c: Likewise.\n+\t* tree-stdarg.c: Likewise.\n+\t* Makefile.in (OBJS): Delete tree-optimize.o.\n+\t* basic-block.h (gcov_type, gcov_type_unsigned): Move to coretypes.h.\n+\t* coretypes.h (gcov_type, gcov_type_unsigned): Relocate here.\n+\t* varasm.c: Include basic-block.h.\n+\t* cfgloop.h: Include function.h instead of basic-block.h\n+\t(bb_loop_depth): Move to cfgloop.c.\n+\t* cfgloop.c (bb_loop_depth): Relocate from cfgloop.h.\n+\n 2013-10-18  Teresa Johnson  <tejohnson@google.com>\n \n \t* predict.c (probably_never_executed): Compare frequency-based"}, {"sha": "f0b8c5a23f278dcf66cff0e515c89d683e8abeb9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -1391,7 +1391,6 @@ OBJS = \\\n \ttree-nomudflap.o \\\n \ttree-nrv.o \\\n \ttree-object-size.o \\\n-\ttree-optimize.o \\\n \ttree-outof-ssa.o \\\n \ttree-parloops.o \\\n \ttree-phinodes.o \\"}, {"sha": "f0820b297d0333740320d46b3e2d43ddc37503a7", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -24,13 +24,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"function.h\"\n \n-/* Type we use to hold basic block counters.  Should be at least\n+/* Use gcov_type to hold basic block counters.  Should be at least\n    64bit.  Although a counter cannot be negative, we use a signed\n    type, because erroneous negative counts can be generated when the\n    flow graph is manipulated by various optimizations.  A signed type\n    makes those easy to detect.  */\n-typedef HOST_WIDEST_INT gcov_type;\n-typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n \n /* Control flow edge information.  */\n struct GTY((user)) edge_def {"}, {"sha": "5a78bb68b35a75ef7c2adaf9247471a903432167", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\" /* For reg_renumber.  */\n #include \"insn-attr.h\" /* For INSN_SCHEDULING.  */\n #include \"asan.h\"\n+#include \"tree-ssa-address.h\"\n \n /* This variable holds information helping the rewriting of SSA trees\n    into RTL.  */"}, {"sha": "3babf777fae70da367a196f758db124ebf9ff6c8", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -1912,4 +1912,10 @@ get_max_loop_iterations_int (struct loop *loop)\n   return hwi_nit < 0 ? -1 : hwi_nit;\n }\n \n+/* Returns the loop depth of the loop BB belongs to.  */\n \n+int\n+bb_loop_depth (const_basic_block bb)\n+{\n+  return bb->loop_father ? loop_depth (bb->loop_father) : 0;\n+}"}, {"sha": "87086d49022b1bcb93b54ee20245a58b571c921d", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -20,11 +20,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_CFGLOOP_H\n #define GCC_CFGLOOP_H\n \n-#include \"basic-block.h\"\n #include \"double-int.h\"\n-\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n+#include \"function.h\"\n \n /* Structure to hold decision about unrolling/peeling.  */\n enum lpt_dec\n@@ -455,14 +454,6 @@ loop_depth (const struct loop *loop)\n   return vec_safe_length (loop->superloops);\n }\n \n-/* Returns the loop depth of the loop BB belongs to.  */\n-\n-static inline int\n-bb_loop_depth (const_basic_block bb)\n-{\n-  return bb->loop_father ? loop_depth (bb->loop_father) : 0;\n-}\n-\n /* Returns the immediate superloop of LOOP, or NULL if LOOP is the outermost\n    loop.  */\n \n@@ -744,6 +735,7 @@ extern HOST_WIDE_INT get_estimated_loop_iterations_int (struct loop *);\n extern HOST_WIDE_INT get_max_loop_iterations_int (struct loop *);\n extern bool get_estimated_loop_iterations (struct loop *loop, double_int *nit);\n extern bool get_max_loop_iterations (struct loop *loop, double_int *nit);\n+extern int bb_loop_depth (const_basic_block);\n \n /* Converts VAL to double_int.  */\n "}, {"sha": "6ebd0c71e02628828e1b42d31efa3ed79cce0814", "filename": "gcc/cgraph.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -2998,4 +2998,99 @@ cgraph_get_body (struct cgraph_node *node)\n   return true;\n }\n \n+/* Verify if the type of the argument matches that of the function\n+   declaration.  If we cannot verify this or there is a mismatch,\n+   return false.  */\n+\n+static bool\n+gimple_check_call_args (gimple stmt, tree fndecl, bool args_count_match)\n+{\n+  tree parms, p;\n+  unsigned int i, nargs;\n+\n+  /* Calls to internal functions always match their signature.  */\n+  if (gimple_call_internal_p (stmt))\n+    return true;\n+\n+  nargs = gimple_call_num_args (stmt);\n+\n+  /* Get argument types for verification.  */\n+  if (fndecl)\n+    parms = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+  else\n+    parms = TYPE_ARG_TYPES (gimple_call_fntype (stmt));\n+\n+  /* Verify if the type of the argument matches that of the function\n+     declaration.  If we cannot verify this or there is a mismatch,\n+     return false.  */\n+  if (fndecl && DECL_ARGUMENTS (fndecl))\n+    {\n+      for (i = 0, p = DECL_ARGUMENTS (fndecl);\n+\t   i < nargs;\n+\t   i++, p = DECL_CHAIN (p))\n+\t{\n+\t  tree arg;\n+\t  /* We cannot distinguish a varargs function from the case\n+\t     of excess parameters, still deferring the inlining decision\n+\t     to the callee is possible.  */\n+\t  if (!p)\n+\t    break;\n+\t  arg = gimple_call_arg (stmt, i);\n+\t  if (p == error_mark_node\n+\t      || arg == error_mark_node\n+\t      || (!types_compatible_p (DECL_ARG_TYPE (p), TREE_TYPE (arg))\n+\t\t  && !fold_convertible_p (DECL_ARG_TYPE (p), arg)))\n+            return false;\n+\t}\n+      if (args_count_match && p)\n+\treturn false;\n+    }\n+  else if (parms)\n+    {\n+      for (i = 0, p = parms; i < nargs; i++, p = TREE_CHAIN (p))\n+\t{\n+\t  tree arg;\n+\t  /* If this is a varargs function defer inlining decision\n+\t     to callee.  */\n+\t  if (!p)\n+\t    break;\n+\t  arg = gimple_call_arg (stmt, i);\n+\t  if (TREE_VALUE (p) == error_mark_node\n+\t      || arg == error_mark_node\n+\t      || TREE_CODE (TREE_VALUE (p)) == VOID_TYPE\n+\t      || (!types_compatible_p (TREE_VALUE (p), TREE_TYPE (arg))\n+\t\t  && !fold_convertible_p (TREE_VALUE (p), arg)))\n+            return false;\n+\t}\n+    }\n+  else\n+    {\n+      if (nargs != 0)\n+        return false;\n+    }\n+  return true;\n+}\n+\n+/* Verify if the type of the argument and lhs of CALL_STMT matches\n+   that of the function declaration CALLEE. If ARGS_COUNT_MATCH is\n+   true, the arg count needs to be the same.\n+   If we cannot verify this or there is a mismatch, return false.  */\n+\n+bool\n+gimple_check_call_matching_types (gimple call_stmt, tree callee,\n+\t\t\t\t  bool args_count_match)\n+{\n+  tree lhs;\n+\n+  if ((DECL_RESULT (callee)\n+       && !DECL_BY_REFERENCE (DECL_RESULT (callee))\n+       && (lhs = gimple_call_lhs (call_stmt)) != NULL_TREE\n+       && !useless_type_conversion_p (TREE_TYPE (DECL_RESULT (callee)),\n+                                      TREE_TYPE (lhs))\n+       && !fold_convertible_p (TREE_TYPE (DECL_RESULT (callee)), lhs))\n+      || !gimple_check_call_args (call_stmt, callee, args_count_match))\n+    return false;\n+  return true;\n+}\n+\n #include \"gt-cgraph.h\""}, {"sha": "69adf4d19161abe737e8e18e10ab0d87cf6e5970", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin-api.h\"\n #include \"vec.h\"\n #include \"tree.h\"\n-#include \"basic-block.h\"\n #include \"function.h\"\n #include \"ipa-ref.h\"\n \n@@ -742,6 +741,7 @@ void cgraph_speculative_call_info (struct cgraph_edge *,\n \t\t\t\t   struct cgraph_edge *&,\n \t\t\t\t   struct cgraph_edge *&,\n \t\t\t\t   struct ipa_ref *&);\n+extern bool gimple_check_call_matching_types (gimple, tree, bool);\n \n /* In cgraphunit.c  */\n struct asm_node *add_asm_node (tree);"}, {"sha": "f7ef8d777c1f86e23ddbbec7cd6390c48c9aef24", "filename": "gcc/coretypes.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -43,6 +43,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifndef USED_FOR_TARGET\n \n+typedef HOST_WIDEST_INT gcov_type;\n+typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n+\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;"}, {"sha": "76ee9e0ab7f0bec803ca85710a8c4410ba036312", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-outof-ssa.h\"\n #include \"target-globals.h\"\n #include \"params.h\"\n+#include \"tree-ssa-address.h\"\n \n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first."}, {"sha": "d1349588fbdf82fdea42d309a60d59f9d11d92d7", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"ipa-utils.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"tree-ssa-address.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from."}, {"sha": "cf61204c411a74a1717868b08b9adb18c239048b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 97, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n+#include \"gimple-low.h\"\n \n /* The differences between High GIMPLE and Low GIMPLE are the\n    following:\n@@ -215,103 +216,6 @@ make_pass_lower_cf (gcc::context *ctxt)\n   return new pass_lower_cf (ctxt);\n }\n \n-\n-\n-/* Verify if the type of the argument matches that of the function\n-   declaration.  If we cannot verify this or there is a mismatch,\n-   return false.  */\n-\n-static bool\n-gimple_check_call_args (gimple stmt, tree fndecl, bool args_count_match)\n-{\n-  tree parms, p;\n-  unsigned int i, nargs;\n-\n-  /* Calls to internal functions always match their signature.  */\n-  if (gimple_call_internal_p (stmt))\n-    return true;\n-\n-  nargs = gimple_call_num_args (stmt);\n-\n-  /* Get argument types for verification.  */\n-  if (fndecl)\n-    parms = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-  else\n-    parms = TYPE_ARG_TYPES (gimple_call_fntype (stmt));\n-\n-  /* Verify if the type of the argument matches that of the function\n-     declaration.  If we cannot verify this or there is a mismatch,\n-     return false.  */\n-  if (fndecl && DECL_ARGUMENTS (fndecl))\n-    {\n-      for (i = 0, p = DECL_ARGUMENTS (fndecl);\n-\t   i < nargs;\n-\t   i++, p = DECL_CHAIN (p))\n-\t{\n-\t  tree arg;\n-\t  /* We cannot distinguish a varargs function from the case\n-\t     of excess parameters, still deferring the inlining decision\n-\t     to the callee is possible.  */\n-\t  if (!p)\n-\t    break;\n-\t  arg = gimple_call_arg (stmt, i);\n-\t  if (p == error_mark_node\n-\t      || arg == error_mark_node\n-\t      || (!types_compatible_p (DECL_ARG_TYPE (p), TREE_TYPE (arg))\n-\t\t  && !fold_convertible_p (DECL_ARG_TYPE (p), arg)))\n-            return false;\n-\t}\n-      if (args_count_match && p)\n-\treturn false;\n-    }\n-  else if (parms)\n-    {\n-      for (i = 0, p = parms; i < nargs; i++, p = TREE_CHAIN (p))\n-\t{\n-\t  tree arg;\n-\t  /* If this is a varargs function defer inlining decision\n-\t     to callee.  */\n-\t  if (!p)\n-\t    break;\n-\t  arg = gimple_call_arg (stmt, i);\n-\t  if (TREE_VALUE (p) == error_mark_node\n-\t      || arg == error_mark_node\n-\t      || TREE_CODE (TREE_VALUE (p)) == VOID_TYPE\n-\t      || (!types_compatible_p (TREE_VALUE (p), TREE_TYPE (arg))\n-\t\t  && !fold_convertible_p (TREE_VALUE (p), arg)))\n-            return false;\n-\t}\n-    }\n-  else\n-    {\n-      if (nargs != 0)\n-        return false;\n-    }\n-  return true;\n-}\n-\n-/* Verify if the type of the argument and lhs of CALL_STMT matches\n-   that of the function declaration CALLEE. If ARGS_COUNT_MATCH is\n-   true, the arg count needs to be the same.\n-   If we cannot verify this or there is a mismatch, return false.  */\n-\n-bool\n-gimple_check_call_matching_types (gimple call_stmt, tree callee,\n-\t\t\t\t  bool args_count_match)\n-{\n-  tree lhs;\n-\n-  if ((DECL_RESULT (callee)\n-       && !DECL_BY_REFERENCE (DECL_RESULT (callee))\n-       && (lhs = gimple_call_lhs (call_stmt)) != NULL_TREE\n-       && !useless_type_conversion_p (TREE_TYPE (DECL_RESULT (callee)),\n-                                      TREE_TYPE (lhs))\n-       && !fold_convertible_p (TREE_TYPE (DECL_RESULT (callee)), lhs))\n-      || !gimple_check_call_args (call_stmt, callee, args_count_match))\n-    return false;\n-  return true;\n-}\n-\n /* Lower sequence SEQ.  Unlike gimplification the statements are not relowered\n    when they are changed -- if this has to be done, the lowering routine must\n    do it explicitly.  DATA is passed through the recursion.  */"}, {"sha": "7e8ff6c74d8bf414736f6e1ad33ab218eaa5085a", "filename": "gcc/gimple-low.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GIMPLE_LOW_H\n #define GCC_GIMPLE_LOW_H\n \n-extern bool gimple_check_call_matching_types (gimple, tree, bool);\n extern bool gimple_stmt_may_fallthru (gimple);\n extern bool gimple_seq_may_fallthru (gimple_seq);\n extern void record_vars_into (tree, tree);"}, {"sha": "2b5e69f772515b8b1260eeb4c39ba9f368af5634", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expmed.h\"\n #include \"params.h\"\n #include \"hash-table.h\"\n+#include \"tree-ssa-address.h\"\n \f\n /* Information about a strength reduction candidate.  Each statement\n    in the candidate table represents an expression of one of the"}, {"sha": "193e0170178e8c1e6c4d411b028fe4d6dfe5e6b9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"vec.h\"\n #include \"omp-low.h\"\n+#include \"gimple-low.h\"\n \n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"tree-pass.h\"\t\t/* FIXME: only for PROP_gimple_any */"}, {"sha": "b26c520abcbfa7fff0327587d8ca148113feeba3", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tree-parloops.h\"\n #include \"tree-pass.h\"\n+#include \"tree-cfgcleanup.h\"\n \n #ifdef HAVE_cloog\n "}, {"sha": "3326e9ecf0cf6f9df05f5e92c77a08746cefc2f4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -44,6 +44,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"target.h\"\n #include \"omp-low.h\"\n+#include \"gimple-low.h\"\n+#include \"tree-cfgcleanup.h\"\n \n \n /* Lowering of OpenMP parallel and workshare constructs proceeds in two"}, {"sha": "95fc66694408823324d6d15fe1caf6a1f5d85d14", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"pass_manager.h\"\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n+#include \"tree-cfgcleanup.h\"\n \n using namespace gcc;\n "}, {"sha": "037cbcef7436a26189bad1ee021dbbecd140c509", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -35,6 +35,7 @@\n #include \"langhooks.h\"\n #include \"gimple-pretty-print.h\"\n #include \"cfgloop.h\"\n+#include \"tree-ssa-address.h\"\n \n \n #define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 2000 - 1)"}, {"sha": "3a1319132d56174e69c04de45cf293bb7335ced0", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-ssa-live.h\"\n #include \"omp-low.h\"\n+#include \"tree-cfgcleanup.h\"\n \n /* This file contains functions for building the Control Flow Graph (CFG)\n    for a function tree.  */"}, {"sha": "830cdf36b6b91a67ce20c9987b62e77c4b9a6d52", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -1027,3 +1027,90 @@ make_pass_merge_phi (gcc::context *ctxt)\n {\n   return new pass_merge_phi (ctxt);\n }\n+\n+/* Pass: cleanup the CFG just before expanding trees to RTL.\n+   This is just a round of label cleanups and case node grouping\n+   because after the tree optimizers have run such cleanups may\n+   be necessary.  */\n+\n+static unsigned int\n+execute_cleanup_cfg_post_optimizing (void)\n+{\n+  unsigned int todo = 0;\n+  if (cleanup_tree_cfg ())\n+    todo |= TODO_update_ssa;\n+  maybe_remove_unreachable_handlers ();\n+  cleanup_dead_labels ();\n+  group_case_labels ();\n+  if ((flag_compare_debug_opt || flag_compare_debug)\n+      && flag_dump_final_insns)\n+    {\n+      FILE *final_output = fopen (flag_dump_final_insns, \"a\");\n+\n+      if (!final_output)\n+\t{\n+\t  error (\"could not open final insn dump file %qs: %m\",\n+\t\t flag_dump_final_insns);\n+\t  flag_dump_final_insns = NULL;\n+\t}\n+      else\n+\t{\n+\t  int save_unnumbered = flag_dump_unnumbered;\n+\t  int save_noaddr = flag_dump_noaddr;\n+\n+\t  flag_dump_noaddr = flag_dump_unnumbered = 1;\n+\t  fprintf (final_output, \"\\n\");\n+\t  dump_enumerated_decls (final_output, dump_flags | TDF_NOUID);\n+\t  flag_dump_noaddr = save_noaddr;\n+\t  flag_dump_unnumbered = save_unnumbered;\n+\t  if (fclose (final_output))\n+\t    {\n+\t      error (\"could not close final insn dump file %qs: %m\",\n+\t\t     flag_dump_final_insns);\n+\t      flag_dump_final_insns = NULL;\n+\t    }\n+\t}\n+    }\n+  return todo;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_cleanup_cfg_post_optimizing =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"optimized\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  false, /* has_gate */\n+  true, /* has_execute */\n+  TV_TREE_CLEANUP_CFG, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_remove_unused_locals, /* todo_flags_finish */\n+};\n+\n+class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass\n+{\n+public:\n+  pass_cleanup_cfg_post_optimizing (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_cleanup_cfg_post_optimizing, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  unsigned int execute () {\n+    return execute_cleanup_cfg_post_optimizing ();\n+  }\n+\n+}; // class pass_cleanup_cfg_post_optimizing\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_cleanup_cfg_post_optimizing (gcc::context *ctxt)\n+{\n+  return new pass_cleanup_cfg_post_optimizing (ctxt);\n+}\n+\n+"}, {"sha": "9c7817d42e254c19817fc47bb0528d71fe65386a", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"target.h\"\n #include \"cfgloop.h\"\n+#include \"gimple-low.h\"\n \n /* In some instances a tree and a gimple need to be stored in a same table,\n    i.e. in hash tables. This is a structure to do this. */"}, {"sha": "4c0d71d757bd52eee9c935df558dae6ef2ff2203", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"cgraph.h\"\n #include \"gimple.h\"\n+#include \"tree-ssa-address.h\"\n \n extern void add_bb_to_loop (basic_block, struct loop *);\n "}, {"sha": "b0922f6aabdd9e9681b34fd28c1ea618601c8d68", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -33,6 +33,7 @@\n #include \"expr.h\"\t/* FIXME: For STACK_SAVEAREA_MODE and SAVE_NONLOCAL.  */\n #include \"langhooks.h\"\n #include \"pointer-set.h\"\n+#include \"gimple-low.h\"\n \n \n /* The object of this pass is to lower the representation of a set of nested"}, {"sha": "d823dbed412d98188321cd1ffb8327b5da71c2f0", "filename": "gcc/tree-optimize.c", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=bfaa17c183b35b1a21537b9cd7880dcba2be8540", "patch": "@@ -1,130 +0,0 @@\n-/* Top-level control of tree optimizations.\n-   Copyright (C) 2001-2013 Free Software Foundation, Inc.\n-   Contributed by Diego Novillo <dnovillo@redhat.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"tree.h\"\n-#include \"tm_p.h\"\n-#include \"basic-block.h\"\n-#include \"flags.h\"\n-#include \"tree-ssa.h\"\n-#include \"function.h\"\n-#include \"langhooks.h\"\n-#include \"diagnostic-core.h\"\n-#include \"toplev.h\"\n-#include \"flags.h\"\n-#include \"cgraph.h\"\n-#include \"tree-inline.h\"\n-#include \"tree-pass.h\"\n-#include \"ggc.h\"\n-#include \"cgraph.h\"\n-#include \"cfgloop.h\"\n-#include \"except.h\"\n-#include \"plugin.h\"\n-\n-\n-/* Pass: cleanup the CFG just before expanding trees to RTL.\n-   This is just a round of label cleanups and case node grouping\n-   because after the tree optimizers have run such cleanups may\n-   be necessary.  */\n-\n-static unsigned int\n-execute_cleanup_cfg_post_optimizing (void)\n-{\n-  unsigned int todo = 0;\n-  if (cleanup_tree_cfg ())\n-    todo |= TODO_update_ssa;\n-  maybe_remove_unreachable_handlers ();\n-  cleanup_dead_labels ();\n-  group_case_labels ();\n-  if ((flag_compare_debug_opt || flag_compare_debug)\n-      && flag_dump_final_insns)\n-    {\n-      FILE *final_output = fopen (flag_dump_final_insns, \"a\");\n-\n-      if (!final_output)\n-\t{\n-\t  error (\"could not open final insn dump file %qs: %m\",\n-\t\t flag_dump_final_insns);\n-\t  flag_dump_final_insns = NULL;\n-\t}\n-      else\n-\t{\n-\t  int save_unnumbered = flag_dump_unnumbered;\n-\t  int save_noaddr = flag_dump_noaddr;\n-\n-\t  flag_dump_noaddr = flag_dump_unnumbered = 1;\n-\t  fprintf (final_output, \"\\n\");\n-\t  dump_enumerated_decls (final_output, dump_flags | TDF_NOUID);\n-\t  flag_dump_noaddr = save_noaddr;\n-\t  flag_dump_unnumbered = save_unnumbered;\n-\t  if (fclose (final_output))\n-\t    {\n-\t      error (\"could not close final insn dump file %qs: %m\",\n-\t\t     flag_dump_final_insns);\n-\t      flag_dump_final_insns = NULL;\n-\t    }\n-\t}\n-    }\n-  return todo;\n-}\n-\n-namespace {\n-\n-const pass_data pass_data_cleanup_cfg_post_optimizing =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"optimized\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  false, /* has_gate */\n-  true, /* has_execute */\n-  TV_TREE_CLEANUP_CFG, /* tv_id */\n-  PROP_cfg, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  TODO_remove_unused_locals, /* todo_flags_finish */\n-};\n-\n-class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass\n-{\n-public:\n-  pass_cleanup_cfg_post_optimizing (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_cleanup_cfg_post_optimizing, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  unsigned int execute () {\n-    return execute_cleanup_cfg_post_optimizing ();\n-  }\n-\n-}; // class pass_cleanup_cfg_post_optimizing\n-\n-} // anon namespace\n-\n-gimple_opt_pass *\n-make_pass_cleanup_cfg_post_optimizing (gcc::context *ctxt)\n-{\n-  return new pass_cleanup_cfg_post_optimizing (ctxt);\n-}\n-\n-"}, {"sha": "f732e09d6fe76cbd99a727b1ae52b03d766f2d11", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n+#include \"sbitmap.h\"\n #include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"diagnostic-core.h\""}, {"sha": "f96dafa476c96639abd9adf275c218fb2f3542c5", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -464,4 +464,41 @@ remove_phi_nodes (basic_block bb)\n   set_phi_nodes (bb, NULL);\n }\n \n+/* Given PHI, return its RHS if the PHI is a degenerate, otherwise return\n+   NULL.  */\n+\n+tree\n+degenerate_phi_result (gimple phi)\n+{\n+  tree lhs = gimple_phi_result (phi);\n+  tree val = NULL;\n+  size_t i;\n+\n+  /* Ignoring arguments which are the same as LHS, if all the remaining\n+     arguments are the same, then the PHI is a degenerate and has the\n+     value of that common argument.  */\n+  for (i = 0; i < gimple_phi_num_args (phi); i++)\n+    {\n+      tree arg = gimple_phi_arg_def (phi, i);\n+\n+      if (arg == lhs)\n+\tcontinue;\n+      else if (!arg)\n+\tbreak;\n+      else if (!val)\n+\tval = arg;\n+      else if (arg == val)\n+\tcontinue;\n+      /* We bring in some of operand_equal_p not only to speed things\n+\t up, but also to avoid crashing when dereferencing the type of\n+\t a released SSA name.  */\n+      else if (TREE_CODE (val) != TREE_CODE (arg)\n+\t       || TREE_CODE (val) == SSA_NAME\n+\t       || !operand_equal_p (arg, val, 0))\n+\tbreak;\n+    }\n+  return (i == gimple_phi_num_args (phi) ? val : NULL);\n+}\n+\n+\n #include \"gt-tree-phinodes.h\""}, {"sha": "ae6222b336edd640f785df087090aa5fb3a16e41", "filename": "gcc/tree-phinodes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-phinodes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-phinodes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -29,7 +29,7 @@ extern void add_phi_arg (gimple, tree, edge, source_location);\n extern void remove_phi_args (edge);\n extern void remove_phi_node (gimple_stmt_iterator *, bool);\n extern void remove_phi_nodes (basic_block);\n-/* Return a use_operand_p pointer for argument I of PHI node GS.  */\n+extern tree degenerate_phi_result (gimple);\n \n /* Set PHI nodes of a basic block BB to SEQ.  */\n "}, {"sha": "d5713ac65213e03ab93f394fef09212e56dc2923", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"profile.h\"\n #include \"target.h\"\n+#include \"tree-cfgcleanup.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;"}, {"sha": "4ec941bcbf0bbd7e1c1d1232a8dad3e4ff31ffb4", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"tree-ssa-dom.h\"\n \n /* This file implements the copy propagation pass and provides a\n    handful of interfaces for performing const/copy propagation and"}, {"sha": "4ce29aed54e37c08fb064eab76939e5dcb55acd1", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-threadupdate.h\"\n #include \"langhooks.h\"\n #include \"params.h\"\n+#include \"tree-ssa-threadedge.h\"\n+#include \"tree-ssa-dom.h\"\n \n /* This file implements optimizations on the dominator tree.  */\n \n@@ -2588,42 +2590,6 @@ avail_expr_hash (const void *p)\n /* PHI-ONLY copy and constant propagation.  This pass is meant to clean\n    up degenerate PHIs created by or exposed by jump threading.  */\n \n-/* Given PHI, return its RHS if the PHI is a degenerate, otherwise return\n-   NULL.  */\n-\n-tree\n-degenerate_phi_result (gimple phi)\n-{\n-  tree lhs = gimple_phi_result (phi);\n-  tree val = NULL;\n-  size_t i;\n-\n-  /* Ignoring arguments which are the same as LHS, if all the remaining\n-     arguments are the same, then the PHI is a degenerate and has the\n-     value of that common argument.  */\n-  for (i = 0; i < gimple_phi_num_args (phi); i++)\n-    {\n-      tree arg = gimple_phi_arg_def (phi, i);\n-\n-      if (arg == lhs)\n-\tcontinue;\n-      else if (!arg)\n-\tbreak;\n-      else if (!val)\n-\tval = arg;\n-      else if (arg == val)\n-\tcontinue;\n-      /* We bring in some of operand_equal_p not only to speed things\n-\t up, but also to avoid crashing when dereferencing the type of\n-\t a released SSA name.  */\n-      else if (TREE_CODE (val) != TREE_CODE (arg)\n-\t       || TREE_CODE (val) == SSA_NAME\n-\t       || !operand_equal_p (arg, val, 0))\n-\tbreak;\n-    }\n-  return (i == gimple_phi_num_args (phi) ? val : NULL);\n-}\n-\n /* Given a statement STMT, which is either a PHI node or an assignment,\n    remove it from the IL.  */\n "}, {"sha": "0115f9323b7d6e3197ade69ec76cc5dfbd36f1d8", "filename": "gcc/tree-ssa-dom.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -24,6 +24,5 @@ extern void dump_dominator_optimization_stats (FILE *);\n extern void debug_dominator_optimization_stats (void);\n extern int loop_depth_of_name (tree);\n extern bool simple_iv_increment_p (gimple);\n-extern tree degenerate_phi_result (gimple);\n \n #endif /* GCC_TREE_SSA_DOM_H */"}, {"sha": "f73fb3c522b9f1e23ba01f0b44fd3c3e59fdf0f2", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"flags.h\"\n #include \"langhooks.h\"\n+#include \"tree-cfgcleanup.h\"\n \n /* This file implements dead store elimination.\n "}, {"sha": "456725d3e3b01c2333687afdb916b1aca2688c8d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"optabs.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-ssa-dom.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized"}, {"sha": "94a9beead58595a2fc5058d0b9f3b000fb56bdf7", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n+#include \"sbitmap.h\"\n #include \"tree-ssa.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\""}, {"sha": "15b34bb9d0c1add72edd8a704718e1baaf0e294e", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-inline.h\"\n #include \"flags.h\"\n+#include \"tree-ssa-threadedge.h\"\n \n /* Duplicates headers of loops if they are small enough, so that the statements\n    in the loop body are always executed when the loop is entered.  This"}, {"sha": "a506706b6e8ff0d6f78f00b0c8e97a708afb56c8", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree-inline.h\"\n #include \"target.h\"\n+#include \"tree-cfgcleanup.h\"\n \n /* Specifies types of loops that may be unrolled.  */\n "}, {"sha": "798f57f6c284f2e1f6f99fcdf0b7019629ec2bf0", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -86,6 +86,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"expmed.h\"\n+#include \"tree-ssa-address.h\"\n \n /* FIXME: Expressions are expanded to RTL in this pass to determine the\n    cost of different addressing modes.  This should be moved to a TBD"}, {"sha": "180ae85e091a97cf74f97d34bf2f7d007521302b", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -29,6 +29,7 @@\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"dumpfile.h\"\n+#include \"sbitmap.h\"\n #include \"tree-ssa.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\""}, {"sha": "b8cfebd3110545dbbdfdd6ec771758c0676814ac", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -25,6 +25,7 @@\n #include \"ggc.h\"\n #include \"obstack.h\"\n #include \"bitmap.h\"\n+#include \"sbitmap.h\"\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"tree.h\""}, {"sha": "f5675572ff0361e69e293f9bd651b448f78c0e12", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-threadupdate.h\"\n #include \"langhooks.h\"\n #include \"params.h\"\n+#include \"tree-ssa-threadedge.h\"\n \n /* To avoid code explosion due to jump threading, we limit the\n    number of statements we are going to copy.  This variable"}, {"sha": "c68a044221c4ceee5f4a7353fdf320696d969ff0", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -21,21 +21,15 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_SSA_H\n \n #include \"bitmap.h\"\n-#include \"sbitmap.h\"\n #include \"gimple.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n-#include \"tree-cfgcleanup.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\"\n #include \"tree-ssanames.h\"\n-#include \"tree-ssa-dom.h\"\n-#include \"tree-ssa-threadedge.h\"\n-#include \"tree-ssa-address.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-into-ssa.h\"\n-#include \"gimple-low.h\"\n #include \"tree-dfa.h\"\n \n /* Mapping for redirected edges.  */"}, {"sha": "3314fbaf56ea7b8d9c16057dfb8a683ab353da30", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"target.h\"\n #include \"tree-ssa.h\"\n+#include \"sbitmap.h\"\n #include \"tree-pass.h\"\n #include \"tree-stdarg.h\"\n "}, {"sha": "862cb3870c8c735202c4b438fca246e0a16ef6e1", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -32,7 +32,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-ssa.h\"\n-#include \"tree-ssa-operands.h\"\n #include \"tree-pass.h\"\n #include \"gimple-pretty-print.h\"\n #include \"cfgloop.h\""}, {"sha": "0a059645c50cf1e4eda6dd9eaeafe1b35a866f58", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-threadupdate.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"tree-ssa-threadedge.h\"\n \n \n "}, {"sha": "acf8af083d4da1e42cc559cf736611c78ec951d0", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4484a35a86b8b80034c5b17b690c839103ed73b2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4484a35a86b8b80034c5b17b690c839103ed73b2", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"pointer-set.h\"\n #include \"asan.h\"\n+#include \"basic-block.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data"}]}