{"sha": "2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0N2M4YzZlYWM0MDVjZWI1OTliZjVlMzFhYzM3MTdjMjJhMDA4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-13T07:06:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-13T07:06:05Z"}, "message": "openmp: Add support for non-rectangular loops in taskloop construct\n\n2020-08-13  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimplify.c (gimplify_omp_taskloop_expr): New function.\n\t(gimplify_omp_for): Use it.  For OMP_FOR_NON_RECTANGULAR\n\tloops adjust in outer taskloop the var-outer decls.\n\t* omp-expand.c (expand_omp_taskloop_for_inner): Handle non-rectangular\n\tloops.\n\t(expand_omp_for): Don't reject non-rectangular taskloop.\n\t* omp-general.c (omp_extract_for_data): Don't assert that\n\tnon-rectangular loops have static schedule, instead treat loop->m1\n\tor loop->m2 as if loop->n1 or loop->n2 is non-constant.\n\n\t* testsuite/libgomp.c/loop-22.c (main): Add some further tests.\n\t* testsuite/libgomp.c/loop-23.c (main): Likewise.\n\t* testsuite/libgomp.c/loop-24.c: New test.", "tree": {"sha": "6b548e09bcebf00f74983be40030d2acc78db3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b548e09bcebf00f74983be40030d2acc78db3ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7123217afb33d4a2860f552ad778a819cc8dea5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123217afb33d4a2860f552ad778a819cc8dea5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7123217afb33d4a2860f552ad778a819cc8dea5e"}], "stats": {"total": 1071, "additions": 997, "deletions": 74}, "files": [{"sha": "23d0e2511f768681f6cecb9852c4e9658d1d24e7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 82, "deletions": 63, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -10996,6 +10996,37 @@ gimplify_omp_task (tree *expr_p, gimple_seq *pre_p)\n   *expr_p = NULL_TREE;\n }\n \n+/* Helper function for gimplify_omp_for.  If *TP is not a gimple constant,\n+   force it into a temporary initialized in PRE_P and add firstprivate clause\n+   to ORIG_FOR_STMT.  */\n+\n+static void\n+gimplify_omp_taskloop_expr (tree type, tree *tp, gimple_seq *pre_p,\n+\t\t\t    tree orig_for_stmt)\n+{\n+  if (*tp == NULL || is_gimple_constant (*tp))\n+    return;\n+\n+  *tp = get_initialized_tmp_var (*tp, pre_p, NULL, false);\n+  /* Reference to pointer conversion is considered useless,\n+     but is significant for firstprivate clause.  Force it\n+     here.  */\n+  if (type\n+      && TREE_CODE (type) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (*tp)) == REFERENCE_TYPE)\n+    {\n+      tree v = create_tmp_var (TYPE_MAIN_VARIANT (type));\n+      tree m = build2 (INIT_EXPR, TREE_TYPE (v), v, *tp);\n+      gimplify_and_add (m, pre_p);\n+      *tp = v;\n+    }\n+\n+  tree c = build_omp_clause (input_location, OMP_CLAUSE_FIRSTPRIVATE);\n+  OMP_CLAUSE_DECL (c) = *tp;\n+  OMP_CLAUSE_CHAIN (c) = OMP_FOR_CLAUSES (orig_for_stmt);\n+  OMP_FOR_CLAUSES (orig_for_stmt) = c;\n+}\n+\n /* Gimplify the gross structure of an OMP_FOR statement.  */\n \n static enum gimplify_status\n@@ -11298,65 +11329,34 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       for (i = 0; i < TREE_VEC_LENGTH (OMP_FOR_INIT (for_stmt)); i++)\n \t{\n \t  t = TREE_VEC_ELT (OMP_FOR_INIT (for_stmt), i);\n-\t  if (!is_gimple_constant (TREE_OPERAND (t, 1)))\n-\t    {\n+\t  gimple_seq *for_pre_p = (gimple_seq_empty_p (for_pre_body)\n+\t\t\t\t   ? pre_p : &for_pre_body);\n \t      tree type = TREE_TYPE (TREE_OPERAND (t, 0));\n-\t      TREE_OPERAND (t, 1)\n-\t\t= get_initialized_tmp_var (TREE_OPERAND (t, 1),\n-\t\t\t\t\t   gimple_seq_empty_p (for_pre_body)\n-\t\t\t\t\t   ? pre_p : &for_pre_body, NULL,\n-\t\t\t\t\t   false);\n-\t      /* Reference to pointer conversion is considered useless,\n-\t\t but is significant for firstprivate clause.  Force it\n-\t\t here.  */\n-\t      if (TREE_CODE (type) == POINTER_TYPE\n-\t\t  && (TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 1)))\n-\t\t      == REFERENCE_TYPE))\n-\t\t{\n-\t\t  tree v = create_tmp_var (TYPE_MAIN_VARIANT (type));\n-\t\t  tree m = build2 (INIT_EXPR, TREE_TYPE (v), v,\n-\t\t\t\t   TREE_OPERAND (t, 1));\n-\t\t  gimplify_and_add (m, gimple_seq_empty_p (for_pre_body)\n-\t\t\t\t       ? pre_p : &for_pre_body);\n-\t\t  TREE_OPERAND (t, 1) = v;\n-\t\t}\n-\t      tree c = build_omp_clause (input_location,\n-\t\t\t\t\t OMP_CLAUSE_FIRSTPRIVATE);\n-\t      OMP_CLAUSE_DECL (c) = TREE_OPERAND (t, 1);\n-\t      OMP_CLAUSE_CHAIN (c) = OMP_FOR_CLAUSES (orig_for_stmt);\n-\t      OMP_FOR_CLAUSES (orig_for_stmt) = c;\n+\t  if (TREE_CODE (TREE_OPERAND (t, 1)) == TREE_VEC)\n+\t    {\n+\t      tree v = TREE_OPERAND (t, 1);\n+\t      gimplify_omp_taskloop_expr (type, &TREE_VEC_ELT (v, 1),\n+\t\t\t\t\t  for_pre_p, orig_for_stmt);\n+\t      gimplify_omp_taskloop_expr (type, &TREE_VEC_ELT (v, 2),\n+\t\t\t\t\t  for_pre_p, orig_for_stmt);\n \t    }\n+\t  else\n+\t    gimplify_omp_taskloop_expr (type, &TREE_OPERAND (t, 1), for_pre_p,\n+\t\t\t\t\torig_for_stmt);\n \n \t  /* Handle OMP_FOR_COND.  */\n \t  t = TREE_VEC_ELT (OMP_FOR_COND (for_stmt), i);\n-\t  if (!is_gimple_constant (TREE_OPERAND (t, 1)))\n+\t  if (TREE_CODE (TREE_OPERAND (t, 1)) == TREE_VEC)\n \t    {\n-\t      tree type = TREE_TYPE (TREE_OPERAND (t, 0));\n-\t      TREE_OPERAND (t, 1)\n-\t\t= get_initialized_tmp_var (TREE_OPERAND (t, 1),\n-\t\t\t\t\t   gimple_seq_empty_p (for_pre_body)\n-\t\t\t\t\t   ? pre_p : &for_pre_body, NULL,\n-\t\t\t\t\t   false);\n-\t      /* Reference to pointer conversion is considered useless,\n-\t\t but is significant for firstprivate clause.  Force it\n-\t\t here.  */\n-\t      if (TREE_CODE (type) == POINTER_TYPE\n-\t\t  && (TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 1)))\n-\t\t      == REFERENCE_TYPE))\n-\t\t{\n-\t\t  tree v = create_tmp_var (TYPE_MAIN_VARIANT (type));\n-\t\t  tree m = build2 (INIT_EXPR, TREE_TYPE (v), v,\n-\t\t\t\t   TREE_OPERAND (t, 1));\n-\t\t  gimplify_and_add (m, gimple_seq_empty_p (for_pre_body)\n-\t\t\t\t       ? pre_p : &for_pre_body);\n-\t\t  TREE_OPERAND (t, 1) = v;\n-\t\t}\n-\t      tree c = build_omp_clause (input_location,\n-\t\t\t\t\t OMP_CLAUSE_FIRSTPRIVATE);\n-\t      OMP_CLAUSE_DECL (c) = TREE_OPERAND (t, 1);\n-\t      OMP_CLAUSE_CHAIN (c) = OMP_FOR_CLAUSES (orig_for_stmt);\n-\t      OMP_FOR_CLAUSES (orig_for_stmt) = c;\n+\t      tree v = TREE_OPERAND (t, 1);\n+\t      gimplify_omp_taskloop_expr (type, &TREE_VEC_ELT (v, 1),\n+\t\t\t\t\t  for_pre_p, orig_for_stmt);\n+\t      gimplify_omp_taskloop_expr (type, &TREE_VEC_ELT (v, 2),\n+\t\t\t\t\t  for_pre_p, orig_for_stmt);\n \t    }\n+\t  else\n+\t    gimplify_omp_taskloop_expr (type, &TREE_OPERAND (t, 1), for_pre_p,\n+\t\t\t\t\torig_for_stmt);\n \n \t  /* Handle OMP_FOR_INCR.  */\n \t  t = TREE_VEC_ELT (OMP_FOR_INCR (for_stmt), i);\n@@ -11368,17 +11368,8 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      if (TREE_CODE (t) == PLUS_EXPR && *tp == decl)\n \t\ttp = &TREE_OPERAND (t, 0);\n \n-\t      if (!is_gimple_constant (*tp))\n-\t\t{\n-\t\t  gimple_seq *seq = gimple_seq_empty_p (for_pre_body)\n-\t\t\t\t    ? pre_p : &for_pre_body;\n-\t\t  *tp = get_initialized_tmp_var (*tp, seq, NULL, false);\n-\t\t  tree c = build_omp_clause (input_location,\n-\t\t\t\t\t     OMP_CLAUSE_FIRSTPRIVATE);\n-\t\t  OMP_CLAUSE_DECL (c) = *tp;\n-\t\t  OMP_CLAUSE_CHAIN (c) = OMP_FOR_CLAUSES (orig_for_stmt);\n-\t\t  OMP_FOR_CLAUSES (orig_for_stmt) = c;\n-\t\t}\n+\t      gimplify_omp_taskloop_expr (NULL_TREE, tp, for_pre_p,\n+\t\t\t\t\t  orig_for_stmt);\n \t    }\n \t}\n \n@@ -12220,6 +12211,34 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t  OMP_CLAUSE_DECL (t) = v;\n \t  OMP_CLAUSE_CHAIN (t) = gimple_omp_for_clauses (gforo);\n \t  gimple_omp_for_set_clauses (gforo, t);\n+\t  if (OMP_FOR_NON_RECTANGULAR (for_stmt))\n+\t    {\n+\t      tree *p1 = NULL, *p2 = NULL;\n+\t      t = gimple_omp_for_initial (gforo, i);\n+\t      if (TREE_CODE (t) == TREE_VEC)\n+\t\tp1 = &TREE_VEC_ELT (t, 0);\n+\t      t = gimple_omp_for_final (gforo, i);\n+\t      if (TREE_CODE (t) == TREE_VEC)\n+\t\t{\n+\t\t  if (p1)\n+\t\t    p2 = &TREE_VEC_ELT (t, 0);\n+\t\t  else\n+\t\t    p1 = &TREE_VEC_ELT (t, 0);\n+\t\t}\n+\t      if (p1)\n+\t\t{\n+\t\t  int j;\n+\t\t  for (j = 0; j < i; j++)\n+\t\t    if (*p1 == gimple_omp_for_index (gfor, j))\n+\t\t      {\n+\t\t\t*p1 = gimple_omp_for_index (gforo, j);\n+\t\t\tif (p2)\n+\t\t\t  *p2 = *p1;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  gcc_assert (j < i);\n+\t\t}\n+\t    }\n \t}\n       gimplify_seq_add_stmt (pre_p, gforo);\n     }"}, {"sha": "8f1286e3176d02670d9c1901b22baad49b1da4ec", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -6917,8 +6917,20 @@ expand_omp_taskloop_for_inner (struct omp_region *region,\n \tassign_stmt = gimple_build_assign (fd->loop.v, NOP_EXPR, e);\n       gsi_insert_after (&gsi, assign_stmt, GSI_CONTINUE_LINKING);\n     }\n+\n+  tree *nonrect_bounds = NULL;\n   if (fd->collapse > 1)\n-    expand_omp_for_init_vars (fd, &gsi, counts, NULL, inner_stmt, startvar);\n+    {\n+      if (fd->non_rect)\n+\t{\n+\t  nonrect_bounds = XALLOCAVEC (tree, fd->last_nonrect + 1);\n+\t  memset (nonrect_bounds, 0, sizeof (tree) * (fd->last_nonrect + 1));\n+\t}\n+      gcc_assert (gsi_bb (gsi) == entry_bb);\n+      expand_omp_for_init_vars (fd, &gsi, counts, nonrect_bounds, inner_stmt,\n+\t\t\t\tstartvar);\n+      entry_bb = gsi_bb (gsi);\n+    }\n \n   if (!broken_loop)\n     {\n@@ -6953,7 +6965,8 @@ expand_omp_taskloop_for_inner (struct omp_region *region,\n       gsi_remove (&gsi, true);\n \n       if (fd->collapse > 1 && !gimple_omp_for_combined_p (fd->for_stmt))\n-\tcollapse_bb = extract_omp_for_update_vars (fd, NULL, cont_bb, body_bb);\n+\tcollapse_bb = extract_omp_for_update_vars (fd, nonrect_bounds,\n+\t\t\t\t\t\t   cont_bb, body_bb);\n     }\n \n   /* Remove the GIMPLE_OMP_FOR statement.  */\n@@ -7643,9 +7656,6 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n     }\n   else if (gimple_omp_for_kind (fd.for_stmt) == GF_OMP_FOR_KIND_TASKLOOP)\n     {\n-      if (fd.non_rect)\n-\tsorry_at (gimple_location (fd.for_stmt),\n-\t\t  \"non-rectangular %<taskloop%> not supported yet\");\n       if (gimple_omp_for_combined_into_p (fd.for_stmt))\n \texpand_omp_taskloop_for_inner (region, &fd, inner_stmt);\n       else"}, {"sha": "8e2665ab3a368d4887db11aa5506f16a25ffbe5e", "filename": "gcc/omp-general.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -444,10 +444,6 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t      = build_nonstandard_integer_type\n \t\t  (TYPE_PRECISION (TREE_TYPE (loop->v)), 1);\n \t}\n-      else if (loop->m1 || loop->m2)\n-\t/* Non-rectangular loops should use static schedule and no\n-\t   ordered clause.  */\n-\tgcc_unreachable ();\n       else if (iter_type != long_long_unsigned_type_node)\n \t{\n \t  if (POINTER_TYPE_P (TREE_TYPE (loop->v)))\n@@ -463,7 +459,9 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t\t\t\t     loop->n2, loop->step);\n \t      else\n \t\tn = loop->n1;\n-\t      if (TREE_CODE (n) != INTEGER_CST\n+\t      if (loop->m1\n+\t\t  || loop->m2\n+\t\t  || TREE_CODE (n) != INTEGER_CST\n \t\t  || tree_int_cst_lt (TYPE_MAX_VALUE (iter_type), n))\n \t\titer_type = long_long_unsigned_type_node;\n \t    }\n@@ -484,7 +482,9 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t\t\t\t\tloop->n2, loop->step);\n \t\t  n2 = loop->n1;\n \t\t}\n-\t      if (TREE_CODE (n1) != INTEGER_CST\n+\t      if (loop->m1\n+\t\t  || loop->m2\n+\t\t  || TREE_CODE (n1) != INTEGER_CST\n \t\t  || TREE_CODE (n2) != INTEGER_CST\n \t\t  || !tree_int_cst_lt (TYPE_MIN_VALUE (iter_type), n1)\n \t\t  || !tree_int_cst_lt (n2, TYPE_MAX_VALUE (iter_type)))"}, {"sha": "431e43bb9fad68a8d139114dc29068be03309aaa", "filename": "libgomp/testsuite/libgomp.c/loop-22.c", "status": "modified", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-22.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -185,5 +185,240 @@ main ()\n   for (int n = l; n < 2 * l; n++)\n     if (v[0][j][0][l][0][n][0] != 7)\n       abort ();\n+\n+  {\n+  static int i, j, x;\n+  static volatile int a, b, c, d, e, f, g, h;\n+  static int w[13][27];\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = -4; b = 8; c = 1; d = 3; e = 0; f = 2; g = 0; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  for (int i = -4; i < 8; i++)\n+    for (int j = 3 * i; j > 2 * i; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      w[i + 5][j + 5] = 1;\n+  a = -2; b = 4; c = 1; d = -2; e = 3; f = 0; g = -3; h = -2;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/* i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = -2; e = 7; f = 2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = 2; e = 7; f = -2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -1; d = 2; e = 7; f = -2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -2; d = -2; e = 7; f = 2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute collapse(2) lastprivate (i, j, x)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  }\n+\n   return 0;\n }"}, {"sha": "1476db2e51ea37dc5cbbd3d377e8162bbc047f4c", "filename": "libgomp/testsuite/libgomp.c/loop-23.c", "status": "modified", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-23.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -185,5 +185,240 @@ main ()\n   for (int n = l; n < 2 * l; n++)\n     if (v[0][j][0][l][0][n][0] != 7)\n       abort ();\n+\n+  {\n+  static int i, j, x;\n+  static volatile int a, b, c, d, e, f, g, h;\n+  static int w[13][27];\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = -4; b = 8; c = 1; d = 3; e = 0; f = 2; g = 0; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  for (int i = -4; i < 8; i++)\n+    for (int j = 3 * i; j > 2 * i; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      w[i + 5][j + 5] = 1;\n+  a = -2; b = 4; c = 1; d = -2; e = 3; f = 0; g = -3; h = -2;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/* i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = -2; e = 7; f = 2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = 2; e = 7; f = -2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -1; d = 2; e = 7; f = -2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -2; d = -2; e = 7; f = 2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp teams reduction(+:niters)\n+  #pragma omp distribute parallel for collapse(2) lastprivate (i, j, x) reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  }\n+\n   return 0;\n }"}, {"sha": "24aa01e0889df3b6c8b3372e18eea57875a3cc46", "filename": "libgomp/testsuite/libgomp.c/loop-24.c", "status": "added", "additions": 424, "deletions": 0, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e47c8c6eac405ceb599bf5e31ac3717c22a008c/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Floop-24.c?ref=2e47c8c6eac405ceb599bf5e31ac3717c22a008c", "patch": "@@ -0,0 +1,424 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+signed char v[5][7][9][21][4][42][3];\n+volatile int zero = 0, one = 1, two = 2, three = 3;\n+volatile int five = 5, seven = 7, nine = 9, eleven = 11;\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < 5; i++)\n+  for (int j = 0; j < 7; j++)\n+  for (int k = 0; k < 9; k++)\n+  for (int l = 2 * j; l < 3 * j; l++)\n+  for (int m = 7; m < 11; m++)\n+  for (int n = l; n < 2 * l; n++)\n+  for (int o = 0; o < 3; o++)\n+    v[i][j][k][l][m - 7][n][o] = 1;\n+\n+  int niters = 0;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(7) in_reduction(+:niters)\n+  for (int i = 0; i < 5; i++)\n+  for (int j = 0; j < 7; j++)\n+  for (int k = 0; k < 9; k++)\n+  for (int l = 2 * j; l < 3 * j; l++)\n+  for (int m = 7; m < 11; m++)\n+  for (int n = l; n < 2 * l; n++)\n+  for (int o = 0; o < 3; o++)\n+    {\n+      niters++;\n+      if (i < 0 || i >= 5\n+\t  || j < 0 || j >= 7\n+\t  || k < 0 || k >= 9\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || m < 7 || m >= 11\n+\t  || n < l || n >= 2 * l\n+\t  || o < 0 || o >= 3)\n+\tabort ();\n+      if (v[i][j][k][l][m - 7][n][o] != 1)\n+\tabort ();\n+      v[i][j][k][l][m - 7][n][o]++;\n+    }\n+\n+  if (niters != 117180)\n+    abort ();\n+\n+  int niters2 = 0;\n+  #pragma omp parallel master reduction(task, +:niters2)\n+  #pragma omp taskloop collapse(7) in_reduction(+:niters2)\n+  for (int i = zero; i < five; i += one)\n+  for (int j = seven - one; j >= zero; j -= one)\n+  for (int k = nine - one; k >= zero; k += -one)\n+  for (int l = two * j + zero; l < three * j; l += one)\n+  for (int m = eleven - one; m >= seven; m -= one)\n+  for (int n = two * l - one; n > one * l - one; n -= one)\n+  for (int o = zero; o < three; o += one)\n+    {\n+      niters2++;\n+      if (i < 0 || i >= 5\n+\t  || j < 0 || j >= 7\n+\t  || k < 0 || k >= 9\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || m < 7 || m >= 11\n+\t  || n < l || n >= 2 * l\n+\t  || o < 0 || o >= 3)\n+\tabort ();\n+      if (v[i][j][k][l][m - 7][n][o] != 2)\n+\tabort ();\n+      v[i][j][k][l][m - 7][n][o]++;\n+    }\n+\n+  if (niters2 != 117180)\n+    abort ();\n+\n+  for (int i = 0; i < 5; i++)\n+  for (int j = 0; j < 7; j++)\n+  for (int k = 0; k < 9; k++)\n+  for (int l = 2 * j; l < 3 * j; l++)\n+  for (int m = 7; m < 11; m++)\n+  for (int n = l; n < 2 * l; n++)\n+  for (int o = 0; o < 3; o++)\n+    if (v[i][j][k][l][m - 7][n][o] != 3)\n+      abort ();\n+\n+  int niters3 = 0;\n+  #pragma omp parallel master reduction(task, +:niters3)\n+  #pragma omp taskloop collapse(5) in_reduction(+:niters3)\n+  for (int i = 4; i >= 0; i--)\n+  for (int j = 6; j >= 0; --j)\n+  for (int l = 3 * j - 1; l >= 2 * j; l--)\n+  for (int n = 2 * l + -1; n > l - 1; --n)\n+  for (int o = 2; o >= 0; o--)\n+    {\n+      niters3++;\n+      if (i < 0 || i >= 5\n+\t  || j < 0 || j >= 7\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || n < l || n >= 2 * l\n+\t  || o < 0 || o >= 3)\n+\tabort ();\n+      if (v[i][j][0][l][0][n][o] != 3)\n+\tabort ();\n+      v[i][j][0][l][0][n][o]++;\n+    }\n+\n+  if (niters3 != 3255)\n+    abort ();\n+\n+  int niters4 = 0;\n+  #pragma omp parallel master reduction(task, +:niters4)\n+  #pragma omp taskloop collapse(5) in_reduction(+:niters4)\n+  for (int i = zero; i < five; i += one)\n+  for (int j = zero; j <= seven - one; j += one)\n+  for (int l = j * two; l < three * j + zero; l += one)\n+  for (int n = one * l; n <= l * two - one; n += one)\n+  for (int o = zero; o < three; o += one)\n+    {\n+      niters4++;\n+      if (i < 0 || i >= 5\n+\t  || j < 0 || j >= 7\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || n < l || n >= 2 * l\n+\t  || o < 0 || o >= 3)\n+\tabort ();\n+      if (v[i][j][0][l][0][n][o] != 4)\n+\tabort ();\n+      v[i][j][0][l][0][n][o]++;\n+    }\n+\n+  if (niters4 != 3255)\n+    abort ();\n+\n+  for (int i = 0; i < 5; i++)\n+  for (int j = 0; j < 7; j++)\n+  for (int l = 2 * j; l < 3 * j; l++)\n+  for (int n = l; n < 2 * l; n++)\n+  for (int o = 0; o < 3; o++)\n+    if (v[i][j][0][l][0][n][o] != 5)\n+      abort ();\n+\n+  int niters5 = 0;\n+  #pragma omp parallel master reduction(task, +:niters5)\n+  #pragma omp taskloop collapse(3) in_reduction(+:niters5)\n+  for (int j = 6; j >= 0; --j)\n+  for (int l = 2 * j; l <= 3 * j - 1; l++)\n+  for (int n = 2 * l + -1; n > l - 1; --n)\n+    {\n+      niters5++;\n+      if (j < 0 || j >= 7\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || n < l || n >= 2 * l)\n+\tabort ();\n+      if (v[0][j][0][l][0][n][0] != 5)\n+\tabort ();\n+      v[0][j][0][l][0][n][0]++;\n+    }\n+\n+  if (niters5 != 217)\n+    abort ();\n+\n+  int niters6 = 0;\n+  #pragma omp parallel master reduction(task, +:niters6)\n+  #pragma omp taskloop collapse(3) in_reduction(+:niters6)\n+  for (int j = seven - one; j > - one; j -= one)\n+  for (int l = j * three - one; l >= j * two + zero; l += -one)\n+  for (int n = two * l - one; n > l - one; n -= one)\n+    {\n+      niters6++;\n+      if (j < 0 || j >= 7\n+\t  || l < 2 * j || l >= 3 * j\n+\t  || n < l || n >= 2 * l)\n+\tabort ();\n+      if (v[0][j][0][l][0][n][0] != 6)\n+\tabort ();\n+      v[0][j][0][l][0][n][0]++;\n+    }\n+\n+  if (niters6 != 217)\n+    abort ();\n+\n+  for (int j = 0; j < 7; j++)\n+  for (int l = 2 * j; l < 3 * j; l++)\n+  for (int n = l; n < 2 * l; n++)\n+    if (v[0][j][0][l][0][n][0] != 7)\n+      abort ();\n+\n+  {\n+  static int i, j, x;\n+  static volatile int a, b, c, d, e, f, g, h;\n+  static int w[13][27];\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = -4; b = 8; c = 1; d = 3; e = 0; f = 2; g = 0; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = -4; i < 8; i++)\n+    for (j = 3 * i; j > 2 * i; j--)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -4 || i >= 8 || j > 3 * i || j <= i * 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != 8 || j != 14 || x != 7183 || niters != 28)\n+    abort ();\n+  for (int i = -4; i < 8; i++)\n+    for (int j = 3 * i; j > 2 * i; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      w[i + 5][j + 5] = 1;\n+  a = -2; b = 4; c = 1; d = -2; e = 3; f = 0; g = -3; h = -2;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/* i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i < b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i < -2 || i >= 4 || j <= -3 || j > -2 * i + 3 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != 4 || j != -3 || */x != 3071 || niters != 15)\n+    abort ();\n+  for (i = -2; i < 4; i++)\n+    for (j = -2 * i + 3; j > -3; j -= 2)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = -2; e = 7; f = 2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= 2 * i + 1 || j > -2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -3 || j != -3 || x != -1026 || niters != 32)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = -2 * i + 7; j > 2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      w[i + 5][j + 5] = 1;\n+  a = 3; b = -3; c = -1; d = 2; e = 7; f = -2; g = 1; h = -1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j > g + i * f; j += h)\n+      {\n+\tif (i <= -3 || i > 3 || j <= -2 * i + 1 || j > 2 * i + 7 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -3 || j != 3 || */x != -1020 || niters != 50)\n+    abort ();\n+  for (i = 3; i > -3; i--)\n+    for (j = 2 * i + 7; j > -2 * i + 1; j--)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -1; d = 2; e = 7; f = -2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < 2 * i + 7 || j >= -2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (i != -6 || j != 12 || x != -5109 || niters != 36)\n+    abort ();\n+  for (i = 6; i > -6; i--)\n+    for (j = 2 * i + 7; j <= -2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      w[i + 5][j + 5] = 1;\n+  a = 6; b = -6; c = -2; d = -2; e = 7; f = 2; g = 2; h = 1;\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 1)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  niters = 0; i = -100; j = -100; x = -100;\n+  #pragma omp parallel master reduction(task, +:niters)\n+  #pragma omp taskloop collapse(2) lastprivate (i, j, x) in_reduction(+:niters)\n+  for (i = a; i > b; i += c)\n+    for (j = d * i + e; j < g + i * f; j += h)\n+      {\n+\tif (i <= -6 || i > 6 || j < -2 * i + 7 || j >= 2 * i + 2 || w[i + 5][j + 5] != 2)\n+\t  abort ();\n+\tw[i + 5][j + 5]++;\n+\tx = i * 1024 + (j & 1023);\n+\tniters++;\n+      }\n+  if (/*i != -6 || j != 15 || */x != 2053 || niters != 33)\n+    abort ();\n+  for (i = 6; i > -6; i -= 2)\n+    for (j = -2 * i + 7; j <= 2 * i + 1; j++)\n+      if (w[i + 5][j + 5] == 3)\n+\tw[i + 5][j + 5] = 0;\n+      else\n+\tabort ();\n+  }\n+\n+  return 0;\n+}"}]}