{"sha": "68e2914e6a4e2ba2b3fd00551552073519921bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlMjkxNGU2YTRlMmJhMmIzZmQwMDU1MTU1MjA3MzUxOTkyMWJlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-01-16T18:24:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-01-16T18:24:52Z"}, "message": "re PR c++/62134 ([C++11] ICE with template alias)\n\n2015-01-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/62134\n\t* g++.dg/cpp0x/alias-decl-46.C: New.\n\nFrom-SVN: r219766", "tree": {"sha": "14c4ae7a85b5cb0d0f7d8fcfd35bffcf207f2e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14c4ae7a85b5cb0d0f7d8fcfd35bffcf207f2e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e2914e6a4e2ba2b3fd00551552073519921bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2914e6a4e2ba2b3fd00551552073519921bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e2914e6a4e2ba2b3fd00551552073519921bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e2914e6a4e2ba2b3fd00551552073519921bee/comments", "author": null, "committer": null, "parents": [{"sha": "1005e8371773fbdce86232862694912c03ace88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1005e8371773fbdce86232862694912c03ace88e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1005e8371773fbdce86232862694912c03ace88e"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "c2e957f251fda1b6110081dce443695ea1d1f9b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2914e6a4e2ba2b3fd00551552073519921bee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2914e6a4e2ba2b3fd00551552073519921bee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68e2914e6a4e2ba2b3fd00551552073519921bee", "patch": "@@ -1,3 +1,8 @@\n+2015-01-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/62134\n+\t* g++.dg/cpp0x/alias-decl-46.C: New.\n+\n 2015-01-16  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (CHECK):"}, {"sha": "19595ea3cf2f4f873f10219ab23f5b7b8db450ce", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-46.C", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e2914e6a4e2ba2b3fd00551552073519921bee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e2914e6a4e2ba2b3fd00551552073519921bee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-46.C?ref=68e2914e6a4e2ba2b3fd00551552073519921bee", "patch": "@@ -0,0 +1,114 @@\n+// PR c++/62134\n+// { dg-do compile { target c++11 } }\n+\n+template<typename... T> struct tuple;\n+template<__SIZE_TYPE__, typename U> struct tuple_element;\n+\n+template<bool, typename T = void> struct enable_if  { };\n+template<typename T> struct enable_if<true, T> { typedef T type; };\n+\n+template <int V> struct int_t { static constexpr int value = V; };\n+template <int V> int constexpr int_t<V>::value;\n+\n+template <class A, class Val, int i=0>\n+struct Index\n+{\n+    static int const value = -1;\n+};\n+\n+template <class ... A, class Val, int i>\n+struct Index<tuple<Val, A ...>, Val, i>\n+{\n+    static int const value = i;\n+};\n+\n+template <class A0, class ... A, class Val, int i>\n+struct Index<tuple<A0, A ...>, Val, i>\n+{\n+    static int const value = Index<tuple<A ...>, Val, i+1>::value;\n+};\n+\n+template <class C, class R> struct PermutationSign;\n+\n+template <int w, class C, class R>\n+struct PermutationSignIfFound\n+{\n+    static int const value = 0;\n+};\n+\n+template <class C, class R>\n+struct PermutationSignIfFound<-1, C, R>\n+{\n+    static int const value = 0;\n+};\n+\n+template <>\n+struct PermutationSign<tuple<>, tuple<>>\n+{\n+    static int const value = 1;\n+};\n+\n+template <class C>\n+struct PermutationSign<C, tuple<>>\n+{\n+    static int const value = 0;\n+};\n+\n+template <class R>\n+struct PermutationSign<tuple<>, R>\n+{\n+    static int const value = 0;\n+};\n+\n+template <class C, class Org>\n+struct PermutationSign\n+{\n+    static int const value\n+    = PermutationSignIfFound\n+      <Index<C, typename tuple_element<0, Org>::type>::value,\n+       C, Org>::value;\n+};\n+\n+template <class A, template <class> class Pred, int i=0, class Enable=void>\n+struct IndexIf\n+{\n+    static int const value = -1;\n+    using type = tuple<>;\n+};\n+\n+template <class A0, class ... A, template <class> class Pred, int i>\n+struct IndexIf<tuple<A0, A ...>, Pred, i,\n+\t       typename enable_if<Pred<A0>::value>::type>\n+{\n+    using type = A0;\n+    static int const value = i;\n+};\n+\n+template <class A0, class ... A, template <class> class Pred, int i>\n+struct IndexIf<tuple<A0, A ...>, Pred, i,\n+\t       typename enable_if<!Pred<A0>::value>::type>\n+{\n+    using next = IndexIf<tuple<A ...>, Pred, i+1>;\n+    using type = typename next::type;\n+    static int const value = next::value;\n+};\n+\n+template <class P>\n+struct MatchPermutationP\n+{\n+    template <class A> using type = PermutationSign<P, A>;\n+};\n+\n+template <class P, class Plist> struct FindCombination\n+{\n+    using type = IndexIf<Plist, MatchPermutationP<P>::template type>;\n+    static int const where = type::value;\n+    static int const sign\n+    = (where>=0) ? PermutationSign<P, typename type::type>::value : 0;\n+};\n+\n+int main()\n+{\n+  using finder = FindCombination<tuple<>, tuple<tuple<>>>;\n+  static_assert(finder::where==0 && finder::sign==+1, \"bad\");\n+}"}]}