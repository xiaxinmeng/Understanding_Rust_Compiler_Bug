{"sha": "4e135bdd14d2035632e78008730027c4ef82aa7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxMzViZGQxNGQyMDM1NjMyZTc4MDA4NzMwMDI3YzRlZjgyYWE3YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-10T16:01:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-10T16:01:28Z"}, "message": "alpha.c (check_float_value): Use memcpy, not bcopy.\n\n\t* alpha.c (check_float_value): Use memcpy, not bcopy.\n\t* arm.c (output_move_double): Likewise.\n\t* arm.md: Likewise.\n\t* m88k.c (legitimize_operand): Likewise.\n\t* m88k.h (ORDER_REGS_FOR_LOCAL_ALLOC): Likewise.\n\t* m88k.md: Likewise.\n\t* mips.c (override_options): Likewise.\n\t* mips.md: Likewise.\n\t* romp.c (output_fpops): Likewise.\n\t* rs6000.c (rs6000_override_options): Likewise.\n\t* sh.md: Likewise.\n\t* vax.c (check_float_value): Likewise.\n\n\t* emit-rtl.c (copy_rtx_if_shared, init_emit_once): Likewise.\n\t* expmed.c (synth_mult): Likewise.\n\t* final.c (add_bb_string): Likewise.\n\t* genattr.c (main): Likewise.\n\t* genattrtab.c (attr_string, simplify_cond, copy_rtx_unchanging):\n\tLikewise.\n\t* jump.c (thread_jumps): Likewise.\n\t* prefix.c (save_string): Likewise.\n\t* real.h (REAL_VALUE_FROM_CONST_DOUBLE): Likewise.\n\t* regclass.c (init_reg_sets, init_reg_sets_1): Likewise.\n\t* reload1.c (reload, eliminate_regs): Likewise.\n\ncp:\n\t* decl.c (grokdeclarator, save_function_data): Use memcpy, not bcopy.\n\t* lex.c (copy_lang_decl): Likewise.\n\njava:\n\t* decl.c (copy_lang_decl): Use memcpy, not bcopy.\n\t* jcf-parse.c (jcf_figure_file_type): Likewise.\n\nFrom-SVN: r37367", "tree": {"sha": "68435e3b6993def5a09b074a86c8ea186b6e21e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68435e3b6993def5a09b074a86c8ea186b6e21e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e135bdd14d2035632e78008730027c4ef82aa7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e135bdd14d2035632e78008730027c4ef82aa7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e135bdd14d2035632e78008730027c4ef82aa7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e135bdd14d2035632e78008730027c4ef82aa7a/comments", "author": null, "committer": null, "parents": [{"sha": "c8abeb44a58ac3dbf2caf9329a2f5d114a5849b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abeb44a58ac3dbf2caf9329a2f5d114a5849b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8abeb44a58ac3dbf2caf9329a2f5d114a5849b9"}], "stats": {"total": 143, "additions": 85, "deletions": 58}, "files": [{"sha": "896a2dd6a62520b9832bd5a1850498473a58b1c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1,3 +1,30 @@\n+2000-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c (check_float_value): Use memcpy, not bcopy.\n+\t* arm.c (output_move_double): Likewise.\n+\t* arm.md: Likewise.\n+\t* m88k.c (legitimize_operand): Likewise.\n+\t* m88k.h (ORDER_REGS_FOR_LOCAL_ALLOC): Likewise.\n+\t* m88k.md: Likewise.\n+\t* mips.c (override_options): Likewise.\n+\t* mips.md: Likewise.\n+\t* romp.c (output_fpops): Likewise.\n+\t* rs6000.c (rs6000_override_options): Likewise.\n+\t* sh.md: Likewise.\n+\t* vax.c (check_float_value): Likewise.\n+\n+\t* emit-rtl.c (copy_rtx_if_shared, init_emit_once): Likewise.\n+\t* expmed.c (synth_mult): Likewise.\n+\t* final.c (add_bb_string): Likewise.\n+\t* genattr.c (main): Likewise.\n+\t* genattrtab.c (attr_string, simplify_cond, copy_rtx_unchanging):\n+\tLikewise.\n+\t* jump.c (thread_jumps): Likewise.\n+\t* prefix.c (save_string): Likewise.\n+\t* real.h (REAL_VALUE_FROM_CONST_DOUBLE): Likewise.\n+\t* regclass.c (init_reg_sets, init_reg_sets_1): Likewise.\n+\t* reload1.c (reload, eliminate_regs): Likewise.\n+\n 2000-11-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.texi (Service): Update to reflect current practice and"}, {"sha": "06c141f03188c103d80f0b6a9d81fc74cdd4c56d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -6068,7 +6068,7 @@ check_float_value (mode, d, overflow)\n       else\n \tfvptr = &float_values[4];\n \n-      bcopy ((char *) d, (char *) &r, sizeof (REAL_VALUE_TYPE));\n+      memcpy (&r, d, sizeof (REAL_VALUE_TYPE));\n       if (REAL_VALUES_LESS (fvptr[0], r))\n \t{\n \t  bcopy ((char *) &fvptr[0], (char *) d,"}, {"sha": "7a04dd78ca9781a6d9442c9270de187d1d274542", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -6006,8 +6006,7 @@ output_move_double (operands)\n \t      long l[2];\n \t      union real_extract u;\n \n-\t      bcopy ((char *) &CONST_DOUBLE_LOW (operands[1]), (char *) &u,\n-\t\t     sizeof (u));\n+\t      memcpy (&u, &CONST_DOUBLE_LOW (operands[1]), sizeof (u));\n \t      REAL_VALUE_TO_TARGET_DOUBLE (u.d, l);\n \t      otherops[1] = GEN_INT (l[1]);\n \t      operands[1] = GEN_INT (l[0]);"}, {"sha": "a4d7b803321a66575248172a4d5f4248ad752d31", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -8907,8 +8907,7 @@\n       case MODE_FLOAT:\n       {\n         union real_extract u;\n-        bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u,\n-\t\t\t\t\t   sizeof u);\n+        memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n         assemble_real (u.d, GET_MODE (operands[0]));\n         break;\n       }\n@@ -8932,8 +8931,7 @@\n        case MODE_FLOAT:\n         {\n           union real_extract u;\n-          bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u,\n-\t\t\t\t\t     sizeof u);\n+          memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n           assemble_real (u.d, GET_MODE (operands[0]));\n           break;\n         }"}, {"sha": "beeb8fcfeb7556dded40532cdbbd28e6a294b42d", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1153,7 +1153,7 @@ legitimize_operand (op, mode)\n \n   if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      bcopy (&CONST_DOUBLE_LOW (op), &u.r, sizeof u);\n+      memcpy (&u.r, &CONST_DOUBLE_LOW (op), sizeof u);\n       if (u.d.exponent != 0x7ff /* NaN */\n \t  && u.d.mantissa2 == 0 /* Mantissa fits */\n \t  && (u.s.exponent1 == 0x8 || u.s.exponent1 == 0x7) /* Exponent fits */"}, {"sha": "59c0f59c499b3bb200173aaf4171e64671cb040b", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -693,8 +693,8 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n   static int leaf[] = REG_LEAF_ALLOC_ORDER;\t\t\t\\\n   static int nonleaf[] = REG_ALLOC_ORDER;\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-  bcopy (regs_ever_live[1] ? nonleaf : leaf, reg_alloc_order,\t\\\n-\t FIRST_PSEUDO_REGISTER * sizeof (int));\t\t\t\\\n+  memcpy (reg_alloc_order, regs_ever_live[1] ? nonleaf : leaf,\t\\\n+\t  FIRST_PSEUDO_REGISTER * sizeof (int));\t\t\\\n }\n \f\n /*** Register Classes ***/"}, {"sha": "d8e7a738bcff3b8dcdb089f9de3518d780eb91b6", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -3054,7 +3054,7 @@\n   if (real_power_of_2_operand (operands[2], DFmode))\n     {\n       union real_extract u;\n-      bcopy (&CONST_DOUBLE_LOW (operands[2]), &u, sizeof u);\n+      memcpy (&u, &CONST_DOUBLE_LOW (operands[2]), sizeof u);\n       emit_insn (gen_muldf3 (operands[0], operands[1],\n \t\t\t     CONST_DOUBLE_FROM_REAL_VALUE (1.0/u.d, DFmode)));\n       DONE;"}, {"sha": "2f66d2a00d90145e7cc8dcbbdf71113dbf1e4700", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -5022,8 +5022,7 @@ override_options ()\n      reg_names points into via the REGISTER_NAMES macro.  */\n \n   if (TARGET_NAME_REGS)\n-    bcopy ((char *) mips_sw_reg_names, (char *) mips_reg_names,\n-\t   sizeof (mips_reg_names));\n+    memcpy (mips_reg_names, mips_sw_reg_names, sizeof (mips_reg_names));\n \n   /* When compiling for the mips16, we can not use floating point.  We\n      record the original hard float value in mips16_hard_float.  */"}, {"sha": "06d4c3842b49e75d46e24e0eecf859dc23b4ba2e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -10305,7 +10305,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n \n   if (GET_CODE (operands[0]) != CONST_DOUBLE)\n     abort ();\n-  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n   assemble_real (u.d, SFmode);\n   return \\\"\\\";\n }\"\n@@ -10322,7 +10322,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n \n   if (GET_CODE (operands[0]) != CONST_DOUBLE)\n     abort ();\n-  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n   assemble_real (u.d, DFmode);\n   return \\\"\\\";\n }\""}, {"sha": "91cfeeba33b9ce6017ca9a57218358196ab199e5", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1957,8 +1957,7 @@ output_fpops (file)\n \t\t{\n \t\t  union real_extract u;\n \n-\t\t  bcopy ((char *) &CONST_DOUBLE_LOW (immed[i]),\n-\t\t\t (char *) &u, sizeof u);\n+\t\t  memcpy (&u, &CONST_DOUBLE_LOW (immed[i]), sizeof u);\n \t\t  if (GET_MODE (immed[i]) == DFmode)\n \t\t    ASM_OUTPUT_DOUBLE (file, u.d);\n \t\t  else"}, {"sha": "bbefa7e2a883c360eabbaa1565c089d7a42bfcf1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -385,8 +385,7 @@ rs6000_override_options (default_cpu)\n   /* If the user desires alternate register names, copy in the alternate names\n      now.  */\n   if (TARGET_REGNAMES)\n-    bcopy ((char *)alt_reg_names, (char *)rs6000_reg_names,\n-\t   sizeof (rs6000_reg_names));\n+    memcpy (rs6000_reg_names, alt_reg_names, sizeof (rs6000_reg_names));\n #endif\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS"}, {"sha": "a9b86c4be8ec6fee4d7d6b059306720e93fc94ee", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -3877,7 +3877,7 @@\n  \"*\n {\n   union real_extract u;\n-  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n   assemble_real (u.d, SFmode);\n   return \\\"\\\";\n }\"\n@@ -3892,7 +3892,7 @@\n  \"*\n {\n   union real_extract u;\n-  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n   assemble_real (u.d, DFmode);\n   return \\\"\\\";\n }\""}, {"sha": "38c86f05351172da437fa9211fd71d1e596e7cd3", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -632,7 +632,7 @@ check_float_value (mode, d, overflow)\n   if ((mode) == SFmode)\n     {\n       REAL_VALUE_TYPE r;\n-      bcopy ((char *) d, (char *) &r, sizeof (REAL_VALUE_TYPE));\n+      memcpy (&r, d, sizeof (REAL_VALUE_TYPE));\n       if (REAL_VALUES_LESS (float_values[0], r))\n \t{\n \t  bcopy ((char *) &float_values[0], (char *) d,"}, {"sha": "a84276e3f8b32eeb0e66a6ed9207a1a276d50760", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1,3 +1,8 @@\n+2000-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (grokdeclarator, save_function_data): Use memcpy, not bcopy.\n+\t* lex.c (copy_lang_decl): Likewise.\n+\n 2000-11-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* dump.c (cp_dump_tree): Don't dump function bodies here."}, {"sha": "d23ef2f75f87945810e1bf7d83cc30bbe1ea21c6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -10703,7 +10703,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n  \t\t      }\n \t\t    {\n \t\t      RID_BIT_TYPE tmp_bits;\n-\t\t      bcopy ((void*)&specbits, (void*)&tmp_bits, sizeof (RID_BIT_TYPE));\n+\t\t      memcpy (&tmp_bits, &specbits, sizeof (RID_BIT_TYPE));\n \t\t      RIDBIT_RESET (RID_INLINE, tmp_bits);\n \t\t      RIDBIT_RESET (RID_STATIC, tmp_bits);\n \t\t      if (RIDBIT_ANY_SET (tmp_bits))\n@@ -14028,8 +14028,7 @@ save_function_data (decl)\n   /* Make a copy.  */\n   f = ((struct cp_language_function *)\n        xmalloc (sizeof (struct cp_language_function)));\n-  bcopy ((char *) cp_function_chain, (char *) f,\n-\t sizeof (struct cp_language_function));\n+  memcpy (f, cp_function_chain, sizeof (struct cp_language_function));\n   DECL_SAVED_FUNCTION_DATA (decl) = f;\n \n   /* Clear out the bits we don't need.  */"}, {"sha": "0300deecb522c70dd587e3f82dd3d03622d6e85d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1588,7 +1588,7 @@ copy_lang_decl (node)\n   else\n     size = sizeof (struct lang_decl);\n   ld = (struct lang_decl *) ggc_alloc (size);\n-  bcopy ((char *)DECL_LANG_SPECIFIC (node), (char *)ld, size);\n+  memcpy (ld, DECL_LANG_SPECIFIC (node), size);\n   DECL_LANG_SPECIFIC (node) = ld;\n }\n "}, {"sha": "db1c73fc936bf6a0a4374e6211e85478dcd6c604", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1904,7 +1904,7 @@ copy_rtx_if_shared (orig)\n       register rtx copy;\n \n       copy = rtx_alloc (code);\n-      bcopy ((char *) x, (char *) copy,\n+      memcpy (copy, x,\n \t     (sizeof (*copy) - sizeof (copy->fld)\n \t      + sizeof (copy->fld[0]) * GET_RTX_LENGTH (code)));\n       x = copy;\n@@ -4109,7 +4109,7 @@ init_emit_once (line_numbers)\n \t  memset ((char *) &u, 0, sizeof u);  /* Zero any holes in a structure.  */\n \t  u.d = i == 0 ? dconst0 : i == 1 ? dconst1 : dconst2;\n \n-\t  bcopy ((char *) &u, (char *) &CONST_DOUBLE_LOW (tem), sizeof u);\n+\t  memcpy (&CONST_DOUBLE_LOW (tem), &u, sizeof u);\n \t  CONST_DOUBLE_MEM (tem) = cc0_rtx;\n \t  CONST_DOUBLE_CHAIN (tem) = NULL_RTX;\n \t  PUT_MODE (tem, mode);"}, {"sha": "af5d36d6de17970c700037c191eb2f952af3ec88", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -2314,10 +2314,10 @@ synth_mult (alg_out, t, cost_limit)\n      best_alg is normally undefined, and this is a critical function.  */\n   alg_out->ops = best_alg->ops + 1;\n   alg_out->cost = cost_limit;\n-  bcopy ((char *) best_alg->op, (char *) alg_out->op,\n-\t alg_out->ops * sizeof *alg_out->op);\n-  bcopy ((char *) best_alg->log, (char *) alg_out->log,\n-\t alg_out->ops * sizeof *alg_out->log);\n+  memcpy (alg_out->op, best_alg->op,\n+\t  alg_out->ops * sizeof *alg_out->op);\n+  memcpy (alg_out->log, best_alg->log,\n+\t  alg_out->ops * sizeof *alg_out->log);\n }\n \f\n /* Perform a multiplication and return an rtx for the result."}, {"sha": "c83f722f03eae064db6fe871ecd2b585783988ce", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1904,7 +1904,7 @@ add_bb_string (string, perm_p)\n   if (!perm_p)\n     {\n       char *p = (char *) permalloc (len);\n-      bcopy (string, p, len);\n+      memcpy (p, string, len);\n       string = p;\n     }\n   else"}, {"sha": "27123d87871eb4581f88487587a73ef71a072861", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -283,7 +283,7 @@ from the machine description file `md'.  */\\n\\n\");\n \t      unit = (struct function_unit *)\n \t\talloca (sizeof (struct function_unit));\n \t      unit->name = (char *) alloca (len);\n-\t      bcopy (name, unit->name, len);\n+\t      memcpy (unit->name, name, len);\n \t      unit->multiplicity = multiplicity;\n \t      unit->simultaneity = simultaneity;\n \t      unit->ready_cost.min = unit->ready_cost.max = ready_cost;"}, {"sha": "98b1125661084c5890b8469aeaf2c80c4e69e371", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -808,7 +808,7 @@ attr_string (str, len)\n \n   /* Not found; create a permanent copy and add it to the hash table.  */\n   new_str = (char *) obstack_alloc (hash_obstack, len + 1);\n-  bcopy (str, new_str, len);\n+  memcpy (new_str, str, len);\n   new_str[len] = '\\0';\n   attr_hash_add_string (hashcode, new_str);\n \n@@ -2577,7 +2577,7 @@ simplify_cond (exp, insn_code, insn_index)\n   /* This lets us free all storage allocated below, if appropriate.  */\n   first_spacer = (char *) obstack_finish (rtl_obstack);\n \n-  bcopy ((char *) XVEC (exp, 0)->elem, (char *) tests, len * sizeof (rtx));\n+  memcpy (tests, XVEC (exp, 0)->elem, len * sizeof (rtx));\n \n   /* See if default value needs simplification.  */\n   if (GET_CODE (defval) == COND)\n@@ -2665,8 +2665,7 @@ simplify_cond (exp, insn_code, insn_index)\n       rtx newexp = rtx_alloc (COND);\n \n       XVEC (newexp, 0) = rtvec_alloc (len);\n-      bcopy ((char *) tests, (char *) XVEC (newexp, 0)->elem,\n-\t     len * sizeof (rtx));\n+      memcpy (XVEC (newexp, 0)->elem, tests, len * sizeof (rtx));\n       XEXP (newexp, 1) = new_defval;\n       return newexp;\n     }\n@@ -5931,8 +5930,8 @@ copy_rtx_unchanging (orig)\n   PUT_MODE (copy, GET_MODE (orig));\n   RTX_UNCHANGING_P (copy) = 1;\n \n-  bcopy ((char *) &XEXP (orig, 0), (char *) &XEXP (copy, 0),\n-\t GET_RTX_LENGTH (GET_CODE (copy)) * sizeof (rtx));\n+  memcpy (&XEXP (copy, 0), &XEXP (orig, 0),\n+\t  GET_RTX_LENGTH (GET_CODE (copy)) * sizeof (rtx));\n   return copy;\n #endif\n }"}, {"sha": "0a59c097d0cd061d806f5ea9fdd2e4df4f8fba25", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1,3 +1,8 @@\n+2000-11-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (copy_lang_decl): Use memcpy, not bcopy.\n+\t* jcf-parse.c (jcf_figure_file_type): Likewise.\n+\n 2000-11-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* parse.y (create_new_parser_context): Use memset () instead of"}, {"sha": "04e0734054b572a955e8444e62a73d0c39795fc2", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1556,7 +1556,7 @@ copy_lang_decl (node)\n     = TREE_CODE (node) == VAR_DECL ? sizeof (struct lang_decl_var)\n     : sizeof (struct lang_decl);\n   struct lang_decl *x = (struct lang_decl *) ggc_alloc (lang_decl_size);\n-  bcopy ((PTR) DECL_LANG_SPECIFIC (node), (PTR) x, lang_decl_size);\n+  memcpy (x, DECL_LANG_SPECIFIC (node), lang_decl_size);\n   DECL_LANG_SPECIFIC (node) = x;\n }\n "}, {"sha": "be9e7b958faff53633e3da467745c199a03daba6", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -1069,8 +1069,7 @@ DEFUN(jcf_figure_file_type, (jcf),\n       && !open_in_zip (jcf, input_filename, NULL, 0))\n     {\n       localToFile = ALLOC (sizeof (struct ZipFileCache));\n-      bcopy ((PTR) SeenZipFiles, (PTR) localToFile, \n-\t     sizeof (struct ZipFileCache));\n+      memcpy (localToFile, SeenZipFiles, sizeof (struct ZipFileCache));\n       process_zip_dir ();\t/* Register all the class defined there */\n       return JCF_ZIP;\n     }"}, {"sha": "d6941c83ffa5a179781428410fa6f5fcfc635b7d", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -3748,8 +3748,7 @@ thread_jumps (f, max_reg, flag_before_loop)\n \t  memset (modified_regs, 0, max_reg * sizeof (char));\n \t  modified_mem = 0;\n \n-\t  bcopy ((char *) all_reset, (char *) same_regs,\n-\t\t max_reg * sizeof (int));\n+\t  memcpy (same_regs, all_reset, max_reg * sizeof (int));\n \t  num_same_regs = 0;\n \n \t  label = JUMP_LABEL (b1);"}, {"sha": "c43e5789d52c50cabfe48310c2000d4d4d916b46", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -172,7 +172,7 @@ save_string (s, len)\n {\n   register char *result = xmalloc (len + 1);\n \n-  bcopy (s, result, len);\n+  memcpy (result, s, len);\n   result[len] = 0;\n   return result;\n }"}, {"sha": "970c24c324d122676394ead4eb9e75b156d3807f", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -464,7 +464,7 @@ REAL_VALUE_TYPE real_value_from_int_cst\tPARAMS ((union tree_node *,\n \n #define REAL_VALUE_FROM_CONST_DOUBLE(to, from)\t\t\\\n do { union real_extract u;\t\t\t\t\\\n-     bcopy ((char *) &CONST_DOUBLE_LOW ((from)), (char *) &u, sizeof u); \\\n+     memcpy (&u, &CONST_DOUBLE_LOW ((from)), sizeof u); \\\n      to = u.d; } while (0)\n \n /* Return a CONST_DOUBLE with value R and mode M.  */"}, {"sha": "b9817a2717486cae4240a94a3e2c3e1fc433f784", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -267,8 +267,8 @@ init_reg_sets ()\n \t  SET_HARD_REG_BIT (reg_class_contents[i], j);\n     }\n \n-  bcopy (initial_fixed_regs, fixed_regs, sizeof fixed_regs);\n-  bcopy (initial_call_used_regs, call_used_regs, sizeof call_used_regs);\n+  memcpy (fixed_regs, initial_fixed_regs, sizeof fixed_regs);\n+  memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n   memset (global_regs, 0, sizeof global_regs);\n \n   /* Do any additional initialization regsets may need */\n@@ -404,7 +404,7 @@ init_reg_sets_1 ()\n   CLEAR_HARD_REG_SET (call_used_reg_set);\n   CLEAR_HARD_REG_SET (call_fixed_reg_set);\n \n-  bcopy (fixed_regs, call_fixed_regs, sizeof call_fixed_regs);\n+  memcpy (call_fixed_regs, fixed_regs, sizeof call_fixed_regs);\n \n   n_non_fixed_regs = 0;\n "}, {"sha": "dbe13fa6f51e05d1242d0639bd1c54ffc3161f75", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e135bdd14d2035632e78008730027c4ef82aa7a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4e135bdd14d2035632e78008730027c4ef82aa7a", "patch": "@@ -669,7 +669,7 @@ reload (first, global)\n   reg_equiv_address = (rtx *) xcalloc (max_regno, sizeof (rtx));\n   reg_max_ref_width = (unsigned int *) xcalloc (max_regno, sizeof (int));\n   reg_old_renumber = (short *) xcalloc (max_regno, sizeof (short));\n-  bcopy ((PTR) reg_renumber, (PTR) reg_old_renumber, max_regno * sizeof (short));\n+  memcpy (reg_old_renumber, reg_renumber, max_regno * sizeof (short));\n   pseudo_forbidden_regs\n     = (HARD_REG_SET *) xmalloc (max_regno * sizeof (HARD_REG_SET));\n   pseudo_previous_regs\n@@ -2530,9 +2530,9 @@ eliminate_regs (x, mem_mode, insn)\n \t  if (new != XEXP (x, i) && ! copied)\n \t    {\n \t      rtx new_x = rtx_alloc (code);\n-\t      bcopy ((char *) x, (char *) new_x,\n-\t\t     (sizeof (*new_x) - sizeof (new_x->fld)\n-\t\t      + sizeof (new_x->fld[0]) * GET_RTX_LENGTH (code)));\n+\t      memcpy (new_x, x,\n+\t\t      (sizeof (*new_x) - sizeof (new_x->fld)\n+\t\t       + sizeof (new_x->fld[0]) * GET_RTX_LENGTH (code)));\n \t      x = new_x;\n \t      copied = 1;\n \t    }\n@@ -2551,10 +2551,10 @@ eliminate_regs (x, mem_mode, insn)\n \t\t  if (! copied)\n \t\t    {\n \t\t      rtx new_x = rtx_alloc (code);\n-\t\t      bcopy ((char *) x, (char *) new_x,\n-\t\t\t     (sizeof (*new_x) - sizeof (new_x->fld)\n-\t\t\t      + (sizeof (new_x->fld[0])\n-\t\t\t\t * GET_RTX_LENGTH (code))));\n+\t\t      memcpy (new_x, x,\n+\t\t\t      (sizeof (*new_x) - sizeof (new_x->fld)\n+\t\t\t       + (sizeof (new_x->fld[0])\n+\t\t\t\t  * GET_RTX_LENGTH (code))));\n \t\t      x = new_x;\n \t\t      copied = 1;\n \t\t    }"}]}