{"sha": "87b824c3ed1dd4c14f7f50597adc277972716999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiODI0YzNlZDFkZDRjMTRmN2Y1MDU5N2FkYzI3Nzk3MjcxNjk5OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-16T04:25:12Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-16T04:25:12Z"}, "message": "Regenerate\n\nFrom-SVN: r32578", "tree": {"sha": "2e54393ce577309468b3570ee7b26712ce6edc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e54393ce577309468b3570ee7b26712ce6edc76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b824c3ed1dd4c14f7f50597adc277972716999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b824c3ed1dd4c14f7f50597adc277972716999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b824c3ed1dd4c14f7f50597adc277972716999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b824c3ed1dd4c14f7f50597adc277972716999/comments", "author": null, "committer": null, "parents": [{"sha": "d471b5ca4fcf22df829c5f722fc65dde615a07bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d471b5ca4fcf22df829c5f722fc65dde615a07bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d471b5ca4fcf22df829c5f722fc65dde615a07bf"}], "stats": {"total": 251, "additions": 141, "deletions": 110}, "files": [{"sha": "9062af53851431f8040eecb51caadb2fdf3b9080", "filename": "gcc/c-gperf.h", "status": "modified", "additions": 141, "deletions": 110, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b824c3ed1dd4c14f7f50597adc277972716999/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b824c3ed1dd4c14f7f50597adc277972716999/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=87b824c3ed1dd4c14f7f50597adc277972716999", "patch": "@@ -1,5 +1,5 @@\n-/* C code produced by gperf version 2.7 */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */\n+/* C code produced by gperf version 2.7.1 (19981006 egcs) */\n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ /work/src/gcc/gcc/c-parse.gperf  */\n /* Command-line: gperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { const char *name; short token; enum rid rid; };\n #ifdef __GNUC__\n@@ -11,12 +11,12 @@ __inline\n #endif\n struct resword *is_reserved_word PARAMS ((const char *, unsigned int));\n \n-#define TOTAL_KEYWORDS 84\n+#define TOTAL_KEYWORDS 94\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 20\n-#define MIN_HASH_VALUE 8\n-#define MAX_HASH_VALUE 173\n-/* maximum key range = 166, duplicates = 0 */\n+#define MIN_HASH_VALUE 4\n+#define MAX_HASH_VALUE 249\n+/* maximum key range = 246, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -28,32 +28,32 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174,  35, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174,   1, 174,  97,  19,  28,\n-       40,   6,   1,  53,   3,  13, 174,   5,  67,  18,\n-       49,   3,   6, 174,  19,   8,   1,   4,  33,   2,\n-        2,  23,   4, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-      174, 174, 174, 174, 174, 174\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250,  11, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250,   1, 250,  78,  38,  61,\n+        1,  37,  47,  70,   1,  13, 250,   4,  94,  37,\n+       81,   1, 100, 250,  19,   8,  25,   4,  50,   1,\n+        2,   1,   2, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250, 250, 250, 250, 250,\n+      250, 250, 250, 250, 250, 250\n     };\n   register int hval = len;\n \n@@ -72,118 +72,149 @@ hash (str, len)\n \n static struct resword wordlist[] =\n   {\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"out\", TYPE_QUAL, RID_OUT},\n-    {\"\", 0, 0},\n-    {\"float\", TYPESPEC, RID_FLOAT},\n-    {\"__typeof\", TYPEOF, NORID},\n-    {\"\", 0, 0},\n-    {\"__typeof__\", TYPEOF, NORID},\n-    {\"typeof\", TYPEOF, NORID},\n-    {\"typedef\", SCSPEC, RID_TYPEDEF},\n-    {\"if\", IF, NORID},\n-    {\"short\", TYPESPEC, RID_SHORT},\n-    {\"int\", TYPESPEC, RID_INT},\n-    {\"sizeof\", SIZEOF, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"do\", DO, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"id\", OBJECTNAME, RID_ID},\n+    {\"__unbounded\", TYPE_QUAL, RID_UNBOUNDED},\n+    {\"__signed\", TYPESPEC, RID_SIGNED},\n+    {\"__unbounded__\", TYPE_QUAL, RID_UNBOUNDED},\n     {\"__signed__\", TYPESPEC, RID_SIGNED},\n-    {\"__extension__\", EXTENSION, NORID},\n-    {\"inout\", TYPE_QUAL, RID_INOUT},\n+    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n+    {\"\", 0, 0},\n     {\"__imag__\", IMAGPART, NORID},\n-    {\"else\", ELSE, NORID},\n+    {\"\", 0, 0},\n     {\"__inline__\", SCSPEC, RID_INLINE},\n-    {\"while\", WHILE, NORID},\n+    {\"\", 0, 0},\n     {\"__iterator__\", SCSPEC, RID_ITERATOR},\n-    {\"__inline\", SCSPEC, RID_INLINE},\n-    {\"__real__\", REALPART, NORID},\n     {\"switch\", SWITCH, NORID},\n-    {\"__restrict\", TYPE_QUAL, RID_RESTRICT},\n-    {\"enum\", ENUM, NORID},\n+    {\"__real__\", REALPART, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__restrict__\", TYPE_QUAL, RID_RESTRICT},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__typeof__\", TYPEOF, NORID},\n+    {\"\", 0, 0},\n+    {\"short\", TYPESPEC, RID_SHORT},\n+    {\"@compatibility_alias\", ALIAS, NORID},\n+    {\"@protected\", PROTECTED, NORID},\n+    {\"\", 0, 0},\n+    {\"__iterator\", SCSPEC, RID_ITERATOR},\n+    {\"inout\", TYPE_QUAL, RID_INOUT},\n+    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"double\", TYPESPEC, RID_DOUBLE},\n+    {\"__bounded\", TYPE_QUAL, RID_BOUNDED},\n+    {\"\", 0, 0},\n+    {\"__bounded__\", TYPE_QUAL, RID_BOUNDED},\n+    {\"__extension__\", EXTENSION, NORID},\n+    {\"\", 0, 0},\n+    {\"out\", TYPE_QUAL, RID_OUT},\n+    {\"__restrict\", TYPE_QUAL, RID_RESTRICT},\n+    {\"while\", WHILE, NORID},\n+    {\"\", 0, 0},\n     {\"struct\", STRUCT, NORID},\n-    {\"break\", BREAK, NORID},\n+    {\"__inline\", SCSPEC, RID_INLINE},\n     {\"restrict\", TYPE_QUAL, RID_RESTRICT},\n-    {\"__const\", TYPE_QUAL, RID_CONST},\n-    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n+    {\"@defs\", DEFS, NORID},\n+    {\"if\", IF, NORID},\n+    {\"sizeof\", SIZEOF, NORID},\n+    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n+    {\"\", 0, 0},\n+    {\"int\", TYPESPEC, RID_INT},\n+    {\"\", 0, 0},\n+    {\"void\", TYPESPEC, RID_VOID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__const__\", TYPE_QUAL, RID_CONST},\n     {\"__complex\", TYPESPEC, RID_COMPLEX},\n     {\"__complex__\", TYPESPEC, RID_COMPLEX},\n-    {\"for\", FOR, NORID},\n-    {\"__iterator\", SCSPEC, RID_ITERATOR},\n-    {\"byref\", TYPE_QUAL, RID_BYREF},\n-    {\"do\", DO, NORID},\n-    {\"case\", CASE, NORID},\n-    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n+    {\"@private\", PRIVATE, NORID},\n+    {\"@selector\", SELECTOR, NORID},\n+    {\"\", 0, 0},\n+    {\"float\", TYPESPEC, RID_FLOAT},\n     {\"\", 0, 0},\n     {\"default\", DEFAULT, NORID},\n-    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@defs\", DEFS, NORID},\n-    {\"id\", OBJECTNAME, RID_ID},\n-    {\"double\", TYPESPEC, RID_DOUBLE},\n-    {\"__signed\", TYPESPEC, RID_SIGNED},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n-    {\"goto\", GOTO, NORID},\n-    {\"extern\", SCSPEC, RID_EXTERN},\n+    {\"__typeof\", TYPEOF, NORID},\n+    {\"enum\", ENUM, NORID},\n+    {\"@public\", PUBLIC, NORID},\n+    {\"break\", BREAK, NORID},\n+    {\"signed\", TYPESPEC, RID_SIGNED},\n+    {\"else\", ELSE, NORID},\n+    {\"__asm__\", ASM_KEYWORD, NORID},\n+    {\"for\", FOR, NORID},\n     {\"\", 0, 0},\n-    {\"in\", TYPE_QUAL, RID_IN},\n+    {\"__imag\", IMAGPART, NORID},\n+    {\"__alignof__\", ALIGNOF, NORID},\n     {\"\", 0, 0},\n-    {\"@compatibility_alias\", ALIAS, NORID},\n+    {\"__attribute__\", ATTRIBUTE, NORID},\n+    {\"__const\", TYPE_QUAL, RID_CONST},\n     {\"\", 0, 0},\n-    {\"@private\", PRIVATE, NORID},\n-    {\"@selector\", SELECTOR, NORID},\n+    {\"in\", TYPE_QUAL, RID_IN},\n+    {\"@end\", END, NORID},\n+    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n     {\"\", 0, 0},\n+    {\"goto\", GOTO, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n     {\"union\", UNION, NORID},\n     {\"\", 0, 0},\n-    {\"__imag\", IMAGPART, NORID},\n-    {\"@public\", PUBLIC, NORID},\n-    {\"return\", RETURN, NORID},\n+    {\"__label__\", LABEL, NORID},\n     {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n     {\"\", 0, 0},\n-    {\"__label__\", LABEL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"const\", TYPE_QUAL, RID_CONST},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__builtin_va_arg\", VA_ARG, NORID},\n-    {\"void\", TYPESPEC, RID_VOID},\n-    {\"continue\", CONTINUE, NORID},\n-    {\"inline\", SCSPEC, RID_INLINE},\n+    {\"auto\", SCSPEC, RID_AUTO},\n+    {\"byref\", TYPE_QUAL, RID_BYREF},\n+    {\"case\", CASE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__ptrbase__\", PTR_BASE, NORID},\n+    {\"__ptrvalue__\", PTR_VALUE, NORID},\n+    {\"__ptrextent__\", PTR_EXTENT, NORID},\n+    {\"register\", SCSPEC, RID_REGISTER},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"@class\", CLASS, NORID},\n     {\"__real\", REALPART, NORID},\n+    {\"__asm\", ASM_KEYWORD, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@encode\", ENCODE, NORID},\n+    {\"__builtin_va_arg\", VA_ARG, NORID},\n     {\"\", 0, 0},\n-    {\"register\", SCSPEC, RID_REGISTER},\n-    {\"@interface\", INTERFACE, NORID},\n+    {\"__attribute\", ATTRIBUTE, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@protected\", PROTECTED, NORID},\n-    {\"auto\", SCSPEC, RID_AUTO},\n-    {\"__asm__\", ASM_KEYWORD, NORID},\n-    {\"signed\", TYPESPEC, RID_SIGNED},\n-    {\"__alignof\", ALIGNOF, NORID},\n+    {\"return\", RETURN, NORID},\n     {\"\", 0, 0},\n-    {\"__alignof__\", ALIGNOF, NORID},\n+    {\"@protocol\", PROTOCOL, NORID},\n     {\"\", 0, 0},\n-    {\"__attribute__\", ATTRIBUTE, NORID},\n+    {\"__alignof\", ALIGNOF, NORID},\n+    {\"@encode\", ENCODE, NORID},\n+    {\"__ptrextent\", PTR_EXTENT, NORID},\n     {\"\", 0, 0},\n-    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n-    {\"__attribute\", ATTRIBUTE, NORID},\n-    {\"@class\", CLASS, NORID},\n+    {\"@interface\", INTERFACE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"@implementation\", IMPLEMENTATION, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__asm\", ASM_KEYWORD, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@end\", END, NORID},\n-    {\"\", 0, 0},\n-    {\"@protocol\", PROTOCOL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"asm\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__ptrbase\", PTR_BASE, NORID},\n+    {\"__ptrvalue\", PTR_VALUE, NORID},\n+    {\"extern\", SCSPEC, RID_EXTERN},\n+    {\"inline\", SCSPEC, RID_INLINE},\n     {\"\", 0, 0}, {\"\", 0, 0},\n     {\"static\", SCSPEC, RID_STATIC},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0},\n+    {\"asm\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"char\", TYPESPEC, RID_CHAR},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"const\", TYPE_QUAL, RID_CONST},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"typeof\", TYPEOF, NORID},\n+    {\"typedef\", SCSPEC, RID_TYPEDEF},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"continue\", CONTINUE, NORID},\n+    {\"\", 0, 0},\n+    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"long\", TYPESPEC, RID_LONG}\n   };\n "}]}