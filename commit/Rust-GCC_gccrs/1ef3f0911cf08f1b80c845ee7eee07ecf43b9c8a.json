{"sha": "1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "node_id": "C_kwDOANBUbNoAKDFlZjNmMDkxMWNmMDhmMWI4MGM4NDVlZTdlZWUwN2VjZjQzYjljOGE", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2022-03-29T16:22:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:40:58Z"}, "message": "[Ada] New port arm-qnx\n\nThe QNX system specs for ARM and AARCH64 are identical. It makes more\nsense to have it named for the base architecture.\n\ngcc/ada/\n\n\t* Makefile.rtl: Rename system-qnx-aarch64.ads to\n\tsystem-qnx-arm.ads.\n\t(AARCH64 QNX section): Modify to handle both arm and arch64.\n\t* tracebak.c (__QNX__): Add new __ARMEL__ section.\n\t* sigtramp-arm-qnx.c: New file.\n\t* libgnat/system-qnx-aarch64.ads: Renamed to ...\n\t* libgnat/system-qnx-arm.ads: this.", "tree": {"sha": "27fffad711e7c7ede54038669ce16ffeb85ad5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fffad711e7c7ede54038669ce16ffeb85ad5cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1336d977cf0cab75679d4b4170e7c9a86cd1f4"}], "stats": {"total": 183, "additions": 174, "deletions": 9}, "files": [{"sha": "e4ca894b14fd5b516d2e8d2090084d864964c197", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "patch": "@@ -1493,8 +1493,8 @@ ifeq ($(strip $(filter-out arm% linux-androideabi,$(target_cpu) $(target_os))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n-# AARCH64 QNX\n-ifeq ($(strip $(filter-out aarch64 %qnx,$(target_cpu) $(target_os))),)\n+# ARM and AARCH64 QNX\n+ifeq ($(strip $(filter-out arm aarch64 %qnx,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__qnx.ads \\\n   a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n@@ -1511,21 +1511,28 @@ ifeq ($(strip $(filter-out aarch64 %qnx,$(target_cpu) $(target_os))),)\n   g-soliop.ads<libgnat/g-soliop__qnx.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n   $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n-  $(GNATRTL_128BIT_PAIRS) \\\n-  system.ads<libgnat/system-qnx-aarch64.ads\n+  system.ads<libgnat/system-qnx-arm.ads\n \n   TOOLS_TARGET_PAIRS = indepsw.adb<indepsw-gnu.adb\n \n-  EXTRA_GNATRTL_NONTASKING_OBJS = $(GNATRTL_128BIT_OBJS)\n   EXTRA_GNATRTL_TASKING_OBJS=s-qnx.o\n-  EXTRA_LIBGNAT_OBJS+=sigtramp-qnx.o\n+  ifeq ($(strip $(filter-out arm%, $(target_cpu))),)\n+     EH_MECHANISM=-arm\n+     SIGTRAMP_OBJ=sigtramp-arm-qnx.o\n+  else\n+     EH_MECHANISM=-gcc\n+     SIGTRAMP_OBJ=sigtramp-qnx.o\n+     LIBGNAT_TARGET_PAIRS += $(GNATRTL_128BIT_PAIRS)\n+     EXTRA_GNATRTL_NONTASKING_OBJS = $(GNATRTL_128BIT_OBJS)\n+     # Temporarily restrict shared library build to aarch64 (V303-025)\n+     GNATLIB_SHARED = gnatlib-shared-dual\n+  endif\n+  EXTRA_LIBGNAT_OBJS+=$(SIGTRAMP_OBJ)\n   EXTRA_LIBGNAT_SRCS+=sigtramp.h\n-  EH_MECHANISM=-gcc\n \n   SO_OPTS= -shared-libgcc -Wl,-soname,\n   MISCLIB= -lsocket\n   THREADSLIB=\n-  GNATLIB_SHARED = gnatlib-shared-dual\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n "}, {"sha": "5f4b90e7194ac9ab32a13e9772f9f806e59f7718", "filename": "gcc/ada/libgnat/system-qnx-arm.ads", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Flibgnat%2Fsystem-qnx-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Flibgnat%2Fsystem-qnx-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-qnx-arm.ads?ref=1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "patch": "@@ -5,7 +5,7 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                         (QNX/Aarch64 Version)                            --\n+--                        (QNX-ARM/AARCH64 Version)                         --\n --                                                                          --\n --          Copyright (C) 1992-2022, Free Software Foundation, Inc.         --\n --                                                                          --", "previous_filename": "gcc/ada/libgnat/system-qnx-aarch64.ads"}, {"sha": "4d359d7b2905bf4a0c5ed6029e9edeb7bd1ff10b", "filename": "gcc/ada/sigtramp-arm-qnx.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Fsigtramp-arm-qnx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Fsigtramp-arm-qnx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-arm-qnx.c?ref=1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "patch": "@@ -0,0 +1,155 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                             S I G T R A M P                              *\n+ *                                                                          *\n+ *                         Asm Implementation File                          *\n+ *                                                                          *\n+ *           Copyright (C) 2015-2022, Free Software Foundation, Inc.        *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n+ *                                                                          *\n+ * As a special exception under Section 7 of GPL version 3, you are granted *\n+ * additional permissions described in the GCC Runtime Library Exception,   *\n+ * version 3.1, as published by the Free Software Foundation.               *\n+ *                                                                          *\n+ * In particular,  you can freely  distribute your programs  built with the *\n+ * GNAT Pro compiler, including any required library run-time units,  using *\n+ * any licensing terms  of your choosing.  See the AdaCore Software License *\n+ * for full details.                                                        *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/**************************************************\n+ * ARM-QNX version of the __gnat_sigtramp service *\n+ **************************************************/\n+\n+#include <ucontext.h>\n+\n+#include \"sigtramp.h\"\n+/* See sigtramp.h for a general explanation of functionality.  */\n+\n+/* ----------------------\n+   -- General comments --\n+   ----------------------\n+\n+   Stubs are generated from toplevel asms,\n+   The general idea is to establish CFA as the sigcontext\n+   and state where to find the registers as offsets from there.\n+\n+   Note that the registers we \"restore\" here are those to which we have\n+   direct access through the system sigcontext structure, which includes\n+   only a partial set of the non-volatiles ABI-wise.  */\n+\n+/* -----------------------------------------\n+   -- Protypes for our internal asm stubs --\n+   -----------------------------------------\n+\n+   The registers are expected to be at SIGCONTEXT + 12 (reference the\n+   sicontext structure in asm/sigcontext.h which describes the first\n+   3 * 4byte fields.)  Even though our symbols will remain local, the\n+   prototype claims \"extern\" and not \"static\" to prevent compiler complaints\n+   about a symbol used but never defined.  */\n+\n+/* sigtramp stub providing unwind info for common registers.  */\n+\n+extern void __gnat_sigtramp_common\n+  (int signo, void *siginfo, void *sigcontext,\n+   __sigtramphandler_t * handler);\n+\n+void __gnat_sigtramp (int signo, void *si, void *sc,\n+                      __sigtramphandler_t * handler)\n+     __attribute__((optimize(2)));\n+\n+void __gnat_sigtramp (int signo, void *si, void *ucontext,\n+                      __sigtramphandler_t * handler)\n+{\n+  struct sigcontext *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+\n+  __gnat_sigtramp_common (signo, si, mcontext, handler);\n+}\n+\n+/* asm string construction helpers.  */\n+\n+#define STR(TEXT) #TEXT\n+/* stringify expanded TEXT, surrounding it with double quotes.  */\n+\n+#define S(E) STR(E)\n+/* stringify E, which will resolve as text but may contain macros\n+   still to be expanded.  */\n+\n+/* asm (TEXT) outputs <tab>TEXT. These facilitate the output of\n+   multiline contents:  */\n+#define TAB(S) \"\\t\" S\n+#define CR(S)  S \"\\n\"\n+\n+#undef TCR\n+#define TCR(S) TAB(CR(S))\n+\n+/* Trampoline body block\n+   ---------------------  */\n+\n+#define SIGTRAMP_BODY \\\n+CR(\"\") \\\n+TCR(\"# Allocate frame and also save r2 which is the argument register\") \\\n+TCR(\"# containing the sigcontext, so that we can restore it during\") \\\n+TCR(\"# unwinding and thereby load the rest of the desired context.\") \\\n+TCR(\"stmfd\tsp!, {r2, r3, lr}\") \\\n+TCR(\"# The unwinder undo's these operations in reverse order so starting\") \\\n+TCR(\"# from bottom, restore r2 from the current vsp location, move r2 into\") \\\n+TCR(\"# the vsp, add 12 bytes to get the start of the register save area\") \\\n+TCR(\"# then restore the 15 general purpose registers of the frame which\") \\\n+TCR(\"# raised the signal.\") \\\n+TCR(\".save {r0-r15}\") \\\n+TCR(\".pad #12\") \\\n+TCR(\".movsp r2\") \\\n+TCR(\".save {r2}\") \\\n+TCR(\"# Call the real handler. The signo, siginfo and sigcontext\") \\\n+TCR(\"# arguments are the same as those we received in r0, r1 and r2.\") \\\n+TCR(\"blx\tr3\") \\\n+TCR(\"# Restore our callee-saved items, release our frame and return\") \\\n+TCR(\"# (should never get here!).\") \\\n+TCR(\"ldmfd\tsp, {r2, r3, pc}\")\n+\n+/* Symbol definition block\n+   -----------------------  */\n+\n+#define SIGTRAMP_START(SYM) \\\n+CR(\"# \" S(SYM) \" unwind trampoline\") \\\n+TCR(\".type \" S(SYM) \", %function\") \\\n+CR(\"\") \\\n+CR(S(SYM) \":\") \\\n+TCR(\".fnstart\")\n+\n+/* Symbol termination block\n+   ------------------------  */\n+\n+#define SIGTRAMP_END(SYM) \\\n+CR(\".fnend\") \\\n+TCR(\".size \" S(SYM) \", .-\" S(SYM))\n+\n+/*----------------------------\n+  -- And now, the real code --\n+  ---------------------------- */\n+\n+/* Text section start.  The compiler isn't aware of that switch.  */\n+\n+asm (\".text\\n\"\n+     TCR(\".align 2\"));\n+\n+/* sigtramp stub for common registers.  */\n+\n+#define TRAMP_COMMON __gnat_sigtramp_common\n+\n+asm (SIGTRAMP_START(TRAMP_COMMON));\n+asm (SIGTRAMP_BODY);\n+asm (SIGTRAMP_END(TRAMP_COMMON));"}, {"sha": "f4e739d5ecf729cd4ddb148118bac24d0059f0b2", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=1ef3f0911cf08f1b80c845ee7eee07ecf43b9c8a", "patch": "@@ -555,6 +555,9 @@ is_return_from(void *symbol_addr, void *ret_addr)\n \n #if defined (__aarch64__)\n #define PC_ADJUST -4\n+#elif defined (__ARMEL__)\n+#define PC_ADJUST -2\n+#define USING_ARM_UNWINDING 1\n #else\n #error Unhandled QNX architecture.\n #endif"}]}