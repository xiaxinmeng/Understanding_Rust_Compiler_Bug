{"sha": "d3707adb795a1ff514921029b3d4d1fec73cd021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MDdhZGI3OTVhMWZmNTE0OTIxMDI5YjNkNGQxZmVjNzNjZDAyMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-26T01:21:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-26T01:21:03Z"}, "message": "builtins.c (expand_builtin_saveregs): Remove static, remove exp and ignore arguments, bail if no EXPAND_BUILTIN_SAVEREGS.\n\n        * builtins.c (expand_builtin_saveregs): Remove static, remove exp\n        and ignore arguments, bail if no EXPAND_BUILTIN_SAVEREGS.\n        (expand_builtin_next_arg): Accept ARGLIST not EXP.\n        (stabilize_va_list): New function.\n        (std_expand_builtin_va_start): New function.\n        (expand_builtin_va_start): New function.\n        (get_varargs_alias_set): New function.\n        (std_expand_builtin_va_arg): New function.\n        (expand_builtin_va_arg): New function.\n        (expand_builtin_va_end): New function.\n        (expand_builtin_va_copy): New function.\n        (expand_builtin): Call them.\n        * c-common.c (c_common_nodes_and_builtins): Build __builtin_va_list,\n        __builtin_{varargs_start,stdarg_start,end,copy}.\n        (build_va_arg): New function.\n        * c-common.h (CTI_PTR_TYPE, ptr_type_node): Delete.\n        (build_va_arg): Declare.\n        * c-decl.c (ptr_type_node, va_list_type_node): New.\n        * c-parse.gperf (__builtin_va_arg): New.\n        * c-parse.in (VA_ARG): New token.\n        (unary_expr): Recognize it.\n        * expr.c (expand_expr): Expand VA_ARG_EXPR.\n        * expr.h (std_expand_builtin_va_start): Declare.\n        (std_expand_builtin_va_arg): Declare.\n        (expand_builtin_va_arg): Declare.\n        (get_varargs_alias_set): Declare.\n        * tree.def (VA_ARG_EXPR): New.\n        * tree.h (BUILT_IN_VARARGS_START): New.\n        (BUILT_IN_STDARG_START, BUILT_IN_VA_END): New.\n        (ptr_type_node, va_list_type_node): Declare.\n        * tm.texi (EXPAND_BUILTIN_SAVEREGS): Kill unused ARGLIST argument.\n        * m32r.h (EXPAND_BUILTIN_SAVEREGS): Likewise.\n        * m88k.h, m88k.c: Likewise.\n        * mn10300.h, mn10300.c: Likewise.\n        * pa.h, pa.c: Likewise.\n        * rs6000.h, rs6000.c: Likewise.\n        * sh.h, sh.c: Likewise.\n        * sparc.h, sparc.c: Likewise.\n\n        * emit-rtl.c (operand_subword): Copy alias set.\n        (change_address): Likewise.\n\nFrom-SVN: r28243", "tree": {"sha": "8fa42459376747733591714ae5bc7de26ab8671f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fa42459376747733591714ae5bc7de26ab8671f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3707adb795a1ff514921029b3d4d1fec73cd021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3707adb795a1ff514921029b3d4d1fec73cd021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3707adb795a1ff514921029b3d4d1fec73cd021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3707adb795a1ff514921029b3d4d1fec73cd021/comments", "author": null, "committer": null, "parents": [{"sha": "4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4b0aa39e2f756b3aeda33bce2b9c1255ec9e75"}], "stats": {"total": 3821, "additions": 2136, "deletions": 1685}, "files": [{"sha": "a243a37e26f7645f518929d6d2acba1e88838c0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -1,3 +1,47 @@\n+Sun Jul 25 18:15:39 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (expand_builtin_saveregs): Remove static, remove exp\n+\tand ignore arguments, bail if no EXPAND_BUILTIN_SAVEREGS.\n+\t(expand_builtin_next_arg): Accept ARGLIST not EXP.\n+\t(stabilize_va_list): New function.\n+\t(std_expand_builtin_va_start): New function.\n+\t(expand_builtin_va_start): New function.\n+\t(get_varargs_alias_set): New function.\n+\t(std_expand_builtin_va_arg): New function.\n+\t(expand_builtin_va_arg): New function.\n+\t(expand_builtin_va_end): New function.\n+\t(expand_builtin_va_copy): New function.\n+\t(expand_builtin): Call them.\n+\t* c-common.c (c_common_nodes_and_builtins): Build __builtin_va_list,\n+\t__builtin_{varargs_start,stdarg_start,end,copy}.\n+\t(build_va_arg): New function.\n+\t* c-common.h (CTI_PTR_TYPE, ptr_type_node): Delete.\n+\t(build_va_arg): Declare.\n+\t* c-decl.c (ptr_type_node, va_list_type_node): New.\n+\t* c-parse.gperf (__builtin_va_arg): New.\n+\t* c-parse.in (VA_ARG): New token.\n+\t(unary_expr): Recognize it.\n+\t* expr.c (expand_expr): Expand VA_ARG_EXPR.\n+\t* expr.h (std_expand_builtin_va_start): Declare.\n+\t(std_expand_builtin_va_arg): Declare.\n+\t(expand_builtin_va_arg): Declare.\n+\t(get_varargs_alias_set): Declare.\n+\t* tree.def (VA_ARG_EXPR): New.\n+\t* tree.h (BUILT_IN_VARARGS_START): New.\n+\t(BUILT_IN_STDARG_START, BUILT_IN_VA_END): New.\n+\t(ptr_type_node, va_list_type_node): Declare.\n+\t* tm.texi (EXPAND_BUILTIN_SAVEREGS): Kill unused ARGLIST argument.\n+\t* m32r.h (EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t* m88k.h, m88k.c: Likewise.\n+\t* mn10300.h, mn10300.c: Likewise.\n+\t* pa.h, pa.c: Likewise.\n+\t* rs6000.h, rs6000.c: Likewise.\n+\t* sh.h, sh.c: Likewise.\n+\t* sparc.h, sparc.c: Likewise.\n+\n+\t* emit-rtl.c (operand_subword): Copy alias set.\n+\t(change_address): Likewise.\n+\n Sun Jul 25 15:04:37 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.c (compute_frame_size): Scan all the used callee saved registers,"}, {"sha": "6d622ff2d17d80aebe21d5fc1b794f7a62269acf", "filename": "gcc/builtins.c", "status": "modified", "additions": 274, "deletions": 56, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -73,9 +73,11 @@ static void expand_builtin_return\tPROTO((rtx));\n static rtx expand_builtin_classify_type\tPROTO((tree));\n static rtx expand_builtin_mathfn\tPROTO((tree, rtx, rtx));\n static rtx expand_builtin_constant_p\tPROTO((tree));\n-static rtx expand_builtin_saveregs\tPROTO((tree, rtx, int));\n static rtx expand_builtin_args_info\tPROTO((tree));\n static rtx expand_builtin_next_arg\tPROTO((tree));\n+static rtx expand_builtin_va_start\tPROTO((int, tree));\n+static rtx expand_builtin_va_end\tPROTO((tree));\n+static rtx expand_builtin_va_copy\tPROTO((tree));\n static rtx expand_builtin_memcmp\tPROTO((tree, tree, rtx));\n static rtx expand_builtin_strcmp\tPROTO((tree, rtx));\n static rtx expand_builtin_memcpy\tPROTO((tree));\n@@ -1672,68 +1674,53 @@ expand_builtin_strcmp (exp, target)\n }\n #endif\n \n-/* Expand expression EXP, which is a call to __builtin_saveregs,\n-   generating the result in TARGET, if that's convenient.\n-   IGNORE is nonzero if the value is to be ignored.  */\n-static rtx\n-expand_builtin_saveregs (exp, target, ignore)\n-     tree exp;\n-     rtx target;\n-     int ignore;\n+/* Expand a call to __builtin_saveregs, generating the result in TARGET,\n+   if that's convenient.  */\n+rtx\n+expand_builtin_saveregs ()\n {\n-  enum machine_mode value_mode = TYPE_MODE (TREE_TYPE (exp));\n+  rtx val, seq;\n \n   /* Don't do __builtin_saveregs more than once in a function.\n      Save the result of the first call and reuse it.  */\n   if (saveregs_value != 0)\n     return saveregs_value;\n-  {\n-    /* When this function is called, it means that registers must be\n-       saved on entry to this function.  So we migrate the\n-       call to the first insn of this function.  */\n-    rtx temp;\n-    rtx seq;\n \n-    /* Now really call the function.  `expand_call' does not call\n-       expand_builtin, so there is no danger of infinite recursion here.  */\n-    start_sequence ();\n+  /* When this function is called, it means that registers must be\n+     saved on entry to this function.  So we migrate the call to the\n+     first insn of this function.  */\n+\n+  start_sequence ();\n \n #ifdef EXPAND_BUILTIN_SAVEREGS\n-    /* Do whatever the machine needs done in this case.  */\n-    temp = EXPAND_BUILTIN_SAVEREGS (arglist);\n+  /* Do whatever the machine needs done in this case.  */\n+  val = EXPAND_BUILTIN_SAVEREGS ();\n #else\n-    /* The register where the function returns its value\n-       is likely to have something else in it, such as an argument.\n-       So preserve that register around the call.  */\n-\n-    if (value_mode != VOIDmode)\n-      {\n-\trtx valreg = hard_libcall_value (value_mode);\n-\trtx saved_valreg = gen_reg_rtx (value_mode);\n-\n-\temit_move_insn (saved_valreg, valreg);\n-\ttemp = expand_call (exp, target, ignore);\n-\temit_move_insn (valreg, saved_valreg);\n-      }\n-    else\n-      /* Generate the call, putting the value in a pseudo.  */\n-      temp = expand_call (exp, target, ignore);\n+  /* ??? We used to try and build up a call to the out of line function,\n+     guessing about what registers needed saving etc.  This became much\n+     harder with __builtin_va_start, since we don't have a tree for a\n+     call to __builtin_saveregs to fall back on.  There was exactly one\n+     port (i860) that used this code, and I'm unconvinced it could actually\n+     handle the general case.  So we no longer try to handle anything\n+     weird and make the backend absorb the evil.  */\n+\n+  error (\"__builtin_saveregs not supported by this target\");\n+  val = const0_rtx;\n #endif\n \n-    seq = get_insns ();\n-    end_sequence ();\n+  seq = get_insns ();\n+  end_sequence ();\n \n-    saveregs_value = temp;\n+  saveregs_value = val;\n \n-    /* Put the sequence after the NOTE that starts the function.\n-       If this is inside a SEQUENCE, make the outer-level insn\n-       chain current, so the code is placed at the start of the\n-       function.  */\n-    push_topmost_sequence ();\n-    emit_insns_before (seq, NEXT_INSN (get_insns ()));\n-    pop_topmost_sequence ();\n-    return temp;\n-  }\n+  /* Put the sequence after the NOTE that starts the function.  If this\n+     is inside a SEQUENCE, make the outer-level insn chain current, so\n+     the code is placed at the start of the function.  */\n+  push_topmost_sequence ();\n+  emit_insns_after (seq, get_insns ());\n+  pop_topmost_sequence ();\n+\n+  return val;\n }\n \n /* __builtin_args_info (N) returns word N of the arg space info\n@@ -1785,18 +1772,17 @@ expand_builtin_args_info (exp)\n   result = build (CONSTRUCTOR, type, NULL_TREE, nreverse (elts));\n   TREE_CONSTANT (result) = 1;\n   TREE_STATIC (result) = 1;\n-  result = build (INDIRECT_REF, build_pointer_type (type), result);\n+  result = build1 (INDIRECT_REF, build_pointer_type (type), result);\n   TREE_CONSTANT (result) = 1;\n   return expand_expr (result, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD);\n #endif\n }\n \n-/* Expand expression EXP, which is a call to __builtin_next_arg.  */\n+/* Expand ARGLIST, from a call to __builtin_next_arg.  */\n static rtx\n-expand_builtin_next_arg (exp)\n-     tree exp;\n+expand_builtin_next_arg (arglist)\n+     tree arglist;\n {\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree fntype = TREE_TYPE (current_function_decl);\n \n   if ((TYPE_ARG_TYPES (fntype) == 0\n@@ -1836,6 +1822,230 @@ expand_builtin_next_arg (exp)\n \t\t       NULL_RTX, 0, OPTAB_LIB_WIDEN);\n }\n \n+/* Make it easier for the backends by protecting the valist argument\n+   from multiple evaluations.  */\n+\n+static tree\n+stabilize_va_list (valist, was_ptr)\n+     tree valist;\n+     int was_ptr;\n+{\n+  int is_array = TREE_CODE (va_list_type_node) == ARRAY_TYPE;\n+\n+  if (was_ptr)\n+    {\n+      /* If stdarg.h took the address of an array-type valist that was passed\n+         as a parameter, we'll have taken the address of the parameter itself\n+         rather than the array as we'd intended.  Undo this mistake.  */\n+      if (is_array\n+\t  && TREE_CODE (valist) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (valist, 0))) == POINTER_TYPE)\n+\tvalist = TREE_OPERAND (valist, 0);\n+\n+      if (TREE_SIDE_EFFECTS (valist))\n+\tvalist = save_expr (valist);\n+\n+      if (! is_array)\n+        valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n+    }\n+  else if (TREE_SIDE_EFFECTS (valist))\n+    {\n+      if (is_array)\n+\tvalist = save_expr (valist);\n+      else\n+\t{\n+          valist = build1 (ADDR_EXPR, build_pointer_type (va_list_type_node),\n+\t\t\t   valist);\n+\t  TREE_SIDE_EFFECTS (valist) = 1;\n+\t  valist = save_expr (valist);\n+\t  valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n+\t}\n+    }\n+\n+  return valist;\n+}\n+\n+/* The \"standard\" implementation of va_start: just assign `nextarg' to\n+   the variable.  */\n+void\n+std_expand_builtin_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p ATTRIBUTE_UNUSED;\n+     tree valist;\n+     rtx nextarg;\n+{\n+  tree t;\n+\n+  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t     make_tree (ptr_type_node, nextarg));\n+  TREE_SIDE_EFFECTS (t) = 1;\n+\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+}\n+\n+/* Expand ARGLIST, which from a call to __builtin_stdarg_va_start or\n+   __builtin_varargs_va_start, depending on STDARG_P.  */\n+static rtx\n+expand_builtin_va_start (stdarg_p, arglist)\n+     int stdarg_p;\n+     tree arglist;\n+{\n+  rtx nextarg;\n+  tree chain = arglist, valist;\n+\n+  if (stdarg_p)\n+    nextarg = expand_builtin_next_arg (chain = TREE_CHAIN (arglist));\n+  else\n+    nextarg = expand_builtin_next_arg (NULL_TREE);\n+\n+  if (TREE_CHAIN (chain))\n+    error (\"too many arguments to function `va_start'\");\n+\n+  valist = stabilize_va_list (TREE_VALUE (arglist), 1);\n+\n+#ifdef EXPAND_BUILTIN_VA_START\n+  EXPAND_BUILTIN_VA_START (stdarg_p, valist, nextarg);\n+#else\n+  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+#endif\n+\n+  return const0_rtx;\n+}\n+\n+/* Allocate an alias set for use in storing and reading from the varargs\n+   spill area.  */\n+int\n+get_varargs_alias_set ()\n+{\n+  static int set = -1;\n+  if (set == -1)\n+    set = new_alias_set ();\n+  return set;\n+}\n+\n+/* The \"standard\" implementation of va_arg: read the value from the\n+   current (padded) address and increment by the (padded) size.  */\n+rtx\n+std_expand_builtin_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  tree addr_tree, t;\n+  HOST_WIDE_INT align;\n+  HOST_WIDE_INT rounded_size;\n+  rtx addr;\n+\n+  /* Compute the rounded size of the type.  */\n+  align = PARM_BOUNDARY / BITS_PER_UNIT;\n+  rounded_size = (((TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT\n+\t\t    + align - 1) / align) * align);\n+\n+  /* Get AP.  */\n+  addr_tree = valist;\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      /* Small args are padded downward.  */\n+\n+      HOST_WIDE_INT adj;\n+      adj = TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT;\n+      if (rounded_size > align)\n+\tadj = rounded_size;\n+\n+      addr_tree = build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n+\t\t\t build_int_2 (rounded_size - adj, 0));\n+    }\n+\n+  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n+  addr = copy_to_reg (addr);\n+\n+  /* Compute new value for AP.  */\n+  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t     build (PLUS_EXPR, TREE_TYPE (valist), valist,\n+\t\t    build_int_2 (rounded_size, 0)));\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+  return addr;\n+}\n+\n+/* Expand __builtin_va_arg, which is not really a builtin function, but\n+   a very special sort of operator.  */\n+rtx\n+expand_builtin_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  rtx addr, result;\n+\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (valist))\n+      != TYPE_MAIN_VARIANT (va_list_type_node))\n+    {\n+      error (\"first argument to `__builtin_va_arg' not of type `va_list'\");\n+      addr = const0_rtx;\n+    }\n+  else\n+    {\n+      /* Make it easier for the backends by protecting the valist argument\n+         from multiple evaluations.  */\n+      valist = stabilize_va_list (valist, 0);\n+\n+#ifdef EXPAND_BUILTIN_VA_ARG\n+      addr = EXPAND_BUILTIN_VA_ARG (valist, type);\n+#else\n+      addr = std_expand_builtin_va_arg (valist, type);\n+#endif\n+    }\n+\n+  result = gen_rtx_MEM (TYPE_MODE (type), addr);\n+  MEM_ALIAS_SET (result) = get_varargs_alias_set ();\n+\n+  return result;\n+}\n+\n+/* Expand ARGLIST, from a call to __builtin_va_end.  */\n+static rtx\n+expand_builtin_va_end (arglist)\n+     tree arglist ATTRIBUTE_UNUSED;\n+{\n+#ifdef EXPAND_BUILTIN_VA_END\n+  tree valist = TREE_VALUE (arglist, 0);\n+  valist = stabilize_va_list (valist, 0);\n+  EXPAND_BUILTIN_VA_END(arglist);\n+#endif\n+\n+  return const0_rtx;\n+}\n+\n+/* Expand ARGLIST, from a call to __builtin_va_copy.  We do this as a \n+   builtin rather than just as an assignment in stdarg.h because of the\n+   nastiness of array-type va_list types.  */\n+static rtx\n+expand_builtin_va_copy (arglist)\n+     tree arglist;\n+{\n+  tree dst, src, t;\n+\n+  dst = TREE_VALUE (arglist);\n+  src = TREE_VALUE (TREE_CHAIN (arglist));\n+\n+  dst = stabilize_va_list (dst, 1);\n+  src = stabilize_va_list (src, 0);\n+\n+  if (TREE_CODE (va_list_type_node) != ARRAY_TYPE)\n+    {\n+      t = build (MODIFY_EXPR, va_list_type_node, dst, src);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n+  else\n+    {\n+      emit_block_move (expand_expr (dst, NULL_RTX, Pmode, EXPAND_NORMAL),\n+\t\t       expand_expr (src, NULL_RTX, Pmode, EXPAND_NORMAL),\n+\t\t       expand_expr (TYPE_SIZE (va_list_type_node), NULL_RTX,\n+\t\t\t\t    VOIDmode, EXPAND_NORMAL),\n+\t\t       TYPE_ALIGN (va_list_type_node) / BITS_PER_UNIT);\n+    }\n+\n+  return const0_rtx;\n+}\n+\n /* Expand a call to one of the builtin functions __builtin_frame_address or\n    __builtin_return_address.  */\n static rtx\n@@ -2031,14 +2241,14 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       return const0_rtx;\n \n     case BUILT_IN_SAVEREGS:\n-      return expand_builtin_saveregs (exp, target, ignore);\n+      return expand_builtin_saveregs ();\n \n     case BUILT_IN_ARGS_INFO:\n       return expand_builtin_args_info (exp);\n \n       /* Return the address of the first anonymous stack arg.  */\n     case BUILT_IN_NEXT_ARG:\n-      return expand_builtin_next_arg (exp);\n+      return expand_builtin_next_arg (arglist);\n \n     case BUILT_IN_CLASSIFY_TYPE:\n       return expand_builtin_classify_type (arglist);\n@@ -2186,6 +2396,14 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t\t\t\tTREE_VALUE (TREE_CHAIN (arglist)),\n \t\t\t\tTREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))));\n       return const0_rtx;\n+    case BUILT_IN_VARARGS_START:\n+      return expand_builtin_va_start (0, arglist);\n+    case BUILT_IN_STDARG_START:\n+      return expand_builtin_va_start (1, arglist);\n+    case BUILT_IN_VA_END:\n+      return expand_builtin_va_end (arglist);\n+    case BUILT_IN_VA_COPY:\n+      return expand_builtin_va_copy (arglist);\n \n     default:\t\t\t/* just do library call, if unknown builtin */\n       error (\"built-in function `%s' not currently supported\","}, {"sha": "50a27fee96b4f45eacea4c7de60274ce637de7ad", "filename": "gcc/c-common.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -3434,6 +3434,16 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   tree long_ftype_long;\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n+  tree va_list_ptr_type_node;\n+\n+#ifdef BUILD_VA_LIST_TYPE\n+  BUILD_VA_LIST_TYPE(va_list_type_node);\n+#else\n+  va_list_type_node = ptr_type_node;\n+#endif\n+  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n+\t\t\tva_list_type_node));\n+  va_list_ptr_type_node = build_pointer_type (va_list_type_node);\n \n   endlink = void_list_node;\n   int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n@@ -3608,6 +3618,37 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   builtin_function (\"__builtin_return\", void_ftype_ptr,\n \t\t    BUILT_IN_RETURN, NULL_PTR);\n \n+  /* Support for varargs.h and stdarg.h.  */\n+  builtin_function (\"__builtin_varargs_start\",\n+\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    endlink)),\n+\t\t    BUILT_IN_VARARGS_START, NULL_PTR);\n+\n+  builtin_function (\"__builtin_stdarg_start\",\n+\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    NULL_TREE)),\n+\t\t    BUILT_IN_STDARG_START, NULL_PTR);\n+\n+  builtin_function (\"__builtin_va_end\",\n+\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t    va_list_type_node,\n+\t\t\t\t\t\t    endlink)),\n+\t\t    BUILT_IN_VA_END, NULL_PTR);\n+\n+  builtin_function (\"__builtin_va_copy\",\n+\t\t    build_function_type (void_type_node,\n+\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t    va_list_ptr_type_node,\n+\t\t\t\t\t\t    tree_cons (NULL_TREE,\n+\t\t\t\t\t\t      va_list_type_node,\n+\t\t\t\t\t\t      endlink))),\n+\t\t    BUILT_IN_VA_COPY, NULL_PTR);\n+\n   /* Currently under experimentation.  */\n   builtin_function (\"__builtin_memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n \t\t    \"memcpy\");\n@@ -3712,3 +3753,10 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    NULL_PTR);\n #endif\n }\n+\n+tree\n+build_va_arg (expr, type)\n+     tree expr, type;\n+{\n+  return build1 (VA_ARG_EXPR, type, expr);\n+}"}, {"sha": "ec4a556a2e41505c0a8260c9d7c7cd3b2d43f75e", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -63,7 +63,6 @@ enum c_tree_index\n     CTI_STRING_TYPE,\n     CTI_CONST_STRING_TYPE,\n \n-    CTI_PTR_TYPE,\n     CTI_CONST_PTR_TYPE,\n     CTI_PTRDIFF_TYPE,\n \n@@ -126,7 +125,6 @@ extern tree c_global_trees[CTI_MAX];\n #define boolean_true_node\t\tc_global_trees[CTI_BOOLEAN_TRUE]\n #define boolean_false_node\t\tc_global_trees[CTI_BOOLEAN_FALSE]\n \n-#define ptr_type_node\t\t\tc_global_trees[CTI_PTR_TYPE]\n #define const_ptr_type_node\t\tc_global_trees[CTI_CONST_PTR_TYPE]\n #define ptrdiff_type_node\t\tc_global_trees[CTI_PTRDIFF_TYPE]\n \n@@ -190,3 +188,5 @@ extern tree builtin_function\t\t\tPROTO((const char *, tree, enum built_in_function\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n extern void c_common_nodes_and_builtins\t\tPROTO((int, int, int));\n+\n+extern tree build_va_arg\t\t\tPROTO((tree, tree));"}, {"sha": "fd573340e1eeca62daf9743f2666b227bcec415c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -119,6 +119,12 @@ tree char_type_node;\n tree integer_type_node;\n tree unsigned_type_node;\n \n+/* These can't be part of the above array, since they are declared\n+   individially in tree.h and used by the target routines.  */\n+\n+tree ptr_type_node;\n+tree va_list_type_node;\n+\n /* Two expressions that are constants with value zero.\n    The first is of type `int', the second of type `void *'.  */\n "}, {"sha": "481d402bb5d65591f98d646d263b51baa15e3776", "filename": "gcc/c-gperf.h", "status": "modified", "additions": 73, "deletions": 66, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -1,14 +1,14 @@\n-/* C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */\n+/* C code produced by gperf version 2.7 */\n+/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ../../../egcs/gcc/c-parse.gperf  */\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { const char *name; short token; enum rid rid; };\n \n-#define TOTAL_KEYWORDS 83\n+#define TOTAL_KEYWORDS 84\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 20\n #define MIN_HASH_VALUE 8\n-#define MAX_HASH_VALUE 141\n-/* maximum key range = 134, duplicates = 0 */\n+#define MAX_HASH_VALUE 173\n+/* maximum key range = 166, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -20,32 +20,32 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142,  35, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142,   1, 142,  90,   1,  28,\n-       40,   6,   1,  24,   3,  13, 142,  36,  60,  14,\n-       49,   3,   6, 142,  19,   8,   1,  50,  33,  11,\n-        2,  23,   4, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,\n-      142, 142, 142, 142, 142, 142\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174,  35, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174,   1, 174,  97,  19,  28,\n+       40,   6,   1,  53,   3,  13, 174,   5,  67,  18,\n+       49,   3,   6, 174,  19,   8,   1,   4,  33,   2,\n+        2,  23,   4, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n+      174, 174, 174, 174, 174, 174\n     };\n   register int hval = len;\n \n@@ -83,16 +83,16 @@ static struct resword wordlist[] =\n     {\"__imag__\", IMAGPART, NORID},\n     {\"else\", ELSE, NORID},\n     {\"__inline__\", SCSPEC, RID_INLINE},\n-    {\"byref\", TYPE_QUAL, RID_BYREF},\n+    {\"while\", WHILE, NORID},\n     {\"__iterator__\", SCSPEC, RID_ITERATOR},\n     {\"__inline\", SCSPEC, RID_INLINE},\n     {\"__real__\", REALPART, NORID},\n     {\"switch\", SWITCH, NORID},\n     {\"__restrict\", TYPE_QUAL, RID_RESTRICT},\n-    {\"goto\", GOTO, NORID},\n+    {\"enum\", ENUM, NORID},\n     {\"__restrict__\", TYPE_QUAL, RID_RESTRICT},\n     {\"struct\", STRUCT, NORID},\n-    {\"while\", WHILE, NORID},\n+    {\"break\", BREAK, NORID},\n     {\"restrict\", TYPE_QUAL, RID_RESTRICT},\n     {\"__const\", TYPE_QUAL, RID_CONST},\n     {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n@@ -101,20 +101,21 @@ static struct resword wordlist[] =\n     {\"__complex__\", TYPESPEC, RID_COMPLEX},\n     {\"for\", FOR, NORID},\n     {\"__iterator\", SCSPEC, RID_ITERATOR},\n-    {\"__imag\", IMAGPART, NORID},\n+    {\"byref\", TYPE_QUAL, RID_BYREF},\n     {\"do\", DO, NORID},\n     {\"case\", CASE, NORID},\n     {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n-    {\"break\", BREAK, NORID},\n+    {\"\", 0, 0},\n     {\"default\", DEFAULT, NORID},\n     {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"@defs\", DEFS, NORID},\n     {\"id\", OBJECTNAME, RID_ID},\n-    {\"\", 0, 0},\n+    {\"double\", TYPESPEC, RID_DOUBLE},\n     {\"__signed\", TYPESPEC, RID_SIGNED},\n-    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n+    {\"goto\", GOTO, NORID},\n     {\"extern\", SCSPEC, RID_EXTERN},\n     {\"\", 0, 0},\n     {\"in\", TYPE_QUAL, RID_IN},\n@@ -123,53 +124,59 @@ static struct resword wordlist[] =\n     {\"\", 0, 0},\n     {\"@private\", PRIVATE, NORID},\n     {\"@selector\", SELECTOR, NORID},\n-    {\"register\", SCSPEC, RID_REGISTER},\n-    {\"__label__\", LABEL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"enum\", ENUM, NORID},\n+    {\"\", 0, 0},\n+    {\"union\", UNION, NORID},\n+    {\"\", 0, 0},\n+    {\"__imag\", IMAGPART, NORID},\n+    {\"@public\", PUBLIC, NORID},\n     {\"return\", RETURN, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"signed\", TYPESPEC, RID_SIGNED},\n+    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n+    {\"\", 0, 0},\n+    {\"__label__\", LABEL, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"const\", TYPE_QUAL, RID_CONST},\n-    {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__builtin_va_arg\", VA_ARG, NORID},\n+    {\"void\", TYPESPEC, RID_VOID},\n+    {\"continue\", CONTINUE, NORID},\n     {\"inline\", SCSPEC, RID_INLINE},\n     {\"__real\", REALPART, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"void\", TYPESPEC, RID_VOID},\n-    {\"continue\", CONTINUE, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"@encode\", ENCODE, NORID},\n+    {\"\", 0, 0},\n+    {\"register\", SCSPEC, RID_REGISTER},\n+    {\"@interface\", INTERFACE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"@protected\", PROTECTED, NORID},\n     {\"auto\", SCSPEC, RID_AUTO},\n     {\"__asm__\", ASM_KEYWORD, NORID},\n-    {\"@interface\", INTERFACE, NORID},\n+    {\"signed\", TYPESPEC, RID_SIGNED},\n     {\"__alignof\", ALIGNOF, NORID},\n-    {\"double\", TYPESPEC, RID_DOUBLE},\n+    {\"\", 0, 0},\n     {\"__alignof__\", ALIGNOF, NORID},\n-    {\"@protected\", PROTECTED, NORID},\n+    {\"\", 0, 0},\n     {\"__attribute__\", ATTRIBUTE, NORID},\n-    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n+    {\"\", 0, 0},\n     {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n     {\"__attribute\", ATTRIBUTE, NORID},\n     {\"@class\", CLASS, NORID},\n-    {\"__asm\", ASM_KEYWORD, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n     {\"@implementation\", IMPLEMENTATION, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"union\", UNION, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@public\", PUBLIC, NORID},\n-    {\"asm\", ASM_KEYWORD, NORID},\n+    {\"__asm\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"@end\", END, NORID},\n     {\"\", 0, 0},\n     {\"@protocol\", PROTOCOL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"@end\", END, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"asm\", ASM_KEYWORD, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n     {\"static\", SCSPEC, RID_STATIC},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"long\", TYPESPEC, RID_LONG},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"char\", TYPESPEC, RID_CHAR}\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"char\", TYPESPEC, RID_CHAR},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"long\", TYPESPEC, RID_LONG}\n   };\n \n #ifdef __GNUC__"}, {"sha": "264148724188202fe51bc7b4c5a5798f48cc2741", "filename": "gcc/c-parse.c", "status": "modified", "additions": 1625, "deletions": 1520, "changes": 3145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021"}, {"sha": "604cb64b0c29d124b1d26797be0f758bf9660698", "filename": "gcc/c-parse.gperf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.gperf?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -21,6 +21,7 @@ __asm, ASM_KEYWORD, NORID\n __asm__, ASM_KEYWORD, NORID\n __attribute, ATTRIBUTE, NORID\n __attribute__, ATTRIBUTE, NORID\n+__builtin_va_arg, VA_ARG, NORID\n __complex, TYPESPEC, RID_COMPLEX\n __complex__, TYPESPEC, RID_COMPLEX\n __const, TYPE_QUAL, RID_CONST"}, {"sha": "838530ea8f3f8cc35a9b6c9a9c19bb4140b5689e", "filename": "gcc/c-parse.h", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.h?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -1,37 +1,38 @@\n typedef union {long itype; tree ttype; enum tree_code code;\n \tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n-#define\tIDENTIFIER\t258\n-#define\tTYPENAME\t259\n-#define\tSCSPEC\t260\n-#define\tTYPESPEC\t261\n-#define\tTYPE_QUAL\t262\n-#define\tCONSTANT\t263\n-#define\tSTRING\t264\n-#define\tELLIPSIS\t265\n-#define\tSIZEOF\t266\n-#define\tENUM\t267\n-#define\tSTRUCT\t268\n-#define\tUNION\t269\n-#define\tIF\t270\n-#define\tELSE\t271\n-#define\tWHILE\t272\n-#define\tDO\t273\n-#define\tFOR\t274\n-#define\tSWITCH\t275\n-#define\tCASE\t276\n-#define\tDEFAULT\t277\n-#define\tBREAK\t278\n-#define\tCONTINUE\t279\n-#define\tRETURN\t280\n-#define\tGOTO\t281\n-#define\tASM_KEYWORD\t282\n-#define\tTYPEOF\t283\n-#define\tALIGNOF\t284\n-#define\tATTRIBUTE\t285\n-#define\tEXTENSION\t286\n-#define\tLABEL\t287\n-#define\tREALPART\t288\n-#define\tIMAGPART\t289\n+#define\tIDENTIFIER\t257\n+#define\tTYPENAME\t258\n+#define\tSCSPEC\t259\n+#define\tTYPESPEC\t260\n+#define\tTYPE_QUAL\t261\n+#define\tCONSTANT\t262\n+#define\tSTRING\t263\n+#define\tELLIPSIS\t264\n+#define\tSIZEOF\t265\n+#define\tENUM\t266\n+#define\tSTRUCT\t267\n+#define\tUNION\t268\n+#define\tIF\t269\n+#define\tELSE\t270\n+#define\tWHILE\t271\n+#define\tDO\t272\n+#define\tFOR\t273\n+#define\tSWITCH\t274\n+#define\tCASE\t275\n+#define\tDEFAULT\t276\n+#define\tBREAK\t277\n+#define\tCONTINUE\t278\n+#define\tRETURN\t279\n+#define\tGOTO\t280\n+#define\tASM_KEYWORD\t281\n+#define\tTYPEOF\t282\n+#define\tALIGNOF\t283\n+#define\tATTRIBUTE\t284\n+#define\tEXTENSION\t285\n+#define\tLABEL\t286\n+#define\tREALPART\t287\n+#define\tIMAGPART\t288\n+#define\tVA_ARG\t289\n #define\tASSIGN\t290\n #define\tOROR\t291\n #define\tANDAND\t292"}, {"sha": "45e93758f848ceefb264fb6a3d2f2478ed6aa126", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -136,7 +136,7 @@ end ifc\n %token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT\n %token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF\n %token ATTRIBUTE EXTENSION LABEL\n-%token REALPART IMAGPART\n+%token REALPART IMAGPART VA_ARG\n \n /* Add precedence rules to solve dangling else s/r conflict */\n %nonassoc IF\n@@ -500,6 +500,8 @@ unary_expr:\n \t\t{ $$ = build_unary_op (REALPART_EXPR, $2, 0); }\n \t| IMAGPART cast_expr %prec UNARY\n \t\t{ $$ = build_unary_op (IMAGPART_EXPR, $2, 0); }\n+\t| VA_ARG '(' expr_no_commas ',' typename ')'\n+\t\t{ $$ = build_va_arg ($3, groktypename ($5)); }\n \t;\n \n sizeof:"}, {"sha": "97328542da2192d8a8ac030b3b1662dc9edcaf36", "filename": "gcc/c-parse.y", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -124,7 +124,7 @@ char *language_string = \"GNU C\";\n %token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT\n %token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF\n %token ATTRIBUTE EXTENSION LABEL\n-%token REALPART IMAGPART\n+%token REALPART IMAGPART VA_ARG\n \n /* Add precedence rules to solve dangling else s/r conflict */\n %nonassoc IF\n@@ -455,6 +455,8 @@ unary_expr:\n \t\t{ $$ = build_unary_op (REALPART_EXPR, $2, 0); }\n \t| IMAGPART cast_expr %prec UNARY\n \t\t{ $$ = build_unary_op (IMAGPART_EXPR, $2, 0); }\n+\t| VA_ARG '(' expr_no_commas ',' typename ')'\n+\t\t{ $$ = build_va_arg ($3, groktypename ($5)); }\n \t;\n \n sizeof:"}, {"sha": "b23ae990dbe4d226ffd2db38c82ee8a4fc94c9b8", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -1296,6 +1296,7 @@ operand_subword (op, i, validate_address, mode)\n \n       MEM_COPY_ATTRIBUTES (new, op);\n       RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (op);\n+      MEM_ALIAS_SET (new) = MEM_ALIAS_SET (op);\n \n       return new;\n     }\n@@ -1598,6 +1599,7 @@ change_address (memref, mode, addr)\n   new = gen_rtx_MEM (mode, addr);\n   RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (memref);\n   MEM_COPY_ATTRIBUTES (new, memref);\n+  MEM_ALIAS_SET (new) = MEM_ALIAS_SET (memref);\n   return new;\n }\n \f"}, {"sha": "e22c1df9a2e977d7a13f8d35a1396a1dab5b8150", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -8240,6 +8240,9 @@ expand_expr (exp, target, tmode, modifier)\n \treturn const0_rtx;\n       }\n \n+    case VA_ARG_EXPR:\n+      return expand_builtin_va_arg (TREE_OPERAND (exp, 0), type);\n+\n     default:\n       return (*lang_expand_expr) (exp, original_target, tmode, modifier);\n     }"}, {"sha": "7f1396d7d7021c729d10cca79730f1c0a366d39a", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -738,9 +738,14 @@ extern rtx gen_cond_trap PROTO((enum rtx_code, rtx, rtx, rtx));\n /* Functions from builtins.c:  */\n #ifdef TREE_CODE\n extern rtx expand_builtin PROTO((tree, rtx, rtx, enum machine_mode, int));\n+extern void std_expand_builtin_va_start PROTO((int, tree, rtx));\n+extern rtx std_expand_builtin_va_arg PROTO((tree, tree));\n+extern rtx expand_builtin_va_arg PROTO((tree, tree));\n #endif\n \n extern rtx expand_builtin_setjmp PROTO((rtx, rtx, rtx, rtx));\n+extern rtx expand_builtin_saveregs PROTO((void));\n+extern int get_varargs_alias_set PROTO((void));\n \f\n /* Functions from expr.c:  */\n "}, {"sha": "736ba4a2732120afbf5ac30e15375a05be294bd4", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -3734,19 +3734,13 @@ These machine description macros help implement varargs:\n \n @table @code\n @findex EXPAND_BUILTIN_SAVEREGS\n-@item EXPAND_BUILTIN_SAVEREGS (@var{args})\n+@item EXPAND_BUILTIN_SAVEREGS ()\n If defined, is a C expression that produces the machine-specific code\n for a call to @code{__builtin_saveregs}.  This code will be moved to the\n very beginning of the function, before any parameter access are made.\n The return value of this function should be an RTX that contains the\n value to use as the return of @code{__builtin_saveregs}.\n \n-The argument @var{args} is a @code{tree_list} containing the arguments\n-that were passed to @code{__builtin_saveregs}.\n-\n-If this macro is not defined, the compiler will output an ordinary\n-call to the library function @samp{__builtin_saveregs}.\n-\n @findex SETUP_INCOMING_VARARGS\n @item SETUP_INCOMING_VARARGS (@var{args_so_far}, @var{mode}, @var{type}, @var{pretend_args_size}, @var{second_time})\n This macro offers an alternative to using @code{__builtin_saveregs} and"}, {"sha": "af50d7bc2ae36bcb16d703a806efd612ceb9ab18", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -701,6 +701,9 @@ DEFTREECODE (PREINCREMENT_EXPR, \"preincrement_expr\", 'e', 2)\n DEFTREECODE (POSTDECREMENT_EXPR, \"postdecrement_expr\", 'e', 2)\n DEFTREECODE (POSTINCREMENT_EXPR, \"postincrement_expr\", 'e', 2)\n \n+/* Used to implement `va_arg'.  */\n+DEFTREECODE (VA_ARG_EXPR, \"va_arg_expr\", 'e', 1)\n+\n /* Evaluate operand 1.  If and only if an exception is thrown during\n    the evaluation of operand 1, evaluate operand 2.\n "}, {"sha": "b16d73e398680f95a32b4798d6479ffd4407d484", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3707adb795a1ff514921029b3d4d1fec73cd021/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d3707adb795a1ff514921029b3d4d1fec73cd021", "patch": "@@ -117,6 +117,11 @@ enum built_in_function\n   BUILT_IN_EXTRACT_RETURN_ADDR,\n   BUILT_IN_EH_RETURN,\n \n+  BUILT_IN_VARARGS_START,\n+  BUILT_IN_STDARG_START,\n+  BUILT_IN_VA_END,\n+  BUILT_IN_VA_COPY,\n+\n   /* C++ extensions */\n   BUILT_IN_NEW,\n   BUILT_IN_VEC_NEW,\n@@ -1854,6 +1859,11 @@ extern tree unsigned_type_node;\n /* The type node for the ordinary character type.  */\n extern tree char_type_node;\n \n+extern tree ptr_type_node;\n+\n+/* Type `va_list'.  Used by va_start, va_arg, etc.  */\n+extern tree va_list_type_node;\n+\n /* Points to the name of the input file from which the current input\n    being parsed originally came (before it went into cpp).  */\n extern char *input_filename;"}]}