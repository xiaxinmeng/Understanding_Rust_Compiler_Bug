{"sha": "e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "node_id": "C_kwDOANBUbNoAKGU5OTEwNjVmZGJlZTkwMWQ0YmZlM2FmODllMGQ0OTdlNzRkY2M3ZDM", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-07-29T04:35:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:25Z"}, "message": "rust-constexpr.cc: port over cxx_eval_switch_expr", "tree": {"sha": "52b131e172be05cdfd75ec3f60ba805a117201d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b131e172be05cdfd75ec3f60ba805a117201d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e991065fdbee901d4bfe3af89e0d497e74dcc7d3/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "127451e5966be67de8372129b8f2e09c6e26745e", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e991065fdbee901d4bfe3af89e0d497e74dcc7d3/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e991065fdbee901d4bfe3af89e0d497e74dcc7d3/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "patch": "@@ -497,6 +497,10 @@ static tree\n eval_loop_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n \t\tbool *overflow_p, tree *jump_target);\n \n+static tree\n+eval_switch_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n+\t\t  bool *overflow_p, tree *jump_target);\n+\n /* Variables and functions to manage constexpr call expansion context.\n    These do not need to be marked for PCH or GC.  */\n \n@@ -741,6 +745,11 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n       eval_loop_expr (ctx, t, non_constant_p, overflow_p, jump_target);\n       break;\n \n+    case SWITCH_EXPR:\n+    case SWITCH_STMT:\n+      eval_switch_expr (ctx, t, non_constant_p, overflow_p, jump_target);\n+      break;\n+\n     case BIT_FIELD_REF:\n       r = eval_bit_field_ref (ctx, t, lval, non_constant_p, overflow_p);\n       break;\n@@ -2771,6 +2780,8 @@ eval_bit_field_ref (const constexpr_ctx *ctx, tree t, bool lval,\n   return error_mark_node;\n }\n \n+// forked from gcc/cp/constexpr.cc returns\n+\n /* Predicates for the meaning of *jump_target.  */\n \n static bool\n@@ -2782,6 +2793,8 @@ returns (tree *jump_target)\n \t\t && LABEL_DECL_CDTOR (*jump_target)));\n }\n \n+// forked from gcc/cp/constexpr.cc breaks\n+\n static bool\n breaks (tree *jump_target)\n {\n@@ -2792,6 +2805,8 @@ breaks (tree *jump_target)\n \t     || TREE_CODE (*jump_target) == EXIT_EXPR);\n }\n \n+// forked from gcc/cp/constexpr.cc continues\n+\n static bool\n continues (tree *jump_target)\n {\n@@ -2801,12 +2816,16 @@ continues (tree *jump_target)\n \t     || TREE_CODE (*jump_target) == CONTINUE_STMT);\n }\n \n+// forked from gcc/cp/constexpr.cc switches\n+\n static bool\n switches (tree *jump_target)\n {\n   return *jump_target && TREE_CODE (*jump_target) == INTEGER_CST;\n }\n \n+// forked from gcc/cp/constexpr.cc cxx_eval_loop_expr\n+\n /* Evaluate a LOOP_EXPR for side-effects.  Handles break and return\n    semantics; continue semantics are covered by cxx_eval_statement_list.  */\n \n@@ -2914,6 +2933,43 @@ eval_loop_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n   return NULL_TREE;\n }\n \n+// forked from gcc/cp/constexpr.cc cxx_eval_switch_expr\n+\n+/* Evaluate a SWITCH_EXPR for side-effects.  Handles switch and break jump\n+   semantics.  */\n+\n+static tree\n+eval_switch_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n+\t\t  bool *overflow_p, tree *jump_target)\n+{\n+  tree cond\n+    = TREE_CODE (t) == SWITCH_STMT ? SWITCH_STMT_COND (t) : SWITCH_COND (t);\n+  cond\n+    = eval_constant_expression (ctx, cond, false, non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (cond);\n+  *jump_target = cond;\n+\n+  tree body\n+    = TREE_CODE (t) == SWITCH_STMT ? SWITCH_STMT_BODY (t) : SWITCH_BODY (t);\n+  constexpr_ctx new_ctx = *ctx;\n+  constexpr_switch_state css = css_default_not_seen;\n+  new_ctx.css_state = &css;\n+  eval_constant_expression (&new_ctx, body, false, non_constant_p, overflow_p,\n+\t\t\t    jump_target);\n+  if (switches (jump_target) && css == css_default_seen)\n+    {\n+      /* If the SWITCH_EXPR body has default: label, process it once again,\n+\t this time instructing label_matches to return true for default:\n+\t label on switches (jump_target).  */\n+      css = css_default_processing;\n+      eval_constant_expression (&new_ctx, body, false, non_constant_p,\n+\t\t\t\toverflow_p, jump_target);\n+    }\n+  if (breaks (jump_target) || switches (jump_target))\n+    *jump_target = NULL_TREE;\n+  return NULL_TREE;\n+}\n+\n // #include \"gt-rust-rust-constexpr.h\"\n \n } // namespace Compile"}, {"sha": "757b721791fa7cfac13da45936c324a1fe5dc218", "filename": "gcc/rust/backend/rust-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e991065fdbee901d4bfe3af89e0d497e74dcc7d3/gcc%2Frust%2Fbackend%2Frust-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e991065fdbee901d4bfe3af89e0d497e74dcc7d3/gcc%2Frust%2Fbackend%2Frust-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.h?ref=e991065fdbee901d4bfe3af89e0d497e74dcc7d3", "patch": "@@ -1352,6 +1352,11 @@ extern GTY (()) tree cp_global_trees[CPTI_MAX];\n #define FOR_BODY(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 3)\n #define FOR_SCOPE(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 4)\n \n+#define SWITCH_STMT_COND(NODE) TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)\n+#define SWITCH_STMT_BODY(NODE) TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n+#define SWITCH_STMT_TYPE(NODE) TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n+#define SWITCH_STMT_SCOPE(NODE) TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 3)\n+\n /* Nonzero if NODE is the target for genericization of 'break' stmts.  */\n #define LABEL_DECL_BREAK(NODE) DECL_LANG_FLAG_0 (LABEL_DECL_CHECK (NODE))\n "}]}