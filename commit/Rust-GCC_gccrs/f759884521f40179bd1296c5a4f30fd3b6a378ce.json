{"sha": "f759884521f40179bd1296c5a4f30fd3b6a378ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1OTg4NDUyMWY0MDE3OWJkMTI5NmM1YTRmMzBmZDNiNmEzNzhjZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-11-25T18:16:57Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-11-25T18:16:57Z"}, "message": "make_sunver.pl: Use elfdump -s to extract symbols if possible, readelf -s otherwise.\n\n\t* make_sunver.pl: Use elfdump -s to extract symbols if possible,\n\treadelf -s otherwise.\n\nFrom-SVN: r167149", "tree": {"sha": "d60a8f039415ca3d7441c0fa3b38d2ef4766be7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60a8f039415ca3d7441c0fa3b38d2ef4766be7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f759884521f40179bd1296c5a4f30fd3b6a378ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f759884521f40179bd1296c5a4f30fd3b6a378ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f759884521f40179bd1296c5a4f30fd3b6a378ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f759884521f40179bd1296c5a4f30fd3b6a378ce/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01e512e27c88362c0be9e76617a026babeaff603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e512e27c88362c0be9e76617a026babeaff603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e512e27c88362c0be9e76617a026babeaff603"}], "stats": {"total": 129, "additions": 101, "deletions": 28}, "files": [{"sha": "1737cc8d264f67a9ce2c8c3af7e0a2c9d5b31d96", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759884521f40179bd1296c5a4f30fd3b6a378ce/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759884521f40179bd1296c5a4f30fd3b6a378ce/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f759884521f40179bd1296c5a4f30fd3b6a378ce", "patch": "@@ -1,3 +1,8 @@\n+2010-11-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* make_sunver.pl: Use elfdump -s to extract symbols if possible,\n+\treadelf -s otherwise.\n+\n 2010-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* make_sunver.pl: Ignore entries without symbol name first.  Then do"}, {"sha": "b3abd8addac49d1fb02d494c580c3b9669b1340f", "filename": "contrib/make_sunver.pl", "status": "modified", "additions": 96, "deletions": 28, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759884521f40179bd1296c5a4f30fd3b6a378ce/contrib%2Fmake_sunver.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759884521f40179bd1296c5a4f30fd3b6a378ce/contrib%2Fmake_sunver.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmake_sunver.pl?ref=f759884521f40179bd1296c5a4f30fd3b6a378ce", "patch": "@@ -12,8 +12,7 @@\n # A comment with the original pattern and its type is left in the output\n # file to make it easy to understand the matches.\n #\n-# It expects a 'nm' with the POSIX '-P' option, but everyone has one of\n-# those, right?\n+# It uses elfdump when present (native), GNU readelf otherwise.\n # It depends on the GNU version of c++filt, since it must understand the\n # GNU mangling style.\n \n@@ -46,35 +45,104 @@\n     }\n }\n \n-# The nm command to use.\n-my $nm = $ENV{'NM_FOR_TARGET'} || \"nm\";\n+# We need to detect and ignore hidden symbols.  Solaris nm can only detect\n+# this in the harder to parse default output format, and GNU nm not at all,\n+# so use elfdump -s in the native case and GNU readelf -s otherwise.\n+# GNU objdump -t cannot be used since it produces a variable number of\n+# columns.\n \n-# Process each symbol.\n-open NM,$nm.' -P '.(join ' ',@OBJECTS).'|' or die $!;\n-while (<NM>) {\n-    my $i;\n-    chomp;\n+# The path to elfdump.\n+my $elfdump = \"/usr/ccs/bin/elfdump\";\n+\n+if (-f $elfdump) {\n+    open ELFDUMP,$elfdump.' -s '.(join ' ',@OBJECTS).'|' or die $!;\n+    my $skip_arsym = 0;\n+\n+    while (<ELFDUMP>) {\n+\tchomp;\n+\n+\t# Ignore empty lines.\n+\tif (/^$/) {\n+\t    # End of archive symbol table, stop skipping.\n+\t    $skip_arsym = 0 if $skip_arsym;\n+\t    next;\n+\t}\n+\n+\t# Keep skipping until end of archive symbol table.\n+\tnext if ($skip_arsym);\n+\n+\t# Ignore object name header for individual objects and archives.\n+\tnext if (/:$/);\n+\n+\t# Ignore table header lines.\n+\tnext if (/^Symbol Table Section:/);\n+\tnext if (/index.*value.*size/);\n \n-    # nm prints out stuff at the start, ignore it.\n-    next if (/^$/);\n-    next if (/:$/);\n-    # Ignore entries without symbol name.  Sun nm emits those for local, .bss\n-    # or scratch register (SPARC only) symbols for example.\n-    next if (/^ /);\n-    # Ignore undefined and local symbols.\n-    next if (/^[^ ]+[ \\t]+[Ua-z][ \\t]+/);\n-    # Ignore objects without symbol table.  Message goes to stdout with Sun\n-    # nm, while GNU nm emits the corresponding message to stderr.\n-    next if (/.* - No symbol table data/);\n-\n-    # $sym is the name of the symbol.\n-    die \"unknown nm output $_\" if (! /^([^ ]+)[ \\t]+[A-Z][ \\t]+/);\n-    my $sym = $1;\n-\n-    # Remember symbol.\n-    $sym_hash{$sym}++;\n+\t# Start of archive symbol table: start skipping.\n+\tif (/^Symbol Table: \\(archive/) {\n+\t    $skip_arsym = 1;\n+\t    next;\n+\t}\n+\n+\t# Split table.\n+\t(undef, undef, undef, undef, $bind, $oth, undef, $shndx, $name) = split;\n+\n+\t# Error out for unknown input.\n+\tdie \"unknown input line:\\n$_\" unless defined($bind);\n+\n+\t# Ignore local symbols.\n+\tnext if ($bind eq \"LOCL\");\n+\t# Ignore hidden symbols.\n+\tnext if ($oth eq \"H\");\n+\t# Ignore undefined symbols.\n+\tnext if ($shndx eq \"UNDEF\");\n+\t# Error out for unhandled cases.\n+\tif ($bind !~ /^(GLOB|WEAK)/ or $oth ne \"D\") {\n+\t    die \"unhandled symbol:\\n$_\";\n+\t}\n+\n+\t# Remember symbol.\n+\t$sym_hash{$name}++;\n+    }\n+    close ELFDUMP or die \"$elfdump error\";\n+} else {\n+    open READELF, 'readelf -s -W '.(join ' ',@OBJECTS).'|' or die $!;\n+    # Process each symbol.\n+    while (<READELF>) {\n+\tchomp;\n+\n+\t# Ignore empty lines.\n+\tnext if (/^$/);\n+\n+\t# Ignore object name header.\n+\tnext if (/^File: .*$/);\n+\n+\t# Ignore table header lines.\n+\tnext if (/^Symbol table.*contains.*:/);\n+\tnext if (/Num:.*Value.*Size/);\n+\n+\t# Split table.\n+\t(undef, undef, undef, undef, $bind, $vis, $ndx, $name) = split;\n+\n+\t# Error out for unknown input.\n+\tdie \"unknown input line:\\n$_\" unless defined($bind);\n+\n+\t# Ignore local symbols.\n+\tnext if ($bind eq \"LOCAL\");\n+\t# Ignore hidden symbols.\n+\tnext if ($vis eq \"HIDDEN\");\n+\t# Ignore undefined symbols.\n+\tnext if ($ndx eq \"UND\");\n+\t# Error out for unhandled cases.\n+\tif ($bind !~ /^(GLOBAL|WEAK)/ or $vis ne \"DEFAULT\") {\n+\t    die \"unhandled symbol:\\n$_\";\n+\t}\n+\n+\t# Remember symbol.\n+\t$sym_hash{$name}++;\n+    }\n+    close READELF or die \"readelf error\";\n }\n-close NM or die \"nm error\";\n \n ##########\n # The various types of glob patterns."}]}