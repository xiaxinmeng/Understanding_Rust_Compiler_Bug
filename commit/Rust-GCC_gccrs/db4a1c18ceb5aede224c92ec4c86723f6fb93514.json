{"sha": "db4a1c18ceb5aede224c92ec4c86723f6fb93514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0YTFjMThjZWI1YWVkZTIyNGM5MmVjNGM4NjcyM2Y2ZmI5MzUxNA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-11-14T11:51:33Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-11-14T11:51:33Z"}, "message": "The existing vector costs stop some beneficial vectorization.\n\nThe existing vector costs stop some beneficial vectorization.  This is mostly\ndue to vector statement cost being set to 3 as well as vector loads having a\nhigher cost than scalar loads.  This means that even when we vectorize 4x, it\nis possible that the cost of a vectorized loop is similar to the scalar\nversion, and we fail to vectorize.\n\nUsing a cost of 3 for a vector operation suggests they are 3 times as\nexpensive as scalar operations.  Since most vector operations have a \nsimilar throughput as scalar operations, this is not correct.\n\nUsing slightly lower values for these heuristics now allows this loop\nand many others to be vectorized.  On a proprietary benchmark the gain\nfrom vectorizing this loop is around 15-30% which shows vectorizing it is\nindeed beneficial.\n\n\t* config/aarch64/aarch64.c (cortexa57_vector_cost):\n\tChange vec_stmt_cost, vec_align_load_cost and vec_unalign_load_cost.\n\nFrom-SVN: r242383", "tree": {"sha": "4db5c2ad9238d945e3706325100f5638472d8299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db5c2ad9238d945e3706325100f5638472d8299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4a1c18ceb5aede224c92ec4c86723f6fb93514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4a1c18ceb5aede224c92ec4c86723f6fb93514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4a1c18ceb5aede224c92ec4c86723f6fb93514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4a1c18ceb5aede224c92ec4c86723f6fb93514/comments", "author": null, "committer": null, "parents": [{"sha": "725bbb80d69c0c0c72b2e83100f6c57dbf38e3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725bbb80d69c0c0c72b2e83100f6c57dbf38e3e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725bbb80d69c0c0c72b2e83100f6c57dbf38e3e2"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "b3967a245dea075e7dfa7dd55625c83512ecf110", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a1c18ceb5aede224c92ec4c86723f6fb93514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a1c18ceb5aede224c92ec4c86723f6fb93514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db4a1c18ceb5aede224c92ec4c86723f6fb93514", "patch": "@@ -1,3 +1,8 @@\n+2016-11-14  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (cortexa57_vector_cost):\n+\tChange vec_stmt_cost, vec_align_load_cost and vec_unalign_load_cost.\n+\n 2016-11-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78312"}, {"sha": "bd97c5b701cacc1ccc8481b5249ab657f1258be6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a1c18ceb5aede224c92ec4c86723f6fb93514/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a1c18ceb5aede224c92ec4c86723f6fb93514/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=db4a1c18ceb5aede224c92ec4c86723f6fb93514", "patch": "@@ -398,12 +398,12 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n   1, /* scalar_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  3, /* vec_stmt_cost  */\n+  2, /* vec_stmt_cost  */\n   3, /* vec_permute_cost  */\n   8, /* vec_to_scalar_cost  */\n   8, /* scalar_to_vec_cost  */\n-  5, /* vec_align_load_cost  */\n-  5, /* vec_unalign_load_cost  */\n+  4, /* vec_align_load_cost  */\n+  4, /* vec_unalign_load_cost  */\n   1, /* vec_unalign_store_cost  */\n   1, /* vec_store_cost  */\n   1, /* cond_taken_branch_cost  */"}]}