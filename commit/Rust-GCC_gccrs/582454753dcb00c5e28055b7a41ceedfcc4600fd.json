{"sha": "582454753dcb00c5e28055b7a41ceedfcc4600fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyNDU0NzUzZGNiMDBjNWUyODA1NWI3YTQxY2VlZGZjYzQ2MDBmZA==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-17T23:54:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-17T23:54:22Z"}, "message": "errno.h: New file.\n\n\n\t* tests/base/errno.h: New file.\n\t* tests/base/architecture/ppc/math.h: Likewise.\n\t* tests/base/ia64/sys/getppdp.h: Likewise.\n\nFrom-SVN: r115534", "tree": {"sha": "e03944b53e57fbc5895d0c598d7c87f48ae2ce21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e03944b53e57fbc5895d0c598d7c87f48ae2ce21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582454753dcb00c5e28055b7a41ceedfcc4600fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582454753dcb00c5e28055b7a41ceedfcc4600fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582454753dcb00c5e28055b7a41ceedfcc4600fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582454753dcb00c5e28055b7a41ceedfcc4600fd/comments", "author": null, "committer": null, "parents": [{"sha": "dc5abe77090e91e603d7c72cc652c7d48b830a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5abe77090e91e603d7c72cc652c7d48b830a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5abe77090e91e603d7c72cc652c7d48b830a18"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "3db9210599e806121dd8aa1441a8ec1ff749a760", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=582454753dcb00c5e28055b7a41ceedfcc4600fd", "patch": "@@ -1,7 +1,13 @@\n+2006-07-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tests/base/errno.h: New file.\n+\t* tests/base/architecture/ppc/math.h: Likewise.\n+\t* tests/base/ia64/sys/getppdp.h: Likewise.\n+\n 2006-07-10  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \tPR bootstrap/20437\n-\t* Makefile.in (configure, config.h.in): change into $(srcdir)\n+\t* Makefile.in (configure, config.h.in): Change into $(srcdir)\n \tbefore autoconf or autoheader call.\n \n 2006-06-23  Steve Ellcey  <sje@cup.hp.com>\n@@ -46,8 +52,9 @@\n \n 2005-11-24  Bruce Korb  <bkorb@gnu.org>\n \n-\t* fixincl.c(write_replacement) \"here strings\" in AutoGen often/generally\n-\tdon't have a terminating newline.  Check the last byte for '\\n'.\n+\t* fixincl.c (write_replacement): \"here strings\" in AutoGen\n+\toften/generally don't have a terminating newline.  Check the\n+\tlast byte for '\\n'.\n \n 2005-11-13  Andreas Jaeger  <aj@suse.de>\n "}, {"sha": "dcd04236bc987924b5a66183f20dc517fcbe326d", "filename": "fixincludes/tests/base/architecture/ppc/math.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Farchitecture%2Fppc%2Fmath.h?ref=582454753dcb00c5e28055b7a41ceedfcc4600fd", "patch": "@@ -0,0 +1,88 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/architecture/ppc/math.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+/* This file prototypes the long double functions available on Mac OS\n+   10.3.9.  */\n+#ifndef __MATH__\n+# undef __APPLE_CC__\n+# define __APPLE_CC__  1345\n+# include_next <architecture/ppc/math.h>\n+# undef __APPLE_CC__\n+# define __APPLE_CC__ 1\n+# ifndef __LIBMLDBL_COMPAT\n+#  ifdef __LONG_DOUBLE_128__\n+#   define __LIBMLDBL_COMPAT(sym) __asm(\"_\" #sym \"$LDBL128\")\n+#  else\n+#   define __LIBMLDBL_COMPAT(sym)\n+#  endif /* __LONG_DOUBLE_128__ */\n+# endif /* __LIBMLDBL_COMPAT */\n+# ifdef __cplusplus\n+   extern \"C\" {\n+# endif\n+  extern long double acosl( long double ) __LIBMLDBL_COMPAT(acosl);\n+  extern long double asinl( long double ) __LIBMLDBL_COMPAT(asinl);\n+  extern long double atanl( long double ) __LIBMLDBL_COMPAT(atanl);\n+  extern long double atan2l( long double, long double ) __LIBMLDBL_COMPAT(atan2l);\n+  extern long double cosl( long double ) __LIBMLDBL_COMPAT(cosl);\n+  extern long double sinl( long double ) __LIBMLDBL_COMPAT(sinl);\n+  extern long double tanl( long double ) __LIBMLDBL_COMPAT(tanl);\n+  extern long double acoshl( long double ) __LIBMLDBL_COMPAT(acoshl);\n+  extern long double asinhl( long double ) __LIBMLDBL_COMPAT(asinhl);\n+  extern long double atanhl( long double ) __LIBMLDBL_COMPAT(atanhl);\n+  extern long double coshl( long double ) __LIBMLDBL_COMPAT(coshl);\n+  extern long double sinhl( long double ) __LIBMLDBL_COMPAT(sinhl);\n+  extern long double tanhl( long double ) __LIBMLDBL_COMPAT(tanhl);\n+  extern long double expl( long double ) __LIBMLDBL_COMPAT(expl);\n+  extern long double exp2l( long double ) __LIBMLDBL_COMPAT(exp2l);\n+  extern long double expm1l( long double ) __LIBMLDBL_COMPAT(expm1l);\n+  extern long double logl( long double ) __LIBMLDBL_COMPAT(logl);\n+  extern long double log10l( long double ) __LIBMLDBL_COMPAT(log10l);\n+  extern long double log2l( long double ) __LIBMLDBL_COMPAT(log2l);\n+  extern long double log1pl( long double ) __LIBMLDBL_COMPAT(log1pl);\n+  extern long double logbl( long double ) __LIBMLDBL_COMPAT(logbl);\n+  extern long double modfl( long double, long double * ) __LIBMLDBL_COMPAT(modfl);\n+  extern long double ldexpl( long double, int ) __LIBMLDBL_COMPAT(ldexpl);\n+  extern long double frexpl( long double, int * ) __LIBMLDBL_COMPAT(frexpl);\n+  extern int ilogbl( long double ) __LIBMLDBL_COMPAT(ilogbl);\n+  extern long double scalbnl( long double, int ) __LIBMLDBL_COMPAT(scalbnl);\n+  extern long double scalblnl( long double, long int ) __LIBMLDBL_COMPAT(scalblnl);\n+  extern long double fabsl( long double ) __LIBMLDBL_COMPAT(fabsl);\n+  extern long double cbrtl( long double ) __LIBMLDBL_COMPAT(cbrtl);\n+  extern long double hypotl( long double, long double ) __LIBMLDBL_COMPAT(hypotl);\n+  extern long double powl( long double, long double ) __LIBMLDBL_COMPAT(powl);\n+  extern long double sqrtl( long double ) __LIBMLDBL_COMPAT(sqrtl);\n+  extern long double erfl( long double ) __LIBMLDBL_COMPAT(erfl);\n+  extern long double erfcl( long double ) __LIBMLDBL_COMPAT(erfcl);\n+  extern long double lgammal( long double ) __LIBMLDBL_COMPAT(lgammal);\n+  extern long double tgammal( long double ) __LIBMLDBL_COMPAT(tgammal);\n+  extern long double ceill( long double ) __LIBMLDBL_COMPAT(ceill);\n+  extern long double floorl( long double ) __LIBMLDBL_COMPAT(floorl);\n+  extern long double nearbyintl( long double ) __LIBMLDBL_COMPAT(nearbyintl);\n+  extern long double rintl( long double ) __LIBMLDBL_COMPAT(rintl);\n+  extern long int lrintl( long double ) __LIBMLDBL_COMPAT(lrintl);\n+  extern long long int llrintl( long double ) __LIBMLDBL_COMPAT(llrintl);\n+  extern long double roundl( long double ) __LIBMLDBL_COMPAT(roundl);\n+  extern long int lroundl( long double ) __LIBMLDBL_COMPAT(lroundl);\n+  extern long long int llroundl( long double ) __LIBMLDBL_COMPAT(llroundl);\n+  extern long double truncl( long double ) __LIBMLDBL_COMPAT(truncl);\n+  extern long double fmodl( long double, long double) __LIBMLDBL_COMPAT(fmodl);\n+  extern long double remainderl( long double, long double ) __LIBMLDBL_COMPAT(remainderl);\n+  extern long double remquol( long double, long double, int * ) __LIBMLDBL_COMPAT(remquol);\n+  extern long double copysignl( long double, long double ) __LIBMLDBL_COMPAT(copysignl);\n+  extern long double nanl( const char * ) __LIBMLDBL_COMPAT(nanl);\n+  extern long double nextafterl( long double, long double ) __LIBMLDBL_COMPAT(nextafterl);\n+  extern long double nexttowardl( long double, long double ) __LIBMLDBL_COMPAT(nexttowardl);\n+  extern long double fdiml( long double, long double ) __LIBMLDBL_COMPAT(fdiml);\n+  extern long double fmaxl( long double, long double ) __LIBMLDBL_COMPAT(fmaxl);\n+  extern long double fminl( long double, long double ) __LIBMLDBL_COMPAT(fminl);\n+  extern long double fmal( long double, long double, long double ) __LIBMLDBL_COMPAT(fmal);\n+# ifdef __cplusplus\n+   }\n+# endif\n+#endif /* __MATH__ */"}, {"sha": "e2dd5b1c0db51b284f2717df4d2b8b0f21a8428a", "filename": "fixincludes/tests/base/errno.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ferrno.h?ref=582454753dcb00c5e28055b7a41ceedfcc4600fd", "patch": "@@ -0,0 +1,21 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/errno.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( HPUX_EXTERN_ERRNO_CHECK )\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+   extern int errno;\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif  /* HPUX_EXTERN_ERRNO_CHECK */"}, {"sha": "80fe99ecd4f5fd2f61a481730a3e3f953f3630b1", "filename": "fixincludes/tests/base/ia64/sys/getppdp.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Fia64%2Fsys%2Fgetppdp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582454753dcb00c5e28055b7a41ceedfcc4600fd/fixincludes%2Ftests%2Fbase%2Fia64%2Fsys%2Fgetppdp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fia64%2Fsys%2Fgetppdp.h?ref=582454753dcb00c5e28055b7a41ceedfcc4600fd", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/ia64/sys/getppdp.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( HPUX_SPU_INFO_CHECK )\n+#ifdef _KERNEL\n+extern union mpinfou spu_info[];\n+#endif\n+#endif  /* HPUX_SPU_INFO_CHECK */"}]}