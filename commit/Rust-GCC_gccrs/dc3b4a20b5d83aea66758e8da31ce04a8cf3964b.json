{"sha": "dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzYjRhMjBiNWQ4M2FlYTY2NzU4ZThkYTMxY2UwNGE4Y2YzOTY0Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-02-01T12:51:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-02-01T12:51:24Z"}, "message": "domwalk.h (dom_walker::dom_walker): Add additional constructor for specifying RPO order and allow NULL for that.\n\n2018-02-01  Richard Biener  <rguenther@suse.de>\n\n\t* domwalk.h (dom_walker::dom_walker): Add additional constructor\n\tfor specifying RPO order and allow NULL for that.\n\t* domwalk.c (dom_walker::dom_walker): Likewise.\n\t(dom_walker::walk): Handle NULL RPO order.\n\t* tree-into-ssa.c (rewrite_dom_walker): Do not walk dom children\n\tin RPO order.\n\t(rewrite_update_dom_walker): Likewise.\n\t(mark_def_dom_walker): Likewise.\n\n\t* gcc.dg/graphite/pr35356-1.c: Adjust.\n\nFrom-SVN: r257293", "tree": {"sha": "25245398d09da9b7d8d95999ae3409a2c805582d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25245398d09da9b7d8d95999ae3409a2c805582d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c64497d6eae75b9f87aef777f9beb5184ecaa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c64497d6eae75b9f87aef777f9beb5184ecaa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c64497d6eae75b9f87aef777f9beb5184ecaa64"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "28804f16cc883577a419cff2d475cca06a987c61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -1,3 +1,14 @@\n+2018-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* domwalk.h (dom_walker::dom_walker): Add additional constructor\n+\tfor specifying RPO order and allow NULL for that.\n+\t* domwalk.c (dom_walker::dom_walker): Likewise.\n+\t(dom_walker::walk): Handle NULL RPO order.\n+\t* tree-into-ssa.c (rewrite_dom_walker): Do not walk dom children\n+\tin RPO order.\n+\t(rewrite_update_dom_walker): Likewise.\n+\t(mark_def_dom_walker): Likewise.\n+\n 2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_split_sve_subreg_move)"}, {"sha": "2791e93817abbaf3bd8d91fdb9397412630fe32e", "filename": "gcc/domwalk.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -191,13 +191,41 @@ dom_walker::dom_walker (cdi_direction direction,\n \t\t\tint *bb_index_to_rpo)\n   : m_dom_direction (direction),\n     m_skip_unreachable_blocks (reachability != ALL_BLOCKS),\n-    m_user_bb_to_rpo (bb_index_to_rpo != NULL),\n+    m_user_bb_to_rpo (true),\n     m_unreachable_dom (NULL),\n     m_bb_to_rpo (bb_index_to_rpo)\n {\n-  /* Compute the basic-block index to RPO mapping if not provided by\n-     the user.  */\n-  if (! m_bb_to_rpo && direction == CDI_DOMINATORS)\n+  /* Set up edge flags if need be.  */\n+  switch (reachability)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case ALL_BLOCKS:\n+      /* No need to touch edge flags.  */\n+      break;\n+\n+    case REACHABLE_BLOCKS:\n+      set_all_edges_as_executable (cfun);\n+      break;\n+\n+    case REACHABLE_BLOCKS_PRESERVING_FLAGS:\n+      /* Preserve the edge flags.  */\n+      break;\n+    }\n+}\n+\n+/* Constructor for a dom walker.  */\n+\n+dom_walker::dom_walker (cdi_direction direction,\n+\t\t\tenum reachability reachability)\n+  : m_dom_direction (direction),\n+    m_skip_unreachable_blocks (reachability != ALL_BLOCKS),\n+    m_user_bb_to_rpo (false),\n+    m_unreachable_dom (NULL),\n+    m_bb_to_rpo (NULL)\n+{\n+  /* Compute the basic-block index to RPO mapping.  */\n+  if (direction == CDI_DOMINATORS)\n     {\n       int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n       int postorder_num = pre_and_rev_post_order_compute (NULL, postorder,\n@@ -348,7 +376,10 @@ dom_walker::walk (basic_block bb)\n \t      for (dest = first_dom_son (m_dom_direction, bb);\n \t\t   dest; dest = next_dom_son (m_dom_direction, dest))\n \t\tworklist[sp++] = dest;\n-\t      if (sp - saved_sp > 1 && m_dom_direction == CDI_DOMINATORS)\n+\t      /* Sort worklist after RPO order if requested.  */\n+\t      if (sp - saved_sp > 1\n+\t\t  && m_dom_direction == CDI_DOMINATORS\n+\t\t  && m_bb_to_rpo)\n \t\tsort_bbs_postorder (&worklist[saved_sp], sp - saved_sp);\n \t    }\n \t}"}, {"sha": "3057bddc79ed6fb5c0d7e35572b95847d4b65e33", "filename": "gcc/domwalk.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -60,10 +60,13 @@ class dom_walker\n     REACHABLE_BLOCKS_PRESERVING_FLAGS\n   };\n \n+  dom_walker (cdi_direction direction, enum reachability = ALL_BLOCKS);\n+\n   /* You can provide a mapping of basic-block index to RPO if you\n-     have that readily available or you do multiple walks.  */\n-  dom_walker (cdi_direction direction, enum reachability = ALL_BLOCKS,\n-\t      int *bb_index_to_rpo = NULL);\n+     have that readily available or you do multiple walks.  If you\n+     specify NULL as BB_INDEX_TO_RPO dominator children will not be\n+     walked in RPO order.  */\n+  dom_walker (cdi_direction direction, enum reachability, int *bb_index_to_rpo);\n \n   ~dom_walker ();\n "}, {"sha": "36ffcea16752cba326654df07089904dc57d1b1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -1,3 +1,7 @@\n+2018-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/graphite/pr35356-1.c: Adjust.\n+\n 2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR testsuite/83846"}, {"sha": "07339c8f6417dad5025943e917ec906750997435", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -34,4 +34,4 @@ if (n >= k + 1 && k >= 0) {\n \n */\n \n-/* { dg-final { scan-tree-dump \"if \\\\\\(P_8 >= P_11 \\\\\\+ 1 && P_11 >= 0\\\\\\) \\\\\\{\" \"graphite\" } } */\n+/* { dg-final { scan-tree-dump \"if \\\\\\(P_\\[0-9\\]+ >= P_\\[0-9\\]+ \\\\\\+ 1 && P_\\[0-9\\]+ >= 0\\\\\\) \\\\\\{\" \"graphite\" } } */"}, {"sha": "f4af33c1303a9153d8a1ee0d7bd58ddf954d86a5", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "patch": "@@ -1463,7 +1463,8 @@ rewrite_add_phi_arguments (basic_block bb)\n class rewrite_dom_walker : public dom_walker\n {\n public:\n-  rewrite_dom_walker (cdi_direction direction) : dom_walker (direction) {}\n+  rewrite_dom_walker (cdi_direction direction)\n+    : dom_walker (direction, ALL_BLOCKS, NULL) {}\n \n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n@@ -2153,7 +2154,8 @@ rewrite_update_phi_arguments (basic_block bb)\n class rewrite_update_dom_walker : public dom_walker\n {\n public:\n-  rewrite_update_dom_walker (cdi_direction direction) : dom_walker (direction) {}\n+  rewrite_update_dom_walker (cdi_direction direction)\n+    : dom_walker (direction, ALL_BLOCKS, NULL) {}\n \n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n@@ -2322,7 +2324,7 @@ class mark_def_dom_walker : public dom_walker\n };\n \n mark_def_dom_walker::mark_def_dom_walker (cdi_direction direction)\n-  : dom_walker (direction), m_kills (BITMAP_ALLOC (NULL))\n+  : dom_walker (direction, ALL_BLOCKS, NULL), m_kills (BITMAP_ALLOC (NULL))\n {\n }\n "}]}