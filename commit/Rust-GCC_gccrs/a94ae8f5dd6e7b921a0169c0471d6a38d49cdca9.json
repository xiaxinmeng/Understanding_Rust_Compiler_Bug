{"sha": "a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0YWU4ZjVkZDZlN2I5MjFhMDE2OWMwNDcxZDZhMzhkNDljZGNhOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-17T15:17:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-17T15:17:38Z"}, "message": "genattr.c: PROTO -> PARAMS.\n\n        * genattr.c: PROTO -> PARAMS.\n        * genattrtab.c: Likewise.\n        * gencheck.c: Likewise.\n        * gencodes.c: Likewise.\n        * genconfig.c: Likewise.\n        * genemit.c: Likewise.\n        * genextract.c: Likewise.\n        * genflags.c: Likewise.\n        * gengenrtl.c: Likewise.\n        * genopinit.c: Likewise.\n        * genoutput.c: Likewise.\n        * genpeep.c: Likewise.\n        * genrecog.c: Likewise.\n\nFrom-SVN: r31457", "tree": {"sha": "ad52a60d44af346461f05b69d18ec55756d8ef53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad52a60d44af346461f05b69d18ec55756d8ef53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/comments", "author": null, "committer": null, "parents": [{"sha": "3b0d91ff929f16828833bb2fe336a2ba458ebf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0d91ff929f16828833bb2fe336a2ba458ebf65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0d91ff929f16828833bb2fe336a2ba458ebf65"}], "stats": {"total": 496, "additions": 256, "deletions": 240}, "files": [{"sha": "cd990876255d595601c75814187357598e3cd1df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -1,3 +1,19 @@\n+2000-01-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c: PROTO -> PARAMS.\n+\t* genattrtab.c: Likewise.\n+\t* gencheck.c: Likewise.\n+\t* gencodes.c: Likewise.\n+\t* genconfig.c: Likewise.\n+\t* genemit.c: Likewise.\n+\t* genextract.c: Likewise.\n+\t* genflags.c: Likewise.\n+\t* gengenrtl.c: Likewise.\n+\t* genopinit.c: Likewise.\n+\t* genoutput.c: Likewise.\n+\t* genpeep.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\n 2000-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (BINFO_VPTR_FIELD): Augment documentation."}, {"sha": "c4531899adbd5a44be991d7c988f03cead97381d", "filename": "gcc/genattr.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -54,11 +54,11 @@ struct function_unit\n   struct range issue_delay;\t/* Range of issue delay values.  */\n };\n \n-static void extend_range PROTO((struct range *, int, int));\n-static void init_range PROTO((struct range *));\n-static void write_upcase PROTO((const char *));\n-static void gen_attr PROTO((rtx));\n-static void write_units PROTO((int, struct range *, struct range *,\n+static void extend_range PARAMS ((struct range *, int, int));\n+static void init_range PARAMS ((struct range *));\n+static void write_upcase PARAMS ((const char *));\n+static void gen_attr PARAMS ((rtx));\n+static void write_units PARAMS ((int, struct range *, struct range *,\n \t\t\t       struct range *, struct range *,\n \t\t\t       struct range *));\n static void\n@@ -98,7 +98,7 @@ gen_attr (attr)\n \n   /* If numeric attribute, don't need to write an enum.  */\n   if (*XSTR (attr, 1) == '\\0')\n-    printf (\"extern int get_attr_%s PROTO((%s));\\n\", XSTR (attr, 0),\n+    printf (\"extern int get_attr_%s PARAMS ((%s));\\n\", XSTR (attr, 0),\n \t    (is_const ? \"void\" : \"rtx\"));\n   else\n     {\n@@ -119,18 +119,18 @@ gen_attr (attr)\n \t}\n \n       printf (\"};\\n\");\n-      printf (\"extern enum attr_%s get_attr_%s PROTO((%s));\\n\\n\",\n+      printf (\"extern enum attr_%s get_attr_%s PARAMS ((%s));\\n\\n\",\n \t      XSTR (attr, 0), XSTR (attr, 0), (is_const ? \"void\" : \"rtx\"));\n     }\n \n   /* If `length' attribute, write additional function definitions and define\n      variables used by `insn_current_length'.  */\n   if (! strcmp (XSTR (attr, 0), \"length\"))\n     {\n-      printf (\"extern void shorten_branches PROTO((rtx));\\n\");\n-      printf (\"extern int insn_default_length PROTO((rtx));\\n\");\n-      printf (\"extern int insn_variable_length_p PROTO((rtx));\\n\");\n-      printf (\"extern int insn_current_length PROTO((rtx));\\n\\n\");\n+      printf (\"extern void shorten_branches PARAMS ((rtx));\\n\");\n+      printf (\"extern int insn_default_length PARAMS ((rtx));\\n\");\n+      printf (\"extern int insn_variable_length_p PARAMS ((rtx));\\n\");\n+      printf (\"extern int insn_current_length PARAMS ((rtx));\\n\\n\");\n       printf (\"extern int *insn_addresses;\\n\");\n       printf (\"extern int insn_current_address;\\n\\n\");\n     }\n@@ -149,8 +149,8 @@ write_units (num_units, multiplicity, simultaneity,\n   int i, q_size;\n \n   printf (\"#define INSN_SCHEDULING\\n\\n\");\n-  printf (\"extern int result_ready_cost PROTO((rtx));\\n\");\n-  printf (\"extern int function_units_used PROTO((rtx));\\n\\n\");\n+  printf (\"extern int result_ready_cost PARAMS ((rtx));\\n\");\n+  printf (\"extern int function_units_used PARAMS ((rtx));\\n\\n\");\n   printf (\"extern struct function_unit_desc\\n\");\n   printf (\"{\\n\");\n   printf (\"  const char *name;\\n\");\n@@ -159,11 +159,11 @@ write_units (num_units, multiplicity, simultaneity,\n   printf (\"  int simultaneity;\\n\");\n   printf (\"  int default_cost;\\n\");\n   printf (\"  int max_issue_delay;\\n\");\n-  printf (\"  int (*ready_cost_function) PROTO ((rtx));\\n\");\n-  printf (\"  int (*conflict_cost_function) PROTO ((rtx, rtx));\\n\");\n+  printf (\"  int (*ready_cost_function) PARAMS ((rtx));\\n\");\n+  printf (\"  int (*conflict_cost_function) PARAMS ((rtx, rtx));\\n\");\n   printf (\"  int max_blockage;\\n\");\n-  printf (\"  unsigned int (*blockage_range_function) PROTO ((rtx));\\n\");\n-  printf (\"  int (*blockage_function) PROTO ((rtx, rtx));\\n\");\n+  printf (\"  unsigned int (*blockage_range_function) PARAMS ((rtx));\\n\");\n+  printf (\"  int (*blockage_function) PARAMS ((rtx, rtx));\\n\");\n   printf (\"} function_units[];\\n\\n\");\n   printf (\"#define FUNCTION_UNITS_SIZE %d\\n\", num_units);\n   printf (\"#define MIN_MULTIPLICITY %d\\n\", multiplicity->min);\n@@ -214,7 +214,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)\n@@ -280,9 +280,9 @@ from the machine description file `md'.  */\\n\\n\");\n \t  if (! have_delay)\n \t    {\n \t      printf (\"#define DELAY_SLOTS\\n\");\n-\t      printf (\"extern int num_delay_slots PROTO((rtx));\\n\");\n-\t      printf (\"extern int eligible_for_delay PROTO((rtx, int, rtx, int));\\n\\n\");\n-\t      printf (\"extern int const_num_delay_slots PROTO((rtx));\\n\\n\");\n+\t      printf (\"extern int num_delay_slots PARAMS ((rtx));\\n\");\n+\t      printf (\"extern int eligible_for_delay PARAMS ((rtx, int, rtx, int));\\n\\n\");\n+\t      printf (\"extern int const_num_delay_slots PARAMS ((rtx));\\n\\n\");\n \t      have_delay = 1;\n \t    }\n \n@@ -291,14 +291,14 @@ from the machine description file `md'.  */\\n\\n\");\n \t      if (XVECEXP (desc, 1, i + 1) && ! have_annul_true)\n \t\t{\n \t\t  printf (\"#define ANNUL_IFTRUE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_true PROTO ((rtx, int, rtx, int));\\n\");\n+\t\t  printf (\"extern int eligible_for_annul_true PARAMS ((rtx, int, rtx, int));\\n\");\n \t\t  have_annul_true = 1;\n \t\t}\n \n \t      if (XVECEXP (desc, 1, i + 2) && ! have_annul_false)\n \t\t{\n \t\t  printf (\"#define ANNUL_IFFALSE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_false PROTO ((rtx, int, rtx, int));\\n\");\n+\t\t  printf (\"extern int eligible_for_annul_false PARAMS ((rtx, int, rtx, int));\\n\");\n \t\t  have_annul_false = 1;\n \t\t}\n \t    }"}, {"sha": "0b15599a281924e8278f602397281c4f896e78b6", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -356,104 +356,104 @@ int optimize = 0;\n rtx global_rtl[GR_MAX];\n rtx pic_offset_table_rtx;\n \n-static void attr_hash_add_rtx\tPROTO((int, rtx));\n-static void attr_hash_add_string PROTO((int, char *));\n-static rtx attr_rtx\t\tPVPROTO((enum rtx_code, ...));\n-static char *attr_printf\tPVPROTO((int, const char *, ...))\n+static void attr_hash_add_rtx\tPARAMS ((int, rtx));\n+static void attr_hash_add_string PARAMS ((int, char *));\n+static rtx attr_rtx\t\tPARAMS ((enum rtx_code, ...));\n+static char *attr_printf\tPARAMS ((int, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n-static char *attr_string        PROTO((const char *, int));\n-static rtx check_attr_test\tPROTO((rtx, int));\n-static rtx check_attr_value\tPROTO((rtx, struct attr_desc *));\n-static rtx convert_set_attr_alternative PROTO((rtx, int, int));\n-static rtx convert_set_attr\tPROTO((rtx, int, int));\n-static void check_defs\t\tPROTO((void));\n+static char *attr_string        PARAMS ((const char *, int));\n+static rtx check_attr_test\tPARAMS ((rtx, int));\n+static rtx check_attr_value\tPARAMS ((rtx, struct attr_desc *));\n+static rtx convert_set_attr_alternative PARAMS ((rtx, int, int));\n+static rtx convert_set_attr\tPARAMS ((rtx, int, int));\n+static void check_defs\t\tPARAMS ((void));\n #if 0\n-static rtx convert_const_symbol_ref PROTO((rtx, struct attr_desc *));\n+static rtx convert_const_symbol_ref PARAMS ((rtx, struct attr_desc *));\n #endif\n-static rtx make_canonical\tPROTO((struct attr_desc *, rtx));\n-static struct attr_value *get_attr_value PROTO((rtx, struct attr_desc *, int));\n-static rtx copy_rtx_unchanging\tPROTO((rtx));\n-static rtx copy_boolean\t\tPROTO((rtx));\n-static void expand_delays\tPROTO((void));\n-static rtx operate_exp\t\tPROTO((enum operator, rtx, rtx));\n-static void expand_units\tPROTO((void));\n-static rtx simplify_knowing\tPROTO((rtx, rtx));\n-static rtx encode_units_mask\tPROTO((rtx));\n-static void fill_attr\t\tPROTO((struct attr_desc *));\n+static rtx make_canonical\tPARAMS ((struct attr_desc *, rtx));\n+static struct attr_value *get_attr_value PARAMS ((rtx, struct attr_desc *, int));\n+static rtx copy_rtx_unchanging\tPARAMS ((rtx));\n+static rtx copy_boolean\t\tPARAMS ((rtx));\n+static void expand_delays\tPARAMS ((void));\n+static rtx operate_exp\t\tPARAMS ((enum operator, rtx, rtx));\n+static void expand_units\tPARAMS ((void));\n+static rtx simplify_knowing\tPARAMS ((rtx, rtx));\n+static rtx encode_units_mask\tPARAMS ((rtx));\n+static void fill_attr\t\tPARAMS ((struct attr_desc *));\n /* dpx2 compiler chokes if we specify the arg types of the args.  */\n-static rtx substitute_address\tPROTO((rtx, rtx (*) (rtx), rtx (*) (rtx)));\n-static void make_length_attrs\tPROTO((void));\n-static rtx identity_fn\t\tPROTO((rtx));\n-static rtx zero_fn\t\tPROTO((rtx));\n-static rtx one_fn\t\tPROTO((rtx));\n-static rtx max_fn\t\tPROTO((rtx));\n-static void write_length_unit_log PROTO ((void));\n-static rtx simplify_cond\tPROTO((rtx, int, int));\n+static rtx substitute_address\tPARAMS ((rtx, rtx (*) (rtx), rtx (*) (rtx)));\n+static void make_length_attrs\tPARAMS ((void));\n+static rtx identity_fn\t\tPARAMS ((rtx));\n+static rtx zero_fn\t\tPARAMS ((rtx));\n+static rtx one_fn\t\tPARAMS ((rtx));\n+static rtx max_fn\t\tPARAMS ((rtx));\n+static void write_length_unit_log PARAMS ((void));\n+static rtx simplify_cond\tPARAMS ((rtx, int, int));\n #if 0\n-static rtx simplify_by_alternatives PROTO((rtx, int, int));\n+static rtx simplify_by_alternatives PARAMS ((rtx, int, int));\n #endif\n-static rtx simplify_by_exploding PROTO((rtx));\n-static int find_and_mark_used_attributes PROTO((rtx, rtx *, int *));\n-static void unmark_used_attributes PROTO((rtx, struct dimension *, int));\n-static int add_values_to_cover\tPROTO((struct dimension *));\n-static int increment_current_value PROTO((struct dimension *, int));\n-static rtx test_for_current_value PROTO((struct dimension *, int));\n-static rtx simplify_with_current_value PROTO((rtx, struct dimension *, int));\n-static rtx simplify_with_current_value_aux PROTO((rtx));\n-static void clear_struct_flag PROTO((rtx));\n-static int count_sub_rtxs    PROTO((rtx, int));\n-static void remove_insn_ent  PROTO((struct attr_value *, struct insn_ent *));\n-static void insert_insn_ent  PROTO((struct attr_value *, struct insn_ent *));\n-static rtx insert_right_side\tPROTO((enum rtx_code, rtx, rtx, int, int));\n-static rtx make_alternative_compare PROTO((int));\n-static int compute_alternative_mask PROTO((rtx, enum rtx_code));\n-static rtx evaluate_eq_attr\tPROTO((rtx, rtx, int, int));\n-static rtx simplify_and_tree\tPROTO((rtx, rtx *, int, int));\n-static rtx simplify_or_tree\tPROTO((rtx, rtx *, int, int));\n-static rtx simplify_test_exp\tPROTO((rtx, int, int));\n-static void optimize_attrs\tPROTO((void));\n-static void gen_attr\t\tPROTO((rtx));\n-static int count_alternatives\tPROTO((rtx));\n-static int compares_alternatives_p PROTO((rtx));\n-static int contained_in_p\tPROTO((rtx, rtx));\n-static void gen_insn\t\tPROTO((rtx));\n-static void gen_delay\t\tPROTO((rtx));\n-static void gen_unit\t\tPROTO((rtx));\n-static void write_test_expr\tPROTO((rtx, int));\n-static int max_attr_value\tPROTO((rtx, int*));\n-static int or_attr_value\tPROTO((rtx, int*));\n-static void walk_attr_value\tPROTO((rtx));\n-static void write_attr_get\tPROTO((struct attr_desc *));\n-static rtx eliminate_known_true PROTO((rtx, rtx, int, int));\n-static void write_attr_set\tPROTO((struct attr_desc *, int, rtx,\n+static rtx simplify_by_exploding PARAMS ((rtx));\n+static int find_and_mark_used_attributes PARAMS ((rtx, rtx *, int *));\n+static void unmark_used_attributes PARAMS ((rtx, struct dimension *, int));\n+static int add_values_to_cover\tPARAMS ((struct dimension *));\n+static int increment_current_value PARAMS ((struct dimension *, int));\n+static rtx test_for_current_value PARAMS ((struct dimension *, int));\n+static rtx simplify_with_current_value PARAMS ((rtx, struct dimension *, int));\n+static rtx simplify_with_current_value_aux PARAMS ((rtx));\n+static void clear_struct_flag PARAMS ((rtx));\n+static int count_sub_rtxs    PARAMS ((rtx, int));\n+static void remove_insn_ent  PARAMS ((struct attr_value *, struct insn_ent *));\n+static void insert_insn_ent  PARAMS ((struct attr_value *, struct insn_ent *));\n+static rtx insert_right_side\tPARAMS ((enum rtx_code, rtx, rtx, int, int));\n+static rtx make_alternative_compare PARAMS ((int));\n+static int compute_alternative_mask PARAMS ((rtx, enum rtx_code));\n+static rtx evaluate_eq_attr\tPARAMS ((rtx, rtx, int, int));\n+static rtx simplify_and_tree\tPARAMS ((rtx, rtx *, int, int));\n+static rtx simplify_or_tree\tPARAMS ((rtx, rtx *, int, int));\n+static rtx simplify_test_exp\tPARAMS ((rtx, int, int));\n+static void optimize_attrs\tPARAMS ((void));\n+static void gen_attr\t\tPARAMS ((rtx));\n+static int count_alternatives\tPARAMS ((rtx));\n+static int compares_alternatives_p PARAMS ((rtx));\n+static int contained_in_p\tPARAMS ((rtx, rtx));\n+static void gen_insn\t\tPARAMS ((rtx));\n+static void gen_delay\t\tPARAMS ((rtx));\n+static void gen_unit\t\tPARAMS ((rtx));\n+static void write_test_expr\tPARAMS ((rtx, int));\n+static int max_attr_value\tPARAMS ((rtx, int*));\n+static int or_attr_value\tPARAMS ((rtx, int*));\n+static void walk_attr_value\tPARAMS ((rtx));\n+static void write_attr_get\tPARAMS ((struct attr_desc *));\n+static rtx eliminate_known_true PARAMS ((rtx, rtx, int, int));\n+static void write_attr_set\tPARAMS ((struct attr_desc *, int, rtx,\n \t\t\t\t       const char *, const char *, rtx,\n \t\t\t\t       int, int));\n-static void write_attr_case\tPROTO((struct attr_desc *, struct attr_value *,\n+static void write_attr_case\tPARAMS ((struct attr_desc *, struct attr_value *,\n \t\t\t\t       int, const char *, const char *, int, rtx));\n-static void write_unit_name\tPROTO((const char *, int, const char *));\n-static void write_attr_valueq\tPROTO((struct attr_desc *, char *));\n-static void write_attr_value\tPROTO((struct attr_desc *, rtx));\n-static void write_upcase\tPROTO((const char *));\n-static void write_indent\tPROTO((int));\n-static void write_eligible_delay PROTO((const char *));\n-static void write_function_unit_info PROTO((void));\n-static void write_complex_function PROTO((struct function_unit *, const char *,\n+static void write_unit_name\tPARAMS ((const char *, int, const char *));\n+static void write_attr_valueq\tPARAMS ((struct attr_desc *, char *));\n+static void write_attr_value\tPARAMS ((struct attr_desc *, rtx));\n+static void write_upcase\tPARAMS ((const char *));\n+static void write_indent\tPARAMS ((int));\n+static void write_eligible_delay PARAMS ((const char *));\n+static void write_function_unit_info PARAMS ((void));\n+static void write_complex_function PARAMS ((struct function_unit *, const char *,\n \t\t\t\t\t  const char *));\n-static int write_expr_attr_cache PROTO((rtx, struct attr_desc *));\n-static void write_toplevel_expr\tPROTO((rtx));\n-static void write_const_num_delay_slots PROTO ((void));\n-static int n_comma_elts\t\tPROTO((char *));\n-static char *next_comma_elt\tPROTO((char **));\n-static struct attr_desc *find_attr PROTO((const char *, int));\n-static void make_internal_attr\tPROTO((const char *, rtx, int));\n-static struct attr_value *find_most_used  PROTO((struct attr_desc *));\n-static rtx find_single_value\tPROTO((struct attr_desc *));\n-static rtx make_numeric_value\tPROTO((int));\n-static void extend_range\tPROTO((struct range *, int, int));\n-static rtx attr_eq\t\tPROTO((char *, char *));\n-static char *attr_numeral\tPROTO((int));\n-static int attr_equal_p\t\tPROTO((rtx, rtx));\n-static rtx attr_copy_rtx\tPROTO((rtx));\n+static int write_expr_attr_cache PARAMS ((rtx, struct attr_desc *));\n+static void write_toplevel_expr\tPARAMS ((rtx));\n+static void write_const_num_delay_slots PARAMS ((void));\n+static int n_comma_elts\t\tPARAMS ((char *));\n+static char *next_comma_elt\tPARAMS ((char **));\n+static struct attr_desc *find_attr PARAMS ((const char *, int));\n+static void make_internal_attr\tPARAMS ((const char *, rtx, int));\n+static struct attr_value *find_most_used  PARAMS ((struct attr_desc *));\n+static rtx find_single_value\tPARAMS ((struct attr_desc *));\n+static rtx make_numeric_value\tPARAMS ((int));\n+static void extend_range\tPARAMS ((struct range *, int, int));\n+static rtx attr_eq\t\tPARAMS ((char *, char *));\n+static char *attr_numeral\tPARAMS ((int));\n+static int attr_equal_p\t\tPARAMS ((rtx, rtx));\n+static rtx attr_copy_rtx\tPARAMS ((rtx));\n \n #define oballoc(size) obstack_alloc (hash_obstack, size)\n \n@@ -535,7 +535,7 @@ attr_hash_add_string (hashcode, str)\n \n /*VARARGS1*/\n static rtx\n-attr_rtx VPROTO((enum rtx_code code, ...))\n+attr_rtx VPARAMS ((enum rtx_code code, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   enum rtx_code code;\n@@ -738,7 +738,7 @@ attr_rtx VPROTO((enum rtx_code code, ...))\n \n /*VARARGS2*/\n static char *\n-attr_printf VPROTO((register int len, const char *fmt, ...))\n+attr_printf VPARAMS ((register int len, const char *fmt, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   register int len;\n@@ -2335,8 +2335,8 @@ fill_attr (attr)\n static rtx\n substitute_address (exp, no_address_fn, address_fn)\n      rtx exp;\n-     rtx (*no_address_fn) PROTO ((rtx));\n-     rtx (*address_fn) PROTO ((rtx));\n+     rtx (*no_address_fn) PARAMS ((rtx));\n+     rtx (*address_fn) PARAMS ((rtx));\n {\n   int i;\n   rtx newexp;\n@@ -2412,8 +2412,8 @@ make_length_attrs ()\n   static const char *new_names[] = {\"*insn_default_length\",\n \t\t\t\t      \"*insn_variable_length_p\",\n \t\t\t\t      \"*insn_current_length\"};\n-  static rtx (*no_address_fn[]) PROTO((rtx)) = {identity_fn, zero_fn, zero_fn};\n-  static rtx (*address_fn[]) PROTO((rtx)) = {max_fn, one_fn, identity_fn};\n+  static rtx (*no_address_fn[]) PARAMS ((rtx)) = {identity_fn, zero_fn, zero_fn};\n+  static rtx (*address_fn[]) PARAMS ((rtx)) = {max_fn, one_fn, identity_fn};\n   size_t i;\n   struct attr_desc *length_attr, *new_attr;\n   struct attr_value *av, *new_av;\n@@ -4872,9 +4872,9 @@ write_attr_get (attr)\n   /* If the attribute name starts with a star, the remainder is the name of\n      the subroutine to use, instead of `get_attr_...'.  */\n   if (attr->name[0] == '*')\n-    printf (\"%s PROTO ((rtx));\\n\", &attr->name[1]);\n+    printf (\"%s PARAMS ((rtx));\\n\", &attr->name[1]);\n   else\n-    printf (\"get_attr_%s PROTO ((%s));\\n\", attr->name,\n+    printf (\"get_attr_%s PARAMS ((%s));\\n\", attr->name,\n \t    (attr->is_const ? \"void\" : \"rtx\"));\n \n   /* Write out start of function, then all values with explicit `case' lines,\n@@ -5585,7 +5585,7 @@ write_complex_function (unit, name, connection)\n   int using_case;\n   int i;\n \n-  printf (\"static int %s_unit_%s PROTO ((rtx, rtx));\\n\", unit->name, name);\n+  printf (\"static int %s_unit_%s PARAMS ((rtx, rtx));\\n\", unit->name, name);\n   printf (\"static int\\n\");\n   printf (\"%s_unit_%s (executing_insn, candidate_insn)\\n\",\n \t  unit->name, name);\n@@ -5957,7 +5957,7 @@ write_const_num_delay_slots ()\n }\n \n \f\n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "d7548a8e3d94a4d17f91db6d23c5a5e9b5a41825", "filename": "gcc/gencheck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -29,15 +29,15 @@ const char *tree_codes[] = {\n (char*)0\n };\n \n-static void usage PROTO ((void));\n+static void usage PARAMS ((void));\n \n static void\n usage ()\n {\n   fprintf (stderr,\"Usage: gencheck\\n\");\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "894b50691d5218ee31f74a97049277bbd79b8123", "filename": "gcc/gencodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -35,7 +35,7 @@ struct obstack *rtl_obstack = &obstack;\n \n static int insn_code_number;\n \n-static void gen_insn PROTO((rtx));\n+static void gen_insn PARAMS ((rtx));\n \n static void\n gen_insn (insn)\n@@ -75,7 +75,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "fd851a06bd3079b67b1106d36f251842258a1c7e", "filename": "gcc/genconfig.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -49,11 +49,11 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-static void walk_insn_part PROTO((rtx, int, int));\n-static void gen_insn PROTO((rtx));\n-static void gen_expand PROTO((rtx));\n-static void gen_split PROTO((rtx));\n-static void gen_peephole PROTO((rtx));\n+static void walk_insn_part PARAMS ((rtx, int, int));\n+static void gen_insn PARAMS ((rtx));\n+static void gen_expand PARAMS ((rtx));\n+static void gen_split PARAMS ((rtx));\n+static void gen_peephole PARAMS ((rtx));\n \n /* RECOG_P will be non-zero if this pattern was seen in a context where it will\n    be used to recognize, rather than just generate an insn. \n@@ -274,7 +274,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "6be5e7f2dc42f09610e3ce2bcdd76f393c1739f9", "filename": "gcc/genemit.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -58,16 +58,16 @@ struct clobber_ent\n   struct clobber_ent *next;\n };\n \n-static void max_operand_1\t\tPROTO((rtx));\n-static int max_operand_vec\t\tPROTO((rtx, int));\n-static void print_code\t\t\tPROTO((RTX_CODE));\n-static void gen_exp\t\t\tPROTO((rtx, enum rtx_code));\n-static void gen_insn\t\t\tPROTO((rtx));\n-static void gen_expand\t\t\tPROTO((rtx));\n-static void gen_split\t\t\tPROTO((rtx));\n-static void output_add_clobbers\t\tPROTO((void));\n-static void gen_rtx_scratch\t\tPROTO((rtx, enum rtx_code));\n-static void output_peephole2_scratches\tPROTO((rtx));\n+static void max_operand_1\t\tPARAMS ((rtx));\n+static int max_operand_vec\t\tPARAMS ((rtx, int));\n+static void print_code\t\t\tPARAMS ((RTX_CODE));\n+static void gen_exp\t\t\tPARAMS ((rtx, enum rtx_code));\n+static void gen_insn\t\t\tPARAMS ((rtx));\n+static void gen_expand\t\t\tPARAMS ((rtx));\n+static void gen_split\t\t\tPARAMS ((rtx));\n+static void output_add_clobbers\t\tPARAMS ((void));\n+static void gen_rtx_scratch\t\tPARAMS ((rtx, enum rtx_code));\n+static void output_peephole2_scratches\tPARAMS ((rtx));\n \n \f\n static void\n@@ -572,7 +572,7 @@ gen_split (split)\n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     {\n-      printf (\"extern rtx gen_%s_%d PROTO ((rtx, rtx *));\\n\",\n+      printf (\"extern rtx gen_%s_%d PARAMS ((rtx, rtx *));\\n\",\n \t      name, insn_code_number);\n       printf (\"rtx\\ngen_%s_%d (curr_insn, operands)\\n\\\n      rtx curr_insn ATTRIBUTE_UNUSED;\\n\\\n@@ -581,7 +581,7 @@ gen_split (split)\n     }\n   else\n     {\n-      printf (\"extern rtx gen_split_%d PROTO ((rtx *));\\n\", insn_code_number);\n+      printf (\"extern rtx gen_split_%d PARAMS ((rtx *));\\n\", insn_code_number);\n       printf (\"rtx\\ngen_%s_%d (operands)\\n     rtx *operands;\\n\", name,\n \t      insn_code_number);\n     }\n@@ -770,7 +770,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "5bb2df20472cd2998f820d59b45da93de0730fba", "filename": "gcc/genextract.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -97,10 +97,10 @@ static int dupnums[MAX_DUP_OPERANDS];\n \n static struct code_ptr *peepholes;\n \n-static void gen_insn PROTO ((rtx));\n-static void walk_rtx PROTO ((rtx, const char *));\n-static void print_path PROTO ((const char *));\n-static void record_insn_name PROTO((int, const char *));\n+static void gen_insn PARAMS ((rtx));\n+static void walk_rtx PARAMS ((rtx, const char *));\n+static void print_path PARAMS ((const char *));\n+static void record_insn_name PARAMS ((int, const char *));\n \n static void\n gen_insn (insn)\n@@ -380,7 +380,7 @@ xstrdup (input)\n   return output;\n }\n \f\n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "f9add41640ca44d4f0349bfec5466de41ab81fed", "filename": "gcc/genflags.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -39,10 +39,10 @@ static struct obstack call_obstack, normal_obstack;\n /* Max size of names encountered.  */\n static int max_id_len;\n \n-static int num_operands PROTO((rtx));\n-static void gen_proto PROTO((rtx));\n-static void gen_nonproto PROTO((rtx));\n-static void gen_insn PROTO((rtx));\n+static int num_operands PARAMS ((rtx));\n+static void gen_proto PARAMS ((rtx));\n+static void gen_nonproto PARAMS ((rtx));\n+static void gen_insn PARAMS ((rtx));\n \n \n /* Count the number of match_operand's found.  */\n@@ -90,7 +90,7 @@ gen_proto (insn)\n      rtx insn;\n {\n   int num = num_operands (insn);\n-  printf (\"extern rtx gen_%-*s PROTO((\", max_id_len, XSTR (insn, 0));\n+  printf (\"extern rtx gen_%-*s PARAMS ((\", max_id_len, XSTR (insn, 0));\n \n   if (num == 0)\n     printf (\"void\");\n@@ -195,7 +195,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "6653857cff366bbb6446b03e880f3b86e2b56f74", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -88,17 +88,17 @@ struct rtx_definition defs[] =\n \n const char *formats[NUM_RTX_CODE];\n \n-static const char *type_from_format\tPROTO((int));\n-static const char *accessor_from_format\tPROTO((int));\n-static int special_format\t\tPROTO((const char *));\n-static int special_rtx\t\t\tPROTO((int));\n-static void find_formats\t\tPROTO((void));\n-static void gendecl\t\t\tPROTO((const char *));\n-static void genmacro\t\t\tPROTO((int));\n-static void gendef\t\t\tPROTO((const char *));\n-static void genlegend\t\t\tPROTO((void));\n-static void genheader\t\t\tPROTO((void));\n-static void gencode\t\t\tPROTO((void));\n+static const char *type_from_format\tPARAMS ((int));\n+static const char *accessor_from_format\tPARAMS ((int));\n+static int special_format\t\tPARAMS ((const char *));\n+static int special_rtx\t\t\tPARAMS ((int));\n+static void find_formats\t\tPARAMS ((void));\n+static void gendecl\t\t\tPARAMS ((const char *));\n+static void genmacro\t\t\tPARAMS ((int));\n+static void gendef\t\t\tPARAMS ((const char *));\n+static void genlegend\t\t\tPARAMS ((void));\n+static void genheader\t\t\tPARAMS ((void));\n+static void gencode\t\t\tPARAMS ((void));\n \f\n /* Decode a format letter into a C type string.  */\n \n@@ -224,7 +224,7 @@ gendecl (format)\n   const char *p;\n   int i, pos;\n   \n-  printf (\"extern rtx gen_rtx_fmt_%s\\tPROTO((RTX_CODE, \", format);\n+  printf (\"extern rtx gen_rtx_fmt_%s\\tPARAMS ((RTX_CODE, \", format);\n   printf (\"enum machine_mode mode\");\n \n   /* Write each parameter that is needed and start a new line when the line\n@@ -359,7 +359,7 @@ gencode ()\n   puts (\"#include \\\"rtl.h\\\"\\n\");\n   puts (\"#include \\\"ggc.h\\\"\\n\\n\");\n   puts (\"extern struct obstack *rtl_obstack;\\n\\n\");\n-  puts (\"static rtx obstack_alloc_rtx PROTO((int length));\\n\");\n+  puts (\"static rtx obstack_alloc_rtx PARAMS ((int length));\\n\");\n   puts (\"static rtx obstack_alloc_rtx (length)\\n\");\n   puts (\"     register int length;\\n{\\n\");\n   puts (\"  rtx rt = (rtx) obstack_alloc (rtl_obstack, length);\\n\\n\");\n@@ -391,7 +391,7 @@ xmalloc (nbytes)\n /* This is the main program.  We accept only one argument, \"-h\", which\n    says we are writing the genrtl.h file.  Otherwise we are writing the\n    genrtl.c file.  */\n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "38285a98a87205b11b35742a5bae40ddcec85da0", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -121,7 +121,7 @@ const char * const optabs[] =\n   \"movstr_optab[(int) %A] = CODE_FOR_%(movstr%a%)\",\n   \"clrstr_optab[(int) %A] = CODE_FOR_%(clrstr%a%)\" };\n \n-static void gen_insn PROTO((rtx));\n+static void gen_insn PARAMS ((rtx));\n \n static void\n gen_insn (insn)\n@@ -304,7 +304,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "c288107e9a4656e36ce86736d0cd0eda0fd47bb2", "filename": "gcc/genoutput.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -103,7 +103,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-static int n_occurrences PROTO((int, char *));\n+static int n_occurrences PARAMS ((int, char *));\n \n /* insns in the machine description are assigned sequential code numbers\n    that are used by insn-recog.c (produced by genrecog) to communicate\n@@ -175,22 +175,22 @@ struct data\n \n static struct data *idata, **idata_end = &idata;\n \f\n-static void output_prologue PROTO((void));\n-static void output_predicate_decls PROTO((void));\n-static void output_operand_data PROTO((void));\n-static void output_insn_data PROTO((void));\n-static void output_get_insn_name PROTO((void));\n-static void scan_operands PROTO((struct data *, rtx, int, int));\n-static int compare_operands PROTO((struct operand_data *,\n+static void output_prologue PARAMS ((void));\n+static void output_predicate_decls PARAMS ((void));\n+static void output_operand_data PARAMS ((void));\n+static void output_insn_data PARAMS ((void));\n+static void output_get_insn_name PARAMS ((void));\n+static void scan_operands PARAMS ((struct data *, rtx, int, int));\n+static int compare_operands PARAMS ((struct operand_data *,\n \t\t\t\t   struct operand_data *));\n-static void place_operands PROTO((struct data *));\n-static void process_template PROTO((struct data *, char *));\n-static void validate_insn_alternatives PROTO((struct data *));\n-static void gen_insn PROTO((rtx));\n-static void gen_peephole PROTO((rtx));\n-static void gen_expand PROTO((rtx));\n-static void gen_split PROTO((rtx));\n-static int n_occurrences PROTO((int, char *));\n+static void place_operands PARAMS ((struct data *));\n+static void process_template PARAMS ((struct data *, char *));\n+static void validate_insn_alternatives PARAMS ((struct data *));\n+static void gen_insn PARAMS ((rtx));\n+static void gen_peephole PARAMS ((rtx));\n+static void gen_expand PARAMS ((rtx));\n+static void gen_split PARAMS ((rtx));\n+static int n_occurrences PARAMS ((int, char *));\n \f\n const char *\n get_insn_name (index)\n@@ -262,7 +262,7 @@ output_predicate_decls ()\n \n \tif (p == 0)\n \t  {\n-\t    printf (\"extern int %s PROTO ((rtx, enum machine_mode));\\n\",\n+\t    printf (\"extern int %s PARAMS ((rtx, enum machine_mode));\\n\",\n \t\t    d->predicate);\n \t    p = (struct predicate *) alloca (sizeof (struct predicate));\n \t    p->name = d->predicate;\n@@ -641,7 +641,7 @@ process_template (d, template)\n       d->template = 0;\n       d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n \n-      printf (\"\\nstatic const char *output_%d PROTO ((rtx *, rtx));\\n\",\n+      printf (\"\\nstatic const char *output_%d PARAMS ((rtx *, rtx));\\n\",\n \t      d->code_number);\n       puts (\"\\nstatic const char *\");\n       printf (\"output_%d (operands, insn)\\n\", d->code_number);\n@@ -897,7 +897,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "3c45cee6723891a6a4d9b71266cc73e7fd501e4e", "filename": "gcc/genpeep.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -55,10 +55,10 @@ static int n_operands;\n \n static int insn_code_number = 0;\n \n-static void gen_peephole PROTO((rtx));\n-static void match_rtx PROTO((rtx, struct link *, int));\n-static void print_path PROTO((struct link *));\n-static void print_code PROTO((RTX_CODE));\n+static void gen_peephole PARAMS ((rtx));\n+static void match_rtx PARAMS ((rtx, struct link *, int));\n+static void print_path PARAMS ((struct link *));\n+static void print_code PARAMS ((RTX_CODE));\n \f\n static void\n gen_peephole (peep)\n@@ -399,7 +399,7 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}, {"sha": "5db3aa2904893804cdbfb1e260ac123466e88237", "filename": "gcc/genrecog.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=a94ae8f5dd6e7b921a0169c0471d6a38d49cdca9", "patch": "@@ -228,93 +228,93 @@ static const char * special_mode_pred_table[] = {\n   (sizeof (special_mode_pred_table) / sizeof (special_mode_pred_table[0]))\n \n static void message_with_line\n-  PVPROTO ((int, const char *, ...)) ATTRIBUTE_PRINTF_2;\n+  PARAMS ((int, const char *, ...)) ATTRIBUTE_PRINTF_2;\n \n static struct decision *new_decision\n-  PROTO((const char *, struct decision_head *));\n+  PARAMS ((const char *, struct decision_head *));\n static struct decision_test *new_decision_test\n-  PROTO((enum decision_type, struct decision_test ***));\n+  PARAMS ((enum decision_type, struct decision_test ***));\n static rtx find_operand\n-  PROTO((rtx, int));\n+  PARAMS ((rtx, int));\n static void validate_pattern\n-  PROTO((rtx, rtx, rtx));\n+  PARAMS ((rtx, rtx, rtx));\n static struct decision *add_to_sequence\n-  PROTO((rtx, struct decision_head *, const char *, enum routine_type, int));\n+  PARAMS ((rtx, struct decision_head *, const char *, enum routine_type, int));\n \n static int maybe_both_true_2\n-  PROTO((struct decision_test *, struct decision_test *));\n+  PARAMS ((struct decision_test *, struct decision_test *));\n static int maybe_both_true_1\n-  PROTO((struct decision_test *, struct decision_test *));\n+  PARAMS ((struct decision_test *, struct decision_test *));\n static int maybe_both_true\n-  PROTO((struct decision *, struct decision *, int));\n+  PARAMS ((struct decision *, struct decision *, int));\n \n static int nodes_identical_1\n-  PROTO((struct decision_test *, struct decision_test *));\n+  PARAMS ((struct decision_test *, struct decision_test *));\n static int nodes_identical\n-  PROTO((struct decision *, struct decision *));\n+  PARAMS ((struct decision *, struct decision *));\n static void merge_accept_insn\n-  PROTO((struct decision *, struct decision *));\n+  PARAMS ((struct decision *, struct decision *));\n static void merge_trees\n-  PROTO((struct decision_head *, struct decision_head *));\n+  PARAMS ((struct decision_head *, struct decision_head *));\n \n static void factor_tests\n-  PROTO((struct decision_head *));\n+  PARAMS ((struct decision_head *));\n static void simplify_tests\n-  PROTO((struct decision_head *));\n+  PARAMS ((struct decision_head *));\n static int break_out_subroutines\n-  PROTO((struct decision_head *, int));\n+  PARAMS ((struct decision_head *, int));\n static void find_afterward\n-  PROTO((struct decision_head *, struct decision *));\n+  PARAMS ((struct decision_head *, struct decision *));\n \n static void change_state\n-  PROTO((const char *, const char *, struct decision *, const char *));\n+  PARAMS ((const char *, const char *, struct decision *, const char *));\n static void print_code\n-  PROTO((enum rtx_code));\n+  PARAMS ((enum rtx_code));\n static void write_afterward\n-  PROTO((struct decision *, struct decision *, const char *));\n+  PARAMS ((struct decision *, struct decision *, const char *));\n static struct decision *write_switch\n-  PROTO((struct decision *, int));\n+  PARAMS ((struct decision *, int));\n static void write_cond\n-  PROTO((struct decision_test *, int, enum routine_type));\n+  PARAMS ((struct decision_test *, int, enum routine_type));\n static void write_action\n-  PROTO((struct decision_test *, int, int, struct decision *,\n+  PARAMS ((struct decision_test *, int, int, struct decision *,\n \t enum routine_type));\n static int is_unconditional\n-  PROTO((struct decision_test *, enum routine_type));\n+  PARAMS ((struct decision_test *, enum routine_type));\n static int write_node\n-  PROTO((struct decision *, int, enum routine_type));\n+  PARAMS ((struct decision *, int, enum routine_type));\n static void write_tree_1\n-  PROTO((struct decision_head *, int, enum routine_type));\n+  PARAMS ((struct decision_head *, int, enum routine_type));\n static void write_tree\n-  PROTO((struct decision_head *, const char *, enum routine_type, int));\n+  PARAMS ((struct decision_head *, const char *, enum routine_type, int));\n static void write_subroutine\n-  PROTO((struct decision_head *, enum routine_type));\n+  PARAMS ((struct decision_head *, enum routine_type));\n static void write_subroutines\n-  PROTO((struct decision_head *, enum routine_type));\n+  PARAMS ((struct decision_head *, enum routine_type));\n static void write_header\n-  PROTO((void));\n+  PARAMS ((void));\n \n static struct decision_head make_insn_sequence\n-  PROTO((rtx, enum routine_type));\n+  PARAMS ((rtx, enum routine_type));\n static void process_tree\n-  PROTO((struct decision_head *, enum routine_type));\n+  PARAMS ((struct decision_head *, enum routine_type));\n   \n static void record_insn_name\n-  PROTO((int, const char *));\n+  PARAMS ((int, const char *));\n \n static void debug_decision_0\n-  PROTO((struct decision *, int, int));\n+  PARAMS ((struct decision *, int, int));\n static void debug_decision_1\n-  PROTO((struct decision *, int));\n+  PARAMS ((struct decision *, int));\n static void debug_decision_2\n-  PROTO((struct decision_test *));\n+  PARAMS ((struct decision_test *));\n extern void debug_decision\n-  PROTO((struct decision *));\n+  PARAMS ((struct decision *));\n extern void debug_decision_list\n-  PROTO((struct decision *));\n+  PARAMS ((struct decision *));\n \f\n static void\n-message_with_line VPROTO ((int lineno, const char *msg, ...))\n+message_with_line VPARAMS ((int lineno, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   int lineno;\n@@ -2178,22 +2178,22 @@ write_subroutine (head, type)\n   switch (type)\n     {\n     case RECOG:\n-      printf (\"%sint recog%s PROTO ((rtx, rtx, int *));\\n\", s_or_e, extension);\n+      printf (\"%sint recog%s PARAMS ((rtx, rtx, int *));\\n\", s_or_e, extension);\n       printf (\"%sint\\n\\\n recog%s (x0, insn, pnum_clobbers)\\n\\\n      register rtx x0;\\n\\\n      rtx insn ATTRIBUTE_UNUSED;\\n\\\n      int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n       break;\n     case SPLIT:\n-      printf (\"%srtx split%s PROTO ((rtx, rtx));\\n\", s_or_e, extension);\n+      printf (\"%srtx split%s PARAMS ((rtx, rtx));\\n\", s_or_e, extension);\n       printf (\"%srtx\\n\\\n split%s (x0, insn)\\n\\\n      register rtx x0;\\n\\\n      rtx insn ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n       break;\n     case PEEPHOLE2:\n-      printf (\"%srtx peephole2%s PROTO ((rtx, rtx, rtx *));\\n\", s_or_e, extension);\n+      printf (\"%srtx peephole2%s PARAMS ((rtx, rtx, rtx *));\\n\", s_or_e, extension);\n       printf (\"%srtx\\n\\\n peephole2%s (x0, insn, _plast_insn)\\n\\\n      register rtx x0;\\n\\\n@@ -2442,12 +2442,12 @@ make_insn_sequence (insn, type)\n \n     case SPLIT:\n       /* Define the subroutine we will call below and emit in genemit.  */\n-      printf (\"extern rtx gen_split_%d PROTO ((rtx *));\\n\", next_insn_code);\n+      printf (\"extern rtx gen_split_%d PARAMS ((rtx *));\\n\", next_insn_code);\n       break;\n \n     case PEEPHOLE2:\n       /* Define the subroutine we will call below and emit in genemit.  */\n-      printf (\"extern rtx gen_peephole2_%d PROTO ((rtx, rtx *));\\n\",\n+      printf (\"extern rtx gen_peephole2_%d PARAMS ((rtx, rtx *));\\n\",\n \t      next_insn_code);\n       break;\n     }\n@@ -2486,7 +2486,7 @@ process_tree (head, subroutine_type)\n   write_subroutine (head, subroutine_type);\n }\n \f\n-extern int main PROTO ((int, char **));\n+extern int main PARAMS ((int, char **));\n \n int\n main (argc, argv)"}]}