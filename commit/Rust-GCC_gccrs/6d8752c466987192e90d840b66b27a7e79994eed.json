{"sha": "6d8752c466987192e90d840b66b27a7e79994eed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4NzUyYzQ2Njk4NzE5MmU5MGQ4NDBiNjZiMjdhN2U3OTk5NGVlZA==", "commit": {"author": {"name": "Razya Ladelsky", "email": "razya@il.ibm.com", "date": "2009-10-22T18:27:43Z"}, "committer": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2009-10-22T18:27:43Z"}, "message": "outer-4.c: Adjust scan.\n\n2009-10-22  Razya Ladelsky  <razya@il.ibm.com>\n        \n        * testsuite/gcc.dg/autopar/outer-4.c: Adjust scan.\n        * testsuite/gcc.dg/autopar/outer-5.c: Adjust scan.\n        * testsuite/gcc.dg/autopar/outer-5.c: Add scan optimized.\n        * tree-cfg.c(gimple_duplicate_sese_tail): Fix typos/indentation/white space.\n\nFrom-SVN: r153469", "tree": {"sha": "d23e1f27863983bc19a2db3940ebb6469571b420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d23e1f27863983bc19a2db3940ebb6469571b420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d8752c466987192e90d840b66b27a7e79994eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8752c466987192e90d840b66b27a7e79994eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8752c466987192e90d840b66b27a7e79994eed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8752c466987192e90d840b66b27a7e79994eed/comments", "author": null, "committer": null, "parents": [{"sha": "78e33430442b77296d8a229b739921ef551dd41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e33430442b77296d8a229b739921ef551dd41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e33430442b77296d8a229b739921ef551dd41a"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "e2c4ffd647c2adf44b67d96846109354cbcf2a17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d8752c466987192e90d840b66b27a7e79994eed", "patch": "@@ -1,3 +1,10 @@\n+2009-10-22  Razya Ladelsky  <razya@il.ibm.com>\n+\t\n+\t* testsuite/gcc.dg/autopar/outer-4.c: Adjust scan.\n+\t* testsuite/gcc.dg/autopar/outer-5.c: Adjust scan.\n+\t* testsuite/gcc.dg/autopar/outer-5.c: Add scan optimized.\n+\t* tree-cfg.c(gimple_duplicate_sese_tail): Fix typos/indentation/white space.\n+\n 2009-10-22  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer.h (lto_symtab_merge_cgraph_nodes): Declare."}, {"sha": "56f6123385d702537e725e38349e27696d132988", "filename": "gcc/testsuite/gcc.dg/autopar/outer-4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-4.c?ref=6d8752c466987192e90d840b66b27a7e79994eed", "patch": "@@ -31,8 +31,7 @@ int main(void)\n }\n \n \n-/* Check that outer loop is parallelized.  */\n-/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 0 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"parallelizing inner loop\" 1 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"parloops\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "3a542988c260fd19c9c443a5866722aed26c493b", "filename": "gcc/testsuite/gcc.dg/autopar/outer-5.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-5.c?ref=6d8752c466987192e90d840b66b27a7e79994eed", "patch": "@@ -44,9 +44,7 @@ int main(void)\n   return 0;\n }\n \n-\n-/* Check that outer loop is parallelized.  */\n-/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 0 \"parloops\" } } */\n-/* { dg-final { scan-tree-dump-times \"parallelizing inner loop\" 1 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"parloops\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6e027d2f69af125f3f904746264ba1c64c239c32", "filename": "gcc/testsuite/gcc.dg/autopar/outer-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fouter-6.c?ref=6d8752c466987192e90d840b66b27a7e79994eed", "patch": "@@ -46,5 +46,6 @@ int main(void)\n /* Check that outer loop is parallelized.  */\n /* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops\" } } */\n /* { dg-final { scan-tree-dump-times \"parallelizing inner loop\" 0 \"parloops\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"parloops\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "4a34cefd2a4ae4349c2bb5f6bda7aa0b2fc4e4c6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8752c466987192e90d840b66b27a7e79994eed/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6d8752c466987192e90d840b66b27a7e79994eed", "patch": "@@ -5254,7 +5254,7 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n  \n  /* If the block consisting of the exit condition has the latch as \n     successor, then the body of the loop is executed before \n-    the exit consition is tested.  In such case, moving the \n+    the exit condition is tested.  In such case, moving the \n     condition to the entry, causes that the loop will iterate  \n     one less iteration (which is the wanted outcome, since we \n     peel out the last iteration).  If the body is executed after \n@@ -5272,7 +5272,7 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n       {\n \titers_bb = gimple_bb (SSA_NAME_DEF_STMT (gimple_cond_rhs (cond_stmt)));\n \tfor (gsi1 = gsi_start_bb (iters_bb); !gsi_end_p (gsi1); gsi_next (&gsi1))\n-\t  if (gsi_stmt (gsi1)==SSA_NAME_DEF_STMT (gimple_cond_rhs (cond_stmt)))\n+\t  if (gsi_stmt (gsi1) == SSA_NAME_DEF_STMT (gimple_cond_rhs (cond_stmt)))\n \t    break;\n \t\t \n \tnew_rhs = force_gimple_operand_gsi (&gsi1, new_rhs, true,\n@@ -5302,7 +5302,7 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n  \n   /* If the block consisting of the exit condition has the latch as \n      successor, then the body of the loop is executed before \n-     the exit consition is tested.  \n+     the exit condition is tested.  \n      \n      { body  }\n      { cond  } (exit[0])  -> { latch }\n@@ -5340,7 +5340,7 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n     region_copy[i]->flags |= BB_DUPLICATED;\n   \n   /* Iterate all incoming edges to latch.  All those coming from \n-     copied bbs will be redicrecred to exit_bb.  */\n+     copied bbs will be redirected to exit_bb.  */\n   FOR_EACH_EDGE (e, ei, orig_loop->latch->preds)\n     {\n       if (e->src->flags & BB_DUPLICATED)\n@@ -5360,19 +5360,18 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n     }\n   \n   VEC_free (edge, heap, redirect_edges);\n-  \n-  \n+\n   /* Anything that is outside of the region, but was dominated by something\n      inside needs to update dominance info.  */\n   iterate_fix_dominators (CDI_DOMINATORS, doms, false);\n   VEC_free (basic_block, heap, doms);\n-  \n+\n   /* Update the SSA web.  */\n   update_ssa (TODO_update_ssa);\n-  \n+\n   if (free_region_copy)\n     free (region_copy);\n-  \n+\n   free_original_copy_tables ();\n   return true;\n }"}]}