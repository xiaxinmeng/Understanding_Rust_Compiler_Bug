{"sha": "04cc79bb8928ff2c97bef9df08dc252eecdc9845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRjYzc5YmI4OTI4ZmYyYzk3YmVmOWRmMDhkYzI1MmVlY2RjOTg0NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-01-13T01:32:42Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-01-13T01:32:42Z"}, "message": "builtins.c (expand_builtin_expect_jump): Simplify logic.\n\n\n\t* builtins.c (expand_builtin_expect_jump): Simplify logic. Handle\n\tconditional jumps that drop through to unconditional jumps or the\n\tend of the sequence.\n\nFrom-SVN: r75780", "tree": {"sha": "8a8971d52e76d7bc6b9ed77a9c3d51b478ee6434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8971d52e76d7bc6b9ed77a9c3d51b478ee6434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04cc79bb8928ff2c97bef9df08dc252eecdc9845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc79bb8928ff2c97bef9df08dc252eecdc9845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cc79bb8928ff2c97bef9df08dc252eecdc9845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cc79bb8928ff2c97bef9df08dc252eecdc9845/comments", "author": null, "committer": null, "parents": [{"sha": "3416f5c283f7fb5f2e6a6b75674c2645077cfb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3416f5c283f7fb5f2e6a6b75674c2645077cfb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3416f5c283f7fb5f2e6a6b75674c2645077cfb06"}], "stats": {"total": 102, "additions": 58, "deletions": 44}, "files": [{"sha": "d237ad9d612942e0dfe09a3888546afec4fa2276", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc79bb8928ff2c97bef9df08dc252eecdc9845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc79bb8928ff2c97bef9df08dc252eecdc9845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04cc79bb8928ff2c97bef9df08dc252eecdc9845", "patch": "@@ -1,3 +1,9 @@\n+2004-01-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_expect_jump): Simplify logic. Handle\n+\tconditional jumps that drop through to unconditional jumps or the\n+\tend of the sequence.\n+\n 2004-01-13  Jan Hubicka  <jh@suse.cz>\n \n \t* alias.c (new_alias_set): Construct the alias_set varray."}, {"sha": "5b49b0887ad3ec94ed6eaa076a22c00da239008b", "filename": "gcc/builtins.c", "status": "modified", "additions": 52, "deletions": 44, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cc79bb8928ff2c97bef9df08dc252eecdc9845/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cc79bb8928ff2c97bef9df08dc252eecdc9845/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=04cc79bb8928ff2c97bef9df08dc252eecdc9845", "patch": "@@ -4460,10 +4460,7 @@ expand_builtin_expect_jump (tree exp, rtx if_false_label, rtx if_true_label)\n       if (! if_false_label)\n \tif_false_label = drop_through_label;\n \n-      /* Now that the __builtin_expect has been validated, go through and add\n-\t the expect's to each of the conditional jumps.  If we run into an\n-\t error, just give up and generate the 'safe' code of doing a SCC\n-\t operation and then doing a branch on that.  */\n+      /* Go through and add the expect's to each of the conditional jumps.  */\n       insn = ret;\n       while (insn != NULL_RTX)\n \t{\n@@ -4472,54 +4469,65 @@ expand_builtin_expect_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t  if (GET_CODE (insn) == JUMP_INSN && any_condjump_p (insn))\n \t    {\n \t      rtx ifelse = SET_SRC (pc_set (insn));\n-\t      rtx label;\n-\t      int taken;\n-\n-\t      if (GET_CODE (XEXP (ifelse, 1)) == LABEL_REF)\n-\t\t{\n-\t\t  taken = 1;\n-\t\t  label = XEXP (XEXP (ifelse, 1), 0);\n-\t\t}\n-\t      /* An inverted jump reverses the probabilities.  */\n-\t      else if (GET_CODE (XEXP (ifelse, 2)) == LABEL_REF)\n+\t      rtx then_dest = XEXP (ifelse, 1);\n+\t      rtx else_dest = XEXP (ifelse, 2);\n+\t      int taken = -1;\n+\n+\t      /* First check if we recognize any of the labels.  */\n+\t      if (GET_CODE (then_dest) == LABEL_REF\n+\t\t  && XEXP (then_dest, 1) == if_true_label)\n+\t\ttaken = 1;\n+\t      else if (GET_CODE (then_dest) == LABEL_REF\n+\t\t       && XEXP (then_dest, 1) == if_false_label)\n+\t\ttaken = 0;\n+\t      else if (GET_CODE (else_dest) == LABEL_REF\n+\t\t       && XEXP (else_dest, 1) == if_false_label)\n+\t\ttaken = 1;\n+\t      else if (GET_CODE (else_dest) == LABEL_REF\n+\t\t       && XEXP (else_dest, 1) == if_true_label)\n+\t\ttaken = 0;\n+\t      /* Otherwise check where we drop through.  */\n+\t      else if (else_dest == pc_rtx)\n \t\t{\n-\t\t  taken = 0;\n-\t\t  label = XEXP (XEXP (ifelse, 2), 0);\n+\t\t  if (next && GET_CODE (next) == NOTE)\n+\t\t    next = next_nonnote_insn (next);\n+\n+\t\t  if (next && GET_CODE (next) == JUMP_INSN\n+\t\t      && any_uncondjump_p (next))\n+\t\t    next = XEXP (SET_SRC (pc_set (next)), 1);\n+\n+\t\t  /* NEXT is either a CODE_LABEL, NULL_RTX or something\n+\t\t     else that can't possibly match either target label.  */\n+\t\t  if (next == if_false_label)\n+\t\t    taken = 1;\n+\t\t  else if (next == if_true_label)\n+\t\t    taken = 0;\n \t\t}\n-\t      /* We shouldn't have to worry about conditional returns during\n-\t\t the expansion stage, but handle it gracefully anyway.  */\n-\t      else if (GET_CODE (XEXP (ifelse, 1)) == RETURN)\n+\t      else if (then_dest == pc_rtx)\n \t\t{\n-\t\t  taken = 1;\n-\t\t  label = NULL_RTX;\n+\t\t  if (next && GET_CODE (next) == NOTE)\n+\t\t    next = next_nonnote_insn (next);\n+\n+\t\t  if (next && GET_CODE (next) == JUMP_INSN\n+\t\t      && any_uncondjump_p (next))\n+\t\t    next = XEXP (SET_SRC (pc_set (next)), 1);\n+\n+\t\t  if (next == if_false_label)\n+\t\t    taken = 0;\n+\t\t  else if (next == if_true_label)\n+\t\t    taken = 1;\n \t\t}\n-\t      /* An inverted return reverses the probabilities.  */\n-\t      else if (GET_CODE (XEXP (ifelse, 2)) == RETURN)\n+\n+\t      if (taken != -1)\n \t\t{\n-\t\t  taken = 0;\n-\t\t  label = NULL_RTX;\n+\t\t  /* If the test is expected to fail, reverse the\n+\t\t     probabilities.  */\n+\t\t  if (integer_zerop (arg1))\n+\t\t    taken = 1 - taken;\n+\t          predict_insn_def (insn, PRED_BUILTIN_EXPECT, taken);\n \t\t}\n-\t      else\n-\t\tgoto do_next_insn;\n-\n-\t      /* If the test is expected to fail, reverse the\n-\t\t probabilities.  */\n-\t      if (integer_zerop (arg1))\n-\t\ttaken = 1 - taken;\n-\n-\t      /* If we are jumping to the false label, reverse the\n-\t\t probabilities.  */\n-\t      if (label == NULL_RTX)\n-\t\t;\t\t/* conditional return */\n-\t      else if (label == if_false_label)\n-\t\ttaken = 1 - taken;\n-\t      else if (label != if_true_label)\n-\t\tgoto do_next_insn;\n-\n-\t      predict_insn_def (insn, PRED_BUILTIN_EXPECT, taken);\n \t    }\n \n-\tdo_next_insn:\n \t  insn = next;\n \t}\n     }"}]}