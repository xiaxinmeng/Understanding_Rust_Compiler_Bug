{"sha": "302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyYzNkOGU2ZTZhNGJiN2FiMTliOTIzNjBlMTk1NmI3ODhiN2ZjMw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-08-05T14:24:08Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-08-05T14:24:08Z"}, "message": "invoke.texi: Document new ARM -mfpu= and -mcpu= options.\n\n2008-08-05  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Document new ARM -mfpu= and -mcpu= options.\n\t* config/arm/arm.c (all_fpus): Add vfpv3 and vfpv3-d16.\n\t(fp_model_for_fpu): Add entry for FPUTYPE_VFP3D16.\n\t(arm_file_start): Add FPUTYPE_VFP3D16.  Rename vfp3 to vfpv3.\n\t* config/arm/arm.h (TARGET_VFPD32): Define.\n\t(TARGET_VFP3): Use TARGET_VFPD32.\n\t(fputype): Add FPUTYPE_VFP3D16.\n\t(LAST_VFP_REGNUM): Use TARGET_VFPD32.\n\t* config/arm/constraints.md (\"w\"): Use TARGET_VFPD32.\n\t* config/arm/arm-cores.def: Add cortex-r4f.\n\t* config/arm/arm-tune.md: Regenerate.\n\nFrom-SVN: r138718", "tree": {"sha": "32049d195b6a0996d253e2f943f6dcaf25b2fc85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32049d195b6a0996d253e2f943f6dcaf25b2fc85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/comments", "author": null, "committer": null, "parents": [{"sha": "49331b42a8ce90c826500b8968d3abd4e52b213f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49331b42a8ce90c826500b8968d3abd4e52b213f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49331b42a8ce90c826500b8968d3abd4e52b213f"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "7444d7e3c0fa13996129bcbc468c5bef7e655a3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -1,3 +1,17 @@\n+2008-08-05  Paul Brook  <paul@codesourcery.com>\n+\n+\t* doc/invoke.texi: Document new ARM -mfpu= and -mcpu= options.\n+\t* config/arm/arm.c (all_fpus): Add vfpv3 and vfpv3-d16.\n+\t(fp_model_for_fpu): Add entry for FPUTYPE_VFP3D16.\n+\t(arm_file_start): Add FPUTYPE_VFP3D16.  Rename vfp3 to vfpv3.\n+\t* config/arm/arm.h (TARGET_VFPD32): Define.\n+\t(TARGET_VFP3): Use TARGET_VFPD32.\n+\t(fputype): Add FPUTYPE_VFP3D16.\n+\t(LAST_VFP_REGNUM): Use TARGET_VFPD32.\n+\t* config/arm/constraints.md (\"w\"): Use TARGET_VFPD32.\n+\t* config/arm/arm-cores.def: Add cortex-r4f.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\n 2008-08-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu_spu_mfcio.h: Wrap in extern \"C\" if __cplusplus."}, {"sha": "c7e425b0c7f34c49b511f08f0b55231affa59bb8", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -117,5 +117,6 @@ ARM_CORE(\"mpcore\",\t  mpcore,\t6K,\t\t\t\t FL_LDSCHED | FL_VFPV2, 9e)\n ARM_CORE(\"arm1156t2-s\",\t  arm1156t2s,\t6T2,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-a8\",\t  cortexa8,\t7A,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, 9e)\n+ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, 9e)"}, {"sha": "ee5606b04cb8712aea4a3eec6274a29c05db0ba3", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexr4,cortexm3,cortexm1\"\n+\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexr4,cortexr4f,cortexm3,cortexm1\"\n \t(const (symbol_ref \"arm_tune\")))"}, {"sha": "f449d087e2b103fe77dc71e0ed4bbfd64aca7bd3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -700,6 +700,8 @@ static const struct fpu_desc all_fpus[] =\n   {\"maverick\",\tFPUTYPE_MAVERICK},\n   {\"vfp\",\tFPUTYPE_VFP},\n   {\"vfp3\",\tFPUTYPE_VFP3},\n+  {\"vfpv3\",\tFPUTYPE_VFP3},\n+  {\"vfpv3-d16\",\tFPUTYPE_VFP3D16},\n   {\"neon\",\tFPUTYPE_NEON}\n };\n \n@@ -716,6 +718,7 @@ static const enum fputype fp_model_for_fpu[] =\n   ARM_FP_MODEL_FPA,\t\t/* FPUTYPE_FPA_EMU3  */\n   ARM_FP_MODEL_MAVERICK,\t/* FPUTYPE_MAVERICK  */\n   ARM_FP_MODEL_VFP,\t\t/* FPUTYPE_VFP  */\n+  ARM_FP_MODEL_VFP,\t\t/* FPUTYPE_VFP3D16  */\n   ARM_FP_MODEL_VFP,\t\t/* FPUTYPE_VFP3  */\n   ARM_FP_MODEL_VFP\t\t/* FPUTYPE_NEON  */\n };\n@@ -17738,8 +17741,12 @@ arm_file_start (void)\n \t      fpu_name = \"vfp\";\n \t      set_float_abi_attributes = 1;\n \t      break;\n+\t    case FPUTYPE_VFP3D16:\n+\t      fpu_name = \"vfpv3-d16\";\n+\t      set_float_abi_attributes = 1;\n+\t      break;\n \t    case FPUTYPE_VFP3:\n-\t      fpu_name = \"vfp3\";\n+\t      fpu_name = \"vfpv3\";\n \t      set_float_abi_attributes = 1;\n \t      break;\n \t    case FPUTYPE_NEON:"}, {"sha": "d99f77d1247df137bc42ef0cbaac7fc2c635814e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -212,15 +212,20 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_THUMB1_ONLY\t\t(TARGET_THUMB1 && !arm_arch_notm)\n \n /* The following two macros concern the ability to execute coprocessor\n-   instructions for VFPv3 or NEON.  TARGET_VFP3 is currently only ever\n-   tested when we know we are generating for VFP hardware; we need to\n-   be more careful with TARGET_NEON as noted below.  */\n+   instructions for VFPv3 or NEON.  TARGET_VFP3/TARGET_VFPD32 are currently\n+   only ever tested when we know we are generating for VFP hardware; we need\n+   to be more careful with TARGET_NEON as noted below.  */\n \n-/* FPU is VFPv3 (with twice the number of D registers).  Setting the FPU to\n-   Neon automatically enables VFPv3 too.  */\n+/* FPU is has the full VFPv3/NEON register file of 32 D registers.  */\n+#define TARGET_VFPD32 (arm_fp_model == ARM_FP_MODEL_VFP \\\n+\t\t       && (arm_fpu_arch == FPUTYPE_VFP3 \\\n+\t\t\t   || arm_fpu_arch == FPUTYPE_NEON))\n+\n+/* FPU supports VFPv3 instructions.  */\n #define TARGET_VFP3 (arm_fp_model == ARM_FP_MODEL_VFP \\\n-\t\t     && (arm_fpu_arch == FPUTYPE_VFP3 \\\n-\t\t\t || arm_fpu_arch == FPUTYPE_NEON))\n+\t\t     && (arm_fpu_arch == FPUTYPE_VFP3D16 \\\n+\t\t\t || TARGET_VFPD32))\n+\n /* FPU supports Neon instructions.  The setting of this macro gets\n    revealed via __ARM_NEON__ so we add extra guards upon TARGET_32BIT\n    and TARGET_HARD_FLOAT to ensure that NEON instructions are\n@@ -299,6 +304,8 @@ enum fputype\n   FPUTYPE_MAVERICK,\n   /* VFP.  */\n   FPUTYPE_VFP,\n+  /* VFPv3-D16.  */\n+  FPUTYPE_VFP3D16,\n   /* VFPv3.  */\n   FPUTYPE_VFP3,\n   /* Neon.  */\n@@ -945,7 +952,7 @@ extern int arm_structure_size_boundary;\n #define FIRST_VFP_REGNUM\t63\n #define D7_VFP_REGNUM\t\t78  /* Registers 77 and 78 == VFP reg D7.  */\n #define LAST_VFP_REGNUM\t\\\n-  (TARGET_VFP3 ? LAST_HI_VFP_REGNUM : LAST_LO_VFP_REGNUM)\n+  (TARGET_VFPD32 ? LAST_HI_VFP_REGNUM : LAST_LO_VFP_REGNUM)\n \n #define IS_VFP_REGNUM(REGNUM) \\\n   (((REGNUM) >= FIRST_VFP_REGNUM) && ((REGNUM) <= LAST_VFP_REGNUM))"}, {"sha": "a671eb05823746aa7086e5aa0342e239997b3a54", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -46,7 +46,7 @@\n  \"The Cirrus Maverick co-processor registers.\")\n \n (define_register_constraint \"w\"\n-  \"TARGET_32BIT ? (TARGET_VFP3 ? VFP_REGS : VFP_LO_REGS) : NO_REGS\"\n+  \"TARGET_32BIT ? (TARGET_VFPD32 ? VFP_REGS : VFP_LO_REGS) : NO_REGS\"\n  \"The VFP registers @code{d0}-@code{d15}, or @code{d0}-@code{d31} for VFPv3.\")\n \n (define_register_constraint \"x\" \"TARGET_32BIT ? VFP_D0_D7_REGS : NO_REGS\""}, {"sha": "1cc7984c2a8a4a362d1652206daaad30a3d5b522", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=302c3d8e6e6a4bb7ab19b92360e1956b788b7fc3", "patch": "@@ -8602,7 +8602,8 @@ assembly code.  Permissible names are: @samp{arm2}, @samp{arm250},\n @samp{arm10e}, @samp{arm1020e}, @samp{arm1022e},\n @samp{arm1136j-s}, @samp{arm1136jf-s}, @samp{mpcore}, @samp{mpcorenovfp},\n @samp{arm1156t2-s}, @samp{arm1176jz-s}, @samp{arm1176jzf-s},\n-@samp{cortex-a8}, @samp{cortex-r4}, @samp{cortex-m3}, @samp{cortex-m1},\n+@samp{cortex-a8}, @samp{cortex-r4}, @samp{cortex-r4f}, @samp{cortex-m3},\n+@samp{cortex-m1},\n @samp{xscale}, @samp{iwmmxt}, @samp{ep9312}.\n \n @item -mtune=@var{name}\n@@ -8636,7 +8637,8 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @opindex mfp\n This specifies what floating point hardware (or hardware emulation) is\n available on the target.  Permissible names are: @samp{fpa}, @samp{fpe2},\n-@samp{fpe3}, @samp{maverick}, @samp{vfp}.  @option{-mfp} and @option{-mfpe}\n+@samp{fpe3}, @samp{maverick}, @samp{vfp}, @samp{vfpv3}, @samp{vfpv3-d16} and\n+@samp{neon}.  @option{-mfp} and @option{-mfpe}\n are synonyms for @option{-mfpu}=@samp{fpe}@var{number}, for compatibility\n with older versions of GCC@.\n "}]}