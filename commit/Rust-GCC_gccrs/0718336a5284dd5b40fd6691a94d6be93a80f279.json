{"sha": "0718336a5284dd5b40fd6691a94d6be93a80f279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxODMzNmE1Mjg0ZGQ1YjQwZmQ2NjkxYTk0ZDZiZTkzYTgwZjI3OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-01T16:08:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-02-01T16:09:52Z"}, "message": "Reset front end trees before they make it into the middle end (PR middle-end/97172).\n\ngcc/ChangeLog:\n\n\tPR middle-end/97172\n\t* attribs.c (attr_access::free_lang_data): Define new function.\n\t* attribs.h (attr_access::free_lang_data): Declare new function.\n\ngcc/c/ChangeLog:\n\n\tPR middle-end/97172\n\t* c-decl.c (free_attr_access_data): New function.\n\t(c_parse_final_cleanups): Call free_attr_access_data.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/97172\n\t* gcc.dg/pr97172.c: New test.", "tree": {"sha": "b873cfd81012cb3152afe090d344c4cb7f9aa89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b873cfd81012cb3152afe090d344c4cb7f9aa89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0718336a5284dd5b40fd6691a94d6be93a80f279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0718336a5284dd5b40fd6691a94d6be93a80f279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0718336a5284dd5b40fd6691a94d6be93a80f279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0718336a5284dd5b40fd6691a94d6be93a80f279/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c9b2c17688f7be434415e90c5a655a6ecfaa9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c9b2c17688f7be434415e90c5a655a6ecfaa9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c9b2c17688f7be434415e90c5a655a6ecfaa9e"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "81322d40f1dd63072ce3a9822ac96efd5275144c", "filename": "gcc/attribs.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=0718336a5284dd5b40fd6691a94d6be93a80f279", "patch": "@@ -2238,6 +2238,38 @@ attr_access::vla_bounds (unsigned *nunspec) const\n   return list_length (size);\n }\n \n+/* Reset front end-specific attribute access data from ATTRS.\n+   Called from the free_lang_data pass.  */\n+\n+/* static */ void\n+attr_access::free_lang_data (tree attrs)\n+{\n+  for (tree acs = attrs; (acs = lookup_attribute (\"access\", acs));\n+       acs = TREE_CHAIN (acs))\n+    {\n+      tree vblist = TREE_VALUE (acs);\n+      vblist = TREE_CHAIN (vblist);\n+      if (!vblist)\n+\tcontinue;\n+\n+      vblist = TREE_VALUE (vblist);\n+      if (!vblist)\n+\tcontinue;\n+\n+      for (vblist = TREE_VALUE (vblist); vblist; vblist = TREE_CHAIN (vblist))\n+\t{\n+\t  tree *pvbnd = &TREE_VALUE (vblist);\n+\t  if (!*pvbnd || DECL_P (*pvbnd))\n+\t    continue;\n+\n+\t  /* VLA bounds that are expressions as opposed to DECLs are\n+\t     only used in the front end.  Reset them to keep front end\n+\t     trees leaking into the middle end (see pr97172) and to\n+\t     free up memory.  */\n+\t  *pvbnd = NULL_TREE;\n+\t}\n+    }\n+}\n \n /* Defined in attr_access.  */\n constexpr char attr_access::mode_chars[];"}, {"sha": "898e73db3e4d3900538b9aa5355de3e4937a3ab8", "filename": "gcc/attribs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=0718336a5284dd5b40fd6691a94d6be93a80f279", "patch": "@@ -274,6 +274,9 @@ struct attr_access\n   /* Return the access mode corresponding to the character code.  */\n   static access_mode from_mode_char (char);\n \n+  /* Reset front end-specific attribute access data from attributes.  */\n+  static void free_lang_data (tree);\n+\n   /* The character codes corresponding to all the access modes.  */\n   static constexpr char mode_chars[5] = { '-', 'r', 'w', 'x', '^' };\n "}, {"sha": "be95643fcf929b0e0c952b8c472e598f164b7627", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=0718336a5284dd5b40fd6691a94d6be93a80f279", "patch": "@@ -12146,6 +12146,27 @@ collect_source_refs (void)\n       collect_source_ref (DECL_SOURCE_FILE (decl));\n }\n \n+/* Free attribute access data that are not needed by the middle end. */\n+\n+static void\n+free_attr_access_data ()\n+{\n+  struct cgraph_node *n;\n+\n+  /* Iterate over all functions declared in the translation unit.  */\n+  FOR_EACH_FUNCTION (n)\n+    {\n+      tree fntype = TREE_TYPE (n->decl);\n+      if (!fntype)\n+\tcontinue;\n+      tree attrs = TYPE_ATTRIBUTES (fntype);\n+      if (!attrs)\n+\tcontinue;\n+\n+      attr_access::free_lang_data (attrs);\n+    }\n+}\n+\n /* Perform any final parser cleanups and generate initial debugging\n    information.  */\n \n@@ -12190,6 +12211,9 @@ c_parse_final_cleanups (void)\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n+  if (!in_lto_p)\n+    free_attr_access_data ();\n+\n   timevar_stop (TV_PHASE_DEFERRED);\n   timevar_start (TV_PHASE_PARSING);\n "}, {"sha": "ab5b2e9e7e9cde92ac76097ea0802c6948ecd5f5", "filename": "gcc/testsuite/gcc.dg/pr97172.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0718336a5284dd5b40fd6691a94d6be93a80f279/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97172.c?ref=0718336a5284dd5b40fd6691a94d6be93a80f279", "patch": "@@ -0,0 +1,50 @@\n+/* PR middle-end/97172 - ICE: tree code \u2018ssa_name\u2019 is not supported in LTO\n+   streams\n+   { dg-do compile }\n+   { dg-options \"-Wall -flto\" }\n+   { dg-require-effective-target lto } */\n+\n+int n;\n+\n+void fn (int a[n]);\n+void fnp1 (int a[n + 1]);\n+\n+void fx_n (int a[][n]);\n+void fx_np1 (int a[][n + 1]);\n+\n+void f2_n (int a[2][n]);\n+void f2_np1 (int a[2][n + 1]);\n+\n+void fn_3 (int a[n][3]);\n+void fnp1_3 (int a[n + 1][3]);\n+\n+void fn_n (int a[n][n]);\n+void fn_np1 (int a[n][n + 1]);\n+void fnp1_np1 (int a[n + 1][n + 1]);\n+\n+void fn_n_n (int a[n][n][n]);\n+void fn_n_np1 (int a[n][n][n + 1]);\n+void fn_np1_np1 (int a[n][n + 1][n + 1]);\n+void fnp1_np1_np1 (int a[n + 1][n + 1][n + 1]);\n+\n+\n+void gn (int a[n]) { fn (a); }\n+void gnp1 (int a[n + 1]) { fnp1 (a); }\n+\n+void gx_n (int a[][n]) { fx_n (a); }\n+void gx_np1 (int a[][n + 1]) { fx_np1 (a); }\n+\n+void g2_n (int a[2][n]) { f2_n (a); }\n+void g2_np1 (int a[2][n + 1]) { f2_np1 (a); }\n+\n+void gn_3 (int a[n][3]) { fn_3 (a); }\n+void gnp1_3 (int a[n + 1][3]) { fnp1_3 (a); }\n+\n+void gn_n (int a[n][n]) { fn_n (a); }\n+void gn_np1 (int a[n][n + 1]) { fn_np1 (a); }\n+void gnp1_np1 (int a[n + 1][n + 1]) { fnp1_np1 (a); }\n+\n+void gn_n_n (int a[n][n][n]) { fn_n_n (a); }\n+void gn_n_np1 (int a[n][n][n + 1]) { fn_n_np1 (a); }\n+void gn_np1_np1 (int a[n][n + 1][n + 1]) { fn_np1_np1 (a); }\n+void gnp1_np1_np1 (int a[n + 1][n + 1][n + 1]) { fnp1_np1_np1 (a); }"}]}