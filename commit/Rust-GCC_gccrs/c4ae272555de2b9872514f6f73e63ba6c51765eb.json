{"sha": "c4ae272555de2b9872514f6f73e63ba6c51765eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhZTI3MjU1NWRlMmI5ODcyNTE0ZjZmNzNlNjNiYTZjNTE3NjVlYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-15T10:37:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-15T10:37:22Z"}, "message": "loop.c (mark_loop_jump): Handle LO_SUM.\n\n\ufffd\n        * loop.c (mark_loop_jump): Handle LO_SUM.  If we encounter something\n        we do not understand, mark the loop and containing loops as invalid.\n\nFrom-SVN: r25215", "tree": {"sha": "1fa97fde3432609ecbf11605d2626cb7d729d702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa97fde3432609ecbf11605d2626cb7d729d702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ae272555de2b9872514f6f73e63ba6c51765eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae272555de2b9872514f6f73e63ba6c51765eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ae272555de2b9872514f6f73e63ba6c51765eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae272555de2b9872514f6f73e63ba6c51765eb/comments", "author": null, "committer": null, "parents": [{"sha": "bc8ebe10f8e2e7e2e25b00a4494afae814a18536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8ebe10f8e2e7e2e25b00a4494afae814a18536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8ebe10f8e2e7e2e25b00a4494afae814a18536"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "3ea975164f0e685ed646e1e969d9d45b60cfd39a", "filename": "gcc/loop.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae272555de2b9872514f6f73e63ba6c51765eb/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae272555de2b9872514f6f73e63ba6c51765eb/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c4ae272555de2b9872514f6f73e63ba6c51765eb", "patch": "@@ -2981,6 +2981,11 @@ mark_loop_jump (x, loop_num)\n       mark_loop_jump (XEXP (x, 1), loop_num);\n       return;\n \n+    case LO_SUM:\n+      /* This may refer to a LABEL_REF or SYMBOL_REF.  */\n+      mark_loop_jump (XEXP (x, 1), loop_num);\n+      return;\n+\n     case SIGN_EXTEND:\n     case ZERO_EXTEND:\n       mark_loop_jump (XEXP (x, 0), loop_num);\n@@ -3068,21 +3073,21 @@ mark_loop_jump (x, loop_num)\n       return;\n \n     default:\n-      /* Treat anything else (such as a symbol_ref)\n-\t as a branch out of this loop, but not into any loop.  */\n-\n+      /* Strictly speaking this is not a jump into the loop, only a possible\n+\t jump out of the loop.  However, we have no way to link the destination\n+\t of this jump onto the list of exit labels.  To be safe we mark this\n+\t loop and any containing loops as invalid.  */\n       if (loop_num != -1)\n \t{\n-#ifdef HAVE_decrement_and_branch_on_count\n-\t  LABEL_OUTSIDE_LOOP_P (x) = 1;\n-\t  LABEL_NEXTREF (x) = loop_number_exit_labels[loop_num];\n-#endif  /* HAVE_decrement_and_branch_on_count */\n-\n-\t  loop_number_exit_labels[loop_num] = x;\n-\n \t  for (outer_loop = loop_num; outer_loop != -1;\n \t       outer_loop = loop_outer_loop[outer_loop])\n-\t    loop_number_exit_count[outer_loop]++;\n+\t    {\n+\t      if (loop_dump_stream && ! loop_invalid[outer_loop])\n+\t\tfprintf (loop_dump_stream,\n+\t\t\t \"\\nLoop at %d ignored due to unknown exit jump.\\n\",\n+\t\t\t INSN_UID (loop_number_loop_starts[outer_loop]));\n+\t      loop_invalid[outer_loop] = 1;\n+\t    }\n \t}\n       return;\n     }"}]}