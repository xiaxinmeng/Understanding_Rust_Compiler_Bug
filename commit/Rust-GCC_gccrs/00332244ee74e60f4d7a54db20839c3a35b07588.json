{"sha": "00332244ee74e60f4d7a54db20839c3a35b07588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzMzIyNDRlZTc0ZTYwZjRkN2E1NGRiMjA4MzljM2EzNWIwNzU4OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:56:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:56:17Z"}, "message": "[multiple changes]\n\n2011-08-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* make.adb (Linking_Phase): No longer need to set source search path\n\tbefore calling gnatlink in CodePeer mode.\n\t* gnatlink.adb (Gnatlink): No longer pass -gnat83/95/05/12 switch to\n\tgcc in CodePeer mode, since the binder generated file no longer has a\n\t'with Main'.\n\t* switch.ads, switch.adb (Is_Language_Switch): Removed.\n\t* switch-c.adb: Update comment.\n\n2011-08-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_strm.adb, bindgen.adb, s-ficobl.ads: Minor reformatting.\n\n2011-08-05  Nicolas Roche  <roche@adacore.com>\n\n\t* gnat_ugn.texi: Fix minor syntax error issue.\n\n2011-08-05  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Get_Closure): Do not crash when it is not possible to\n\tdelete or close the file when the call to gnatmake returns a non\n\tsuccessful return code.\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): When expanding a predicate\n\tcheck, indicate that the copy of the original node does not come from\n\tsource, to prevent an infinite recursion of the expansion.\n\n2011-08-05  Johannes Kanig  <kanig@adacore.com>\n\n\t* debug.adb: document switch -gnatd.G for gnat2why, which deactivates\n\tVC generation for subprogram bodies.\n\n2011-08-05  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.ads: Typo.\n\t* sem_ch3.adb (Signed_Integer_Type_Declaration): in ALFA mode, define\n\tthe base type with the smallest allowed base type.\n\n2011-08-05  Sergey Rybin  <rybin@adacore.com>\n\n\t* tree_gen.adb, tree_in.adb, aspects.adb: Fix tree read-write for\n\taspects.\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.ads: minor comment updates.\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): in an\n\tinstantiation and a formal package the compiler generates a package\n\trenaming declaration so that the generic name within the declaration\n\tis interpreted as a renaming of the instance. At the end of a formal\n\tpackage declaration, this renaming must become invisible.\n\nFrom-SVN: r177437", "tree": {"sha": "05cbd8c8c3fd685d5701db0a6d80712885cae65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cbd8c8c3fd685d5701db0a6d80712885cae65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00332244ee74e60f4d7a54db20839c3a35b07588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00332244ee74e60f4d7a54db20839c3a35b07588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00332244ee74e60f4d7a54db20839c3a35b07588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00332244ee74e60f4d7a54db20839c3a35b07588/comments", "author": null, "committer": null, "parents": [{"sha": "0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da80d7dbbbd8e772cf30f8866b4fdc02cb9c64f"}], "stats": {"total": 342, "additions": 247, "deletions": 95}, "files": [{"sha": "13f0ada39ac32a2923ffb454219e0efffad10434", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -1,3 +1,61 @@\n+2011-08-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* make.adb (Linking_Phase): No longer need to set source search path\n+\tbefore calling gnatlink in CodePeer mode.\n+\t* gnatlink.adb (Gnatlink): No longer pass -gnat83/95/05/12 switch to\n+\tgcc in CodePeer mode, since the binder generated file no longer has a\n+\t'with Main'.\n+\t* switch.ads, switch.adb (Is_Language_Switch): Removed.\n+\t* switch-c.adb: Update comment.\n+\n+2011-08-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_strm.adb, bindgen.adb, s-ficobl.ads: Minor reformatting.\n+\n+2011-08-05  Nicolas Roche  <roche@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix minor syntax error issue.\n+\n+2011-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Get_Closure): Do not crash when it is not possible to\n+\tdelete or close the file when the call to gnatmake returns a non\n+\tsuccessful return code.\n+\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): When expanding a predicate\n+\tcheck, indicate that the copy of the original node does not come from\n+\tsource, to prevent an infinite recursion of the expansion.\n+\n+2011-08-05  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* debug.adb: document switch -gnatd.G for gnat2why, which deactivates\n+\tVC generation for subprogram bodies.\n+\n+2011-08-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads: Typo.\n+\t* sem_ch3.adb (Signed_Integer_Type_Declaration): in ALFA mode, define\n+\tthe base type with the smallest allowed base type.\n+\n+2011-08-05  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* tree_gen.adb, tree_in.adb, aspects.adb: Fix tree read-write for\n+\taspects.\n+\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.ads: minor comment updates.\n+\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): in an\n+\tinstantiation and a formal package the compiler generates a package\n+\trenaming declaration so that the generic name within the declaration\n+\tis interpreted as a renaming of the instance. At the end of a formal\n+\tpackage declaration, this renaming must become invisible.\n+\n 2011-08-05  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Is_Init_Call): Reimplemented to avoid character"}, {"sha": "7bb9724fb5c17c886d2c1e123528f2fd4602758c", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -38,6 +38,17 @@ with GNAT.HTable;           use GNAT.HTable;\n \n package body Aspects is\n \n+   procedure Set_Aspect_Specifications_No_Check (N : Node_Id; L : List_Id);\n+   --  Same as Set_Aspect_Specifications, but does not contain the assertion\n+   --  that checks that N does not already have aspect specifications. This\n+   --  subprogram is supposed to be used as a part of Tree_Read. When reading\n+   --  the tree we first read nodes with their basic properties (as\n+   --  Atree.Tree_Read), this includes reading the Has_Aspects flag for each\n+   --  node, then we reed all the list tables and only after that we call\n+   --  Tree_Read for Aspects. That is, when reading the tree, the list of\n+   --  aspects is attached to the node that already has Has_Aspects flag set\n+   --  ON\n+\n    ------------------------------------------\n    -- Hash Table for Aspect Specifications --\n    ------------------------------------------\n@@ -261,6 +272,20 @@ package body Aspects is\n       Aspect_Specifications_Hash_Table.Set (N, L);\n    end Set_Aspect_Specifications;\n \n+   ----------------------------------------\n+   -- Set_Aspect_Specifications_No_Check --\n+   ----------------------------------------\n+\n+   procedure Set_Aspect_Specifications_No_Check (N : Node_Id; L : List_Id) is\n+   begin\n+      pragma Assert (Permits_Aspect_Specifications (N));\n+      pragma Assert (L /= No_List);\n+\n+      Set_Has_Aspects (N);\n+      Set_Parent (L, N);\n+      Aspect_Specifications_Hash_Table.Set (N, L);\n+   end Set_Aspect_Specifications_No_Check;\n+\n    ---------------\n    -- Tree_Read --\n    ---------------\n@@ -273,7 +298,7 @@ package body Aspects is\n          Tree_Read_Int (Int (Node));\n          Tree_Read_Int (Int (List));\n          exit when List = No_List;\n-         Set_Aspect_Specifications (Node, List);\n+         Set_Aspect_Specifications_No_Check (Node, List);\n       end loop;\n    end Tree_Read;\n "}, {"sha": "24e58cc45fbc3ce602a1f4071de237e8975d54c1", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -1502,6 +1502,7 @@ package body Bindgen is\n          WBI (\"\");\n \n          --  For CodePeer, declare a wrapper for the user-defined main program\n+\n          if CodePeer_Mode then\n             Gen_CodePeer_Wrapper;\n          end if;"}, {"sha": "af6200dc836f7140713311accce4bb97ba61ddcf", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -124,7 +124,7 @@ package body Debug is\n    --  d.D\n    --  d.E\n    --  d.F  ALFA mode\n-   --  d.G\n+   --  d.G  Precondition only mode for gnat2why\n    --  d.H\n    --  d.I  SCIL generation mode\n    --  d.J  Disable parallel SCIL generation mode\n@@ -584,6 +584,10 @@ package body Debug is\n    --       as well as additional cross reference information in ALI files to\n    --       compute effects of subprograms.\n \n+   --  d.G  Precondition only mode for gnat2why. In this mode, gnat2why will\n+   --       only generate Why code that checks for the well-guardedness of\n+   --       preconditions.\n+\n    --  d.I  Generate SCIL mode. Generate intermediate code for the sake of\n    --       of static analysis tools, and ensure additional tree consistency\n    --       between different compilations of specs."}, {"sha": "35fce3adc279ab647bb0e5fab2bff410afc05290", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -131,7 +131,7 @@ package Einfo is\n --  The Ada 95 RM contains some rather peculiar (to us!) rules on the value\n --  of type'Size (see RM 13.3(55)). We have found that attempting to use\n --  these RM Size values generally, and in particular for determining the\n---  default size of objects, creates chaos, and major incompatibilies in\n+--  default size of objects, creates chaos, and major incompatibilities in\n --  existing code.\n \n --  We proceed as follows, for discrete and fixed-point subtypes, we have"}, {"sha": "9ec558cca2ae2992140637998e1e148597157f02", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -9154,8 +9154,16 @@ package body Exp_Ch4 is\n         and then Target_Type /= Operand_Type\n         and then Comes_From_Source (N)\n       then\n-         Insert_Action (N,\n-           Make_Predicate_Check (Target_Type, Duplicate_Subexpr (N)));\n+         declare\n+            New_Expr : constant Node_Id := Duplicate_Subexpr (N);\n+\n+         begin\n+            --  Avoid infinite recursion on the subsequent expansion of\n+            --  of the copy of the original type conversion.\n+\n+            Set_Comes_From_Source (New_Expr, False);\n+            Insert_Action (N, Make_Predicate_Check (Target_Type, New_Expr));\n+         end;\n       end if;\n    end Expand_N_Type_Conversion;\n "}, {"sha": "985f8656c66aac4067f3bc7f433329b2897c001c", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -911,10 +911,10 @@ package body Exp_Strm is\n           Selector_Name => Make_Identifier (Loc, Name_V));\n \n       --  Generate Reads for the discriminants of the type. The discriminants\n-      --  need to be read before the rest of the components, so that\n-      --  variants are initialized correctly. The discriminants must be read\n-      --  into temporary variables so an incomplete Read (interrupted by an\n-      --  exception, for example) does not alter the passed object.\n+      --  need to be read before the rest of the components, so that variants\n+      --  are initialized correctly. The discriminants must be read into temp\n+      --  variables so an incomplete Read (interrupted by an exception, for\n+      --  example) does not alter the passed object.\n \n       while Present (Disc) loop\n          Tmp_For_Disc := Make_Defining_Identifier (Loc,\n@@ -928,9 +928,9 @@ package body Exp_Strm is\n \n          Append_To (Stms,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (Etype (Disc), Loc),\n+             Prefix         => New_Occurrence_Of (Etype (Disc), Loc),\n              Attribute_Name => Name_Read,\n-             Expressions => New_List (\n+             Expressions    => New_List (\n                Make_Identifier (Loc, Name_S),\n                New_Occurrence_Of (Tmp_For_Disc, Loc))));\n \n@@ -946,14 +946,14 @@ package body Exp_Strm is\n                  Left_Opnd  => New_Occurrence_Of (Tmp_For_Disc, Loc),\n                  Right_Opnd =>\n                    Make_Selected_Component (Loc,\n-                     Prefix => New_Copy_Tree (Out_Formal),\n+                     Prefix        => New_Copy_Tree (Out_Formal),\n                      Selector_Name => New_Occurrence_Of (Disc, Loc))),\n              Reason => CE_Discriminant_Check_Failed));\n          Next_Discriminant (Disc);\n       end loop;\n \n-      --  Generate reads for the components of the record (including\n-      --  those that depend on discriminants).\n+      --  Generate reads for the components of the record (including those\n+      --  that depend on discriminants).\n \n       Build_Record_Read_Write_Procedure (Loc, Typ, Decl, Pnam, Name_Read);\n \n@@ -977,14 +977,14 @@ package body Exp_Strm is\n       Constrained_Stms := Statements (Handled_Statement_Sequence (Decl));\n       Append_To (Stms,\n         Make_Block_Statement (Loc,\n-          Declarations => Dcls,\n+          Declarations               => Dcls,\n           Handled_Statement_Sequence => Parent (Constrained_Stms)));\n \n       Append_To (Constrained_Stms,\n         Make_Implicit_If_Statement (Pnam,\n           Condition =>\n             Make_Attribute_Reference (Loc,\n-              Prefix => New_Copy_Tree (Out_Formal),\n+              Prefix         => New_Copy_Tree (Out_Formal),\n               Attribute_Name => Name_Constrained),\n           Then_Statements => Discriminant_Checks));\n "}, {"sha": "26f3085653b1af5caa1e85322859416655b9d0cf", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -14535,10 +14535,10 @@ Gnatmetric computes the following coupling metrics:\n sense;\n \n @item\n-emph{unit coupling} - for all the program units making up a program;\n+@emph{unit coupling} - for all the program units making up a program;\n \n @item\n-emph{control coupling} - this metric counts dependencies between a unit and\n+@emph{control coupling} - this metric counts dependencies between a unit and\n only those units that define subprograms;\n @end itemize\n "}, {"sha": "28bccf0db100cd3825c3eeb066848416d7e8828f", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -865,11 +865,18 @@ procedure GNATCmd is\n       if Return_Code /= 0 then\n          Get_Line (File, Line, Last);\n \n-         if not Keep_Temporary_Files then\n-            Delete (File);\n-         else\n-            Close (File);\n-         end if;\n+         begin\n+            if not Keep_Temporary_Files then\n+               Delete (File);\n+            else\n+               Close (File);\n+            end if;\n+\n+         exception\n+            --  Don't crash if it is not possible to delete or close the file\n+            when others =>\n+               null;\n+         end;\n \n          Put_Line (Standard_Error, Line (1 .. Last));\n          Put_Line"}, {"sha": "5afe2be6306b763b835f58c02cc87f0eee344633", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -1572,16 +1572,11 @@ begin\n                --  is to be dealt with specially because it needs to be passed\n                --  if the binder-generated file is in Ada and may also be used\n                --  to drive the linker.\n-               --  Also in CodePeer mode, we need to pass the -gnat05 or\n-               --  -gnat12 switches to be able to compile the binder file.\n \n                declare\n                   Arg : String_Ptr renames Args.Table (Index);\n                begin\n-                  if not Is_Front_End_Switch (Arg.all)\n-                    or else (Opt.CodePeer_Mode\n-                             and then Is_Language_Switch (Arg.all))\n-                  then\n+                  if not Is_Front_End_Switch (Arg.all) then\n                      Binder_Options_From_ALI.Increment_Last;\n                      Binder_Options_From_ALI.Table\n                        (Binder_Options_From_ALI.Last) := String_Access (Arg);"}, {"sha": "4cc0365b4103e9856fca3be72f9ed1f79c5bf6b4", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -4352,14 +4352,13 @@ package body Make is\n             end if;\n          end if;\n \n-         --  Put the object directories in ADA_OBJECTS_PATH. Same treatment for\n-         --  source directories in ADA_INCLUDE_PATH if in CodePeer mode.\n+         --  Put the object directories in ADA_OBJECTS_PATH.\n \n          Prj.Env.Set_Ada_Paths\n            (Main_Project,\n             Project_Tree,\n             Including_Libraries => False,\n-            Include_Path        => CodePeer_Mode);\n+            Include_Path        => False);\n \n          --  Check for attributes Linker'Linker_Options in projects other than\n          --  the main project"}, {"sha": "0f7dbad6ff3cb09bfc3d2ba320598ba908e98a87", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1992-2010, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1992-2011, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -122,7 +122,7 @@ package System.File_Control_Block is\n       --  Indicates sharing status of file, see description of type above\n \n       Access_Method : Character;\n-      --  Set to 'Q', 'S', 'T, 'D' for Sequential_IO, Stream_IO, Text_IO\n+      --  Set to 'Q', 'S', 'T, 'D' for Sequential_IO, Stream_IO, Text_IO,\n       --  Direct_IO file (used to validate file sharing request).\n \n       Next : AFCB_Ptr;"}, {"sha": "db1f2e707b5ccd6a48be109abaf9c30f79005641", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -2015,7 +2015,7 @@ package body Sem_Ch12 is\n       Renaming         : Node_Id;\n       Parent_Instance  : Entity_Id;\n       Renaming_In_Par  : Entity_Id;\n-      No_Associations  : Boolean := False;\n+      Associations     : Boolean := True;\n \n       function Build_Local_Package return Node_Id;\n       --  The formal package is rewritten so that its parameters are replaced\n@@ -2186,7 +2186,7 @@ package body Sem_Ch12 is\n         or else No (Generic_Associations (N))\n         or else Nkind (First (Generic_Associations (N))) = N_Others_Choice\n       then\n-         No_Associations := True;\n+         Associations := False;\n       end if;\n \n       --  If there are no generic associations, the generic parameters appear\n@@ -2266,25 +2266,32 @@ package body Sem_Ch12 is\n       --  The formals for which associations are provided are not visible\n       --  outside of the formal package. The others are still declared by a\n       --  formal parameter declaration.\n+      --  If there are no associations, the only local entity to hide is the\n+      --  generated package renaming itself.\n \n-      if not No_Associations then\n-         declare\n-            E : Entity_Id;\n+      declare\n+         E : Entity_Id;\n \n-         begin\n-            E := First_Entity (Formal);\n-            while Present (E) loop\n-               exit when Ekind (E) = E_Package\n-                 and then Renamed_Entity (E) = Formal;\n+      begin\n+         E := First_Entity (Formal);\n+         while Present (E) loop\n \n-               if not Is_Generic_Formal (E) then\n-                  Set_Is_Hidden (E);\n-               end if;\n+            if Associations\n+              and then not Is_Generic_Formal (E)\n+            then\n+               Set_Is_Hidden (E);\n+            end if;\n \n-               Next_Entity (E);\n-            end loop;\n-         end;\n-      end if;\n+            if Ekind (E) = E_Package\n+              and then Renamed_Entity (E) = Formal\n+            then\n+               Set_Is_Hidden (E);\n+               exit;\n+            end if;\n+\n+            Next_Entity (E);\n+         end loop;\n+      end;\n \n       End_Package_Scope (Formal);\n "}, {"sha": "3fe88c96ae728f822776a7792e24f8a8f752f851", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -151,10 +151,14 @@ package Sem_Ch12 is\n    procedure Save_Env\n      (Gen_Unit : Entity_Id;\n       Act_Unit : Entity_Id);\n-   --   ??? comment needed\n+   --  Because instantiations can be nested, the compiler maintains a stack\n+   --  of environments that holds variables relevant to the current instance:\n+   --  most importanty Instantiated_Parent, Exchanged_Views, Hidden_Entities,\n+   --  and others (see full list in Instance_Env).\n \n    procedure Restore_Env;\n-   --   ??? comment needed\n+   --  After processing an instantiation, or aborting one because of semantic\n+   --  errors, remove the current Instantiation_Env from Instantation_Envs.\n \n    procedure Initialize;\n    --  Initializes internal data structures"}, {"sha": "653d9dfa32850ddac9ab1892a97a415ac78587d8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -19678,6 +19678,81 @@ package body Sem_Ch3 is\n       Set_Ekind          (T, E_Signed_Integer_Subtype);\n       Set_Etype          (T, Implicit_Base);\n \n+      --  In formal verification mode, override partially the decisions above\n+      --  to restrict base type's range to the minimum allowed by RM 3.5.4,\n+      --  namely the smallest symmetric range around zero with a possible extra\n+      --  negative value that contains the subtype range. Keep Size, RM_Size\n+      --  and First_Rep_Item info, which should not be relied upon in formal\n+      --  verification.\n+\n+      if ALFA_Mode then\n+\n+         --  If the range of the type is already symmetric with a possible\n+         --  extra negative value, just make the type its own base type.\n+\n+         if UI_Le (Lo_Val, Hi_Val)\n+           and then (UI_Eq (Lo_Val, UI_Negate (Hi_Val))\n+                      or else\n+                        UI_Eq (Lo_Val, UI_Sub (UI_Negate (Hi_Val), Uint_1)))\n+         then\n+            Set_Etype (T, T);\n+\n+         else\n+            declare\n+               Sym_Hi_Val : Uint;\n+               Sym_Lo_Val : Uint;\n+               Decl       : Node_Id;\n+               Dloc       : constant Source_Ptr := Sloc (Def);\n+               Lbound     : Node_Id;\n+               Ubound     : Node_Id;\n+\n+            begin\n+               --  If the subtype range is empty, the smallest base type range\n+               --  is the symmetric range around zero containing Lo_Val and\n+               --  Hi_Val.\n+\n+               if UI_Gt (Lo_Val, Hi_Val) then\n+                  Sym_Hi_Val := UI_Max (UI_Abs (Lo_Val), UI_Abs (Hi_Val));\n+                  Sym_Lo_Val := UI_Negate (Sym_Hi_Val);\n+\n+               --  Otherwise, if the subtype range is not empty and Hi_Val has\n+               --  the largest absolute value, Hi_Val is non negative and the\n+               --  smallest base type range is the symmetric range around zero\n+               --  containing Hi_Val.\n+\n+               elsif UI_Le (UI_Abs (Lo_Val), UI_Abs (Hi_Val)) then\n+                  Sym_Hi_Val := Hi_Val;\n+                  Sym_Lo_Val := UI_Negate (Hi_Val);\n+\n+               --  Otherwise, the subtype range is not empty, Lo_Val has the\n+               --  strictly largest absolute value, Lo_Val is negative and the\n+               --  smallest base type range is the symmetric range around zero\n+               --  with an extra negative value Lo_Val.\n+\n+               else\n+                  Sym_Lo_Val := Lo_Val;\n+                  Sym_Hi_Val := UI_Sub (UI_Negate (Lo_Val), Uint_1);\n+               end if;\n+\n+               Lbound := Make_Integer_Literal (Dloc, Sym_Lo_Val);\n+               Ubound := Make_Integer_Literal (Dloc, Sym_Hi_Val);\n+               Set_Is_Static_Expression (Lbound);\n+               Set_Is_Static_Expression (Ubound);\n+\n+               Decl := Make_Full_Type_Declaration (Dloc,\n+                 Defining_Identifier => Implicit_Base,\n+                 Type_Definition     =>\n+                   Make_Signed_Integer_Type_Definition (Dloc,\n+                     Low_Bound  => Lbound,\n+                     High_Bound => Ubound));\n+\n+               Analyze (Decl);\n+               Set_Etype (Implicit_Base, Implicit_Base);\n+               Insert_Before (Parent (Def), Decl);\n+            end;\n+         end if;\n+      end if;\n+\n       Set_Size_Info      (T,                (Implicit_Base));\n       Set_First_Rep_Item (T, First_Rep_Item (Implicit_Base));\n       Set_Scalar_Range   (T, Def);"}, {"sha": "c4189f58796fa02bb0b42a7cf9c403a846865203", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -1059,8 +1059,8 @@ package body Switch.C is\n                  (\"-gnatZ is no longer supported: consider using --RTS=zcx\");\n \n             --  Note on language version switches: whenever a new language\n-            --  version switch is added, function Switch.Is_Language_Switch and\n-            --  procedure Switch.M.Normalize_Compiler_Switches must be updated.\n+            --  version switch is added, procedure\n+            --  Switch.M.Normalize_Compiler_Switches must be updated.\n \n             --  Processing for 83 switch\n "}, {"sha": "000f95136c52548918de3bf13e2c029a7a2c2352", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -138,23 +138,6 @@ package body Switch is\n                       and then Switch_Chars (Ptr + 2 .. Ptr + 4) = \"RTS\"));\n    end Is_Front_End_Switch;\n \n-   -------------------------\n-   -- Is_Language_Switch --\n-   -------------------------\n-\n-   function Is_Language_Switch (Switch_Chars : String) return Boolean is\n-      Ptr : constant Positive := Switch_Chars'First;\n-   begin\n-      return Is_Switch (Switch_Chars)\n-        and then\n-          (Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat83\"\n-           or else Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat95\"\n-           or else Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat05\"\n-           or else Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat2005\"\n-           or else Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat12\"\n-           or else Switch_Chars (Ptr + 1 .. Switch_Chars'Last) = \"gnat2012\");\n-   end Is_Language_Switch;\n-\n    ----------------------------\n    -- Is_Internal_GCC_Switch --\n    ----------------------------"}, {"sha": "ce3b37166eb2bd7b1d1ffb15efa04e99b730ad8f", "filename": "gcc/ada/switch.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Fswitch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.ads?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -72,10 +72,6 @@ package Switch is\n    --  Returns True iff Switch_Chars represents a front-end switch, i.e. it\n    --  starts with -I, -gnat or -?RTS.\n \n-   function Is_Language_Switch (Switch_Chars : String) return Boolean;\n-   --  Returns True iff Switch_Chars represents a language switch, i.e. it\n-   --  specifies -gnat83/95/2005/2012.\n-\n    function Is_Internal_GCC_Switch (Switch_Chars : String) return Boolean;\n    --  Returns True iff Switch_Chars represents an internal GCC switch to be\n    --  followed by a single argument, such as -dumpbase, --param or -auxbase."}, {"sha": "c289443d696adeb8e35f3871e47837e95bbbfd69", "filename": "gcc/ada/tree_gen.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Ftree_gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Ftree_gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_gen.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,7 +25,6 @@\n \n with Aspects;\n with Atree;\n-with Debug;\n with Elists;\n with Fname;\n with Lib;\n@@ -51,14 +50,8 @@ procedure Tree_Gen is\n begin\n    if Opt.Tree_Output then\n       Osint.C.Tree_Create;\n-      Opt.Tree_Write;\n-\n-      --  For now, only write aspect specifications hash table if -gnatd.A set\n-\n-      if Debug.Debug_Flag_Dot_AA then\n-         Aspects.Tree_Write;\n-      end if;\n \n+      Opt.Tree_Write;\n       Atree.Tree_Write;\n       Elists.Tree_Write;\n       Fname.Tree_Write;\n@@ -72,6 +65,8 @@ begin\n       Uintp.Tree_Write;\n       Urealp.Tree_Write;\n       Repinfo.Tree_Write;\n+      Aspects.Tree_Write;\n+\n       Osint.C.Tree_Close;\n    end if;\n end Tree_Gen;"}, {"sha": "fd09c63b9500975c06cc4bbf2f53b858cf2e47da", "filename": "gcc/ada/tree_in.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Ftree_in.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00332244ee74e60f4d7a54db20839c3a35b07588/gcc%2Fada%2Ftree_in.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_in.adb?ref=00332244ee74e60f4d7a54db20839c3a35b07588", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,6 @@\n with Aspects;\n with Atree;\n with Csets;\n-with Debug;\n with Elists;\n with Fname;\n with Lib;\n@@ -51,14 +50,8 @@ with Urealp;\n procedure Tree_In (Desc : File_Descriptor) is\n begin\n    Tree_IO.Tree_Read_Initialize (Desc);\n-   Opt.Tree_Read;\n-\n-   --  For now, only  read aspect specifications hash table if -gnatd.A is set\n-\n-   if Debug.Debug_Flag_Dot_AA then\n-      Aspects.Tree_Read;\n-   end if;\n \n+   Opt.Tree_Read;\n    Atree.Tree_Read;\n    Elists.Tree_Read;\n    Fname.Tree_Read;\n@@ -72,5 +65,7 @@ begin\n    Uintp.Tree_Read;\n    Urealp.Tree_Read;\n    Repinfo.Tree_Read;\n+   Aspects.Tree_Read;\n+\n    Csets.Initialize;\n end Tree_In;"}]}