{"sha": "7392e5d8888462610b5536c2894d2923b826faed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5MmU1ZDg4ODg0NjI2MTBiNTUzNmMyODk0ZDI5MjNiODI2ZmFlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:20:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:20:08Z"}, "message": "Remove global call sets: caller-save.c\n\nAll caller-save.c uses of \"|= fixed_reg_set\" added in a previous patch\nwere redundant, since the sets are later ANDed with ~fixed_reg_set.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* caller-save.c (setup_save_areas): Remove redundant |s of\n\tfixed_reg_set.\n\t(save_call_clobbered_regs): Likewise.  Use the call ABI rather\n\tthan call_used_or_fixed_regs to decide whether a REG_RETURNED\n\tvalue is useful.\n\nFrom-SVN: r276313", "tree": {"sha": "2b67d39abfa07cbc037a4b97e98d34bee0fd5134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b67d39abfa07cbc037a4b97e98d34bee0fd5134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7392e5d8888462610b5536c2894d2923b826faed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7392e5d8888462610b5536c2894d2923b826faed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7392e5d8888462610b5536c2894d2923b826faed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7392e5d8888462610b5536c2894d2923b826faed/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "737d6a1a1745bdd4041e73800a842a1086967d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737d6a1a1745bdd4041e73800a842a1086967d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737d6a1a1745bdd4041e73800a842a1086967d5d"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "d912a87816120c659bfa41c121a17e1590f6f889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7392e5d8888462610b5536c2894d2923b826faed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7392e5d8888462610b5536c2894d2923b826faed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7392e5d8888462610b5536c2894d2923b826faed", "patch": "@@ -1,3 +1,11 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* caller-save.c (setup_save_areas): Remove redundant |s of\n+\tfixed_reg_set.\n+\t(save_call_clobbered_regs): Likewise.  Use the call ABI rather\n+\tthan call_used_or_fixed_regs to decide whether a REG_RETURNED\n+\tvalue is useful.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* rtl.h (predefined_function_abi): Declare."}, {"sha": "69453871d123f46942b1a43e98614c95e8ba01e5", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7392e5d8888462610b5536c2894d2923b826faed/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7392e5d8888462610b5536c2894d2923b826faed/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=7392e5d8888462610b5536c2894d2923b826faed", "patch": "@@ -428,8 +428,6 @@ setup_save_areas (void)\n       REG_SET_TO_HARD_REG_SET (hard_regs_to_save,\n \t\t\t       &chain->live_throughout);\n       used_regs = insn_callee_abi (insn).full_reg_clobbers ();\n-      /* ??? This preserves traditional behavior; it might not be needed.  */\n-      used_regs |= fixed_reg_set;\n \n       /* Record all registers set in this call insn.  These don't\n \t need to be saved.  N.B. the call insn might set a subreg\n@@ -513,9 +511,6 @@ setup_save_areas (void)\n \t  REG_SET_TO_HARD_REG_SET (hard_regs_to_save,\n \t\t\t\t   &chain->live_throughout);\n \t  used_regs = insn_callee_abi (insn).full_reg_clobbers ();\n-\t  /* ??? This preserves traditional behavior; it might not\n-\t     be needed.  */\n-\t  used_regs |= fixed_reg_set;\n \n \t  /* Record all registers set in this call insn.  These don't\n \t     need to be saved.  N.B. the call insn might set a subreg\n@@ -793,7 +788,6 @@ save_call_clobbered_regs (void)\n \t    {\n \t      unsigned regno;\n \t      HARD_REG_SET hard_regs_to_save;\n-\t      HARD_REG_SET call_def_reg_set;\n \t      reg_set_iterator rsi;\n \t      rtx cheap;\n \n@@ -840,15 +834,12 @@ save_call_clobbered_regs (void)\n \t      note_stores (insn, mark_set_regs, &this_insn_sets);\n \n \t      /* Compute which hard regs must be saved before this call.  */\n+\t      function_abi callee_abi = insn_callee_abi (insn);\n \t      hard_regs_to_save &= ~(fixed_reg_set\n \t\t\t\t     | this_insn_sets\n \t\t\t\t     | hard_regs_saved);\n \t      hard_regs_to_save &= savable_regs;\n-\t      call_def_reg_set = insn_callee_abi (insn).full_reg_clobbers ();\n-\t      /* ??? This preserves traditional behavior; it might not\n-\t\t be needed.  */\n-\t      call_def_reg_set |= fixed_reg_set;\n-\t      hard_regs_to_save &= call_def_reg_set;\n+\t      hard_regs_to_save &= callee_abi.full_reg_clobbers ();\n \n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t\tif (TEST_HARD_REG_BIT (hard_regs_to_save, regno))\n@@ -863,8 +854,8 @@ save_call_clobbered_regs (void)\n \t      \n \t      if (cheap\n \t\t  && HARD_REGISTER_P (cheap)\n-\t\t  && TEST_HARD_REG_BIT (call_used_or_fixed_regs,\n-\t\t\t\t\tREGNO (cheap)))\n+\t\t  && callee_abi.clobbers_reg_p (GET_MODE (cheap),\n+\t\t\t\t\t\tREGNO (cheap)))\n \t\t{\n \t\t  rtx dest, newpat;\n \t\t  rtx pat = PATTERN (insn);"}]}