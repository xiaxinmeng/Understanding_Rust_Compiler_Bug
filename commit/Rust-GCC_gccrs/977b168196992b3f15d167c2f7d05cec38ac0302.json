{"sha": "977b168196992b3f15d167c2f7d05cec38ac0302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3YjE2ODE5Njk5MmIzZjE1ZDE2N2MyZjdkMDVjZWMzOGFjMDMwMg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-05-06T01:10:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:04Z"}, "message": "[Ada] Predicates and the current instance of a subtype (AI12-0068)\n\ngcc/ada/\n\n\t* sem_attr.adb (Analyze_Attribute, Attribute_Constrained): Issue\n\ta warning if the attribute prefix is a current instance\n\treference within an aspect of a type or subtype.\n\t(Address_Checks): Replace test of Is_Object (Ent) with\n\tIs_Object_Reference (P) so that testing for current instances\n\twill be done.\n\t(Eval_Attribute): Add test for current instance reference, to\n\tensure that we still fold array attributes when current\n\tinstances are involved, since value prefixes are allowed for\n\tarray attributes, and will now be excluded by\n\tIs_Object_Reference.\n\t* sem_util.ads (Is_Current_Instance_Reference_In_Type_Aspect):\n\tNew exported query function.\n\t* sem_util.adb (Is_Object_Reference): Return False for the case\n\twhere N is a current instance reference within an\n\taspect_specification of a type or subtype (basically if the\n\treference occurs within a predicate, invariant, or DIC aspect\n\texpression).\n\t(Is_Current_Instance_Reference_In_Type_Aspect): New function\n\tthat tests whether a node is a reference to a current instance\n\tformal of a predicate, invariant, or\n\tDefault_Initial_Condition (DIC) subprogram.", "tree": {"sha": "f4137ec4f86814cf5e015f2c3f4b91dca3d6b4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4137ec4f86814cf5e015f2c3f4b91dca3d6b4d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/977b168196992b3f15d167c2f7d05cec38ac0302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977b168196992b3f15d167c2f7d05cec38ac0302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977b168196992b3f15d167c2f7d05cec38ac0302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977b168196992b3f15d167c2f7d05cec38ac0302/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ac6d8aadae834c20493def3c38ce6b67383c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ac6d8aadae834c20493def3c38ce6b67383c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ac6d8aadae834c20493def3c38ce6b67383c6a"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "d012418c8a3214714bc6bb2732d5aa86f04245c7", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=977b168196992b3f15d167c2f7d05cec38ac0302", "patch": "@@ -525,7 +525,7 @@ package body Sem_Attr is\n \n                --  Object or label reference\n \n-               elsif Is_Object (Ent) or else Ekind (Ent) = E_Label then\n+               elsif Is_Object_Reference (P) or else Ekind (Ent) = E_Label then\n                   Set_Address_Taken (Ent);\n \n                   --  Deal with No_Implicit_Aliasing restriction\n@@ -3486,11 +3486,25 @@ package body Sem_Attr is\n                return;\n             end if;\n \n-         --  Normal (non-obsolescent case) of application to object of\n+         --  Normal (non-obsolescent case) of application to object or value of\n          --  a discriminated type.\n \n          else\n-            Check_Object_Reference (P);\n+            --  AI12-0068: In a type or subtype aspect, a prefix denoting the\n+            --  current instance of the (sub)type is defined to be a value,\n+            --  not an object, so the Constrained attribute is always True\n+            --  (see RM 8.6(18/5) and RM 3.7.2(3/5)). We issue a warning about\n+            --  this unintuitive result, to help avoid confusion.\n+\n+            if Is_Current_Instance_Reference_In_Type_Aspect (P) then\n+               Error_Msg_Name_1 := Aname;\n+               Error_Msg_N\n+                 (\"current instance attribute % in subtype aspect always \" &\n+                  \"true??\", N);\n+\n+            else\n+               Check_Object_Reference (P);\n+            end if;\n \n             --  If N does not come from source, then we allow the\n             --  the attribute prefix to be of a private type whose\n@@ -4169,11 +4183,13 @@ package body Sem_Attr is\n \n          if Comes_From_Source (N) then\n \n-            --  A similar attribute Valid_Scalars can be prefixed with\n-            --  references to both functions and objects, but this attribute\n-            --  can be only prefixed with references to objects.\n+            --  This attribute be prefixed with references to objects or\n+            --  values (such as a current instance value given within a type\n+            --  or subtype aspect).\n \n-            if not Is_Object_Reference (P) then\n+            if not Is_Object_Reference (P)\n+              and then not Is_Current_Instance_Reference_In_Type_Aspect (P)\n+            then\n                Error_Attr_P (\"prefix of % attribute must be object\");\n             end if;\n          end if;\n@@ -7745,11 +7761,13 @@ package body Sem_Attr is\n          return;\n       end if;\n \n-      --  Special processing for cases where the prefix is an object. For this\n-      --  purpose, a string literal counts as an object (attributes of string\n-      --  literals can only appear in generated code).\n+      --  Special processing for cases where the prefix is an object or value,\n+      --  including string literals (attributes of string literals can only\n+      --  appear in generated code) and current instance prefixes in type or\n+      --  subtype aspects.\n \n       if Is_Object_Reference (P)\n+        or else Is_Current_Instance_Reference_In_Type_Aspect (P)\n         or else Nkind (P) = N_String_Literal\n         or else (Is_Entity_Name (P)\n                  and then Ekind (Entity (P)) = E_Enumeration_Literal)"}, {"sha": "7ce78a2451c8eeff46776577f838d153b608e40d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=977b168196992b3f15d167c2f7d05cec38ac0302", "patch": "@@ -15029,6 +15029,59 @@ package body Sem_Util is\n       return False;\n    end Is_Current_Instance;\n \n+   --------------------------------------------------\n+   -- Is_Current_Instance_Reference_In_Type_Aspect --\n+   --------------------------------------------------\n+\n+   function Is_Current_Instance_Reference_In_Type_Aspect\n+     (N : Node_Id) return Boolean\n+   is\n+   begin\n+      --  When a current_instance is referenced within an aspect_specification\n+      --  of a type or subtype, it will show up as a reference to the formal\n+      --  parameter of the aspect's associated subprogram rather than as a\n+      --  reference to the type or subtype itself (in fact, the original name\n+      --  is never even analyzed). We check for predicate, invariant, and\n+      --  Default_Initial_Condition subprograms (in theory there could be\n+      --  other cases added, in which case this function will need updating).\n+\n+      if Is_Entity_Name (N) then\n+         return Present (Entity (N))\n+           and then Ekind (Entity (N)) = E_In_Parameter\n+           and then Ekind_In (Scope (Entity (N)), E_Function, E_Procedure)\n+           and then\n+             (Is_Predicate_Function (Scope (Entity (N)))\n+               or else Is_Predicate_Function_M (Scope (Entity (N)))\n+               or else Is_Invariant_Procedure (Scope (Entity (N)))\n+               or else Is_Partial_Invariant_Procedure (Scope (Entity (N)))\n+               or else Is_DIC_Procedure (Scope (Entity (N))));\n+\n+      else\n+         case Nkind (N) is\n+            when N_Indexed_Component\n+               | N_Slice\n+            =>\n+               return\n+                 Is_Current_Instance_Reference_In_Type_Aspect (Prefix (N));\n+\n+            when N_Selected_Component =>\n+               return\n+                 Is_Current_Instance_Reference_In_Type_Aspect (Prefix (N));\n+\n+            when N_Type_Conversion =>\n+               return Is_Current_Instance_Reference_In_Type_Aspect\n+                        (Expression (N));\n+\n+            when N_Qualified_Expression =>\n+               return Is_Current_Instance_Reference_In_Type_Aspect\n+                        (Expression (N));\n+\n+            when others =>\n+               return False;\n+         end case;\n+      end if;\n+   end Is_Current_Instance_Reference_In_Type_Aspect;\n+\n    --------------------\n    -- Is_Declaration --\n    --------------------\n@@ -16983,8 +17036,13 @@ package body Sem_Util is\n \n    function Is_Object_Reference (N : Node_Id) return Boolean is\n    begin\n+      --  AI12-0068: Note that a current instance reference in a type or\n+      --  subtype's aspect_specification is considered a value, not an object\n+      --  (see RM 8.6(18/5)).\n+\n       if Is_Entity_Name (N) then\n-         return Present (Entity (N)) and then Is_Object (Entity (N));\n+         return Present (Entity (N)) and then Is_Object (Entity (N))\n+           and then not Is_Current_Instance_Reference_In_Type_Aspect (N);\n \n       else\n          case Nkind (N) is"}, {"sha": "df7e62c923c72d9cd71b338dbc1493c3baa6a4bd", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977b168196992b3f15d167c2f7d05cec38ac0302/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=977b168196992b3f15d167c2f7d05cec38ac0302", "patch": "@@ -1693,6 +1693,13 @@ package Sem_Util is\n    --  declarations. In Ada 2012 it also covers type and subtype declarations\n    --  with aspects: Invariant, Predicate, and Default_Initial_Condition.\n \n+   function Is_Current_Instance_Reference_In_Type_Aspect\n+     (N : Node_Id) return Boolean;\n+   --  True if N is a reference to a current instance object that occurs within\n+   --  an aspect_specification for a type or subtype. In this case N will be\n+   --  a formal parameter of a subprogram created for a predicate, invariant,\n+   --  or Default_Initial_Condition aspect.\n+\n    function Is_Declaration\n      (N                : Node_Id;\n       Body_OK          : Boolean := True;"}]}