{"sha": "b693daa7a91aed74c366852d3359b97ad52a3c9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5M2RhYTdhOTFhZWQ3NGMzNjY4NTJkMzM1OWI5N2FkNTJhM2M5Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-09-12T15:52:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-09-12T15:52:57Z"}, "message": "re PR ada/26797 (ACATS cxh1001 fails)\n\n\tPR ada/26797\n\tPR ada/32407\n\t* utils.c (unchecked_convert): Use a subtype as the intermediate type\n\tin the special VIEW_CONVERT_EXPR case.\n\nFrom-SVN: r128441", "tree": {"sha": "d3296b3ce3b3597b782252a07d76392ade05f4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3296b3ce3b3597b782252a07d76392ade05f4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b693daa7a91aed74c366852d3359b97ad52a3c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693daa7a91aed74c366852d3359b97ad52a3c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693daa7a91aed74c366852d3359b97ad52a3c9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693daa7a91aed74c366852d3359b97ad52a3c9b/comments", "author": null, "committer": null, "parents": [{"sha": "94dabea7286d9e974c309c8b0a2e3b98d4c09891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dabea7286d9e974c309c8b0a2e3b98d4c09891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94dabea7286d9e974c309c8b0a2e3b98d4c09891"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "a0bf5126695007571b71e01f27aa60628d49f23b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693daa7a91aed74c366852d3359b97ad52a3c9b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693daa7a91aed74c366852d3359b97ad52a3c9b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b693daa7a91aed74c366852d3359b97ad52a3c9b", "patch": "@@ -1,3 +1,10 @@\n+2007-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/26797\n+\tPR ada/32407\n+\t* utils.c (unchecked_convert): Use a subtype as the intermediate type\n+\tin the special VIEW_CONVERT_EXPR case.\n+\n 2007-09-12  Robert Dewar  <dewar@adacore.com>\n \n \t* types.ads, a-charac.ads, freeze.adb: Minor reformatting."}, {"sha": "0db4e78dc9f1eecb07dca685cdd4d99a3fec086b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693daa7a91aed74c366852d3359b97ad52a3c9b/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693daa7a91aed74c366852d3359b97ad52a3c9b/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=b693daa7a91aed74c366852d3359b97ad52a3c9b", "patch": "@@ -3808,7 +3808,7 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t  TYPE_MAIN_VARIANT (rtype) = rtype;\n \t}\n \n-      /* We have another special case.  If we are unchecked converting subtype\n+      /* We have another special case: if we are unchecked converting subtype\n \t into a base type, we need to ensure that VRP doesn't propagate range\n \t information since this conversion may be done precisely to validate\n \t that the object is within the range it is supposed to have.  */\n@@ -3818,21 +3818,18 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t\t   || TREE_CODE (etype) == ENUMERAL_TYPE\n \t\t   || TREE_CODE (etype) == BOOLEAN_TYPE))\n \t{\n-\t  /* ??? The pattern to be \"preserved\" by the middle-end and the\n-\t     optimizers is a VIEW_CONVERT_EXPR between a pair of different\n-\t     \"base\" types (integer types without TREE_TYPE).  But this may\n-\t     raise addressability/aliasing issues because VIEW_CONVERT_EXPR\n-\t     gets gimplified as an lvalue, thus causing the address of its\n-\t     operand to be taken if it is deemed addressable and not already\n-\t     in GIMPLE form.  */\n+\t  /* The optimization barrier is a VIEW_CONVERT_EXPR node; moreover,\n+\t     in order not to be deemed an useless type conversion, it must\n+\t     be from subtype to base type.\n+\n+\t     ??? This may raise addressability and/or aliasing issues because\n+\t     VIEW_CONVERT_EXPR gets gimplified as an lvalue, thus causing the\n+\t     address of its operand to be taken if it is deemed addressable\n+\t     and not already in GIMPLE form.  */\n \t  rtype = gnat_type_for_mode (TYPE_MODE (type), TYPE_UNSIGNED (type));\n-\n-\t  if (rtype == type)\n-\t    {\n-\t      rtype = copy_type (rtype);\n-\t      TYPE_MAIN_VARIANT (rtype) = rtype;\n-\t    }\n-\n+\t  rtype = copy_type (rtype);\n+\t  TYPE_MAIN_VARIANT (rtype) = rtype;\n+\t  TREE_TYPE (rtype) = type;\n \t  final_unchecked = true;\n \t}\n "}]}