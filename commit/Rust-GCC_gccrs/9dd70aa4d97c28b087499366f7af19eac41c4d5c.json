{"sha": "9dd70aa4d97c28b087499366f7af19eac41c4d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkNzBhYTRkOTdjMjhiMDg3NDk5MzY2ZjdhZjE5ZWFjNDFjNGQ1Yw==", "commit": {"author": {"name": "Gerald Baumgartner", "email": "gb@alexander.cs.purdue.edu", "date": "1995-07-26T13:36:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-26T13:36:00Z"}, "message": "(vt_off_identifier): Renamed from offset identifier.\n\n(vb_off_identifier): New variable to hold the identifier for the\nsigtable field vb_off.\n(init_decl_processing): Initialize vb_off_identifier.\nRenamed vt_off_identifier from offset_identifier.\n(init_decl_processing): Add vb_off field to sigtable_entry_type.\nReorder fields so that pfn gets properly aligned at a 64 bit boundary\non the Alpha.\n(init_decl_processing): Align sigtable_entry_type on word\nboundaries instead of double word boundaries to save space.\n\nFrom-SVN: r10171", "tree": {"sha": "6ff903991442358fda4a9906c538a57d05283c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff903991442358fda4a9906c538a57d05283c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd70aa4d97c28b087499366f7af19eac41c4d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd70aa4d97c28b087499366f7af19eac41c4d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd70aa4d97c28b087499366f7af19eac41c4d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd70aa4d97c28b087499366f7af19eac41c4d5c/comments", "author": null, "committer": null, "parents": [{"sha": "4abea095dc01a77c1ece5e67eff498f2eddeff82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4abea095dc01a77c1ece5e67eff498f2eddeff82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4abea095dc01a77c1ece5e67eff498f2eddeff82"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "9c49b35be911951efc967c42938b9eb434ff8fea", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd70aa4d97c28b087499366f7af19eac41c4d5c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd70aa4d97c28b087499366f7af19eac41c4d5c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9dd70aa4d97c28b087499366f7af19eac41c4d5c", "patch": "@@ -295,7 +295,8 @@ tree base_init_expr;\n tree this_identifier, in_charge_identifier;\n /* Used in pointer to member functions, in vtables, and in sigtables. */\n tree pfn_identifier, index_identifier, delta_identifier, delta2_identifier;\n-tree pfn_or_delta2_identifier, tag_identifier, offset_identifier;\n+tree pfn_or_delta2_identifier, tag_identifier;\n+tree vb_off_identifier, vt_off_identifier;\n \n /* A list (chain of TREE_LIST nodes) of named label uses.\n    The TREE_PURPOSE field is the list of variables defined\n@@ -4742,7 +4743,8 @@ init_decl_processing ()\n   if (flag_handle_signatures)\n     {\n       tag_identifier = get_identifier (SIGTABLE_TAG_NAME);\n-      offset_identifier = get_identifier (SIGTABLE_OFFSET_NAME);\n+      vb_off_identifier = get_identifier (SIGTABLE_VB_OFF_NAME);\n+      vt_off_identifier = get_identifier (SIGTABLE_VT_OFF_NAME);\n     }\n \n   /* Define `int' and `char' first so that dbx will output them first.  */\n@@ -5292,24 +5294,30 @@ init_decl_processing ()\n       sigtable_entry_type = make_lang_type (RECORD_TYPE);\n       fields[0] = build_lang_field_decl (FIELD_DECL, tag_identifier,\n \t\t\t\t\t delta_type_node);\n-      fields[1] = build_lang_field_decl (FIELD_DECL, delta_identifier,\n+      fields[1] = build_lang_field_decl (FIELD_DECL, vb_off_identifier,\n \t\t\t\t\t delta_type_node);\n-      fields[2] = build_lang_field_decl (FIELD_DECL, offset_identifier,\n+      fields[2] = build_lang_field_decl (FIELD_DECL, delta_identifier,\n \t\t\t\t\t delta_type_node);\n       fields[3] = build_lang_field_decl (FIELD_DECL, index_identifier,\n \t\t\t\t\t delta_type_node);\n-      finish_builtin_type (sigtable_entry_type, SIGTABLE_PTR_TYPE, fields, 3,\n-\t\t\t   double_type_node);\n+      fields[4] = build_lang_field_decl (FIELD_DECL, pfn_identifier,\n+\t\t\t\t\t ptr_type_node);\n+\n+      /* Set the alignment to the max of the alignment of ptr_type_node and\n+\t delta_type_node.  Double alignment wastes a word on the Sparc.  */\n+      finish_builtin_type (sigtable_entry_type, SIGTABLE_PTR_TYPE, fields, 4,\n+\t\t\t   (TYPE_ALIGN (ptr_type_node) > TYPE_ALIGN (delta_type_node))\n+\t\t\t   ? ptr_type_node\n+\t\t\t   : delta_type_node);\n \n       /* Make this part of an invisible union.  */\n-      fields[4] = copy_node (fields[2]);\n-      TREE_TYPE (fields[4]) = ptr_type_node;\n-      DECL_NAME (fields[4]) = pfn_identifier;\n-      DECL_MODE (fields[4]) = TYPE_MODE (ptr_type_node);\n-      DECL_SIZE (fields[4]) = TYPE_SIZE (ptr_type_node);\n-      TREE_UNSIGNED (fields[4]) = 0;\n-      TREE_CHAIN (fields[1]) = fields[4];\n-      TREE_CHAIN (fields[4]) = fields[2];\n+      fields[5] = copy_node (fields[4]);\n+      TREE_TYPE (fields[5]) = delta_type_node;\n+      DECL_NAME (fields[5]) = vt_off_identifier;\n+      DECL_MODE (fields[5]) = TYPE_MODE (delta_type_node);\n+      DECL_SIZE (fields[5]) = TYPE_SIZE (delta_type_node);\n+      TREE_UNSIGNED (fields[5]) = 0;\n+      TREE_CHAIN (fields[4]) = fields[5];\n \n       sigtable_entry_type = build_type_variant (sigtable_entry_type, 1, 0);\n       record_builtin_type (RID_MAX, SIGTABLE_PTR_TYPE, sigtable_entry_type);"}]}