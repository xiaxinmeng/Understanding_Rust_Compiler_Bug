{"sha": "d2201ac0df461cb97a0187afc230029a6790b70e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyMDFhYzBkZjQ2MWNiOTdhMDE4N2FmYzIzMDAyOWE2NzkwYjcwZQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-11T17:52:45Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T14:59:08Z"}, "message": "aarch64: Use RTL builtins for integer mls intrinsics\n\nRewrite integer mls Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/Changelog:\n\n2021-01-11  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add mls builtin\n\tgenerator macro.\n\t* config/aarch64/arm_neon.h (vmls_s8): Use RTL builtin rather\n\tthan asm.\n\t(vmls_s16): Likewise.\n\t(vmls_s32): Likewise.\n\t(vmls_u8): Likewise.\n\t(vmls_u16): Likewise.\n\t(vmls_u32): Likewise.\n\t(vmlsq_s8): Likewise.\n\t(vmlsq_s16): Likewise.\n\t(vmlsq_s32): Likewise.\n\t(vmlsq_u8): Likewise.\n\t(vmlsq_u16): Likewise.\n\t(vmlsq_u32): Likewise.", "tree": {"sha": "0c2ce5adb94d442b6257ecd7822d6924e7ffa541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2ce5adb94d442b6257ecd7822d6924e7ffa541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2201ac0df461cb97a0187afc230029a6790b70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2201ac0df461cb97a0187afc230029a6790b70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2201ac0df461cb97a0187afc230029a6790b70e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2201ac0df461cb97a0187afc230029a6790b70e/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a199da782fc165fd45f42a15cc9020994efd455d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a199da782fc165fd45f42a15cc9020994efd455d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a199da782fc165fd45f42a15cc9020994efd455d"}], "stats": {"total": 99, "additions": 27, "deletions": 72}, "files": [{"sha": "93a087987bb7f039b2f85a6e1d2e05eb95fa0058", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2201ac0df461cb97a0187afc230029a6790b70e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2201ac0df461cb97a0187afc230029a6790b70e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d2201ac0df461cb97a0187afc230029a6790b70e", "patch": "@@ -183,6 +183,9 @@\n   /* Implemented by aarch64_mla_n<mode>.  */\n   BUILTIN_VDQHS (TERNOP, mla_n, 0, NONE)\n \n+  /* Implemented by aarch64_mls<mode>.  */\n+  BUILTIN_VDQ_BHSI (TERNOP, mls, 0, NONE)\n+\n   /* Implemented by aarch64_<su>mlsl<mode>.  */\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlsl, 0, NONE)"}, {"sha": "45b3c125babae2e3d32d6cd3b36ce09c502c04d8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 72, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2201ac0df461cb97a0187afc230029a6790b70e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2201ac0df461cb97a0187afc230029a6790b70e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d2201ac0df461cb97a0187afc230029a6790b70e", "patch": "@@ -7888,72 +7888,48 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_s8 (int8x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n-  int8x8_t __result;\n-  __asm__ (\"mls %0.8b,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv8qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c)\n {\n-  int16x4_t __result;\n-  __asm__ (\"mls %0.4h,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c)\n {\n-  int32x2_t __result;\n-  __asm__ (\"mls %0.2s,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u8 (uint8x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  uint8x8_t __result;\n-  __asm__ (\"mls %0.8b,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint8x8_t) __builtin_aarch64_mlsv8qi ((int8x8_t) __a,\n+                                                (int8x8_t) __b,\n+                                                (int8x8_t) __c);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u16 (uint16x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"mls %0.4h,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x4_t) __builtin_aarch64_mlsv4hi ((int16x4_t) __a,\n+                                                 (int16x4_t) __b,\n+                                                 (int16x4_t) __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u32 (uint32x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"mls %0.2s,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x2_t) __builtin_aarch64_mlsv2si ((int32x2_t) __a,\n+                                                 (int32x2_t) __b,\n+                                                 (int32x2_t) __c);\n }\n \n #define vmlsl_high_lane_s16(a, b, c, d)                                 \\\n@@ -8425,72 +8401,48 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_s8 (int8x16_t __a, int8x16_t __b, int8x16_t __c)\n {\n-  int8x16_t __result;\n-  __asm__ (\"mls %0.16b,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv16qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"mls %0.8h,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"mls %0.4s,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_mlsv4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  uint8x16_t __result;\n-  __asm__ (\"mls %0.16b,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint8x16_t) __builtin_aarch64_mlsv16qi ((int8x16_t) __a,\n+                                                  (int8x16_t) __b,\n+                                                  (int8x16_t) __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"mls %0.8h,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x8_t) __builtin_aarch64_mlsv8hi ((int16x8_t) __a,\n+                                                 (int16x8_t) __b,\n+                                                 (int16x8_t) __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"mls %0.4s,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x4_t) __builtin_aarch64_mlsv4si ((int32x4_t) __a,\n+                                                 (int32x4_t) __b,\n+                                                 (int32x4_t) __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}