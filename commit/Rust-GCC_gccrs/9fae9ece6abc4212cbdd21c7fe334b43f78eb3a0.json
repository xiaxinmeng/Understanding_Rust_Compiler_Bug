{"sha": "9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhZTllY2U2YWJjNDIxMmNiZGQyMWM3ZmUzMzRiNDNmNzhlYjNhMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-28T19:11:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-28T19:11:25Z"}, "message": "i386.md (peephole2s for operations with memory inputs): Use SWI mode iterator.\n\n\t* config/i386/i386.md (peephole2s for operations with memory inputs):\n\tUse SWI mode iterator.\n\t(peephole2s for operations with memory outputs): Ditto.\n\tDo not check for stack checking probe.\n\n\t(probe_stack): Remove expander.\n\nFrom-SVN: r235601", "tree": {"sha": "6e0ecb7c107cec553eec773f2238b0d16c5061fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e0ecb7c107cec553eec773f2238b0d16c5061fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ad9df624ca4e4b36a46d117628ff788fdcd03b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad9df624ca4e4b36a46d117628ff788fdcd03b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad9df624ca4e4b36a46d117628ff788fdcd03b5"}], "stats": {"total": 95, "additions": 43, "deletions": 52}, "files": [{"sha": "873856b61efdc4c4acaf8456f4cb2306d2e39dbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "patch": "@@ -1,3 +1,12 @@\n+2016-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (peephole2s for operations with memory inputs):\n+\tUse SWI mode iterator.\n+\t(peephole2s for operations with memory outputs): Ditto.\n+\tDo not check for stack checking probe.\n+\n+\t(probe_stack): Remove expander.\n+\n 2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "}, {"sha": "6dfb240a25e5abeef6332e25173c596e3cae619e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 52, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "patch": "@@ -17552,20 +17552,6 @@\n   DONE;\n })\n \n-;; Use IOR for stack probes, this is shorter.\n-(define_expand \"probe_stack\"\n-  [(match_operand 0 \"memory_operand\")]\n-  \"\"\n-{\n-  rtx (*gen_ior3) (rtx, rtx, rtx);\n-\n-  gen_ior3 = (GET_MODE (operands[0]) == DImode\n-\t      ? gen_iordi3 : gen_iorsi3);\n-\n-  emit_insn (gen_ior3 (operands[0], operands[0], const0_rtx));\n-  DONE;\n-})\n-\n (define_insn \"adjust_stack_and_probe<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")]\n@@ -17894,30 +17880,30 @@\n \n ;; Don't do logical operations with memory inputs.\n (define_peephole2\n-  [(match_scratch:SI 2 \"r\")\n-   (parallel [(set (match_operand:SI 0 \"register_operand\")\n-                   (match_operator:SI 3 \"arith_or_logical_operator\"\n-                     [(match_dup 0)\n-                      (match_operand:SI 1 \"memory_operand\")]))\n-              (clobber (reg:CC FLAGS_REG))])]\n+  [(match_scratch:SWI 2 \"<r>\")\n+   (parallel [(set (match_operand:SWI 0 \"register_operand\")\n+\t\t   (match_operator:SWI 3 \"arith_or_logical_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 1 \"memory_operand\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n-                   (match_op_dup 3 [(match_dup 0) (match_dup 2)]))\n-              (clobber (reg:CC FLAGS_REG))])])\n+\t\t   (match_op_dup 3 [(match_dup 0) (match_dup 2)]))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_peephole2\n-  [(match_scratch:SI 2 \"r\")\n-   (parallel [(set (match_operand:SI 0 \"register_operand\")\n-                   (match_operator:SI 3 \"arith_or_logical_operator\"\n-                     [(match_operand:SI 1 \"memory_operand\")\n-                      (match_dup 0)]))\n-              (clobber (reg:CC FLAGS_REG))])]\n+  [(match_scratch:SWI 2 \"<r>\")\n+   (parallel [(set (match_operand:SWI 0 \"register_operand\")\n+\t\t   (match_operator:SWI 3 \"arith_or_logical_operator\"\n+\t\t     [(match_operand:SWI 1 \"memory_operand\")\n+\t\t      (match_dup 0)]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n-                   (match_op_dup 3 [(match_dup 2) (match_dup 0)]))\n-              (clobber (reg:CC FLAGS_REG))])])\n+\t\t   (match_op_dup 3 [(match_dup 2) (match_dup 0)]))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n ;; Prefer Load+RegOp to Mov+MemOp.  Watch out for cases when the memory address\n ;; refers to the destination of the load!\n@@ -17962,35 +17948,31 @@\n ; the same decoder scheduling characteristics as the original.\n \n (define_peephole2\n-  [(match_scratch:SI 2 \"r\")\n-   (parallel [(set (match_operand:SI 0 \"memory_operand\")\n-                   (match_operator:SI 3 \"arith_or_logical_operator\"\n-                     [(match_dup 0)\n-                      (match_operand:SI 1 \"nonmemory_operand\")]))\n-              (clobber (reg:CC FLAGS_REG))])]\n-  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n-   /* Do not split stack checking probes.  */\n-   && GET_CODE (operands[3]) != IOR && operands[1] != const0_rtx\"\n+  [(match_scratch:SWI 2 \"<r>\")\n+   (parallel [(set (match_operand:SWI 0 \"memory_operand\")\n+\t\t   (match_operator:SWI 3 \"arith_or_logical_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 1 \"<nonmemory_operand>\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 0))\n    (parallel [(set (match_dup 2)\n-                   (match_op_dup 3 [(match_dup 2) (match_dup 1)]))\n-              (clobber (reg:CC FLAGS_REG))])\n+\t\t   (match_op_dup 3 [(match_dup 2) (match_dup 1)]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n    (set (match_dup 0) (match_dup 2))])\n \n (define_peephole2\n-  [(match_scratch:SI 2 \"r\")\n-   (parallel [(set (match_operand:SI 0 \"memory_operand\")\n-                   (match_operator:SI 3 \"arith_or_logical_operator\"\n-                     [(match_operand:SI 1 \"nonmemory_operand\")\n-                      (match_dup 0)]))\n-              (clobber (reg:CC FLAGS_REG))])]\n-  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n-   /* Do not split stack checking probes.  */\n-   && GET_CODE (operands[3]) != IOR && operands[1] != const0_rtx\"\n+  [(match_scratch:SWI 2 \"<r>\")\n+   (parallel [(set (match_operand:SWI 0 \"memory_operand\")\n+\t\t   (match_operator:SWI 3 \"arith_or_logical_operator\"\n+\t\t     [(match_operand:SWI 1 \"<nonmemory_operand>\")\n+\t\t      (match_dup 0)]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\"\n   [(set (match_dup 2) (match_dup 0))\n    (parallel [(set (match_dup 2)\n-                   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n-              (clobber (reg:CC FLAGS_REG))])\n+\t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n    (set (match_dup 0) (match_dup 2))])\n \n ;; Attempt to use arith or logical operations with memory outputs with"}]}