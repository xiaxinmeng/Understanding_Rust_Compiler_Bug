{"sha": "1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmOTc5YzY5NjYxZjllN2FiZGQ3NWJmZGE0YTRhMTVlNDE4MWFlOA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-31T10:06:23Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-31T10:08:22Z"}, "message": "[ARM][PATCH]: Add MVE ACLE intrinsics vbicq_n_* polymorphic variant support.\n\nFor the following MVE ACLE intrinsics, polymorphic variant support is missing on the trunk.\n\nvbicq_n_s16, vbicq_n_s32, vbicq_n_u16 and vbicq_n_u32.\n\nThis patch add the polymorphic variant support for above intrinsics.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vbicq): Define MVE intrinsic polymorphic\n\tvariant.\n\t(__arm_vbicq): Likewise.\n\n2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.", "tree": {"sha": "a27300be4e9f64eac5db5772c16b7caf783f6030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a27300be4e9f64eac5db5772c16b7caf783f6030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea1fc6f67d5b57bb9b500121b6dd6d74b36bd80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea1fc6f67d5b57bb9b500121b6dd6d74b36bd80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea1fc6f67d5b57bb9b500121b6dd6d74b36bd80"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "928c79399258fec0361e2d0a15dc46fb92915c42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -1,3 +1,9 @@\n+2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vbicq): Define MVE intrinsic polymorphic\n+\tvariant.\n+\t(__arm_vbicq): Likewise.\n+\n 2020-0-31  Vineet Gupta <vgupta@synopsys.com>\n \n \t* config/arc/linux.h: GLIBC_DYNAMIC_LINKER support BE/arc700."}, {"sha": "f1dcdc2153217e796c58526ba0e5be11be642234", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -20704,6 +20704,10 @@ extern void *__ARM_undef;\n #define __arm_vbicq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vbicq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vbicq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vbicq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -24073,6 +24077,10 @@ extern void *__ARM_undef;\n #define __arm_vbicq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce1(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32_t]: __arm_vbicq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce1(__p1, int)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vbicq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vbicq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vbicq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\"}, {"sha": "197d87a67af4c96e54ee594f4e807a022be1e52c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -1,3 +1,10 @@\n+2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Modify.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_n_u32.c: Likewise.\n+\n 2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Modify."}, {"sha": "ecc48503fc2d2b16c9135c412df22f748874750c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_s16.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s16.c?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -10,4 +10,10 @@ foo (int16x8_t a)\n   return vbicq_n_s16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vbic.i16\"  }  } */\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vbicq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbic.i16\" 2 }  } */"}, {"sha": "013cdf15cfd974ab82379d95e68b5a1bdf8936ca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_s32.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_s32.c?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -10,4 +10,10 @@ foo (int32x4_t a)\n   return vbicq_n_s32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vbic.i32\"  }  } */\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vbicq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbic.i32\" 2 }  } */"}, {"sha": "b24db154ad874dc016590adb5e99be4e97044a42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_u16.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u16.c?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -10,4 +10,10 @@ foo (uint16x8_t a)\n   return vbicq_n_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vbic.i16\"  }  } */\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+  return vbicq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbic.i16\" 2 }  } */"}, {"sha": "1261fbb523cfb596c272f114dceb8e8024dbc297", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_n_u32.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef979c69661f9e7abdd75bfda4a4a15e4181ae8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_n_u32.c?ref=1ef979c69661f9e7abdd75bfda4a4a15e4181ae8", "patch": "@@ -10,4 +10,10 @@ foo (uint32x4_t a)\n   return vbicq_n_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vbic.i32\"  }  } */\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+  return vbicq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbic.i32\" 2 }  } */"}]}