{"sha": "6f493951779ddf08e695592ea4385bd992857e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0OTM5NTE3NzlkZGYwOGU2OTU1OTJlYTQzODViZDk5Mjg1N2UyNQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-07-07T08:54:18Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-07-07T08:54:18Z"}, "message": "elf.h: Use __ARM_ARCH_ISA_THUMB and __ARM_ARCH_ISA_ARM to decide whether to prevent...\n\n2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/elf.h: Use __ARM_ARCH_ISA_THUMB and __ARM_ARCH_ISA_ARM to\n    decide whether to prevent some libgcc routines being included for some\n    multilibs rather than __ARM_ARCH_6M__ and add comment to indicate the\n    link between this condition and the one in\n    libgcc/config/arm/lib1func.S.\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_arm_cortex_m): Use\n    __ARM_ARCH_ISA_ARM to test for Cortex-M devices.\n\n    libgcc/\n    * config/arm/bpabi-v6m.S: Clarify what architectures is the\n    implementation suitable for.\n    * config/arm/lib1funcs.S (__prefer_thumb__): Define among other cases\n    for all Thumb-1 only targets.\n    (NOT_ISA_TARGET_32BIT): Define for Thumb-1 only targets.\n    (THUMB_LDIV0): Test for NOT_ISA_TARGET_32BIT rather than\n    __ARM_ARCH_6M__.\n    (EQUIV): Likewise.\n    (ARM_FUNC_ALIAS): Likewise.\n    (umodsi3): Add check to __ARM_ARCH_ISA_THUMB != 1 to guard the idiv\n    version.\n    (modsi3): Likewise.\n    (clzsi2): Test for NOT_ISA_TARGET_32BIT rather than __ARM_ARCH_6M__.\n    (clzdi2): Likewise.\n    (ctzsi2): Likewise.\n    (L_interwork_call_via_rX): Test for __ARM_ARCH_ISA_ARM rather than\n    __ARM_ARCH_6M__ in guard for checking whether it is defined.\n    (final includes): Test for NOT_ISA_TARGET_32BIT rather than\n    __ARM_ARCH_6M__ and add comment to indicate the connection between\n    this condition and the one in gcc/config/arm/elf.h.\n    * config/arm/libunwind.S: Test for __ARM_ARCH_ISA_THUMB and\n    __ARM_ARCH_ISA_ARM rather than __ARM_ARCH_6M__.\n    * config/arm/t-softfp: Likewise.\n\nFrom-SVN: r238079", "tree": {"sha": "ba07bedcbe3234660d8feebc44d9edfe9130b3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba07bedcbe3234660d8feebc44d9edfe9130b3ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f493951779ddf08e695592ea4385bd992857e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f493951779ddf08e695592ea4385bd992857e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f493951779ddf08e695592ea4385bd992857e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f493951779ddf08e695592ea4385bd992857e25/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5b29f56103d60f4f4dca7136ae4dcc7987a728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5b29f56103d60f4f4dca7136ae4dcc7987a728"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "7273e76fbf396df0a20dcd259b3cd67df305d3a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -1,3 +1,11 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/elf.h: Use __ARM_ARCH_ISA_THUMB and __ARM_ARCH_ISA_ARM to\n+\tdecide whether to prevent some libgcc routines being included for some\n+\tmultilibs rather than __ARM_ARCH_6M__ and add comment to indicate the\n+\tlink between this condition and the one in\n+\tlibgcc/config/arm/lib1func.S.\n+\n 2016-07-07  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c: Include alias.h."}, {"sha": "246de5492665ba2a0292736a9c53fbaaef184d72", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -148,8 +148,9 @@\n   while (0)\n \n /* Horrible hack: We want to prevent some libgcc routines being included\n-   for some multilibs.  */\n-#ifndef __ARM_ARCH_6M__\n+   for some multilibs.  The condition should match the one in\n+   libgcc/config/arm/lib1funcs.S.  */\n+#if __ARM_ARCH_ISA_ARM || __ARM_ARCH_ISA_THUMB != 1\n #undef L_fixdfsi\n #undef L_fixunsdfsi\n #undef L_truncdfsf2"}, {"sha": "fa8438231152fe416b99b71ae7677ae9ccd0aa8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -1,3 +1,8 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_cortex_m): Use\n+\t__ARM_ARCH_ISA_ARM to test for Cortex-M devices.\n+\n 2016-07-06  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/70098"}, {"sha": "0e294c5581eeb8730a31f1e748796f989cde36cf", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -3476,10 +3476,8 @@ proc check_effective_target_arm_cortex_m { } {\n \treturn 0\n     }\n     return [check_no_compiler_messages arm_cortex_m assembly {\n-\t#if !defined(__ARM_ARCH_7M__) \\\n-            && !defined (__ARM_ARCH_7EM__) \\\n-            && !defined (__ARM_ARCH_6M__)\n-\t#error !__ARM_ARCH_7M__ && !__ARM_ARCH_7EM__ && !__ARM_ARCH_6M__\n+\t#if defined(__ARM_ARCH_ISA_ARM)\n+\t#error __ARM_ARCH_ISA_ARM is defined\n \t#endif\n \tint i;\n     } \"-mthumb\"]"}, {"sha": "5f44923beac28f3eedc06d47d715a775d6b5faa7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -1,3 +1,29 @@\n+2016-07-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/bpabi-v6m.S: Clarify what architectures is the\n+\timplementation suitable for.\n+\t* config/arm/lib1funcs.S (__prefer_thumb__): Define among other cases\n+\tfor all Thumb-1 only targets.\n+\t(NOT_ISA_TARGET_32BIT): Define for Thumb-1 only targets.\n+\t(THUMB_LDIV0): Test for NOT_ISA_TARGET_32BIT rather than\n+\t__ARM_ARCH_6M__.\n+\t(EQUIV): Likewise.\n+\t(ARM_FUNC_ALIAS): Likewise.\n+\t(umodsi3): Add check to __ARM_ARCH_ISA_THUMB != 1 to guard the idiv\n+\tversion.\n+\t(modsi3): Likewise.\n+\t(clzsi2): Test for NOT_ISA_TARGET_32BIT rather than __ARM_ARCH_6M__.\n+\t(clzdi2): Likewise.\n+\t(ctzsi2): Likewise.\n+\t(L_interwork_call_via_rX): Test for __ARM_ARCH_ISA_ARM rather than\n+\t__ARM_ARCH_6M__ in guard for checking whether it is defined.\n+\t(final includes): Test for NOT_ISA_TARGET_32BIT rather than\n+\t__ARM_ARCH_6M__ and add comment to indicate the connection between\n+\tthis condition and the one in gcc/config/arm/elf.h.\n+\t* config/arm/libunwind.S: Test for __ARM_ARCH_ISA_THUMB and\n+\t__ARM_ARCH_ISA_ARM rather than __ARM_ARCH_6M__.\n+\t* config/arm/t-softfp: Likewise.\n+\n 2016-07-06  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* libgcc2.c (SYMBOL__MAIN): Remove checks for"}, {"sha": "27f33a4e8ced2cb2da8e38f5d78501954ee7363b", "filename": "libgcc/config/arm/bpabi-v6m.S", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -1,4 +1,5 @@\n-/* Miscellaneous BPABI functions.  ARMv6M implementation\n+/* Miscellaneous BPABI functions.  Thumb-1 implementation, suitable for ARMv4T,\n+   ARMv6-M and ARMv8-M Baseline like ISA variants.\n \n    Copyright (C) 2006-2016 Free Software Foundation, Inc.\n    Contributed by CodeSourcery."}, {"sha": "951dcda1c3bf7f323423a3e2813bdf0501653016", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -124,10 +124,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n      && !defined(__thumb2__)\t\t\\\n      && (!defined(__THUMB_INTERWORK__)\t\\\n \t || defined (__OPTIMIZE_SIZE__)\t\\\n-\t || defined(__ARM_ARCH_6M__)))\n+\t || !__ARM_ARCH_ISA_ARM))\n # define __prefer_thumb__\n #endif\n \n+#if !__ARM_ARCH_ISA_ARM && __ARM_ARCH_ISA_THUMB == 1\n+#define NOT_ISA_TARGET_32BIT 1\n+#endif\n+\n /* How to return from a function call depends on the architecture variant.  */\n \n #if (__ARM_ARCH__ > 4) || defined(__ARM_ARCH_4T__)\n@@ -305,7 +309,7 @@ LSYM(Lend_fde):\n \n #ifdef __ARM_EABI__\n .macro THUMB_LDIV0 name signed\n-#if defined(__ARM_ARCH_6M__)\n+#ifdef NOT_ISA_TARGET_32BIT\n \t.ifc \\signed, unsigned\n \tcmp\tr0, #0\n \tbeq\t1f\n@@ -478,7 +482,7 @@ _L__\\name:\n \n #else /* !(__INTERWORKING_STUBS__ || __thumb2__) */\n \n-#ifdef __ARM_ARCH_6M__\n+#ifdef NOT_ISA_TARGET_32BIT\n #define EQUIV .thumb_set\n #else\n .macro\tARM_FUNC_START name sp_section=\n@@ -510,7 +514,7 @@ SYM (__\\name):\n #endif\n .endm\n \n-#ifndef __ARM_ARCH_6M__\n+#ifndef NOT_ISA_TARGET_32BIT\n .macro\tARM_FUNC_ALIAS new old\n \t.globl\tSYM (__\\new)\n \tEQUIV\tSYM (__\\new), SYM (__\\old)\n@@ -1054,7 +1058,7 @@ ARM_FUNC_START aeabi_uidivmod\n /* ------------------------------------------------------------------------ */\n #ifdef L_umodsi3\n \n-#ifdef __ARM_ARCH_EXT_IDIV__\n+#if defined(__ARM_ARCH_EXT_IDIV__) && __ARM_ARCH_ISA_THUMB != 1\n \n \tARM_FUNC_START umodsi3\n \n@@ -1240,7 +1244,7 @@ ARM_FUNC_START aeabi_idivmod\n /* ------------------------------------------------------------------------ */\n #ifdef L_modsi3\n \n-#if defined(__ARM_ARCH_EXT_IDIV__)\n+#if defined(__ARM_ARCH_EXT_IDIV__) && __ARM_ARCH_ISA_THUMB != 1\n \n \tARM_FUNC_START modsi3\n \n@@ -1515,7 +1519,7 @@ LSYM(Lover12):\n #endif\n \n #ifdef L_clzsi2\n-#if defined(__ARM_ARCH_6M__)\n+#ifdef NOT_ISA_TARGET_32BIT\n FUNC_START clzsi2\n \tmov\tr1, #28\n \tmov\tr3, #1\n@@ -1576,7 +1580,7 @@ ARM_FUNC_START clzsi2\n #ifdef L_clzdi2\n #if !defined(HAVE_ARM_CLZ)\n \n-# if defined(__ARM_ARCH_6M__)\n+# ifdef NOT_ISA_TARGET_32BIT\n FUNC_START clzdi2\n \tpush\t{r4, lr}\n # else\n@@ -1601,7 +1605,7 @@ ARM_FUNC_START clzdi2\n \tbl\t__clzsi2\n # endif\n 2:\n-# if defined(__ARM_ARCH_6M__)\n+# ifdef NOT_ISA_TARGET_32BIT\n \tpop\t{r4, pc}\n # else\n \tRETLDM\tr4\n@@ -1623,7 +1627,7 @@ ARM_FUNC_START clzdi2\n #endif /* L_clzdi2 */\n \n #ifdef L_ctzsi2\n-#if defined(__ARM_ARCH_6M__)\n+#ifdef NOT_ISA_TARGET_32BIT\n FUNC_START ctzsi2\n \tneg\tr1, r0\n \tand\tr0, r0, r1\n@@ -1738,7 +1742,7 @@ ARM_FUNC_START ctzsi2\n \n /* Don't bother with the old interworking routines for Thumb-2.  */\n /* ??? Maybe only omit these on \"m\" variants.  */\n-#if !defined(__thumb2__) && !defined(__ARM_ARCH_6M__)\n+#if !defined(__thumb2__) && __ARM_ARCH_ISA_ARM\n \n #if defined L_interwork_call_via_rX\n \n@@ -1983,11 +1987,12 @@ LSYM(Lchange_\\register):\n .endm\n \n #ifndef __symbian__\n-#ifndef __ARM_ARCH_6M__\n+/* The condition here must match the one in gcc/config/arm/elf.h.  */\n+#ifndef NOT_ISA_TARGET_32BIT\n #include \"ieee754-df.S\"\n #include \"ieee754-sf.S\"\n #include \"bpabi.S\"\n-#else /* __ARM_ARCH_6M__ */\n+#else /* NOT_ISA_TARGET_32BIT */\n #include \"bpabi-v6m.S\"\n-#endif /* __ARM_ARCH_6M__ */\n+#endif /* NOT_ISA_TARGET_32BIT */\n #endif /* !__symbian__ */"}, {"sha": "3d7e70181fa80fe53a4903c96bb0f90480feee21", "filename": "libgcc/config/arm/libunwind.S", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flibunwind.S?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -58,7 +58,7 @@\n #endif\n #endif\n \n-#ifdef __ARM_ARCH_6M__\n+#if !__ARM_ARCH_ISA_ARM && __ARM_ARCH_ISA_THUMB == 1\n \n /* r0 points to a 16-word block.  Upload these values to the actual core\n    state.  */\n@@ -169,7 +169,7 @@ FUNC_START gnu_Unwind_Save_WMMXC\n \tUNPREFIX \\name\n .endm\n \n-#else /* !__ARM_ARCH_6M__ */\n+#else /* __ARM_ARCH_ISA_ARM || __ARM_ARCH_ISA_THUMB != 1 */\n \n /* r0 points to a 16-word block.  Upload these values to the actual core\n    state.  */\n@@ -351,7 +351,7 @@ ARM_FUNC_START gnu_Unwind_Save_WMMXC\n \tUNPREFIX \\name\n .endm\n \n-#endif /* !__ARM_ARCH_6M__ */\n+#endif /* __ARM_ARCH_ISA_ARM || __ARM_ARCH_ISA_THUMB != 1 */\n \n UNWIND_WRAPPER _Unwind_RaiseException 1\n UNWIND_WRAPPER _Unwind_Resume 1"}, {"sha": "554ec9bc47b04445e79e84b1f957bf88680c08d1", "filename": "libgcc/config/arm/t-softfp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f493951779ddf08e695592ea4385bd992857e25/libgcc%2Fconfig%2Farm%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-softfp?ref=6f493951779ddf08e695592ea4385bd992857e25", "patch": "@@ -1,2 +1,2 @@\n-softfp_wrap_start := '\\#ifdef __ARM_ARCH_6M__'\n+softfp_wrap_start := '\\#if !__ARM_ARCH_ISA_ARM && __ARM_ARCH_ISA_THUMB == 1'\n softfp_wrap_end := '\\#endif'"}]}