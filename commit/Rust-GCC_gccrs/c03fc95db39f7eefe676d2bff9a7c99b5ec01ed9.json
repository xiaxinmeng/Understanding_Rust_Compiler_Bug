{"sha": "c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzZmM5NWRiMzlmN2VlZmU2NzZkMmJmZjlhN2M5OWI1ZWMwMWVkOQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-05-16T19:50:04Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-05-16T19:50:04Z"}, "message": "re PR fortran/27997 (Fortran 2003: Support type-spec for array constructor)\n\n2008-04-16  Daniel Kraft  <d@domob.eu>\n\n        PR fortran/27997\n        * gfortran.h:  Added field \"length_from_typespec\" to gfc_charlength.\n        * aray.c (gfc_match_array_constructor):  Added code to parse\n        * typespec.\n        (check_element_type, check_constructor_type, gfc_check_constructor_type):\n        Extended to support explicit typespec on constructor.\n        (gfc_resolve_character_array_constructor):  Pad strings correctly for\n        explicit, constant character length.\n        * trans-array.c:  New static global variable\n        * \"typespec_chararray_ctor\"\n        (gfc_trans_array_constructor):  New code to support explicit but dynamic\n        character lengths.\n\n2008-04-16  Daniel Kraft  <d@domob.eu>\n\n        PR fortran/27997\n        * gfortran.dg/array_constructor_type_1.f03:  New test\n        * gfortran.dg/array_constructor_type_2.f03:  New test\n        * gfortran.dg/array_constructor_type_3.f03:  New test\n        * gfortran.dg/array_constructor_type_4.f03:  New test\n        * gfortran.dg/array_constructor_type_5.f03:  New test\n        * gfortran.dg/array_constructor_type_6.f03:  New test\n        * gfortran.dg/array_constructor_type_7.f03:  New test\n        * gfortran.dg/array_constructor_type_8.f03:  New test\n        * gfortran.dg/array_constructor_type_9.f:  New test\n        * gfortran.dg/array_constructor_type_10.f03:  New test\n        * gfortran.dg/array_constructor_type_11.f03:  New test\n        * gfortran.dg/array_constructor_type_12.f03:  New test\n        * gfortran.dg/array_constructor_type_13.f90:  New test\n        * gfortran.dg/array_constructor_type_14.f03:  New test\n        * gfortran.dg/array_constructor_type_15.f03:  New test\n        * gfortran.dg/array_constructor_type_16.f03:  New test\n        * gfortran.dg/array_constructor_type_17.f03:  New test\n        * gfortran.dg/array_constructor_type_18.f03:  New test\n\nFrom-SVN: r135439", "tree": {"sha": "c7e366c619e4465a3a807a4d48e072cb8c58d1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e366c619e4465a3a807a4d48e072cb8c58d1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c"}], "stats": {"total": 513, "additions": 488, "deletions": 25}, "files": [{"sha": "ef9f1cfe35c1b435b40bc3ec9836494d42beb75f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -1,12 +1,25 @@\n+2008-04-16  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/27997\n+\t* gfortran.h:  Added field \"length_from_typespec\" to gfc_charlength.\n+\t* aray.c (gfc_match_array_constructor):  Added code to parse typespec.\n+\t(check_element_type, check_constructor_type, gfc_check_constructor_type):\n+\tExtended to support explicit typespec on constructor.\n+\t(gfc_resolve_character_array_constructor):  Pad strings correctly for\n+\texplicit, constant character length.\n+\t* trans-array.c:  New static global variable \"typespec_chararray_ctor\"\n+\t(gfc_trans_array_constructor):  New code to support explicit but dynamic\n+\tcharacter lengths.\n+\n 2008-05-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n-    PR fortran/34325\n-    * decl.c (match_attr_spec): Check for matching pairs of parenthesis.\n-    * expr.c (gfc_specification_expr): Supplement the error message with the\n-    type that was found.\n-    * resolve.c (gfc_resolve_index): Likewise.\n-    * match.c (gfc_match_parens): Clarify error message with \"at or before\".\n-    (gfc_match_do): Check for matching pairs of parenthesis.\n+\tPR fortran/34325\n+\t* decl.c (match_attr_spec): Check for matching pairs of parenthesis.\n+\t* expr.c (gfc_specification_expr): Supplement the error message with the\n+\ttype that was found.\n+\t* resolve.c (gfc_resolve_index): Likewise.\n+\t* match.c (gfc_match_parens): Clarify error message with \"at or before\".\n+\t(gfc_match_do): Check for matching pairs of parenthesis.\n \n 2008-05-16  Tobias Burnus  <burnus@net-b.de\n "}, {"sha": "71c8b5d669e0a42528255716c3f4c4584867ca30", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 97, "deletions": 14, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -877,9 +877,11 @@ gfc_match_array_constructor (gfc_expr **result)\n {\n   gfc_constructor *head, *tail, *new;\n   gfc_expr *expr;\n+  gfc_typespec ts;\n   locus where;\n   match m;\n   const char *end_delim;\n+  bool seen_ts;\n \n   if (gfc_match (\" (/\") == MATCH_NO)\n     {\n@@ -898,11 +900,33 @@ gfc_match_array_constructor (gfc_expr **result)\n \n   where = gfc_current_locus;\n   head = tail = NULL;\n+  seen_ts = false;\n+\n+  /* Try to match an optional \"type-spec ::\"  */\n+  if (gfc_match_type_spec (&ts, 0) == MATCH_YES)\n+    {\n+      seen_ts = (gfc_match (\" ::\") == MATCH_YES);\n+\n+      if (seen_ts)\n+\t{\n+\t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Array constructor \"\n+\t\t\t      \"including type specification at %C\") == FAILURE)\n+\t    goto cleanup;\n+\t}\n+    }\n+\n+  if (! seen_ts)\n+    gfc_current_locus = where;\n \n   if (gfc_match (end_delim) == MATCH_YES)\n     {\n-      gfc_error (\"Empty array constructor at %C is not allowed\");\n-      goto cleanup;\n+      if (seen_ts)\n+\tgoto done;\n+      else\n+\t{\n+\t  gfc_error (\"Empty array constructor at %C is not allowed\");\n+\t  goto cleanup;\n+\t}\n     }\n \n   for (;;)\n@@ -927,13 +951,22 @@ gfc_match_array_constructor (gfc_expr **result)\n   if (gfc_match (end_delim) == MATCH_NO)\n     goto syntax;\n \n+done:\n   expr = gfc_get_expr ();\n \n   expr->expr_type = EXPR_ARRAY;\n \n   expr->value.constructor = head;\n   /* Size must be calculated at resolution time.  */\n \n+  if (seen_ts)\n+    expr->ts = ts;\n+  else\n+    expr->ts.type = BT_UNKNOWN;\n+  \n+  if (expr->ts.cl)\n+    expr->ts.cl->length_from_typespec = seen_ts;\n+\n   expr->where = where;\n   expr->rank = 1;\n \n@@ -964,7 +997,7 @@ static enum\n cons_state;\n \n static int\n-check_element_type (gfc_expr *expr)\n+check_element_type (gfc_expr *expr, bool convert)\n {\n   if (cons_state == CONS_BAD)\n     return 0;\t\t\t/* Suppress further errors */\n@@ -985,6 +1018,9 @@ check_element_type (gfc_expr *expr)\n   if (gfc_compare_types (&constructor_ts, &expr->ts))\n     return 0;\n \n+  if (convert)\n+    return gfc_convert_type (expr, &constructor_ts, 1) == SUCCESS ? 0 : 1;\n+\n   gfc_error (\"Element in %s array constructor at %L is %s\",\n \t     gfc_typename (&constructor_ts), &expr->where,\n \t     gfc_typename (&expr->ts));\n@@ -997,7 +1033,7 @@ check_element_type (gfc_expr *expr)\n /* Recursive work function for gfc_check_constructor_type().  */\n \n static try\n-check_constructor_type (gfc_constructor *c)\n+check_constructor_type (gfc_constructor *c, bool convert)\n {\n   gfc_expr *e;\n \n@@ -1007,13 +1043,13 @@ check_constructor_type (gfc_constructor *c)\n \n       if (e->expr_type == EXPR_ARRAY)\n \t{\n-\t  if (check_constructor_type (e->value.constructor) == FAILURE)\n+\t  if (check_constructor_type (e->value.constructor, convert) == FAILURE)\n \t    return FAILURE;\n \n \t  continue;\n \t}\n \n-      if (check_element_type (e))\n+      if (check_element_type (e, convert))\n \treturn FAILURE;\n     }\n \n@@ -1029,10 +1065,20 @@ gfc_check_constructor_type (gfc_expr *e)\n {\n   try t;\n \n-  cons_state = CONS_START;\n-  gfc_clear_ts (&constructor_ts);\n+  if (e->ts.type != BT_UNKNOWN)\n+    {\n+      cons_state = CONS_GOOD;\n+      constructor_ts = e->ts;\n+    }\n+  else\n+    {\n+      cons_state = CONS_START;\n+      gfc_clear_ts (&constructor_ts);\n+    }\n \n-  t = check_constructor_type (e->value.constructor);\n+  /* If e->ts.type != BT_UNKNOWN, the array constructor included a\n+     typespec, and we will now convert the values on the fly.  */\n+  t = check_constructor_type (e->value.constructor, e->ts.type != BT_UNKNOWN);\n   if (t == SUCCESS && e->ts.type == BT_UNKNOWN)\n     e->ts = constructor_ts;\n \n@@ -1526,13 +1572,15 @@ resolve_array_list (gfc_constructor *p)\n \n /* Resolve character array constructor. If it is a constant character array and\n    not specified character length, update character length to the maximum of\n-   its element constructors' length.  */\n+   its element constructors' length.  For arrays with fixed length, pad the\n+   elements as necessary with needed_length.  */\n \n void\n gfc_resolve_character_array_constructor (gfc_expr *expr)\n {\n   gfc_constructor *p;\n   int max_length;\n+  bool generated_length;\n \n   gcc_assert (expr->expr_type == EXPR_ARRAY);\n   gcc_assert (expr->ts.type == BT_CHARACTER);\n@@ -1557,6 +1605,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \n got_charlen:\n \n+  generated_length = false;\n   if (expr->ts.cl->length == NULL)\n     {\n       /* Find the maximum length of the elements. Do nothing for variable\n@@ -1596,12 +1645,46 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t{\n \t  /* Update the character length of the array constructor.  */\n \t  expr->ts.cl->length = gfc_int_expr (max_length);\n-\t  /* Update the element constructors.  */\n-\t  for (p = expr->value.constructor; p; p = p->next)\n-\t    if (p->expr->expr_type == EXPR_CONSTANT)\n-\t      gfc_set_constant_character_len (max_length, p->expr, true);\n+\t  generated_length = true;\n+\t  /* Real update follows below.  */\n \t}\n     }\n+  else \n+    {\n+      /* We've got a character length specified.  It should be an integer,\n+\t otherwise an error is signalled elsewhere.  */\n+      gcc_assert (expr->ts.cl->length);\n+\n+      /* If we've got a constant character length, pad according to this.\n+\t gfc_extract_int does check for BT_INTEGER and EXPR_CONSTANT and sets\n+\t max_length only if they pass.  */\n+      gfc_extract_int (expr->ts.cl->length, &max_length);\n+    }\n+\n+  /* Found a length to update to, do it for all element strings shorter than\n+     the target length.  */\n+  if (max_length != -1)\n+    {\n+      for (p = expr->value.constructor; p; p = p->next)\n+\tif (p->expr->expr_type == EXPR_CONSTANT)\n+\t  {\n+\t    gfc_expr *cl = NULL;\n+\t    int current_length = -1;\n+\n+\t    if (p->expr->ts.cl && p->expr->ts.cl->length)\n+\t    {\n+\t      cl = p->expr->ts.cl->length;\n+\t      gfc_extract_int (cl, &current_length);\n+\t    }\n+\n+\t    /* If gfc_extract_int above set current_length, we implicitly\n+\t       know the type is BT_INTEGER and it's EXPR_CONSTANT.  */\n+\n+\t    if (generated_length || ! cl\n+\t\t|| (current_length != -1 && current_length < max_length))\n+\t      gfc_set_constant_character_len (max_length, p->expr, true);\n+\t  }\n+    }\n }\n \n "}, {"sha": "5fa3bc1f2c7404e6d3ecaa7222e8a566ed847bcc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -784,6 +784,7 @@ typedef struct gfc_charlen\n {\n   struct gfc_expr *length;\n   struct gfc_charlen *next;\n+  bool length_from_typespec; /* Length from explicit array ctor typespec?  */\n   tree backend_decl;\n \n   int resolved;"}, {"sha": "d6464ca93e08550fa7f6e011ed2e3f6e9d90f4e3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -959,9 +959,10 @@ gfc_put_offset_into_var (stmtblock_t * pblock, tree * poffset,\n }\n \n \n-/* Assign an element of an array constructor.  */\n+/* Variables needed for bounds-checking.  */\n static bool first_len;\n static tree first_len_val; \n+static bool typespec_chararray_ctor;\n \n static void\n gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n@@ -998,7 +999,7 @@ gfc_trans_array_ctor_element (stmtblock_t * pblock, tree desc,\n \t\t\t\t se->string_length,\n \t\t\t\t se->expr);\n \t}\n-      if (flag_bounds_check)\n+      if (flag_bounds_check && !typespec_chararray_ctor)\n \t{\n \t  if (first_len)\n \t    {\n@@ -1677,7 +1678,13 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n   tree loopfrom;\n   bool dynamic;\n \n-  if (flag_bounds_check && ss->expr->ts.type == BT_CHARACTER)\n+  /* Do bounds-checking here and in gfc_trans_array_ctor_element only if no\n+     typespec was given for the array constructor.  */\n+  typespec_chararray_ctor = (ss->expr->ts.cl\n+\t\t\t     && ss->expr->ts.cl->length_from_typespec);\n+\n+  if (flag_bounds_check && ss->expr->ts.type == BT_CHARACTER\n+      && !typespec_chararray_ctor)\n     {  \n       first_len_val = gfc_create_var (gfc_charlen_type_node, \"len\");\n       first_len = true;\n@@ -1688,7 +1695,27 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n   c = ss->expr->value.constructor;\n   if (ss->expr->ts.type == BT_CHARACTER)\n     {\n-      bool const_string = get_array_ctor_strlen (&loop->pre, c, &ss->string_length);\n+      bool const_string;\n+      \n+      /* get_array_ctor_strlen walks the elements of the constructor, if a\n+\t typespec was given, we already know the string length and want the one\n+\t specified there.  */\n+      if (typespec_chararray_ctor && ss->expr->ts.cl->length\n+\t  && ss->expr->ts.cl->length->expr_type != EXPR_CONSTANT)\n+\t{\n+\t  gfc_se length_se;\n+\n+\t  const_string = false;\n+\t  gfc_init_se (&length_se, NULL);\n+\t  gfc_conv_expr_type (&length_se, ss->expr->ts.cl->length,\n+\t\t\t      gfc_charlen_type_node);\n+\t  ss->string_length = length_se.expr;\n+\t  gfc_add_block_to_block (&loop->pre, &length_se.pre);\n+\t  gfc_add_block_to_block (&loop->post, &length_se.post);\n+\t}\n+      else\n+\tconst_string = get_array_ctor_strlen (&loop->pre, c,\n+\t\t\t\t\t      &ss->string_length);\n \n       /* Complex character array constructors should have been taken care of\n \t and not end up here.  */"}, {"sha": "4b2dace4dfe6c8593668a6639e9105e6a5f1e0fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -1,3 +1,25 @@\n+2008-04-16  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/27997\n+\t* gfortran.dg/array_constructor_type_1.f03:  New test\n+\t* gfortran.dg/array_constructor_type_2.f03:  New test\n+\t* gfortran.dg/array_constructor_type_3.f03:  New test\n+\t* gfortran.dg/array_constructor_type_4.f03:  New test\n+\t* gfortran.dg/array_constructor_type_5.f03:  New test\n+\t* gfortran.dg/array_constructor_type_6.f03:  New test\n+\t* gfortran.dg/array_constructor_type_7.f03:  New test\n+\t* gfortran.dg/array_constructor_type_8.f03:  New test\n+\t* gfortran.dg/array_constructor_type_9.f:  New test\n+\t* gfortran.dg/array_constructor_type_10.f03:  New test\n+\t* gfortran.dg/array_constructor_type_11.f03:  New test\n+\t* gfortran.dg/array_constructor_type_12.f03:  New test\n+\t* gfortran.dg/array_constructor_type_13.f90:  New test\n+\t* gfortran.dg/array_constructor_type_14.f03:  New test\n+\t* gfortran.dg/array_constructor_type_15.f03:  New test\n+\t* gfortran.dg/array_constructor_type_16.f03:  New test\n+\t* gfortran.dg/array_constructor_type_17.f03:  New test\n+\t* gfortran.dg/array_constructor_type_18.f03:  New test\n+\n 2008-05-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36246"}, {"sha": "fc8813cc5618ef0ffa3488c9e51f4761d7490b18", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_1.f03", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Simple array constructor with typespec.\n+!\n+PROGRAM test\n+  IMPLICIT NONE\n+  INTEGER :: array(5)\n+\n+  array = (/ INTEGER :: 18, 12, 31, 3, 42.4 /)\n+\n+  IF (array(1) /= 18 .OR. array(2) /= 12 .OR. &\n+      array(3) /= 31 .OR. array(4) /=  3 .OR. array(5) /= 42) THEN\n+      CALL abort()\n+  END IF\n+END PROGRAM test"}, {"sha": "f4dfae2bd7987eba55585f464dc93a7e00b4e135", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_10.f03", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec and dynamic\n+! character length.\n+!\n+PROGRAM test\n+  CALL foo(8, \"short\", \"short\")\n+  CALL foo(2, \"lenghty\", \"le\")\n+CONTAINS\n+  SUBROUTINE foo (n, s, shouldBe)\n+    CHARACTER(len=*) :: s\n+    CHARACTER(len=*) :: shouldBe\n+    CHARACTER(len=16) :: arr(2)\n+    INTEGER :: n\n+    arr = [ character(len=n) :: s, s ]\n+    IF (arr(1) /= shouldBe .OR. arr(2) /= shouldBe) THEN\n+      CALL abort ()\n+    END IF\n+  END SUBROUTINE foo\n+END PROGRAM test"}, {"sha": "e27515c7d7a875a36adf7877b2e76838b446cb66", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_11.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Empty array constructor with typespec.\n+!\n+ integer :: i(3)\n+ i(3:2) = (/ integer :: /)\n+ if (len((/ character(5) :: /)) /= 5) call abort()\n+ if (kind((/ integer(8) :: /)) /= 8) call abort()\n+end"}, {"sha": "e06fd47991a70194bafb31ba3bcd0f47efe8c4ff", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_12.f03", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec.\n+!\n+real :: a(3)\n+integer :: j(3)\n+a = (/ integer :: 1.4, 2.2, 3.33  /)\n+j = (/ 1.4, 2.2, 3.33  /)\n+if( any(a /= j )) call abort()\n+end"}, {"sha": "eab35ccd191f387c0a4b0b0fdf2971fb30cccf42", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_13.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec\n+! should be rejected for Fortran 95.\n+!\n+real :: a(3)\n+integer :: j(3)\n+a = (/ integer :: 1.4, 2.2, 3.33  /) ! { dg-error \"Fortran 2003\" }\n+j = (/ 1.4, 2.2, 3.33  /)\n+if( any(a /= j )) call abort()\n+end"}, {"sha": "04ac728010a203cfd2b4fd72a0ec611b50ec445c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_14.f03", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! PR fortran/27997\n+!\n+! Array constructor with typespec\n+! for derived types.\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+\n+  TYPE foo\n+    INTEGER :: i\n+    REAL :: x\n+  END TYPE foo\n+\n+  TYPE(foo), PARAMETER :: x = foo(42, 42.)\n+\n+  TYPE(foo), DIMENSION(2) :: arr\n+\n+  arr = (/ TYPE(foo) :: x, foo(0, 1.) /)\n+  IF (arr(1)%i /= 42 .OR. arr(1)%x /= 42. .OR. &\n+      arr(2)%i /= 0 .OR. arr(2)%x /= 1.) THEN\n+    CALL abort()\n+  END IF\n+END PROGRAM test"}, {"sha": "20736988b5aee4d905608887d7a030aabbc8282b", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_15.f03", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_15.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! PR fortran/27997\n+!\n+! Array constructor with typespec\n+! for derived types, failing conversion.\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+\n+  TYPE foo\n+    INTEGER :: i\n+    REAL :: x\n+  END TYPE foo\n+\n+  TYPE bar\n+    LOGICAL :: logos\n+  END TYPE bar\n+\n+  TYPE(foo), PARAMETER :: x = foo(42, 42.)\n+\n+  WRITE (*,*) (/ TYPE(foo) :: x, foo(0, 1.), bar(.TRUE.) /) ! { dg-error \"convert TYPE\" }\n+END PROGRAM test"}, {"sha": "a6950997e56f76ab5589d2d8d6c5bcdd49fc8622", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_16.f03", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! PR fortran/27997\n+!\n+! Nested array constructors with typespec.\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+\n+  INTEGER(KIND=8) :: arr(3)\n+  CHARACTER(len=6) :: carr(3)\n+\n+  arr = (/ INTEGER(KIND=8) :: 4, [ INTEGER(KIND=4) :: 42, 12 ] /)\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: 4, 42, 12 ] /)\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: 4, 42 ], 12 /)\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: ], 4, 42, 12 /)\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+\n+  carr = [ CHARACTER(len=6) :: \"foo\", [ CHARACTER(len=4) :: \"foobar\", \"xyz\" ] ]\n+  IF (carr(1) /= \"foo\" .OR. carr(2) /= \"foob\" .OR. carr(3) /= \"xyz\") THEN\n+    CALL abort()\n+  END IF\n+END PROGRAM test"}, {"sha": "365d43e3f756269705c876efd5c8751145b283ce", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_17.f03", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_17.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-fno-range-check -Wconversion\" }\n+! PR fortran/27997\n+!\n+! Range check on array-constructors with typespec.\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+\n+  INTEGER(KIND=4) :: arr(1)\n+  arr = (/ INTEGER(KIND=4) :: HUGE(0_8) /) ! { dg-warning \"Conversion from\" }\n+END PROGRAM test"}, {"sha": "d88b3227c4db75a1f7f005d9c5f35563b3dbe5a1", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_18.f03", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_18.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_18.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_18.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-frange-check\" }\n+! PR fortran/27997\n+!\n+! Range check on array-constructors with typespec.\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+\n+  INTEGER(KIND=4) :: arr(1)\n+  arr = (/ INTEGER(KIND=4) :: HUGE(0_8) /) ! { dg-error \"overflow converting\" }\n+END PROGRAM test"}, {"sha": "49255505552bc6656d96a091d19297debfc22fa3", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_2.f03", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec, length parameter.\n+!\n+program test\n+  implicit none\n+  character(15) :: a(3)\n+  a =  (/ character(len=7) :: 'Takata', 'Tanaka', 'Hayashi' /)\n+  if ( len([ character(len=7) :: ]) /= 7) call abort()\n+  if ( size([ integer :: ]) /= 0) call abort()\n+  if(     a(1) /= 'Takata'  .or. a(1)(7:7)   /= achar(32) &\n+                            .or. a(1)(15:15) /= achar(32) &\n+     .or. a(2) /= 'Tanaka'  .or. a(2)(7:7)   /= achar(32) &\n+                            .or. a(2)(15:15) /= achar(32) &\n+     .or. a(3) /= 'Hayashi' .or. a(3)(8:8)   /= achar(32) &\n+                            .or. a(3)(15:15) /= achar(32))&\n+   call abort()\n+end program test"}, {"sha": "bebaea5c5d9ce785cc532a4d50f18aea3a8c5cae", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_3.f03", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Test empty array constructor with typespec.\n+!\n+PROGRAM test\n+  IMPLICIT NONE\n+  INTEGER :: array(2)\n+\n+  array = (/ 5, [INTEGER ::], 6 /)\n+\n+  IF (array(1) /= 5 .OR. array(2) /= 6) THEN\n+      CALL abort()\n+  END IF\n+END PROGRAM test"}, {"sha": "d804bfada1b4d53bd8750a53b47e095fcba9bf9a", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_4.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Ensure that :: is present when a typespec is deduced.\n+!\n+PROGRAM test\n+  INTEGER :: array(1)\n+  INTEGER = 42\n+\n+  array = [ INTEGER ]\n+  IF (array(1) /= 42) THEN\n+    CALL abort()\n+  END IF\n+END PROGRAM test"}, {"sha": "98ddfa38e49cf81a0b23792e8e8b9a120619a00e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_5.f03", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec and small length value.\n+!\n+program test\n+  implicit none\n+  character(15) :: a(3)\n+  a =  (/ character(len=3) :: 'Takata', 'Tanaka', 'Hayashi' /)\n+  if(     a(1) /= 'Tak'  .or. a(1)(4:4)   /= achar(32) &\n+                         .or. a(1)(15:15) /= achar(32) &\n+     .or. a(2) /= 'Tan'  .or. a(2)(4:4)   /= achar(32) &\n+                         .or. a(2)(15:15) /= achar(32) &\n+     .or. a(3) /= 'Hay'  .or. a(3)(4:4)   /= achar(32) &\n+                         .or. a(3)(15:15) /= achar(32))&\n+   call abort()\n+end program test"}, {"sha": "df784f872bad68f5eac2a81cec5847696efde975", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_6.f03", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec.\n+!\n+program test\n+  character(15) :: a(3)\n+  character(10), volatile :: b(3)\n+  b(1) = 'Takata'\n+  b(2) = 'Tanaka'\n+  b(3) = 'Hayashi'\n+\n+  a =  (/ character(len=7) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n+  if (a(1) /= 'Takata' .or. a(2) /= 'Tanaka' .or. a(3) /= 'Hayashi') then\n+    call abort ()\n+  end if\n+\n+  a =  (/ character(len=2) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n+  if (a(1) /= 'Ta' .or. a(2) /= 'Ta' .or. a(3) /= 'Ha') then\n+    call abort ()\n+  end if\n+\n+  a =  (/ character(len=8) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n+  if (a(1) /= 'Takata' .or. a(2) /= 'Tanaka' .or. a(3) /= 'Hayashi') then\n+    call abort ()\n+  end if\n+\n+end program test"}, {"sha": "8fb210a68c63a54f3ea192b4c16d4f43c1da4552", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_7.f03", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec and dynamic\n+! character length.\n+!\n+PROGRAM test\n+  CALL foo(8, \"short\", \"test\", \"short\")\n+  CALL foo(2, \"lenghty\", \"te\", \"le\")\n+CONTAINS\n+  SUBROUTINE foo (n, s, a1, a2)\n+    CHARACTER(len=*) :: s\n+    CHARACTER(len=*) :: a1, a2\n+    CHARACTER(len=n) :: arr(2)\n+    INTEGER :: n\n+    arr = [ character(len=n) :: 'test', s ]\n+    IF (arr(1) /= a1 .OR. arr(2) /= a2) THEN\n+      CALL abort ()\n+    END IF\n+  END SUBROUTINE foo\n+END PROGRAM test"}, {"sha": "9be467def6778a2a9e59a78c7124e910bf002533", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_8.f03", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_8.f03?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec, check for regression\n+!\n+program test\n+  implicit none\n+  type :: real_info\n+    integer :: kind\n+  end type real_info\n+  type (real_info) :: real_infos(1) = (/ real_info (4) /)\n+end program test"}, {"sha": "c2a2bd1d8145decac4459748663bafc60a17570a", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_9.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_9.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_9.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_9.f?ref=c03fc95db39f7eefe676d2bff9a7c99b5ec01ed9", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+!\n+! PR fortran/27997\n+!\n+! Array constructor with typespec, check for regression\n+! with fixed form.\n+!\n+      integer :: a(2), realabc, real_abc2\n+      a = [ realabc, real_abc2 ]\n+      end"}]}