{"sha": "9a30a3f06b908e4e781324c2e813cd1db87119df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzMGEzZjA2YjkwOGU0ZTc4MTMyNGMyZTgxM2NkMWRiODcxMTlkZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-04-23T22:16:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-04-23T22:16:03Z"}, "message": "Fix logic error in 32-bit trampolines.\n\nThe test in the PowerPC 32-bit trampoline support is backwards.  It aborts\nif the trampoline size is greater than the expected size.  It should abort\nwhen the trampoline size is less than the expected size.  I fixed the test\nso the operands are reversed.  I then folded the load immediate into the\ncompare instruction.\n\nI verified this by creating a 32-bit trampoline program and manually\nchanging the size of the trampoline to be 48 instead of 40.  The program\naborted with the larger size.  I updated this code and ran the test again\nand it passed.\n\nI added a test case that runs on PowerPC 32-bit Linux systems and it calls\nthe __trampoline_setup function with a larger buffer size than the\ncompiler uses.  The test is not run on 64-bit systems, since the function\n__trampoline_setup is not called.  I also limited the test to just Linux\nsystems, in case trampolines are handled differently in other systems.\n\nlibgcc/\n2021-04-23  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/98952\n\t* config/rs6000/tramp.S (__trampoline_setup, elfv1 #ifdef): Fix\n\ttrampoline size comparison in 32-bit by reversing test and\n\tcombining load immediate with compare.\n\t(__trampoline_setup, elfv2 #ifdef): Fix trampoline size comparison\n\tin 32-bit by reversing test and combining load immediate with\n\tcompare.\n\ngcc/testsuite/\n2021-04-23  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/98952\n\t* gcc.target/powerpc/pr98952.c: New test.", "tree": {"sha": "93357bfdc221a25078eccb0652548b42f2711e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93357bfdc221a25078eccb0652548b42f2711e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a30a3f06b908e4e781324c2e813cd1db87119df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a30a3f06b908e4e781324c2e813cd1db87119df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a30a3f06b908e4e781324c2e813cd1db87119df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a30a3f06b908e4e781324c2e813cd1db87119df/comments", "author": null, "committer": null, "parents": [{"sha": "886b6c1e8af502b69e3f318b9830b73b88215878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886b6c1e8af502b69e3f318b9830b73b88215878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886b6c1e8af502b69e3f318b9830b73b88215878"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "c487fbc403ef2bef8d76271bb588b110240a90eb", "filename": "gcc/testsuite/gcc.target/powerpc/pr98952.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a30a3f06b908e4e781324c2e813cd1db87119df/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98952.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a30a3f06b908e4e781324c2e813cd1db87119df/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98952.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98952.c?ref=9a30a3f06b908e4e781324c2e813cd1db87119df", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { powerpc*-*-linux* && ilp32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+/* PR 96983 reported that the test in libgcc's tramp.S was backwards and it\n+   would abort if the trampoline size passed to the function was greater than\n+   the size the runtime was expecting (40).  It should abort if the size is less\n+   than 40, not greater than 40.  This test creates a call to __trampoline_setup\n+   with a much larger buffer to make sure the function does not abort.\n+\n+   We do not run this test on 64-bit since __trampoline_setup is not present in\n+   64-bit systems.\n+\n+   We only run the test under Linux in case the other systems have some\n+   different variant for __trampoline_setup.  */\n+\n+#ifndef SIZE\n+#define SIZE 100\n+#endif\n+\n+extern void __trampoline_setup (int *, unsigned, void *, void *);\n+\n+int main (void)\n+{\n+  int tramp[SIZE / sizeof (int)];\n+\n+  __trampoline_setup (tramp, SIZE, 0, 0);\n+  return 0;\n+}"}, {"sha": "68baf16de9f062b23e9ab87a47366827e66160f8", "filename": "libgcc/config/rs6000/tramp.S", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a30a3f06b908e4e781324c2e813cd1db87119df/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a30a3f06b908e4e781324c2e813cd1db87119df/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ftramp.S?ref=9a30a3f06b908e4e781324c2e813cd1db87119df", "patch": "@@ -64,8 +64,7 @@ FUNC_START(__trampoline_setup)\n         mflr\tr11\n         addi\tr7,r11,trampoline_initial-4-.LCF0 /* trampoline address -4 */\n \n-\tli\tr8,trampoline_size\t/* verify that the trampoline is big enough */\n-\tcmpw\tcr1,r8,r4\n+\tcmpwi\tcr1,r4,trampoline_size\t/* verify that the trampoline is big enough */\n \tsrwi\tr4,r4,2\t\t/* # words to move */\n \taddi\tr9,r3,-4\t/* adjust pointer for lwzu */\n \tmtctr\tr4\n@@ -156,8 +155,7 @@ FUNC_START(__trampoline_setup)\n \tld 7,.LC0@toc@l(7)\t/* trampoline address -8 */\n #endif\n \n-\tli\tr8,trampoline_size\t/* verify that the trampoline is big enough */\n-\tcmpw\tcr1,r8,r4\n+\tcmpwi\tcr1,r4,trampoline_size\t/* verify that the trampoline is big enough */\n \tsrwi\tr4,r4,3\t\t/* # doublewords to move */\n \taddi\tr9,r3,-8\t/* adjust pointer for stdu */\n \tmtctr\tr4"}]}