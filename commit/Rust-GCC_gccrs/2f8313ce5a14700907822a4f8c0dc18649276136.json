{"sha": "2f8313ce5a14700907822a4f8c0dc18649276136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4MzEzY2U1YTE0NzAwOTA3ODIyYTRmOGMwZGMxODY0OTI3NjEzNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-22T13:58:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:58:04Z"}, "message": "[Ada] Small enhancement to the -gnatD/-gnatG output for fixed-point types\n\nThis is a small enhancement to the -gnatD/-gnatG output: the base type\nof fixed-point types, which is usually an itype, used to be printed as\n??? in this case.  It is now printed in a similar fashion as the first\nsubtype.\n\nFor the following package:\n\npackage P is\n\n  type D is delta 128.0 / (2 ** 15) range 0.0 .. 256.0;\n\nend P;\n\nthe  -gnatD/-gnatG must now be:\n\nSource recreated from tree for P (spec)\n---------------------------------------\n\np_E : short_integer := 0;\n\npackage p is\n   type p__d is delta [1.0/256.0] range 0.0 .. 256.0;\n   [type p__TdB is delta [1.0/256.0] range -[2147483648.0*2**(-8)] ..\n     [2147483647.0*2**(-8)]]\n   freeze p__TdB []\nend p;\n\n2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sprint.adb (Sprint_Node_Actual)\n\t<N_Decimal_Fixed_Point_Definition>: Swap a couple of spaces.\n\t(Write_Itype): Minor consistency fixes throughout.  Add support\n\tfor printing ordinary and decimal fixed-point types and\n\tsubtypes.\n\nFrom-SVN: r273689", "tree": {"sha": "57653ccb181ed00a6520bbf5c0a9903c9cf4c7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57653ccb181ed00a6520bbf5c0a9903c9cf4c7f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f8313ce5a14700907822a4f8c0dc18649276136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8313ce5a14700907822a4f8c0dc18649276136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8313ce5a14700907822a4f8c0dc18649276136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8313ce5a14700907822a4f8c0dc18649276136/comments", "author": null, "committer": null, "parents": [{"sha": "75f6bfcefdb62b6267a10ceb6097c18f5e0973f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f6bfcefdb62b6267a10ceb6097c18f5e0973f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f6bfcefdb62b6267a10ceb6097c18f5e0973f6"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "4b817ce93288352b35eb8beb38c5a023f49cc1f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8313ce5a14700907822a4f8c0dc18649276136/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8313ce5a14700907822a4f8c0dc18649276136/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f8313ce5a14700907822a4f8c0dc18649276136", "patch": "@@ -1,3 +1,11 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual)\n+\t<N_Decimal_Fixed_Point_Definition>: Swap a couple of spaces.\n+\t(Write_Itype): Minor consistency fixes throughout.  Add support\n+\tfor printing ordinary and decimal fixed-point types and\n+\tsubtypes.\n+\n 2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_attr.adb (Expand_Loop_Entry_Attribute): Beef up comment."}, {"sha": "8a8139dedbe0a3bf2a68383617e2809a4d24eae5", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 59, "deletions": 32, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8313ce5a14700907822a4f8c0dc18649276136/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8313ce5a14700907822a4f8c0dc18649276136/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=2f8313ce5a14700907822a4f8c0dc18649276136", "patch": "@@ -1483,9 +1483,9 @@ package body Sprint is\n             end;\n \n          when N_Decimal_Fixed_Point_Definition =>\n-            Write_Str_With_Col_Check_Sloc (\" delta \");\n+            Write_Str_With_Col_Check_Sloc (\"delta \");\n             Sprint_Node (Delta_Expression (Node));\n-            Write_Str_With_Col_Check (\"digits \");\n+            Write_Str_With_Col_Check (\" digits \");\n             Sprint_Node (Digits_Expression (Node));\n             Sprint_Opt_Node (Real_Range_Specification (Node));\n \n@@ -4187,16 +4187,16 @@ package body Sprint is\n \n          declare\n             B : constant Node_Id := Etype (Typ);\n-            X : Node_Id;\n             P : constant Node_Id := Parent (Typ);\n-\n             S : constant Saved_Output_Buffer := Save_Output_Buffer;\n             --  Save current output buffer\n \n             Old_Sloc : Source_Ptr;\n             --  Save sloc of related node, so it is not modified when\n             --  printing with -gnatD.\n \n+            X : Node_Id;\n+\n          begin\n             --  Write indentation at start of line\n \n@@ -4324,8 +4324,8 @@ package body Sprint is\n                      declare\n                         L  : constant Node_Id := Type_Low_Bound (Typ);\n                         H  : constant Node_Id := Type_High_Bound (Typ);\n-                        LE : Node_Id;\n-                        HE : Node_Id;\n+                        BL : Node_Id;\n+                        BH : Node_Id;\n \n                      begin\n                         --  B can either be a scalar type, in which case the\n@@ -4335,29 +4335,29 @@ package body Sprint is\n                         --  constraint.\n \n                         if Is_Scalar_Type (B) then\n-                           LE := Type_Low_Bound (B);\n-                           HE := Type_High_Bound (B);\n+                           BL := Type_Low_Bound (B);\n+                           BH := Type_High_Bound (B);\n                         else\n-                           LE := Empty;\n-                           HE := Empty;\n+                           BL := Empty;\n+                           BH := Empty;\n                         end if;\n \n-                        if No (LE)\n+                        if No (BL)\n                           or else (True\n                             and then Nkind (L) = N_Integer_Literal\n                             and then Nkind (H) = N_Integer_Literal\n-                            and then Nkind (LE) = N_Integer_Literal\n-                            and then Nkind (HE) = N_Integer_Literal\n-                            and then UI_Eq (Intval (L), Intval (LE))\n-                            and then UI_Eq (Intval (H), Intval (HE)))\n+                            and then Nkind (BL) = N_Integer_Literal\n+                            and then Nkind (BH) = N_Integer_Literal\n+                            and then UI_Eq (Intval (L), Intval (BL))\n+                            and then UI_Eq (Intval (H), Intval (BH)))\n                         then\n                            null;\n \n                         else\n                            Write_Str (\" range \");\n-                           Sprint_Node (Type_Low_Bound (Typ));\n+                           Sprint_Node (L);\n                            Write_Str (\" .. \");\n-                           Sprint_Node (Type_High_Bound (Typ));\n+                           Sprint_Node (H);\n                         end if;\n                      end;\n \n@@ -4368,7 +4368,7 @@ package body Sprint is\n                      Write_Str (\"mod \");\n                      Write_Uint_With_Col_Check (Modulus (Typ), Auto);\n \n-                  --  Floating point types and subtypes\n+                  --  Floating-point types and subtypes\n \n                   when E_Floating_Point_Subtype\n                      | E_Floating_Point_Type\n@@ -4379,9 +4379,9 @@ package body Sprint is\n                         Write_Str (\"new \");\n                      end if;\n \n-                     Write_Id (Etype (Typ));\n+                     Write_Id (B);\n \n-                     if Digits_Value (Typ) /= Digits_Value (Etype (Typ)) then\n+                     if Digits_Value (Typ) /= Digits_Value (B) then\n                         Write_Str (\" digits \");\n                         Write_Uint_With_Col_Check\n                           (Digits_Value (Typ), Decimal);\n@@ -4392,27 +4392,54 @@ package body Sprint is\n                      declare\n                         L  : constant Node_Id := Type_Low_Bound (Typ);\n                         H  : constant Node_Id := Type_High_Bound (Typ);\n-                        LE : constant Node_Id := Type_Low_Bound (B);\n-                        HE : constant Node_Id := Type_High_Bound (B);\n+                        BL : constant Node_Id := Type_Low_Bound (B);\n+                        BH : constant Node_Id := Type_High_Bound (B);\n \n                      begin\n-                        if Nkind (L) = N_Real_Literal\n+                        if True\n+                          and then Nkind (L) = N_Real_Literal\n                           and then Nkind (H) = N_Real_Literal\n-                          and then Nkind (LE) = N_Real_Literal\n-                          and then Nkind (HE) = N_Real_Literal\n-                          and then UR_Eq (Realval (L), Realval (LE))\n-                          and then UR_Eq (Realval (H), Realval (HE))\n+                          and then Nkind (BL) = N_Real_Literal\n+                          and then Nkind (BH) = N_Real_Literal\n+                          and then UR_Eq (Realval (L), Realval (BL))\n+                          and then UR_Eq (Realval (H), Realval (BH))\n                         then\n                            null;\n \n                         else\n                            Write_Str (\" range \");\n-                           Sprint_Node (Type_Low_Bound (Typ));\n+                           Sprint_Node (L);\n                            Write_Str (\" .. \");\n-                           Sprint_Node (Type_High_Bound (Typ));\n+                           Sprint_Node (H);\n                         end if;\n                      end;\n \n+                  --  Ordinary fixed-point types and subtypes\n+\n+                  when E_Ordinary_Fixed_Point_Subtype\n+                     | E_Ordinary_Fixed_Point_Type\n+                  =>\n+                     Write_Header (Ekind (Typ) = E_Ordinary_Fixed_Point_Type);\n+\n+                     Write_Str (\"delta \");\n+                     Write_Ureal_With_Col_Check_Sloc (Delta_Value (Typ));\n+                     Write_Str (\" range \");\n+                     Sprint_Node (Type_Low_Bound (Typ));\n+                     Write_Str (\" .. \");\n+                     Sprint_Node (Type_High_Bound (Typ));\n+\n+                  --  Decimal fixed-point types and subtypes\n+\n+                  when E_Decimal_Fixed_Point_Subtype\n+                     | E_Decimal_Fixed_Point_Type\n+                  =>\n+                     Write_Header (Ekind (Typ) = E_Decimal_Fixed_Point_Type);\n+\n+                     Write_Str (\"delta \");\n+                     Write_Ureal_With_Col_Check_Sloc (Delta_Value (Typ));\n+                     Write_Str (\" digits \");\n+                     Write_Uint_With_Col_Check (Digits_Value (Typ), Decimal);\n+\n                   --  Record subtypes\n \n                   when E_Record_Subtype\n@@ -4493,16 +4520,16 @@ package body Sprint is\n \n                   when E_String_Literal_Subtype =>\n                      declare\n-                        LB  : constant Uint :=\n+                        L   : constant Uint :=\n                                 Expr_Value (String_Literal_Low_Bound (Typ));\n                         Len : constant Uint :=\n                                 String_Literal_Length (Typ);\n                      begin\n                         Write_Header (False);\n                         Write_Str (\"String (\");\n-                        Write_Int (UI_To_Int (LB));\n+                        Write_Int (UI_To_Int (L));\n                         Write_Str (\" .. \");\n-                        Write_Int (UI_To_Int (LB + Len) - 1);\n+                        Write_Int (UI_To_Int (L + Len) - 1);\n                         Write_Str (\");\");\n                      end;\n "}]}