{"sha": "a11d04b523a602dc745c64ea7bd9058822ebd89a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZDA0YjUyM2E2MDJkYzc0NWM2NGVhN2JkOTA1ODgyMmViZDg5YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-12-07T14:17:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-12-07T14:17:53Z"}, "message": "cp-tree.h (sufficient_parms_p): Declare new function.\n\n\t* cp-tree.h (sufficient_parms_p): Declare new function.\n\t* call.c (sufficient_parms_p): New function, broken out of ...\n\t(add_function_candidate): ... here. Use it.\n\t(add_conv_candidate): Use it.\n\t* decl.c (grok_ctor_properties): Use it.\n\nFrom-SVN: r38111", "tree": {"sha": "4436359450e340eb528adfa2a67554f58fc6d454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4436359450e340eb528adfa2a67554f58fc6d454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11d04b523a602dc745c64ea7bd9058822ebd89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11d04b523a602dc745c64ea7bd9058822ebd89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11d04b523a602dc745c64ea7bd9058822ebd89a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11d04b523a602dc745c64ea7bd9058822ebd89a/comments", "author": null, "committer": null, "parents": [{"sha": "5eec2847332bbfbd0c711786d6d3c5f4db03ecee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eec2847332bbfbd0c711786d6d3c5f4db03ecee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eec2847332bbfbd0c711786d6d3c5f4db03ecee"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "923158ab373730f97c8fb5181335763935f8e31c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a11d04b523a602dc745c64ea7bd9058822ebd89a", "patch": "@@ -1,3 +1,11 @@\n+2000-12-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (sufficient_parms_p): Declare new function.\n+\t* call.c (sufficient_parms_p): New function, broken out of ...\n+\t(add_function_candidate): ... here. Use it.\n+\t(add_conv_candidate): Use it.\n+\t* decl.c (grok_ctor_properties): Use it.\n+\n 2000-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* optimize.c (copy_body_r): Set STMT_IS_FULL_EXPR_P on EXPR_STMT."}, {"sha": "cbe345a3f05961320f82bc5d8016d083c1b8e73f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a11d04b523a602dc745c64ea7bd9058822ebd89a", "patch": "@@ -589,6 +589,21 @@ null_ptr_cst_p (t)\n   return 0;\n }\n \n+\n+/* Returns non-zero if PARMLIST consists of only default parms and/or\n+   ellipsis. */\n+\n+int\n+sufficient_parms_p (parmlist)\n+     tree parmlist;\n+{\n+  for (; parmlist && parmlist != void_list_node;\n+       parmlist = TREE_CHAIN (parmlist))\n+    if (!TREE_PURPOSE (parmlist))\n+      return 0;\n+  return 1;\n+}\n+\n static tree\n build_conv (code, type, from)\n      enum tree_code code;\n@@ -1324,13 +1339,8 @@ add_function_candidate (candidates, fn, ctype, arglist, flags)\n     viable = 0;\n \n   /* Make sure there are default args for the rest of the parms.  */\n-  else for (; parmnode && parmnode != void_list_node;\n-\t    parmnode = TREE_CHAIN (parmnode))\n-    if (! TREE_PURPOSE (parmnode))\n-      {\n-\tviable = 0;\n-\tbreak;\n-      }\n+  else if (!sufficient_parms_p (parmnode))\n+    viable = 0;\n \n   if (! viable)\n     goto out;\n@@ -1471,13 +1481,8 @@ add_conv_candidate (candidates, fn, obj, arglist)\n   if (i < len)\n     viable = 0;\n \n-  for (; parmnode && parmnode != void_list_node;\n-       parmnode = TREE_CHAIN (parmnode))\n-    if (! TREE_PURPOSE (parmnode))\n-      {\n-\tviable = 0;\n-\tbreak;\n-      }\n+  if (!sufficient_parms_p (parmnode))\n+    viable = 0;\n \n   return add_candidate (candidates, totype, convs, viable);\n }"}, {"sha": "9fcbcc2cff54946412701edc5a72e6c39d0be8fe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a11d04b523a602dc745c64ea7bd9058822ebd89a", "patch": "@@ -3736,6 +3736,7 @@ extern tree build_addr_func\t\t\tPARAMS ((tree));\n extern tree build_call\t\t\t\tPARAMS ((tree, tree));\n extern tree build_method_call\t\t\tPARAMS ((tree, tree, tree, tree, int));\n extern int null_ptr_cst_p\t\t\tPARAMS ((tree));\n+extern int sufficient_parms_p                   PARAMS ((tree));\n extern tree type_decays_to\t\t\tPARAMS ((tree));\n extern tree build_user_type_conversion\t\tPARAMS ((tree, tree, int));\n extern tree build_new_function_call\t\tPARAMS ((tree, tree));\n@@ -4269,7 +4270,7 @@ extern tree lookup_conversions\t\t\tPARAMS ((tree));\n extern tree binfo_for_vtable\t\t\tPARAMS ((tree));\n extern tree binfo_from_vbase\t\t\tPARAMS ((tree));\n extern tree dfs_walk                            PARAMS ((tree,\n-\t\t\t\t\t\t       tree (*)(tree, void *),\n+\t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),\n \t\t\t\t\t\t       void *));\n extern tree dfs_walk_real                      PARAMS ((tree,"}, {"sha": "4d1867d1366820b0be4dd64032096e51ebc8d210", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11d04b523a602dc745c64ea7bd9058822ebd89a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a11d04b523a602dc745c64ea7bd9058822ebd89a", "patch": "@@ -12137,9 +12137,7 @@ grok_ctor_properties (ctype, decl)\n      other parameters have default arguments.  */\n   if (TREE_CODE (parmtype) == REFERENCE_TYPE\n       && TYPE_MAIN_VARIANT (TREE_TYPE (parmtype)) == ctype\n-      && (TREE_CHAIN (parmtypes) == NULL_TREE\n-\t  || TREE_CHAIN (parmtypes) == void_list_node\n-\t  || TREE_PURPOSE (TREE_CHAIN (parmtypes)))\n+      && sufficient_parms_p (TREE_CHAIN (parmtypes))\n       && !(DECL_TEMPLATE_INSTANTIATION (decl)\n \t   && is_member_template (DECL_TI_TEMPLATE (decl))))\n     {\n@@ -12163,9 +12161,7 @@ grok_ctor_properties (ctype, decl)\n      existence.  Theoretically, they should never even be\n      instantiated, but that's hard to forestall.  */\n   else if (TYPE_MAIN_VARIANT (parmtype) == ctype\n-\t   && (TREE_CHAIN (parmtypes) == NULL_TREE\n-\t       || TREE_CHAIN (parmtypes) == void_list_node\n-\t       || TREE_PURPOSE (TREE_CHAIN (parmtypes)))\n+\t   && sufficient_parms_p (TREE_CHAIN (parmtypes))\n \t   && !(DECL_TEMPLATE_INSTANTIATION (decl)\n \t\t&& is_member_template (DECL_TI_TEMPLATE (decl))))\n     {"}]}