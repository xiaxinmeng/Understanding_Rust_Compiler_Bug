{"sha": "d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwZjNjNDAzMDRjOTA4NmQ3ZmYyYzUyMzlmNThkZThiYzBjMjIxOA==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2014-09-03T10:19:39Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-09-03T10:19:39Z"}, "message": "[NDS32] No need to take padding into consideration in Andes ABI2 because we can...\n\n[NDS32] No need to take padding into consideration in Andes ABI2 because\n        we can pass arguments in registers for variadic function.\n\n  -- By default GCC uses must_pass_in_stack_var_size_or_pad for TARGET_MUST_PASS_IN_STACK.\n     For Andes ABI2, the data layout in memory will be incorrect when calling variadic function\n     under big-endian configuration.\n\n\t* config/nds32/nds32.c (nds32_must_pass_in_stack): New implementation\n\tfor TARGET_MUST_PASS_IN_STACK.\n\nFrom-SVN: r214869", "tree": {"sha": "34b531900948ad949ba6299b368d5f6ea517b9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34b531900948ad949ba6299b368d5f6ea517b9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40f3c40304c9086d7ff2c5239f58de8bc0c2218/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "650fc46935f19fe1e935fa62891689cb1375d8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fc46935f19fe1e935fa62891689cb1375d8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650fc46935f19fe1e935fa62891689cb1375d8b6"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "cfec7b4c32f8ac96ca7740da143f67a032d1985d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40f3c40304c9086d7ff2c5239f58de8bc0c2218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40f3c40304c9086d7ff2c5239f58de8bc0c2218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "patch": "@@ -1,3 +1,8 @@\n+2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_must_pass_in_stack): New implementation\n+\tfor TARGET_MUST_PASS_IN_STACK.\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_arg_partial_bytes): New implementation"}, {"sha": "062e803e4a5cd7fd895d7dfb356a8e5dd429dab0", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40f3c40304c9086d7ff2c5239f58de8bc0c2218/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40f3c40304c9086d7ff2c5239f58de8bc0c2218/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=d40f3c40304c9086d7ff2c5239f58de8bc0c2218", "patch": "@@ -1352,6 +1352,19 @@ nds32_function_arg (cumulative_args_t ca, enum machine_mode mode,\n   return NULL_RTX;\n }\n \n+static bool\n+nds32_must_pass_in_stack (enum machine_mode mode, const_tree type)\n+{\n+  /* Return true if a type must be passed in memory.\n+     If it is NOT using hard float abi, small aggregates can be\n+     passed in a register even we are calling a variadic function.\n+     So there is no need to take padding into consideration.  */\n+  if (TARGET_HARD_FLOAT)\n+    return must_pass_in_stack_var_size_or_pad (mode, type);\n+  else\n+    return must_pass_in_stack_var_size (mode, type);\n+}\n+\n static int\n nds32_arg_partial_bytes (cumulative_args_t ca, enum machine_mode mode,\n \t\t\t tree type, bool named ATTRIBUTE_UNUSED)\n@@ -3498,6 +3511,9 @@ nds32_target_alignment (rtx label)\n #undef TARGET_FUNCTION_ARG\n #define TARGET_FUNCTION_ARG nds32_function_arg\n \n+#undef TARGET_MUST_PASS_IN_STACK\n+#define TARGET_MUST_PASS_IN_STACK nds32_must_pass_in_stack\n+\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES nds32_arg_partial_bytes\n "}]}