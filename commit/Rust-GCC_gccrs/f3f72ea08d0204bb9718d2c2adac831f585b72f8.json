{"sha": "f3f72ea08d0204bb9718d2c2adac831f585b72f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmNzJlYTA4ZDAyMDRiYjk3MThkMmMyYWRhYzgzMWY1ODViNzJmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-05-23T00:38:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-05-23T00:38:32Z"}, "message": "Finish correcting inadvertent checkin.\n\nFrom-SVN: r67107", "tree": {"sha": "2db456c8fbfee316302d9af3e607f7dccc2a0475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db456c8fbfee316302d9af3e607f7dccc2a0475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f72ea08d0204bb9718d2c2adac831f585b72f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f72ea08d0204bb9718d2c2adac831f585b72f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f72ea08d0204bb9718d2c2adac831f585b72f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f72ea08d0204bb9718d2c2adac831f585b72f8/comments", "author": null, "committer": null, "parents": [{"sha": "eaf5fde9e54a50c12776ef533d66521cab8c8ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf5fde9e54a50c12776ef533d66521cab8c8ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf5fde9e54a50c12776ef533d66521cab8c8ca0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d251a27cc0187641618a361f588733abb9634509", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f72ea08d0204bb9718d2c2adac831f585b72f8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f72ea08d0204bb9718d2c2adac831f585b72f8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f3f72ea08d0204bb9718d2c2adac831f585b72f8", "patch": "@@ -5799,7 +5799,7 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t     made during type construction.  */\n \t  if (this_offset == 0)\n \t    break;\n-\t  else if (CONTAINS_PLACEHOLDER_P (this_offset))\n+\t  else if (contains_placeholder_p (this_offset))\n \t    this_offset = build (WITH_RECORD_EXPR, sizetype, this_offset, exp);\n \n \t  offset = size_binop (PLUS_EXPR, offset, this_offset);\n@@ -5829,9 +5829,9 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t  /* If the index has a self-referential type, pass it to a\n \t     WITH_RECORD_EXPR; if the component size is, pass our\n \t     component to one.  */\n-\t  if (CONTAINS_PLACEHOLDER_P (index))\n+\t  if (contains_placeholder_p (index))\n \t    index = build (WITH_RECORD_EXPR, TREE_TYPE (index), index, exp);\n-\t  if (CONTAINS_PLACEHOLDER_P (unit_size))\n+\t  if (contains_placeholder_p (unit_size))\n \t    unit_size = build (WITH_RECORD_EXPR, sizetype, unit_size, array);\n \n \t  offset = size_binop (PLUS_EXPR, offset,"}]}