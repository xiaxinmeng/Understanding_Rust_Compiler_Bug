{"sha": "8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "node_id": "C_kwDOANBUbNoAKDhhMGRkMmJkOTgxNTBiNzk5NjJmNmYxZjZmNGY2NTU1ZDZkYzhmNGY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-24T08:29:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T08:29:43Z"}, "message": "Merge #689\n\n689: x86: Instead of 'TARGET_ISA_[...]', 'TARGET_ISA2_[...]', use 'TARGET_[...]' [#247] r=philberty a=tschwinge\n\n... in preparation for a merge from GCC upstream, where the former disappear.\r\n\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "ce84ef3900f64c8015a4ece868fdfc1b9c8760e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce84ef3900f64c8015a4ece868fdfc1b9c8760e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhTYx3CRBK7hj4Ov3rIwAA+Z0IAAzBJqikLCdYyBIdz5agG3eY\n+EtrIDTWjDVhqY/TRCF9DSdNQqPc1EzTVYEa4tcYbLY75+bWoRrH5EyswNUqzbl1\ngJ9D/ay+iixOQtZLNe42ywW2SDDuAT675VBFHIXJvrkEJJ5aiA+XcUYr5lgyIIo6\nCcSD0t2LqhqihcGQkdRLNAXbtCKjyy5BGYHEPiIbw9BE1oyAfMfpY9IFqZ7hZtVL\n21wr/mOeZs7ipeKLkh054dkLKgb5b/2gAGp3+83WFPc8I5kn7dijaVabxNRR2Opc\n/5ijLWF9Fy47AQj036N9OFaSHT7the0qiJ2WPvz4YVqY6UQqFCsu29877JPHzVc=\n=NUyE\n-----END PGP SIGNATURE-----\n", "payload": "tree ce84ef3900f64c8015a4ece868fdfc1b9c8760e4\nparent f3da612f98df143bca28258f084bc8b3f804c871\nparent ac2d117861e717f7e4e80970b6866abdcf9b2e99\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632472183 +0000\ncommitter GitHub <noreply@github.com> 1632472183 +0000\n\nMerge #689\n\n689: x86: Instead of 'TARGET_ISA_[...]', 'TARGET_ISA2_[...]', use 'TARGET_[...]' [#247] r=philberty a=tschwinge\n\n... in preparation for a merge from GCC upstream, where the former disappear.\r\n\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3da612f98df143bca28258f084bc8b3f804c871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3da612f98df143bca28258f084bc8b3f804c871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3da612f98df143bca28258f084bc8b3f804c871"}, {"sha": "ac2d117861e717f7e4e80970b6866abdcf9b2e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2d117861e717f7e4e80970b6866abdcf9b2e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2d117861e717f7e4e80970b6866abdcf9b2e99"}], "stats": {"total": 202, "additions": 101, "deletions": 101}, "files": [{"sha": "22412a8e23d7d8dcf58aa0cc8174edb9c572f082", "filename": "gcc/config/i386/i386-rust.c", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.c?ref=8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "patch": "@@ -49,87 +49,87 @@ ix86_rust_target_cpu_info (void)\n     }\n \n   // features officially \"stabilised\" in rustc\n-  if (TARGET_ISA_MMX)\n+  if (TARGET_MMX)\n     rust_add_target_info(\"target_feature\", \"mmx\");\n-  if (TARGET_ISA_SSE)\n+  if (TARGET_SSE)\n     rust_add_target_info(\"target_feature\", \"sse\");\n-  if (TARGET_ISA_SSE2)\n+  if (TARGET_SSE2)\n     rust_add_target_info(\"target_feature\", \"sse2\");\n-  if (TARGET_ISA_SSE3)\n+  if (TARGET_SSE3)\n     rust_add_target_info(\"target_feature\", \"sse3\");\n-  if (TARGET_ISA_SSSE3)\n+  if (TARGET_SSSE3)\n     rust_add_target_info(\"target_feature\", \"ssse3\");\n-  if (TARGET_ISA_SSE4_1)\n+  if (TARGET_SSE4_1)\n     rust_add_target_info(\"target_feature\", \"sse4.1\");\n-  if (TARGET_ISA_SSE4_2)\n+  if (TARGET_SSE4_2)\n     rust_add_target_info(\"target_feature\", \"sse4.2\");\n-  if (TARGET_ISA_AES)\n+  if (TARGET_AES)\n     rust_add_target_info(\"target_feature\", \"aes\");\n-  if (TARGET_ISA_SHA)\n+  if (TARGET_SHA)\n     rust_add_target_info(\"target_feature\", \"sha\");\n-  if (TARGET_ISA_AVX)\n+  if (TARGET_AVX)\n     rust_add_target_info(\"target_feature\", \"avx\");\n-  if (TARGET_ISA_AVX2)\n+  if (TARGET_AVX2)\n     rust_add_target_info(\"target_feature\", \"avx2\");\n-  if (TARGET_ISA_AVX512F)\n+  if (TARGET_AVX512F)\n     rust_add_target_info(\"target_feature\", \"avx512f\");\n-  if (TARGET_ISA_AVX512ER)\n+  if (TARGET_AVX512ER)\n     rust_add_target_info(\"target_feature\", \"avx512er\");\n-  if (TARGET_ISA_AVX512CD)\n+  if (TARGET_AVX512CD)\n     rust_add_target_info(\"target_feature\", \"avx512cd\");\n-  if (TARGET_ISA_AVX512PF)\n+  if (TARGET_AVX512PF)\n     rust_add_target_info(\"target_feature\", \"avx512pf\");\n-  if (TARGET_ISA_AVX512DQ)\n+  if (TARGET_AVX512DQ)\n     rust_add_target_info(\"target_feature\", \"avx512dq\");\n-  if (TARGET_ISA_AVX512BW)\n+  if (TARGET_AVX512BW)\n     rust_add_target_info(\"target_feature\", \"avx512bw\");\n-  if (TARGET_ISA_AVX512VL)\n+  if (TARGET_AVX512VL)\n     rust_add_target_info(\"target_feature\", \"avx512vl\");\n-  if (TARGET_ISA_AVX512VBMI)\n+  if (TARGET_AVX512VBMI)\n     rust_add_target_info(\"target_feature\", \"avx512vbmi\");\n-  if (TARGET_ISA_AVX512IFMA)\n+  if (TARGET_AVX512IFMA)\n     rust_add_target_info(\"target_feature\", \"avx512ifma\");\n-  if (TARGET_ISA_AVX512VPOPCNTDQ)\n+  if (TARGET_AVX512VPOPCNTDQ)\n     rust_add_target_info(\"target_feature\", \"avx512vpopcntdq\");\n-  if (TARGET_ISA_FMA)\n+  if (TARGET_FMA)\n     rust_add_target_info(\"target_feature\", \"fma\");\n-  if (TARGET_ISA_RTM)\n+  if (TARGET_RTM)\n     rust_add_target_info(\"target_feature\", \"rtm\");\n-  if (TARGET_ISA_SSE4A)\n+  if (TARGET_SSE4A)\n     rust_add_target_info(\"target_feature\", \"sse4a\");\n-  if (TARGET_ISA_BMI) {\n+  if (TARGET_BMI) {\n     rust_add_target_info(\"target_feature\", \"bmi1\");\n     rust_add_target_info(\"target_feature\", \"bmi\");\n   }\n-  if (TARGET_ISA_BMI2)\n+  if (TARGET_BMI2)\n     rust_add_target_info(\"target_feature\", \"bmi2\");\n-  if (TARGET_ISA_LZCNT)\n+  if (TARGET_LZCNT)\n     rust_add_target_info(\"target_feature\", \"lzcnt\");\n-  if (TARGET_ISA_TBM)\n+  if (TARGET_TBM)\n     rust_add_target_info(\"target_feature\", \"tbm\");\n-  if (TARGET_ISA_POPCNT)\n+  if (TARGET_POPCNT)\n     rust_add_target_info(\"target_feature\", \"popcnt\");\n-  if (TARGET_ISA_RDRND) {\n+  if (TARGET_RDRND) {\n     rust_add_target_info(\"target_feature\", \"rdrand\");\n     rust_add_target_info(\"target_feature\", \"rdrnd\");\n   }\n-  if (TARGET_ISA_F16C)\n+  if (TARGET_F16C)\n     rust_add_target_info(\"target_feature\", \"f16c\");\n-  if (TARGET_ISA_RDSEED)\n+  if (TARGET_RDSEED)\n     rust_add_target_info(\"target_feature\", \"rdseed\");\n-  if (TARGET_ISA_ADX)\n+  if (TARGET_ADX)\n     rust_add_target_info(\"target_feature\", \"adx\");\n-  if (TARGET_ISA_FXSR)\n+  if (TARGET_FXSR)\n     rust_add_target_info(\"target_feature\", \"fxsr\");\n-  if (TARGET_ISA_XSAVE)\n+  if (TARGET_XSAVE)\n     rust_add_target_info(\"target_feature\", \"xsave\");\n-  if (TARGET_ISA_XSAVEOPT)\n+  if (TARGET_XSAVEOPT)\n     rust_add_target_info(\"target_feature\", \"xsaveopt\");\n-  if (TARGET_ISA_XSAVEC)\n+  if (TARGET_XSAVEC)\n     rust_add_target_info(\"target_feature\", \"xsavec\");\n-  if (TARGET_ISA_XSAVES)\n+  if (TARGET_XSAVES)\n     rust_add_target_info(\"target_feature\", \"xsaves\");\n-  if (TARGET_ISA_VPCLMULQDQ) {\n+  if (TARGET_VPCLMULQDQ) {\n     rust_add_target_info(\"target_feature\", \"pclmulqdq\");\n     rust_add_target_info(\"target_feature\", \"vpclmulqdq\");\n   }\n@@ -139,7 +139,7 @@ ix86_rust_target_cpu_info (void)\n     rust_add_target_info(\"target_feature\", \"movbe\");\n \n   // features derived from llvm not yet in rustc:\n-  if (TARGET_ISA_64BIT)\n+  if (TARGET_64BIT)\n     rust_add_target_info(\"target_feature\", \"64bit-mode\");\n   else if (TARGET_CODE16)\n     rust_add_target_info(\"target_feature\", \"16bit-mode\");\n@@ -173,9 +173,9 @@ ix86_rust_target_cpu_info (void)\n     rust_add_target_info(\"target_feature\", \"cmov\");\n   if (TARGET_CMPXCHG8B)\n     rust_add_target_info(\"target_feature\", \"cx8\");\n-  if (TARGET_ISA_3DNOW)\n+  if (TARGET_3DNOW)\n     rust_add_target_info(\"target_feature\", \"3dnow\");\n-  if (TARGET_ISA_3DNOW_A)\n+  if (TARGET_3DNOW_A)\n     rust_add_target_info(\"target_feature\", \"3dnowa\");\n   if (TARGET_64BIT)\n     rust_add_target_info(\"target_feature\", \"64bit\");\n@@ -203,51 +203,51 @@ ix86_rust_target_cpu_info (void)\n     rust_add_target_info(\"target_feature\", \"slow-unaligned-mem-16\");\n   if (ix86_arch == PROCESSOR_SANDYBRIDGE)\n     rust_add_target_info(\"target_feature\", \"slow-unaligned-mem-32\");\n-  if (TARGET_ISA_PREFETCHWT1)\n+  if (TARGET_PREFETCHWT1)\n     rust_add_target_info(\"target_feature\", \"prefetchwt1\");\n-  if (TARGET_ISA_AVX512VBMI2)\n+  if (TARGET_AVX512VBMI2)\n     rust_add_target_info(\"target_feature\", \"avx512vbmi2\");\n-  if (TARGET_ISA_PKU)\n+  if (TARGET_PKU)\n     rust_add_target_info(\"target_feature\", \"pku\");\n-  if (TARGET_ISA_AVX512VNNI)\n+  if (TARGET_AVX512VNNI)\n     rust_add_target_info(\"target_feature\", \"avx512vnni\");\n-  if (TARGET_ISA2_AVX512BF16)\n+  if (TARGET_AVX512BF16)\n     rust_add_target_info(\"target_feature\", \"avx512bf16\");\n-  if (TARGET_ISA_AVX512BITALG)\n+  if (TARGET_AVX512BITALG)\n     rust_add_target_info(\"target_feature\", \"avx512bitalg\");\n-  if (TARGET_ISA2_AVX512VP2INTERSECT)\n+  if (TARGET_AVX512VP2INTERSECT)\n     rust_add_target_info(\"target_feature\", \"avx512vp2intersect\");\n-  if (TARGET_ISA_PCLMUL)\n+  if (TARGET_PCLMUL)\n     rust_add_target_info(\"target_feature\", \"pclmul\");\n-  if (TARGET_ISA_GFNI)\n+  if (TARGET_GFNI)\n     rust_add_target_info(\"target_feature\", \"gfni\");\n-  if (TARGET_ISA_FMA4)\n+  if (TARGET_FMA4)\n     rust_add_target_info(\"target_feature\", \"fma4\");\n-  if (TARGET_ISA_XOP)\n+  if (TARGET_XOP)\n     rust_add_target_info(\"target_feature\", \"xop\");\n \n   // this is only enabled by choice in llvm, never by default - TODO determine if gcc enables it\n   // rust_add_target_info(\"target_feature\", \"sse-unaligned-mem\");\n \n-  if (TARGET_ISA2_VAES)\n+  if (TARGET_VAES)\n     rust_add_target_info(\"target_feature\", \"vaes\");\n-  if (TARGET_ISA_LWP)\n+  if (TARGET_LWP)\n     rust_add_target_info(\"target_feature\", \"lwp\");\n-  if (TARGET_ISA_FSGSBASE)\n+  if (TARGET_FSGSBASE)\n     rust_add_target_info(\"target_feature\", \"fsgsbase\");\n-  if (TARGET_ISA_SHSTK)\n+  if (TARGET_SHSTK)\n     rust_add_target_info(\"target_feature\", \"shstk\");\n-  if (TARGET_ISA_PRFCHW)\n+  if (TARGET_PRFCHW)\n     rust_add_target_info(\"target_feature\", \"prfchw\");\n-  if (TARGET_ISA_SAHF) // would this be better as TARGET_USE_SAHF?\n+  if (TARGET_SAHF) // would this be better as TARGET_USE_SAHF?\n     rust_add_target_info(\"target_feature\", \"sahf\");\n-  if (TARGET_ISA2_MWAITX)\n+  if (TARGET_MWAITX)\n     rust_add_target_info(\"target_feature\", \"mwaitx\");\n-  if (TARGET_ISA2_CLZERO)\n+  if (TARGET_CLZERO)\n     rust_add_target_info(\"target_feature\", \"clzero\");\n-  if (TARGET_ISA2_CLDEMOTE)\n+  if (TARGET_CLDEMOTE)\n     rust_add_target_info(\"target_feature\", \"cldemote\");\n-  if (TARGET_ISA2_PTWRITE)\n+  if (TARGET_PTWRITE)\n     rust_add_target_info(\"target_feature\", \"ptwrite\");\n   // TODO: add amx-tile, amx-int8, amx-bf16 features when gcc supports them \n \n@@ -280,19 +280,19 @@ ix86_rust_target_cpu_info (void)\n     || ix86_arch == PROCESSOR_COOPERLAKE; \n   if (hasINVPCID)\n     rust_add_target_info(\"target_feature\", \"invpcid\");\n-  if (TARGET_ISA2_SGX)\n+  if (TARGET_SGX)\n     rust_add_target_info(\"target_feature\", \"sgx\");\n-  if (TARGET_ISA_CLFLUSHOPT)\n+  if (TARGET_CLFLUSHOPT)\n     rust_add_target_info(\"target_feature\", \"clflushopt\");\n-  if (TARGET_ISA_CLWB)\n+  if (TARGET_CLWB)\n     rust_add_target_info(\"target_feature\", \"clwb\");\n-  if (TARGET_ISA2_WBNOINVD)\n+  if (TARGET_WBNOINVD)\n     rust_add_target_info(\"target_feature\", \"wbnoinvd\");\n-  if (TARGET_ISA2_RDPID)\n+  if (TARGET_RDPID)\n     rust_add_target_info(\"target_feature\", \"rdpid\");\n-  if (TARGET_ISA2_WAITPKG)\n+  if (TARGET_WAITPKG)\n     rust_add_target_info(\"target_feature\", \"waitpkg\");\n-  if (TARGET_ISA2_ENQCMD)\n+  if (TARGET_ENQCMD)\n     rust_add_target_info(\"target_feature\", \"enqcmd\");\n \n   // these are only enabled by choice in llvm, never by default - TODO determine if gcc supports them\n@@ -340,7 +340,7 @@ ix86_rust_target_cpu_info (void)\n   if (ix86_arch == PROCESSOR_HASWELL)\n     rust_add_target_info(\"target_feature\", \"false-deps-lzcnt-tzcnt\");\n \n-  if (TARGET_ISA2_PCONFIG)\n+  if (TARGET_PCONFIG)\n     rust_add_target_info(\"target_feature\", \"pconfig\");\n \n   // TODO: gcc seems to not record if variable-mask shuffles are fast, so basing it on llvm\n@@ -451,9 +451,9 @@ ix86_rust_target_cpu_info (void)\n    * lvi-cfi (LVI control flow integrity), seses (speculative execution side-effect suppression)\n    * lvi-load-hardening if gcc gets support */\n \n-  if (TARGET_ISA_MOVDIRI)\n+  if (TARGET_MOVDIRI)\n     rust_add_target_info(\"target_feature\", \"movdiri\");\n-  if (TARGET_ISA2_MOVDIR64B)\n+  if (TARGET_MOVDIR64B)\n     rust_add_target_info(\"target_feature\", \"movdir64b\");\n \n   bool hasFastBEXTR = ix86_arch == PROCESSOR_BTVER2 || ix86_arch == PROCESSOR_BDVER2 \n@@ -484,15 +484,15 @@ ix86_rust_target_cpu_info (void)\n   // TODO: determine if gcc supports alias analysis (in which case \"use-aa\" is defined)\n \n   // features not supported by llvm but important enough for c frontend to define macros for\n-  /*if (TARGET_ISA_AVX5124VNNIW)\n+  /*if (TARGET_AVX5124VNNIW)\n     rust_add_target_info(\"target_feature\", \"avx5124vnniw\");\n-  if (TARGET_ISA_AVX5124FMAPS)\n+  if (TARGET_AVX5124FMAPS)\n     rust_add_target_info(\"target_feature\", \"avx5124fmaps\");\n-  if (TARGET_ISA_ABM)\n+  if (TARGET_ABM)\n     rust_add_target_info(\"target_feature\", \"abm\");\n-  if ((ix86_fpmath & FPMATH_SSE) && TARGET_ISA_SSE)\n+  if ((ix86_fpmath & FPMATH_SSE) && TARGET_SSE)\n     ; //def_or_undef (parse_in, \"__SSE_MATH__\");\n-  if ((ix86_fpmath & FPMATH_SSE) && TARGET_ISA_SSE2)\n+  if ((ix86_fpmath & FPMATH_SSE) && TARGET_SSE2)\n     ; //def_or_undef (parse_in, \"__SSE2_MATH__\");\n   if (TARGET_MMX_WITH_SSE)\n     ; //def_or_undef (parse_in, \"__MMX_WITH_SSE__\");"}, {"sha": "328edd87975e08ec2dacd615c8b4eaac1a5500fb", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=8a0dd2bd98150b79962f6f1f6f4f6555d6dc8f4f", "patch": "@@ -156,117 +156,117 @@ Session::enable_features ()\n \n   /*\n   if (target == \"x86\" || target == \"x86_64\") {\n-      if (TARGET_ISA_AES) {\n+      if (TARGET_AES) {\n \t  // enable aes, implicitly enable sse2\n \t  implicitly_enable_feature(\"aes\");\n       }\n \n-      if (TARGET_ISA_AVX) {\n+      if (TARGET_AVX) {\n \t  // enable avx, implicitly enable sse4.2\n \t  implicitly_enable_feature(\"sse4.2\");\n       }\n \n-      if (TARGET_ISA_AVX2) {\n+      if (TARGET_AVX2) {\n \t  // enable avx2, implicitly enable avx\n \t  implicitly_enable_feature(\"avx\");\n       }\n \n-      if (TARGET_ISA_BMI) {\n+      if (TARGET_BMI) {\n \t  // enable bmi1\n \t  implicitly_enable_feature(\"bmi1\");\n       }\n \n-      if (TARGET_ISA_BMI2) {\n+      if (TARGET_BMI2) {\n \t  // enable bmi2\n \t  implicitly_enable_feature(\"bmi2\");\n       }\n \n-      if (TARGET_ISA_FMA) {\n+      if (TARGET_FMA) {\n \t  // enable fma, implicitly enable avx\n \t  implicitly_enable_feature(\"fma\");\n       }\n \n-      if (TARGET_ISA_FXSR) {\n+      if (TARGET_FXSR) {\n \t  // enable fxsr\n \t  implicitly_enable_feature(\"fxsr\");\n       }\n \n-      if (TARGET_ISA_LZCNT) {\n+      if (TARGET_LZCNT) {\n \t  // enable lzcnt\n \t  implicitly_enable_feature(\"lzcnt\");\n       }\n \n-      if (TARGET_ISA_VPCLMULQDQ) {\n+      if (TARGET_VPCLMULQDQ) {\n \t  // enable pclmulqdq, implicitly enable sse2\n \t  implicitly_enable_feature(\"pclmulqdq\");\n       }\n \n-      if (TARGET_ISA_POPCNT) {\n+      if (TARGET_POPCNT) {\n \t  // enable popcnt\n \t  implicitly_enable_feature(\"popcnt\");\n       }\n \n-      if (TARGET_ISA_RDRND) {\n+      if (TARGET_RDRND) {\n \t  // enable rdrand\n \t  implicitly_enable_feature(\"rdrand\");\n       }\n \n-      if (TARGET_ISA_RDSEED) {\n+      if (TARGET_RDSEED) {\n \t  // enable rdseed\n \t  implicitly_enable_feature(\"rdseed\");\n       }\n \n-      if (TARGET_ISA_SHA) {\n+      if (TARGET_SHA) {\n \t  // enable sha, implicitly enable sse2\n \t  implicitly_enable_feature(\"sha\");\n       }\n \n-      if (TARGET_ISA_SSE) {\n+      if (TARGET_SSE) {\n \t  // enable sse\n \t  implicitly_enable_feature(\"sse\");\n       }\n \n-      if (TARGET_ISA_SSE2) {\n+      if (TARGET_SSE2) {\n \t  // enable sse2, implicitly enable sse\n \t  implicitly_enable_feature(\"sse2\");\n       }\n \n-      if (TARGET_ISA_SSE3) {\n+      if (TARGET_SSE3) {\n \t  // enable sse3, implicitly enable sse2\n \t  implicitly_enable_feature(\"sse3\");\n       }\n \n-      if (TARGET_ISA_SSE4_1) {\n+      if (TARGET_SSE4_1) {\n \t  // enable sse4.1, implicitly enable sse3\n \t  implicitly_enable_feature(\"sse4.1\");\n       }\n \n-      if (TARGET_ISA_SSE4_2) {\n+      if (TARGET_SSE4_2) {\n \t  // enable sse4.2, implicitly enable sse4.1\n \t  implicitly_enable_feature(\"sse4.2\");\n       }\n \n-      if (TARGET_ISA_SSSE3) {\n+      if (TARGET_SSSE3) {\n \t  // enable ssse3, implicitly enable sse3\n \t  implicitly_enable_feature(\"ssse3\");\n       }\n \n-      if (TARGET_ISA_XSAVE) {\n+      if (TARGET_XSAVE) {\n \t  // enable xsave\n \t  implicitly_enable_feature(\"xsave\");\n       }\n \n-      if (TARGET_ISA_XSAVEC) {\n+      if (TARGET_XSAVEC) {\n \t  // enable xsavec\n \t  implicitly_enable_feature(\"xsavec\");\n       }\n \n-      if (TARGET_ISA_XSAVEOPT) {\n+      if (TARGET_XSAVEOPT) {\n \t  // enable xsaveopt\n \t  implicitly_enable_feature(\"xsaveopt\");\n       }\n \n-      if (TARGET_ISA_XSAVES) {\n+      if (TARGET_XSAVES) {\n \t  // enable xsaves\n \t  implicitly_enable_feature(\"xsaves\");\n       }"}]}