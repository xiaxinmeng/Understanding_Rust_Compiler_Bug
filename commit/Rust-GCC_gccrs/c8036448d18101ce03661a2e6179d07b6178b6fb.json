{"sha": "c8036448d18101ce03661a2e6179d07b6178b6fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwMzY0NDhkMTgxMDFjZTAzNjYxYTJlNjE3OWQwN2I2MTc4YjZmYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-05-19T18:20:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-19T18:20:47Z"}, "message": "re PR libstdc++/40184 (locale(const char* std_name) can create invalid facets for nonuniform locale)\n\n2009-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40184\n\t* include/bits/locale_classes.h (locale::facet::_S_lc_ctype_c_locale):\n\tDeclare...\n\t* config/locale/gnu/c_locale.cc: ... and define.\n\t* config/locale/generic/c_locale.cc: Define.\n\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n\tUse it.\n\t* testsuite/22_locale/locale/cons/40184.cc: New.\n\nFrom-SVN: r147714", "tree": {"sha": "e37754ec220e5fcdd3f4dc0df8225e328e423de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37754ec220e5fcdd3f4dc0df8225e328e423de0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8036448d18101ce03661a2e6179d07b6178b6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8036448d18101ce03661a2e6179d07b6178b6fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8036448d18101ce03661a2e6179d07b6178b6fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8036448d18101ce03661a2e6179d07b6178b6fb/comments", "author": null, "committer": null, "parents": [{"sha": "f3a83111278d2fe8a60e8fec8b1fbbeee69d6d31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a83111278d2fe8a60e8fec8b1fbbeee69d6d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a83111278d2fe8a60e8fec8b1fbbeee69d6d31"}], "stats": {"total": 136, "additions": 129, "deletions": 7}, "files": [{"sha": "03a1397f624c22877adf392c8c3b5f9925150ebb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -1,3 +1,14 @@\n+2009-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40184\n+\t* include/bits/locale_classes.h (locale::facet::_S_lc_ctype_c_locale):\n+\tDeclare...\n+\t* config/locale/gnu/c_locale.cc: ... and define.\n+\t* config/locale/generic/c_locale.cc: Define.\n+\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n+\tUse it.\n+\t* testsuite/22_locale/locale/cons/40184.cc: New.\n+\n 2009-05-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/40192"}, {"sha": "a79a970f23134af13c12e4f0d749ba2e515c1483", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -226,6 +226,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::facet::_S_clone_c_locale(__c_locale&)\n   { return __c_locale(); }\n \n+  __c_locale\n+  locale::facet::_S_lc_ctype_c_locale(__c_locale, const char*)\n+  { return __c_locale(); }\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}, {"sha": "4864d25cd342abbb6e74f88e4cc44786c0de74ba", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -133,10 +133,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \t// This named locale is not supported by the underlying OS.\n \t__throw_runtime_error(__N(\"locale::facet::_S_create_c_locale \"\n-\t\t\t      \"name not valid\"));\n+\t\t\t\t  \"name not valid\"));\n       }\n   }\n-  \n+\n   void\n   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n   {\n@@ -148,6 +148,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::facet::_S_clone_c_locale(__c_locale& __cloc)\n   { return __duplocale(__cloc); }\n \n+  __c_locale\n+  locale::facet::_S_lc_ctype_c_locale(__c_locale __cloc, const char* __s)\n+  {\n+    __c_locale __dup = __duplocale(__cloc);\n+    if (__dup == __c_locale(0))\n+      __throw_runtime_error(__N(\"locale::facet::_S_lc_ctype_c_locale \"\n+\t\t\t\t\"duplocale error\"));\n+    __c_locale __changed = __newlocale(LC_CTYPE_MASK, __s, __dup);\n+    if (__changed == __c_locale(0))\n+      {\n+\t__freelocale(__dup);\n+\t__throw_runtime_error(__N(\"locale::facet::_S_lc_ctype_c_locale \"\n+\t\t\t\t  \"newlocale error\"));\n+      }\n+    return __changed;\n+  }\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}, {"sha": "7ae9c53bc6acbb38007820a4360963a0271b3fc6", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -381,6 +381,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static void\n     _S_destroy_c_locale(__c_locale& __cloc);\n \n+    static __c_locale\n+    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);\n+\n     // Returns data from the underlying \"C\" library data for the\n     // classic locale.\n     static __c_locale"}, {"sha": "98f6020533c272a32632a1e19fd84a042c22aa47", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -180,6 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // see if the given name is valid.\n     __c_locale __cloc;\n     locale::facet::_S_create_c_locale(__cloc, __s);\n+    __c_locale __clocm = __cloc;\n \n     __try\n       {\n@@ -194,15 +195,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_names[__k] = 0;\n \n \t// Name the categories.\n+\tconst char* __smon = __s;\n \tconst size_t __len = std::strlen(__s);\n \tif (!std::memchr(__s, ';', __len))\n \t  {\n \t    _M_names[0] = new char[__len + 1];\n-\t    std::memcpy(_M_names[0], __s, __len + 1);\t    \n+\t    std::memcpy(_M_names[0], __s, __len + 1);\n \t  }\n \telse\n \t  {\n \t    const char* __end = __s;\n+\t    bool __found_ctype = false;\n+\t    bool __found_monetary = false;\n+\t    size_t __ci = 0, __mi = 0;\n \t    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n \t      {\n \t\tconst char* __beg = std::strchr(__end + 1, '=') + 1;\n@@ -212,6 +217,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t_M_names[__i] = new char[__end - __beg + 1];\n \t\tstd::memcpy(_M_names[__i], __beg, __end - __beg);\n \t\t_M_names[__i][__end - __beg] = '\\0';\n+\t\tif (!__found_ctype\n+\t\t    && *(__beg - 2) == 'E' && *(__beg - 3) == 'P')\n+\t\t  {\n+\t\t    __found_ctype = true;\n+\t\t    __ci = __i;\n+\t\t  }\n+\t\telse if (!__found_monetary && *(__beg - 2) == 'Y')\n+\t\t  {\n+\t\t    __found_monetary = true;\n+\t\t    __mi = __i;\n+\t\t  }\n+\t      }\n+\n+\t    if (std::strcmp(_M_names[__ci], _M_names[__mi]))\n+\t      {\n+\t\t__smon = _M_names[__mi];\n+\t\t__clocm = locale::facet::_S_lc_ctype_c_locale(__cloc,\n+\t\t\t\t\t\t\t      __smon);\n \t      }\n \t  }\n  \n@@ -222,8 +245,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_M_init_facet(new num_get<char>);\n \t_M_init_facet(new num_put<char>);\n \t_M_init_facet(new std::collate<char>(__cloc));\n-\t_M_init_facet(new moneypunct<char, false>(__cloc, __s));\n-\t_M_init_facet(new moneypunct<char, true>(__cloc, __s));\n+\t_M_init_facet(new moneypunct<char, false>(__cloc, 0));\n+\t_M_init_facet(new moneypunct<char, true>(__cloc, 0));\n \t_M_init_facet(new money_get<char>);\n \t_M_init_facet(new money_put<char>);\n \t_M_init_facet(new __timepunct<char>(__cloc, __s));\n@@ -238,8 +261,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_M_init_facet(new num_get<wchar_t>);\n \t_M_init_facet(new num_put<wchar_t>);\n \t_M_init_facet(new std::collate<wchar_t>(__cloc));\n-\t_M_init_facet(new moneypunct<wchar_t, false>(__cloc, __s));\n-\t_M_init_facet(new moneypunct<wchar_t, true>(__cloc, __s));\n+\t_M_init_facet(new moneypunct<wchar_t, false>(__clocm, __smon));\n+\t_M_init_facet(new moneypunct<wchar_t, true>(__clocm, __smon));\n \t_M_init_facet(new money_get<wchar_t>);\n \t_M_init_facet(new money_put<wchar_t>);\n \t_M_init_facet(new __timepunct<wchar_t>(__cloc, __s));\n@@ -248,10 +271,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n #endif\t  \n \tlocale::facet::_S_destroy_c_locale(__cloc);\n+\tif (__clocm != __cloc)\n+\t  locale::facet::_S_destroy_c_locale(__clocm);\n       }\n     __catch(...)\n       {\n \tlocale::facet::_S_destroy_c_locale(__cloc);\n+\tif (__clocm != __cloc)\n+\t  locale::facet::_S_destroy_c_locale(__clocm);\n \tthis->~_Impl();\n \t__throw_exception_again;\n       }\t"}, {"sha": "d7e30eba1c3c0d824a705b64221adbed65864ad7", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/40184.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F40184.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8036448d18101ce03661a2e6179d07b6178b6fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F40184.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F40184.cc?ref=c8036448d18101ce03661a2e6179d07b6178b6fb", "patch": "@@ -0,0 +1,60 @@\n+// { dg-require-namedlocale \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/40184\n+void test01()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale locf(locale(\"C\"), \"ja_JP.eucjp\", locale::monetary);\n+\n+  const moneypunct<wchar_t, false>& mpf = \n+    use_facet<moneypunct<wchar_t, false> >(locf);\n+\n+  locale locf_copy(locf.name().c_str());\n+  const moneypunct<wchar_t, false>& mpf_copy = \n+    use_facet<moneypunct<wchar_t, false> >(locf_copy);\n+\n+  VERIFY( mpf.curr_symbol() == mpf_copy.curr_symbol() );\n+\n+  locale loct(locale(\"C\"), \"ja_JP.eucjp\", locale::monetary);\n+\n+  const moneypunct<wchar_t, true>& mpt = \n+    use_facet<moneypunct<wchar_t, true> >(loct);\n+\n+  locale loct_copy(loct.name().c_str());\n+  const moneypunct<wchar_t, true>& mpt_copy = \n+    use_facet<moneypunct<wchar_t, true> >(loct_copy);\n+\n+  VERIFY( mpt.curr_symbol() == mpt_copy.curr_symbol() );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}