{"sha": "725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1ZmQ0NTRhZTdlNWE0MDM1NmQ1YjI3NjYwYjc3ZDFiYjZjNTVlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-29T16:59:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-29T16:59:31Z"}, "message": "i386.md (prefix_data16, prefix_rep): Set to 0 for TYPE_SSE{MULADD,4ARG,IADD1,CVT1} by default.\n\n\t* config/i386/i386.md (prefix_data16, prefix_rep): Set to 0 for\n\tTYPE_SSE{MULADD,4ARG,IADD1,CVT1} by default.\n\t(prefix_rex): For UNIT_MMX don't imply the prefix by default\n\tif MODE_DI.\n\t(prefix_extra): Default to 2 for TYPE_SSE{MULADD,4ARG} and\n\tto 1 for TYPE_SSE{IADD1,CVT1}.\n\t(prefix_vex_imm8): Removed.\n\t(length_vex): Only pass 1 as second argument to\n\tix86_attr_length_vex_default if prefix_extra is 0.\n\t(modrm): For TYPE_INCDEC only set to 0 if not TARGET_64BIT.\n\t(length): For prefix vex computation use length_immediate\n\tattribute instead of prefix_vex_imm8.\n\t(cmpqi_ext_3_insn, cmpqi_ext_3_insn_rex64,\n\taddqi_ext_1, addqi_ext_1_rex64, *testqi_ext_0, andqi_ext_0,\n\t*andqi_ext_0_cc, *iorqi_ext_0, *xorqi_ext_0, *xorqi_cc_ext_1,\n\t*xorqi_cc_ext_1_rex64): Override modrm attribute to 1.\n\t(extendsidi2_rex64, extendhidi2, extendqidi2, extendhisi2,\n\t*extendhisi2_zext, extendqihi2, extendqisi2, *extendqisi2_zext): Emit\n\ta space in between the operands.\n\t(*anddi_1_rex64, *andsi_1): Likewise.  Override prefix_rex to 1\n\tif one operand is 0xff and the other one si, di, bp or sp.\n\t(*andhi_1): Override prefix_rex to 1 if one operand is 0xff and the\n\tother one si, di, bp or sp.\n\t(*btsq, *btrq, *btcq, *btdi_rex64, *btsi): Add mode attribute.\n\t(*ffssi_1, *ffsdi_1, ctzsi2, ctzdi2): Add\n\ttype and mode attributes.\n\t(*bsr, *bsr_rex64, *bsrhi): Add type attribute.\n\t(*cmpfp_i_mixed, *cmpfp_iu_mixed): For TYPE_SSECOMI, clear\n\tprefix_rep attribute and set prefix_data16 attribute iff MODE_DF.\n\t(*cmpfp_i_sse, *cmpfp_iu_sse): Clear prefix_rep attribute and set\n\tprefix_data16 attribute iff MODE_DF.\n\t(*movsi_1): For TYPE_SSEMOV MODE_SI set prefix_data16 attribute.\n\t(fix_trunc<mode>di_sse): Set prefix_rex attribute.\n\t(*adddi_4_rex64, *addsi_4): Use const128_operand instead of\n\tconstm128_operand in length_immediate computation.\n\t(*addhi_4): Likewise.  Fix mode attribute to MODE_HI.\n\t(anddi_1_rex64): Use movzbl/movzwl instead of movzbq/movzwq.\n\t(*avx_ashlti3, sse2_ashlti3, *avx_lshrti3, sse2_lshrti3): Set\n\tlength_immediate attribute to 1.\n\t(x86_fnstsw_1, x86_fnstcw_1, x86_fldcw_1): Fix length attribute.\n\t(*movdi_1_rex64): Override prefix_rex or prefix_data16 attributes\n\tfor certain alternatives.\n\t(*movdf_nointeger, *movdf_integer_rex64, *movdf_integer): Override\n\tprefix_data16 attribute if MODE_V1DF.\n\t(*avx_setcc<mode>, *sse_setcc<mode>, *sse5_setcc<mode>): Set\n\tlength_immediate to 1.\n\t(set_got_rex64, set_rip_rex64): Remove length attribute, set\n\tlength_address to 4, set mode attribute to MODE_DI.\n\t(set_got_offset_rex64): Likewise.  Set length_immediate to 0.\n\t(fxam<mode>2_i387): Set length attribute to 4.\n\t(*prefetch_sse, *prefetch_sse_rex, *prefetch_3dnow,\n\t*prefetch_3dnow_rex): Override length_address attribute.\n\t(sse4_2_crc32<mode>): Override prefix_data16 and prefix_rex\n\tattributes.\n\t* config/i386/predicates.md (ext_QIreg_nomode_operand): New predicate.\n\t(constm128_operand): Removed.\n\t* config/i386/i386.c (memory_address_length): For\n\tdisp && !index && !base in 64-bit mode account for SIB byte if\n\tprint_operand_address can't optimize disp32 into disp32(%rip)\n\tand UNSPEC doesn't imply (%rip) addressing.  Add 1 to length\n\tfor fs: or gs: segment.\n\t(ix86_attr_length_immediate_default): When checking if shortform\n\tis possible, truncate immediate to the length of the non-shortened\n\timmediate.\n\t(ix86_attr_length_address_default): Ignore MEM_P operands\n\twith X constraint.\n\t(ix86_attr_length_vex_default): Only check for DImode on\n\tGENERAL_REG_P operands.\n\t* config/i386/sse.md (<sse>_comi, <sse>_ucomi): Clear\n\tprefix_rep attribute, set prefix_data16 attribute iff MODE_DF.\n\t(sse_cvttps2pi): Clear prefix_rep attribute.\n\t(sse2_cvttps2dq, *sse2_cvtpd2dq, sse2_cvtps2pd): Clear prefix_data16\n\tattribute.\n\t(*sse2_cvttpd2dq): Don't clear prefix_rep attribute.\n\t(*avx_ashr<mode>3, ashr<mode>3, *avx_lshr<mode>3, lshr<mode>3,\n\t*avx_ashl<mode>3, ashl<mode>3): Set length_immediate attribute to 1\n\tiff operand 2 is const_int_operand.\n\t(*vec_dupv4si, avx_shufpd256_1, *avx_shufpd_<mode>,\n\tsse2_shufpd_<mode>): Set length_immediate attribute to 1.\n\t(sse2_pshufd_1): Likewise.  Set prefix attribute to maybe_vex\n\tinstead of vex.\n\t(sse2_pshuflw_1, sse2_pshufhw_1): Set length_immediate to 1 and clear\n\tprefix_data16.\n\t(sse2_unpckhpd, sse2_unpcklpd, sse2_storehpd, *vec_concatv2df): Set\n\tprefix_data16 attribute for movlpd and movhpd instructions.\n\t(sse2_loadhpd, sse2_loadlpd, sse2_movsd): Likewise.  Override\n\tlength_immediate for shufpd instruction.\n\t(sse2_movntsi, sse3_lddqu): Clear prefix_data16 attribute.\n\t(avx_cmpp<avxmodesuffixf2c><mode>3,\n\tavx_cmps<ssemodesuffixf2c><mode>3, *avx_maskcmp<mode>3,\n\t<sse>_maskcmp<mode>3, <sse>_vmmaskcmp<mode>3,\n\tavx_shufps256_1, *avx_shufps_<mode>, sse_shufps_<mode>,\n\t*vec_dupv4sf_avx, *vec_dupv4sf): Set\n\tlength_immediate attribute to 1.\n\t(*avx_cvtsi2ssq, *avx_cvtsi2sdq): Set length_vex attribute to 4.\n\t(sse_cvtsi2ssq, sse2_cvtsi2sdq): Set prefix_rex attribute to 1.\n\t(sse2_cvtpi2pd, sse_loadlps, sse2_storelpd): Override\n\tprefix_data16 attribute for the first alternative to 1.\n\t(*avx_loadlps): Override length_immediate for the first alternative.\n\t(*vec_concatv2sf_avx): Override length_immediate and prefix_extra\n\tattributes for second alternative.\n\t(*vec_concatv2sf_sse4_1): Override length_immediate and\n\tprefix_data16 attributes for second alternative.\n\t(*vec_setv4sf_avx, *avx_insertps, vec_extract_lo_<mode>,\n\tvec_extract_hi_<mode>, vec_extract_lo_v16hi,\n\tvec_extract_hi_v16hi, vec_extract_lo_v32qi,\n\tvec_extract_hi_v32qi): Set prefix_extra and length_immediate to 1.\n\t(*vec_setv4sf_sse4_1, sse4_1_insertps, *sse4_1_extractps): Set\n\tprefix_data16 and length_immediate to 1.\n\t(*avx_mulv2siv2di3, *avx_mulv4si3, sse4_2_gtv2di3): Set prefix_extra\n\tto 1.\n\t(*avx_<code><mode>3, *avx_eq<mode>3, *avx_gt<mode>3): Set\n\tprefix_extra attribute for variants that don't have 0f prefix\n\talone.\n\t(*avx_pinsr<ssevecsize>): Likewise.  Set length_immediate to 1.\n\t(*sse4_1_pinsrb, *sse2_pinsrw, *sse4_1_pinsrd, *sse4_1_pextrb,\n\t*sse4_1_pextrb_memory, *sse2_pextrw, *sse4_1_pextrw_memory,\n\t*sse4_1_pextrd): Set length_immediate to 1.\n\t(*sse4_1_pinsrd): Likewise.  Set prefix_extra to 1.\n\t(*sse4_1_pinsrq, *sse4_1_pextrq): Set prefix_rex and length_immediate\n\tto 1.\n\t(*vec_extractv2di_1_rex64_avx, *vec_extractv2di_1_rex64,\n\t*vec_extractv2di_1_avx, *vec_extractv2di_1_sse2): Override\n\tlength_immediate to 1 for second alternative.\n\t(*vec_concatv2si_avx, *vec_concatv2di_rex64_avx): Override\n\tprefix_extra and length_immediate attributes for the first\n\talternative.\n\t(vec_concatv2si_sse4_1): Override length_immediate to 1 for the\n\tfirst alternative.\n\t(*vec_concatv2di_rex64_sse4_1): Likewise.  Override prefix_rex\n\tto 1 for the first and third alternative.\n\t(*vec_concatv2di_rex64_sse): Override prefix_rex to 1 for the second\n\talternative.\n\t(*sse2_maskmovdqu, *sse2_maskmovdqu_rex64): Override length_vex\n\tattribute.\n\t(*sse_sfence, sse2_mfence, sse2_lfence): Override length_address\n\tattribute to 0.\n\t(*avx_phaddwv8hi3, *avx_phadddv4si3, *avx_phaddswv8hi3,\n\t*avx_phsubwv8hi3, *avx_phsubdv4si3, *avx_phsubswv8hi,\n\t*avx_pmaddubsw128, *avx_pmulhrswv8hi3, *avx_pshufbv16qi3,\n\t*avx_psign<mode>3): Set prefix_extra attribute to 1.\n\t(ssse3_phaddwv4hi3, ssse3_phadddv2si3, ssse3_phaddswv4hi3,\n\tssse3_phsubwv4hi3, ssse3_phsubdv2si3, ssse3_phsubswv4hi3,\n\tssse3_pmaddubsw, *ssse3_pmulhrswv4hi, ssse3_pshufbv8qi3,\n\tssse3_psign<mode>3): Override prefix_rex attribute.\n\t(*avx_palignrti): Override prefix_extra and length_immediate\n\tto 1.\n\t(ssse3_palignrti): Override length_immediate to 1.\n\t(ssse3_palignrdi): Override length_immediate to 1, override\n\tprefix_rex attribute.\n\t(abs<mode>2): Override prefix_rep to 0, override prefix_rex\n\tattribute.\n\t(sse4a_extrqi): Override length_immediate to 2.\n\t(sse4a_insertqi): Likewise.  Override prefix_data16 to 0.\n\t(sse4a_insertq): Override prefix_data16 to 0.\n\t(avx_blendp<avxmodesuffixf2c><avxmodesuffix>,\n\tavx_blendvp<avxmodesuffixf2c><avxmodesuffix>,\n\tavx_dpp<avxmodesuffixf2c><avxmodesuffix>, *avx_mpsadbw,\n\t*avx_pblendvb, *avx_pblendw, avx_roundp<avxmodesuffixf2c>256,\n\tavx_rounds<avxmodesuffixf2c>256): Override prefix_extra\n\tand length_immediate to 1.\n\t(sse4_1_blendp<ssemodesuffixf2c>, sse4_1_dpp<ssemodesuffixf2c>,\n\tsse4_2_pcmpestr, sse4_2_pcmpestri, sse4_2_pcmpestrm,\n\tsse4_2_pcmpestr_cconly, sse4_2_pcmpistr, sse4_2_pcmpistri,\n\tsse4_2_pcmpistrm, sse4_2_pcmpistr_cconly): Override prefix_data16\n\tand length_immediate to 1.\n\t(sse4_1_blendvp<ssemodesuffixf2c>): Override prefix_data16 to 1.\n\t(sse4_1_mpsadbw, sse4_1_pblendw): Override length_immediate to 1.\n\t(*avx_packusdw, avx_vtestp<avxmodesuffixf2c><avxmodesuffix>,\n\tavx_ptest256): Override prefix_extra to 1.\n\t(sse4_1_roundp<ssemodesuffixf2c>, sse4_1_rounds<ssemodesuffixf2c>):\n\tOverride prefix_data16 and length_immediate to 1.\n\t(sse5_pperm_zero_v16qi_v8hi, sse5_pperm_sign_v16qi_v8hi,\n\tsse5_pperm_zero_v8hi_v4si, sse5_pperm_sign_v8hi_v4si,\n\tsse5_pperm_zero_v4si_v2di, sse5_pperm_sign_v4si_v2di,\n\tsse5_vrotl<mode>3, sse5_ashl<mode>3, sse5_lshl<mode>3): Override\n\tprefix_data16 to 0 and prefix_extra to 2.\n\t(sse5_rotl<mode>3, sse5_rotr<mode>3): Override length_immediate to 1.\n\t(sse5_frcz<mode>2, sse5_vmfrcz<mode>2): Don't override prefix_extra\n\tattribute.\n\t(*sse5_vmmaskcmp<mode>3, sse5_com_tf<mode>3,\n\tsse5_maskcmp<mode>3, sse5_maskcmp<mode>3, sse5_maskcmp_uns<mode>3):\n\tOverride prefix_data16 and prefix_rep to 0, length_immediate to 1\n\tand prefix_extra to 2.\n\t(sse5_maskcmp_uns2<mode>3, sse5_pcom_tf<mode>3): Override\n\tprefix_data16 to 0, length_immediate to 1 and prefix_extra to 2.\n\t(*avx_aesenc, *avx_aesenclast, *avx_aesdec, *avx_aesdeclast,\n\tavx_vpermilvar<mode>3,\n\tavx_vbroadcasts<avxmodesuffixf2c><avxmodesuffix>,\n\tavx_vbroadcastss256, avx_vbroadcastf128_p<avxmodesuffixf2c>256,\n\tavx_maskloadp<avxmodesuffixf2c><avxmodesuffix>,\n\tavx_maskstorep<avxmodesuffixf2c><avxmodesuffix>):\n\tOverride prefix_extra to 1.\n\t(aeskeygenassist, pclmulqdq): Override length_immediate to 1.\n\t(*vpclmulqdq, avx_vpermil<mode>, avx_vperm2f128<mode>3,\n\tvec_set_lo_<mode>, vec_set_hi_<mode>, vec_set_lo_v16hi,\n\tvec_set_hi_v16hi, vec_set_lo_v32qi, vec_set_hi_v32qi): Override\n\tprefix_extra and length_immediate to 1.\n\t(*avx_vzeroall, avx_vzeroupper, avx_vzeroupper_rex64): Override\n\tmodrm to 0.\n\t(*vec_concat<mode>_avx): Override prefix_extra and length_immediate\n\tto 1 for the first alternative.\n\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Override\n\tprefix_rep, prefix_data16 and/or prefix_rex attributes in certain\n\tcases.\n\t(*mov<mode>_internal_avx, *movv2sf_internal_rex64,\n\t*movv2sf_internal_avx, *movv2sf_internal): Override\n\tprefix_rep attribute for certain alternatives.\n\t(*mov<mode>_internal): Override prefix_rep or prefix_data16\n\tattributes for certain alternatives.\n\t(*movv2sf_internal_rex64_avx): Override prefix_rep and length_vex\n\tattributes for certain alternatives.\n\t(*mmx_addv2sf3, *mmx_subv2sf3, *mmx_mulv2sf3,\n\t*mmx_<code>v2sf3_finite, *mmx_<code>v2sf3, mmx_rcpv2sf2,\n\tmmx_rcpit1v2sf3, mmx_rcpit2v2sf3, mmx_rsqrtv2sf2, mmx_rsqit1v2sf3,\n\tmmx_haddv2sf3, mmx_hsubv2sf3, mmx_addsubv2sf3,\n\t*mmx_eqv2sf3, mmx_gtv2sf3, mmx_gev2sf3, mmx_pf2id, mmx_pf2iw,\n\tmmx_pi2fw, mmx_floatv2si2, mmx_pswapdv2sf2, *mmx_pmulhrwv4hi3,\n\tmmx_pswapdv2si2): Set prefix_extra attribute to 1.\n\t(mmx_ashr<mode>3, mmx_lshr<mode>3, mmx_ashl<mode>3): Set\n\tlength_immediate to 1 if operand 2 is const_int_operand.\n\t(*mmx_pinsrw, mmx_pextrw, mmx_pshufw_1, *vec_dupv4hi,\n\t*vec_extractv2si_1): Set length_immediate\n\tattribute to 1.\n\t(*mmx_uavgv8qi3): Override prefix_extra attribute to 1 if\n\tusing old 3DNOW insn rather than SSE/3DNOW_A.\n\t(mmx_emms, mmx_femms): Clear modrm attribute.\n\nFrom-SVN: r147981", "tree": {"sha": "cc63af3f36817b4432e5e16c5a7de2ceaa8c3d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc63af3f36817b4432e5e16c5a7de2ceaa8c3d85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0674b9d090bdf37dd6a9d6ce136048996de2bf94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0674b9d090bdf37dd6a9d6ce136048996de2bf94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0674b9d090bdf37dd6a9d6ce136048996de2bf94"}], "stats": {"total": 988, "additions": 902, "deletions": 86}, "files": [{"sha": "680e810ba17c756a56ac732a62a52cf30b27d3a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -1,3 +1,233 @@\n+2009-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (prefix_data16, prefix_rep): Set to 0 for\n+\tTYPE_SSE{MULADD,4ARG,IADD1,CVT1} by default.\n+\t(prefix_rex): For UNIT_MMX don't imply the prefix by default\n+\tif MODE_DI.\n+\t(prefix_extra): Default to 2 for TYPE_SSE{MULADD,4ARG} and\n+\tto 1 for TYPE_SSE{IADD1,CVT1}.\n+\t(prefix_vex_imm8): Removed.\n+\t(length_vex): Only pass 1 as second argument to\n+\tix86_attr_length_vex_default if prefix_extra is 0.\n+\t(modrm): For TYPE_INCDEC only set to 0 if not TARGET_64BIT.\n+\t(length): For prefix vex computation use length_immediate\n+\tattribute instead of prefix_vex_imm8.\n+\t(cmpqi_ext_3_insn, cmpqi_ext_3_insn_rex64,\n+\taddqi_ext_1, addqi_ext_1_rex64, *testqi_ext_0, andqi_ext_0,\n+\t*andqi_ext_0_cc, *iorqi_ext_0, *xorqi_ext_0, *xorqi_cc_ext_1,\n+\t*xorqi_cc_ext_1_rex64): Override modrm attribute to 1.\n+\t(extendsidi2_rex64, extendhidi2, extendqidi2, extendhisi2,\n+\t*extendhisi2_zext, extendqihi2, extendqisi2, *extendqisi2_zext): Emit\n+\ta space in between the operands.\n+\t(*anddi_1_rex64, *andsi_1): Likewise.  Override prefix_rex to 1\n+\tif one operand is 0xff and the other one si, di, bp or sp.\n+\t(*andhi_1): Override prefix_rex to 1 if one operand is 0xff and the\n+\tother one si, di, bp or sp.\n+\t(*btsq, *btrq, *btcq, *btdi_rex64, *btsi): Add mode attribute.\n+\t(*ffssi_1, *ffsdi_1, ctzsi2, ctzdi2): Add\n+\ttype and mode attributes.\n+\t(*bsr, *bsr_rex64, *bsrhi): Add type attribute.\n+\t(*cmpfp_i_mixed, *cmpfp_iu_mixed): For TYPE_SSECOMI, clear\n+\tprefix_rep attribute and set prefix_data16 attribute iff MODE_DF.\n+\t(*cmpfp_i_sse, *cmpfp_iu_sse): Clear prefix_rep attribute and set\n+\tprefix_data16 attribute iff MODE_DF.\n+\t(*movsi_1): For TYPE_SSEMOV MODE_SI set prefix_data16 attribute.\n+\t(fix_trunc<mode>di_sse): Set prefix_rex attribute.\n+\t(*adddi_4_rex64, *addsi_4): Use const128_operand instead of\n+\tconstm128_operand in length_immediate computation.\n+\t(*addhi_4): Likewise.  Fix mode attribute to MODE_HI.\n+\t(anddi_1_rex64): Use movzbl/movzwl instead of movzbq/movzwq.\n+\t(*avx_ashlti3, sse2_ashlti3, *avx_lshrti3, sse2_lshrti3): Set\n+\tlength_immediate attribute to 1.\n+\t(x86_fnstsw_1, x86_fnstcw_1, x86_fldcw_1): Fix length attribute.\n+\t(*movdi_1_rex64): Override prefix_rex or prefix_data16 attributes\n+\tfor certain alternatives.\n+\t(*movdf_nointeger, *movdf_integer_rex64, *movdf_integer): Override\n+\tprefix_data16 attribute if MODE_V1DF.\n+\t(*avx_setcc<mode>, *sse_setcc<mode>, *sse5_setcc<mode>): Set\n+\tlength_immediate to 1.\n+\t(set_got_rex64, set_rip_rex64): Remove length attribute, set\n+\tlength_address to 4, set mode attribute to MODE_DI.\n+\t(set_got_offset_rex64): Likewise.  Set length_immediate to 0.\n+\t(fxam<mode>2_i387): Set length attribute to 4.\n+\t(*prefetch_sse, *prefetch_sse_rex, *prefetch_3dnow,\n+\t*prefetch_3dnow_rex): Override length_address attribute.\n+\t(sse4_2_crc32<mode>): Override prefix_data16 and prefix_rex\n+\tattributes.\n+\t* config/i386/predicates.md (ext_QIreg_nomode_operand): New predicate.\n+\t(constm128_operand): Removed.\n+\t* config/i386/i386.c (memory_address_length): For\n+\tdisp && !index && !base in 64-bit mode account for SIB byte if\n+\tprint_operand_address can't optimize disp32 into disp32(%rip)\n+\tand UNSPEC doesn't imply (%rip) addressing.  Add 1 to length\n+\tfor fs: or gs: segment.\n+\t(ix86_attr_length_immediate_default): When checking if shortform\n+\tis possible, truncate immediate to the length of the non-shortened\n+\timmediate.\n+\t(ix86_attr_length_address_default): Ignore MEM_P operands\n+\twith X constraint.\n+\t(ix86_attr_length_vex_default): Only check for DImode on\n+\tGENERAL_REG_P operands.\n+\t* config/i386/sse.md (<sse>_comi, <sse>_ucomi): Clear\n+\tprefix_rep attribute, set prefix_data16 attribute iff MODE_DF.\n+\t(sse_cvttps2pi): Clear prefix_rep attribute.\n+\t(sse2_cvttps2dq, *sse2_cvtpd2dq, sse2_cvtps2pd): Clear prefix_data16\n+\tattribute.\n+\t(*sse2_cvttpd2dq): Don't clear prefix_rep attribute.\n+\t(*avx_ashr<mode>3, ashr<mode>3, *avx_lshr<mode>3, lshr<mode>3,\n+\t*avx_ashl<mode>3, ashl<mode>3): Set length_immediate attribute to 1\n+\tiff operand 2 is const_int_operand.\n+\t(*vec_dupv4si, avx_shufpd256_1, *avx_shufpd_<mode>,\n+\tsse2_shufpd_<mode>): Set length_immediate attribute to 1.\n+\t(sse2_pshufd_1): Likewise.  Set prefix attribute to maybe_vex\n+\tinstead of vex.\n+\t(sse2_pshuflw_1, sse2_pshufhw_1): Set length_immediate to 1 and clear\n+\tprefix_data16.\n+\t(sse2_unpckhpd, sse2_unpcklpd, sse2_storehpd, *vec_concatv2df): Set\n+\tprefix_data16 attribute for movlpd and movhpd instructions.\n+\t(sse2_loadhpd, sse2_loadlpd, sse2_movsd): Likewise.  Override\n+\tlength_immediate for shufpd instruction.\n+\t(sse2_movntsi, sse3_lddqu): Clear prefix_data16 attribute.\n+\t(avx_cmpp<avxmodesuffixf2c><mode>3,\n+\tavx_cmps<ssemodesuffixf2c><mode>3, *avx_maskcmp<mode>3,\n+\t<sse>_maskcmp<mode>3, <sse>_vmmaskcmp<mode>3,\n+\tavx_shufps256_1, *avx_shufps_<mode>, sse_shufps_<mode>,\n+\t*vec_dupv4sf_avx, *vec_dupv4sf): Set\n+\tlength_immediate attribute to 1.\n+\t(*avx_cvtsi2ssq, *avx_cvtsi2sdq): Set length_vex attribute to 4.\n+\t(sse_cvtsi2ssq, sse2_cvtsi2sdq): Set prefix_rex attribute to 1.\n+\t(sse2_cvtpi2pd, sse_loadlps, sse2_storelpd): Override\n+\tprefix_data16 attribute for the first alternative to 1.\n+\t(*avx_loadlps): Override length_immediate for the first alternative.\n+\t(*vec_concatv2sf_avx): Override length_immediate and prefix_extra\n+\tattributes for second alternative.\n+\t(*vec_concatv2sf_sse4_1): Override length_immediate and\n+\tprefix_data16 attributes for second alternative.\n+\t(*vec_setv4sf_avx, *avx_insertps, vec_extract_lo_<mode>,\n+\tvec_extract_hi_<mode>, vec_extract_lo_v16hi,\n+\tvec_extract_hi_v16hi, vec_extract_lo_v32qi,\n+\tvec_extract_hi_v32qi): Set prefix_extra and length_immediate to 1.\n+\t(*vec_setv4sf_sse4_1, sse4_1_insertps, *sse4_1_extractps): Set\n+\tprefix_data16 and length_immediate to 1.\n+\t(*avx_mulv2siv2di3, *avx_mulv4si3, sse4_2_gtv2di3): Set prefix_extra\n+\tto 1.\n+\t(*avx_<code><mode>3, *avx_eq<mode>3, *avx_gt<mode>3): Set\n+\tprefix_extra attribute for variants that don't have 0f prefix\n+\talone.\n+\t(*avx_pinsr<ssevecsize>): Likewise.  Set length_immediate to 1.\n+\t(*sse4_1_pinsrb, *sse2_pinsrw, *sse4_1_pinsrd, *sse4_1_pextrb,\n+\t*sse4_1_pextrb_memory, *sse2_pextrw, *sse4_1_pextrw_memory,\n+\t*sse4_1_pextrd): Set length_immediate to 1.\n+\t(*sse4_1_pinsrd): Likewise.  Set prefix_extra to 1.\n+\t(*sse4_1_pinsrq, *sse4_1_pextrq): Set prefix_rex and length_immediate\n+\tto 1.\n+\t(*vec_extractv2di_1_rex64_avx, *vec_extractv2di_1_rex64,\n+\t*vec_extractv2di_1_avx, *vec_extractv2di_1_sse2): Override\n+\tlength_immediate to 1 for second alternative.\n+\t(*vec_concatv2si_avx, *vec_concatv2di_rex64_avx): Override\n+\tprefix_extra and length_immediate attributes for the first\n+\talternative.\n+\t(vec_concatv2si_sse4_1): Override length_immediate to 1 for the\n+\tfirst alternative.\n+\t(*vec_concatv2di_rex64_sse4_1): Likewise.  Override prefix_rex\n+\tto 1 for the first and third alternative.\n+\t(*vec_concatv2di_rex64_sse): Override prefix_rex to 1 for the second\n+\talternative.\n+\t(*sse2_maskmovdqu, *sse2_maskmovdqu_rex64): Override length_vex\n+\tattribute.\n+\t(*sse_sfence, sse2_mfence, sse2_lfence): Override length_address\n+\tattribute to 0.\n+\t(*avx_phaddwv8hi3, *avx_phadddv4si3, *avx_phaddswv8hi3,\n+\t*avx_phsubwv8hi3, *avx_phsubdv4si3, *avx_phsubswv8hi,\n+\t*avx_pmaddubsw128, *avx_pmulhrswv8hi3, *avx_pshufbv16qi3,\n+\t*avx_psign<mode>3): Set prefix_extra attribute to 1.\n+\t(ssse3_phaddwv4hi3, ssse3_phadddv2si3, ssse3_phaddswv4hi3,\n+\tssse3_phsubwv4hi3, ssse3_phsubdv2si3, ssse3_phsubswv4hi3,\n+\tssse3_pmaddubsw, *ssse3_pmulhrswv4hi, ssse3_pshufbv8qi3,\n+\tssse3_psign<mode>3): Override prefix_rex attribute.\n+\t(*avx_palignrti): Override prefix_extra and length_immediate\n+\tto 1.\n+\t(ssse3_palignrti): Override length_immediate to 1.\n+\t(ssse3_palignrdi): Override length_immediate to 1, override\n+\tprefix_rex attribute.\n+\t(abs<mode>2): Override prefix_rep to 0, override prefix_rex\n+\tattribute.\n+\t(sse4a_extrqi): Override length_immediate to 2.\n+\t(sse4a_insertqi): Likewise.  Override prefix_data16 to 0.\n+\t(sse4a_insertq): Override prefix_data16 to 0.\n+\t(avx_blendp<avxmodesuffixf2c><avxmodesuffix>,\n+\tavx_blendvp<avxmodesuffixf2c><avxmodesuffix>,\n+\tavx_dpp<avxmodesuffixf2c><avxmodesuffix>, *avx_mpsadbw,\n+\t*avx_pblendvb, *avx_pblendw, avx_roundp<avxmodesuffixf2c>256,\n+\tavx_rounds<avxmodesuffixf2c>256): Override prefix_extra\n+\tand length_immediate to 1.\n+\t(sse4_1_blendp<ssemodesuffixf2c>, sse4_1_dpp<ssemodesuffixf2c>,\n+\tsse4_2_pcmpestr, sse4_2_pcmpestri, sse4_2_pcmpestrm,\n+\tsse4_2_pcmpestr_cconly, sse4_2_pcmpistr, sse4_2_pcmpistri,\n+\tsse4_2_pcmpistrm, sse4_2_pcmpistr_cconly): Override prefix_data16\n+\tand length_immediate to 1.\n+\t(sse4_1_blendvp<ssemodesuffixf2c>): Override prefix_data16 to 1.\n+\t(sse4_1_mpsadbw, sse4_1_pblendw): Override length_immediate to 1.\n+\t(*avx_packusdw, avx_vtestp<avxmodesuffixf2c><avxmodesuffix>,\n+\tavx_ptest256): Override prefix_extra to 1.\n+\t(sse4_1_roundp<ssemodesuffixf2c>, sse4_1_rounds<ssemodesuffixf2c>):\n+\tOverride prefix_data16 and length_immediate to 1.\n+\t(sse5_pperm_zero_v16qi_v8hi, sse5_pperm_sign_v16qi_v8hi,\n+\tsse5_pperm_zero_v8hi_v4si, sse5_pperm_sign_v8hi_v4si,\n+\tsse5_pperm_zero_v4si_v2di, sse5_pperm_sign_v4si_v2di,\n+\tsse5_vrotl<mode>3, sse5_ashl<mode>3, sse5_lshl<mode>3): Override\n+\tprefix_data16 to 0 and prefix_extra to 2.\n+\t(sse5_rotl<mode>3, sse5_rotr<mode>3): Override length_immediate to 1.\n+\t(sse5_frcz<mode>2, sse5_vmfrcz<mode>2): Don't override prefix_extra\n+\tattribute.\n+\t(*sse5_vmmaskcmp<mode>3, sse5_com_tf<mode>3,\n+\tsse5_maskcmp<mode>3, sse5_maskcmp<mode>3, sse5_maskcmp_uns<mode>3):\n+\tOverride prefix_data16 and prefix_rep to 0, length_immediate to 1\n+\tand prefix_extra to 2.\n+\t(sse5_maskcmp_uns2<mode>3, sse5_pcom_tf<mode>3): Override\n+\tprefix_data16 to 0, length_immediate to 1 and prefix_extra to 2.\n+\t(*avx_aesenc, *avx_aesenclast, *avx_aesdec, *avx_aesdeclast,\n+\tavx_vpermilvar<mode>3,\n+\tavx_vbroadcasts<avxmodesuffixf2c><avxmodesuffix>,\n+\tavx_vbroadcastss256, avx_vbroadcastf128_p<avxmodesuffixf2c>256,\n+\tavx_maskloadp<avxmodesuffixf2c><avxmodesuffix>,\n+\tavx_maskstorep<avxmodesuffixf2c><avxmodesuffix>):\n+\tOverride prefix_extra to 1.\n+\t(aeskeygenassist, pclmulqdq): Override length_immediate to 1.\n+\t(*vpclmulqdq, avx_vpermil<mode>, avx_vperm2f128<mode>3,\n+\tvec_set_lo_<mode>, vec_set_hi_<mode>, vec_set_lo_v16hi,\n+\tvec_set_hi_v16hi, vec_set_lo_v32qi, vec_set_hi_v32qi): Override\n+\tprefix_extra and length_immediate to 1.\n+\t(*avx_vzeroall, avx_vzeroupper, avx_vzeroupper_rex64): Override\n+\tmodrm to 0.\n+\t(*vec_concat<mode>_avx): Override prefix_extra and length_immediate\n+\tto 1 for the first alternative.\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Override\n+\tprefix_rep, prefix_data16 and/or prefix_rex attributes in certain\n+\tcases.\n+\t(*mov<mode>_internal_avx, *movv2sf_internal_rex64,\n+\t*movv2sf_internal_avx, *movv2sf_internal): Override\n+\tprefix_rep attribute for certain alternatives.\n+\t(*mov<mode>_internal): Override prefix_rep or prefix_data16\n+\tattributes for certain alternatives.\n+\t(*movv2sf_internal_rex64_avx): Override prefix_rep and length_vex\n+\tattributes for certain alternatives.\n+\t(*mmx_addv2sf3, *mmx_subv2sf3, *mmx_mulv2sf3,\n+\t*mmx_<code>v2sf3_finite, *mmx_<code>v2sf3, mmx_rcpv2sf2,\n+\tmmx_rcpit1v2sf3, mmx_rcpit2v2sf3, mmx_rsqrtv2sf2, mmx_rsqit1v2sf3,\n+\tmmx_haddv2sf3, mmx_hsubv2sf3, mmx_addsubv2sf3,\n+\t*mmx_eqv2sf3, mmx_gtv2sf3, mmx_gev2sf3, mmx_pf2id, mmx_pf2iw,\n+\tmmx_pi2fw, mmx_floatv2si2, mmx_pswapdv2sf2, *mmx_pmulhrwv4hi3,\n+\tmmx_pswapdv2si2): Set prefix_extra attribute to 1.\n+\t(mmx_ashr<mode>3, mmx_lshr<mode>3, mmx_ashl<mode>3): Set\n+\tlength_immediate to 1 if operand 2 is const_int_operand.\n+\t(*mmx_pinsrw, mmx_pextrw, mmx_pshufw_1, *vec_dupv4hi,\n+\t*vec_extractv2si_1): Set length_immediate\n+\tattribute to 1.\n+\t(*mmx_uavgv8qi3): Override prefix_extra attribute to 1 if\n+\tusing old 3DNOW insn rather than SSE/3DNOW_A.\n+\t(mmx_emms, mmx_femms): Clear modrm attribute.\n+\n 2009-05-29  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-sra.c:  New implementation of SRA."}, {"sha": "26bb3006269a77710fe9f150d34c6f5009c917cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 93, "deletions": 24, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -19351,9 +19351,33 @@ memory_address_length (rtx addr)\n \tlen = 1;\n     }\n \n-  /* Direct Addressing.  */\n+  /* Direct Addressing.  In 64-bit mode mod 00 r/m 5\n+     is not disp32, but disp32(%rip), so for disp32\n+     SIB byte is needed, unless print_operand_address\n+     optimizes it into disp32(%rip) or (%rip) is implied\n+     by UNSPEC.  */\n   else if (disp && !base && !index)\n-    len = 4;\n+    {\n+      len = 4;\n+      if (TARGET_64BIT)\n+\t{\n+\t  rtx symbol = disp;\n+\n+\t  if (GET_CODE (disp) == CONST)\n+\t    symbol = XEXP (disp, 0);\n+\t  if (GET_CODE (symbol) == PLUS\n+\t      && CONST_INT_P (XEXP (symbol, 1)))\n+\t    symbol = XEXP (symbol, 0);\n+\n+\t  if (GET_CODE (symbol) != LABEL_REF\n+\t      && (GET_CODE (symbol) != SYMBOL_REF\n+\t\t  || SYMBOL_REF_TLS_MODEL (symbol) != 0)\n+\t      && (GET_CODE (symbol) != UNSPEC\n+\t\t  || (XINT (symbol, 1) != UNSPEC_GOTPCREL\n+\t\t      && XINT (symbol, 1) != UNSPEC_GOTNTPOFF)))\n+\t    len += 1;\n+\t}\n+    }\n \n   else\n     {\n@@ -19368,7 +19392,7 @@ memory_address_length (rtx addr)\n       /* ebp always wants a displacement.  Similarly r13.  */\n       else if (REG_P (base)\n \t       && (REGNO (base) == BP_REG || REGNO (base) == R13_REG))\n-        len = 1;\n+\tlen = 1;\n \n       /* An index requires the two-byte modrm form....  */\n       if (index\n@@ -19380,6 +19404,16 @@ memory_address_length (rtx addr)\n \tlen += 1;\n     }\n \n+  switch (parts.seg)\n+    {\n+    case SEG_FS:\n+    case SEG_GS:\n+      len += 1;\n+      break;\n+    default:\n+      break;\n+    }\n+\n   return len;\n }\n \n@@ -19394,30 +19428,50 @@ ix86_attr_length_immediate_default (rtx insn, int shortform)\n   for (i = recog_data.n_operands - 1; i >= 0; --i)\n     if (CONSTANT_P (recog_data.operand[i]))\n       {\n+        enum attr_mode mode = get_attr_mode (insn);\n+\n \tgcc_assert (!len);\n-\tif (shortform && satisfies_constraint_K (recog_data.operand[i]))\n-\t  len = 1;\n-\telse\n+\tif (shortform && CONST_INT_P (recog_data.operand[i]))\n \t  {\n-\t    switch (get_attr_mode (insn))\n+\t    HOST_WIDE_INT ival = INTVAL (recog_data.operand[i]);\n+\t    switch (mode)\n \t      {\n-\t\tcase MODE_QI:\n-\t\t  len+=1;\n-\t\t  break;\n-\t\tcase MODE_HI:\n-\t\t  len+=2;\n-\t\t  break;\n-\t\tcase MODE_SI:\n-\t\t  len+=4;\n-\t\t  break;\n-\t\t/* Immediates for DImode instructions are encoded as 32bit sign extended values.  */\n-\t\tcase MODE_DI:\n-\t\t  len+=4;\n-\t\t  break;\n-\t\tdefault:\n-\t\t  fatal_insn (\"unknown insn mode\", insn);\n+\t      case MODE_QI:\n+\t\tlen = 1;\n+\t\tcontinue;\n+\t      case MODE_HI:\n+\t\tival = trunc_int_for_mode (ival, HImode);\n+\t\tbreak;\n+\t      case MODE_SI:\n+\t\tival = trunc_int_for_mode (ival, SImode);\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t    if (IN_RANGE (ival, -128, 127))\n+\t      {\n+\t\tlen = 1;\n+\t\tcontinue;\n \t      }\n \t  }\n+\tswitch (mode)\n+\t  {\n+\t  case MODE_QI:\n+\t    len = 1;\n+\t    break;\n+\t  case MODE_HI:\n+\t    len = 2;\n+\t    break;\n+\t  case MODE_SI:\n+\t    len = 4;\n+\t    break;\n+\t  /* Immediates for DImode instructions are encoded as 32bit sign extended values.  */\n+\t  case MODE_DI:\n+\t    len = 4;\n+\t    break;\n+\t  default:\n+\t    fatal_insn (\"unknown insn mode\", insn);\n+\t}\n       }\n   return len;\n }\n@@ -19452,8 +19506,22 @@ ix86_attr_length_address_default (rtx insn)\n   for (i = recog_data.n_operands - 1; i >= 0; --i)\n     if (MEM_P (recog_data.operand[i]))\n       {\n+        constrain_operands_cached (reload_completed);\n+        if (which_alternative != -1)\n+\t  {\n+\t    const char *constraints = recog_data.constraints[i];\n+\t    int alt = which_alternative;\n+\n+\t    while (*constraints == '=' || *constraints == '+')\n+\t      constraints++;\n+\t    while (alt-- > 0)\n+\t      while (*constraints++ != ',')\n+\t\t;\n+\t    /* Skip ignored operands.  */\n+\t    if (*constraints == 'X')\n+\t      continue;\n+\t  }\n \treturn memory_address_length (XEXP (recog_data.operand[i], 0));\n-\tbreak;\n       }\n   return 0;\n }\n@@ -19482,7 +19550,8 @@ ix86_attr_length_vex_default (rtx insn, int has_0f_opcode,\n     if (REG_P (recog_data.operand[i]))\n       {\n \t/* REX.W bit uses 3 byte VEX prefix.  */\n-\tif (GET_MODE (recog_data.operand[i]) == DImode)\n+\tif (GET_MODE (recog_data.operand[i]) == DImode\n+\t    && GENERAL_REG_P (recog_data.operand[i]))\n \t  return 3 + 1;\n       }\n     else"}, {"sha": "3f56c89b387e9d9c866cbf9402d8844fb540516d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 193, "deletions": 52, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -416,16 +416,23 @@\n \n ;; Set when length prefix is used.\n (define_attr \"prefix_data16\" \"\"\n-  (if_then_else (ior (eq_attr \"mode\" \"HI\")\n-\t\t     (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"V2DF,TI\")))\n-    (const_int 1)\n-    (const_int 0)))\n+  (cond [(eq_attr \"type\" \"ssemuladd,sse4arg,sseiadd1,ssecvt1\")\n+\t   (const_int 0)\n+\t (eq_attr \"mode\" \"HI\")\n+\t   (const_int 1)\n+\t (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"V2DF,TI\"))\n+\t   (const_int 1)\n+\t]\n+\t(const_int 0)))\n \n ;; Set when string REP prefix is used.\n (define_attr \"prefix_rep\" \"\"\n-  (if_then_else (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"SF,DF\"))\n-    (const_int 1)\n-    (const_int 0)))\n+  (cond [(eq_attr \"type\" \"ssemuladd,sse4arg,sseiadd1,ssecvt1\")\n+\t   (const_int 0)\n+\t (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"SF,DF\"))\n+\t   (const_int 1)\n+\t]\n+\t(const_int 0)))\n \n ;; Set when 0f opcode prefix is used.\n (define_attr \"prefix_0f\" \"\"\n@@ -440,7 +447,8 @@\n   (cond [(ne (symbol_ref \"!TARGET_64BIT\") (const_int 0))\n \t   (const_int 0)\n \t (and (eq_attr \"mode\" \"DI\")\n-  \t      (eq_attr \"type\" \"!push,pop,call,callv,leave,ibr\"))\n+\t      (and (eq_attr \"type\" \"!push,pop,call,callv,leave,ibr\")\n+\t\t   (eq_attr \"unit\" \"!mmx\")))\n \t   (const_int 1)\n \t (and (eq_attr \"mode\" \"QI\")\n \t      (ne (symbol_ref \"x86_extended_QIreg_mentioned_p (insn)\")\n@@ -455,24 +463,34 @@\n \t]\n \t(const_int 0)))\n \n-;; There are also additional prefixes in SSSE3.\n-(define_attr \"prefix_extra\" \"\" (const_int 0))\n+;; There are also additional prefixes in 3DNOW, SSSE3 or SSE5.\n+;; ssemuladd,sse4arg default to 0f24/0f25 and DREX byte,\n+;; sseiadd1,ssecvt1 to 0f7a with no DREX byte.\n+;; 3DNOW has 0f0f prefix, SSSE3 and SSE4_{1,2} 0f38/0f3a.\n+(define_attr \"prefix_extra\" \"\"\n+  (cond [(eq_attr \"type\" \"ssemuladd,sse4arg\")\n+\t   (const_int 2)\n+\t (eq_attr \"type\" \"sseiadd1,ssecvt1\")\n+\t   (const_int 1)\n+\t]\n+\t(const_int 0)))\n \n ;; Prefix used: original, VEX or maybe VEX.\n (define_attr \"prefix\" \"orig,vex,maybe_vex\"\n   (if_then_else (eq_attr \"mode\" \"OI,V8SF,V4DF\")\n     (const_string \"vex\")\n     (const_string \"orig\")))\n \n-;; There is a 8bit immediate for VEX.\n-(define_attr \"prefix_vex_imm8\" \"\" (const_int 0))\n-\n ;; VEX W bit is used.\n (define_attr \"prefix_vex_w\" \"\" (const_int 0))\n \n ;; The length of VEX prefix\n+;; Only instructions with 0f prefix can have 2 byte VEX prefix,\n+;; 0f38/0f3a prefixes can't.  In i386.md 0f3[8a] is\n+;; still prefix_0f 1, with prefix_extra 1.\n (define_attr \"length_vex\" \"\"\n-  (if_then_else (eq_attr \"prefix_0f\" \"1\")\n+  (if_then_else (and (eq_attr \"prefix_0f\" \"1\")\n+\t\t     (eq_attr \"prefix_extra\" \"0\"))\n     (if_then_else (eq_attr \"prefix_vex_w\" \"1\")\n       (symbol_ref \"ix86_attr_length_vex_default (insn, 1, 1)\")\n       (symbol_ref \"ix86_attr_length_vex_default (insn, 1, 0)\"))\n@@ -487,8 +505,9 @@\n \t (eq_attr \"unit\" \"i387\")\n \t   (const_int 0)\n          (and (eq_attr \"type\" \"incdec\")\n-\t      (ior (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:HI 1 \"register_operand\" \"\")))\n+\t      (and (eq (symbol_ref \"TARGET_64BIT\") (const_int 0))\n+\t\t   (ior (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t(match_operand:HI 1 \"register_operand\" \"\"))))\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"push\")\n \t      (not (match_operand 1 \"memory_operand\" \"\")))\n@@ -534,7 +553,7 @@\n \t      (and (eq_attr \"prefix\" \"maybe_vex\")\n \t\t    (ne (symbol_ref \"TARGET_AVX\") (const_int 0))))\n \t   (plus (attr \"length_vex\")\n-\t\t (plus (attr \"prefix_vex_imm8\")\n+\t\t (plus (attr \"length_immediate\")\n \t\t       (plus (attr \"modrm\")\n \t\t\t     (attr \"length_address\"))))]\n \t (plus (plus (attr \"modrm\")\n@@ -1155,6 +1174,7 @@\n   \"!TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"cmpqi_ext_3_insn_rex64\"\n@@ -1169,6 +1189,7 @@\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_4\"\n@@ -1516,7 +1537,7 @@\n \t(unspec:HI [(reg:CCFP FPSR_REG)] UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n   \"fnstsw\\t%0\"\n-  [(set_attr \"length\" \"2\")\n+  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"unit\" \"i387\")])\n \n@@ -1556,6 +1577,17 @@\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n         (const_string \"DF\")))\n+   (set (attr \"prefix_rep\")\n+\t(if_then_else (eq_attr \"type\" \"ssecomi\")\n+\t\t      (const_string \"0\")\n+\t\t      (const_string \"*\")))\n+   (set (attr \"prefix_data16\")\n+\t(cond [(eq_attr \"type\" \"fcmp\")\n+\t\t (const_string \"*\")\n+\t       (eq_attr \"mode\" \"DF\")\n+\t\t (const_string \"1\")\n+\t      ]\n+\t      (const_string \"0\")))\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n@@ -1573,6 +1605,11 @@\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n         (const_string \"DF\")))\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set (attr \"prefix_data16\")\n+\t(if_then_else (eq_attr \"mode\" \"DF\")\n+\t\t      (const_string \"1\")\n+\t\t      (const_string \"0\")))\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n@@ -1610,6 +1647,17 @@\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n         (const_string \"DF\")))\n+   (set (attr \"prefix_rep\")\n+\t(if_then_else (eq_attr \"type\" \"ssecomi\")\n+\t\t      (const_string \"0\")\n+\t\t      (const_string \"*\")))\n+   (set (attr \"prefix_data16\")\n+\t(cond [(eq_attr \"type\" \"fcmp\")\n+\t\t (const_string \"*\")\n+\t       (eq_attr \"mode\" \"DF\")\n+\t\t (const_string \"1\")\n+\t      ]\n+\t      (const_string \"0\")))\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n@@ -1627,6 +1675,11 @@\n      (if_then_else (match_operand:SF 1 \"\" \"\")\n         (const_string \"SF\")\n         (const_string \"DF\")))\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set (attr \"prefix_data16\")\n+\t(if_then_else (eq_attr \"mode\" \"DF\")\n+\t\t      (const_string \"1\")\n+\t\t      (const_string \"0\")))\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n@@ -1802,6 +1855,10 @@\n      (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5\")\n        (const_string \"orig\")\n        (const_string \"maybe_vex\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"SI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"2,3\")\n \t      (const_string \"DI\")\n@@ -2651,6 +2708,8 @@\n        (and (eq_attr \"alternative\" \"2\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"8\")\n \t (const_string \"*\")))\n+   (set_attr \"prefix_rex\" \"*,*,*,*,*,*,*,1,*,1,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,1,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"11,12,13,14,15,16\")\n        (const_string \"maybe_vex\")\n@@ -3235,6 +3294,10 @@\n      (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n        (const_string \"orig\")\n        (const_string \"maybe_vex\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (eq_attr \"mode\" \"V1DF\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"DF\")\n@@ -3369,6 +3432,10 @@\n      (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n        (const_string \"orig\")\n        (const_string \"maybe_vex\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (eq_attr \"mode\" \"V1DF\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"DF\")\n@@ -3489,6 +3556,10 @@\n     }\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (eq_attr \"mode\" \"V1DF\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"DF\")\n@@ -4194,7 +4265,7 @@\n   \"TARGET_64BIT\"\n   \"@\n    {cltq|cdqe}\n-   movs{lq|x}\\t{%1,%0|%0, %1}\"\n+   movs{lq|x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"prefix_0f\" \"0\")\n@@ -4204,15 +4275,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"TARGET_64BIT\"\n-  \"movs{wq|x}\\t{%1,%0|%0, %1}\"\n+  \"movs{wq|x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n   \"TARGET_64BIT\"\n-  \"movs{bq|x}\\t{%1,%0|%0, %1}\"\n+  \"movs{bq|x}\\t{%1, %0|%0, %1}\"\n    [(set_attr \"type\" \"imovx\")\n     (set_attr \"mode\" \"DI\")])\n \n@@ -4300,7 +4371,7 @@\n     case 0:\n       return \"{cwtl|cwde}\";\n     default:\n-      return \"movs{wl|x}\\t{%1,%0|%0, %1}\";\n+      return \"movs{wl|x}\\t{%1, %0|%0, %1}\";\n     }\n }\n   [(set_attr \"type\" \"imovx\")\n@@ -4327,7 +4398,7 @@\n     case 0:\n       return \"{cwtl|cwde}\";\n     default:\n-      return \"movs{wl|x}\\t{%1,%k0|%k0, %1}\";\n+      return \"movs{wl|x}\\t{%1, %k0|%k0, %1}\";\n     }\n }\n   [(set_attr \"type\" \"imovx\")\n@@ -4353,7 +4424,7 @@\n     case 0:\n       return \"{cbtw|cbw}\";\n     default:\n-      return \"movs{bw|x}\\t{%1,%0|%0, %1}\";\n+      return \"movs{bw|x}\\t{%1, %0|%0, %1}\";\n     }\n }\n   [(set_attr \"type\" \"imovx\")\n@@ -4373,7 +4444,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n   \"\"\n-  \"movs{bl|x}\\t{%1,%0|%0, %1}\"\n+  \"movs{bl|x}\\t{%1, %0|%0, %1}\"\n    [(set_attr \"type\" \"imovx\")\n     (set_attr \"mode\" \"SI\")])\n \n@@ -4382,7 +4453,7 @@\n \t(zero_extend:DI\n \t  (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\"))))]\n   \"TARGET_64BIT\"\n-  \"movs{bl|x}\\t{%1,%k0|%k0, %1}\"\n+  \"movs{bl|x}\\t{%1, %k0|%k0, %1}\"\n    [(set_attr \"type\" \"imovx\")\n     (set_attr \"mode\" \"SI\")])\n \f\n@@ -4994,6 +5065,7 @@\n   \"%vcvtts<ssemodefsuffix>2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix_rex\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")])\n@@ -5268,7 +5340,7 @@\n \t(unspec:HI [(reg:HI FPCR_REG)] UNSPEC_FSTCW))]\n   \"TARGET_80387\"\n   \"fnstcw\\t%0\"\n-  [(set_attr \"length\" \"2\")\n+  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")])\n \n@@ -5277,7 +5349,7 @@\n \t(unspec:HI [(match_operand:HI 0 \"memory_operand\" \"m\")] UNSPEC_FLDCW))]\n   \"TARGET_80387\"\n   \"fldcw\\t%0\"\n-  [(set_attr \"length\" \"2\")\n+  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"athlon_decode\" \"vector\")\n@@ -6650,7 +6722,7 @@\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"constm128_operand\" \"\"))\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n@@ -7121,7 +7193,7 @@\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"constm128_operand\" \"\"))\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n@@ -7409,10 +7481,10 @@\n \t(const_string \"alu\")))\n    (set (attr \"length_immediate\")\n       (if_then_else\n-\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"constm128_operand\" \"\"))\n+\t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\" \"\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"HI\")])\n \n \n (define_insn \"*addhi_5\"\n@@ -7808,6 +7880,7 @@\n      (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_ext_1_rex64\"\n@@ -7844,6 +7917,7 @@\n      (if_then_else (match_operand:QI 2 \"incdec_operand\" \"\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_ext_2\"\n@@ -9308,6 +9382,7 @@\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"pent_pair\" \"np\")])\n \n (define_insn \"*testqi_ext_1\"\n@@ -9534,9 +9609,9 @@\n \n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n-\t  return \"movz{bq|x}\\t{%1,%0|%0, %1}\";\n+\t  return \"movz{bl|x}\\t{%1, %k0|%k0, %1}\";\n \telse\n-\t  return \"movz{wq|x}\\t{%1,%0|%0, %1}\";\n+\t  return \"movz{wl|x}\\t{%1, %k0|%k0, %1}\";\n       }\n \n     default:\n@@ -9549,7 +9624,14 @@\n }\n   [(set_attr \"type\" \"alu,alu,alu,imovx\")\n    (set_attr \"length_immediate\" \"*,*,*,0\")\n-   (set_attr \"mode\" \"SI,DI,DI,DI\")])\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n+\t\t (match_operand 1 \"ext_QIreg_nomode_operand\" \"\")))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"SI,DI,DI,SI\")])\n \n (define_insn \"*anddi_2\"\n   [(set (reg FLAGS_REG)\n@@ -9598,9 +9680,9 @@\n \n \toperands[1] = gen_lowpart (mode, operands[1]);\n \tif (mode == QImode)\n-\t  return \"movz{bl|x}\\t{%1,%0|%0, %1}\";\n+\t  return \"movz{bl|x}\\t{%1, %0|%0, %1}\";\n \telse\n-\t  return \"movz{wl|x}\\t{%1,%0|%0, %1}\";\n+\t  return \"movz{wl|x}\\t{%1, %0|%0, %1}\";\n       }\n \n     default:\n@@ -9609,6 +9691,13 @@\n     }\n }\n   [(set_attr \"type\" \"alu,alu,imovx\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (and (ne (symbol_ref \"INTVAL (operands[2]) == 0xff\") (const_int 0))\n+\t\t (match_operand 1 \"ext_QIreg_nomode_operand\" \"\")))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"length_immediate\" \"*,*,0\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -9717,6 +9806,12 @@\n }\n   [(set_attr \"type\" \"alu,alu,imovx\")\n    (set_attr \"length_immediate\" \"*,*,0\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"type\" \"imovx\")\n+\t    (match_operand 1 \"ext_QIreg_nomode_operand\" \"\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"HI,HI,SI\")])\n \n (define_insn \"*andhi_2\"\n@@ -9836,6 +9931,7 @@\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n ;; Generated by peephole translating test to and.  This shows up\n@@ -9864,6 +9960,7 @@\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*andqi_ext_1\"\n@@ -10238,6 +10335,7 @@\n   \"or{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*iorqi_ext_1\"\n@@ -10568,6 +10666,7 @@\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_ext_1\"\n@@ -10686,6 +10785,7 @@\n   \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*xorqi_cc_ext_1_rex64\"\n@@ -10707,6 +10807,7 @@\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"xorqi_cc_ext_1\"\n@@ -11509,6 +11610,7 @@\n }\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_ashlti3\"\n@@ -11522,6 +11624,7 @@\n }\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*ashlti3_1\"\n@@ -13361,6 +13464,7 @@\n }\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_lshrti3\"\n@@ -13374,6 +13478,7 @@\n }\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*lshrti3_1\"\n@@ -14446,7 +14551,8 @@\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"bts{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")])\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btrq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n@@ -14457,7 +14563,8 @@\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"btr{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")])\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btcq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n@@ -14468,7 +14575,8 @@\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n   \"btc{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")])\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; Allow Nocona to avoid these instructions if a register is available.\n \n@@ -14580,7 +14688,8 @@\n   \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n   \"bt{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")])\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btsi\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14593,7 +14702,8 @@\n   \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"bt{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")])\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n \f\n ;; Store-flag instructions.\n \n@@ -14706,6 +14816,7 @@\n   \"vcmp%D1s<ssemodefsuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*sse_setcc<mode>\"\n@@ -14716,6 +14827,7 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && !TARGET_SSE5\"\n   \"cmp%D1s<ssemodefsuffix>\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*sse5_setcc<mode>\"\n@@ -14726,6 +14838,7 @@\n   \"TARGET_SSE5\"\n   \"com%Y1s<ssemodefsuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n \f\n@@ -15821,15 +15934,17 @@\n   \"TARGET_64BIT\"\n   \"lea{q}\\t{_GLOBAL_OFFSET_TABLE_(%%rip), %0|%0, _GLOBAL_OFFSET_TABLE_[rip]}\"\n   [(set_attr \"type\" \"lea\")\n-   (set_attr \"length\" \"6\")])\n+   (set_attr \"length_address\" \"4\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"set_rip_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(label_ref (match_operand 1 \"\" \"\"))] UNSPEC_SET_RIP))]\n   \"TARGET_64BIT\"\n   \"lea{q}\\t{%l1(%%rip), %0|%0, %l1[rip]}\"\n   [(set_attr \"type\" \"lea\")\n-   (set_attr \"length\" \"6\")])\n+   (set_attr \"length_address\" \"4\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"set_got_offset_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -15839,7 +15954,9 @@\n   \"TARGET_64BIT\"\n   \"movabs{q}\\t{$_GLOBAL_OFFSET_TABLE_-%l1, %0|%0, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_-%l1}\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"length\" \"11\")])\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"length_address\" \"8\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"epilogue\"\n   [(const_int 0)]\n@@ -15962,7 +16079,9 @@\n \t(ctz:SI (match_dup 1)))]\n   \"\"\n   \"bsf{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 2) (const_int -1))\n@@ -15988,23 +16107,29 @@\n \t(ctz:DI (match_dup 1)))]\n   \"TARGET_64BIT\"\n   \"bsf{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"ctzsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ctz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"bsf{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n \n (define_insn \"ctzdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ctz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"bsf{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")])\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"clzsi2\"\n   [(parallel\n@@ -16041,7 +16166,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"bsr{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"popcount<mode>2\"\n@@ -16225,7 +16351,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"bsr{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"clzhi2\"\n@@ -16263,7 +16390,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"bsr{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_0f\" \"1\")\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_expand \"paritydi2\"\n@@ -19363,6 +19491,7 @@\n   \"TARGET_USE_FANCY_MATH_387\"\n   \"fxam\\n\\tfnstsw\\t%0\"\n   [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -22316,6 +22445,7 @@\n }\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"prefetch\")\n+   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n (define_insn \"*prefetch_sse_rex\"\n@@ -22335,6 +22465,7 @@\n }\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"prefetch\")\n+   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n (define_insn \"*prefetch_3dnow\"\n@@ -22349,6 +22480,7 @@\n     return \"prefetchw\\t%a0\";\n }\n   [(set_attr \"type\" \"mmx\")\n+   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n (define_insn \"*prefetch_3dnow_rex\"\n@@ -22363,6 +22495,7 @@\n     return \"prefetchw\\t%a0\";\n }\n   [(set_attr \"type\" \"mmx\")\n+   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n (define_expand \"stack_protect_set\"\n@@ -22520,6 +22653,14 @@\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (match_operand:HI 2 \"\" \"\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_rex\")\n+     (if_then_else (match_operand:QI 2 \"ext_QIreg_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"sse4_2_crc32di\""}, {"sha": "dea9322f9a80e83f7ee2c1f0d90394e9729652ef", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for MMX and 3dNOW! instructions\n-;; Copyright (C) 2005, 2007, 2008\n+;; Copyright (C) 2005, 2007, 2008, 2009\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -85,6 +85,12 @@\n     %vmovq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,ssemov\")\n    (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,1,*,*,*\")\n+   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,*,1,1,1\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else (eq_attr \"alternative\" \"8,9\")\n+       (symbol_ref \"x86_extended_reg_mentioned_p (insn)\")\n+       (const_string \"*\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"7,8,9,10,11\")\n        (const_string \"maybe_vex\")\n@@ -111,6 +117,7 @@\n     #\"\n   [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"5,6,7\")\n        (const_string \"vex\")\n@@ -141,6 +148,8 @@\n     #\"\n   [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,1,*,*,*,*,*,*\")\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_expand \"movv2sf\"\n@@ -175,6 +184,8 @@\n     vmovq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n    (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,*,*,*,*,*\")\n+   (set_attr \"length_vex\" \"*,*,*,*,*,*,*,*,*,*,*,4,4\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"7,8,9,10,11,12\")\n        (const_string \"vex\")\n@@ -204,6 +215,7 @@\n     movd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n    (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,*,*,*,*,*\")\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_insn \"*movv2sf_internal_avx\"\n@@ -227,6 +239,7 @@\n     #\"\n   [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n        (const_string \"vex\")\n@@ -254,6 +267,7 @@\n     #\"\n   [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n    (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*,*\")\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n ;; %%% This multiword shite has got to go.\n@@ -313,6 +327,7 @@\n   \"TARGET_3DNOW && ix86_binary_operator_ok (PLUS, V2SFmode, operands)\"\n   \"pfadd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_expand \"mmx_subv2sf3\"\n@@ -338,6 +353,7 @@\n    pfsub\\t{%2, %0|%0, %2}\n    pfsubr\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_expand \"mmx_mulv2sf3\"\n@@ -354,6 +370,7 @@\n   \"TARGET_3DNOW && ix86_binary_operator_ok (MULT, V2SFmode, operands)\"\n   \"pfmul\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n ;; ??? For !flag_finite_math_only, the representation with SMIN/SMAX\n@@ -381,6 +398,7 @@\n    && ix86_binary_operator_ok (<CODE>, V2SFmode, operands)\"\n   \"pf<maxminfprefix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"*mmx_<code>v2sf3\"\n@@ -391,6 +409,7 @@\n   \"TARGET_3DNOW\"\n   \"pf<maxminfprefix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_rcpv2sf2\"\n@@ -400,6 +419,7 @@\n   \"TARGET_3DNOW\"\n   \"pfrcp\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_rcpit1v2sf3\"\n@@ -410,6 +430,7 @@\n   \"TARGET_3DNOW\"\n   \"pfrcpit1\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_rcpit2v2sf3\"\n@@ -420,6 +441,7 @@\n   \"TARGET_3DNOW\"\n   \"pfrcpit2\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_rsqrtv2sf2\"\n@@ -429,6 +451,7 @@\n   \"TARGET_3DNOW\"\n   \"pfrsqrt\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_rsqit1v2sf3\"\n@@ -439,6 +462,7 @@\n   \"TARGET_3DNOW\"\n   \"pfrsqit1\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_haddv2sf3\"\n@@ -457,6 +481,7 @@\n   \"TARGET_3DNOW\"\n   \"pfacc\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_hsubv2sf3\"\n@@ -475,6 +500,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pfnacc\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_addsubv2sf3\"\n@@ -488,6 +514,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pfpnacc\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -510,6 +537,7 @@\n   \"TARGET_3DNOW && ix86_binary_operator_ok (EQ, V2SFmode, operands)\"\n   \"pfcmpeq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_gtv2sf3\"\n@@ -519,6 +547,7 @@\n   \"TARGET_3DNOW\"\n   \"pfcmpgt\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_gev2sf3\"\n@@ -528,6 +557,7 @@\n   \"TARGET_3DNOW\"\n   \"pfcmpge\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -542,6 +572,7 @@\n   \"TARGET_3DNOW\"\n   \"pf2id\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_pf2iw\"\n@@ -553,6 +584,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pf2iw\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_pi2fw\"\n@@ -564,6 +596,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pi2fw\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"mmx_floatv2si2\"\n@@ -572,6 +605,7 @@\n   \"TARGET_3DNOW\"\n   \"pi2fd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -587,6 +621,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pswapd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_insn \"*vec_dupv2sf\"\n@@ -887,6 +922,7 @@\n   \"TARGET_3DNOW && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n   \"pmulhrw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"sse2_umulv1siv1di3\"\n@@ -965,6 +1001,10 @@\n   \"TARGET_MMX\"\n   \"psra<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_lshr<mode>3\"\n@@ -975,6 +1015,10 @@\n   \"TARGET_MMX\"\n   \"psrl<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_ashl<mode>3\"\n@@ -985,6 +1029,10 @@\n   \"TARGET_MMX\"\n   \"psll<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -1205,6 +1253,7 @@\n   return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n }\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_pextrw\"\n@@ -1216,6 +1265,7 @@\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_pshufw\"\n@@ -1253,6 +1303,7 @@\n   return \"pshufw\\t{%2, %1, %0|%0, %1, %2}\";\n }\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"mmx_pswapdv2si2\"\n@@ -1263,6 +1314,7 @@\n   \"TARGET_3DNOW_A\"\n   \"pswapd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*vec_dupv4hi\"\n@@ -1273,6 +1325,7 @@\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"pshufw\\t{$0, %0, %0|%0, %0, 0}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*vec_dupv2si\"\n@@ -1345,6 +1398,7 @@\n    #\n    #\"\n   [(set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,mmxmov,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"*,*,1,*,*,*,*\")\n    (set_attr \"mode\" \"DI,TI,TI,V4SF,SI,SI,SI\")])\n \n (define_split\n@@ -1492,6 +1546,11 @@\n     return \"pavgusb\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"mmxshft\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else\n+       (eq (symbol_ref \"(TARGET_SSE || TARGET_3DNOW_A)\") (const_int 0))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_uavgv4hi3\"\n@@ -1602,6 +1661,7 @@\n   \"TARGET_MMX\"\n   \"emms\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"mmx_femms\"\n@@ -1625,4 +1685,5 @@\n   \"TARGET_3DNOW\"\n   \"femms\"\n   [(set_attr \"type\" \"mmx\")\n+   (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"none\")])"}, {"sha": "2089de768ce817b58172a4a445ab28aa4ef25702", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -84,6 +84,12 @@\n \t\t    && GET_MODE (op) == QImode\n \t\t    && REGNO (op) > BX_REG\")))\n \n+;; Similarly, but don't check mode of the operand.\n+(define_predicate \"ext_QIreg_nomode_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"TARGET_64BIT\n+\t\t    && REGNO (op) > BX_REG\")))\n+\n ;; Return true if op is not xmm0 register.\n (define_predicate \"reg_not_xmm0_operand\"\n    (and (match_operand 0 \"register_operand\")\n@@ -587,11 +593,6 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) == 128\")))\n \n-;; Match exactly -128.\n-(define_predicate \"constm128_operand\"\n-  (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) == -128\")))\n-\n ;; Match 2, 4, or 8.  Used for leal multiplicands.\n (define_predicate \"const248_operand\"\n   (match_code \"const_int\")"}, {"sha": "da06d44c41af20054a223c8d82a45168e8a554d9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 318, "deletions": 4, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725fd454ae7e5a40356d5b27660b77d1bb6c55e9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=725fd454ae7e5a40356d5b27660b77d1bb6c55e9", "patch": "@@ -437,6 +437,7 @@\n   \"TARGET_SSE2\"\n   \"movnti\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"avx_lddqu<avxmodesuffix>\"\n@@ -459,6 +460,7 @@\n   \"lddqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -1407,6 +1409,7 @@\n   \"TARGET_AVX\"\n   \"vcmpp<avxmodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1423,6 +1426,7 @@\n   \"TARGET_AVX\"\n   \"vcmps<ssemodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -1437,6 +1441,7 @@\n   \"vcmp%D3p<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n (define_insn \"<sse>_maskcmp<mode>3\"\n@@ -1448,6 +1453,7 @@\n    && !TARGET_SSE5\"\n   \"cmp%D3<ssemodesuffixf4>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse>_vmmaskcmp<mode>3\"\n@@ -1461,6 +1467,7 @@\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode) && !TARGET_SSE5\"\n   \"cmp%D3s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_comi\"\n@@ -1476,6 +1483,11 @@\n   \"%vcomis<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set (attr \"prefix_data16\")\n+\t(if_then_else (eq_attr \"mode\" \"DF\")\n+\t\t      (const_string \"1\")\n+\t\t      (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse>_ucomi\"\n@@ -1491,6 +1503,11 @@\n   \"%vucomis<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set (attr \"prefix_data16\")\n+\t(if_then_else (eq_attr \"mode\" \"DF\")\n+\t\t      (const_string \"1\")\n+\t\t      (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"vcond<mode>\"\n@@ -2222,6 +2239,7 @@\n   \"cvttps2pi\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx\")\n+   (set_attr \"prefix_rep\" \"0\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*avx_cvtsi2ss\"\n@@ -2261,6 +2279,7 @@\n   \"TARGET_AVX && TARGET_64BIT\"\n   \"vcvtsi2ssq\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"length_vex\" \"4\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -2274,6 +2293,7 @@\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"cvtsi2ssq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix_rex\" \"1\")\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"mode\" \"SF\")])\n@@ -2420,6 +2440,7 @@\n   \"cvttps2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"mode\" \"TI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -2435,6 +2456,7 @@\n   \"cvtpi2pd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx,*\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse2_cvtpd2pi\"\n@@ -2495,6 +2517,7 @@\n   \"TARGET_AVX && TARGET_64BIT\"\n   \"vcvtsi2sdq\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"length_vex\" \"4\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -2508,6 +2531,7 @@\n   \"TARGET_SSE2 && TARGET_64BIT\"\n   \"cvtsi2sdq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix_rex\" \"1\")\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")])\n@@ -2649,6 +2673,7 @@\n \t\t       : \\\"cvtpd2dq\\t{%1, %0|%0, %1}\\\";\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")\n    (set_attr \"amdfam10_decode\" \"double\")])\n@@ -2679,7 +2704,6 @@\n   \"* return TARGET_AVX ? \\\"vcvttpd2dq{x}\\t{%1, %0|%0, %1}\\\"\n \t\t       : \\\"cvttpd2dq\\t{%1, %0|%0, %1}\\\";\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")\n    (set_attr \"amdfam10_decode\" \"double\")])\n@@ -2798,6 +2822,7 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2DF\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \n (define_expand \"vec_unpacks_hi_v4sf\"\n@@ -3268,6 +3293,7 @@\n   return \"vshufps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -3309,6 +3335,7 @@\n   return \"vshufps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -3334,6 +3361,7 @@\n   return \"shufps\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse_storehps\"\n@@ -3441,6 +3469,7 @@\n    vmovlps\\t{%2, %1, %0|%0, %1, %2}\n    vmovlps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n+   (set_attr \"length_immediate\" \"1,*,*\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF,V2SF,V2SF\")])\n \n@@ -3457,6 +3486,7 @@\n    movlps\\t{%2, %0|%0, %2}\n    movlps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n+   (set_attr \"length_immediate\" \"1,*,*\")\n    (set_attr \"mode\" \"V4SF,V2SF,V2SF\")])\n \n (define_insn \"*avx_movss\"\n@@ -3489,6 +3519,7 @@\n   \"TARGET_AVX\"\n   \"vshufps\\t{$0, %1, %1, %0|%0, %1, %1, 0}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -3499,6 +3530,7 @@\n   \"TARGET_SSE\"\n   \"shufps\\t{$0, %0, %0|%0, %0, 0}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"*vec_concatv2sf_avx\"\n@@ -3514,6 +3546,8 @@\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"length_immediate\" \"*,1,*,*,*\")\n+   (set_attr \"prefix_extra\" \"*,1,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"3,4\")\n        (const_string \"orig\")\n@@ -3535,7 +3569,9 @@\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_data16\" \"*,1,*,*,*\")\n    (set_attr \"prefix_extra\" \"*,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,1,*,*,*\")\n    (set_attr \"mode\" \"V4SF,V4SF,SF,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n@@ -3636,6 +3672,8 @@\n   return \"vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -3652,7 +3690,9 @@\n   return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"*avx_insertps\"\n@@ -3665,6 +3705,8 @@\n   \"vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse4_1_insertps\"\n@@ -3676,7 +3718,9 @@\n   \"TARGET_SSE4_1\"\n   \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_split\n@@ -3751,6 +3795,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x0, %1, %0|%0, %1, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3763,6 +3809,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3776,6 +3824,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3789,6 +3839,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3804,6 +3856,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3819,6 +3873,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3838,6 +3894,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3857,6 +3915,8 @@\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3869,7 +3929,9 @@\n   \"TARGET_SSE4_1\"\n   \"%vextractps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -3962,6 +4024,7 @@\n    movlpd\\t{%H1, %0|%0, %H1}\n    movhpd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n+   (set_attr \"prefix_data16\" \"*,1,1\")\n    (set_attr \"mode\" \"V2DF,V1DF,V1DF\")])\n \n (define_insn \"avx_movddup256\"\n@@ -4082,6 +4145,7 @@\n    movhpd\\t{%2, %0|%0, %2}\n    movlpd\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n+   (set_attr \"prefix_data16\" \"*,1,1\")\n    (set_attr \"mode\" \"V2DF,V1DF,V1DF\")])\n \n (define_expand \"avx_shufpd256\"\n@@ -4122,6 +4186,7 @@\n   return \"vshufpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n@@ -4258,6 +4323,7 @@\n   return \"vshufpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n@@ -4279,6 +4345,7 @@\n   return \"shufpd\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"V2DF\")])\n \n ;; Avoid combining registers from different units in a single alternative,\n@@ -4312,6 +4379,7 @@\n    #\n    #\"\n   [(set_attr \"type\" \"ssemov,sselog1,ssemov,fmov,imov\")\n+   (set_attr \"prefix_data16\" \"1,*,*,*,*\")\n    (set_attr \"mode\" \"V1DF,V2DF,DF,DF,DF\")])\n \n (define_split\n@@ -4340,6 +4408,7 @@\n    #\n    #\"\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov,fmov,imov\")\n+   (set_attr \"prefix_data16\" \"1,*,*,*,*\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V1DF,DF,DF,DF,DF\")])\n \n@@ -4406,6 +4475,8 @@\n    #\n    #\"\n   [(set_attr \"type\" \"ssemov,sselog,sselog,ssemov,fmov,imov\")\n+   (set_attr \"prefix_data16\" \"1,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,1,*,*,*\")\n    (set_attr \"mode\" \"V1DF,V2DF,V2DF,DF,DF,DF\")])\n \n (define_split\n@@ -4469,6 +4540,8 @@\n    #\n    #\"\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov,fmov,imov\")\n+   (set_attr \"prefix_data16\" \"*,1,*,*,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,1,*,*,*,*\")\n    (set_attr \"mode\" \"DF,V1DF,V1DF,V2DF,V1DF,DF,DF,DF\")])\n \n (define_split\n@@ -4544,6 +4617,8 @@\n    movhps\\t{%H1, %0|%0, %H1}\n    movhps\\t{%1, %H0|%H0, %1}\"\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov\")\n+   (set_attr \"prefix_data16\" \"*,1,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,1,*,*\")\n    (set_attr \"mode\" \"DF,V1DF,V1DF,V2DF,V1DF,V1DF\")])\n \n (define_insn \"*vec_dupv2df_sse3\"\n@@ -4603,6 +4678,7 @@\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"prefix_data16\" \"*,1,*,*,*\")\n    (set_attr \"mode\" \"V2DF,V1DF,DF,V4SF,V2SF\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -4951,6 +5027,7 @@\n   \"TARGET_AVX && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n   \"vpmuldq\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -5097,6 +5174,7 @@\n   \"TARGET_AVX && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n   \"vpmulld\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -5492,6 +5570,10 @@\n   \"vpsra<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashr<mode>3\"\n@@ -5503,6 +5585,10 @@\n   \"psra<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*avx_lshr<mode>3\"\n@@ -5514,6 +5600,10 @@\n   \"vpsrl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"lshr<mode>3\"\n@@ -5525,6 +5615,10 @@\n   \"psrl<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*avx_ashl<mode>3\"\n@@ -5536,6 +5630,10 @@\n   \"vpsll<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashl<mode>3\"\n@@ -5547,6 +5645,10 @@\n   \"psll<ssevecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vec_shl_<mode>\"\n@@ -5577,6 +5679,12 @@\n   \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<maxminiprefix><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else\n+       (ne (symbol_ref \"<MODE>mode != ((<CODE> == SMAX || <CODE> == SMIN) ? V8HImode : V16QImode)\")\n+\t   (const_int 0))\n+       (const_string \"1\")\n+       (const_string \"0\")))\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -5781,6 +5889,10 @@\n   \"TARGET_AVX && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n   \"vpcmpeq<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (match_operand:V2DI 0 \"\" \"\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -5823,6 +5935,10 @@\n   \"TARGET_AVX\"\n   \"vpcmpgt<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (match_operand:V2DI 0 \"\" \"\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -5845,6 +5961,7 @@\n   \"TARGET_SSE4_2\"\n   \"pcmpgtq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vcond<mode>\"\n@@ -6603,6 +6720,11 @@\n   return \"vpinsr<ssevecsize>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (match_operand:V8HI 0 \"register_operand\" \"\")\n+       (const_string \"0\")\n+       (const_string \"1\")))\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6620,6 +6742,7 @@\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse2_pinsrw\"\n@@ -6636,6 +6759,7 @@\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; It must come before sse2_loadld since it is preferred.\n@@ -6653,6 +6777,7 @@\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*avx_pinsrq\"\n@@ -6668,6 +6793,8 @@\n   return \"vpinsrq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6684,7 +6811,9 @@\n   return \"pinsrq\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_rex\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse4_1_pextrb\"\n@@ -6697,6 +6826,7 @@\n   \"%vpextrb\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6709,6 +6839,7 @@\n   \"%vpextrb\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6722,6 +6853,7 @@\n   \"%vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6734,6 +6866,7 @@\n   \"%vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6746,6 +6879,7 @@\n   \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6758,7 +6892,9 @@\n   \"TARGET_SSE4_1 && TARGET_64BIT\"\n   \"%vpextrq\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_rex\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -6798,7 +6934,8 @@\n }\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_pshuflw\"\n@@ -6840,8 +6977,10 @@\n   return \"%vpshuflw\\t{%2, %1, %0|%0, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_pshufhw\"\n@@ -6884,7 +7023,9 @@\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_loadd\"\n@@ -7020,6 +7161,7 @@\n    vmovq\\t{%H1, %0|%0, %H1}\n    vmov{q}\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"*,1,*,*\")\n    (set_attr \"memory\" \"*,none,*,*\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V2SF,TI,TI,DI\")])\n@@ -7036,6 +7178,7 @@\n    movq\\t{%H1, %0|%0, %H1}\n    mov{q}\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"*,1,*,*\")\n    (set_attr \"atom_unit\" \"*,sishuf,*,*\")\n    (set_attr \"memory\" \"*,none,*,*\")\n    (set_attr \"mode\" \"V2SF,TI,TI,DI\")])\n@@ -7053,6 +7196,7 @@\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n    vmovq\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov\")\n+   (set_attr \"length_immediate\" \"*,1,*\")\n    (set_attr \"memory\" \"*,none,*\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V2SF,TI,TI\")])\n@@ -7069,6 +7213,7 @@\n    psrldq\\t{$8, %0|%0, 8}\n    movq\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov\")\n+   (set_attr \"length_immediate\" \"*,1,*\")\n    (set_attr \"atom_unit\" \"*,sishuf,*\")\n    (set_attr \"memory\" \"*,none,*\")\n    (set_attr \"mode\" \"V2SF,TI,TI\")])\n@@ -7098,6 +7243,7 @@\n    shufps\\t{$0, %0, %0|%0, %0, 0}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix\" \"maybe_vex,orig\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n (define_insn \"*vec_dupv2di_avx\"\n@@ -7134,6 +7280,8 @@\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,*,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"3,4\")\n        (const_string \"orig\")\n@@ -7154,6 +7302,7 @@\n    movd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n    (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,*,*,*,*\")\n    (set_attr \"mode\" \"TI,TI,TI,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n@@ -7260,6 +7409,8 @@\n    vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,sselog,ssemov\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,*,*,*,*,*\")\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"3\")\n        (const_string \"orig\")\n@@ -7281,7 +7432,9 @@\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,sselog,ssemov,ssemov\")\n+   (set_attr \"prefix_rex\" \"1,*,1,*,*,*,*\")\n    (set_attr \"prefix_extra\" \"1,*,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,*,*,*,*,*,*\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,TI,V4SF,V2SF\")])\n \n (define_insn \"*vec_concatv2di_rex64_sse\"\n@@ -7298,6 +7451,7 @@\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov\")\n+   (set_attr \"prefix_rex\" \"*,1,*,*,*,*\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF\")])\n \n (define_expand \"vec_unpacku_hi_v16qi\"\n@@ -7684,6 +7838,8 @@\n   \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n+   ;; The implicit %rdi operand confuses default length_vex computation.\n+   (set_attr \"length_vex\" \"3\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -7698,6 +7854,9 @@\n   \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n+   ;; The implicit %rdi operand confuses default length_vex computation.\n+   (set (attr \"length_vex\")\n+     (symbol_ref (\"REGNO (operands[2]) >= FIRST_REX_SSE_REG ? 3 + 1 : 2 + 1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -7736,6 +7895,7 @@\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"sfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n    (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n@@ -7763,6 +7923,7 @@\n   \"TARGET_64BIT || TARGET_SSE2\"\n   \"mfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n    (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n@@ -7781,6 +7942,7 @@\n   \"TARGET_SSE2\"\n   \"lfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"length_address\" \"0\")\n    (set_attr \"atom_sse_attr\" \"lfence\")\n    (set_attr \"memory\" \"unknown\")])\n \n@@ -7862,6 +8024,7 @@\n   \"TARGET_AVX\"\n   \"vphaddw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -7936,6 +8099,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_phadddv4si3\"\n@@ -7962,6 +8126,7 @@\n   \"TARGET_AVX\"\n   \"vphaddd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8012,6 +8177,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_phaddswv8hi3\"\n@@ -8054,6 +8220,7 @@\n   \"TARGET_AVX\"\n   \"vphaddsw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8128,6 +8295,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_phsubwv8hi3\"\n@@ -8170,6 +8338,7 @@\n   \"TARGET_AVX\"\n   \"vphsubw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8244,6 +8413,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_phsubdv4si3\"\n@@ -8270,6 +8440,7 @@\n   \"TARGET_AVX\"\n   \"vphsubd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8320,6 +8491,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_phsubswv8hi3\"\n@@ -8362,6 +8534,7 @@\n   \"TARGET_AVX\"\n   \"vphsubsw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8436,6 +8609,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_pmaddubsw128\"\n@@ -8488,6 +8662,7 @@\n   \"TARGET_AVX\"\n   \"vpmaddubsw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8582,6 +8757,7 @@\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"simul\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"ssse3_pmulhrswv8hi3\"\n@@ -8624,6 +8800,7 @@\n   \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n   \"vpmulhrsw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8688,6 +8865,7 @@\n   \"pmulhrsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_pshufbv16qi3\"\n@@ -8698,6 +8876,7 @@\n   \"TARGET_AVX\"\n   \"vpshufb\\t{%2, %1, %0|%0, %1, %2}\";\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8722,6 +8901,7 @@\n   \"pshufb\\t{%2, %0|%0, %2}\";\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_psign<mode>3\"\n@@ -8733,6 +8913,7 @@\n   \"TARGET_AVX\"\n   \"vpsign<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\";\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8759,6 +8940,7 @@\n   \"psign<mmxvecsize>\\t{%2, %0|%0, %2}\";\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*avx_palignrti\"\n@@ -8773,6 +8955,8 @@\n   return \"vpalignr\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8791,6 +8975,7 @@\n    (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ssse3_palignrdi\"\n@@ -8807,6 +8992,8 @@\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"abs<mode>2\"\n@@ -8826,7 +9013,9 @@\n   \"TARGET_SSSE3\"\n   \"pabs<mmxvecsize>\\t{%1, %0|%0, %1}\";\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_rep\" \"0\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -8867,6 +9056,7 @@\n   \"extrq\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4a_extrq\"\n@@ -8890,7 +9080,9 @@\n   \"TARGET_SSE4A\"\n   \"insertq\\t{%4, %3, %2, %0|%0, %2, %3, %4}\"\n   [(set_attr \"type\" \"sseins\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"length_immediate\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4a_insertq\"\n@@ -8901,6 +9093,7 @@\n   \"TARGET_SSE4A\"\n   \"insertq\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseins\")\n+   (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -8919,6 +9112,8 @@\n   \"TARGET_AVX\"\n   \"vblendp<avxmodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n@@ -8932,6 +9127,8 @@\n   \"TARGET_AVX\"\n   \"vblendvp<avxmodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n@@ -8944,7 +9141,9 @@\n   \"TARGET_SSE4_1\"\n   \"blendp<ssemodesuffixf2c>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sse4_1_blendvp<ssemodesuffixf2c>\"\n@@ -8957,6 +9156,7 @@\n   \"TARGET_SSE4_1\"\n   \"blendvp<ssemodesuffixf2c>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -8971,6 +9171,8 @@\n   \"vdpp<avxmodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemul\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n (define_insn \"sse4_1_dpp<ssemodesuffixf2c>\"\n@@ -8983,7 +9185,9 @@\n   \"TARGET_SSE4_1\"\n   \"dpp<ssemodesuffixf2c>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemul\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sse4_1_movntdqa\"\n@@ -9007,6 +9211,8 @@\n   \"vmpsadbw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_1_mpsadbw\"\n@@ -9019,6 +9225,7 @@\n   \"mpsadbw\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*avx_packusdw\"\n@@ -9031,6 +9238,7 @@\n   \"TARGET_AVX\"\n   \"vpackusdw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -9056,6 +9264,8 @@\n   \"TARGET_AVX\"\n   \"vpblendvb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -9081,6 +9291,8 @@\n   \"vpblendw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_1_pblendw\"\n@@ -9093,6 +9305,7 @@\n   \"pblendw\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_1_phminposuw\"\n@@ -9504,6 +9717,7 @@\n   \"TARGET_AVX\"\n   \"vtestp<avxmodesuffixf2c>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9517,6 +9731,7 @@\n   \"TARGET_AVX\"\n   \"vptest\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n@@ -9541,6 +9756,8 @@\n   \"TARGET_AVX\"\n   \"vroundp<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9553,7 +9770,9 @@\n   \"TARGET_ROUND\"\n   \"%vroundp<ssemodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9569,6 +9788,8 @@\n   \"TARGET_AVX\"\n   \"vrounds<ssemodesuffixf2c>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -9584,7 +9805,9 @@\n   \"TARGET_ROUND\"\n   \"rounds<ssemodesuffixf2c>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -9646,6 +9869,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -9672,6 +9896,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -9697,6 +9922,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9721,6 +9947,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load,none,load\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9769,6 +9996,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -9790,6 +10018,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9812,6 +10041,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9834,6 +10064,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,load,none,load\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -10832,6 +11063,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_pperm_sign_v16qi_v8hi\"\n@@ -10846,6 +11079,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_pperm_zero_v8hi_v4si\"\n@@ -10860,6 +11095,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_pperm_sign_v8hi_v4si\"\n@@ -10874,6 +11111,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_pperm_zero_v4si_v2di\"\n@@ -10888,6 +11127,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_pperm_sign_v4si_v2di\"\n@@ -10902,6 +11143,8 @@\n        || register_operand (operands[2], V16QImode))\"\n   \"pperm\\t{%3, %1, %0, %0|%0, %0, %1, %3}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; SSE5 pack instructions that combine two vectors into a smaller vector\n@@ -11030,6 +11273,7 @@\n   \"TARGET_SSE5\"\n   \"prot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_rotr<mode>3\"\n@@ -11043,6 +11287,7 @@\n   return \\\"prot<ssevecsize>\\t{%3, %1, %0|%0, %1, %3}\\\";\n }\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vrotr<mode>3\"\n@@ -11082,6 +11327,8 @@\n   \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n   \"prot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; SSE5 packed shift instructions.\n@@ -11135,6 +11382,8 @@\n   \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n   \"psha<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_lshl<mode>3\"\n@@ -11152,6 +11401,8 @@\n   \"TARGET_SSE5 && ix86_sse5_valid_op_p (operands, insn, 3, true, 1, false)\"\n   \"pshl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; SSE2 doesn't have some shift varients, so define versions for SSE5\n@@ -11265,7 +11516,6 @@\n   \"TARGET_SSE5\"\n   \"frcz<ssemodesuffixf4>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt1\")\n-   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; scalar insns\n@@ -11280,7 +11530,6 @@\n   \"TARGET_SSE5\"\n   \"frcz<ssemodesuffixf2s>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssecvt1\")\n-   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sse5_cvtph2ps\"\n@@ -11329,6 +11578,10 @@\n   \"TARGET_SSE5\"\n   \"com%Y1<ssemodesuffixf2s>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n ;; We don't have a comparison operator that always returns true/false, so\n@@ -11369,6 +11622,10 @@\n   return ret;\n }\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sse5_maskcmp<mode>3\"\n@@ -11379,6 +11636,10 @@\n   \"TARGET_SSE5\"\n   \"com%Y1<ssemodesuffixf4>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sse5_maskcmp<mode>3\"\n@@ -11389,6 +11650,10 @@\n   \"TARGET_SSE5\"\n   \"pcom%Y1<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse5_maskcmp_uns<mode>3\"\n@@ -11399,6 +11664,10 @@\n   \"TARGET_SSE5\"\n   \"pcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_rep\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; Version of pcom*u* that is called from the intrinsics that allows pcomequ*\n@@ -11414,6 +11683,9 @@\n   \"TARGET_SSE5\"\n   \"pcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; Pcomtrue and pcomfalse support.  These are useless instructions, but are\n@@ -11432,6 +11704,9 @@\n \t  : \"pcomfalse<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\");\n }\n   [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix_extra\" \"2\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*avx_aesenc\"\n@@ -11442,6 +11717,7 @@\n   \"TARGET_AES && TARGET_AVX\"\n   \"vaesenc\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11464,6 +11740,7 @@\n   \"TARGET_AES && TARGET_AVX\"\n   \"vaesenclast\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11486,6 +11763,7 @@\n   \"TARGET_AES && TARGET_AVX\"\n   \"vaesdec\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11508,6 +11786,7 @@\n   \"TARGET_AES && TARGET_AVX\"\n   \"vaesdeclast\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11542,6 +11821,7 @@\n   \"%vaeskeygenassist\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11554,6 +11834,8 @@\n   \"TARGET_PCLMUL && TARGET_AVX\"\n   \"vpclmulqdq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -11567,6 +11849,7 @@\n   \"pclmulqdq\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"avx_vzeroall\"\n@@ -11597,6 +11880,7 @@\n   \"TARGET_AVX\"\n   \"vzeroall\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -11615,6 +11899,7 @@\n   \"TARGET_AVX && !TARGET_64BIT\"\n   \"vzeroupper\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -11640,6 +11925,7 @@\n   \"TARGET_AVX && TARGET_64BIT\"\n   \"vzeroupper\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"modrm\" \"0\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n@@ -11653,6 +11939,8 @@\n   \"TARGET_AVX\"\n   \"vpermilp<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -11665,6 +11953,7 @@\n   \"TARGET_AVX\"\n   \"vpermilp<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -11678,6 +11967,8 @@\n   \"TARGET_AVX\"\n   \"vperm2f128\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11693,6 +11984,7 @@\n   \"TARGET_AVX\"\n   \"vbroadcasts<avxmodesuffixf2c>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxscalarmode>\")])\n \n@@ -11716,6 +12008,7 @@\n   \"TARGET_AVX\"\n   \"vbroadcastss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -11727,6 +12020,7 @@\n   \"TARGET_AVX\"\n   \"vbroadcastf128\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -11763,6 +12057,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11776,6 +12072,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11790,6 +12088,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11804,6 +12104,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11820,6 +12122,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11836,6 +12140,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11856,6 +12162,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11876,6 +12184,8 @@\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n@@ -11889,6 +12199,7 @@\n   \"TARGET_AVX\"\n   \"vmaskmovp<avxmodesuffixf2c>\\t{%1, %2, %0|%0, %2, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -11902,6 +12213,7 @@\n   \"TARGET_AVX\"\n   \"vmaskmovp<avxmodesuffixf2c>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -12012,5 +12324,7 @@\n     }\n }\n   [(set_attr \"type\" \"sselog,ssemov\")\n+   (set_attr \"prefix_extra\" \"1,*\")\n+   (set_attr \"length_immediate\" \"1,*\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])"}]}