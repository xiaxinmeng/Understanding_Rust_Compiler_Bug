{"sha": "1210105350eff9956347a4c0a3ae09d0514b81d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxMDEwNTM1MGVmZjk5NTYzNDdhNGMwYTNhZTA5ZDA1MTRiODFkMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-20T21:32:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-20T21:32:46Z"}, "message": "decl.c (grok_op_properties): Don't complain about size_t placement delete here.\n\n\t* decl.c (grok_op_properties): Don't complain about size_t\n\tplacement delete here.\n\t* call.c (second_parm_is_size_t): Split out from...\n\t(non_placement_deallocation_fn_p): ...here.\n\t(build_op_delete_call): Warn about size_t placement delete with\n\t-Wc++14-compat.\n\nFrom-SVN: r223460", "tree": {"sha": "b96971c70160c7e2f7a222ef037214dd9673be82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b96971c70160c7e2f7a222ef037214dd9673be82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1210105350eff9956347a4c0a3ae09d0514b81d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1210105350eff9956347a4c0a3ae09d0514b81d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1210105350eff9956347a4c0a3ae09d0514b81d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1210105350eff9956347a4c0a3ae09d0514b81d0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa5cc2db547120c41a1f1708039ad54b9dd171ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5cc2db547120c41a1f1708039ad54b9dd171ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5cc2db547120c41a1f1708039ad54b9dd171ea"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "320023a5ad81a86e8592e16051f218b53f3f7272", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1210105350eff9956347a4c0a3ae09d0514b81d0", "patch": "@@ -1,3 +1,12 @@\n+2015-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (grok_op_properties): Don't complain about size_t\n+\tplacement delete here.\n+\t* call.c (second_parm_is_size_t): Split out from...\n+\t(non_placement_deallocation_fn_p): ...here.\n+\t(build_op_delete_call): Warn about size_t placement delete with\n+\t-Wc++14-compat.\n+\n 2015-05-19  Nathan sidwell  <nathan@acm.org>\n \n \tPR c++/65954"}, {"sha": "bad49f15d4867e8cf75cb48d58bbb0adc3cc783d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1210105350eff9956347a4c0a3ae09d0514b81d0", "patch": "@@ -5748,6 +5748,18 @@ build_new_op (location_t loc, enum tree_code code, int flags,\n   return ret;\n }\n \n+/* Returns true if FN has two parameters, of which the second has type\n+   size_t.  */\n+\n+static bool\n+second_parm_is_size_t (tree fn)\n+{\n+  tree t = FUNCTION_ARG_CHAIN (fn);\n+  return (t\n+\t  && same_type_p (TREE_VALUE (t), size_type_node)\n+\t  && TREE_CHAIN (t) == void_list_node);\n+}\n+\n /* Returns true iff T, an element of an OVERLOAD chain, is a usual\n    deallocation function (3.7.4.2 [basic.stc.dynamic.deallocation]).  */\n \n@@ -5768,11 +5780,9 @@ non_placement_deallocation_fn_p (tree t)\n      of which has type std::size_t (18.2), then this function is a usual\n      deallocation function.  */\n   bool global = DECL_NAMESPACE_SCOPE_P (t);\n-  t = FUNCTION_ARG_CHAIN (t);\n-  if (t == void_list_node\n-      || (t && same_type_p (TREE_VALUE (t), size_type_node)\n-\t  && (!global || flag_sized_deallocation)\n-\t  && TREE_CHAIN (t) == void_list_node))\n+  if (FUNCTION_ARG_CHAIN (t) == void_list_node\n+      || ((!global || flag_sized_deallocation)\n+\t  && second_parm_is_size_t (t)))\n     return true;\n   return false;\n }\n@@ -5859,23 +5869,49 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t function (3.7.4.2) and that function, considered as a placement\n \t deallocation function, would have been selected as a match for the\n \t allocation function, the program is ill-formed.\"  */\n-      if (non_placement_deallocation_fn_p (fn))\n+      if (second_parm_is_size_t (fn))\n \t{\n+\t  const char *msg1\n+\t    = G_(\"exception cleanup for this placement new selects \"\n+\t\t \"non-placement operator delete\");\n+\t  const char *msg2\n+\t    = G_(\"%q+D is a usual (non-placement) deallocation \"\n+\t\t \"function in C++14 (or with -fsized-deallocation)\");\n+\n \t  /* But if the class has an operator delete (void *), then that is\n \t     the usual deallocation function, so we shouldn't complain\n \t     about using the operator delete (void *, size_t).  */\n-\t  for (t = BASELINK_P (fns) ? BASELINK_FUNCTIONS (fns) : fns;\n-\t       t; t = OVL_NEXT (t))\n+\t  if (DECL_CLASS_SCOPE_P (fn))\n+\t    for (t = BASELINK_P (fns) ? BASELINK_FUNCTIONS (fns) : fns;\n+\t\t t; t = OVL_NEXT (t))\n+\t      {\n+\t\ttree elt = OVL_CURRENT (t);\n+\t\tif (non_placement_deallocation_fn_p (elt)\n+\t\t    && FUNCTION_ARG_CHAIN (elt) == void_list_node)\n+\t\t  goto ok;\n+\t      }\n+\t  /* Before C++14 a two-parameter global deallocation function is\n+\t     always a placement deallocation function, but warn if\n+\t     -Wc++14-compat.  */\n+\t  else if (!flag_sized_deallocation)\n \t    {\n-\t      tree elt = OVL_CURRENT (t);\n-\t      if (non_placement_deallocation_fn_p (elt)\n-\t\t  && FUNCTION_ARG_CHAIN (elt) == void_list_node)\n-\t\tgoto ok;\n+\t      if ((complain & tf_warning)\n+\t\t  && warning (OPT_Wc__14_compat, msg1))\n+\t\tinform (0, msg2, fn);\n+\t      goto ok;\n \t    }\n-\t  if (complain & tf_error)\n+\n+\t  if (complain & tf_warning_or_error)\n \t    {\n-\t      permerror (0, \"non-placement deallocation function %q+D\", fn);\n-\t      permerror (input_location, \"selected for placement delete\");\n+\t      if (permerror (input_location, msg1))\n+\t\t{\n+\t\t  /* Only mention C++14 for namespace-scope delete.  */\n+\t\t  if (DECL_NAMESPACE_SCOPE_P (fn))\n+\t\t    inform (0, msg2, fn);\n+\t\t  else\n+\t\t    inform (0, \"%q+D is a usual (non-placement) deallocation \"\n+\t\t\t    \"function\", fn);\n+\t\t}\n \t    }\n \t  else\n \t    return error_mark_node;"}, {"sha": "e4d3c1db6965f48ef2772bdf138401d0b5185b16", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1210105350eff9956347a4c0a3ae09d0514b81d0", "patch": "@@ -11767,16 +11767,6 @@ grok_op_properties (tree decl, bool complain)\n \t      error (\"%qD may not be declared as static\", decl);\n \t      return false;\n \t    }\n-\t  if (!flag_sized_deallocation && warn_cxx14_compat)\n-\t    {\n-\t      tree parm = FUNCTION_ARG_CHAIN (decl);\n-\t      if (parm && same_type_p (TREE_VALUE (parm), size_type_node)\n-\t\t  && TREE_CHAIN (parm) == void_list_node)\n-\t\twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc__14_compat,\n-\t\t\t    \"%qD is a usual (non-placement) deallocation \"\n-\t\t\t    \"function in C++14 (or with -fsized-deallocation)\",\n-\t\t\t    decl);\n-\t    }\n \t}\n     }\n "}, {"sha": "0a76cdccd3294e0cee9fc682a0d0cd54c052a175", "filename": "gcc/testsuite/g++.dg/cpp1y/sized-dealloc2.C", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsized-dealloc2.C?ref=1210105350eff9956347a4c0a3ae09d0514b81d0", "patch": "@@ -1,5 +1,26 @@\n-// Test that -Wc++14-compat warns about the change in meaning.\n-// { dg-options \"-Wall\" }\n+// Test for a diagnostic about a usual deallocation function used as a\n+// placement deallocation function.  This will be a warning in C++98/11\n+// modes and an error in C++14 mode.\n \n-typedef __SIZE_TYPE__ size_t;\n-void operator delete[] (void *p, size_t s) throw(); // { dg-warning \"usual\" \"\" { target { ! c++14 } } }\n+// { dg-options \"-Wc++14-compat\" }\n+\n+#include <new>\n+void *operator new (std::size_t s, std::size_t)\n+{\n+  return operator new (s);\n+}\n+\n+void operator delete (void *p, std::size_t) throw()\n+{\n+  return ::operator delete (p);\n+}\n+\n+struct A\n+{\n+  A();\n+};\n+\n+void f()\n+{\n+  new (42) A;\t\t// { dg-message \"\" }\n+}"}, {"sha": "c9f2ea54eb50c57e39dc9ed0df05519e8923123d", "filename": "gcc/testsuite/g++.dg/init/placement5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1210105350eff9956347a4c0a3ae09d0514b81d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement5.C?ref=1210105350eff9956347a4c0a3ae09d0514b81d0", "patch": "@@ -13,7 +13,7 @@ struct A\n {\n   A();\n   void* operator new (size_t, size_t);\n-  void operator delete (void *, size_t); // { dg-error \"non-placement\" }\n+  void operator delete (void *, size_t); // { dg-message \"non-placement\" }\n };\n \n struct B\n@@ -27,6 +27,6 @@ struct B\n \n int main()\n {\n-  A* ap = new (24) A;\t\t// { dg-error \"placement delete\" }\n+  A* ap = new (24) A;\t\t// { dg-error \"placement\" }\n   B* bp = new (24) B;\n }"}]}