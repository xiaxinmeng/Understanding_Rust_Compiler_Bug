{"sha": "6448f0645b918b340f8b01c60b10af8409c51b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ0OGYwNjQ1YjkxOGIzNDBmOGIwMWM2MGIxMGFmODQwOWM1MWI1Ng==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-02-19T10:37:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-19T10:37:19Z"}, "message": "S/390: z13 Change predicates of 128 bit add sub.\n\nSo far usage of 128 bit add/sub instruction was rejected if the second\noperand was a constant because the predicate rejected this.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/vector/int128-1.c: New test.\n\ngcc/ChangeLog:\n\n\t* config/s390/vector.md (\"<ti*>add<mode>3\", \"<ti*>sub<mode>3\"):\n\tChange the predicate of op2 from nonimmediate to general and let\n\treload fix it if necessary.\n\nFrom-SVN: r233554", "tree": {"sha": "2d37927338dd278f44747b6341b38d70a4dbce4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d37927338dd278f44747b6341b38d70a4dbce4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6448f0645b918b340f8b01c60b10af8409c51b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6448f0645b918b340f8b01c60b10af8409c51b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6448f0645b918b340f8b01c60b10af8409c51b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6448f0645b918b340f8b01c60b10af8409c51b56/comments", "author": null, "committer": null, "parents": [{"sha": "ece33b1b76e5de7fd5c305bf602702f42f1e8bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece33b1b76e5de7fd5c305bf602702f42f1e8bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece33b1b76e5de7fd5c305bf602702f42f1e8bb7"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "471a01bc5dd1c4294e655f855075d0c1ecde43b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6448f0645b918b340f8b01c60b10af8409c51b56", "patch": "@@ -1,3 +1,9 @@\n+2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vector.md (\"<ti*>add<mode>3\", \"<ti*>sub<mode>3\"):\n+\tChange the predicate of op2 from nonimmediate to general and let\n+\treload fix it if necessary.\n+\n 2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vecintrin.h (vec_sub_u128): Define missing macro."}, {"sha": "cdb9ba61a73be5875fe9525914c79aeceb6f9e32", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=6448f0645b918b340f8b01c60b10af8409c51b56", "patch": "@@ -454,7 +454,7 @@\n (define_insn \"<ti*>add<mode>3\"\n   [(set (match_operand:VIT           0 \"nonimmediate_operand\" \"=v\")\n \t(plus:VIT (match_operand:VIT 1 \"nonimmediate_operand\"  \"v\")\n-\t\t  (match_operand:VIT 2 \"nonimmediate_operand\"  \"v\")))]\n+\t\t  (match_operand:VIT 2 \"general_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"va<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -463,7 +463,7 @@\n (define_insn \"<ti*>sub<mode>3\"\n   [(set (match_operand:VIT            0 \"nonimmediate_operand\" \"=v\")\n \t(minus:VIT (match_operand:VIT 1 \"nonimmediate_operand\"  \"v\")\n-\t\t   (match_operand:VIT 2 \"nonimmediate_operand\"  \"v\")))]\n+\t\t   (match_operand:VIT 2 \"general_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vs<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])"}, {"sha": "4a0dbabb3b711677c4a0de8eb7ba96f930c1cb7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6448f0645b918b340f8b01c60b10af8409c51b56", "patch": "@@ -1,3 +1,7 @@\n+2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/int128-1.c: New test.\n+\n 2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vector/vec-vcond-1.c: New test."}, {"sha": "b4a16b8bc31826f11ed22694e4766a6adffa4a4c", "filename": "gcc/testsuite/gcc.target/s390/vector/int128-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fint128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6448f0645b918b340f8b01c60b10af8409c51b56/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fint128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fint128-1.c?ref=6448f0645b918b340f8b01c60b10af8409c51b56", "patch": "@@ -0,0 +1,47 @@\n+/* Check that vaq/vsq are used for int128 operations.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+\n+const __int128 c = (__int128)0x0123456789abcd55 + ((__int128)7 << 64);\n+\n+\n+__int128\n+addreg(__int128 a, __int128 b)\n+{\n+  return a + b;\n+}\n+\n+__int128\n+addconst(__int128 a)\n+{\n+  return a + c;\n+}\n+\n+__int128\n+addmem(__int128 *a, __int128_t *b)\n+{\n+  return *a + *b;\n+}\n+\n+__int128\n+subreg(__int128 a, __int128 b)\n+{\n+  return a - b;\n+}\n+\n+__int128\n+subconst(__int128 a)\n+{\n+  return a - c; /* This becomes vaq as well.  */\n+}\n+\n+__int128\n+submem(__int128 *a, __int128_t *b)\n+{\n+  return *a - *b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vsq\" 2 } } */"}]}