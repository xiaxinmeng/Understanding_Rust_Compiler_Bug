{"sha": "7e22a38c2f5f173ac220cd9ec70b55ce08243797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMmEzOGMyZjVmMTczYWMyMjBjZDllYzcwYjU1Y2UwODI0Mzc5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:10:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:10:32Z"}, "message": "[multiple changes]\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Rep_Item_Too_Late): Better error message for\n\tan illegal aspect that freezes the entity to which it applies.\n\n2016-04-20  Bob Duff  <duff@adacore.com>\n\n\t* a-stwibo.ads, a-stzbou.ads\n\t(\"=\"): Add overriding keyword before function to avoid crash when\n\tcompiler is called with -gnatyO (check overriding indicators).\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Check_Policy):  If this\n\tis a configuration pragma and it uses the ARG syntax, insert\n\tthe rewritten pragma after the current one rather than using\n\tInsert_Actions.\n\n2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb (Backend_Processing_Possible): Add handling of\n\tC back-end.\n\nFrom-SVN: r235253", "tree": {"sha": "918e410cb893da0e81e3563fff774beb29062ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/918e410cb893da0e81e3563fff774beb29062ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e22a38c2f5f173ac220cd9ec70b55ce08243797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e22a38c2f5f173ac220cd9ec70b55ce08243797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e22a38c2f5f173ac220cd9ec70b55ce08243797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e22a38c2f5f173ac220cd9ec70b55ce08243797/comments", "author": null, "committer": null, "parents": [{"sha": "b83dd5ecea2899fc6220aa8be8f999ed61a6b62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83dd5ecea2899fc6220aa8be8f999ed61a6b62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83dd5ecea2899fc6220aa8be8f999ed61a6b62f"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "c6f1e67ed9a369d174ee372533510d91d6034067", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -1,3 +1,26 @@\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Rep_Item_Too_Late): Better error message for\n+\tan illegal aspect that freezes the entity to which it applies.\n+\n+2016-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-stwibo.ads, a-stzbou.ads\n+\t(\"=\"): Add overriding keyword before function to avoid crash when\n+\tcompiler is called with -gnatyO (check overriding indicators).\n+\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Check_Policy):  If this\n+\tis a configuration pragma and it uses the ARG syntax, insert\n+\tthe rewritten pragma after the current one rather than using\n+\tInsert_Actions.\n+\n+2016-04-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Backend_Processing_Possible): Add handling of\n+\tC back-end.\n+\n 2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* s-imgllu.adb, sem_util.adb, s-imgint.adb, s-imguns.adb,"}, {"sha": "3d098b3d4d08ac56e3a1104ee37d3515e554ab34", "filename": "gcc/ada/a-stwibo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fa-stwibo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fa-stwibo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwibo.ads?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -609,7 +609,7 @@ package Ada.Strings.Wide_Bounded is\n          High   : Natural)\n          renames Super_Slice;\n \n-      function \"=\"\n+      overriding function \"=\"\n         (Left  : Bounded_Wide_String;\n          Right : Bounded_Wide_String) return Boolean\n          renames Equal;"}, {"sha": "d7d3f52f2e7ce7666249832a338d6c92e55d67a2", "filename": "gcc/ada/a-stzbou.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fa-stzbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fa-stzbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzbou.ads?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -618,7 +618,7 @@ package Ada.Strings.Wide_Wide_Bounded is\n          High   : Natural)\n          renames Super_Slice;\n \n-      function \"=\"\n+      overriding function \"=\"\n         (Left  : Bounded_Wide_Wide_String;\n          Right : Bounded_Wide_Wide_String) return Boolean\n          renames Equal;"}, {"sha": "bd757cd1040700954679c5b5dc70a92c579f3e5c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -545,6 +545,8 @@ package body Exp_Aggr is\n \n    --   10. No controlled actions need to be generated for components\n \n+   --   11. When generating C code, N must be part of a N_Object_Declaration\n+\n    function Backend_Processing_Possible (N : Node_Id) return Boolean is\n       Typ : constant Entity_Id := Etype (N);\n       --  Typ is the correct constrained array subtype of the aggregate\n@@ -569,6 +571,17 @@ package body Exp_Aggr is\n             return False;\n          end if;\n \n+         --  Checks 11: (part of an object declaration)\n+\n+         if Generate_C_Code\n+           and then Nkind (Parent (N)) /= N_Object_Declaration\n+           and then\n+             (Nkind (Parent (N)) /= N_Qualified_Expression\n+               or else Nkind (Parent (Parent (N))) /= N_Object_Declaration)\n+         then\n+            return False;\n+         end if;\n+\n          --  Checks on components\n \n          --  Recurse to check subaggregates, which may appear in qualified"}, {"sha": "77909a6f542b2d95e12f5ba741589fa58e098abd", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -12286,6 +12286,18 @@ package body Sem_Ch13 is\n \n         and then Comes_From_Source (T)\n       then\n+         --  A self-referential aspect is illegal if it forces freezing the\n+         --  entity before the corresponding pragma has been analyzed.\n+\n+         if Nkind_In (N, N_Attribute_Definition_Clause, N_Pragma)\n+           and then From_Aspect_Specification (N)\n+         then\n+            Error_Msg_NE\n+              (\"aspect specification causes premature freezing of&\", T, N);\n+            Set_Has_Delayed_Freeze (T, False);\n+            return True;\n+         end if;\n+\n          Too_Late;\n          S := First_Subtype (T);\n "}, {"sha": "c538cafa837ad7d3904da17b1e5d961eba8ed172", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e22a38c2f5f173ac220cd9ec70b55ce08243797/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7e22a38c2f5f173ac220cd9ec70b55ce08243797", "patch": "@@ -12504,9 +12504,10 @@ package body Sem_Prag is\n \n             else\n                declare\n-                  Arg  : Node_Id;\n-                  Argx : Node_Id;\n-                  LocP : Source_Ptr;\n+                  Arg   : Node_Id;\n+                  Argx  : Node_Id;\n+                  LocP  : Source_Ptr;\n+                  New_P : Node_Id;\n \n                begin\n                   Arg := Arg1;\n@@ -12526,17 +12527,28 @@ package body Sem_Prag is\n                      --  Construct equivalent old form syntax Check_Policy\n                      --  pragma and insert it to get remaining checks.\n \n-                     Insert_Action (N,\n+                     New_P :=\n                        Make_Pragma (LocP,\n                          Chars                        => Name_Check_Policy,\n                          Pragma_Argument_Associations => New_List (\n                            Make_Pragma_Argument_Association (LocP,\n                              Expression =>\n                                Make_Identifier (LocP, Chars (Arg))),\n                            Make_Pragma_Argument_Association (Sloc (Argx),\n-                             Expression => Argx))));\n+                             Expression => Argx)));\n \n                      Arg := Next (Arg);\n+\n+                     --  For a configuration pragma, insert old form in\n+                     --  the corresponding file.\n+\n+                     if Is_Configuration_Pragma then\n+                        Insert_After (N, New_P);\n+                        Analyze (New_P);\n+\n+                     else\n+                        Insert_Action (N, New_P);\n+                     end if;\n                   end loop;\n \n                   --  Rewrite original Check_Policy pragma to null, since we"}]}