{"sha": "8f8d8d6e320ab3397382c296a5eb42258261acaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4ZDhkNmUzMjBhYjMzOTczODJjMjk2YTVlYjQyMjU4MjYxYWNhZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-03T06:47:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-03T06:47:28Z"}, "message": "combine.c (simplify_shift_const): Even if we're sign-extracting...\n\n* combine.c (simplify_shift_const): Even if we're sign-extracting,\ndon't discard an ASHIFTRT if we're shifting in a wider mode.\n\nFrom-SVN: r38648", "tree": {"sha": "157df1eceb81850325d76e07e3aa784b3de13715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/157df1eceb81850325d76e07e3aa784b3de13715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8d8d6e320ab3397382c296a5eb42258261acaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8d8d6e320ab3397382c296a5eb42258261acaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8d8d6e320ab3397382c296a5eb42258261acaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8d8d6e320ab3397382c296a5eb42258261acaf/comments", "author": null, "committer": null, "parents": [{"sha": "232a132fd6cf2bdcc637c241d37ae9f3a763861f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232a132fd6cf2bdcc637c241d37ae9f3a763861f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232a132fd6cf2bdcc637c241d37ae9f3a763861f"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "6f16cc21b2cad39df540e36daf6089f1c3d40b6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d8d6e320ab3397382c296a5eb42258261acaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d8d6e320ab3397382c296a5eb42258261acaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f8d8d6e320ab3397382c296a5eb42258261acaf", "patch": "@@ -1,3 +1,8 @@\n+2001-01-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* combine.c (simplify_shift_const): Even if we're sign-extracting,\n+\tdon't discard an ASHIFTRT if we're shifting in a wider mode.\n+\n 2000-01-02  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* toplev.c (rest_of_compilation): Don't print basic block information"}, {"sha": "23a31eda05dcb94e7af7c17c6c4c62a012a55d06", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d8d6e320ab3397382c296a5eb42258261acaf/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d8d6e320ab3397382c296a5eb42258261acaf/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8f8d8d6e320ab3397382c296a5eb42258261acaf", "patch": "@@ -1,6 +1,6 @@\n /* Optimize by combining instructions for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -9130,9 +9130,14 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n \t  break;\n \n \tcase ASHIFTRT:\n-\t  /* If we are extracting just the sign bit of an arithmetic right\n-\t     shift, that shift is not needed.  */\n-\t  if (code == LSHIFTRT && count == GET_MODE_BITSIZE (result_mode) - 1)\n+\t  /* If we are extracting just the sign bit of an arithmetic\n+\t     right shift, that shift is not needed.  However, the sign\n+\t     bit of a wider mode may be different from what would be\n+\t     interpreted as the sign bit in a narrower mode, so, if\n+\t     the result is narrower, don't discard the shift.  */\n+\t  if (code == LSHIFTRT && count == GET_MODE_BITSIZE (result_mode) - 1\n+\t      && (GET_MODE_BITSIZE (result_mode)\n+\t\t  >= GET_MODE_BITSIZE (GET_MODE (varop))))\n \t    {\n \t      varop = XEXP (varop, 0);\n \t      continue;"}]}