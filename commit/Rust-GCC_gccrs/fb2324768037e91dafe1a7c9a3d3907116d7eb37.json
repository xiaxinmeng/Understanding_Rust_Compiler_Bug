{"sha": "fb2324768037e91dafe1a7c9a3d3907116d7eb37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyMzI0NzY4MDM3ZTkxZGFmZTFhN2M5YTNkMzkwNzExNmQ3ZWIzNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-07-20T15:36:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-07-20T15:36:08Z"}, "message": "re PR c++/16623 (g++ ICE in tsubst_decl:6081)\n\n\tPR c++/16623\n\t* cp-tree.h (lang_type_class): Add lazy_assignment_op.\n\t(CLASSTYPE_LAZY_ASSIGNMENT_OP): New macro.\n\t* class.c (add_implicitly_declared_members): Use\n\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n\t* method.c (lazily_declare_fn): Clear\n\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n\t* search.c (lookup_fnfields_1): Check it.\n\nFrom-SVN: r84956", "tree": {"sha": "18b5792a881ad5765f15277372efc134e41fc1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b5792a881ad5765f15277372efc134e41fc1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2324768037e91dafe1a7c9a3d3907116d7eb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2324768037e91dafe1a7c9a3d3907116d7eb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2324768037e91dafe1a7c9a3d3907116d7eb37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2324768037e91dafe1a7c9a3d3907116d7eb37/comments", "author": null, "committer": null, "parents": [{"sha": "bd65c56456f835eb23e7dcb11fac24c18bdf1133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd65c56456f835eb23e7dcb11fac24c18bdf1133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd65c56456f835eb23e7dcb11fac24c18bdf1133"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "2cf92d0a43547cd43c799ca1154a23841fcd012f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb2324768037e91dafe1a7c9a3d3907116d7eb37", "patch": "@@ -1,3 +1,14 @@\n+2004-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16623\n+\t* cp-tree.h (lang_type_class): Add lazy_assignment_op.\n+\t(CLASSTYPE_LAZY_ASSIGNMENT_OP): New macro.\n+\t* class.c (add_implicitly_declared_members): Use\n+\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n+\t* method.c (lazily_declare_fn): Clear\n+\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n+\t* search.c (lookup_fnfields_1): Check it.\n+\n 2004-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (vec_binfo_member): Remove."}, {"sha": "0274ca9fc4cd23b9586d4c88e237ee8a91f21464", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fb2324768037e91dafe1a7c9a3d3907116d7eb37", "patch": "@@ -2533,7 +2533,11 @@ add_implicitly_declared_members (tree t,\n      of the parameter to the assignment operator will be a const or\n      non-const reference.  */\n   if (!TYPE_HAS_ASSIGN_REF (t) && !TYPE_FOR_JAVA (t))\n-    TYPE_HAS_CONST_ASSIGN_REF (t) = !cant_have_const_assignment;\n+    {\n+      TYPE_HAS_ASSIGN_REF (t) = 1;\n+      TYPE_HAS_CONST_ASSIGN_REF (t) = !cant_have_const_assignment;\n+      CLASSTYPE_LAZY_ASSIGNMENT_OP (t) = 1;\n+    }\n   \n   /* Now, hook all of the new functions on to TYPE_METHODS,\n      and add them to the CLASSTYPE_METHOD_VEC.  */"}, {"sha": "097295d937d675bdc44340c3805af2b108a3bb13", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fb2324768037e91dafe1a7c9a3d3907116d7eb37", "patch": "@@ -987,6 +987,7 @@ struct lang_type_class GTY(())\n \n   unsigned lazy_default_ctor : 1;\n   unsigned lazy_copy_ctor : 1;\n+  unsigned lazy_assignment_op : 1;\n   unsigned has_const_init_ref : 1;\n   unsigned has_complex_init_ref : 1;\n   unsigned has_complex_assign_ref : 1;\n@@ -1000,7 +1001,7 @@ struct lang_type_class GTY(())\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 9;\n+  unsigned dummy : 8;\n \n   tree primary_base;\n   tree vcall_indices;\n@@ -1094,6 +1095,11 @@ struct lang_type GTY(())\n #define CLASSTYPE_LAZY_COPY_CTOR(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->lazy_copy_ctor)\n \n+/* Nonzero means that NODE (a class type) has an assignment operator\n+   -- but that it has not yet been declared.  */\n+#define CLASSTYPE_LAZY_ASSIGNMENT_OP(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->lazy_assignment_op)\n+\n /* Nonzero means that this _CLASSTYPE node overloads operator=(X&).  */\n #define TYPE_HAS_ASSIGN_REF(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_assign_ref)\n "}, {"sha": "d2d52bbf0b9cefaacbf8330f9e169e70c3742f66", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fb2324768037e91dafe1a7c9a3d3907116d7eb37", "patch": "@@ -1064,6 +1064,8 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n       /* Create appropriate clones.  */\n       clone_function_decl (fn, /*update_method_vec=*/true);\n     }\n+  else if (sfk == sfk_assignment_operator)\n+    CLASSTYPE_LAZY_ASSIGNMENT_OP (type) = 0;\n \n   return fn;\n }"}, {"sha": "63cb6391e1a97da51b2a1b3ba0ed4e62fc65c825", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2324768037e91dafe1a7c9a3d3907116d7eb37/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=fb2324768037e91dafe1a7c9a3d3907116d7eb37", "patch": "@@ -1367,8 +1367,7 @@ lookup_fnfields_1 (tree type, tree name)\n \t    lazily_declare_fn (sfk_copy_constructor, type);\n \t}\n       else if (name == ansi_assopname(NOP_EXPR)\n-\t       && !TYPE_HAS_ASSIGN_REF (type)\n-\t       && !TYPE_FOR_JAVA (type))\n+\t       && CLASSTYPE_LAZY_ASSIGNMENT_OP (type))\n \tlazily_declare_fn (sfk_assignment_operator, type);\n     }\n "}]}