{"sha": "e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "node_id": "C_kwDOANBUbNoAKGU4YmM2OTE4YjMxZTYzZmNhZWJlMWU5ZGQ2NGUwMTU3ZDU0ZjFiN2E", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-01T23:30:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-01T23:30:15Z"}, "message": "c: improvements to address space diagnostics\n\nThis adds a clarifying \"note\" to address space mismatch diagnostics.\nFor example, it improves the diagnostic for\ngcc.target/i386/addr-space-typeck-2.c from:\n\naddr-space-typeck-2.c: In function 'test_bad_call':\naddr-space-typeck-2.c:12:22: error: passing argument 2 of 'expects_seg_gs'\n  from pointer to non-enclosed address space\n   12 |   expects_seg_gs (0, ptr, 1);\n      |                      ^~~\n\nto:\n\naddr-space-typeck-2.c: In function 'test_bad_call':\naddr-space-typeck-2.c:12:22: error: passing argument 2 of 'expects_seg_gs'\n  from pointer to non-enclosed address space\n   12 |   expects_seg_gs (0, ptr, 1);\n      |                      ^~~\naddr-space-typeck-2.c:7:51: note: expected '__seg_gs void *' but argument\n  is of type 'void *'\n    7 | extern void expects_seg_gs (int i, void __seg_gs *param, int j);\n      |                                    ~~~~~~~~~~~~~~~^~~~~\n\nI took the liberty of adding the test coverage to i386 since we need\na specific target to test this on.\n\ngcc/c/ChangeLog:\n\t* c-typeck.cc (build_c_cast): Quote names of address spaces in\n\tdiagnostics.\n\t(convert_for_assignment): Add a note to address space mismatch\n\tdiagnostics, specifying the expected and actual types.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/addr-space-typeck-1.c: New test.\n\t* gcc.target/i386/addr-space-typeck-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "8eff89565ceb891b5ece8594feae015e378d6722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eff89565ceb891b5ece8594feae015e378d6722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd12be1394a49b734c51d2fee60584c66ff2f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd12be1394a49b734c51d2fee60584c66ff2f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd12be1394a49b734c51d2fee60584c66ff2f05"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "8514488b7a55e0b666732ce1cddf44b500117748", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "patch": "@@ -6032,18 +6032,18 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t  if (!addr_space_superset (as_to, as_from, &as_common))\n \t    {\n \t      if (ADDR_SPACE_GENERIC_P (as_from))\n-\t\twarning_at (loc, 0, \"cast to %s address space pointer \"\n+\t\twarning_at (loc, 0, \"cast to %qs address space pointer \"\n \t\t\t    \"from disjoint generic address space pointer\",\n \t\t\t    c_addr_space_name (as_to));\n \n \t      else if (ADDR_SPACE_GENERIC_P (as_to))\n \t\twarning_at (loc, 0, \"cast to generic address space pointer \"\n-\t\t\t    \"from disjoint %s address space pointer\",\n+\t\t\t    \"from disjoint %qs address space pointer\",\n \t\t\t    c_addr_space_name (as_from));\n \n \t      else\n-\t\twarning_at (loc, 0, \"cast to %s address space pointer \"\n-\t\t\t    \"from disjoint %s address space pointer\",\n+\t\twarning_at (loc, 0, \"cast to %qs address space pointer \"\n+\t\t\t    \"from disjoint %qs address space pointer\",\n \t\t\t    c_addr_space_name (as_to),\n \t\t\t    c_addr_space_name (as_from));\n \t    }\n@@ -7252,14 +7252,17 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       if (!null_pointer_constant_p (rhs)\n \t  && asr != asl && !targetm.addr_space.subset_p (asr, asl))\n \t{\n+\t  auto_diagnostic_group d;\n+\t  bool diagnosed = true;\n \t  switch (errtype)\n \t    {\n \t    case ic_argpass:\n \t      {\n \t\tconst char msg[] = G_(\"passing argument %d of %qE from \"\n \t\t\t\t      \"pointer to non-enclosed address space\");\n \t\tif (warnopt)\n-\t\t  warning_at (expr_loc, warnopt, msg, parmnum, rname);\n+\t\t  diagnosed\n+\t\t    = warning_at (expr_loc, warnopt, msg, parmnum, rname);\n \t\telse\n \t\t  error_at (expr_loc, msg, parmnum, rname);\n \t      break;\n@@ -7269,7 +7272,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\tconst char msg[] = G_(\"assignment from pointer to \"\n \t\t\t\t      \"non-enclosed address space\");\n \t\tif (warnopt)\n-\t\t  warning_at (location, warnopt, msg);\n+\t\t  diagnosed = warning_at (location, warnopt, msg);\n \t\telse\n \t\t  error_at (location, msg);\n \t\tbreak;\n@@ -7280,7 +7283,7 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\tconst char msg[] = G_(\"initialization from pointer to \"\n \t\t\t\t      \"non-enclosed address space\");\n \t\tif (warnopt)\n-\t\t  warning_at (location, warnopt, msg);\n+\t\t  diagnosed = warning_at (location, warnopt, msg);\n \t\telse\n \t\t  error_at (location, msg);\n \t\tbreak;\n@@ -7290,14 +7293,22 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\tconst char msg[] = G_(\"return from pointer to \"\n \t\t\t\t      \"non-enclosed address space\");\n \t\tif (warnopt)\n-\t\t  warning_at (location, warnopt, msg);\n+\t\t  diagnosed = warning_at (location, warnopt, msg);\n \t\telse\n \t\t  error_at (location, msg);\n \t\tbreak;\n \t      }\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n+\t  if (diagnosed)\n+\t    {\n+\t      if (errtype == ic_argpass)\n+\t\tinform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t      else\n+\t\tinform (location, \"expected %qT but pointer is of type %qT\",\n+\t\t\ttype, rhstype);\n+\t    }\n \t  return error_mark_node;\n \t}\n "}, {"sha": "84d27b03ef9ea9cc0fda5b0850cf20ef58bec4f3", "filename": "gcc/testsuite/gcc.target/i386/addr-space-typeck-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-1.c?ref=e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-std=gnu90\" } */\n+\n+void *\n+test_gs_to_generic (void __seg_gs *p)\n+{\n+  return p; /* { dg-error \"return from pointer to non-enclosed address space\" \"error\" } */\n+  /* { dg-message \"expected 'void \\\\*' but pointer is of type '__seg_gs void \\\\*'\" \"note\" { target *-*-* } .-1 } */\n+}\n+\n+void __seg_gs *\n+test_generic_to_gs (void *q)\n+{\n+  return q; /* { dg-error \"return from pointer to non-enclosed address space\" \"error\" } */\n+  /* { dg-message \"expected '__seg_gs void \\\\*' but pointer is of type 'void \\\\*'\" \"note\" { target *-*-* } .-1 } */\n+}\n+\n+extern void use_double_deref (char __seg_gs **buffer);\n+\n+void test_double_deref (char __seg_gs *buf)\n+{\n+  use_double_deref (&buf);\n+}"}, {"sha": "d9fb9a7a8ab5c978012e4da36e021d08a7e1383b", "filename": "gcc/testsuite/gcc.target/i386/addr-space-typeck-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faddr-space-typeck-2.c?ref=e8bc6918b31e63fcaebe1e9dd64e0157d54f1b7a", "patch": "@@ -0,0 +1,25 @@\n+/* Tests of C frontend's address space type-checking.  */\n+/* { dg-options \"-std=gnu90 -fdiagnostics-show-caret\" } */\n+\n+/* Verify that we emit helpful diagnostics at a mismatching address space\n+   at a function call, and that the underlined locations are correct.  */\n+\n+extern void expects_seg_gs (int i, void __seg_gs *param, int j); /* { dg-line \"decl_line\" } */\n+\n+void\n+test_bad_call (void *ptr)\n+{\n+  expects_seg_gs (0, ptr, 1); /* { dg-line \"err_line\" } */\n+}\n+\n+/* { dg-error \"passing argument 2 of 'expects_seg_gs' from pointer to non-enclosed address space\" \"\" { target *-*-* } err_line } */\n+/* { dg-begin-multiline-output \"\" }\n+   expects_seg_gs (0, ptr, 1);\n+                      ^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+/* { dg-message \"expected '__seg_gs void \\\\*' but argument is of type 'void \\\\*'\" \"\" { target *-*-* } decl_line } */\n+/* { dg-begin-multiline-output \"\" }\n+ extern void expects_seg_gs (int i, void __seg_gs *param, int j);\n+                                    ~~~~~~~~~~~~~~~^~~~~\n+   { dg-end-multiline-output \"\" } */"}]}