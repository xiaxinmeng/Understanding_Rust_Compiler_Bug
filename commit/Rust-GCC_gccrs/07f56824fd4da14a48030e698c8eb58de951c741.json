{"sha": "07f56824fd4da14a48030e698c8eb58de951c741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmNTY4MjRmZDRkYTE0YTQ4MDMwZTY5OGM4ZWI1OGRlOTUxYzc0MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-05T19:50:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-05T21:27:00Z"}, "message": "c++: reinterpret_cast from prvalue to rvalue ref [PR98440]\n\nIn r260622 I allowed this under the general principle that [basic.lval]\n\"Whenever a prvalue appears as an operand of an operator that expects a\nglvalue for that operand, the temporary materialization conversion (7.3.4)\nis applied to convert the expression to an xvalue.\"  But\n[expr.reinterpret.cast] specifically excludes creating a temporary in this\ncase.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98440\n\t* typeck.c (build_reinterpret_cast_1): Don't perform\n\ttemporary materialization.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/rv-cast6.C: Expect reinterpret_cast error.\n\t* g++.dg/cpp0x/reinterpret_cast2.C: Adjust message.\n\t* g++.old-deja/g++.jason/rvalue3.C: Likewise.", "tree": {"sha": "250ead25b891f8a61b1f898b7d0f32d2f9c09555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250ead25b891f8a61b1f898b7d0f32d2f9c09555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07f56824fd4da14a48030e698c8eb58de951c741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f56824fd4da14a48030e698c8eb58de951c741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f56824fd4da14a48030e698c8eb58de951c741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f56824fd4da14a48030e698c8eb58de951c741/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4c41147a41d08a74990eafe69a1064a3c13435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4c41147a41d08a74990eafe69a1064a3c13435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4c41147a41d08a74990eafe69a1064a3c13435"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "8535ecc2d93824662324ead2a90ca6d0244d8612", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07f56824fd4da14a48030e698c8eb58de951c741", "patch": "@@ -7938,22 +7938,18 @@ build_reinterpret_cast_1 (location_t loc, tree type, tree expr,\n     type = cv_unqualified (type);\n \n   /* [expr.reinterpret.cast]\n-     A glvalue expression of type T1 can be cast to the type\n+     A glvalue of type T1, designating an object x, can be cast to the type\n      \"reference to T2\" if an expression of type \"pointer to T1\" can be\n-     explicitly converted to the type \"pointer to T2\" using a\n-     reinterpret_cast.  */\n+     explicitly converted to the type \"pointer to T2\" using a reinterpret_cast.\n+     The result is that of *reinterpret_cast<T2 *>(p) where p is a pointer to x\n+     of type \"pointer to T1\". No temporary is created, no copy is made, and no\n+     constructors (11.4.4) or conversion functions (11.4.7) are called.  */\n   if (TYPE_REF_P (type))\n     {\n-      if (TYPE_REF_IS_RVALUE (type) && !VOID_TYPE_P (intype))\n-\t{\n-\t  if (!obvalue_p (expr))\n-\t    /* Perform the temporary materialization conversion.  */\n-\t    expr = get_target_expr_sfinae (expr, complain);\n-\t}\n-      else if (!lvalue_p (expr))\n+      if (!glvalue_p (expr))\n \t{\n           if (complain & tf_error)\n-            error_at (loc, \"invalid cast of an rvalue expression of type \"\n+\t    error_at (loc, \"invalid cast of a prvalue expression of type \"\n \t\t      \"%qT to type %qT\",\n \t\t      intype, type);\n \t  return error_mark_node;"}, {"sha": "5402e825aa5d1c9d56cc8f874473d370c1ab0d62", "filename": "gcc/testsuite/g++.dg/cpp0x/reinterpret_cast2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C?ref=07f56824fd4da14a48030e698c8eb58de951c741", "patch": "@@ -6,5 +6,5 @@ struct S { };\n void\n foo ()\n {\n-  auto a = reinterpret_cast<S&&>(foo ());\t// { dg-error \"12:invalid cast of an rvalue expression of type 'void' to type\" }\n+  auto a = reinterpret_cast<S&&>(foo ()); // { dg-error \"12:invalid cast of a prvalue expression of type 'void' to type\" }\n }"}, {"sha": "3adf683f88106b64e30d20794e0a67c7382dc4f3", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-cast6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C?ref=07f56824fd4da14a48030e698c8eb58de951c741", "patch": "@@ -5,7 +5,7 @@ struct A { virtual void f(); };\n struct B : A {};\n \n auto && a = static_cast<A&&>(B());\n-auto && b = reinterpret_cast<A&&>(B());\n+auto && b = reinterpret_cast<A&&>(B()); // { dg-error \"prvalue\" }\n auto && c = dynamic_cast<A&&>(B());\n auto && d = dynamic_cast<B&&>(static_cast<A&&>(B()));\n auto && e = const_cast<B&&>(B());"}, {"sha": "77969bc60eecb30d56a4e29bacf20e61d7eb5b34", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rvalue3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f56824fd4da14a48030e698c8eb58de951c741/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C?ref=07f56824fd4da14a48030e698c8eb58de951c741", "patch": "@@ -2,5 +2,5 @@\n int main ()\n {\n    int i;\n-   int &ir = (int&)(int)i;\t// { dg-error \"14:invalid cast of an rvalue expression\" } casting rvalue to reference type\n+   int &ir = (int&)(int)i;\t// { dg-error \"14:invalid cast of a prvalue expression\" } casting rvalue to reference type\n }"}]}