{"sha": "ac5fd364f0978c62ae759e7b36ce6b912a27546c", "node_id": "C_kwDOANBUbNoAKGFjNWZkMzY0ZjA5NzhjNjJhZTc1OWU3YjM2Y2U2YjkxMmEyNzU0NmM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-01T09:07:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-01T09:07:59Z"}, "message": "libcpp: Fix up #__VA_OPT__ handling [PR103415]\n\nstringify_arg uses pfile->u_buff to create the string literal.\nUnfortunately, paste_tokens -> _cpp_lex_direct -> lex_number -> _cpp_unaligned_alloc\ncan in some cases use pfile->u_buff too, which results in losing everything\nprepared for the string literal until the token pasting.\n\nThe following patch fixes that by not calling paste_token during the\nconstruction of the string literal, but doing that before.  All the tokens\nwe are processing have been pushed into a token buffer using\ntokens_buff_add_token so it is fine if we paste some of them in that buffer\n(successful pasting creates a new token in that buffer), move following\ntokens if any to make it contiguous, pop (throw away) the extra tokens at\nthe end and then do stringify_arg.\n\nAlso, paste_tokens now copies over PREV_WHITE and PREV_FALLTHROUGH flags\nfrom the original lhs token to the replacement token.  Copying that way\nthe PREV_WHITE flag is needed for the #__VA_OPT__ handling and copying\nover PREV_FALLTHROUGH fixes the new Wimplicit-fallthrough-38.c test.\n\n2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/103415\nlibcpp/\n\t* macro.c (stringify_arg): Remove va_opt argument and va_opt handling.\n\t(paste_tokens): On successful paste or in PREV_WHITE and\n\tPREV_FALLTHROUGH flags from the *plhs token to the new token.\n\t(replace_args): Adjust stringify_arg callers.  For #__VA_OPT__,\n\tperform token pasting in a separate loop before stringify_arg call.\ngcc/testsuite/\n\t* c-c++-common/cpp/va-opt-8.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-38.c: New test.", "tree": {"sha": "baa7a720e80a905f73bc3348d70c86a8197fbdd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa7a720e80a905f73bc3348d70c86a8197fbdd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5fd364f0978c62ae759e7b36ce6b912a27546c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5fd364f0978c62ae759e7b36ce6b912a27546c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5fd364f0978c62ae759e7b36ce6b912a27546c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5fd364f0978c62ae759e7b36ce6b912a27546c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29df53fe349073a9210df70ae45662cb3f4a0556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29df53fe349073a9210df70ae45662cb3f4a0556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29df53fe349073a9210df70ae45662cb3f4a0556"}], "stats": {"total": 114, "additions": 86, "deletions": 28}, "files": [{"sha": "80f7d456d0a9dfdd3471d4507a48c98f69480106", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-38.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5fd364f0978c62ae759e7b36ce6b912a27546c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5fd364f0978c62ae759e7b36ce6b912a27546c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-38.c?ref=ac5fd364f0978c62ae759e7b36ce6b912a27546c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=3\" } */\n+\n+#define FOO \\\n+int\t\t\t\t\\\n+foo (int a)\t\t\t\\\n+{\t\t\t\t\\\n+  switch (a)\t\t\t\\\n+    {\t\t\t\t\\\n+    case 1:\t\t\t\\\n+      ++a;\t\t\t\\\n+      /* FALLTHRU */\t\t\\\n+    case 2:\t\t\t\\\n+      ++a;\t\t\t\\\n+      /* FALLTHRU */\t\t\\\n+    ca##se 3:\t\t\t\\\n+      ++a;\t\t\t\\\n+    default:\t\t\t\\\n+      break;\t\t\t\\\n+    }\t\t\t\t\\\n+  return a;\t\t\t\\\n+}\n+\n+FOO"}, {"sha": "583ebf01b307e12c55da88be8f5a8b2551e2b2c5", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5fd364f0978c62ae759e7b36ce6b912a27546c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5fd364f0978c62ae759e7b36ce6b912a27546c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-8.c?ref=ac5fd364f0978c62ae759e7b36ce6b912a27546c", "patch": "@@ -0,0 +1,18 @@\n+/* PR preprocessor/103415 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+#define n(x, ...) = #__VA_OPT__(x##3)\n+#define o(x, ...) #__VA_OPT__(x##__VA_ARGS__##9)\n+const char *c n(1 2, 4);\n+const char *d = o(5  6, 7\t8);\n+\n+int\n+main ()\n+{\n+  if (__builtin_strcmp (c, \"1 23\")\n+      || __builtin_strcmp (d, \"5 67 89\"))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6269c1570d36a055ebf31ec0df3ddd0192040d17", "filename": "libcpp/macro.c", "status": "modified", "additions": 44, "deletions": 28, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5fd364f0978c62ae759e7b36ce6b912a27546c/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5fd364f0978c62ae759e7b36ce6b912a27546c/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=ac5fd364f0978c62ae759e7b36ce6b912a27546c", "patch": "@@ -295,7 +295,7 @@ static cpp_context *next_context (cpp_reader *);\n static const cpp_token *padding_token (cpp_reader *, const cpp_token *);\n static const cpp_token *new_string_token (cpp_reader *, uchar *, unsigned int);\n static const cpp_token *stringify_arg (cpp_reader *, const cpp_token **,\n-\t\t\t\t       unsigned int, bool);\n+\t\t\t\t       unsigned int);\n static void paste_all_tokens (cpp_reader *, const cpp_token *);\n static bool paste_tokens (cpp_reader *, location_t,\n \t\t\t  const cpp_token **, const cpp_token *);\n@@ -834,8 +834,7 @@ cpp_quote_string (uchar *dest, const uchar *src, unsigned int len)\n /* Convert a token sequence FIRST to FIRST+COUNT-1 to a single string token\n    according to the rules of the ISO C #-operator.  */\n static const cpp_token *\n-stringify_arg (cpp_reader *pfile, const cpp_token **first, unsigned int count,\n-\t       bool va_opt)\n+stringify_arg (cpp_reader *pfile, const cpp_token **first, unsigned int count)\n {\n   unsigned char *dest;\n   unsigned int i, escape_it, backslash_count = 0;\n@@ -852,24 +851,6 @@ stringify_arg (cpp_reader *pfile, const cpp_token **first, unsigned int count,\n     {\n       const cpp_token *token = first[i];\n \n-      if (va_opt && (token->flags & PASTE_LEFT))\n-\t{\n-\t  location_t virt_loc = pfile->invocation_location;\n-\t  const cpp_token *rhs;\n-\t  do\n-\t    {\n-\t      if (i == count)\n-\t\tabort ();\n-\t      rhs = first[++i];\n-\t      if (!paste_tokens (pfile, virt_loc, &token, rhs))\n-\t\t{\n-\t\t  --i;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t  while (rhs->flags & PASTE_LEFT);\n-\t}\n-\n       if (token->type == CPP_PADDING)\n \t{\n \t  if (source == NULL\n@@ -1003,6 +984,7 @@ paste_tokens (cpp_reader *pfile, location_t location,\n       return false;\n     }\n \n+  lhs->flags |= (*plhs)->flags & (PREV_WHITE | PREV_FALLTHROUGH);\n   *plhs = lhs;\n   _cpp_pop_buffer (pfile);\n   return true;\n@@ -1945,8 +1927,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \tif (src->flags & STRINGIFY_ARG)\n \t  {\n \t    if (!arg->stringified)\n-\t      arg->stringified = stringify_arg (pfile, arg->first, arg->count,\n-\t\t\t\t\t\tfalse);\n+\t      arg->stringified = stringify_arg (pfile, arg->first, arg->count);\n \t  }\n \telse if ((src->flags & PASTE_LEFT)\n \t\t || (src != macro->exp.tokens && (src[-1].flags & PASTE_LEFT)))\n@@ -2066,11 +2047,46 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t{\n \t\t  unsigned int count\n \t\t    = start ? paste_flag - start : tokens_buff_count (buff);\n-\t\t  const cpp_token *t\n-\t\t    = stringify_arg (pfile,\n-\t\t\t\t     start ? start + 1\n-\t\t\t\t     : (const cpp_token **) (buff->base),\n-\t\t\t\t     count, true);\n+\t\t  const cpp_token **first\n+\t\t    = start ? start + 1\n+\t\t\t    : (const cpp_token **) (buff->base);\n+\t\t  unsigned int i, j;\n+\n+\t\t  /* Paste any tokens that need to be pasted before calling\n+\t\t     stringify_arg, because stringify_arg uses pfile->u_buff\n+\t\t     which paste_tokens can use as well.  */\n+\t\t  for (i = 0, j = 0; i < count; i++, j++)\n+\t\t    {\n+\t\t      const cpp_token *token = first[i];\n+\n+\t\t      if (token->flags & PASTE_LEFT)\n+\t\t\t{\n+\t\t\t  location_t virt_loc = pfile->invocation_location;\n+\t\t\t  const cpp_token *rhs;\n+\t\t\t  do\n+\t\t\t    {\n+\t\t\t      if (i == count)\n+\t\t\t\tabort ();\n+\t\t\t      rhs = first[++i];\n+\t\t\t      if (!paste_tokens (pfile, virt_loc, &token, rhs))\n+\t\t\t\t{\n+\t\t\t\t  --i;\n+\t\t\t\t  break;\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  while (rhs->flags & PASTE_LEFT);\n+\t\t\t}\n+\n+\t\t      first[j] = token;\n+\t\t    }\n+\t\t  if (j != i)\n+\t\t    {\n+\t\t      while (i-- != j)\n+\t\t\ttokens_buff_remove_last_token (buff);\n+\t\t      count = j;\n+\t\t    }\n+\n+\t\t  const cpp_token *t = stringify_arg (pfile, first, count);\n \t\t  while (count--)\n \t\t    tokens_buff_remove_last_token (buff);\n \t\t  if (src->flags & PASTE_LEFT)"}]}