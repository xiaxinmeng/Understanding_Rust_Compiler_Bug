{"sha": "dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "node_id": "C_kwDOANBUbNoAKGRjMTk5OTNiYjllODNlOWM2N2MzMDI3YzM4ZTA5ZjdiY2YxMmU4ODc", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-27T17:04:28Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-01-27T17:04:28Z"}, "message": "aarch64: Prevent simd tests from being optimised away\n\nThe vqdml[as]l[hs]_laneq_* tests were folded at compile time, meaning\nthat we didn't have any Advanced SIMD instructions in the assembly.\nKyrill's preference was to use wrapper functions, so this patch does\nthat for the failing tests and for others that had scan-assemblers\nwith inline intrinsics calls.  (There were some tests that already\nused wrapper functions, some that used volatile, some that used\ninline asm barriers, and some that had no separation.)\n\nDoing that for vqdmulhs_lane_s32.c meant that we generated the scalar\nform of the instruction, rather than a vector instruction operating\non lane 0.  That seems fair enough, so the patch keeps that test but\nadds a second one for lane 1.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/simd/vfma_f64.c: Use a wrapper function\n\trather than an asm barrier.\n\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vmul_f64_1.c: Use a wrapper function\n\trather than volatile.\n\t* gcc.target/aarch64/simd/vmul_n_f64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c: Use a wrapper\n\tfunction.  Remove -fno-inline.\n\t* gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhs_lane_s32.c: Likewise.\n\tAllow the scalar form to be used when operating on lane 0.\n\tAdd a test for lane 1.", "tree": {"sha": "9d12fd2101abd51a095889ec0275e8275649e566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d12fd2101abd51a095889ec0275e8275649e566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7486fe153adaa868f36248b72f3e78d18b1b3ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7486fe153adaa868f36248b72f3e78d18b1b3ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7486fe153adaa868f36248b72f3e78d18b1b3ba1"}], "stats": {"total": 309, "additions": 163, "deletions": 146}, "files": [{"sha": "467c740ea12457699a9ff5fd0aae37ee85597b83", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfma_f64.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -7,33 +7,24 @@\n \n #define EPS 1.0e-15\n \n-#define INHIB_OPT(x) asm volatile (\"mov %d0, %1.d[0]\"\t\\\n-\t\t\t\t   : \"=w\"(x)\t\t\\\n-\t\t\t\t   : \"w\"(x)\t\t\\\n-\t\t\t\t   : /* No clobbers. */);\n-\n extern void abort (void);\n \n+float64_t __attribute__((noipa))\n+test_vfma (float64x1_t arg1, float64x1_t arg2, float64x1_t arg3)\n+{\n+  return vget_lane_f64 (vfma_f64 (arg1, arg2, arg3), 0);\n+}\n+\n int\n main (void)\n {\n-  float64x1_t arg1;\n-  float64x1_t arg2;\n-  float64x1_t arg3;\n-\n   float64_t expected;\n   float64_t actual;\n \n-  arg1 = vcreate_f64 (0x3fe3955382d35b0eULL);\n-  arg2 = vcreate_f64 (0x3fa88480812d6670ULL);\n-  arg3 = vcreate_f64 (0x3fd5791ae2a92572ULL);\n-\n-  INHIB_OPT (arg1);\n-  INHIB_OPT (arg2);\n-  INHIB_OPT (arg3);\n-\n   expected = 0.6280448184360076;\n-  actual = vget_lane_f64 (vfma_f64 (arg1, arg2, arg3), 0);\n+  actual = test_vfma (vcreate_f64 (0x3fe3955382d35b0eULL),\n+\t\t      vcreate_f64 (0x3fa88480812d6670ULL),\n+\t\t      vcreate_f64 (0x3fd5791ae2a92572ULL));\n \n   if (__builtin_fabs (expected - actual) > EPS)\n     abort ();"}, {"sha": "af6ca6ff11e66a3bdf64366be60303a27d91b924", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfms_f64.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -7,33 +7,24 @@\n \n #define EPS 1.0e-15\n \n-#define INHIB_OPT(x) asm volatile (\"mov %d0, %1.d[0]\"   \\\n-                                   : \"=w\"(x)           \\\n-                                   : \"w\"(x)            \\\n-                                   : /* No clobbers. */);\n-\n extern void abort (void);\n \n+float64_t __attribute__((noipa))\n+test_vfms (float64x1_t arg1, float64x1_t arg2, float64x1_t arg3)\n+{\n+  return vget_lane_f64 (vfms_f64 (arg1, arg2, arg3), 0);\n+}\n+\n int\n main (void)\n {\n-  float64x1_t arg1;\n-  float64x1_t arg2;\n-  float64x1_t arg3;\n-\n   float64_t expected;\n   float64_t actual;\n \n-  arg1 = vcreate_f64 (0x3fe730af8db9e6f7ULL);\n-  arg2 = vcreate_f64 (0x3fe6b78680fa29ceULL);\n-  arg3 = vcreate_f64 (0x3feea3cbf921fbe0ULL);\n-\n-  INHIB_OPT (arg1);\n-  INHIB_OPT (arg2);\n-  INHIB_OPT (arg3);\n-\n   expected = 4.4964705746355915e-2;\n-  actual = vget_lane_f64 (vfms_f64 (arg1, arg2, arg3), 0);\n+  actual = test_vfms (vcreate_f64 (0x3fe730af8db9e6f7ULL),\n+\t\t      vcreate_f64 (0x3fe6b78680fa29ceULL),\n+\t\t      vcreate_f64 (0x3feea3cbf921fbe0ULL));\n \n   if (__builtin_fabs (expected - actual) > EPS)\n     abort ();"}, {"sha": "dfa808cb9c2659c788748ebcf7e145cf1a2fd4b6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_f64_1.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -7,19 +7,23 @@\n \n extern void abort (void);\n \n+float64_t __attribute__((noipa))\n+test_vmul (float64x1_t arg1, float64x1_t arg2)\n+{\n+  return vget_lane_f64 (vmul_f64 (arg1, arg2), 0);\n+}\n+\n int\n main (void)\n {\n-  volatile float64_t minus_e, pi;\n+  float64_t minus_e, pi;\n   float64_t expected, actual;\n \n   pi = 3.14159265359;\n   minus_e = -2.71828;\n \n   expected = pi * minus_e;\n-\n-  actual = vget_lane_f64 (vmul_f64 ((float64x1_t) { pi },\n-                                    (float64x1_t) { minus_e }), 0);\n+  actual = test_vmul ((float64x1_t) { pi }, (float64x1_t) { minus_e });\n   if (expected != actual)\n     abort ();\n "}, {"sha": "91c12bc9c82a75a5ddef4cdfafd7deb30fd6cd90", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_n_f64_1.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -7,19 +7,23 @@\n \n extern void abort (void);\n \n+float64_t __attribute__((noipa))\n+test_vmul (float64x1_t arg1, float64_t arg2)\n+{\n+  return vget_lane_f64 (vmul_n_f64 (arg1, arg2), 0);\n+}\n+\n int\n main (void)\n {\n-  volatile float64_t minus_e, pi;\n+  float64_t minus_e, pi;\n   float64_t expected, actual;\n \n   pi = 3.14159265359;\n   minus_e = -2.71828;\n \n   expected = pi * minus_e;\n-\n-  actual = vget_lane_f64 (vmul_n_f64 ((float64x1_t) { pi },\n-                                       minus_e), 0);\n+  actual = test_vmul ((float64x1_t) { pi }, minus_e);\n   if (expected != actual)\n     abort ();\n "}, {"sha": "aa6b89aaa5bde3df34394f4877acd4f3f31762c2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_laneq_s16_1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_laneq_s16_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,27 +1,27 @@\n /* Test the vqdmlalh_laneq_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqdmlalh (int32_t arg1, int16_t arg2, int16x8_t arg3)\n+{\n+  return vqdmlalh_laneq_s16 (arg1, arg2, arg3, 7);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int16_t arg2;\n-  int16x8_t arg3;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = 0x80000000;\n-  arg2 = -24497;\n-  arg3 = vcombine_s16 (vcreate_s16 (0x008a80007fff7fffULL),\n-                       vcreate_s16 (0xfffffa797fff8000ULL));\n-\n-  actual = vqdmlalh_laneq_s16 (arg1, arg2, arg3, 7);\n+  actual = test_vqdmlalh (0x80000000, -24497,\n+\t\t\t  vcombine_s16 (vcreate_s16 (0x008a80007fff7fffULL),\n+\t\t\t\t\tvcreate_s16 (0xfffffa797fff8000ULL)));\n   expected = -2147434654;\n \n   if (expected != actual)"}, {"sha": "ea39595ae93679c6fa4c0ce37639305c00bd37f3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlals_laneq_s32_1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_laneq_s32_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,27 +1,27 @@\n /* Test the vqdmlals_laneq_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int64_t __attribute__((noipa))\n+test_vqdmlals (int64_t arg1, int32_t arg2, int32x4_t arg3)\n+{\n+  return vqdmlals_laneq_s32 (arg1, arg2, arg3, 3);\n+}\n+\n int\n main (void)\n {\n-  int64_t arg1;\n-  int32_t arg2;\n-  int32x4_t arg3;\n   int64_t actual;\n   int64_t expected;\n \n-  arg1 = -9223182289494545592LL;\n-  arg2 = 32768;\n-  arg3 = vcombine_s32 (vcreate_s32 (0xffff7fff8000ffffULL),\n-                       vcreate_s32 (0x80000000ffff0000ULL));\n-\n-  actual = vqdmlals_laneq_s32 (arg1, arg2, arg3, 3);\n+  actual = test_vqdmlals (-9223182289494545592LL, 32768,\n+\t\t\t  vcombine_s32 (vcreate_s32 (0xffff7fff8000ffffULL),\n+\t\t\t\t\tvcreate_s32 (0x80000000ffff0000ULL)));\n   expected = -9223323026982900920LL;\n \n   if (expected != actual)"}, {"sha": "0f1babca38d2865c6bac3c1b2f18b59c0b6a99a8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_laneq_s16_1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_laneq_s16_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,27 +1,27 @@\n /* Test the vqdmlslh_laneq_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqdmlslh (int32_t arg1, int16_t arg2, int16x8_t arg3)\n+{\n+  return vqdmlslh_laneq_s16 (arg1, arg2, arg3, 4);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int16_t arg2;\n-  int16x8_t arg3;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = -2147450881;\n-  arg2 = 32767;\n-  arg3 = vcombine_s16 (vcreate_s16 (0x359d7fff00007fffULL),\n-                       vcreate_s16 (0xe678ffff00008000ULL));\n-\n-  actual = vqdmlslh_laneq_s16 (arg1, arg2, arg3, 4);\n+  actual = test_vqdmlslh (-2147450881, 32767,\n+\t\t\t  vcombine_s16 (vcreate_s16 (0x359d7fff00007fffULL),\n+\t\t\t\t\tvcreate_s16 (0xe678ffff00008000ULL)));\n   expected = -32769;\n \n   if (expected != actual)"}, {"sha": "ff922541f1a7a60227f9e416477d512280938242", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsls_laneq_s32_1.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_laneq_s32_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,28 +1,27 @@\n /* Test the vqdmlsls_laneq_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int64_t __attribute__((noipa))\n+test_vqdmlsls (int64_t arg1, int32_t arg2, int32x4_t arg3)\n+{\n+  return vqdmlsls_laneq_s32 (arg1, arg2, arg3, 3);\n+}\n+\n int\n main (void)\n {\n-  int64_t arg1;\n-  int32_t arg2;\n-  int32x4_t arg3;\n   int64_t actual;\n   int64_t expected;\n \n-  arg1 = 140733193453567LL;\n-  arg2 = 25544;\n-  arg3 = vcombine_s32 (vcreate_s32 (0x417b8000ffff8397LL),\n-                       vcreate_s32 (0x7fffffff58488000LL));\n-\n-\n-  actual = vqdmlsls_laneq_s32 (arg1, arg2, arg3, 3);\n+  actual = test_vqdmlsls (140733193453567LL, 25544,\n+\t\t\t  vcombine_s32 (vcreate_s32 (0x417b8000ffff8397LL),\n+\t\t\t\t\tvcreate_s32 (0x7fffffff58488000LL)));\n   expected = 31022548895631LL;\n \n   if (expected != actual)"}, {"sha": "12b79715b298d960311127ae738ed61a915d7e58", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhh_lane_s16.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,26 @@\n /* Test the vqdmulhh_lane_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n #include <stdio.h>\n \n extern void abort (void);\n \n+int16_t __attribute__((noipa))\n+test_vqdmulhh (int16_t arg1, int16x4_t arg2)\n+{\n+  return vqdmulhh_lane_s16 (arg1, arg2, 2);\n+}\n+\n int\n main (void)\n {\n-  int16_t arg1;\n-  int16x4_t arg2;\n-  int16_t result;\n   int16_t actual;\n   int16_t expected;\n \n-  arg1 = -32768;\n-  arg2 = vcreate_s16 (0x0000ffff2489e398ULL);\n-  actual = vqdmulhh_lane_s16 (arg1, arg2, 2);\n+  actual = test_vqdmulhh (-32768, vcreate_s16 (0x0000ffff2489e398ULL));\n   expected = 1;\n \n   if (expected != actual)"}, {"sha": "1015c6878ed6a3c439889712908de45b49cb0d1b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhh_laneq_s16_1.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_laneq_s16_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,27 @@\n /* Test the vqdmulhh_laneq_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int16_t __attribute__((noipa))\n+test_vqdmulhh (int16_t arg1, int16x8_t arg2)\n+{\n+  return vqdmulhh_laneq_s16 (arg1, arg2, 7);\n+}\n+\n int\n main (void)\n {\n-  int16_t arg1;\n-  int16x8_t arg2;\n   int16_t actual;\n   int16_t expected;\n \n-  arg1 = 268;\n-  arg2 = vcombine_s16 (vcreate_s16 (0xffffffff00000000ULL),\n-                       vcreate_s16 (0x0000800018410000ULL));\n-\n-  actual = vqdmulhh_laneq_s16 (arg1, arg2, 7);\n+  actual = test_vqdmulhh (268,\n+\t\t\t  vcombine_s16 (vcreate_s16 (0xffffffff00000000ULL),\n+\t\t\t\t\tvcreate_s16 (0x0000800018410000ULL)));\n   expected = 0;\n \n   if (expected != actual)"}, {"sha": "f3b297ecc460b031aa5d18541cc178aab118e1ae", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhs_lane_s32.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,27 +1,43 @@\n /* Test the vqdmulhs_lane_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n #include <stdio.h>\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqdmulhs_0 (int32_t arg1, int32x2_t arg2)\n+{\n+  return vqdmulhs_lane_s32 (arg1, arg2, 0);\n+}\n+\n+int32_t __attribute__((noipa))\n+test_vqdmulhs_1 (int32_t arg1, int32x2_t arg2)\n+{\n+  return vqdmulhs_lane_s32 (arg1, arg2, 1);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int32x2_t arg2;\n-  int32_t result;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = 57336;\n-  arg2 = vcreate_s32 (0x55897fff7fff0000ULL);\n-  actual = vqdmulhs_lane_s32 (arg1, arg2, 0);\n+  actual = test_vqdmulhs_0 (57336, vcreate_s32 (0x55897fff7fff0000ULL));\n   expected = 57334;\n \n+  if (expected != actual)\n+    {\n+      fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n+      abort ();\n+    }\n+\n+  actual = test_vqdmulhs_1 (57336, vcreate_s32 (0x55897fff7fff0000ULL));\n+  expected = 38315;\n+\n   if (expected != actual)\n     {\n       fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n@@ -30,4 +46,5 @@ main (void)\n \n   return 0;\n }\n-/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?(?:\\[sS\\]\\[0-9\\]+|\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\])\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[1\\\\\\]\\n\" 1 } } */"}, {"sha": "fd63bf9a4e9da9713e04705dbd68643a5a4adf4a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhs_laneq_s32_1.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_laneq_s32_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,27 @@\n /* Test the vqdmulhs_laneq_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqdmulhs (int32_t arg1, int32x4_t arg2)\n+{\n+  return vqdmulhs_laneq_s32 (arg1, arg2, 3);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int32x4_t arg2;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = 0x80000000;\n-  arg2 = vcombine_s32 (vcreate_s32 (0x950dffffc4f40000ULL),\n-                       vcreate_s32 (0x7fff8000274a8000ULL));\n-\n-  actual = vqdmulhs_laneq_s32 (arg1, arg2, 3);\n+  actual = test_vqdmulhs (0x80000000,\n+\t\t\t  vcombine_s32 (vcreate_s32 (0x950dffffc4f40000ULL),\n+\t\t\t\t\tvcreate_s32 (0x7fff8000274a8000ULL)));\n   expected = -2147450880;\n \n   if (expected != actual)"}, {"sha": "7dddb7550c48c7002de2c8ec1a2bc5babe0bd031", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,26 @@\n /* Test the vqrdmulhh_lane_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n #include <stdio.h>\n \n extern void abort (void);\n \n+int16_t __attribute__((noipa))\n+test_vqrdmulhh (int16_t arg1, int16x4_t arg2)\n+{\n+  return vqrdmulhh_lane_s16 (arg1, arg2, 3);\n+}\n+\n int\n main (void)\n {\n-  int16_t arg1;\n-  int16x4_t arg2;\n-  int16_t result;\n   int16_t actual;\n   int16_t expected;\n \n-  arg1 = -32768;\n-  arg2 = vcreate_s16 (0xd78e000005d78000ULL);\n-  actual = vqrdmulhh_lane_s16 (arg1, arg2, 3);\n+  actual = test_vqrdmulhh (-32768, vcreate_s16 (0xd78e000005d78000ULL));\n   expected = 10354;\n \n   if (expected != actual)"}, {"sha": "78d6299d7d0bfd7bca6f692ade106782ce7b0521", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhh_laneq_s16_1.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_laneq_s16_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,27 @@\n /* Test the vqrdmulhh_laneq_s16 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int16_t __attribute__((noipa))\n+test_vqrdmulhh (int16_t arg1, int16x8_t arg2)\n+{\n+  return vqrdmulhh_laneq_s16 (arg1, arg2, 7);\n+}\n+\n int\n main (void)\n {\n-  int16_t arg1;\n-  int16x8_t arg2;\n   int16_t actual;\n   int16_t expected;\n \n-  arg1 = 0;\n-  arg2 = vcombine_s16 (vcreate_s16 (0x7fffffffa7908000ULL),\n-                       vcreate_s16 (0x8000d2607fff0000ULL));\n-\n-  actual = vqrdmulhh_laneq_s16 (arg1, arg2, 7);\n+  actual = test_vqrdmulhh (0,\n+\t\t\t   vcombine_s16 (vcreate_s16 (0x7fffffffa7908000ULL),\n+\t\t\t\t\t vcreate_s16 (0x8000d2607fff0000ULL)));\n   expected = 0;\n \n   if (expected != actual)"}, {"sha": "827b52f33d15c1e81b6436ab0871bddb73883826", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,26 @@\n /* Test the vqrdmulhs_lane_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n #include <stdio.h>\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqrdmulhs (int32_t arg1, int32x2_t arg2)\n+{\n+  return vqrdmulhs_lane_s32 (arg1, arg2, 1);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int32x2_t arg2;\n-  int32_t result;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = -2099281921;\n-  arg2 = vcreate_s32 (0x000080007fff0000ULL);\n-  actual = vqrdmulhs_lane_s32 (arg1, arg2, 1);\n+  actual = test_vqrdmulhs (-2099281921, vcreate_s32 (0x000080007fff0000ULL));\n   expected = -32033;\n \n   if (expected != actual)"}, {"sha": "b06d16f20e975e7f49cd3b7c93a8a9e2951fbcff", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhs_laneq_s32_1.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc19993bb9e83e9c67c3027c38e09f7bcf12e887/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_laneq_s32_1.c?ref=dc19993bb9e83e9c67c3027c38e09f7bcf12e887", "patch": "@@ -1,25 +1,27 @@\n /* Test the vqrdmulhs_laneq_s32 AArch64 SIMD intrinsic.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+/* { dg-options \"-save-temps -O3\" } */\n \n #include \"arm_neon.h\"\n \n extern void abort (void);\n \n+int32_t __attribute__((noipa))\n+test_vqrdmulhs (int32_t arg1, int32x4_t arg2)\n+{\n+  return vqrdmulhs_laneq_s32 (arg1, arg2, 3);\n+}\n+\n int\n main (void)\n {\n-  int32_t arg1;\n-  int32x4_t arg2;\n   int32_t actual;\n   int32_t expected;\n \n-  arg1 = 32768;\n-  arg2 = vcombine_s32 (vcreate_s32 (0x8000ffffffffcd5bULL),\n-                       vcreate_s32 (0x7fffffffffffffffULL));\n-\n-  actual = vqrdmulhs_laneq_s32 (arg1, arg2, 3);\n+  actual = test_vqrdmulhs (32768,\n+\t\t\t   vcombine_s32 (vcreate_s32 (0x8000ffffffffcd5bULL),\n+\t\t\t\t\t vcreate_s32 (0x7fffffffffffffffULL)));\n   expected = 32768;\n \n   if (expected != actual)"}]}