{"sha": "08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwNzVlYWRjODZhY2U3MGRmYzJiNDhlYzlmMGRkMzZkZGJjZGY4Mg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-01-28T05:56:49Z"}, "committer": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-01-28T05:56:49Z"}, "message": "movdf 64bit and movdi matcher 64bit\n\nFrom-SVN: r11119", "tree": {"sha": "3f015d0b55935fde03325a71604d8ca897845408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f015d0b55935fde03325a71604d8ca897845408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82/comments", "author": null, "committer": null, "parents": [{"sha": "ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "0b08b0b107bb44c915355c2aa0206d0d2bff76b8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=08075eadc86ace70dfc2b48ec9f0dd36ddbcdf82", "patch": "@@ -5143,6 +5143,23 @@\n   if (GET_CODE (operands[0]) != REG)\n     operands[1] = force_reg (DFmode, operands[1]);\n \n+      /* Stores between FPR and any non-FPR registers must go through a\n+         temporary stack slot.  */\n+\n+  if (TARGET_POWERPC64\n+      && GET_CODE (operands[0]) == REG && GET_CODE (operands[1]) == REG\n+      && ((FP_REGNO_P (REGNO (operands[0]))\n+\t   && ! FP_REGNO_P (REGNO (operands[1])))\n+\t  || (FP_REGNO_P (REGNO (operands[1]))\n+\t      && ! FP_REGNO_P (REGNO (operands[0])))))\n+    {\n+      rtx stack_slot = assign_stack_temp (DFmode, 8, 0);\n+\n+      emit_move_insn (stack_slot, operands[1]);\n+      emit_move_insn (operands[0], stack_slot);\n+      DONE;\n+    }\n+\n   if (CONSTANT_P (operands[1]) && ! easy_fp_constant (operands[1], DFmode))\n     {\n       operands[1] = force_const_mem (DFmode, operands[1]);\n@@ -5374,8 +5391,8 @@\n    (set_attr \"length\" \"8,8,8,*,*,*\")])\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,f,f,m,r,*h\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,R,f,m,f,*h,r\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,f,f,m,r,*h,*h\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,R,f,m,f,*h,r,0\"))]\n   \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], DImode)\n    || gpc_reg_operand (operands[1], DImode))\"\n   \"@\n@@ -5389,8 +5406,18 @@\n    lfd%U1%X1 %0,%1\n    stfd%U0%X0 %1,%0\n    mf%1 %0\n-   mt%0 %1\"\n-  [(set_attr \"type\" \"*,load,*,*,*,*,fp,fpload,*,*,mtjmpr\")])\n+   mt%0 %1\n+   cror 0,0,0\"\n+  [(set_attr \"type\" \"*,load,*,*,*,*,fp,fpload,*,*,mtjmpr,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\") (match_dup 1))]\n+  \"TARGET_POWERPC64\"\n+  \"mr. %0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n \f\n ;; TImode is similar, except that we usually want to compute the address into\n ;; a register and use lsi/stsi (the exception is during reload).  MQ is also"}]}