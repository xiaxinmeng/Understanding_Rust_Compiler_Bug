{"sha": "d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4OGZmOGQ1NGRjZTgzYmEwY2NlYTI2MmQ0ZGE0MmE4MjBhMWJmYw==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-20T09:36:06Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-20T09:36:06Z"}, "message": "[multiple changes]\n\n2005-04-20  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* java/net/URI.java:\n\tAdded class documentation.\n\t(parseURI(String)): Only handle scheme-specific parts\n\tif URI is not opaque.  Allow for parts that can't be null.\n\t(toString()): Output the scheme-specific part whole, rather\n\tthan as its possibly non-existent components.\n\n2005-04-20  Jeroen Frijters  <jeroen@frijters.net>\n\n\t* java/net/URI.java (AUTHORITY_REGEXP): Corrected regexp.\n\t(AUTHORITY_USERINFO_GROUP,AUTHORITY_HOST_GROUP,AUTHORITY_PORT_GROUP):\n\tAdjusted to match new regexp.\n\nFrom-SVN: r98451", "tree": {"sha": "1173f3fccc08f400ee2e8b8c3a6ce2507bc72af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1173f3fccc08f400ee2e8b8c3a6ce2507bc72af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d288ff8d54dce83ba0ccea262d4da42a820a1bfc/comments", "author": null, "committer": null, "parents": [{"sha": "b5293f35adf7c10ba94063386e0add3837beec64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5293f35adf7c10ba94063386e0add3837beec64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5293f35adf7c10ba94063386e0add3837beec64"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "55e9b6a82dac8bdcaf7ed5f2b8c6dd5fbdf6fe4e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d288ff8d54dce83ba0ccea262d4da42a820a1bfc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d288ff8d54dce83ba0ccea262d4da42a820a1bfc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "patch": "@@ -1,3 +1,18 @@\n+2005-04-20  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/net/URI.java:\n+\tAdded class documentation.\n+\t(parseURI(String)): Only handle scheme-specific parts\n+\tif URI is not opaque.  Allow for parts that can't be null.\n+\t(toString()): Output the scheme-specific part whole, rather\n+\tthan as its possibly non-existent components.\n+\n+2005-04-20  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t* java/net/URI.java (AUTHORITY_REGEXP): Corrected regexp.\n+\t(AUTHORITY_USERINFO_GROUP,AUTHORITY_HOST_GROUP,AUTHORITY_PORT_GROUP):\n+\tAdjusted to match new regexp.\n+\n 2005-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/file/Connection.java,"}, {"sha": "95577fca456c3495613628c480d4a4e804516d0f", "filename": "libjava/java/net/URI.java", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d288ff8d54dce83ba0ccea262d4da42a820a1bfc/libjava%2Fjava%2Fnet%2FURI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d288ff8d54dce83ba0ccea262d4da42a820a1bfc/libjava%2Fjava%2Fnet%2FURI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURI.java?ref=d288ff8d54dce83ba0ccea262d4da42a820a1bfc", "patch": "@@ -46,12 +46,67 @@\n import java.util.regex.Pattern;\n \n /**\n+ * <p>\n+ * A URI instance represents that defined by \n+ * <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC2396</a>,\n+ * with some deviations.\n+ * </p>\n+ * <p>\n+ * At its highest level, a URI consists of:\n+ * </p>\n+ * <code>[<em>scheme</em><strong>:</strong>]<em>scheme-specific-part</em>\n+ * [<strong>#</strong><em>fragment</em>]</code>\n+ * </p>\n+ * <p>\n+ * where <strong>#</strong> and <strong>:</strong> are literal characters,\n+ * and those parts enclosed in square brackets are optional.\n+ * </p>\n+ * <p>\n+ * There are two main types of URI.  An <em>opaque</em> URI is one\n+ * which just consists of the above three parts, and is not further\n+ * defined.  An example of such a URI would be <em>mailto:</em> URI.\n+ * In contrast, <em>hierarchical</em> URIs give further definition\n+ * to the scheme-specific part, so as represent some part of a hierarchical\n+ * structure.\n+ * </p>\n+ * <p>\n+ * <code>[<strong>//</strong><em>authority</em>][<em>path</em>]\n+ * [<strong>?</strong><em>query</em>]</code>\n+ * </p>\n+ * <p>\n+ * with <strong>/</strong> and <strong>?</strong> being literal characters.\n+ * When server-based, the authority section is further subdivided into:\n+ * </p>\n+ * <p>\n+ * <code>[<em>user-info</em><strong>@</strong>]<em>host</em>\n+ * [<strong>:</strong><em>port</em>]</code>\n+ * </p>\n+ * <p>\n+ * with <strong>@</strong> and <strong>:</strong> as literal characters.\n+ * Authority sections that are not server-based are said to be registry-based.\n+ * </p>\n+ * <p>\n+ * Hierarchical URIs can be either relative or absolute.  Absolute URIs\n+ * always start with a `<strong>/</strong>', while relative URIs don't\n+ * specify a scheme.  Opaque URIs are always absolute.\n+ * </p>\n+ * <p>\n+ * Each part of the URI may have one of three states: undefined, empty\n+ * or containing some content.  The former two of these are represented\n+ * by <code>null</code> and the empty string in Java, respectively.\n+ * The scheme-specific part may never be undefined.  It also follows from\n+ * this that the path sub-part may also not be undefined, so as to ensure\n+ * the former.\n+ * </p>\n+ * \n  * @author Ito Kazumitsu (ito.kazumitsu@hitachi-cable.co.jp)\n  * @author Dalibor Topic (robilad@kaffe.org)\n  * @author Michael Koch (konqueror@gmx.de)\n+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n  * @since 1.4\n  */\n-public final class URI implements Comparable, Serializable\n+public final class URI \n+  implements Comparable, Serializable\n {\n   static final long serialVersionUID = -6052424284110960213L;\n \n@@ -65,7 +120,7 @@ public final class URI implements Comparable, Serializable\n     \"^(([^:/?#]+):)?((//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?)?(#(.*))?\";\n \n   private static final String AUTHORITY_REGEXP =\n-    \"^((([^?#]*)@)?([^?#:]*)(:([^?#]*)))?\";\n+    \"(([^?#]*)@)?([^?#:]*)(:([^?#]*))?\";\n \n   /**\n    * Valid characters (taken from rfc2396)\n@@ -115,9 +170,9 @@ public final class URI implements Comparable, Serializable\n    */\n   private static final int FRAGMENT_GROUP = 10;\n   \n-  private static final int AUTHORITY_USERINFO_GROUP = 3;\n-  private static final int AUTHORITY_HOST_GROUP = 4;\n-  private static final int AUTHORITY_PORT_GROUP = 6;\n+  private static final int AUTHORITY_USERINFO_GROUP = 2;\n+  private static final int AUTHORITY_HOST_GROUP = 3;\n+  private static final int AUTHORITY_PORT_GROUP = 5;\n   \n   private transient String scheme;\n   private transient String rawSchemeSpecificPart;\n@@ -180,10 +235,14 @@ private void parseURI(String str) throws URISyntaxException\n     if (matcher.matches())\n       {\n \tscheme = getURIGroup(matcher, SCHEME_GROUP);\n-\trawSchemeSpecificPart = getURIGroup(matcher, SCHEME_SPEC_PART_GROUP);\n-\trawAuthority = getURIGroup(matcher, AUTHORITY_GROUP);\n-\trawPath = getURIGroup(matcher, PATH_GROUP);\n-\trawQuery = getURIGroup(matcher, QUERY_GROUP);\n+\trawSchemeSpecificPart = matcher.group(SCHEME_SPEC_PART_GROUP);\n+\tschemeSpecificPart = unquote(rawSchemeSpecificPart);\n+\tif (!isOpaque())\n+\t  {\n+\t    rawAuthority = getURIGroup(matcher, AUTHORITY_GROUP);\n+\t    rawPath = matcher.group(PATH_GROUP);\n+\t    rawQuery = getURIGroup(matcher, QUERY_GROUP);\n+\t  }\n \trawFragment = getURIGroup(matcher, FRAGMENT_GROUP);\n       }\n     else\n@@ -221,7 +280,6 @@ private void parseURI(String str) throws URISyntaxException\n \n     // We must eagerly unquote the parts, because this is the only time\n     // we may throw an exception.\n-    schemeSpecificPart = unquote(rawSchemeSpecificPart);\n     authority = unquote(rawAuthority);\n     userInfo = unquote(rawUserInfo);\n     host = unquote(rawHost);\n@@ -814,14 +872,15 @@ public int compareTo(Object obj) throws ClassCastException\n   }\n \n   /**\n-   * Returns the URI as string\n+   * Returns the URI as a String.  If the URI was created using a constructor,\n+   * then this will be the same as the original input string.\n+   *\n+   * @return a string representation of the URI.\n    */\n   public String toString()\n   {\n     return (getScheme() == null ? \"\" : getScheme() + \":\")\n-           + (getRawAuthority() == null ? \"\" : \"//\" + getRawAuthority())\n-           + (getRawPath() == null ? \"\" : getRawPath())\n-           + (getRawQuery() == null ? \"\" : \"?\" + getRawQuery())\n+           + getRawSchemeSpecificPart()\n            + (getRawFragment() == null ? \"\" : \"#\" + getRawFragment());\n   }\n "}]}