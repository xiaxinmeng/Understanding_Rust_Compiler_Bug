{"sha": "214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0ZDUxNGZhZmNkNzhjZDU0ZTRhNGFhOWFlMDhjODlhYmY5Y2M1Nw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-08T09:15:23Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-08T09:17:08Z"}, "message": "Fix PR97315 (part 1 of 2)\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97315\n\t* gimple-ssa-evrp.c (hybrid_folder::choose_value): Removes the\n\ttrap and instead annotates the listing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr97315-1.c: New test.", "tree": {"sha": "d207b0af3077b6c43d93a6da69924d29f8bda249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d207b0af3077b6c43d93a6da69924d29f8bda249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "273b30c8e93f043f65a04e0ff2ec305b311e98fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273b30c8e93f043f65a04e0ff2ec305b311e98fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273b30c8e93f043f65a04e0ff2ec305b311e98fa"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "7688e4aa4bdf040395180b88f719aea29b79722c", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "patch": "@@ -258,37 +258,43 @@ hybrid_folder::value_of_stmt (gimple *stmt, tree op)\n tree\n hybrid_folder::choose_value (tree evrp_val, tree ranger_val)\n {\n-  if (!ranger_val)\n-    {\n-      // If neither returned a value, return NULL_TREE.\n-      if (!evrp_val)\n-\treturn NULL_TREE;\n+  // If both found the same value, just return it.\n+  if (evrp_val && ranger_val && !compare_values (evrp_val, ranger_val))\n+    return evrp_val;\n+\n+  // If neither returned a value, return NULL_TREE.\n+  if (!ranger_val && !evrp_val)\n+    return NULL_TREE;\n \n-      // Otherwise EVRP found something.\n-      if (dump_file)\n+  // Otherwise there is a discrepancy to flag.\n+  if (dump_file)\n+    {\n+      if (evrp_val && ranger_val)\n+\tfprintf (dump_file, \"EVRP:hybrid: Disagreement\\n\");\n+      if (evrp_val)\n \t{\n \t  fprintf (dump_file, \"EVRP:hybrid: EVRP found singleton \");\n \t  print_generic_expr (dump_file, evrp_val);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n-      return evrp_val;\n+      if (ranger_val)\n+\t{\n+\t  fprintf (dump_file, \"EVRP:hybrid: RVRP found singleton \");\n+\t  print_generic_expr (dump_file, ranger_val);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n     }\n \n-  // Otherwise ranger found a value, if they match we're good.\n-  if (evrp_val && !compare_values (evrp_val, ranger_val))\n+  // If one value was found, return it.\n+  if (!evrp_val)\n+    return ranger_val;\n+  if (!ranger_val)\n     return evrp_val;\n \n-  // We should never get different singletons.\n-  gcc_checking_assert (!evrp_val);\n-\n-  // Now ranger has found a value, but EVRP did not.\n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"EVRP:hybrid: RVRP found singleton \");\n-      print_generic_expr (dump_file, ranger_val);\n-      fprintf (dump_file, \"\\n\");\n-    }\n-  return ranger_val;\n+  // If values are different, return the first calculated value.\n+  if ((param_evrp_mode & EVRP_MODE_RVRP_FIRST) == EVRP_MODE_RVRP_FIRST)\n+    return ranger_val;\n+  return evrp_val;\n }\n \n /* Main entry point for the early vrp pass which is a simplified non-iterative"}, {"sha": "250e0e9ecbb121cfc62ab470c59c4f62ad0838b2", "filename": "gcc/testsuite/gcc.dg/pr97315-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97315-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214d514fafcd78cd54e4a4aa9ae08c89abf9cc57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97315-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97315-1.c?ref=214d514fafcd78cd54e4a4aa9ae08c89abf9cc57", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef struct tree_node *tree;\n+enum tree_code { RECORD_TYPE, QUAL_UNION_TYPE };\n+enum tree_code_class {};\n+struct tree_base {\n+  tree_code code : 16;\n+};\n+struct tree_node {\n+  tree_base base;\n+};\n+extern tree_code_class tree_code_type[];\n+void tree_check_failed() __attribute__((__noreturn__));\n+tree tree_check3(tree __t, tree_code __c1, tree_code __c3) {\n+  if (__t->base.code != __c1 && __t->base.code != __c3)\n+    tree_check_failed();\n+  return __t;\n+}\n+tree add_type_duplicate_type;\n+void add_type_duplicate() {\n+  if (tree_code_type[add_type_duplicate_type->base.code])\n+    if (add_type_duplicate_type->base.code == RECORD_TYPE)\n+      for (;\n+           tree_check3(add_type_duplicate_type, RECORD_TYPE, QUAL_UNION_TYPE);)\n+        tree_check3(add_type_duplicate_type, RECORD_TYPE, QUAL_UNION_TYPE);\n+}"}]}