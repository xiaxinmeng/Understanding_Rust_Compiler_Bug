{"sha": "4069adf4bbc90d16b603e0308b48499c36b2b637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2OWFkZjRiYmM5MGQxNmI2MDNlMDMwOGI0ODQ5OWMzNmIyYjYzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-12T07:28:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-12T07:28:05Z"}, "message": "c++: Tweak reshape_init_array_1 [PR94124]\n\nIsn't it wasteful to first copy perhaps a large constructor (recursively)\nand then truncate it to very few elts (zero in this case)?\n\n> We should certainly avoid copying if they're the same.  The code above for\n> only copying the bits that aren't going to be thrown away seems pretty\n> straightforward, might as well use it even if the savings aren't likely to\n> be large.\n\nCalling vec_safe_truncate with the same number of elts the vector already\nhas is a nop, so IMHO we just should make sure we only unshare if it\nchanged.\n\n2020-03-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94124\n\t* decl.c (reshape_init_array_1): Don't unshare constructor if there\n\taren't any trailing zero elts, otherwise only unshare the first\n\tnelts.", "tree": {"sha": "eb80f36b3b6fac6badfaf0f01619bbc06ae8ae05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb80f36b3b6fac6badfaf0f01619bbc06ae8ae05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4069adf4bbc90d16b603e0308b48499c36b2b637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4069adf4bbc90d16b603e0308b48499c36b2b637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4069adf4bbc90d16b603e0308b48499c36b2b637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4069adf4bbc90d16b603e0308b48499c36b2b637/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedb4c8fc77034a3a009bee887691d5727658627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedb4c8fc77034a3a009bee887691d5727658627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedb4c8fc77034a3a009bee887691d5727658627"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "b94e3bb8eb20055bde8e090afd0ca5cb623e657e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4069adf4bbc90d16b603e0308b48499c36b2b637/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4069adf4bbc90d16b603e0308b48499c36b2b637/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4069adf4bbc90d16b603e0308b48499c36b2b637", "patch": "@@ -1,3 +1,10 @@\n+2020-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94124\n+\t* decl.c (reshape_init_array_1): Don't unshare constructor if there\n+\taren't any trailing zero elts, otherwise only unshare the first\n+\tnelts.\n+\n 2020-03-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93907\n@@ -27,7 +34,7 @@\n \n 2020-03-10  Jason Merrill  <jason@redhat.com>\n \n-\tPR c++/93956\n+\tPR c++/93596\n \t* pt.c (maybe_aggr_guide): Check BRACE_ENCLOSED_INITIALIZER_P.\n \n 2020-03-10  Jason Merrill  <jason@redhat.com>"}, {"sha": "d240436d84ac948d50fb61885ff14db14742e1db", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4069adf4bbc90d16b603e0308b48499c36b2b637/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4069adf4bbc90d16b603e0308b48499c36b2b637/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4069adf4bbc90d16b603e0308b48499c36b2b637", "patch": "@@ -6066,10 +6066,21 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n \t overload resolution.  E.g., initializing a class from\n \t {{0}} might be invalid while initializing the same class\n \t from {{}} might be valid.  */\n-      if (reuse)\n-\tnew_init = unshare_constructor (new_init);\n-\n-      vec_safe_truncate (CONSTRUCTOR_ELTS (new_init), nelts);\n+      if (reuse && nelts < CONSTRUCTOR_NELTS (new_init))\n+\t{\n+\t  vec<constructor_elt, va_gc> *v;\n+\t  vec_alloc (v, nelts);\n+\t  for (unsigned int i = 0; i < nelts; i++)\n+\t    {\n+\t      constructor_elt elt = *CONSTRUCTOR_ELT (new_init, i);\n+\t      if (TREE_CODE (elt.value) == CONSTRUCTOR)\n+\t\telt.value = unshare_constructor (elt.value);\n+\t      v->quick_push (elt);\n+\t    }\n+\t  new_init = build_constructor (TREE_TYPE (new_init), v);\n+\t}\n+      else\n+\tvec_safe_truncate (CONSTRUCTOR_ELTS (new_init), nelts);\n     }\n \n   return new_init;"}]}