{"sha": "157371cf43544336eaca4ae81b6e2a95f69645ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3MzcxY2Y0MzU0NDMzNmVhY2E0YWU4MWI2ZTJhOTVmNjk2NDVlYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2004-07-29T06:10:03Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2004-07-29T06:10:03Z"}, "message": "Introduce sh2a support.\n\n2004-07-29  Alexandre Oliva  <aoliva@redhat.com>\n* config.gcc: Build multilibs for sh2a and sh2a-single by\ndefault.\n* config/sh/sh.h (SUPPORT_SH2A, SUPPORT_SH2A_SINGLE): Define by\ndefault.  Split their tests out of the corresponding SH4\nmultilibs.\n* config/sh/t-sh (MULTILIB_MATCHES): Don't ever use SH4 or SH4a\nmultilibs for SH2a.\n2004-07-28  Alexandre Oliva  <aoliva@redhat.com>\n* config.gcc: Handle sh2a multilibs and cpu selection.\n* config/sh/sh.h: Likewise.  Handle sh2a command line flags.\n* config/sh/t-mlib-sh2a: New.\n* config/sh/t-mlib-sh2a-nofpu: New.\n* config/sh/t-mlib-sh2a-single: New.\n* config/sh/t-mlib-sh2a-single-only: New.\n2004-07-09  Nick Clifton  <nickc@redhat.com>\nIssue 43400\n* config/sh/sh.h (DRIVER_SELF_SPECS): Issue an error message if\n-ml and -m2a are used together.\n2004-03-23  DJ Delorie  <dj@redhat.com>\n* config/sh/sh.c (sh_builtin_saveregs): Use the double code only\nwhen we have a double-sized FPU.\n2004-02-24  Corinna Vinschen <vinschen@redhat.com>\n* config/sh/lib1funcs.asm (set_fpscr): Don't build if __SH2A_NOFPU__\nis set.\n* config/sh/elf.h (SUBTARGET_ASM_ISA_SPEC): Add cases for -msh2a-nofpu,\n-msh2a-single and -msh2a-single-only\n2004-02-24  Corinna Vinschen <vinschen@redhat.com>\n* config/sh/crt1.asm: Don't generate FPU instructions if __SH2A_NOFPU__\nis set.\n2004-02-20  DJ Delorie  <dj@delorie.com>\n* config/sh/sh.md (movsf_i, movsf_ie, movsf, ble, bge): Disable for sh2a-nofpu.\n2004-02-20  Fred Fish <fnf@redhat.com>,\nCorinna Vinschen <vinschen@redhat.com>\n* config/sh/t-sh (MULTILIB_OPTIONS): Add 2a-nofpu.\n(MULTILIB_EXCEPTIONS): Don't build littel-endian on sh2a.\n2004-02-18  DJ Delorie  <dj@redhat.com>\n* config/sh/sh.c (broken_move): Add support for movi20.\n* config/sh/sh.h: Likewise.\n(SHIFT_COUNT_TRUNCATED): Set for sh2a.\n* config/sh/sh.md (udivsi3_sh2a): New.\n(udivsi3): Call it.\n(divsi3_sh2a): New.\n(divsi3): Call it.\n(mul_r): New.\n(ashlsi3_sh2a): New.\n(ashrsi3_sh2a): New.\n(lshrsi3_sh2a): New.\n(movsi_i): Disable for sh2a.\n(movsi_ie): Add movi20.\n(movsf_i, movsf_ie, movsf, ble, untyped_call): Explicitly enable\nsh2a, for -m2a-nofpu mode.\n2004-02-13  DJ Delorie  <dj@redhat.com>\n* config/sh/lib1funcs.asm: Handle double vs single better.\n* config/sh/sh.h: Likewise.\n2004-02-09  DJ Delorie  <dj@redhat.com>\n* config/sh/crt1.asm: Add support for sh2a.\n* config/sh/elf.h: Likewise.\n* config/sh/lib1funcs.asm: Likewise.\n* config/sh/sh.c: Likewise.\n* config/sh/sh.md: Likewise.\n* config/sh/sh.h: Likewise.\n* config/sh/t-sh: Likewise.\n\nFrom-SVN: r85286", "tree": {"sha": "5cc03db5307cbbf9626c06024b397c40851cba24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc03db5307cbbf9626c06024b397c40851cba24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157371cf43544336eaca4ae81b6e2a95f69645ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157371cf43544336eaca4ae81b6e2a95f69645ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157371cf43544336eaca4ae81b6e2a95f69645ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157371cf43544336eaca4ae81b6e2a95f69645ec/comments", "author": null, "committer": null, "parents": [{"sha": "6f4c062b8eb0bd134acab56ab3b1b69750552436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4c062b8eb0bd134acab56ab3b1b69750552436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4c062b8eb0bd134acab56ab3b1b69750552436"}], "stats": {"total": 508, "additions": 394, "deletions": 114}, "files": [{"sha": "12ae194fe3ad3668120938316b03207b86e7452a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -1,3 +1,70 @@\n+2004-07-29  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tIntroduce sh2a support.\n+\t2004-07-29  Alexandre Oliva  <aoliva@redhat.com>\n+\t* config.gcc: Build multilibs for sh2a and sh2a-single by\n+\tdefault.\n+\t* config/sh/sh.h (SUPPORT_SH2A, SUPPORT_SH2A_SINGLE): Define by\n+\tdefault.  Split their tests out of the corresponding SH4\n+\tmultilibs.\n+\t* config/sh/t-sh (MULTILIB_MATCHES): Don't ever use SH4 or SH4a\n+\tmultilibs for SH2a.\n+\t2004-07-28  Alexandre Oliva  <aoliva@redhat.com>\n+\t* config.gcc: Handle sh2a multilibs and cpu selection.\n+\t* config/sh/sh.h: Likewise.  Handle sh2a command line flags.\n+\t* config/sh/t-mlib-sh2a: New.\n+\t* config/sh/t-mlib-sh2a-nofpu: New.\n+\t* config/sh/t-mlib-sh2a-single: New.\n+\t* config/sh/t-mlib-sh2a-single-only: New.\n+\t2004-07-09  Nick Clifton  <nickc@redhat.com>\n+\tIssue 43400\n+\t* config/sh/sh.h (DRIVER_SELF_SPECS): Issue an error message if\n+\t-ml and -m2a are used together.\n+\t2004-03-23  DJ Delorie  <dj@redhat.com>\n+\t* config/sh/sh.c (sh_builtin_saveregs): Use the double code only\n+\twhen we have a double-sized FPU.\n+\t2004-02-24  Corinna Vinschen <vinschen@redhat.com>\n+\t* config/sh/lib1funcs.asm (set_fpscr): Don't build if __SH2A_NOFPU__\n+\tis set.\n+\t* config/sh/elf.h (SUBTARGET_ASM_ISA_SPEC): Add cases for -msh2a-nofpu,\n+\t-msh2a-single and -msh2a-single-only\n+\t2004-02-24  Corinna Vinschen <vinschen@redhat.com>\n+\t* config/sh/crt1.asm: Don't generate FPU instructions if __SH2A_NOFPU__\n+\tis set.\n+\t2004-02-20  DJ Delorie  <dj@delorie.com>\n+\t* config/sh/sh.md (movsf_i, movsf_ie, movsf, ble, bge): Disable for sh2a-nofpu.\n+\t2004-02-20  Fred Fish <fnf@redhat.com>,\n+\tCorinna Vinschen <vinschen@redhat.com>\n+\t* config/sh/t-sh (MULTILIB_OPTIONS): Add 2a-nofpu.\n+\t(MULTILIB_EXCEPTIONS): Don't build littel-endian on sh2a.\n+\t2004-02-18  DJ Delorie  <dj@redhat.com>\n+\t* config/sh/sh.c (broken_move): Add support for movi20.\n+\t* config/sh/sh.h: Likewise.\n+\t(SHIFT_COUNT_TRUNCATED): Set for sh2a.\n+\t* config/sh/sh.md (udivsi3_sh2a): New.\n+\t(udivsi3): Call it.\n+\t(divsi3_sh2a): New.\n+\t(divsi3): Call it.\n+\t(mul_r): New.\n+\t(ashlsi3_sh2a): New.\n+\t(ashrsi3_sh2a): New.\n+\t(lshrsi3_sh2a): New.\n+\t(movsi_i): Disable for sh2a.\n+\t(movsi_ie): Add movi20.\n+\t(movsf_i, movsf_ie, movsf, ble, untyped_call): Explicitly enable\n+\tsh2a, for -m2a-nofpu mode.\n+\t2004-02-13  DJ Delorie  <dj@redhat.com>\n+\t* config/sh/lib1funcs.asm: Handle double vs single better.\n+\t* config/sh/sh.h: Likewise.\n+\t2004-02-09  DJ Delorie  <dj@redhat.com>\n+\t* config/sh/crt1.asm: Add support for sh2a.\n+\t* config/sh/elf.h: Likewise.\n+\t* config/sh/lib1funcs.asm: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/sh/t-sh: Likewise.\n+\n 2004-07-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/frv/frv.md (movqi_internal, movhi_internal,"}, {"sha": "dadc454cd271db56b2a29769ebfa3377bb640388", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -1757,6 +1757,10 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \tsh4* | sh-superh-*)\tsh_cpu_target=sh4 ;;\n \tsh3e*)\t\t\tsh_cpu_target=sh3e ;;\n \tsh*-*-netbsd* | sh3*)\tsh_cpu_target=sh3 ;;\n+\tsh2a_single_only*)\tsh_cpu_target=sh2a-single-only ;;\n+\tsh2a_single*)\t\tsh_cpu_target=sh2a-single ;;\n+\tsh2a_nofpu*)\t\tsh_cpu_target=sh2a-nofpu ;;\n+\tsh2a*)\t\t\tsh_cpu_target=sh2a ;;\n \tsh2e*)\t\t\tsh_cpu_target=sh2e ;;\n \tsh2*)\t\t\tsh_cpu_target=sh2 ;;\n \t*)\t\t\tsh_cpu_target=sh1 ;;\n@@ -1765,6 +1769,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \tcase $sh_cpu_default in\n \tsh5-64media-nofpu | sh5-64media | \\\n \t  sh5-32media-nofpu | sh5-32media | sh5-compact-nofpu | sh5-compact | \\\n+\t  sh2a-single-only | sh2a-single | sh2a-nofpu | sh2a | \\\n \t  sh4a-single-only | sh4a-single | sh4a-nofpu | sh4a | sh4al | \\\n \t  sh4-single-only | sh4-single | sh4-nofpu | sh4 | \\\n \t  sh3e | sh3 | sh2e | sh2 | sh1) ;;\n@@ -1779,7 +1784,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\tsh-superh-*)\tsh_multilibs=m4,m4-single,m4-single-only,m4-nofpu ;;\n \t\tsh*-*-linux*)\tsh_multilibs=m1,m3e,m4 ;;\n \t\tsh*-*-netbsd*)\tsh_multilibs=m3,m3e,m4 ;;\n-\t\t*) sh_multilibs=m1,m2,m2e,m4,m4-single,m4-single-only ;;\n+\t\t*) sh_multilibs=m1,m2,m2e,m4,m4-single,m4-single-only,m2a,m2a-single ;;\n \t\tesac\n \tfi\n \ttarget_cpu_default=SELECT_`echo ${sh_cpu_default}|tr a-z- A-Z_`\n@@ -1790,6 +1795,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\tsh1 | sh2 | sh2e | sh3 | sh3e | \\\n \t\tsh4 | sh4-single | sh4-single-only | sh4-nofpu | \\\n \t\tsh4a | sh4a-single | sh4a-single-only | sh4a-nofpu | sh4al | \\\n+\t\tsh2a | sh2a-single | sh2a-single-only | sh2a-nofpu | \\\n \t\tsh5-64media | sh5-64media-nofpu | \\\n \t\tsh5-32media | sh5-32media-nofpu | \\\n \t\tsh5-compact | sh5-compact-nofpu)\n@@ -1803,7 +1809,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\tesac\n \tdone\n \tif test x${enable_incomplete_targets} == xyes ; then\n-\t\ttm_defines=\"$tm_defines SUPPORT_SH1 SUPPORT_SH2E SUPPORT_SH4 SUPPORT_SH4_SINGLE SUPPORT_SH5_32MEDIA SUPPORT_SH5_32MEDIA_NOFPU SUPPORT_SH5_64MEDIA SUPPORT_SH5_64MEDIA_NOFPU\"\n+\t\ttm_defines=\"$tm_defines SUPPORT_SH1 SUPPORT_SH2E SUPPORT_SH4 SUPPORT_SH4_SINGLE SUPPORT_SH2A SUPPORT_SH2A_SINGLE SUPPORT_SH5_32MEDIA SUPPORT_SH5_32MEDIA_NOFPU SUPPORT_SH5_64MEDIA SUPPORT_SH5_64MEDIA_NOFPU\"\n \tfi\n \tuse_fixproto=yes\n \t;;\n@@ -2483,12 +2489,15 @@ fi\n \t\t\"\" | m1 | m2 | m2e | m3 | m3e | m4 | m4-single | m4-single-only | m4-nofpu )\n \t\t\t# OK\n \t\t\t;;\n+\t\tm2a | m2a-single | m2a-single-only | m2a-nofpu)\n+\t\t\t;;\n \t\tm4a | m4a-single | m4a-single-only | m4a-nofpu | m4al)\n \t\t        ;;\n \t\t*)\n \t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu, known values:\"  1>&2\n \t\t\techo \"m1 m2 m2e m3 m3e m4 m4-single m4-single-only m4-nofpu\" 1>&2\n \t\t\techo \"m4a m4a-single m4a-single-only m4a-nofpu m4al\" 1>&2\n+\t\t\techo \"m2a m2a-single m2a-single-only m2a-nofpu\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "f2c4e0d7bebc7843f5fd0979d03158171b561d2b", "filename": "gcc/config/sh/crt1.asm", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fcrt1.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fcrt1.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fcrt1.asm?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -72,7 +72,7 @@ start:\n \tLOAD_ADDR (___data, r26)\n \tLOAD_ADDR (___rodata, r27)\n \n-#if ! __SH4_NOFPU__\n+#if ! __SH4_NOFPU__ && ! __SH2A_NOFPU__\n #if __SH5__ == 32\n \tpt/l ___set_fpscr, tr0\n \tmovi\t0, r4\n@@ -116,12 +116,14 @@ start_l:\n \tcmp/ge\tr0,r1\n \tbt\tstart_l\n \n-#if defined (__SH2E__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n+#if ! __SH2A_NOFPU__\n+#if defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n \tmov.l set_fpscr_k, r1\n \tjsr @r1\n \tmov #0,r4\n \tlds r3,fpscr\n-#endif /*  defined (__SH2E__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) */\n+#endif /*  defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) */\n+#endif /* ! __SH2A_NOFPU__ */\n \n \t! arrange for exit to call fini\n \tmov.l\tatexit_k,r0\n@@ -146,10 +148,12 @@ start_l:\n \tnop\n \n \t.align 2\n-#if defined (__SH2E__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n+#if ! __SH2A_NOFPU__\n+#if defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n set_fpscr_k:\n \t.long\t___set_fpscr\n-#endif /*  defined (__SH2E__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) */\n+#endif /*  defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) */\n+#endif /* ! __SH2A_NOFPU__ */\n \n stack_k:\n \t.long\t_stack\t"}, {"sha": "d632bf7de2020d9a9e155f449cb3828a2fcd2954", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -58,6 +58,10 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_SPEC SH_ASM_SPEC\n #undef SUBTARGET_ASM_ISA_SPEC\n #define SUBTARGET_ASM_ISA_SPEC \"\\\n+%{m2a:--isa=sh2a} \\\n+%{m2a-single:--isa=sh2a} \\\n+%{m2a-single-only:--isa=sh2a} \\\n+%{m2a-nofpu:--isa=sh2a-nofpu} \\\n %{m5-compact*:--isa=SHcompact} %{m5-32media*:--isa=SHmedia --abi=32} \\\n %{m5-64media*:--isa=SHmedia --abi=64}\" ASM_ISA_DEFAULT_SPEC\n "}, {"sha": "1dc354994b3a29c886e3b25c02e7072896f38d8e", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -56,6 +56,11 @@ Boston, MA 02111-1307, USA.  */\n #define FMOVD_WORKS\n #endif\n \n+#ifdef __SH2A__\n+#undef FMOVD_WORKS\n+#define FMOVD_WORKS\n+#endif\n+\n #if ! __SH5__\n #ifdef L_ashiftrt\n \t.global\tGLOBAL(ashiftrt_r4_0)\n@@ -1936,7 +1941,8 @@ GLOBAL(moddi3):\n #endif /* L_moddi3 */\n \n #ifdef L_set_fpscr\n-#if defined (__SH2E__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || __SH5__ == 32\n+#if !defined (__SH2A_NOFPU__)\n+#if defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || __SH5__ == 32\n #ifdef __SH5__\n \t.mode\tSHcompact\n #endif\n@@ -1960,7 +1966,7 @@ GLOBAL(set_fpscr):\n #ifndef FMOVD_WORKS\n \txor #16,r0\n #endif\n-#if defined(__SH4__)\n+#if defined(__SH4__) || defined (__SH2A_DOUBLE__)\n \tswap.w r0,r3\n \tmov.l r3,@(4,r1)\n #else /* defined (__SH2E__) || defined(__SH3E__) || defined(__SH4_SINGLE*__) */\n@@ -1972,7 +1978,7 @@ GLOBAL(set_fpscr):\n #else\n \txor #24,r0\n #endif\n-#if defined(__SH4__)\n+#if defined(__SH4__) || defined (__SH2A_DOUBLE__)\n \tswap.w r0,r2\n \trts\n \tmov.l r2,@r1\n@@ -2001,6 +2007,7 @@ LOCAL(set_fpscr_L1):\n #endif /* ELF */\n #endif /* NO_FPSCR_VALUES */\n #endif /* SH2E / SH3E / SH4 */\n+#endif /* __SH2A_NOFPU__ */\n #endif /* L_set_fpscr */\n #ifdef L_ic_invalidate\n #if __SH5__ == 32"}, {"sha": "b2c01302778129d25e8edf29bf41a93c6ef3ff23", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -1111,7 +1111,7 @@ prepare_scc_operands (enum rtx_code code)\n       || (TARGET_SH2E && GET_MODE_CLASS (mode) == MODE_FLOAT))\n     sh_compare_op1 = force_reg (mode, sh_compare_op1);\n \n-  if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+  if ((TARGET_SH4 || TARGET_SH2A) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     (mode == SFmode ? emit_sf_insn : emit_df_insn)\n      (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n \t\tgen_rtx_SET (VOIDmode, t_reg,\n@@ -1156,7 +1156,7 @@ from_compare (rtx *operands, int code)\n \t\t\tgen_rtx_REG (SImode, T_REG),\n \t\t\tgen_rtx_fmt_ee (code, SImode,\n \t\t\t\t\tsh_compare_op0, sh_compare_op1));\n-  if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+  if ((TARGET_SH4 || TARGET_SH2A) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {\n       insn = gen_rtx_PARALLEL (VOIDmode,\n \t\t      gen_rtvec (2, insn,\n@@ -3066,6 +3066,10 @@ broken_move (rtx insn)\n \t\t\t== SCRATCH))\n \t\t&& GET_CODE (SET_DEST (pat)) == REG\n \t\t&& FP_REGISTER_P (REGNO (SET_DEST (pat))))\n+\t  && ! (TARGET_SH2A\n+\t\t&& GET_MODE (SET_DEST (pat)) == SImode\n+\t\t&& GET_CODE (SET_SRC (pat)) == CONST_INT\n+\t\t&& CONST_OK_FOR_I20 (INTVAL (SET_SRC (pat))))\n \t  && (GET_CODE (SET_SRC (pat)) != CONST_INT\n \t      || ! CONST_OK_FOR_I08 (INTVAL (SET_SRC (pat)))))\n \treturn 1;\n@@ -3810,6 +3814,10 @@ fixup_addr_diff_vecs (rtx first)\n \t  if (GET_CODE (x) == LABEL_REF && XEXP (x, 0) == vec_lab)\n \t    break;\n \t}\n+      /* FIXME: This is a bug in the optimizer, but it seems harmless\n+\t to just avoid panicing.  */\n+      if (!prev)\n+\tcontinue;\n \n       /* Emit the reference label of the braf where it belongs, right after\n \t the casesi_jump_2 (i.e. braf).  */\n@@ -4786,8 +4794,12 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n     {\n       HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n \n+/* This test is bogus, as output_stack_adjust is used to re-align the\n+   stack.  */\n+#if 0\n       if (size % align)\n \tabort ();\n+#endif\n \n       if (CONST_OK_FOR_ADD (size))\n \temit_fn (GEN_ADD3 (reg, reg, GEN_INT (size)));\n@@ -4948,7 +4960,7 @@ push (int rn)\n     x = gen_push_fpul ();\n   else if (rn == FPSCR_REG)\n     x = gen_push_fpscr ();\n-  else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n+  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n \t   && FP_OR_XD_REGISTER_P (rn))\n     {\n       if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n@@ -4977,7 +4989,7 @@ pop (int rn)\n     x = gen_pop_fpul ();\n   else if (rn == FPSCR_REG)\n     x = gen_pop_fpscr ();\n-  else if (TARGET_SH4 && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n+  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && ! TARGET_FPU_SINGLE\n \t   && FP_OR_XD_REGISTER_P (rn))\n     {\n       if (FP_REGISTER_P (rn) && (rn - FIRST_FP_REG) & 1)\n@@ -5095,11 +5107,11 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n   interrupt_handler = sh_cfun_interrupt_handler_p ();\n \n   CLEAR_HARD_REG_SET (*live_regs_mask);\n-  if (TARGET_SH4 && TARGET_FMOVD && interrupt_handler\n+  if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && interrupt_handler\n       && regs_ever_live[FPSCR_REG])\n     target_flags &= ~FPU_SINGLE_BIT;\n   /* If we can save a lot of saves by switching to double mode, do that.  */\n-  else if (TARGET_SH4 && TARGET_FMOVD && TARGET_FPU_SINGLE)\n+  else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && TARGET_FPU_SINGLE)\n     for (count = 0, reg = FIRST_FP_REG; reg <= LAST_FP_REG; reg += 2)\n       if (regs_ever_live[reg] && regs_ever_live[reg+1]\n \t  && (! call_used_regs[reg] || (interrupt_handler && ! pragma_trapa))\n@@ -5172,7 +5184,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  SET_HARD_REG_BIT (*live_regs_mask, reg);\n \t  count += GET_MODE_SIZE (REGISTER_NATURAL_MODE (reg));\n \n-\t  if ((TARGET_SH4 || TARGET_SH5) && TARGET_FMOVD\n+\t  if ((TARGET_SH4 || TARGET_SH2A_DOUBLE || TARGET_SH5) && TARGET_FMOVD\n \t      && GET_MODE_CLASS (REGISTER_NATURAL_MODE (reg)) == MODE_FLOAT)\n \t    {\n \t      if (FP_REGISTER_P (reg))\n@@ -6194,7 +6206,7 @@ sh_builtin_saveregs (void)\n   emit_move_insn (fpregs, XEXP (regbuf, 0));\n   emit_insn (gen_addsi3 (fpregs, fpregs,\n \t\t\t GEN_INT (n_floatregs * UNITS_PER_WORD)));\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       rtx mem;\n       for (regno = NPARM_REGS (DFmode) - 2; regno >= first_floatreg; regno -= 2)\n@@ -6838,7 +6850,7 @@ sh_function_arg_advance (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n \t}\n     }\n \n-  if (! (TARGET_SH4 || ca->renesas_abi)\n+  if (! ((TARGET_SH4 || TARGET_SH2A) || ca->renesas_abi)\n       || PASS_IN_REG_P (*ca, mode, type))\n     (ca->arg_count[(int) GET_SH_ARG_CLASS (mode)]\n      = (ROUND_REG (*ca, mode)\n@@ -7565,7 +7577,10 @@ tertiary_reload_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n int\n fpscr_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n-  return (GET_CODE (op) == REG && REGNO (op) == FPSCR_REG\n+  return (GET_CODE (op) == REG\n+\t  && (REGNO (op) == FPSCR_REG\n+\t      || (REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t\t  && !(reload_in_progress || reload_completed)))\n \t  && GET_MODE (op) == PSImode);\n }\n "}, {"sha": "276bd1e11012077d546104a387f031a89e73e37e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 107, "deletions": 12, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -48,6 +48,13 @@ do { \\\n     case PROCESSOR_SH2E: \\\n       builtin_define (\"__SH2E__\"); \\\n       break; \\\n+    case PROCESSOR_SH2A: \\\n+      builtin_define (\"__SH2A__\"); \\\n+      builtin_define (TARGET_SH2A_DOUBLE \\\n+\t\t      ? (TARGET_FPU_SINGLE ? \"__SH2A_SINGLE__\" : \"__SH2A_DOUBLE__\") \\\n+\t\t      : TARGET_FPU_ANY ? \"__SH2A_SINGLE_ONLY__\" \\\n+\t\t      : \"__SH2A_NOFPU__\"); \\\n+      break; \\\n     case PROCESSOR_SH3: \\\n       builtin_define (\"__sh3__\"); \\\n       builtin_define (\"__SH3__\"); \\\n@@ -159,6 +166,8 @@ extern int target_flags;\n #define LITTLE_ENDIAN_BIT (1<<29)\n #define IEEE_BIT (1<<30)\n #define SAVE_ALL_TR_BIT (1<<2)\n+#define HARD_SH2A_BIT\t(1<<17)\n+#define HARD_SH2A_DOUBLE_BIT\t(1<<18)\n \n /* Nonzero if this is an ELF target - compile time only */\n #define TARGET_ELF 0\n@@ -178,6 +187,13 @@ extern int target_flags;\n /* Nonzero if we should generate code using type 2E insns.  */\n #define TARGET_SH2E ((target_flags & SH_E_BIT) && TARGET_SH2)\n \n+/* Nonzero if we should generate code using type 2A insns.  */\n+#define TARGET_SH2A (target_flags & HARD_SH2A_BIT)\n+/* Nonzero if we should generate code using type 2A SF insns.  */\n+#define TARGET_SH2A_SINGLE ((target_flags & HARD_SH2A_BIT) && TARGET_SH2E)\n+/* Nonzero if we should generate code using type 2A DF insns.  */\n+#define TARGET_SH2A_DOUBLE ((target_flags & HARD_SH2A_DOUBLE_BIT) && TARGET_SH2A)\n+\n /* Nonzero if we should generate code using type 3 insns.  */\n #define TARGET_SH3 (target_flags & SH3_BIT)\n \n@@ -200,7 +216,7 @@ extern int target_flags;\n #define TARGET_FPU_SINGLE (target_flags & FPU_SINGLE_BIT)\n \n /* Nonzero if a double-precision FPU is available.  */\n-#define TARGET_FPU_DOUBLE (target_flags & SH4_BIT)\n+#define TARGET_FPU_DOUBLE ((target_flags & SH4_BIT) || TARGET_SH2A_DOUBLE)\n \n /* Nonzero if an FPU is available.  */\n #define TARGET_FPU_ANY (TARGET_SH2E || TARGET_FPU_DOUBLE)\n@@ -290,11 +306,18 @@ extern int target_flags;\n #define SUPPORT_SH2E\n #define SUPPORT_SH4\n #define SUPPORT_SH4_SINGLE\n+#define SUPPORT_SH2A\n+#define SUPPORT_SH2A_SINGLE\n #endif\n \n #define SELECT_SH1               (SH1_BIT)\n #define SELECT_SH2               (SH2_BIT | SELECT_SH1)\n #define SELECT_SH2E              (SH_E_BIT | SH2_BIT | SH1_BIT | FPU_SINGLE_BIT)\n+#define SELECT_SH2A              (SH_E_BIT | HARD_SH2A_BIT | HARD_SH2A_DOUBLE_BIT | SH2_BIT | SH1_BIT)\n+#define SELECT_SH2A_NOFPU        (HARD_SH2A_BIT | SH2_BIT | SH1_BIT)\n+#define SELECT_SH2A_SINGLE_ONLY  (SH_E_BIT | HARD_SH2A_BIT | SH2_BIT | SH1_BIT | FPU_SINGLE_BIT)\n+#define SELECT_SH2A_SINGLE       (SH_E_BIT | HARD_SH2A_BIT | FPU_SINGLE_BIT \\\n+\t\t\t\t  | HARD_SH2A_DOUBLE_BIT | SH2_BIT | SH1_BIT)\n #define SELECT_SH3               (SH3_BIT | SELECT_SH2)\n #define SELECT_SH3E              (SH_E_BIT | FPU_SINGLE_BIT | SELECT_SH3)\n #define SELECT_SH4_NOFPU         (HARD_SH4_BIT | SELECT_SH3)\n@@ -328,6 +351,9 @@ extern int target_flags;\n #ifndef SUPPORT_SH4AL\n #define TARGET_SWITCH_SH4AL\n #endif\n+#ifndef SUPPORT_SH2A_NOFPU\n+#define TARGET_SWITCH_SH2A_NOFPU\n+#endif\n #endif\n #endif\n #endif\n@@ -342,6 +368,9 @@ extern int target_flags;\n #ifndef SUPPORT_SH4A_SINGLE_ONLY\n #define TARGET_SWITCH_SH4A_SINGLE_ONLY\n #endif\n+#ifndef SUPPORT_SH2A_SINGLE_ONLY\n+#define TARGET_SWITCH_SH2A_SINGLE_ONLY\n+#endif\n #endif\n #endif\n \n@@ -359,6 +388,14 @@ extern int target_flags;\n #endif\n #endif\n \n+#ifndef SUPPORT_SH2A\n+#define TARGET_SWITCH_SH2A\n+#endif\n+\n+#ifndef SUPPORT_SH2A_SINGLE\n+#define TARGET_SWITCH_SH2A_SINGLE\n+#endif\n+\n #ifndef SUPPORT_SH5_64MEDIA\n #define TARGET_SWITCH_SH5_64MEDIA\n #endif\n@@ -377,6 +414,7 @@ extern int target_flags;\n \n /* Reset all target-selection flags.  */\n #define TARGET_NONE -(SH1_BIT | SH2_BIT | SH3_BIT | SH_E_BIT | SH4_BIT \\\n+\t\t      | HARD_SH2A_BIT | HARD_SH2A_DOUBLE_BIT \\\n \t\t      | SH4A_BIT | HARD_SH4_BIT | FPU_SINGLE_BIT | SH5_BIT)\n \n #ifndef TARGET_SWITCH_SH1\n@@ -394,6 +432,26 @@ extern int target_flags;\n   {\"2e\",\tTARGET_NONE, \"\" }, \\\n   {\"2e\",\tSELECT_SH2E, \"Generate SH2e code\" },\n #endif\n+#ifndef TARGET_SWITCH_SH2A\n+#define TARGET_SWITCH_SH2A \\\n+  {\"2a\",\tTARGET_NONE, \"\" }, \\\n+  {\"2a\",\tSELECT_SH2A, \"Generate SH2a code\" },\n+#endif\n+#ifndef TARGET_SWITCH_SH2A_SINGLE_ONLY\n+#define TARGET_SWITCH_SH2A_SINGLE_ONLY \\\n+  {\"2a-single-only\", TARGET_NONE, \"\" },\t\\\n+  {\"2a-single-only\", SELECT_SH2A_SINGLE_ONLY, \"Generate only single-precision SH2a code\" },\n+#endif\n+#ifndef TARGET_SWITCH_SH2A_SINGLE\n+#define TARGET_SWITCH_SH2A_SINGLE \\\n+  {\"2a-single\", TARGET_NONE, \"\" },\t\\\n+  {\"2a-single\", SELECT_SH2A_SINGLE, \"Generate default single-precision SH2a code\" },\n+#endif\n+#ifndef TARGET_SWITCH_SH2A_NOFPU\n+#define TARGET_SWITCH_SH2A_NOFPU \\\n+  {\"2a-nofpu\",  TARGET_NONE, \"\" },\t\\\n+  {\"2a-nofpu\",  SELECT_SH2A_NOFPU, \"Generate SH2a FPU-less code\" },\n+#endif\n #ifndef TARGET_SWITCH_SH3\n #define TARGET_SWITCH_SH3 \\\n   {\"3\",\t\tTARGET_NONE, \"\" }, \\\n@@ -477,6 +535,10 @@ extern int target_flags;\n #define TARGET_SWITCHES \\\n { TARGET_SWITCH_SH1 \\\n   TARGET_SWITCH_SH2 \\\n+  TARGET_SWITCH_SH2A_SINGLE_ONLY \\\n+  TARGET_SWITCH_SH2A_SINGLE \\\n+  TARGET_SWITCH_SH2A_NOFPU \\\n+  TARGET_SWITCH_SH2A \\\n   TARGET_SWITCH_SH2E \\\n   TARGET_SWITCH_SH3 \\\n   TARGET_SWITCH_SH3E \\\n@@ -612,6 +674,7 @@ extern int target_flags;\n %(subtarget_link_emul_suffix) \\\n %{mrelax:-relax} %(subtarget_link_spec)\"\n \n+#define DRIVER_SELF_SPECS \"%{m2a:%{ml:%eSH2a does not support little-endian}}\"\n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (LEVEL)\t\t\t\t\t\t\t\t\\\n@@ -640,6 +703,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n     sh_cpu = CPU_SH2;\t\t\t\t\t\t\t\\\n   if (TARGET_SH2E)\t\t\t\t\t\t\t\\\n     sh_cpu = CPU_SH2E;\t\t\t\t\t\t\t\\\n+  if (TARGET_SH2A)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      sh_cpu = CPU_SH2A;\t\t\t\t\t\t\\\n+      if (TARGET_SH2A_DOUBLE)\t\t\t\t\t\t\\\n+        target_flags |= FMOVD_BIT;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SH3)\t\t\t\t\t\t\t\\\n     sh_cpu = CPU_SH3;\t\t\t\t\t\t\t\\\n   if (TARGET_SH3E)\t\t\t\t\t\t\t\\\n@@ -1210,7 +1279,7 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n    : FP_REGISTER_P (REGNO) \\\n    ? ((MODE) == SFmode || (MODE) == SImode \\\n       || ((TARGET_SH2E || TARGET_SHMEDIA) && (MODE) == SCmode) \\\n-      || (((TARGET_SH4 && (MODE) == DFmode) || (MODE) == DCmode \\\n+      || ((((TARGET_SH4 || TARGET_SH2A_DOUBLE) && (MODE) == DFmode) || (MODE) == DCmode \\\n \t   || (TARGET_SHMEDIA && ((MODE) == DFmode || (MODE) == DImode \\\n \t\t\t\t  || (MODE) == V2SFmode || (MODE) == TImode))) \\\n \t  && (((REGNO) - FIRST_FP_REG) & 1) == 0)) \\\n@@ -1552,7 +1621,7 @@ extern enum reg_class reg_class_from_letter[];\n   (((C) == 'L' || (C) == 'O' || (C) == 'D' || (C) == 'T' || (C) == 'U' \\\n     || (C) == 'Y' \\\n     || ((C) == 'I' \\\n-        && (((STR)[1] != '0' && (STR)[1] != '1') \\\n+        && (((STR)[1] != '0' && (STR)[1] != '1' && (STR)[1] != '2') \\\n \t    || (STR)[2] < '0' || (STR)[2] > '9')) \\\n     || ((C) == 'B' && ((STR)[1] != 's' || (STR)[2] != 'c')) \\\n     || ((C) == 'J' && ((STR)[1] != '1' || (STR)[2] != '6')) \\\n@@ -1595,11 +1664,15 @@ extern enum reg_class reg_class_from_letter[];\n \t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 511)\n #define CONST_OK_FOR_I16(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -32768 \\\n \t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 32767)\n+#define CONST_OK_FOR_I20(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -524288 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 524287 \\\n+\t\t\t\t && TARGET_SH2A)\n #define CONST_OK_FOR_I(VALUE, STR) \\\n   ((STR)[1] == '0' && (STR)[2] == 6 ? CONST_OK_FOR_I06 (VALUE) \\\n    : (STR)[1] == '0' && (STR)[2] == '8' ? CONST_OK_FOR_I08 (VALUE) \\\n    : (STR)[1] == '1' && (STR)[2] == '0' ? CONST_OK_FOR_I10 (VALUE) \\\n    : (STR)[1] == '1' && (STR)[2] == '6' ? CONST_OK_FOR_I16 (VALUE) \\\n+   : (STR)[1] == '2' && (STR)[2] == '0' ? CONST_OK_FOR_I20 (VALUE) \\\n    : 0)\n \n #define CONST_OK_FOR_J16(VALUE) \\\n@@ -1740,7 +1813,7 @@ extern enum reg_class reg_class_from_letter[];\n #define NPARM_REGS(MODE) \\\n   (TARGET_FPU_ANY && (MODE) == SFmode \\\n    ? (TARGET_SH5 ? 12 : 8) \\\n-   : TARGET_SH4 && (GET_MODE_CLASS (MODE) == MODE_FLOAT \\\n+   : (TARGET_SH4 || TARGET_SH2A_DOUBLE) && (GET_MODE_CLASS (MODE) == MODE_FLOAT \\\n \t\t    || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n    ? (TARGET_SH5 ? 12 : 8) \\\n    : (TARGET_SH5 ? 8 : 4))\n@@ -1811,7 +1884,7 @@ extern enum reg_class reg_class_from_letter[];\n #define BASE_ARG_REG(MODE) \\\n   ((TARGET_SH2E && ((MODE) == SFmode))\t\t\t\\\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n-   : TARGET_SH4 && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n+   : (TARGET_SH4 || TARGET_SH2A_DOUBLE) && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\\\n \t\t    || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\\\n    ? FIRST_FP_PARM_REG\t\t\t\t\t\\\n    : FIRST_PARM_REG)\n@@ -1998,7 +2071,7 @@ struct sh_args {\n \n #define ROUND_REG(CUM, MODE) \\\n    (((TARGET_ALIGN_DOUBLE\t\t\t\t\t\\\n-      || (TARGET_SH4 && ((MODE) == DFmode || (MODE) == DCmode)\t\\\n+      || ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && ((MODE) == DFmode || (MODE) == DCmode)\t\\\n \t  && (CUM).arg_count[(int) SH_ARG_FLOAT] < NPARM_REGS (MODE)))\\\n      && GET_MODE_UNIT_SIZE ((MODE)) > UNITS_PER_WORD)\t\t\\\n     ? ((CUM).arg_count[(int) GET_SH_ARG_CLASS (MODE)]\t\t\\\n@@ -2181,7 +2254,7 @@ struct sh_args {\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \\\n   ((! TARGET_SH5 \\\n     && PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\\\n-    && ! TARGET_SH4\t\t\t\t\t\t\\\n+    && ! (TARGET_SH4 || TARGET_SH2A_DOUBLE)\t\t\t\t\t\t\\\n     && (ROUND_REG ((CUM), (MODE))\t\t\t\t\\\n \t+ ((MODE) != BLKmode\t\t\t\t\t\\\n \t   ? ROUND_ADVANCE (GET_MODE_SIZE (MODE))\t\t\\\n@@ -2542,6 +2615,20 @@ struct sh_args {\n ((GET_MODE_SIZE(MODE)==8) && ((unsigned)INTVAL(X)<60)\t\\\n  && ! (INTVAL(X) & 3) && ! (TARGET_SH4 && (MODE) == DFmode))\n \n+#undef MODE_DISP_OK_4\n+#define MODE_DISP_OK_4(X,MODE) \\\n+((GET_MODE_SIZE (MODE) == 4 && (unsigned) INTVAL (X) < 64\t\\\n+  && ! (INTVAL (X) & 3) && ! (TARGET_SH2E && (MODE) == SFmode)) \\\n+  || ((GET_MODE_SIZE(MODE)==4) && ((unsigned)INTVAL(X)<16383)\t\\\n+  && ! (INTVAL(X) & 3) && TARGET_SH2A))\n+\n+#undef MODE_DISP_OK_8\n+#define MODE_DISP_OK_8(X,MODE) \\\n+(((GET_MODE_SIZE(MODE)==8) && ((unsigned)INTVAL(X)<60)\t\\\n+  && ! (INTVAL(X) & 3) && ! ((TARGET_SH4 || TARGET_SH2A) && (MODE) == DFmode)) \\\n+ || ((GET_MODE_SIZE(MODE)==8) && ((unsigned)INTVAL(X)<8192)\t\\\n+  && ! (INTVAL(X) & (TARGET_SH2A_DOUBLE ? 7 : 3)) && (TARGET_SH2A && (MODE) == DFmode)))\n+\n #define BASE_REGISTER_RTX_P(X)\t\t\t\t\\\n   ((GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\\\n    || (GET_CODE (X) == SUBREG\t\t\t\t\\\n@@ -2615,7 +2702,7 @@ struct sh_args {\n \tGO_IF_LEGITIMATE_INDEX ((MODE), xop1, LABEL);\t\t\t\\\n       if (GET_MODE_SIZE (MODE) <= 4\t\t\t\t\t\\\n \t  || (TARGET_SHMEDIA && GET_MODE_SIZE (MODE) <= 8)\t\t\\\n-\t  || (TARGET_SH4 && TARGET_FMOVD && MODE == DFmode))\t\t\\\n+\t  || ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && MODE == DFmode))\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (BASE_REGISTER_RTX_P (xop1) && INDEX_REGISTER_RTX_P (xop0))\\\n \t    goto LABEL;\t\t\t\t\t\t\t\\\n@@ -2652,7 +2739,7 @@ struct sh_args {\n       && GET_CODE (XEXP ((X), 1)) == CONST_INT\t\t\t\\\n       && BASE_REGISTER_RTX_P (XEXP ((X), 0))\t\t\t\\\n       && ! TARGET_SHMEDIA\t\t\t\t\t\\\n-      && ! (TARGET_SH4 && (MODE) == DFmode)\t\t\t\\\n+      && ! ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && (MODE) == DFmode)\t\t\t\\\n       && ! (TARGET_SH2E && (MODE) == SFmode))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       rtx index_rtx = XEXP ((X), 1);\t\t\t\t\\\n@@ -2708,6 +2795,13 @@ struct sh_args {\n       HOST_WIDE_INT offset = INTVAL (index_rtx), offset_base;\t\t\\\n       rtx sum;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SH2A && (MODE) == DFmode && (offset & 0x7))\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  push_reload (X, NULL_RTX, &X, NULL,\t\t\t\t\\\n+\t\t       BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM),\t\\\n+\t\t       (TYPE));\t\t\t\t\t\t\\\n+\t  goto WIN;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n       if (TARGET_SH2E && MODE == SFmode)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  X = copy_rtx (X);\t\t\t\t\t\t\\\n@@ -2795,7 +2889,7 @@ struct sh_args {\n \n /* Since the SH2e has only `float' support, it is desirable to make all\n    floating point types equivalent to `float'.  */\n-#define DOUBLE_TYPE_SIZE ((TARGET_SH2E && ! TARGET_SH4) ? 32 : 64)\n+#define DOUBLE_TYPE_SIZE ((TARGET_SH2E && ! TARGET_SH4 && ! TARGET_SH2A_DOUBLE) ? 32 : 64)\n \n /* 'char' is signed by default.  */\n #define DEFAULT_SIGNED_CHAR  1\n@@ -2853,7 +2947,7 @@ struct sh_args {\n    However, the SH3 has hardware shifts that do not truncate exactly as gcc\n    expects - the sign bit is significant - so it appears that we need to\n    leave this zero for correct SH3 code.  */\n-#define SHIFT_COUNT_TRUNCATED (! TARGET_SH3)\n+#define SHIFT_COUNT_TRUNCATED (! TARGET_SH3 && ! TARGET_SH2A)\n \n /* All integers have the same format so truncation is easy.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC,INPREC)  1\n@@ -3246,6 +3340,7 @@ enum processor_type {\n   PROCESSOR_SH1,\n   PROCESSOR_SH2,\n   PROCESSOR_SH2E,\n+  PROCESSOR_SH2A,\n   PROCESSOR_SH3,\n   PROCESSOR_SH3E,\n   PROCESSOR_SH4,\n@@ -3377,7 +3472,7 @@ extern int rtx_equal_function_value_matters;\n \n #define NUM_MODES_FOR_MODE_SWITCHING { FP_MODE_NONE }\n \n-#define OPTIMIZE_MODE_SWITCHING(ENTITY) TARGET_SH4\n+#define OPTIMIZE_MODE_SWITCHING(ENTITY) (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n \n #define ACTUAL_NORMAL_MODE(ENTITY) \\\n   (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)"}, {"sha": "e825fae614b8b3e4eb92160f25a000e84c08a967", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 144, "deletions": 77, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -161,7 +161,7 @@\n ;; Target CPU.\n \n (define_attr \"cpu\"\n- \"sh1,sh2,sh2e,sh3,sh3e,sh4,sh4a,sh5\"\n+ \"sh1,sh2,sh2e,sh2a,sh3,sh3e,sh4,sh4a,sh5\"\n   (const (symbol_ref \"sh_cpu_attr\")))\n \n (define_attr \"endian\" \"big,little\"\n@@ -1151,6 +1151,14 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n+(define_insn \"udivsi3_sh2a\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(udiv:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t(match_operand:SI 2 \"arith_reg_operand\" \"z\")))]\n+  \"TARGET_SH2A\"\n+  \"divu\t%2,%1\"\n+  [(set_attr \"type\" \"arith\")])\n+\n ;; We must use a pseudo-reg forced to reg 0 in the SET_DEST rather than\n ;; hard register 0.  If we used hard register 0, then the next instruction\n ;; would be a move from hard register 0 to a pseudo-reg.  If the pseudo-reg\n@@ -1287,6 +1295,13 @@\n       emit_insn (gen_udivsi3_i4_media (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n+  else if (TARGET_SH2A)\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      operands[2] = force_reg (SImode, operands[2]);\n+      emit_insn (gen_udivsi3_sh2a (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n   else if (TARGET_SH5)\n     {\n       emit_move_insn (operands[3],\n@@ -1320,6 +1335,14 @@\n   DONE;\n }\")\n \n+(define_insn \"divsi3_sh2a\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(div:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t(match_operand:SI 2 \"arith_reg_operand\" \"z\")))]\n+  \"TARGET_SH2A\"\n+  \"divs\t%2,%1\"\n+  [(set_attr \"type\" \"arith\")])\n+\n (define_insn \"divsi3_i1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n \t(div:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n@@ -1427,6 +1450,13 @@\n       else\n \tlast = gen_divsi3_i4 (operands[0], operands[3]);\n     }\n+  else if (TARGET_SH2A)\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      operands[2] = force_reg (SImode, operands[2]);\n+      emit_insn (gen_divsi3_sh2a (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n   else if (TARGET_SHMEDIA_FPU)\n     {\n       operands[1] = force_reg (SImode, operands[1]);\n@@ -1585,6 +1615,14 @@\n   \"TARGET_SH1\"\n   \"\")\n \n+(define_insn \"mul_r\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"arith_reg_operand\" \"z\")))]\n+  \"TARGET_SH2A\"\n+  \"mulr\t%2,%0\"\n+  [(set_attr \"type\" \"dmpy\")])\n+\n (define_insn \"mul_l\"\n   [(set (reg:SI MACL_REG)\n \t(mult:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n@@ -2134,6 +2172,15 @@\n ;;\n ;; shift left\n \n+(define_insn \"ashlsi3_sh2a\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t   (match_operand:SI 2 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH2A\"\n+  \"shad\t%2,%0\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; This pattern is used by init_expmed for computing the costs of shift\n ;; insns.\n \n@@ -2269,6 +2316,15 @@\n ; arithmetic shift right\n ;\n \n+(define_insn \"ashrsi3_sh2a\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t   (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH2A\"\n+  \"shad\t%2,%0\"\n+  [(set_attr \"type\" \"dyn_shift\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"ashrsi3_k\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -2388,6 +2444,15 @@\n \n ;; logical shift right\n \n+(define_insn \"lshrsi3_sh2a\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n+\t\t     (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH2A\"\n+  \"shld\t%2,%0\"\n+  [(set_attr \"type\" \"dyn_shift\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"lshrsi3_d\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -3307,6 +3372,7 @@\n \t \"Q,rI08,r,mr,x,l,t,r,x,l,r,r,>,>,i\"))]\n   \"TARGET_SH1\n    && ! TARGET_SH2E\n+   && ! TARGET_SH2A\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n@@ -3336,15 +3402,16 @@\n ;; TARGET_FMOVD is in effect, and mode switching is done before reload.\n (define_insn \"movsi_ie\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n-\t    \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n+\t    \"=r,r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n-\t \"Q,rI08,r,mr,x,l,t,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n-  \"TARGET_SH2E\n+\t \"Q,rI08,I20,r,mr,x,l,t,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n+  \"(TARGET_SH2E || TARGET_SH2A)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n \tmov.l\t%1,%0\n \tmov\t%1,%0\n+\tmovi20\t%1,%0\n \tcmp/pl\t%1\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n@@ -3366,9 +3433,9 @@\n \tflds\t%1,fpul\n \tfmov\t%1,%0\n \t! move optimized away\"\n-  [(set_attr \"type\" \"pcload_si,move,*,load_si,mac_gp,prget,move,store,store,pstore,move,prset,load,pload,load,store,pcload_si,gp_fpul,fpul_gp,fmove,fmove,fmove,nil\")\n-   (set_attr \"late_fp_use\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes,*,*,yes,*,*,*,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,0\")])\n+  [(set_attr \"type\" \"pcload_si,move,move,*,load_si,mac_gp,prget,move,store,store,pstore,move,prset,load,pload,load,store,pcload_si,gp_fpul,fpul_gp,fmove,fmove,fmove,nil\")\n+   (set_attr \"late_fp_use\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes,*,*,yes,*,*,*,*\")\n+   (set_attr \"length\" \"*,*,4,*,4,*,*,*,4,*,*,*,*,*,*,*,*,*,*,*,*,*,*,0\")])\n \n (define_insn \"movsi_i_lowpart\"\n   [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,r,m,r\"))\n@@ -4109,7 +4176,7 @@\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n \t(match_operand:DF 1 \"general_movsrc_operand\" \"r,FQ,m,r\"))]\n   \"TARGET_SH1\n-   && (! TARGET_SH4 || reload_completed\n+   && (! (TARGET_SH4 || TARGET_SH2A_DOUBLE) || reload_completed\n        /* ??? We provide some insn so that direct_{load,store}[DFmode] get set */\n        || (GET_CODE (operands[0]) == REG && REGNO (operands[0]) == 3)\n        || (GET_CODE (operands[1]) == REG && REGNO (operands[1]) == 3))\n@@ -4130,7 +4197,7 @@\n \t(match_operand:DF 1 \"general_movsrc_operand\" \"d,r,F,m,d,FQ,m,r,d,r\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c,c,c,c,c,c,c,c,c,c\"))\n    (clobber (match_scratch:SI 3 \"=X,X,&z,X,X,X,X,X,X,X\"))]\n-  \"TARGET_SH4\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n    && (arith_reg_operand (operands[0], DFmode)\n        || arith_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -4148,8 +4215,8 @@\n      [(if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 2) (const_int 4))\n       (const_int 4)\n       (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 6))\n-      (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 2) (const_int 6))\n-      (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 2) (const_int 6))\n+      (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 6))\n+      (if_then_else (eq_attr \"fmovd\" \"yes\") (const_int 4) (const_int 6))\n       (const_int 4)\n       (const_int 8) (const_int 8) ;; these need only 8 bytes for @(r0,rn)\n       ;; We can't use 4-byte push/pop on SHcompact, so we have to\n@@ -4178,7 +4245,7 @@\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"=X\"))]\n-  \"TARGET_SH4 && reload_completed\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\n    && (true_regnum (operands[0]) < 16) != (true_regnum (operands[1]) < 16)\"\n   [(const_int 0)]\n   \"\n@@ -4217,7 +4284,7 @@\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_SH4\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n    && reload_completed\n    && true_regnum (operands[0]) < 16\n    && true_regnum (operands[1]) < 16\"\n@@ -4290,7 +4357,7 @@\n \t(match_operand:DF 1 \"memory_operand\"  \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (reg:SI R0_REG))]\n-  \"TARGET_SH4 && reload_completed\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (use (match_dup 2))\n \t      (clobber (scratch:SI))])]\n@@ -4347,7 +4414,7 @@\n \t(mem:DF (match_operand:SI 1 \"register_operand\" \"\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[1]))\"\n   [(const_int 0)]\n@@ -4373,7 +4440,7 @@\n \t(match_operand:DF 1 \"memory_operand\" \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n   \"\n@@ -4414,7 +4481,7 @@\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n   \"\n@@ -4568,7 +4635,7 @@\n \temit_insn (gen_movdf_media_nofpu (operands[0], operands[1]));\n       DONE;\n     }\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       emit_df_insn (gen_movdf_i4 (operands[0], operands[1], get_fpscr_rtx ()));\n       DONE;\n@@ -4865,7 +4932,7 @@\n \t! move optimized away\"\n   [(set_attr \"type\" \"fmove,move,fmove,fmove,pcfload,fload,store,pcload,load,store,fmove,fmove,load,*,fpul_gp,gp_fpul,store,load,nil\")\n    (set_attr \"late_fp_use\" \"*,*,*,*,*,*,yes,*,*,*,*,*,*,*,yes,*,yes,*,*\")\n-   (set_attr \"length\" \"*,*,*,*,4,*,*,*,*,*,2,2,2,4,2,2,2,2,0\")\n+   (set_attr \"length\" \"*,*,*,*,4,4,4,*,*,*,2,2,2,4,2,2,2,2,0\")\n    (set (attr \"fp_mode\") (if_then_else (eq_attr \"fmovd\" \"yes\")\n \t\t\t\t\t   (const_string \"single\")\n \t\t\t\t\t   (const_string \"none\")))])\n@@ -6473,7 +6540,7 @@\n \t\t    (const_int 0))\n \t      (match_operand 1 \"\" \"\")\n \t      (match_operand 2 \"\" \"\")])]\n-  \"TARGET_SH2E || TARGET_SHMEDIA\"\n+  \"(TARGET_SH2E || TARGET_SH2A) || TARGET_SHMEDIA\"\n   \"\n {\n   int i;\n@@ -8069,7 +8136,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"fpu_switch0\"\n   [(set (match_operand:SI 0 \"\" \"\") (match_dup 2))\n    (set (match_dup 1) (mem:PSI (match_dup 0)))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"\n {\n   operands[1] = get_fpscr_rtx ();\n@@ -8083,7 +8150,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SI 0 \"\" \"\") (match_dup 2))\n    (set (match_dup 3) (plus:SI (match_dup 0) (const_int 4)))\n    (set (match_dup 1) (mem:PSI (match_dup 3)))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"\n {\n   operands[1] = get_fpscr_rtx ();\n@@ -8097,7 +8164,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"movpsi\"\n   [(set (match_operand:PSI 0 \"register_operand\" \"\")\n \t(match_operand:PSI 1 \"general_movsrc_operand\" \"\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"\")\n \n ;; The c / m alternative is a fake to guide reload to load directly into\n@@ -8131,7 +8198,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_split\n   [(set (reg:PSI FPSCR_REG)\n \t(mem:PSI (match_operand:SI 0 \"register_operand\" \"\")))]\n-  \"TARGET_SH4 && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(set (match_dup 0) (match_dup 0))]\n   \"\n {\n@@ -8145,7 +8212,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_split\n   [(set (reg:PSI FPSCR_REG)\n \t(mem:PSI (match_operand:SI 0 \"register_operand\" \"\")))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   [(set (match_dup 0) (plus:SI (match_dup 0) (const_int -4)))]\n   \"\n {\n@@ -8165,7 +8232,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"toggle_sz\"\n   [(set (reg:PSI FPSCR_REG)\n \t(xor:PSI (reg:PSI FPSCR_REG) (const_int 1048576)))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fschg\"\n   [(set_attr \"type\" \"fp\") (set_attr \"fp_set\" \"unknown\")])\n \n@@ -8323,7 +8390,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_SINGLE)\n     expand_sf_binop (&gen_mulsf3_i4, operands);\n   else if (TARGET_SH2E)\n     emit_insn (gen_mulsf3_ie (operands[0], operands[1], operands[2]));\n@@ -8353,7 +8420,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! TARGET_SH4\"\n+  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"fmul\t%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -8422,7 +8489,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_SINGLE)\n     {\n       emit_sf_insn (gen_floatsisf2_i4 (operands[0], operands[1], get_fpscr_rtx ()));\n       DONE;\n@@ -8440,15 +8507,15 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"fpul_operand\" \"y\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_insn \"*floatsisf2_ie\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"fpul_operand\" \"y\")))]\n-  \"TARGET_SH2E && ! TARGET_SH4\"\n+  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -8465,7 +8532,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_SINGLE)\n     {\n       emit_sf_insn (gen_fix_truncsfsi2_i4 (operands[0], operands[1], get_fpscr_rtx ()));\n       DONE;\n@@ -8483,7 +8550,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n \t(fix:SI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"ftrc_s\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8513,15 +8580,15 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_insn \"*fixsfsi\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n \t(fix:SI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! TARGET_SH4\"\n+  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"cmpgtsf_t\"\n   [(set (reg:SI T_REG)\n \t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! TARGET_SH4\"\n+  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8530,7 +8597,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (reg:SI T_REG)\n \t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! TARGET_SH4\"\n+  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8540,7 +8607,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(ior:SI (reg:SI T_REG)\n \t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))]\n-  \"TARGET_SH2E && TARGET_IEEE && ! TARGET_SH4\"\n+  \"TARGET_SH2E && TARGET_IEEE && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"* return output_ieee_ccmpeq (insn, operands);\"\n   [(set_attr \"length\" \"4\")])\n \n@@ -8550,7 +8617,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8560,7 +8627,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8571,7 +8638,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_IEEE && TARGET_SH4\"\n+  \"TARGET_IEEE && (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n   \"* return output_ieee_ccmpeq (insn, operands);\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"fp_mode\" \"single\")])\n@@ -8822,10 +8889,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_binop (&gen_adddf3_i, operands);\n       DONE;\n@@ -8845,7 +8912,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(plus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fadd\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -8854,10 +8921,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(minus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t  (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_binop (&gen_subdf3_i, operands);\n       DONE;\n@@ -8877,7 +8944,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(minus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t  (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fsub\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -8886,10 +8953,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_binop (&gen_muldf3_i, operands);\n       DONE;\n@@ -8909,7 +8976,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(mult:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fmul\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -8918,10 +8985,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_binop (&gen_divdf3_i, operands);\n       DONE;\n@@ -8941,7 +9008,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(div:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t(match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fdiv\t%2,%0\"\n   [(set_attr \"type\" \"dfdiv\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -8956,10 +9023,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"floatsidf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(float:DF (match_operand:SI 1 \"fpul_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       emit_df_insn (gen_floatsidf2_i (operands[0], operands[1],\n \t\t\t\t      get_fpscr_rtx ()));\n@@ -8978,7 +9045,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"fpul_operand\" \"y\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -8993,10 +9060,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"\")\n \t(fix:SI (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       emit_df_insn (gen_fix_truncdfsi2_i (operands[0], operands[1],\n \t\t\t\t\t  get_fpscr_rtx ()));\n@@ -9015,7 +9082,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n \t(fix:SI (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n    (set_attr \"dfp_comp\" \"no\")\n@@ -9048,7 +9115,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(gt:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n \t       (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9058,7 +9125,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t(eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n \t       (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9069,7 +9136,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t\t(eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n \t\t       (match_operand:DF 1 \"arith_reg_operand\" \"f\"))))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_IEEE && TARGET_SH4\"\n+  \"TARGET_IEEE && (TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"* return output_ieee_ccmpeq (insn, operands);\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"fp_mode\" \"double\")])\n@@ -9110,7 +9177,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (reg:SI T_REG)\n \t(compare (match_operand:DF 0 \"arith_operand\" \"\")\n \t\t (match_operand:DF 1 \"arith_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n   sh_compare_op0 = operands[0];\n@@ -9121,10 +9188,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_unop (&gen_negdf2_i, operands);\n       DONE;\n@@ -9142,18 +9209,18 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"arith_reg_operand\" \"0\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fneg\t%0\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"\")\n \t(sqrt:DF (match_operand:DF 1 \"arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_unop (&gen_sqrtdf2_i, operands);\n       DONE;\n@@ -9171,18 +9238,18 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"arith_reg_operand\" \"0\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fsqrt\t%0\"\n   [(set_attr \"type\" \"dfdiv\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       expand_df_unop (&gen_absdf2_i, operands);\n       DONE;\n@@ -9200,18 +9267,18 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"arith_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"arith_reg_operand\" \"0\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fabs\t%0\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       emit_df_insn (gen_extendsfdf2_i4 (operands[0], operands[1],\n \t\t\t\t\tget_fpscr_rtx ()));\n@@ -9230,18 +9297,18 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"y\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcnvsd  %1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"fpul_operand\" \"\")\n \t(float_truncate:SF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")))]\n-  \"TARGET_SH4 || TARGET_SHMEDIA_FPU\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) || TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  if (TARGET_SH4)\n+  if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n       emit_df_insn (gen_truncdfsf2_i4 (operands[0], operands[1],\n \t\t\t\t       get_fpscr_rtx ()));\n@@ -9260,7 +9327,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   [(set (match_operand:SF 0 \"fpul_operand\" \"=y\")\n \t(float_truncate:SF (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4\"\n+  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcnvds  %1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"double\")])"}, {"sha": "e276ac99517035f4eb7ace67e47015151caaa482", "filename": "gcc/config/sh/t-mlib-sh2a", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -0,0 +1 @@\n+ML_sh2a=m2a/"}, {"sha": "a84874efcd06a590c8bb339eb3f73cd272f5ef87", "filename": "gcc/config/sh/t-mlib-sh2a-nofpu", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-nofpu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-nofpu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-nofpu?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -0,0 +1 @@\n+ML_sh2a_nofpu=m2a-nofpu/"}, {"sha": "b3432fa83a12cae77333622f80a6a7b37d6f4b21", "filename": "gcc/config/sh/t-mlib-sh2a-single", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -0,0 +1 @@\n+ML_sh2a_single=m2a-single/"}, {"sha": "e34afe2f219ba3a13069d09b949132954da9511b", "filename": "gcc/config/sh/t-mlib-sh2a-single-only", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single-only", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single-only", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-mlib-sh2a-single-only?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -0,0 +1 @@\n+ML_sh2a_single_only=m2a-single-only/"}, {"sha": "3660d06aacfaeec3dcf5fcc041101bc19d6b8ddb", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157371cf43544336eaca4ae81b6e2a95f69645ec/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=157371cf43544336eaca4ae81b6e2a95f69645ec", "patch": "@@ -22,15 +22,19 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n MULTILIB_ENDIAN = ml/mb\n-MULTILIB_CPUS= $(ML_sh1)$(ML_sh2e)$(ML_sh2)$(ML_sh3e)$(ML_sh3)$(ML_sh4_nofpu)$(ML_sh4_single_only)$(ML_sh4_single)$(ML_sh4)$(ML_sh4a_nofpu)$(ML_sh4a_single_only)$(ML_sh4a_single)$(ML_sh4a)$(ML_m5_32media)$(ML_m5_32media_nofpu)$(ML_m5_compact)$(ML_m5_compact_nofpu)$(ML_m5_64media)$(ML_m5_64media_nofpu)\n+MULTILIB_CPUS= $(ML_sh1)$(ML_sh2a)$(ML_sh2a_nofpu)$(ML_sh2a_single_only)$(ML_sh2a_single)$(ML_sh2e)$(ML_sh2)$(ML_sh3e)$(ML_sh3)$(ML_sh4_nofpu)$(ML_sh4_single_only)$(ML_sh4_single)$(ML_sh4)$(ML_sh4a_nofpu)$(ML_sh4a_single_only)$(ML_sh4a_single)$(ML_sh4a)$(ML_m5_32media)$(ML_m5_32media_nofpu)$(ML_m5_compact)$(ML_m5_compact_nofpu)$(ML_m5_64media)$(ML_m5_64media_nofpu)\n \n MULTILIB_OPTIONS= $(MULTILIB_ENDIAN) $(MULTILIB_CPUS:/=)\n MULTILIB_DIRNAMES= \n-#MULTILIB_MATCHES = m2=m3 m2e=m3e m2=m4-nofpu\n+\n+# The separate entries for m2a-nofpu and m2a-single-only with\n+# duplicate base libraries are there to make sure we don't ever use an\n+# m4* multilib for m2a or vice-versa; they are not compatible.  This\n+# is why sh2a and sh2a-single need their own multilibs.\n MULTILIB_MATCHES = $(shell \\\n   multilibs=\"$(MULTILIB_OPTIONS)\" ; \\\n-  for abi in m1,m2,m3,m4-nofpu,m4al,m4a-nofpu \\\n-             m2e,m3e,m4-single-only,m4a-single-only \\\n+  for abi in m1,m2,m3,m4-nofpu,m4al,m4a-nofpu m1,m2,m2a-nofpu \\\n+             m2e,m3e,m4-single-only,m4a-single-only m2e,m2a-single-only \\\n              m4-single,m4a-single m4,m4a \\\n              m5-32media,m5-compact,m5-32media \\\n              m5-32media-nofpu,m5-compact-nofpu,m5-32media-nofpu; do \\\n@@ -45,7 +49,7 @@ MULTILIB_MATCHES = $(shell \\\n   done)\n \n # SH1 only supports big endian.\n-MULTILIB_EXCEPTIONS = ml/m1\n+MULTILIB_EXCEPTIONS = ml/m1 ml/m2a*\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n@@ -62,3 +66,7 @@ gt-sh.h : s-gtype ; @true\n \n # These are not suitable for COFF.\n # EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o crtbegin.o crtend.o\n+\n+# Local Variables:\n+# mode: Makefile\n+# End:"}]}