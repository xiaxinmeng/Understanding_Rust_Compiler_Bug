{"sha": "527e54a431473cc497204226a21f2831d2375e66", "node_id": "C_kwDOANBUbNoAKDUyN2U1NGE0MzE0NzNjYzQ5NzIwNDIyNmEyMWYyODMxZDIzNzVlNjY", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-16T04:46:21Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-19T06:41:21Z"}, "message": "Fix tree-optimization/103257: Missed jump threading due too early conversion of bool*A into bool?A:0\n\nSo like many optimizations on the gimple level, sometimes it makes sense to do the\noptimization early or later. In this case, creating a cond expression early causes\nother optimizations to be missed.  So just disable it until canonicalize_math_p ()\nis false.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR tree-optimization/103257\n\ngcc/ChangeLog:\n\n\t* match.pd\n\t((m1 >/</>=/<= m2) * d -> (m1 >/</>=/<= m2) ? d : 0):\n\tDisable until !canonicalize_math_p ().\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp116.c: Check optimized instead of vrp1.\n\t* gcc.dg/tree-ssa/pr103257-1.c: New test.", "tree": {"sha": "0f21b841f20827a12508a835d17e93399496030f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f21b841f20827a12508a835d17e93399496030f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/527e54a431473cc497204226a21f2831d2375e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527e54a431473cc497204226a21f2831d2375e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527e54a431473cc497204226a21f2831d2375e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527e54a431473cc497204226a21f2831d2375e66/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0790c8aacdfb4fd096aa580dae0fe49172c43ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0790c8aacdfb4fd096aa580dae0fe49172c43ab2"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "4042b535b857373aab08cdb32774fe4422bf2caa", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527e54a431473cc497204226a21f2831d2375e66/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527e54a431473cc497204226a21f2831d2375e66/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=527e54a431473cc497204226a21f2831d2375e66", "patch": "@@ -1785,10 +1785,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (convert (bit_and (bit_not @1) @0))))\n \n /* (m1 CMP m2) * d -> (m1 CMP m2) ? d : 0  */\n-(for cmp (gt lt ge le)\n-(simplify\n- (mult (convert (cmp @0 @1)) @2)\n-  (if (GIMPLE || !TREE_SIDE_EFFECTS (@2))\n+(if (!canonicalize_math_p ())\n+ (for cmp (gt lt ge le)\n+  (simplify\n+   (mult (convert (cmp @0 @1)) @2)\n    (cond (cmp @0 @1) @2 { build_zero_cst (type); }))))\n \n /* For integral types with undefined overflow and C != 0 fold"}, {"sha": "89f4f44b06c2da1b3a1f9274b807f725a1a45fcb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103257-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527e54a431473cc497204226a21f2831d2375e66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103257-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527e54a431473cc497204226a21f2831d2375e66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103257-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103257-1.c?ref=527e54a431473cc497204226a21f2831d2375e66", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+void link_error(void);\n+unsigned b, c;\n+static short a(short e, short f) { return e * f; }\n+int main() {\n+  if (a(1  ^ ((0, 0) ^ 1 && b) <= b, c))\n+    link_error ();\n+  c = 0;\n+}\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */"}, {"sha": "9e68a774aee3ff1edda5212bb69ec884b3621dad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp116.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527e54a431473cc497204226a21f2831d2375e66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp116.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527e54a431473cc497204226a21f2831d2375e66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp116.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp116.c?ref=527e54a431473cc497204226a21f2831d2375e66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n int\n f (int m1, int m2, int c)\n@@ -9,4 +9,4 @@ f (int m1, int m2, int c)\n   return e ? m1 : m2;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"optimized\" } } */"}]}