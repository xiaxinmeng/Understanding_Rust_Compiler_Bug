{"sha": "6545e33e69832eb0e5f946787f1764cf0179a049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NWUzM2U2OTgzMmViMGU1Zjk0Njc4N2YxNzY0Y2YwMTc5YTA0OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-07-15T21:52:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-07-15T21:52:06Z"}, "message": "re PR libstdc++/49745 (error: \u2018int truncate\u2019 redeclared as different kind of symbol)\n\n/gcc\n2011-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/49745\n\t* gthr-posix.h: Do not include <unistd.h> unconditionally; use\n\t_GTHREADS_USE_MUTEX_TIMEDLOCK instead of _POSIX_TIMEOUTS.\n\n/libstdc++-v3\n2011-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/49745\n\t* acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): Check separately for\n\t_POSIX_TIMEOUTS and define _GTHREADS_USE_MUTEX_TIMEDLOCK.\n\t* libstdc++-v3/libsupc++/guard.cc: Include <unistd.h>.\n\t* testsuite/17_intro/headers/c++1998/49745.cc: New.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r176335", "tree": {"sha": "332e8978eae096a928a46f6e6c23fe9e22933de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332e8978eae096a928a46f6e6c23fe9e22933de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6545e33e69832eb0e5f946787f1764cf0179a049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6545e33e69832eb0e5f946787f1764cf0179a049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6545e33e69832eb0e5f946787f1764cf0179a049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6545e33e69832eb0e5f946787f1764cf0179a049/comments", "author": null, "committer": null, "parents": [{"sha": "d0a9fbe16c999748339a5fe77da8e6687337d0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a9fbe16c999748339a5fe77da8e6687337d0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a9fbe16c999748339a5fe77da8e6687337d0e0"}], "stats": {"total": 136, "additions": 120, "deletions": 16}, "files": [{"sha": "1efbe5b0944bef77ad10d3ce2ec978934415d126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -1,3 +1,11 @@\n+2011-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/49745\n+\t* gthr-posix.h: Do not include <unistd.h> unconditionally; use\n+\t_GTHREADS_USE_MUTEX_TIMEDLOCK instead of _POSIX_TIMEOUTS.\n+\n 2011-07-15  Jason Merrill  <jason@redhat.com>\n \n \tPR testsuite/49741"}, {"sha": "b1d499dcc3db555fd3c9ad7683fdd84d4c4d23a2", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -1,7 +1,7 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n /* Copyright (C) 1997, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-   2008, 2009, 2010 Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -39,7 +39,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n #include <pthread.h>\n-#include <unistd.h>\n+\n+#if ((defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)) \\\n+     || !defined(_GTHREAD_USE_MUTEX_TIMEDLOCK))\n+# include <unistd.h>\n+# if defined(_POSIX_TIMEOUTS) && _POSIX_TIMEOUTS >= 0\n+#  define _GTHREAD_USE_MUTEX_TIMEDLOCK 1\n+# else\n+#  define _GTHREAD_USE_MUTEX_TIMEDLOCK 0\n+# endif\n+#endif\n \n typedef pthread_t __gthread_t;\n typedef pthread_key_t __gthread_key_t;\n@@ -100,11 +109,9 @@ __gthrw3(sched_yield)\n \n __gthrw3(pthread_mutex_lock)\n __gthrw3(pthread_mutex_trylock)\n-#ifdef _POSIX_TIMEOUTS\n-#if _POSIX_TIMEOUTS >= 0\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n __gthrw3(pthread_mutex_timedlock)\n #endif\n-#endif /* _POSIX_TIMEOUTS */\n __gthrw3(pthread_mutex_unlock)\n __gthrw3(pthread_mutex_init)\n __gthrw3(pthread_mutex_destroy)\n@@ -131,11 +138,9 @@ __gthrw(sched_yield)\n \n __gthrw(pthread_mutex_lock)\n __gthrw(pthread_mutex_trylock)\n-#ifdef _POSIX_TIMEOUTS\n-#if _POSIX_TIMEOUTS >= 0\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n __gthrw(pthread_mutex_timedlock)\n #endif\n-#endif /* _POSIX_TIMEOUTS */\n __gthrw(pthread_mutex_unlock)\n __gthrw(pthread_mutex_init)\n __gthrw(pthread_mutex_destroy)\n@@ -753,8 +758,7 @@ __gthread_mutex_trylock (__gthread_mutex_t *__mutex)\n     return 0;\n }\n \n-#ifdef _POSIX_TIMEOUTS\n-#if _POSIX_TIMEOUTS >= 0\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n static inline int\n __gthread_mutex_timedlock (__gthread_mutex_t *__mutex,\n \t\t\t   const __gthread_time_t *__abs_timeout)\n@@ -765,7 +769,6 @@ __gthread_mutex_timedlock (__gthread_mutex_t *__mutex,\n     return 0;\n }\n #endif\n-#endif\n \n static inline int\n __gthread_mutex_unlock (__gthread_mutex_t *__mutex)\n@@ -811,16 +814,14 @@ __gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)\n   return __gthread_mutex_trylock (__mutex);\n }\n \n-#ifdef _POSIX_TIMEOUTS\n-#if _POSIX_TIMEOUTS >= 0\n+#if _GTHREAD_USE_MUTEX_TIMEDLOCK\n static inline int\n __gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,\n \t\t\t\t     const __gthread_time_t *__abs_timeout)\n {\n   return __gthread_mutex_timedlock (__mutex, __abs_timeout);\n }\n #endif\n-#endif\n \n static inline int\n __gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)"}, {"sha": "8b429060e4ffd50586ba25d44f1f37a91cfc58c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -1,3 +1,14 @@\n+2011-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/49745\n+\t* acinclude.m4 ([GLIBCXX_CHECK_GTHREADS]): Check separately for\n+\t_POSIX_TIMEOUTS and define _GTHREADS_USE_MUTEX_TIMEDLOCK.\n+\t* libstdc++-v3/libsupc++/guard.cc: Include <unistd.h>.\n+\t* testsuite/17_intro/headers/c++1998/49745.cc: New.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2011-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/49559"}, {"sha": "349473cb8146eddb8146c49760e90b46893f57fd", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -3155,6 +3155,22 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n \n+  AC_MSG_CHECKING([check whether it can be safely assumed that mutex_timedlock is available])\n+\n+  AC_TRY_COMPILE([#include <unistd.h>],\n+    [\n+      #if !defined(_POSIX_TIMEOUTS) || _POSIX_TIMEOUTS < 0\n+      #error\n+      #endif\n+    ], [ac_gthread_use_mutex_timedlock=1], [ac_gthread_use_mutex_timedlock=0])\n+\n+  AC_DEFINE_UNQUOTED(_GTHREAD_USE_MUTEX_TIMEDLOCK, $ac_gthread_use_mutex_timedlock,\n+                     [Define to 1 if mutex_timedlock is available.])\n+\n+  if test $ac_gthread_use_mutex_timedlock = 1 ; then res_mutex_timedlock=yes ;\n+  else res_mutex_timedlock=no ; fi\n+  AC_MSG_RESULT([$res_mutex_timedlock])\n+\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   case $target_thread_file in\n     posix)\n@@ -3163,7 +3179,10 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n \n   AC_MSG_CHECKING([for gthreads library])\n \n-  AC_TRY_COMPILE([#include \"gthr.h\"],\n+  AC_TRY_COMPILE([\n+                  #include \"gthr.h\"\n+\t\t  #include <unistd.h>\n+                 ],\n     [\n       #ifndef __GTHREADS_CXX0X\n       #error"}, {"sha": "bf0ee3406da551c8a744401388f2065656c40faf", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -823,6 +823,9 @@\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n \n+/* Define to 1 if mutex_timedlock is available. */\n+#undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n+\n #if defined (HAVE__ACOSF) && ! defined (HAVE_ACOSF)\n # define HAVE_ACOSF 1\n # define acosf _acosf"}, {"sha": "ae74e1239fd4a83d8eca4e6a35775269a210a41c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -19427,6 +19427,42 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -fno-exceptions -I${toplevel_srcdir}/gcc\"\n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking check whether it can be safely assumed that mutex_timedlock is available\" >&5\n+$as_echo_n \"checking check whether it can be safely assumed that mutex_timedlock is available... \" >&6; }\n+\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+\n+      #if !defined(_POSIX_TIMEOUTS) || _POSIX_TIMEOUTS < 0\n+      #error\n+      #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_gthread_use_mutex_timedlock=1\n+else\n+  ac_gthread_use_mutex_timedlock=0\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GTHREAD_USE_MUTEX_TIMEDLOCK $ac_gthread_use_mutex_timedlock\n+_ACEOF\n+\n+\n+  if test $ac_gthread_use_mutex_timedlock = 1 ; then res_mutex_timedlock=yes ;\n+  else res_mutex_timedlock=no ; fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $res_mutex_timedlock\" >&5\n+$as_echo \"$res_mutex_timedlock\" >&6; }\n+\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n   case $target_thread_file in\n     posix)\n@@ -19438,7 +19474,10 @@ $as_echo_n \"checking for gthreads library... \" >&6; }\n \n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#include \"gthr.h\"\n+\n+                  #include \"gthr.h\"\n+\t\t  #include <unistd.h>\n+\n int\n main ()\n {"}, {"sha": "21bca584c1d7f0eba1cdb16c7f828225002da0b4", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -35,6 +35,7 @@\n     && defined(_GLIBCXX_ATOMIC_BUILTINS_4) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)\n # include <climits>\n # include <syscall.h>\n+# include <unistd.h>\n # define _GLIBCXX_USE_FUTEX\n # define _GLIBCXX_FUTEX_WAIT 0\n # define _GLIBCXX_FUTEX_WAKE 1"}, {"sha": "070666848babf073c16679d5dec67d02817aff68", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++1998/49745.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2F49745.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6545e33e69832eb0e5f946787f1764cf0179a049/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2F49745.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B1998%2F49745.cc?ref=6545e33e69832eb0e5f946787f1764cf0179a049", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target *-*-linux* } }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/49745\n+#include <iostream>\n+int truncate = 0;"}]}