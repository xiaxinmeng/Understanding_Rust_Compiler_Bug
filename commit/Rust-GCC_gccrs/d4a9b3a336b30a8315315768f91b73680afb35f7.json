{"sha": "d4a9b3a336b30a8315315768f91b73680afb35f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhOWIzYTMzNmIzMGE4MzE1MzE1NzY4ZjkxYjczNjgwYWZiMzVmNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-20T11:17:22Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-20T11:17:22Z"}, "message": "cfg.c, [...]: Fix comment typos.\n\n\t* cfg.c, tree-ssa-threadupdate.c, tree-vectorizer.c: Fix\n\tcomment typos.\n\nFrom-SVN: r87753", "tree": {"sha": "91331df04325bb2679babd9f724a756835ba42da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91331df04325bb2679babd9f724a756835ba42da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a9b3a336b30a8315315768f91b73680afb35f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a9b3a336b30a8315315768f91b73680afb35f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a9b3a336b30a8315315768f91b73680afb35f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a9b3a336b30a8315315768f91b73680afb35f7/comments", "author": null, "committer": null, "parents": [{"sha": "b898b8d9237edf3975784506cde712a54bddc263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b898b8d9237edf3975784506cde712a54bddc263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b898b8d9237edf3975784506cde712a54bddc263"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "a175283ffdfc623ba4273fdf7d2dc0f82cdeae39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4a9b3a336b30a8315315768f91b73680afb35f7", "patch": "@@ -1,3 +1,8 @@\n+2004-09-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfg.c, tree-ssa-threadupdate.c, tree-vectorizer.c: Fix\n+\tcomment typos.\n+\n 2004-09-20  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR target/17565"}, {"sha": "c8f1de51ae47b80ccd66708d8ff02a77e8ac6a7c", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=d4a9b3a336b30a8315315768f91b73680afb35f7", "patch": "@@ -891,11 +891,11 @@ brief_dump_cfg (FILE *file)\n \n /* An edge originally destinating BB of FREQUENCY and COUNT has been proved to\n    leave the block by TAKEN_EDGE.  Update profile of BB such that edge E can be\n-   redirected to destiantion of TAKEN_EDGE. \n+   redirected to destination of TAKEN_EDGE. \n \n    This function may leave the profile inconsistent in the case TAKEN_EDGE\n    frequency or count is believed to be lower than FREQUENCY or COUNT\n-   respectivly.  */\n+   respectively.  */\n void\n update_bb_profile_for_threading (basic_block bb, int edge_frequency,\n \t\t\t\t gcov_type count, edge taken_edge)"}, {"sha": "a76ce67633ae848394a5831151a00cab08cb2c59", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=d4a9b3a336b30a8315315768f91b73680afb35f7", "patch": "@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n \twith the edge B'->C.\n \n      4. For each PHI in B, find or create a PHI in B' with an identical\n-\tPHI_RESULT.  Add an argument to the PHI in B' which as the same\n+\tPHI_RESULT.  Add an argument to the PHI in B' which has the same\n \tvalue as the PHI in B associated with the edge A->B.  Associate\n \tthe new argument in the PHI in B' with the edge A->B.\n \n@@ -226,7 +226,7 @@ create_block_for_threading (basic_block bb, struct redirection_data *rd)\n    to update the SSA graph for those names.\n \n    We are also going to experiment with a true incremental update\n-   scheme for the duplicated resources.  Of of the interesting\n+   scheme for the duplicated resources.  One of the interesting\n    properties we can exploit here is that all the resources set\n    in BB will have the same IDFS, so we have one IDFS computation\n    per block with incoming threaded edges, which can lower the"}, {"sha": "33f68ad56d4c4e06a226866a0c4f8f7becb6e42d", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a9b3a336b30a8315315768f91b73680afb35f7/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=d4a9b3a336b30a8315315768f91b73680afb35f7", "patch": "@@ -2346,7 +2346,7 @@ vect_get_first_index (tree ref, tree *array_first_index)\n \n    Input:\n    ARRAY - an array_ref (possibly multidimensional) of type ARRAY_TYPE.\n-   VECTYPE - we are interested in the misalignment modulu the size of vectype.\n+   VECTYPE - we are interested in the misalignment modulo the size of vectype.\n \t     if NULL: don't compute misalignment, just return the base of ARRAY.\n    PREV_DIMENSIONS - initialized to one.\n    MISALIGNMENT - the computed misalignment in bits.\n@@ -3123,7 +3123,7 @@ vect_get_symbl_and_dr (tree memref, tree stmt, bool is_read,\n \n \t  STRIP_NOPS(oprnd1);\n \t  /* Only {address_base + offset} expressions are supported,  \n-\t     where address_base can be POINTER_TYPE or ARRRAY_TYPE and \n+\t     where address_base can be POINTER_TYPE or ARRAY_TYPE and \n \t     offset can be anything but POINTER_TYPE or ARRAY_TYPE.  \n \t     TODO: swap operands if {offset + address_base}.  */\n \t  if ((TREE_CODE (TREE_TYPE (oprnd1)) == POINTER_TYPE "}]}