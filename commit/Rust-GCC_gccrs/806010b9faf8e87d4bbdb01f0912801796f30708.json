{"sha": "806010b9faf8e87d4bbdb01f0912801796f30708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2MDEwYjlmYWY4ZTg3ZDRiYmRiMDFmMDkxMjgwMTc5NmYzMDcwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-17T20:07:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-17T20:07:45Z"}, "message": "parser.c (cp_parser_lambda_expression): Clear LAMBDA_EXPR_THIS_CAPTURE after parsing.\n\n\t* parser.c (cp_parser_lambda_expression): Clear\n\tLAMBDA_EXPR_THIS_CAPTURE after parsing.\n\t* pt.c (tsubst_copy_and_build): Make sure it isn't set.\n\nFrom-SVN: r175156", "tree": {"sha": "1842e01a48cfd2193e626c4094b0bab4493d7987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1842e01a48cfd2193e626c4094b0bab4493d7987"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806010b9faf8e87d4bbdb01f0912801796f30708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806010b9faf8e87d4bbdb01f0912801796f30708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806010b9faf8e87d4bbdb01f0912801796f30708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806010b9faf8e87d4bbdb01f0912801796f30708/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cd8d506c4c4ffac3b47e2fe55c94de35e8de0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd8d506c4c4ffac3b47e2fe55c94de35e8de0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd8d506c4c4ffac3b47e2fe55c94de35e8de0f7"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "baa4899743cfec86737fe696fdd667157d7faf03", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=806010b9faf8e87d4bbdb01f0912801796f30708", "patch": "@@ -1,5 +1,9 @@\n 2011-06-17  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_lambda_expression): Clear\n+\tLAMBDA_EXPR_THIS_CAPTURE after parsing.\n+\t* pt.c (tsubst_copy_and_build): Make sure it isn't set.\n+\n \t* cp-tree.h (struct tree_lambda_expr): Change common to typed.\n \tMove non-pointers to end of struct.\n "}, {"sha": "cf1c5927cb0b3aee29b5d1379ac7d5cf9d9e5767", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=806010b9faf8e87d4bbdb01f0912801796f30708", "patch": "@@ -625,7 +625,8 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_CAPTURE_LIST(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->capture_list)\n \n-/* The node in the capture-list that holds the 'this' capture.  */\n+/* During parsing of the lambda, the node in the capture-list that holds\n+   the 'this' capture.  */\n #define LAMBDA_EXPR_THIS_CAPTURE(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->this_capture)\n "}, {"sha": "a9cedcf38ab152afff791c31e179ded5e63c158e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=806010b9faf8e87d4bbdb01f0912801796f30708", "patch": "@@ -7430,6 +7430,9 @@ cp_parser_lambda_expression (cp_parser* parser)\n \n   pop_deferring_access_checks ();\n \n+  /* This field is only used during parsing of the lambda.  */\n+  LAMBDA_EXPR_THIS_CAPTURE (lambda_expr) = NULL_TREE;\n+\n   if (ok)\n     return build_lambda_object (lambda_expr);\n   else"}, {"sha": "ca4f955cc12c3a8542328180ab1235f3460f9a81", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806010b9faf8e87d4bbdb01f0912801796f30708/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=806010b9faf8e87d4bbdb01f0912801796f30708", "patch": "@@ -13498,10 +13498,9 @@ tsubst_copy_and_build (tree t,\n \t  = (LAMBDA_EXPR_DISCRIMINATOR (t));\n \tLAMBDA_EXPR_CAPTURE_LIST (r)\n \t  = RECUR (LAMBDA_EXPR_CAPTURE_LIST (t));\n-\tLAMBDA_EXPR_THIS_CAPTURE (r)\n-\t  = RECUR (LAMBDA_EXPR_THIS_CAPTURE (t));\n \tLAMBDA_EXPR_EXTRA_SCOPE (r)\n \t  = RECUR (LAMBDA_EXPR_EXTRA_SCOPE (t));\n+\tgcc_assert (LAMBDA_EXPR_THIS_CAPTURE (t) == NULL_TREE);\n \n \t/* Do this again now that LAMBDA_EXPR_EXTRA_SCOPE is set.  */\n \tdetermine_visibility (TYPE_NAME (type));"}]}