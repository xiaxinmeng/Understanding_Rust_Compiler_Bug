{"sha": "5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "node_id": "C_kwDOANBUbNoAKDVmNDEzZGM0MWVlNGY4YmMzYTBmYzI5NWY5OGI3NWRjZWFlNTJmYTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-17T12:14:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-21T08:21:29Z"}, "message": "tree-optimization/109170 - bogus use-after-free with __builtin_expect\n\nThe following adds a missing range-op for __builtin_expect which\nhelps -Wuse-after-free to detect the case a realloc original\npointer is used when the result was NULL.  The implementation\nshould handle all argument one pass-through builtins we handle\nin the fnspec machinery, but that's defered to GCC 14.\n\nThe gcc.dg/tree-ssa/ssa-lim-21.c testcase needs adjustment because\n\n   for (int j = 0; j < m; j++)\n     if (__builtin_expect (m, 0))\n       for (int i = 0; i < m; i++)\n\nis now correctly optimized to a unconditional jump by EVRP - m\ncannot be zero when the outer loop is entered.  I've adjusted\nthe outer loop to iterate 'n' times which makes us apply store-motion\nto 'count' and 'q->data1' but only out of the inner loop and\nas expected not apply store motion to 'q->data' at all.\n\nThe gcc.dg/predict-20.c testcase relies on broken behavior of\nprofile estimation when trying to handle __builtin_expect values\nflowing into PHI nodes.  I have opened PR109210 and removed\nthe expected matching from the testcase.\n\n\tPR tree-optimization/109170\n\t* gimple-range-op.cc (cfn_pass_through_arg1): New.\n\t(gimple_range_op_handler::maybe_builtin_call): Handle\n\t__builtin_expect via cfn_pass_through_arg1.\n\n\t* gcc.dg/Wuse-after-free-pr109170.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-lim-21.c: Adjust.\n\t* gcc.dg/predict-20.c: Likewise.", "tree": {"sha": "abe9fce7572f5c71e9c9a82faa0bb469054d9574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abe9fce7572f5c71e9c9a82faa0bb469054d9574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259bd768640328cc98647c5cf8b0d6dcfba6d4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259bd768640328cc98647c5cf8b0d6dcfba6d4bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259bd768640328cc98647c5cf8b0d6dcfba6d4bf"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "c7c546caf433b44953d1811351692946dca82ef3", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "patch": "@@ -309,6 +309,26 @@ class cfn_constant_p : public range_operator\n   }\n } op_cfn_constant_p;\n \n+// Implement range operator for integral/pointer functions returning\n+// the first argument.\n+class cfn_pass_through_arg1 : public range_operator\n+{\n+public:\n+  using range_operator::fold_range;\n+  virtual bool fold_range (irange &r, tree, const irange &lh,\n+\t\t\t   const irange &, relation_trio) const\n+  {\n+    r = lh;\n+    return true;\n+  }\n+  virtual bool op1_range (irange &r, tree, const irange &lhs,\n+\t\t\t  const irange &, relation_trio) const\n+  {\n+    r = lhs;\n+    return true;\n+  }\n+} op_cfn_pass_through_arg1;\n+\n // Implement range operator for CFN_BUILT_IN_SIGNBIT.\n class cfn_signbit : public range_operator_float\n {\n@@ -966,6 +986,13 @@ gimple_range_op_handler::maybe_builtin_call ()\n       m_int = &op_cfn_parity;\n       break;\n \n+    case CFN_BUILT_IN_EXPECT:\n+    case CFN_BUILT_IN_EXPECT_WITH_PROBABILITY:\n+      m_valid = true;\n+      m_op1 = gimple_call_arg (call, 0);\n+      m_int = &op_cfn_pass_through_arg1;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "14f1350aa2946a444293155664271efcc366d486", "filename": "gcc/testsuite/gcc.dg/Wuse-after-free-pr109170.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109170.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109170.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWuse-after-free-pr109170.c?ref=5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wuse-after-free=2\" } */\n+\n+unsigned long bufmax = 0;\n+unsigned long __open_catalog_bufmax;\n+void *realloc(void *, __SIZE_TYPE__);\n+void free(void *);\n+\n+void __open_catalog(char *buf)\n+{\n+  char *old_buf = buf;\n+  buf = realloc (buf, bufmax);\n+  if (__builtin_expect ((buf == ((void *)0)), 0))\n+    free (old_buf); /* { dg-bogus \"used after\" } */\n+}"}, {"sha": "7bb0d411f880078b4f50075ec7955c9df2548773", "filename": "gcc/testsuite/gcc.dg/predict-20.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c?ref=5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "patch": "@@ -16,8 +16,9 @@ c ()\n \tbreak;\n     }\n   int d = b < 0;\n+  /* We fail to apply __builtin_expect heuristics here.  Se PR109210.  */\n   if (__builtin_expect (d, 0))\n     asm(\"\");\n }\n \n-/* { dg-final { scan-tree-dump-times \"__builtin_expect heuristics of edge\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_expect heuristics of edge\" 2 \"profile_estimate\" } } */"}, {"sha": "fe29e841f283d781cc6cfabb73e1784efdccaa07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-21.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-21.c?ref=5f413dc41ee4f8bc3a0fc295f98b75dceae52fa8", "patch": "@@ -17,7 +17,7 @@ void\n func (int m, int n, int k, struct obj *a)\n {\n   struct obj *q = a;\n-  for (int j = 0; j < m; j++)\n+  for (int j = 0; j < n; j++)\n     if (__builtin_expect (m, 0))\n       for (int i = 0; i < m; i++)\n \t{\n@@ -31,5 +31,6 @@ func (int m, int n, int k, struct obj *a)\n \t}\n }\n \n-/* { dg-final { scan-tree-dump-not \"Executing store motion of\" \"lim2\"  }  } */\n-\n+/* { dg-final { scan-tree-dump \"Executing store motion of count from loop 2\" \"lim2\"  }  } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of \\[^ \\]*data1 from loop 2\" \"lim2\"  }  } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 2 \"lim2\"  }  } */"}]}