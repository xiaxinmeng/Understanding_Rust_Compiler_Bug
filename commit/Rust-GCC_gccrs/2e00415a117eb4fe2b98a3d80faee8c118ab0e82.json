{"sha": "2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwMDQxNWExMTdlYjRmZTJiOThhM2Q4MGZhZWU4YzExOGFiMGU4Mg==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-04T09:30:38Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-04T12:13:52Z"}, "message": "mark live symbol support type alias and tuple struct", "tree": {"sha": "3477f54090bfc021c34b37e0ee6b888f53a7421c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3477f54090bfc021c34b37e0ee6b888f53a7421c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210ae4f7b0fea9671482b8f01354fd5b9274f878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210ae4f7b0fea9671482b8f01354fd5b9274f878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210ae4f7b0fea9671482b8f01354fd5b9274f878"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "8210b657538b3445988e013e6aebdc7781459752", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -123,6 +123,7 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n {\n   NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n+\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n       Resolver::Definition def;\n@@ -199,6 +200,18 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n   mark_hir_id (ref);\n }\n \n+void\n+MarkLive::visit (HIR::TypeAlias &alias)\n+{\n+  NodeId ast_node_id;\n+  resolver->lookup_resolved_type (\n+    alias.get_type_aliased ()->get_mappings ().get_nodeid (), &ast_node_id);\n+  HirId hir_id;\n+  node_id_to_hir_id (alias.get_mappings ().get_crate_num (), ast_node_id,\n+\t\t     hir_id, alias.get_locus ());\n+  mark_hir_id (hir_id);\n+}\n+\n void\n MarkLive::mark_hir_id (HirId id)\n {"}, {"sha": "083d7b5637fdf8194835a0ff4def3ad1ec583af5", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -41,6 +41,7 @@ class MarkLive : public MarkLiveBase\n   void visit (HIR::FieldAccessExpr &expr) override;\n   void visit (HIR::TupleIndexExpr &expr) override;\n   void visit (HIR::MethodCallExpr &expr) override;\n+  void visit (HIR::TypeAlias &alias) override;\n \n   void visit (HIR::BorrowExpr &expr) override\n   {\n@@ -242,6 +243,11 @@ class MarkLive : public MarkLiveBase\n       }\n   }\n \n+  virtual void visit (HIR::StructExprFieldIdentifierValue &field) override\n+  {\n+    field.get_value ()->accept_vis (*this);\n+  }\n+\n   void visit (HIR::StructExprStructBase &stct) override\n   {\n     stct.get_struct_base ()->base_struct.get ()->accept_vis (*this);"}, {"sha": "6ecf3a516814917995b512d79bb45d20bced7891", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -79,6 +79,18 @@ class ScanDeadcode : public MarkLiveBase\n       }\n   }\n \n+  void visit (HIR::TupleStruct &stct) override\n+  {\n+    // only warn tuple struct unconstructed, and ignoring unused field\n+    HirId hirId = stct.get_mappings ().get_hirid ();\n+    if (should_warn (hirId))\n+      {\n+\trust_warning_at (stct.get_locus (), 0, \"%s is never %s: %<%s%>\",\n+\t\t\t \"struct\", \"constructed\",\n+\t\t\t stct.get_identifier ().c_str ());\n+      }\n+  }\n+\n private:\n   std::set<HirId> live_symbols;\n   Resolver::Resolver *resolver;"}, {"sha": "ee00c2c468b0c6289445230fa5fc9051acb4ada1", "filename": "gcc/testsuite/rust/compile/torture/struct_base_init_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -2,7 +2,6 @@ struct Foo {\n     a: i32,\n // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn foo() -> Foo {"}, {"sha": "891f64540fe9288e96907888a4478e104893fe57", "filename": "gcc/testsuite/rust/compile/torture/struct_init_5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -1,8 +1,6 @@\n struct Foo {\n     a: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "9fc52ed5c50859198ae418c910d283e85957d68f", "filename": "gcc/testsuite/rust/compile/torture/struct_init_6.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -1,8 +1,7 @@\n struct Foo {\n     a: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "36dc00aca6090a23c8e91bde8b1aeb4b5e0ca97c", "filename": "gcc/testsuite/rust/compile/torture/struct_init_7.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -1,12 +1,11 @@\n struct Foo {\n     a: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: f32,\n // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {\n-    let a = Foo { a: 1, b: 2f32 };\n-    let b = Foo { b: 4f32, ..a };\n+    let c = Foo { a: 1, b: 2f32 };\n+    let b = Foo { b: 4f32, ..c };\n     // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "26689e6d74c33885649f005fc763075d929d0ae4", "filename": "gcc/testsuite/rust/compile/torture/tuple_struct_unused.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e00415a117eb4fe2b98a3d80faee8c118ab0e82/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs?ref=2e00415a117eb4fe2b98a3d80faee8c118ab0e82", "patch": "@@ -0,0 +1,6 @@\n+struct Foo(i32, i32);\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+// { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}