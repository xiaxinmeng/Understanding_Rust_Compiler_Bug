{"sha": "4227c9adf01d5ada5eb7c868aa104167c2a01983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyN2M5YWRmMDFkNWFkYTVlYjdjODY4YWExMDQxNjdjMmEwMTk4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-24T20:41:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-24T20:41:54Z"}, "message": "re PR c++/79588 (ICE in warn_for_restrict with -Wrestrict)\n\n\tPR c++/79588\nc-family/\n\t* c-common.c (check_function_restrict): New function.\n\t(check_function_arguments): Add FNDECL argument.  Call\n\tcheck_function_restrict if -Wrestrict.\n\t* c-warn.c (warn_for_restrict): Remove ARGS argument, add ARGARRAY\n\tand NARGS.  Use auto_vec for ARG_POSITIONS, simplify.\n\t* c-common.h (check_function_arguments): Add FNDECL argument.\n\t(warn_for_restrict): Remove ARGS argument, add ARGARRAY and NARGS.\nc/\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Don't\n\thandle -Wrestrict here.\n\t* c-typeck.c (build_function_call_vec): Adjust\n\tcheck_function_arguments caller.\ncp/\n\t* call.c (build_over_call): Call check_function_arguments even for\n\t-Wrestrict, adjust check_function_arguments caller.\n\t* parser.c (cp_parser_postfix_expression): Don't handle -Wrestrict\n\there.\n\t* typeck.c (cp_build_function_call_vec): Adjust\n\tcheck_function_arguments caller.\ntestsuite/\n\t* g++.dg/warn/Wrestrict-1.C: New test.\n\t* g++.dg/warn/Wrestrict-2.C: New test.\n\nFrom-SVN: r245719", "tree": {"sha": "29e5c16f08052689b4d790b7167660e37137ba27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e5c16f08052689b4d790b7167660e37137ba27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4227c9adf01d5ada5eb7c868aa104167c2a01983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4227c9adf01d5ada5eb7c868aa104167c2a01983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4227c9adf01d5ada5eb7c868aa104167c2a01983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4227c9adf01d5ada5eb7c868aa104167c2a01983/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5713d448534698c8ac23aa52f015b2c88185cb40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5713d448534698c8ac23aa52f015b2c88185cb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5713d448534698c8ac23aa52f015b2c88185cb40"}], "stats": {"total": 225, "additions": 151, "deletions": 74}, "files": [{"sha": "b2f2d08202c88d4bc3d1bd9b0aa1834c8953bc36", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -1,3 +1,14 @@\n+2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79588\n+\t* c-common.c (check_function_restrict): New function.\n+\t(check_function_arguments): Add FNDECL argument.  Call\n+\tcheck_function_restrict if -Wrestrict.\n+\t* c-warn.c (warn_for_restrict): Remove ARGS argument, add ARGARRAY\n+\tand NARGS.  Use auto_vec for ARG_POSITIONS, simplify.\n+\t* c-common.h (check_function_arguments): Add FNDECL argument.\n+\t(warn_for_restrict): Remove ARGS argument, add ARGARRAY and NARGS.\n+\n 2017-02-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_ada_function_declaration): Add comment about the"}, {"sha": "fed7718507aef2d4f34c90c7c1c5e6d92a13ffcc", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -5364,6 +5364,49 @@ check_function_sentinel (const_tree fntype, int nargs, tree *argarray)\n     }\n }\n \n+/* Check that the same argument isn't passed to restrict arguments\n+   and other arguments.  */\n+\n+static void\n+check_function_restrict (const_tree fndecl, const_tree fntype,\n+\t\t\t int nargs, tree *argarray)\n+{\n+  int i;\n+  tree parms;\n+\n+  if (fndecl\n+      && TREE_CODE (fndecl) == FUNCTION_DECL\n+      && DECL_ARGUMENTS (fndecl))\n+    parms = DECL_ARGUMENTS (fndecl);\n+  else\n+    parms = TYPE_ARG_TYPES (fntype);\n+\n+  for (i = 0; i < nargs; i++)\n+    TREE_VISITED (argarray[i]) = 0;\n+\n+  for (i = 0; i < nargs && parms && parms != void_list_node; i++)\n+    {\n+      tree type;\n+      if (TREE_CODE (parms) == PARM_DECL)\n+\t{\n+\t  type = TREE_TYPE (parms);\n+\t  parms = DECL_CHAIN (parms);\n+\t}\n+      else\n+\t{\n+\t  type = TREE_VALUE (parms);\n+\t  parms = TREE_CHAIN (parms);\n+\t}\n+      if (POINTER_TYPE_P (type)\n+\t  && TYPE_RESTRICT (type)\n+\t  && !TYPE_READONLY (TREE_TYPE (type)))\n+\twarn_for_restrict (i, argarray, nargs);\n+    }\n+\n+  for (i = 0; i < nargs; i++)\n+    TREE_VISITED (argarray[i]) = 0;\n+}\n+\n /* Helper for check_function_nonnull; given a list of operands which\n    must be non-null in ARGS, determine if operand PARAM_NUM should be\n    checked.  */\n@@ -5605,8 +5648,8 @@ attribute_fallthrough_p (tree attr)\n    There are NARGS arguments in the array ARGARRAY.  LOC should be used for\n    diagnostics.  Return true if -Wnonnull warning has been diagnosed.  */\n bool\n-check_function_arguments (location_t loc, const_tree fntype, int nargs,\n-\t\t\t  tree *argarray)\n+check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n+\t\t\t  int nargs, tree *argarray)\n {\n   bool warned_p = false;\n \n@@ -5624,6 +5667,9 @@ check_function_arguments (location_t loc, const_tree fntype, int nargs,\n \n   if (warn_format)\n     check_function_sentinel (fntype, nargs, argarray);\n+\n+  if (warn_restrict)\n+    check_function_restrict (fndecl, fntype, nargs, argarray);\n   return warned_p;\n }\n "}, {"sha": "ac86712ceaf38a48a892b9aee30b5d4be0cb8f5b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -807,7 +807,8 @@ extern const char *fname_as_string (int);\n extern tree fname_decl (location_t, unsigned, tree);\n \n extern int check_user_alignment (const_tree, bool);\n-extern bool check_function_arguments (location_t loc, const_tree, int, tree *);\n+extern bool check_function_arguments (location_t loc, const_tree, const_tree,\n+\t\t\t\t      int, tree *);\n extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n@@ -1501,7 +1502,7 @@ extern void warnings_for_convert_and_check (location_t, tree, tree, tree);\n extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n \t\t\t\t  bool);\n extern void warn_for_omitted_condop (location_t, tree);\n-extern void warn_for_restrict (unsigned, vec<tree, va_gc> *);\n+extern void warn_for_restrict (unsigned, tree *, unsigned);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "cdfa10c792d13d5ae0d91933590bcb65cca2de7c", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -2170,55 +2170,49 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n    restrict-qualified param, and it aliases with another argument.  */\n \n void\n-warn_for_restrict (unsigned param_pos, vec<tree, va_gc> *args)\n+warn_for_restrict (unsigned param_pos, tree *argarray, unsigned nargs)\n {\n-  tree arg = (*args)[param_pos];\n-  if (TREE_VISITED (arg) || operand_equal_p (arg, null_pointer_node, 0))\n+  tree arg = argarray[param_pos];\n+  if (TREE_VISITED (arg) || integer_zerop (arg))\n     return;\n \n   location_t loc = EXPR_LOC_OR_LOC (arg, input_location);\n   gcc_rich_location richloc (loc);\n \n   unsigned i;\n-  tree current_arg;\n-  int *arg_positions = XNEWVEC (int, args->length ());\n-  unsigned arg_positions_len = 0;\n+  auto_vec<int, 16> arg_positions;\n \n-  FOR_EACH_VEC_ELT (*args, i, current_arg) \n+  for (i = 0; i < nargs; i++)\n     {\n       if (i == param_pos)\n \tcontinue;\n \n-      tree current_arg = (*args)[i];\n+      tree current_arg = argarray[i];\n       if (operand_equal_p (arg, current_arg, 0))\n \t{\n \t  TREE_VISITED (current_arg) = 1; \n-\t  arg_positions[arg_positions_len++] = (i + 1);\n+\t  arg_positions.safe_push (i + 1);\n \t}\n     }\n \n-  if (arg_positions_len == 0)\n-    {\n-      free (arg_positions);\n-      return;\n-    }\n+  if (arg_positions.is_empty ())\n+    return;\n \n-  for (unsigned i = 0; i < arg_positions_len; i++)\n+  int pos;\n+  FOR_EACH_VEC_ELT (arg_positions, i, pos)\n     {\n-      unsigned pos = arg_positions[i];\n-      tree arg = (*args)[pos - 1];\n+      arg = argarray[pos - 1];\n       if (EXPR_HAS_LOCATION (arg))\n \trichloc.add_range (EXPR_LOCATION (arg), false);\n     }\n \n-  warning_at_rich_loc_n (&richloc, OPT_Wrestrict, arg_positions_len,\n+  warning_at_rich_loc_n (&richloc, OPT_Wrestrict, arg_positions.length (),\n \t\t\t \"passing argument %i to restrict-qualified parameter\"\n \t\t\t \" aliases with argument %Z\",\n \t\t\t \"passing argument %i to restrict-qualified parameter\"\n \t\t\t \" aliases with arguments %Z\",\n-\t\t\t param_pos + 1, arg_positions, arg_positions_len);\n-\n-  free (arg_positions);\n+\t\t\t param_pos + 1, arg_positions.address (),\n+\t\t\t arg_positions.length ());\n }\n \n /* Callback function to determine whether an expression TP or one of its"}, {"sha": "699def022f07497b53402aef0605a54a7442fa69", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -1,3 +1,11 @@\n+2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79588\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Don't\n+\thandle -Wrestrict here.\n+\t* c-typeck.c (build_function_call_vec): Adjust\n+\tcheck_function_arguments caller.\n+\n 2017-02-23  Richard Biener  <rguenther@suse.de>\n \n \tPR c/79684"}, {"sha": "34585b912e6ccf5951f31fef52bbe1d74895e8b0", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -8418,28 +8418,6 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t      warn_for_memset (expr_loc, arg0, arg2, literal_zero_mask);\n \t    }\n \n-\t  if (TREE_CODE (expr.value) == FUNCTION_DECL && warn_restrict)\n-\t    {\n-\t      unsigned i;\n-\t      tree arg;\n-\t      FOR_EACH_VEC_SAFE_ELT (exprlist, i, arg)\n-\t\tTREE_VISITED (arg) = 0;\n-\n-\t      unsigned param_pos = 0;\n-\t      function_args_iterator iter;\n-\t      tree t;\n-\t      FOREACH_FUNCTION_ARGS (TREE_TYPE (expr.value), t, iter)\n-\t\t{\n-\t\t  if (POINTER_TYPE_P (t) && TYPE_RESTRICT (t)\n-\t\t      && !TYPE_READONLY (TREE_TYPE (t)))\n-\t\t    warn_for_restrict (param_pos, exprlist);\n-\t\t  param_pos++;\n-\t\t}\n-\n-\t      FOR_EACH_VEC_SAFE_ELT (exprlist, i, arg)\n-\t\tTREE_VISITED (arg) = 0;\n-\t    }\n-\n \t  start = expr.get_start ();\n \t  finish = parser->tokens_buf[0].get_finish ();\n \t  expr.value"}, {"sha": "b4f61b0a674e8f6f98abe96ec91c8aec3c752d46", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -3110,7 +3110,8 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n     return error_mark_node;\n \n   /* Check that the arguments to the function are valid.  */\n-  bool warned_p = check_function_arguments (loc, fntype, nargs, argarray);\n+  bool warned_p = check_function_arguments (loc, fundecl, fntype,\n+\t\t\t\t\t    nargs, argarray);\n \n   if (name != NULL_TREE\n       && !strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10))"}, {"sha": "990f066c854b4baf80f573fc82a8d77a9a99428c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -1,3 +1,13 @@\n+2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79588\n+\t* call.c (build_over_call): Call check_function_arguments even for\n+\t-Wrestrict, adjust check_function_arguments caller.\n+\t* parser.c (cp_parser_postfix_expression): Don't handle -Wrestrict\n+\there.\n+\t* typeck.c (cp_build_function_call_vec): Adjust\n+\tcheck_function_arguments caller.\n+\n 2017-02-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR translation/79705"}, {"sha": "7ff98726c72cb3dae8e8fcf1be9c66d41c21decc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -7903,14 +7903,17 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n      the check_function_arguments function might warn about something.  */\n \n   bool warned_p = false;\n-  if (warn_nonnull || warn_format || warn_suggest_attribute_format)\n+  if (warn_nonnull\n+      || warn_format\n+      || warn_suggest_attribute_format\n+      || warn_restrict)\n     {\n       tree *fargs = (!nargs ? argarray\n \t\t\t    : (tree *) alloca (nargs * sizeof (tree)));\n       for (j = 0; j < nargs; j++)\n \tfargs[j] = maybe_constant_value (argarray[j]);\n \n-      warned_p = check_function_arguments (input_location, TREE_TYPE (fn),\n+      warned_p = check_function_arguments (input_location, fn, TREE_TYPE (fn),\n \t\t\t\t\t   nargs, fargs);\n     }\n "}, {"sha": "65feca3ee994ad9bb9ed0307a405cef5a1b49512", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -6934,29 +6934,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\twarn_for_memset (input_location, arg0, arg2, literal_mask);\n \t      }\n \n-\t    if (TREE_CODE (postfix_expression) == FUNCTION_DECL\n-\t\t&& warn_restrict)\n-\t      {\n-\t\tunsigned i;\n-\t\ttree arg;\n-\t\tFOR_EACH_VEC_SAFE_ELT (args, i, arg)\n-\t\t  TREE_VISITED (arg) = 0;\n-\n-\t\tunsigned param_pos = 0;\n-\t\tfor (tree decl = DECL_ARGUMENTS (postfix_expression);\n-\t\t     decl != NULL_TREE;\n-\t\t     decl = DECL_CHAIN (decl), param_pos++)\n-\t\t  {\n-\t\t    tree type = TREE_TYPE (decl);\n-\t\t    if (POINTER_TYPE_P (type) && TYPE_RESTRICT (type)\n-\t\t\t&& !TYPE_READONLY (TREE_TYPE (type)))\n-\t\t      warn_for_restrict (param_pos, args);\n-\t\t  }\n-\n-\t\tFOR_EACH_VEC_SAFE_ELT (args, i, arg)\n-\t\t  TREE_VISITED (arg) = 0;\n-\t      }\n-\n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)\n \t      {\n \t\ttree instance = TREE_OPERAND (postfix_expression, 0);"}, {"sha": "3216bc41edf47b5173990a4a5596d37038554d7a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -3667,7 +3667,7 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n \n   /* Check for errors in format strings and inappropriately\n      null parameters.  */\n-  bool warned_p = check_function_arguments (input_location, fntype,\n+  bool warned_p = check_function_arguments (input_location, fndecl, fntype,\n \t\t\t\t\t    nargs, argarray);\n \n   ret = build_cxx_call (function, nargs, argarray, complain);"}, {"sha": "0ecaa9610225ba96c1ecabeebe20a2c4f745765d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -1,3 +1,9 @@\n+2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79588\n+\t* g++.dg/warn/Wrestrict-1.C: New test.\n+\t* g++.dg/warn/Wrestrict-2.C: New test.\n+\n 2017-02-24  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/ext/complit15.C: Require LTO."}, {"sha": "fe844f18c43f792056ea476df5f03de234f9d211", "filename": "gcc/testsuite/g++.dg/warn/Wrestrict-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/79588\n+// { dg-do compile }\n+// { dg-options \"-Wrestrict\" }\n+\n+void foo (char *__restrict, char *__restrict = __null);\n+\n+void\n+bar (char *p)\n+{\n+  foo (p, p);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p);\n+}"}, {"sha": "4bab03bc850628f55f38822b0c2ea33da42333ef", "filename": "gcc/testsuite/g++.dg/warn/Wrestrict-2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227c9adf01d5ada5eb7c868aa104167c2a01983/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C?ref=4227c9adf01d5ada5eb7c868aa104167c2a01983", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/79588\n+// { dg-do compile }\n+// { dg-options \"-Wrestrict\" }\n+\n+void foo (char *__restrict, char *__restrict = __null);\n+\n+template <int N>\n+void\n+bar (char **p)\n+{\n+  foo (p[0], p[0]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0], p[N]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0]);\n+}\n+\n+template <int N>\n+void\n+bar2 (char **p)\n+{\n+  foo (p[0], p[0]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0], p[N]);\t// { dg-bogus \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0]);\n+}\n+\n+void\n+baz (char **p)\n+{\n+  bar<0> (p);\n+  bar2<1> (p);\n+}"}]}