{"sha": "a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllN2I5ZDM5NWMxOWRhM2VlOTlmYWU3M2Q0ZDBmM2UzYTMxMjFmNQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-06-13T22:58:30Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-13T22:58:30Z"}, "message": "Makefile.am (gfor_helper_src): Add runtime/normalize.f90.\n\n\t* Makefile.am (gfor_helper_src): Add runtime/normalize.f90.\n\t* configure.ac: Add checks for nextafter and nextafterf.\n\t* Makefile.in, config.h.in, configure: Regenerate.\n\t* libgfortran.h (normalize_r4_i4, normalize_r8_i8): Declare.\n\t* intrinsics/rand.c (rand): Use normalize_r4_i4.\n\t* intrinsics/random.c (random_r4): Use normalize_r4_i4.\n\t(random_r8): Use normalize_r8_i8.\n\t* runtime/normalize.c: New file.\ntestsuite/\n\t* gfortran.fortran-torture/execute/random_2.f90: New test.\n\nFrom-SVN: r83070", "tree": {"sha": "87140abfa92875e6ac3d94de1530eac1b616417c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87140abfa92875e6ac3d94de1530eac1b616417c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/comments", "author": null, "committer": null, "parents": [{"sha": "3bce843ee30206917ccdfbf283c73e19a2ce633c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bce843ee30206917ccdfbf283c73e19a2ce633c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bce843ee30206917ccdfbf283c73e19a2ce633c"}], "stats": {"total": 364, "additions": 334, "deletions": 30}, "files": [{"sha": "86926967b0fde529b6292e36203e4456323dc081", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -1,3 +1,7 @@\n+2004-06-13  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gfortran.fortran-torture/execute/random_2.f90: New test.\n+\n 2004-06-13  Eric Christopher  <echristo@redhat.com>\n \n \t* gcc.dg/noncompile/redecl-1.c: Fix error message."}, {"sha": "1666833058961101370b539f4f30823e522b2705", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/random_2.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Frandom_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Frandom_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Frandom_2.f90?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -0,0 +1,24 @@\n+! Check that the real(4) and real(8) random number generators return the same\n+! sequence of values.\n+program random_4\n+  integer, dimension(:), allocatable :: seed\n+  real(kind=4), dimension(10) :: r4\n+  real(kind=8), dimension(10) :: r8\n+  real, parameter :: delta = 0.0001\n+  integer n\n+\n+  call random_seed (size=n)\n+  allocate (seed(n))\n+  call random_seed (get=seed)\n+  ! Test both array valued and scalar routines.\n+  call random_number(r4)\n+  call random_number (r4(10))\n+\n+  ! Reset the seed and get the real(8) values.\n+  call random_seed (put=seed)\n+  call random_number(r8)\n+  call random_number (r8(10))\n+\n+  if (any ((r4 - r8) .gt. delta)) call abort\n+end program\n+"}, {"sha": "05024399d541d465ba390000ff81b0664a2ba5b2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -1,3 +1,14 @@\n+2004-06-13  Paul Brook  <paul@codesourcery.com>\n+\n+\t* Makefile.am (gfor_helper_src): Add runtime/normalize.f90.\n+\t* configure.ac: Add checks for nextafter and nextafterf.\n+\t* Makefile.in, config.h.in, configure: Regenerate.\n+\t* libgfortran.h (normalize_r4_i4, normalize_r8_i8): Declare.\n+\t* intrinsics/rand.c (rand): Use normalize_r4_i4.\n+\t* intrinsics/random.c (random_r4): Use normalize_r4_i4.\n+\t(random_r8): Use normalize_r8_i8.\n+\t* runtime/normalize.c: New file.\n+\n 2004-06-13  Steven G. Kargl  <kargls@comcast.net>\n \t    Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n "}, {"sha": "0c6935a2553ac9461e570342c05781e91b24ccdb", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -58,7 +58,8 @@ intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n runtime/in_pack_generic.c \\\n-runtime/in_unpack_generic.c\n+runtime/in_unpack_generic.c \\\n+runtime/normalize.c\n \n gfor_src= \\\n runtime/environ.c \\"}, {"sha": "51e154a2d636552c4d14e320f411e8e2e241e713", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -124,7 +124,7 @@ am__objects_33 = associated.lo abort.lo args.lo c99_functions.lo \\\n \tspread_generic.lo string_intrinsics.lo rand.lo random.lo \\\n \treshape_generic.lo reshape_packed.lo selected_kind.lo \\\n \tsystem_clock.lo transpose_generic.lo unpack_generic.lo \\\n-\tin_pack_generic.lo in_unpack_generic.lo\n+\tin_pack_generic.lo in_unpack_generic.lo normalize.lo\n am__objects_34 =\n am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_abs_r4.lo _abs_r8.lo _exp_r4.lo _exp_r8.lo _exp_c4.lo \\\n@@ -331,7 +331,8 @@ intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n runtime/in_pack_generic.c \\\n-runtime/in_unpack_generic.c\n+runtime/in_unpack_generic.c \\\n+runtime/normalize.c\n \n gfor_src = \\\n runtime/environ.c \\\n@@ -2177,6 +2178,15 @@ in_unpack_generic.obj: runtime/in_unpack_generic.c\n in_unpack_generic.lo: runtime/in_unpack_generic.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o in_unpack_generic.lo `test -f 'runtime/in_unpack_generic.c' || echo '$(srcdir)/'`runtime/in_unpack_generic.c\n \n+normalize.o: runtime/normalize.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o normalize.o `test -f 'runtime/normalize.c' || echo '$(srcdir)/'`runtime/normalize.c\n+\n+normalize.obj: runtime/normalize.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o normalize.obj `if test -f 'runtime/normalize.c'; then $(CYGPATH_W) 'runtime/normalize.c'; else $(CYGPATH_W) '$(srcdir)/runtime/normalize.c'; fi`\n+\n+normalize.lo: runtime/normalize.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o normalize.lo `test -f 'runtime/normalize.c' || echo '$(srcdir)/'`runtime/normalize.c\n+\n trig_c4.o: generated/trig_c4.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o trig_c4.o `test -f 'generated/trig_c4.c' || echo '$(srcdir)/'`generated/trig_c4.c\n "}, {"sha": "77acdc0ade23073516e57a84fe657228b4c60fea", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -27,6 +27,12 @@\n /* Define to 1 if you have a working `mmap' system call. */\n #undef HAVE_MMAP\n \n+/* libm includes nextafter */\n+#undef HAVE_NEXTAFTER\n+\n+/* libm includes nextafterf */\n+#undef HAVE_NEXTAFTERF\n+\n /* \"c99 function\" */\n #undef HAVE_ROUND\n "}, {"sha": "8842df63394f8e703e4a67365dde5040cc5a7140", "filename": "libgfortran/configure", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -6538,6 +6538,149 @@ _ACEOF\n \n fi\n \n+# And other IEEE math functions\n+echo \"$as_me:$LINENO: checking for nextafter in -lm\" >&5\n+echo $ECHO_N \"checking for nextafter in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_nextafter+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char nextafter ();\n+int\n+main ()\n+{\n+nextafter ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_nextafter=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_nextafter=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_nextafter\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_nextafter\" >&6\n+if test $ac_cv_lib_m_nextafter = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_NEXTAFTER 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for nextafterf in -lm\" >&5\n+echo $ECHO_N \"checking for nextafterf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_nextafterf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char nextafterf ();\n+int\n+main ()\n+{\n+nextafterf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_nextafterf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_nextafterf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_nextafterf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_nextafterf\" >&6\n+if test $ac_cv_lib_m_nextafterf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_NEXTAFTERF 1\n+_ACEOF\n+\n+fi\n+\n \n # Let the user override this\n # Check whether --enable-cmath or --disable-cmath was given."}, {"sha": "3c9d355f49834d7ae7d11b777d54939dffe9893a", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -169,6 +169,9 @@ AC_CHECK_FUNCS(getrusage times)\n # Check for some C99 functions\n AC_CHECK_LIB([m],[round],[AC_DEFINE([HAVE_ROUND],[1],[\"c99 function\"])])\n AC_CHECK_LIB([m],[roundf],[AC_DEFINE([HAVE_ROUNDF],[1],[\"c99 function\"])])\n+# And other IEEE math functions\n+AC_CHECK_LIB([m],[nextafter],[AC_DEFINE([HAVE_NEXTAFTER],[1],[libm includes nextafter])])\n+AC_CHECK_LIB([m],[nextafterf],[AC_DEFINE([HAVE_NEXTAFTERF],[1],[libm includes nextafterf])])\n \n # Let the user override this\n AC_ARG_ENABLE(cmath,"}, {"sha": "d9add00af6f4f191aa91ebe19135d5c418ba1e3f", "filename": "libgfortran/intrinsics/rand.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fintrinsics%2Frand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fintrinsics%2Frand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frand.c?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -77,17 +77,10 @@ prefix(irand) (GFC_INTEGER_4 *i)\n }\n \n \n-/*  Return a REAL in the range [0,1).  Cast to double to use the full\n-    range of pseudo-random numbers returned by irand().  */\n+/*  Return a random REAL in the range [0,1).  */\n \n GFC_REAL_4\n prefix(rand) (GFC_INTEGER_4 *i)\n {\n-  GFC_REAL_4 val;\n-\n-  do \n-    val = (GFC_REAL_4)((double)(prefix(irand) (i) - 1) / (double) GFC_RAND_M1);\n-  while (val == 1.0);\n-\n-  return val;\n+  return normalize_r4_i4 (i - 1, GFC_RAND_M1);\n }"}, {"sha": "b4986840583253234f0b698e3b143947c7f0bb40", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -458,16 +458,11 @@ prefix(random_r4) (GFC_REAL_4 *x)\n \n   GFC_UINTEGER_4 kiss;\n \n-  do\n-    {\n-      kiss = kiss_random_kernel ();\n-      *x = (GFC_REAL_4)kiss / (GFC_REAL_4)(~(GFC_UINTEGER_4) 0);\n-      /* Burn a random number, so the REAL*4 and REAL*8 functions\n-         produce similar sequences of random numbers.  */\n-      kiss = kiss_random_kernel ();\n-    }\n-  while (*x == 1.0);\n-\n+  kiss = kiss_random_kernel ();\n+  /* Burn a random number, so the REAL*4 and REAL*8 functions\n+     produce similar sequences of random numbers.  */\n+  kiss_random_kernel ();\n+  *x = normalize_r4_i4 (kiss, ~(GFC_UINTEGER_4) 0);\n }\n \n /*  This function produces a REAL(8) value from the uniform distribution\n@@ -479,14 +474,9 @@ prefix(random_r8) (GFC_REAL_8 *x)\n \n   GFC_UINTEGER_8 kiss;\n \n-  do\n-    {\n-      kiss = (((GFC_UINTEGER_8)kiss_random_kernel ()) << 32)\n-\t     + kiss_random_kernel ();\n-      *x = (GFC_REAL_8)kiss / (GFC_REAL_8)(~(GFC_UINTEGER_8) 0);\n-    }\n-  while (*x == 1.0);\n-\n+  kiss = ((GFC_UINTEGER_8)kiss_random_kernel ()) << 32;\n+  kiss += kiss_random_kernel ();\n+  *x = normalize_r8_i8 (kiss, ~(GFC_UINTEGER_8) 0);\n }\n \n /*  This function fills a REAL(4) array with values from the uniform"}, {"sha": "3e1357fc794e6d9c8e40f4634aa013e628900c3a", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -408,5 +408,13 @@ GFC_INTEGER_4 compare_string (GFC_INTEGER_4, const char *,\n void random_seed (GFC_INTEGER_4 * size, gfc_array_i4 * put,\n \t\t  gfc_array_i4 * get);\n \n+/* normalize.c */\n+\n+#define normalize_r4_i4 prefix(normalize_r4_i4)\n+GFC_REAL_4 normalize_r4_i4 (GFC_UINTEGER_4, GFC_UINTEGER_4);\n+\n+#define normalize_r8_i8 prefix(normalize_r8_i8)\n+GFC_REAL_8 normalize_r8_i8 (GFC_UINTEGER_8, GFC_UINTEGER_8);\n+\n #endif\n "}, {"sha": "a62d71dc5f017c7ec0c96923569f332a30614313", "filename": "libgfortran/runtime/normalize.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fruntime%2Fnormalize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5/libgfortran%2Fruntime%2Fnormalize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fnormalize.c?ref=a9e7b9d395c19da3ee99fae73d4d0f3e3a3121f5", "patch": "@@ -0,0 +1,111 @@\n+/* Nelper routines to convert from integer to real.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+/* These routines can be sensitive to excess precision, so should really be\n+   compiled with -ffloat-store.  */\n+\n+/* Return the largest value less than one representable in a REAL*4.  */\n+\n+static inline GFC_REAL_4\n+almostone_r4 ()\n+{\n+#ifdef HAVE_NEXTAFTERF\n+  return nextafterf (1.0f, 0.0f);\n+#else\n+  /* The volatile is a hack to prevent excess precision on x86.  */\n+  static volatile GFC_REAL_4 val = 0.0f;\n+  GFC_REAL_4 x;\n+\n+  if (val != 0.0f)\n+    return val;\n+\n+  val = 0.9999f;\n+  do\n+    {\n+      x = val;\n+      val = (val + 1.0f) / 2.0f;\n+    }\n+  while (val > x && val < 1.0f);\n+  if (val == 1.0f)\n+    val = x;\n+  return val;\n+#endif\n+}\n+\n+\n+/* Return the largest value less than one representable in a REAL*8.  */\n+\n+static inline GFC_REAL_8\n+almostone_r8 ()\n+{\n+#ifdef HAVE_NEXTAFTER\n+  return nextafter (1.0, 0.0);\n+#else\n+  static volatile GFC_REAL_8 val = 0.0;\n+  GFC_REAL_8 x;\n+\n+  if (val != 0.0)\n+    return val;\n+\n+  val = 0.9999;\n+  do\n+    {\n+      x = val;\n+      val = (val + 1.0) / 2.0;\n+    }\n+  while (val > x && val < 1.0);\n+  if (val == 1.0)\n+    val = x;\n+  return val;\n+#endif\n+}\n+\n+\n+/* Convert an unsigned integer in the range [0..x) into a\n+   real the range [0..1).  */\n+\n+GFC_REAL_4\n+normalize_r4_i4 (GFC_UINTEGER_4 i, GFC_UINTEGER_4 x)\n+{\n+  GFC_REAL_4 r;\n+\n+  r = (GFC_REAL_4) i / (GFC_REAL_4) x;\n+  if (r == 1.0f)\n+    r = almostone_r4 ();\n+  return r;\n+}\n+\n+\n+/* Convert an unsigned integer in the range [0..x) into a\n+   real the range [0..1).  */\n+\n+GFC_REAL_8\n+normalize_r8_i8 (GFC_UINTEGER_8 i, GFC_UINTEGER_8 x)\n+{\n+  GFC_REAL_8 r;\n+\n+  r = (GFC_REAL_8) i / (GFC_REAL_8) x;\n+  if (r == 1.0)\n+    r = almostone_r8 ();\n+  return r;\n+}"}]}