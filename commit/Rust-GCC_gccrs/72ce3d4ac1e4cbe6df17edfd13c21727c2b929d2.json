{"sha": "72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjZTNkNGFjMWU0Y2JlNmRmMTdlZGZkMTNjMjE3MjdjMmI5MjlkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-08-01T18:56:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-08-01T18:56:14Z"}, "message": "i386-protos.h (asm_preferred_eh_data_format): Declare.\n\n\t* i386-protos.h (asm_preferred_eh_data_format): Declare.\n\t* i386.c: Include dwarf2.h\n\t(asm_preferred_eh_data_format): New.\n\t* i386.h (ASM_PREFERRED_EH_DATA_FORMAT): Move offline.\n\nFrom-SVN: r102638", "tree": {"sha": "31d77c885d3cf16a8802827282ca87f4977ae3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d77c885d3cf16a8802827282ca87f4977ae3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/comments", "author": null, "committer": null, "parents": [{"sha": "23d28bfe80ebd227936d746e9e4f25afc28c8fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d28bfe80ebd227936d746e9e4f25afc28c8fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d28bfe80ebd227936d746e9e4f25afc28c8fb2"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "1f64ae3f6ac93030f1ec05caaae0e8ad5d083a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "patch": "@@ -1,3 +1,10 @@\n+2005-08-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (asm_preferred_eh_data_format): Declare.\n+\t* i386.c: Include dwarf2.h\n+\t(asm_preferred_eh_data_format): New.\n+\t* i386.h (ASM_PREFERRED_EH_DATA_FORMAT): Move offline.\n+\n 2005-08-01  Ian Lance Taylor  <ian@airs.com>\n \n \t* config/host-linux.c (linux_gt_pch_get_address): Add new name"}, {"sha": "8b34e03ebc78108552e7e4d040a381223b16d4d3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "patch": "@@ -269,3 +269,4 @@ extern void ix86_fp_comparison_codes (enum rtx_code code, enum rtx_code *,\n \t\t\t\t      enum rtx_code *, enum rtx_code *);\n extern enum rtx_code ix86_fp_compare_code_to_integer (enum rtx_code);\n #endif\n+extern int asm_preferred_eh_data_format (int, int);"}, {"sha": "1b777601f616235dc02be22b8ffc5c2957e30d3b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n #include \"tree-gimple.h\"\n+#include \"dwarf2.h\"\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n@@ -17947,4 +17948,30 @@ ix86_stack_protect_fail (void)\n \t : default_hidden_stack_protect_fail ();\n }\n \n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.\n+\n+   ??? All x86 object file formats are capable of representing this.\n+   After all, the relocation needed is the same as for the call insn.\n+   Whether or not a particular assembler allows us to enter such, I\n+   guess we'll have to see.  */\n+int\n+asm_preferred_eh_data_format (int code, int global)\n+{\n+  if (flag_pic)\n+    {\n+int type = DW_EH_PE_sdata8;\n+      if (!TARGET_64BIT\n+\t  || ix86_cmodel == CM_SMALL_PIC\n+\t  || (ix86_cmodel == CM_MEDIUM_PIC && (global || code)))\n+\ttype = DW_EH_PE_sdata4;\n+      return (global ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | type;\n+    }\n+  if (ix86_cmodel == CM_SMALL\n+      || (ix86_cmodel == CM_MEDIUM && code))\n+    return DW_EH_PE_udata4;\n+  return DW_EH_PE_absptr;\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "da4218b21707b400bc276e38cef5d94c1c125a50", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=72ce3d4ac1e4cbe6df17edfd13c21727c2b929d2", "patch": "@@ -2023,9 +2023,7 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n    Whether or not a particular assembler allows us to enter such, I\n    guess we'll have to see.  */\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t\\\n-  (flag_pic\t\t\t\t\t\t\t\t\\\n-    ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4\\\n-   : DW_EH_PE_absptr)\n+  asm_preferred_eh_data_format ((CODE), (GLOBAL))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}]}