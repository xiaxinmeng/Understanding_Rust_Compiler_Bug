{"sha": "5d7045be13252dfa6c183863cbe1a3335d34fec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3MDQ1YmUxMzI1MmRmYTZjMTgzODYzY2JlMWEzMzM1ZDM0ZmVjNQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-08-23T10:43:54Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-23T10:43:54Z"}, "message": "arc.c (arc_initialize_pic): Remove.\n\n\t* config/arc/arc.c (arc_initialize_pic): Remove.\n\t* config/arc/arc.h (INITIALIZE_PIC): Similarly, this routine does\n\tnothing on any platform and is invoked by no-one, it does not even\n\tappear in the documentation.\n\t* config/sparc/sparc.h (INITIALIZE_PIC): Likewise.\n\t* config/sparc/sparc.c (initialize_pic): Likewise.\n\t(find_addr_reg): Remove this as well, no longer referenced after\n\tmy rewrite.\n\nFrom-SVN: r21914", "tree": {"sha": "a98ef81c73da2af8bc750c71badb6476fc6a89e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98ef81c73da2af8bc750c71badb6476fc6a89e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d7045be13252dfa6c183863cbe1a3335d34fec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7045be13252dfa6c183863cbe1a3335d34fec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7045be13252dfa6c183863cbe1a3335d34fec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7045be13252dfa6c183863cbe1a3335d34fec5/comments", "author": null, "committer": null, "parents": [{"sha": "4da4d9d041be584c95bc80c1fdd0a730bc0a808a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da4d9d041be584c95bc80c1fdd0a730bc0a808a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da4d9d041be584c95bc80c1fdd0a730bc0a808a"}], "stats": {"total": 61, "additions": 11, "deletions": 50}, "files": [{"sha": "a87e9d41127a2924d24cf23ed461d1e48fcef439", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d7045be13252dfa6c183863cbe1a3335d34fec5", "patch": "@@ -1,3 +1,14 @@\n+Sun Aug 23 09:39:09 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* config/arc/arc.c (arc_initialize_pic): Remove.\n+\t* config/arc/arc.h (INITIALIZE_PIC): Similarly, this routine does\n+\tnothing on any platform and is invoked by no-one, it does not even\n+\tappear in the documentation.\n+\t* config/sparc/sparc.h (INITIALIZE_PIC): Likewise.\n+\t* config/sparc/sparc.c (initialize_pic): Likewise.\n+\t(find_addr_reg): Remove this as well, no longer referenced after\n+\tmy rewrite.\n+\n Sun Aug 23 00:17:14 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* recog.c (validate_replace_rtx_group): New function."}, {"sha": "64aec4425086b033454bea2c1277146ad34dd4e3", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5d7045be13252dfa6c183863cbe1a3335d34fec5", "patch": "@@ -1366,15 +1366,6 @@ arc_eligible_for_epilogue_delay (trial, slot)\n \f\n /* PIC */\n \n-/* Set up PIC-specific rtl.  This should not cause any insns\n-   to be emitted.  */\n-\n-void\n-arc_initialize_pic ()\n-{\n-  /* nothing to do */\n-}\n-\n /* Emit special PIC prologues and epilogues.  */\n \n void"}, {"sha": "ab1dc15311662bde6667897f2de79a726c2193d6", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=5d7045be13252dfa6c183863cbe1a3335d34fec5", "patch": "@@ -1242,7 +1242,6 @@ do {\t\t\t\t\t\t\t\\\n    included in functions which used inline functions and were compiled to\n    assembly language.)  */\n \n-#define INITIALIZE_PIC arc_initialize_pic ()\n #define FINALIZE_PIC arc_finalize_pic ()\n \n /* A C expression that is nonzero if X is a legitimate immediate"}, {"sha": "d5eae83b06d017c2325290c7a3b17c56cf5933e0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5d7045be13252dfa6c183863cbe1a3335d34fec5", "patch": "@@ -102,7 +102,6 @@ static char *frame_base_name;\n static int frame_base_offset;\n \n static rtx pic_setup_code\tPROTO((void));\n-static rtx find_addr_reg\tPROTO((rtx));\n static void sparc_init_modes\tPROTO((void));\n static int save_regs\t\tPROTO((FILE *, int, int, char *,\n \t\t\t\t       int, int, int));\n@@ -2434,14 +2433,6 @@ legitimize_pic_address (orig, mode, reg)\n   return orig;\n }\n \n-/* Set up PIC-specific rtl.  This should not cause any insns\n-   to be emitted.  */\n-\n-void\n-initialize_pic ()\n-{\n-}\n-\n /* Return the RTX for insns to set the PIC register.  */\n \n static rtx\n@@ -2584,36 +2575,6 @@ mem_min_alignment (mem, desired)\n   return 0;\n }\n \n-\f\n-/* Return a REG that occurs in ADDR with coefficient 1.\n-   ADDR can be effectively incremented by incrementing REG.  */\n-\n-static rtx\n-find_addr_reg (addr)\n-     rtx addr;\n-{\n-  while (GET_CODE (addr) == PLUS)\n-    {\n-      /* We absolutely can not fudge the frame pointer here, because the\n-\t frame pointer must always be 8 byte aligned.  It also confuses\n-\t debuggers.  */\n-      if (GET_CODE (XEXP (addr, 0)) == REG\n-\t  && REGNO (XEXP (addr, 0)) != FRAME_POINTER_REGNUM)\n-\taddr = XEXP (addr, 0);\n-      else if (GET_CODE (XEXP (addr, 1)) == REG\n-\t       && REGNO (XEXP (addr, 1)) != FRAME_POINTER_REGNUM)\n-\taddr = XEXP (addr, 1);\n-      else if (CONSTANT_P (XEXP (addr, 0)))\n-\taddr = XEXP (addr, 1);\n-      else if (CONSTANT_P (XEXP (addr, 1)))\n-\taddr = XEXP (addr, 0);\n-      else\n-\tabort ();\n-    }\n-  if (GET_CODE (addr) == REG)\n-    return addr;\n-  abort ();\n-}\n \f\n /* Vectors to keep interesting information about registers where it can easily\n    be got.  We use to use the actual mode value as the bit number, but there"}, {"sha": "78882dbe6e31556aa58c3c1f13c70b762afaa800", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7045be13252dfa6c183863cbe1a3335d34fec5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5d7045be13252dfa6c183863cbe1a3335d34fec5", "patch": "@@ -1082,7 +1082,6 @@ extern int sparc_mode_class[];\n \n #define PIC_OFFSET_TABLE_REGNUM 23\n \n-#define INITIALIZE_PIC initialize_pic ()\n #define FINALIZE_PIC finalize_pic ()\n \n /* Pick a default value we can notice from override_options:"}]}