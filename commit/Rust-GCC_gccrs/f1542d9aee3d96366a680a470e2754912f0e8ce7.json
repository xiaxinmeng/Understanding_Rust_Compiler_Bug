{"sha": "f1542d9aee3d96366a680a470e2754912f0e8ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1NDJkOWFlZTNkOTYzNjZhNjgwYTQ3MGUyNzU0OTEyZjBlOGNlNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-24T16:28:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-24T16:28:47Z"}, "message": "re PR middle-end/83977 (ICE in simd_clone_clauses_extract, at omp-simd-clone.c:184)\n\n\tPR middle-end/83977\n\t* tree.c (free_lang_data_in_decl): Don't clear DECL_ABSTRACT_ORIGIN\n\there.\n\t* omp-low.c (create_omp_child_function): Remove \"omp declare simd\"\n\tattributes from DECL_ATTRIBUTES (decl) without affecting\n\tDECL_ATTRIBUTES (current_function_decl).\n\t* omp-simd-clone.c (expand_simd_clones): Ignore DECL_ARTIFICIAL\n\tfunctions with non-NULL DECL_ABSTRACT_ORIGIN.\n\n\t* c-c++-common/gomp/pr83977-1.c: New test.\n\t* c-c++-common/gomp/pr83977-2.c: New test.\n\t* c-c++-common/gomp/pr83977-3.c: New test.\n\t* gfortran.dg/gomp/pr83977.f90: New test.\n\nFrom-SVN: r257023", "tree": {"sha": "174665a92f7c4715370c978fc58ff9d4a0673587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/174665a92f7c4715370c978fc58ff9d4a0673587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1542d9aee3d96366a680a470e2754912f0e8ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1542d9aee3d96366a680a470e2754912f0e8ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1542d9aee3d96366a680a470e2754912f0e8ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1542d9aee3d96366a680a470e2754912f0e8ce7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "556d3a2433a6e2207c6f36fe292d89d81f46f924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556d3a2433a6e2207c6f36fe292d89d81f46f924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556d3a2433a6e2207c6f36fe292d89d81f46f924"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "e52ca7c3d6c07620b2c476d2c5677ab0bbc6ed79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -1,3 +1,14 @@\n+2018-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/83977\n+\t* tree.c (free_lang_data_in_decl): Don't clear DECL_ABSTRACT_ORIGIN\n+\there.\n+\t* omp-low.c (create_omp_child_function): Remove \"omp declare simd\"\n+\tattributes from DECL_ATTRIBUTES (decl) without affecting\n+\tDECL_ATTRIBUTES (current_function_decl).\n+\t* omp-simd-clone.c (expand_simd_clones): Ignore DECL_ARTIFICIAL\n+\tfunctions with non-NULL DECL_ABSTRACT_ORIGIN.\n+\n 2018-01-24  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83979"}, {"sha": "ebbf88e250ee289da1a543fb1747af67ded65fdf", "filename": "gcc/omp-low.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -1585,6 +1585,23 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n   DECL_INITIAL (decl) = make_node (BLOCK);\n   BLOCK_SUPERCONTEXT (DECL_INITIAL (decl)) = decl;\n   DECL_ATTRIBUTES (decl) = DECL_ATTRIBUTES (current_function_decl);\n+  /* Remove omp declare simd attribute from the new attributes.  */\n+  if (tree a = lookup_attribute (\"omp declare simd\", DECL_ATTRIBUTES (decl)))\n+    {\n+      while (tree a2 = lookup_attribute (\"omp declare simd\", TREE_CHAIN (a)))\n+\ta = a2;\n+      a = TREE_CHAIN (a);\n+      for (tree *p = &DECL_ATTRIBUTES (decl); *p != a;)\n+\tif (is_attribute_p (\"omp declare simd\", get_attribute_name (*p)))\n+\t  *p = TREE_CHAIN (*p);\n+\telse\n+\t  {\n+\t    tree chain = TREE_CHAIN (*p);\n+\t    *p = copy_node (*p);\n+\t    p = &TREE_CHAIN (*p);\n+\t    *p = chain;\n+\t  }\n+    }\n   DECL_FUNCTION_SPECIFIC_OPTIMIZATION (decl)\n     = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (current_function_decl);\n   DECL_FUNCTION_SPECIFIC_TARGET (decl)"}, {"sha": "fbcb92ba76fc8b8bfa84d042888861460091e6a6", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -1574,6 +1574,10 @@ expand_simd_clones (struct cgraph_node *node)\n   tree attr = lookup_attribute (\"omp declare simd\",\n \t\t\t\tDECL_ATTRIBUTES (node->decl));\n   if (attr == NULL_TREE\n+      /* Ignore artificial decls with an abstract origin, results of function\n+\t cloning, versioning etc.  We want to handle certain builtins\n+\t with simd attribute, like __builtin_sin.  */\n+      || (DECL_ARTIFICIAL (node->decl) && DECL_ABSTRACT_ORIGIN (node->decl))\n       || node->global.inlined_to\n       || lookup_attribute (\"noclone\", DECL_ATTRIBUTES (node->decl)))\n     return;"}, {"sha": "e0ee6b0a4385b90838cf40ae6a4ad04ff7796765", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -1,3 +1,11 @@\n+2018-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/83977\n+\t* c-c++-common/gomp/pr83977-1.c: New test.\n+\t* c-c++-common/gomp/pr83977-2.c: New test.\n+\t* c-c++-common/gomp/pr83977-3.c: New test.\n+\t* gfortran.dg/gomp/pr83977.f90: New test.\n+\n 2018-01-24  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR testsuite/83889"}, {"sha": "9941db49469fbd2a68265a3e91cd0c313ec6f13d", "filename": "gcc/testsuite/c-c++-common/gomp/pr83977-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-1.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/83977 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+struct S { int a, b, c; };\n+\n+#pragma omp declare simd uniform(z) linear(v:1)\n+__attribute__((noinline)) static int\n+foo (int x, int y, struct S z, int u, int v)\n+{\n+  return x + y + z.a;\n+}\n+\n+int\n+bar (int x, int y, int z)\n+{\n+  struct S s = { z, 1, 1 };\n+  return foo (x, y, s, 0, 0);\n+}"}, {"sha": "c3359b9f05e1b7413ce4c175bed3ac8bb3d6bdb9", "filename": "gcc/testsuite/c-c++-common/gomp/pr83977-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-2.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/83977 */\n+/* { dg-do compile } */\n+\n+void bar (void);\n+\n+#pragma omp declare simd uniform (b) linear(a:b)\n+int\n+foo (int a, int b)\n+{\n+  a = a + 1;\n+/* This function can't be called from simd loops,\n+   because it violates declare simd restrictions.\n+   We shouldn't ICE on it though, nor attempt to generate\n+   simd clones for the *omp_fn* functions.  */\n+  #pragma omp parallel\n+  bar ();  \n+  return a;\n+}"}, {"sha": "00e18d85b372b0f36ff3a3551d58c38c4e9950d9", "filename": "gcc/testsuite/c-c++-common/gomp/pr83977-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr83977-3.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/83977 */\n+/* { dg-do compile } */\n+\n+void bar (void);\n+int foo (int, int) __attribute__((used));\n+\n+#pragma omp declare simd uniform (b) linear(a:b)\n+int\n+foo (int a, int b)\n+{\n+  a = a + 1;\n+/* This function can't be called from simd loops,\n+   because it violates declare simd restrictions.\n+   We shouldn't ICE on it though, nor attempt to generate\n+   simd clones for the *omp_fn* functions.  */\n+  #pragma omp parallel\n+  bar ();  \n+  return a;\n+}\n+\n+int foo (int, int)  __attribute__((unused));"}, {"sha": "b8ad1a7e39c184fd084658477b183fc93071b357", "filename": "gcc/testsuite/gfortran.dg/gomp/pr83977.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -0,0 +1,15 @@\n+! PR middle-end/83977\n+! { dg-do compile }\n+\n+integer function foo (a, b)\n+   integer :: a, b\n+!$omp declare simd uniform(b) linear(ref(a):b)\n+   a = a + 1\n+! This function can't be called from simd loops,\n+! because it violates declare simd restrictions.\n+! We shouldn't ICE on it though, nor attempt to generate\n+! simd clones for the *omp_fn* functions.\n+!$omp parallel\n+   call sub\n+!$omp end parallel\n+end"}, {"sha": "cd68fb57c77f5cdc8ee5d930901bf2e74919c856", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1542d9aee3d96366a680a470e2754912f0e8ce7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f1542d9aee3d96366a680a470e2754912f0e8ce7", "patch": "@@ -5329,16 +5329,6 @@ free_lang_data_in_decl (tree decl)\n \t At this point, it is not needed anymore.  */\n       DECL_SAVED_TREE (decl) = NULL_TREE;\n \n-      /* Clear the abstract origin if it refers to a method.\n-         Otherwise dwarf2out.c will ICE as we splice functions out of\n-         TYPE_FIELDS and thus the origin will not be output\n-         correctly.  */\n-      if (DECL_ABSTRACT_ORIGIN (decl)\n-\t  && DECL_CONTEXT (DECL_ABSTRACT_ORIGIN (decl))\n-\t  && RECORD_OR_UNION_TYPE_P\n-\t       (DECL_CONTEXT (DECL_ABSTRACT_ORIGIN (decl))))\n-\tDECL_ABSTRACT_ORIGIN (decl) = NULL_TREE;\n-\n       /* Sometimes the C++ frontend doesn't manage to transform a temporary\n          DECL_VINDEX referring to itself into a vtable slot number as it\n \t should.  Happens with functions that are copied and then forgotten"}]}