{"sha": "84593a48f6446a48ee86724972fdcdcae143f9cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1OTNhNDhmNjQ0NmE0OGVlODY3MjQ5NzJmZGNkY2FlMTQzZjljZA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-11-27T11:00:15Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-11-27T11:00:15Z"}, "message": "re PR target/59593 ([arm big-endian] using \"ldrh\" access a  immediate  which stored in a memory by word)\n\n2014-11-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR target/59593\n    * config/arm/arm.c (dump_minipool): dispatch to consttable pattern\n    based on mode size.\n    * config/arm/arm.md (consttable_1): Move from config/arm/thumb1.md and\n    make it TARGET_EITHER.\n    (consttable_2): Move from config/arm/thumb1.md, make it TARGET_EITHER\n    and move HFmode handling from consttable_4 to it.\n    (consttable_4): Move HFmode handling to consttable_2 pattern.\n    * config/arm/thumb1.md (consttable_1): Move to config/arm/arm.md.\n    (consttable_2): Ditto.\n\n    gcc/testsuite/\n    PR target/59593\n    * gcc.target/arm/constant-pool.c: New test.\n\nFrom-SVN: r218118", "tree": {"sha": "2ecb3f7c37c9ba655643c1ae162a6cb5f4b91d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecb3f7c37c9ba655643c1ae162a6cb5f4b91d1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84593a48f6446a48ee86724972fdcdcae143f9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84593a48f6446a48ee86724972fdcdcae143f9cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84593a48f6446a48ee86724972fdcdcae143f9cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84593a48f6446a48ee86724972fdcdcae143f9cd/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "687a5d7c39dad8a9209ef3d90bef5b4de32b0b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687a5d7c39dad8a9209ef3d90bef5b4de32b0b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687a5d7c39dad8a9209ef3d90bef5b4de32b0b91"}], "stats": {"total": 125, "additions": 88, "deletions": 37}, "files": [{"sha": "32e0bcb01f004a918e0cfee7583af685c6b66f79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -1,3 +1,16 @@\n+2014-11-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/59593\n+\t* config/arm/arm.c (dump_minipool): dispatch to consttable pattern\n+\tbased on mode size.\n+\t* config/arm/arm.md (consttable_1): Move from config/arm/thumb1.md and\n+\tmake it TARGET_EITHER.\n+\t(consttable_2): Move from config/arm/thumb1.md, make it TARGET_EITHER\n+\tand move HFmode handling from consttable_4 to it.\n+\t(consttable_4): Move HFmode handling to consttable_2 pattern.\n+\t* config/arm/thumb1.md (consttable_1): Move to config/arm/arm.md.\n+\t(consttable_2): Ditto.\n+\n 2014-11-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (try_to_simplify): Allow"}, {"sha": "6377d8c932c7e144cae7a037754437df14f69de2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -16626,7 +16626,7 @@ dump_minipool (rtx_insn *scan)\n \t      fputc ('\\n', dump_file);\n \t    }\n \n-\t  switch (mp->fix_size)\n+\t  switch (GET_MODE_SIZE (mp->mode))\n \t    {\n #ifdef HAVE_consttable_1\n \t    case 1:"}, {"sha": "2e2a7882b2e31bf49562f7e77bcadf711056c4ef", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -10594,6 +10594,42 @@\n   [(set_attr \"type\" \"no_insn\")]\n )\n \n+(define_insn \"consttable_1\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] VUNSPEC_POOL_1)]\n+  \"TARGET_EITHER\"\n+  \"*\n+  making_const_table = TRUE;\n+  assemble_integer (operands[0], 1, BITS_PER_WORD, 1);\n+  assemble_zeros (3);\n+  return \\\"\\\";\n+  \"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"no_insn\")]\n+)\n+\n+(define_insn \"consttable_2\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] VUNSPEC_POOL_2)]\n+  \"TARGET_EITHER\"\n+  \"*\n+  {\n+    rtx x = operands[0];\n+    making_const_table = TRUE;\n+    switch (GET_MODE_CLASS (GET_MODE (x)))\n+      {\n+      case MODE_FLOAT:\n+\tarm_emit_fp16_const (x);\n+\tbreak;\n+      default:\n+\tassemble_integer (operands[0], 2, BITS_PER_WORD, 1);\n+\tassemble_zeros (2);\n+\tbreak;\n+      }\n+    return \\\"\\\";\n+  }\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"no_insn\")]\n+)\n+\n (define_insn \"consttable_4\"\n   [(unspec_volatile [(match_operand 0 \"\" \"\")] VUNSPEC_POOL_4)]\n   \"TARGET_EITHER\"\n@@ -10604,15 +10640,12 @@\n     switch (GET_MODE_CLASS (GET_MODE (x)))\n       {\n       case MODE_FLOAT:\n- \tif (GET_MODE (x) == HFmode)\n- \t  arm_emit_fp16_const (x);\n- \telse\n- \t  {\n- \t    REAL_VALUE_TYPE r;\n- \t    REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n- \t    assemble_real (r, GET_MODE (x), BITS_PER_WORD);\n- \t  }\n- \tbreak;\n+\t{\n+\t  REAL_VALUE_TYPE r;\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+\t  assemble_real (r, GET_MODE (x), BITS_PER_WORD);\n+\t  break;\n+\t}\n       default:\n \t/* XXX: Sometimes gcc does something really dumb and ends up with\n \t   a HIGH in a constant pool entry, usually because it's trying to"}, {"sha": "2208ae6fa09bd0fb8ac5c70b034af38fc635e045", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -1735,33 +1735,6 @@\n    (set_attr \"conds\" \"clob\")]\n )\n \n-(define_insn \"consttable_1\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] VUNSPEC_POOL_1)]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  making_const_table = TRUE;\n-  assemble_integer (operands[0], 1, BITS_PER_WORD, 1);\n-  assemble_zeros (3);\n-  return \\\"\\\";\n-  \"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"no_insn\")]\n-)\n-\n-(define_insn \"consttable_2\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] VUNSPEC_POOL_2)]\n-  \"TARGET_THUMB1\"\n-  \"*\n-  making_const_table = TRUE;\n-  gcc_assert (GET_MODE_CLASS (GET_MODE (operands[0])) != MODE_FLOAT);\n-  assemble_integer (operands[0], 2, BITS_PER_WORD, 1);\n-  assemble_zeros (2);\n-  return \\\"\\\";\n-  \"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"no_insn\")]\n-)\n-\n ;; Miscellaneous Thumb patterns\n (define_expand \"tablejump\"\n   [(parallel [(set (pc) (match_operand:SI 0 \"register_operand\" \"\"))"}, {"sha": "d6bddf9f86d953c2e96fd3122e63f4e89c7edb3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -1,3 +1,8 @@\n+2014-11-27  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/59593\n+\t* gcc.target/arm/constant-pool.c: New test.\n+\n 2014-11-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/simd/vsqrt_f64_1.c: Mark variable volatile."}, {"sha": "8427dfb1a80f5a1c933b12b9b486e5308c06023a", "filename": "gcc/testsuite/gcc.target/arm/constant-pool.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fconstant-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84593a48f6446a48ee86724972fdcdcae143f9cd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fconstant-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fconstant-pool.c?ref=84593a48f6446a48ee86724972fdcdcae143f9cd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned short v = 0x5678;\n+int i;\n+int j = 0;\n+int *ptr = &j;\n+\n+int\n+func (void)\n+{\n+  for (i = 0; i < 1; ++i)\n+    {\n+      *ptr = -1;\n+      v = 0x1234;\n+    }\n+  return v;\n+}\n+\n+int\n+main (void)\n+{\n+  func ();\n+  if (v != 0x1234)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}