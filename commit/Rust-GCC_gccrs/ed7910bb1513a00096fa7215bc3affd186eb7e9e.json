{"sha": "ed7910bb1513a00096fa7215bc3affd186eb7e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3OTEwYmIxNTEzYTAwMDk2ZmE3MjE1YmMzYWZmZDE4NmViN2U5ZQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-05-31T21:48:01Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-05-31T21:48:01Z"}, "message": "sh.md (ashldi3_std): New define_expand.\n\n\t* config/sh/sh.md (ashldi3_std): New define_expand.\n\t(ashldi3): Use it.\n\nFrom-SVN: r148018", "tree": {"sha": "41a7964f44c8250d6c439bf45951180785a6272e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41a7964f44c8250d6c439bf45951180785a6272e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed7910bb1513a00096fa7215bc3affd186eb7e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7910bb1513a00096fa7215bc3affd186eb7e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7910bb1513a00096fa7215bc3affd186eb7e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7910bb1513a00096fa7215bc3affd186eb7e9e/comments", "author": null, "committer": null, "parents": [{"sha": "47ea8d4efa88226be530ca940c714cd40915abec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ea8d4efa88226be530ca940c714cd40915abec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ea8d4efa88226be530ca940c714cd40915abec"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "800f69d271e74c3b60525e8ea1baf259c081ff70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7910bb1513a00096fa7215bc3affd186eb7e9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7910bb1513a00096fa7215bc3affd186eb7e9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed7910bb1513a00096fa7215bc3affd186eb7e9e", "patch": "@@ -1,3 +1,8 @@\n+2009-05-31  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (ashldi3_std): New define_expand.\n+\t(ashldi3): Use it.\n+\n 2009-05-31  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/40313"}, {"sha": "30022d66bcbb6c68ce01fb0f928d79c46f066f55", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7910bb1513a00096fa7215bc3affd186eb7e9e/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7910bb1513a00096fa7215bc3affd186eb7e9e/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ed7910bb1513a00096fa7215bc3affd186eb7e9e", "patch": "@@ -3850,6 +3850,34 @@ label:\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"arith\")])\n \n+;; Expander for DImode shift left with SImode operations.\n+\n+(define_expand \"ashldi3_std\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+                   (match_operand:DI 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_SH1 && INTVAL (operands[2]) < 32\"\n+  \"\n+{\n+  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n+  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n+  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n+  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+  rtx dst = gen_reg_rtx (DImode);\n+  rtx low_dst = operand_subword (dst, low_word, 1, DImode);\n+  rtx high_dst = operand_subword (dst, high_word, 1, DImode);\n+  rtx tmp0, tmp1;\n+\n+  tmp0 = gen_reg_rtx (SImode);\n+  tmp1 = gen_reg_rtx (SImode);\n+  emit_insn (gen_lshrsi3 (tmp0, low_src, GEN_INT (32 - INTVAL (operands[2]))));\n+  emit_insn (gen_ashlsi3 (low_dst, low_src, operands[2]));  \n+  emit_insn (gen_ashlsi3 (tmp1, high_src, operands[2]));  \n+  emit_insn (gen_iorsi3 (high_dst, tmp0, tmp1));\n+  emit_move_insn (operands[0], dst);\n+  DONE;\n+}\")\n+\n (define_insn \"ashldi3_media\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,r\")\n \t(ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n@@ -3882,8 +3910,19 @@ label:\n       emit_insn (gen_ashldi3_media (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-  if (GET_CODE (operands[2]) != CONST_INT\n-      || INTVAL (operands[2]) != 1)\n+  if (GET_CODE (operands[2]) == CONST_INT\n+      && INTVAL (operands[2]) == 1)\n+    {\n+      emit_insn (gen_ashldi3_k (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else if (GET_CODE (operands[2]) == CONST_INT\n+      && INTVAL (operands[2]) < 32)\n+    {\n+      emit_insn (gen_ashldi3_std (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+  else\n     FAIL;\n }\")\n "}]}