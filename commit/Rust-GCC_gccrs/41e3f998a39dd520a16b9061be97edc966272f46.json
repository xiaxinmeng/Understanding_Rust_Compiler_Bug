{"sha": "41e3f998a39dd520a16b9061be97edc966272f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlM2Y5OThhMzlkZDUyMGExNmI5MDYxYmU5N2VkYzk2NjI3MmY0Ng==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-05-06T11:10:44Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-05-06T11:10:44Z"}, "message": "arm.c (arm_gen_load_multiple, [...]): Don't add bogus clobber to insns.\n\n* arm.c (arm_gen_load_multiple, arm_gen_store_mulitple): Don't add\nbogus clobber to insns.\n(load_multiple_operation, store_mulitple_operation): Don't check\nfor it.\n* arm.md (ldmsi_postinc, stmsi_postinc): Adjust accordingly.\n\n* arm.md (and_scc, ior_scc): Add missing mode.\n\n* arm.md (call_value_symbol): Remove predicate from op2.\n\nFrom-SVN: r33723", "tree": {"sha": "dea84d7a85862fc3f5041873fca67d20f19c5584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dea84d7a85862fc3f5041873fca67d20f19c5584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e3f998a39dd520a16b9061be97edc966272f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3f998a39dd520a16b9061be97edc966272f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3f998a39dd520a16b9061be97edc966272f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3f998a39dd520a16b9061be97edc966272f46/comments", "author": null, "committer": null, "parents": [{"sha": "296b4ed9cb306c649b9ebbfabe43f9b0ae30f1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b4ed9cb306c649b9ebbfabe43f9b0ae30f1bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296b4ed9cb306c649b9ebbfabe43f9b0ae30f1bc"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "db0ce02bae7c01361d1ac697acee4d74fb4ce572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e3f998a39dd520a16b9061be97edc966272f46", "patch": "@@ -1,3 +1,15 @@\n+2000-05-06  Richard Earnshaw (reanrsha@arm.com)\n+\n+\t* arm.c (arm_gen_load_multiple, arm_gen_store_mulitple): Don't add\n+\tbogus clobber to insns.\n+\t(load_multiple_operation, store_mulitple_operation): Don't check \n+\tfor it.\n+\t* arm.md (ldmsi_postinc, stmsi_postinc): Adjust accordingly.\n+\n+\t* arm.md (and_scc, ior_scc): Add missing mode.\n+\n+\t* arm.md (call_value_symbol): Remove predicate from op2.\n+\n Sat May  6 06:25:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (get_subtarget): New function."}, {"sha": "ba5b38cb17da3ecbe536802233757ecc91cad358", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=41e3f998a39dd520a16b9061be97edc966272f46", "patch": "@@ -3203,14 +3203,8 @@ load_multiple_operation (op, mode)\n           || GET_CODE (XEXP (SET_SRC (elt), 0)) != REG\n           || REGNO (XEXP (SET_SRC (elt), 0)) != REGNO (SET_DEST (elt))\n           || GET_CODE (XEXP (SET_SRC (elt), 1)) != CONST_INT\n-          || INTVAL (XEXP (SET_SRC (elt), 1)) != (count - 2) * 4\n-          || GET_CODE (XVECEXP (op, 0, count - 1)) != CLOBBER\n-          || GET_CODE (XEXP (XVECEXP (op, 0, count - 1), 0)) != REG\n-          || REGNO (XEXP (XVECEXP (op, 0, count - 1), 0))\n-              != REGNO (SET_DEST (elt)))\n+          || INTVAL (XEXP (SET_SRC (elt), 1)) != (count - 1) * 4)\n         return 0;\n-\n-      count--;\n     }\n \n   /* Perform a quick check so we don't blow up below.  */\n@@ -3271,14 +3265,8 @@ store_multiple_operation (op, mode)\n           || GET_CODE (XEXP (SET_SRC (elt), 0)) != REG\n           || REGNO (XEXP (SET_SRC (elt), 0)) != REGNO (SET_DEST (elt))\n           || GET_CODE (XEXP (SET_SRC (elt), 1)) != CONST_INT\n-          || INTVAL (XEXP (SET_SRC (elt), 1)) != (count - 2) * 4\n-          || GET_CODE (XVECEXP (op, 0, count - 1)) != CLOBBER\n-          || GET_CODE (XEXP (XVECEXP (op, 0, count - 1), 0)) != REG\n-          || REGNO (XEXP (XVECEXP (op, 0, count - 1), 0))\n-              != REGNO (SET_DEST (elt)))\n+          || INTVAL (XEXP (SET_SRC (elt), 1)) != (count - 1) * 4)\n         return 0;\n-\n-      count--;\n     }\n \n   /* Perform a quick check so we don't blow up below.  */\n@@ -3812,7 +3800,7 @@ arm_gen_load_multiple (base_regno, count, from, up, write_back, unchanging_p,\n   rtx mem;\n \n   result = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t     rtvec_alloc (count + (write_back ? 2 : 0)));\n+\t\t\t     rtvec_alloc (count + (write_back ? 1 : 0)));\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n@@ -3832,9 +3820,6 @@ arm_gen_load_multiple (base_regno, count, from, up, write_back, unchanging_p,\n \t= gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, base_regno + j), mem);\n     }\n \n-  if (write_back)\n-    XVECEXP (result, 0, i) = gen_rtx_CLOBBER (SImode, from);\n-\n   return result;\n }\n \n@@ -3856,7 +3841,7 @@ arm_gen_store_multiple (base_regno, count, to, up, write_back, unchanging_p,\n   rtx mem;\n \n   result = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t     rtvec_alloc (count + (write_back ? 2 : 0)));\n+\t\t\t     rtvec_alloc (count + (write_back ? 1 : 0)));\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n@@ -3877,9 +3862,6 @@ arm_gen_store_multiple (base_regno, count, to, up, write_back, unchanging_p,\n \t= gen_rtx_SET (VOIDmode, mem, gen_rtx_REG (SImode, base_regno + j));\n     }\n \n-  if (write_back)\n-    XVECEXP (result, 0, i) = gen_rtx_CLOBBER (SImode, to);\n-\n   return result;\n }\n "}, {"sha": "67e053b4418d01bace76061afe52c25dd190dfe5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3f998a39dd520a16b9061be97edc966272f46/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=41e3f998a39dd520a16b9061be97edc966272f46", "patch": "@@ -4956,15 +4956,15 @@\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n      (set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n \t  (mem:SI (match_dup 1)))])]\n-  \"TARGET_ARM && (INTVAL (operands[2])  == 4 * (XVECLEN (operands[0], 0) - 2))\"\n+  \"TARGET_ARM && (INTVAL (operands[2])  == 4 * (XVECLEN (operands[0], 0) - 1))\"\n   \"*\n {\n   rtx ops[3];\n   int count = XVECLEN (operands[0], 0);\n \n   ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n   ops[1] = SET_DEST (XVECEXP (operands[0], 0, 1));\n-  ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 2));\n+  ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n \n   output_asm_insn (\\\"ldm%?ia\\\\t%0!, {%1-%2}\\\\t%@ load multiple\\\", ops);\n   return \\\"\\\";\n@@ -5027,24 +5027,24 @@\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n      (set (mem:SI (match_dup 1))\n \t  (match_operand:SI 3 \"s_register_operand\" \"r\"))])]\n-  \"TARGET_ARM && (INTVAL (operands[2]) == 4 * (XVECLEN (operands[0], 0) - 2))\"\n+  \"TARGET_ARM && (INTVAL (operands[2]) == 4 * (XVECLEN (operands[0], 0) - 1))\"\n   \"*\n   {\n     rtx ops[3];\n     int count = XVECLEN (operands[0], 0);\n \n     ops[0] = XEXP (SET_SRC (XVECEXP (operands[0], 0, 0)), 0);\n     ops[1] = SET_SRC (XVECEXP (operands[0], 0, 1));\n-    ops[2] = SET_SRC (XVECEXP (operands[0], 0, count - 2));\n+    ops[2] = SET_SRC (XVECEXP (operands[0], 0, count - 1));\n \n     output_asm_insn (\\\"stm%?ia\\\\t%0!, {%1-%2}\\\\t%@ str multiple\\\", ops);\n     return \\\"\\\";\n   }\n   \"\n   [(set (attr \"type\")\n-        (cond [(eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 4))\n+        (cond [(eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 3))\n \t  \t   (const_string \"store2\")\n-\t       (eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 5))\n+\t       (eq (symbol_ref \"XVECLEN (operands[0],0)\") (const_int 4))\n \t\t   (const_string \"store3\")]\n \t       (const_string \"store4\")))]\n )\n@@ -6006,7 +6006,7 @@\n (define_insn \"*call_value_symbol\"\n   [(set (match_operand 0 \"s_register_operand\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n-\t(match_operand:SI 2 \"general_operand\" \"g\")))\n+\t(match_operand:SI 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI 14))]\n   \"TARGET_ARM\n@@ -6445,7 +6445,7 @@\n \n (define_insn \"*and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(and:SI (match_operator 1 \"comparison_operator\"\n+\t(and:SI (match_operator:SI 1 \"comparison_operator\"\n \t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n@@ -6455,7 +6455,7 @@\n \n (define_insn \"*ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(ior:SI (match_operator 2 \"comparison_operator\"\n+\t(ior:SI (match_operator:SI 2 \"comparison_operator\"\n \t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"TARGET_ARM\""}]}