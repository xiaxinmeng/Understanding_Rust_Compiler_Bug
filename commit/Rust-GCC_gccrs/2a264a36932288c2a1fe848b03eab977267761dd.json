{"sha": "2a264a36932288c2a1fe848b03eab977267761dd", "node_id": "C_kwDOANBUbNoAKDJhMjY0YTM2OTMyMjg4YzJhMWZlODQ4YjAzZWFiOTc3MjY3NzYxZGQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T12:15:10Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-11T15:18:02Z"}, "message": "hir: Cleanup Visibility struct\n\nThe HIR::Visibility struct was extremely similar to the AST::Visibility\none. However, we do not need to keep as much information at the HIR\nlevel: Syntactic sugar such as pub(crate) can be kept as the desugared\nform, which is pub(in crate). Likewise, pub(self) can be desugared to\npub(in self) which amounts to having a private item.", "tree": {"sha": "140ae5f9ff0e73a0cc03fe41144c249ba85402d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140ae5f9ff0e73a0cc03fe41144c249ba85402d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a264a36932288c2a1fe848b03eab977267761dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a264a36932288c2a1fe848b03eab977267761dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a264a36932288c2a1fe848b03eab977267761dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a264a36932288c2a1fe848b03eab977267761dd/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68458036c81d141a3899ac4e6ec6ddf0fdfde174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68458036c81d141a3899ac4e6ec6ddf0fdfde174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68458036c81d141a3899ac4e6ec6ddf0fdfde174"}], "stats": {"total": 101, "additions": 24, "deletions": 77}, "files": [{"sha": "602fc56c3536c8dbbfd1e1d03fa55704062bb51c", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=2a264a36932288c2a1fe848b03eab977267761dd", "patch": "@@ -37,8 +37,7 @@ HIRCompileBase::setup_attributes_on_fndecl (\n {\n   // if its the main fn or pub visibility mark its as DECL_PUBLIC\n   // please see https://github.com/Rust-GCC/gccrs/pull/137\n-  bool is_pub\n-    = visibility.get_vis_type () != HIR::Visibility::PublicVisType::NONE;\n+  bool is_pub = visibility.get_vis_type () == HIR::Visibility::VisType::PUBLIC;\n   if (is_main_entry_point || is_pub)\n     {\n       TREE_PUBLIC (fndecl) = 1;"}, {"sha": "b44cdc984b812928ecd9f93455ca80c5e4baadc8", "filename": "gcc/rust/backend/rust-compile-implitem.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc?ref=2a264a36932288c2a1fe848b03eab977267761dd", "patch": "@@ -84,9 +84,8 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n     &canonical_path);\n   rust_assert (ok);\n \n-  // FIXME\n-  HIR::Visibility vis (HIR::Visibility::PublicVisType::NONE,\n-\t\t       AST::SimplePath::create_empty ());\n+  // FIXME: Get from lowering the item's visibility instead\n+  auto vis = HIR::Visibility::create_public ();\n   HIR::TraitFunctionDecl &function = func.get_decl ();\n   tree fndecl\n     = compile_function (ctx, function.get_function_name (),"}, {"sha": "9b56086ea555d1cb2fb0123cf7f8a1a0eee35c10", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=2a264a36932288c2a1fe848b03eab977267761dd", "patch": "@@ -118,18 +118,12 @@ Crate::as_string () const\n std::string\n Visibility::as_string () const\n {\n-  switch (public_vis_type)\n+  switch (vis_type)\n     {\n-    case NONE:\n-      return std::string (\"pub\");\n-    case CRATE:\n-      return std::string (\"pub(crate)\");\n-    case SELF:\n-      return std::string (\"pub(self)\");\n-    case SUPER:\n-      return std::string (\"pub(super)\");\n-    case IN_PATH:\n-      return std::string (\"pub(in \") + in_path.as_string () + std::string (\")\");\n+    case PRIVATE:\n+      return std::string (\"private\");\n+    case PUBLIC:\n+      return std::string (\"pub(in \") + path.as_string () + std::string (\")\");\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "3d761806216d7f15f14cd00b53c2fa44bf9c8be0", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 16, "deletions": 61, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a264a36932288c2a1fe848b03eab977267761dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=2a264a36932288c2a1fe848b03eab977267761dd", "patch": "@@ -553,91 +553,46 @@ struct FunctionParam\n struct Visibility\n {\n public:\n-  enum PublicVisType\n+  enum VisType\n   {\n-    NONE,\n-    CRATE,\n-    SELF,\n-    SUPER,\n-    IN_PATH\n+    PRIVATE,\n+    PUBLIC,\n+    ERROR,\n   };\n \n private:\n-  // if vis is public, one of these\n-  PublicVisType public_vis_type;\n-  // Only assigned if public_vis_type is IN_PATH\n-  AST::SimplePath in_path;\n+  VisType vis_type;\n+  AST::SimplePath path;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (PublicVisType public_vis_type, AST::SimplePath in_path)\n-    : public_vis_type (public_vis_type), in_path (std::move (in_path))\n+  Visibility (VisType vis_type,\n+\t      AST::SimplePath path = AST::SimplePath::create_empty ())\n+    : vis_type (vis_type), path (std::move (path))\n   {}\n \n   // Returns whether visibility is in an error state.\n-  bool is_error () const\n-  {\n-    return public_vis_type == IN_PATH && in_path.is_empty ();\n-  }\n+  bool is_error () const { return vis_type == ERROR; }\n \n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (IN_PATH, AST::SimplePath::create_empty ());\n+    return Visibility (ERROR, AST::SimplePath::create_empty ());\n   }\n \n-  // Unique pointer custom clone function\n-  /*std::unique_ptr<Visibility> clone_visibility() const {\n-      return std::unique_ptr<Visibility>(clone_visibility_impl());\n-  }*/\n-\n-  /* TODO: think of a way to only allow valid Visibility states - polymorphism\n-   * is one idea but may be too resource-intensive. */\n-\n-  // Creates a public visibility with no further features/arguments.\n+  // Creates a public visibility.\n+  // FIXME: Remove this function: We should not be calling it anymore and\n+  // instead we should be using `translate_visibility`\n   static Visibility create_public ()\n   {\n-    return Visibility (NONE, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with crate-relative paths or whatever.\n-  static Visibility create_crate ()\n-  {\n-    return Visibility (CRATE, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with self-relative paths or whatever.\n-  static Visibility create_self ()\n-  {\n-    return Visibility (SELF, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with parent module-relative paths or\n-  // whatever.\n-  static Visibility create_super ()\n-  {\n-    return Visibility (SUPER, AST::SimplePath::create_empty ());\n-  }\n-\n-  // Creates a public visibility with a given path or whatever.\n-  static Visibility create_in_path (AST::SimplePath in_path)\n-  {\n-    return Visibility (IN_PATH, std::move (in_path));\n+    return Visibility (ERROR, AST::SimplePath::create_empty ());\n   }\n \n-  PublicVisType get_vis_type () const { return public_vis_type; }\n+  VisType get_vis_type () const { return vis_type; }\n \n   std::string as_string () const;\n-\n-protected:\n-  // Clone function implementation - not currently virtual but may be if\n-  // polymorphism used\n-  /*virtual*/ Visibility *clone_visibility_impl () const\n-  {\n-    return new Visibility (*this);\n-  }\n };\n \n // Item that supports visibility - abstract base class"}]}