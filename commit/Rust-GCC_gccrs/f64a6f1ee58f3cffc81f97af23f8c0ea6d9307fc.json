{"sha": "f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0YTZmMWVlNThmM2NmZmM4MWY5N2FmMjNmOGMwZWE2ZDkzMDdmYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-06-17T08:33:13Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-06-17T08:33:13Z"}, "message": "re PR libgcj/49315 (Throw_2 SEGVs on Tru64 UNIX)\n\n\tPR libgcj/49315\n\t* include/solaris-signal.h: Rename to ...\n\t* include/posix-signal.h: ... this.\n\t(SA_FLAGS): Define.\n\t(SIGNAL_HANDLER): Handle non-SA_SIGINFO case.\n\t(sa_signal_handler): Define.\n\t(_INIT_SIG_HANDLER): New macro.\n\t(INIT_SEGV, INIT_FPE): Use it.\n\t* configure.ac (SIGNAL_HANDLER): Use it on alpha*-dec-osf*,\n\tmips-sgi-irix*, *-*-solaris2*\n\t* configure: Regenerate.\n\t* include/aix-signal.h: Refer to AIX.\n\t* configure.host (alpha*-dec-osf*): Enable can_unwind_signal.\n\t(mips-sgi-irix6*): Likewise.\n\nFrom-SVN: r175138", "tree": {"sha": "b7fe17c802470044716e9fa5a7487d9bd3cec232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7fe17c802470044716e9fa5a7487d9bd3cec232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "041efc9a53583539ac562f7d4427410278e20e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041efc9a53583539ac562f7d4427410278e20e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041efc9a53583539ac562f7d4427410278e20e54"}], "stats": {"total": 147, "additions": 90, "deletions": 57}, "files": [{"sha": "b253d02a169c0f7ce347317676eac654aa58b2bc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -1,3 +1,20 @@\n+2011-06-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libgcj/49315\n+\t* include/solaris-signal.h: Rename to ...\n+\t* include/posix-signal.h: ... this.\n+\t(SA_FLAGS): Define.\n+\t(SIGNAL_HANDLER): Handle non-SA_SIGINFO case.\n+\t(sa_signal_handler): Define.\n+\t(_INIT_SIG_HANDLER): New macro.\n+\t(INIT_SEGV, INIT_FPE): Use it.\n+\t* configure.ac (SIGNAL_HANDLER): Use it on alpha*-dec-osf*,\n+\tmips-sgi-irix*, *-*-solaris2*\n+\t* configure: Regenerate.\n+\t* include/aix-signal.h: Refer to AIX.\n+\t* configure.host (alpha*-dec-osf*): Enable can_unwind_signal.\n+\t(mips-sgi-irix6*): Likewise.\n+\n 2011-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libgcj/49193"}, {"sha": "01e5bf0dfc78b5e7d65c3350081c3de4f0a90e1f", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -24215,12 +24215,12 @@ SYSDEP_SOURCES=\n SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n+ alpha*-dec-osf* | mips-sgi-irix* | *-*-solaris2*)\n+    SIGNAL_HANDLER=include/posix-signal.h\n+    ;;\n  i?86-*-linux*)\n     SIGNAL_HANDLER=include/i386-signal.h\n     ;;\n- *-*-solaris2*)\n-    SIGNAL_HANDLER=include/solaris-signal.h\n-    ;;\n # ia64-*)\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep"}, {"sha": "0e127fc818bfdb496d5b16af8619947f895d35f8", "filename": "libjava/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -1727,12 +1727,12 @@ SYSDEP_SOURCES=\n SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n+ alpha*-dec-osf* | mips-sgi-irix* | *-*-solaris2*)\n+    SIGNAL_HANDLER=include/posix-signal.h\n+    ;;\n  i?86-*-linux*)\n     SIGNAL_HANDLER=include/i386-signal.h\n     ;;\n- *-*-solaris2*)\n-    SIGNAL_HANDLER=include/solaris-signal.h\n-    ;;\n # ia64-*)\n #    SYSDEP_SOURCES=sysdep/ia64.c\n #    test -d sysdep || mkdir sysdep"}, {"sha": "fab8c603a81fb68a9923feaa29cb1727d7d36f8d", "filename": "libjava/configure.host", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -274,7 +274,10 @@ EOF\n \t  rm -f conftest conftest.c\n \tfi\n \t;;\n-   i[34567]86*-kfreebsd*-gnu | x86_64*-kfreebsd*-gnu)\n+  alpha*-dec-osf*)\n+\tcan_unwind_signal=yes\n+\t;;\n+  i[34567]86*-kfreebsd*-gnu | x86_64*-kfreebsd*-gnu)\n         libgcj_ld_symbolic='-Wl,-Bsymbolic'\n         slow_pthread_self=\n         ;;\n@@ -283,6 +286,7 @@ EOF\n \tDIVIDESPEC=-f%{m32:no-}%{!m32:%{!m64:no-}}%{m64:}use-divide-subroutine\n \t;;\n   mips-sgi-irix6* )\n+\tcan_unwind_signal=yes\n \tsysdeps_dir=mips\n \t;;\n   arm*-linux* )"}, {"sha": "896aa8e550343af6a50d33e6553d7c1944f15b6d", "filename": "libjava/include/aix-signal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Finclude%2Faix-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Finclude%2Faix-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Faix-signal.h?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -1,7 +1,7 @@\n /* aix-signal.h - Catch runtime signals and turn them into exceptions,\n-   on a Darwin system.  */\n+   on a AIX system.  */\n \n-/* Copyright (C) 2008  Free Software Foundation\n+/* Copyright (C) 2008, 2011  Free Software Foundation\n \n    This file is part of libgcj.\n "}, {"sha": "726fde3a66e25ffb1eabf47dd1c5e8475b174064", "filename": "libjava/include/posix-signal.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Finclude%2Fposix-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc/libjava%2Finclude%2Fposix-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-signal.h?ref=f64a6f1ee58f3cffc81f97af23f8c0ea6d9307fc", "patch": "@@ -0,0 +1,60 @@\n+// posix-signal.h - Catch runtime signals and turn them into exceptions.\n+\n+/* Copyright (C) 1998, 1999, 2000, 2009, 2011  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef JAVA_SIGNAL_H\n+#define JAVA_SIGNAL_H 1\n+\n+#include <signal.h>\n+\n+#define HANDLE_SEGV 1\n+#define HANDLE_FPE 1\n+\n+/* Different implementations of MD_FALLBACK_FRAME_STATE_FOR either require\n+   SA_SIGINFO being set or fail if so.  Cf. gcc/ada/init.c\n+   (__gnat_install_handler) for details.  */\n+\n+#if (defined __alpha__ && defined __osf__) \\\n+  || (defined __sun__ && defined __svr4__)\n+#define SA_FLAGS SA_NODEFER | SA_SIGINFO\n+#elif defined __sgi__\n+#define SA_FLAGS SA_NODEFER\n+#else\n+#error Must define SA_FLAGS.\n+#endif\n+\n+#if SA_FLAGS & SA_SIGINFO\n+#define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+static void _Jv_##_name (int,\t\t\t\t\t\t\\\n+\t\t\t siginfo_t *_si __attribute__ ((__unused__)),\t\\\n+\t\t\t void *_uc __attribute__ ((__unused__)))\n+#define sa_signal_handler sa_sigaction\n+#else\n+#define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+static void _Jv_##_name (int)\n+#define sa_signal_handler sa_handler\n+#endif\n+\n+#define MAKE_THROW_FRAME(_exception)\n+\n+#define _INIT_SIG_HANDLER(_SIG, _ACTION)     \t\t\t\t\\\n+do                                           \t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    struct sigaction act;\t\t\t\t\t\t\\\n+    act.sa_signal_handler = _Jv_##_ACTION;\t\t\t\t\\\n+    act.sa_flags = SA_FLAGS;\t\t\t\t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\t\\\n+    sigaction(_SIG, &act, NULL);\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define INIT_SEGV\t_INIT_SIG_HANDLER (SIGSEGV, catch_segv)\n+#define INIT_FPE\t_INIT_SIG_HANDLER (SIGFPE, catch_fpe)\n+\n+#endif /* JAVA_SIGNAL_H */"}, {"sha": "a936afe067f50104ca9b6bb711f8797746998b55", "filename": "libjava/include/solaris-signal.h", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041efc9a53583539ac562f7d4427410278e20e54/libjava%2Finclude%2Fsolaris-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041efc9a53583539ac562f7d4427410278e20e54/libjava%2Finclude%2Fsolaris-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fsolaris-signal.h?ref=041efc9a53583539ac562f7d4427410278e20e54", "patch": "@@ -1,48 +0,0 @@\n-// sparc-signal.h - Catch runtime signals and turn them into exceptions.\n-\n-/* Copyright (C) 1998, 1999, 2000, 2009  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#ifndef JAVA_SIGNAL_H\n-#define JAVA_SIGNAL_H 1\n-\n-#include <signal.h>\n-\n-#define HANDLE_SEGV 1\n-#define HANDLE_FPE 1\n-\n-#define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n-static void _Jv_##_name (int,\t\t\t\t\t\t\\\n-\t\t\t siginfo_t *_si __attribute__ ((__unused__)),\t\\\n-\t\t\t void *_uc __attribute__ ((__unused__)))\n-\n-#define MAKE_THROW_FRAME(_exception)\n-\n-#define INIT_SEGV\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    struct sigaction act;\t\t\t\t\t\\\n-    act.sa_sigaction = _Jv_catch_segv;\t\t\t\t\\\n-    act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n-    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n-    sigaction (SIGSEGV, &act, NULL);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\n-#define INIT_FPE\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    struct sigaction act;\t\t\t\t\t\\\n-    act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n-    act.sa_flags = SA_SIGINFO | SA_NODEFER;\t\t\t\\\n-    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n-    sigaction (SIGFPE, &act, NULL);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#endif /* JAVA_SIGNAL_H */"}]}