{"sha": "48a24fcfc32ab00e84821c25af74252ff26b48b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhMjRmY2ZjMzJhYjAwZTg0ODIxYzI1YWY3NDI1MmZmMjZiNDhiNw==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2013-01-22T09:49:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-01-22T09:49:14Z"}, "message": "gigi.h (ADT_unhandled_except_decl, [...]): New.\n\n\t* gcc-interface/gigi.h (ADT_unhandled_except_decl,\n\tADT_unhandled_others_decl): New.\n\t(unhandled_others_decl, unhandled_except_decl): Define.\n\t* gcc-interface/trans.c: Include common/common-target.h.\n\t(gigi): Initialize them.\n\t(Subprogram_Body_to_gnu): On SEH targets, wrap the body of the main\n\tfunction in a try/catch clause.\n\nFrom-SVN: r195364", "tree": {"sha": "f1a75b650264f804fa309fe17e6de3b9951c26e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1a75b650264f804fa309fe17e6de3b9951c26e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48a24fcfc32ab00e84821c25af74252ff26b48b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a24fcfc32ab00e84821c25af74252ff26b48b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a24fcfc32ab00e84821c25af74252ff26b48b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a24fcfc32ab00e84821c25af74252ff26b48b7/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ab53cfdf65cf05ea5c2aeaa6a0d7e27e94ff189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab53cfdf65cf05ea5c2aeaa6a0d7e27e94ff189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab53cfdf65cf05ea5c2aeaa6a0d7e27e94ff189"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "426c9a70ddfe0b796bde0c56967a63d587016eb6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48a24fcfc32ab00e84821c25af74252ff26b48b7", "patch": "@@ -1,3 +1,13 @@\n+2013-01-22  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/gigi.h (ADT_unhandled_except_decl,\n+\tADT_unhandled_others_decl): New.\n+\t(unhandled_others_decl, unhandled_except_decl): Define.\n+\t* gcc-interface/trans.c: Include common/common-target.h.\n+\t(gigi): Initialize them.\n+\t(Subprogram_Body_to_gnu): On SEH targets, wrap the body of the main\n+\tfunction in a try/catch clause.\n+\n 2013-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Make-lang.in (COMMON_ADAFLAGS): Remove -gnata."}, {"sha": "6fc3f347ed31c986fc6e6de2ce79ade9c61813e5", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=48a24fcfc32ab00e84821c25af74252ff26b48b7", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -413,8 +413,10 @@ enum standard_datatypes\n   ADT_reraise_zcx_decl,\n   ADT_begin_handler_decl,\n   ADT_end_handler_decl,\n+  ADT_unhandled_except_decl,\n   ADT_others_decl,\n   ADT_all_others_decl,\n+  ADT_unhandled_others_decl,\n   ADT_LAST};\n \n /* Define kind of exception information associated with raise statements.  */\n@@ -460,7 +462,9 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n #define begin_handler_decl gnat_std_decls[(int) ADT_begin_handler_decl]\n #define others_decl gnat_std_decls[(int) ADT_others_decl]\n #define all_others_decl gnat_std_decls[(int) ADT_all_others_decl]\n+#define unhandled_others_decl gnat_std_decls[(int) ADT_unhandled_others_decl]\n #define end_handler_decl gnat_std_decls[(int) ADT_end_handler_decl]\n+#define unhandled_except_decl gnat_std_decls[(int) ADT_unhandled_except_decl]\n \n /* Routines expected by the gcc back-end. They must have exactly the same\n    prototype and names as below.  */"}, {"sha": "722ce73ba9ef1e82aa0ec4f53c2260e5c6530c9b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48a24fcfc32ab00e84821c25af74252ff26b48b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=48a24fcfc32ab00e84821c25af74252ff26b48b7", "patch": "@@ -37,6 +37,7 @@\n #include \"bitmap.h\"\n #include \"cgraph.h\"\n #include \"target.h\"\n+#include \"common/common-target.h\"\n \n #include \"ada.h\"\n #include \"adadecode.h\"\n@@ -504,6 +505,13 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t   Empty);\n   DECL_IGNORED_P (end_handler_decl) = 1;\n \n+  unhandled_except_decl\n+    = create_subprog_decl (get_identifier (\"__gnat_unhandled_except_handler\"),\n+\t\t\t   NULL_TREE,\n+\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n+\t\t\t   Empty);\n+  DECL_IGNORED_P (unhandled_except_decl) = 1;\n+\n   reraise_zcx_decl\n     = create_subprog_decl (get_identifier (\"__gnat_reraise_zcx\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n@@ -639,6 +647,12 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t       integer_type_node, NULL_TREE, true, false, true, false,\n \t\t       NULL, Empty);\n \n+  unhandled_others_decl\n+    = create_var_decl (get_identifier (\"UNHANDLED_OTHERS\"),\n+\t\t       get_identifier (\"__gnat_unhandled_others_value\"),\n+\t\t       integer_type_node, NULL_TREE, true, false, true, false,\n+\t\t       NULL, Empty);\n+\n   main_identifier_node = get_identifier (\"main\");\n \n   /* Install the builtins we might need, either internally or as\n@@ -3495,6 +3509,26 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n   set_end_locus_from_node (gnu_result, gnat_node);\n   set_end_locus_from_node (gnu_subprog_decl, gnat_node);\n \n+  /* On SEH targets, install an exception handler around the main entry\n+     point to catch unhandled exceptions.  */\n+  if (DECL_NAME (gnu_subprog_decl) == main_identifier_node\n+      && targetm_common.except_unwind_info (&global_options) == UI_SEH)\n+    {\n+      tree t;\n+      tree etype;\n+\n+      t = build_call_expr (builtin_decl_explicit (BUILT_IN_EH_POINTER),\n+\t\t\t   1, integer_zero_node);\n+      t = build_call_n_expr (unhandled_except_decl, 1, t);\n+\n+      etype = build_unary_op (ADDR_EXPR, NULL_TREE, unhandled_others_decl);\n+      etype = tree_cons (NULL_TREE, etype, NULL_TREE);\n+\n+      t = build2 (CATCH_EXPR, void_type_node, etype, t);\n+      gnu_result = build2 (TRY_CATCH_EXPR, TREE_TYPE (gnu_result),\n+\t\t\t   gnu_result, t);\n+    }\n+\n   end_subprog_body (gnu_result);\n \n   /* Finally annotate the parameters and disconnect the trees for parameters"}]}