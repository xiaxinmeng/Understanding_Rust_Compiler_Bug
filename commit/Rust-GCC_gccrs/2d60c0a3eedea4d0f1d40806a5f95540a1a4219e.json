{"sha": "2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "node_id": "C_kwDOANBUbNoAKDJkNjBjMGEzZWVkZWE0ZDBmMWQ0MDgwNmE1Zjk1NTQwYTFhNDIxOWU", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-09T16:54:23Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-11-09T16:54:28Z"}, "message": "Introduce build_debug_expr_decl\n\nThis patch introduces a helper function build_debug_expr_decl to build\nDEBUG_EXPR_DECL tree nodes in the most common way and replaces with a\ncall of this function all code pieces which build such a DECL itself\nand sets its mode to the TYPE_MODE of its type.\n\nThere still remain 11 instances of open-coded creation of a\nDEBUG_EXPR_DECL which set the mode of the DECL to something else.  It\nwould probably be a good idea to figure out that has any effect and if\nnot, convert them to calls of build_debug_expr_decl too.  But this\npatch deliberately does not introduce any functional changes.\n\ngcc/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree.h (build_debug_expr_decl): Declare.\n\t* tree.c (build_debug_expr_decl): New function.\n\t* cfgexpand.c (avoid_deep_ter_for_debug): Use build_debug_expr_decl\n\tinstead of building a DEBUG_EXPR_DECL.\n\t* ipa-param-manipulation.c\n\t(ipa_param_body_adjustments::prepare_debug_expressions): Likewise.\n\t* omp-simd-clone.c (ipa_simd_modify_stmt_ops): Likewise.\n\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Likewise.\n\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Likewise.", "tree": {"sha": "220f83c75f7eb1fac9861df32ddbad7bad79621c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220f83c75f7eb1fac9861df32ddbad7bad79621c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmGKp8QACgkQv2PBvD+k\nNUD3VA/9FS5YitV9rno6/e5F3fJXwGwvaQ/btQ7MAQf7RS5Kq4C1f/9HeTBR2c4O\n/i1YS3PbqNoqWCrsQHi6VhNzXjuI9bLZzCCxYSJ5GRlxnlfn1jGxlgAy5QsAy9w8\n+nBtUtKf0VLwGr9VpiUxPE/o8SpGi34EL4L5+EKhcSduEtaw7UjaLzufYVUJuLyZ\nwUDv3MoGiPB6w+bDTEb+LT65Mbe4Eg0Ao+sjPoFXuxsJw5hI0X7MgFwo4Tc34V6D\n4e2z6GH9vvyhjEPnHktDsB2aMkRsyMAikK7nubvHB+Qd2QVek3h/UootVcqKC0k6\nLzVm/hi6f88e1JUAojvNLBPo2j2bBAHLS3+8c54OaIegZeZZTl+orhx0eOW9fxYT\nOL/8XuTxpfZOssUnFoJDAGgXofYCsmWy1/g3IRog5Y85d3mj25VJ0klNDyb/9XBN\nfzaARI9Lupq++tjGSmBfYJp3YtwDiquZMiWkqTLs2GQ9PX5GdSxNQtRiUw3FnE9q\nw8gZxlu/DU3yW9QsS1S/AkAGJ9ENJ0avAdb3/5yj5feXJmhM9J5MAIjSNShacuSf\n2a4JUkUafApk5ZhEGl5S84oA5sjXkNjSX34Q61TmU21ATn38tC1IbLODtRRuryfR\n5SvVWj33BYyNszcqHPhmMrSn60TRzn3YTSMp+u18B625Kbcl4Qc=\n=8bCC\n-----END PGP SIGNATURE-----", "payload": "tree 220f83c75f7eb1fac9861df32ddbad7bad79621c\nparent 3bc3f6cefc2b92d368affacb74928948388c4786\nauthor Martin Jambor <mjambor@suse.cz> 1636476863 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1636476868 +0100\n\nIntroduce build_debug_expr_decl\n\nThis patch introduces a helper function build_debug_expr_decl to build\nDEBUG_EXPR_DECL tree nodes in the most common way and replaces with a\ncall of this function all code pieces which build such a DECL itself\nand sets its mode to the TYPE_MODE of its type.\n\nThere still remain 11 instances of open-coded creation of a\nDEBUG_EXPR_DECL which set the mode of the DECL to something else.  It\nwould probably be a good idea to figure out that has any effect and if\nnot, convert them to calls of build_debug_expr_decl too.  But this\npatch deliberately does not introduce any functional changes.\n\ngcc/ChangeLog:\n\n2021-11-08  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree.h (build_debug_expr_decl): Declare.\n\t* tree.c (build_debug_expr_decl): New function.\n\t* cfgexpand.c (avoid_deep_ter_for_debug): Use build_debug_expr_decl\n\tinstead of building a DEBUG_EXPR_DECL.\n\t* ipa-param-manipulation.c\n\t(ipa_param_body_adjustments::prepare_debug_expressions): Likewise.\n\t* omp-simd-clone.c (ipa_simd_modify_stmt_ops): Likewise.\n\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Likewise.\n\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc3f6cefc2b92d368affacb74928948388c4786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc3f6cefc2b92d368affacb74928948388c4786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc3f6cefc2b92d368affacb74928948388c4786"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "55ff75bd78e369c783e0f04fa6322e837d9f2940", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -4341,11 +4341,8 @@ avoid_deep_ter_for_debug (gimple *stmt, int depth)\n \t  tree &vexpr = deep_ter_debug_map->get_or_insert (use);\n \t  if (vexpr != NULL)\n \t    continue;\n-\t  vexpr = make_node (DEBUG_EXPR_DECL);\n+\t  vexpr = build_debug_expr_decl (TREE_TYPE (use));\n \t  gimple *def_temp = gimple_build_debug_bind (vexpr, use, g);\n-\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t  TREE_TYPE (vexpr) = TREE_TYPE (use);\n-\t  SET_DECL_MODE (vexpr, TYPE_MODE (TREE_TYPE (use)));\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (g);\n \t  gsi_insert_after (&gsi, def_temp, GSI_NEW_STMT);\n \t  avoid_deep_ter_for_debug (def_temp, 0);"}, {"sha": "ae3149718ca2e92cad3398beca201bd1a3370ab4", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -1200,10 +1200,7 @@ ipa_param_body_adjustments::prepare_debug_expressions (tree dead_ssa)\n \t= unshare_expr_without_location (gimple_assign_rhs_to_tree (def));\n       remap_with_debug_expressions (&val);\n \n-      tree vexpr = make_node (DEBUG_EXPR_DECL);\n-      DECL_ARTIFICIAL (vexpr) = 1;\n-      TREE_TYPE (vexpr) = TREE_TYPE (val);\n-      SET_DECL_MODE (vexpr, TYPE_MODE (TREE_TYPE (val)));\n+      tree vexpr = build_debug_expr_decl (TREE_TYPE (val));\n       m_dead_stmt_debug_equiv.put (def, val);\n       m_dead_ssa_debug_equiv.put (dead_ssa, vexpr);\n       return true;"}, {"sha": "4d43a86669a8c4b237b1f1b200090cb99e834022", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -910,11 +910,8 @@ ipa_simd_modify_stmt_ops (tree *tp, int *walk_subtrees, void *data)\n       gimple *stmt;\n       if (is_gimple_debug (info->stmt))\n \t{\n-\t  tree vexpr = make_node (DEBUG_EXPR_DECL);\n+\t  tree vexpr = build_debug_expr_decl (TREE_TYPE (repl));\n \t  stmt = gimple_build_debug_source_bind (vexpr, repl, NULL);\n-\t  DECL_ARTIFICIAL (vexpr) = 1;\n-\t  TREE_TYPE (vexpr) = TREE_TYPE (repl);\n-\t  SET_DECL_MODE (vexpr, TYPE_MODE (TREE_TYPE (repl)));\n \t  repl = vexpr;\n \t}\n       else"}, {"sha": "60ae5e6601f2c9717c18c2a3d20649b42e00b474", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -3452,10 +3452,7 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n       tree temp = NULL_TREE;\n       if (!throws || after || single_pred_p (e->dest))\n \t{\n-\t  temp = make_node (DEBUG_EXPR_DECL);\n-\t  DECL_ARTIFICIAL (temp) = 1;\n-\t  TREE_TYPE (temp) = TREE_TYPE (lhs);\n-\t  SET_DECL_MODE (temp, TYPE_MODE (TREE_TYPE (lhs)));\n+\t  temp = build_debug_expr_decl (TREE_TYPE (lhs));\n \t  tree t = build2 (LSHIFT_EXPR, TREE_TYPE (lhs), new_lhs, bit);\n \t  g = gimple_build_debug_bind (temp, t, g);\n \t  if (throws && !after)"}, {"sha": "173ac835ca62ba92931e4970b51bcfc5ee35d296", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -2429,19 +2429,13 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t     all floating point numbers should be comparable.  */\n \t  gimple_stmt_iterator gsi = gsi_after_labels (gimple_bb (phi));\n \t  tree type = TREE_TYPE (phires);\n-\t  tree temp1 = make_node (DEBUG_EXPR_DECL);\n-\t  DECL_ARTIFICIAL (temp1) = 1;\n-\t  TREE_TYPE (temp1) = type;\n-\t  SET_DECL_MODE (temp1, TYPE_MODE (type));\n+\t  tree temp1 = build_debug_expr_decl (type);\n \t  tree t = build2 (one_cmp, boolean_type_node, lhs1, rhs2);\n \t  t = build3 (COND_EXPR, type, t, build_one_cst (type),\n \t\t      build_int_cst (type, -1));\n \t  gimple *g = gimple_build_debug_bind (temp1, t, phi);\n \t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n-\t  tree temp2 = make_node (DEBUG_EXPR_DECL);\n-\t  DECL_ARTIFICIAL (temp2) = 1;\n-\t  TREE_TYPE (temp2) = type;\n-\t  SET_DECL_MODE (temp2, TYPE_MODE (type));\n+\t  tree temp2 = build_debug_expr_decl (type);\n \t  t = build2 (EQ_EXPR, boolean_type_node, lhs1, rhs2);\n \t  t = build3 (COND_EXPR, type, t, build_zero_cst (type), temp1);\n \t  g = gimple_build_debug_bind (temp2, t, phi);"}, {"sha": "6a555e7c553b6f6ee9567d67d93473930a7b18e8", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -1259,15 +1259,12 @@ make_new_ssa_for_def (gimple *stmt, enum tree_code opcode, tree op)\n \t{\n \t  if (new_debug_lhs == NULL_TREE)\n \t    {\n-\t      new_debug_lhs = make_node (DEBUG_EXPR_DECL);\n+\t      new_debug_lhs = build_debug_expr_decl (TREE_TYPE (lhs));\n \t      gdebug *def_temp\n \t\t= gimple_build_debug_bind (new_debug_lhs,\n \t\t\t\t\t   build2 (opcode, TREE_TYPE (lhs),\n \t\t\t\t\t\t   new_lhs, op),\n \t\t\t\t\t   stmt);\n-\t      DECL_ARTIFICIAL (new_debug_lhs) = 1;\n-\t      TREE_TYPE (new_debug_lhs) = TREE_TYPE (lhs);\n-\t      SET_DECL_MODE (new_debug_lhs, TYPE_MODE (TREE_TYPE (lhs)));\n \t      gimple_set_uid (def_temp, gimple_uid (stmt));\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n \t      gsi_insert_after (&gsi, def_temp, GSI_SAME_STMT);"}, {"sha": "845228a055b2cfac0c9ca8c0cda1b9df4b0095c6", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -5280,6 +5280,18 @@ build_decl (location_t loc, enum tree_code code, tree name,\n   return t;\n }\n \n+/* Create and return a DEBUG_EXPR_DECL node of the given TYPE.  */\n+\n+tree\n+build_debug_expr_decl (tree type)\n+{\n+  tree vexpr = make_node (DEBUG_EXPR_DECL);\n+  DECL_ARTIFICIAL (vexpr) = 1;\n+  TREE_TYPE (vexpr) = type;\n+  SET_DECL_MODE (vexpr, TYPE_MODE (type));\n+  return vexpr;\n+}\n+\n /* Builds and returns function declaration with NAME and TYPE.  */\n \n tree"}, {"sha": "f62c00bc8707029db52e2f3fe529948755235d3d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d60c0a3eedea4d0f1d40806a5f95540a1a4219e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2d60c0a3eedea4d0f1d40806a5f95540a1a4219e", "patch": "@@ -4567,6 +4567,7 @@ extern tree build_tree_list (tree, tree CXX_MEM_STAT_INFO);\n extern tree build_tree_list_vec (const vec<tree, va_gc> * CXX_MEM_STAT_INFO);\n extern tree build_decl (location_t, enum tree_code,\n \t\t\ttree, tree CXX_MEM_STAT_INFO);\n+extern tree build_debug_expr_decl (tree type);\n extern tree build_fn_decl (const char *, tree);\n extern tree build_translation_unit_decl (tree);\n extern tree build_block (tree, tree, tree, tree);"}]}