{"sha": "32dfd2e0335282119b8f03e3e05676bdbf6fca84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJkZmQyZTAzMzUyODIxMTliOGYwM2UzZTA1Njc2YmRiZjZmY2E4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-31T13:43:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-31T13:43:53Z"}, "message": "genmatch.c (expr::gen_transform): Use NOP_EXPRs instead of CONVERT_EXPRs in generated code.\n\n2014-10-31  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (expr::gen_transform): Use NOP_EXPRs instead of\n\tCONVERT_EXPRs in generated code.\n\t(dt_simplify::gen): Likewise.\n\nFrom-SVN: r216977", "tree": {"sha": "626915d867ae82c707353edfaf6d57ffffe72bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/626915d867ae82c707353edfaf6d57ffffe72bfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32dfd2e0335282119b8f03e3e05676bdbf6fca84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dfd2e0335282119b8f03e3e05676bdbf6fca84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dfd2e0335282119b8f03e3e05676bdbf6fca84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dfd2e0335282119b8f03e3e05676bdbf6fca84/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a2db19920ccf87adac7ec25807ca0608d9d022e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2db19920ccf87adac7ec25807ca0608d9d022e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2db19920ccf87adac7ec25807ca0608d9d022e"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "561a8765b3ad0b69715253fe9ad4dc49e808d3d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32dfd2e0335282119b8f03e3e05676bdbf6fca84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32dfd2e0335282119b8f03e3e05676bdbf6fca84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32dfd2e0335282119b8f03e3e05676bdbf6fca84", "patch": "@@ -1,3 +1,9 @@\n+2014-10-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (expr::gen_transform): Use NOP_EXPRs instead of\n+\tCONVERT_EXPRs in generated code.\n+\t(dt_simplify::gen): Likewise.\n+\n 2014-10-31  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \tPR target/63534"}, {"sha": "7ceb080f335e768fcc216e6d7c007b9832fdc3e2", "filename": "gcc/genmatch.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32dfd2e0335282119b8f03e3e05676bdbf6fca84/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32dfd2e0335282119b8f03e3e05676bdbf6fca84/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=32dfd2e0335282119b8f03e3e05676bdbf6fca84", "patch": "@@ -1384,22 +1384,27 @@ expr::gen_transform (FILE *f, const char *dest, bool gimple, int depth,\n       ops[i]->gen_transform (f, dest, gimple, depth + 1, optype, indexes);\n     }\n \n+  const char *opr;\n+  if (*operation == CONVERT_EXPR)\n+    opr = \"NOP_EXPR\";\n+  else\n+    opr = operation->id;\n+\n   if (gimple)\n     {\n       /* ???  Have another helper that is like gimple_build but may\n \t fail if seq == NULL.  */\n       fprintf (f, \"  if (!seq)\\n\"\n \t       \"    {\\n\"\n-\t       \"      res = gimple_simplify (%s, %s\",\n-\t       operation->id, type);\n+\t       \"      res = gimple_simplify (%s, %s\", opr, type);\n       for (unsigned i = 0; i < ops.length (); ++i)\n \tfprintf (f, \", ops%d[%u]\", depth, i);\n       fprintf (f, \", seq, valueize);\\n\");\n       fprintf (f, \"      if (!res) return false;\\n\");\n       fprintf (f, \"    }\\n\");\n       fprintf (f, \"  else\\n\");\n       fprintf (f, \"    res = gimple_build (seq, UNKNOWN_LOCATION, %s, %s\",\n-\t       operation->id, type);\n+\t       opr, type);\n       for (unsigned i = 0; i < ops.length (); ++i)\n \tfprintf (f, \", ops%d[%u]\", depth, i);\n       fprintf (f, \", valueize);\\n\");\n@@ -1408,11 +1413,10 @@ expr::gen_transform (FILE *f, const char *dest, bool gimple, int depth,\n     {\n       if (operation->kind == id_base::CODE)\n \tfprintf (f, \"  res = fold_build%d_loc (loc, %s, %s\",\n-\t\t ops.length(), operation->id, type);\n+\t\t ops.length(), opr, type);\n       else\n \tfprintf (f, \"  res = build_call_expr_loc (loc, \"\n-\t\t \"builtin_decl_implicit (%s), %d\",\n-\t\t operation->id, ops.length());\n+\t\t \"builtin_decl_implicit (%s), %d\", opr, ops.length());\n       for (unsigned i = 0; i < ops.length (); ++i)\n \tfprintf (f, \", ops%d[%u]\", depth, i);\n       fprintf (f, \");\\n\");\n@@ -2186,7 +2190,9 @@ dt_simplify::gen (FILE *f, bool gimple)\n \t  expr *e = as_a <expr *> (result);\n \t  bool is_predicate = is_a <predicate_id *> (e->operation);\n \t  if (!is_predicate)\n-\t    fprintf (f, \"*res_code = %s;\\n\", e->operation->id);\n+\t    fprintf (f, \"*res_code = %s;\\n\",\n+\t\t     *e->operation == CONVERT_EXPR\n+\t\t     ? \"NOP_EXPR\" : e->operation->id);\n \t  for (unsigned j = 0; j < e->ops.length (); ++j)\n \t    {\n \t      char dest[32];\n@@ -2264,7 +2270,9 @@ dt_simplify::gen (FILE *f, bool gimple)\n \t\t{\n \t\t  if (e->operation->kind == id_base::CODE)\n \t\t    fprintf (f, \"  res = fold_build%d_loc (loc, %s, type\",\n-\t\t\t     e->ops.length (), e->operation->id);\n+\t\t\t     e->ops.length (),\n+\t\t\t     *e->operation == CONVERT_EXPR\n+\t\t\t     ? \"NOP_EXPR\" : e->operation->id);\n \t\t  else\n \t\t    fprintf (f, \"  res = build_call_expr_loc \"\n \t\t\t     \"(loc, builtin_decl_implicit (%s), %d\","}]}