{"sha": "0a052b16fef9d5d94ec32d3c1a154d03bce49450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwNTJiMTZmZWY5ZDVkOTRlYzMyZDNjMWExNTRkMDNiY2U0OTQ1MA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-01T04:48:15Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-01T04:48:15Z"}, "message": "re PR c/16622 ([C99] extern inline is handled wrong in C99 mode)\n\n\t* c-decl.c (grokdeclarator): Don't set DECL_EXTERNAL on\n\tinline static functions in c99 mode.\n\n\tPR 16622\n\t* doc/extend.texi (Inline): Update.\n\t* c-tree.h (struct language_function): Remove field 'extern_inline'.\n\t* c-decl.c (current_extern_inline): Delete.\n\t(pop_scope): Adjust test for an undefined nested function.\n\tAdd warning about undeclared inline function.\n\t(diagnose_mismatched_decls): Update comments.  Disallow overriding\n\tof inline functions in a translation unit in C99.  Allow inline\n\tdeclarations in C99 at any time.\n\t(merge_decls): Boolize variables.  Handle C99 'extern inline'\n\tsemantics.\n\t(grokdeclarator): Set DECL_EXTERNAL here for functions.  Handle\n\tC99 inline semantics.\n\t(start_function): Don't clear current_extern_inline.  Don't set\n\tDECL_EXTERNAL.\n\t(c_push_function_context): Don't push current_extern_inline.\n\t(c_pop_function_context): Don't restore current_extern_inline.\n\n\tPR 11377\n\t* c-typeck.c (build_external_ref): Warn about static variables\n\tused in extern inline functions.\n\t* c-decl.c (start_decl): Warn about static variables declared\n\tin extern inline functions.\n\nFrom-SVN: r118357", "tree": {"sha": "e6af503358a0e4b6b36ed12fc04ebe575474dad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6af503358a0e4b6b36ed12fc04ebe575474dad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a052b16fef9d5d94ec32d3c1a154d03bce49450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a052b16fef9d5d94ec32d3c1a154d03bce49450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a052b16fef9d5d94ec32d3c1a154d03bce49450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a052b16fef9d5d94ec32d3c1a154d03bce49450/comments", "author": null, "committer": null, "parents": [{"sha": "71113fcd70d6b8851fa810c6a2f62fffec388f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71113fcd70d6b8851fa810c6a2f62fffec388f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71113fcd70d6b8851fa810c6a2f62fffec388f75"}], "stats": {"total": 113, "additions": 62, "deletions": 51}, "files": [{"sha": "422c4220d56097e9c12b2a0c1ebd93cfa0e8850a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 62, "deletions": 51, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a052b16fef9d5d94ec32d3c1a154d03bce49450/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a052b16fef9d5d94ec32d3c1a154d03bce49450/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0a052b16fef9d5d94ec32d3c1a154d03bce49450", "patch": "@@ -3789,58 +3789,54 @@ These attributes mainly are intended to support the @code{__vector},\n @cindex open coding\n @cindex macros, inline alternative\n \n-By declaring a function @code{inline}, you can direct GCC to\n+By declaring a function inline, you can direct GCC to make\n+calls to that function faster.  One way GCC can achieve this is to\n integrate that function's code into the code for its callers.  This\n makes execution faster by eliminating the function-call overhead; in\n-addition, if any of the actual argument values are constant, their known\n-values may permit simplifications at compile time so that not all of the\n-inline function's code needs to be included.  The effect on code size is\n-less predictable; object code may be larger or smaller with function\n-inlining, depending on the particular case.  Inlining of functions is an\n-optimization and it really ``works'' only in optimizing compilation.  If\n-you don't use @option{-O}, no function is really inline.\n-\n-Inline functions are included in the ISO C99 standard, but there are\n-currently substantial differences between what GCC implements and what\n-the ISO C99 standard requires.\n+addition, if any of the actual argument values are constant, their\n+known values may permit simplifications at compile time so that not\n+all of the inline function's code needs to be included.  The effect on\n+code size is less predictable; object code may be larger or smaller\n+with function inlining, depending on the particular case.  You can\n+also direct GCC to try to integrate all ``simple enough'' functions\n+into their callers with the option @option{-finline-functions}.\n+\n+GCC implements three different semantics of declaring a function\n+inline.  One is available with @option{-std=gnu89}, another when\n+@option{-std=c99} or @option{-std=gnu99}, and the third is used when\n+compiling C++.\n \n To declare a function inline, use the @code{inline} keyword in its\n declaration, like this:\n \n @smallexample\n-inline int\n+static inline int\n inc (int *a)\n @{\n   (*a)++;\n @}\n @end smallexample\n \n-(If you are writing a header file to be included in ISO C programs, write\n-@code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.)\n-You can also make all ``simple enough'' functions inline with the option\n-@option{-finline-functions}.\n+If you are writing a header file to be included in ISO C89 programs, write\n+@code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.\n \n-@opindex Winline\n-Note that certain usages in a function definition can make it unsuitable\n-for inline substitution.  Among these usages are: use of varargs, use of\n-alloca, use of variable sized data types (@pxref{Variable Length}),\n-use of computed goto (@pxref{Labels as Values}), use of nonlocal goto,\n-and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n-will warn when a function marked @code{inline} could not be substituted,\n-and will give the reason for the failure.\n+The three types of inlining behave similarly in two important cases:\n+when the @code{inline} keyword is used on a @code{static} function,\n+like the example above, and when a function is first declared without\n+using the @code{inline} keyword and then is defined with\n+@code{inline}, like this:\n \n-Note that in C and Objective-C, unlike C++, the @code{inline} keyword\n-does not affect the linkage of the function.\n+@smallexample\n+extern int inc (int *a);\n+inline int\n+inc (int *a)\n+@{\n+  (*a)++;\n+@}\n+@end smallexample\n \n-@cindex automatic @code{inline} for C++ member fns\n-@cindex @code{inline} automatic for C++ member fns\n-@cindex member fns, automatically @code{inline}\n-@cindex C++ member fns, automatically @code{inline}\n-@opindex fno-default-inline\n-GCC automatically inlines member functions defined within the class\n-body of C++ programs even if they are not explicitly declared\n-@code{inline}.  (You can override this with @option{-fno-default-inline};\n-@pxref{C++ Dialect Options,,Options Controlling C++ Dialect}.)\n+In both of these common cases, the program behaves the same as if you\n+had not used the @code{inline} keyword, except for its speed.\n \n @cindex inline functions, omission of\n @opindex fkeep-inline-functions\n@@ -3856,6 +3852,36 @@ nonintegrated call, then the function is compiled to assembler code as\n usual.  The function must also be compiled as usual if the program\n refers to its address, because that can't be inlined.\n \n+@opindex Winline\n+Note that certain usages in a function definition can make it unsuitable\n+for inline substitution.  Among these usages are: use of varargs, use of\n+alloca, use of variable sized data types (@pxref{Variable Length}),\n+use of computed goto (@pxref{Labels as Values}), use of nonlocal goto,\n+and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n+will warn when a function marked @code{inline} could not be substituted,\n+and will give the reason for the failure.\n+\n+@cindex automatic @code{inline} for C++ member fns\n+@cindex @code{inline} automatic for C++ member fns\n+@cindex member fns, automatically @code{inline}\n+@cindex C++ member fns, automatically @code{inline}\n+@opindex fno-default-inline\n+As required by ISO C++, GCC considers member functions defined within\n+the body of a class to be marked inline even if they are\n+not explicitly declared with the @code{inline} keyword.  You can\n+override this with @option{-fno-default-inline}; @pxref{C++ Dialect\n+Options,,Options Controlling C++ Dialect}.\n+\n+GCC does not inline any functions when not optimizing unless you specify\n+the @samp{always_inline} attribute for the function, like this:\n+\n+@smallexample\n+/* @r{Prototype.}  */\n+inline void foo (const char) __attribute__((always_inline));\n+@end smallexample\n+\n+The remainder of this section is specific to GNU C89 inlining.\n+\n @cindex non-static inline function\n When an inline function is not @code{static}, then the compiler must assume\n that there may be calls from other source files; since a global symbol can\n@@ -3878,21 +3904,6 @@ The definition in the header file will cause most calls to the function\n to be inlined.  If any uses of the function remain, they will refer to\n the single copy in the library.\n \n-Since GCC eventually will implement ISO C99 semantics for\n-inline functions, it is best to use @code{static inline} only\n-to guarantee compatibility.  (The\n-existing semantics will remain available when @option{-std=gnu89} is\n-specified, but eventually the default will be @option{-std=gnu99} and\n-that will implement the C99 semantics, though it does not do so yet.)\n-\n-GCC does not inline any functions when not optimizing unless you specify\n-the @samp{always_inline} attribute for the function, like this:\n-\n-@smallexample\n-/* @r{Prototype.}  */\n-inline void foo (const char) __attribute__((always_inline));\n-@end smallexample\n-\n @node Extended Asm\n @section Assembler Instructions with C Expression Operands\n @cindex extended @code{asm}"}]}