{"sha": "9687f8f4e020497637f9403cd99af40bfddf407a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4N2Y4ZjRlMDIwNDk3NjM3Zjk0MDNjZDk5YWY0MGJmZGRmNDA3YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-09-01T09:39:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-09-01T09:39:33Z"}, "message": "parse.y (named_class_head): Check for TYPENAME_TYPE.\n\n\t* parse.y (named_class_head): Check for TYPENAME_TYPE. Simplify\n\tunion tag mismatch error reporting.\n\nFrom-SVN: r36096", "tree": {"sha": "25f670f92fbaa1d35854a850f747c31deee3a137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f670f92fbaa1d35854a850f747c31deee3a137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9687f8f4e020497637f9403cd99af40bfddf407a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9687f8f4e020497637f9403cd99af40bfddf407a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9687f8f4e020497637f9403cd99af40bfddf407a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9687f8f4e020497637f9403cd99af40bfddf407a/comments", "author": null, "committer": null, "parents": [{"sha": "291c9aa2c85fc02cc4c1d3a5877018bd664517b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291c9aa2c85fc02cc4c1d3a5877018bd664517b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291c9aa2c85fc02cc4c1d3a5877018bd664517b8"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "057b071acc3413b1fd38cf2b28786a54243a1203", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9687f8f4e020497637f9403cd99af40bfddf407a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9687f8f4e020497637f9403cd99af40bfddf407a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9687f8f4e020497637f9403cd99af40bfddf407a", "patch": "@@ -1,3 +1,8 @@\n+2000-09-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parse.y (named_class_head): Check for TYPENAME_TYPE. Simplify\n+\tunion tag mismatch error reporting.\t\n+\n 2000-09-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (build_scoped_method_call): Check it is not a namespace.\t"}, {"sha": "8f23d912ea686ee04184acc870aeb97f4a963162", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9687f8f4e020497637f9403cd99af40bfddf407a/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9687f8f4e020497637f9403cd99af40bfddf407a/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=9687f8f4e020497637f9403cd99af40bfddf407a", "patch": "@@ -2393,24 +2393,30 @@ named_class_head:\n \t\t{ \n \t\t  if ($1.t != error_mark_node)\n \t\t    {\n-\t\t      $$.t = TREE_TYPE ($1.t);\n+\t\t      tree type = TREE_TYPE ($1.t);\n+\n+\t\t      $$.t = type;\n \t\t      $$.new_type_flag = $1.new_type_flag;\n-\t\t      if (current_aggr == union_type_node\n-\t\t\t  && TREE_CODE ($$.t) != UNION_TYPE)\n-\t\t\tcp_pedwarn (\"`union' tag used in declaring `%#T'\", \n-\t\t\t\t    $$.t);\n-\t\t      else if (TREE_CODE ($$.t) == UNION_TYPE\n-\t\t\t       && current_aggr != union_type_node)\n-\t\t\tcp_pedwarn (\"non-`union' tag used in declaring `%#T'\", $$);\n-\t\t      else if (TREE_CODE ($$.t) == RECORD_TYPE)\n+\t\t      if ((current_aggr == union_type_node)\n+\t\t\t  != (TREE_CODE (type) == UNION_TYPE))\n+\t\t\tcp_pedwarn (current_aggr == union_type_node\n+\t                            ? \"`union' tag used in declaring `%#T'\"\n+\t                            : \"non-`union' tag used in declaring `%#T'\", \n+\t\t\t\t    type);\n+\t\t      else if (TREE_CODE (type) == RECORD_TYPE)\n \t\t\t/* We might be specializing a template with a different\n \t\t\t   class-key; deal.  */\n-\t\t\tCLASSTYPE_DECLARED_CLASS ($$.t) \n+\t\t\tCLASSTYPE_DECLARED_CLASS (type) \n \t\t\t  = (current_aggr == class_type_node);\n \t\t      if ($2)\n \t\t\t{\n-\t\t\t  maybe_process_partial_specialization ($$.t);\n-\t\t\t  xref_basetypes (current_aggr, $1.t, $$.t, $2); \n+                          if (TREE_CODE (type) == TYPENAME_TYPE)\n+                            /* In a definition of a member class template, we\n+                               will get here with an implicit typename, a\n+                               TYPENAME_TYPE with a type. */\n+                            type = TREE_TYPE (type);\n+\t\t\t  maybe_process_partial_specialization (type);\n+\t\t\t  xref_basetypes (current_aggr, $1.t, type, $2); \n \t\t\t}\n \t\t    }\n \t\t}"}]}