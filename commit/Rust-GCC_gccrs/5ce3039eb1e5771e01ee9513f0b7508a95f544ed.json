{"sha": "5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlMzAzOWViMWU1NzcxZTAxZWU5NTEzZjBiNzUwOGE5NWY1NDRlZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-04-15T21:17:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-04-15T21:17:03Z"}, "message": "re PR c++/65727 (Segfault With Decltype In Lambda Expression Used To Initialize Static Class Member)\n\n\tPR c++/65727\n\t* lambda.c (lambda_expr_this_capture): In unevaluated context go\n\tthrough the normal loop, just don't capture.\n\t(maybe_resolve_dummy): Handle null return.\n\nCo-Authored-By: Marek Polacek <polacek@redhat.com>\n\nFrom-SVN: r222132", "tree": {"sha": "ae9db838d14d43c0821e59dda18494dafae364c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9db838d14d43c0821e59dda18494dafae364c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf0ed95b57a87bd943bb093a52d19cc00bdede31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0ed95b57a87bd943bb093a52d19cc00bdede31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0ed95b57a87bd943bb093a52d19cc00bdede31"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "3534fdb8b2d8456487dde7eafcb11e584a33cf1b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "patch": "@@ -1,3 +1,11 @@\n+2015-04-15  Jason Merrill  <jason@redhat.com>\n+\t    Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65727\n+\t* lambda.c (lambda_expr_this_capture): In unevaluated context go\n+\tthrough the normal loop, just don't capture.\n+\t(maybe_resolve_dummy): Handle null return.\n+\n 2015-04-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* call.c (enforce_access): Emit error + inform."}, {"sha": "174700ffa4e22d91bf13f5dab7a6437c564b7926", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "patch": "@@ -646,7 +646,7 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n \n /* Return the capture pertaining to a use of 'this' in LAMBDA, in the\n    form of an INDIRECT_REF, possibly adding it through default\n-   capturing, if ADD_CAPTURE_P is false.  */\n+   capturing, if ADD_CAPTURE_P is true.  */\n \n tree\n lambda_expr_this_capture (tree lambda, bool add_capture_p)\n@@ -655,17 +655,9 @@ lambda_expr_this_capture (tree lambda, bool add_capture_p)\n \n   tree this_capture = LAMBDA_EXPR_THIS_CAPTURE (lambda);\n \n-  /* In unevaluated context this isn't an odr-use, so just return the\n-     nearest 'this'.  */\n+  /* In unevaluated context this isn't an odr-use, so don't capture.  */\n   if (cp_unevaluated_operand)\n-    {\n-      /* In an NSDMI the fake 'this' pointer that we're using for\n-\t parsing is in scope_chain.  */\n-      if (LAMBDA_EXPR_EXTRA_SCOPE (lambda)\n-\t  && TREE_CODE (LAMBDA_EXPR_EXTRA_SCOPE (lambda)) == FIELD_DECL)\n-\treturn scope_chain->x_current_class_ptr;\n-      return lookup_name (this_identifier);\n-    }\n+    add_capture_p = false;\n \n   /* Try to default capture 'this' if we can.  */\n   if (!this_capture\n@@ -740,11 +732,17 @@ lambda_expr_this_capture (tree lambda, bool add_capture_p)\n         }\n     }\n \n-  if (!this_capture)\n+  if (cp_unevaluated_operand)\n+    result = this_capture;\n+  else if (!this_capture)\n     {\n       if (add_capture_p)\n-\terror (\"%<this%> was not captured for this lambda function\");\n-      result = error_mark_node;\n+\t{\n+\t  error (\"%<this%> was not captured for this lambda function\");\n+\t  result = error_mark_node;\n+\t}\n+      else\n+\tresult = NULL_TREE;\n     }\n   else\n     {\n@@ -787,7 +785,7 @@ maybe_resolve_dummy (tree object, bool add_capture_p)\n       /* In a lambda, need to go through 'this' capture.  */\n       tree lam = CLASSTYPE_LAMBDA_EXPR (current_class_type);\n       tree cap = lambda_expr_this_capture (lam, add_capture_p);\n-      if (cap != error_mark_node)\n+      if (cap && cap != error_mark_node)\n \tobject = build_x_indirect_ref (EXPR_LOCATION (object), cap,\n \t\t\t\t       RO_NULL, tf_warning_or_error);\n     }"}, {"sha": "51bf0ec33528a0ff0becb8ed98f8a7b773298dcd", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-decltype2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-decltype2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce3039eb1e5771e01ee9513f0b7508a95f544ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-decltype2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-decltype2.C?ref=5ce3039eb1e5771e01ee9513f0b7508a95f544ed", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/65727\n+// { dg-do compile { target c++11 } }\n+\n+struct type_a { void(*cb)(); };\n+\n+struct type_b\n+{\n+    type_b(type_a p);\n+    void dummy();\n+};\n+\n+template<class T>\n+constexpr T function_c(T**t) {return **t;}\n+\n+class type_d {\n+    public:\n+        static void dummy();\n+};\n+class type_e {\n+    public:\n+        static type_b b;\n+        type_d *d[1];\n+};\n+\n+type_b type_e::b = {{[](){decltype(function_c(type_e::d))::dummy();}}};"}]}