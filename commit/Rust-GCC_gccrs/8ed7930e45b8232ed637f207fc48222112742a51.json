{"sha": "8ed7930e45b8232ed637f207fc48222112742a51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkNzkzMGU0NWI4MjMyZWQ2MzdmMjA3ZmM0ODIyMjExMjc0MmE1MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:38:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:38:18Z"}, "message": "[multiple changes]\n\n2013-01-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Skip the special _Parent\n\tscope generated for subprogram inlining purposes while trying\n\tto locate the enclosing function.\n\t* sem_prag.adb (Analyze_Pragma): Preanalyze the boolean\n\texpression of pragma Postcondition when the pragma comes from\n\tsource and appears inside a subprogram body.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* switch-c.adb, fe.h, back_end.adb: Enable generation of instantiation\n\tinformation in debug info unconditionally when using -fdump-scos,\n\tinstead of relying on a separate command line switch -fdebug-instances.\n\n2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb: Additional refinement of predicate.\n\n2013-01-02  Vincent Celier  <celier@adacore.com>\n\n\t* vms_data.ads: Remove incorrect spaces at end of descriptions\n\tof qualifiers for single switch.\n\n2013-01-02  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_rm.texi: Minor edits / wordsmithing in section on pragma\n\tCheck_Float_Overflow.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* sprint.adb (Sprint_Node_Actual): Do not add extra parens for\n\ta conditional expression (CASE or IF expression) that already\n\thas parens. Also omit ELSE keyword for an IF expression without\n\tan ELSE part.\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Adjust back-end\n\tflag_debug_instances here, after front-end switches have been\n\tprocessed.\n\nFrom-SVN: r194792", "tree": {"sha": "fad1732609d459202281d32411b622d865c8e835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad1732609d459202281d32411b622d865c8e835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed7930e45b8232ed637f207fc48222112742a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed7930e45b8232ed637f207fc48222112742a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed7930e45b8232ed637f207fc48222112742a51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed7930e45b8232ed637f207fc48222112742a51/comments", "author": null, "committer": null, "parents": [{"sha": "fab62a15d14a3a8cf4a534f48411108a776b1a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab62a15d14a3a8cf4a534f48411108a776b1a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab62a15d14a3a8cf4a534f48411108a776b1a81"}], "stats": {"total": 342, "additions": 230, "deletions": 112}, "files": [{"sha": "17ddd2692fd5889d05b5f41501b6d6d81074cdd0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -1,3 +1,48 @@\n+2013-01-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Skip the special _Parent\n+\tscope generated for subprogram inlining purposes while trying\n+\tto locate the enclosing function.\n+\t* sem_prag.adb (Analyze_Pragma): Preanalyze the boolean\n+\texpression of pragma Postcondition when the pragma comes from\n+\tsource and appears inside a subprogram body.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* switch-c.adb, fe.h, back_end.adb: Enable generation of instantiation\n+\tinformation in debug info unconditionally when using -fdump-scos,\n+\tinstead of relying on a separate command line switch -fdebug-instances.\n+\t* gcc-interface/gigi.h, gcc-interface/misc.c\n+\t(set_flag_debug_instances): New subprogram.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2013-01-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb: Additional refinement of predicate.\n+\n+2013-01-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* vms_data.ads: Remove incorrect spaces at end of descriptions\n+\tof qualifiers for single switch.\n+\n+2013-01-02  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_rm.texi: Minor edits / wordsmithing in section on pragma\n+\tCheck_Float_Overflow.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual): Do not add extra parens for\n+\ta conditional expression (CASE or IF expression) that already\n+\thas parens. Also omit ELSE keyword for an IF expression without\n+\tan ELSE part.\n+\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Adjust back-end\n+\tflag_debug_instances here, after front-end switches have been\n+\tprocessed.\n+\n 2013-01-02  Vincent Celier  <celier@adacore.com>\n \n \t* usage.adb: Minor reformatting."}, {"sha": "f23230ecf9d34aee65e86422188b3671f5d4bdd6", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -244,11 +244,6 @@ package body Back_End is\n \n             elsif Switch_Chars (First .. Last) = \"fdump-scos\" then\n                Opt.Generate_SCO := True;\n-\n-            --  Back end switch -fdebug-instances also enables instance table\n-            --  SCO generation.\n-\n-            elsif Switch_Chars (First .. Last) = \"fdebug-instances\" then\n                Opt.Generate_SCO_Instance_Table := True;\n \n             end if;"}, {"sha": "6c752e899b39515401230c4a5c557fbd6431a7e7", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -178,19 +178,19 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n \n /* opt: */\n \n-#define Global_Discard_Names           opt__global_discard_names\n+#define Back_Annotate_Rep_Info         opt__back_annotate_rep_info\n #define Exception_Extra_Info           opt__exception_extra_info\n #define Exception_Locations_Suppressed opt__exception_locations_suppressed\n #define Exception_Mechanism            opt__exception_mechanism\n-#define Back_Annotate_Rep_Info         opt__back_annotate_rep_info\n+#define Global_Discard_Names           opt__global_discard_names\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;\n \n-extern Boolean Global_Discard_Names;\n+extern Boolean Back_Annotate_Rep_Info;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;\n-extern Boolean Back_Annotate_Rep_Info;\n+extern Boolean Global_Discard_Names;\n \n /* restrict: */\n "}, {"sha": "0e0cd6d266f4470b512ea8c5bf2cbf5e4af6c4c8", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 63, "deletions": 61, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -2194,14 +2194,13 @@ ada/exp_vfpt.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n ada/expander.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n    ada/atree.adb ada/casing.ads ada/debug.ads ada/debug_a.ads \\\n-   ada/debug_a.adb ada/einfo.ads ada/elists.ads ada/err_vars.ads \\\n-   ada/errout.ads ada/erroutc.ads ada/exp_aggr.ads ada/exp_alfa.ads \\\n-   ada/exp_attr.ads ada/exp_ch11.ads ada/exp_ch12.ads ada/exp_ch13.ads \\\n-   ada/exp_ch2.ads ada/exp_ch3.ads ada/exp_ch4.ads ada/exp_ch5.ads \\\n-   ada/exp_ch6.ads ada/exp_ch7.ads ada/exp_ch8.ads ada/exp_ch9.ads \\\n-   ada/exp_prag.ads ada/exp_tss.ads ada/expander.ads ada/expander.adb \\\n-   ada/fname.ads ada/hostparm.ads ada/inline.ads ada/lib.ads \\\n-   ada/lib-load.ads ada/namet.ads ada/nlists.ads ada/opt.ads \\\n+   ada/debug_a.adb ada/einfo.ads ada/elists.ads ada/exp_aggr.ads \\\n+   ada/exp_alfa.ads ada/exp_attr.ads ada/exp_ch11.ads ada/exp_ch12.ads \\\n+   ada/exp_ch13.ads ada/exp_ch2.ads ada/exp_ch3.ads ada/exp_ch4.ads \\\n+   ada/exp_ch5.ads ada/exp_ch6.ads ada/exp_ch7.ads ada/exp_ch8.ads \\\n+   ada/exp_ch9.ads ada/exp_prag.ads ada/exp_tss.ads ada/expander.ads \\\n+   ada/expander.adb ada/fname.ads ada/hostparm.ads ada/inline.ads \\\n+   ada/lib.ads ada/lib-load.ads ada/namet.ads ada/nlists.ads ada/opt.ads \\\n    ada/output.ads ada/restrict.ads ada/rident.ads ada/rtsfind.ads \\\n    ada/sem.ads ada/sem.adb ada/sem_attr.ads ada/sem_aux.ads \\\n    ada/sem_ch10.ads ada/sem_ch11.ads ada/sem_ch12.ads ada/sem_ch13.ads \\\n@@ -2734,25 +2733,25 @@ ada/par.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/warnsw.ads ada/widechar.ads \n \n ada/par_sco.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n-   ada/atree.adb ada/casing.ads ada/csets.ads ada/debug.ads ada/einfo.ads \\\n-   ada/err_vars.ads ada/errout.ads ada/erroutc.ads ada/exp_tss.ads \\\n-   ada/fname.ads ada/gnat.ads ada/g-byorma.ads ada/g-hesorg.ads \\\n-   ada/g-hesorg.adb ada/g-htable.ads ada/g-table.ads ada/g-table.adb \\\n-   ada/hostparm.ads ada/lib.ads ada/lib.adb ada/lib-list.adb \\\n-   ada/lib-sort.adb ada/lib-util.ads ada/lib-util.adb ada/namet.ads \\\n-   ada/nlists.ads ada/nlists.adb ada/opt.ads ada/osint.ads ada/osint-c.ads \\\n-   ada/output.ads ada/par_sco.ads ada/par_sco.adb ada/put_scos.ads \\\n-   ada/put_scos.adb ada/scans.ads ada/scos.ads ada/scos.adb ada/sem.ads \\\n-   ada/sem_util.ads ada/sinfo.ads ada/sinfo.adb ada/sinput.ads \\\n-   ada/sinput.adb ada/snames.ads ada/stand.ads ada/stringt.ads \\\n-   ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb \\\n-   ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n-   ada/s-secsta.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n-   ada/types.ads ada/uintp.ads ada/uname.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n+   ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/aspects.adb \\\n+   ada/atree.ads ada/atree.adb ada/casing.ads ada/csets.ads ada/debug.ads \\\n+   ada/einfo.ads ada/err_vars.ads ada/errout.ads ada/erroutc.ads \\\n+   ada/exp_tss.ads ada/fname.ads ada/gnat.ads ada/g-byorma.ads \\\n+   ada/g-hesorg.ads ada/g-hesorg.adb ada/g-htable.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/hostparm.ads ada/lib.ads ada/lib.adb \\\n+   ada/lib-list.adb ada/lib-sort.adb ada/lib-util.ads ada/lib-util.adb \\\n+   ada/namet.ads ada/nlists.ads ada/nlists.adb ada/opt.ads ada/osint.ads \\\n+   ada/osint-c.ads ada/output.ads ada/par_sco.ads ada/par_sco.adb \\\n+   ada/put_scos.ads ada/put_scos.adb ada/scans.ads ada/scos.ads \\\n+   ada/scos.adb ada/sem.ads ada/sem_util.ads ada/sinfo.ads ada/sinfo.adb \\\n+   ada/sinput.ads ada/sinput.adb ada/snames.ads ada/stand.ads \\\n+   ada/stringt.ads ada/system.ads ada/s-exctab.ads ada/s-htable.ads \\\n+   ada/s-htable.adb ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-secsta.ads ada/s-stalib.ads ada/s-stoele.ads \\\n+   ada/s-stoele.adb ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads ada/uname.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/prep.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/casing.ads ada/csets.ads \\\n@@ -2795,12 +2794,12 @@ ada/put_alfa.o : ada/ada.ads ada/a-unccon.ads ada/alfa.ads ada/gnat.ads \\\n ada/put_scos.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/gnat.ads \\\n    ada/g-table.ads ada/g-table.adb ada/hostparm.ads ada/namet.ads \\\n-   ada/opt.ads ada/output.ads ada/par_sco.ads ada/put_scos.ads \\\n-   ada/put_scos.adb ada/scos.ads ada/snames.ads ada/system.ads \\\n-   ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n-   ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n-   ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n+   ada/opt.ads ada/output.ads ada/put_scos.ads ada/put_scos.adb \\\n+   ada/scos.ads ada/system.ads ada/s-exctab.ads ada/s-memory.ads \\\n+   ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n+   ada/unchdeal.ads \n \n ada/repinfo.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n@@ -3075,34 +3074,34 @@ ada/scng.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n ada/scos.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/gnat.ads \\\n    ada/g-table.ads ada/g-table.adb ada/hostparm.ads ada/namet.ads \\\n-   ada/opt.ads ada/output.ads ada/scos.ads ada/scos.adb ada/snames.ads \\\n-   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n-   ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads \\\n-   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/tree_io.ads ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n+   ada/opt.ads ada/output.ads ada/scos.ads ada/scos.adb ada/system.ads \\\n+   ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n \n ada/sem.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/alloc.ads ada/aspects.ads ada/atree.ads ada/atree.adb \\\n    ada/casing.ads ada/csets.ads ada/debug.ads ada/debug_a.ads \\\n    ada/debug_a.adb ada/einfo.ads ada/einfo.adb ada/elists.ads \\\n-   ada/elists.adb ada/err_vars.ads ada/errout.ads ada/erroutc.ads \\\n-   ada/exp_tss.ads ada/expander.ads ada/fname.ads ada/gnat.ads \\\n-   ada/g-hesorg.ads ada/hostparm.ads ada/inline.ads ada/lib.ads \\\n-   ada/lib.adb ada/lib-list.adb ada/lib-load.ads ada/lib-sort.adb \\\n-   ada/namet.ads ada/nlists.ads ada/nlists.adb ada/opt.ads ada/output.ads \\\n-   ada/restrict.ads ada/rident.ads ada/sem.ads ada/sem.adb \\\n-   ada/sem_attr.ads ada/sem_aux.ads ada/sem_ch10.ads ada/sem_ch11.ads \\\n-   ada/sem_ch12.ads ada/sem_ch13.ads ada/sem_ch2.ads ada/sem_ch2.adb \\\n-   ada/sem_ch3.ads ada/sem_ch4.ads ada/sem_ch5.ads ada/sem_ch6.ads \\\n-   ada/sem_ch7.ads ada/sem_ch8.ads ada/sem_ch9.ads ada/sem_dim.ads \\\n-   ada/sem_prag.ads ada/sem_util.ads ada/sinfo.ads ada/sinfo.adb \\\n-   ada/sinput.ads ada/snames.ads ada/stand.ads ada/stringt.ads \\\n-   ada/system.ads ada/s-exctab.ads ada/s-imenne.ads ada/s-memory.ads \\\n-   ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n-   ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n+   ada/elists.adb ada/exp_tss.ads ada/expander.ads ada/fname.ads \\\n+   ada/gnat.ads ada/g-hesorg.ads ada/hostparm.ads ada/inline.ads \\\n+   ada/lib.ads ada/lib.adb ada/lib-list.adb ada/lib-load.ads \\\n+   ada/lib-sort.adb ada/namet.ads ada/nlists.ads ada/nlists.adb \\\n+   ada/opt.ads ada/output.ads ada/restrict.ads ada/rident.ads ada/sem.ads \\\n+   ada/sem.adb ada/sem_attr.ads ada/sem_aux.ads ada/sem_ch10.ads \\\n+   ada/sem_ch11.ads ada/sem_ch12.ads ada/sem_ch13.ads ada/sem_ch2.ads \\\n+   ada/sem_ch2.adb ada/sem_ch3.ads ada/sem_ch4.ads ada/sem_ch5.ads \\\n+   ada/sem_ch6.ads ada/sem_ch7.ads ada/sem_ch8.ads ada/sem_ch9.ads \\\n+   ada/sem_dim.ads ada/sem_prag.ads ada/sem_util.ads ada/sinfo.ads \\\n+   ada/sinfo.adb ada/sinput.ads ada/snames.ads ada/stand.ads \\\n+   ada/stringt.ads ada/system.ads ada/s-exctab.ads ada/s-imenne.ads \\\n+   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n+   ada/s-secsta.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n+   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n+   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n+   ada/uname.ads ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n+   ada/widechar.ads \n \n ada/sem_aggr.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n@@ -4372,11 +4371,14 @@ ada/validsw.o : ada/ada.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/types.ads ada/unchconv.ads ada/unchdeal.ads ada/validsw.ads \\\n    ada/validsw.adb \n \n-ada/warnsw.o : ada/ada.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n-   ada/hostparm.ads ada/opt.ads ada/system.ads ada/s-exctab.ads \\\n-   ada/s-stalib.ads ada/s-string.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/types.ads ada/unchconv.ads ada/unchdeal.ads ada/warnsw.ads \\\n-   ada/warnsw.adb \n+ada/warnsw.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n+   ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/err_vars.ads \\\n+   ada/hostparm.ads ada/namet.ads ada/opt.ads ada/output.ads \\\n+   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads ada/unchconv.ads \\\n+   ada/unchdeal.ads ada/warnsw.ads ada/warnsw.adb \n \n ada/widechar.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/hostparm.ads ada/interfac.ads ada/opt.ads \\"}, {"sha": "28bf9380c1c57ab47b43a7ad7dfed0d58687ef31", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -255,6 +255,8 @@ extern void gigi (Node_Id gnat_root, int max_gnat_node,\n                   Entity_Id standard_exception_type,\n                   Int gigi_operating_mode);\n \n+extern void set_flag_debug_instances (int);\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "4c5bd321eaff95213401805c3a68cc3a11ec9d46", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -228,7 +228,9 @@ int optimize_size;\n int flag_compare_debug;\n enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n \n-/* Post-switch processing.  */\n+/* Settings adjustments after switches processing by the back-end.\n+   Note that the front-end switches processing (Scan_Compiler_Arguments)\n+   has not been done yet at this point!  */\n \n static bool\n gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n@@ -807,6 +809,23 @@ gnat_eh_personality (void)\n   return gnat_eh_personality_decl;\n }\n \n+/* Set flag_debug_instances.  */\n+\n+void\n+set_flag_debug_instances (int val ATTRIBUTE_UNUSED)\n+{\n+#if 0\n+  /* Temporary compatibility shim???\n+     This should be enabled when back-end support for instance info in\n+     DWARF is merged at the FSF.  */\n+  flag_debug_instances = val;\n+#else\n+  /* Until then, forcibly turn off SCO instance table generation.  */\n+  extern Boolean opt__generate_sco_instance_table;\n+  opt__generate_sco_instance_table = False;\n+#endif\n+}\n+\n /* Initialize language-specific bits of tree_contains_struct.  */\n \n static void"}, {"sha": "b2e0647c1575e2eaa1dc1cf9e5c6103aa1fac682", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -109,6 +109,9 @@ procedure Gnat1drv is\n    ----------------------------\n \n    procedure Adjust_Global_Switches is\n+      procedure set_flag_debug_instances (Val : Int);\n+      pragma Import (C, set_flag_debug_instances);\n+\n    begin\n       --  Debug flag -gnatd.I is a synonym for Generate_SCIL and requires code\n       --  generation.\n@@ -573,6 +576,10 @@ procedure Gnat1drv is\n          end if;\n       end if;\n \n+      --  Set back-end flag_debug_instances from corresponding front-end flag\n+\n+      set_flag_debug_instances (Boolean'Pos (Generate_SCO_Instance_Table));\n+\n       --  Finally capture adjusted value of Suppress_Options as the initial\n       --  value for Scope_Suppress, which will be modified as we move from\n       --  scope to scope (by Suppress/Unsuppress/Overflow_Checks pragmas)."}, {"sha": "1e54eb0abff2ccb510c6f199c4b23f8bb1fef660", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -1417,41 +1417,43 @@ pragma Check_Float_Overflow;\n @noindent\n In Ada, the predefined floating-point types (@code{Short_Float},\n @code{Float}, @code{Long_Float}, @code{Long_Long_Float}) are\n-defined as being unconstrained. This means that even though they\n-have well defined base ranges, there is no requirement that an\n-overflow exception be raised when the result of an operation is\n-outside this base range. This definition accomodates the notion\n+defined to be @emph{unconstrained}. This means that even though each\n+has a well-defined base range, an operation that delivers a result\n+outside this base range is not required to raise an exception.\n+This implementation permission accommodates the notion\n of infinities in IEEE floating-point, and corresponds to the\n efficient execution mode on most machines. GNAT will not raise\n-overflow exceptions on these machines, instead it will generate\n+overflow exceptions on these machines; instead it will generate\n infinities and NaN's as defined in the IEEE standard.\n \n-Although the generation of infinities is efficient, it is not\n-always desirable, and it is often the case that it would be\n-preferable to check for overflows, even if this resulted in\n-substantially less efficient code. This can be accomplished\n-by defining your own float subtypes, and indeed such types\n-can have the same base range as in:\n+Generating infinities, although efficient, is not always desirable.\n+Often the preferable approach is to check for overflow, even at the\n+(perhaps considerable) expense of run-time performance.\n+This can be accomplished by defining your own constrained floating-point subtypes -- i.e., by supplying explicit\n+range constraints -- and indeed such a subtype\n+can have the same base range as its base type. For example:\n \n @smallexample @c ada\n subtype My_Float is Float range Float'Range;\n @end smallexample\n \n @noindent\n-In this example, @code{My_Float} has the same range as\n-@code{Float} but it is constrained, so operations on\n+Here @code{My_Float} has the same range as\n+@code{Float} but is constrained, so operations on\n @code{My_Float} values will be checked for overflow\n against this range.\n \n-However, it is often convenient to avoid the need to\n-define your own floating-point types, and instead use\n-the standard predefined types. The @code{Check_Float_Overflow}\n-configuration pragma achieves that. If a unit is compiled\n+This style will achieve the desired goal, but\n+it is often more convenient to be able to simply use\n+the standard predefined floating-point types as long\n+as overflow checking could be guaranteed.\n+The @code{Check_Float_Overflow}\n+configuration pragma achieves this effect. If a unit is compiled\n subject to this configuration pragma, then all operations\n on predefined floating-point types will be treated as\n-though those types were constrained and overflow checks\n-will be generated, resulting in a @code{Constraint_Error}\n-exception if the result is out of range.\n+though those types were constrained, and overflow checks\n+will be generated. The @code{Constraint_Error}\n+exception is raised if the result is out of range.\n \n This mode can also be set by use of the compiler\n switch @option{-gnateF}."}, {"sha": "ff008786bfe576c7cea9d85fee94648412604d53", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -4586,11 +4586,26 @@ package body Sem_Attr is\n          --  During pre-analysis, Prag is the enclosing pragma node if any\n \n       begin\n-         --  Find enclosing scopes, excluding loops\n+         --  Find the proper enclosing scope\n \n          CS := Current_Scope;\n-         while Ekind (CS) = E_Loop loop\n-            CS := Scope (CS);\n+         while Present (CS) loop\n+\n+            --  Skip generated loops\n+\n+            if Ekind (CS) = E_Loop then\n+               CS := Scope (CS);\n+\n+            --  Skip the special _Parent scope generated to capture references\n+            --  to formals during the process of subprogram inlining.\n+\n+            elsif Ekind (CS) = E_Function\n+              and then Chars (CS) = Name_uParent\n+            then\n+               CS := Scope (CS);\n+            else\n+               exit;\n+            end if;\n          end loop;\n \n          PS := Scope (CS);"}, {"sha": "ee883327054d9b6178e859fe756ddb9aaeb88b29", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -13001,12 +13001,15 @@ package body Sem_Ch12 is\n                --  an expanded name, it has been rewritten as the renamed\n                --  package, which is necessary semantically but complicates\n                --  ASIS tree traversal, so we recover the original entity to\n-               --  expose the renaming.\n+               --  expose the renaming. Take into account that the context may\n+               --  be a nested generic and that the original node may itself\n+               --  have an associated node.\n \n                if Ekind (E) = E_Package\n                  and then Nkind (Parent (N)) = N_Expanded_Name\n                  and then Present (Original_Node (N2))\n                  and then Present (Entity (Original_Node (N2)))\n+                 and then Is_Entity_Name (Entity (Original_Node (N2)))\n                then\n                   if Is_Global (Entity (Original_Node (N2))) then\n                      N2 := Original_Node (N2);"}, {"sha": "c83d1f61fb86200bac8a5906f89e5906982d5000", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -12748,18 +12748,29 @@ package body Sem_Prag is\n \n          when Pragma_Postcondition => Postcondition : declare\n             In_Body : Boolean;\n-            pragma Warnings (Off, In_Body);\n \n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n             Check_At_Most_N_Arguments (2);\n             Check_Optional_Identifier (Arg1, Name_Check);\n \n-            --  All we need to do here is call the common check procedure,\n-            --  the remainder of the processing is found in Sem_Ch6/Sem_Ch7.\n+            --  Verify the proper placement of the pragma. The remainder of the\n+            --  processing is found in Sem_Ch6/Sem_Ch7.\n \n             Check_Precondition_Postcondition (In_Body);\n+\n+            --  When the pragma is a source contruct and appears inside a body,\n+            --  preanalyze the boolean_expression to detect illegal forward\n+            --  references:\n+\n+            --    procedure P is\n+            --       pragma Postcondition (X'Old ...);\n+            --       X : ...\n+\n+            if Comes_From_Source (N) and then In_Body then\n+               Preanalyze_Spec_Expression (Expression (Arg1), Any_Boolean);\n+            end if;\n          end Postcondition;\n \n          ------------------"}, {"sha": "bfa245fd9dc284832eab3ccc8ecb7916e8211a49", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -1159,14 +1159,19 @@ package body Sprint is\n \n          when N_Case_Expression =>\n             declare\n-               Alt : Node_Id;\n+               Has_Parens : constant Boolean := Paren_Count (Node) > 0;\n+               Alt        : Node_Id;\n \n             begin\n                --  The syntax for case_expression does not include parentheses,\n                --  but sometimes parentheses are required, so unconditionally\n-               --  generate them here.\n+               --  generate them here unless already present.\n \n-               Write_Str_With_Col_Check_Sloc (\"(case \");\n+               if not Has_Parens then\n+                  Write_Char ('(');\n+               end if;\n+\n+               Write_Str_With_Col_Check_Sloc (\"case \");\n                Sprint_Node (Expression (Node));\n                Write_Str_With_Col_Check (\" is\");\n \n@@ -1178,7 +1183,9 @@ package body Sprint is\n                   Write_Char (',');\n                end loop;\n \n-               Write_Char (')');\n+               if not Has_Parens then\n+                  Write_Char (')');\n+               end if;\n             end;\n \n          when N_Case_Expression_Alternative =>\n@@ -1963,27 +1970,36 @@ package body Sprint is\n \n          when N_If_Expression =>\n             declare\n-               Condition : constant Node_Id := First (Expressions (Node));\n-               Then_Expr : constant Node_Id := Next (Condition);\n+               Has_Parens : constant Boolean := Paren_Count (Node) > 0;\n+               Condition  : constant Node_Id := First (Expressions (Node));\n+               Then_Expr  : constant Node_Id := Next (Condition);\n \n             begin\n                --  The syntax for if_expression does not include parentheses,\n                --  but sometimes parentheses are required, so unconditionally\n-               --  generate them here.\n+               --  generate them here unless already present.\n \n-               Write_Str_With_Col_Check_Sloc (\"(if \");\n+               if not Has_Parens then\n+                  Write_Char ('(');\n+               end if;\n+               Write_Str_With_Col_Check_Sloc (\"if \");\n                Sprint_Node (Condition);\n                Write_Str_With_Col_Check (\" then \");\n \n                --  Defense against junk here!\n \n                if Present (Then_Expr) then\n                   Sprint_Node (Then_Expr);\n-                  Write_Str_With_Col_Check (\" else \");\n-                  Sprint_Node (Next (Then_Expr));\n+\n+                  if Present (Next (Then_Expr)) then\n+                     Write_Str_With_Col_Check (\" else \");\n+                     Sprint_Node (Next (Then_Expr));\n+                  end if;\n                end if;\n \n-               Write_Char (')');\n+               if not Has_Parens then\n+                  Write_Char (')');\n+               end if;\n             end;\n \n          when N_If_Statement =>"}, {"sha": "ebb18b0c4016f25a67d1b351072f263ed7567424", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -618,6 +618,7 @@ package body Switch.C is\n \n                   when 'S' =>\n                      Generate_SCO := True;\n+                     Generate_SCO_Instance_Table := True;\n                      Ptr := Ptr + 1;\n \n                   --  -gnatet (generate target dependent information)"}, {"sha": "96cace5bd9640c9d2dfb320dfb01692d53683801", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed7930e45b8232ed637f207fc48222112742a51/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=8ed7930e45b8232ed637f207fc48222112742a51", "patch": "@@ -1402,19 +1402,19 @@ package VMS_Data is\n    --   source.\n \n    S_GCC_ChecksX : aliased constant S := \"/NOCHECKS \"                      &\n-                                             \"-gnatp,!-gnato,!-gnatE \";\n+                                             \"-gnatp,!-gnato,!-gnatE\";\n    --  NODOC (see /CHECKS)\n \n    S_GCC_Chflov  : aliased constant S := \"/FLOAT_OVERFLOW_CHECK \"          &\n-                                             \"-gnateF \";\n+                                             \"-gnateF\";\n    --        /NOFLOAT_OVERFLOW_CHECK (D)\n    --        /FLOAT_OVERFLOW_CHECK\n    --\n    --   Set mode to check overflow for all floating-point operations including\n    --   those using an unconstrained predefined type (i.e. no infinities).\n \n    S_GCC_Compres : aliased constant S := \"/COMPRESS_NAMES \"                &\n-                                             \"-gnatC \";\n+                                             \"-gnatC\";\n    --        /NOCOMPRESS_NAMES (D)\n    --        /COMPRESS_NAMES\n    --"}]}