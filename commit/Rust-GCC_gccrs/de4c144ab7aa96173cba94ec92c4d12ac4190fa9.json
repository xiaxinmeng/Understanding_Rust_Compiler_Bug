{"sha": "de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0YzE0NGFiN2FhOTYxNzNjYmE5NGVjOTJjNGQxMmFjNDE5MGZhOQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-21T13:28:53Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-21T13:28:53Z"}, "message": "[ARM] FP16 ARM Alternative format variants of AAPCS tests.\n\ntestsuite/\n2016-09-21  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/arm/fp16-aapcs-3.c: New.\n\t* gcc.target/arm/fp16-aapcs-4.c: New.\n\t* gcc.target/arm/aapcs/aapcs/vfp22.c: New.\n\t* gcc.target/arm/aapcs/aapcs/vfp23.c: New.\n\t* gcc.target/arm/aapcs/aapcs/vfp24.c: New.\n\t* gcc.target/arm/aapcs/aapcs/vfp25.c: New.\n\nFrom-SVN: r240314", "tree": {"sha": "5d21abbc6f60420d5c9bab076c5daa2fe961bda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d21abbc6f60420d5c9bab076c5daa2fe961bda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/comments", "author": null, "committer": null, "parents": [{"sha": "44fc7854813cc53c709920c849bc06fd0afc0ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fc7854813cc53c709920c849bc06fd0afc0ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fc7854813cc53c709920c849bc06fd0afc0ff2"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "73db6902fc825740d84e681b08760f688f0fc52b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -1,3 +1,12 @@\n+2016-09-21  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/arm/fp16-aapcs-3.c: New.\n+\t* gcc.target/arm/fp16-aapcs-4.c: New.\n+\t* gcc.target/arm/aapcs/aapcs/vfp22.c: New.\n+\t* gcc.target/arm/aapcs/aapcs/vfp23.c: New.\n+\t* gcc.target/arm/aapcs/aapcs/vfp24.c: New.\n+\t* gcc.target/arm/aapcs/aapcs/vfp25.c: New.\n+\n 2016-09-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR tree-optimization/77550"}, {"sha": "1944bb592a8692a870d0449b8a31095abb9f3552", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp22.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp22.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,28 @@\n+/* Test AAPCS layout (VFP variant)  */\n+\n+/* { dg-do run { target arm_eabi } }  */\n+/* { dg-require-effective-target arm_hard_vfp_ok }  */\n+/* { dg-require-effective-target arm_fp16_hw }  */\n+/* { dg-add-options arm_fp16_alternative }  */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp22.c\"\n+#include \"abitest.h\"\n+\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S0 + 2)\n+#else\n+ARG (__fp16, 1.0f, S0)\n+#endif\n+ARG (float, 2.0f, S1)\n+ARG (double, 4.0, D1)\n+ARG (float, 2.0f, S4)\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S5 + 2)\n+#else\n+ARG (__fp16, 1.0f, S5)\n+#endif\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "bcacf9f37c86361f890d3932e7f8a9a922109df4", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp23.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp23.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,30 @@\n+/* Test AAPCS layout (VFP variant)  */\n+\n+/* { dg-do run { target arm_eabi } }  */\n+/* { dg-require-effective-target arm_hard_vfp_ok }  */\n+/* { dg-require-effective-target arm_fp16_hw }  */\n+/* { dg-add-options arm_fp16_alternative }  */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp23.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+#include \"abitest.h\"\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, S0 + 2)\n+#else\n+ARG (__fp16, 1.0f, S0)\n+#endif\n+ARG (float, 2.0f, S1)\n+ARG (__complex__ double, x, D1)\n+ARG (float, 3.0f, S6)\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 2.0f, S7 + 2)\n+#else\n+ARG (__fp16, 2.0f, S7)\n+#endif\n+LAST_ARG (int, 3, R0)\n+#endif"}, {"sha": "ef36bb7b52bc2c19e5fcd28d3dad739bc61ea7dd", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp24.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp24.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS layout (VFP variant)  */\n+\n+/* { dg-do run { target arm_eabi } }  */\n+/* { dg-require-effective-target arm_hard_vfp_ok }  */\n+/* { dg-require-effective-target arm_fp16_hw }  */\n+/* { dg-add-options arm_fp16_alternative }  */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp24.c\"\n+\n+#define PCSATTR __attribute__((pcs(\"aapcs\")))\n+\n+#include \"abitest.h\"\n+#else\n+ARG (float, 1.0f, R0)\n+ARG (double, 2.0, R2)\n+ARG (float, 3.0f, STACK)\n+ARG (__fp16, 2.0f, STACK+4)\n+LAST_ARG (double, 4.0, STACK+8)\n+#endif"}, {"sha": "3c796ca044ff5cdf5585c2fe505acaf1bb780977", "filename": "gcc/testsuite/gcc.target/arm/aapcs/vfp25.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fvfp25.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,25 @@\n+/* Test AAPCS layout (VFP variant)  */\n+\n+/* { dg-do run { target arm_eabi } }  */\n+/* { dg-require-effective-target arm_hard_vfp_ok }  */\n+/* { dg-require-effective-target arm_fp16_hw }  */\n+/* { dg-add-options arm_fp16_alternative }  */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"vfp25.c\"\n+\n+#define PCSATTR __attribute__((pcs(\"aapcs\")))\n+\n+#include \"abitest.h\"\n+#else\n+#if defined (__ARM_BIG_ENDIAN)\n+ARG (__fp16, 1.0f, R0 + 2)\n+#else\n+ARG (__fp16, 1.0f, R0)\n+#endif\n+ARG (double, 2.0, R2)\n+ARG (__fp16, 3.0f, STACK)\n+ARG (float, 2.0f, STACK+4)\n+LAST_ARG (double, 4.0, STACK+8)\n+#endif"}, {"sha": "b7d7e58256c376b8a77ce3c2112e27068c354e09", "filename": "gcc/testsuite/gcc.target/arm/fp16-aapcs-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-3.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_hard_vfp_ok }  */\n+/* { dg-require-effective-target arm_fp16_ok } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-add-options arm_fp16_alternative } */\n+\n+/* Test __fp16 arguments and return value in registers (hard-float).  */\n+\n+void\n+swap (__fp16, __fp16);\n+\n+__fp16\n+F (__fp16 a, __fp16 b, __fp16 c)\n+{\n+  swap (b, a);\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times {vmov\\tr[0-9]+, s[0-2]} 2 } }  */\n+/* { dg-final { scan-assembler-times {vmov.f32\\ts1, s0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vmov\\ts0, r[0-9]+} 2 } }  */"}, {"sha": "4c90a56e03726d2b91a8ac7207737e221171312a", "filename": "gcc/testsuite/gcc.target/arm/fp16-aapcs-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4c144ab7aa96173cba94ec92c4d12ac4190fa9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffp16-aapcs-4.c?ref=de4c144ab7aa96173cba94ec92c4d12ac4190fa9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_fp16_ok } */\n+/* { dg-options \"-mfloat-abi=softfp -O2\" }  */\n+/* { dg-add-options arm_fp16_alternative } */\n+/* { dg-skip-if \"incompatible float-abi\" { arm*-*-* } { \"-mfloat-abi=hard\" } } */\n+\n+/* Test __fp16 arguments and return value in registers (softfp).  */\n+\n+void\n+swap (__fp16, __fp16);\n+\n+__fp16\n+F (__fp16 a, __fp16 b, __fp16 c)\n+{\n+  swap (b, a);\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times {mov\\tr[0-9]+, r[0-2]} 3 } }  */\n+/* { dg-final { scan-assembler-times {mov\\tr1, r0} 1 } }  */\n+/* { dg-final { scan-assembler-times {mov\\tr0, r[0-9]+} 2 } }  */"}]}