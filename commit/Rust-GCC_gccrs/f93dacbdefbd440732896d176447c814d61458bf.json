{"sha": "f93dacbdefbd440732896d176447c814d61458bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzZGFjYmRlZmJkNDQwNzMyODk2ZDE3NjQ0N2M4MTRkNjE0NThiZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-09-16T18:58:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-09-16T18:58:51Z"}, "message": "function.h (no_debugging_symbols): New field.\n\n\t* function.h (no_debugging_symbols): New field.\n\t* integrate.c (save_for_inline): Renamed from save_for_inline_nocopy.\n\tInitialize no_debugging_symbols.\n\t(output_inline_function): Save and restore write_symbols and set from\n\tno_debugging_symbols.\n\t* toplev.c (rest_of_compilation): Call save_for_inline.\n\t* tree.h: Update comment.\n\nFrom-SVN: r36461", "tree": {"sha": "6de510f651766f1daf10b0bf6db9c8a40c430cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de510f651766f1daf10b0bf6db9c8a40c430cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f93dacbdefbd440732896d176447c814d61458bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93dacbdefbd440732896d176447c814d61458bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93dacbdefbd440732896d176447c814d61458bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93dacbdefbd440732896d176447c814d61458bf/comments", "author": null, "committer": null, "parents": [{"sha": "5748b2cb4b46855f9a6052741de818825e9632ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5748b2cb4b46855f9a6052741de818825e9632ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5748b2cb4b46855f9a6052741de818825e9632ef"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "3912d85979029e79cbb39831c205bfe09d99ca92", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f93dacbdefbd440732896d176447c814d61458bf", "patch": "@@ -444,6 +444,7 @@ struct function\n \n   /* For integrate.c.  */\n   int inlinable;\n+  int no_debugging_symbols;\n   /* This is in fact an rtvec.  */\n   void *original_arg_vector;\n   tree original_decl_initial;"}, {"sha": "79fbce6d422d030a42f200d076f6add6aa9fb1a8", "filename": "gcc/integrate.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f93dacbdefbd440732896d176447c814d61458bf", "patch": "@@ -263,7 +263,7 @@ static tree *parmdecl_map;\n /* In save_for_inline, nonzero if past the parm-initialization insns.  */\n static int in_nonparm_insns;\n \f\n-/* Subroutine for `save_for_inline_nocopy'.  Performs initialization\n+/* Subroutine for `save_for_inline'.  Performs initialization\n    needed to save FNDECL's insns and info for future inline expansion.  */\n \n static rtvec\n@@ -399,7 +399,7 @@ copy_decl_for_inlining (decl, from_fn, to_fn)\n    functions at the end of compilation.  */\n \n void\n-save_for_inline_nocopy (fndecl)\n+save_for_inline (fndecl)\n      tree fndecl;\n {\n   rtx insn;\n@@ -454,6 +454,7 @@ save_for_inline_nocopy (fndecl)\n   cfun->inl_last_parm_insn = cfun->x_last_parm_insn;\n   cfun->original_arg_vector = argvec;\n   cfun->original_decl_initial = DECL_INITIAL (fndecl);\n+  cfun->no_debugging_symbols = (write_symbols == NO_DEBUG);\n   DECL_SAVED_INSNS (fndecl) = cfun;\n \n   /* Clean up.  */\n@@ -1213,8 +1214,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n    computed in expand_inline_function. This function may call itself for\n    insns containing sequences.\n \n-   Copying is done in two passes, first the insns and then their REG_NOTES,\n-   just like save_for_inline.\n+   Copying is done in two passes, first the insns and then their REG_NOTES.\n \n    If static_chain_value is non-zero, it represents the context-pointer\n    register for the function.  */\n@@ -1234,7 +1234,7 @@ copy_insn_list (insns, map, static_chain_value)\n #endif\n \n   /* Copy the insns one by one.  Do this in two passes, first the insns and\n-     then their REG_NOTES, just like save_for_inline.  */\n+     then their REG_NOTES.  */\n \n   /* This loop is very similar to the loop in copy_loop_body in unroll.c.  */\n \n@@ -1503,9 +1503,7 @@ copy_insn_list (insns, map, static_chain_value)\n \t     discarded because it is important to have only one of\n \t     each in the current function.\n \n-\t     NOTE_INSN_DELETED notes aren't useful (save_for_inline\n-\t     deleted these in the copy used for continuing compilation,\n-\t     not the copy used for inlining).\n+\t     NOTE_INSN_DELETED notes aren't useful.\n \n \t     NOTE_INSN_BASIC_BLOCK is discarded because the saved bb\n \t     pointer (which will soon be dangling) confuses flow's\n@@ -2767,6 +2765,7 @@ output_inline_function (fndecl)\n      tree fndecl;\n {\n   struct function *old_cfun = cfun;\n+  enum debug_info_type old_write_symbols = write_symbols;\n   struct function *f = DECL_SAVED_INSNS (fndecl);\n \n   cfun = f;\n@@ -2782,6 +2781,10 @@ output_inline_function (fndecl)\n   /* We're not deferring this any longer.  */\n   DECL_DEFER_OUTPUT (fndecl) = 0;\n \n+  /* If requested, suppress debugging information.  */\n+  if (f->no_debugging_symbols)\n+    write_symbols = NO_DEBUG;\n+\n   /* Compile this function all the way down to assembly code.  */\n   rest_of_compilation (fndecl);\n \n@@ -2791,4 +2794,5 @@ output_inline_function (fndecl)\n \n   cfun = old_cfun;\n   current_function_decl = old_cfun ? old_cfun->decl : 0;\n+  write_symbols = old_write_symbols;\n }"}, {"sha": "fb41c789965e5de4572726fd8a30a48990ac5265", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f93dacbdefbd440732896d176447c814d61458bf", "patch": "@@ -2778,17 +2778,15 @@ rest_of_compilation (decl)\n \n       if (DECL_DEFER_OUTPUT (decl))\n \t{\n-\t  /* If -Wreturn-type, we have to do a bit of compilation.\n-\t     However, if we just fall through we will call\n-\t     save_for_inline_copying() which results in excessive\n-\t     memory use.  Instead, we just want to call\n-\t     jump_optimize() to figure out whether or not we can fall\n-\t     off the end of the function; we do the minimum amount of\n-\t     work necessary to make that safe.  And, we set optimize\n-\t     to zero to keep jump_optimize from working too hard.  */\n+\t  /* If -Wreturn-type, we have to do a bit of compilation.  We just\n+\t     want to call jump_optimize to figure out whether or not we can\n+\t     fall off the end of the function; we do the minimum amount of\n+\t     work necessary to make that safe.  And, we set optimize to zero\n+\t     to keep jump_optimize from working too hard.  */\n \t  if (warn_return_type)\n \t    {\n \t      int saved_optimize = optimize;\n+\n \t      optimize = 0;\n \t      find_exception_handler_labels ();\n \t      jump_optimize (insns, !JUMP_CROSS_JUMP, !JUMP_NOOP_MOVES,\n@@ -2803,7 +2801,7 @@ rest_of_compilation (decl)\n \t    TREE_NOTHROW (current_function_decl) = 1;\n \n \t  timevar_push (TV_INTEGRATION);\n-\t  save_for_inline_nocopy (decl);\n+\t  save_for_inline (decl);\n \t  timevar_pop (TV_INTEGRATION);\n \t  DECL_SAVED_INSNS (decl)->inlinable = inlinable;\n \t  goto exit_rest_of_compilation;\n@@ -2862,7 +2860,6 @@ rest_of_compilation (decl)\n #endif\n \n   /* From now on, allocate rtl in current_obstack, not in saveable_obstack.\n-     Note that that may have been done above, in save_for_inline_copying.\n      The call to resume_temporary_allocation near the end of this function\n      goes back to the usual state of affairs.  This must be done after\n      we've built up any unwinders for exception handling, and done"}, {"sha": "2c5ad0aee7346bd1817f55c86895633c8f07bbf6", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93dacbdefbd440732896d176447c814d61458bf/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f93dacbdefbd440732896d176447c814d61458bf", "patch": "@@ -1386,11 +1386,10 @@ struct tree_type\n #define DECL_ORIGIN(NODE) \\\n   (DECL_ABSTRACT_ORIGIN (NODE) ? DECL_ABSTRACT_ORIGIN (NODE) : NODE)\n \n-/* Nonzero for any sort of ..._DECL node means this decl node represents\n-   an inline instance of some original (abstract) decl from an inline function;\n-   suppress any warnings about shadowing some other variable.\n-   FUNCTION_DECL nodes can also have their abstract origin set to themselves\n-   (see save_for_inline_copying).  */\n+/* Nonzero for any sort of ..._DECL node means this decl node represents an\n+   inline instance of some original (abstract) decl from an inline function;\n+   suppress any warnings about shadowing some other variable.  FUNCTION_DECL\n+   nodes can also have their abstract origin set to themselves. */\n #define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != (tree) 0 \\\n \t\t\t\t&& DECL_ABSTRACT_ORIGIN (NODE) != (NODE))\n \n@@ -2789,8 +2788,7 @@ extern int global_bindings_p\t\tPARAMS ((void));\n extern void insert_block\t\tPARAMS ((tree));\n \n /* In integrate.c */\n-extern void save_for_inline_nocopy\tPARAMS ((tree));\n-extern void save_for_inline_copying\tPARAMS ((tree));\n+extern void save_for_inline\t\tPARAMS ((tree));\n extern void set_decl_abstract_flags\tPARAMS ((tree, int));\n extern void output_inline_function\tPARAMS ((tree));\n extern void set_decl_origin_self\tPARAMS ((tree));"}]}