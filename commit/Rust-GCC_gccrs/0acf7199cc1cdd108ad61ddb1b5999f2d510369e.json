{"sha": "0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjZjcxOTljYzFjZGQxMDhhZDYxZGRiMWI1OTk5ZjJkNTEwMzY5ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-11T16:27:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-11T16:27:42Z"}, "message": "cp-tre.h (finish_function): Change prototype.\n\n\t* cp-tre.h (finish_function): Change prototype.\n\t* decl.c (end_cleanup_fn): Adjust caller.\n\t(finish_function): Take only one parameter.\n\t* decl2.c (finish_objects): Adjust caller.\n\t(finish_static_storage_duration_function): Likewise.\n\t* method.c (emit_thunk): Likewise.\n\t* parse.y: Likewise.\n\t* parse.c: Regenerated.\n\t* pt.c (instantiate_decl): Likewise.\n\t* rtti.c (synthesize_tinfo_fn): Likewise.\n\t* semantics.c (expand_body): Likewise.\n\n\t* cp-tree.h (copy_decl): New function.\n\t* class.c (finish_struct_1): Use it.\n\t* lex.c (copy_decl): Define it.\n\t* pt.c (tsubst_decl): Likewise.\n\t* tree.c (copy_template_template_parm): Likewise.\n\nFrom-SVN: r33079", "tree": {"sha": "d0f6a675e8ef0524ebfc20c64fe54718dbd9391f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f6a675e8ef0524ebfc20c64fe54718dbd9391f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/comments", "author": null, "committer": null, "parents": [{"sha": "2133335f6a8b4eeff6523a3d5ab1ac083cef24c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2133335f6a8b4eeff6523a3d5ab1ac083cef24c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2133335f6a8b4eeff6523a3d5ab1ac083cef24c6"}], "stats": {"total": 105, "additions": 61, "deletions": 44}, "files": [{"sha": "4ad77934cfd87f96e00349d80c82a798644c95a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -1,5 +1,23 @@\n 2000-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tre.h (finish_function): Change prototype.\n+\t* decl.c (end_cleanup_fn): Adjust caller.\n+\t(finish_function): Take only one parameter.\n+\t* decl2.c (finish_objects): Adjust caller.\n+\t(finish_static_storage_duration_function): Likewise.\n+\t* method.c (emit_thunk): Likewise.\n+\t* parse.y: Likewise.\n+\t* parse.c: Regenerated.\n+\t* pt.c (instantiate_decl): Likewise.\n+\t* rtti.c (synthesize_tinfo_fn): Likewise.\n+\t* semantics.c (expand_body): Likewise.\n+\n+\t* cp-tree.h (copy_decl): New function.\n+\t* class.c (finish_struct_1): Use it.\n+\t* lex.c (copy_decl): Define it.\n+\t* pt.c (tsubst_decl): Likewise.\n+\t* tree.c (copy_template_template_parm): Likewise.\n+\t\n \t* cp-tree.h (lang_type): Remove has_nonpublic_ctor and\n \thas_nonpublic_assign_ref.\n \t(TYPE_HAS_NONPUBLIC_CTOR): Don't declare."}, {"sha": "5262faa6a9b0321eebc76ce92bd6bb86337fbc51", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -4645,8 +4645,7 @@ finish_struct_1 (t)\n     {\n       tree binfo = get_binfo (DECL_FIELD_CONTEXT (vfield), t, 0);\n \n-      vfield = copy_node (vfield);\n-      copy_lang_decl (vfield);\n+      vfield = copy_decl (vfield);\n \n       DECL_FIELD_CONTEXT (vfield) = t;\n       DECL_FIELD_OFFSET (vfield)"}, {"sha": "b556236b1df2ed11c42eaa518389d1a3db1bd487", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -3833,7 +3833,7 @@ extern int start_function\t\t\tPARAMS ((tree, tree, tree, int));\n extern void expand_start_early_try_stmts\tPARAMS ((void));\n extern void store_parm_decls\t\t\tPARAMS ((void));\n extern void store_return_init\t\t\tPARAMS ((tree));\n-extern tree finish_function\t\t\tPARAMS ((int, int));\n+extern tree finish_function\t\t\tPARAMS ((int));\n extern tree start_method\t\t\tPARAMS ((tree, tree, tree));\n extern tree finish_method\t\t\tPARAMS ((tree));\n extern void hack_incomplete_structures\t\tPARAMS ((tree));\n@@ -4048,6 +4048,7 @@ extern int real_yylex\t\t\t\tPARAMS ((void));\n extern int is_rid\t\t\t\tPARAMS ((tree));\n extern tree build_lang_decl\t\t\tPARAMS ((enum tree_code, tree, tree));\n extern void retrofit_lang_decl\t\t\tPARAMS ((tree));\n+extern tree copy_decl                           PARAMS ((tree));\n extern void copy_lang_decl\t\t\tPARAMS ((tree));\n extern tree cp_make_lang_type\t\t\tPARAMS ((enum tree_code));\n extern tree make_aggr_type\t\t\tPARAMS ((enum tree_code));"}, {"sha": "85ab135eaa81c8d7d44b921dd3030e52257ec81b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -8283,7 +8283,7 @@ end_cleanup_fn ()\n {\n   do_poplevel ();\n \n-  expand_body (finish_function (lineno, 0));\n+  expand_body (finish_function (0));\n \n   pop_from_top_level ();\n }\n@@ -13939,8 +13939,7 @@ finish_destructor_body ()\n        after the class definition is complete.)  */\n \n tree\n-finish_function (lineno, flags)\n-     int lineno;\n+finish_function (flags)\n      int flags;\n {\n   register tree fndecl = current_function_decl;\n@@ -13951,6 +13950,7 @@ finish_function (lineno, flags)\n   int inclass_inline = (flags & 2) != 0;\n   int expand_p;\n   int nested;\n+  int current_line = lineno;\n \n   /* When we get some parse errors, we can end up without a\n      current_function_decl, so cope.  */\n@@ -14065,7 +14065,7 @@ finish_function (lineno, flags)\n \t  DECL_CONTEXT (no_return_label) = fndecl;\n \t  DECL_INITIAL (no_return_label) = error_mark_node;\n \t  DECL_SOURCE_FILE (no_return_label) = input_filename;\n-\t  DECL_SOURCE_LINE (no_return_label) = lineno;\n+\t  DECL_SOURCE_LINE (no_return_label) = current_line;\n \t  expand_goto (no_return_label);\n \t}\n \n@@ -14104,7 +14104,7 @@ finish_function (lineno, flags)\n       immediate_size_expand = 1;\n \n       /* Generate rtl for function exit.  */\n-      expand_function_end (input_filename, lineno, 1);\n+      expand_function_end (input_filename, current_line, 1);\n     }\n \n   /* We have to save this value here in case"}, {"sha": "07f2d545faf3261794aed33781f5c148e337ace8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -2861,7 +2861,7 @@ finish_objects (method_type, initp, body)\n \n   /* Finish up. */\n   finish_compound_stmt(/*has_no_scope=*/0, body);\n-  fn = finish_function (lineno, 0);\n+  fn = finish_function (0);\n   expand_body (fn);\n \n   /* When only doing semantic analysis, and no RTL generation, we\n@@ -3045,7 +3045,7 @@ finish_static_storage_duration_function (body)\n {\n   /* Close out the function.  */\n   finish_compound_stmt (/*has_no_scope=*/0, body);\n-  expand_body (finish_function (lineno, 0));\n+  expand_body (finish_function (0));\n }\n \n /* Return the information about the indicated PRIORITY level.  If no"}, {"sha": "b25693170cd769b47ce4c3311704caff0adf0070", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -5014,6 +5014,19 @@ copy_lang_decl (node)\n   DECL_LANG_SPECIFIC (node) = ld;\n }\n \n+/* Copy DECL, including any language-specific parts.  */\n+\n+tree\n+copy_decl (decl)\n+     tree decl;\n+{\n+  tree copy;\n+\n+  copy = copy_node (decl);\n+  copy_lang_decl (copy);\n+  return copy;\n+}\n+\n tree\n cp_make_lang_type (code)\n      enum tree_code code;"}, {"sha": "010469d6d025edb759810b01dea1c129a40f2def", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -2157,7 +2157,7 @@ emit_thunk (thunk_fndecl)\n     t = build_call (function, t);\n     finish_return_stmt (t);\n \n-    expand_body (finish_function (lineno, 0));\n+    expand_body (finish_function (0));\n \n     /* Don't let the backend defer this function.  */\n     if (DECL_DEFER_OUTPUT (thunk_fndecl))\n@@ -2405,7 +2405,7 @@ synthesize_method (fndecl)\n       finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n     }\n \n-  expand_body (finish_function (lineno, 0));\n+  expand_body (finish_function (0));\n \n   extract_interface_info ();\n   if (! context)"}, {"sha": "407025e3525ef72bb1e0c42c2702f704a5dee0b4", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -4908,11 +4908,11 @@ case 85:\n     break;}\n case 91:\n #line 735 \"parse.y\"\n-{ expand_body (finish_function (lineno, (int)yyvsp[-1].itype)); ;\n+{ expand_body (finish_function ((int)yyvsp[-1].itype)); ;\n     break;}\n case 92:\n #line 737 \"parse.y\"\n-{ expand_body (finish_function (lineno, (int)yyvsp[0].itype)); ;\n+{ expand_body (finish_function ((int)yyvsp[0].itype)); ;\n     break;}\n case 93:\n #line 739 \"parse.y\"\n@@ -6419,21 +6419,21 @@ case 458:\n case 459:\n #line 2104 \"parse.y\"\n {\n-\t\t  expand_body (finish_function (lineno, (int)yyvsp[-1].itype | 2));\n+\t\t  expand_body (finish_function ((int)yyvsp[-1].itype | 2));\n \t\t  process_next_inline (yyvsp[-3].pi);\n \t\t;\n     break;}\n case 460:\n #line 2109 \"parse.y\"\n { \n-\t\t  expand_body (finish_function (lineno, (int)yyvsp[0].itype | 2)); \n+\t\t  expand_body (finish_function ((int)yyvsp[0].itype | 2)); \n                   process_next_inline (yyvsp[-2].pi);\n \t\t;\n     break;}\n case 461:\n #line 2114 \"parse.y\"\n { \n-\t\t  finish_function (lineno, 2); \n+\t\t  finish_function (2); \n \t\t  process_next_inline (yyvsp[-2].pi); ;\n     break;}\n case 464:"}, {"sha": "65b90bb7ec91f54dfc180553be33d9061e141b0f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -732,9 +732,9 @@ eat_saved_input:\n \n fndef:\n \t  fn.def1 maybe_return_init ctor_initializer_opt compstmt_or_error\n-\t\t{ expand_body (finish_function (lineno, (int)$3)); }\n+\t\t{ expand_body (finish_function ((int)$3)); }\n \t| fn.def1 maybe_return_init function_try_block\n-\t\t{ expand_body (finish_function (lineno, (int)$3)); }\n+\t\t{ expand_body (finish_function ((int)$3)); }\n \t| fn.def1 maybe_return_init error\n \t\t{ }\n \t;\n@@ -2102,17 +2102,17 @@ fn.defpen:\n pending_inline:\n \t  fn.defpen maybe_return_init ctor_initializer_opt compstmt_or_error\n \t\t{\n-\t\t  expand_body (finish_function (lineno, (int)$3 | 2));\n+\t\t  expand_body (finish_function ((int)$3 | 2));\n \t\t  process_next_inline ($1);\n \t\t}\n \t| fn.defpen maybe_return_init function_try_block\n \t\t{ \n-\t\t  expand_body (finish_function (lineno, (int)$3 | 2)); \n+\t\t  expand_body (finish_function ((int)$3 | 2)); \n                   process_next_inline ($1);\n \t\t}\n \t| fn.defpen maybe_return_init error\n \t\t{ \n-\t\t  finish_function (lineno, 2); \n+\t\t  finish_function (2); \n \t\t  process_next_inline ($1); }\n \t;\n "}, {"sha": "6bb482ad13f88331be294941375b30db7b931f85", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -5440,8 +5440,7 @@ tsubst_decl (t, args, type, in_decl)\n \t   We also create a new function declaration, which is just\n \t   like the old one, but points to this new template, rather\n \t   than the old one.  */\n-\tr = copy_node (t);\n-\tcopy_lang_decl (r);\n+\tr = copy_decl (t);\n \tmy_friendly_assert (DECL_LANG_SPECIFIC (r) != 0, 0);\n \tTREE_CHAIN (r) = NULL_TREE;\n \n@@ -5681,9 +5680,7 @@ tsubst_decl (t, args, type, in_decl)\n            point, as they may not represent instantiations of this\n            template, and in any case are considered separate under the\n            discrete model.  Instead, see add_maybe_template.  */\n-\n-\tr = copy_node (t);\n-\tcopy_lang_decl (r);\n+\tr = copy_decl (t);\n \tDECL_USE_TEMPLATE (r) = 0;\n \tTREE_TYPE (r) = type;\n \n@@ -5819,8 +5816,7 @@ tsubst_decl (t, args, type, in_decl)\n \n     case FIELD_DECL:\n       {\n-\tr = copy_node (t);\n-\tcopy_lang_decl (r);\n+\tr = copy_decl (t);\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n \n@@ -5899,10 +5895,7 @@ tsubst_decl (t, args, type, in_decl)\n \t    break;\n \t  }\n \n-\t/* This declaration is going to have to be around for a while,\n-\t   so me make sure it is on a saveable obstack.  */\n-\tr = copy_node (t);\n-\t\n+\tr = copy_decl (t);\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (CP_TYPE_QUALS (type), r);\n \tDECL_CONTEXT (r) = ctx;\n@@ -5912,7 +5905,6 @@ tsubst_decl (t, args, type, in_decl)\n \tDECL_INITIAL (r) = NULL_TREE;\n \tDECL_RTL (r) = 0;\n \tDECL_SIZE (r) = DECL_SIZE_UNIT (r) = 0;\n-\tcopy_lang_decl (r);\n \n \t/* For __PRETTY_FUNCTION__ we have to adjust the initializer.  */\n \tif (DECL_PRETTY_FUNCTION_P (r))\n@@ -9585,7 +9577,7 @@ instantiate_decl (d, defer_ok)\n \t\t   /*complain=*/1, tmpl);\n \n       /* Finish the function.  */\n-      expand_body (finish_function (lineno, 0));\n+      expand_body (finish_function (0));\n     }\n \n   /* We're not deferring instantiation any more.  */"}, {"sha": "0ad29d553c7f4ef5610733e5c185316d5ed7482e", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -1274,7 +1274,7 @@ synthesize_tinfo_fn (fndecl)\n   finish_return_stmt (tmp);\n   /* Finish the function body.  */\n   finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n-  expand_body (finish_function (lineno, 0));\n+  expand_body (finish_function (0));\n }\n \n /* Return the runtime bit mask encoding the qualifiers of TYPE.  */"}, {"sha": "e7fcb63e9889ed3625885cbb9252c4f8119cf44a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -1957,11 +1957,6 @@ begin_class_definition (t)\n \t|| ! CLASSTYPE_INTERFACE_ONLY (t))\n       CLASSTYPE_VTABLE_NEEDS_WRITING (t) = 1;\n   }\n-#if 0\n-  tmp = TYPE_IDENTIFIER ($<ttype>0);\n-  if (tmp && IDENTIFIER_TEMPLATE (tmp))\n-    overload_template_name (tmp, 1);\n-#endif\n   reset_specialization();\n   \n   /* Make a declaration for this class in its own scope.  */\n@@ -2788,7 +2783,7 @@ expand_body (fn)\n   lineno = STMT_LINENO (DECL_SAVED_TREE (fn));\n \n   /* Generate code for the function.  */\n-  finish_function (lineno, 0);\n+  finish_function (0);\n \n   /* If possible, obliterate the body of the function so that it can\n      be garbage collected.  */"}, {"sha": "db3c418d520df528c39116338e5a8bebb37021bf", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acf7199cc1cdd108ad61ddb1b5999f2d510369e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "patch": "@@ -1181,8 +1181,7 @@ copy_template_template_parm (t)\n   tree t2;\n \n   t2 = make_aggr_type (TEMPLATE_TEMPLATE_PARM);\n-  template = copy_node (template);\n-  copy_lang_decl (template);\n+  template = copy_decl (template);\n \n   TREE_TYPE (template) = t2;\n   TYPE_NAME (t2) = template;"}]}