{"sha": "905df1fb200b340b2d25d6cfac44d125767c3cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1ZGYxZmIyMDBiMzQwYjJkMjVkNmNmYWM0NGQxMjU3NjdjM2NlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-07T10:34:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-07T10:34:47Z"}, "message": "locale_facets.tcc: Minor cosmetic changes and const-ifications of some variables.\n\n2003-10-07  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/locale_facets.tcc: Minor cosmetic changes\n\tand const-ifications of some variables.\n\n\t* include/bits/locale_facets.tcc\n\t(money_get::do_get(..., string_type&)): Simplify an if-else.\n\nFrom-SVN: r72190", "tree": {"sha": "14abaf7df0f7adaedb0d454598069374c5e1c197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14abaf7df0f7adaedb0d454598069374c5e1c197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905df1fb200b340b2d25d6cfac44d125767c3cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905df1fb200b340b2d25d6cfac44d125767c3cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905df1fb200b340b2d25d6cfac44d125767c3cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905df1fb200b340b2d25d6cfac44d125767c3cee/comments", "author": null, "committer": null, "parents": [{"sha": "7f27395d16254459d87430cfc00a02e2b276c396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f27395d16254459d87430cfc00a02e2b276c396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f27395d16254459d87430cfc00a02e2b276c396"}], "stats": {"total": 129, "additions": 63, "deletions": 66}, "files": [{"sha": "2b3110cfa5ed1d5350ab2a920ea2323dff12d01d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905df1fb200b340b2d25d6cfac44d125767c3cee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905df1fb200b340b2d25d6cfac44d125767c3cee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=905df1fb200b340b2d25d6cfac44d125767c3cee", "patch": "@@ -1,3 +1,11 @@\n+2003-10-07  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/locale_facets.tcc: Minor cosmetic changes\n+\tand const-ifications of some variables.\n+\n+\t* include/bits/locale_facets.tcc\n+\t(money_get::do_get(..., string_type&)): Simplify an if-else.\n+\n 2003-10-06  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/11740"}, {"sha": "8d9e5300723c26d2df73acc15f9ea1e203323d43", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 55, "deletions": 66, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905df1fb200b340b2d25d6cfac44d125767c3cee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905df1fb200b340b2d25d6cfac44d125767c3cee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=905df1fb200b340b2d25d6cfac44d125767c3cee", "patch": "@@ -78,7 +78,7 @@ namespace std\n     inline bool\n     has_facet(const locale& __loc) throw()\n     {\n-      size_t __i = _Facet::id._M_id();\n+      const size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n       return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n     }\n@@ -87,7 +87,7 @@ namespace std\n     inline const _Facet&\n     use_facet(const locale& __loc)\n     {\n-      size_t __i = _Facet::id._M_id();\n+      const size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n       if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n         __throw_bad_cast();\n@@ -109,7 +109,7 @@ namespace std\n       const __numpunct_cache<_CharT>*\n       operator() (const locale& __loc) const\n       {\n-\tsize_t __i = numpunct<_CharT>::id._M_id();\n+\tconst size_t __i = numpunct<_CharT>::id._M_id();\n \tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n \tif (!__caches[__i])\n \t  {\n@@ -191,7 +191,7 @@ namespace std\n \t      __c = *(++__beg);\n \t    }\n           else if (__traits_type::eq(__c, __lc->_M_thousands_sep) \n-\t\t   &&  __lc->_M_use_grouping && !__found_dec)\n+\t\t   && __lc->_M_use_grouping && !__found_dec)\n \t    {\n               // NB: Thousands separator at the beginning of a string\n               // is a no-no, as is two consecutive thousands separators.\n@@ -631,9 +631,9 @@ namespace std\n     {\n       // Prepare for hex formatted input.\n       typedef ios_base::fmtflags        fmtflags;\n-      fmtflags __fmt = __io.flags();\n-      fmtflags __fmtmask = ~(ios_base::showpos | ios_base::basefield\n-                             | ios_base::uppercase | ios_base::internal);\n+      const fmtflags __fmt = __io.flags();\n+      const fmtflags __fmtmask = ~(ios_base::showpos | ios_base::basefield\n+\t\t\t\t   | ios_base::uppercase | ios_base::internal);\n       __io.flags(__fmt & __fmtmask | (ios_base::hex | ios_base::showbase));\n \n       string __xtrc;\n@@ -755,8 +755,8 @@ namespace std\n \t{\n \t  // Hex.\n \t  const bool __uppercase = __flags & ios_base::uppercase;\n-\t  int __case_offset = __uppercase ? __num_base::_S_oudigits \n-\t                                  : __num_base::_S_odigits;\n+\t  const int __case_offset = __uppercase ? __num_base::_S_oudigits \n+\t                                        : __num_base::_S_odigits;\n \t  do \n \t    {\n \t      *__buf-- = __lit[(__v & 0xf) + __case_offset];\n@@ -846,7 +846,7 @@ namespace std\n \t\n \t// Pad.\n \t_CharT* __cs3;\n-\tstreamsize __w = __io.width();\n+\tconst streamsize __w = __io.width();\n \tif (__w > static_cast<streamsize>(__len))\n \t  {\n \t    __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n@@ -998,7 +998,7 @@ namespace std\n \n       // Pad.\n       _CharT* __ws3;\n-      streamsize __w = __io.width();\n+      const streamsize __w = __io.width();\n       if (__w > static_cast<streamsize>(__len))\n \t{\n \t  __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n@@ -1017,7 +1017,7 @@ namespace std\n     num_put<_CharT, _OutIter>::\n     do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const\n     {\n-      ios_base::fmtflags __flags = __io.flags();\n+      const ios_base::fmtflags __flags = __io.flags();\n       if ((__flags & ios_base::boolalpha) == 0)\n         {\n           unsigned long __uv = __v;\n@@ -1035,7 +1035,7 @@ namespace std\n \t  int __len = char_traits<_CharT>::length(__name);\n \n \t  _CharT* __cs;\n-\t  streamsize __w = __io.width();\n+\t  const streamsize __w = __io.width();\n \t  if (__w > static_cast<streamsize>(__len))\n \t    {\n \t      __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n@@ -1096,9 +1096,9 @@ namespace std\n     do_put(iter_type __s, ios_base& __io, char_type __fill,\n            const void* __v) const\n     {\n-      ios_base::fmtflags __flags = __io.flags();\n-      ios_base::fmtflags __fmt = ~(ios_base::showpos | ios_base::basefield\n-\t\t\t\t   | ios_base::uppercase | ios_base::internal);\n+      const ios_base::fmtflags __flags = __io.flags();\n+      const ios_base::fmtflags __fmt = ~(ios_base::showpos | ios_base::basefield\n+\t\t\t\t\t | ios_base::uppercase | ios_base::internal);\n       __io.flags(__flags & __fmt | (ios_base::hex | ios_base::showbase));\n       try \n \t{\n@@ -1180,10 +1180,9 @@ namespace std\n       string_type __tmp_units;\n \n       char_type __c = *__beg;\n-      char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n       for (int __i = 0; __beg != __end && __i < 4 && __testvalid; ++__i)\n \t{\n-\t  part __which = static_cast<part>(__p.field[__i]);\n+\t  const part __which = static_cast<part>(__p.field[__i]);\n \t  switch (__which)\n \t\t{\n \t\tcase money_base::symbol:\n@@ -1198,8 +1197,8 @@ namespace std\n \t\t      // other characters are needed to complete the\n \t\t      // format.\n \t\t      const string_type __symbol = __intl ? __mpt.curr_symbol()\n-\t\t\t\t\t\t    \t : __mpf.curr_symbol();\n-\t\t      size_type __len = __symbol.size();\n+\t\t\t                                  : __mpf.curr_symbol();\n+\t\t      const size_type __len = __symbol.size();\n \t\t      size_type __j = 0;\n \t\t      while (__beg != __end \n \t\t\t     && __j < __len && __symbol[__j] == __c)\n@@ -1214,24 +1213,8 @@ namespace std\n \t\t    }\n \t\t  break;\n \t\tcase money_base::sign:\t\t    \n-\t\t  // Sign might not exist, or be more than one character long. \n-\t\t  if (__pos_sign.size() && __neg_sign.size())\n-\t\t  {\n-\t\t    // Sign is mandatory.\n-\t\t    if (__c == __pos_sign[0])\n-\t\t      {\n-\t\t\t__sign = __pos_sign;\n-\t\t\t__c = *(++__beg);\n-\t\t      }\n-\t\t    else if (__c == __neg_sign[0])\n-\t\t      {\n-\t\t\t__sign = __neg_sign;\n-\t\t\t__c = *(++__beg);\n-\t\t      }\n-\t\t    else\n-\t\t      __testvalid = false;\n-\t\t  }\n-\t\t  else if (__pos_sign.size() && __c == __pos_sign[0])\n+\t\t  // Sign might not exist, or be more than one character long.\n+\t\t  if (__pos_sign.size() && __c == __pos_sign[0])\n \t\t    {\n \t\t      __sign = __pos_sign;\n \t\t      __c = *(++__beg);\n@@ -1241,6 +1224,11 @@ namespace std\n \t\t      __sign = __neg_sign;\n \t\t      __c = *(++__beg);\n \t\t    }\n+\t\t  else if (__pos_sign.size() && __neg_sign.size())\n+\t\t    {\n+\t\t      // Sign is mandatory.\n+\t\t      __testvalid = false;\n+\t\t    }\n \t\t  break;\n \t\tcase money_base::value:\n \t\t  // Extract digits, remove and stash away the\n@@ -1290,9 +1278,10 @@ namespace std\n \t}\n \n       // Need to get the rest of the sign characters, if they exist.\n+      const char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n       if (__sign.size() > 1)\n \t{\n-\t  size_type __len = __sign.size();\n+\t  const size_type __len = __sign.size();\n \t  size_type __i = 1;\n \t  for (; __c != __eof && __i < __len; ++__i)\n \t    while (__beg != __end && __c != __sign[__i])\n@@ -1477,15 +1466,15 @@ namespace std\n \t    }\n \n \t  // Calculate length of resulting string.\n-\t  ios_base::fmtflags __f = __io.flags() & ios_base::adjustfield;\n+\t  const ios_base::fmtflags __f = __io.flags() & ios_base::adjustfield;\n \t  size_type __len = __value.size() + __sign.size();\n \t  __len += (__io.flags() & ios_base::showbase) ? __symbol.size() : 0;\n-\t  bool __testipad = __f == ios_base::internal && __len < __width;\n+\t  const bool __testipad = __f == ios_base::internal && __len < __width;\n \n \t  // Fit formatted digits into the required pattern.\n \t  for (int __i = 0; __i < 4; ++__i)\n \t    {\n-\t      part __which = static_cast<part>(__p.field[__i]);\n+\t      const part __which = static_cast<part>(__p.field[__i]);\n \t      switch (__which)\n \t\t{\n \t\tcase money_base::symbol:\n@@ -1558,10 +1547,10 @@ namespace std\n \t\t\t  ios_base::iostate& __err, tm* __tm, \n \t\t\t  const _CharT* __format) const\n     {  \n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n-      size_t __len = char_traits<_CharT>::length(__format);\n+      const size_t __len = char_traits<_CharT>::length(__format);\n \n       for (size_t __i = 0; __beg != __end && __i < __len && !__err; ++__i)\n \t{\n@@ -1729,23 +1718,23 @@ namespace std\n \t\t\t  _M_extract_num(__beg, __end, __tmp, 0, 59, 2,\n \t\t\t\t\t  __ctype, __err);\n \t\t\t}\t    \n-\t\t\t  }\n-\t\t      else\n-\t\t\t__err |= ios_base::failbit;\n-\t\t      break;\n-\t\t    default:\n-\t\t      // Not recognized.\n-\t\t      __err |= ios_base::failbit;\n \t\t    }\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  // Verify format and input match, extract and discard.\n-\t\t  if (__c == __ctype.narrow(*__beg, 0))\n-\t\t    ++__beg;\n \t\t  else\n \t\t    __err |= ios_base::failbit;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  // Not recognized.\n+\t\t  __err |= ios_base::failbit;\n \t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      // Verify format and input match, extract and discard.\n+\t      if (__c == __ctype.narrow(*__beg, 0))\n+\t\t++__beg;\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n \t}\n     }\n \n@@ -1770,7 +1759,7 @@ namespace std\n \t}\n       if (__i == __len)\n \t{\n-\t  int __value = atoi(__digits.c_str());\n+\t  const int __value = std::atoi(__digits.c_str());\n \t  if (__min <= __value && __value <= __max)\n \t    __member = __value;\n \t  else\n@@ -1855,7 +1844,7 @@ namespace std\n     {\n       _CharT __wcs[3];\n       const char* __cs = \"%X\";\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n       __ctype.widen(__cs, __cs + 3, __wcs);\n       _M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);\n@@ -1872,7 +1861,7 @@ namespace std\n     {\n       _CharT __wcs[3];\n       const char* __cs = \"%x\";\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n       __ctype.widen(__cs, __cs + 3, __wcs);\n       _M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);\n@@ -1888,7 +1877,7 @@ namespace std\n \t\t   ios_base::iostate& __err, tm* __tm) const\n     {\n       typedef char_traits<_CharT> \t\t__traits_type;\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const char_type*  __days[7];\n       __tp._M_days_abbreviated(__days);\n@@ -1931,7 +1920,7 @@ namespace std\n                      ios_base& __io, ios_base::iostate& __err, tm* __tm) const\n     {\n       typedef char_traits<_CharT> \t\t__traits_type;\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const char_type*  __months[12];\n       __tp._M_months_abbreviated(__months);\n@@ -1974,7 +1963,7 @@ namespace std\n     do_get_year(iter_type __beg, iter_type __end, ios_base& __io, \n \t\tios_base::iostate& __err, tm* __tm) const\n     {\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n \n       char_type __c = *__beg;\n@@ -2010,7 +1999,7 @@ namespace std\n     put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm, \n \tconst _CharT* __beg, const _CharT* __end) const\n     {\n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n       while (__beg != __end)\n \t{\n@@ -2047,7 +2036,7 @@ namespace std\n     do_put(iter_type __s, ios_base& __io, char_type, const tm* __tm, \n \t   char __format, char __mod) const\n     { \n-      locale __loc = __io.getloc();\n+      const locale __loc = __io.getloc();\n       ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n       __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);\n \n@@ -2115,7 +2104,7 @@ namespace std\n       // to strcoll.\n       for (;;)\n \t{\n-\t  int __res = _M_compare(__p, __q);\n+\t  const int __res = _M_compare(__p, __q);\n \t  if (__res)\n \t    return __res;\n "}]}