{"sha": "93e2aa6d4599866c8be24131914512dfd8c31de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlMmFhNmQ0NTk5ODY2YzhiZTI0MTMxOTE0NTEyZGZkOGMzMWRlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-06-03T23:13:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-06-03T23:13:49Z"}, "message": "lto.c (iterative_hash_canonical_type, [...]): only hash main variants of types\n\n\t* lto.c (iterative_hash_canonical_type,\n\tgimple_register_canonical_type): only hash main variants of types\n\t* tree.c (verify_type_variant): Verify that type and variant is\n\tcompatible.\n\t(gimple_canonical_types_compatible_p): Look for main variants.\n\nFrom-SVN: r224107", "tree": {"sha": "de7a5c9a9e666510f95a3f68ca8db557f286982f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7a5c9a9e666510f95a3f68ca8db557f286982f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e2aa6d4599866c8be24131914512dfd8c31de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e2aa6d4599866c8be24131914512dfd8c31de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e2aa6d4599866c8be24131914512dfd8c31de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e2aa6d4599866c8be24131914512dfd8c31de2/comments", "author": null, "committer": null, "parents": [{"sha": "1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "948abe5164348cc73270b7e15b4f6238b188fecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93e2aa6d4599866c8be24131914512dfd8c31de2", "patch": "@@ -1,3 +1,9 @@\n+2015-06-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (verify_type_variant): Verify that type and variant is\n+\tcompatible.\n+\t(gimple_canonical_types_compatible_p): Look for main variants.\n+\n 2015-06-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config.gcc (powerpc*-*-*): Add support for a new configure"}, {"sha": "db0214beb310b083f4f0e4bc8726f3098e94bf16", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=93e2aa6d4599866c8be24131914512dfd8c31de2", "patch": "@@ -1,3 +1,8 @@\n+2015-06-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (iterative_hash_canonical_type,\n+\tgimple_register_canonical_type): only hash main variants of types\n+\n 2015-05-27  Martin Liska  <mliska@suse.cz>\n \n \t* lto-partition.c (new_partition): Reset number of symbols."}, {"sha": "75774a1060024585db71c58bb1ad6199dcd42a4c", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=93e2aa6d4599866c8be24131914512dfd8c31de2", "patch": "@@ -413,6 +413,9 @@ static void\n iterative_hash_canonical_type (tree type, inchash::hash &hstate)\n {\n   hashval_t v;\n+\n+  /* All type variants have same TYPE_CANONICAL.  */\n+  type = TYPE_MAIN_VARIANT (type);\n   /* An already processed type.  */\n   if (TYPE_CANONICAL (type))\n     {\n@@ -498,7 +501,15 @@ gimple_register_canonical_type (tree t)\n   if (TYPE_CANONICAL (t) || !type_with_alias_set_p (t))\n     return;\n \n-  gimple_register_canonical_type_1 (t, hash_canonical_type (t));\n+  /* Canonical types are same among all complete variants.  */\n+  if (TYPE_CANONICAL (TYPE_MAIN_VARIANT (t)))\n+    TYPE_CANONICAL (t) = TYPE_CANONICAL (TYPE_MAIN_VARIANT (t));\n+  else\n+    {\n+      gimple_register_canonical_type_1 (TYPE_MAIN_VARIANT (t),\n+\t\t\t\t\thash_canonical_type (TYPE_MAIN_VARIANT (t)));\n+      TYPE_CANONICAL (t) = TYPE_CANONICAL (TYPE_MAIN_VARIANT (t));\n+    }\n }\n \n /* Re-compute TYPE_CANONICAL for NODE and related types.  */"}, {"sha": "b0aeb74f64d1ae5c9be097eb59a99423a7173be3", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e2aa6d4599866c8be24131914512dfd8c31de2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=93e2aa6d4599866c8be24131914512dfd8c31de2", "patch": "@@ -12855,6 +12855,17 @@ verify_type_variant (const_tree t, tree tv)\n       debug_tree (TREE_TYPE (t));\n       return false;\n     }\n+  if (type_with_alias_set_p (t)\n+      && !gimple_canonical_types_compatible_p (t, tv, false))\n+    {\n+      error (\"type is not compatible with its vairant\");\n+      debug_tree (tv);\n+      error (\"type variant's TREE_TYPE\");\n+      debug_tree (TREE_TYPE (tv));\n+      error (\"type's TREE_TYPE\");\n+      debug_tree (TREE_TYPE (t));\n+      return false;\n+    }\n   return true;\n #undef verify_variant_match\n }\n@@ -12879,7 +12890,13 @@ bool\n gimple_canonical_types_compatible_p (const_tree t1, const_tree t2,\n \t\t\t\t     bool trust_type_canonical)\n {\n-  /* Before starting to set up the SCC machinery handle simple cases.  */\n+  /* Type variants should be same as the main variant.  When not doing sanity\n+     checking to verify this fact, go to main variants and save some work.  */\n+  if (trust_type_canonical)\n+    {\n+      t1 = TYPE_MAIN_VARIANT (t1);\n+      t2 = TYPE_MAIN_VARIANT (t2);\n+    }\n \n   /* Check first for the obvious case of pointer identity.  */\n   if (t1 == t2)"}]}