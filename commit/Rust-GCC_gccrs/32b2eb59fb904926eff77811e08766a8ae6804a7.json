{"sha": "32b2eb59fb904926eff77811e08766a8ae6804a7", "node_id": "C_kwDOANBUbNoAKDMyYjJlYjU5ZmI5MDQ5MjZlZmY3NzgxMWUwODc2NmE4YWU2ODA0YTc", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-19T17:08:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-29T17:48:20Z"}, "message": "c++: reduce temporaries in ?:\n\nWhen the sides of ?: are class prvalues, we wrap the COND_EXPR in a\nTARGET_EXPR so that both sides will initialize the same temporary.  But in\nthis case we were stripping the outer TARGET_EXPR and conditionally creating\ndifferent temporaries, unnecessarily using extra stack.  The\nrecently added TARGET_EXPR_NO_ELIDE flag avoids this.\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_conditional_expr): Set TARGET_EXPR_NO_ELIDE on the\n\touter TARGET_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/cond-temp1.C: New test.", "tree": {"sha": "b5d170cf847014cde68feb6c197515e3d9fdec99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d170cf847014cde68feb6c197515e3d9fdec99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b2eb59fb904926eff77811e08766a8ae6804a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b2eb59fb904926eff77811e08766a8ae6804a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b2eb59fb904926eff77811e08766a8ae6804a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b2eb59fb904926eff77811e08766a8ae6804a7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9034827e8f06f10767064e9fc7443b94e08184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9034827e8f06f10767064e9fc7443b94e08184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9034827e8f06f10767064e9fc7443b94e08184"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "9fad3cb950b59693efead3cba6a20b08cc75804f", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b2eb59fb904926eff77811e08766a8ae6804a7/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b2eb59fb904926eff77811e08766a8ae6804a7/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=32b2eb59fb904926eff77811e08766a8ae6804a7", "patch": "@@ -6009,7 +6009,13 @@ build_conditional_expr (const op_location_t &loc,\n \t but now we sometimes wrap them in NOP_EXPRs so the test would\n \t fail.  */\n       if (CLASS_TYPE_P (TREE_TYPE (result)))\n-\tresult = get_target_expr (result, complain);\n+\t{\n+\t  result = get_target_expr (result, complain);\n+\t  /* Tell gimplify_modify_expr_rhs not to strip this in\n+\t     assignment context: we want both arms to initialize\n+\t     the same temporary.  */\n+\t  TARGET_EXPR_NO_ELIDE (result) = true;\n+\t}\n       /* If this expression is an rvalue, but might be mistaken for an\n \t lvalue, we must add a NON_LVALUE_EXPR.  */\n       result = rvalue (result);"}, {"sha": "b15635853f2fd55240b1ad8c71b7456f6ba962bc", "filename": "gcc/testsuite/g++.dg/tree-ssa/cond-temp1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b2eb59fb904926eff77811e08766a8ae6804a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcond-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b2eb59fb904926eff77811e08766a8ae6804a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcond-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcond-temp1.C?ref=32b2eb59fb904926eff77811e08766a8ae6804a7", "patch": "@@ -0,0 +1,16 @@\n+// Test that the ?: only creates one temporary.\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump-times \"struct A\" 2 \"gimple\" } }\n+\n+struct A\n+{\n+  int i;\n+  A(int);\n+};\n+\n+bool b;\n+int main()\n+{\n+  A a = 1;\n+  a = b ? A(2) : A(3);\n+}"}]}