{"sha": "6c025f46f045d05afb13d9db52bd0913c1e21b4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwMjVmNDZmMDQ1ZDA1YWZiMTNkOWRiNTJiZDA5MTNjMWUyMWI0YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-06T18:13:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-06T18:13:04Z"}, "message": "libgo: Remove more os.Error cases.\n\nFrom Rainer Orth.\n\nFrom-SVN: r182060", "tree": {"sha": "65b426591444c0c60555e67728587ba39c1c03d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b426591444c0c60555e67728587ba39c1c03d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c025f46f045d05afb13d9db52bd0913c1e21b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c025f46f045d05afb13d9db52bd0913c1e21b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c025f46f045d05afb13d9db52bd0913c1e21b4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c025f46f045d05afb13d9db52bd0913c1e21b4a/comments", "author": null, "committer": null, "parents": [{"sha": "0173c67b308f2662712a187e17663b09e3313be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0173c67b308f2662712a187e17663b09e3313be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0173c67b308f2662712a187e17663b09e3313be9"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "b9544e96c754d8efc0f2e1bc25c0a4bf98bf6381", "filename": "libgo/go/net/fd_select.go", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fnet%2Ffd_select.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fnet%2Ffd_select.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd_select.go?ref=6c025f46f045d05afb13d9db52bd0913c1e21b4a", "patch": "@@ -13,13 +13,13 @@ import (\n \n type pollster struct {\n \treadFds, writeFds, repeatFds *syscall.FdSet\n-\tmaxFd int\n-\treadyReadFds, readyWriteFds *syscall.FdSet\n-\tnReady int\n-\tlastFd int\n+\tmaxFd                        int\n+\treadyReadFds, readyWriteFds  *syscall.FdSet\n+\tnReady                       int\n+\tlastFd                       int\n }\n \n-func newpollster() (p *pollster, err os.Error) {\n+func newpollster() (p *pollster, err error) {\n \tp = new(pollster)\n \tp.readFds = new(syscall.FdSet)\n \tp.writeFds = new(syscall.FdSet)\n@@ -32,7 +32,7 @@ func newpollster() (p *pollster, err os.Error) {\n \treturn p, nil\n }\n \n-func (p *pollster) AddFD(fd int, mode int, repeat bool) (bool, os.Error) {\n+func (p *pollster) AddFD(fd int, mode int, repeat bool) (bool, error) {\n \t// pollServer is locked.\n \n \tif mode == 'r' {\n@@ -75,7 +75,7 @@ func (p *pollster) DelFD(fd int, mode int) {\n \t// We don't worry about maxFd here.\n }\n \n-func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err os.Error) {\n+func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err error) {\n \tif p.nReady == 0 {\n \t\tvar timeout *syscall.Timeval\n \t\tvar tv syscall.Timeval\n@@ -94,7 +94,7 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err os.E\n \t\t\ttmpWriteFds = *p.writeFds\n \n \t\t\ts.Unlock()\n-\t\t\tn, e = syscall.Select(p.maxFd + 1, &tmpReadFds, &tmpWriteFds, nil, timeout)\n+\t\t\tn, e = syscall.Select(p.maxFd+1, &tmpReadFds, &tmpWriteFds, nil, timeout)\n \t\t\ts.Lock()\n \n \t\t\tif e != syscall.EINTR {\n@@ -115,7 +115,7 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err os.E\n \t}\n \n \tflag := false\n-\tfor i := p.lastFd; i < p.maxFd + 1; i++ {\n+\tfor i := p.lastFd; i < p.maxFd+1; i++ {\n \t\tif syscall.FDIsSet(i, p.readyReadFds) {\n \t\t\tflag = true\n \t\t\tmode = 'r'\n@@ -139,6 +139,6 @@ func (p *pollster) WaitFD(s *pollServer, nsec int64) (fd int, mode int, err os.E\n \treturn -1, 0, nil\n }\n \n-func (p *pollster) Close() os.Error {\n+func (p *pollster) Close() error {\n \treturn nil\n }"}, {"sha": "0e68647acdcb69564c9c83147a600215766b37e3", "filename": "libgo/go/os/sys_uname.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fos%2Fsys_uname.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fos%2Fsys_uname.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fsys_uname.go?ref=6c025f46f045d05afb13d9db52bd0913c1e21b4a", "patch": "@@ -8,7 +8,7 @@ package os\n \n import \"syscall\"\n \n-func Hostname() (name string, err Error) {\n+func Hostname() (name string, err error) {\n \tvar u syscall.Utsname\n \tif errno := syscall.Uname(&u); errno != 0 {\n \t\treturn \"\", NewSyscallError(\"uname\", errno)"}, {"sha": "fb98ad780604f1b3ed4ecde3cee63f250de61579", "filename": "libgo/go/syslog/syslog_libc.go", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c025f46f045d05afb13d9db52bd0913c1e21b4a/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyslog%2Fsyslog_libc.go?ref=6c025f46f045d05afb13d9db52bd0913c1e21b4a", "patch": "@@ -10,28 +10,27 @@ package syslog\n \n import (\n \t\"fmt\"\n-\t\"os\"\n \t\"syscall\"\n )\n \n-func unixSyslog() (conn serverConn, err os.Error) {\n+func unixSyslog() (conn serverConn, err error) {\n \treturn libcConn(0), nil\n }\n \n type libcConn int\n \n func syslog_c(int, *byte)\n \n-func (libcConn) writeBytes(p Priority, prefix string, b []byte) (int, os.Error) {\n+func (libcConn) writeBytes(p Priority, prefix string, b []byte) (int, error) {\n \tsyslog_c(int(p), syscall.StringBytePtr(fmt.Sprintf(\"%s: %s\", prefix, b)))\n \treturn len(b), nil\n }\n \n-func (libcConn) writeString(p Priority, prefix string, s string) (int, os.Error) {\n+func (libcConn) writeString(p Priority, prefix string, s string) (int, error) {\n \tsyslog_c(int(p), syscall.StringBytePtr(fmt.Sprintf(\"%s: %s\", prefix, s)))\n \treturn len(s), nil\n }\n \n-func (libcConn) close() os.Error {\n+func (libcConn) close() error {\n \treturn nil\n }"}]}