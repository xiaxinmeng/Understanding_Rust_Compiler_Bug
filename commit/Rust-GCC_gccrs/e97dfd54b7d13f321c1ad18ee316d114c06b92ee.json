{"sha": "e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ZGZkNTRiN2QxM2YzMjFjMWFkMThlZTMxNmQxMTRjMDZiOTJlZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:15:17Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:15:17Z"}, "message": "[Patch 2/17] Implement TARGET_C_EXCESS_PRECISION for i386\n\ngcc/\n\t* config/i386/i386.c (ix86_excess_precision): New.\n\t(TARGET_C_EXCESS_PRECISION): Define.\n\nFrom-SVN: r242772", "tree": {"sha": "3dc62ee556ac7d4a97e9e8030730f97947a26971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc62ee556ac7d4a97e9e8030730f97947a26971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97dfd54b7d13f321c1ad18ee316d114c06b92ee/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42e02b207fdf71f09020eef2bba3e25f5f57a946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e02b207fdf71f09020eef2bba3e25f5f57a946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e02b207fdf71f09020eef2bba3e25f5f57a946"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "7b6e1b6433d0ce706ba32c7a1fa5d0bd372eddc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97dfd54b7d13f321c1ad18ee316d114c06b92ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97dfd54b7d13f321c1ad18ee316d114c06b92ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/i386/i386.c (ix86_excess_precision): New.\n+\t(TARGET_C_EXCESS_PRECISION): Define.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* target.def (excess_precision): New hook."}, {"sha": "3ccee085cdbfe8d28c1c2bd768cd1d40e4386815", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97dfd54b7d13f321c1ad18ee316d114c06b92ee/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97dfd54b7d13f321c1ad18ee316d114c06b92ee/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e97dfd54b7d13f321c1ad18ee316d114c06b92ee", "patch": "@@ -51002,6 +51002,44 @@ ix86_expand_divmod_libfunc (rtx libfunc, machine_mode mode,\n   *rem_p = rem;\n }\n \n+/* Set the value of FLT_EVAL_METHOD in float.h.  When using only the\n+   FPU, assume that the fpcw is set to extended precision; when using\n+   only SSE, rounding is correct; when using both SSE and the FPU,\n+   the rounding precision is indeterminate, since either may be chosen\n+   apparently at random.  */\n+\n+static enum flt_eval_method\n+ix86_excess_precision (enum excess_precision_type type)\n+{\n+  switch (type)\n+    {\n+      case EXCESS_PRECISION_TYPE_FAST:\n+\t/* The fastest type to promote to will always be the native type,\n+\t   whether that occurs with implicit excess precision or\n+\t   otherwise.  */\n+\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+      case EXCESS_PRECISION_TYPE_STANDARD:\n+      case EXCESS_PRECISION_TYPE_IMPLICIT:\n+\t/* Otherwise, the excess precision we want when we are\n+\t   in a standards compliant mode, and the implicit precision we\n+\t   provide can be identical.  */\n+\tif (!TARGET_80387)\n+\t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+\telse if (TARGET_MIX_SSE_I387)\n+\t  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+\telse if (!TARGET_SSE_MATH)\n+\t  return FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE;\n+\telse if (TARGET_SSE2)\n+\t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+\telse\n+\t  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+}\n+\n /* Target-specific selftests.  */\n \n #if CHECKING_P\n@@ -51233,6 +51271,8 @@ ix86_run_selftests (void)\n #undef TARGET_MD_ASM_ADJUST\n #define TARGET_MD_ASM_ADJUST ix86_md_asm_adjust\n \n+#undef TARGET_C_EXCESS_PRECISION\n+#define TARGET_C_EXCESS_PRECISION ix86_excess_precision\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef TARGET_SETUP_INCOMING_VARARGS"}]}