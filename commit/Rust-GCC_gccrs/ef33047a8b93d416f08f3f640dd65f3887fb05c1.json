{"sha": "ef33047a8b93d416f08f3f640dd65f3887fb05c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzMzA0N2E4YjkzZDQxNmYwOGYzZjY0MGRkNjVmMzg4N2ZiMDVjMQ==", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-12-09T21:29:58Z"}, "committer": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-12-09T22:09:20Z"}, "message": "aarch64: Add +pauth to -march\n\nNew +pauth (Pointer Authentication from Armv8.3-A) feature option for\n-march command line option.\n\nPlease note that majority of PAUTH instructions are implemented behind HINT\ninstruction. PAUTH stays an Armv8.3-A feature but now can be assigned to other\narchitectures or CPUs.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-option-extensions.def\n\t(AARCH64_OPT_EXTENSION): New +pauth option in -march for AArch64.\n\t* config/aarch64/aarch64.h (AARCH64_FL_PAUTH): New pauth extension bitmask.\n\t(AARCH64_ISA_PUATH): New ISA bitmask for PAUTH.\n\t(AARCH64_FL_FOR_ARCH8_3): Add PAUTH to Armv8.3-A.\n\t(TARGET_PAUTH): New target mask to isolate PAUTH instructions.\n\t* config/aarch64/aarch64.md (do_return): Condition set to TARGET_PAUTH.\n\t* doc/invoke.texi: Update docs for +flagm and +pauth.", "tree": {"sha": "cacdfca027fae061923913482341d8220bf36cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cacdfca027fae061923913482341d8220bf36cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef33047a8b93d416f08f3f640dd65f3887fb05c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef33047a8b93d416f08f3f640dd65f3887fb05c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef33047a8b93d416f08f3f640dd65f3887fb05c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef33047a8b93d416f08f3f640dd65f3887fb05c1/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c61e35f20fe2ffeb9421dbd6f26c767a234a4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c61e35f20fe2ffeb9421dbd6f26c767a234a4a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c61e35f20fe2ffeb9421dbd6f26c767a234a4a0"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "7db0a9fb3f6302779832c5e8964c764ade557288", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=ef33047a8b93d416f08f3f640dd65f3887fb05c1", "patch": "@@ -229,4 +229,7 @@ AARCH64_OPT_EXTENSION(\"bf16\", AARCH64_FL_BF16, \\\n /* Enabling/Disabling \"flagm\" only changes \"flagm\".  */\n AARCH64_OPT_EXTENSION(\"flagm\", AARCH64_FL_FLAGM, 0, 0, false, \"flagm\")\n \n+/* Enabling/Disabling \"pauth\" only changes \"pauth\".  */\n+AARCH64_OPT_EXTENSION(\"pauth\", AARCH64_FL_PAUTH, 0, 0, false, \"paca pacg\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "6c145cbc309da88d664fb6dc19a1aeb0d1e9c717", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=ef33047a8b93d416f08f3f640dd65f3887fb05c1", "patch": "@@ -227,6 +227,9 @@ extern unsigned aarch64_architecture_version;\n /* Flag Manipulation Instructions (FLAGM) extension.  */\n #define AARCH64_FL_FLAGM      (1ULL << 39)\n \n+/* Pointer Authentication (PAUTH) extension.  */\n+#define AARCH64_FL_PAUTH      (1ULL << 40)\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n \n@@ -241,7 +244,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FOR_ARCH8_2\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_V8_2)\n #define AARCH64_FL_FOR_ARCH8_3\t\t\t\\\n-  (AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_V8_3)\n+  (AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_V8_3 | AARCH64_FL_PAUTH)\n #define AARCH64_FL_FOR_ARCH8_4\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_3 | AARCH64_FL_V8_4 | AARCH64_FL_F16FML \\\n    | AARCH64_FL_DOTPROD | AARCH64_FL_RCPC8_4 | AARCH64_FL_FLAGM)\n@@ -290,6 +293,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n #define AARCH64_ISA_SB\t\t   (aarch64_isa_flags & AARCH64_FL_SB)\n #define AARCH64_ISA_V8_R\t   (aarch64_isa_flags & AARCH64_FL_V8_R)\n+#define AARCH64_ISA_PAUTH\t   (aarch64_isa_flags & AARCH64_FL_PAUTH)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n@@ -378,6 +382,9 @@ extern unsigned aarch64_architecture_version;\n #define TARGET_BF16_SIMD (AARCH64_ISA_BF16 && TARGET_SIMD)\n #define TARGET_SVE_BF16 (TARGET_SVE && AARCH64_ISA_BF16)\n \n+/* PAUTH instructions are enabled through +pauth.  */\n+#define TARGET_PAUTH (AARCH64_ISA_PAUTH)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "6327ae08899caf27949db7c2579f4826279e430d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ef33047a8b93d416f08f3f640dd65f3887fb05c1", "patch": "@@ -873,7 +873,7 @@\n   {\n     const char *ret = NULL;\n     if (aarch64_return_address_signing_enabled ()\n-\t&& TARGET_ARMV8_3\n+\t&& (TARGET_PAUTH)\n \t&& !crtl->calls_eh_return)\n       {\n \tif (aarch64_ra_sign_key == AARCH64_KEY_B)"}, {"sha": "8b871e8bffd8fbf2cab4e605169fea085ce609e1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef33047a8b93d416f08f3f640dd65f3887fb05c1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ef33047a8b93d416f08f3f640dd65f3887fb05c1", "patch": "@@ -18016,8 +18016,8 @@ and the features that they enable by default:\n @item @samp{armv8-a} @tab Armv8-A @tab @samp{+fp}, @samp{+simd}\n @item @samp{armv8.1-a} @tab Armv8.1-A @tab @samp{armv8-a}, @samp{+crc}, @samp{+lse}, @samp{+rdma}\n @item @samp{armv8.2-a} @tab Armv8.2-A @tab @samp{armv8.1-a}\n-@item @samp{armv8.3-a} @tab Armv8.3-A @tab @samp{armv8.2-a}\n-@item @samp{armv8.4-a} @tab Armv8.4-A @tab @samp{armv8.3-a}, @samp{+fp16fml}, @samp{+dotprod}\n+@item @samp{armv8.3-a} @tab Armv8.3-A @tab @samp{armv8.2-a}, @samp{+pauth}\n+@item @samp{armv8.4-a} @tab Armv8.4-A @tab @samp{armv8.3-a}, @samp{+flagm}, @samp{+fp16fml}, @samp{+dotprod}\n @item @samp{armv8.5-a} @tab Armv8.5-A @tab @samp{armv8.4-a}, @samp{+sb}, @samp{+ssbs}, @samp{+predres}\n @item @samp{armv8.6-a} @tab Armv8.6-A @tab @samp{armv8.5-a}, @samp{+bf16}, @samp{+i8mm}\n @item @samp{armv8-r} @tab Armv8-R @tab @samp{armv8-r}\n@@ -18288,8 +18288,9 @@ Advanced SIMD and floating-point instructions.  This option is enabled by\n default for @option{-march=armv8.6-a}.  Use of this option with architectures\n prior to Armv8.2-A is not supported.\n @item flagm\n-Enable the Flag Manipulation instructions Extension. This option is enabled by\n-default for @option{-march=armv8.4-a}.\n+Enable the Flag Manipulation instructions Extension.\n+@item pauth\n+Enable the Pointer Authentication Extension.\n \n @end table\n "}]}