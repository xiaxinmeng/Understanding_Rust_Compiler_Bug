{"sha": "d73082efecec20789a837b691f45088ddf531a3a", "node_id": "C_kwDOANBUbNoAKGQ3MzA4MmVmZWNlYzIwNzg5YTgzN2I2OTFmNDUwODhkZGY1MzFhM2E", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-14T23:54:19Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:20Z"}, "message": "gccrs: Refactor BaseType, InferType and ErrorType impl into cc file\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty.cc (BaseType::BaseType): refactor\n\t(BaseType::~BaseType): likewise\n\t(BaseType::get_ref): likewise\n\t(BaseType::set_ref): likewise\n\t(BaseType::get_ty_ref): likewise\n\t(BaseType::set_ty_ref): likewise\n\t(BaseType::is_equal): likewise\n\t(BaseType::is_unit): likewise\n\t(BaseType::get_kind): likewise\n\t(BaseType::get_combined_refs): likewise\n\t(BaseType::append_reference): likewise\n\t(BaseType::supports_substitutions): likewise\n\t(BaseType::has_subsititions_defined): likewise\n\t(BaseType::can_substitute): likewise\n\t(BaseType::needs_generic_substitutions): likewise\n\t(BaseType::contains_type_parameters): likewise\n\t(BaseType::get_ident): likewise\n\t(BaseType::get_locus): likewise\n\t(InferType::InferType): likewise\n\t(InferType::get_infer_kind): likewise\n\t(InferType::get_name): likewise\n\t(InferType::is_concrete): likewise\n\t(ErrorType::ErrorType): likewise\n\t(ErrorType::is_unit): likewise\n\t(ErrorType::is_concrete): likewise\n\t(ErrorType::get_name): likewise\n\t(ErrorType::monomorphized_clone): likewise\n\t* typecheck/rust-tyty.h (class SubstitutionArgumentMappings): likewise", "tree": {"sha": "2b871cb2f5061cb754f0d36cf4ec0e177ca4f845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b871cb2f5061cb754f0d36cf4ec0e177ca4f845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73082efecec20789a837b691f45088ddf531a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73082efecec20789a837b691f45088ddf531a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73082efecec20789a837b691f45088ddf531a3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73082efecec20789a837b691f45088ddf531a3a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6abbfb5280fa4b277d0c0e009208b57ebd93a52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abbfb5280fa4b277d0c0e009208b57ebd93a52b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abbfb5280fa4b277d0c0e009208b57ebd93a52b"}], "stats": {"total": 273, "additions": 211, "deletions": 62}, "files": [{"sha": "079055e870d0c7dcb71578a3b2a63da43911c872", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73082efecec20789a837b691f45088ddf531a3a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73082efecec20789a837b691f45088ddf531a3a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=d73082efecec20789a837b691f45088ddf531a3a", "patch": "@@ -146,6 +146,122 @@ is_primitive_type_kind (TypeKind kind)\n     }\n }\n \n+// BASE TYPE\n+\n+BaseType::BaseType (HirId ref, HirId ty_ref, TypeKind kind, RustIdent ident,\n+\t\t    std::set<HirId> refs)\n+  : TypeBoundsMappings ({}), kind (kind), ref (ref), ty_ref (ty_ref),\n+    combined (refs), ident (ident), mappings (Analysis::Mappings::get ())\n+{}\n+\n+BaseType::BaseType (HirId ref, HirId ty_ref, TypeKind kind, RustIdent ident,\n+\t\t    std::vector<TypeBoundPredicate> specified_bounds,\n+\t\t    std::set<HirId> refs)\n+  : TypeBoundsMappings (specified_bounds), kind (kind), ref (ref),\n+    ty_ref (ty_ref), combined (refs), ident (ident),\n+    mappings (Analysis::Mappings::get ())\n+{}\n+\n+BaseType::~BaseType () {}\n+\n+HirId\n+BaseType::get_ref () const\n+{\n+  return ref;\n+}\n+\n+void\n+BaseType::set_ref (HirId id)\n+{\n+  if (id != ref)\n+    append_reference (ref);\n+  ref = id;\n+}\n+\n+HirId\n+BaseType::get_ty_ref () const\n+{\n+  return ty_ref;\n+}\n+\n+void\n+BaseType::set_ty_ref (HirId id)\n+{\n+  ty_ref = id;\n+}\n+\n+bool\n+BaseType::is_equal (const BaseType &other) const\n+{\n+  return get_kind () == other.get_kind ();\n+}\n+\n+bool\n+BaseType::is_unit () const\n+{\n+  return false;\n+}\n+\n+TypeKind\n+BaseType::get_kind () const\n+{\n+  return kind;\n+}\n+\n+std::set<HirId>\n+BaseType::get_combined_refs () const\n+{\n+  return combined;\n+}\n+\n+void\n+BaseType::append_reference (HirId id)\n+{\n+  combined.insert (id);\n+}\n+\n+bool\n+BaseType::supports_substitutions () const\n+{\n+  return false;\n+}\n+\n+bool\n+BaseType::has_subsititions_defined () const\n+{\n+  return false;\n+}\n+\n+bool\n+BaseType::can_substitute () const\n+{\n+  return supports_substitutions () && has_subsititions_defined ();\n+}\n+\n+bool\n+BaseType::needs_generic_substitutions () const\n+{\n+  return false;\n+}\n+\n+bool\n+BaseType::contains_type_parameters () const\n+{\n+  return !is_concrete ();\n+}\n+\n+const RustIdent &\n+BaseType::get_ident () const\n+{\n+  return ident;\n+}\n+\n+Location\n+BaseType::get_locus () const\n+{\n+  return ident.locus;\n+}\n+\n bool\n BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n {\n@@ -330,6 +446,40 @@ BaseType::debug () const\n \t      debug_str ().c_str ());\n }\n \n+// InferType\n+\n+InferType::InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n+\t\t      std::set<HirId> refs)\n+  : BaseType (ref, ref, TypeKind::INFER,\n+\t      {Resolver::CanonicalPath::create_empty (), locus}, refs),\n+    infer_kind (infer_kind)\n+{}\n+\n+InferType::InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind,\n+\t\t      Location locus, std::set<HirId> refs)\n+  : BaseType (ref, ty_ref, TypeKind::INFER,\n+\t      {Resolver::CanonicalPath::create_empty (), locus}, refs),\n+    infer_kind (infer_kind)\n+{}\n+\n+InferType::InferTypeKind\n+InferType::get_infer_kind () const\n+{\n+  return infer_kind;\n+}\n+\n+std::string\n+InferType::get_name () const\n+{\n+  return as_string ();\n+}\n+\n+bool\n+InferType::is_concrete () const\n+{\n+  return true;\n+}\n+\n void\n InferType::accept_vis (TyVisitor &vis)\n {\n@@ -435,6 +585,35 @@ InferType::default_type (BaseType **type) const\n   return false;\n }\n \n+// ErrorType\n+\n+ErrorType::ErrorType (HirId ref, std::set<HirId> refs)\n+  : BaseType (ref, ref, TypeKind::ERROR,\n+\t      {Resolver::CanonicalPath::create_empty (), Location ()}, refs)\n+{}\n+\n+ErrorType::ErrorType (HirId ref, HirId ty_ref, std::set<HirId> refs)\n+  : BaseType (ref, ty_ref, TypeKind::ERROR,\n+\t      {Resolver::CanonicalPath::create_empty (), Location ()}, refs)\n+{}\n+\n+bool\n+ErrorType::is_unit () const\n+{\n+  return true;\n+}\n+bool\n+ErrorType::is_concrete () const\n+{\n+  return false;\n+}\n+\n+std::string\n+ErrorType::get_name () const\n+{\n+  return as_string ();\n+}\n+\n void\n ErrorType::accept_vis (TyVisitor &vis)\n {\n@@ -477,6 +656,8 @@ ErrorType::monomorphized_clone () const\n   return clone ();\n }\n \n+// Struct Field type\n+\n std::string\n StructFieldType::as_string () const\n {"}, {"sha": "1a6bac3f864ffff262629670a9512d439a166bfe", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 30, "deletions": 62, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73082efecec20789a837b691f45088ddf531a3a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73082efecec20789a837b691f45088ddf531a3a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=d73082efecec20789a837b691f45088ddf531a3a", "patch": "@@ -89,20 +89,15 @@ class TyConstVisitor;\n class BaseType : public TypeBoundsMappings\n {\n public:\n-  virtual ~BaseType () {}\n+  virtual ~BaseType ();\n \n-  HirId get_ref () const { return ref; }\n+  HirId get_ref () const;\n \n-  void set_ref (HirId id)\n-  {\n-    if (id != ref)\n-      append_reference (ref);\n-    ref = id;\n-  }\n+  void set_ref (HirId id);\n \n-  HirId get_ty_ref () const { return ty_ref; }\n+  HirId get_ty_ref () const;\n \n-  void set_ty_ref (HirId id) { ty_ref = id; }\n+  void set_ty_ref (HirId id);\n \n   virtual void accept_vis (TyVisitor &vis) = 0;\n \n@@ -133,10 +128,7 @@ class BaseType : public TypeBoundsMappings\n   //   ty are considered equal if they're of the same kind, and\n   //     1. (For ADTs, arrays, tuples, refs) have the same underlying ty\n   //     2. (For functions) have the same signature\n-  virtual bool is_equal (const BaseType &other) const\n-  {\n-    return get_kind () == other.get_kind ();\n-  }\n+  virtual bool is_equal (const BaseType &other) const;\n \n   bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n \n@@ -148,11 +140,11 @@ class BaseType : public TypeBoundsMappings\n   void inherit_bounds (\n     const std::vector<TyTy::TypeBoundPredicate> &specified_bounds);\n \n-  virtual bool is_unit () const { return false; }\n+  virtual bool is_unit () const;\n \n   virtual bool is_concrete () const = 0;\n \n-  TypeKind get_kind () const { return kind; }\n+  TypeKind get_kind () const;\n \n   /* Returns a pointer to a clone of this. The caller is responsible for\n    * releasing the memory of the returned ty. */\n@@ -162,22 +154,19 @@ class BaseType : public TypeBoundsMappings\n   virtual BaseType *monomorphized_clone () const = 0;\n \n   // get_combined_refs returns the chain of node refs involved in unification\n-  std::set<HirId> get_combined_refs () const { return combined; }\n+  std::set<HirId> get_combined_refs () const;\n \n-  void append_reference (HirId id) { combined.insert (id); }\n+  void append_reference (HirId id);\n \n-  virtual bool supports_substitutions () const { return false; }\n+  virtual bool supports_substitutions () const;\n \n-  virtual bool has_subsititions_defined () const { return false; }\n+  virtual bool has_subsititions_defined () const;\n \n-  virtual bool can_substitute () const\n-  {\n-    return supports_substitutions () && has_subsititions_defined ();\n-  }\n+  virtual bool can_substitute () const;\n \n-  virtual bool needs_generic_substitutions () const { return false; }\n+  virtual bool needs_generic_substitutions () const;\n \n-  bool contains_type_parameters () const { return !is_concrete (); }\n+  bool contains_type_parameters () const;\n \n   std::string mappings_str () const;\n \n@@ -192,24 +181,17 @@ class BaseType : public TypeBoundsMappings\n   // Projections if available or error\n   const BaseType *destructure () const;\n \n-  const RustIdent &get_ident () const { return ident; }\n+  const RustIdent &get_ident () const;\n \n-  Location get_locus () const { return ident.locus; }\n+  Location get_locus () const;\n \n protected:\n   BaseType (HirId ref, HirId ty_ref, TypeKind kind, RustIdent ident,\n-\t    std::set<HirId> refs = std::set<HirId> ())\n-    : TypeBoundsMappings ({}), kind (kind), ref (ref), ty_ref (ty_ref),\n-      combined (refs), ident (ident), mappings (Analysis::Mappings::get ())\n-  {}\n+\t    std::set<HirId> refs = std::set<HirId> ());\n \n   BaseType (HirId ref, HirId ty_ref, TypeKind kind, RustIdent ident,\n \t    std::vector<TypeBoundPredicate> specified_bounds,\n-\t    std::set<HirId> refs = std::set<HirId> ())\n-    : TypeBoundsMappings (specified_bounds), kind (kind), ref (ref),\n-      ty_ref (ty_ref), combined (refs), ident (ident),\n-      mappings (Analysis::Mappings::get ())\n-  {}\n+\t    std::set<HirId> refs = std::set<HirId> ());\n \n   TypeKind kind;\n   HirId ref;\n@@ -231,18 +213,10 @@ class InferType : public BaseType\n   };\n \n   InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n-\t     std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::INFER,\n-\t\t{Resolver::CanonicalPath::create_empty (), locus}, refs),\n-      infer_kind (infer_kind)\n-  {}\n+\t     std::set<HirId> refs = std::set<HirId> ());\n \n   InferType (HirId ref, HirId ty_ref, InferTypeKind infer_kind, Location locus,\n-\t     std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::INFER,\n-\t\t{Resolver::CanonicalPath::create_empty (), locus}, refs),\n-      infer_kind (infer_kind)\n-  {}\n+\t     std::set<HirId> refs = std::set<HirId> ());\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -256,13 +230,13 @@ class InferType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  InferTypeKind get_infer_kind () const { return infer_kind; }\n+  InferTypeKind get_infer_kind () const;\n \n-  std::string get_name () const override final { return as_string (); }\n+  std::string get_name () const override final;\n \n   bool default_type (BaseType **type) const;\n \n-  bool is_concrete () const final override { return true; }\n+  bool is_concrete () const final override;\n \n private:\n   InferTypeKind infer_kind;\n@@ -271,20 +245,15 @@ class InferType : public BaseType\n class ErrorType : public BaseType\n {\n public:\n-  ErrorType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::ERROR,\n-\t\t{Resolver::CanonicalPath::create_empty (), Location ()}, refs)\n-  {}\n+  ErrorType (HirId ref, std::set<HirId> refs = std::set<HirId> ());\n \n-  ErrorType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::ERROR,\n-\t\t{Resolver::CanonicalPath::create_empty (), Location ()}, refs)\n-  {}\n+  ErrorType (HirId ref, HirId ty_ref,\n+\t     std::set<HirId> refs = std::set<HirId> ());\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n \n-  bool is_unit () const override { return true; }\n+  bool is_unit () const override;\n \n   std::string as_string () const override;\n \n@@ -294,12 +263,11 @@ class ErrorType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  std::string get_name () const override final { return as_string (); }\n+  std::string get_name () const override final;\n \n-  bool is_concrete () const final override { return false; }\n+  bool is_concrete () const final override;\n };\n \n-class SubstitutionArgumentMappings;\n class ParamType : public BaseType\n {\n public:"}]}