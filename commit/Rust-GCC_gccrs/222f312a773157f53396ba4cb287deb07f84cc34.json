{"sha": "222f312a773157f53396ba4cb287deb07f84cc34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyZjMxMmE3NzMxNTdmNTMzOTZiYTRjYjI4N2RlYjA3Zjg0Y2MzNA==", "commit": {"author": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2020-10-19T05:48:19Z"}, "committer": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2020-10-19T09:26:41Z"}, "message": "[PATCH] fold x << (n % C) to x << (n & C-1) if C meets power2\n\nThis patch fixes PR66552 which is also as:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-February/540930.html\nwhich requests to optimizes (x shift (n mod C)) to\n(x shift (n bit_and (C - 1))) when C is a constant and power of two.\n\ngcc/ChangeLog\n2020-10-19  Li Jia He  <helijia@gcc.gnu.org>\n\n\tPR tree-optimization/66552\n\t* match.pd (x << (n % C) -> x << (n & C-1)): New simplification.\n\ngcc/testsuite/ChangeLog\n2020-10-19  Li Jia He  <helijia@gcc.gnu.org>\n\n\tPR tree-optimization/66552\n\t* gcc.dg/pr66552.c: New testcase.", "tree": {"sha": "d865a929bc4d8d6f467ce98e33831931f4a50451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d865a929bc4d8d6f467ce98e33831931f4a50451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/222f312a773157f53396ba4cb287deb07f84cc34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222f312a773157f53396ba4cb287deb07f84cc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222f312a773157f53396ba4cb287deb07f84cc34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222f312a773157f53396ba4cb287deb07f84cc34/comments", "author": null, "committer": null, "parents": [{"sha": "dccb0f8801363462a11fd13a33ff3f4092ff82bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccb0f8801363462a11fd13a33ff3f4092ff82bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dccb0f8801363462a11fd13a33ff3f4092ff82bd"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "17ba04100c784681b475aef620d60e89be2460ae", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222f312a773157f53396ba4cb287deb07f84cc34/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222f312a773157f53396ba4cb287deb07f84cc34/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=222f312a773157f53396ba4cb287deb07f84cc34", "patch": "@@ -607,12 +607,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* Optimize TRUNC_MOD_EXPR by a power of two into a BIT_AND_EXPR,\n    i.e. \"X % C\" into \"X & (C - 1)\", if X and C are positive.\n    Also optimize A % (C << N)  where C is a power of 2,\n-   to A & ((C << N) - 1).  */\n+   to A & ((C << N) - 1).\n+   Also optimize \"A shift (B % C)\", if C is a power of 2, to\n+   \"A shift (B & (C - 1))\".  SHIFT operation include \"<<\" and \">>\"\n+   and assume (B % C) is nonnegative as shifts negative values would\n+   be UB.  */\n (match (power_of_two_cand @1)\n  INTEGER_CST@1)\n (match (power_of_two_cand @1)\n  (lshift INTEGER_CST@1 @2))\n (for mod (trunc_mod floor_mod)\n+ (for shift (lshift rshift)\n+  (simplify\n+   (shift @0 (mod @1 (power_of_two_cand@2 @3)))\n+   (if (integer_pow2p (@3) && tree_int_cst_sgn (@3) > 0)\n+    (shift @0 (bit_and @1 (minus @2 { build_int_cst (TREE_TYPE (@2),\n+\t\t\t\t\t\t      1); }))))))\n  (simplify\n   (mod @0 (convert?@3 (power_of_two_cand@1 @2)))\n   (if ((TYPE_UNSIGNED (type)"}, {"sha": "7583c9ad25a77500453b8a3d0b6f1e4f8e28a507", "filename": "gcc/testsuite/gcc.dg/pr66552.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222f312a773157f53396ba4cb287deb07f84cc34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66552.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222f312a773157f53396ba4cb287deb07f84cc34/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66552.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66552.c?ref=222f312a773157f53396ba4cb287deb07f84cc34", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-lower\" } */\n+\n+unsigned a(unsigned x, int n)\n+{\n+  return x >> (n % 32);\n+}\n+\n+unsigned b(unsigned x, int n)\n+{\n+  return x << (n % 32);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" % \" \"lower\" } } */"}]}