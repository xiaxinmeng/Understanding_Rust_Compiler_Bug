{"sha": "499accd77bf538e8f0467853aa5aa94a418014d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5YWNjZDc3YmY1MzhlOGYwNDY3ODUzYWE1YWE5NGE0MTgwMTRkOQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-12-17T08:53:58Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2004-12-17T08:53:58Z"}, "message": "re PR target/17603 (cpowf and cpowl give wrong results)\n\n2004-12-17  Jan Beulich  <jbeulich@novell.com>\n\n\tPR target/17603\n\t* config/i386/i386.c (enum x86_64_reg_class): Define\n\tX86_64_COMPLEX_X87_CLASS.\n\t(x86_64_reg_class_names): Add name for X86_64_COMPLEX_X87_CLASS.\n\t(merge_classes): Handle X86_64_COMPLEX_X87_CLASS.\n\t(classify_argument): XCmode is X86_64_COMPLEX_X87_CLASS.\n\t(examine_argument): X86_64_COMPLEX_X87_CLASS requires two\n\tregisters when dealing with a return value.\n\t(construct_container): Handle X86_64_COMPLEX_X87_CLASS.\n\tEliminate impossible case of two X87/X87UP pairs (this now is\n\tbeing expressed by a single COMPLEX_X87).\n\t(x86_libcall_value): XCmode gets returned in st0/st1.\n\nFrom-SVN: r92312", "tree": {"sha": "3121c1641576308f3e5805d1545e69350f84ef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3121c1641576308f3e5805d1545e69350f84ef27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/499accd77bf538e8f0467853aa5aa94a418014d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499accd77bf538e8f0467853aa5aa94a418014d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499accd77bf538e8f0467853aa5aa94a418014d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499accd77bf538e8f0467853aa5aa94a418014d9/comments", "author": null, "committer": null, "parents": [{"sha": "a65735cde57039be59871a455d7f426241a57e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65735cde57039be59871a455d7f426241a57e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65735cde57039be59871a455d7f426241a57e95"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "ebf822037aa24902a5db1457de517e693439ced4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499accd77bf538e8f0467853aa5aa94a418014d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499accd77bf538e8f0467853aa5aa94a418014d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=499accd77bf538e8f0467853aa5aa94a418014d9", "patch": "@@ -1,3 +1,18 @@\n+2004-12-17  Jan Beulich  <jbeulich@novell.com>\n+\n+\tPR target/17603\n+\t* config/i386/i386.c (enum x86_64_reg_class): Define\n+\tX86_64_COMPLEX_X87_CLASS.\n+\t(x86_64_reg_class_names): Add name for X86_64_COMPLEX_X87_CLASS.\n+\t(merge_classes): Handle X86_64_COMPLEX_X87_CLASS.\n+\t(classify_argument): XCmode is X86_64_COMPLEX_X87_CLASS.\n+\t(examine_argument): X86_64_COMPLEX_X87_CLASS requires two\n+\tregisters when dealing with a return value.\n+\t(construct_container): Handle X86_64_COMPLEX_X87_CLASS.\n+\tEliminate impossible case of two X87/X87UP pairs (this now is\n+\tbeing expressed by a single COMPLEX_X87).\n+\t(x86_libcall_value): XCmode gets returned in st0/st1.\n+\n 2004-12-17  Steven Bosscher  <stevenb@suse.de>\n \n \t* tree.c (type_contains_placeholder_1): Always return false"}, {"sha": "06c8bb0f4a08bf31b15ee444b2ab1fde78f7c53d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499accd77bf538e8f0467853aa5aa94a418014d9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499accd77bf538e8f0467853aa5aa94a418014d9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=499accd77bf538e8f0467853aa5aa94a418014d9", "patch": "@@ -948,10 +948,11 @@ enum x86_64_reg_class\n     X86_64_SSEUP_CLASS,\n     X86_64_X87_CLASS,\n     X86_64_X87UP_CLASS,\n+    X86_64_COMPLEX_X87_CLASS,\n     X86_64_MEMORY_CLASS\n   };\n static const char * const x86_64_reg_class_name[] =\n-   {\"no\", \"integer\", \"integerSI\", \"sse\", \"sseSF\", \"sseDF\", \"sseup\", \"x87\", \"x87up\", \"no\"};\n+   {\"no\", \"integer\", \"integerSI\", \"sse\", \"sseSF\", \"sseDF\", \"sseup\", \"x87\", \"x87up\", \"cplx87\", \"no\"};\n \n #define MAX_CLASSES 4\n static int classify_argument (enum machine_mode, tree,\n@@ -2072,9 +2073,14 @@ merge_classes (enum x86_64_reg_class class1, enum x86_64_reg_class class2)\n       || class2 == X86_64_INTEGER_CLASS || class2 == X86_64_INTEGERSI_CLASS)\n     return X86_64_INTEGER_CLASS;\n \n-  /* Rule #5: If one of the classes is X87 or X87UP class, MEMORY is used.  */\n-  if (class1 == X86_64_X87_CLASS || class1 == X86_64_X87UP_CLASS\n-      || class2 == X86_64_X87_CLASS || class2 == X86_64_X87UP_CLASS)\n+  /* Rule #5: If one of the classes is X87, X87UP, or COMPLEX_X87 class,\n+     MEMORY is used.  */\n+  if (class1 == X86_64_X87_CLASS\n+      || class1 == X86_64_X87UP_CLASS\n+      || class1 == X86_64_COMPLEX_X87_CLASS\n+      || class2 == X86_64_X87_CLASS\n+      || class2 == X86_64_X87UP_CLASS\n+      || class2 == X86_64_COMPLEX_X87_CLASS)\n     return X86_64_MEMORY_CLASS;\n \n   /* Rule #6: Otherwise class SSE is used.  */\n@@ -2354,8 +2360,10 @@ classify_argument (enum machine_mode mode, tree type,\n       classes[1] = X86_64_SSEDF_CLASS;\n       return 2;\n     case XCmode:\n+      classes[0] = X86_64_COMPLEX_X87_CLASS;\n+      return 1;\n     case TCmode:\n-      /* These modes are larger than 16 bytes.  */\n+      /* This modes is larger than 16 bytes.  */\n       return 0;\n     case V4SFmode:\n     case V4SImode:\n@@ -2427,6 +2435,8 @@ examine_argument (enum machine_mode mode, tree type, int in_return,\n \tif (!in_return)\n \t  return 0;\n \tbreak;\n+      case X86_64_COMPLEX_X87_CLASS:\n+\treturn in_return ? 2 : 0;\n       case X86_64_MEMORY_CLASS:\n \tabort ();\n       }\n@@ -2485,6 +2495,7 @@ construct_container (enum machine_mode mode, tree type, int in_return,\n       case X86_64_SSEDF_CLASS:\n \treturn gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n       case X86_64_X87_CLASS:\n+      case X86_64_COMPLEX_X87_CLASS:\n \treturn gen_rtx_REG (mode, FIRST_STACK_REG);\n       case X86_64_NO_CLASS:\n \t/* Zero sized array, struct or class.  */\n@@ -2503,11 +2514,6 @@ construct_container (enum machine_mode mode, tree type, int in_return,\n       && (mode == CDImode || mode == TImode || mode == TFmode)\n       && intreg[0] + 1 == intreg[1])\n     return gen_rtx_REG (mode, intreg[0]);\n-  if (n == 4\n-      && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS\n-      && class[2] == X86_64_X87_CLASS && class[3] == X86_64_X87UP_CLASS\n-      && mode != BLKmode)\n-    return gen_rtx_REG (XCmode, FIRST_STACK_REG);\n \n   /* Otherwise figure out the entries of the PARALLEL.  */\n   for (i = 0; i < n; i++)\n@@ -3070,8 +3076,8 @@ ix86_libcall_value (enum machine_mode mode)\n \tcase TFmode:\n \t  return gen_rtx_REG (mode, FIRST_SSE_REG);\n \tcase XFmode:\n-\t  return gen_rtx_REG (mode, FIRST_FLOAT_REG);\n \tcase XCmode:\n+\t  return gen_rtx_REG (mode, FIRST_FLOAT_REG);\n \tcase TCmode:\n \t  return NULL;\n \tdefault:"}]}