{"sha": "39a0325104227d48df4d49dcb47f38b44e8da732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhMDMyNTEwNDIyN2Q0OGRmNGQ0OWRjYjQ3ZjM4YjQ0ZThkYTczMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-06T10:43:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-06T10:43:42Z"}, "message": "Add noexcept to various basic_string string operations\n\n\t* include/bits/basic_string.h (basic_string::find, basic_string::rfind)\n\t(basic_string::find_first_of, basic_string::find_last_of)\n\t(basic_string::find_first_not_of, basic_string::find_last_not_of):\n\tMake all overloads noexcept.\n\t(basic_string::compare(const _CharT*)): Make noexcept.\n\nFrom-SVN: r243290", "tree": {"sha": "2f390f5c8e969c8a48c7682b327f22d7565067f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f390f5c8e969c8a48c7682b327f22d7565067f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a0325104227d48df4d49dcb47f38b44e8da732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a0325104227d48df4d49dcb47f38b44e8da732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a0325104227d48df4d49dcb47f38b44e8da732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a0325104227d48df4d49dcb47f38b44e8da732/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3703d0958bac9f21b75d91bc1e87c922d86434a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3703d0958bac9f21b75d91bc1e87c922d86434a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3703d0958bac9f21b75d91bc1e87c922d86434a3"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "1b52efedb30ac79e5d730d4c4646d61e7cd5a63d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=39a0325104227d48df4d49dcb47f38b44e8da732", "patch": "@@ -1,3 +1,11 @@\n+2016-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string::find, basic_string::rfind)\n+\t(basic_string::find_first_of, basic_string::find_last_of)\n+\t(basic_string::find_first_not_of, basic_string::find_last_not_of):\n+\tMake all overloads noexcept.\n+\t(basic_string::compare(const _CharT*)): Make noexcept.\n+\n 2016-12-03  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/abi/post/hppa-linux-gnu/baseline_symbols.txt: Regenerate."}, {"sha": "1e096ece05303db0d86a760874747efa9be4b3e8", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=39a0325104227d48df4d49dcb47f38b44e8da732", "patch": "@@ -2251,7 +2251,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  npos.\n       */\n       size_type\n-      find(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a string.\n@@ -2265,7 +2266,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2291,7 +2292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  it begins.  If not found, returns npos.\n       */\n       size_type\n-      find(const _CharT* __s, size_type __pos = 0) const\n+      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find(__s, __pos, traits_type::length(__s));\n@@ -2322,7 +2323,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       rfind(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2350,7 +2351,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  npos.\n       */\n       size_type\n-      rfind(const _CharT* __s, size_type __pos, size_type __n) const;\n+      rfind(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a C string.\n@@ -2395,7 +2397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2423,7 +2425,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns npos.\n       */\n       size_type\n-      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character of C string.\n@@ -2437,6 +2440,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_first_of(__s, __pos, traits_type::length(__s));\n@@ -2471,7 +2475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_of(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2499,7 +2503,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns npos.\n       */\n       size_type\n-      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character of C string.\n@@ -2513,6 +2518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos = npos) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_last_of(__s, __pos, traits_type::length(__s));\n@@ -2546,7 +2552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2575,7 +2581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos,\n-\t\t\tsize_type __n) const;\n+\t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character not in C string.\n@@ -2589,6 +2595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));\n@@ -2606,7 +2613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT;\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character not in string.\n@@ -2621,7 +2628,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n #if __cplusplus > 201402L\n@@ -2650,7 +2657,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos,\n-\t\t       size_type __n) const;\n+\t\t       size_type __n) const _GLIBCXX_NOEXCEPT;\n       /**\n        *  @brief  Find last position of a character not in C string.\n        *  @param __s  C string containing characters to avoid.\n@@ -2664,6 +2671,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));\n@@ -2681,7 +2689,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT;\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Get a substring.\n@@ -2841,7 +2849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  ordered first.\n       */\n       int\n-      compare(const _CharT* __s) const;\n+      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 5 String::compare specification questionable\n@@ -4787,7 +4795,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  npos.\n       */\n       size_type\n-      find(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a string.\n@@ -4801,7 +4810,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -4815,7 +4824,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  it begins.  If not found, returns npos.\n       */\n       size_type\n-      find(const _CharT* __s, size_type __pos = 0) const\n+      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find(__s, __pos, traits_type::length(__s));\n@@ -4846,7 +4855,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       rfind(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->rfind(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -4862,7 +4871,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  npos.\n       */\n       size_type\n-      rfind(const _CharT* __s, size_type __pos, size_type __n) const;\n+      rfind(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a C string.\n@@ -4875,7 +4885,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  where it begins.  If not found, returns npos.\n       */\n       size_type\n-      rfind(const _CharT* __s, size_type __pos = npos) const\n+      rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->rfind(__s, __pos, traits_type::length(__s));\n@@ -4907,7 +4917,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_first_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -4923,7 +4933,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  returns npos.\n       */\n       size_type\n-      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character of C string.\n@@ -4937,6 +4948,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_first_of(__s, __pos, traits_type::length(__s));\n@@ -4971,7 +4983,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_of(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_last_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -4987,7 +4999,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  returns npos.\n       */\n       size_type\n-      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character of C string.\n@@ -5001,6 +5014,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos = npos) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_last_of(__s, __pos, traits_type::length(__s));\n@@ -5034,7 +5048,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -5051,7 +5065,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos,\n-\t\t\tsize_type __n) const;\n+\t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find position of a character not in C string.\n@@ -5065,6 +5079,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));\n@@ -5082,7 +5097,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n-\t_GLIBCXX_NOEXCEPT;\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Find last position of a character not in string.\n@@ -5097,7 +5112,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT\n+      _GLIBCXX_NOEXCEPT\n       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n \n       /**\n@@ -5114,7 +5129,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos,\n-\t\t       size_type __n) const;\n+\t\t       size_type __n) const _GLIBCXX_NOEXCEPT;\n       /**\n        *  @brief  Find last position of a character not in C string.\n        *  @param __s  C string containing characters to avoid.\n@@ -5128,6 +5143,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n+      _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));\n@@ -5145,7 +5161,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n-\t_GLIBCXX_NOEXCEPT;\n+      _GLIBCXX_NOEXCEPT;\n \n       /**\n        *  @brief  Get a substring.\n@@ -5255,7 +5271,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  ordered first.\n       */\n       int\n-      compare(const _CharT* __s) const;\n+      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 5 String::compare specification questionable"}, {"sha": "21238d6fdda2e96b93170995e6662065bddd52f6", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a0325104227d48df4d49dcb47f38b44e8da732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=39a0325104227d48df4d49dcb47f38b44e8da732", "patch": "@@ -1186,6 +1186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __size = this->size();\n@@ -1227,6 +1228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __size = this->size();\n@@ -1265,6 +1267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       for (; __n && __pos < this->size(); ++__pos)\n@@ -1280,6 +1283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       size_type __size = this->size();\n@@ -1301,6 +1305,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       for (; __pos < this->size(); ++__pos)\n@@ -1324,6 +1329,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+    _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       size_type __size = this->size();\n@@ -1397,7 +1403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     int\n     basic_string<_CharT, _Traits, _Alloc>::\n-    compare(const _CharT* __s) const\n+    compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n     {\n       __glibcxx_requires_string(__s);\n       const size_type __size = this->size();"}]}