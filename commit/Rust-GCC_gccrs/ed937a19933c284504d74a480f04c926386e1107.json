{"sha": "ed937a19933c284504d74a480f04c926386e1107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5MzdhMTk5MzNjMjg0NTA0ZDc0YTQ4MGYwNGM5MjYzODZlMTEwNw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-12-09T11:39:17Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-12-09T11:39:17Z"}, "message": "reload1.c (reload_combine, [...]): Make USE_RUID always valid.\n\n\t* reload1.c (reload_combine, reload_combine_note_store):\n\tMake USE_RUID always valid.\n\t(reload_combine): Check if BASE is clobbered too early.\n\nFrom-SVN: r24216", "tree": {"sha": "d92653963a7fae38e7ca39eb74e94fefb35729f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92653963a7fae38e7ca39eb74e94fefb35729f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed937a19933c284504d74a480f04c926386e1107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed937a19933c284504d74a480f04c926386e1107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed937a19933c284504d74a480f04c926386e1107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed937a19933c284504d74a480f04c926386e1107/comments", "author": null, "committer": null, "parents": [{"sha": "290b61f7fa8fa2444fea905363113d31b1e651a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290b61f7fa8fa2444fea905363113d31b1e651a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290b61f7fa8fa2444fea905363113d31b1e651a2"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "0a083abb673cce9813d8076a3f966d2b17ff1b59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed937a19933c284504d74a480f04c926386e1107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed937a19933c284504d74a480f04c926386e1107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed937a19933c284504d74a480f04c926386e1107", "patch": "@@ -1,3 +1,9 @@\n+Wed Dec  9 19:36:57 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_combine, reload_combine_note_store):\n+\tMake USE_RUID always valid.\n+\t(reload_combine): Check if BASE is clobbered too early.\n+\n Wed Dec  9 09:53:58 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* reload.c (find_reloads): Display the insn that cannot be"}, {"sha": "c974c2625bc0bf117c77078993fe76af90a5d1d6", "filename": "gcc/reload1.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed937a19933c284504d74a480f04c926386e1107/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed937a19933c284504d74a480f04c926386e1107/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ed937a19933c284504d74a480f04c926386e1107", "patch": "@@ -9357,7 +9357,10 @@ struct reg_use { rtx insn, *usep; };\n    register (which is first among these we have seen since we scan backwards),\n    OFFSET contains the constant offset that is added to the register in\n    all encountered uses, and USE_RUID indicates the first encountered, i.e.\n-   last, of these uses.  */\n+   last, of these uses.\n+   STORE_RUID is always meaningful if we only want to use a value in a\n+   register in a different place: it denotes the next insn in the insn\n+   stream (i.e. the last ecountered) that sets or clobbers the register.  */\n static struct\n   {\n     struct reg_use reg_use[RELOAD_COMBINE_MAX_USES];\n@@ -9405,13 +9408,11 @@ reload_combine ()\n   last_label_ruid = reload_combine_ruid = 0;\n   for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; --i)\n     {\n+      reg_state[i].store_ruid = reload_combine_ruid;\n       if (fixed_regs[i])\n \treg_state[i].use_index = -1;\n       else\n-\t{\n-\t  reg_state[i].use_index = RELOAD_COMBINE_MAX_USES;\n-\t  reg_state[i].store_ruid = reload_combine_ruid;\n-\t}\n+\treg_state[i].use_index = RELOAD_COMBINE_MAX_USES;\n     }\n \n   for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n@@ -9493,10 +9494,14 @@ reload_combine ()\n \t\t    }\n \t\t}\n \t    }\n+\t  /* Check that PREV_SET is indeed (set (REGX) (CONST_INT)) and that\n+\t     (REGY), i.e. BASE, is not clobbered before the last use we'll\n+\t     create.  */\n \t  if (prev_set\n \t      && GET_CODE (SET_SRC (prev_set)) == CONST_INT\n \t      && rtx_equal_p (SET_DEST (prev_set), reg)\n \t      && reg_state[regno].use_index >= 0\n+\t      && reg_state[REGNO (base)].store_ruid <= reg_state[regno].use_ruid\n \t      && reg_sum)\n \t    {\n \t      int i;\n@@ -9588,7 +9593,12 @@ reload_combine ()\n \t{\n \t  if (REG_NOTE_KIND (note) == REG_INC\n \t      && GET_CODE (XEXP (note, 0)) == REG)\n-\t    reg_state[REGNO (XEXP (note, 0))].use_index = -1;\n+\t    {\n+\t      int regno = REGNO (XEXP (note, 0));\n+\n+\t      reg_state[regno].store_ruid = reload_combine_ruid;\n+\t      reg_state[regno].use_index = -1;\n+\t    }\n \t}\n     }\n }\n@@ -9616,7 +9626,10 @@ reload_combine_note_store (dst, set)\n   /* note_stores might have stripped a STRICT_LOW_PART, so we have to be\n      careful with registers / register parts that are not full words.  */\n   if (size < (unsigned) UNITS_PER_WORD)\n-    reg_state[regno].use_index = -1;\n+    {\n+      reg_state[regno].use_index = -1;\n+      reg_state[regno].store_ruid = reload_combine_ruid;\n+    }\n   else\n     {\n       for (i = size / UNITS_PER_WORD - 1 + regno; i >= regno; i--)"}]}