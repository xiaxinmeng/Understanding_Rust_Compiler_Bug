{"sha": "8e9b2773979616d97a18977bb2fb8cab75fd1e60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5YjI3NzM5Nzk2MTZkOTdhMTg5NzdiYjJmYjhjYWI3NWZkMWU2MA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-06-01T11:24:07Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-06-01T11:24:07Z"}, "message": "re PR target/65527 (ICE: in expand_builtin_with_bounds, at builtins.c:7120 with -fcheck-pointer-bounds -mmpx)\n\ngcc/\n\n\tPR target/65527\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Add\n\tredirection for instrumented calls.\n\t* lto-wrapper.c (merge_and_complain): Merge -fcheck-pointer-bounds.\n\t(append_compiler_options): Append -fcheck-pointer-bounds.\n\t* tree-chkp.h (chkp_copy_call_skip_bounds): New.\n\t(chkp_redirect_edge): New.\n\t* tree-chkp.c (chkp_copy_call_skip_bounds): New.\n\t(chkp_redirect_edge): New.\n\ngcc/testsuite/\n\n\tPR target/65527\n\t* gcc.target/i386/mpx/chkp-fix-calls-1.c: New.\n\t* gcc.target/i386/mpx/chkp-fix-calls-2.c: New.\n\t* gcc.target/i386/mpx/chkp-fix-calls-3.c: New.\n\t* gcc.target/i386/mpx/chkp-fix-calls-4.c: New.\n\nFrom-SVN: r223929", "tree": {"sha": "20d751c59fc8cbfe3db9985d594e401492c12d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20d751c59fc8cbfe3db9985d594e401492c12d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9b2773979616d97a18977bb2fb8cab75fd1e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9b2773979616d97a18977bb2fb8cab75fd1e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9b2773979616d97a18977bb2fb8cab75fd1e60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9b2773979616d97a18977bb2fb8cab75fd1e60/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4fa7bb4733608417a7f2d934f001e6fd69c1cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fa7bb4733608417a7f2d934f001e6fd69c1cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fa7bb4733608417a7f2d934f001e6fd69c1cf8"}], "stats": {"total": 196, "additions": 191, "deletions": 5}, "files": [{"sha": "d61b465bdb2cf4ff5c35055ba60db76971de6dbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -1,3 +1,15 @@\n+2015-06-01  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/65527\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Add\n+\tredirection for instrumented calls.\n+\t* lto-wrapper.c (merge_and_complain): Merge -fcheck-pointer-bounds.\n+\t(append_compiler_options): Append -fcheck-pointer-bounds.\n+\t* tree-chkp.h (chkp_copy_call_skip_bounds): New.\n+\t(chkp_redirect_edge): New.\n+\t* tree-chkp.c (chkp_copy_call_skip_bounds): New.\n+\t(chkp_redirect_edge): New.\n+\n 2015-06-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66280"}, {"sha": "6a674db4078f13352427b6aeef7d10a3796a287c", "filename": "gcc/cgraph.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -1281,6 +1281,7 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n   tree lhs = gimple_call_lhs (e->call_stmt);\n   gcall *new_stmt;\n   gimple_stmt_iterator gsi;\n+  bool skip_bounds = false;\n #ifdef ENABLE_CHECKING\n   cgraph_node *node;\n #endif\n@@ -1389,8 +1390,16 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t}\n     }\n \n+  /* We might propagate instrumented function pointer into\n+     not instrumented function and vice versa.  In such a\n+     case we need to either fix function declaration or\n+     remove bounds from call statement.  */\n+  if (flag_check_pointer_bounds && e->callee)\n+    skip_bounds = chkp_redirect_edge (e);\n+\n   if (e->indirect_unknown_callee\n-      || decl == e->callee->decl)\n+      || (decl == e->callee->decl\n+\t  && !skip_bounds))\n     return e->call_stmt;\n \n #ifdef ENABLE_CHECKING\n@@ -1415,13 +1424,19 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t}\n     }\n \n-  if (e->callee->clone.combined_args_to_skip)\n+  if (e->callee->clone.combined_args_to_skip\n+      || skip_bounds)\n     {\n       int lp_nr;\n \n-      new_stmt\n-\t= gimple_call_copy_skip_args (e->call_stmt,\n-\t\t\t\t      e->callee->clone.combined_args_to_skip);\n+      new_stmt = e->call_stmt;\n+      if (e->callee->clone.combined_args_to_skip)\n+\tnew_stmt\n+\t  = gimple_call_copy_skip_args (new_stmt,\n+\t\t\t\t\te->callee->clone.combined_args_to_skip);\n+      if (skip_bounds)\n+\tnew_stmt = chkp_copy_call_skip_bounds (new_stmt);\n+\n       gimple_call_set_fndecl (new_stmt, e->callee->decl);\n       gimple_call_set_fntype (new_stmt, gimple_call_fntype (e->call_stmt));\n "}, {"sha": "d59bd8c6635c852971d21de9976b197e42970014", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -273,6 +273,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \tcase OPT_fwrapv:\n \tcase OPT_fopenmp:\n \tcase OPT_fopenacc:\n+\tcase OPT_fcheck_pointer_bounds:\n \t  /* For selected options we can merge conservatively.  */\n \t  for (j = 0; j < *decoded_options_count; ++j)\n \t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n@@ -503,6 +504,7 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n \tcase OPT_Os:\n+\tcase OPT_fcheck_pointer_bounds:\n \t  break;\n \n \tdefault:"}, {"sha": "fab0df2e41a2022be5380ac55191cd7116611e0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -1,3 +1,11 @@\n+2015-06-01  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/65527\n+\t* gcc.target/i386/mpx/chkp-fix-calls-1.c: New.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-2.c: New.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-3.c: New.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-4.c: New.\n+\n 2015-06-01  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp: Pass"}, {"sha": "cb4d22984b66566e4e7df2ecfcd6c05bccfcddc1", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n+\n+#include \"math.h\"\n+\n+double\n+test1 (double x, double y, double (*fn)(double, double))\n+{\n+  return fn (x, y);\n+}\n+\n+double\n+test2 (double x, double y)\n+{\n+  return test1 (x, y, copysign);\n+}"}, {"sha": "951e7dece199ff7964f0a9b65fd48bec24dcba78", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fcheck-pointer-bounds -mmpx -fno-inline\" } */\n+\n+#include \"math.h\"\n+\n+double\n+test1 (double x, double y, double (*fn)(double, double))\n+{\n+  return fn (x, y);\n+}\n+\n+double\n+test2 (double x, double y)\n+{\n+  return test1 (x, y, copysign);\n+}"}, {"sha": "439f631a3b932d70618cc67f4a1752e9f4b27878", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fexceptions -fcheck-pointer-bounds -mmpx\" } */\n+\n+extern int f2 (const char*, int, ...);\n+extern long int f3 (int *);\n+extern void err (void) __attribute__((__error__(\"error\")));\n+\n+extern __inline __attribute__ ((__always_inline__)) int\n+f1 (int i, ...)\n+{\n+  if (__builtin_constant_p (i))\n+    {\n+      if (i)\n+\terr ();\n+      return f2 (\"\", i);\n+    }\n+\n+  return f2 (\"\", i);\n+}\n+\n+int\n+test ()\n+{\n+  int i;\n+\n+  if (f1 (0))\n+    if (f3 (&i))\n+      i = 0;\n+\n+  return i;\n+}\n+\n+"}, {"sha": "1b7d7032ecb1874fbe75040f1eac7db75043dd9c", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fcheck-pointer-bounds -mmpx\" } */\n+\n+typedef void (func) (int *);\n+\n+static inline void\n+bar (func f)\n+{\n+  int i;\n+  f (&i);\n+}\n+\n+void\n+foo ()\n+{\n+  bar (0);\n+}"}, {"sha": "015df1139c7bf49e80c93b6d5cbf19798b7af10b", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -529,6 +529,71 @@ chkp_insert_retbnd_call (tree bndval, tree retval,\n   return bndval;\n }\n \n+/* Build a GIMPLE_CALL identical to CALL but skipping bounds\n+   arguments.  */\n+\n+gcall *\n+chkp_copy_call_skip_bounds (gcall *call)\n+{\n+  bitmap bounds;\n+  unsigned i;\n+\n+  bitmap_obstack_initialize (NULL);\n+  bounds = BITMAP_ALLOC (NULL);\n+\n+  for (i = 0; i < gimple_call_num_args (call); i++)\n+    if (POINTER_BOUNDS_P (gimple_call_arg (call, i)))\n+      bitmap_set_bit (bounds, i);\n+\n+  if (!bitmap_empty_p (bounds))\n+    call = gimple_call_copy_skip_args (call, bounds);\n+  gimple_call_set_with_bounds (call, false);\n+\n+  BITMAP_FREE (bounds);\n+  bitmap_obstack_release (NULL);\n+\n+  return call;\n+}\n+\n+/* Redirect edge E to the correct node according to call_stmt.\n+   Return 1 if bounds removal from call_stmt should be done\n+   instead of redirection.  */\n+\n+bool\n+chkp_redirect_edge (cgraph_edge *e)\n+{\n+  bool instrumented = false;\n+  tree decl = e->callee->decl;\n+\n+  if (e->callee->instrumentation_clone\n+      || chkp_function_instrumented_p (decl))\n+    instrumented = true;\n+\n+  if (instrumented\n+      && !gimple_call_with_bounds_p (e->call_stmt))\n+    e->redirect_callee (cgraph_node::get_create (e->callee->orig_decl));\n+  else if (!instrumented\n+\t   && gimple_call_with_bounds_p (e->call_stmt)\n+\t   && !chkp_gimple_call_builtin_p (e->call_stmt, BUILT_IN_CHKP_BNDCL)\n+\t   && !chkp_gimple_call_builtin_p (e->call_stmt, BUILT_IN_CHKP_BNDCU)\n+\t   && !chkp_gimple_call_builtin_p (e->call_stmt, BUILT_IN_CHKP_BNDSTX))\n+    {\n+      if (e->callee->instrumented_version)\n+\te->redirect_callee (e->callee->instrumented_version);\n+      else\n+\t{\n+\t  tree args = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\t  /* Avoid bounds removal if all args will be removed.  */\n+\t  if (!args || TREE_VALUE (args) != void_type_node)\n+\t    return true;\n+\t  else\n+\t    gimple_call_set_with_bounds (e->call_stmt, false);\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Mark statement S to not be instrumented.  */\n static void\n chkp_mark_stmt (gimple s)"}, {"sha": "b5ab56252ed3d293a3f2a435d0a6978abbf50571", "filename": "gcc/tree-chkp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftree-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9b2773979616d97a18977bb2fb8cab75fd1e60/gcc%2Ftree-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.h?ref=8e9b2773979616d97a18977bb2fb8cab75fd1e60", "patch": "@@ -56,5 +56,7 @@ extern bool chkp_gimple_call_builtin_p (gimple call,\n extern void chkp_expand_bounds_reset_for_mem (tree mem, tree ptr);\n extern tree chkp_insert_retbnd_call (tree bndval, tree retval,\n \t\t\t\t     gimple_stmt_iterator *gsi);\n+extern gcall *chkp_copy_call_skip_bounds (gcall *call);\n+extern bool chkp_redirect_edge (cgraph_edge *e);\n \n #endif /* GCC_TREE_CHKP_H */"}]}