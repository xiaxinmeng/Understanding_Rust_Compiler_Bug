{"sha": "6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzNWEwOWNmY2JmZTQ2YTU3ZmE1MDNjYTA3ZDViOWY0MzU1MWEwZQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2002-05-18T19:45:18Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2002-05-18T19:45:18Z"}, "message": "optabs.c (complex_part_zero_p): New.\n\n2002-05-18  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* optabs.c (complex_part_zero_p): New.\n\t* (expand_cmplxdiv_straight): Use it.\n\t* (expand_cmplxdiv_wide): Ditto.\n\t* (expand_binop): Ditto.\n\nFrom-SVN: r53594", "tree": {"sha": "edc2de3e7cd3282bb8bbeb327203167572367109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc2de3e7cd3282bb8bbeb327203167572367109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e/comments", "author": null, "committer": null, "parents": [{"sha": "d48bc59acf17cb6141afdba04724b31cbb8f36fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48bc59acf17cb6141afdba04724b31cbb8f36fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48bc59acf17cb6141afdba04724b31cbb8f36fd"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "6644cb94f20a37ec9b300fa745abb0f1d6298c53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "patch": "@@ -1,3 +1,10 @@\n+2002-05-18  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* optabs.c (complex_part_zero_p): New.\n+\t* (expand_cmplxdiv_straight): Use it.\n+\t* (expand_cmplxdiv_wide): Ditto.\n+\t* (expand_binop): Ditto.\n+\n 2002-05-18  Richard Henderson  <rth@redhat.com>\n \n \t* final.c (HAVE_READONLY_DATA_SECTION): New."}, {"sha": "d1610978a57f7c7276a4a3f06fcc5f0b3a25c66c", "filename": "gcc/optabs.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "patch": "@@ -108,6 +108,8 @@ static rtx ftruncify\tPARAMS ((rtx));\n static optab new_optab\tPARAMS ((void));\n static inline optab init_optab\tPARAMS ((enum rtx_code));\n static inline optab init_optabv\tPARAMS ((enum rtx_code));\n+static inline int complex_part_zero_p PARAMS ((rtx, enum mode_class,\n+\t\t\t\t\t\tenum machine_mode));\n static void init_libfuncs PARAMS ((optab, int, int, const char *, int));\n static void init_integral_libfuncs PARAMS ((optab, const char *, int));\n static void init_floating_libfuncs PARAMS ((optab, const char *, int));\n@@ -212,6 +214,22 @@ widen_operand (op, mode, oldmode, unsignedp, no_extend)\n   return result;\n }\n \f\n+/* Test whether either the real or imaginary part of a complex floating\n+   point number is 0.0, so that it can be ignored (when compiling\n+   with -funsafe-math-optimizations). */\n+\n+static inline int\n+complex_part_zero_p (part, class, submode)\n+  rtx part;\n+  enum mode_class class;\n+  enum machine_mode submode;\n+{\n+  return part == 0 ||\n+\t  (flag_unsafe_math_optimizations\n+\t   && class == MODE_COMPLEX_FLOAT\n+\t   && part == CONST0_RTX (submode));\n+}\n+\n /* Generate code to perform a straightforward complex divide.  */\n \n static int\n@@ -265,7 +283,7 @@ expand_cmplxdiv_straight (real0, real1, imag0, imag1, realr, imagr, submode,\n   if (divisor == 0)\n     return 0;\n \n-  if (imag0 == 0)\n+  if (complex_part_zero_p (imag0, class, submode))\n     {\n       /* Mathematically, ((a)(c-id))/divisor.  */\n       /* Computationally, (a+i0) / (c+id) = (ac/(cc+dd)) + i(-ad/(cc+dd)).  */\n@@ -431,7 +449,7 @@ expand_cmplxdiv_wide (real0, real1, imag0, imag1, realr, imagr, submode,\n \n   /* Calculate dividend.  */\n \n-  if (imag0 == 0)\n+  if (complex_part_zero_p (imag0, class, submode))\n     {\n       real_t = real0;\n \n@@ -1657,7 +1675,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \tcase DIV:\n \t  /* (a+ib) / (c+id) = ((ac+bd)/(cc+dd)) + i((bc-ad)/(cc+dd)) */\n \t  \n-\t  if (imag1 == 0)\n+\t  if (complex_part_zero_p (imag1, class, submode))\n \t    {\n \t      /* (a+ib) / (c+i0) = (a/c) + i(b/c) */\n "}]}