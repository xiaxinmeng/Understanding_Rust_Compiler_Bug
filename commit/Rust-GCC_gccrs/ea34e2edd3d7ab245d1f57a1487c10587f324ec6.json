{"sha": "ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzNGUyZWRkM2Q3YWIyNDVkMWY1N2ExNDg3YzEwNTg3ZjMyNGVjNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-21T00:16:57Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-21T00:16:57Z"}, "message": "Daily bump.", "tree": {"sha": "e664c68b8691e94be2f35ea3b60bd53c1d81f56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e664c68b8691e94be2f35ea3b60bd53c1d81f56a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/comments", "author": null, "committer": null, "parents": [{"sha": "5a3bf28119c7a8d2d43d26b5eee588ee0e4472e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3bf28119c7a8d2d43d26b5eee588ee0e4472e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3bf28119c7a8d2d43d26b5eee588ee0e4472e5"}], "stats": {"total": 356, "additions": 355, "deletions": 1}, "files": [{"sha": "26b9963845df0938e283ca6e287ec82859f00d9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,130 @@\n+2021-05-20  Clement Chigot  <clement.chigot@atos.net>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* collect2.c (scan_prog_file): Issue non-fatal warning for\n+\tnon-COFF files.\n+\n+2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/invoke.texi (-Wno-c++11-extensions)\n+\t(-Wno-c++14-extensions, -Wno-c++17-extensions)\n+\t(-Wno-c++20-extensions, -Wno-c++23-extensions): Document\n+\tnew options.\n+\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* config/c6x/c6x.c (c6x_output_file_unwind): Use dwarf_debuginfo_p.\n+\t* config/darwin.c (darwin_override_options): Likewise.\n+\t* config/i386/cygming.h (DBX_REGISTER_NUMBER): Likewise.\n+\t* config/i386/darwin.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DWARF2_FRAME_REG_OUT): Likewise.\n+\t* config/mips/mips.c (mips_output_filename): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_declare_function_name):\n+\tLikewise.\n+\t(rs6000_dbx_register_number): Likewise.\n+\t* dbxout.c: Include flags.h.\n+\t* dwarf2cfi.c (cfi_label_required_p): Likewise.\n+\t(dwarf2out_do_frame): Likewise.\n+\t* except.c: Include flags.h.\n+\t* final.c (dwarf2_debug_info_emitted_p): Likewise.\n+\t(final_scan_insn_1): Likewise.\n+\t* flags.h (dwarf_debuginfo_p): New function declaration.\n+\t* opts.c (dwarf_debuginfo_p): New function definition.\n+\t* targhooks.c (default_debug_unwind_info): Use dwarf_debuginfo_p.\n+\t* toplev.c (process_options): Likewise.\n+\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* common.opt: Change type to support bitmasks.\n+\t* flag-types.h (enum debug_info_type): Rename enumerator constants.\n+\t(NO_DEBUG): New bitmask.\n+\t(DBX_DEBUG): Likewise.\n+\t(DWARF2_DEBUG): Likewise.\n+\t(XCOFF_DEBUG): Likewise.\n+\t(VMS_DEBUG): Likewise.\n+\t(VMS_AND_DWARF2_DEBUG): Likewise.\n+\t* flags.h (debug_set_to_format): New function declaration.\n+\t(debug_set_count): Likewise.\n+\t(debug_set_names): Likewise.\n+\t* opts.c (debug_type_masks): Array of bitmasks for debug formats.\n+\t(debug_set_to_format): New function definition.\n+\t(debug_set_count): Likewise.\n+\t(debug_set_names): Likewise.\n+\t(set_debug_level): Update access to debug_type_names.\n+\t* toplev.c: Likewise.\n+\n+2021-05-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100684\n+\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Handle C++ lambda.\n+\n+2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100701\n+\t* config/i386/i386.md (isa): Remove x64_bmi.\n+\t(enabled): Remove x64_bmi.\n+\t* config/i386/mmx.md (mmx_andnot<MMXMODEI:mode>3):\n+\tRemove general register alternative.\n+\t(*andnot<VI_32:mode>3): Ditto.\n+\t(*mmx_<any_logic:code><MMXMODEI:mode>3): Ditto.\n+\t(*<any_logic:code><VI_32:mode>3): Ditto.\n+\n+2021-05-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/arm/arm.c: Include head files tree-vectorizer.h and\n+\tcfgloop.h.\n+\n+2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/mmx.md (Yv_Yw): Revert adding V4QI and V2HI modes.\n+\t(*<plusminus:insn><VI_32:mode>3): Use Yw instad of <Yv_Yw> constrint.\n+\t(<s>mulv4hi3_highpart): New expander.\n+\t(*<s>mulv2hi3_highpart): New insn pattern.\n+\t(<s>mulv2hi3_higpart): New expander.\n+\t(*<any_shift:insn>v2hi3): New insn pattern.\n+\t(<any_shift:insn>v2hi3): New expander.\n+\t* config/i386/sse.md (smulhrsv2hi3): New expander.\n+\t(*smulhrsv2hi3): New insn pattern.\n+\n+2021-05-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* doc/invoke.texi (vect-inner-loop-cost-factor): Document new\n+\tparameter.\n+\t* params.opt (vect-inner-loop-cost-factor): New.\n+\t* targhooks.c (default_add_stmt_cost): Replace hardcoded factor\n+\t50 with LOOP_VINFO_INNER_LOOP_COST_FACTOR, include head file\n+\ttree-vectorizer.h and its required ones.\n+\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Replace\n+\thardcoded factor 50 with LOOP_VINFO_INNER_LOOP_COST_FACTOR.\n+\t* config/arm/arm.c (arm_add_stmt_cost): Likewise.\n+\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_add_stmt_cost): Likewise.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n+\tLikewise.\n+\t(_loop_vec_info::_loop_vec_info): Init inner_loop_cost_factor.\n+\t* tree-vectorizer.h (_loop_vec_info): Add inner_loop_cost_factor.\n+\t(LOOP_VINFO_INNER_LOOP_COST_FACTOR): New macro.\n+\n+2021-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\t    Torbj\u00f6rn Svensson  <torbjorn.svensson@st.com>\n+\n+\tPR c/42579\n+\t* doc/cpp.texi (Common Predefined Macros): Document __FILE_NAME__.\n+\n+2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* gimplify.c (gimplify_scan_omp_clauses) <case OMP_CLAUSE_LINEAR>: For\n+\texplicit linear clause when combined with target, make it map(tofrom:)\n+\tinstead of no clause or firstprivate.\n+\n+2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* match.pd ((X & Y) == X -> (X & ~Y) == 0): Simplify even in presence\n+\tof integral conversions.\n+\n 2021-05-19  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range.cc (fur_source::get_operand): New."}, {"sha": "6e5d5d3afec7dd9b69e0535ed7b943f8148e1953", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1 +1 @@\n-20210520\n+20210521"}, {"sha": "6dc0400c955e0356e6d57b4bbcbf2ea64d176bdc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,20 @@\n+2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c.opt (Wc++11-extensions, Wc++14-extensions)\n+\t(Wc++17-extensions, Wc++20-extensions, Wc++23-extensions): New\n+\toptions.\n+\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* c-lex.c (init_c_lex): Use dwarf_debuginfo_p.\n+\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* c-opts.c (c_common_post_options): Adjust access to debug_type_names.\n+\t* c-pch.c (struct c_pch_validity): Use type uint32_t.\n+\t(pch_init): Renamed member.\n+\t(c_common_valid_pch): Adjust access to debug_type_names.\n+\n 2021-05-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/100619"}, {"sha": "d20edfbed8c7dd313aeef292c13b3202b1582d80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,54 @@\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (reference_binding): Check for designator.\n+\t(implicit_conversion_1, build_special_member_call): Likewise.\n+\t* decl.c (reshape_init_r): Likewise.\n+\t* pt.c (do_class_deduction): Likewise.\n+\t* typeck2.c (digest_init_r): Likewise.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100489\n+\t* decl.c (reshape_init_class): Handle designator for\n+\tmember of anonymous aggregate here.\n+\t* typeck2.c (process_init_constructor_record): Not here.\n+\n+2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* call.c (maybe_warn_array_conv): Use new warning option.\n+\t* decl.c (mark_inline_variable, grokdeclarator): Likewise.\n+\t* error.c (maybe_warn_cpp0x): Likewise.\n+\t* parser.c (cp_parser_primary_expression)\n+\t(cp_parser_unqualified_id)\n+\t(cp_parser_pseudo_destructor_name)\n+\t(cp_parser_lambda_introducer)\n+\t(cp_parser_lambda_declarator_opt)\n+\t(cp_parser_selection_statement)\n+\t(cp_parser_init_statement)\n+\t(cp_parser_decomposition_declaration)\n+\t(cp_parser_function_specifier_opt)\n+\t(cp_parser_static_assert)\n+\t(cp_parser_namespace_definition)\n+\t(cp_parser_using_declaration)\n+\t(cp_parser_asm_definition)\n+\t(cp_parser_ctor_initializer_opt_and_function_body)\n+\t(cp_parser_initializer_list)\n+\t(cp_parser_type_parameter_key)\n+\t(cp_parser_member_declaration)\n+\t(cp_parser_try_block)\n+\t(cp_parser_std_attribute_spec): Likewise.\n+\t* pt.c (check_template_variable): Likewise.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100634\n+\t* pt.c (invalid_nontype_parm_type_p): Return true for COMPLEX_TYPE.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100659\n+\t* cp-tree.h (CONST_DECL_USING_P): Check for null TREE_TYPE.\n+\n 2021-05-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100367"}, {"sha": "7fabe76387420bd4068638493d0fcbf55a5a4ea4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,7 @@\n+2021-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_clauses): Support map-type-modifier 'close'.\n+\n 2021-05-18  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/100642"}, {"sha": "7ae02afc679e2ae45fa3fab3383e82a8c1d6ebf1", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,8 @@\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* objc-act.c (synth_module_prologue): Use uint32_t instead of enum\n+\tdebug_info_type.\n+\n 2021-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* objc-act.c (objc_string_ref_type_p): Use startswith"}, {"sha": "03db56904233207b65628754345afb18ebd6b508", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,85 @@\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/desig19.C: New test.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100489\n+\t* g++.dg/cpp2a/desig18.C: New test.\n+\n+2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* gcc.dg/pch/valid-1.c: Adjust diagnostic message in testcase.\n+\t* lib/dg-pch.exp: Adjust diagnostic message.\n+\n+2021-05-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100684\n+\t* g++.dg/warn/Wnonnull13.C: New test.\n+\t* g++.dg/warn/Wnonnull14.C: New test.\n+\t* g++.dg/warn/Wnonnull15.C: New test.\n+\n+2021-05-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* g++.dg/modules/omp-1_c.C: Fix testcase.\n+\n+2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100701\n+\t* gcc.target/i386/pr100701.c: New test.\n+\n+2021-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/map-6.f90: New test.\n+\t* gfortran.dg/gomp/map-7.f90: New test.\n+\t* gfortran.dg/gomp/map-8.f90: New test.\n+\n+2021-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR testsuite/96488\n+\t* gnat.dg/unchecked_convert5.adb: Do not run on PowerPC64 LE.\n+\t* gnat.dg/unchecked_convert6.adb: Likewise.\n+\n+2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.target/i386/pr100637-1w.c (shl, ashr, lshr): New tests.\n+\n+2021-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\t    Torbj\u00f6rn Svensson  <torbjorn.svensson@st.com>\n+\n+\tPR c/42579\n+\t* c-c++-common/spellcheck-reserved.c: Add tests for __FILE_NAME__.\n+\t* c-c++-common/cpp/file-name-1.c: New test.\n+\n+2021-05-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/96983\n+\t* gfortran.dg/pr96711.f90: Use 2**digit(x) instead of a hard-coded value;\n+\tadd comments regarding what the code does.\n+\n+2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-c++-common/gomp/pr99928-4.c: Remove all xfails.\n+\t* c-c++-common/gomp/pr99928-5.c: Likewise.\n+\n+2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/100646\n+\t* gcc.dg/cpp/pr100646-1.c: New test.\n+\t* gcc.dg/cpp/pr100646-2.c: New test.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100634\n+\t* g++.dg/cpp2a/nontype-complex1.C: New test.\n+\n+2021-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100659\n+\t* g++.dg/parse/access13.C: New test.\n+\n 2021-05-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/100619"}, {"sha": "ea3bec886143a8509e02db21052d4decd109ba69", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,17 @@\n+2021-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\t    Torbj\u00f6rn Svensson  <torbjorn.svensson@st.com>\n+\n+\tPR c/42579\n+\t* include/cpplib.h (cpp_builtin_type): Add BT_FILE_NAME entry.\n+\t* init.c (builtin_array): Likewise.\n+\t* macro.c (_cpp_builtin_macro_text): Add support for BT_FILE_NAME.\n+\n+2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/100646\n+\t* lex.c (cpp_directive_only_process): Treat end of file as termination\n+\tfor !is_block comments.\n+\n 2021-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/100392"}, {"sha": "58e0bb28c182036568b0dd0f487ae955d86e9425", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea34e2edd3d7ab245d1f57a1487c10587f324ec6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea34e2edd3d7ab245d1f57a1487c10587f324ec6", "patch": "@@ -1,3 +1,57 @@\n+2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.tcc (__representable_as_double)\n+\t(__p1_representable_as_double): Add \"\" to static asserts.\n+\n+2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100676\n+\t* include/bits/c++config (__glibcxx_assert_1): Rename to ...\n+\t(__glibcxx_constexpr_assert): ... this.\n+\t(__glibcxx_assert_impl): Use __glibcxx_constexpr_assert.\n+\t(__glibcxx_assert): Define as either __glibcxx_constexpr_assert\n+\tor __glibcxx_assert_impl.\n+\t(__glibcxx_assert_2): Remove\n+\t* include/debug/macros.h (_GLIBCXX_DEBUG_VERIFY_AT_F): Use\n+\t__glibcxx_constexpr_assert instead of __glibcxx_assert_1.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/back_constexpr_neg.cc:\n+\tAdjust expected error.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_constexpr_neg.cc:\n+\tLikewise.\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/back_constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/back_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/front_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/index_op_neg.cc: Likewise.\n+\n+2021-05-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100639\n+\t* include/bits/stl_iterator.h (reverse_iterator::difference_type):\n+\tIn C++20 mode, define in terms of iter_difference_t as per P0896R4.\n+\t(reverse_iterator::reference): Likewise, but with iter_reference_t.\n+\t(reverse_iterator::value_type): Likewise, but with iter_value_t.\n+\t* testsuite/std/ranges/adaptors/reverse.cc (test08): New test.\n+\t* testsuite/24_iterators/reverse_iterator/100639.cc: New test.\n+\n+2021-05-20  Joern Rennecke  <joern.rennecke@riscy-ip.com>\n+\n+\tPR libstdc++/100361\n+\t* include/std/charconv (to_chars): Hide the overloads for\n+\tfloating-point types for 16 bit targets.\n+\t* src/c++17/floating_to_chars.cc: Don't compile for 16 bit targets.\n+\t* testsuite/20_util/to_chars/double.cc: Run this test only on\n+\tsize32plus targets.\n+\t* testsuite/20_util/to_chars/float.cc: Likewise.\n+\t* testsuite/20_util/to_chars/long_double.cc: Likewise.\n+\n 2021-05-18  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/100631"}]}