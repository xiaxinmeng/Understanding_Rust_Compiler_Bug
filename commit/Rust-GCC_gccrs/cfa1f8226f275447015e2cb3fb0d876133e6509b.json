{"sha": "cfa1f8226f275447015e2cb3fb0d876133e6509b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhMWY4MjI2ZjI3NTQ0NzAxNWUyY2IzZmIwZDg3NjEzM2U2NTA5Yg==", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-06-18T11:50:36Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-06-18T11:57:25Z"}, "message": "gcc/configure.ac: fix register issue for global_load assembler functions\n\ngcc/ChangeLog:\n\n\t* config.in: Regenerate.\n\t* config/gcn/gcn.c (print_operand_address): Fix for global_load assembler\n\tfunctions.\n\t* configure: Regenerate.\n\t* configure.ac: Fix for global_load assembler functions.", "tree": {"sha": "5947605300c0e00ce0b31ee33cf169f19ea345aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5947605300c0e00ce0b31ee33cf169f19ea345aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfa1f8226f275447015e2cb3fb0d876133e6509b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa1f8226f275447015e2cb3fb0d876133e6509b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa1f8226f275447015e2cb3fb0d876133e6509b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa1f8226f275447015e2cb3fb0d876133e6509b/comments", "author": null, "committer": null, "parents": [{"sha": "17a4bee01c3b29c5ccdd39f34384521e5d44135b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a4bee01c3b29c5ccdd39f34384521e5d44135b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a4bee01c3b29c5ccdd39f34384521e5d44135b"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "18e627141ccb19876134d47a68657ef36686d4bf", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=cfa1f8226f275447015e2cb3fb0d876133e6509b", "patch": "@@ -1431,6 +1431,12 @@\n #endif\n \n \n+/* Define if your assembler has fixed global_load functions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GCN_ASM_GLOBAL_LOAD_FIXED\n+#endif\n+\n+\n /* Define to 1 if you have the `getchar_unlocked' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETCHAR_UNLOCKED"}, {"sha": "54a1c0bf38d23a0262c211648f69c859f71850e3", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=cfa1f8226f275447015e2cb3fb0d876133e6509b", "patch": "@@ -5481,13 +5481,22 @@ print_operand_address (FILE *file, rtx mem)\n \t      if (vgpr_offset == NULL_RTX)\n \t\t/* In this case, the vector offset is zero, so we use the first\n \t\t   lane of v1, which is initialized to zero.  */\n-\t\tfprintf (file, \"v[1:2]\");\n+\t\t{\n+\t\t  if (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n+\t\t    fprintf (file, \"v1\");\n+\t\t  else\n+\t\t    fprintf (file, \"v[1:2]\");\n+\t\t}\n \t      else if (REG_P (vgpr_offset)\n \t\t       && VGPR_REGNO_P (REGNO (vgpr_offset)))\n \t\t{\n-\t\t  fprintf (file, \"v[%d:%d]\",\n-\t\t\t   REGNO (vgpr_offset) - FIRST_VGPR_REG,\n-\t\t\t   REGNO (vgpr_offset) - FIRST_VGPR_REG + 1);\n+\t\t  if (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n+\t\t    fprintf (file, \"v%d\",\n+\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG);\n+\t\t  else\n+\t\t    fprintf (file, \"v[%d:%d]\",\n+\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG,\n+\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG + 1);\n \t\t}\n \t      else\n \t\toutput_operand_lossage (\"bad ADDR_SPACE_GLOBAL address\");"}, {"sha": "dd0194a57f45841d6d24d748d52fdcfd5ddb7b50", "filename": "gcc/configure", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=cfa1f8226f275447015e2cb3fb0d876133e6509b", "patch": "@@ -28909,6 +28909,33 @@ case \"$target\" in\n     ;;\n esac\n \n+# This tests if the assembler supports two registers for global_load functions\n+# (like in LLVM versions <12) or one register (like in LLVM 12).\n+case \"$target\" in\n+  amdgcn-* | gcn-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler fix for global_load functions\" >&5\n+$as_echo_n \"checking assembler fix for global_load functions... \" >&6; }\n+    gcc_cv_as_gcn_global_load_fixed=yes\n+    if test x$gcc_cv_as != x; then\n+      cat > conftest.s <<EOF\n+\tglobal_store_dwordx2    v[1:2], v[4:5], s[14:15]\n+EOF\n+      if $gcc_cv_as -triple=amdgcn--amdhsa -filetype=obj -mcpu=gfx900 -o conftest.o conftest.s > /dev/null 2>&1; then\n+        gcc_cv_as_gcn_global_load_fixed=no\n+      fi\n+      rm -f conftest.s conftest.o conftest\n+    fi\n+    global_load_fixed=`if test x$gcc_cv_as_gcn_global_load_fixed = xyes; then echo 1; else echo 0; fi`\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GCN_ASM_GLOBAL_LOAD_FIXED $global_load_fixed\n+_ACEOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_global_load_fixed\" >&5\n+$as_echo \"$gcc_cv_as_gcn_global_load_fixed\" >&6; }\n+    ;;\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}, {"sha": "5f30f80833e9c4285a4c497684ee82a842eb6769", "filename": "gcc/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa1f8226f275447015e2cb3fb0d876133e6509b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=cfa1f8226f275447015e2cb3fb0d876133e6509b", "patch": "@@ -5357,6 +5357,28 @@ case \"$target\" in\n     ;;\n esac\n \n+# This tests if the assembler supports two registers for global_load functions\n+# (like in LLVM versions <12) or one register (like in LLVM 12).\n+case \"$target\" in\n+  amdgcn-* | gcn-*)\n+    AC_MSG_CHECKING(assembler fix for global_load functions)\n+    gcc_cv_as_gcn_global_load_fixed=yes\n+    if test x$gcc_cv_as != x; then\n+      cat > conftest.s <<EOF\n+\tglobal_store_dwordx2    v[[1:2]], v[[4:5]], s[[14:15]]\n+EOF\n+      if $gcc_cv_as -triple=amdgcn--amdhsa -filetype=obj -mcpu=gfx900 -o conftest.o conftest.s > /dev/null 2>&1; then\n+        gcc_cv_as_gcn_global_load_fixed=no\n+      fi\n+      rm -f conftest.s conftest.o conftest\n+    fi\n+    global_load_fixed=`if test x$gcc_cv_as_gcn_global_load_fixed = xyes; then echo 1; else echo 0; fi`\n+    AC_DEFINE_UNQUOTED(HAVE_GCN_ASM_GLOBAL_LOAD_FIXED, $global_load_fixed,\n+      [Define if your assembler has fixed global_load functions.])\n+    AC_MSG_RESULT($gcc_cv_as_gcn_global_load_fixed)\n+    ;;\n+esac\n+\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n # info to the output file.  So, as supported targets are added to gas 2.11,"}]}