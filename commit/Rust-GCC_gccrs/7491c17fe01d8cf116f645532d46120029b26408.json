{"sha": "7491c17fe01d8cf116f645532d46120029b26408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5MWMxN2ZlMDFkOGNmMTE2ZjY0NTUzMmQ0NjEyMDAyOWIyNjQwOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-22T12:40:12Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-22T12:40:12Z"}, "message": "Fix TOP N counter update.\n\n\tPR tree-optimization/92924\n\t* libgcov-profiler.c (__gcov_topn_values_profiler_body): First\n\ttry to find an existing value, then find an empty slot\n\tif not found.", "tree": {"sha": "37104109f9c68904d0fe7fcb04f4afd6fb790685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37104109f9c68904d0fe7fcb04f4afd6fb790685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7491c17fe01d8cf116f645532d46120029b26408", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl4oQqwACgkQTcGC3A+n\nN4ViLgf/fQsZ/tKeJLDCkSAzG1yu1VLoH+F9NwCwOOaUD0mOSE0uW6v8YU2fs7Z0\ned/z6YrZqEsUNAkOD/A8o1r1lSmxk9ImNvhgRbWh6HpcKGkVtRyGvzcdpVbfeq5j\n7HJ+FJS9wpgm2PZhKeSJJj6vVj9b8Isyft97nx9C1NjNgYE+55ttNEBjsQH0BLf+\nQ0M94huMhxvDffsqlAX6IvwISZaIeT4jp64JoR7e4cjQZJ9an3en0QbV95lmKbQz\nFdGbu5/1Usnoeq6rKwMgYxi1il42F+gN2ajElZXzfbpt45OG6F7Pydf8zttIoNSt\nULLM3Sv66MD/AthZEwbFlugv1DUPLg==\n=TvbE\n-----END PGP SIGNATURE-----", "payload": "tree 37104109f9c68904d0fe7fcb04f4afd6fb790685\nparent 9c4fb56578e0a66ec222e58bb89c1e8bc742ef5e\nauthor Martin Liska <mliska@suse.cz> 1579696812 +0100\ncommitter Martin Liska <mliska@suse.cz> 1579696812 +0100\n\nFix TOP N counter update.\n\n\tPR tree-optimization/92924\n\t* libgcov-profiler.c (__gcov_topn_values_profiler_body): First\n\ttry to find an existing value, then find an empty slot\n\tif not found.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7491c17fe01d8cf116f645532d46120029b26408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7491c17fe01d8cf116f645532d46120029b26408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7491c17fe01d8cf116f645532d46120029b26408/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4fb56578e0a66ec222e58bb89c1e8bc742ef5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4fb56578e0a66ec222e58bb89c1e8bc742ef5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4fb56578e0a66ec222e58bb89c1e8bc742ef5e"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "76c994655295dd15befb1a6f560d493d06d21eb8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7491c17fe01d8cf116f645532d46120029b26408/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7491c17fe01d8cf116f645532d46120029b26408/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7491c17fe01d8cf116f645532d46120029b26408", "patch": "@@ -1,3 +1,10 @@\n+2020-01-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/92924\n+\t* libgcov-profiler.c (__gcov_topn_values_profiler_body): First\n+\ttry to find an existing value, then find an empty slot\n+\tif not found.\n+\n 2020-01-22  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/92924"}, {"sha": "58784d18477b84e5b709eb2b42de3f4b669ec921", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7491c17fe01d8cf116f645532d46120029b26408/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7491c17fe01d8cf116f645532d46120029b26408/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=7491c17fe01d8cf116f645532d46120029b26408", "patch": "@@ -119,35 +119,37 @@ __gcov_topn_values_profiler_body (gcov_type *counters, gcov_type value,\n \n   ++counters;\n \n+  /* First try to find an existing value.  */\n+  int empty_counter = -1;\n+\n   for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n+    if (value == counters[2 * i])\n+      {\n+\tif (use_atomic)\n+\t  __atomic_fetch_add (&counters[2 * i + 1], GCOV_TOPN_VALUES,\n+\t\t\t      __ATOMIC_RELAXED);\n+\telse\n+\t  counters[2 * i + 1] += GCOV_TOPN_VALUES;\n+\treturn;\n+      }\n+    else if (counters[2 * i + 1] <= 0)\n+      empty_counter = i;\n+\n+  /* Find an empty slot for a new value.  */\n+  if (empty_counter != -1)\n     {\n-      if (value == counters[2 * i])\n-\t{\n-\t  if (use_atomic)\n-\t    __atomic_fetch_add (&counters[2 * i + 1], GCOV_TOPN_VALUES,\n-\t\t\t\t__ATOMIC_RELAXED);\n-\t  else\n-\t    counters[2 * i + 1] += GCOV_TOPN_VALUES;\n-\t  return;\n-\t}\n-      else if (counters[2 * i + 1] <= 0)\n-\t{\n-\t  /* We found an empty slot.  */\n-\t  counters[2 * i] = value;\n-\t  counters[2 * i + 1] = GCOV_TOPN_VALUES;\n-\t  return;\n-\t}\n+      counters[2 * empty_counter] = value;\n+      counters[2 * empty_counter + 1] = GCOV_TOPN_VALUES;\n+      return;\n     }\n \n   /* We haven't found an empty slot, then decrement all\n      counter values by one.  */\n   for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n-    {\n-      if (use_atomic)\n-\t__atomic_fetch_sub (&counters[2 * i + 1], 1, __ATOMIC_RELAXED);\n-      else\n-\tcounters[2 * i + 1]--;\n-    }\n+    if (use_atomic)\n+      __atomic_fetch_sub (&counters[2 * i + 1], 1, __ATOMIC_RELAXED);\n+    else\n+      counters[2 * i + 1]--;\n }\n \n #ifdef L_gcov_topn_values_profiler"}]}