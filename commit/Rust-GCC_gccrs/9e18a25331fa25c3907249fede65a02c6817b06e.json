{"sha": "9e18a25331fa25c3907249fede65a02c6817b06e", "node_id": "C_kwDOANBUbNoAKDllMThhMjUzMzFmYTI1YzM5MDcyNDlmZWRlNjVhMDJjNjgxN2IwNmU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-07T15:11:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T22:58:19Z"}, "message": "libstdc++: Allow std::condition_variable waits to be cancelled [PR103382]\n\nstd::condition_variable::wait(unique_lock<mutex>&) is incorrectly marked\nnoexcept, which means that the __forced_unwind exception used by NPTL\ncancellation will terminate the process. It should allow exceptions to\npass through, so that a thread can be cleanly cancelled when waiting on\na condition variable.\n\nThe new behaviour is exported as a new version of the symbol, to avoid\nan ABI break for existing code linked to the non-throwing definition of\nthe function. Code linked against older releases will have a reference\nto the @GLIBCXX_3.4.11 version, andcode compiled against the new\nlibstdc++ will get a reference to the @@GLIBCXX_3.4.30 version.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103382\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.11): Do not export old\n\tsymbol if .symver renaming is supported.\n\t(GLIBCXX_3.4.30): Export new symbol if .symver renaming is\n\tsupported.\n\t* doc/xml/manual/evolution.xml: Document change.\n\t* doc/html/manual/api.html: Regenerate.\n\t* include/bits/std_mutex.h (__condvar::wait, __condvar::wait_until):\n\tRemove noexcept.\n\t* include/std/condition_variable (condition_variable::wait):\n\tLikewise.\n\t* src/c++11/condition_variable.cc (condition_variable::wait):\n\tLikewise.\n\t* src/c++11/compatibility-condvar.cc (__nothrow_wait_cv::wait):\n\tDefine nothrow wrapper around std::condition_variable::wait and\n\texport the old symbol as an alias to it.\n\t* testsuite/30_threads/condition_variable/members/103382.cc: New test.", "tree": {"sha": "5ed6fb40f31062cac2fa9424215e7e2c3a3fccb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ed6fb40f31062cac2fa9424215e7e2c3a3fccb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e18a25331fa25c3907249fede65a02c6817b06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e18a25331fa25c3907249fede65a02c6817b06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e18a25331fa25c3907249fede65a02c6817b06e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e18a25331fa25c3907249fede65a02c6817b06e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5fa0837e464b595a3d63766060bae1c9ac5ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5fa0837e464b595a3d63766060bae1c9ac5ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5fa0837e464b595a3d63766060bae1c9ac5ccc"}], "stats": {"total": 131, "additions": 125, "deletions": 6}, "files": [{"sha": "b747351a1b9864a57155d172a82a7023d7fd9079", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -1285,7 +1285,6 @@ GLIBCXX_3.4.11 {\n     # condition_variable\n     _ZNSt18condition_variable10notify_allEv;\n     _ZNSt18condition_variable10notify_oneEv;\n-    _ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;\n     _ZNSt18condition_variableC1Ev;\n     _ZNSt18condition_variableC2Ev;\n     _ZNSt18condition_variableD1Ev;\n@@ -1295,6 +1294,12 @@ GLIBCXX_3.4.11 {\n     _ZNSt22condition_variable_anyD1Ev;\n     _ZNSt22condition_variable_anyD2Ev;\n \n+#ifndef HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT\n+    # The original definition of this symbol gets versioned as @GLIBCXX_3.4.11\n+    # if \".symver\" is supported, or as @@GLIBCXX_3.4.11 otherwise.\n+    _ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;\n+#endif\n+\n     # thread\n     _ZNSt6thread4joinEv;\n     _ZNSt6thread6detachEv;\n@@ -2401,6 +2406,11 @@ GLIBCXX_3.4.30 {\n \n     _ZSt21__glibcxx_assert_fail*;\n \n+#ifdef HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT\n+    # The new definition of this symbol gets versioned as @@GLIBCXX_3.4.30\n+    _ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;\n+#endif\n+\n } GLIBCXX_3.4.29;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "1c7fdaa7394c4550e7e1e36dddb44fae3d7056b1", "filename": "libstdc++-v3/doc/html/manual/api.html", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -450,4 +450,9 @@\n For the <code class=\"literal\">new</code> option, <code class=\"classname\">std::allocator</code>\n no longer derives from <code class=\"classname\">__gnu_cxx::new_allocator</code>;\n they both derive from <code class=\"classname\">std::__new_allocator</code> instead.\n+</p><p>\n+<code class=\"function\">std::condition_variable::wait</code> changed to be\n+<code class=\"code\">noexcept(false)</code> to allow thread cancellation exceptions to\n+be thrown from <code class=\"function\">pthread_cond_wait</code> without aborting\n+the process.\n </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"abi.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"backwards.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">ABI Policy and Guidelines\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Backwards Compatibility</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "34e44ee93e40a32939506ccfb161a3fdac951f37", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -1041,6 +1041,13 @@ no longer derives from <classname>__gnu_cxx::new_allocator</classname>;\n they both derive from <classname>std::__new_allocator</classname> instead.\n </para>\n \n+<para>\n+<function>std::condition_variable::wait</function> changed to be\n+<code>noexcept(false)</code> to allow thread cancellation exceptions to\n+be thrown from <function>pthread_cond_wait</function> without aborting\n+the process.\n+</para>\n+\n </section>\n \n </section>"}, {"sha": "6618a54396f5e0e450930e43a7f2df5b750afcec", "filename": "libstdc++-v3/include/bits/std_mutex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -149,22 +149,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Expects: Calling thread has locked __m.\n     void\n-    wait(mutex& __m) noexcept\n+    wait(mutex& __m)\n     {\n       int __e __attribute__((__unused__))\n \t= __gthread_cond_wait(&_M_cond, __m.native_handle());\n       __glibcxx_assert(__e == 0);\n     }\n \n     void\n-    wait_until(mutex& __m, timespec& __abs_time) noexcept\n+    wait_until(mutex& __m, timespec& __abs_time)\n     {\n       __gthread_cond_timedwait(&_M_cond, __m.native_handle(), &__abs_time);\n     }\n \n #ifdef _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT\n     void\n-    wait_until(mutex& __m, clockid_t __clock, timespec& __abs_time) noexcept\n+    wait_until(mutex& __m, clockid_t __clock, timespec& __abs_time)\n     {\n       pthread_cond_clockwait(&_M_cond, __m.native_handle(), __clock,\n \t\t\t     &__abs_time);"}, {"sha": "3930cf487e96f54fdad2141da8abebd8b3cdce54", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -92,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     notify_all() noexcept;\n \n     void\n-    wait(unique_lock<mutex>& __lock) noexcept;\n+    wait(unique_lock<mutex>& __lock);\n \n     template<typename _Predicate>\n       void"}, {"sha": "07c39d48f5ac155cbc47c44d0f444f6069f769f3", "filename": "libstdc++-v3/src/c++11/compatibility-condvar.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-condvar.cc?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -54,4 +54,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n+#if ! _GLIBCXX_INLINE_VERSION\n+// XXX GLIBCXX_ABI Deprecated\n+// gcc-12.1\n+// std::condition_variable::wait changed to noexcept(false)\n+#if defined(_GLIBCXX_SYMVER_GNU) && defined(_GLIBCXX_SHARED) \\\n+    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE) \\\n+    && defined(_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT)\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+struct __nothrow_wait_cv : std::condition_variable\n+{\n+  void wait(std::unique_lock<std::mutex>&) noexcept;\n+};\n+\n+__attribute__((used))\n+void\n+__nothrow_wait_cv::wait(std::unique_lock<std::mutex>& lock) noexcept\n+{\n+  this->condition_variable::wait(lock);\n+}\n+} // namespace __gnu_cxx\n+\n+// Export a noexcept wrapper around std::condition_variable::wait\n+// with the original @GLIBCXX_3.4.11 symbol version.\n+asm(\n+  \".symver _ZN9__gnu_cxx17__nothrow_wait_cv4waitERSt11unique_lockISt5mutexE,\"\n+  \"_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE@GLIBCXX_3.4.11\"\n+);\n+#endif\n+#endif\n+\n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "2d7b8a19b9d6d483cd685e4f65e6328a5e6d4d24", "filename": "libstdc++-v3/src/c++11/condition_variable.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -36,7 +36,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   condition_variable::~condition_variable() noexcept = default;\n \n   void\n-  condition_variable::wait(unique_lock<mutex>& __lock) noexcept\n+  condition_variable::wait(unique_lock<mutex>& __lock)\n   {\n     _M_cond.wait(*__lock.mutex());\n   }"}, {"sha": "67396ebf323be37129dd4ad082de8dffc7c95e48", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/103382.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F103382.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e18a25331fa25c3907249fede65a02c6817b06e/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F103382.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F103382.cc?ref=9e18a25331fa25c3907249fede65a02c6817b06e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-pthread\" }\n+// { dg-do run { target { *-*-linux* *-*-gnu* } } }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+#include <condition_variable>\n+#include <chrono>\n+#include <mutex>\n+#include <thread>\n+\n+// PR libstdc++/103382\n+\n+template<typename F>\n+void\n+test_cancel(F wait)\n+{\n+  std::mutex m;\n+  std::condition_variable cv;\n+  bool waiting = false;\n+\n+  std::thread t([&] {\n+    std::unique_lock<std::mutex> lock(m);\n+    waiting = true;\n+    wait(cv, lock); // __forced_unwind exception should not terminate process.\n+  });\n+\n+  // Ensure the condition variable is waiting before we cancel.\n+  // This shouldn't be necessary because pthread_mutex_lock is not\n+  // a cancellation point, but no harm in making sure we test what\n+  // we intend to test: that cancel during a wait doesn't abort.\n+  while (true)\n+  {\n+    std::unique_lock<std::mutex> lock(m);\n+    if (waiting)\n+      break;\n+  }\n+\n+  pthread_cancel(t.native_handle());\n+  t.join();\n+}\n+\n+int main()\n+{\n+  test_cancel(\n+      [](std::condition_variable& cv, std::unique_lock<std::mutex>& l) {\n+\tcv.wait(l);\n+      });\n+\n+  test_cancel(\n+      [](std::condition_variable& cv, std::unique_lock<std::mutex>& l) {\n+\tcv.wait(l, []{ return false; });\n+      });\n+\n+  using mins = std::chrono::minutes;\n+\n+  test_cancel(\n+      [](std::condition_variable& cv, std::unique_lock<std::mutex>& l) {\n+\tcv.wait_for(l, mins(1));\n+      });\n+\n+  test_cancel(\n+      [](std::condition_variable& cv, std::unique_lock<std::mutex>& l) {\n+\tcv.wait_until(l, std::chrono::system_clock::now() + mins(1));\n+      });\n+}"}]}