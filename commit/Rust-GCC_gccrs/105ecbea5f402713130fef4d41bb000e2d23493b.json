{"sha": "105ecbea5f402713130fef4d41bb000e2d23493b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1ZWNiZWE1ZjQwMjcxMzEzMGZlZjRkNDFiYjAwMGUyZDIzNDkzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-02T09:45:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-02T12:38:28Z"}, "message": "tree-optimization/96028 - fix bogus externalizing of SLP node\n\nThis guards externalizing a SLP node when it fails to code generate\nto actually have scalar defs we can use.  It also makes failure\nto do so not fell the whole SLP instance but instead try this again\non the parent.\n\n2020-07-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96028\n\t* tree-vect-slp.c (vect_slp_convert_to_external): Make sure\n\twe have scalar stmts to use.\n\t(vect_slp_analyze_node_operations): When analyzing a child\n\tfailed try externalizing the parent node.", "tree": {"sha": "2e137197e42dc6b615ec4c8936235021e6511d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e137197e42dc6b615ec4c8936235021e6511d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105ecbea5f402713130fef4d41bb000e2d23493b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105ecbea5f402713130fef4d41bb000e2d23493b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105ecbea5f402713130fef4d41bb000e2d23493b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105ecbea5f402713130fef4d41bb000e2d23493b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053c88093a45f175f446eda009f3312e4e508514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053c88093a45f175f446eda009f3312e4e508514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053c88093a45f175f446eda009f3312e4e508514"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "eff68f76bc32d015e9efbb7ce13a45047e8ac3dd", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105ecbea5f402713130fef4d41bb000e2d23493b/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105ecbea5f402713130fef4d41bb000e2d23493b/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=105ecbea5f402713130fef4d41bb000e2d23493b", "patch": "@@ -2789,6 +2789,7 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n \n   if (!is_a <bb_vec_info> (vinfo)\n       || node == SLP_INSTANCE_TREE (node_instance)\n+      || !SLP_TREE_SCALAR_STMTS (node).exists ()\n       || vect_contains_pattern_stmt_p (SLP_TREE_SCALAR_STMTS (node)))\n     return false;\n \n@@ -2893,16 +2894,25 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n      doesn't result in any issue since we throw away the lvisited set\n      when we fail.  */\n   if (visited.contains (node)\n-      || lvisited.add (node))\n+      || lvisited.contains (node))\n     return true;\n \n+  bool res = true;\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    if (!vect_slp_analyze_node_operations (vinfo, child, node_instance,\n-\t\t\t\t\t   visited, lvisited, cost_vec))\n-      return false;\n+    {\n+      res = vect_slp_analyze_node_operations (vinfo, child, node_instance,\n+\t\t\t\t\t      visited, lvisited, cost_vec);\n+      if (!res)\n+\tbreak;\n+    }\n \n-  bool res = vect_slp_analyze_node_operations_1 (vinfo, node, node_instance,\n-\t\t\t\t\t\t cost_vec);\n+  if (res)\n+    {\n+      res = vect_slp_analyze_node_operations_1 (vinfo, node, node_instance,\n+\t\t\t\t\t\tcost_vec);\n+      if (res)\n+\tlvisited.add (node);\n+    }\n \n   /* When the node can be vectorized cost invariant nodes it references.\n      This is not done in DFS order to allow the refering node\n@@ -2944,13 +2954,12 @@ vect_slp_analyze_node_operations (vec_info *vinfo, slp_tree node,\n \t  vect_prologue_cost_for_slp (child, cost_vec);\n \t}\n \n-  /* If this node can't be vectorized, try pruning the tree here rather\n-     than felling the whole thing.  */\n+  /* If this node or any of its children can't be vectorized, try pruning\n+     the tree here rather than felling the whole thing.  */\n   if (!res && vect_slp_convert_to_external (vinfo, node, node_instance))\n     {\n       /* We'll need to revisit this for invariant costing and number\n \t of vectorized stmt setting.   */\n-      lvisited.remove (node);\n       res = true;\n     }\n "}]}