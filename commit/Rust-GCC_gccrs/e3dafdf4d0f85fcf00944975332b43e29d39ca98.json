{"sha": "e3dafdf4d0f85fcf00944975332b43e29d39ca98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkYWZkZjRkMGY4NWZjZjAwOTQ0OTc1MzMyYjQzZTI5ZDM5Y2E5OA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@swox.com", "date": "2007-12-13T09:19:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-13T09:19:11Z"}, "message": "i386.c (ix86_rtx_costs): Check op0 for ZERO_EXTEND when computing costs for widening multiplication.\n\n        * config/i386/i386.c (ix86_rtx_costs) [MULT]: Check op0 for\n        ZERO_EXTEND when computing costs for widening multiplication.\n\nFrom-SVN: r130809", "tree": {"sha": "074ba42562333ab2894f607e100d882f360bb9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074ba42562333ab2894f607e100d882f360bb9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3dafdf4d0f85fcf00944975332b43e29d39ca98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dafdf4d0f85fcf00944975332b43e29d39ca98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3dafdf4d0f85fcf00944975332b43e29d39ca98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dafdf4d0f85fcf00944975332b43e29d39ca98/comments", "author": null, "committer": null, "parents": [{"sha": "fe9e53421889ec5d5c360107a8b9c80b95cbebcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9e53421889ec5d5c360107a8b9c80b95cbebcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9e53421889ec5d5c360107a8b9c80b95cbebcf"}], "stats": {"total": 152, "additions": 69, "deletions": 83}, "files": [{"sha": "00bf7c63fc4cedae3398b12303c099143c296c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 82, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dafdf4d0f85fcf00944975332b43e29d39ca98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dafdf4d0f85fcf00944975332b43e29d39ca98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3dafdf4d0f85fcf00944975332b43e29d39ca98", "patch": "@@ -1,3 +1,8 @@\n+2007-12-13  Torbjorn Granlund  <tege@swox.com>\n+\n+\t* config/i386/i386.c (ix86_rtx_costs) [MULT]: Check op0 for\n+\tZERO_EXTEND when computing costs for widening multiplication.\n+\n 2007-12-13  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/30192\n@@ -92,8 +97,7 @@\n \tto extract the integer from operands[2].\n \t(vec_setv2di_internal): Likewise.\n \n-\t* config/arm/arm.c (arm_size_return_regs): Make return type\n-\tunsigned.\n+\t* config/arm/arm.c (arm_size_return_regs): Make return type unsigned.\n \t(arm_init_neon_builtins): Move code after declarations.\n \n 2007-12-10  Hans-Peter Nilsson  <hp@axis.com>\n@@ -535,8 +539,7 @@\n \t* tree-vrp.c (adjust_range_with_scev): Clear scev cache.\n \t(record_numbers_of_iterations): New function.\n \t(execute_vrp): Cache the numbers of iterations of loops.\n-\t* tree-scalar-evolution.c (scev_reset_except_niters):\n-\tNew function.\n+\t* tree-scalar-evolution.c (scev_reset_except_niters): New function.\n \t(scev_reset): Use scev_reset_except_niters.\n \t* tree-scalar-evolution.h (scev_reset_except_niters): Declare.\n \n@@ -1377,9 +1380,9 @@\n \tPR tree-optimization/33953\n \t* tree-vect-transform.c (vectorizable_operation): In case of SLP,\n \tallocate vec_oprnds1 according to the number of created vector\n-\tstatements. In case of shift with scalar argument, store scalar operand\n-\tfor every vector statement to be created for the SLP node. Fix a\n-\tcomment.\n+\tstatements. In case of shift with scalar argument, store scalar\n+\toperand for every vector statement to be created for the SLP node.\n+\tFix a comment.\n \n 2007-11-10  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n@@ -1445,8 +1448,7 @@\n \n 2007-11-09  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-flow.h (struct ptr_info_def): Make escape_mask a\n-\tENUM_BITFIELD.\n+\t* tree-flow.h (struct ptr_info_def): Make escape_mask a ENUM_BITFIELD.\n \t(struct ptr_info_def): Likewise.\n \t(enum escape_type): Also use bit zero.\n \n@@ -1845,8 +1847,7 @@\n \t(in_safe_group_barrier): New variable.\n \t(rws_update): Remove first argument, always set rws_sum array.\n \t(rws_access_regno): Use rws_insn_set macro.  Only call rws_update\n-\tor update rws_sum if !in_safe_group_barrier, adjust rws_update\n-\targs.\n+\tor update rws_sum if !in_safe_group_barrier, adjust rws_update args.\n \t(rtx_needs_barrier): Use rws_insn_test macro.\n \t(safe_group_barrier_needed): Don't save/restore rws_sum array,\n \tinstead set/clear in_safe_group_barrier flag.\n@@ -1996,8 +1997,8 @@\n \n \t* config/rs6000/rs6000.opt: Rename -mdfp option to -mhard-dfp.\n \n-\t* config/s390/s390.c: (override_options): Replace -mhard-dfp/-msoft-dfp\n-\twith -mhard-dfp/-mno-hard-dfp.\n+\t* config/s390/s390.c: (override_options): Replace\n+\t-mhard-dfp/-msoft-dfp with -mhard-dfp/-mno-hard-dfp.\n \t* config/s390/s390.opt: Likewise.\n \t* config/s390/s390.h: Add MASK_HARD_DFP to the TARGET_DEFAULT\n \tdefinition.\n@@ -2493,7 +2494,7 @@\n \tSSA_NAME pointers.\n \n 2007-10-22  Seongbae Park <seongbae.park@gmail.com>\n-\tDavid S. Miller  <davem@davemloft.net>\n+\t    David S. Miller  <davem@davemloft.net>\n \n \t* df-scan.c (df_get_call_refs): Mark global registers as both a\n \tDF_REF_REG_USE and a non-clobber DF_REF_REG_DEF.\n@@ -3010,8 +3011,7 @@\n 2007-10-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/32921\n-\t* tree.c (build_array_type): Do not re-layout unbound array\n-\ttypes.\n+\t* tree.c (build_array_type): Do not re-layout unbound array types.\n \n 2007-10-19  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n@@ -3765,8 +3765,7 @@\n \n \tPR middle-end/33669\n \t* ra-conflict.c (record_one_conflict_between_regnos,\n-\tset_conflicts_for_earlyclobber, global_conflicts): Improved\n-\tlogging.\n+\tset_conflicts_for_earlyclobber, global_conflicts): Improved logging.\n \t(global_conflicts): Removed incorrect check.\n \n 2007-10-09  Richard Sandiford  <rsandifo@nildram.co.uk>\n@@ -3909,8 +3908,7 @@\n \n \tPR tree-optimization/33655\n \tPR middle-end/22156\n-\t* tree-sra.c (bitfield_overlaps_p): Handle array and complex\n-\telements.\n+\t* tree-sra.c (bitfield_overlaps_p): Handle array and complex elements.\n \n 2007-10-06  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -4024,8 +4022,7 @@\n \n 2007-10-04  Geoffrey Keating  <geoffk@apple.com>\n \n-\t* cgraphunit.c (cgraph_build_static_cdtor): Don't set\n-\tDECL_IGNORED_P.\n+\t* cgraphunit.c (cgraph_build_static_cdtor): Don't set DECL_IGNORED_P.\n \n 2007-10-04  Anatoly Sokolov <aesok@post.ru>\n \n@@ -4150,8 +4147,7 @@\n 2007-10-02  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR middle-end/33617\n-\t* expr.c (expand_expr_addr_expr_1): Pass CONSTRUCTORs to\n-\texpand_expr.\n+\t* expr.c (expand_expr_addr_expr_1): Pass CONSTRUCTORs to expand_expr.\n \n 2007-10-02  David Daney  <ddaney@avtrex.com>\n \n@@ -4263,14 +4259,12 @@\n \t(canon_type_for_field): New.\n \t(try_instantiate_multiple_fields): New.  Infer widest possible\n \taccess mode from decl or member type, but clip it at word\n-\tsize, and only widen it if a field crosses an alignment\n-\tboundary.\n+\tsize, and only widen it if a field crosses an alignment boundary.\n \t(instantiate_missing_elements): Use them.\n \t(generate_one_element_ref): Handle BIT_FIELD_REFs.\n \t(scalar_bitfield_p): New.\n \t(sra_build_assignment): Optimize assignments from scalarizable\n-\tBIT_FIELD_REFs.  Use BITS_BIG_ENDIAN to determine shift\n-\tcounts.\n+\tBIT_FIELD_REFs.  Use BITS_BIG_ENDIAN to determine shift counts.\n \t(REPLDUP): New.\n \t(sra_build_bf_assignment): New.  Optimize assignments to\n \tscalarizable BIT_FIELD_REFs.\n@@ -4292,8 +4286,7 @@\n \tBIT_FIELD_REFs.  Explode or sync needed members for\n \tBIT_FIELD_REFs accesses or assignments.  Use REPLDUP.\n \t(scalarize_copy): Use REPLDUP.\n-\t(scalarize_ldst): Move assert before dereference.  Adjust EH\n-\thandling.\n+\t(scalarize_ldst): Move assert before dereference.  Adjust EH handling.\n \t(dump_sra_elt_name): Handle BIT_FIELD_REFs.\n \n 2007-10-01  Paolo Bonzini  <bonzini@gnu.org>\n@@ -4579,8 +4572,7 @@\n 2007-09-25  DJ Delorie  <dj@redhat.com>\n \n \tPR target/33551\n-\t* config/m32c/m32c.c (m32c_immd_dbl_mov): Use INTVAL instead of\n-\tXINT.\n+\t* config/m32c/m32c.c (m32c_immd_dbl_mov): Use INTVAL instead of XINT.\n \n 2007-09-25  Michael Meissner  <michael.meissner@amd.com>\n \n@@ -4888,8 +4880,7 @@\n 2007-09-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33146\n-\t* fold-const.c (fold_binary): Use the original tree\n-\tfor negating.\n+\t* fold-const.c (fold_binary): Use the original tree for negating.\n \t* tree.h (STRIP_SIGN_NOPS): Converting from or to pointer\n \talso changes \"sign\".\n \n@@ -5352,8 +5343,7 @@\n \n \t* doc/tm.texi (LIBGCC2_UNWIND_ATTRIBUTE): Document.\n \t* unwind-generic.h (LIBGCC2_UNWIND_ATTRIBUTE): Define.\n-\t(_Unwind_RaiseException): Add LIBGCC2_UNWIND_ATTRIBUTE to\n-\tdeclaration.\n+\t(_Unwind_RaiseException): Add LIBGCC2_UNWIND_ATTRIBUTE to declaration.\n \t(_Unwind_ForcedUnwind): Likewise.\n \t(_Unwind_Resume): Likewise.\n \t(_Unwind_Resume_or_Rethrow): Likewise.\n@@ -5417,8 +5407,7 @@\n \n \tPR target/32337\n \t* config/ia64/ia64.c (find_gr_spill): Don't decrement\n-\tcurrent_frame_info.n_local_regs.  Don't return emitted local\n-\tregs.\n+\tcurrent_frame_info.n_local_regs.  Don't return emitted local regs.\n \t(ia64_compute_frame_size): Improve unwind hack to put\n \tRP, PFS, FP in that order by allowing some of the registers\n \tbeen already emitted, as long as they are emitted to the\n@@ -5563,19 +5552,15 @@\n \tpointer to hold the argument.\n \t(function_args_iter_cond): Inline function to return the next\n \targument.\n-\t(function_args_iter_cond_next): Advance the function args\n-\titerator.\n-\t(stdarg_p): New function, return true if variable argument\n-\tfunction.\n-\t(prototype_p): New function, return true if function is\n-\tprototyped.\n+\t(function_args_iter_cond_next): Advance the function args iterator.\n+\t(stdarg_p): New function, return true if variable argument function.\n+\t(prototype_p): New function, return true if function is prototyped.\n \t(function_args_count): New function, count the number of arguments\n \tof a function.\n \n \t* tree.c (stdarg_p): New function, return true if variable\n \targument function.\n-\t(prototype_p): New function, return true if function is\n-\tprototyped.\n+\t(prototype_p): New function, return true if function is prototyped.\n \n \t* config/i386/i386.h (TARGET_SSE5): New macro for SSE5.\n \t(TARGET_ROUND): New macro for the round/ptest instructions which\n@@ -6067,8 +6052,8 @@\n 2007-09-12  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/33393\n-\t* i386.md (floatsisf2_mixed_memory, floatsisf2_sse_memory): Disable\n-\tfor !SSE_MATH\n+\t* config/i386/i386.md (floatsisf2_mixed_memory, floatsisf2_sse_memory):\n+\tDisable for !SSE_MATH\n \n 2007-09-12  Christian Bruel  <christian.bruel@st.com>\n \n@@ -6084,8 +6069,8 @@\n \n 2007-09-12  Ira Rosen  <irar@il.ibm.com>\n \n-\t* params.def (PARAM_MIN_VECT_LOOP_BOUND): Change default and minimum \n-\tto 1.\n+\t* params.def (PARAM_MIN_VECT_LOOP_BOUND): Change default and\n+\tminimum to 1.\n \n 2007-09-11  James E. Wilson  <wilson@specifix.com>\n \n@@ -6285,15 +6270,15 @@\n \n 2007-09-11  Zdenek Dvorak  <ook@ucw.cz>\n \n-\t* fold-const.c (extract_muldiv_1): Do not simplify\n-\tvar * c * c to var.\n+\t* fold-const.c (extract_muldiv_1): Do not simplify var * c * c to var.\n \n 2007-09-11  Jan Hubicka <jh@suse.cz>\n \n-\t* i386.h (ix86_tune_indices): Add X86_TUNE_INTER_UNIT_CONVERSIONS.\n+\t* config/i386/i386.h (ix86_tune_indices): Add\n+\tX86_TUNE_INTER_UNIT_CONVERSIONS.\n \t(TARGET_INTER_UNIT_CONVERSIONS): New.\n-\t* i386.md (floatsi expanders): Remove redundant check for SImode\n-\tsource; offload to memory when asked for.\n+\t* config/i386/i386.md (floatsi expanders): Remove redundant check\n+\tfor SImode source; offload to memory when asked for.\n \t(floatsisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse\n \tfloatdisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse):\n \tUpdate conditions;\n@@ -6581,7 +6566,7 @@\n \n 2007-09-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* i386.md (*floatsisf2_mixed_vector): Use cvtdq2ps instead\n+\t* config/i386/i386.md (*floatsisf2_mixed_vector): Use cvtdq2ps instead\n \tof cvtpq2ps.\n \t(*floatsisf2_sse_vector): Likewise.\n \n@@ -6615,19 +6600,19 @@\n 2007-09-09  Jan Hubicka  <jh@suse.cz>\n \t    Dwarakanath Rajagopal <dwarak.rajagopal@amd.com>\n \n-\t* i386.h (ix86_tune_indices): Add X86_USE_VECTOR_CONVERTS.\n+\t* config/i386/i386.h (ix86_tune_indices): Add X86_USE_VECTOR_CONVERTS.\n \t(TARGET_USE_VECTOR_CONVERTS): New.\n-\t* i386.md: New post-reload splitters for converting SF to DF and DF to\n-\tSF.\n+\t* config/i386/i386.md: New post-reload splitters for converting\n+\tSF to DF and DF to SF.\n \t(floatsi* expander): Special case vector conversions.\n \t(floatsisf2_mixed_vector, floatsisf2_sse_vector_nointernunit,\n \tfloatsisf2_sse_vector_internunit, floatsisf2_sse_vector,\n \tfloatsidf2_mixed_vector, floatsidf2_sse_vector): New.\n \t(floatsisf2_mixed, floatsisf2_sse, floatsidf2_mixed, floatsidf2_sse):\n \tDisable when doing vector converts.\n \t(floatsi<mode>2_i387): Disable when\n-\t* sse.md (vec_dupv2df): Export.\n-\t* i386.c (ix86_tune_features): Enable SSE conversions.\n+\t* config/i386/sse.md (vec_dupv2df): Export.\n+\t* config/i386/i386.c (ix86_tune_features): Enable SSE conversions.\n \n 2007-09-09  Richard Guenther  <rguenther@suse.de>\n \n@@ -7356,8 +7341,8 @@\n \n  \t2007-09-06  Jan Hubicka  <jh@suse.cz>\n  \n-\t* i386.c (ix86_expand_lround, ix86_expand_round): Update call of\n-\treal_2expN.\n+\t* config/i386/i386.c (ix86_expand_lround, ix86_expand_round):\n+\tUpdate call of real_2expN.\n \n \t2007-09-06  Richard Sandiford  <richard@codesourcery.com>\n \n@@ -7514,8 +7499,8 @@\n \n 2007-09-06  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.c (ix86_expand_lround, ix86_expand_round): Update call of\n-\treal_2expN.\n+\t* config/i386/i386.c (ix86_expand_lround, ix86_expand_round):\n+\tUpdate call of real_2expN.\n \n 2007-09-06  Jan Hubicka  <jh@suse.cz>\n \n@@ -10095,7 +10080,7 @@\n \t\n 2007-08-19  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.md: Replace \"rim\" and \"mri\" constraints by \"g\".\n+\t* config/i386/i386.md: Replace \"rim\" and \"mri\" constraints by \"g\".\n \n 2007-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -10547,8 +10532,8 @@\n \n 2007-08-14  Kai Tietz  <kai.tietz@onevision.com>\n \n-\t* i386.c: (legitimize_address): Move dllimported variable check\n-\tinfront of legitimizing pic address of CONST symbols.\n+\t* config/i386/i386.c (legitimize_address): Move dllimported variable\n+\tcheck infront of legitimizing pic address of CONST symbols.\n \n 2007-08-14  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -11924,8 +11909,8 @@\n \n 2007-08-03  Jan Hubicka  <jh@suse.cz>\n \n-\t* i386.c (setup_incoming_varargs_64): Tolerate 64bit preferred\n-\tstack boundary.\n+\t* config/i386/i386.c (setup_incoming_varargs_64): Tolerate 64bit\n+\tpreferred stack boundary.\n \n 2007-08-03  David Edelsohn  <edelsohn@gnu.org>\n \n@@ -13673,7 +13658,7 @@\n \n 2007-07-23  Jan Hubicka  <jH@suse.cz>\n \n-\t* i386.c (ix86_secondary_memory_needed): Break out to...\n+\t* config/i386/i386.c (ix86_secondary_memory_needed): Break out to...\n \t(inline_secondary_memory_needed): ... here.\n \t(ix86_memory_move_cost): Break out to ...\n \t(inline_memory_move_cost): ... here; add support for IN value of 2 for\n@@ -19411,7 +19396,7 @@\n \textra_headers.\n \t(x86_64-*-*): Likewise.\n \n-\t* i386/i386-modes.def (V2QI): New.\n+\t* config/i386/i386-modes.def (V2QI): New.\n \n \t* config/i386/i386.c (ix86_handle_option): Handle SSE4.1 and\n \tSSE4A.\n@@ -25875,9 +25860,9 @@\n \n \t* reg-stack.c (reg_to_stack): Large models don't allow NAN to be\n \tloaded for constant large models.  Non-large 64bit PIC can do.\n-\t* i386.h (CASE_VECTOR_MODE): Large PIC cases are 64bit.\n+\t* config/i386/i386.h (CASE_VECTOR_MODE): Large PIC cases are 64bit.\n \t* cmodel.h: Add LARGE PIC.\n-\t* i386.md (UNSPEC_PLTOFF): New.\n+\t* config/i386/i386.md (UNSPEC_PLTOFF): New.\n \t(UNSPEC_SET_RIP, UNSPEC_SET_GOT_OFFSET): New; renumber other\n \tunspecs as needed.\n \t(*call_1_rex64): Disable for large models.\n@@ -25886,10 +25871,10 @@\n \t(*call_value_1_rex64_large): New.\n \t(set_rip_rex4): New.\n \t(set_got_offset_rex64): New.\n-\t* predicates.md (constant_call_address_operand): For large model\n-\tconstant calls are not possible.\n-\t* i386-protos.h (construct_plt_address): Declare.\n-\t* i386.c (override_options): Accept large models.\n+\t* config/i386/predicates.md (constant_call_address_operand): For\n+\tlarge model constant calls are not possible.\n+\t* config/i386/i386-protos.h (construct_plt_address): Declare.\n+\t* config/i386/i386.c (override_options): Accept large models.\n \t(ix86_expand_prologue): Expand large PIC GOT pointer load.\n \t(legitimate_constant_p): Add new UNSPECs.\n \t(legitimate_pic_operand_p): Likewise.\n@@ -26883,7 +26868,7 @@\n \t    Jan Hubicka  <jh@suse.cz>\n \n \tPR target/30778\n-\t* i386.c (counter_mode): New function.\n+\t* cofnig/i386/i386.c (counter_mode): New function.\n \t(expand_set_or_movmem_via_loop): Use it.\n \t(expand_movmem_epilogue): Likewise; fix pasto.\n \t(ix86_expand_movmem): Do emit guard even for constant counts.\n@@ -30316,7 +30301,8 @@\n \t* Makefile.in (LIBGCOV): Add new constants.\n \t* libgcov.c (__gcov_merge_ior, __gcov_average_profiler,\n \t__gcov_ior_profiler): New.\n-\t* i386.md (movmem/setmem expanders): Add new optional arguments.\n+\t* config/i386/i386.md (movmem/setmem expanders): Add new optional\n+\targuments.\n \n 2007-01-28  David Edelsohn  <edelsohn@gnu.org>\n \n@@ -31184,8 +31170,8 @@\n \n 2007-01-18  Michael Meissner  <michael.meissner@amd.com>\n \n-\t* i386.c (ix86_compute_frame_layout): Make fprintf's in #if 0 code\n-\ttype correct.\n+\t* config/i386/i386.c (ix86_compute_frame_layout): Make fprintf's\n+\tin #if 0 code type correct.\n \n 2007-01-18  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "fcae07758e0779b2ca7a88abec804371c799e739", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dafdf4d0f85fcf00944975332b43e29d39ca98/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dafdf4d0f85fcf00944975332b43e29d39ca98/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e3dafdf4d0f85fcf00944975332b43e29d39ca98", "patch": "@@ -22236,7 +22236,7 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total)\n \t    nbits = 7;\n \n \t  /* Compute costs correctly for widening multiplication.  */\n-\t  if ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op1) == ZERO_EXTEND)\n+\t  if ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND)\n \t      && GET_MODE_SIZE (GET_MODE (XEXP (op0, 0))) * 2\n \t         == GET_MODE_SIZE (mode))\n \t    {"}]}