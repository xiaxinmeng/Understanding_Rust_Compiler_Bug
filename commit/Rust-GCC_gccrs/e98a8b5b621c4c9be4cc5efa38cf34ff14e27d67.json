{"sha": "e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4YThiNWI2MjFjNGM5YmU0Y2M1ZWZhMzhjZjM0ZmYxNGUyN2Q2Nw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-12-27T17:13:07Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-12-27T17:13:07Z"}, "message": "re PR libfortran/19032 (modulo generates wrong result for divisor 1 and -1)\n\nfortran/\nPR fortran/19032\n* trans-intrinsic.c (gfc_conv_intrinsic_mod): Update comment\nin front of function to match the standard.  Correct handling\nof MODULO.\n\ntestsuite/\nPR fortran/19032\n* gfortran.dg/intrinsic_modulo_1.f90: New.\n* gfortran.fortran-torture/execute/intrinsic_mod_ulo.f90: Add\ntests with divisor -1.\n\nFrom-SVN: r92645", "tree": {"sha": "9ab5af294501132cc7f07c24458d26d441ed96c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab5af294501132cc7f07c24458d26d441ed96c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201a97b4799fd44526a65abbcc2621f7d27766f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201a97b4799fd44526a65abbcc2621f7d27766f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201a97b4799fd44526a65abbcc2621f7d27766f7"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "7654b04ba8292207c120066f225e531dc5cd8b46", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "patch": "@@ -1,8 +1,3 @@\n-2004-12-27  Andrew Pinski  <pinskia@physics.uc.edu>\n-\n-\t* trans-expr.c (gfc_conv_cst_int_power): Only check for\n-\tflag_unsafe_math_optimizations if we have a float type.\n-\n 2004-12-27  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de> \n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_ishft): Change to\n@@ -11,6 +6,16 @@\n \t4 bytes bits.  Convert 2nd and 3rd argument to 4 bytes.  Convert\n \tresult if width(arg 1) < 4 bytes.  Call fold.\n \n+\tPR fortran/19032\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_mod): Update comment\n+\tin front of function to match the standard.  Correct handling\n+\tof MODULO.\n+\n+2004-12-27  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* trans-expr.c (gfc_conv_cst_int_power): Only check for\n+\tflag_unsafe_math_optimizations if we have a float type.\n+\n 2004-12-23  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.texi: Fix typo."}, {"sha": "455dfb8c360db212569bb0136fe4258d10dfdcfd", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "patch": "@@ -771,8 +771,8 @@ gfc_conv_intrinsic_cmplx (gfc_se * se, gfc_expr * expr, int both)\n   se->expr = fold (build2 (COMPLEX_EXPR, type, real, imag));\n }\n \n-/* Remainder function MOD(A, P) = A - INT(A / P) * P.\n-   MODULO(A, P) = (A==0 .or. !(A>0 .xor. P>0))? MOD(A,P):MOD(A,P)+P.  */\n+/* Remainder function MOD(A, P) = A - INT(A / P) * P\n+                      MODULO(A, P) = A - FLOOR (A / P) * P  */\n /* TODO: MOD(x, 0)  */\n \n static void\n@@ -783,7 +783,6 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n   tree type;\n   tree itype;\n   tree tmp;\n-  tree zero;\n   tree test;\n   tree test2;\n   mpfr_t huge;\n@@ -798,7 +797,10 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n     {\n     case BT_INTEGER:\n       /* Integer case is easy, we've got a builtin op.  */\n-      se->expr = build2 (TRUNC_MOD_EXPR, type, arg, arg2);\n+      if (modulo)\n+       se->expr = build2 (FLOOR_MOD_EXPR, type, arg, arg2);\n+      else\n+       se->expr = build2 (TRUNC_MOD_EXPR, type, arg, arg2);\n       break;\n \n     case BT_REAL:\n@@ -821,7 +823,10 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n       test2 = build2 (TRUTH_AND_EXPR, boolean_type_node, test, test2);\n \n       itype = gfc_get_int_type (expr->ts.kind);\n-      tmp = build_fix_expr (&se->pre, tmp, itype, FIX_TRUNC_EXPR);\n+      if (modulo)\n+       tmp = build_fix_expr (&se->pre, tmp, itype, FIX_FLOOR_EXPR);\n+      else\n+       tmp = build_fix_expr (&se->pre, tmp, itype, FIX_TRUNC_EXPR);\n       tmp = convert (type, tmp);\n       tmp = build3 (COND_EXPR, type, test2, tmp, arg);\n       tmp = build2 (MULT_EXPR, type, tmp, arg2);\n@@ -832,22 +837,6 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n     default:\n       gcc_unreachable ();\n     }\n-\n-  if (modulo)\n-    {\n-     zero = gfc_build_const (type, integer_zero_node);\n-     /* Build !(A > 0 .xor. P > 0).  */\n-     test = build2 (GT_EXPR, boolean_type_node, arg, zero);\n-     test2 = build2 (GT_EXPR, boolean_type_node, arg2, zero);\n-     test = build2 (TRUTH_XOR_EXPR, boolean_type_node, test, test2);\n-     test = build1 (TRUTH_NOT_EXPR, boolean_type_node, test);\n-     /* Build (A == 0) .or. !(A > 0 .xor. P > 0).  */\n-     test2 = build2 (EQ_EXPR, boolean_type_node, arg, zero);\n-     test = build2 (TRUTH_OR_EXPR, boolean_type_node, test, test2);\n-\n-     se->expr = build3 (COND_EXPR, type, test, se->expr, \n-\t\t\tbuild2 (PLUS_EXPR, type, se->expr, arg2));\n-    }\n }\n \n /* Positive difference DIM (x, y) = ((x - y) < 0) ? 0 : x - y.  */"}, {"sha": "7a23ee9368e991f6873ff2f67f1575813e224e96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "patch": "@@ -2,6 +2,11 @@\n \n \t* gfortran.dg/g77/f90-intrinsic-bit.f: New.\n \n+\tPR fortran/19032\n+\t* gfortran.dg/intrinsic_modulo_1.f90: New.\n+\t* gfortran.fortran-torture/execute/intrinsic_mod_ulo.f90: Add\n+\ttests with divisor -1.\n+\n 2004-12-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19148"}, {"sha": "6d44f451abe6e6bda1ccfe1d67c187e4f9b72f3c", "filename": "gcc/testsuite/gfortran.dg/intrinsic_modulo_1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_modulo_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_modulo_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_modulo_1.f90?ref=e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+! testcase from PR 19032 adapted for testsuite\n+! Our implementation of modulo was wrong for P = 1 and P = -1,\n+! both in the real and the integer case\n+program main\n+  integer, parameter :: n=16\n+  real, dimension(n) :: ar, br, modulo_result, floor_result\n+  integer, dimension(n) :: ai, bi , imodulo_result, ifloor_result\n+\n+  ai(1:4) = 5\n+  ai(5:8) = -5\n+  ai(9:12) = 1\n+  ai(13:16) = -1\n+  bi(1:4) = (/ 3,-3, 1, -1/)\n+  bi(5:8) = bi(1:4)\n+  bi(9:12) = bi(1:4)\n+  bi(13:16) = bi(1:4)\n+  ar = ai\n+  br = bi\n+  modulo_result = modulo(ar,br)\n+  imodulo_result = modulo(ai,bi)\n+  floor_result = ar-floor(ar/br)*br\n+  ifloor_result = nint(real(ai-floor(real(ai)/real(bi))*bi))\n+\n+  do i=1,n\n+     if (modulo_result(i) /= floor_result(i) ) then\n+!        print \"(A,4F5.0)\" ,\"real case failed: \", &\n+!             ar(i),br(i), modulo_result(i), floor_result(i)\n+        call abort()\n+    end if\n+    if (imodulo_result(i) /= ifloor_result(i)) then\n+!       print \"(A,4I5)\", \"int case failed: \", &\n+!            ai(i), bi(i), imodulo_result(i), ifloor_result(i)\n+       call abort ()\n+     end if\n+  end do\n+end program main"}, {"sha": "4fdf42c37d7909c4c62397949f7bcc66b28a645b", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_mod_ulo.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_mod_ulo.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_mod_ulo.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_mod_ulo.f90?ref=e98a8b5b621c4c9be4cc5efa38cf34ff14e27d67", "patch": "@@ -47,16 +47,19 @@ program mod_modulotest\n    call integertest ((/-8, 5/), (/-3, 2/))\n    call integertest ((/8, -5/), (/3, -2/))\n    call integertest ((/-8, -5/), (/-3, -3/))\n+   call integertest ((/ 2, -1/), (/0, 0/))\n \n    call real4test ((/3.0, 2.5/), (/0.5, 0.5/))\n    call real4test ((/-3.0, 2.5/), (/-0.5, 2.0/))\n    call real4test ((/3.0, -2.5/), (/0.5, -2.0/))\n    call real4test ((/-3.0, -2.5/), (/-0.5, -0.5/))\n+   call real4test ((/ 2.0, -1.0/), (/ 0.0, 0.0 /))\n \n    call real8test ((/3.0_8, 2.5_8/), (/0.5_8, 0.5_8/))\n    call real8test ((/-3.0_8, 2.5_8/), (/-0.5_8, 2.0_8/))\n    call real8test ((/3.0_8, -2.5_8/), (/0.5_8, -2.0_8/))\n    call real8test ((/-3.0_8, -2.5_8/), (/-0.5_8, -0.5_8/))\n+   call real8test ((/ 2.0_8, -1.0_8/), (/ 0.0_8, 0.0_8 /))\n    \n    ! Check large numbers\n    call real4test ((/2e34, 1.0/), (/0.0, 0.0/))"}]}