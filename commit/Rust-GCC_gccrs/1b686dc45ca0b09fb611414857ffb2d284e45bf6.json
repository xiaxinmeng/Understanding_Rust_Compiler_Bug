{"sha": "1b686dc45ca0b09fb611414857ffb2d284e45bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2ODZkYzQ1Y2EwYjA5ZmI2MTE0MTQ4NTdmZmIyZDI4NGU0NWJmNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2008-05-20T12:59:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:59:41Z"}, "message": "s-taspri-vxworks.ads (Task_Address, [...]): New type/constant.\n\n\t* s-taspri-vxworks.ads (Task_Address, Task_Address_Size): New\n\ttype/constant.\n\n\t* g-socthi-vxworks.ads: Update to latest socket changes.\n\n\t* a-caldel-vms.adb: Resync with a-caldel spec.\n\nFrom-SVN: r135652", "tree": {"sha": "408a2be574a4dc26e53aadb2d77e4d3fa9138c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408a2be574a4dc26e53aadb2d77e4d3fa9138c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b686dc45ca0b09fb611414857ffb2d284e45bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b686dc45ca0b09fb611414857ffb2d284e45bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b686dc45ca0b09fb611414857ffb2d284e45bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b686dc45ca0b09fb611414857ffb2d284e45bf6/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b473ab453920166e23ab2f136e05cd1d30ee329f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b473ab453920166e23ab2f136e05cd1d30ee329f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b473ab453920166e23ab2f136e05cd1d30ee329f"}], "stats": {"total": 263, "additions": 34, "deletions": 229}, "files": [{"sha": "bf7dbf78fcbed69b5dfc48af06a6a7b8ae320269", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1b686dc45ca0b09fb611414857ffb2d284e45bf6", "patch": "@@ -1,3 +1,12 @@\n+2008-05-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taspri-vxworks.ads (Task_Address, Task_Address_Size): New\n+\ttype/constant.\n+\n+\t* g-socthi-vxworks.ads: Update to latest socket changes.\n+\n+\t* a-caldel-vms.adb: Resync with a-caldel spec.\n+\n 2008-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans.c (gnat_to_gnu) <N_Validate_Unchecked_Conversion>: Account"}, {"sha": "b60bc8b5cb1e03707d768901d19530aa7aa44130", "filename": "gcc/ada/a-caldel-vms.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fa-caldel-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fa-caldel-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel-vms.adb?ref=1b686dc45ca0b09fb611414857ffb2d284e45bf6", "patch": "@@ -44,6 +44,13 @@ package body Ada.Calendar.Delays is\n \n    use type TSL.Timed_Delay_Call;\n \n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Timed_Delay_NT (Time : Duration; Mode : Integer);\n+   --  Timed delay procedure used when no tasking is active\n+\n    ---------------\n    -- Delay_For --\n    ---------------\n@@ -76,18 +83,15 @@ package body Ada.Calendar.Delays is\n    -- Timed_Delay_NT --\n    --------------------\n \n-   procedure Timed_Delay_NT (Time : Duration; Mode : Integer);\n-\n    procedure Timed_Delay_NT (Time : Duration; Mode : Integer) is\n    begin\n       OSP.Timed_Delay (Time, Mode);\n    end Timed_Delay_NT;\n \n begin\n    --  Set up the Timed_Delay soft link to the non tasking version if it has\n-   --  not been already set.\n-   --  If tasking is present, Timed_Delay has already set this soft link, or\n-   --  this will be overridden during the elaboration of\n+   --  not been already set. If tasking is present, Timed_Delay has already set\n+   --  this soft link, or this will be overridden during the elaboration of\n    --  System.Tasking.Initialization\n \n    if TSL.Timed_Delay = null then"}, {"sha": "fa3f82f57e22650cecb40c4f45dd0d0ade753206", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 4, "deletions": 224, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=1b686dc45ca0b09fb611414857ffb2d284e45bf6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2007, AdaCore                     --\n+--                     Copyright (C) 2002-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,25 +37,18 @@\n \n --  This is the version for VxWorks\n \n-with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n-with Ada.Unchecked_Conversion;\n-\n with GNAT.OS_Lib;\n-with GNAT.Sockets.Constants;\n+with GNAT.Sockets.Thin_Common;\n \n with System;\n \n package GNAT.Sockets.Thin is\n \n-   package C renames Interfaces.C;\n-\n-   use type C.int;\n-   --  This is so we can declare the Failure constant below\n+   use Thin_Common;\n \n-   Success : constant C.int :=  0;\n-   Failure : constant C.int := -1;\n+   package C renames Interfaces.C;\n \n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n@@ -80,161 +73,6 @@ package GNAT.Sockets.Thin is\n \n    end Host_Error_Messages;\n \n-   subtype Fd_Set_Access is System.Address;\n-   No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n-\n-   type time_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_sec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_sec - 1) - 1;\n-   for time_t'Size use 8 * Constants.SIZEOF_tv_sec;\n-   pragma Convention (C, time_t);\n-\n-   type suseconds_t is\n-     range -2 ** (8 * Constants.SIZEOF_tv_usec - 1)\n-         .. 2 ** (8 * Constants.SIZEOF_tv_usec - 1) - 1;\n-   for suseconds_t'Size use 8 * Constants.SIZEOF_tv_usec;\n-   pragma Convention (C, suseconds_t);\n-\n-   type Timeval is record\n-      Tv_Sec  : time_t;\n-      Tv_Usec : suseconds_t;\n-   end record;\n-   pragma Convention (C, Timeval);\n-\n-   type Timeval_Access is access all Timeval;\n-   pragma Convention (C, Timeval_Access);\n-\n-   Immediat : constant Timeval := (0, 0);\n-\n-   type Int_Access is access all C.int;\n-   pragma Convention (C, Int_Access);\n-   --  Access to C integers\n-\n-   type Chars_Ptr_Array is array (C.size_t range <>) of\n-     aliased C.Strings.chars_ptr;\n-\n-   package Chars_Ptr_Pointers is\n-      new C.Pointers (C.size_t, C.Strings.chars_ptr, Chars_Ptr_Array,\n-                      C.Strings.Null_Ptr);\n-   --  Arrays of C (char *)\n-\n-   type In_Addr is record\n-      S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n-   end record;\n-   for In_Addr'Alignment use C.int'Alignment;\n-   pragma Convention (C, In_Addr);\n-   --  IPv4 address, represented as a network-order C.int. Note that the\n-   --  underlying operating system may assume that values of this type have\n-   --  C.int alignment, so we need to provide a suitable alignment clause here.\n-\n-   function To_In_Addr is new Ada.Unchecked_Conversion (C.int, In_Addr);\n-\n-   type In_Addr_Access is access all In_Addr;\n-   pragma Convention (C, In_Addr_Access);\n-   --  Access to internet address\n-\n-   Inaddr_Any : aliased constant In_Addr := (others => 0);\n-   --  Any internet address (all the interfaces)\n-\n-   type In_Addr_Access_Array is array (C.size_t range <>)\n-     of aliased In_Addr_Access;\n-   pragma Convention (C, In_Addr_Access_Array);\n-\n-   package In_Addr_Access_Pointers is\n-     new C.Pointers (C.size_t, In_Addr_Access, In_Addr_Access_Array, null);\n-   --  Array of internet addresses\n-\n-   type Sockaddr is record\n-      Sa_Length : C.unsigned_char;\n-      Sa_Family : C.unsigned_char;\n-      Sa_Data   : C.char_array (1 .. 14);\n-   end record;\n-   pragma Convention (C, Sockaddr);\n-   --  Socket address\n-\n-   type Sockaddr_Access is access all Sockaddr;\n-   pragma Convention (C, Sockaddr_Access);\n-   --  Access to socket address\n-\n-   type Sockaddr_In is record\n-      Sin_Length : C.unsigned_char       := 0;\n-      Sin_Family : C.unsigned_char       := Constants.AF_INET;\n-      Sin_Port   : C.unsigned_short      := 0;\n-      Sin_Addr   : In_Addr               := Inaddr_Any;\n-      Sin_Zero   : C.char_array (1 .. 8) := (others => C.char'Val (0));\n-   end record;\n-   pragma Convention (C, Sockaddr_In);\n-   --  Internet socket address\n-\n-   type Sockaddr_In_Access is access all Sockaddr_In;\n-   pragma Convention (C, Sockaddr_In_Access);\n-   --  Access to internet socket address\n-\n-   procedure Set_Length\n-     (Sin : Sockaddr_In_Access;\n-      Len : C.int);\n-   pragma Inline (Set_Length);\n-   --  Set Sin.Sin_Length to Len\n-\n-   procedure Set_Family\n-     (Sin    : Sockaddr_In_Access;\n-      Family : C.int);\n-   pragma Inline (Set_Family);\n-   --  Set Sin.Sin_Family to Family\n-\n-   procedure Set_Port\n-     (Sin  : Sockaddr_In_Access;\n-      Port : C.unsigned_short);\n-   pragma Inline (Set_Port);\n-   --  Set Sin.Sin_Port to Port\n-\n-   procedure Set_Address\n-     (Sin     : Sockaddr_In_Access;\n-      Address : In_Addr);\n-   pragma Inline (Set_Address);\n-   --  Set Sin.Sin_Addr to Address\n-\n-   type Hostent is record\n-      H_Name      : C.Strings.chars_ptr;\n-      H_Aliases   : Chars_Ptr_Pointers.Pointer;\n-      H_Addrtype  : C.int;\n-      H_Length    : C.int;\n-      H_Addr_List : In_Addr_Access_Pointers.Pointer;\n-   end record;\n-   pragma Convention (C, Hostent);\n-   --  Host entry\n-\n-   type Hostent_Access is access all Hostent;\n-   pragma Convention (C, Hostent_Access);\n-   --  Access to host entry\n-\n-   type Servent is record\n-      S_Name    : C.Strings.chars_ptr;\n-      S_Aliases : Chars_Ptr_Pointers.Pointer;\n-      S_Port    : C.int;\n-      S_Proto   : C.Strings.chars_ptr;\n-   end record;\n-   pragma Convention (C, Servent);\n-   --  Service entry\n-\n-   type Servent_Access is access all Servent;\n-   pragma Convention (C, Servent_Access);\n-   --  Access to service entry\n-\n-   type Two_Ints is array (0 .. 1) of C.int;\n-   pragma Convention (C, Two_Ints);\n-   --  Container for two int values\n-\n-   subtype Fd_Pair is Two_Ints;\n-   --  Two_Ints as used for Create_Signalling_Fds: a pair of connected file\n-   --  descriptors, one of which (the \"read end\" of the connection) being used\n-   --  for reading, the other one (the \"write end\") being used for writing.\n-\n-   Read_End  : constant := 0;\n-   Write_End : constant := 1;\n-   --  Indices into an Fd_Pair value providing access to each of the connected\n-   --  file descriptors.\n-\n    --------------------------------\n    -- Standard library functions --\n    --------------------------------\n@@ -384,55 +222,6 @@ package GNAT.Sockets.Thin is\n \n    end Signalling_Fds;\n \n-   ----------------------------\n-   -- Socket sets management --\n-   ----------------------------\n-\n-   procedure Free_Socket_Set\n-     (Set : Fd_Set_Access);\n-   --  Free system-dependent socket set\n-\n-   procedure Get_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : Int_Access;\n-      Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket set. The\n-   --  parameter Last is a maximum value of the largest socket. This hint is\n-   --  used to avoid scanning very large socket sets. After a call to\n-   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n-   --  socket set.\n-\n-   procedure Insert_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Insert socket in the socket set\n-\n-   function  Is_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int) return C.int;\n-   --  Check whether Socket is in the socket set, return a non-zero\n-   --  value if it is, zero if it is not.\n-\n-   procedure Last_Socket_In_Set\n-     (Set    : Fd_Set_Access;\n-      Last   : Int_Access);\n-   --  Find the largest socket in the socket set. This is needed for select().\n-   --  When Last_Socket_In_Set is called, parameter Last is a maximum value of\n-   --  the largest socket. This hint is used to avoid scanning very large\n-   --  socket sets. After the call, Last is set back to the real largest socket\n-   --  in the socket set.\n-\n-   function  New_Socket_Set\n-     (Set : Fd_Set_Access) return Fd_Set_Access;\n-   --  Allocate a new socket set which is a system-dependent structure and\n-   --  initialize by copying Set if it is non-null, by making it empty\n-   --  otherwise.\n-\n-   procedure Remove_Socket_From_Set\n-     (Set    : Fd_Set_Access;\n-      Socket : C.int);\n-   --  Remove socket from the socket set\n-\n    procedure Initialize;\n    procedure Finalize;\n \n@@ -452,13 +241,4 @@ private\n    pragma Import (C, C_Strerror, \"strerror\");\n    pragma Import (C, C_System, \"system\");\n    pragma Import (C, C_Writev, \"writev\");\n-\n-   pragma Import (C, Free_Socket_Set, \"__gnat_free_socket_set\");\n-   pragma Import (C, Get_Socket_From_Set, \"__gnat_get_socket_from_set\");\n-   pragma Import (C, Is_Socket_In_Set, \"__gnat_is_socket_in_set\");\n-   pragma Import (C, Last_Socket_In_Set, \"__gnat_last_socket_in_set\");\n-   pragma Import (C, New_Socket_Set, \"__gnat_new_socket_set\");\n-   pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n-   pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n-\n end GNAT.Sockets.Thin;"}, {"sha": "19998db97eddf14bdc5d3f633b0404aa03ac933c", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b686dc45ca0b09fb611414857ffb2d284e45bf6/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=1b686dc45ca0b09fb611414857ffb2d284e45bf6", "patch": "@@ -62,6 +62,18 @@ package System.Task_Primitives is\n    --  A component of this type is guaranteed to be included in the\n    --  Ada_Task_Control_Block.\n \n+   subtype Task_Address is System.Address;\n+   --  In some versions of Task_Primitives, notably for VMS, Task_Address is\n+   --  the short version of address defined in System.Aux_DEC. To avoid\n+   --  dragging Aux_DEC into tasking packages a tasking specific subtype is\n+   --  defined here.\n+\n+   Task_Address_Size : constant := Standard'Address_Size;\n+   --  The size of Task_Address\n+\n+   Alternate_Stack_Size : constant := 0;\n+   --  No alternate signal stack is used on this platform\n+\n private\n \n    type Priority_Type is (Prio_None, Prio_Protect, Prio_Inherit);"}]}