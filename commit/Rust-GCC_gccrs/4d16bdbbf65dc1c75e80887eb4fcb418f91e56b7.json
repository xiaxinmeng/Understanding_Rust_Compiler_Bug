{"sha": "4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxNmJkYmJmNjVkYzFjNzVlODA4ODdlYjRmY2I0MThmOTFlNTZiNw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-01T15:46:48Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-01T15:46:48Z"}, "message": "re PR libstdc++/3666 (Invalid concept-checking code.)\n\n2001-11-01  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acinclude.m4:  Fix spacing.\n\t(GLIBCPP_ENABLE_CONCEPT_CHECKS):  New macro.\n\t* configure.in:  Call here.\n\t* acconfig.h:  Add _GLIBCPP_CONCEPT_CHECKS.\n\t* include/bits/boost_concept_check.h:  Fix headers.\n\t(__function_requires):  Make inline.\n\t* include/bits/c++config (_GLIBCPP_CONCEPT_CHECKS):  Remove.\n\t* aclocal.m4:  Regenerate.\n\t* config.h.in:  Regenerate.\n\t* configure:  Regenerate.\n\n\tMove trailing ';' inside macro, PR libstdc++/3666.\n\t* include/bits/concept_check.h:  Add semicolon.\n\t* include/bits/stl_algo.h:  Remove semicolon.\n\t* include/bits/stl_algobase.h:  Likewise.\n\t* include/bits/stl_deque.h:  Likewise.\n\t* include/bits/stl_heap.h:  Likewise.\n\t* include/bits/stl_iterator_base_funcs.h:  Likewise.\n\t* include/bits/stl_list.h:  Likewise.\n\t* include/bits/stl_map.h:  Likewise.\n\t* include/bits/stl_multimap.h:  Likewise.\n\t* include/bits/stl_multiset.h:  Likewise.\n\t* include/bits/stl_numeric.h:  Likewise.\n\t* include/bits/stl_queue.h:  Likewise.\n\t* include/bits/stl_set.h:  Likewise.\n\t* include/bits/stl_stack.h:  Likewise.\n\t* include/bits/stl_vector.h:  Likewise.\n\t* include/ext/hash_map:  Likewise.\n\t* include/ext/hash_set:  Likewise.\n\t* include/ext/slist:  Likewise.\n\n\t* src/concept-inst.cc:  New file with explicit instantiations.\n\t* src/Makefile.am (sources):  Add here, with special build rules.\n\t* src/Makefile.in:  Regenerate.\n\nFrom-SVN: r46697", "tree": {"sha": "aa55ff5e180aa3c1a2053c66b0ce396ae67ab5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa55ff5e180aa3c1a2053c66b0ce396ae67ab5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/comments", "author": null, "committer": null, "parents": [{"sha": "93cacb72d049165e92864ef505cf2f936cc33af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cacb72d049165e92864ef505cf2f936cc33af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93cacb72d049165e92864ef505cf2f936cc33af3"}], "stats": {"total": 3506, "additions": 1802, "deletions": 1704}, "files": [{"sha": "202ff3f59f3e30562006109788d921feb9ea4348", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -1,3 +1,40 @@\n+2001-11-01  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acinclude.m4:  Fix spacing.\n+\t(GLIBCPP_ENABLE_CONCEPT_CHECKS):  New macro.\n+\t* configure.in:  Call here.\n+\t* acconfig.h:  Add _GLIBCPP_CONCEPT_CHECKS.\n+\t* include/bits/boost_concept_check.h:  Fix headers.\n+\t(__function_requires):  Make inline.\n+\t* include/bits/c++config (_GLIBCPP_CONCEPT_CHECKS):  Remove.\n+\t* aclocal.m4:  Regenerate.\n+\t* config.h.in:  Regenerate.\n+\t* configure:  Regenerate.\n+\n+\tMove trailing ';' inside macro, PR libstdc++/3666.\n+\t* include/bits/concept_check.h:  Add semicolon.\n+\t* include/bits/stl_algo.h:  Remove semicolon.\n+\t* include/bits/stl_algobase.h:  Likewise.\n+\t* include/bits/stl_deque.h:  Likewise.\n+\t* include/bits/stl_heap.h:  Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h:  Likewise.\n+\t* include/bits/stl_list.h:  Likewise.\n+\t* include/bits/stl_map.h:  Likewise.\n+\t* include/bits/stl_multimap.h:  Likewise.\n+\t* include/bits/stl_multiset.h:  Likewise.\n+\t* include/bits/stl_numeric.h:  Likewise.\n+\t* include/bits/stl_queue.h:  Likewise.\n+\t* include/bits/stl_set.h:  Likewise.\n+\t* include/bits/stl_stack.h:  Likewise.\n+\t* include/bits/stl_vector.h:  Likewise.\n+\t* include/ext/hash_map:  Likewise.\n+\t* include/ext/hash_set:  Likewise.\n+\t* include/ext/slist:  Likewise.\n+\n+\t* src/concept-inst.cc:  New file with explicit instantiations.\n+\t* src/Makefile.am (sources):  Add here, with special build rules.\n+\t* src/Makefile.in:  Regenerate.\n+\n 2001-11-01  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* include/bits/std_complex.h (_Norm_helper): New class template."}, {"sha": "c9aedef1c5fbb7b4d1b3cbc4e30ed726598f1eff", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -34,6 +34,9 @@\n // Define if using setrlimit to limit memory usage during 'make check'.\n #undef _GLIBCPP_MEM_LIMITS\n \n+// Define to use concept checking code from the boost libraries.\n+#undef _GLIBCPP_CONCEPT_CHECKS\n+\n // Define if you have the atan2f function.\n #undef _GLIBCPP_HAVE_ATAN2F \n "}, {"sha": "1f5eedc1aff1cf539fdb197084f68ba12c729f2a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -1355,7 +1355,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   AC_ARG_ENABLE(c99,\n   changequote(<<, >>)dnl\n-  <<--enable-c99      turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_c99=yes ;;\n@@ -1922,3 +1922,32 @@ AC_DEFUN(AC_LC_MESSAGES, [\n   ])\n ])\n \n+\n+dnl\n+dnl Check for whether the Boost-derived checks should be turned on.\n+dnl\n+dnl GLIBCPP_ENABLE_CONCEPT_CHECKS\n+dnl --enable-concept-checks turns them on.\n+dnl --disable-concept-checks leaves them off.\n+dnl  +  Usage:  GLIBCPP_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+AC_DEFUN(GLIBCPP_ENABLE_CONCEPT_CHECKS, [dnl\n+define([GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_ARG_ENABLE(concept-checks,\n+changequote(<<, >>)dnl\n+<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT],\n+changequote([, ])dnl\n+[case \"$enableval\" in\n+ yes) enable_concept_checks=yes ;;\n+ no)  enable_concept_checks=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable concept checks]) ;;\n+ esac],\n+enable_concept_checks=GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n+dnl Option parsed, now set things appropriately\n+if test x\"$enable_concept_checks\" = xyes; then\n+  AC_DEFINE(_GLIBCPP_CONCEPT_CHECKS)\n+fi\n+])\n+\n+"}, {"sha": "8209b3c20169cd4bada34c2b99338b6b26e6bf9f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 213, "deletions": 357, "changes": 570, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -1,6 +1,6 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4\n \n-dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n dnl with or without modifications, as long as this notice is preserved.\n@@ -1367,7 +1367,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \n   AC_ARG_ENABLE(c99,\n   changequote(<<, >>)dnl\n-  <<--enable-c99      turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  <<--enable-c99            turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n   changequote([, ])dnl\n   [case \"$enableval\" in\n    yes) enable_c99=yes ;;\n@@ -1935,30 +1935,41 @@ AC_DEFUN(AC_LC_MESSAGES, [\n ])\n \n \n-#serial 1\n-# This test replaces the one in autoconf.\n-# Currently this macro should have the same name as the autoconf macro\n-# because gettext's gettext.m4 (distributed in the automake package)\n-# still uses it.  Otherwise, the use in gettext.m4 makes autoheader\n-# give these diagnostics:\n-#   configure.in:556: AC_TRY_COMPILE was called before AC_ISC_POSIX\n-#   configure.in:556: AC_TRY_RUN was called before AC_ISC_POSIX\n+dnl\n+dnl Check for whether the Boost-derived checks should be turned on.\n+dnl\n+dnl GLIBCPP_ENABLE_CONCEPT_CHECKS\n+dnl --enable-concept-checks turns them on.\n+dnl --disable-concept-checks leaves them off.\n+dnl  +  Usage:  GLIBCPP_ENABLE_CONCEPT_CHECKS[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+AC_DEFUN(GLIBCPP_ENABLE_CONCEPT_CHECKS, [dnl\n+define([GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_ARG_ENABLE(concept-checks,\n+changequote(<<, >>)dnl\n+<<  --enable-concept-checks use Boost-derived template checks [default=>>GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT],\n+changequote([, ])dnl\n+[case \"$enableval\" in\n+ yes) enable_concept_checks=yes ;;\n+ no)  enable_concept_checks=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable concept checks]) ;;\n+ esac],\n+enable_concept_checks=GLIBCPP_ENABLE_CONCEPT_CHECKS_DEFAULT)dnl\n+dnl Option parsed, now set things appropriately\n+if test x\"$enable_concept_checks\" = xyes; then\n+  AC_DEFINE(_GLIBCPP_CONCEPT_CHECKS)\n+fi\n+])\n \n-undefine([AC_ISC_POSIX])\n \n-AC_DEFUN([AC_ISC_POSIX],\n-  [\n-    dnl This test replaces the obsolescent AC_ISC_POSIX kludge.\n-    AC_CHECK_LIB(cposix, strerror, [LIBS=\"$LIBS -lcposix\"])\n-  ]\n-)\n \n # Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n \n # serial 1\n \n-AC_DEFUN([AM_MAINTAINER_MODE],\n+AC_DEFUN(AM_MAINTAINER_MODE,\n [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n   dnl maintainer-mode is disabled by default\n   AC_ARG_ENABLE(maintainer-mode,\n@@ -1975,7 +1986,7 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n \n # Define a conditional.\n \n-AC_DEFUN([AM_CONDITIONAL],\n+AC_DEFUN(AM_CONDITIONAL,\n [AC_SUBST($1_TRUE)\n AC_SUBST($1_FALSE)\n if $2; then\n@@ -1989,42 +2000,14 @@ fi])\n # Macro to add for using GNU gettext.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file can be copied and used freely without restrictions.  It can\n+# This file file be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n \n-# serial 9\n-\n-dnl Usage: AM_WITH_NLS([TOOLSYMBOL], [NEEDSYMBOL], [LIBDIR]).\n-dnl If TOOLSYMBOL is specified and is 'use-libtool', then a libtool library\n-dnl    $(top_builddir)/intl/libintl.la will be created (shared and/or static,\n-dnl    depending on --{enable,disable}-{shared,static} and on the presence of\n-dnl    AM-DISABLE-SHARED). Otherwise, a static library\n-dnl    $(top_builddir)/intl/libintl.a will be created.\n-dnl If NEEDSYMBOL is specified and is 'need-ngettext', then GNU gettext\n-dnl    implementations (in libc or libintl) without the ngettext() function\n-dnl    will be ignored.\n-dnl LIBDIR is used to find the intl libraries.  If empty,\n-dnl    the value `$(top_builddir)/intl/' is used.\n-dnl\n-dnl The result of the configuration is one of three cases:\n-dnl 1) GNU gettext, as included in the intl subdirectory, will be compiled\n-dnl    and used.\n-dnl    Catalog format: GNU --> install in $(datadir)\n-dnl    Catalog extension: .mo after installation, .gmo in source tree\n-dnl 2) GNU gettext has been found in the system's C library.\n-dnl    Catalog format: GNU --> install in $(datadir)\n-dnl    Catalog extension: .mo after installation, .gmo in source tree\n-dnl 3) No internationalization, always use English msgid.\n-dnl    Catalog format: none\n-dnl    Catalog extension: none\n-dnl The use of .gmo is historical (it was needed to avoid overwriting the\n-dnl GNU format catalogs when building on a platform with an X/Open gettext),\n-dnl but we keep it in order not to force irrelevant filename changes on the\n-dnl maintainers.\n-dnl\n-AC_DEFUN([AM_WITH_NLS],\n+# serial 3\n+\n+AC_DEFUN(AM_WITH_NLS,\n   [AC_MSG_CHECKING([whether NLS is requested])\n     dnl Default is enabled NLS\n     AC_ARG_ENABLE(nls,\n@@ -2033,15 +2016,11 @@ AC_DEFUN([AM_WITH_NLS],\n     AC_MSG_RESULT($USE_NLS)\n     AC_SUBST(USE_NLS)\n \n-    BUILD_INCLUDED_LIBINTL=no\n     USE_INCLUDED_LIBINTL=no\n-    INTLLIBS=\n \n     dnl If we use NLS figure out what method\n     if test \"$USE_NLS\" = \"yes\"; then\n-      AC_DEFINE(ENABLE_NLS, 1,\n-        [Define to 1 if translation of program messages to the user's native language\n-   is requested.])\n+      AC_DEFINE(ENABLE_NLS)\n       AC_MSG_CHECKING([whether included gettext is requested])\n       AC_ARG_WITH(included-gettext,\n         [  --with-included-gettext use the GNU gettext library included here],\n@@ -2052,74 +2031,85 @@ AC_DEFUN([AM_WITH_NLS],\n       nls_cv_use_gnu_gettext=\"$nls_cv_force_use_gnu_gettext\"\n       if test \"$nls_cv_force_use_gnu_gettext\" != \"yes\"; then\n         dnl User does not insist on using GNU NLS library.  Figure out what\n-        dnl to use.  If GNU gettext is available we use this.  Else we have\n-        dnl to fall back to GNU NLS library.\n+        dnl to use.  If gettext or catgets are available (in this order) we\n+        dnl use this.  Else we have to fall back to GNU NLS library.\n+\tdnl catgets is only used if permitted by option --with-catgets.\n+\tnls_cv_header_intl=\n+\tnls_cv_header_libgt=\n \tCATOBJEXT=NONE\n \n-        dnl Add a version number to the cache macros.\n-        define(gt_cv_func_gnugettext_libc, [gt_cv_func_gnugettext]ifelse([$2], need-ngettext, 2, 1)[_libc])\n-        define(gt_cv_func_gnugettext_libintl, [gt_cv_func_gnugettext]ifelse([$2], need-ngettext, 2, 1)[_libintl])\n-\n \tAC_CHECK_HEADER(libintl.h,\n-\t  [AC_CACHE_CHECK([for GNU gettext in libc], gt_cv_func_gnugettext_libc,\n-\t    [AC_TRY_LINK([#include <libintl.h>\n-extern int _nl_msg_cat_cntr;],\n-\t       [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], need-ngettext, [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr],\n-\t       gt_cv_func_gnugettext_libc=yes,\n-\t       gt_cv_func_gnugettext_libc=no)])\n-\n-\t   if test \"$gt_cv_func_gnugettext_libc\" != \"yes\"; then\n-\t     AC_CACHE_CHECK([for GNU gettext in libintl],\n-\t       gt_cv_func_gnugettext_libintl,\n-\t       [gt_save_LIBS=\"$LIBS\"\n-\t\tLIBS=\"$LIBS -lintl $LIBICONV\"\n-\t\tAC_TRY_LINK([#include <libintl.h>\n-extern int _nl_msg_cat_cntr;],\n-\t\t  [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], need-ngettext, [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr],\n-\t\t  gt_cv_func_gnugettext_libintl=yes,\n-\t\t  gt_cv_func_gnugettext_libintl=no)\n-\t\tLIBS=\"$gt_save_LIBS\"])\n+\t  [AC_CACHE_CHECK([for gettext in libc], gt_cv_func_gettext_libc,\n+\t    [AC_TRY_LINK([#include <libintl.h>], [return (int) gettext (\"\")],\n+\t       gt_cv_func_gettext_libc=yes, gt_cv_func_gettext_libc=no)])\n+\n+\t   if test \"$gt_cv_func_gettext_libc\" != \"yes\"; then\n+\t     AC_CHECK_LIB(intl, bindtextdomain,\n+\t       [AC_CACHE_CHECK([for gettext in libintl],\n+\t\t gt_cv_func_gettext_libintl,\n+\t\t [AC_TRY_LINK([], [return (int) gettext (\"\")],\n+\t\t gt_cv_func_gettext_libintl=yes,\n+\t\t gt_cv_func_gettext_libintl=no)])])\n \t   fi\n \n-\t   dnl If an already present or preinstalled GNU gettext() is found,\n-\t   dnl use it.  But if this macro is used in GNU gettext, and GNU\n-\t   dnl gettext is already preinstalled in libintl, we update this\n-\t   dnl libintl.  (Cf. the install rule in intl/Makefile.in.)\n-\t   if test \"$gt_cv_func_gnugettext_libc\" = \"yes\" \\\n-\t      || { test \"$gt_cv_func_gnugettext_libintl\" = \"yes\" \\\n-\t\t   && test \"$PACKAGE\" != gettext; }; then\n-\t     AC_DEFINE(HAVE_GETTEXT, 1,\n-               [Define if the GNU gettext() function is already present or preinstalled.])\n-\n-\t     if test \"$gt_cv_func_gnugettext_libintl\" = \"yes\"; then\n-\t       dnl If iconv() is in a separate libiconv library, then anyone\n-\t       dnl linking with libintl{.a,.so} also needs to link with\n-\t       dnl libiconv.\n-\t       INTLLIBS=\"-lintl $LIBICONV\"\n-\t     fi\n-\n-\t     gt_save_LIBS=\"$LIBS\"\n-\t     LIBS=\"$LIBS $INTLLIBS\"\n-\t     AC_CHECK_FUNCS(dcgettext)\n-\t     LIBS=\"$gt_save_LIBS\"\n-\n-\t     AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,\n-\t       [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], no)dnl\n-\t     if test \"$MSGFMT\" != \"no\"; then\n-\t       AC_PATH_PROG(GMSGFMT, gmsgfmt, $MSGFMT)\n-\t     fi\n-\n-\t     AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n-\t       [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n-\n-\t     CATOBJEXT=.gmo\n-\t   fi\n+\t   if test \"$gt_cv_func_gettext_libc\" = \"yes\" \\\n+\t      || test \"$gt_cv_func_gettext_libintl\" = \"yes\"; then\n+\t      AC_DEFINE(HAVE_GETTEXT)\n+\t      AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,\n+\t\t[test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], no)dnl\n+\t      if test \"$MSGFMT\" != \"no\"; then\n+\t\tAC_CHECK_FUNCS(dcgettext)\n+\t\tAC_PATH_PROG(GMSGFMT, gmsgfmt, $MSGFMT)\n+\t\tAM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n+\t\t  [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n+\t\tAC_TRY_LINK(, [extern int _nl_msg_cat_cntr;\n+\t\t\t       return _nl_msg_cat_cntr],\n+\t\t  [CATOBJEXT=.gmo\n+\t\t   DATADIRNAME=share],\n+\t\t  [CATOBJEXT=.mo\n+\t\t   DATADIRNAME=lib])\n+\t\tINSTOBJEXT=.mo\n+\t      fi\n+\t    fi\n \t])\n \n         if test \"$CATOBJEXT\" = \"NONE\"; then\n-\t  dnl GNU gettext is not found in the C library.\n+\t  AC_MSG_CHECKING([whether catgets can be used])\n+\t  AC_ARG_WITH(catgets,\n+\t    [  --with-catgets          use catgets functions if available],\n+\t    nls_cv_use_catgets=$withval, nls_cv_use_catgets=no)\n+\t  AC_MSG_RESULT($nls_cv_use_catgets)\n+\n+\t  if test \"$nls_cv_use_catgets\" = \"yes\"; then\n+\t    dnl No gettext in C library.  Try catgets next.\n+\t    AC_CHECK_LIB(i, main)\n+\t    AC_CHECK_FUNC(catgets,\n+\t      [AC_DEFINE(HAVE_CATGETS)\n+\t       INTLOBJS=\"\\$(CATOBJS)\"\n+\t       AC_PATH_PROG(GENCAT, gencat, no)dnl\n+\t       if test \"$GENCAT\" != \"no\"; then\n+\t\t AC_PATH_PROG(GMSGFMT, gmsgfmt, no)\n+\t\t if test \"$GMSGFMT\" = \"no\"; then\n+\t\t   AM_PATH_PROG_WITH_TEST(GMSGFMT, msgfmt,\n+\t\t    [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep 'dv '`\"], no)\n+\t\t fi\n+\t\t AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n+\t\t   [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n+\t\t USE_INCLUDED_LIBINTL=yes\n+\t\t CATOBJEXT=.cat\n+\t\t INSTOBJEXT=.cat\n+\t\t DATADIRNAME=lib\n+\t\t INTLDEPS='$(top_builddir)/intl/libintl.a'\n+\t\t INTLLIBS=$INTLDEPS\n+\t\t LIBS=`echo $LIBS | sed -e 's/-lintl//'`\n+\t\t nls_cv_header_intl=intl/libintl.h\n+\t\t nls_cv_header_libgt=intl/libgettext.h\n+\t       fi])\n+\t  fi\n+        fi\n+\n+        if test \"$CATOBJEXT\" = \"NONE\"; then\n+\t  dnl Neither gettext nor catgets in included in the C library.\n \t  dnl Fall back on GNU gettext library.\n \t  nls_cv_use_gnu_gettext=yes\n         fi\n@@ -2134,11 +2124,15 @@ return (int) gettext (\"\")]ifelse([$2], need-ngettext, [ + (int) ngettext (\"\", \"\"\n         AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,\n \t  [test -z \"`$ac_dir/$ac_word -h 2>&1 | grep '(HELP)'`\"], :)\n         AC_SUBST(MSGFMT)\n-\tBUILD_INCLUDED_LIBINTL=yes\n \tUSE_INCLUDED_LIBINTL=yes\n         CATOBJEXT=.gmo\n-\tINTLLIBS=\"ifelse([$3],[],\\$(top_builddir)/intl,[$3])/libintl.ifelse([$1], use-libtool, [l], [])a $LIBICONV\"\n-\tLIBS=`echo \" $LIBS \" | sed -e 's/ -lintl / /' -e 's/^ //' -e 's/ $//'`\n+        INSTOBJEXT=.mo\n+        DATADIRNAME=share\n+\tINTLDEPS='$(top_builddir)/intl/libintl.a'\n+\tINTLLIBS=$INTLDEPS\n+\tLIBS=`echo $LIBS | sed -e 's/-lintl//'`\n+        nls_cv_header_intl=intl/libintl.h\n+        nls_cv_header_libgt=intl/libgettext.h\n       fi\n \n       dnl Test whether we really found GNU xgettext.\n@@ -2149,78 +2143,24 @@ return (int) gettext (\"\")]ifelse([$2], need-ngettext, [ + (int) ngettext (\"\", \"\"\n \t  : ;\n \telse\n \t  AC_MSG_RESULT(\n-\t    [found xgettext program is not GNU xgettext; ignore it])\n+\t    [found xgettext programs is not GNU xgettext; ignore it])\n \t  XGETTEXT=\":\"\n \tfi\n       fi\n \n-      dnl We need to process the po/ directory.\n+      # We need to process the po/ directory.\n       POSUB=po\n+    else\n+      DATADIRNAME=share\n+      nls_cv_header_intl=intl/libintl.h\n+      nls_cv_header_libgt=intl/libgettext.h\n     fi\n-    AC_OUTPUT_COMMANDS(\n-     [for ac_file in $CONFIG_FILES; do\n-        # Support \"outfile[:infile[:infile...]]\"\n-        case \"$ac_file\" in\n-          *:*) ac_file=`echo \"$ac_file\"|sed 's%:.*%%'` ;;\n-        esac\n-        # PO directories have a Makefile.in generated from Makefile.in.in.\n-        case \"$ac_file\" in */Makefile.in)\n-          # Adjust a relative srcdir.\n-          ac_dir=`echo \"$ac_file\"|sed 's%/[^/][^/]*$%%'`\n-          ac_dir_suffix=\"/`echo \"$ac_dir\"|sed 's%^\\./%%'`\"\n-          ac_dots=`echo \"$ac_dir_suffix\"|sed 's%/[^/]*%../%g'`\n-          case \"$ac_given_srcdir\" in\n-            .)  top_srcdir=`echo $ac_dots|sed 's%/$%%'` ;;\n-            /*) top_srcdir=\"$ac_given_srcdir\" ;;\n-            *)  top_srcdir=\"$ac_dots$ac_given_srcdir\" ;;\n-          esac\n-          if test -f \"$ac_given_srcdir/$ac_dir/POTFILES.in\"; then\n-            rm -f \"$ac_dir/POTFILES\"\n-            echo creating \"$ac_dir/POTFILES\"\n-            sed -e \"/^#/d\" -e \"/^[ \t]*\\$/d\" -e \"s,.*,     $top_srcdir/& \\\\\\\\,\" -e \"\\$s/\\(.*\\) \\\\\\\\/\\1/\" < \"$ac_given_srcdir/$ac_dir/POTFILES.in\" > \"$ac_dir/POTFILES\"\n-            echo creating \"$ac_dir/Makefile\"\n-            sed -e \"/POTFILES =/r $ac_dir/POTFILES\" \"$ac_dir/Makefile.in\" > \"$ac_dir/Makefile\"\n-          fi\n-          ;;\n-        esac\n-      done])\n-\n \n-    dnl If this is used in GNU gettext we have to set BUILD_INCLUDED_LIBINTL\n-    dnl to 'yes' because some of the testsuite requires it.\n+    # If this is used in GNU gettext we have to set USE_NLS to `yes'\n+    # because some of the sources are only built for this goal.\n     if test \"$PACKAGE\" = gettext; then\n-      BUILD_INCLUDED_LIBINTL=yes\n-    fi\n-\n-    dnl intl/plural.c is generated from intl/plural.y. It requires bison,\n-    dnl because plural.y uses bison specific features. It requires at least\n-    dnl bison-1.26 because earlier versions generate a plural.c that doesn't\n-    dnl compile.\n-    dnl bison is only needed for the maintainer (who touches plural.y). But in\n-    dnl order to avoid separate Makefiles or --enable-maintainer-mode, we put\n-    dnl the rule in general Makefile. Now, some people carelessly touch the\n-    dnl files or have a broken \"make\" program, hence the plural.c rule will\n-    dnl sometimes fire. To avoid an error, defines BISON to \":\" if it is not\n-    dnl present or too old.\n-    AC_CHECK_PROGS([INTLBISON], [bison])\n-    if test -z \"$INTLBISON\"; then\n-      ac_verc_fail=yes\n-    else\n-      dnl Found it, now check the version.\n-      AC_MSG_CHECKING([version of bison])\n-changequote(<<,>>)dnl\n-      ac_prog_version=`$INTLBISON --version 2>&1 | sed -n 's/^.*GNU Bison .* \\([0-9]*\\.[0-9.]*\\).*$/\\1/p'`\n-      case $ac_prog_version in\n-        '') ac_prog_version=\"v. ?.??, bad\"; ac_verc_fail=yes;;\n-        1.2[6-9]* | 1.[3-9][0-9]* | [2-9].*)\n-changequote([,])dnl\n-           ac_prog_version=\"$ac_prog_version, ok\"; ac_verc_fail=no;;\n-        *) ac_prog_version=\"$ac_prog_version, bad\"; ac_verc_fail=yes;;\n-      esac\n-      AC_MSG_RESULT([$ac_prog_version])\n-    fi\n-    if test $ac_verc_fail = yes; then\n-      INTLBISON=:\n+      USE_NLS=yes\n+      USE_INCLUDED_LIBINTL=yes\n     fi\n \n     dnl These rules are solely for the distribution goal.  While doing this\n@@ -2232,38 +2172,22 @@ changequote([,])dnl\n     done\n \n     dnl Make all variables we use known to autoconf.\n-    AC_SUBST(BUILD_INCLUDED_LIBINTL)\n     AC_SUBST(USE_INCLUDED_LIBINTL)\n     AC_SUBST(CATALOGS)\n     AC_SUBST(CATOBJEXT)\n+    AC_SUBST(DATADIRNAME)\n     AC_SUBST(GMOFILES)\n+    AC_SUBST(INSTOBJEXT)\n+    AC_SUBST(INTLDEPS)\n     AC_SUBST(INTLLIBS)\n     AC_SUBST(INTLOBJS)\n     AC_SUBST(POFILES)\n     AC_SUBST(POSUB)\n-\n-    dnl For backward compatibility. Some configure.ins may be using this.\n-    nls_cv_header_intl=\n-    nls_cv_header_libgt=\n-\n-    dnl For backward compatibility. Some Makefiles may be using this.\n-    DATADIRNAME=share\n-    AC_SUBST(DATADIRNAME)\n-\n-    dnl For backward compatibility. Some Makefiles may be using this.\n-    INSTOBJEXT=.mo\n-    AC_SUBST(INSTOBJEXT)\n-\n-    dnl For backward compatibility. Some Makefiles may be using this.\n-    GENCAT=gencat\n-    AC_SUBST(GENCAT)\n   ])\n \n-dnl Usage: Just like AM_WITH_NLS, which see.\n-AC_DEFUN([AM_GNU_GETTEXT],\n+AC_DEFUN(AM_GNU_GETTEXT,\n   [AC_REQUIRE([AC_PROG_MAKE_SET])dnl\n    AC_REQUIRE([AC_PROG_CC])dnl\n-   AC_REQUIRE([AC_CANONICAL_HOST])dnl\n    AC_REQUIRE([AC_PROG_RANLIB])dnl\n    AC_REQUIRE([AC_ISC_POSIX])dnl\n    AC_REQUIRE([AC_HEADER_STDC])dnl\n@@ -2273,40 +2197,32 @@ AC_DEFUN([AM_GNU_GETTEXT],\n    AC_REQUIRE([AC_TYPE_SIZE_T])dnl\n    AC_REQUIRE([AC_FUNC_ALLOCA])dnl\n    AC_REQUIRE([AC_FUNC_MMAP])dnl\n-   AC_REQUIRE([jm_GLIBC21])dnl\n \n-   AC_CHECK_HEADERS([argz.h limits.h locale.h nl_types.h malloc.h stddef.h \\\n-stdlib.h string.h unistd.h sys/param.h])\n-   AC_CHECK_FUNCS([feof_unlocked fgets_unlocked getcwd getegid geteuid \\\n-getgid getuid mempcpy munmap putenv setenv setlocale stpcpy strchr strcasecmp \\\n-strdup strtoul tsearch __argz_count __argz_stringify __argz_next])\n+   AC_CHECK_HEADERS([argz.h limits.h locale.h nl_types.h malloc.h string.h \\\n+unistd.h values.h sys/param.h])\n+   AC_CHECK_FUNCS([getcwd munmap putenv setenv setlocale strchr strcasecmp \\\n+__argz_count __argz_stringify __argz_next])\n+\n+   if test \"${ac_cv_func_stpcpy+set}\" != \"set\"; then\n+     AC_CHECK_FUNCS(stpcpy)\n+   fi\n+   if test \"${ac_cv_func_stpcpy}\" = \"yes\"; then\n+     AC_DEFINE(HAVE_STPCPY)\n+   fi\n \n-   AM_ICONV\n-   AM_LANGINFO_CODESET\n    AM_LC_MESSAGES\n-   AM_WITH_NLS([$1],[$2],[$3])\n+   AM_WITH_NLS\n \n    if test \"x$CATOBJEXT\" != \"x\"; then\n      if test \"x$ALL_LINGUAS\" = \"x\"; then\n        LINGUAS=\n      else\n        AC_MSG_CHECKING(for catalogs to be installed)\n        NEW_LINGUAS=\n-       for presentlang in $ALL_LINGUAS; do\n-         useit=no\n-         for desiredlang in ${LINGUAS-$ALL_LINGUAS}; do\n-           # Use the presentlang catalog if desiredlang is\n-           #   a. equal to presentlang, or\n-           #   b. a variant of presentlang (because in this case,\n-           #      presentlang can be used as a fallback for messages\n-           #      which are not translated in the desiredlang catalog).\n-           case \"$desiredlang\" in\n-             \"$presentlang\"*) useit=yes;;\n-           esac\n-         done\n-         if test $useit = yes; then\n-           NEW_LINGUAS=\"$NEW_LINGUAS $presentlang\"\n-         fi\n+       for lang in ${LINGUAS=$ALL_LINGUAS}; do\n+         case \"$ALL_LINGUAS\" in\n+          *$lang*) NEW_LINGUAS=\"$NEW_LINGUAS $lang\" ;;\n+         esac\n        done\n        LINGUAS=$NEW_LINGUAS\n        AC_MSG_RESULT($LINGUAS)\n@@ -2318,8 +2234,47 @@ strdup strtoul tsearch __argz_count __argz_stringify __argz_next])\n      fi\n    fi\n \n+   dnl The reference to <locale.h> in the installed <libintl.h> file\n+   dnl must be resolved because we cannot expect the users of this\n+   dnl to define HAVE_LOCALE_H.\n+   if test $ac_cv_header_locale_h = yes; then\n+     INCLUDE_LOCALE_H=\"#include <locale.h>\"\n+   else\n+     INCLUDE_LOCALE_H=\"\\\n+/* The system does not provide the header <locale.h>.  Take care yourself.  */\"\n+   fi\n+   AC_SUBST(INCLUDE_LOCALE_H)\n+\n+   dnl Determine which catalog format we have (if any is needed)\n+   dnl For now we know about two different formats:\n+   dnl   Linux libc-5 and the normal X/Open format\n+   test -d intl || mkdir intl\n+   if test \"$CATOBJEXT\" = \".cat\"; then\n+     AC_CHECK_HEADER(linux/version.h, msgformat=linux, msgformat=xopen)\n+\n+     dnl Transform the SED scripts while copying because some dumb SEDs\n+     dnl cannot handle comments.\n+     sed -e '/^#/d' $srcdir/intl/$msgformat-msg.sed > intl/po2msg.sed\n+   fi\n+   dnl po2tbl.sed is always needed.\n+   sed -e '/^#.*[^\\\\]$/d' -e '/^#$/d' \\\n+     $srcdir/intl/po2tbl.sed.in > intl/po2tbl.sed\n+\n+   dnl In the intl/Makefile.in we have a special dependency which makes\n+   dnl only sense for gettext.  We comment this out for non-gettext\n+   dnl packages.\n+   if test \"$PACKAGE\" = \"gettext\"; then\n+     GT_NO=\"#NO#\"\n+     GT_YES=\n+   else\n+     GT_NO=\n+     GT_YES=\"#YES#\"\n+   fi\n+   AC_SUBST(GT_NO)\n+   AC_SUBST(GT_YES)\n+\n    dnl If the AC_CONFIG_AUX_DIR macro for autoconf is used we possibly\n-   dnl find the mkinstalldirs script in another subdir but $(top_srcdir).\n+   dnl find the mkinstalldirs script in another subdir but ($top_srcdir).\n    dnl Try to locate is.\n    MKINSTALLDIRS=\n    if test -n \"$ac_aux_dir\"; then\n@@ -2330,15 +2285,31 @@ strdup strtoul tsearch __argz_count __argz_stringify __argz_next])\n    fi\n    AC_SUBST(MKINSTALLDIRS)\n \n-   dnl Enable libtool support if the surrounding package wishes it.\n-   INTL_LIBTOOL_SUFFIX_PREFIX=ifelse([$1], use-libtool, [l], [])\n-   AC_SUBST(INTL_LIBTOOL_SUFFIX_PREFIX)\n+   dnl *** For now the libtool support in intl/Makefile is not for real.\n+   l=\n+   AC_SUBST(l)\n+\n+   dnl Generate list of files to be processed by xgettext which will\n+   dnl be included in po/Makefile.\n+   test -d po || mkdir po\n+   if test \"x$srcdir\" != \"x.\"; then\n+     if test \"x`echo $srcdir | sed 's@/.*@@'`\" = \"x\"; then\n+       posrcprefix=\"$srcdir/\"\n+     else\n+       posrcprefix=\"../$srcdir/\"\n+     fi\n+   else\n+     posrcprefix=\"../\"\n+   fi\n+   rm -f po/POTFILES\n+   sed -e \"/^#/d\" -e \"/^\\$/d\" -e \"s,.*,\t$posrcprefix& \\\\\\\\,\" -e \"\\$s/\\(.*\\) \\\\\\\\/\\1/\" \\\n+\t< $srcdir/po/POTFILES.in > po/POTFILES\n   ])\n \n # Search path for a program which passes the given test.\n # Ulrich Drepper <drepper@cygnus.com>, 1996.\n #\n-# This file can be copied and used freely without restrictions.  It can\n+# This file file be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n@@ -2347,7 +2318,7 @@ strdup strtoul tsearch __argz_count __argz_stringify __argz_next])\n \n dnl AM_PATH_PROG_WITH_TEST(VARIABLE, PROG-TO-CHECK-FOR,\n dnl   TEST-PERFORMED-ON-FOUND_PROGRAM [, VALUE-IF-NOT-FOUND [, PATH]])\n-AC_DEFUN([AM_PATH_PROG_WITH_TEST],\n+AC_DEFUN(AM_PATH_PROG_WITH_TEST,\n [# Extract the first word of \"$2\", so it can be a program name with args.\n set dummy $2; ac_word=[$]2\n AC_MSG_CHECKING([for $ac_word])\n@@ -2383,139 +2354,24 @@ fi\n AC_SUBST($1)dnl\n ])\n \n-#serial 2\n-\n-# Test for the GNU C Library, version 2.1 or newer.\n-# From Bruno Haible.\n-\n-AC_DEFUN([jm_GLIBC21],\n-  [\n-    AC_CACHE_CHECK(whether we are using the GNU C Library 2.1 or newer,\n-      ac_cv_gnu_library_2_1,\n-      [AC_EGREP_CPP([Lucky GNU user],\n-\t[\n-#include <features.h>\n-#ifdef __GNU_LIBRARY__\n- #if (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1) || (__GLIBC__ > 2)\n-  Lucky GNU user\n- #endif\n-#endif\n-\t],\n-\tac_cv_gnu_library_2_1=yes,\n-\tac_cv_gnu_library_2_1=no)\n-      ]\n-    )\n-    AC_SUBST(GLIBC21)\n-    GLIBC21=\"$ac_cv_gnu_library_2_1\"\n-  ]\n-)\n-\n-#serial AM2\n-\n-dnl From Bruno Haible.\n-\n-AC_DEFUN([AM_ICONV],\n-[\n-  dnl Some systems have iconv in libc, some have it in libiconv (OSF/1 and\n-  dnl those with the standalone portable GNU libiconv installed).\n-\n-  AC_ARG_WITH([libiconv-prefix],\n-[  --with-libiconv-prefix=DIR  search for libiconv in DIR/include and DIR/lib], [\n-    for dir in `echo \"$withval\" | tr : ' '`; do\n-      if test -d $dir/include; then CPPFLAGS=\"$CPPFLAGS -I$dir/include\"; fi\n-      if test -d $dir/lib; then LDFLAGS=\"$LDFLAGS -L$dir/lib\"; fi\n-    done\n-   ])\n-\n-  AC_CACHE_CHECK(for iconv, am_cv_func_iconv, [\n-    am_cv_func_iconv=\"no, consider installing GNU libiconv\"\n-    am_cv_lib_iconv=no\n-    AC_TRY_LINK([#include <stdlib.h>\n-#include <iconv.h>],\n-      [iconv_t cd = iconv_open(\"\",\"\");\n-       iconv(cd,NULL,NULL,NULL,NULL);\n-       iconv_close(cd);],\n-      am_cv_func_iconv=yes)\n-    if test \"$am_cv_func_iconv\" != yes; then\n-      am_save_LIBS=\"$LIBS\"\n-      LIBS=\"$LIBS -liconv\"\n-      AC_TRY_LINK([#include <stdlib.h>\n-#include <iconv.h>],\n-        [iconv_t cd = iconv_open(\"\",\"\");\n-         iconv(cd,NULL,NULL,NULL,NULL);\n-         iconv_close(cd);],\n-        am_cv_lib_iconv=yes\n-        am_cv_func_iconv=yes)\n-      LIBS=\"$am_save_LIBS\"\n-    fi\n-  ])\n-  if test \"$am_cv_func_iconv\" = yes; then\n-    AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n-    AC_MSG_CHECKING([for iconv declaration])\n-    AC_CACHE_VAL(am_cv_proto_iconv, [\n-      AC_TRY_COMPILE([\n-#include <stdlib.h>\n-#include <iconv.h>\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-#if defined(__STDC__) || defined(__cplusplus)\n-size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\n-#else\n-size_t iconv();\n-#endif\n-], [], am_cv_proto_iconv_arg1=\"\", am_cv_proto_iconv_arg1=\"const\")\n-      am_cv_proto_iconv=\"extern size_t iconv (iconv_t cd, $am_cv_proto_iconv_arg1 char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\"])\n-    am_cv_proto_iconv=`echo \"[$]am_cv_proto_iconv\" | tr -s ' ' | sed -e 's/( /(/'`\n-    AC_MSG_RESULT([$]{ac_t:-\n-         }[$]am_cv_proto_iconv)\n-    AC_DEFINE_UNQUOTED(ICONV_CONST, $am_cv_proto_iconv_arg1,\n-      [Define as const if the declaration of iconv() needs const.])\n-  fi\n-  LIBICONV=\n-  if test \"$am_cv_lib_iconv\" = yes; then\n-    LIBICONV=\"-liconv\"\n-  fi\n-  AC_SUBST(LIBICONV)\n-])\n-\n-#serial AM1\n-\n-dnl From Bruno Haible.\n-\n-AC_DEFUN([AM_LANGINFO_CODESET],\n-[\n-  AC_CACHE_CHECK([for nl_langinfo and CODESET], am_cv_langinfo_codeset,\n-    [AC_TRY_LINK([#include <langinfo.h>],\n-      [char* cs = nl_langinfo(CODESET);],\n-      am_cv_langinfo_codeset=yes,\n-      am_cv_langinfo_codeset=no)\n-    ])\n-  if test $am_cv_langinfo_codeset = yes; then\n-    AC_DEFINE(HAVE_LANGINFO_CODESET, 1,\n-      [Define if you have <langinfo.h> and nl_langinfo(CODESET).])\n-  fi\n-])\n-\n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995.\n #\n-# This file can be copied and used freely without restrictions.  It can\n+# This file file be copied and used freely without restrictions.  It can\n # be used in projects which are not available under the GNU Public License\n # but which still want to provide support for the GNU gettext functionality.\n # Please note that the actual code is *not* freely available.\n \n-# serial 2\n+# serial 1\n \n-AC_DEFUN([AM_LC_MESSAGES],\n+AC_DEFUN(AM_LC_MESSAGES,\n   [if test $ac_cv_header_locale_h = yes; then\n     AC_CACHE_CHECK([for LC_MESSAGES], am_cv_val_LC_MESSAGES,\n       [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n        am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])\n     if test $am_cv_val_LC_MESSAGES = yes; then\n       AC_DEFINE(HAVE_LC_MESSAGES, 1,\n-        [Define if your <locale.h> file defines LC_MESSAGES.])\n+\t\t[Define if your locale.h file contains LC_MESSAGES.])\n     fi\n   fi])\n \n@@ -2528,7 +2384,7 @@ AC_DEFUN([AM_LC_MESSAGES],\n dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n-AC_DEFUN([AM_INIT_AUTOMAKE],\n+AC_DEFUN(AM_INIT_AUTOMAKE,\n [AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n@@ -2556,7 +2412,7 @@ AC_REQUIRE([AC_PROG_MAKE_SET])])\n # Check to make sure that the build environment is sane.\n #\n \n-AC_DEFUN([AM_SANITY_CHECK],\n+AC_DEFUN(AM_SANITY_CHECK,\n [AC_MSG_CHECKING([whether build environment is sane])\n # Just in case\n sleep 1\n@@ -2597,7 +2453,7 @@ AC_MSG_RESULT(yes)])\n \n dnl AM_MISSING_PROG(NAME, PROGRAM, DIRECTORY)\n dnl The program must properly implement --version.\n-AC_DEFUN([AM_MISSING_PROG],\n+AC_DEFUN(AM_MISSING_PROG,\n [AC_MSG_CHECKING(for working $2)\n # Run test in a subshell; some versions of sh will print an error if\n # an executable is not found, even if stderr is redirected.\n@@ -2613,7 +2469,7 @@ AC_SUBST($1)])\n \n # Like AC_CONFIG_HEADER, but automatically create stamp file.\n \n-AC_DEFUN([AM_CONFIG_HEADER],\n+AC_DEFUN(AM_CONFIG_HEADER,\n [AC_PREREQ([2.12])\n AC_CONFIG_HEADER([$1])\n dnl When config.status generates a header, we must update the stamp-h file."}, {"sha": "b6040c3d49d2c3d3ef518f445523d8b131146f13", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -3,6 +3,9 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+/* Define if you need to in order for stat and other things to work.  */\n+#undef _POSIX_SOURCE\n+\n // Define if GCC supports weak symbols\n #undef _GLIBCPP_SUPPORTS_WEAK\n \n@@ -24,6 +27,9 @@\n // Define if using setrlimit to limit memory usage during 'make check'.\n #undef _GLIBCPP_MEM_LIMITS\n \n+// Define to use concept checking code from the boost libraries.\n+#undef _GLIBCPP_CONCEPT_CHECKS\n+\n // Define if mbstate_t exists in wchar.h.\n #undef HAVE_MBSTATE_T\n \n@@ -690,9 +696,6 @@\n /* Define if you have the <nan.h> header file.  */\n #undef HAVE_NAN_H\n \n-/* Define if you have the <stdlib.h> header file.  */\n-#undef HAVE_STDLIB_H\n-\n /* Define if you have the <sys/isa_defs.h> header file.  */\n #undef HAVE_SYS_ISA_DEFS_H\n \n@@ -702,9 +705,6 @@\n /* Define if you have the <sys/resource.h> header file.  */\n #undef HAVE_SYS_RESOURCE_H\n \n-/* Define if you have the <sys/stat.h> header file.  */\n-#undef HAVE_SYS_STAT_H\n-\n /* Define if you have the <sys/types.h> header file.  */\n #undef HAVE_SYS_TYPES_H\n "}, {"sha": "2643a476f07d70d47b63ff12244f215a7c7b9aeb", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 964, "deletions": 968, "changes": 1932, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7"}, {"sha": "d73d6f4c352e2b2a1b2a0c617cc7915b75c852c1", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -48,6 +48,7 @@ GLIBCPP_ENABLE_CHEADERS([c_std])\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n+GLIBCPP_ENABLE_CONCEPT_CHECKS\n \n \n if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then"}, {"sha": "91d7019155ebdc3f9f50c6e64a8ee3ca776c721e", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -11,6 +11,7 @@\n #define _GLIBCPP_BOOST_CONCEPT_CHECK 1\n \n #pragma GCC system_header\n+#include <bits/std_cstddef.h>                // for ptrdiff_t, used next\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n #include <utility>                           // for pair<>\n \n@@ -20,8 +21,11 @@ namespace __gnu_cxx\n \n #define _IsUnused __attribute__ ((__unused__))\n \n+// When the C-C code is in use, we would like this function to do as little\n+// as possible at runtime, use as few resources as possible, and hopefully\n+// be elided out of existence... hmmm.\n template <class _Concept>\n-void __function_requires()\n+inline void __function_requires()\n {\n   void (_Concept::*__x)() _IsUnused = &_Concept::__constraints;\n }"}, {"sha": "33104ba35e94449d1d4d1e393a204c8ff78b4d61", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -55,9 +55,6 @@\n // Use corrected code from the committee library group's issues list.\n #define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n-// Enable concept checking code from the boost libraries.\n-//#define _GLIBCPP_CONCEPT_CHECKS 1\n-\n // Define this to permit user-level control of the expansion of string\n // buffers (via a fn pointer), see basic_string.* for more.\n //#define _GLIBCPP_ALLOC_CONTROL"}, {"sha": "4ee8d9b6cc8059ad426107f6ba83bb9c96f537c9", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -66,15 +66,15 @@\n // a valid instantiation pattern.  Thus, we steal a feature from C99.\n \n #define __glibcpp_function_requires(...)                                 \\\n-            __gnu_cxx::__function_requires< __gnu_cxx::__VA_ARGS__ >()\n+            __gnu_cxx::__function_requires< __gnu_cxx::__VA_ARGS__ >();\n #define __glibcpp_class_requires(_a,_C)                                  \\\n-            _GLIBCPP_CLASS_REQUIRES(_a, __gnu_cxx, _C)\n+            _GLIBCPP_CLASS_REQUIRES(_a, __gnu_cxx, _C);\n #define __glibcpp_class_requires2(_a,_b,_C)                              \\\n-            _GLIBCPP_CLASS_REQUIRES2(_a, _b, __gnu_cxx, _C)\n+            _GLIBCPP_CLASS_REQUIRES2(_a, _b, __gnu_cxx, _C);\n #define __glibcpp_class_requires3(_a,_b,_c,_C)                           \\\n-            _GLIBCPP_CLASS_REQUIRES3(_a, _b, _c, __gnu_cxx, _C)\n+            _GLIBCPP_CLASS_REQUIRES3(_a, _b, _c, __gnu_cxx, _C);\n #define __glibcpp_class_requires4(_a,_b,_c,_d,_C)                        \\\n-            _GLIBCPP_CLASS_REQUIRES4(_a, _b, _c, _d, __gnu_cxx, _C)\n+            _GLIBCPP_CLASS_REQUIRES4(_a, _b, _c, _d, __gnu_cxx, _C);\n \n #endif // enable/disable\n "}, {"sha": "3053515c52f7ef7c0d1271efad1b53bfe560ea5a", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 253, "deletions": 253, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -74,7 +74,7 @@ namespace std\n     __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n       if (__a < __b)\n \tif (__b < __c)\n \t  return __b;\n@@ -95,7 +95,7 @@ namespace std\n     __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BinaryFunctionConcept<_Compare, bool, _Tp, _Tp>);\n+      __glibcpp_function_requires(_BinaryFunctionConcept<_Compare, bool, _Tp, _Tp>)\n       if (__comp(__a, __b))\n \tif (__comp(__b, __c))\n \t  return __b;\n@@ -117,7 +117,7 @@ namespace std\n     for_each(_InputIter __first, _InputIter __last, _Function __f)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       for ( ; __first != __last; ++__first)\n \t__f(*__first);\n       return __f;\n@@ -231,9 +231,9 @@ namespace std\n \t const _Tp& __val)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t\ttypename iterator_traits<_InputIter>::value_type, _Tp>);\n+\t\ttypename iterator_traits<_InputIter>::value_type, _Tp>)\n       return find(__first, __last, __val, __iterator_category(__first));\n     }\n \n@@ -243,9 +243,9 @@ namespace std\n \t    _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t      typename iterator_traits<_InputIter>::value_type>);\n+\t      typename iterator_traits<_InputIter>::value_type>)\n       return find_if(__first, __last, __pred, __iterator_category(__first));\n     }\n \n@@ -256,9 +256,9 @@ namespace std\n     adjacent_find(_ForwardIter __first, _ForwardIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n       if (__first == __last)\n \treturn __last;\n       _ForwardIter __next = __first;\n@@ -276,10 +276,10 @@ namespace std\n \t\t  _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n       if (__first == __last)\n \treturn __last;\n       _ForwardIter __next = __first;\n@@ -304,10 +304,10 @@ namespace std\n \t  _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter>::value_type >);\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>);\n+\t    typename iterator_traits<_InputIter>::value_type >)\n+      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n \t  ++__n;\n@@ -320,9 +320,9 @@ namespace std\n \t     _Size& __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n \t  ++__n;\n@@ -333,10 +333,10 @@ namespace std\n     count(_InputIter __first, _InputIter __last, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter>::value_type >);\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>);\n+\t    typename iterator_traits<_InputIter>::value_type >)\n+      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n       typename iterator_traits<_InputIter>::difference_type __n = 0;\n       for ( ; __first != __last; ++__first)\n \tif (*__first == __value)\n@@ -349,9 +349,9 @@ namespace std\n     count_if(_InputIter __first, _InputIter __last, _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       typename iterator_traits<_InputIter>::difference_type __n = 0;\n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n@@ -368,11 +368,11 @@ namespace std\n \t   _ForwardIter2 __first2, _ForwardIter2 __last2) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIter1>::value_type,\n-\t    typename iterator_traits<_ForwardIter2>::value_type>);\n+\t    typename iterator_traits<_ForwardIter2>::value_type>)\n \n       // Test for empty ranges\n       if (__first1 == __last1 || __first2 == __last2)\n@@ -421,11 +421,11 @@ namespace std\n \t   _BinaryPred  __predicate) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPred,\n \t    typename iterator_traits<_ForwardIter1>::value_type,\n-\t    typename iterator_traits<_ForwardIter2>::value_type>);\n+\t    typename iterator_traits<_ForwardIter2>::value_type>)\n \n       // Test for empty ranges\n       if (__first1 == __last1 || __first2 == __last2)\n@@ -483,10 +483,10 @@ namespace std\n \t     _Integer __count, const _Tp& __val)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n-      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_EqualityComparableConcept<_Tp>)\n \n       if (__count <= 0)\n \treturn __first;\n@@ -517,9 +517,9 @@ namespace std\n \t     _BinaryPred __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPred,\n-\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>);\n+\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>)\n \n       if (__count <= 0)\n \treturn __first;\n@@ -560,14 +560,14 @@ namespace std\n \t\t_ForwardIter2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>)\n       __glibcpp_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_ForwardIter1>::value_type,\n-\t    typename iterator_traits<_ForwardIter2>::value_type>);\n+\t    typename iterator_traits<_ForwardIter2>::value_type>)\n       __glibcpp_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_ForwardIter2>::value_type,\n-\t    typename iterator_traits<_ForwardIter1>::value_type>);\n+\t    typename iterator_traits<_ForwardIter1>::value_type>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \titer_swap(__first1, __first2);\n@@ -582,11 +582,11 @@ namespace std\n \t      _OutputIter __result, _UnaryOperation __unary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n     /* XXX\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n \t    // should be \"the type returned by _UnaryOperation\"\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n     */\n \n       for ( ; __first != __last; ++__first, ++__result)\n@@ -602,12 +602,12 @@ namespace std\n \t      _BinaryOperation __binary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n     /* XXX\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n \t    // should be \"the type returned by _BinaryOperation\"\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n     */\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2, ++__result)\n@@ -623,11 +623,11 @@ namespace std\n \t    const _Tp& __old_value, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>);\n+\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>)\n       __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n \tif (*__first == __old_value)\n@@ -640,11 +640,11 @@ namespace std\n \t       _Predicate __pred, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n \tif (__pred(*__first))\n@@ -658,11 +658,11 @@ namespace std\n \t\t const _Tp& __old_value, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_InputIter>::value_type, _Tp>);\n+\t    typename iterator_traits<_InputIter>::value_type, _Tp>)\n \n       for ( ; __first != __last; ++__first, ++__result)\n \t*__result = *__first == __old_value ? __new_value : *__first;\n@@ -677,11 +677,11 @@ namespace std\n \t\t    _Predicate __pred, const _Tp& __new_value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n \n       for ( ; __first != __last; ++__first, ++__result)\n \t*__result = __pred(*__first) ? __new_value : *__first;\n@@ -695,9 +695,9 @@ namespace std\n     generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_GeneratorConcept<_Generator,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n \t*__first = __gen();\n@@ -710,7 +710,7 @@ namespace std\n     /*\n       // XXX concept requirements\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    \"the return type of _Generator\" ??   >);\n+\t    \"the return type of _Generator\" ??   >)\n     */\n \n       for ( ; __n > 0; --__n, ++__first)\n@@ -726,11 +726,11 @@ namespace std\n \t\t_OutputIter __result, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_InputIter>::value_type, _Tp>);\n+\t    typename iterator_traits<_InputIter>::value_type, _Tp>)\n \n       for ( ; __first != __last; ++__first)\n \tif (!(*__first == __value)) {\n@@ -746,11 +746,11 @@ namespace std\n \t\t   _OutputIter __result, _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n \n       for ( ; __first != __last; ++__first)\n \tif (!__pred(*__first)) {\n@@ -766,11 +766,11 @@ namespace std\n \t   const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n       __glibcpp_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>);\n+\t    typename iterator_traits<_ForwardIter>::value_type, _Tp>)\n \n       __first = find(__first, __last, __value);\n       _ForwardIter __i = __first;\n@@ -784,9 +784,9 @@ namespace std\n \t      _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       __first = find_if(__first, __last, __pred);\n       _ForwardIter __i = __first;\n@@ -831,11 +831,11 @@ namespace std\n \t\t_OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n     \n       typedef typename iterator_traits<_OutputIter>::iterator_category _IterType;\n \n@@ -853,7 +853,7 @@ namespace std\n       // concept requirements -- iterators already checked\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t  typename iterator_traits<_InputIter>::value_type,\n-\t  typename iterator_traits<_InputIter>::value_type>);\n+\t  typename iterator_traits<_InputIter>::value_type>)\n     \n       typename iterator_traits<_InputIter>::value_type __value = *__first;\n       *__result = __value;\n@@ -875,7 +875,7 @@ namespace std\n       // concept requirements -- iterators already checked\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIter>::value_type,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n     \n       *__result = *__first;\n       while (++__first != __last)\n@@ -890,9 +890,9 @@ namespace std\n \t\t_BinaryPredicate __binary_pred)\n     {\n       // concept requirements -- predicates checked later\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n     \n       typedef typename iterator_traits<_OutputIter>::iterator_category _IterType;\n \n@@ -906,9 +906,9 @@ __result, __binary_pred, _IterType());\n     unique(_ForwardIter __first, _ForwardIter __last)\n     {\n \t  // concept requirements\n-\t  __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+\t  __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n \t  __glibcpp_function_requires(_EqualityComparableConcept<\n-\t\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n \t  __first = adjacent_find(__first, __last);\n \t  return unique_copy(__first, __last, __first);\n@@ -920,10 +920,10 @@ __result, __binary_pred, _IterType());\n            _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t\ttypename iterator_traits<_ForwardIter>::value_type,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n \n       __first = adjacent_find(__first, __last, __binary_pred);\n       return unique_copy(__first, __last, __first, __binary_pred);\n@@ -956,7 +956,7 @@ __result, __binary_pred, _IterType());\n     {\n \t  // concept requirements\n \t  __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t\t    _BidirectionalIter>);\n+\t\t    _BidirectionalIter>)\n \t  __reverse(__first, __last, __iterator_category(__first));\n     }\n \n@@ -966,9 +966,9 @@ __result, __binary_pred, _IterType());\n \t\t\t     _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_BidirectionalIter>::value_type>);\n+\t\ttypename iterator_traits<_BidirectionalIter>::value_type>)\n \n       while (__first != __last) {\n \t--__last;\n@@ -1029,7 +1029,7 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t    _BidirectionalIter>);\n+\t    _BidirectionalIter>)\n     \n       if ((__first == __middle) || (__last  == __middle))\n \treturn;\n@@ -1057,7 +1057,7 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n     \n       if ((__first == __middle) || (__last  == __middle))\n \treturn;\n@@ -1114,7 +1114,7 @@ __result, __binary_pred, _IterType());\n     rotate(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n     \n       typedef typename iterator_traits<_ForwardIter>::iterator_category _IterType;\n       __rotate(__first, __middle, __last, _IterType());\n@@ -1126,9 +1126,9 @@ __result, __binary_pred, _IterType());\n                 _ForwardIter __last, _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n \n       return copy(__first, __middle, copy(__middle, __last, __result));\n     }\n@@ -1155,7 +1155,7 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n \n       if (__first == __last) return;\n       for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)\n@@ -1169,7 +1169,7 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n \n       if (__first == __last) return;\n       for (_RandomAccessIter __i = __first + 1; __i != __last; ++__i)\n@@ -1184,9 +1184,9 @@ __result, __binary_pred, _IterType());\n                     _OutputIter __out, const _Distance __n)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n \n       _Distance __remaining = distance(__first, __last);\n       _Distance __m = min(__n, __remaining);\n@@ -1212,11 +1212,11 @@ __result, __binary_pred, _IterType());\n \t\t   _RandomNumberGenerator& __rand)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n       __glibcpp_function_requires(_UnaryFunctionConcept<\n-\t\t_RandomNumberGenerator, _Distance, _Distance>);\n+\t\t_RandomNumberGenerator, _Distance, _Distance>)\n \n       _Distance __remaining = distance(__first, __last);\n       _Distance __m = min(__n, __remaining);\n@@ -1266,7 +1266,7 @@ __result, __binary_pred, _IterType());\n     {\n       // concept requirements\n       __glibcpp_function_requires(_UnaryFunctionConcept<\n-\t    _RandomNumberGenerator, _Distance, _Distance>);\n+\t    _RandomNumberGenerator, _Distance, _Distance>)\n \n       _Distance __m = 0;\n       _Distance __t = __n;\n@@ -1290,9 +1290,9 @@ __result, __binary_pred, _IterType());\n \t\t  _RandomAccessIter __out_first, _RandomAccessIter __out_last) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n \n       return __random_sample(__first, __last,\n \t\t\t     __out_first, __out_last - __out_first);\n@@ -1307,9 +1307,9 @@ __result, __binary_pred, _IterType());\n \t\t  _RandomNumberGenerator& __rand) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n \n       return __random_sample(__first, __last,\n \t\t\t     __out_first, __rand,\n@@ -1373,9 +1373,9 @@ __result, __binary_pred, _IterType());\n \t      _Predicate   __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       return __partition(__first, __last, __pred, __iterator_category(__first));\n     }\n@@ -1447,9 +1447,9 @@ __result, __binary_pred, _IterType());\n \t\t     _Predicate __pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_UnaryPredicateConcept<_Predicate,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n     \n       if (__first == __last)\n \treturn __first;\n@@ -1684,8 +1684,8 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n     \n       if (__first != __last) {\n \t__introsort_loop(__first, __last, __lg(__last - __first) * 2);\n@@ -1701,8 +1701,8 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _ValueType>);\n+\t    _RandomAccessIter>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _ValueType>)\n     \n       if (__first != __last) {\n \t__introsort_loop(__first, __last, __lg(__last - __first) * 2, __comp);\n@@ -1910,8 +1910,8 @@ __result, __binary_pred, _IterType());\n     \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n     \n       _Temporary_buffer<_RandomAccessIter, _ValueType> buf(__first, __last);\n       if (buf.begin() == 0)\n@@ -1929,9 +1929,9 @@ __result, __binary_pred, _IterType());\n     \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t\t\t\t  _ValueType, _ValueType>);\n+\t\t\t\t\t\t\t  _ValueType, _ValueType>)\n     \n       _Temporary_buffer<_RandomAccessIter, _ValueType> buf(__first, __last);\n       if (buf.begin() == 0)\n@@ -1951,8 +1951,8 @@ __result, __binary_pred, _IterType());\n     \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n     \n       make_heap(__first, __middle);\n       for (_RandomAccessIter __i = __middle; __i < __last; ++__i)\n@@ -1972,9 +1972,9 @@ __result, __binary_pred, _IterType());\n     \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIter>);\n+\t    _RandomAccessIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t\t\t\t  _ValueType, _ValueType>);\n+\t\t\t\t\t\t\t  _ValueType, _ValueType>)\n     \n       make_heap(__first, __middle, __comp);\n       for (_RandomAccessIter __i = __middle; __i < __last; ++__i)\n@@ -1994,10 +1994,10 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n-      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_OutputValueType>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_InputValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_OutputValueType>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_InputValueType>)\n     \n       if (__result_first == __result_last) return __result_last;\n       _RandomAccessIter __result_real_last = __result_first;\n@@ -2030,11 +2030,11 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_RandomAccessIter>::difference_type _DistanceType;\n \t\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>);\n-      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_ConvertibleConcept<_InputValueType, _OutputValueType>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _OutputValueType, _OutputValueType>);\n+\t\t\t\t  _OutputValueType, _OutputValueType>)\n     \n       if (__result_first == __result_last) return __result_last;\n       _RandomAccessIter __result_real_last = __result_first;\n@@ -2065,8 +2065,8 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n     \n       while (__last - __first > 3) {\n \t_RandomAccessIter __cut =\n@@ -2092,9 +2092,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;\n \t\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>);\n+      __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<_RandomAccessIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n-\t\t\t\t  _ValueType, _ValueType>);\n+\t\t\t\t  _ValueType, _ValueType>)\n     \n       while (__last - __first > 3) {\n \t_RandomAccessIter __cut =\n@@ -2123,9 +2123,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n     \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2155,9 +2155,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2186,9 +2186,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2218,9 +2218,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2249,9 +2249,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2287,9 +2287,9 @@ __result, __binary_pred, _IterType());\n       typedef typename iterator_traits<_ForwardIter>::difference_type _DistanceType;\n       \n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>);\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n+      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;\n@@ -2322,10 +2322,10 @@ __result, __binary_pred, _IterType());\n                   const _Tp& __val)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n \n       _ForwardIter __i = lower_bound(__first, __last, __val);\n       return __i != __last && !(__val < *__i);\n@@ -2337,10 +2337,10 @@ __result, __binary_pred, _IterType());\n                   const _Tp& __val, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_SameTypeConcept<_Tp,\n-\t\ttypename iterator_traits<_ForwardIter>::value_type>);\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>);\n+\t\ttypename iterator_traits<_ForwardIter>::value_type>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n \n       _ForwardIter __i = lower_bound(__first, __last, __val, __comp);\n       return __i != __last && !__comp(__val, *__i);\n@@ -2355,15 +2355,15 @@ __result, __binary_pred, _IterType());\n \t  _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n \tif (*__first2 < *__first1) {\n@@ -2387,16 +2387,16 @@ __result, __binary_pred, _IterType());\n \t  _OutputIter __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n \tif (__comp(*__first2, *__first1)) {\n@@ -2684,8 +2684,8 @@ __result, __binary_pred, _IterType());\n     \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t    _BidirectionalIter>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _BidirectionalIter>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n     \n       if (__first == __middle || __middle == __last)\n \treturn;\n@@ -2715,9 +2715,9 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<\n-\t    _BidirectionalIter>);\n+\t    _BidirectionalIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n-\t    _ValueType, _ValueType>);\n+\t    _ValueType, _ValueType>)\n     \n       if (__first == __middle || __middle == __last)\n \treturn;\n@@ -2745,13 +2745,13 @@ __result, __binary_pred, _IterType());\n \t     _InputIter2 __first2, _InputIter2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first2 < *__first1)\n@@ -2770,14 +2770,14 @@ __result, __binary_pred, _IterType());\n \t     _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first2, *__first1))\n@@ -2797,15 +2797,15 @@ __result, __binary_pred, _IterType());\n \t      _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n \tif (*__first1 < *__first2) {\n@@ -2834,16 +2834,16 @@ __result, __binary_pred, _IterType());\n \t      _OutputIter __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) {\n \tif (__comp(*__first1, *__first2)) {\n@@ -2871,15 +2871,15 @@ __result, __binary_pred, _IterType());\n \t\t     _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2) \n \tif (*__first1 < *__first2) \n@@ -2903,16 +2903,16 @@ __result, __binary_pred, _IterType());\n \t\t     _OutputIter __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2))\n@@ -2935,15 +2935,15 @@ __result, __binary_pred, _IterType());\n \t\t   _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first1 < *__first2) {\n@@ -2968,16 +2968,16 @@ __result, __binary_pred, _IterType());\n \t\t   _OutputIter __result, _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2)) {\n@@ -3001,15 +3001,15 @@ __result, __binary_pred, _IterType());\n \t\t\t     _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (*__first1 < *__first2) {\n@@ -3038,16 +3038,16 @@ __result, __binary_pred, _IterType());\n \t\t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_SameTypeConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && __first2 != __last2)\n \tif (__comp(*__first1, *__first2)) {\n@@ -3075,9 +3075,9 @@ __result, __binary_pred, _IterType());\n     max_element(_ForwardIter __first, _ForwardIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last) return __first;\n       _ForwardIter __result = __first;\n@@ -3093,10 +3093,10 @@ __result, __binary_pred, _IterType());\n \t\t_Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_ForwardIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last) return __first;\n       _ForwardIter __result = __first;\n@@ -3110,9 +3110,9 @@ __result, __binary_pred, _IterType());\n     min_element(_ForwardIter __first, _ForwardIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last) return __first;\n       _ForwardIter __result = __first;\n@@ -3128,10 +3128,10 @@ __result, __binary_pred, _IterType());\n \t\t_Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_ForwardIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last) return __first;\n       _ForwardIter __result = __first;\n@@ -3149,9 +3149,9 @@ __result, __binary_pred, _IterType());\n     next_permutation(_BidirectionalIter __first, _BidirectionalIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_BidirectionalIter>::value_type>);\n+\t    typename iterator_traits<_BidirectionalIter>::value_type>)\n \n       if (__first == __last)\n \treturn false;\n@@ -3186,10 +3186,10 @@ __result, __binary_pred, _IterType());\n \t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_BidirectionalIter>::value_type,\n-\t    typename iterator_traits<_BidirectionalIter>::value_type>);\n+\t    typename iterator_traits<_BidirectionalIter>::value_type>)\n \n       if (__first == __last)\n \treturn false;\n@@ -3223,9 +3223,9 @@ __result, __binary_pred, _IterType());\n     prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_BidirectionalIter>::value_type>);\n+\t    typename iterator_traits<_BidirectionalIter>::value_type>)\n \n       if (__first == __last)\n \treturn false;\n@@ -3260,10 +3260,10 @@ __result, __binary_pred, _IterType());\n \t\t     _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_Compare,\n \t    typename iterator_traits<_BidirectionalIter>::value_type,\n-\t    typename iterator_traits<_BidirectionalIter>::value_type>);\n+\t    typename iterator_traits<_BidirectionalIter>::value_type>)\n \n       if (__first == __last)\n \treturn false;\n@@ -3300,11 +3300,11 @@ __result, __binary_pred, _IterType());\n \t\t  _ForwardIter __first2, _ForwardIter __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       for ( ; __first1 != __last1; ++__first1) \n \tfor (_ForwardIter __iter = __first2; __iter != __last2; ++__iter)\n@@ -3320,14 +3320,14 @@ __result, __binary_pred, _IterType());\n \t\t  _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_InputIter>::value_type,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       for ( ; __first1 != __last1; ++__first1) \n \tfor (_ForwardIter __iter = __first2; __iter != __last2; ++__iter)\n@@ -3401,8 +3401,8 @@ __result, __binary_pred, _IterType());\n \t       bidirectional_iterator_tag, bidirectional_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter1>);\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter2>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter1>)\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter2>)\n \n       typedef reverse_iterator<_BidirectionalIter1> _RevIter1;\n       typedef reverse_iterator<_BidirectionalIter2> _RevIter2;\n@@ -3430,8 +3430,8 @@ __result, __binary_pred, _IterType());\n \t       _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter1>);\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter2>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter1>)\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIter2>)\n \n       typedef reverse_iterator<_BidirectionalIter1> _RevIter1;\n       typedef reverse_iterator<_BidirectionalIter2> _RevIter2;\n@@ -3459,11 +3459,11 @@ __result, __binary_pred, _IterType());\n \t     _ForwardIter2 __first2, _ForwardIter2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_ForwardIter1>::value_type,\n-\t    typename iterator_traits<_ForwardIter2>::value_type>);\n+\t    typename iterator_traits<_ForwardIter2>::value_type>)\n \n       return __find_end(__first1, __last1, __first2, __last2,\n \t\t\t__iterator_category(__first1),\n@@ -3478,11 +3478,11 @@ __result, __binary_pred, _IterType());\n \t     _BinaryPredicate __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter2>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_BinaryPredicate,\n \t    typename iterator_traits<_ForwardIter1>::value_type,\n-\t    typename iterator_traits<_ForwardIter2>::value_type>);\n+\t    typename iterator_traits<_ForwardIter2>::value_type>)\n \n       return __find_end(__first1, __last1, __first2, __last2,\n \t\t\t__iterator_category(__first1),\n@@ -3529,9 +3529,9 @@ __result, __binary_pred, _IterType());\n     is_heap(_RandomAccessIter __first, _RandomAccessIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>);\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_RandomAccessIter>::value_type>);\n+\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n \n       return __is_heap(__first, __last - __first);\n     }\n@@ -3543,10 +3543,10 @@ __result, __binary_pred, _IterType());\n \t    _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>);\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n \t    typename iterator_traits<_RandomAccessIter>::value_type, \n-\t    typename iterator_traits<_RandomAccessIter>::value_type>);\n+\t    typename iterator_traits<_RandomAccessIter>::value_type>)\n \n       return __is_heap(__first, __comp, __last - __first);\n     }\n@@ -3560,9 +3560,9 @@ __result, __binary_pred, _IterType());\n     is_sorted(_ForwardIter __first, _ForwardIter __last)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last)\n \treturn true;\n@@ -3581,10 +3581,10 @@ __result, __binary_pred, _IterType());\n     is_sorted(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_BinaryPredicateConcept<_StrictWeakOrdering,\n \t    typename iterator_traits<_ForwardIter>::value_type, \n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       if (__first == __last)\n \treturn true;"}, {"sha": "7c5c6a02863bde989e7821cbbc20b2f3b33e5fc4", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -89,10 +89,10 @@ namespace std\n       typedef typename iterator_traits<_ForwardIter2>::value_type _ValueType2;\n \n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>);\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>);\n-      __glibcpp_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>);\n-      __glibcpp_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>)\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>)\n+      __glibcpp_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>)\n+      __glibcpp_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>)\n \n       _ValueType1 __tmp = *__a;\n       *__a = *__b;\n@@ -104,7 +104,7 @@ namespace std\n     swap(_Tp& __a, _Tp& __b)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_SGIAssignableConcept<_Tp>);\n+      __glibcpp_function_requires(_SGIAssignableConcept<_Tp>)\n       \n       _Tp __tmp = __a;\n       __a = __b;\n@@ -122,7 +122,7 @@ namespace std\n     min(const _Tp& __a, const _Tp& __b)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n       //return __b < __a ? __b : __a;\n       if (__b < __a) return __b; return __a;\n     }\n@@ -132,7 +132,7 @@ namespace std\n     max(const _Tp& __a, const _Tp& __b) \n     {\n       // concept requirements\n-      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>);\n+      __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)\n       //return  __a < __b ? __b : __a;\n       if (__a < __b) return __b; return __a;\n     }\n@@ -272,9 +272,9 @@ namespace std\n     copy(_InputIter __first, _InputIter __last, _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n \n        typedef typename _Is_normal_iterator<_InputIter>::_Normal __Normal;\n        return __copy_ni1(__first, __last, __result, __Normal());\n@@ -396,11 +396,11 @@ namespace std\n     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BI1>);\n-      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BI1>)\n+      __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n       __glibcpp_function_requires(_ConvertibleConcept<\n \t    typename iterator_traits<_BI1>::value_type,\n-\t    typename iterator_traits<_BI2>::value_type>);\n+\t    typename iterator_traits<_BI2>::value_type>)\n \n       typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;\n       return __copy_backward_input_normal_iterator(__first, __last, __result,\n@@ -439,9 +439,9 @@ namespace std\n     copy_n(_InputIter __first, _Size __count, _OutputIter __result)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,\n-\t    typename iterator_traits<_InputIter>::value_type>);\n+\t    typename iterator_traits<_InputIter>::value_type>)\n \n       return __copy_n(__first, __count, __result, __iterator_category(__first));\n     }\n@@ -455,7 +455,7 @@ namespace std\n     fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n \n       for ( ; __first != __last; ++__first)\n \t*__first = __value;\n@@ -466,7 +466,7 @@ namespace std\n     fill_n(_OutputIter __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,_Tp>);\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,_Tp>)\n \n       for ( ; __n > 0; --__n, ++__first)\n \t*__first = __value;\n@@ -530,12 +530,12 @@ namespace std\n \t     _InputIter2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       while (__first1 != __last1 && *__first1 == *__first2) {\n \t++__first1;\n@@ -551,8 +551,8 @@ namespace std\n \t     _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n \n       while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {\n \t++__first1;\n@@ -567,11 +567,11 @@ namespace std\n \t  _InputIter2 __first2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_EqualOpConcept<\n \t    typename iterator_traits<_InputIter1>::value_type,\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \tif (!(*__first1 == *__first2))\n@@ -586,8 +586,8 @@ namespace std\n \t  _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \tif (!__binary_pred(*__first1, *__first2))\n@@ -605,12 +605,12 @@ namespace std\n \t\t\t    _InputIter2 __first2, _InputIter2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       for ( ; __first1 != __last1 && __first2 != __last2\n \t    ; ++__first1, ++__first2) {\n@@ -629,8 +629,8 @@ namespace std\n \t\t\t    _Compare __comp)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n \n       for ( ; __first1 != __last1 && __first2 != __last2\n \t    ; ++__first1, ++__first2) {\n@@ -727,12 +727,12 @@ namespace std\n \t\t\t\t _InputIter2 __first2, _InputIter2 __last2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter1>::value_type>);\n+\t    typename iterator_traits<_InputIter1>::value_type>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_InputIter2>::value_type>);\n+\t    typename iterator_traits<_InputIter2>::value_type>)\n \n       return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);\n     }"}, {"sha": "34eafc23934c760fc4e448ea9a077680685c5b59", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -394,7 +394,7 @@ template <class _Tp, class _Alloc = allocator<_Tp> >\n class deque : protected _Deque_base<_Tp, _Alloc> {\n \n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n \n   typedef _Deque_base<_Tp, _Alloc> _Base;\n public:                         // Basic types"}, {"sha": "8f4d06804cdb051fd20f9c0e4005f26e60ebb179", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -89,8 +89,8 @@ namespace std\n \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIterator>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n \t\t  _ValueType(*(__last - 1)));\n@@ -123,7 +123,7 @@ namespace std\n \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n+\t    _RandomAccessIterator>)\n \n       __push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), \n \t\t  _ValueType(*(__last - 1)), __comp);\n@@ -168,8 +168,8 @@ namespace std\n \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIterator>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)));\n     }\n@@ -214,7 +214,7 @@ namespace std\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n+\t    _RandomAccessIterator>)\n \n       typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;\n       __pop_heap(__first, __last - 1, __last - 1, _ValueType(*(__last - 1)), __comp);\n@@ -231,8 +231,8 @@ namespace std\n \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n-      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>);\n+\t    _RandomAccessIterator>)\n+      __glibcpp_function_requires(_LessThanComparableConcept<_ValueType>)\n \n       if (__last - __first < 2) return;\n       _DistanceType __len = __last - __first;\n@@ -257,7 +257,7 @@ namespace std\n \n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n+\t    _RandomAccessIterator>)\n \n       if (__last - __first < 2) return;\n       _DistanceType __len = __last - __first;\n@@ -277,9 +277,9 @@ namespace std\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n+\t    _RandomAccessIterator>)\n       __glibcpp_function_requires(_LessThanComparableConcept<\n-\t    typename iterator_traits<_RandomAccessIterator>::value_type>);\n+\t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n \n       while (__last - __first > 1)\n \tpop_heap(__first, __last--);\n@@ -292,7 +292,7 @@ namespace std\n     {\n       // concept requirements\n       __glibcpp_function_requires(_Mutable_RandomAccessIteratorConcept<\n-\t    _RandomAccessIterator>);\n+\t    _RandomAccessIterator>)\n \n       while (__last - __first > 1)\n \tpop_heap(__first, __last--, __comp);"}, {"sha": "07fc896fad8d98ff9b3047a2460f483f8fe569fc", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -81,7 +81,7 @@ namespace std\n \t       _Distance& __n, input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       while (__first != __last) { ++__first; ++__n; }\n     }\n \n@@ -91,7 +91,7 @@ namespace std\n \t       _Distance& __n, random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>);\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __n += __last - __first;\n     }\n \n@@ -109,7 +109,7 @@ namespace std\n     __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n       typename iterator_traits<_InputIterator>::difference_type __n = 0;\n       while (__first != __last) {\n \t++__first; ++__n;\n@@ -123,7 +123,7 @@ namespace std\n \t\t\t   random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>);\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       return __last - __first;\n     }\n \n@@ -140,7 +140,7 @@ namespace std\n     __advance(_InputIter& __i, _Distance __n, input_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n       while (__n--) ++__i;\n     }\n \n@@ -149,7 +149,7 @@ namespace std\n     __advance(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>);\n+      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n       if (__n > 0)\n \twhile (__n--) ++__i;\n       else\n@@ -161,7 +161,7 @@ namespace std\n     __advance(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>);\n+      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n       __i += __n;\n     }\n "}, {"sha": "d699dcd21ac314ced1a538f724941aed4b9754c3", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -230,7 +230,7 @@ template <class _Tp, class _Alloc = allocator<_Tp> >\n class list : protected _List_base<_Tp, _Alloc>\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n \n   typedef _List_base<_Tp, _Alloc> _Base;\n protected:"}, {"sha": "45f3d588ade62ac8f10df8dcca102370912db27e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -70,7 +70,7 @@ template <class _Key, class _Tp, class _Compare = less<_Key>,\n class map\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n   __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept);\n \n public:"}, {"sha": "f812e37216f6a682648b4dfe572461692518fa3a", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -84,7 +84,7 @@ template <class _Key, class _Tp, class _Compare, class _Alloc>\n class multimap\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n   __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept);\n \n public:"}, {"sha": "8aa207dffb35d0cae208e237b303fbabfddefc44", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -83,7 +83,7 @@ template <class _Key, class _Compare, class _Alloc>\n class multiset\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n   __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept);\n \n public:"}, {"sha": "65083f703f04c1cc3c4488c5e2e2a656819d051e", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -69,7 +69,7 @@ namespace std\n     accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t__init = __init + *__first;\n@@ -82,7 +82,7 @@ namespace std\n \t       _BinaryOperation __binary_op)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n \n       for ( ; __first != __last; ++__first)\n \t__init = __binary_op(__init, *__first);\n@@ -95,8 +95,8 @@ namespace std\n \t\t  _InputIterator2 __first2, _Tp __init)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __init + (*__first1 * *__first2);\n@@ -112,8 +112,8 @@ namespace std\n \t\t  _BinaryOperation2 __binary_op2)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>);\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator1>)\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator2>)\n \n       for ( ; __first1 != __last1; ++__first1, ++__first2)\n \t__init = __binary_op1(__init, __binary_op2(*__first1, *__first2));\n@@ -128,8 +128,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -149,8 +149,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -170,8 +170,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -192,8 +192,8 @@ namespace std\n       typedef typename iterator_traits<_InputIterator>::value_type _ValueType;\n \n       // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>);\n-      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>);\n+      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcpp_function_requires(_OutputIteratorConcept<_OutputIterator, _ValueType>)\n \n       if (__first == __last) return __result;\n       *__result = *__first;\n@@ -259,9 +259,9 @@ namespace std\n     iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)\n     {\n       // concept requirements\n-      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>);\n+      __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter>)\n       __glibcpp_function_requires(_ConvertibleConcept<_Tp,\n-\t    typename iterator_traits<_ForwardIter>::value_type>);\n+\t    typename iterator_traits<_ForwardIter>::value_type>)\n \n       while (__first != __last)\n \t*__first++ = __value++;"}, {"sha": "7b2ae94e380406459c419c98e7f066234d7ec284", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -82,9 +82,9 @@ template <class _Tp, class _Sequence>\n class queue\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n-  __glibcpp_class_requires(_Sequence, _FrontInsertionSequenceConcept);\n-  __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+  __glibcpp_class_requires(_Sequence, _FrontInsertionSequenceConcept)\n+  __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept)\n   typedef typename _Sequence::value_type _Sequence_value_type;\n   __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept);\n \n@@ -164,9 +164,9 @@ template <class _Tp,\n class priority_queue\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n-  __glibcpp_class_requires(_Sequence, _SequenceConcept);\n-  __glibcpp_class_requires(_Sequence, _RandomAccessContainerConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+  __glibcpp_class_requires(_Sequence, _SequenceConcept)\n+  __glibcpp_class_requires(_Sequence, _RandomAccessContainerConcept)\n   typedef typename _Sequence::value_type _Sequence_value_type;\n   __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept);\n   __glibcpp_class_requires4(_Compare, bool, _Tp, _Tp, _BinaryFunctionConcept);"}, {"sha": "880e5f6a95b2a3fd9d9ce0f042e6ae75d3b08dca", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -84,7 +84,7 @@ template <class _Key, class _Compare, class _Alloc>\n class set\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n   __glibcpp_class_requires4(_Compare, bool, _Key, _Key, _BinaryFunctionConcept);\n \n public:"}, {"sha": "b0bca258bc59598ac663793411b813358b6b653b", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -82,8 +82,8 @@ template <class _Tp, class _Sequence>\n class stack\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n-  __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n+  __glibcpp_class_requires(_Sequence, _BackInsertionSequenceConcept)\n   typedef typename _Sequence::value_type _Sequence_value_type;\n   __glibcpp_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept);\n "}, {"sha": "4ac20ba8dbc79ea3a2208bdd566b1846b314003a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -147,7 +147,7 @@ template <class _Tp, class _Alloc = allocator<_Tp> >\n class vector : protected _Vector_base<_Tp, _Alloc> \n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n \n private:\n   typedef _Vector_base<_Tp, _Alloc> _Base;"}, {"sha": "cd26c57684e9f705bc69635f48e924a9cad2f11b", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -233,8 +233,8 @@ template <class _Key, class _Tp, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multimap\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Key, _SGIAssignableConcept);\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Key, _SGIAssignableConcept)\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n   __glibcpp_class_requires3(_HashFcn, size_t, _Key, _UnaryFunctionConcept);\n   __glibcpp_class_requires3(_EqualKey, _Key, _Key, _BinaryPredicateConcept);\n "}, {"sha": "9ddef60b6877f4347a180f5bc9e43be22ea61df7", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -83,7 +83,7 @@ template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_set\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Value, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Value, _SGIAssignableConcept)\n   __glibcpp_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n   __glibcpp_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n \n@@ -234,7 +234,7 @@ template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n class hash_multiset\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Value, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Value, _SGIAssignableConcept)\n   __glibcpp_class_requires3(_HashFcn, size_t, _Value, _UnaryFunctionConcept);\n   __glibcpp_class_requires3(_EqualKey, _Value, _Value, _BinaryPredicateConcept);\n "}, {"sha": "7f1a628cde1f8b92db714e26504d4ef6ff1492fe", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -291,7 +291,7 @@ template <class _Tp, class _Alloc = allocator<_Tp> >\n class slist : private _Slist_base<_Tp,_Alloc>\n {\n   // concept requirements\n-  __glibcpp_class_requires(_Tp, _SGIAssignableConcept);\n+  __glibcpp_class_requires(_Tp, _SGIAssignableConcept)\n \n private:\n   typedef _Slist_base<_Tp,_Alloc> _Base;"}, {"sha": "4fa5f82da1649e5d7a147da846c68ed8314069fe", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -65,7 +65,7 @@ sources = \\\n \tlocale.cc locale-inst.cc localename.cc \\\n \tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc\n+\tvalarray-inst.cc wstring-inst.cc concept-inst.cc\n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n \n@@ -88,16 +88,20 @@ strstream.lo: strstream.cc\n strstream.o: strstream.cc\n \t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n \n+# Use special rules for the concept-checking instantiations so that all\n+# the generated template functions are also instantiated.  Force the checks\n+# to be on so that the instantiations are actually seen.\n+concept-inst.lo: concept-inst.cc\n+\t$(LTCXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+concept-inst.o: concept-inst.cc\n+\t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-#\n-# The no-implicit-templates flag will generate unresolved references to\n-# the concept-checking symbols.  So we must disable the checks while\n-# actually building the library.\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\"}, {"sha": "b08c64c3e8add4f69065762d47694907edd7b9a5", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -66,7 +66,6 @@ AR = @AR@\n AS = @AS@\n ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n BASIC_FILE_H = @BASIC_FILE_H@\n-BUILD_INCLUDED_LIBINTL = @BUILD_INCLUDED_LIBINTL@\n CATALOGS = @CATALOGS@\n CATOBJEXT = @CATOBJEXT@\n CC = @CC@\n@@ -88,16 +87,16 @@ EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GENCAT = @GENCAT@\n-GLIBC21 = @GLIBC21@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n GMOFILES = @GMOFILES@\n GMSGFMT = @GMSGFMT@\n+GT_NO = @GT_NO@\n+GT_YES = @GT_YES@\n+INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@\n INSTOBJEXT = @INSTOBJEXT@\n-INTLBISON = @INTLBISON@\n+INTLDEPS = @INTLDEPS@\n INTLLIBS = @INTLLIBS@\n INTLOBJS = @INTLOBJS@\n-INTL_LIBTOOL_SUFFIX_PREFIX = @INTL_LIBTOOL_SUFFIX_PREFIX@\n-LIBICONV = @LIBICONV@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n@@ -138,6 +137,7 @@ glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n gxx_include_dir = @gxx_include_dir@\n ifGNUmake = @ifGNUmake@\n+l = @l@\n libio_la = @libio_la@\n libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n@@ -190,7 +190,7 @@ sources = \\\n \tlocale.cc locale-inst.cc localename.cc \\\n \tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n-\tvalarray-inst.cc wstring-inst.cc\n+\tvalarray-inst.cc wstring-inst.cc concept-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n@@ -215,10 +215,6 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-#\n-# The no-implicit-templates flag will generate unresolved references to\n-# the concept-checking symbols.  So we must disable the checks while\n-# actually building the library.\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n@@ -271,7 +267,8 @@ libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n locale.lo locale-inst.lo localename.lo collate.lo messages.lo \\\n moneypunct.lo numpunct.lo time.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n-string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo\n+string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n+concept-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -502,6 +499,14 @@ strstream.lo: strstream.cc\n strstream.o: strstream.cc\n \t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n \n+# Use special rules for the concept-checking instantiations so that all\n+# the generated template functions are also instantiated.  Force the checks\n+# to be on so that the instantiations are actually seen.\n+concept-inst.lo: concept-inst.cc\n+\t$(LTCXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+concept-inst.o: concept-inst.cc\n+\t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "e5a890d1c8081ad7ee5ec252b4c809ce332d11d2", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=4d16bdbbf65dc1c75e80887eb4fcb418f91e56b7", "patch": "@@ -0,0 +1,166 @@\n+// Concept checking instantiations -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+// \n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+// \n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// The implementation of some of the more complex checks uses the simple\n+// checks (good reuse of code), thereby requiring that the simple checks\n+// be instantiated somewhere.  The simple checks use other simple checks,\n+// and so on, until a couple hundred symbols all need instantiations.  We\n+// explicitly instantiate the initial set of symbols; compiling this file\n+// with -fimplicit-templates will take care of the rest for us.\n+\n+#include <bits/concept_check.h>\n+\n+#ifdef _GLIBCPP_CONCEPT_CHECKS\n+\n+#include <bits/stl_alloc.h>\n+#include <bits/std_vector.h>\n+#include <bits/std_ostream.h>\n+\n+#define _Instantiate(...) template void __function_requires< __VA_ARGS__ > ()\n+\n+namespace __gnu_cxx\n+{\n+\n+  template void __aux_require_boolean_expr<bool>(bool const&);\n+\n+  _Instantiate(_BidirectionalIteratorConcept<\n+    std::__normal_iterator< std::locale::facet**,\n+    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n+\n+  _Instantiate(_BidirectionalIteratorConcept<\n+    std::__normal_iterator< unsigned*,\n+    std::vector<unsigned, std::allocator<unsigned> > > > );\n+\n+  _Instantiate(_ConvertibleConcept<std::locale::facet*, std::locale::facet*> );\n+\n+  _Instantiate(_ConvertibleConcept<unsigned, unsigned> );\n+\n+  _Instantiate(_InputIteratorConcept<char*> );\n+\n+  _Instantiate(_InputIteratorConcept<char const*> );\n+\n+  _Instantiate(_InputIteratorConcept<std::locale::facet**> );\n+\n+  _Instantiate(_InputIteratorConcept<\n+    std::__normal_iterator< std::locale::facet* const*,\n+    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n+\n+  _Instantiate(_InputIteratorConcept<\n+    std::__normal_iterator< std::locale::facet**,\n+    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n+\n+  _Instantiate(_InputIteratorConcept<\n+    std::__normal_iterator< unsigned*,\n+    std::vector<unsigned, std::allocator<unsigned> > > > );\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  _Instantiate(_InputIteratorConcept<wchar_t*> );\n+\n+  _Instantiate(_InputIteratorConcept<wchar_t const*> );\n+\n+  _Instantiate(_LessThanComparableConcept<wchar_t*> );\n+#endif\n+\n+  _Instantiate(_LessThanComparableConcept<char*> );\n+\n+  _Instantiate(_LessThanComparableConcept<int> );\n+\n+  _Instantiate(_LessThanComparableConcept<long> );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  _Instantiate(_LessThanComparableConcept<long long> );\n+#endif\n+\n+  _Instantiate(_LessThanComparableConcept<unsigned> );\n+\n+  _Instantiate(_Mutable_BidirectionalIteratorConcept<\n+    std::__normal_iterator< std::locale::facet**,\n+    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n+\n+  _Instantiate(_Mutable_BidirectionalIteratorConcept<\n+    std::__normal_iterator< unsigned*,\n+    std::vector<unsigned, std::allocator<unsigned> > > > );\n+\n+  _Instantiate(_Mutable_ForwardIteratorConcept<\n+    std::__normal_iterator< std::locale::facet**,\n+    std::vector<std::locale::facet*,std::allocator<std::locale::facet*> > > > );\n+\n+  _Instantiate(_OutputIteratorConcept<\n+    std::locale::facet**, std::locale::facet*> );\n+\n+  _Instantiate(_OutputIteratorConcept<\n+    std::__normal_iterator< std::locale::facet**,\n+      std::vector<std::locale::facet*, std::allocator<std::locale::facet* > > >,\n+    std::locale::facet* > );\n+\n+  _Instantiate(_OutputIteratorConcept<std::__normal_iterator<\n+    unsigned*, std::vector<unsigned, std::allocator<unsigned> > >, unsigned> );\n+\n+  _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n+    char, std::char_traits<char> >, char> );\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  _Instantiate(_OutputIteratorConcept<std::ostreambuf_iterator<\n+    wchar_t, std::char_traits<wchar_t> >, wchar_t> );\n+#endif\n+\n+  _Instantiate(_RandomAccessIteratorConcept<char*> );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<char const*> );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<\n+    std::__normal_iterator<char const*, std::string> > );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<\n+    std::__normal_iterator<char*, std::string> > );\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  _Instantiate(_RandomAccessIteratorConcept<\n+    std::__normal_iterator<wchar_t const*,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+                               std::allocator<wchar_t> > > > );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<\n+    std::__normal_iterator<wchar_t*,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+                               std::allocator<wchar_t> > > > );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<wchar_t*> );\n+\n+  _Instantiate(_RandomAccessIteratorConcept<wchar_t const*> );\n+#endif\n+\n+} // namespace __gnu_cxx\n+\n+#undef _Instantiate\n+\n+#endif\n+\n+"}]}