{"sha": "932b650839a319e0f4236d74252cad0bd0b017b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyYjY1MDgzOWEzMTllMGY0MjM2ZDc0MjUyY2FkMGJkMGIwMTdiMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-11T18:11:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-11T18:11:01Z"}, "message": "PR libstdc++/41975, DR 579\n\n2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41975, DR 579\n\t* include/bits/hashtable.h (_Hashtable<>::_M_erase_node): Remove.\n\t(erase(const_iterator), erase(const_iterator, const_iterator)):\n\tChange return type to void.\n\t* include/debug/unordered_map: Adjust.\n\t* include/debug/unordered_set: Likewise.\n\t* testsuite/util/exception/safety.h: Likewise.\n\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/erase/24061-map.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_set/erase/24061-map.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/24061-map.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/24061-map.cc:\n\tLikewise.\n\nFrom-SVN: r156705", "tree": {"sha": "9d2d8fe8b7b6404b007b8252226cfac5e01caf63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2d8fe8b7b6404b007b8252226cfac5e01caf63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/932b650839a319e0f4236d74252cad0bd0b017b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932b650839a319e0f4236d74252cad0bd0b017b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932b650839a319e0f4236d74252cad0bd0b017b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932b650839a319e0f4236d74252cad0bd0b017b2/comments", "author": null, "committer": null, "parents": [{"sha": "6d8921479a2a47ec10342142483b9291211c95c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8921479a2a47ec10342142483b9291211c95c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8921479a2a47ec10342142483b9291211c95c9"}], "stats": {"total": 278, "additions": 117, "deletions": 161}, "files": [{"sha": "a57153119d5e0f9d79b9bc1a9ba10b2f33d8f1db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -1,3 +1,23 @@\n+2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41975, DR 579\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_erase_node): Remove.\n+\t(erase(const_iterator), erase(const_iterator, const_iterator)):\n+\tChange return type to void.\n+\t* include/debug/unordered_map: Adjust.\n+\t* include/debug/unordered_set: Likewise.\n+\t* testsuite/util/exception/safety.h: Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/24061-map.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/24061-map.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/24061-map.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/24061-map.cc:\n+\tLikewise.\n+\n 2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* config/abi/pre/gnu.ver: Avoid exporting inadvertently"}, {"sha": "6d4693223616bc33873fcf6bd1ad69a6ff7485d0", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -385,9 +385,6 @@ namespace std\n       iterator\n       _M_insert(const value_type&, std::false_type);\n \n-      void\n-      _M_erase_node(_Node*, _Node**);\n-\n     public:\t\t\t\t\n       // Insert and erase\n       _Insert_Return_Type\n@@ -407,13 +404,13 @@ namespace std\n       insert(initializer_list<value_type> __l)\n       { this->insert(__l.begin(), __l.end()); }\n \n-      iterator\n+      void\n       erase(const_iterator);\n \n       size_type\n       erase(const key_type&);\n \n-      iterator\n+      void\n       erase(const_iterator, const_iterator);\n \n       void\n@@ -977,34 +974,6 @@ namespace std\n       return iterator(__new_node, _M_buckets + __n);\n     }\n \n-  // For erase(iterator) and erase(const_iterator).\n-  template<typename _Key, typename _Value, \n-\t   typename _Allocator, typename _ExtractKey, typename _Equal,\n-\t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n-\t   bool __chc, bool __cit, bool __uk>\n-    void\n-    _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n-\t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    _M_erase_node(_Node* __p, _Node** __b)\n-    {\n-      _Node* __cur = *__b;\n-      if (__cur == __p)\n-\t*__b = __cur->_M_next;\n-      else\n-\t{\n-\t  _Node* __next = __cur->_M_next;\n-\t  while (__next != __p)\n-\t    {\n-\t      __cur = __next;\n-\t      __next = __cur->_M_next;\n-\t    }\n-\t  __cur->_M_next = __next->_M_next;\n-\t}\n-\n-      _M_deallocate_node(__p);\n-      --_M_element_count;\n-    }\n-\n   template<typename _Key, typename _Value, \n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n@@ -1030,17 +999,30 @@ namespace std\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n-    typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n-\t\t\t_H1, _H2, _Hash, _RehashPolicy,\n-\t\t\t__chc, __cit, __uk>::iterator\n+    void\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     erase(const_iterator __it)\n     {\n-      iterator __result(__it._M_cur_node, __it._M_cur_bucket);\n-      ++__result;\n-      _M_erase_node(__it._M_cur_node, __it._M_cur_bucket);\n-      return __result;\n+      _Node* __p = __it._M_cur_node;\n+      _Node** __b = __it._M_cur_bucket;\n+\n+      _Node* __cur = *__b;\n+      if (__cur == __p)\n+\t*__b = __cur->_M_next;\n+      else\n+\t{\n+\t  _Node* __next = __cur->_M_next;\n+\t  while (__next != __p)\n+\t    {\n+\t      __cur = __next;\n+\t      __next = __cur->_M_next;\n+\t    }\n+\t  __cur->_M_next = __next->_M_next;\n+\t}\n+\n+      _M_deallocate_node(__p);\n+      --_M_element_count;\n     }\n \n   template<typename _Key, typename _Value, \n@@ -1102,17 +1084,17 @@ namespace std\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n-    typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n-\t\t\t_H1, _H2, _Hash, _RehashPolicy,\n-\t\t\t__chc, __cit, __uk>::iterator\n+    void\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     erase(const_iterator __first, const_iterator __last)\n     {\n-      while (__first != __last)\n-\t__first = this->erase(__first);\n-      return iterator(__last._M_cur_node, __last._M_cur_bucket);\n-    }\n+      if (__first == begin() && __last == end())\n+\tclear();\n+      else\n+\twhile (__first != __last)\n+\t  erase(__first++);\n+     }\n \n   template<typename _Key, typename _Value, \n \t   typename _Allocator, typename _ExtractKey, typename _Equal,"}, {"sha": "5f49aa6059b3af420757c2fc2d81d5d8b1ff4303", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -243,25 +243,24 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\treturn iterator(_Base::erase(__it.base()), this);\n+\t_Base::erase(__it.base());\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t{\n-\t  const_iterator __victim = __tmp++;\n-\t  __victim._M_invalidate();\n-\t}\n-\treturn iterator(_Base::erase(__first.base(),\n-\t\t\t\t     __last.base()), this);\n+\t  {\n+\t    const_iterator __victim = __tmp++;\n+\t    __victim._M_invalidate();\n+\t  }\n+\t_Base::erase(__first.base(), __last.base());\n       }\n \n       _Base&\n@@ -480,25 +479,24 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\treturn iterator(_Base::erase(__it.base()), this);\n+\t_Base::erase(__it.base());\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t{\n-\t  const_iterator __victim = __tmp++;\n-\t  __victim._M_invalidate();\n-\t}\n-\treturn iterator(_Base::erase(__first.base(),\n-\t\t\t\t     __last.base()), this);\n+\t  {\n+\t    const_iterator __victim = __tmp++;\n+\t    __victim._M_invalidate();\n+\t  }\n+\t_Base::erase(__first.base(), __last.base());\n       }\n \n       _Base&"}, {"sha": "8efe3fb51ad543cee6d0e62d4a291330281da67b", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -243,25 +243,24 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\treturn iterator(_Base::erase(__it.base()), this);\n+\t_Base::erase(__it.base());\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t{\n-\t  const_iterator __victim = __tmp++;\n-\t  __victim._M_invalidate();\n-\t}\n-\treturn iterator(_Base::erase(__first.base(),\n-\t\t\t\t     __last.base()), this);\n+\t  {\n+\t    const_iterator __victim = __tmp++;\n+\t    __victim._M_invalidate();\n+\t  }\n+\t_Base::erase(__first.base(), __last.base());\n       }\n \n       _Base&\n@@ -478,25 +477,24 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\treturn iterator(_Base::erase(__it.base()), this);\n+\t_Base::erase(__it.base());\n       }\n \n-      iterator\n+      void\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t{\n-\t  const_iterator __victim = __tmp++;\n-\t  __victim._M_invalidate();\n-\t}\n-\treturn iterator(_Base::erase(__first.base(),\n-\t\t\t\t     __last.base()), this);\n+\t  {\n+\t    const_iterator __victim = __tmp++;\n+\t    __victim._M_invalidate();\n+\t  }\n+\t_Base::erase(__first.base(), __last.base());\n       }\n \n       _Base&"}, {"sha": "70fb41e68e737dac962e9eedab5a73cb727c9c50", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -113,7 +113,7 @@ void test01()\n   VERIFY( m1.size() == 2 );\n   VERIFY( ++it10 == m1.end() );\n \n-  VERIFY( m1.erase(m1.begin()) != m1.end() );  \n+  m1.erase(m1.begin());\n   VERIFY( m1.size() == 1 );\n   VERIFY( m1.begin() == it11 );\n "}, {"sha": "759602b908646c18c6a42142df409fe3174d833e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/24061-map.cc", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -51,10 +51,8 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  iterator it3 = m1.erase(it1);\n+  m1.erase(it1);\n   VERIFY( m1.size() == 9 );\n-  VERIFY( it3 == it2 );\n-  VERIFY( *it3 == *it2 );\n \n   iterator it4 = m1.begin();\n   ++it4;\n@@ -63,21 +61,17 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  iterator it6 = m1.erase(it4, it5);\n+  m1.erase(it4, it5);\n   VERIFY( m1.size() == 7 );\n-  VERIFY( it6 == it5 );\n-  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = m1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  const_iterator it9 = m1.erase(it7);\n+  m1.erase(it7);\n   VERIFY( m1.size() == 6 );\n-  VERIFY( it9 == it8 );\n-  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = m1.begin();\n   ++it10;\n@@ -86,16 +80,11 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  const_iterator it12 = m1.erase(it10, it11);\n+  m1.erase(it10, it11);\n   VERIFY( m1.size() == 2 );\n-  VERIFY( it12 == it11 );\n-  VERIFY( *it12 == *it11 );\n-  VERIFY( ++it12 == m1.end() );\n \n-  iterator it13 = m1.erase(m1.begin(), m1.end());\n+  m1.erase(m1.begin(), m1.end());\n   VERIFY( m1.size() == 0 );\n-  VERIFY( it13 == it12 );\n-  VERIFY( it13 == m1.begin() );\n }\n   \n int main()"}, {"sha": "0e60b8a7c68e952603325a59c525810f0c19f579", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -113,7 +113,7 @@ void test01()\n   VERIFY( mm1.size() == 2 );\n   VERIFY( ++it10 == mm1.end() );\n \n-  VERIFY( mm1.erase(mm1.begin()) != mm1.end() );  \n+  mm1.erase(mm1.begin());\n   VERIFY( mm1.size() == 1 );\n   VERIFY( mm1.begin() == it11 );\n "}, {"sha": "0fe4eee9c1715b79d8019230a69f6a053f8a9cf4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/24061-multimap.cc", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -55,10 +55,8 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  iterator it3 = mm1.erase(it1);\n+  mm1.erase(it1);\n   VERIFY( mm1.size() == 12 );\n-  VERIFY( it3 == it2 );\n-  VERIFY( *it3 == *it2 );\n \n   iterator it4 = mm1.begin();\n   ++it4;\n@@ -67,21 +65,17 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  iterator it6 = mm1.erase(it4, it5);\n+  mm1.erase(it4, it5);\n   VERIFY( mm1.size() == 10 );\n-  VERIFY( it6 == it5 );\n-  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = mm1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  const_iterator it9 = mm1.erase(it7);\n+  mm1.erase(it7);\n   VERIFY( mm1.size() == 9 );\n-  VERIFY( it9 == it8 );\n-  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = mm1.begin();\n   ++it10;\n@@ -90,15 +84,11 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  const_iterator it12 = mm1.erase(it10, it11);\n+  mm1.erase(it10, it11);\n   VERIFY( mm1.size() == 5 );\n-  VERIFY( it12 == it11 );\n-  VERIFY( *it12 == *it11 );\n \n-  iterator it13 = mm1.erase(mm1.begin(), mm1.end());\n+  mm1.erase(mm1.begin(), mm1.end());\n   VERIFY( mm1.size() == 0 );\n-  VERIFY( it13 == mm1.end() );\n-  VERIFY( it13 == mm1.begin() );\n }\n   \n int main()"}, {"sha": "fbd8899e67f3360a21d6252de5d4f3b1cda14df9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -112,7 +112,7 @@ void test01()\n   VERIFY( ms1.size() == 2 );\n   VERIFY( ++it10 == ms1.end() );\n \n-  VERIFY( ms1.erase(ms1.begin()) != ms1.end() );  \n+  ms1.erase(ms1.begin());\n   VERIFY( ms1.size() == 1 );\n   VERIFY( ms1.begin() == it11 );\n "}, {"sha": "568862f44585630737b780f54088c504a5bde4aa", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/24061-multiset.cc", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -54,10 +54,8 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  iterator it3 = ms1.erase(it1);\n+  ms1.erase(it1);\n   VERIFY( ms1.size() == 12 );\n-  VERIFY( it3 == it2 );\n-  VERIFY( *it3 == *it2 );\n \n   iterator it4 = ms1.begin();\n   ++it4;\n@@ -66,21 +64,17 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  iterator it6 = ms1.erase(it4, it5);\n+  ms1.erase(it4, it5);\n   VERIFY( ms1.size() == 10 );\n-  VERIFY( it6 == it5 );\n-  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = ms1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  const_iterator it9 = ms1.erase(it7);\n+  ms1.erase(it7);\n   VERIFY( ms1.size() == 9 );\n-  VERIFY( it9 == it8 );\n-  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = ms1.begin();\n   ++it10;\n@@ -89,15 +83,11 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  const_iterator it12 = ms1.erase(it10, it11);\n+  ms1.erase(it10, it11);\n   VERIFY( ms1.size() == 5 );\n-  VERIFY( it12 == it11 );\n-  VERIFY( *it12 == *it11 );\n \n-  iterator it13 = ms1.erase(ms1.begin(), ms1.end());\n+  ms1.erase(ms1.begin(), ms1.end());\n   VERIFY( ms1.size() == 0 );\n-  VERIFY( it13 == ms1.end() );\n-  VERIFY( it13 == ms1.begin() );\n }\n   \n int main()"}, {"sha": "9bfa771462f1d8c39a35bff2a1bc9ebee59791c0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -112,7 +112,7 @@ void test01()\n   VERIFY( s1.size() == 2 );\n   VERIFY( ++it10 == s1.end() );\n \n-  VERIFY( s1.erase(s1.begin()) != s1.end() );  \n+  s1.erase(s1.begin());\n   VERIFY( s1.size() == 1 );\n   VERIFY( s1.begin() == it11 );\n "}, {"sha": "6d8920857781af87307b73397b898f4fdb0dcf9c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/24061-set.cc", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -50,10 +50,8 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  iterator it3 = s1.erase(it1);\n+  s1.erase(it1);\n   VERIFY( s1.size() == 9 );\n-  VERIFY( it3 == it2 );\n-  VERIFY( *it3 == *it2 );\n \n   iterator it4 = s1.begin();\n   ++it4;\n@@ -62,21 +60,17 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  iterator it6 = s1.erase(it4, it5);\n+  s1.erase(it4, it5);\n   VERIFY( s1.size() == 7 );\n-  VERIFY( it6 == it5 );\n-  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = s1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  const_iterator it9 = s1.erase(it7);\n+  s1.erase(it7);\n   VERIFY( s1.size() == 6 );\n-  VERIFY( it9 == it8 );\n-  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = s1.begin();\n   ++it10;\n@@ -85,16 +79,11 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  const_iterator it12 = s1.erase(it10, it11);\n+  s1.erase(it10, it11);\n   VERIFY( s1.size() == 2 );\n-  VERIFY( it12 == it11 );\n-  VERIFY( *it12 == *it11 );\n-  VERIFY( ++it12 == s1.end() );\n \n-  iterator it13 = s1.erase(s1.begin(), s1.end());\n+  s1.erase(s1.begin(), s1.end());\n   VERIFY( s1.size() == 0 );\n-  VERIFY( it13 == s1.end() );\n-  VERIFY( it13 == s1.begin() );\n }\n   \n int main()"}, {"sha": "2bd1ed96993ddf3138db6cd429784bf4c49115b3", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932b650839a319e0f4236d74252cad0bd0b017b2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=932b650839a319e0f4236d74252cad0bd0b017b2", "patch": "@@ -285,9 +285,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\tvoid (container_type::* _F_erase_point)(const_iterator);\n+\tvoid (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\tconst_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -304,9 +304,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\tvoid (container_type::* _F_erase_point)(const_iterator);\n+\tvoid (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\tconst_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -321,9 +321,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\tvoid (container_type::* _F_erase_point)(const_iterator);\n+\tvoid (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\tconst_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -338,9 +338,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\tvoid (container_type::* _F_erase_point)(const_iterator);\n+\tvoid (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\tconst_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),"}]}