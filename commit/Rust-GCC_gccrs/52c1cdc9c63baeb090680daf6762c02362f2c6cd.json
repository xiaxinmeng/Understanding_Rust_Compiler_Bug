{"sha": "52c1cdc9c63baeb090680daf6762c02362f2c6cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjMWNkYzljNjNiYWViMDkwNjgwZGFmNjc2MmMwMjM2MmYyYzZjZA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-14T22:22:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-14T22:22:15Z"}, "message": "Merge #630\n\n630: parse if expression with unary minus or not expression r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000140.html\r\n\r\n> An if conditional expression doesn't need brackets, but that means\r\n> that it doesn't accept struct expressions. Those are not easy to\r\n> distinquish from the block that follows. What isn't immediately clear\r\n> from the grammar is that unary conditions like minus '-' or not '!'\r\n> also shouldn't accept struct expressions (when part of an if\r\n> conditional expression) because those also cannot be easily\r\n> distinquished from the block that follows.\r\n> \r\n> Add a testcase \"ifunaryexpr.rs\" that shows a couple of contructs that\r\n> should be accepted as if conditional expressions and fix the parser to\r\n> pass the restriction of not accepting struct expressions after a unary\r\n> expression.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "8be58e078de992e2b2743557d747521b27b173ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8be58e078de992e2b2743557d747521b27b173ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGEIXCRBK7hj4Ov3rIwAAfS0IACWvaO47e+PQNIsxA0ZbYyTG\n0Cmw7gbmb1LV7gjcYriruz0r1kS1+x1rmRHj77iorL1OE52KMYbXtawKVM/tssxk\nFbpEPM8DuEnbQra0mtMllaMB1IxIvXkU9CdJ0x2O0ge2MLn6TfwENKP4qW3BmM8L\neLpOefOq8/LC3OExEDd5GAv8bJwQAk8bya6YpIfeDTVFnBVeZYrj4PbUvfTYATOz\nRtbHWOiJWO8SLnPGElC0qU0wdIbxX3XCACeCQgZJwVzFcTCH/R4MPOxfDBofDfIc\n2OYd3Wflg9y2xIwbZG0R/nHHEc9AKpr8oVfJXABkETTK4TRkE5MgFtJRl1RBYKM=\n=IcOR\n-----END PGP SIGNATURE-----\n", "payload": "tree 8be58e078de992e2b2743557d747521b27b173ae\nparent e53f1acb282a226cd037fd21e587c83f09c2e4af\nparent ee3d0b09dc7777cd04587a83f5cfe785101f0dc9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628979735 +0000\ncommitter GitHub <noreply@github.com> 1628979735 +0000\n\nMerge #630\n\n630: parse if expression with unary minus or not expression r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000140.html\r\n\r\n> An if conditional expression doesn't need brackets, but that means\r\n> that it doesn't accept struct expressions. Those are not easy to\r\n> distinquish from the block that follows. What isn't immediately clear\r\n> from the grammar is that unary conditions like minus '-' or not '!'\r\n> also shouldn't accept struct expressions (when part of an if\r\n> conditional expression) because those also cannot be easily\r\n> distinquished from the block that follows.\r\n> \r\n> Add a testcase \"ifunaryexpr.rs\" that shows a couple of contructs that\r\n> should be accepted as if conditional expressions and fix the parser to\r\n> pass the restriction of not accepting struct expressions after a unary\r\n> expression.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53f1acb282a226cd037fd21e587c83f09c2e4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53f1acb282a226cd037fd21e587c83f09c2e4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53f1acb282a226cd037fd21e587c83f09c2e4af"}, {"sha": "ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "fa6d409c6dc248c6b93933bab2aed2d8ba70f120", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1cdc9c63baeb090680daf6762c02362f2c6cd/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1cdc9c63baeb090680daf6762c02362f2c6cd/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=52c1cdc9c63baeb090680daf6762c02362f2c6cd", "patch": "@@ -12547,6 +12547,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       case MINUS: { // unary minus\n \tParseRestrictions entered_from_unary;\n \tentered_from_unary.entered_from_unary = true;\n+\tif (!restrictions.can_be_struct_expr)\n+\t  entered_from_unary.can_be_struct_expr = false;\n \tstd::unique_ptr<AST::Expr> expr\n \t  = parse_expr (LBP_UNARY_MINUS, {}, entered_from_unary);\n \n@@ -12571,6 +12573,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       case EXCLAM: { // logical or bitwise not\n \tParseRestrictions entered_from_unary;\n \tentered_from_unary.entered_from_unary = true;\n+\tif (!restrictions.can_be_struct_expr)\n+\t  entered_from_unary.can_be_struct_expr = false;\n \tstd::unique_ptr<AST::Expr> expr\n \t  = parse_expr (LBP_UNARY_EXCLAM, {}, entered_from_unary);\n "}, {"sha": "8f0bb87f558d354100f4abbc5757384c4b7f55a4", "filename": "gcc/testsuite/rust/compile/torture/ifunaryexpr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1cdc9c63baeb090680daf6762c02362f2c6cd/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1cdc9c63baeb090680daf6762c02362f2c6cd/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs?ref=52c1cdc9c63baeb090680daf6762c02362f2c6cd", "patch": "@@ -0,0 +1,22 @@\n+extern \"C\"\n+{\n+  pub fn abort ();\n+}\n+\n+struct B { b: bool }\n+\n+pub fn main ()\n+{\n+  let n = 1;\n+  if 0 > -n { } else { unsafe { abort (); } }\n+\n+  let b = true;\n+  if !b { unsafe { abort (); } }\n+  if !!b { } else { unsafe { abort (); } }\n+\n+  let bb = B { b: false };\n+\n+  if !bb.b && !b { unsafe { abort (); } }\n+\n+  if (B { b: true }).b { } else { unsafe { abort (); } }\n+}"}]}