{"sha": "9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "node_id": "C_kwDOANBUbNoAKDlmNDU1ZWQ4MjBjY2VhNGY1ZjM3ZWFmN2U1ZWQzYTg3Y2NlZDAyOGU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2022-12-05T02:20:55Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:53Z"}, "message": "gccrs: Cleanup unused parameters to fix the bootstrap build\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-type.cc (TyTyResolveCompile::visit): Remove unused parameters.\n\t* backend/rust-constexpr.cc (constant_value_1): Likewise.\n\t(fold_non_dependent_init): Likewise.\n\t* backend/rust-tree.cc (publicly_uniquely_derived_p): Likewise.\n\t(instantiation_dependent_expression_p): Likewise.\n\t(type_has_nontrivial_copy_init): Likewise.\n\t(is_normal_capture_proxy): Likewise.\n\t(resolve_nondeduced_context): Likewise.\n\t(undeduced_auto_decl): Likewise.\n\t(require_deduced_type): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.cc (PrivacyReporter::visit): Likewise.\n\t* checks/errors/privacy/rust-reachability.cc (ReachabilityVisitor::visit): Likewise.\n\t* checks/errors/privacy/rust-visibility-resolver.cc (VisibilityResolver::visit): Likewise.\n\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.cc (UnsafeChecker::visit): Likewise.\n\t* checks/lints/rust-lint-marklive.cc (MarkLive::go): Likewise.\n\t* checks/lints/rust-lint-unused-var.cc (unused_var_walk_fn): Likewise.\n\t* expand/rust-macro-builtins.cc (try_expand_single_string_literal): Likewise.\n\t(try_expand_many_expr): Likewise.\n\t(parse_single_string_literal): Likewise.\n\t(MacroBuiltin::assert_handler): Likewise.\n\t(MacroBuiltin::file_handler): Likewise.\n\t(MacroBuiltin::column_handler): Likewise.\n\t(MacroBuiltin::concat_handler): Likewise.\n\t(MacroBuiltin::env_handler): Likewise.\n\t(MacroBuiltin::line_handler): Likewise.\n\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::visit): Likewise.\n\t(ASTLoweringBase::handle_doc_item_attribute): Likewise.\n\t* hir/rust-hir-dump.cc (Dump::visit): Likewise.\n\t* hir/tree/rust-hir-full-test.cc (ConstGenericParam::accept_vis): Likewise.\n\t* lex/rust-lex.cc (Lexer::parse_utf8_escape): Likewise.\n\t(Lexer::parse_string): Likewise.\n\t(Lexer::parse_char_or_lifetime): Likewise.\n\t* lex/rust-lex.h: Likewise.\n\t* metadata/rust-export-metadata.cc: Likewise.\n\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Likewise.\n\t* resolve/rust-ast-resolve-type.cc (ResolveType::visit): Likewise.\n\t(ResolveTypeToCanonicalPath::visit): Likewise.\n\t* resolve/rust-ast-verify-assignee.h: Likewise.\n\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::visit): Likewise.\n\t* typecheck/rust-hir-type-check-expr.h: Likewise.\n\t* typecheck/rust-hir-type-check-item.h: Likewise.\n\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit): Likewise.\n\t* typecheck/rust-tyty-rules.h: Likewise.\n\t* util/rust-attributes.cc (AttributeChecker::visit): Likewise.", "tree": {"sha": "53e2b4150bf139c8fef9c8ee69cd6559e8873020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e2b4150bf139c8fef9c8ee69cd6559e8873020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03df9a040c979f97c6b0e1524899a7d457c2cb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03df9a040c979f97c6b0e1524899a7d457c2cb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03df9a040c979f97c6b0e1524899a7d457c2cb05"}], "stats": {"total": 1356, "additions": 661, "deletions": 695}, "files": [{"sha": "a1db6ade9fbd10bdb24cc6f5cbbb0ce295b3551a", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -428,7 +428,7 @@ TyTyResolveCompile::visit (const TyTy::SliceType &type)\n }\n \n void\n-TyTyResolveCompile::visit (const TyTy::BoolType &type)\n+TyTyResolveCompile::visit (const TyTy::BoolType &)\n {\n   translated\n     = ctx->get_backend ()->named_type (\"bool\",\n@@ -532,7 +532,7 @@ TyTyResolveCompile::visit (const TyTy::FloatType &type)\n }\n \n void\n-TyTyResolveCompile::visit (const TyTy::USizeType &type)\n+TyTyResolveCompile::visit (const TyTy::USizeType &)\n {\n   translated = ctx->get_backend ()->named_type (\n     \"usize\",\n@@ -542,7 +542,7 @@ TyTyResolveCompile::visit (const TyTy::USizeType &type)\n }\n \n void\n-TyTyResolveCompile::visit (const TyTy::ISizeType &type)\n+TyTyResolveCompile::visit (const TyTy::ISizeType &)\n {\n   translated = ctx->get_backend ()->named_type (\n     \"isize\",\n@@ -552,7 +552,7 @@ TyTyResolveCompile::visit (const TyTy::ISizeType &type)\n }\n \n void\n-TyTyResolveCompile::visit (const TyTy::CharType &type)\n+TyTyResolveCompile::visit (const TyTy::CharType &)\n {\n   translated\n     = ctx->get_backend ()->named_type (\"char\","}, {"sha": "912d73b5d7c08f0acf44aa15b5f2b6343eddb22c", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -3996,8 +3996,7 @@ constexpr_fn_retval (const constexpr_ctx *ctx, tree body)\n // return an aggregate constant.  If UNSHARE_P, return an unshared\n // copy of the initializer.\n static tree\n-constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p,\n-\t\t  bool unshare_p)\n+constant_value_1 (tree decl, bool, bool, bool unshare_p)\n {\n   while (TREE_CODE (decl) == CONST_DECL)\n     {\n@@ -6478,8 +6477,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n /* Like maybe_constant_init but first fully instantiate the argument.  */\n \n tree\n-fold_non_dependent_init (tree t,\n-\t\t\t tsubst_flags_t complain /*=tf_warning_or_error*/,\n+fold_non_dependent_init (tree t, tsubst_flags_t /*=tf_warning_or_error*/,\n \t\t\t bool manifestly_const_eval /*=false*/,\n \t\t\t tree object /* = NULL_TREE */)\n {"}, {"sha": "8243d4cf5c6748b5cde3a55b4c331ade94dcc63c", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -2060,11 +2060,7 @@ rs_tree_equal (tree t1, tree t2)\n \n /* TRUE iff TYPE is publicly & uniquely derived from PARENT.  */\n \n-bool\n-publicly_uniquely_derived_p (tree parent, tree type)\n-{\n-  return false;\n-}\n+bool publicly_uniquely_derived_p (tree, tree) { return false; }\n \n // forked from gcc/cp/typeck.cc comp_except_types\n \n@@ -3344,11 +3340,7 @@ release_tree_vector (vec<tree, va_gc> *vec)\n \n /* As above, but also check value-dependence of the expression as a whole.  */\n \n-bool\n-instantiation_dependent_expression_p (tree expression)\n-{\n-  return false;\n-}\n+bool instantiation_dependent_expression_p (tree) { return false; }\n \n // forked from gcc/cp/cvt.cc cp_get_callee\n \n@@ -3398,11 +3390,7 @@ scalarish_type_p (const_tree t)\n    constructors are deleted.  This function implements the ABI notion of\n    non-trivial copy, which has diverged from the one in the standard.  */\n \n-bool\n-type_has_nontrivial_copy_init (const_tree type)\n-{\n-  return false;\n-}\n+bool type_has_nontrivial_copy_init (const_tree) { return false; }\n \n // forked from gcc/cp/tree.cc build_local_temp\n \n@@ -3425,11 +3413,7 @@ build_local_temp (tree type)\n /* Returns true iff DECL is a capture proxy for a normal capture\n    (i.e. without explicit initializer).  */\n \n-bool\n-is_normal_capture_proxy (tree decl)\n-{\n-  return false;\n-}\n+bool is_normal_capture_proxy (tree) { return false; }\n \n // forked from gcc/cp/c-common.cc reject_gcc_builtin\n \n@@ -3694,7 +3678,7 @@ char_type_p (tree type)\n    lvalue for the function template specialization.  */\n \n tree\n-resolve_nondeduced_context (tree orig_expr, tsubst_flags_t complain)\n+resolve_nondeduced_context (tree orig_expr, tsubst_flags_t)\n {\n   return orig_expr;\n }\n@@ -3973,21 +3957,13 @@ decl_constant_var_p (tree decl)\n /* Returns true iff DECL is a variable or function declared with an auto type\n    that has not yet been deduced to a real type.  */\n \n-bool\n-undeduced_auto_decl (tree decl)\n-{\n-  return false;\n-}\n+bool undeduced_auto_decl (tree) { return false; }\n \n // forked from gcc/cp/decl.cc require_deduced_type\n \n /* Complain if DECL has an undeduced return type.  */\n \n-bool\n-require_deduced_type (tree decl, tsubst_flags_t complain)\n-{\n-  return true;\n-}\n+bool require_deduced_type (tree, tsubst_flags_t) { return true; }\n \n /* Return the location of a tree passed to %+ formats.  */\n "}, {"sha": "7417f31b510054f4cd8ce98fb5cc0cecbdb2d3cc", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -226,7 +226,7 @@ PrivacyReporter::visit (HIR::PathInExpression &path)\n }\n \n void\n-PrivacyReporter::visit (HIR::TypePathSegmentFunction &segment)\n+PrivacyReporter::visit (HIR::TypePathSegmentFunction &)\n {\n   // FIXME: Do we need to do anything for this?\n }\n@@ -253,7 +253,7 @@ PrivacyReporter::visit (HIR::QualifiedPathInType &path)\n }\n \n void\n-PrivacyReporter::visit (HIR::LiteralExpr &expr)\n+PrivacyReporter::visit (HIR::LiteralExpr &)\n {\n   // Literals cannot contain any sort of privacy violation\n }\n@@ -371,13 +371,13 @@ PrivacyReporter::visit (HIR::TupleIndexExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::StructExprStruct &expr)\n+PrivacyReporter::visit (HIR::StructExprStruct &)\n {\n   // FIXME: We need to check the visibility of the type it refers to here\n }\n \n void\n-PrivacyReporter::visit (HIR::StructExprFieldIdentifier &field)\n+PrivacyReporter::visit (HIR::StructExprFieldIdentifier &)\n {}\n \n void\n@@ -426,7 +426,7 @@ PrivacyReporter::visit (HIR::FieldAccessExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::ClosureExpr &expr)\n+PrivacyReporter::visit (HIR::ClosureExpr &)\n {\n   // Not handled yet\n }\n@@ -443,7 +443,7 @@ PrivacyReporter::visit (HIR::BlockExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::ContinueExpr &expr)\n+PrivacyReporter::visit (HIR::ContinueExpr &)\n {}\n \n void\n@@ -474,7 +474,7 @@ PrivacyReporter::visit (HIR::RangeToExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::RangeFullExpr &expr)\n+PrivacyReporter::visit (HIR::RangeFullExpr &)\n {}\n \n void\n@@ -485,7 +485,7 @@ PrivacyReporter::visit (HIR::RangeFromToInclExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::RangeToInclExpr &expr)\n+PrivacyReporter::visit (HIR::RangeToInclExpr &)\n {\n   // Not handled yet\n }\n@@ -564,30 +564,30 @@ PrivacyReporter::visit (HIR::IfExprConseqIfLet &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::IfLetExpr &expr)\n+PrivacyReporter::visit (HIR::IfLetExpr &)\n {\n   // TODO: We need to visit the if_let_expr\n   // TODO: We need to visit the block as well\n }\n \n void\n-PrivacyReporter::visit (HIR::IfLetExprConseqElse &expr)\n+PrivacyReporter::visit (HIR::IfLetExprConseqElse &)\n {\n   // TODO: We need to visit the if_let_expr\n   // TODO: We need to visit the if_block as well\n   // TODO: We need to visit the else_block as well\n }\n \n void\n-PrivacyReporter::visit (HIR::IfLetExprConseqIf &expr)\n+PrivacyReporter::visit (HIR::IfLetExprConseqIf &)\n {\n   // TODO: We need to visit the if_let_expr\n   // TODO: We need to visit the if_block as well\n   // TODO: We need to visit the else_block as well\n }\n \n void\n-PrivacyReporter::visit (HIR::IfLetExprConseqIfLet &expr)\n+PrivacyReporter::visit (HIR::IfLetExprConseqIfLet &)\n {\n   // TODO: We need to visit the if_let_expr\n   // TODO: We need to visit the if_block as well\n@@ -601,13 +601,13 @@ PrivacyReporter::visit (HIR::MatchExpr &expr)\n }\n \n void\n-PrivacyReporter::visit (HIR::AwaitExpr &expr)\n+PrivacyReporter::visit (HIR::AwaitExpr &)\n {\n   // Not handled yet\n }\n \n void\n-PrivacyReporter::visit (HIR::AsyncBlockExpr &expr)\n+PrivacyReporter::visit (HIR::AsyncBlockExpr &)\n {\n   // Not handled yet\n }\n@@ -628,11 +628,11 @@ PrivacyReporter::visit (HIR::Module &module)\n }\n \n void\n-PrivacyReporter::visit (HIR::ExternCrate &crate)\n+PrivacyReporter::visit (HIR::ExternCrate &)\n {}\n \n void\n-PrivacyReporter::visit (HIR::UseDeclaration &use_decl)\n+PrivacyReporter::visit (HIR::UseDeclaration &)\n {\n   // FIXME: Is there anything we need to do here?\n }\n@@ -647,51 +647,51 @@ PrivacyReporter::visit (HIR::Function &function)\n }\n \n void\n-PrivacyReporter::visit (HIR::TypeAlias &type_alias)\n+PrivacyReporter::visit (HIR::TypeAlias &)\n {\n   // TODO: Check the type here\n }\n \n void\n-PrivacyReporter::visit (HIR::StructStruct &struct_item)\n+PrivacyReporter::visit (HIR::StructStruct &)\n {\n   // TODO: Check the type of all fields\n }\n \n void\n-PrivacyReporter::visit (HIR::TupleStruct &tuple_struct)\n+PrivacyReporter::visit (HIR::TupleStruct &)\n {\n   // TODO: Check the type of all fields\n }\n \n void\n-PrivacyReporter::visit (HIR::EnumItem &item)\n+PrivacyReporter::visit (HIR::EnumItem &)\n {\n   // TODO: Check the type of all variants\n }\n \n void\n-PrivacyReporter::visit (HIR::EnumItemTuple &item)\n+PrivacyReporter::visit (HIR::EnumItemTuple &)\n {\n   // TODO: Check the type\n }\n \n void\n-PrivacyReporter::visit (HIR::EnumItemStruct &item)\n+PrivacyReporter::visit (HIR::EnumItemStruct &)\n {\n   // TODO: Check the type\n }\n \n void\n-PrivacyReporter::visit (HIR::EnumItemDiscriminant &item)\n+PrivacyReporter::visit (HIR::EnumItemDiscriminant &)\n {}\n \n void\n-PrivacyReporter::visit (HIR::Enum &enum_item)\n+PrivacyReporter::visit (HIR::Enum &)\n {}\n \n void\n-PrivacyReporter::visit (HIR::Union &union_item)\n+PrivacyReporter::visit (HIR::Union &)\n {\n   // TODO: Check the type\n }\n@@ -711,7 +711,7 @@ PrivacyReporter::visit (HIR::StaticItem &static_item)\n }\n \n void\n-PrivacyReporter::visit (HIR::Trait &trait)\n+PrivacyReporter::visit (HIR::Trait &)\n {\n   // FIXME: We need to be an ItemVisitor as well\n   // for (auto &item : trait.get_trait_items ())\n@@ -726,15 +726,15 @@ PrivacyReporter::visit (HIR::ImplBlock &impl)\n }\n \n void\n-PrivacyReporter::visit (HIR::ExternBlock &block)\n+PrivacyReporter::visit (HIR::ExternBlock &)\n {\n   // FIXME: We need to be an ItemVisitor as well\n-  // for (auto &item : block.get_extern_items ())\n+  // for (auto &block: block.get_extern_items ())\n   //   item->accept_vis (*this);\n }\n \n void\n-PrivacyReporter::visit (HIR::EmptyStmt &stmt)\n+PrivacyReporter::visit (HIR::EmptyStmt &)\n {}\n \n void"}, {"sha": "b9a2b363708d3b2922f427b8cc9d2739eaf8765e", "filename": "gcc/rust/checks/errors/privacy/rust-reachability.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-reachability.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -140,7 +140,7 @@ ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n }\n \n void\n-ReachabilityVisitor::visit (HIR::TupleStruct &tuple_struct)\n+ReachabilityVisitor::visit (HIR::TupleStruct &)\n {}\n \n void\n@@ -227,7 +227,7 @@ ReachabilityVisitor::visit (HIR::ImplBlock &impl)\n }\n \n void\n-ReachabilityVisitor::visit (HIR::ExternBlock &block)\n+ReachabilityVisitor::visit (HIR::ExternBlock &)\n {}\n \n // FIXME: How can we visit Blocks in the current configuration? Have a full"}, {"sha": "becb9fd93a7b537991f40d99e65b1fdad096df73", "filename": "gcc/rust/checks/errors/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-visibility-resolver.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -141,11 +141,11 @@ VisibilityResolver::visit (HIR::Module &mod)\n }\n \n void\n-VisibilityResolver::visit (HIR::ExternCrate &crate)\n+VisibilityResolver::visit (HIR::ExternCrate &)\n {}\n \n void\n-VisibilityResolver::visit (HIR::UseDeclaration &use_decl)\n+VisibilityResolver::visit (HIR::UseDeclaration &)\n {}\n \n void\n@@ -185,7 +185,7 @@ VisibilityResolver::visit (HIR::Enum &enum_item)\n }\n \n void\n-VisibilityResolver::visit (HIR::Union &union_item)\n+VisibilityResolver::visit (HIR::Union &)\n {}\n \n void\n@@ -238,7 +238,7 @@ VisibilityResolver::visit (HIR::ImplBlock &impl)\n }\n \n void\n-VisibilityResolver::visit (HIR::ExternBlock &block)\n+VisibilityResolver::visit (HIR::ExternBlock &)\n {}\n \n } // namespace Privacy"}, {"sha": "576c1b170d66ffd8e6c4ba0bcc70055f7af1a29f", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -114,43 +114,43 @@ ConstChecker::check_default_const_generics (\n }\n \n void\n-ConstChecker::visit (Lifetime &lifetime)\n+ConstChecker::visit (Lifetime &)\n {}\n \n void\n-ConstChecker::visit (LifetimeParam &lifetime_param)\n+ConstChecker::visit (LifetimeParam &)\n {}\n \n void\n-ConstChecker::visit (PathInExpression &path)\n+ConstChecker::visit (PathInExpression &)\n {}\n \n void\n-ConstChecker::visit (TypePathSegment &segment)\n+ConstChecker::visit (TypePathSegment &)\n {}\n \n void\n-ConstChecker::visit (TypePathSegmentGeneric &segment)\n+ConstChecker::visit (TypePathSegmentGeneric &)\n {}\n \n void\n-ConstChecker::visit (TypePathSegmentFunction &segment)\n+ConstChecker::visit (TypePathSegmentFunction &)\n {}\n \n void\n-ConstChecker::visit (TypePath &path)\n+ConstChecker::visit (TypePath &)\n {}\n \n void\n-ConstChecker::visit (QualifiedPathInExpression &path)\n+ConstChecker::visit (QualifiedPathInExpression &)\n {}\n \n void\n-ConstChecker::visit (QualifiedPathInType &path)\n+ConstChecker::visit (QualifiedPathInType &)\n {}\n \n void\n-ConstChecker::visit (LiteralExpr &expr)\n+ConstChecker::visit (LiteralExpr &)\n {}\n \n void\n@@ -270,11 +270,11 @@ ConstChecker::visit (TupleIndexExpr &expr)\n }\n \n void\n-ConstChecker::visit (StructExprStruct &expr)\n+ConstChecker::visit (StructExprStruct &)\n {}\n \n void\n-ConstChecker::visit (StructExprFieldIdentifier &field)\n+ConstChecker::visit (StructExprFieldIdentifier &)\n {}\n \n void\n@@ -297,7 +297,7 @@ ConstChecker::visit (StructExprStructFields &expr)\n }\n \n void\n-ConstChecker::visit (StructExprStructBase &expr)\n+ConstChecker::visit (StructExprStructBase &)\n {}\n \n void\n@@ -398,7 +398,7 @@ ConstChecker::visit (BlockExpr &expr)\n }\n \n void\n-ConstChecker::visit (ContinueExpr &expr)\n+ConstChecker::visit (ContinueExpr &)\n {}\n \n void\n@@ -428,7 +428,7 @@ ConstChecker::visit (RangeToExpr &expr)\n }\n \n void\n-ConstChecker::visit (RangeFullExpr &expr)\n+ConstChecker::visit (RangeFullExpr &)\n {}\n \n void\n@@ -439,7 +439,7 @@ ConstChecker::visit (RangeFromToInclExpr &expr)\n }\n \n void\n-ConstChecker::visit (RangeToInclExpr &expr)\n+ConstChecker::visit (RangeToInclExpr &)\n {\n   // FIXME: Visit to_expr\n }\n@@ -558,31 +558,31 @@ ConstChecker::visit (MatchExpr &expr)\n }\n \n void\n-ConstChecker::visit (AwaitExpr &expr)\n+ConstChecker::visit (AwaitExpr &)\n {\n   // TODO: Visit expression\n }\n \n void\n-ConstChecker::visit (AsyncBlockExpr &expr)\n+ConstChecker::visit (AsyncBlockExpr &)\n {\n   // TODO: Visit block expression\n }\n \n void\n-ConstChecker::visit (TypeParam &param)\n+ConstChecker::visit (TypeParam &)\n {}\n \n void\n-ConstChecker::visit (ConstGenericParam &param)\n+ConstChecker::visit (ConstGenericParam &)\n {}\n \n void\n-ConstChecker::visit (LifetimeWhereClauseItem &item)\n+ConstChecker::visit (LifetimeWhereClauseItem &)\n {}\n \n void\n-ConstChecker::visit (TypeBoundWhereClauseItem &item)\n+ConstChecker::visit (TypeBoundWhereClauseItem &)\n {}\n \n void\n@@ -593,23 +593,23 @@ ConstChecker::visit (Module &module)\n }\n \n void\n-ConstChecker::visit (ExternCrate &crate)\n+ConstChecker::visit (ExternCrate &)\n {}\n \n void\n-ConstChecker::visit (UseTreeGlob &use_tree)\n+ConstChecker::visit (UseTreeGlob &)\n {}\n \n void\n-ConstChecker::visit (UseTreeList &use_tree)\n+ConstChecker::visit (UseTreeList &)\n {}\n \n void\n-ConstChecker::visit (UseTreeRebind &use_tree)\n+ConstChecker::visit (UseTreeRebind &)\n {}\n \n void\n-ConstChecker::visit (UseDeclaration &use_decl)\n+ConstChecker::visit (UseDeclaration &)\n {}\n \n void\n@@ -653,15 +653,15 @@ ConstChecker::visit (TupleStruct &tuple_struct)\n }\n \n void\n-ConstChecker::visit (EnumItem &enum_item)\n+ConstChecker::visit (EnumItem &)\n {}\n \n void\n-ConstChecker::visit (EnumItemTuple &item)\n+ConstChecker::visit (EnumItemTuple &)\n {}\n \n void\n-ConstChecker::visit (EnumItemStruct &item)\n+ConstChecker::visit (EnumItemStruct &)\n {}\n \n void\n@@ -723,7 +723,7 @@ ConstChecker::visit (TraitItemConst &item)\n }\n \n void\n-ConstChecker::visit (TraitItemType &item)\n+ConstChecker::visit (TraitItemType &)\n {}\n \n void\n@@ -747,11 +747,11 @@ ConstChecker::visit (ImplBlock &impl)\n }\n \n void\n-ConstChecker::visit (ExternalStaticItem &item)\n+ConstChecker::visit (ExternalStaticItem &)\n {}\n \n void\n-ConstChecker::visit (ExternalFunctionItem &item)\n+ConstChecker::visit (ExternalFunctionItem &)\n {}\n \n void\n@@ -763,87 +763,87 @@ ConstChecker::visit (ExternBlock &block)\n }\n \n void\n-ConstChecker::visit (LiteralPattern &pattern)\n+ConstChecker::visit (LiteralPattern &)\n {}\n \n void\n-ConstChecker::visit (IdentifierPattern &pattern)\n+ConstChecker::visit (IdentifierPattern &)\n {}\n \n void\n-ConstChecker::visit (WildcardPattern &pattern)\n+ConstChecker::visit (WildcardPattern &)\n {}\n \n void\n-ConstChecker::visit (RangePatternBoundLiteral &bound)\n+ConstChecker::visit (RangePatternBoundLiteral &)\n {}\n \n void\n-ConstChecker::visit (RangePatternBoundPath &bound)\n+ConstChecker::visit (RangePatternBoundPath &)\n {}\n \n void\n-ConstChecker::visit (RangePatternBoundQualPath &bound)\n+ConstChecker::visit (RangePatternBoundQualPath &)\n {}\n \n void\n-ConstChecker::visit (RangePattern &pattern)\n+ConstChecker::visit (RangePattern &)\n {}\n \n void\n-ConstChecker::visit (ReferencePattern &pattern)\n+ConstChecker::visit (ReferencePattern &)\n {}\n \n void\n-ConstChecker::visit (StructPatternFieldTuplePat &field)\n+ConstChecker::visit (StructPatternFieldTuplePat &)\n {}\n \n void\n-ConstChecker::visit (StructPatternFieldIdentPat &field)\n+ConstChecker::visit (StructPatternFieldIdentPat &)\n {}\n \n void\n-ConstChecker::visit (StructPatternFieldIdent &field)\n+ConstChecker::visit (StructPatternFieldIdent &)\n {}\n \n void\n-ConstChecker::visit (StructPattern &pattern)\n+ConstChecker::visit (StructPattern &)\n {}\n \n void\n-ConstChecker::visit (TupleStructItemsNoRange &tuple_items)\n+ConstChecker::visit (TupleStructItemsNoRange &)\n {}\n \n void\n-ConstChecker::visit (TupleStructItemsRange &tuple_items)\n+ConstChecker::visit (TupleStructItemsRange &)\n {}\n \n void\n-ConstChecker::visit (TupleStructPattern &pattern)\n+ConstChecker::visit (TupleStructPattern &)\n {}\n \n void\n-ConstChecker::visit (TuplePatternItemsMultiple &tuple_items)\n+ConstChecker::visit (TuplePatternItemsMultiple &)\n {}\n \n void\n-ConstChecker::visit (TuplePatternItemsRanged &tuple_items)\n+ConstChecker::visit (TuplePatternItemsRanged &)\n {}\n \n void\n-ConstChecker::visit (TuplePattern &pattern)\n+ConstChecker::visit (TuplePattern &)\n {}\n \n void\n-ConstChecker::visit (GroupedPattern &pattern)\n+ConstChecker::visit (GroupedPattern &)\n {}\n \n void\n-ConstChecker::visit (SlicePattern &pattern)\n+ConstChecker::visit (SlicePattern &)\n {}\n \n void\n-ConstChecker::visit (EmptyStmt &stmt)\n+ConstChecker::visit (EmptyStmt &)\n {}\n \n void\n@@ -866,39 +866,39 @@ ConstChecker::visit (ExprStmtWithBlock &stmt)\n }\n \n void\n-ConstChecker::visit (TraitBound &bound)\n+ConstChecker::visit (TraitBound &)\n {}\n \n void\n-ConstChecker::visit (ImplTraitType &type)\n+ConstChecker::visit (ImplTraitType &)\n {}\n \n void\n-ConstChecker::visit (TraitObjectType &type)\n+ConstChecker::visit (TraitObjectType &)\n {}\n \n void\n-ConstChecker::visit (ParenthesisedType &type)\n+ConstChecker::visit (ParenthesisedType &)\n {}\n \n void\n-ConstChecker::visit (ImplTraitTypeOneBound &type)\n+ConstChecker::visit (ImplTraitTypeOneBound &)\n {}\n \n void\n-ConstChecker::visit (TupleType &type)\n+ConstChecker::visit (TupleType &)\n {}\n \n void\n-ConstChecker::visit (NeverType &type)\n+ConstChecker::visit (NeverType &)\n {}\n \n void\n-ConstChecker::visit (RawPointerType &type)\n+ConstChecker::visit (RawPointerType &)\n {}\n \n void\n-ConstChecker::visit (ReferenceType &type)\n+ConstChecker::visit (ReferenceType &)\n {}\n \n void\n@@ -912,15 +912,15 @@ ConstChecker::visit (ArrayType &type)\n }\n \n void\n-ConstChecker::visit (SliceType &type)\n+ConstChecker::visit (SliceType &)\n {}\n \n void\n-ConstChecker::visit (InferredType &type)\n+ConstChecker::visit (InferredType &)\n {}\n \n void\n-ConstChecker::visit (BareFunctionType &type)\n+ConstChecker::visit (BareFunctionType &)\n {}\n \n } // namespace HIR"}, {"sha": "94808632c049f27a223df27b545d703c8f720e68", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -180,11 +180,11 @@ UnsafeChecker::check_function_call (HirId node_id, Location locus)\n }\n \n void\n-UnsafeChecker::visit (Lifetime &lifetime)\n+UnsafeChecker::visit (Lifetime &)\n {}\n \n void\n-UnsafeChecker::visit (LifetimeParam &lifetime_param)\n+UnsafeChecker::visit (LifetimeParam &)\n {}\n \n void\n@@ -203,31 +203,31 @@ UnsafeChecker::visit (PathInExpression &path)\n }\n \n void\n-UnsafeChecker::visit (TypePathSegment &segment)\n+UnsafeChecker::visit (TypePathSegment &)\n {}\n \n void\n-UnsafeChecker::visit (TypePathSegmentGeneric &segment)\n+UnsafeChecker::visit (TypePathSegmentGeneric &)\n {}\n \n void\n-UnsafeChecker::visit (TypePathSegmentFunction &segment)\n+UnsafeChecker::visit (TypePathSegmentFunction &)\n {}\n \n void\n-UnsafeChecker::visit (TypePath &path)\n+UnsafeChecker::visit (TypePath &)\n {}\n \n void\n-UnsafeChecker::visit (QualifiedPathInExpression &path)\n+UnsafeChecker::visit (QualifiedPathInExpression &)\n {}\n \n void\n-UnsafeChecker::visit (QualifiedPathInType &path)\n+UnsafeChecker::visit (QualifiedPathInType &)\n {}\n \n void\n-UnsafeChecker::visit (LiteralExpr &expr)\n+UnsafeChecker::visit (LiteralExpr &)\n {}\n \n void\n@@ -349,11 +349,11 @@ UnsafeChecker::visit (TupleIndexExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (StructExprStruct &expr)\n+UnsafeChecker::visit (StructExprStruct &)\n {}\n \n void\n-UnsafeChecker::visit (StructExprFieldIdentifier &field)\n+UnsafeChecker::visit (StructExprFieldIdentifier &)\n {}\n \n void\n@@ -376,7 +376,7 @@ UnsafeChecker::visit (StructExprStructFields &expr)\n }\n \n void\n-UnsafeChecker::visit (StructExprStructBase &expr)\n+UnsafeChecker::visit (StructExprStructBase &)\n {}\n \n void\n@@ -469,7 +469,7 @@ UnsafeChecker::visit (BlockExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (ContinueExpr &expr)\n+UnsafeChecker::visit (ContinueExpr &)\n {}\n \n void\n@@ -499,7 +499,7 @@ UnsafeChecker::visit (RangeToExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (RangeFullExpr &expr)\n+UnsafeChecker::visit (RangeFullExpr &)\n {}\n \n void\n@@ -633,31 +633,31 @@ UnsafeChecker::visit (MatchExpr &expr)\n }\n \n void\n-UnsafeChecker::visit (AwaitExpr &expr)\n+UnsafeChecker::visit (AwaitExpr &)\n {\n   // TODO: Visit expression\n }\n \n void\n-UnsafeChecker::visit (AsyncBlockExpr &expr)\n+UnsafeChecker::visit (AsyncBlockExpr &)\n {\n   // TODO: Visit block expression\n }\n \n void\n-UnsafeChecker::visit (TypeParam &param)\n+UnsafeChecker::visit (TypeParam &)\n {}\n \n void\n-UnsafeChecker::visit (ConstGenericParam &param)\n+UnsafeChecker::visit (ConstGenericParam &)\n {}\n \n void\n-UnsafeChecker::visit (LifetimeWhereClauseItem &item)\n+UnsafeChecker::visit (LifetimeWhereClauseItem &)\n {}\n \n void\n-UnsafeChecker::visit (TypeBoundWhereClauseItem &item)\n+UnsafeChecker::visit (TypeBoundWhereClauseItem &)\n {}\n \n void\n@@ -668,23 +668,23 @@ UnsafeChecker::visit (Module &module)\n }\n \n void\n-UnsafeChecker::visit (ExternCrate &crate)\n+UnsafeChecker::visit (ExternCrate &)\n {}\n \n void\n-UnsafeChecker::visit (UseTreeGlob &use_tree)\n+UnsafeChecker::visit (UseTreeGlob &)\n {}\n \n void\n-UnsafeChecker::visit (UseTreeList &use_tree)\n+UnsafeChecker::visit (UseTreeList &)\n {}\n \n void\n-UnsafeChecker::visit (UseTreeRebind &use_tree)\n+UnsafeChecker::visit (UseTreeRebind &)\n {}\n \n void\n-UnsafeChecker::visit (UseDeclaration &use_decl)\n+UnsafeChecker::visit (UseDeclaration &)\n {}\n \n void\n@@ -702,42 +702,42 @@ UnsafeChecker::visit (Function &function)\n }\n \n void\n-UnsafeChecker::visit (TypeAlias &type_alias)\n+UnsafeChecker::visit (TypeAlias &)\n {\n   // FIXME: What do we need to do to handle type aliasing? Is it possible to\n   // have unsafe types? Type aliases on unsafe functions?\n }\n \n void\n-UnsafeChecker::visit (StructStruct &struct_item)\n+UnsafeChecker::visit (StructStruct &)\n {}\n \n void\n-UnsafeChecker::visit (TupleStruct &tuple_struct)\n+UnsafeChecker::visit (TupleStruct &)\n {}\n \n void\n-UnsafeChecker::visit (EnumItem &item)\n+UnsafeChecker::visit (EnumItem &)\n {}\n \n void\n-UnsafeChecker::visit (EnumItemTuple &item)\n+UnsafeChecker::visit (EnumItemTuple &)\n {}\n \n void\n-UnsafeChecker::visit (EnumItemStruct &item)\n+UnsafeChecker::visit (EnumItemStruct &)\n {}\n \n void\n-UnsafeChecker::visit (EnumItemDiscriminant &item)\n+UnsafeChecker::visit (EnumItemDiscriminant &)\n {}\n \n void\n-UnsafeChecker::visit (Enum &enum_item)\n+UnsafeChecker::visit (Enum &)\n {}\n \n void\n-UnsafeChecker::visit (Union &union_item)\n+UnsafeChecker::visit (Union &)\n {}\n \n void\n@@ -767,7 +767,7 @@ UnsafeChecker::visit (TraitItemConst &item)\n }\n \n void\n-UnsafeChecker::visit (TraitItemType &item)\n+UnsafeChecker::visit (TraitItemType &)\n {}\n \n void\n@@ -787,11 +787,11 @@ UnsafeChecker::visit (ImplBlock &impl)\n }\n \n void\n-UnsafeChecker::visit (ExternalStaticItem &item)\n+UnsafeChecker::visit (ExternalStaticItem &)\n {}\n \n void\n-UnsafeChecker::visit (ExternalFunctionItem &item)\n+UnsafeChecker::visit (ExternalFunctionItem &)\n {}\n \n void\n@@ -803,87 +803,87 @@ UnsafeChecker::visit (ExternBlock &block)\n }\n \n void\n-UnsafeChecker::visit (LiteralPattern &pattern)\n+UnsafeChecker::visit (LiteralPattern &)\n {}\n \n void\n-UnsafeChecker::visit (IdentifierPattern &pattern)\n+UnsafeChecker::visit (IdentifierPattern &)\n {}\n \n void\n-UnsafeChecker::visit (WildcardPattern &pattern)\n+UnsafeChecker::visit (WildcardPattern &)\n {}\n \n void\n-UnsafeChecker::visit (RangePatternBoundLiteral &bound)\n+UnsafeChecker::visit (RangePatternBoundLiteral &)\n {}\n \n void\n-UnsafeChecker::visit (RangePatternBoundPath &bound)\n+UnsafeChecker::visit (RangePatternBoundPath &)\n {}\n \n void\n-UnsafeChecker::visit (RangePatternBoundQualPath &bound)\n+UnsafeChecker::visit (RangePatternBoundQualPath &)\n {}\n \n void\n-UnsafeChecker::visit (RangePattern &pattern)\n+UnsafeChecker::visit (RangePattern &)\n {}\n \n void\n-UnsafeChecker::visit (ReferencePattern &pattern)\n+UnsafeChecker::visit (ReferencePattern &)\n {}\n \n void\n-UnsafeChecker::visit (StructPatternFieldTuplePat &field)\n+UnsafeChecker::visit (StructPatternFieldTuplePat &)\n {}\n \n void\n-UnsafeChecker::visit (StructPatternFieldIdentPat &field)\n+UnsafeChecker::visit (StructPatternFieldIdentPat &)\n {}\n \n void\n-UnsafeChecker::visit (StructPatternFieldIdent &field)\n+UnsafeChecker::visit (StructPatternFieldIdent &)\n {}\n \n void\n-UnsafeChecker::visit (StructPattern &pattern)\n+UnsafeChecker::visit (StructPattern &)\n {}\n \n void\n-UnsafeChecker::visit (TupleStructItemsNoRange &tuple_items)\n+UnsafeChecker::visit (TupleStructItemsNoRange &)\n {}\n \n void\n-UnsafeChecker::visit (TupleStructItemsRange &tuple_items)\n+UnsafeChecker::visit (TupleStructItemsRange &)\n {}\n \n void\n-UnsafeChecker::visit (TupleStructPattern &pattern)\n+UnsafeChecker::visit (TupleStructPattern &)\n {}\n \n void\n-UnsafeChecker::visit (TuplePatternItemsMultiple &tuple_items)\n+UnsafeChecker::visit (TuplePatternItemsMultiple &)\n {}\n \n void\n-UnsafeChecker::visit (TuplePatternItemsRanged &tuple_items)\n+UnsafeChecker::visit (TuplePatternItemsRanged &)\n {}\n \n void\n-UnsafeChecker::visit (TuplePattern &pattern)\n+UnsafeChecker::visit (TuplePattern &)\n {}\n \n void\n-UnsafeChecker::visit (GroupedPattern &pattern)\n+UnsafeChecker::visit (GroupedPattern &)\n {}\n \n void\n-UnsafeChecker::visit (SlicePattern &pattern)\n+UnsafeChecker::visit (SlicePattern &)\n {}\n \n void\n-UnsafeChecker::visit (EmptyStmt &stmt)\n+UnsafeChecker::visit (EmptyStmt &)\n {}\n \n void\n@@ -906,55 +906,55 @@ UnsafeChecker::visit (ExprStmtWithBlock &stmt)\n }\n \n void\n-UnsafeChecker::visit (TraitBound &bound)\n+UnsafeChecker::visit (TraitBound &)\n {}\n \n void\n-UnsafeChecker::visit (ImplTraitType &type)\n+UnsafeChecker::visit (ImplTraitType &)\n {}\n \n void\n-UnsafeChecker::visit (TraitObjectType &type)\n+UnsafeChecker::visit (TraitObjectType &)\n {}\n \n void\n-UnsafeChecker::visit (ParenthesisedType &type)\n+UnsafeChecker::visit (ParenthesisedType &)\n {}\n \n void\n-UnsafeChecker::visit (ImplTraitTypeOneBound &type)\n+UnsafeChecker::visit (ImplTraitTypeOneBound &)\n {}\n \n void\n-UnsafeChecker::visit (TupleType &type)\n+UnsafeChecker::visit (TupleType &)\n {}\n \n void\n-UnsafeChecker::visit (NeverType &type)\n+UnsafeChecker::visit (NeverType &)\n {}\n \n void\n-UnsafeChecker::visit (RawPointerType &type)\n+UnsafeChecker::visit (RawPointerType &)\n {}\n \n void\n-UnsafeChecker::visit (ReferenceType &type)\n+UnsafeChecker::visit (ReferenceType &)\n {}\n \n void\n-UnsafeChecker::visit (ArrayType &type)\n+UnsafeChecker::visit (ArrayType &)\n {}\n \n void\n-UnsafeChecker::visit (SliceType &type)\n+UnsafeChecker::visit (SliceType &)\n {}\n \n void\n-UnsafeChecker::visit (InferredType &type)\n+UnsafeChecker::visit (InferredType &)\n {}\n \n void\n-UnsafeChecker::visit (BareFunctionType &type)\n+UnsafeChecker::visit (BareFunctionType &)\n {}\n \n } // namespace HIR"}, {"sha": "63927811149301a7e35a61c4ffdf5589352be7f3", "filename": "gcc/rust/checks/lints/rust-lint-marklive.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -78,7 +78,7 @@ MarkLive::Analysis (HIR::Crate &crate)\n //    visited first time\n // 2. save all the live symbols in liveSymbols\n void\n-MarkLive::go (HIR::Crate &crate)\n+MarkLive::go (HIR::Crate &)\n {\n   while (!worklist.empty ())\n     {"}, {"sha": "ba5ffb9372b4d4669fbcc8fb2240608ca40b895d", "filename": "gcc/rust/checks/lints/rust-lint-unused-var.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-unused-var.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-unused-var.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-unused-var.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -53,7 +53,7 @@ check_decl (tree *t)\n }\n \n static tree\n-unused_var_walk_fn (tree *t, int *walk_subtrees, void *closure)\n+unused_var_walk_fn (tree *t, int *, void *)\n {\n   switch (TREE_CODE (*t))\n     {"}, {"sha": "11334409fe366565cb334785ec0c3c969c8105c7", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -99,7 +99,6 @@ try_extract_string_literal_from_fragment (const Location &parent_locus,\n \n static std::unique_ptr<AST::LiteralExpr>\n try_expand_single_string_literal (AST::Expr *input_expr,\n-\t\t\t\t  const Location &invoc_locus,\n \t\t\t\t  MacroExpander *expander)\n {\n   auto nodes = try_expand_macro_expression (input_expr, expander);\n@@ -116,8 +115,8 @@ try_expand_single_string_literal (AST::Expr *input_expr,\n \n static std::vector<std::unique_ptr<AST::Expr>>\n try_expand_many_expr (Parser<MacroInvocLexer> &parser,\n-\t\t      const Location &invoc_locus, const TokenId last_token_id,\n-\t\t      MacroExpander *expander, bool &has_error)\n+\t\t      const TokenId last_token_id, MacroExpander *expander,\n+\t\t      bool &has_error)\n {\n   auto restrictions = Rust::ParseRestrictions ();\n   // stop parsing when encountered a braces/brackets\n@@ -204,8 +203,7 @@ parse_single_string_literal (AST::DelimTokenTree &invoc_token_tree,\n       // when the expression does not seem to be a string literal, we then try\n       // to parse/expand it as macro to see if it expands to a string literal\n       auto expr = parser.parse_expr ();\n-      lit_expr\n-\t= try_expand_single_string_literal (expr.get (), invoc_locus, expander);\n+      lit_expr = try_expand_single_string_literal (expr.get (), expander);\n     }\n \n   parser.skip_token (last_token_id);\n@@ -265,15 +263,15 @@ load_file_bytes (const char *filename)\n } // namespace\n \n AST::Fragment\n-MacroBuiltin::assert_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::assert_handler (Location, AST::MacroInvocData &)\n {\n   rust_debug (\"assert!() called\");\n \n   return AST::Fragment::create_error ();\n }\n \n AST::Fragment\n-MacroBuiltin::file_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::file_handler (Location invoc_locus, AST::MacroInvocData &)\n {\n   auto current_file\n     = Session::get_instance ().linemap->location_file (invoc_locus);\n@@ -283,7 +281,7 @@ MacroBuiltin::file_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n }\n \n AST::Fragment\n-MacroBuiltin::column_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::column_handler (Location invoc_locus, AST::MacroInvocData &)\n {\n   auto current_column\n     = Session::get_instance ().linemap->location_to_column (invoc_locus);\n@@ -401,7 +399,7 @@ MacroBuiltin::concat_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n   auto last_token_id = macro_end_token (invoc_token_tree, parser);\n \n   /* NOTE: concat! could accept no argument, so we don't have any checks here */\n-  auto expanded_expr = try_expand_many_expr (parser, invoc_locus, last_token_id,\n+  auto expanded_expr = try_expand_many_expr (parser, last_token_id,\n \t\t\t\t\t     invoc.get_expander (), has_error);\n   for (auto &expr : expanded_expr)\n     {\n@@ -451,7 +449,7 @@ MacroBuiltin::env_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n   std::unique_ptr<AST::LiteralExpr> lit_expr = nullptr;\n   bool has_error = false;\n \n-  auto expanded_expr = try_expand_many_expr (parser, invoc_locus, last_token_id,\n+  auto expanded_expr = try_expand_many_expr (parser, last_token_id,\n \t\t\t\t\t     invoc.get_expander (), has_error);\n   if (has_error)\n     return AST::Fragment::create_error ();\n@@ -591,7 +589,7 @@ MacroBuiltin::include_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n }\n \n AST::Fragment\n-MacroBuiltin::line_handler (Location invoc_locus, AST::MacroInvocData &invoc)\n+MacroBuiltin::line_handler (Location invoc_locus, AST::MacroInvocData &)\n {\n   auto current_line\n     = Session::get_instance ().linemap->location_to_line (invoc_locus);"}, {"sha": "33795726b2f9f2468e95970b2ca5ebc97f84d49b", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 176, "deletions": 176, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -25,499 +25,499 @@ namespace Rust {\n namespace HIR {\n \n void\n-ASTLoweringBase::visit (AST::Token &tok)\n+ASTLoweringBase::visit (AST::Token &)\n {}\n void\n-ASTLoweringBase::visit (AST::DelimTokenTree &delim_tok_tree)\n+ASTLoweringBase::visit (AST::DelimTokenTree &)\n {}\n void\n-ASTLoweringBase::visit (AST::AttrInputMetaItemContainer &input)\n+ASTLoweringBase::visit (AST::AttrInputMetaItemContainer &)\n {}\n-//  void ASTLoweringBase::visit(MetaItem& meta_item) {}\n-//  void vsit(Stmt& stmt) {}\n-//  void ASTLoweringBase::visit(Expr& expr) {}\n+//  void ASTLoweringBase::visit(MetaItemmeta_item) {}\n+//  void vsit(Stmtstmt) {}\n+//  void ASTLoweringBase::visit(Exprexpr) {}\n void\n-ASTLoweringBase::visit (AST::IdentifierExpr &ident_expr)\n+ASTLoweringBase::visit (AST::IdentifierExpr &)\n {}\n-//  void ASTLoweringBase::visit(Pattern& pattern) {}\n-//  void ASTLoweringBase::visit(Type& type) {}\n-//  void ASTLoweringBase::visit(TypeParamBound& type_param_bound) {}\n+//  void ASTLoweringBase::visit(Patternpattern) {}\n+//  void ASTLoweringBase::visit(Typetype) {}\n+//  void ASTLoweringBase::visit(TypeParamBoundtype_param_bound) {}\n void\n-ASTLoweringBase::visit (AST::Lifetime &lifetime)\n+ASTLoweringBase::visit (AST::Lifetime &)\n {}\n-//  void ASTLoweringBase::visit(GenericParam& generic_param) {}\n+//  void ASTLoweringBase::visit(GenericParamgeneric_param) {}\n void\n-ASTLoweringBase::visit (AST::LifetimeParam &lifetime_param)\n+ASTLoweringBase::visit (AST::LifetimeParam &)\n {}\n void\n-ASTLoweringBase::visit (AST::ConstGenericParam &const_param)\n+ASTLoweringBase::visit (AST::ConstGenericParam &)\n {}\n-//  void ASTLoweringBase::visit(TraitItem& trait_item) {}\n-//  void ASTLoweringBase::visit(InherentImplItem& inherent_impl_item) {}\n-//  void ASTLoweringBase::visit(TraitImplItem& trait_impl_item) {}\n+//  void ASTLoweringBase::visit(TraitItemtrait_item) {}\n+//  void ASTLoweringBase::visit(InherentImplIteminherent_impl_item) {}\n+//  void ASTLoweringBase::visit(TraitImplItemtrait_impl_item) {}\n \n // rust-path.h\n void\n-ASTLoweringBase::visit (AST::PathInExpression &path)\n+ASTLoweringBase::visit (AST::PathInExpression &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypePathSegment &segment)\n+ASTLoweringBase::visit (AST::TypePathSegment &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypePathSegmentGeneric &segment)\n+ASTLoweringBase::visit (AST::TypePathSegmentGeneric &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypePathSegmentFunction &segment)\n+ASTLoweringBase::visit (AST::TypePathSegmentFunction &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypePath &path)\n+ASTLoweringBase::visit (AST::TypePath &)\n {}\n void\n-ASTLoweringBase::visit (AST::QualifiedPathInExpression &path)\n+ASTLoweringBase::visit (AST::QualifiedPathInExpression &)\n {}\n void\n-ASTLoweringBase::visit (AST::QualifiedPathInType &path)\n+ASTLoweringBase::visit (AST::QualifiedPathInType &)\n {}\n \n // rust-expr.h\n void\n-ASTLoweringBase::visit (AST::LiteralExpr &expr)\n+ASTLoweringBase::visit (AST::LiteralExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::AttrInputLiteral &attr_input)\n+ASTLoweringBase::visit (AST::AttrInputLiteral &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaItemLitExpr &meta_item)\n+ASTLoweringBase::visit (AST::MetaItemLitExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaItemPathLit &meta_item)\n+ASTLoweringBase::visit (AST::MetaItemPathLit &)\n {}\n void\n-ASTLoweringBase::visit (AST::BorrowExpr &expr)\n+ASTLoweringBase::visit (AST::BorrowExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::DereferenceExpr &expr)\n+ASTLoweringBase::visit (AST::DereferenceExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ErrorPropagationExpr &expr)\n+ASTLoweringBase::visit (AST::ErrorPropagationExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::NegationExpr &expr)\n+ASTLoweringBase::visit (AST::NegationExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ArithmeticOrLogicalExpr &expr)\n+ASTLoweringBase::visit (AST::ArithmeticOrLogicalExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ComparisonExpr &expr)\n+ASTLoweringBase::visit (AST::ComparisonExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::LazyBooleanExpr &expr)\n+ASTLoweringBase::visit (AST::LazyBooleanExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypeCastExpr &expr)\n+ASTLoweringBase::visit (AST::TypeCastExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::AssignmentExpr &expr)\n+ASTLoweringBase::visit (AST::AssignmentExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::CompoundAssignmentExpr &expr)\n+ASTLoweringBase::visit (AST::CompoundAssignmentExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::GroupedExpr &expr)\n+ASTLoweringBase::visit (AST::GroupedExpr &)\n {}\n-//  void ASTLoweringBase::visit(ArrayElems& elems) {}\n+//  void ASTLoweringBase::visit(ArrayElemselems) {}\n void\n-ASTLoweringBase::visit (AST::ArrayElemsValues &elems)\n+ASTLoweringBase::visit (AST::ArrayElemsValues &)\n {}\n void\n-ASTLoweringBase::visit (AST::ArrayElemsCopied &elems)\n+ASTLoweringBase::visit (AST::ArrayElemsCopied &)\n {}\n void\n-ASTLoweringBase::visit (AST::ArrayExpr &expr)\n+ASTLoweringBase::visit (AST::ArrayExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ArrayIndexExpr &expr)\n+ASTLoweringBase::visit (AST::ArrayIndexExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleExpr &expr)\n+ASTLoweringBase::visit (AST::TupleExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleIndexExpr &expr)\n+ASTLoweringBase::visit (AST::TupleIndexExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructExprStruct &expr)\n+ASTLoweringBase::visit (AST::StructExprStruct &)\n {}\n-//  void ASTLoweringBase::visit(StructExprField& field) {}\n+//  void ASTLoweringBase::visit(StructExprFieldfield) {}\n void\n-ASTLoweringBase::visit (AST::StructExprFieldIdentifier &field)\n+ASTLoweringBase::visit (AST::StructExprFieldIdentifier &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructExprFieldIdentifierValue &field)\n+ASTLoweringBase::visit (AST::StructExprFieldIdentifierValue &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructExprFieldIndexValue &field)\n+ASTLoweringBase::visit (AST::StructExprFieldIndexValue &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructExprStructFields &expr)\n+ASTLoweringBase::visit (AST::StructExprStructFields &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructExprStructBase &expr)\n+ASTLoweringBase::visit (AST::StructExprStructBase &)\n {}\n void\n-ASTLoweringBase::visit (AST::CallExpr &expr)\n+ASTLoweringBase::visit (AST::CallExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::MethodCallExpr &expr)\n+ASTLoweringBase::visit (AST::MethodCallExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::FieldAccessExpr &expr)\n+ASTLoweringBase::visit (AST::FieldAccessExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ClosureExprInner &expr)\n+ASTLoweringBase::visit (AST::ClosureExprInner &)\n {}\n void\n-ASTLoweringBase::visit (AST::BlockExpr &expr)\n+ASTLoweringBase::visit (AST::BlockExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ClosureExprInnerTyped &expr)\n+ASTLoweringBase::visit (AST::ClosureExprInnerTyped &)\n {}\n void\n-ASTLoweringBase::visit (AST::ContinueExpr &expr)\n+ASTLoweringBase::visit (AST::ContinueExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::BreakExpr &expr)\n+ASTLoweringBase::visit (AST::BreakExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeFromToExpr &expr)\n+ASTLoweringBase::visit (AST::RangeFromToExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeFromExpr &expr)\n+ASTLoweringBase::visit (AST::RangeFromExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeToExpr &expr)\n+ASTLoweringBase::visit (AST::RangeToExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeFullExpr &expr)\n+ASTLoweringBase::visit (AST::RangeFullExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeFromToInclExpr &expr)\n+ASTLoweringBase::visit (AST::RangeFromToInclExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangeToInclExpr &expr)\n+ASTLoweringBase::visit (AST::RangeToInclExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ReturnExpr &expr)\n+ASTLoweringBase::visit (AST::ReturnExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::UnsafeBlockExpr &expr)\n+ASTLoweringBase::visit (AST::UnsafeBlockExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::LoopExpr &expr)\n+ASTLoweringBase::visit (AST::LoopExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::WhileLoopExpr &expr)\n+ASTLoweringBase::visit (AST::WhileLoopExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::WhileLetLoopExpr &expr)\n+ASTLoweringBase::visit (AST::WhileLetLoopExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::ForLoopExpr &expr)\n+ASTLoweringBase::visit (AST::ForLoopExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfExpr &expr)\n+ASTLoweringBase::visit (AST::IfExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfExprConseqElse &expr)\n+ASTLoweringBase::visit (AST::IfExprConseqElse &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfExprConseqIf &expr)\n+ASTLoweringBase::visit (AST::IfExprConseqIf &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfExprConseqIfLet &expr)\n+ASTLoweringBase::visit (AST::IfExprConseqIfLet &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfLetExpr &expr)\n+ASTLoweringBase::visit (AST::IfLetExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfLetExprConseqElse &expr)\n+ASTLoweringBase::visit (AST::IfLetExprConseqElse &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfLetExprConseqIf &expr)\n+ASTLoweringBase::visit (AST::IfLetExprConseqIf &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfLetExprConseqIfLet &expr)\n+ASTLoweringBase::visit (AST::IfLetExprConseqIfLet &)\n {}\n-//  void ASTLoweringBase::visit(MatchCase& match_case) {}\n-// void ASTLoweringBase:: (AST::MatchCaseBlockExpr &match_case) {}\n-// void ASTLoweringBase:: (AST::MatchCaseExpr &match_case) {}\n+//  void ASTLoweringBase::visit(MatchCasematch_case) {}\n+// void ASTLoweringBase:: (AST::MatchCaseBlockExpr &) {}\n+// void ASTLoweringBase:: (AST::MatchCaseExpr &) {}\n void\n-ASTLoweringBase::visit (AST::MatchExpr &expr)\n+ASTLoweringBase::visit (AST::MatchExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::AwaitExpr &expr)\n+ASTLoweringBase::visit (AST::AwaitExpr &)\n {}\n void\n-ASTLoweringBase::visit (AST::AsyncBlockExpr &expr)\n+ASTLoweringBase::visit (AST::AsyncBlockExpr &)\n {}\n \n // rust-item.h\n void\n-ASTLoweringBase::visit (AST::TypeParam &param)\n+ASTLoweringBase::visit (AST::TypeParam &)\n {}\n-//  void ASTLoweringBase::visit(WhereClauseItem& item) {}\n+//  void ASTLoweringBase::visit(WhereClauseItemitem) {}\n void\n-ASTLoweringBase::visit (AST::LifetimeWhereClauseItem &item)\n+ASTLoweringBase::visit (AST::LifetimeWhereClauseItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypeBoundWhereClauseItem &item)\n+ASTLoweringBase::visit (AST::TypeBoundWhereClauseItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::Method &method)\n+ASTLoweringBase::visit (AST::Method &)\n {}\n void\n-ASTLoweringBase::visit (AST::Module &module)\n+ASTLoweringBase::visit (AST::Module &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExternCrate &crate)\n+ASTLoweringBase::visit (AST::ExternCrate &)\n {}\n-//  void ASTLoweringBase::visit(UseTree& use_tree) {}\n+//  void ASTLoweringBase::visit(UseTreeuse_tree) {}\n void\n-ASTLoweringBase::visit (AST::UseTreeGlob &use_tree)\n+ASTLoweringBase::visit (AST::UseTreeGlob &)\n {}\n void\n-ASTLoweringBase::visit (AST::UseTreeList &use_tree)\n+ASTLoweringBase::visit (AST::UseTreeList &)\n {}\n void\n-ASTLoweringBase::visit (AST::UseTreeRebind &use_tree)\n+ASTLoweringBase::visit (AST::UseTreeRebind &)\n {}\n void\n-ASTLoweringBase::visit (AST::UseDeclaration &use_decl)\n+ASTLoweringBase::visit (AST::UseDeclaration &)\n {}\n void\n-ASTLoweringBase::visit (AST::Function &function)\n+ASTLoweringBase::visit (AST::Function &)\n {}\n void\n-ASTLoweringBase::visit (AST::TypeAlias &type_alias)\n+ASTLoweringBase::visit (AST::TypeAlias &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructStruct &struct_item)\n+ASTLoweringBase::visit (AST::StructStruct &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleStruct &tuple_struct)\n+ASTLoweringBase::visit (AST::TupleStruct &)\n {}\n void\n-ASTLoweringBase::visit (AST::EnumItem &item)\n+ASTLoweringBase::visit (AST::EnumItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::EnumItemTuple &item)\n+ASTLoweringBase::visit (AST::EnumItemTuple &)\n {}\n void\n-ASTLoweringBase::visit (AST::EnumItemStruct &item)\n+ASTLoweringBase::visit (AST::EnumItemStruct &)\n {}\n void\n-ASTLoweringBase::visit (AST::EnumItemDiscriminant &item)\n+ASTLoweringBase::visit (AST::EnumItemDiscriminant &)\n {}\n void\n-ASTLoweringBase::visit (AST::Enum &enum_item)\n+ASTLoweringBase::visit (AST::Enum &)\n {}\n void\n-ASTLoweringBase::visit (AST::Union &union_item)\n+ASTLoweringBase::visit (AST::Union &)\n {}\n void\n-ASTLoweringBase::visit (AST::ConstantItem &const_item)\n+ASTLoweringBase::visit (AST::ConstantItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::StaticItem &static_item)\n+ASTLoweringBase::visit (AST::StaticItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitItemFunc &item)\n+ASTLoweringBase::visit (AST::TraitItemFunc &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitItemMethod &item)\n+ASTLoweringBase::visit (AST::TraitItemMethod &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitItemConst &item)\n+ASTLoweringBase::visit (AST::TraitItemConst &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitItemType &item)\n+ASTLoweringBase::visit (AST::TraitItemType &)\n {}\n void\n-ASTLoweringBase::visit (AST::Trait &trait)\n+ASTLoweringBase::visit (AST::Trait &)\n {}\n void\n-ASTLoweringBase::visit (AST::InherentImpl &impl)\n+ASTLoweringBase::visit (AST::InherentImpl &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitImpl &impl)\n+ASTLoweringBase::visit (AST::TraitImpl &)\n {}\n-//  void ASTLoweringBase::visit(ExternalItem& item) {}\n+//  void ASTLoweringBase::visit(ExternalItemitem) {}\n void\n-ASTLoweringBase::visit (AST::ExternalStaticItem &item)\n+ASTLoweringBase::visit (AST::ExternalStaticItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExternalFunctionItem &item)\n+ASTLoweringBase::visit (AST::ExternalFunctionItem &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExternBlock &block)\n+ASTLoweringBase::visit (AST::ExternBlock &)\n {}\n \n // rust-macro.h\n void\n-ASTLoweringBase::visit (AST::MacroMatchFragment &match)\n+ASTLoweringBase::visit (AST::MacroMatchFragment &)\n {}\n void\n-ASTLoweringBase::visit (AST::MacroMatchRepetition &match)\n+ASTLoweringBase::visit (AST::MacroMatchRepetition &)\n {}\n void\n-ASTLoweringBase::visit (AST::MacroMatcher &matcher)\n+ASTLoweringBase::visit (AST::MacroMatcher &)\n {}\n void\n-ASTLoweringBase::visit (AST::MacroRulesDefinition &rules_def)\n+ASTLoweringBase::visit (AST::MacroRulesDefinition &)\n {}\n void\n-ASTLoweringBase::visit (AST::MacroInvocation &macro_invoc)\n+ASTLoweringBase::visit (AST::MacroInvocation &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaItemPath &meta_item)\n+ASTLoweringBase::visit (AST::MetaItemPath &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaItemSeq &meta_item)\n+ASTLoweringBase::visit (AST::MetaItemSeq &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaWord &meta_item)\n+ASTLoweringBase::visit (AST::MetaWord &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaNameValueStr &meta_item)\n+ASTLoweringBase::visit (AST::MetaNameValueStr &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaListPaths &meta_item)\n+ASTLoweringBase::visit (AST::MetaListPaths &)\n {}\n void\n-ASTLoweringBase::visit (AST::MetaListNameValueStr &meta_item)\n+ASTLoweringBase::visit (AST::MetaListNameValueStr &)\n {}\n \n // rust-pattern.h\n void\n-ASTLoweringBase::visit (AST::LiteralPattern &pattern)\n+ASTLoweringBase::visit (AST::LiteralPattern &)\n {}\n void\n-ASTLoweringBase::visit (AST::IdentifierPattern &pattern)\n+ASTLoweringBase::visit (AST::IdentifierPattern &)\n {}\n void\n-ASTLoweringBase::visit (AST::WildcardPattern &pattern)\n+ASTLoweringBase::visit (AST::WildcardPattern &)\n {}\n-//  void ASTLoweringBase::visit(RangePatternBound& bound) {}\n+//  void ASTLoweringBase::visit(RangePatternBoundbound) {}\n void\n-ASTLoweringBase::visit (AST::RangePatternBoundLiteral &bound)\n+ASTLoweringBase::visit (AST::RangePatternBoundLiteral &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangePatternBoundPath &bound)\n+ASTLoweringBase::visit (AST::RangePatternBoundPath &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangePatternBoundQualPath &bound)\n+ASTLoweringBase::visit (AST::RangePatternBoundQualPath &)\n {}\n void\n-ASTLoweringBase::visit (AST::RangePattern &pattern)\n+ASTLoweringBase::visit (AST::RangePattern &)\n {}\n void\n-ASTLoweringBase::visit (AST::ReferencePattern &pattern)\n+ASTLoweringBase::visit (AST::ReferencePattern &)\n {}\n-//  void ASTLoweringBase::visit(StructPatternField& field) {}\n+//  void ASTLoweringBase::visit(StructPatternFieldfield) {}\n void\n-ASTLoweringBase::visit (AST::StructPatternFieldTuplePat &field)\n+ASTLoweringBase::visit (AST::StructPatternFieldTuplePat &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructPatternFieldIdentPat &field)\n+ASTLoweringBase::visit (AST::StructPatternFieldIdentPat &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructPatternFieldIdent &field)\n+ASTLoweringBase::visit (AST::StructPatternFieldIdent &)\n {}\n void\n-ASTLoweringBase::visit (AST::StructPattern &pattern)\n+ASTLoweringBase::visit (AST::StructPattern &)\n {}\n-//  void ASTLoweringBase::visit(TupleStructItems& tuple_items) {}\n+//  void ASTLoweringBase::visit(TupleStructItemstuple_items) {}\n void\n-ASTLoweringBase::visit (AST::TupleStructItemsNoRange &tuple_items)\n+ASTLoweringBase::visit (AST::TupleStructItemsNoRange &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleStructItemsRange &tuple_items)\n+ASTLoweringBase::visit (AST::TupleStructItemsRange &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleStructPattern &pattern)\n+ASTLoweringBase::visit (AST::TupleStructPattern &)\n {}\n-//  void ASTLoweringBase::visit(TuplePatternItems& tuple_items) {}\n+//  void ASTLoweringBase::visit(TuplePatternItemstuple_items) {}\n void\n-ASTLoweringBase::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+ASTLoweringBase::visit (AST::TuplePatternItemsMultiple &)\n {}\n void\n-ASTLoweringBase::visit (AST::TuplePatternItemsRanged &tuple_items)\n+ASTLoweringBase::visit (AST::TuplePatternItemsRanged &)\n {}\n void\n-ASTLoweringBase::visit (AST::TuplePattern &pattern)\n+ASTLoweringBase::visit (AST::TuplePattern &)\n {}\n void\n-ASTLoweringBase::visit (AST::GroupedPattern &pattern)\n+ASTLoweringBase::visit (AST::GroupedPattern &)\n {}\n void\n-ASTLoweringBase::visit (AST::SlicePattern &pattern)\n+ASTLoweringBase::visit (AST::SlicePattern &)\n {}\n \n // rust-stmt.h\n void\n-ASTLoweringBase::visit (AST::EmptyStmt &stmt)\n+ASTLoweringBase::visit (AST::EmptyStmt &)\n {}\n void\n-ASTLoweringBase::visit (AST::LetStmt &stmt)\n+ASTLoweringBase::visit (AST::LetStmt &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExprStmtWithoutBlock &stmt)\n+ASTLoweringBase::visit (AST::ExprStmtWithoutBlock &)\n {}\n void\n-ASTLoweringBase::visit (AST::ExprStmtWithBlock &stmt)\n+ASTLoweringBase::visit (AST::ExprStmtWithBlock &)\n {}\n \n // rust-type.h\n void\n-ASTLoweringBase::visit (AST::TraitBound &bound)\n+ASTLoweringBase::visit (AST::TraitBound &)\n {}\n void\n-ASTLoweringBase::visit (AST::ImplTraitType &type)\n+ASTLoweringBase::visit (AST::ImplTraitType &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitObjectType &type)\n+ASTLoweringBase::visit (AST::TraitObjectType &)\n {}\n void\n-ASTLoweringBase::visit (AST::ParenthesisedType &type)\n+ASTLoweringBase::visit (AST::ParenthesisedType &)\n {}\n void\n-ASTLoweringBase::visit (AST::ImplTraitTypeOneBound &type)\n+ASTLoweringBase::visit (AST::ImplTraitTypeOneBound &)\n {}\n void\n-ASTLoweringBase::visit (AST::TraitObjectTypeOneBound &type)\n+ASTLoweringBase::visit (AST::TraitObjectTypeOneBound &)\n {}\n void\n-ASTLoweringBase::visit (AST::TupleType &type)\n+ASTLoweringBase::visit (AST::TupleType &)\n {}\n void\n-ASTLoweringBase::visit (AST::NeverType &type)\n+ASTLoweringBase::visit (AST::NeverType &)\n {}\n void\n-ASTLoweringBase::visit (AST::RawPointerType &type)\n+ASTLoweringBase::visit (AST::RawPointerType &)\n {}\n void\n-ASTLoweringBase::visit (AST::ReferenceType &type)\n+ASTLoweringBase::visit (AST::ReferenceType &)\n {}\n void\n-ASTLoweringBase::visit (AST::ArrayType &type)\n+ASTLoweringBase::visit (AST::ArrayType &)\n {}\n void\n-ASTLoweringBase::visit (AST::SliceType &type)\n+ASTLoweringBase::visit (AST::SliceType &)\n {}\n void\n-ASTLoweringBase::visit (AST::InferredType &type)\n+ASTLoweringBase::visit (AST::InferredType &)\n {}\n void\n-ASTLoweringBase::visit (AST::BareFunctionType &type)\n+ASTLoweringBase::visit (AST::BareFunctionType &)\n {}\n \n HIR::Lifetime\n@@ -742,7 +742,7 @@ ASTLoweringBase::handle_outer_attributes (const ItemWrapper &item)\n }\n \n void\n-ASTLoweringBase::handle_doc_item_attribute (const ItemWrapper &item,\n+ASTLoweringBase::handle_doc_item_attribute (const ItemWrapper &,\n \t\t\t\t\t    const AST::Attribute &attr)\n {\n   auto simple_doc_comment = attr.has_attr_input ()"}, {"sha": "875e1dd9374960827ad0034ad74f515bda464071", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -200,7 +200,7 @@ void\n Dump::visit (ClosureExpr &)\n {}\n void\n-Dump::visit (BlockExpr &block_expr)\n+Dump::visit (BlockExpr &)\n {\n   stream << \"BlockExpr\"\n \t << \":\"\n@@ -324,7 +324,7 @@ void\n Dump::visit (UseDeclaration &)\n {}\n void\n-Dump::visit (Function &function)\n+Dump::visit (Function &)\n {\n   indent++;\n   stream << std::string (indent, indent_char);"}, {"sha": "230b7f72a8558e01c3a9309454f1ebb2a879b5d5", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -5256,7 +5256,7 @@ ConstGenericParam::as_string () const\n }\n \n void\n-ConstGenericParam::accept_vis (HIRFullVisitor &vis)\n+ConstGenericParam::accept_vis (HIRFullVisitor &)\n {}\n \n } // namespace HIR"}, {"sha": "ac7ced540e66664f74de8ae99fb480d3ea0f4472", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -1364,7 +1364,7 @@ Lexer::parse_escape (char opening_char)\n /* Parses an escape (or string continue) in a string or character. Supports\n  * unicode escapes. */\n std::tuple<Codepoint, int, bool>\n-Lexer::parse_utf8_escape (char opening_char)\n+Lexer::parse_utf8_escape ()\n {\n   Codepoint output_char;\n   int additional_length_offset = 0;\n@@ -1964,7 +1964,7 @@ Lexer::parse_string (Location loc)\n       if (current_char32.value == '\\\\')\n \t{\n \t  // parse escape\n-\t  auto utf8_escape_pair = parse_utf8_escape ('\\'');\n+\t  auto utf8_escape_pair = parse_utf8_escape ();\n \t  current_char32 = std::get<0> (utf8_escape_pair);\n \n \t  if (current_char32 == Codepoint (0) && std::get<2> (utf8_escape_pair))\n@@ -2365,7 +2365,7 @@ Lexer::parse_char_or_lifetime (Location loc)\n   if (current_char32.value == '\\\\')\n     {\n       // parse escape\n-      auto utf8_escape_pair = parse_utf8_escape ('\\'');\n+      auto utf8_escape_pair = parse_utf8_escape ();\n       current_char32 = std::get<0> (utf8_escape_pair);\n       length += std::get<1> (utf8_escape_pair);\n "}, {"sha": "2dd60b365ef72a17755d7de449325115eaa48140", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -109,7 +109,7 @@ class Lexer\n   std::pair<std::string, int> parse_in_exponent_part ();\n   std::pair<PrimitiveCoreType, int> parse_in_type_suffix ();\n   std::tuple<char, int, bool> parse_escape (char opening_char);\n-  std::tuple<Codepoint, int, bool> parse_utf8_escape (char opening_char);\n+  std::tuple<Codepoint, int, bool> parse_utf8_escape ();\n   int parse_partial_string_continue ();\n   std::pair<long, int> parse_partial_hex_escape ();\n   std::pair<Codepoint, int> parse_partial_unicode_escape ();"}, {"sha": "49a7226476d752ce22fea74fde05af4987131570", "filename": "gcc/rust/metadata/rust-export-metadata.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fmetadata%2Frust-export-metadata.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -157,18 +157,18 @@ class ExportVisItems : public HIR::HIRVisItemVisitor\n public:\n   ExportVisItems (ExportContext &context) : ctx (context) {}\n \n-  void visit (HIR::Module &module) override {}\n-  void visit (HIR::ExternCrate &crate) override {}\n-  void visit (HIR::UseDeclaration &use_decl) override {}\n-  void visit (HIR::TypeAlias &type_alias) override {}\n-  void visit (HIR::StructStruct &struct_item) override {}\n-  void visit (HIR::TupleStruct &tuple_struct) override {}\n-  void visit (HIR::Enum &enum_item) override {}\n-  void visit (HIR::Union &union_item) override {}\n-  void visit (HIR::ConstantItem &const_item) override {}\n-  void visit (HIR::StaticItem &static_item) override {}\n-  void visit (HIR::ImplBlock &impl) override {}\n-  void visit (HIR::ExternBlock &block) override {}\n+  void visit (HIR::Module &) override {}\n+  void visit (HIR::ExternCrate &) override {}\n+  void visit (HIR::UseDeclaration &) override {}\n+  void visit (HIR::TypeAlias &) override {}\n+  void visit (HIR::StructStruct &) override {}\n+  void visit (HIR::TupleStruct &) override {}\n+  void visit (HIR::Enum &) override {}\n+  void visit (HIR::Union &) override {}\n+  void visit (HIR::ConstantItem &) override {}\n+  void visit (HIR::StaticItem &) override {}\n+  void visit (HIR::ImplBlock &) override {}\n+  void visit (HIR::ExternBlock &) override {}\n \n   void visit (HIR::Trait &trait) override { ctx.emit_trait (trait); }\n "}, {"sha": "4dfc0833d9141089de5e2404a0e36225722b088c", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -102,7 +102,7 @@ ResolveExpr::visit (AST::AssignmentExpr &expr)\n   ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n \n   // need to verify the assignee\n-  VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n+  VerifyAsignee::go (expr.get_left_expr ().get ());\n }\n \n void\n@@ -141,7 +141,7 @@ ResolveExpr::visit (AST::CompoundAssignmentExpr &expr)\n   ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n \n   // need to verify the assignee\n-  VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n+  VerifyAsignee::go (expr.get_left_expr ().get ());\n }\n \n void\n@@ -553,7 +553,7 @@ ResolveExpr::visit (AST::RangeToExpr &expr)\n }\n \n void\n-ResolveExpr::visit (AST::RangeFullExpr &expr)\n+ResolveExpr::visit (AST::RangeFullExpr &)\n {\n   // nothing to do\n }"}, {"sha": "16d05f3792b21bbe028eabced273d5c1d4732643", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -61,13 +61,13 @@ ResolveType::visit (AST::RawPointerType &type)\n }\n \n void\n-ResolveType::visit (AST::InferredType &type)\n+ResolveType::visit (AST::InferredType &)\n {\n   // FIXME\n }\n \n void\n-ResolveType::visit (AST::NeverType &type)\n+ResolveType::visit (AST::NeverType &)\n {\n   // FIXME\n }\n@@ -505,7 +505,7 @@ ResolveTypeToCanonicalPath::visit (AST::TraitObjectTypeOneBound &type)\n }\n \n void\n-ResolveTypeToCanonicalPath::visit (AST::TraitObjectType &type)\n+ResolveTypeToCanonicalPath::visit (AST::TraitObjectType &)\n {\n   // FIXME is this actually allowed? dyn A+B\n   gcc_unreachable ();"}, {"sha": "8d09c9b6564e7ef03d5b1144a0d815a1f23ae681", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -30,9 +30,9 @@ class VerifyAsignee : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static bool go (AST::Expr *assignee, NodeId parent)\n+  static bool go (AST::Expr *assignee)\n   {\n-    VerifyAsignee checker (parent);\n+    VerifyAsignee checker;\n     assignee->accept_vis (checker);\n     if (!checker.ok)\n       rust_error_at (assignee->get_locus (),\n@@ -70,10 +70,10 @@ class VerifyAsignee : public ResolverBase\n     expr.get_dereferenced_expr ()->accept_vis (*this);\n   }\n \n-  void visit (AST::PathInExpression &expr) override { ok = true; }\n+  void visit (AST::PathInExpression &) override { ok = true; }\n \n private:\n-  VerifyAsignee (NodeId parent) : ResolverBase (), ok (false) {}\n+  VerifyAsignee () : ResolverBase (), ok (false) {}\n \n   bool ok;\n };"}, {"sha": "8100564dc788d06bb79769d0e6b44512af181c7b", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -60,31 +60,31 @@ EarlyNameResolver::resolve_qualified_path_type (AST::QualifiedPathType &path)\n }\n \n void\n-EarlyNameResolver::visit (AST::Token &tok)\n+EarlyNameResolver::visit (AST::Token &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::DelimTokenTree &delim_tok_tree)\n+EarlyNameResolver::visit (AST::DelimTokenTree &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::AttrInputMetaItemContainer &input)\n+EarlyNameResolver::visit (AST::AttrInputMetaItemContainer &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::IdentifierExpr &ident_expr)\n+EarlyNameResolver::visit (AST::IdentifierExpr &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::Lifetime &lifetime)\n+EarlyNameResolver::visit (AST::Lifetime &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::LifetimeParam &lifetime_param)\n+EarlyNameResolver::visit (AST::LifetimeParam &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ConstGenericParam &const_param)\n+EarlyNameResolver::visit (AST::ConstGenericParam &)\n {}\n \n // FIXME: ARTHUR: Do we need to perform macro resolution for paths as well?\n@@ -98,7 +98,7 @@ EarlyNameResolver::visit (AST::PathInExpression &path)\n }\n \n void\n-EarlyNameResolver::visit (AST::TypePathSegment &segment)\n+EarlyNameResolver::visit (AST::TypePathSegment &)\n {}\n \n void\n@@ -144,19 +144,19 @@ EarlyNameResolver::visit (AST::QualifiedPathInType &path)\n }\n \n void\n-EarlyNameResolver::visit (AST::LiteralExpr &expr)\n+EarlyNameResolver::visit (AST::LiteralExpr &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::AttrInputLiteral &attr_input)\n+EarlyNameResolver::visit (AST::AttrInputLiteral &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaItemLitExpr &meta_item)\n+EarlyNameResolver::visit (AST::MetaItemLitExpr &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaItemPathLit &meta_item)\n+EarlyNameResolver::visit (AST::MetaItemPathLit &)\n {}\n \n void\n@@ -271,11 +271,11 @@ EarlyNameResolver::visit (AST::TupleIndexExpr &expr)\n }\n \n void\n-EarlyNameResolver::visit (AST::StructExprStruct &expr)\n+EarlyNameResolver::visit (AST::StructExprStruct &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::StructExprFieldIdentifier &field)\n+EarlyNameResolver::visit (AST::StructExprFieldIdentifier &)\n {}\n \n void\n@@ -298,7 +298,7 @@ EarlyNameResolver::visit (AST::StructExprStructFields &expr)\n }\n \n void\n-EarlyNameResolver::visit (AST::StructExprStructBase &expr)\n+EarlyNameResolver::visit (AST::StructExprStructBase &)\n {}\n \n void\n@@ -352,7 +352,7 @@ EarlyNameResolver::visit (AST::ClosureExprInnerTyped &expr)\n }\n \n void\n-EarlyNameResolver::visit (AST::ContinueExpr &expr)\n+EarlyNameResolver::visit (AST::ContinueExpr &)\n {}\n \n void\n@@ -382,7 +382,7 @@ EarlyNameResolver::visit (AST::RangeToExpr &expr)\n }\n \n void\n-EarlyNameResolver::visit (AST::RangeFullExpr &expr)\n+EarlyNameResolver::visit (AST::RangeFullExpr &)\n {}\n \n void\n@@ -539,7 +539,7 @@ EarlyNameResolver::visit (AST::TypeParam &param)\n }\n \n void\n-EarlyNameResolver::visit (AST::LifetimeWhereClauseItem &item)\n+EarlyNameResolver::visit (AST::LifetimeWhereClauseItem &)\n {}\n \n void\n@@ -576,23 +576,23 @@ EarlyNameResolver::visit (AST::Module &module)\n }\n \n void\n-EarlyNameResolver::visit (AST::ExternCrate &crate)\n+EarlyNameResolver::visit (AST::ExternCrate &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::UseTreeGlob &use_tree)\n+EarlyNameResolver::visit (AST::UseTreeGlob &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::UseTreeList &use_tree)\n+EarlyNameResolver::visit (AST::UseTreeList &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::UseTreeRebind &use_tree)\n+EarlyNameResolver::visit (AST::UseTreeRebind &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::UseDeclaration &use_decl)\n+EarlyNameResolver::visit (AST::UseDeclaration &)\n {}\n \n void\n@@ -632,27 +632,27 @@ EarlyNameResolver::visit (AST::TupleStruct &tuple_struct)\n }\n \n void\n-EarlyNameResolver::visit (AST::EnumItem &item)\n+EarlyNameResolver::visit (AST::EnumItem &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::EnumItemTuple &item)\n+EarlyNameResolver::visit (AST::EnumItemTuple &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::EnumItemStruct &item)\n+EarlyNameResolver::visit (AST::EnumItemStruct &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::EnumItemDiscriminant &item)\n+EarlyNameResolver::visit (AST::EnumItemDiscriminant &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::Enum &enum_item)\n+EarlyNameResolver::visit (AST::Enum &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::Union &union_item)\n+EarlyNameResolver::visit (AST::Union &)\n {}\n \n void\n@@ -716,7 +716,7 @@ EarlyNameResolver::visit (AST::TraitItemConst &item)\n }\n \n void\n-EarlyNameResolver::visit (AST::TraitItemType &item)\n+EarlyNameResolver::visit (AST::TraitItemType &)\n {}\n \n void\n@@ -777,15 +777,15 @@ EarlyNameResolver::visit (AST::ExternBlock &block)\n }\n \n void\n-EarlyNameResolver::visit (AST::MacroMatchFragment &match)\n+EarlyNameResolver::visit (AST::MacroMatchFragment &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MacroMatchRepetition &match)\n+EarlyNameResolver::visit (AST::MacroMatchRepetition &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MacroMatcher &matcher)\n+EarlyNameResolver::visit (AST::MacroMatcher &)\n {}\n \n void\n@@ -853,31 +853,31 @@ EarlyNameResolver::visit (AST::MacroInvocation &invoc)\n // FIXME: ARTHUR: Do we need to resolve these as well here?\n \n void\n-EarlyNameResolver::visit (AST::MetaItemPath &meta_item)\n+EarlyNameResolver::visit (AST::MetaItemPath &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaItemSeq &meta_item)\n+EarlyNameResolver::visit (AST::MetaItemSeq &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaWord &meta_item)\n+EarlyNameResolver::visit (AST::MetaWord &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaNameValueStr &meta_item)\n+EarlyNameResolver::visit (AST::MetaNameValueStr &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaListPaths &meta_item)\n+EarlyNameResolver::visit (AST::MetaListPaths &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::MetaListNameValueStr &meta_item)\n+EarlyNameResolver::visit (AST::MetaListNameValueStr &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::LiteralPattern &pattern)\n+EarlyNameResolver::visit (AST::LiteralPattern &)\n {}\n \n void\n@@ -888,19 +888,19 @@ EarlyNameResolver::visit (AST::IdentifierPattern &pattern)\n }\n \n void\n-EarlyNameResolver::visit (AST::WildcardPattern &pattern)\n+EarlyNameResolver::visit (AST::WildcardPattern &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::RangePatternBoundLiteral &bound)\n+EarlyNameResolver::visit (AST::RangePatternBoundLiteral &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::RangePatternBoundPath &bound)\n+EarlyNameResolver::visit (AST::RangePatternBoundPath &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::RangePatternBoundQualPath &bound)\n+EarlyNameResolver::visit (AST::RangePatternBoundQualPath &)\n {}\n \n void\n@@ -929,11 +929,11 @@ EarlyNameResolver::visit (AST::StructPatternFieldIdentPat &field)\n }\n \n void\n-EarlyNameResolver::visit (AST::StructPatternFieldIdent &field)\n+EarlyNameResolver::visit (AST::StructPatternFieldIdent &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::StructPattern &pattern)\n+EarlyNameResolver::visit (AST::StructPattern &)\n {}\n \n void\n@@ -994,7 +994,7 @@ EarlyNameResolver::visit (AST::SlicePattern &pattern)\n }\n \n void\n-EarlyNameResolver::visit (AST::EmptyStmt &stmt)\n+EarlyNameResolver::visit (AST::EmptyStmt &)\n {}\n \n void\n@@ -1022,55 +1022,55 @@ EarlyNameResolver::visit (AST::ExprStmtWithBlock &stmt)\n }\n \n void\n-EarlyNameResolver::visit (AST::TraitBound &bound)\n+EarlyNameResolver::visit (AST::TraitBound &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ImplTraitType &type)\n+EarlyNameResolver::visit (AST::ImplTraitType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::TraitObjectType &type)\n+EarlyNameResolver::visit (AST::TraitObjectType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ParenthesisedType &type)\n+EarlyNameResolver::visit (AST::ParenthesisedType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ImplTraitTypeOneBound &type)\n+EarlyNameResolver::visit (AST::ImplTraitTypeOneBound &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::TraitObjectTypeOneBound &type)\n+EarlyNameResolver::visit (AST::TraitObjectTypeOneBound &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::TupleType &type)\n+EarlyNameResolver::visit (AST::TupleType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::NeverType &type)\n+EarlyNameResolver::visit (AST::NeverType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::RawPointerType &type)\n+EarlyNameResolver::visit (AST::RawPointerType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ReferenceType &type)\n+EarlyNameResolver::visit (AST::ReferenceType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::ArrayType &type)\n+EarlyNameResolver::visit (AST::ArrayType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::SliceType &type)\n+EarlyNameResolver::visit (AST::SliceType &)\n {}\n \n void\n-EarlyNameResolver::visit (AST::InferredType &type)\n+EarlyNameResolver::visit (AST::InferredType &)\n {}\n \n void"}, {"sha": "796cc65ba667a141c9b1f23ed9f1559d14d33b80", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -72,27 +72,21 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::ClosureExpr &expr) override;\n \n   // TODO\n-  void visit (HIR::ErrorPropagationExpr &expr) override {}\n-  void visit (HIR::RangeToInclExpr &expr) override {}\n-  void visit (HIR::WhileLetLoopExpr &expr) override {}\n-  void visit (HIR::ForLoopExpr &expr) override {}\n-  void visit (HIR::IfExprConseqIfLet &expr) override {}\n-  void visit (HIR::IfLetExprConseqElse &expr) override {}\n-  void visit (HIR::IfLetExprConseqIf &expr) override {}\n-  void visit (HIR::IfLetExprConseqIfLet &expr) override {}\n-  void visit (HIR::AwaitExpr &expr) override {}\n-  void visit (HIR::AsyncBlockExpr &expr) override {}\n+  void visit (HIR::ErrorPropagationExpr &) override {}\n+  void visit (HIR::RangeToInclExpr &) override {}\n+  void visit (HIR::WhileLetLoopExpr &) override {}\n+  void visit (HIR::ForLoopExpr &) override {}\n+  void visit (HIR::IfExprConseqIfLet &) override {}\n+  void visit (HIR::IfLetExprConseqElse &) override {}\n+  void visit (HIR::IfLetExprConseqIf &) override {}\n+  void visit (HIR::IfLetExprConseqIfLet &) override {}\n+  void visit (HIR::AwaitExpr &) override {}\n+  void visit (HIR::AsyncBlockExpr &) override {}\n \n   // don't need to implement these see rust-hir-type-check-struct-field.h\n-  void visit (HIR::StructExprFieldIdentifier &field) override\n-  {\n-    gcc_unreachable ();\n-  }\n-  void visit (HIR::StructExprFieldIdentifierValue &field) override\n-  {\n-    gcc_unreachable ();\n-  }\n-  void visit (HIR::StructExprFieldIndexValue &field) override\n+  void visit (HIR::StructExprFieldIdentifier &) override { gcc_unreachable (); }\n+  void visit (HIR::StructExprFieldIndexValue &) override { gcc_unreachable (); }\n+  void visit (HIR::StructExprFieldIdentifierValue &) override\n   {\n     gcc_unreachable ();\n   }"}, {"sha": "2268fdb6e6ccdc73b659ba98f2826811083398bd", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -48,8 +48,8 @@ class TypeCheckItem : private TypeCheckBase, private HIR::HIRVisItemVisitor\n   void visit (HIR::Trait &trait_block) override;\n \n   // nothing to do\n-  void visit (HIR::ExternCrate &crate) override {}\n-  void visit (HIR::UseDeclaration &use_decl) override {}\n+  void visit (HIR::ExternCrate &) override {}\n+  void visit (HIR::UseDeclaration &) override {}\n \n protected:\n   std::vector<TyTy::SubstitutionParamMapping>"}, {"sha": "b017a851b5d4ded4f723c57c8ba425589f546576", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -381,34 +381,34 @@ TypeCheckPattern::visit (HIR::RangePattern &pattern)\n }\n \n void\n-TypeCheckPattern::visit (HIR::IdentifierPattern &pattern)\n+TypeCheckPattern::visit (HIR::IdentifierPattern &)\n {\n   infered = parent;\n }\n \n void\n-TypeCheckPattern::visit (HIR::GroupedPattern &pattern)\n+TypeCheckPattern::visit (HIR::GroupedPattern &)\n {\n   // TODO\n   gcc_unreachable ();\n }\n \n void\n-TypeCheckPattern::visit (HIR::QualifiedPathInExpression &pattern)\n+TypeCheckPattern::visit (HIR::QualifiedPathInExpression &)\n {\n   // TODO\n   gcc_unreachable ();\n }\n \n void\n-TypeCheckPattern::visit (HIR::ReferencePattern &pattern)\n+TypeCheckPattern::visit (HIR::ReferencePattern &)\n {\n   // TODO\n   gcc_unreachable ();\n }\n \n void\n-TypeCheckPattern::visit (HIR::SlicePattern &pattern)\n+TypeCheckPattern::visit (HIR::SlicePattern &)\n {\n   // TODO\n   gcc_unreachable ();"}, {"sha": "cfe269221bd2135b40c6395a5b647c1315f32e79", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -123,53 +123,53 @@ class BaseRules : public TyVisitor\n     return resolved;\n   }\n \n-  virtual void visit (TupleType &type) override {}\n+  virtual void visit (TupleType &) override {}\n \n-  virtual void visit (ADTType &type) override {}\n+  virtual void visit (ADTType &) override {}\n \n-  virtual void visit (InferType &type) override {}\n+  virtual void visit (InferType &) override {}\n \n-  virtual void visit (FnType &type) override {}\n+  virtual void visit (FnType &) override {}\n \n-  virtual void visit (FnPtr &type) override {}\n+  virtual void visit (FnPtr &) override {}\n \n-  virtual void visit (ArrayType &type) override {}\n+  virtual void visit (ArrayType &) override {}\n \n-  virtual void visit (SliceType &type) override {}\n+  virtual void visit (SliceType &) override {}\n \n-  virtual void visit (BoolType &type) override {}\n+  virtual void visit (BoolType &) override {}\n \n-  virtual void visit (IntType &type) override {}\n+  virtual void visit (IntType &) override {}\n \n-  virtual void visit (UintType &type) override {}\n+  virtual void visit (UintType &) override {}\n \n-  virtual void visit (USizeType &type) override {}\n+  virtual void visit (USizeType &) override {}\n \n-  virtual void visit (ISizeType &type) override {}\n+  virtual void visit (ISizeType &) override {}\n \n-  virtual void visit (FloatType &type) override {}\n+  virtual void visit (FloatType &) override {}\n \n-  virtual void visit (ErrorType &type) override {}\n+  virtual void visit (ErrorType &) override {}\n \n-  virtual void visit (CharType &type) override {}\n+  virtual void visit (CharType &) override {}\n \n-  virtual void visit (ReferenceType &type) override {}\n+  virtual void visit (ReferenceType &) override {}\n \n-  virtual void visit (PointerType &type) override {}\n+  virtual void visit (PointerType &) override {}\n \n-  virtual void visit (ParamType &type) override {}\n+  virtual void visit (ParamType &) override {}\n \n-  virtual void visit (StrType &type) override {}\n+  virtual void visit (StrType &) override {}\n \n-  virtual void visit (NeverType &type) override {}\n+  virtual void visit (NeverType &) override {}\n \n-  virtual void visit (PlaceholderType &type) override {}\n+  virtual void visit (PlaceholderType &) override {}\n \n-  virtual void visit (ProjectionType &type) override {}\n+  virtual void visit (ProjectionType &) override {}\n \n-  virtual void visit (DynamicObjectType &type) override {}\n+  virtual void visit (DynamicObjectType &) override {}\n \n-  virtual void visit (ClosureType &type) override {}\n+  virtual void visit (ClosureType &) override {}\n \n protected:\n   BaseRules (BaseType *base)"}, {"sha": "33f2c932d098e7a8fb58d0a79bec7d9103c14869", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 156, "deletions": 156, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f455ed820ccea4f5f37eaf7e5ed3a87cced028e/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=9f455ed820ccea4f5f37eaf7e5ed3a87cced028e", "patch": "@@ -210,342 +210,342 @@ AttributeChecker::check_attributes (const AST::AttrVec &attributes)\n }\n \n void\n-AttributeChecker::visit (AST::Token &tok)\n+AttributeChecker::visit (AST::Token &)\n {}\n \n void\n-AttributeChecker::visit (AST::DelimTokenTree &delim_tok_tree)\n+AttributeChecker::visit (AST::DelimTokenTree &)\n {}\n \n void\n-AttributeChecker::visit (AST::AttrInputMetaItemContainer &input)\n+AttributeChecker::visit (AST::AttrInputMetaItemContainer &)\n {}\n \n void\n-AttributeChecker::visit (AST::IdentifierExpr &ident_expr)\n+AttributeChecker::visit (AST::IdentifierExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::Lifetime &lifetime)\n+AttributeChecker::visit (AST::Lifetime &)\n {}\n \n void\n-AttributeChecker::visit (AST::LifetimeParam &lifetime_param)\n+AttributeChecker::visit (AST::LifetimeParam &)\n {}\n \n void\n-AttributeChecker::visit (AST::ConstGenericParam &const_param)\n+AttributeChecker::visit (AST::ConstGenericParam &)\n {}\n \n // rust-path.h\n void\n-AttributeChecker::visit (AST::PathInExpression &path)\n+AttributeChecker::visit (AST::PathInExpression &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypePathSegment &segment)\n+AttributeChecker::visit (AST::TypePathSegment &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypePathSegmentGeneric &segment)\n+AttributeChecker::visit (AST::TypePathSegmentGeneric &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypePathSegmentFunction &segment)\n+AttributeChecker::visit (AST::TypePathSegmentFunction &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypePath &path)\n+AttributeChecker::visit (AST::TypePath &)\n {}\n \n void\n-AttributeChecker::visit (AST::QualifiedPathInExpression &path)\n+AttributeChecker::visit (AST::QualifiedPathInExpression &)\n {}\n \n void\n-AttributeChecker::visit (AST::QualifiedPathInType &path)\n+AttributeChecker::visit (AST::QualifiedPathInType &)\n {}\n \n // rust-expr.h\n void\n-AttributeChecker::visit (AST::LiteralExpr &expr)\n+AttributeChecker::visit (AST::LiteralExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::AttrInputLiteral &attr_input)\n+AttributeChecker::visit (AST::AttrInputLiteral &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaItemLitExpr &meta_item)\n+AttributeChecker::visit (AST::MetaItemLitExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaItemPathLit &meta_item)\n+AttributeChecker::visit (AST::MetaItemPathLit &)\n {}\n \n void\n-AttributeChecker::visit (AST::BorrowExpr &expr)\n+AttributeChecker::visit (AST::BorrowExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::DereferenceExpr &expr)\n+AttributeChecker::visit (AST::DereferenceExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ErrorPropagationExpr &expr)\n+AttributeChecker::visit (AST::ErrorPropagationExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::NegationExpr &expr)\n+AttributeChecker::visit (AST::NegationExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArithmeticOrLogicalExpr &expr)\n+AttributeChecker::visit (AST::ArithmeticOrLogicalExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ComparisonExpr &expr)\n+AttributeChecker::visit (AST::ComparisonExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::LazyBooleanExpr &expr)\n+AttributeChecker::visit (AST::LazyBooleanExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypeCastExpr &expr)\n+AttributeChecker::visit (AST::TypeCastExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::AssignmentExpr &expr)\n+AttributeChecker::visit (AST::AssignmentExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::CompoundAssignmentExpr &expr)\n+AttributeChecker::visit (AST::CompoundAssignmentExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::GroupedExpr &expr)\n+AttributeChecker::visit (AST::GroupedExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArrayElemsValues &elems)\n+AttributeChecker::visit (AST::ArrayElemsValues &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArrayElemsCopied &elems)\n+AttributeChecker::visit (AST::ArrayElemsCopied &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArrayExpr &expr)\n+AttributeChecker::visit (AST::ArrayExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArrayIndexExpr &expr)\n+AttributeChecker::visit (AST::ArrayIndexExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::TupleExpr &expr)\n+AttributeChecker::visit (AST::TupleExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::TupleIndexExpr &expr)\n+AttributeChecker::visit (AST::TupleIndexExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprStruct &expr)\n+AttributeChecker::visit (AST::StructExprStruct &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprFieldIdentifier &field)\n+AttributeChecker::visit (AST::StructExprFieldIdentifier &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprFieldIdentifierValue &field)\n+AttributeChecker::visit (AST::StructExprFieldIdentifierValue &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprFieldIndexValue &field)\n+AttributeChecker::visit (AST::StructExprFieldIndexValue &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprStructFields &expr)\n+AttributeChecker::visit (AST::StructExprStructFields &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructExprStructBase &expr)\n+AttributeChecker::visit (AST::StructExprStructBase &)\n {}\n \n void\n-AttributeChecker::visit (AST::CallExpr &expr)\n+AttributeChecker::visit (AST::CallExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::MethodCallExpr &expr)\n+AttributeChecker::visit (AST::MethodCallExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::FieldAccessExpr &expr)\n+AttributeChecker::visit (AST::FieldAccessExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ClosureExprInner &expr)\n+AttributeChecker::visit (AST::ClosureExprInner &)\n {}\n \n void\n-AttributeChecker::visit (AST::BlockExpr &expr)\n+AttributeChecker::visit (AST::BlockExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ClosureExprInnerTyped &expr)\n+AttributeChecker::visit (AST::ClosureExprInnerTyped &)\n {}\n \n void\n-AttributeChecker::visit (AST::ContinueExpr &expr)\n+AttributeChecker::visit (AST::ContinueExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::BreakExpr &expr)\n+AttributeChecker::visit (AST::BreakExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeFromToExpr &expr)\n+AttributeChecker::visit (AST::RangeFromToExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeFromExpr &expr)\n+AttributeChecker::visit (AST::RangeFromExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeToExpr &expr)\n+AttributeChecker::visit (AST::RangeToExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeFullExpr &expr)\n+AttributeChecker::visit (AST::RangeFullExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeFromToInclExpr &expr)\n+AttributeChecker::visit (AST::RangeFromToInclExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangeToInclExpr &expr)\n+AttributeChecker::visit (AST::RangeToInclExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ReturnExpr &expr)\n+AttributeChecker::visit (AST::ReturnExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::UnsafeBlockExpr &expr)\n+AttributeChecker::visit (AST::UnsafeBlockExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::LoopExpr &expr)\n+AttributeChecker::visit (AST::LoopExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::WhileLoopExpr &expr)\n+AttributeChecker::visit (AST::WhileLoopExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::WhileLetLoopExpr &expr)\n+AttributeChecker::visit (AST::WhileLetLoopExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::ForLoopExpr &expr)\n+AttributeChecker::visit (AST::ForLoopExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfExpr &expr)\n+AttributeChecker::visit (AST::IfExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfExprConseqElse &expr)\n+AttributeChecker::visit (AST::IfExprConseqElse &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfExprConseqIf &expr)\n+AttributeChecker::visit (AST::IfExprConseqIf &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfExprConseqIfLet &expr)\n+AttributeChecker::visit (AST::IfExprConseqIfLet &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfLetExpr &expr)\n+AttributeChecker::visit (AST::IfLetExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfLetExprConseqElse &expr)\n+AttributeChecker::visit (AST::IfLetExprConseqElse &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfLetExprConseqIf &expr)\n+AttributeChecker::visit (AST::IfLetExprConseqIf &)\n {}\n \n void\n-AttributeChecker::visit (AST::IfLetExprConseqIfLet &expr)\n+AttributeChecker::visit (AST::IfLetExprConseqIfLet &)\n {}\n \n void\n-AttributeChecker::visit (AST::MatchExpr &expr)\n+AttributeChecker::visit (AST::MatchExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::AwaitExpr &expr)\n+AttributeChecker::visit (AST::AwaitExpr &)\n {}\n \n void\n-AttributeChecker::visit (AST::AsyncBlockExpr &expr)\n+AttributeChecker::visit (AST::AsyncBlockExpr &)\n {}\n \n // rust-item.h\n void\n-AttributeChecker::visit (AST::TypeParam &param)\n+AttributeChecker::visit (AST::TypeParam &)\n {}\n \n void\n-AttributeChecker::visit (AST::LifetimeWhereClauseItem &item)\n+AttributeChecker::visit (AST::LifetimeWhereClauseItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypeBoundWhereClauseItem &item)\n+AttributeChecker::visit (AST::TypeBoundWhereClauseItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::Method &method)\n+AttributeChecker::visit (AST::Method &)\n {}\n \n void\n-AttributeChecker::visit (AST::Module &module)\n+AttributeChecker::visit (AST::Module &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExternCrate &crate)\n+AttributeChecker::visit (AST::ExternCrate &)\n {}\n \n void\n-AttributeChecker::visit (AST::UseTreeGlob &use_tree)\n+AttributeChecker::visit (AST::UseTreeGlob &)\n {}\n \n void\n-AttributeChecker::visit (AST::UseTreeList &use_tree)\n+AttributeChecker::visit (AST::UseTreeList &)\n {}\n \n void\n-AttributeChecker::visit (AST::UseTreeRebind &use_tree)\n+AttributeChecker::visit (AST::UseTreeRebind &)\n {}\n \n void\n-AttributeChecker::visit (AST::UseDeclaration &use_decl)\n+AttributeChecker::visit (AST::UseDeclaration &)\n {}\n \n void\n-AttributeChecker::visit (AST::Function &function)\n+AttributeChecker::visit (AST::Function &)\n {}\n \n void\n-AttributeChecker::visit (AST::TypeAlias &type_alias)\n+AttributeChecker::visit (AST::TypeAlias &)\n {}\n \n void\n@@ -555,287 +555,287 @@ AttributeChecker::visit (AST::StructStruct &struct_item)\n }\n \n void\n-AttributeChecker::visit (AST::TupleStruct &tuple_struct)\n+AttributeChecker::visit (AST::TupleStruct &)\n {}\n \n void\n-AttributeChecker::visit (AST::EnumItem &item)\n+AttributeChecker::visit (AST::EnumItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::EnumItemTuple &item)\n+AttributeChecker::visit (AST::EnumItemTuple &)\n {}\n \n void\n-AttributeChecker::visit (AST::EnumItemStruct &item)\n+AttributeChecker::visit (AST::EnumItemStruct &)\n {}\n \n void\n-AttributeChecker::visit (AST::EnumItemDiscriminant &item)\n+AttributeChecker::visit (AST::EnumItemDiscriminant &)\n {}\n \n void\n-AttributeChecker::visit (AST::Enum &enum_item)\n+AttributeChecker::visit (AST::Enum &)\n {}\n \n void\n-AttributeChecker::visit (AST::Union &union_item)\n+AttributeChecker::visit (AST::Union &)\n {}\n \n void\n-AttributeChecker::visit (AST::ConstantItem &const_item)\n+AttributeChecker::visit (AST::ConstantItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::StaticItem &static_item)\n+AttributeChecker::visit (AST::StaticItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitItemFunc &item)\n+AttributeChecker::visit (AST::TraitItemFunc &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitItemMethod &item)\n+AttributeChecker::visit (AST::TraitItemMethod &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitItemConst &item)\n+AttributeChecker::visit (AST::TraitItemConst &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitItemType &item)\n+AttributeChecker::visit (AST::TraitItemType &)\n {}\n \n void\n-AttributeChecker::visit (AST::Trait &trait)\n+AttributeChecker::visit (AST::Trait &)\n {}\n \n void\n-AttributeChecker::visit (AST::InherentImpl &impl)\n+AttributeChecker::visit (AST::InherentImpl &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitImpl &impl)\n+AttributeChecker::visit (AST::TraitImpl &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExternalStaticItem &item)\n+AttributeChecker::visit (AST::ExternalStaticItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExternalFunctionItem &item)\n+AttributeChecker::visit (AST::ExternalFunctionItem &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExternBlock &block)\n+AttributeChecker::visit (AST::ExternBlock &)\n {}\n \n // rust-macro.h\n void\n-AttributeChecker::visit (AST::MacroMatchFragment &match)\n+AttributeChecker::visit (AST::MacroMatchFragment &)\n {}\n \n void\n-AttributeChecker::visit (AST::MacroMatchRepetition &match)\n+AttributeChecker::visit (AST::MacroMatchRepetition &)\n {}\n \n void\n-AttributeChecker::visit (AST::MacroMatcher &matcher)\n+AttributeChecker::visit (AST::MacroMatcher &)\n {}\n \n void\n-AttributeChecker::visit (AST::MacroRulesDefinition &rules_def)\n+AttributeChecker::visit (AST::MacroRulesDefinition &)\n {}\n \n void\n-AttributeChecker::visit (AST::MacroInvocation &macro_invoc)\n+AttributeChecker::visit (AST::MacroInvocation &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaItemPath &meta_item)\n+AttributeChecker::visit (AST::MetaItemPath &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaItemSeq &meta_item)\n+AttributeChecker::visit (AST::MetaItemSeq &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaWord &meta_item)\n+AttributeChecker::visit (AST::MetaWord &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaNameValueStr &meta_item)\n+AttributeChecker::visit (AST::MetaNameValueStr &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaListPaths &meta_item)\n+AttributeChecker::visit (AST::MetaListPaths &)\n {}\n \n void\n-AttributeChecker::visit (AST::MetaListNameValueStr &meta_item)\n+AttributeChecker::visit (AST::MetaListNameValueStr &)\n {}\n \n // rust-pattern.h\n void\n-AttributeChecker::visit (AST::LiteralPattern &pattern)\n+AttributeChecker::visit (AST::LiteralPattern &)\n {}\n \n void\n-AttributeChecker::visit (AST::IdentifierPattern &pattern)\n+AttributeChecker::visit (AST::IdentifierPattern &)\n {}\n \n void\n-AttributeChecker::visit (AST::WildcardPattern &pattern)\n+AttributeChecker::visit (AST::WildcardPattern &)\n {}\n \n-// void AttributeChecker::visit(RangePatternBound& bound){}\n+// void AttributeChecker::visit(RangePatternBound& ){}\n \n void\n-AttributeChecker::visit (AST::RangePatternBoundLiteral &bound)\n+AttributeChecker::visit (AST::RangePatternBoundLiteral &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangePatternBoundPath &bound)\n+AttributeChecker::visit (AST::RangePatternBoundPath &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangePatternBoundQualPath &bound)\n+AttributeChecker::visit (AST::RangePatternBoundQualPath &)\n {}\n \n void\n-AttributeChecker::visit (AST::RangePattern &pattern)\n+AttributeChecker::visit (AST::RangePattern &)\n {}\n \n void\n-AttributeChecker::visit (AST::ReferencePattern &pattern)\n+AttributeChecker::visit (AST::ReferencePattern &)\n {}\n \n-// void AttributeChecker::visit(StructPatternField& field){}\n+// void AttributeChecker::visit(StructPatternField& ){}\n \n void\n-AttributeChecker::visit (AST::StructPatternFieldTuplePat &field)\n+AttributeChecker::visit (AST::StructPatternFieldTuplePat &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructPatternFieldIdentPat &field)\n+AttributeChecker::visit (AST::StructPatternFieldIdentPat &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructPatternFieldIdent &field)\n+AttributeChecker::visit (AST::StructPatternFieldIdent &)\n {}\n \n void\n-AttributeChecker::visit (AST::StructPattern &pattern)\n+AttributeChecker::visit (AST::StructPattern &)\n {}\n \n-// void AttributeChecker::visit(TupleStructItems& tuple_items){}\n+// void AttributeChecker::visit(TupleStructItems& ){}\n \n void\n-AttributeChecker::visit (AST::TupleStructItemsNoRange &tuple_items)\n+AttributeChecker::visit (AST::TupleStructItemsNoRange &)\n {}\n \n void\n-AttributeChecker::visit (AST::TupleStructItemsRange &tuple_items)\n+AttributeChecker::visit (AST::TupleStructItemsRange &)\n {}\n \n void\n-AttributeChecker::visit (AST::TupleStructPattern &pattern)\n+AttributeChecker::visit (AST::TupleStructPattern &)\n {}\n \n-// void AttributeChecker::visit(TuplePatternItems& tuple_items){}\n+// void AttributeChecker::visit(TuplePatternItems& ){}\n \n void\n-AttributeChecker::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+AttributeChecker::visit (AST::TuplePatternItemsMultiple &)\n {}\n \n void\n-AttributeChecker::visit (AST::TuplePatternItemsRanged &tuple_items)\n+AttributeChecker::visit (AST::TuplePatternItemsRanged &)\n {}\n \n void\n-AttributeChecker::visit (AST::TuplePattern &pattern)\n+AttributeChecker::visit (AST::TuplePattern &)\n {}\n \n void\n-AttributeChecker::visit (AST::GroupedPattern &pattern)\n+AttributeChecker::visit (AST::GroupedPattern &)\n {}\n \n void\n-AttributeChecker::visit (AST::SlicePattern &pattern)\n+AttributeChecker::visit (AST::SlicePattern &)\n {}\n \n // rust-stmt.h\n void\n-AttributeChecker::visit (AST::EmptyStmt &stmt)\n+AttributeChecker::visit (AST::EmptyStmt &)\n {}\n \n void\n-AttributeChecker::visit (AST::LetStmt &stmt)\n+AttributeChecker::visit (AST::LetStmt &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExprStmtWithoutBlock &stmt)\n+AttributeChecker::visit (AST::ExprStmtWithoutBlock &)\n {}\n \n void\n-AttributeChecker::visit (AST::ExprStmtWithBlock &stmt)\n+AttributeChecker::visit (AST::ExprStmtWithBlock &)\n {}\n \n // rust-type.h\n void\n-AttributeChecker::visit (AST::TraitBound &bound)\n+AttributeChecker::visit (AST::TraitBound &)\n {}\n \n void\n-AttributeChecker::visit (AST::ImplTraitType &type)\n+AttributeChecker::visit (AST::ImplTraitType &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitObjectType &type)\n+AttributeChecker::visit (AST::TraitObjectType &)\n {}\n \n void\n-AttributeChecker::visit (AST::ParenthesisedType &type)\n+AttributeChecker::visit (AST::ParenthesisedType &)\n {}\n \n void\n-AttributeChecker::visit (AST::ImplTraitTypeOneBound &type)\n+AttributeChecker::visit (AST::ImplTraitTypeOneBound &)\n {}\n \n void\n-AttributeChecker::visit (AST::TraitObjectTypeOneBound &type)\n+AttributeChecker::visit (AST::TraitObjectTypeOneBound &)\n {}\n \n void\n-AttributeChecker::visit (AST::TupleType &type)\n+AttributeChecker::visit (AST::TupleType &)\n {}\n \n void\n-AttributeChecker::visit (AST::NeverType &type)\n+AttributeChecker::visit (AST::NeverType &)\n {}\n \n void\n-AttributeChecker::visit (AST::RawPointerType &type)\n+AttributeChecker::visit (AST::RawPointerType &)\n {}\n \n void\n-AttributeChecker::visit (AST::ReferenceType &type)\n+AttributeChecker::visit (AST::ReferenceType &)\n {}\n \n void\n-AttributeChecker::visit (AST::ArrayType &type)\n+AttributeChecker::visit (AST::ArrayType &)\n {}\n \n void\n-AttributeChecker::visit (AST::SliceType &type)\n+AttributeChecker::visit (AST::SliceType &)\n {}\n \n void\n-AttributeChecker::visit (AST::InferredType &type)\n+AttributeChecker::visit (AST::InferredType &)\n {}\n \n void\n-AttributeChecker::visit (AST::BareFunctionType &type)\n+AttributeChecker::visit (AST::BareFunctionType &)\n {}\n \n } // namespace Analysis"}]}