{"sha": "84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlMGJjYjhjNWJhOTdlYTBiMmMwNzU1OWY1YzI5NTcwNjlkZTdlNQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T20:58:13Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T20:58:13Z"}, "message": "[multiple changes]\n\n2005-04-25  Jeroen Frijters  <jeroen@frijters.net>\n\n\t* java/awt/GraphicsEnvironment.java\n\t(localGraphicsEnvironment): New field.\n\t(getLocalGraphicsEnvironment): Added support for java.awt.graphicsenv\n\tproperty.\n\t(isHeadless): Added support for java.awt.headless property.\n\t(isHeadlessInstance): Call headless().\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java\n\t(getDisplayMode): Added. Returns the current display mode.\n\t(isFullScreenSupported): Added.\n\t* java/awt/GraphicsDevice.java\n\t(setFullScreenWindow): Implemented a primitive fullscreen mode.\n\tThis resizes and relocates the fullscreen window so that it uses\n\tthe whole screen. This is not a fully accelerated fullscreen\n\texclusive mode.\n\nFrom-SVN: r98740", "tree": {"sha": "47bf146f4f42a0c5e1d493a32e405cf8e3712fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47bf146f4f42a0c5e1d493a32e405cf8e3712fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/comments", "author": null, "committer": null, "parents": [{"sha": "4b30c6bda06ac549212f96617c4c3e171e56876a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b30c6bda06ac549212f96617c4c3e171e56876a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b30c6bda06ac549212f96617c4c3e171e56876a"}], "stats": {"total": 142, "additions": 122, "deletions": 20}, "files": [{"sha": "ade77c871f4c5d5ba647a94d96a13c8cb12d991e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "patch": "@@ -1,3 +1,23 @@\n+2005-04-25  Jeroen Frijters  <jeroen@frijters.net>\n+\n+\t* java/awt/GraphicsEnvironment.java\n+\t(localGraphicsEnvironment): New field.\n+\t(getLocalGraphicsEnvironment): Added support for java.awt.graphicsenv\n+\tproperty.\n+\t(isHeadless): Added support for java.awt.headless property.\n+\t(isHeadlessInstance): Call headless().\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java\n+\t(getDisplayMode): Added. Returns the current display mode.\n+\t(isFullScreenSupported): Added.\n+\t* java/awt/GraphicsDevice.java\n+\t(setFullScreenWindow): Implemented a primitive fullscreen mode.\n+\tThis resizes and relocates the fullscreen window so that it uses\n+\tthe whole screen. This is not a fully accelerated fullscreen\n+\texclusive mode.\n+\n 2005-04-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/lang/Runtime.java,"}, {"sha": "c74fb880f99f2f33216a8afbf69d0bc575fff048", "filename": "libjava/gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkScreenGraphicsDevice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkScreenGraphicsDevice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkScreenGraphicsDevice.java?ref=84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "patch": "@@ -38,6 +38,8 @@\n \n package gnu.java.awt.peer.gtk;\n \n+import java.awt.Dimension;\n+import java.awt.DisplayMode;\n import java.awt.GraphicsConfiguration;\n import java.awt.GraphicsDevice;\n \n@@ -79,4 +81,35 @@ public GraphicsConfiguration getDefaultConfiguration ()\n     // FIXME: query X for default configuration\n     return new GdkGraphicsConfiguration(this);\n   }\n+\n+\n+  /**\n+   * Returns the current display mode of this device, or null if unknown.\n+   *\n+   * @return the current display mode\n+   * @see #setDisplayMode(DisplayMode)\n+   * @see #getDisplayModes()\n+   * @since 1.4\n+   */\n+  public DisplayMode getDisplayMode()\n+  {\n+    // determine display mode\n+    Dimension dim = getToolkit().getScreenSize();\n+    DisplayMode mode = new DisplayMode(dim.width, dim.height, 0,\n+\t\t\t\t       DisplayMode.REFRESH_RATE_UNKNOWN);\n+    return mode;\n+  }\n+\n+  /**\n+   * This device does not yet support fullscreen exclusive mode, so this\n+   * returns <code>false</code>.\n+   *\n+   * @return <code>false</code>\n+   * @since 1.4\n+   */\n+  public boolean isFullScreenSupported()\n+  {\n+    return false;\n+  }\n+\n }"}, {"sha": "55a80f23e622ecf2c92b9b690485a83e9464483d", "filename": "libjava/java/awt/GraphicsDevice.java", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fjava%2Fawt%2FGraphicsDevice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fjava%2Fawt%2FGraphicsDevice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphicsDevice.java?ref=84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "patch": "@@ -64,6 +64,12 @@\n   /** The current full-screen window, or null if there is none. */\n   private Window full_screen;\n \n+  /**\n+   * The bounds of the fullscreen window before it has been switched to full\n+   * screen.\n+   */\n+  private Rectangle fullScreenOldBounds;\n+\n   /** The current display mode, or null if unknown. */\n   private DisplayMode mode;\n \n@@ -151,9 +157,9 @@ public boolean isFullScreenSupported()\n    * </ul><br>\n    * If <code>isFullScreenSupported()</code> returns false, full-screen\n    * exclusive mode is simulated by resizing the window to the size of the\n-   * screen and positioning it at (0,0).\n-   *\n-   * XXX Not yet implemented in Classpath.\n+   * screen and positioning it at (0,0). This is also what this method does.\n+   * If a device supports real fullscreen mode then it should override this\n+   * method as well as #isFullScreenSupported and #getFullScreenWindow.\n    *\n    * @param w the window to toggle\n    * @see #isFullScreenSupported()\n@@ -164,11 +170,24 @@ public boolean isFullScreenSupported()\n    */\n   public synchronized void setFullScreenWindow(Window w)\n   {\n+    // Restore the previous window to normal mode and release the reference.\n     if (full_screen != null)\n-      ; // XXX Restore the previous window to normal mode.\n-    full_screen = w;\n-    // XXX If w != null, make it full-screen.\n-    throw new Error(\"not implemented\");\n+      {\n+\tfull_screen.setBounds(fullScreenOldBounds);\n+      }\n+\n+    full_screen = null;\n+\n+    // If w != null, make it full-screen.\n+    if (w != null)\n+      {\n+\tfullScreenOldBounds = w.getBounds();\n+\tfull_screen = w;\n+\tDisplayMode dMode = getDisplayMode();\n+\tfull_screen.setBounds(0, 0, dMode.getWidth(), dMode.getHeight());\n+\tfull_screen.requestFocus();\n+\tfull_screen.setLocationRelativeTo(null);\n+      }\n   }\n \n   /**"}, {"sha": "f93e0f97e255e85e93b2e357d8017773edb7586e", "filename": "libjava/java/awt/GraphicsEnvironment.java", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fjava%2Fawt%2FGraphicsEnvironment.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5/libjava%2Fjava%2Fawt%2FGraphicsEnvironment.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphicsEnvironment.java?ref=84e0bcb8c5ba97ea0b2c07559f5c2957069de7e5", "patch": "@@ -1,5 +1,5 @@\n /* GraphicsEnvironment.java -- information about the graphics environment\n-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,7 +39,7 @@\n package java.awt;\n \n import gnu.java.awt.ClasspathToolkit;\n-\n+import gnu.classpath.SystemProperties;\n import java.awt.image.BufferedImage;\n import java.util.Locale;\n \n@@ -56,6 +56,8 @@\n  */\n public abstract class GraphicsEnvironment\n {\n+  private static GraphicsEnvironment localGraphicsEnvironment;\n+\n   /**\n    * The environment must be obtained from a factory or query method, hence\n    * this constructor is protected.\n@@ -65,16 +67,43 @@ protected GraphicsEnvironment()\n   }\n \n   /**\n-   * Returns the local graphics environment.\n+   * Returns the local graphics environment. If the java.awt.graphicsenv\n+   * system property is set, it instantiates the specified class,\n+   * otherwise it assume that the awt toolkit is a ClasspathToolkit\n+   * and delegates to it to create the instance.\n    *\n-   * XXX Not implemented in Classpath yet.\n    * @return the local environment\n    */\n   public static GraphicsEnvironment getLocalGraphicsEnvironment()\n   {\n-    ClasspathToolkit tk;\n-    tk = ((ClasspathToolkit) Toolkit.getDefaultToolkit ());\n-    return tk.getLocalGraphicsEnvironment ();\n+    if (localGraphicsEnvironment != null)\n+      return localGraphicsEnvironment;\n+\n+    String graphicsenv = SystemProperties.getProperty(\"java.awt.graphicsenv\",\n+                                                      null);\n+    if (graphicsenv != null)\n+      {\n+        try\n+          {\n+            // We intentionally use the bootstrap class loader.\n+            localGraphicsEnvironment = (GraphicsEnvironment)\n+                Class.forName(graphicsenv).newInstance();\n+            return localGraphicsEnvironment;\n+          }\n+        catch (Exception x)\n+          {\n+            throw (InternalError)\n+                new InternalError(\"Unable to instantiate java.awt.graphicsenv\")\n+                    .initCause(x);\n+          }\n+      }\n+    else\n+      {\n+        ClasspathToolkit tk;\n+        tk = ((ClasspathToolkit) Toolkit.getDefaultToolkit());\n+        localGraphicsEnvironment = tk.getLocalGraphicsEnvironment();\n+        return localGraphicsEnvironment;\n+      }\n   }\n \n   /**\n@@ -83,32 +112,33 @@ public static GraphicsEnvironment getLocalGraphicsEnvironment()\n    * Windows Toolkit (java.awt) throw a {@link HeadlessException} if this\n    * returns true.\n    *\n-   * XXX For now, Classpath assumes that it is never headless.\n+   * This method returns true if the java.awt.headless property is set\n+   * to \"true\".\n    *\n    * @return true if the environment is headless, meaning that graphics are\n    *         unsupported\n    * @since 1.4\n    */\n   public static boolean isHeadless()\n   {\n-    // XXX Should be: getLocalGraphicsEnvironment().isHeadlessInstance();\n-    return false;\n+    String headless = SystemProperties.getProperty(\"java.awt.headless\", null);\n+    return \"true\".equalsIgnoreCase(headless);\n   }\n \n   /**\n    * Check if the given environment is headless, meaning that it does not\n    * support a display, keyboard, or mouse. Many methods in the Abstract\n    * Windows Toolkit (java.awt) throw a {@link HeadlessException} if this\n-   * returns true. This default implementation returns false, so subclasses\n-   * need only override it if they are headless.\n+   * returns true. This default implementation returns isHeadless(), so\n+   * subclasses need only override it if they differ.\n    *\n    * @return true if the environment is headless, meaning that graphics are\n    *         unsupported\n    * @since 1.4\n    */\n   public boolean isHeadlessInstance()\n   {\n-    return false;\n+    return isHeadless();\n   }\n \n   /**"}]}