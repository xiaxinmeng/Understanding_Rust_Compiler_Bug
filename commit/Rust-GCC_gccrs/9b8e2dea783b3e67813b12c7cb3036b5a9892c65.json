{"sha": "9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4ZTJkZWE3ODNiM2U2NzgxM2IxMmM3Y2IzMDM2YjVhOTg5MmM2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T15:51:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T17:43:36Z"}, "message": "libstdc++: P1976R2 Fixed-size span construction from dynamic range\n\nThis includes fixes for first, last, as_bytes and as_writable_bytes\nwhich were missing from the paper.\n\n\t* include/std/span (__cpp_lib_span): Update value.\n\t(span(It, size_type), span(It, End)): Make conditionally explicit. Add\n\tassertion.\n\t(span(R&&), span(const span<OType, OExtent>&)): Likewise and relax\n\tconstraints.\n\t(span::first<Count>(), span::last<Count>()): Use explicit type in\n\treturn statement.\n\t(as_bytes, as_writable_bytes): Likewise.\n\t* include/std/version (__cpp_lib_span): Update value.\n\t* testsuite/23_containers/span/1.cc: Check new value.\n\t* testsuite/23_containers/span/2.cc: Check new value.\n\t* testsuite/23_containers/span/explicit.cc: New test.", "tree": {"sha": "47744e82b548bf1f4bcc08509b58ce03a097c0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47744e82b548bf1f4bcc08509b58ce03a097c0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c9e372372ee78283a21651313fce965d22274d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c9e372372ee78283a21651313fce965d22274d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c9e372372ee78283a21651313fce965d22274d"}], "stats": {"total": 138, "additions": 116, "deletions": 22}, "files": [{"sha": "6efae7271b2d512cbf23d3d7dd2981031f5c77b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -1,5 +1,19 @@\n 2020-02-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP1976R2 Fixed-size span construction from dynamic range\n+\t* include/std/span (__cpp_lib_span): Update value.\n+\t(span(It, size_type), span(It, End)): Make conditionally explicit. Add\n+\tassertion.\n+\t(span(R&&), span(const span<OType, OExtent>&)): Likewise and relax\n+\tconstraints.\n+\t(span::first<Count>(), span::last<Count>()): Use explicit type in\n+\treturn statement.\n+\t(as_bytes, as_writable_bytes): Likewise.\n+\t* include/std/version (__cpp_lib_span): Update value.\n+\t* testsuite/23_containers/span/1.cc: Check new value.\n+\t* testsuite/23_containers/span/2.cc: Check new value.\n+\t* testsuite/23_containers/span/explicit.cc: New test.\n+\n \t* include/std/span (span::__is_compatible_array): Simplify alias\n \ttemplate by using requires-clause.\n \t(span::__is_compatible_ref): New alias template for constraining"}, {"sha": "a8c69796e5e0baef5946da74e4dcb5d83cb0feee", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -48,7 +48,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#define __cpp_lib_span 201902L\n+#define __cpp_lib_span 202002L\n \n   inline constexpr size_t dynamic_extent = static_cast<size_t>(-1);\n \n@@ -158,23 +158,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<contiguous_iterator _It>\n \trequires __is_compatible_ref<iter_reference_t<_It>>::value\n-\tconstexpr\n+\tconstexpr explicit(extent != dynamic_extent)\n \tspan(_It __first, size_type __count)\n \tnoexcept\n \t: _M_extent(__count), _M_ptr(std::to_address(__first))\n-\t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n+\t{\n+\t  if constexpr (_Extent != dynamic_extent)\n+\t    {\n+\t      __glibcxx_assert(__count == _Extent);\n+\t    }\n+\t}\n \n       template<contiguous_iterator _It, sized_sentinel_for<_It> _End>\n \trequires __is_compatible_ref<iter_reference_t<_It>>::value\n \t  && (!is_convertible_v<_End, size_type>)\n-\tconstexpr\n+\tconstexpr explicit(extent != dynamic_extent)\n \tspan(_It __first, _End __last)\n \tnoexcept(noexcept(__last - __first))\n \t: _M_extent(static_cast<size_type>(__last - __first)),\n \t  _M_ptr(std::to_address(__first))\n \t{\n-\t  if (_Extent != dynamic_extent)\n-\t    __glibcxx_assert((__last - __first) == _Extent);\n+\t  if constexpr (_Extent != dynamic_extent)\n+\t    {\n+\t      __glibcxx_assert((__last - __first) == _Extent);\n+\t    }\n \t}\n \n       template<typename _Tp, size_t _ArrayExtent>\n@@ -199,30 +206,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Range>\n-\trequires (_Extent == dynamic_extent)\n-\t  && ranges::contiguous_range<_Range> && ranges::sized_range<_Range>\n+\trequires ranges::contiguous_range<_Range> && ranges::sized_range<_Range>\n \t  && (ranges::safe_range<_Range> || is_const_v<element_type>)\n \t  && (!__detail::__is_std_span<remove_cvref_t<_Range>>::value)\n \t  && (!__detail::__is_std_array<remove_cvref_t<_Range>>::value)\n \t  && (!is_array_v<remove_cvref_t<_Range>>)\n \t  && __is_compatible_ref<ranges::range_reference_t<_Range>>::value\n-\tconstexpr\n+\tconstexpr explicit(extent != dynamic_extent)\n \tspan(_Range&& __range)\n \tnoexcept(noexcept(ranges::data(__range))\n \t\t  && noexcept(ranges::size(__range)))\n \t: span(ranges::data(__range), ranges::size(__range))\n-\t{ }\n+\t{\n+\t  if constexpr (extent != dynamic_extent)\n+\t    {\n+\t      __glibcxx_assert(ranges::size(__range) == extent);\n+\t    }\n+\t}\n \n       constexpr\n       span(const span&) noexcept = default;\n \n       template<typename _OType, size_t _OExtent>\n-\trequires (_Extent == dynamic_extent || _Extent == _OExtent)\n+\trequires (_Extent == dynamic_extent || _OExtent == dynamic_extent\n+\t\t  || _Extent == _OExtent)\n \t  && (__is_array_convertible<_Type, _OType>::value)\n \tconstexpr\n+\texplicit(extent != dynamic_extent && _OExtent == dynamic_extent)\n \tspan(const span<_OType, _OExtent>& __s) noexcept\n \t: _M_extent(__s.size()), _M_ptr(__s.data())\n-\t{ }\n+\t{\n+\t  if constexpr (extent != dynamic_extent)\n+\t    {\n+\t      __glibcxx_assert(__s.size() == extent);\n+\t    }\n+\t}\n \n       ~span() noexcept = default;\n \n@@ -317,7 +335,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __glibcxx_assert(_Count <= size());\n \t  else\n \t    static_assert(_Count <= extent);\n-\t  return { this->data(), _Count };\n+\t  using _Sp = span<element_type, _Count>;\n+\t  return _Sp{ this->data(), _Count };\n \t}\n \n       constexpr span<element_type, dynamic_extent>\n@@ -335,7 +354,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __glibcxx_assert(_Count <= size());\n \t  else\n \t    static_assert(_Count <= extent);\n-\t  return { this->data() + (this->size() - _Count), _Count };\n+\t  using _Sp = span<element_type, _Count>;\n+\t  return _Sp{ this->data() + (this->size() - _Count), _Count };\n \t}\n \n       constexpr span<element_type, dynamic_extent>\n@@ -351,12 +371,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t-> span<element_type, _S_subspan_extent<_Offset, _Count>()>\n \t{\n \t  if constexpr (_Extent == dynamic_extent)\n-\t    __glibcxx_assert(_Offset <= size());\n+\t    {\n+\t      __glibcxx_assert(_Offset <= size());\n+\t    }\n \t  else\n \t    static_assert(_Offset <= extent);\n \n+\t  using _Sp = span<element_type, _S_subspan_extent<_Offset, _Count>()>;\n+\n \t  if constexpr (_Count == dynamic_extent)\n-\t    return { this->data() + _Offset, this->size() - _Offset };\n+\t    return _Sp{ this->data() + _Offset, this->size() - _Offset };\n \t  else\n \t    {\n \t      if constexpr (_Extent == dynamic_extent)\n@@ -369,7 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  static_assert(_Count <= extent);\n \t\t  static_assert(_Count <= (extent - _Offset));\n \t\t}\n-\t      return { this->data() + _Offset, _Count };\n+\t      return _Sp{ this->data() + _Offset, _Count };\n \t    }\n \t}\n \n@@ -419,7 +443,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t? dynamic_extent : _Extent * sizeof(_Type)>\n     as_bytes(span<_Type, _Extent> __sp) noexcept\n     {\n-      return {reinterpret_cast<const byte*>(__sp.data()), __sp.size_bytes()};\n+      auto data = reinterpret_cast<const byte*>(__sp.data());\n+      auto size = __sp.size_bytes();\n+      constexpr auto extent = _Extent == dynamic_extent\n+\t? dynamic_extent : _Extent * sizeof(_Type);\n+      return span<const byte, extent>{data, size};\n     }\n \n   template<typename _Type, size_t _Extent>\n@@ -428,7 +456,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        ? dynamic_extent : _Extent * sizeof(_Type)>\n     as_writable_bytes(span<_Type, _Extent> __sp) noexcept\n     {\n-      return {reinterpret_cast<byte*>(__sp.data()), __sp.size_bytes()};\n+      auto data = reinterpret_cast<byte*>(__sp.data());\n+      auto size = __sp.size_bytes();\n+      constexpr auto extent = _Extent == dynamic_extent\n+\t? dynamic_extent : _Extent * sizeof(_Type);\n+      return span<byte, extent>{data, size};\n     }\n \n   namespace ranges"}, {"sha": "b36b999cb31333ba2471c1b22371f1171cebce8a", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -193,7 +193,7 @@\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_math_constants 201907L\n-#define __cpp_lib_span 201902L\n+#define __cpp_lib_span 202002L\n #if __cpp_impl_three_way_comparison >= 201907L && __cpp_lib_concepts\n # define __cpp_lib_three_way_comparison 201711L\n #endif"}, {"sha": "6c622f3e33d4921d973dc27e1da830cd418014d1", "filename": "libstdc++-v3/testsuite/23_containers/span/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F1.cc?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -22,6 +22,6 @@\n \n #ifndef __cpp_lib_span\n # error \"Feature-test macro for span missing in <span>\"\n-#elif __cpp_lib_span != 201902L\n+#elif __cpp_lib_span != 202002L\n # error \"Feature-test macro for span has wrong value in <span>\"\n #endif"}, {"sha": "9e91b5084e0099b048d22b23021737776b6e5c92", "filename": "libstdc++-v3/testsuite/23_containers/span/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2F2.cc?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -22,6 +22,6 @@\n \n #ifndef __cpp_lib_span\n # error \"Feature-test macro for span missing in <version>\"\n-#elif __cpp_lib_span != 201902L\n+#elif __cpp_lib_span != 202002L\n # error \"Feature-test macro for span has wrong value in <version>\"\n #endif"}, {"sha": "a763f8045af100b0a4cd42c826164d8b1028a0ed", "filename": "libstdc++-v3/testsuite/23_containers/span/explicit.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e2dea783b3e67813b12c7cb3036b5a9892c65/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc?ref=9b8e2dea783b3e67813b12c7cb3036b5a9892c65", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+\n+struct Range\n+{\n+  int* begin();\n+  int* end();\n+  unsigned size() const;\n+} r;\n+\n+auto first = std::begin(r), last = std::end(r);\n+\n+// span(It, size_type)\n+std::span<int> s1 = {first, 2};\n+std::span<int, 2> s2 = {first, 2}; // { dg-error \"could not convert\" }\n+\n+// span(It, End)\n+std::span<int> s3 = {first, last};\n+std::span<int, 2> s4 = {first, last}; // { dg-error \"could not convert\" }\n+\n+// span(R&&)\n+std::span<int> s5 = r;\n+std::span<int, 2> s6 = r; // { dg-error \"conversion from\" }\n+\n+// span(const span<OtherElement, OtherExtent>&)\n+std::span<const int> s7 = s5;\n+std::span<const int> s8 = s6;\n+std::span<const int, 1> s9 = s5.first(1);  // { dg-error \"conversion from\" }\n+std::span<const int, 1> s10 = s7.first(1); // { dg-error \"conversion from\" }"}]}