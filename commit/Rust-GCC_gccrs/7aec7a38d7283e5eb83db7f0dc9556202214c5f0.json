{"sha": "7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlYzdhMzhkNzI4M2U1ZWI4M2RiN2YwZGM5NTU2MjAyMjE0YzVmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-08-13T19:38:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-08-13T19:38:39Z"}, "message": "gimple.h (gimple_call_set_chain): Accept SSA variables.\n\n\t* gimple.h (gimple_call_set_chain): Accept SSA variables.\n\t* tree-ssa-pre.c (create_component_ref_by_pieces_1) <CALL_EXPR>:\n\tRematerialize the static chain, if any.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_call): Also copy the\n\tstatic chain.\n\nFrom-SVN: r139072", "tree": {"sha": "923c9ec3f6319b2aca98cf53c729f7eb221b396c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/923c9ec3f6319b2aca98cf53c729f7eb221b396c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/comments", "author": null, "committer": null, "parents": [{"sha": "70a1c2f9595135edb6224c2cc1006968f3416cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a1c2f9595135edb6224c2cc1006968f3416cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a1c2f9595135edb6224c2cc1006968f3416cb2"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "c6cf33c20f2696ffbc0a777e80b619d3521de600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "patch": "@@ -1,3 +1,11 @@\n+2008-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple.h (gimple_call_set_chain): Accept SSA variables.\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1) <CALL_EXPR>:\n+\tRematerialize the static chain, if any.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_call): Also copy the\n+\tstatic chain.\n+\n 2008-08-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* dwarf2out.c (dwarf_stack_op_name): Remove prototype."}, {"sha": "2f6af03117e605224955ac77cc5f8bd90463e432", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "patch": "@@ -2013,7 +2013,7 @@ gimple_call_set_chain (gimple gs, tree chain)\n   GIMPLE_CHECK (gs, GIMPLE_CALL);\n   gcc_assert (chain == NULL\n               || TREE_CODE (chain) == ADDR_EXPR\n-              || DECL_P (chain));\n+              || SSA_VAR_P (chain));\n   gimple_set_op (gs, 2, chain);\n }\n "}, {"sha": "9e8ff56495edc253017b35261e199de14b8de4bc", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "patch": "@@ -2436,7 +2436,7 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n     {\n     case CALL_EXPR:\n       {\n-\ttree folded;\n+\ttree folded, sc = currop->op1;\n \tunsigned int nargs = 0;\n \ttree *args = XNEWVEC (tree, VEC_length (vn_reference_op_s,\n \t\t\t\t\t\tref->operands) - 1);\n@@ -2453,6 +2453,14 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \t\t\t\t   : currop->op0,\n \t\t\t\t   nargs, args);\n \tfree (args);\n+\tif (sc)\n+\t  {\n+\t    pre_expr scexpr = get_or_alloc_expr_for (sc);\n+\t    sc = find_or_generate_expression (block, scexpr, stmts, domstmt);\n+\t    if (!sc)\n+\t      return NULL_TREE;\n+\t    CALL_EXPR_STATIC_CHAIN (folded) = sc;\n+\t  }\n \treturn folded;\n       }\n       break;"}, {"sha": "f502440b46fb7d44858acffd1d0533ad4ad905ad", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aec7a38d7283e5eb83db7f0dc9556202214c5f0/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7aec7a38d7283e5eb83db7f0dc9556202214c5f0", "patch": "@@ -686,12 +686,12 @@ copy_reference_ops_from_call (gimple call,\n   vn_reference_op_s temp;\n   unsigned i;\n \n-  /* Copy the call_expr opcode, type, function being called, and\n-     arguments.  */\n+  /* Copy the type, opcode, function being called and static chain.  */\n   memset (&temp, 0, sizeof (temp));\n   temp.type = gimple_call_return_type (call);\n   temp.opcode = CALL_EXPR;\n   temp.op0 = gimple_call_fn (call);\n+  temp.op1 = gimple_call_chain (call);\n   VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n \n   /* Copy the call arguments.  As they can be references as well,\n@@ -701,7 +701,6 @@ copy_reference_ops_from_call (gimple call,\n       tree callarg = gimple_call_arg (call, i);\n       copy_reference_ops_from_ref (callarg, result);\n     }\n-  return;\n }\n \n /* Create a vector of vn_reference_op_s structures from REF, a"}]}