{"sha": "65e78a74b676f392436fb36ee82fc0b5cc57f313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNzhhNzRiNjc2ZjM5MjQzNmZiMzZlZTgyZmMwYjVjYzU3ZjMxMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:54:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:54:10Z"}, "message": "[multiple changes]\n\n2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, par-ch3.adb: Minor comment update: aspect specification\n\ton subtype declarations.\n\t* exp_aggr.adb: Minor comment update.\n\n2011-09-27  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_util.adb (Safe_Prefixed_Reference): Remove always-false\n\ttest in the N_Explicit_Dereference case.  Fold double logical\n\tnegation in the special loop case and conditionalize it on\n\tVariable_Ref being true.\n\n2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Selected_Component): If the prefix is a\n\tsingle protected object and the selector is a discriminant or an\n\tentry family, this is a non-overloaded candidate interpretation,\n\tand possible primitive operations of the type must not be\n\texamined.\n\n2011-09-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taspri-posix-noaltstack.ads (Lock): Mark fields aliased.\n\nFrom-SVN: r179255", "tree": {"sha": "0a7b6c7112ac119f5cabc47d74ee65a7bd493ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a7b6c7112ac119f5cabc47d74ee65a7bd493ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e78a74b676f392436fb36ee82fc0b5cc57f313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e78a74b676f392436fb36ee82fc0b5cc57f313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e78a74b676f392436fb36ee82fc0b5cc57f313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e78a74b676f392436fb36ee82fc0b5cc57f313/comments", "author": null, "committer": null, "parents": [{"sha": "6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5add73cd2e49d770b4ff4255f06381e8cfd6cb"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "e0660c0f31c7f07924b07d64b87fe6a294912e63", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -1,3 +1,28 @@\n+2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, par-ch3.adb: Minor comment update: aspect specification\n+\ton subtype declarations.\n+\t* exp_aggr.adb: Minor comment update.\n+\n+2011-09-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Safe_Prefixed_Reference): Remove always-false\n+\ttest in the N_Explicit_Dereference case.  Fold double logical\n+\tnegation in the special loop case and conditionalize it on\n+\tVariable_Ref being true.\n+\n+2011-09-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): If the prefix is a\n+\tsingle protected object and the selector is a discriminant or an\n+\tentry family, this is a non-overloaded candidate interpretation,\n+\tand possible primitive operations of the type must not be\n+\texamined.\n+\n+2011-09-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taspri-posix-noaltstack.ads (Lock): Mark fields aliased.\n+\n 2011-09-27  Pascal Obry  <obry@adacore.com>\n \n \t* s-osinte-hpux.ads, s-osinte-aix.ads, s-osinte-solaris-posix.ads,"}, {"sha": "6cf3b16897215053fbf20bbc524b38003e256575", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -229,6 +229,11 @@ package body Exp_Aggr is\n    --  Packed_Array_Aggregate_Handled, we set this parameter to True, since\n    --  these are cases we handle in there.\n \n+   --  It would seem worthwhile to have a higher default value for Max_Others_\n+   --  replicate, but aggregates in the compiler make this impossible: the\n+   --  compiler bootstrap fails if Max_Others_Replicate is greater than 25.\n+   --  This is unexpected ???\n+\n    procedure Expand_Array_Aggregate (N : Node_Id);\n    --  This is the top-level routine to perform array aggregate expansion.\n    --  N is the N_Aggregate node to be expanded.\n@@ -4705,6 +4710,7 @@ package body Exp_Aggr is\n         and then Static_Elaboration_Desired (Current_Scope)\n       then\n          Convert_To_Positional (N, Max_Others_Replicate => 100);\n+\n       else\n          Convert_To_Positional (N);\n       end if;"}, {"sha": "753fea30bfacf8fbbc5294da61d422ab978996a6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -5912,30 +5912,22 @@ package body Exp_Util is\n          --  We do NOT exclude dereferences of access-to-constant types because\n          --  we handle them as constant view of variables.\n \n-         --  Exception is an access to an entity that is a constant or an\n-         --  in-parameter.\n-\n          elsif Nkind (Prefix (N)) = N_Explicit_Dereference\n            and then Variable_Ref\n          then\n-            declare\n-               DDT : constant Entity_Id :=\n-                       Designated_Type (Etype (Prefix (Prefix (N))));\n-            begin\n-               return Ekind_In (DDT, E_Constant, E_In_Parameter);\n-            end;\n+            return False;\n \n          --  The following test is the simplest way of solving a complex\n-         --  problem uncovered by BB08-010: Side effect on loop bound that\n+         --  problem uncovered by B808-010: Side effect on loop bound that\n          --  is a subcomponent of a global variable:\n \n          --    If a loop bound is a subcomponent of a global variable, a\n          --    modification of that variable within the loop may incorrectly\n          --    affect the execution of the loop.\n \n-         elsif not\n-           (Nkind (Parent (Parent (N))) /= N_Loop_Parameter_Specification\n-              or else not Within_In_Parameter (Prefix (N)))\n+         elsif Nkind (Parent (Parent (N))) = N_Loop_Parameter_Specification\n+           and then Within_In_Parameter (Prefix (N))\n+           and then Variable_Ref\n          then\n             return False;\n "}, {"sha": "d58bce1045159e63ac8b61b8ff9a41b33b58bdd9", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -951,7 +951,8 @@ package body Ch3 is\n    --------------------------------\n \n    --  SUBTYPE_DECLARATION ::=\n-   --    subtype DEFINING_IDENTIFIER is [NULL_EXCLUSION] SUBTYPE_INDICATION;\n+   --    subtype DEFINING_IDENTIFIER is [NULL_EXCLUSION] SUBTYPE_INDICATION\n+   --    {ASPECT_SPECIFICATIONS];\n \n    --  The caller has checked that the initial token is SUBTYPE\n "}, {"sha": "ac0e743af8f6e142a6eecdf1d91bbfba1011a8ff", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -79,8 +79,8 @@ package System.Task_Primitives is\n private\n \n    type Lock is record\n-      WO : System.OS_Interface.pthread_mutex_t;\n-      RW : System.OS_Interface.pthread_rwlock_t;\n+      WO : aliased System.OS_Interface.pthread_mutex_t;\n+      RW : aliased System.OS_Interface.pthread_rwlock_t;\n    end record;\n \n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;"}, {"sha": "742e1c9afae81e7b103279eea30fddbc10db06f7", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -4125,6 +4125,11 @@ package body Sem_Ch4 is\n                   Set_Entity_With_Style_Check (Sel, Comp);\n                   Generate_Reference (Comp, Sel);\n \n+                  --  The selector is not overloadable, so we have a candidate\n+                  --  interpretation.\n+\n+                  Has_Candidate := True;\n+\n                else\n                   goto Next_Comp;\n                end if;"}, {"sha": "3a03c04c7e65e86f9492de4e212fedbd61baa555", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e78a74b676f392436fb36ee82fc0b5cc57f313/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=65e78a74b676f392436fb36ee82fc0b5cc57f313", "patch": "@@ -2191,7 +2191,8 @@ package Sinfo is\n       --------------------------------\n \n       --  SUBTYPE_DECLARATION ::=\n-      --    subtype DEFINING_IDENTIFIER is [NULL_EXCLUSION] SUBTYPE_INDICATION;\n+      --    subtype DEFINING_IDENTIFIER is [NULL_EXCLUSION] SUBTYPE_INDICATION\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  The subtype indication field is set to Empty for subtypes\n       --  declared in package Standard (Positive, Natural)."}]}