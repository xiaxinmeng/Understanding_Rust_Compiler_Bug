{"sha": "c46f1a1791b3ec3a58780a4b882ecf19f047869a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2ZjFhMTc5MWIzZWMzYTU4NzgwYTRiODgyZWNmMTlmMDQ3ODY5YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-04-12T15:29:03Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-04-12T15:29:03Z"}, "message": "PR c++/87603 - constexpr functions are no longer noexcept.\n\n\t* constexpr.c (is_sub_constant_expr): Remove unused function.\n\t* cp-tree.h (is_sub_constant_expr): Remove declaration.\n\t* except.c (check_noexcept_r): Don't consider a call to a constexpr\n\tfunction noexcept.\n\n\t* g++.dg/cpp0x/constexpr-noexcept.C: Adjust the expected result.\n\t* g++.dg/cpp0x/constexpr-noexcept3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-noexcept4.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-noexcept8.C: New test.\n\t* g++.dg/cpp0x/inh-ctor32.C: Remove dg-message.\n\t* g++.dg/cpp1y/constexpr-noexcept1.C: New test.\n\nFrom-SVN: r270320", "tree": {"sha": "5ebfaf92e50457cb04fa46ccb246df340415737b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ebfaf92e50457cb04fa46ccb246df340415737b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c46f1a1791b3ec3a58780a4b882ecf19f047869a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46f1a1791b3ec3a58780a4b882ecf19f047869a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46f1a1791b3ec3a58780a4b882ecf19f047869a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46f1a1791b3ec3a58780a4b882ecf19f047869a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc3bae3dc2819726e3d3903937e65f4f8d4f2fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3bae3dc2819726e3d3903937e65f4f8d4f2fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3bae3dc2819726e3d3903937e65f4f8d4f2fd5"}], "stats": {"total": 97, "additions": 61, "deletions": 36}, "files": [{"sha": "8e63fdaac74b36fa048ef34f1230c17957496f1d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -3,6 +3,12 @@\n \t* except.c (build_noexcept_spec): Use build_converted_constant_bool_expr\n \tinstead of perform_implicit_conversion_flags.\n \n+\tPR c++/87603 - constexpr functions are no longer noexcept.\n+\t* constexpr.c (is_sub_constant_expr): Remove unused function.\n+\t* cp-tree.h (is_sub_constant_expr): Remove declaration.\n+\t* except.c (check_noexcept_r): Don't consider a call to a constexpr\n+\tfunction noexcept.\n+\n 2019-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/90035"}, {"sha": "9c13f0d5f320b7d8acca2a9199c3afa3c45efe4f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -5423,27 +5423,6 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n   return r;\n }\n \n-/* Returns true if T is a valid subexpression of a constant expression,\n-   even if it isn't itself a constant expression.  */\n-\n-bool\n-is_sub_constant_expr (tree t)\n-{\n-  bool non_constant_p = false;\n-  bool overflow_p = false;\n-  hash_map <tree, tree> map;\n-  HOST_WIDE_INT constexpr_ops_count = 0;\n-\n-  constexpr_ctx ctx\n-    = { NULL, &map, NULL, NULL, NULL, NULL, &constexpr_ops_count,\n-\ttrue, true, false };\n-\n-  instantiate_constexpr_fns (t);\n-  cxx_eval_constant_expression (&ctx, t, false, &non_constant_p,\n-\t\t\t\t&overflow_p);\n-  return !non_constant_p && !overflow_p;\n-}\n-\n /* If T represents a constant expression returns its reduced value.\n    Otherwise return error_mark_node.  If T is dependent, then\n    return NULL.  */"}, {"sha": "ff4ce068a83601bb083f4b3e848cea6569d48b0a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -7720,7 +7720,6 @@ extern tree fold_non_dependent_init\t\t(tree,\n \t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n \t\t\t\t\t\t bool = false);\n extern tree fold_simple\t\t\t\t(tree);\n-extern bool is_sub_constant_expr                (tree);\n extern bool reduced_constant_expression_p       (tree);\n extern bool is_instantiation_of_constexpr       (tree);\n extern bool var_in_constexpr_fn                 (tree);"}, {"sha": "afc261073d73dda30f7c63e69730997da575bd92", "filename": "gcc/cp/except.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -1128,11 +1128,14 @@ check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n \t      && (DECL_ARTIFICIAL (fn)\n \t\t  || nothrow_libfn_p (fn)))\n \t    return TREE_NOTHROW (fn) ? NULL_TREE : fn;\n-\t  /* A call to a constexpr function is noexcept if the call\n-\t     is a constant expression.  */\n-\t  if (DECL_DECLARED_CONSTEXPR_P (fn)\n-\t      && is_sub_constant_expr (t))\n-\t    return NULL_TREE;\n+\t  /* We used to treat a call to a constexpr function as noexcept if\n+\t     the call was a constant expression (CWG 1129).  This has changed\n+\t     in P0003 whereby noexcept has no special rule for constant\n+\t     expressions anymore.  Since the current behavior is important for\n+\t     certain library functionality, we treat this as a DR, therefore\n+\t     adjusting the behavior for C++11 and C++14.  Previously, we had\n+\t     to evaluate the noexcept-specifier's operand here, but that could\n+\t     cause instantiations that would fail.  */\n \t}\n       if (!TYPE_NOTHROW_P (type))\n \treturn fn;"}, {"sha": "fe8373e30603e8177b1c0d2d63ee8dc8578a5655", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -1,3 +1,13 @@\n+2019-04-12  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87603 - constexpr functions are no longer noexcept.\n+\t* g++.dg/cpp0x/constexpr-noexcept.C: Adjust the expected result.\n+\t* g++.dg/cpp0x/constexpr-noexcept3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-noexcept4.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-noexcept8.C: New test.\n+\t* g++.dg/cpp0x/inh-ctor32.C: Remove dg-message.\n+\t* g++.dg/cpp1y/constexpr-noexcept1.C: New test.\n+\n 2019-04-12  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/noexcept30.C: Tweak dg-error."}, {"sha": "035afd13d398cf16cb8f4bc51e2edfc36ced54da", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-noexcept.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -10,4 +10,7 @@ constexpr T value(T t) noexcept(is_funny<T>::value) { return t; } // Line 7\n \n constexpr bool ok = noexcept(value(42));\n \n-static_assert(ok, \"Assertion failure\");\n+// We used to treat a call to a constexpr function as noexcept if\n+// the call was a constant expression.  We no longer do since\n+// c++/87603.\n+static_assert(!ok, \"Assertion failure\");"}, {"sha": "5a43899b5fa0950794df5a28cbb0b39c871b96cd", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-noexcept3.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept3.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -2,6 +2,8 @@\n \n constexpr int f(int i) { return i; }\n #define SA(X) static_assert (X, #X)\n-SA(noexcept(f(42)));\n+/* We used to assert that the following *is* noexcept, but this has changed\n+   in c++/87603.  */\n+SA(!noexcept(f(42)));\n int j;\n SA(!noexcept(f(j)));"}, {"sha": "0446069107d7f702da3f3ceb226e021f2b2c4fa9", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-noexcept4.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept4.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -1,6 +1,7 @@\n // { dg-do compile { target c++11 } }\n-// A call is noexcept if it is a valid subexpression of a constant\n-// expression, even if it is not itself a constant expression.\n+// We used to treat a call to a constexpr function as noexcept if\n+// the call was a constant expression.  We no longer do since\n+// c++/87603.\n \n #define SA(X) static_assert(X,#X)\n \n@@ -9,6 +10,6 @@ constexpr const int* f(const int *p) { return p; }\n int main()\n {\n   constexpr int i = 42;\n-  SA(noexcept(*f(&i)));\n-  SA(noexcept(f(&i)));\n+  SA(!noexcept(*f(&i)));\n+  SA(!noexcept(f(&i)));\n }"}, {"sha": "7dca56ae23c720edf7ac21355735a5bed9674ba0", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-noexcept8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-noexcept8.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/87603\n+// { dg-do compile { target c++11 } }\n+\n+struct Y { };\n+\n+          bool operator<(Y a, Y b) { return false; }\n+constexpr bool operator>(Y a, Y b) { return false; }\n+\n+static_assert(!noexcept(Y{} > Y{}), \"\");\n+static_assert(!noexcept(Y{} < Y{}), \"\");"}, {"sha": "5ea2642e415d9a1416d9ddf3e034f308e9f2bd83", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor32.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor32.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -168,7 +168,7 @@ namespace derived_ctor {\n       };\n       struct bar : boo {\n \ttemplate <typename ...T>\n-\tconstexpr bar(T ... args) : boo(args...) {} // { dg-message \"sorry, unimplemented: passing arguments to ellipsis\" }\n+\tconstexpr bar(T ... args) : boo(args...) {}\n       };\n       void f() noexcept(noexcept(bar{0,1}));\n     }\n@@ -200,12 +200,12 @@ namespace derived_ctor {\n       };\n       struct bor : boo {\n \ttemplate <typename ...T>\n-\tconstexpr bor(T ... args) : boo(args...) {} // { dg-message \"sorry, unimplemented: passing arguments to ellipsis\" }\n+\tconstexpr bor(T ... args) : boo(args...) {}\n       };\n       struct bar : bor {\n \tusing bor::bor;\n       };\n-      void f() noexcept(noexcept(bar{0,1})); // { dg-message \"'constexpr' expansion\" }\n+      void f() noexcept(noexcept(bar{0,1}));\n     }\n \n     namespace no_constexpr_noninherited_ctor {"}, {"sha": "a74f24a3b30d128b28dd9de004c147afad46e97e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-noexcept1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-noexcept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f1a1791b3ec3a58780a4b882ecf19f047869a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-noexcept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-noexcept1.C?ref=c46f1a1791b3ec3a58780a4b882ecf19f047869a", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/87603\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T>\n+struct basic_string_view\n+{\n+  constexpr basic_string_view(T p) noexcept { (void) p.i; }\n+};\n+\n+struct X { } x;\n+\n+bool b = noexcept(basic_string_view<X>{x});"}]}