{"sha": "1943c2c1ad758b5fe93a09acf3083c55b836a747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk0M2MyYzFhZDc1OGI1ZmU5M2EwOWFjZjMwODNjNTViODM2YTc0Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-04T02:12:14Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-04T02:12:14Z"}, "message": "1750a.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n\n\t* 1750a.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n\t(ASM_OUTPUT_ASCII): Avoid signed/unsigned warning.\n\t* c4x.h (INIT_SECTION_FUNCTION): Add prototype.\n\t(ASM_FILE_START): Const-ify.\n\t(ASM_OUTPUT_BYTE_FLOAT, ASM_OUTPUT_SHORT_FLOAT): Fix format\n\tspecifier warning.\n\t* c4x.md: Don't use the 'U' integer suffix.\n\t* clipper.md (clipper_movstr): Delete declaration.\n\t* d30v-protos.h (d30v_move_2words): Const-ify.\n\t(debug_stack_info): Add prototype.\n\t* d30v.c: Include \"integrate.h\".\n\t(d30v_function_arg_boundary, d30v_function_arg,\n\td30v_function_arg_partial_nregs, d30v_function_arg_advance): Avoid\n\tsigned/unsigned warnings.\n\t(d30v_print_operand_memory_reference, d30v_move_2words):\n\tConst-ify.\n\t* d30v.h (REG_CLASS_FROM_LETTER): Use unsigned array subscript.\n\t* fr30.c (fr30_pass_by_reference, fr30_pass_by_value): Prototype.\n\t* fr30.md: Const-ify.\n\t* h8300.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n\t* i370.c (i370_label_scan, mvs_get_label): Make definition static.\n\t(mvs_get_label_page): Hide unused static function.\n\t* i860.c (current_function_original_name): Const-ify.\n\t* i860/sysv3.h (current_function_original_name): Likewise.\n\t* i860/sysv4.h (current_function_original_name): Likewise.\n\t* i960.md: Add default case in switches.  Remove unused variable.\n\t* i960/vx960-coff.h (MULTILIB_DEFAULTS): Undef before defining.\n\t* m32r.md: Const-ify.\n\t* m68hc11-protos.h (m68hc11_asm_file_start): Const-ify.\n\t* m68hc11.c: Include \"reload.h\".\n\t(static_chain_reg, print_options, m68hc11_asm_file_start):\n\tConst-ify.\n\t* m68hc11.md: Delete unused variable.  Const-ify.  Add parens\n\taround & in comparison.\n\t* mcore.h (TARGET_ASM_NAMED_SECTION): Undef before defining.\n\t* mn10200.c (shift_mode): Remove trailing comma.\n\t* mn10300-protos.h (output_tst): Const-ify.\n\t* mn10300.c (output_tst): Likewise.\n\t* pa/long_double.h (ASM_OUTPUT_LONG_DOUBLE): Fix format specifier\n\twarnings.\n\t* pa-protos.h (output_ascii): Use regular char *, not unsigned.\n\t* pa.c (output_ascii): Likewise.\n\t* pa/som.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n\t* pdp11.md (expand_unop): Delete declarations.\n\t* pj-protos.h (pj_output_addsi3): Const-ify.\n\t* pj.c (pj_output_push_int, pj_output_load, pj_output_inc,\n\tpj_output_cnv_op, mode_to_char, pj_output_varidx, pj_print_cond,\n\tunique_src_operand): Add prototypes.\n\t(pj_output_store_into_lval): Make definition static.\n\t(pj_function_incoming_arg): Don't use unary plus.\n\t(pj_output_addsi3): Const-ify.\n\t* romp.md (get_symref): Delete declarations.\n\t* v850-c.c (mark_current_function_as_interrupt): Don't return\n\tvalue from void function.\n\t* v850.c: Include \"integrate.h\".\n\t* v850.h (ASM_OUTPUT_LABELREF): Const-ify.\n\t* vax-protos.h (const_section): Add prototype.\n\nFrom-SVN: r46755", "tree": {"sha": "ef188b8913b20fe3ed8ab98dfb164f11cafa7d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef188b8913b20fe3ed8ab98dfb164f11cafa7d74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1943c2c1ad758b5fe93a09acf3083c55b836a747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1943c2c1ad758b5fe93a09acf3083c55b836a747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1943c2c1ad758b5fe93a09acf3083c55b836a747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1943c2c1ad758b5fe93a09acf3083c55b836a747/comments", "author": null, "committer": null, "parents": [{"sha": "a52706f2763cf68a7e15987d16fbfd59c6274065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52706f2763cf68a7e15987d16fbfd59c6274065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52706f2763cf68a7e15987d16fbfd59c6274065"}], "stats": {"total": 223, "additions": 164, "deletions": 59}, "files": [{"sha": "508e94a423425edacc03605eea185e65ed1d2575", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1,3 +1,63 @@\n+2001-11-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* 1750a.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n+\t(ASM_OUTPUT_ASCII): Avoid signed/unsigned warning.\n+\t* c4x.h (INIT_SECTION_FUNCTION): Add prototype.\n+\t(ASM_FILE_START): Const-ify.\n+\t(ASM_OUTPUT_BYTE_FLOAT, ASM_OUTPUT_SHORT_FLOAT): Fix format\n+\tspecifier warning.\n+\t* c4x.md: Don't use the 'U' integer suffix.\n+\t* clipper.md (clipper_movstr): Delete declaration.\n+\t* d30v-protos.h (d30v_move_2words): Const-ify.\n+\t(debug_stack_info): Add prototype.\n+\t* d30v.c: Include \"integrate.h\".\n+\t(d30v_function_arg_boundary, d30v_function_arg,\n+\td30v_function_arg_partial_nregs, d30v_function_arg_advance): Avoid\n+\tsigned/unsigned warnings.\n+\t(d30v_print_operand_memory_reference, d30v_move_2words):\n+\tConst-ify.\n+\t* d30v.h (REG_CLASS_FROM_LETTER): Use unsigned array subscript.\n+\t* fr30.c (fr30_pass_by_reference, fr30_pass_by_value): Prototype.\n+\t* fr30.md: Const-ify.\n+\t* h8300.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n+\t* i370.c (i370_label_scan, mvs_get_label): Make definition static.\n+\t(mvs_get_label_page): Hide unused static function.\n+\t* i860.c (current_function_original_name): Const-ify.\n+\t* i860/sysv3.h (current_function_original_name): Likewise.\n+\t* i860/sysv4.h (current_function_original_name): Likewise.\n+\t* i960.md: Add default case in switches.  Remove unused variable.\n+\t* i960/vx960-coff.h (MULTILIB_DEFAULTS): Undef before defining.\n+\t* m32r.md: Const-ify.\n+\t* m68hc11-protos.h (m68hc11_asm_file_start): Const-ify.\n+\t* m68hc11.c: Include \"reload.h\".\n+\t(static_chain_reg, print_options, m68hc11_asm_file_start):\n+\tConst-ify.\n+\t* m68hc11.md: Delete unused variable.  Const-ify.  Add parens\n+\taround & in comparison.\n+\t* mcore.h (TARGET_ASM_NAMED_SECTION): Undef before defining.\n+\t* mn10200.c (shift_mode): Remove trailing comma.\n+\t* mn10300-protos.h (output_tst): Const-ify.\n+\t* mn10300.c (output_tst): Likewise.\n+\t* pa/long_double.h (ASM_OUTPUT_LONG_DOUBLE): Fix format specifier\n+\twarnings.\n+\t* pa-protos.h (output_ascii): Use regular char *, not unsigned.\n+\t* pa.c (output_ascii): Likewise.\n+\t* pa/som.h (EXTRA_SECTION_FUNCTIONS): Add prototype.\n+\t* pdp11.md (expand_unop): Delete declarations.\n+\t* pj-protos.h (pj_output_addsi3): Const-ify.\n+\t* pj.c (pj_output_push_int, pj_output_load, pj_output_inc,\n+\tpj_output_cnv_op, mode_to_char, pj_output_varidx, pj_print_cond,\n+\tunique_src_operand): Add prototypes.\n+\t(pj_output_store_into_lval): Make definition static.\n+\t(pj_function_incoming_arg): Don't use unary plus.\n+\t(pj_output_addsi3): Const-ify.\n+\t* romp.md (get_symref): Delete declarations.\n+\t* v850-c.c (mark_current_function_as_interrupt): Don't return\n+\tvalue from void function.\n+\t* v850.c: Include \"integrate.h\".\n+\t* v850.h (ASM_OUTPUT_LABELREF): Const-ify.\n+\t* vax-protos.h (const_section): Add prototype.\n+\n 2001-11-03  Aldy Hernandez  <aldyh@redhat.com>\n \n         * machmode.def: Add documentation for the seventh argument in"}, {"sha": "e9e51e9f3827aeb666bc31cfa94e7a752442b25e", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -917,6 +917,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n #define EXTRA_SECTIONS  in_readonly_data\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\\\n+    extern void const_section PARAMS ((void));\t\t\t\\\n     void const_section()\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n \tfprintf(asm_out_file,\"\\tkonst\\n\");\t\t\t\\\n@@ -1105,7 +1106,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \tif (label_pending)\t\t\t\t\t\t\\\n \t   label_pending = 0;\t\t\t\t\t\t\\\n \tdatalbl[datalbl_ndx].size += LEN;\t\t\t\t\\\n-\tfor (i = 0; i < LEN; i++) {\t\t\t\t\t\\\n+\tfor (i = 0; i < (int) LEN; i++) {\t\t\t\t\\\n \t  if ((i % 15) == 0) {\t\t\t\t\t\t\\\n \t    if (i != 0)\t\t\t\t\t\t\t\\\n \t      fprintf(FILE,\"\\n\");\t\t\t\t\t\\"}, {"sha": "8b5025c536ead84c2896386abd6c7f71c081dcb0", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1984,6 +1984,7 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n #define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n+extern void init_section PARAMS ((void));\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n init_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n@@ -2096,8 +2097,8 @@ const_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.file\\t\");\t\t\t\t\\\n     if (TARGET_TI)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n-        char *p;\t\t\t\t\t\t\\\n-        char *after_dir = main_input_filename;\t\t\t\\\n+        const char *p;\t\t\t\t\t\t\\\n+        const char *after_dir = main_input_filename;\t\t\\\n \tfor (p = main_input_filename; *p; p++)\t\t\t\\\n \t  if (*p == '/')\t\t\t\t\t\\\n \t    after_dir = p + 1;\t\t\t\t\t\\\n@@ -2122,7 +2123,7 @@ const_section ()\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n     REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\", l, str);\\\n+      fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\", (int) l, str);\\\n     else\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\", l, str);\\\n   } while (0);\n@@ -2144,7 +2145,7 @@ const_section ()\t\t\t\t\t\t\t\\\n     l[1] = (l[0] << 8) | ((l[1] >> 24) & 0xff);\t\t\\\n     if (sizeof (int) == sizeof (long))\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\\t.word\\t0%08xh\\n\", \\\n-               l[0], str, l[1]);\t\t\t\t\\\n+               (int) l[0], str, (int) l[1]);\t\t\\\n     else\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\\t.word\\t0%08lxh\\n\", \\\n                l[0], str, l[1]);\t\t\t\t\\"}, {"sha": "c8aefa90adf1057b3141d99e6badba8be2cee9f5", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -5614,7 +5614,7 @@\n    (use (label_ref (match_operand 4 \"\" \"\")))]\n   \"\"\n   \"if (! TARGET_LOOP_UNSIGNED \n-       && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > (1U << 31))\n+       && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > ((unsigned) 1 << 31))\n      FAIL;\n    if (INTVAL (operands[3]) > 1 || ! TARGET_RPTB)\n      {"}, {"sha": "b6906fa5526bd801b04a6268432c65865b8eac75", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -555,7 +555,6 @@\n   \"\"\n   \"*\n {\n-  extern void clipper_movstr ();\n   clipper_movstr (operands);\n   return \\\"\\\";\n }\""}, {"sha": "8beaa7aea994f66b5a885ad7beea31929e523687", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -126,12 +126,13 @@ extern rtx d30v_legitimize_address\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t enum machine_mode, int));\n extern int d30v_mode_dependent_address_p PARAMS ((rtx));\n extern rtx d30v_emit_comparison\t\tPARAMS ((int, rtx, rtx, rtx));\n-extern char *d30v_move_2words\t\tPARAMS ((rtx *, rtx));\n+extern const char *d30v_move_2words\tPARAMS ((rtx *, rtx));\n extern int d30v_emit_cond_move\t\tPARAMS ((rtx, rtx, rtx, rtx));\n extern void d30v_machine_dependent_reorg PARAMS ((rtx));\n extern rtx d30v_return_addr\t\tPARAMS ((void));\n #endif\n extern void d30v_init_expanders\t\tPARAMS ((void));\n+extern void debug_stack_info\t\tPARAMS ((d30v_stack_t *));\n \n \f\n /* External variables referenced */"}, {"sha": "83b7e0ca988dada474a7460a066d34352491b6b5", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -38,6 +38,7 @@\n #include \"except.h\"\n #include \"function.h\"\n #include \"toplev.h\"\n+#include \"integrate.h\"\n #include \"ggc.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -1952,7 +1953,7 @@ d30v_function_arg_boundary (mode, type)\n {\n   int size = ((mode == BLKmode && type)\n \t      ? int_size_in_bytes (type)\n-\t      : GET_MODE_SIZE (mode));\n+\t      : (int) GET_MODE_SIZE (mode));\n \n   return (size > UNITS_PER_WORD) ? 2*UNITS_PER_WORD : UNITS_PER_WORD;\n }\n@@ -1997,7 +1998,7 @@ d30v_function_arg (cum, mode, type, named, incoming)\n {\n   int size = ((mode == BLKmode && type)\n \t      ? int_size_in_bytes (type)\n-\t      : GET_MODE_SIZE (mode));\n+\t      : (int) GET_MODE_SIZE (mode));\n   int adjust = (size > UNITS_PER_WORD && (*cum & 1) != 0);\n   rtx ret;\n \n@@ -2046,7 +2047,7 @@ d30v_function_arg_partial_nregs (cum, mode, type, named)\n {\n   int bytes = ((mode == BLKmode)\n \t       ? int_size_in_bytes (type)\n-\t       : GET_MODE_SIZE (mode));\n+\t       : (int) GET_MODE_SIZE (mode));\n   int words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n   int adjust = (bytes > UNITS_PER_WORD && (*cum & 1) != 0);\n   int arg_num = *cum + adjust;\n@@ -2109,7 +2110,7 @@ d30v_function_arg_advance (cum, mode, type, named)\n {\n   int bytes = ((mode == BLKmode)\n \t       ? int_size_in_bytes (type)\n-\t       : GET_MODE_SIZE (mode));\n+\t       : (int) GET_MODE_SIZE (mode));\n   int words = D30V_ALIGN (bytes, UNITS_PER_WORD) / UNITS_PER_WORD;\n   int adjust = (bytes > UNITS_PER_WORD && (*cum & 1) != 0);\n \n@@ -2719,7 +2720,7 @@ d30v_print_operand_memory_reference (stream, x)\n \n   else\n     {\n-      char *suffix = \"\";\n+      const char *suffix = \"\";\n       int offset0  = 0;\n \n       if (GET_CODE (x0) == SUBREG)\n@@ -3366,7 +3367,7 @@ d30v_emit_comparison (test_int, result, arg1, arg2)\n /* Return appropriate code to move 2 words.  Since DImode registers must start\n    on even register numbers, there is no possibility of overlap.  */\n \n-char *\n+const char *\n d30v_move_2words (operands, insn)\n      rtx operands[];\n      rtx insn;"}, {"sha": "841105d45400653f441ff05b1bdcbe676024b213", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1534,7 +1534,7 @@ extern enum reg_class regno_reg_class[];\n \t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n \n extern enum reg_class reg_class_from_letter[];\n-#define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter[ CHAR ]\n+#define REG_CLASS_FROM_LETTER(CHAR) reg_class_from_letter[(unsigned char)(CHAR)]\n \n /* A C expression which is nonzero if register number NUM is suitable for use\n    as a base register in operand addresses.  It may be either a suitable hard"}, {"sha": "1a6cb31a6aba35b1424a4609f3e610139e8efda9", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -118,6 +118,9 @@ static struct fr30_frame_info \tcurrent_frame_info;\n /* Zero structure to initialize current_frame_info.  */\n static struct fr30_frame_info \tzero_frame_info;\n \n+static rtx fr30_pass_by_reference PARAMS ((tree, tree));\n+static rtx fr30_pass_by_value PARAMS ((tree, tree));\n+\n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))\n "}, {"sha": "6bdfa48f81557a402d050b2c59b9410b443dbd0a", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -568,7 +568,7 @@\n   \"\"\n   \"*\n   {\n-  char *          ldi_instr;\n+  const char *    ldi_instr;\n   const char *    tmp_reg;\n   static char     buffer[100];\n   REAL_VALUE_TYPE d;\n@@ -1189,7 +1189,7 @@\n       {\n         static char   buffer [100];\n \tconst char *  tmp_reg; \n-\tchar *        ldi_insn;\n+\tconst char *  ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n \t\n@@ -1243,7 +1243,7 @@\n       {\n         static char   buffer [100];\n \tconst char *  tmp_reg; \n-\tchar *        ldi_insn;\n+\tconst char *  ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n \t\n@@ -1315,7 +1315,7 @@\n       {\n         static char   buffer [100];\n \tconst char *  tmp_reg; \n-\tchar *        ldi_insn;\n+\tconst char *  ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n "}, {"sha": "b7802dc1a1ef7558d163efa86e95dc693129432c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1104,6 +1104,7 @@ struct cum_arg\n #define EXTRA_SECTIONS in_readonly_data\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+extern void readonly_data PARAMS ((void));\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n readonly_data ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "bbdcfa653f8bb12cc6f83248c6b55c46eccfa694", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -411,7 +411,7 @@ i370_short_branch (insn)\n \tif (addr > lp -> label_last_ref) lp->label_last_ref = addr;\t\\\n }\n \n-void \n+static void \n i370_label_scan () \n {\n    rtx insn;\n@@ -590,7 +590,7 @@ check_label_emit ()\n    allocated from memory.\n    ID is the label number of the label being added to the list.  */\n \n-label_node_t *\n+static label_node_t *\n mvs_get_label (id)\n      int id;\n {\n@@ -702,6 +702,7 @@ mvs_check_label (id)\n /* Get the page on which the label sits.  This will be used to \n    determine is a register reload is really needed.  */\n \n+#if 0\n int\n mvs_get_label_page(int id)\n {\n@@ -714,6 +715,7 @@ mvs_get_label_page(int id)\n     }\n   return -1;\n }\n+#endif\n \n /* The label list for the current page freed by linking the list onto the free\n    label element chain.  */"}, {"sha": "5b70d5a7733e084fbd4807869ba3580ff92bb32e", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1663,7 +1663,7 @@ sfmode_constant_to_ulong (x)\n \n extern char call_used_regs[];\n \n-char *current_function_original_name;\n+const char *current_function_original_name;\n \n static int must_preserve_r1;\n static unsigned must_preserve_bytes;"}, {"sha": "6f82d6e30d0f0e56a75f363359f31a1a6671d2c1", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n /* Output the special word the System V SDB wants to see just before\n    the first word of each function's prologue code.  */\n \n-extern char *current_function_original_name;\n+extern const char *current_function_original_name;\n \n /* This special macro is used to output a magic word just before the\n    first word of each function.  On some versions of UNIX running on"}, {"sha": "0b54e3a2e74a5ba364531186fd0a41b1622ba3f2", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -119,7 +119,7 @@ Boston, MA 02111-1307, USA.  */\n /* Output the special word the svr4 SDB wants to see just before\n    the first word of each function's prologue code.  */\n \n-extern char *current_function_original_name;\n+extern const char *current_function_original_name;\n \n /* This special macro is used to output a magic word just before the\n    first word of each function.  On some versions of UNIX running on"}, {"sha": "80e4efaed62f40ba5c0d4fea115417f622de643e", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -632,6 +632,8 @@\n       if (operands[1] == const0_rtx)\n \treturn \\\"st\tg14,%0\\\";\n       return \\\"st\t%1,%0\\\";      \n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,address,load,store\")\n@@ -665,6 +667,8 @@\n       return \\\"ld\t%1,%0\\\";\n     case 3:\n       return \\\"st\t%1,%0\\\";      \n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,address,load,store\")\n@@ -715,6 +719,8 @@\n       if (operands[1] == const0_rtx)\n \treturn \\\"stos\tg14,%0\\\";\n       return \\\"stos\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,misc,load,store\")\n@@ -749,6 +755,8 @@\n       return \\\"ldos\t%1,%0\\\";\n     case 3:\n       return \\\"stos\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,misc,load,store\")\n@@ -796,6 +804,8 @@\n       if (operands[1] == const0_rtx)\n \treturn \\\"stob\tg14,%0\\\";\n       return \\\"stob\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,misc,load,store\")\n@@ -830,6 +840,8 @@\n       return \\\"ldob\t%1,%0\\\";\n     case 3:\n       return \\\"stob\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,misc,load,store\")\n@@ -869,6 +881,8 @@\n       return i960_output_ldconst (operands[0], operands[1]);\n     case 5:\n        return i960_output_move_double_zero (operands[0]);\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store,store\")])\n@@ -894,6 +908,8 @@\n       return i960_output_move_double (operands[0], operands[1]);\n     case 2:\n       return i960_output_ldconst (operands[0], operands[1]);\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store\")])\n@@ -948,6 +964,8 @@\n       return i960_output_ldconst (operands[0], operands[1]);\n     case 5:\n       return i960_output_move_quad_zero (operands[0]);\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store,store\")])\n@@ -973,6 +991,8 @@\n       return i960_output_move_quad (operands[0], operands[1]);\n     case 2:\n       return i960_output_ldconst (operands[0], operands[1]);\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,load,store\")])\n@@ -1085,6 +1105,8 @@\n     case 5:\n       operands[1] = adjust_address (operands[0], VOIDmode, 4);\n       return \\\"st\tg14,%0\\;st\tg14,%1\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore,fpstore\")])\n@@ -1115,6 +1137,8 @@\n       return \\\"ldl\t%1,%0\\\";\n     case 4:\n       return \\\"stl\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n@@ -1158,6 +1182,8 @@\n       if (operands[1] == CONST0_RTX (SFmode))\n \treturn \\\"st\tg14,%0\\\";\n       return \\\"st\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n@@ -1188,6 +1214,8 @@\n       return \\\"ld\t%1,%0\\\";\n     case 4:\n       return \\\"st\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n@@ -2099,6 +2127,8 @@\n       return \\\"ldt\t%1,%0\\\";\n     case 4:\n       return \\\"stt\t%1,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"move,move,load,fpload,fpstore\")])\n@@ -2353,7 +2383,6 @@\n   rtx chain = operands[0];\n   rtx handler = operands[1];\n   rtx stack = operands[2];\n-  rtx label = operands[3];\n \n   /* We must restore the stack pointer, frame pointer, previous frame\n      pointer and the return instruction pointer.  Since the ret"}, {"sha": "76352582671a00b3f28c529472f8c17677eb3b88", "filename": "gcc/config/i960/vx960-coff.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi960%2Fvx960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fi960%2Fvx960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fvx960-coff.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -21,6 +21,7 @@ Boston, MA 02111-1307, USA.  */\n /* This file just exists to give specs for the 960 running on VxWorks.\n    VxWorks does all the library stuff itself.  */\n \n+#undef MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS { \"msoft-float\" }\n \n #undef LIB_SPEC"}, {"sha": "5b8bac936945446fbec2fca373b58f6e39f16ba2", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1448,7 +1448,7 @@\n   \"\"\n   \"*\n {\n-  char *br,*invbr;\n+  const char *br,*invbr;\n   char asmtext[40];\n \n   switch (GET_CODE (operands[1]))\n@@ -1495,7 +1495,7 @@\n   \"\"\n   \"*\n {\n-  char *br,*invbr;\n+  const char *br,*invbr;\n   char asmtext[40];\n \n   switch (GET_CODE (operands[1]))"}, {"sha": "e775234eb54448d0233dc7ffffcb88a0e80d06a9", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -34,7 +34,7 @@ extern int m68hc11_function_block_profiler PARAMS((FILE*,int));\n \n extern int m68hc11_block_profiler PARAMS((FILE*,int));\n \n-extern void m68hc11_asm_file_start PARAMS((FILE*, char*));\n+extern void m68hc11_asm_file_start PARAMS((FILE*, const char*));\n \n #ifdef TREE_CODE\n extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,"}, {"sha": "00d27e025a4d4ec64a7981b537656a9d47b4d876", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -52,6 +52,7 @@ Boston, MA 02111-1307, USA.\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n+#include \"reload.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n \n@@ -1095,7 +1096,7 @@ m68hc11_initialize_trampoline (tramp, fnaddr, cxt)\n      rtx fnaddr;\n      rtx cxt;\n {\n-  char *static_chain_reg = reg_names[STATIC_CHAIN_REGNUM];\n+  const char *static_chain_reg = reg_names[STATIC_CHAIN_REGNUM];\n \n   /* Skip the '*'.  */\n   if (*static_chain_reg == '*')\n@@ -5216,7 +5217,7 @@ static void\n print_options (out)\n      FILE *out;\n {\n-  char *a_time;\n+  const char *a_time;\n   long c_time;\n   int i;\n   extern int save_argc;\n@@ -5246,7 +5247,7 @@ print_options (out)\n void\n m68hc11_asm_file_start (out, main_file)\n      FILE *out;\n-     char *main_file;\n+     const char *main_file;\n {\n   fprintf (out, \";;;-----------------------------------------\\n\");\n   fprintf (out, \";;; Start MC68HC11 gcc assembly output\\n\");"}, {"sha": "10886d2899726ff8cb2b86f09ba003a6be41ebd8", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1338,8 +1338,6 @@\n   \"\"\n  \"*\n {\n-  rtx ops[2];\n-\n   if (A_REG_P (operands[0]))\n     return \\\"#\\\";\n \n@@ -1919,10 +1917,10 @@\n   \"*\n {\n   rtx   ops[3];\n-  char* add_insn;\n-  char* inc_insn;\n-  char* incb_mem;\n-  char* inch_mem;\n+  const char* add_insn;\n+  const char* inc_insn;\n+  const char* incb_mem;\n+  const char* inch_mem;\n   HOST_WIDE_INT val;\n \n   if (which_alternative > 2)\n@@ -6148,7 +6146,7 @@\n     output_asm_insn (\\\"ldd\\\\t%2\\\", operands);\n   if ((INTVAL (operands[1]) & 0x0ff00) == 0x100)\n     output_asm_insn (\\\"inca\\\", operands);\n-  else if (INTVAL (operands[1]) & 0x0ff00 == 0xff00)\n+  else if ((INTVAL (operands[1]) & 0x0ff00) == 0xff00)\n     output_asm_insn (\\\"deca\\\", operands);\n   else if (INTVAL (operands[1]) != 0)\n     output_asm_insn (\\\"adda\\\\t%h1\\\", operands);"}, {"sha": "1fd73a8bf7ff3dd2e5993a2bf8967df93f0dd32a", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1111,6 +1111,7 @@ switch_to_section (section, decl)\t\t\t\t\\\n }\n \n /* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  mcore_asm_named_section\n \n /* This is how to output an insn to push a register on the stack."}, {"sha": "5f286e5ca6357c0a4120b1299b78ffd3230d60d8", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1029,7 +1029,7 @@ enum shift_type\n \n enum shift_mode\n   {\n-    HIshift, \n+    HIshift\n   };\n \n /* For single bit shift insns, record assembler and what bits of the"}, {"sha": "abd17ed45b292f124fab26cc4a11c19d271f1d4e", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -34,7 +34,7 @@ extern void mn10300_gen_multiple_store PARAMS ((int));\n extern void notice_update_cc PARAMS ((rtx, rtx));\n extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n \t\t\t\t\t\t      enum machine_mode, rtx));\n-extern char *output_tst PARAMS ((rtx, rtx));\n+extern const char *output_tst PARAMS ((rtx, rtx));\n extern int store_multiple_operation PARAMS ((rtx, enum machine_mode));\n extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int call_address_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "23fe80ff67483f84ac7c2bf6f052932391bce552", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1029,7 +1029,7 @@ function_arg_partial_nregs (cum, mode, type, named)\n }\n \n /* Output a tst insn.  */\n-char *\n+const char *\n output_tst (operand, insn)\n      rtx operand, insn;\n {"}, {"sha": "f8358cca324075e178d7f6ce96beaa9ed94c5f2a", "filename": "gcc/config/pa/long_double.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Flong_double.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Flong_double.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flong_double.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -24,10 +24,10 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)                              \\\n do { long value[4];                                                     \\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);                 \\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", \"\\t.word\", value[0]);                \\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", \"\\t.word\", value[1]);                \\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", \"\\t.word\", value[2]);                \\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", \"\\t.word\", value[3]);                \\\n+     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[0]);                \\\n+     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[1]);                \\\n+     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[2]);                \\\n+     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[3]);                \\\n    } while (0)\n \n "}, {"sha": "999579d9779f232851d04e63d888e666126754a0", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -133,7 +133,7 @@ extern struct rtx_def *hppa_builtin_saveregs PARAMS ((void));\n \n extern void output_deferred_plabels PARAMS ((FILE *));\n extern void override_options PARAMS ((void));\n-extern void output_ascii PARAMS ((FILE *, const unsigned char *, int));\n+extern void output_ascii PARAMS ((FILE *, const char *, int));\n extern int compute_frame_size PARAMS ((int, int *));\n extern int and_mask_p PARAMS ((unsigned HOST_WIDE_INT));\n extern int cint_ok_for_move PARAMS ((HOST_WIDE_INT));"}, {"sha": "8ae8617fcebf02bc1a7f5065aac977f1f403a131", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -2488,7 +2488,7 @@ output_64bit_ior (operands)\n void\n output_ascii (file, p, size)\n      FILE *file;\n-     const unsigned char *p;\n+     const char *p;\n      int size;\n {\n   int i;"}, {"sha": "c11a247e4f39f601f3c4a6d054bc28dd5cef28cf", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -285,6 +285,7 @@ do {  \\\n    works correctly).  */\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+extern void readonly_data PARAMS ((void));\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n readonly_data ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "13f8d02f9c12add3b4d3af4549c4943eec5fcd16", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1156,7 +1156,6 @@\n   \"\"\n   \"\n {\n-  extern rtx expand_unop ();\n   if (GET_CODE (operands[2]) == CONST_INT)\n     operands[2] = GEN_INT (~INTVAL (operands[2]));\n   else\n@@ -1170,7 +1169,6 @@\n   \"\"\n   \"\n {\n-  extern rtx expand_unop ();\n   if (GET_CODE (operands[2]) == CONST_INT)\n     operands[2] = GEN_INT (~INTVAL (operands[2]));\n   else\n@@ -1184,7 +1182,6 @@\n   \"\"\n   \"\n {\n-  extern rtx expand_unop ();\n   rtx op = operands[2];\n   if (GET_CODE (op) == CONST_INT)\n     operands[2] = GEN_INT (((1 << 8) - 1) & ~INTVAL (op));"}, {"sha": "9bec3332e428577c3f447a84c60ede2914f091aa", "filename": "gcc/config/pj/pj-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpj%2Fpj-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpj%2Fpj-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -34,7 +34,7 @@ extern int pj_unsigned_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern rtx pj_workout_arg_words PARAMS ((rtx, rtx));\n extern void pj_machine_dependent_reorg PARAMS ((rtx));\n extern void pj_print_operand PARAMS ((FILE * stream, rtx x, int code));\n-extern char *pj_output_addsi3 PARAMS ((rtx * operands));\n+extern const char *pj_output_addsi3 PARAMS ((rtx * operands));\n \n #ifdef TREE_CODE\n extern rtx pj_expand_builtin_va_arg PARAMS ((tree valist, tree type));"}, {"sha": "8e6488399ce7d288aa4af8444ae8d2066bfb74ea", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -110,6 +110,14 @@ enum machine_mode pj_cmp_mode;\n \n static void pj_output_rval PARAMS ((rtx, enum machine_mode, rtx));\n static void pj_output_store_into_lval PARAMS ((enum machine_mode mode, rtx op));\n+static void pj_output_push_int PARAMS ((int));\n+static void pj_output_load PARAMS ((enum machine_mode, int));\n+static void pj_output_inc PARAMS ((rtx, int));\n+static void pj_output_cnv_op PARAMS ((enum insn_code, rtx));\n+static char mode_to_char PARAMS ((enum machine_mode));\n+static void pj_output_varidx PARAMS ((enum machine_mode, int, int));\n+static void pj_print_cond PARAMS ((enum rtx_code));\n+static rtx *unique_src_operand PARAMS ((rtx *, rtx));\n \n /* These vectors turn a register number into an offset from the vars\n    pointer register.  */\n@@ -568,7 +576,7 @@ pj_output_rval (op, mode, outer_op)\n \n /* Store the top of stack into the lval operand OP.  */\n \n-void\n+static void\n pj_output_store_into_lval (mode, op)\n      enum machine_mode mode;\n      rtx op;\n@@ -829,7 +837,7 @@ pj_function_incoming_arg (cum, mode, passed_type, named_arg)\n       int i;\n       if (mode == DImode || mode == DFmode)\n \t{\n-\t  cum->arg_adjust[cum->total_words + 0] = +1;\n+\t  cum->arg_adjust[cum->total_words + 0] = 1;\n \t  cum->arg_adjust[cum->total_words + 1] = -1;\n \t}\n       else\n@@ -844,7 +852,7 @@ pj_function_incoming_arg (cum, mode, passed_type, named_arg)\n /* Output code to add two SImode values.  Deals carefully with the the common\n    case of moving the optop.  */\n \n-char *\n+const char *\n pj_output_addsi3 (operands)\n      rtx *operands;\n {"}, {"sha": "010f00976d224b46e39a99a93a21f875259a2572", "filename": "gcc/config/romp/romp.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fromp%2Fromp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fromp%2Fromp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.md?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1667,7 +1667,6 @@\n   operands[0] = XEXP (operands[0], 0);\n   if (GET_CODE (operands[0]) == SYMBOL_REF)\n     {\n-      extern rtx get_symref ();\n       char *real_fcnname\n \t= (char *) alloca (strlen (XSTR (operands[0], 0)) + 2);\n \n@@ -1726,7 +1725,6 @@\n   operands[1] = XEXP (operands[1], 0);\n   if (GET_CODE (operands[1]) == SYMBOL_REF)\n     {\n-      extern rtx get_symref ();\n       char *real_fcnname =\n \t\t(char *) alloca (strlen (XSTR (operands[1], 0)) + 2);\n "}, {"sha": "02092a3881438cea936bdd828fd19a9fc9d49afa", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -93,15 +93,15 @@ mark_current_function_as_interrupt ()\n   if (current_function_decl ==  NULL_TREE)\n     {\n       warning (\"Cannot set interrupt attribute: no current function\");\n-      return 0;\n+      return;\n     }\n \n   name = get_identifier (\"interrupt\");\n \n   if (name == NULL_TREE || TREE_CODE (name) != IDENTIFIER_NODE)\n     {\n       warning (\"Cannot set interrupt attribute: no such identifier\");\n-      return 0;\n+      return;\n     }\n   \n   decl_attributes (&current_function_decl,"}, {"sha": "de4ebbbe4353cc275d4a7b77916882da7e656b0f", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -39,6 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"c-lex.h\"\n #include \"ggc.h\"\n+#include \"integrate.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "1636fd1f0118af8bec76a154283e55ffa8eae584", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -1346,7 +1346,7 @@ do { char dstr[30];\t\t\t\t\t\\\n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(FILE, NAME)           \\\n   do {                                            \\\n-  char* real_name;                                \\\n+  const char* real_name;                          \\\n   STRIP_NAME_ENCODING (real_name, (NAME));        \\\n   asm_fprintf (FILE, \"%U%s\", real_name);          \\\n   } while (0)"}, {"sha": "f836c1e8bfb48cfd440df3cc856bbfd39c388628", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1943c2c1ad758b5fe93a09acf3083c55b836a747/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=1943c2c1ad758b5fe93a09acf3083c55b836a747", "patch": "@@ -36,3 +36,4 @@ extern void vms_check_external PARAMS ((tree, const char *, int));\n #endif /* TREE_CODE */\n \n extern void vms_flush_pending_externals PARAMS ((FILE *));\n+extern void const_section PARAMS ((void));"}]}