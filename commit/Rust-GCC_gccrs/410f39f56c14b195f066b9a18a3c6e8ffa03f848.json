{"sha": "410f39f56c14b195f066b9a18a3c6e8ffa03f848", "node_id": "C_kwDOANBUbNoAKDQxMGYzOWY1NmMxNGIxOTVmMDY2YjlhMThhM2M2ZThmZmEwM2Y4NDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T07:38:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T07:38:51Z"}, "message": "openmp: Ensure DECL_CONTEXT of OpenMP iterators in templates [PR105092]\n\ncp_parser_omp_iterators does:\n      DECL_ARTIFICIAL (iter_var) = 1;\n      DECL_CONTEXT (iter_var) = current_function_decl;\n      pushdecl (iter_var);\non the newly created iterator vars, but when we instantiate templates\ncontaining them, we just tsubst_decl them (which apparently for\nautomatic vars clears DECL_CONTEXT with a comment that pushdecl should\nbe called on them later).\nThe result is that we have automatic vars in the IL which have NULL\nDECL_CONTEXT and the analyzer is upset about those.\n\nFixed by setting DECL_CONTEXT and calling pushdecl during the instantiation.\n\n2022-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105092\n\t* pt.cc (tsubst_omp_clause_decl): When handling iterators, set\n\tDECL_CONTEXT of the iterator var to current_function_decl and\n\tcall pushdecl.\n\n\t* g++.dg/gomp/pr105092.C: New test.", "tree": {"sha": "ce5fe4de63bebddd80bfa0910e73b46347de14e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce5fe4de63bebddd80bfa0910e73b46347de14e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410f39f56c14b195f066b9a18a3c6e8ffa03f848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410f39f56c14b195f066b9a18a3c6e8ffa03f848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410f39f56c14b195f066b9a18a3c6e8ffa03f848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410f39f56c14b195f066b9a18a3c6e8ffa03f848/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9778a7dc0b3000813a1d25669bf2735f38219650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9778a7dc0b3000813a1d25669bf2735f38219650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9778a7dc0b3000813a1d25669bf2735f38219650"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "bdba5cf3b850f75283bdded3573f05e639781058", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410f39f56c14b195f066b9a18a3c6e8ffa03f848/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410f39f56c14b195f066b9a18a3c6e8ffa03f848/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=410f39f56c14b195f066b9a18a3c6e8ffa03f848", "patch": "@@ -17575,6 +17575,8 @@ tsubst_omp_clause_decl (tree decl, tree args, tsubst_flags_t complain,\n \t      *tp = copy_node (it);\n \t      TREE_VEC_ELT (*tp, 0)\n \t\t= tsubst_decl (TREE_VEC_ELT (it, 0), args, complain);\n+\t      DECL_CONTEXT (TREE_VEC_ELT (*tp, 0)) = current_function_decl;\n+\t      pushdecl (TREE_VEC_ELT (*tp, 0));\n \t      TREE_VEC_ELT (*tp, 1)\n \t\t= tsubst_expr (TREE_VEC_ELT (it, 1), args, complain, in_decl,\n \t\t\t       /*integral_constant_expression_p=*/false);"}, {"sha": "5f4e38aae400253e6572fbfb9f0e44f6ed7062d1", "filename": "gcc/testsuite/g++.dg/gomp/pr105092.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410f39f56c14b195f066b9a18a3c6e8ffa03f848/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105092.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410f39f56c14b195f066b9a18a3c6e8ffa03f848/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105092.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105092.C?ref=410f39f56c14b195f066b9a18a3c6e8ffa03f848", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/105092\n+// { dg-do compile { target analyzer } }\n+// { dg-options \"-fanalyzer -fopenmp\" }\n+\n+struct S { S () {} };\n+\n+template <typename T>\n+struct U {\n+  T c[10];\n+  U () {\n+#pragma omp task affinity (iterator (i = 0 : 10 : 1): c[i])\n+    ;\n+  }\n+};\n+\n+template <typename T>\n+struct V {\n+  T c[10];\n+  V () {\n+#pragma omp task depend (iterator (i = 0 : 10 : 1), inout: c[i])\n+    ;\n+  }\n+};\n+\n+U<S> u;\n+V<S> v;"}]}