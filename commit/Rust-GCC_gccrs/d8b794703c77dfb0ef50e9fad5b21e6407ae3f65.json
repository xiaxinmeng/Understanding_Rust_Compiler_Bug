{"sha": "d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiNzk0NzAzYzc3ZGZiMGVmNTBlOWZhZDViMjFlNjQwN2FlM2Y2NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-08-29T21:17:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-08-29T21:17:59Z"}, "message": "pa.md (fcmp patterns): Do not try to eliminate useless add,tr insns here.\n\n        * pa/pa.md (fcmp patterns): Do not try to eliminate\n        useless add,tr insns here.\n        * pa/pa.c (pa_reorg): Do elimination of useless add,tr\n        insns here instead.\n        (print_operand, case 'y'): Remove this code.\n\nFrom-SVN: r12677", "tree": {"sha": "1f22fc692f2f6860cec9d31caaf435fdd5a30d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f22fc692f2f6860cec9d31caaf435fdd5a30d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65/comments", "author": null, "committer": null, "parents": [{"sha": "309a88759be543e45aa902af611a3ad6188204ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309a88759be543e45aa902af611a3ad6188204ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309a88759be543e45aa902af611a3ad6188204ff"}], "stats": {"total": 235, "additions": 84, "deletions": 151}, "files": [{"sha": "c2d7058e48cf61f87ed6ac4e0bc502111be0d66b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 82, "deletions": 21, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "patch": "@@ -3230,27 +3230,6 @@ print_operand (file, x, code)\n \t  abort ();\n \t}\n       return;\n-    /* Reversed floating point comparison.  Need special conditions to\n-       deal with NaNs properly.  */\n-    case 'y':\n-      switch (GET_CODE (x))\n-\t{\n-\tcase EQ:\n-\t  fputs (\"=\", file);  break;\n-\tcase NE:\n-\t  fputs (\"!=\", file);  break;\n-\tcase GT:\n-\t  fputs (\"!<=\", file);  break;\n-\tcase GE:\n-\t  fputs (\"!<\", file);  break;\n-\tcase LT:\n-\t  fputs (\"!>=\", file);  break;\n-\tcase LE:\n-\t  fputs (\"!>\", file);  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      return;\n     case 'S':\t\t\t/* Condition, operands are (S)wapped.  */\n       switch (GET_CODE (x))\n \t{\n@@ -5522,6 +5501,88 @@ pa_reorg (insns)\n {\n   rtx insn;\n \n+  /* This is fairly cheap, so always run it if optimizing.  */\n+  if (optimize > 0)\n+    {\n+      /* Find all floating point compare + branch insns.  If possible,\n+\t reverse the comparison & the branch to avoid add,tr insns.  */\n+      insns = get_insns ();\n+      for (insn = insns; insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  rtx tmp, next_insn;\n+\n+\t  /* Ignore anything that isn't an INSN.  */\n+\t  if (GET_CODE (insn) != INSN)\n+\t    continue;\n+\n+\t  tmp = PATTERN (insn);\n+\n+\t  /* It must be a set.  */\n+\t  if (GET_CODE (tmp) != SET)\n+\t    continue;\n+\n+\t  /* The destination must be CCFP, which is register zero.  */\n+\t  tmp = SET_DEST (tmp);\n+\t  if (GET_CODE (tmp) != REG || REGNO (tmp) != 0)\n+\t    continue;\n+\n+\t  /* INSN should be a set of CCFP.\n+\n+\t     See if the result of this insn is used in a reversed FP\n+\t     conditional branch.  If so, reverse our condition and\n+\t     the branch.  Doing so avoids useless add,tr insns.  */\n+\t  next_insn = NEXT_INSN (insn);\n+\t  while (next_insn)\n+\t    {\n+\t      /* Jumps, calls and labels stop our search.  */\n+\t      if (GET_CODE (next_insn) == JUMP_INSN\n+\t\t  || GET_CODE (next_insn) == CALL_INSN\n+\t\t  || GET_CODE (next_insn) == CODE_LABEL)\n+\t\tbreak;\n+\n+\t      /* As does another fcmp insn.  */\n+\t      if (GET_CODE (next_insn) == INSN\n+\t\t  && GET_CODE (PATTERN (next_insn)) == SET\n+\t\t  && GET_CODE (SET_DEST (PATTERN (next_insn))) == REG\n+\t\t  && REGNO (SET_DEST (PATTERN (next_insn))) == 0)\n+\t\tbreak;\n+\n+\t      next_insn = NEXT_INSN (next_insn);\n+\t    }\n+\n+\t  /* Is NEXT_INSN a branch?  */\n+\t  if (next_insn\n+\t      && GET_CODE (next_insn) == JUMP_INSN)\n+\t    {\n+\t      rtx pattern = PATTERN (next_insn);\n+\n+\t      /* If it a reversed fp conditional branch (eg uses add,tr)\n+\t\t and CCFP dies, then reverse our conditional and the branch\n+\t\t to avoid the add,tr.  */\n+\t      if (GET_CODE (pattern) == SET\n+\t\t  && SET_DEST (pattern) == pc_rtx\n+\t\t  && GET_CODE (SET_SRC (pattern)) == IF_THEN_ELSE\n+\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 0)) == NE\n+\t\t  && GET_CODE (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == REG\n+\t\t  && REGNO (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == 0\n+\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 1)) == PC\n+\t\t  && find_regno_note (next_insn, REG_DEAD, 0))\n+\t\t{\n+\t\t  /* Reverse the branch.  */\n+\t\t  tmp = XEXP (SET_SRC (pattern), 1);\n+\t\t  XEXP (SET_SRC (pattern), 1) = XEXP (SET_SRC (pattern), 2);\n+\t\t  XEXP (SET_SRC (pattern), 2) = tmp;\n+\t\t  INSN_CODE (next_insn) = -1;\n+\n+\t\t  /* Reverse our condition.  */\n+\t\t  tmp = PATTERN (insn);\n+\t\t  PUT_CODE (XEXP (tmp, 1),\n+\t\t\t    reverse_condition (GET_CODE (XEXP (tmp, 1))));\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   /* This is fairly cheap, so always run it if optimizing.  */\n   if (optimize > 0)\n     {"}, {"sha": "0084d95611e03e18757d841a165e2e9bb9d817ed", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 2, "deletions": 130, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b794703c77dfb0ef50e9fad5b21e6407ae3f65/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d8b794703c77dfb0ef50e9fad5b21e6407ae3f65", "patch": "@@ -385,71 +385,7 @@\n \t\t\t     [(match_operand:SF 0 \"reg_or_0_operand\" \"fG\")\n \t\t\t      (match_operand:SF 1 \"reg_or_0_operand\" \"fG\")]))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  rtx next_insn;\n-\n-  /* See if this is later used in a reversed FP branch.  If so, reverse our\n-     condition and the branch.  Doing so avoids a useless add,tr. \n-\n-     Don't do this if fcmp is in a delay slot since it's too much of a\n-     headache to track down things on multiple paths.  */\n-  if (dbr_sequence_length ())\n-    next_insn = NULL;\n-  else\n-    next_insn = NEXT_INSN (insn);\n-  while (next_insn)\n-    {\n-      /* Jumps, calls and labels stop our search.  */\n-      if (GET_CODE (next_insn) == JUMP_INSN\n-\t  || GET_CODE (next_insn) == CALL_INSN\n-\t  || GET_CODE (next_insn) == CODE_LABEL)\n-\tbreak;\n-\n-      /* As does another fcmp insn.  */\n-      if (GET_CODE (next_insn) == INSN\n-\t  && GET_CODE (PATTERN (next_insn)) == SET\n-\t  && GET_CODE (SET_DEST (PATTERN (next_insn))) == REG\n-\t  && REGNO (SET_DEST (PATTERN (next_insn))) == 0)\n-\tbreak;\n-\n-      if (GET_CODE (next_insn) == INSN\n-\t  && GET_CODE (PATTERN (next_insn)) == SEQUENCE)\n-\tnext_insn = XVECEXP (PATTERN (next_insn), 0, 0);\n-      else\n-\tnext_insn = NEXT_INSN (next_insn);\n-    }\n-\n-  /* Is NEXT_INSN a branch?  */\n-  if (next_insn\n-      && GET_CODE (next_insn) == JUMP_INSN)\n-    {\n-      rtx pattern = PATTERN (next_insn);\n-\n-      /* Is it a reversed fp conditional branch (eg uses add,tr) and\n-\t CCFP dies, then reverse our conditional and the branch to\n-\t avoid the add,tr.  */\n-      if (GET_CODE (pattern) == SET\n-\t  && SET_DEST (pattern) == pc_rtx\n-\t  && GET_CODE (SET_SRC (pattern)) == IF_THEN_ELSE\n-\t  && GET_CODE (XEXP (SET_SRC (pattern), 0)) == NE\n-\t  && GET_CODE (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == REG\n-\t  && REGNO (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == 0\n-\t  && GET_CODE (XEXP (SET_SRC (pattern), 1)) == PC\n-\t  && find_regno_note (next_insn, REG_DEAD, 0))\n-\n-\t{\n-\t  rtx tmp;\n-\n-\t  tmp = XEXP (SET_SRC (pattern), 1);\n-\t  XEXP (SET_SRC (pattern), 1) = XEXP (SET_SRC (pattern), 2);\n-\t  XEXP (SET_SRC (pattern), 2) = tmp;\n-\t  INSN_CODE (next_insn) = -1;\n-\t  return \\\"fcmp,sgl,%y2 %r0,%r1\\\";\n-\t}\n-    }\n-  return \\\"fcmp,sgl,%Y2 %r0,%r1\\\";\n-}\"\n+  \"fcmp,sgl,%Y2 %r0,%r1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"fpcc\")])\n \n@@ -459,71 +395,7 @@\n \t\t\t     [(match_operand:DF 0 \"reg_or_0_operand\" \"fG\")\n \t\t\t      (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"*\n-{\n-  rtx next_insn;\n-\n-  /* See if this is later used in a reversed FP branch.  If so, reverse our\n-     condition and the branch.  Doing so avoids a useless add,tr. \n-\n-     Don't do this if fcmp is in a delay slot since it's too much of a\n-     headache to track down things on multiple paths.  */\n-  if (dbr_sequence_length ())\n-    next_insn = NULL;\n-  else\n-    next_insn = NEXT_INSN (insn);\n-  while (next_insn)\n-    {\n-      /* Jumps, calls and labels stop our search.  */\n-      if (GET_CODE (next_insn) == JUMP_INSN\n-\t  || GET_CODE (next_insn) == CALL_INSN\n-\t  || GET_CODE (next_insn) == CODE_LABEL)\n-\tbreak;\n-\n-      /* As does another fcmp insn.  */\n-      if (GET_CODE (next_insn) == INSN\n-\t  && GET_CODE (PATTERN (next_insn)) == SET\n-\t  && GET_CODE (SET_DEST (PATTERN (next_insn))) == REG\n-\t  && REGNO (SET_DEST (PATTERN (next_insn))) == 0)\n-\tbreak;\n-\n-      if (GET_CODE (next_insn) == INSN\n-\t  && GET_CODE (PATTERN (next_insn)) == SEQUENCE)\n-\tnext_insn = XVECEXP (PATTERN (next_insn), 0, 0);\n-      else\n-\tnext_insn = NEXT_INSN (next_insn);\n-    }\n-\n-  /* Is NEXT_INSN a branch?  */\n-  if (next_insn\n-      && GET_CODE (next_insn) == JUMP_INSN)\n-    {\n-      rtx pattern = PATTERN (next_insn);\n-\n-      /* Is it a reversed fp conditional branch (eg uses add,tr) and\n-\t CCFP dies, then reverse our conditional and the branch to\n-\t avoid the add,tr.  */\n-      if (GET_CODE (pattern) == SET\n-\t  && SET_DEST (pattern) == pc_rtx\n-\t  && GET_CODE (SET_SRC (pattern)) == IF_THEN_ELSE\n-\t  && GET_CODE (XEXP (SET_SRC (pattern), 0)) == NE\n-\t  && GET_CODE (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == REG\n-\t  && REGNO (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == 0\n-\t  && GET_CODE (XEXP (SET_SRC (pattern), 1)) == PC\n-\t  && find_regno_note (next_insn, REG_DEAD, 0))\n-\n-\t{\n-\t  rtx tmp;\n-\n-\t  tmp = XEXP (SET_SRC (pattern), 1);\n-\t  XEXP (SET_SRC (pattern), 1) = XEXP (SET_SRC (pattern), 2);\n-\t  XEXP (SET_SRC (pattern), 2) = tmp;\n-\t  INSN_CODE (next_insn) = -1;\n-\t  return \\\"fcmp,dbl,%y2 %r0,%r1\\\";\n-\t}\n-    }\n-  return \\\"fcmp,dbl,%Y2 %r0,%r1\\\";\n-}\"\n+  \"fcmp,dbl,%Y2 %r0,%r1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"fpcc\")])\n "}]}