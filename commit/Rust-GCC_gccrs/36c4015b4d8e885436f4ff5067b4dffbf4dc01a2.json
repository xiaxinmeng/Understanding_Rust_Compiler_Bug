{"sha": "36c4015b4d8e885436f4ff5067b4dffbf4dc01a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjNDAxNWI0ZDhlODg1NDM2ZjRmZjUwNjdiNGRmZmJmNGRjMDFhMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-08T20:52:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-08T20:52:46Z"}, "message": "mmx.md (*vec_extract* splitters): Simplify post-reload splitter preparation statements.\n\n\t* config/i386/mmx.md (*vec_extract* splitters): Simplify post-reload\n\tsplitter preparation statements.\n\t* config/i386/sse.md (*vec_extract* splitters): Ditto.\n\t(*avx_vperm_broadcast_<mode>): Use adjust_address instead of\n\tadjust_address_nv.\n\nFrom-SVN: r198723", "tree": {"sha": "06f92cd87ede113f6a341d0a31974abf854249d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f92cd87ede113f6a341d0a31974abf854249d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2/comments", "author": null, "committer": null, "parents": [{"sha": "ea31132e782010c8cb175e137276f0a1ae3b40e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea31132e782010c8cb175e137276f0a1ae3b40e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea31132e782010c8cb175e137276f0a1ae3b40e0"}], "stats": {"total": 66, "additions": 24, "deletions": 42}, "files": [{"sha": "9d53f1493901136399a2795aae5e0fb942fc1695", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c4015b4d8e885436f4ff5067b4dffbf4dc01a2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=36c4015b4d8e885436f4ff5067b4dffbf4dc01a2", "patch": "@@ -4299,15 +4299,12 @@\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (SFmode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (SFmode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (SFmode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], SFmode, 0);\n })\n \n (define_insn_and_split \"*sse4_1_extractps\"\n@@ -4395,15 +4392,12 @@\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], <ssehalfvecmode>mode, 0);\n })\n \n (define_insn \"vec_extract_hi_<mode>\"\n@@ -4429,15 +4423,12 @@\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], <ssehalfvecmode>mode, 0);\n })\n \n (define_insn \"vec_extract_hi_<mode>\"\n@@ -4466,15 +4457,12 @@\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (V8HImode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (V8HImode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (V8HImode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], V8HImode, 0);\n })\n \n (define_insn \"vec_extract_hi_v16hi\"\n@@ -4509,15 +4497,12 @@\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (V16QImode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (V16QImode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (V16QImode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], V16QImode, 0);\n })\n \n (define_insn \"vec_extract_hi_v32qi\"\n@@ -5009,15 +4994,12 @@\n \t  (match_operand:V2DF 1 \"nonimmediate_operand\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE2 && reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0) (match_dup 1))]\n {\n-  rtx op1 = operands[1];\n-  if (REG_P (op1))\n-    op1 = gen_rtx_REG (DFmode, REGNO (op1));\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (DFmode, REGNO (operands[1]));\n   else\n-    op1 = gen_lowpart (DFmode, op1);\n-  emit_move_insn (operands[0], op1);\n-  DONE;\n+    operands[1] = adjust_address (operands[1], DFmode, 0);\n })\n \n (define_insn \"*vec_extractv2df_0_sse\""}]}