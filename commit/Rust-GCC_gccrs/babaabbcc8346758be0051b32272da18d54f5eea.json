{"sha": "babaabbcc8346758be0051b32272da18d54f5eea", "node_id": "C_kwDOANBUbNoAKGJhYmFhYmJjYzgzNDY3NThiZTAwNTFiMzIyNzJkYTE4ZDU0ZjVlZWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-01T11:25:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-01T12:17:18Z"}, "message": "libstdc++: Implement std::unreachable() for C++23 (P0627R6)\n\nThis defines std::unreachable as an assertion for debug mode, a trap\nwhen _GLIBCXX_ASSERTIONS is defined, and __builtin_unreachable()\notherwise.\n\nThe reason for only using __builtin_trap() in the second case is to\navoid the overhead of setting up a call to __glibcxx_assert_fail that\nshould never happen.\n\nUBsan can detect if __builtin_unreachable() is executed, so if a feature\ntest macro for that sanitizer is added, we could change just use\n__builtin_unreachable() when the sanitizer is enabled.\n\nWhile thinking about what the debug assertion failure should print, I\nnoticed that the __glibcxx_assert_fail function doesn't check for null\npointers. This adds a check so we don't try to print them if null.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/utility (unreachable): Define for C++23.\n\t* include/std/version (__cpp_lib_unreachable): Define.\n\t* src/c++11/debug.cc (__glibcxx_assert_fail): Check for valid\n\targuments. Handle only the function being given.\n\t* testsuite/20_util/unreachable/1.cc: New test.\n\t* testsuite/20_util/unreachable/version.cc: New test.", "tree": {"sha": "1a63a98ad862f3fa05fd8e12882a37795f4db7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a63a98ad862f3fa05fd8e12882a37795f4db7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/babaabbcc8346758be0051b32272da18d54f5eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaabbcc8346758be0051b32272da18d54f5eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babaabbcc8346758be0051b32272da18d54f5eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaabbcc8346758be0051b32272da18d54f5eea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944da70a5d1cdc5bd4327b2d32420f57b6883985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944da70a5d1cdc5bd4327b2d32420f57b6883985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944da70a5d1cdc5bd4327b2d32420f57b6883985"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "ad5faa50f57306af581e1466d35cd03928704579", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=babaabbcc8346758be0051b32272da18d54f5eea", "patch": "@@ -186,6 +186,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr underlying_type_t<_Tp>\n     to_underlying(_Tp __value) noexcept\n     { return static_cast<underlying_type_t<_Tp>>(__value); }\n+\n+#define __cpp_lib_unreachable 202202L\n+  /// Informs the compiler that program control flow never reaches this point.\n+  /**\n+   * Evaluating a call to this function results in undefined behaviour.\n+   * This can be used as an assertion informing the compiler that certain\n+   * conditions are impossible, for when the compiler is unable to determine\n+   * that by itself.\n+   *\n+   * For example, it can be used to prevent warnings about reaching the\n+   * end of a non-void function without returning.\n+   *\n+   * @since C++23\n+   */\n+  [[noreturn,__gnu__::__always_inline__]]\n+  inline void\n+  unreachable()\n+  {\n+#ifdef _GLIBCXX_DEBUG\n+    std::__glibcxx_assert_fail(nullptr, 0, \"std::unreachable()\", nullptr);\n+#elif defined _GLIBCXX_ASSERTIONS\n+    __builtin_trap();\n+#else\n+    __builtin_unreachable();\n+#endif\n+  }\n #endif // C++23\n #endif // C++20\n #endif // C++17"}, {"sha": "51f2110b68ef1f8cfa9462115649be7ef150aa6c", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=babaabbcc8346758be0051b32272da18d54f5eea", "patch": "@@ -326,6 +326,7 @@\n # define __cpp_lib_string_resize_and_overwrite 202110L\n #endif\n #define __cpp_lib_to_underlying 202102L\n+#define __cpp_lib_unreachable 202202L\n #endif\n #endif // C++2b\n #endif // C++20"}, {"sha": "4706defedf153962e36074eba9d425299b45c595", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=babaabbcc8346758be0051b32272da18d54f5eea", "patch": "@@ -52,8 +52,11 @@ namespace std\n   __glibcxx_assert_fail(const char* file, int line,\n \t\t\tconst char* function, const char* condition) noexcept\n   {\n-    fprintf(stderr, \"%s:%d: %s: Assertion '%s' failed.\\n\",\n-\t\t      file, line, function, condition);\n+    if (file && function && condition)\n+      fprintf(stderr, \"%s:%d: %s: Assertion '%s' failed.\\n\",\n+\t      file, line, function, condition);\n+    else if (function)\n+      fprintf(stderr, \"%s: Undefined behavior detected.\\n\", function);\n     abort();\n   }\n }"}, {"sha": "0c463d52a48ff6d84c911ae096f8d015c4e45479", "filename": "libstdc++-v3/testsuite/20_util/unreachable/1.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2F1.cc?ref=babaabbcc8346758be0051b32272da18d54f5eea", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <utility>\n+\n+#ifndef __cpp_lib_unreachable\n+# error \"Feature-test macro for unreachable missing in <utility>\"\n+#elif __cpp_lib_unreachable != 202202L\n+# error \"Feature-test macro for unreachable has wrong value in <utility>\"\n+#endif\n+\n+bool test01(int i)\n+{\n+  if (i == 4)\n+    return true;\n+  std::unreachable();\n+} // { dg-bogus \"control reaches end of non-void function\" }"}, {"sha": "c7795900c3046f6af2bdd220427955fef1320d16", "filename": "libstdc++-v3/testsuite/20_util/unreachable/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babaabbcc8346758be0051b32272da18d54f5eea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funreachable%2Fversion.cc?ref=babaabbcc8346758be0051b32272da18d54f5eea", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do preprocess { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_unreachable\n+# error \"Feature-test macro for unreachable missing in <version>\"\n+#elif __cpp_lib_unreachable != 202202L\n+# error \"Feature-test macro for unreachable has wrong value in <version>\"\n+#endif"}]}