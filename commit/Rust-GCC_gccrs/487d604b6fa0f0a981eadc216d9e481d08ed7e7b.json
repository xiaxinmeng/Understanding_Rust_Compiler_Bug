{"sha": "487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "node_id": "C_kwDOANBUbNoAKDQ4N2Q2MDRiNmZhMGYwYTk4MWVhZGMyMTZkOWU0ODFkMDhlZDdlN2I", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-19T15:12:38Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-19T15:12:38Z"}, "message": "middle-end: Handle FMA_CONJ correctly after SLP layout update.\n\nApologies, I got dinged by the i386 regressions bot for a test I didn't have in\nmy tree at the time I made the previous patch.  The bot was telling me that FMA\nstopped working after I strengthened the FMA check in the previous patch.\n\nThe reason is that the check is slightly early.  The first check can indeed only\nexit early when either node isn't a mult.  However we need to delay till we know\nif the node is a MUL or FMA before enforcing that both nodes must be a MULT\nsince the node to inspect is different if the operation is a MUL or FMA.\n\nAlso with the update patch for GCC 11 tree layout update to the new GCC 12 one\nI had missed that the difference in which node is conjucated is not symmetrical.\n\nSo the test for it can just be testing the inverse order.  It was Currently\nno detecting when the first node was conjucated instead of the second one.\n\nThis also made me wonder why my own test didn't detect this.  It turns out that\nthe tests, being copied from the _Float16 ones were incorrectly marked as\nxfail.  The _Float16 ones are marked as xfail since C doesn't have a conj\noperation for _Float16, which means you get extra type-casts in between.\n\nWhile you could use the GCC _Complex extension here I opted to mark them xfail\nsince I wanted to include detection over the widenings next year.\n\nSecondly the double tests were being skipped because Adv. SIMD was missing from\ntargets supporting Complex Double vectorization.\n\nWith these changes all other tests run and pass and only XFAIL ones are\ncorrectly the _Float16 ones.  Sorry for missing this before, testing should now\ncover all cases.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103311\n\tPR target/103330\n\t* tree-vect-slp-patterns.c (vect_validate_multiplication): Fix CONJ\n\ttest to new codegen.\n\t(complex_mul_pattern::matches): Move check downwards.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103311\n\tPR target/103330\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c: Fix it.\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c: Likewise.\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c: Likewise.\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c: Likewise.\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c: Likewise.\n\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_complex_add_double): Add Adv. SIMD.", "tree": {"sha": "d091e518f136971e8224bbf3899d025ab3d04178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d091e518f136971e8224bbf3899d025ab3d04178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e9f721d1a6f370ce0534745baeeb5a56da948e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e9f721d1a6f370ce0534745baeeb5a56da948e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e9f721d1a6f370ce0534745baeeb5a56da948e"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "b77c847403df3253648dc4b2f493364fc1cb6959", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-double.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_complex_add_double } */\n /* { dg-add-options arm_v8_3a_complex_neon } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n \n #define TYPE double\n #define N 16\n #include \"complex-mla-template.c\"\n \n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA_CONJ\" \"slp1\" } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA_CONJ\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA\" \"vect\" } } */"}, {"sha": "cd68fd190089bc48615e4098a19450c0f374c275", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mla-float.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_complex_add_float } */\n-/* { dg-additional-options \"-fno-tree-loop-vectorize\" } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n /* { dg-add-options arm_v8_3a_fp16_complex_neon } */\n \n #define TYPE float\n #define N 16\n #include \"complex-mla-template.c\"\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA_CONJ\" \"slp1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA\" \"slp1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA_CONJ\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA\" \"vect\" } } */"}, {"sha": "9d9839417a2b09fd7715ce554d9d96827ee3f00c", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-double.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -1,12 +1,11 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_complex_add_double } */\n /* { dg-add-options arm_v8_3a_complex_neon } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n \n #define TYPE double\n #define N 16\n #include \"complex-mls-template.c\"\n \n-/* { dg-final { scan-tree-dump \"Found COMPLEX_ADD_ROT270\" \"slp1\" } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMA\" \"slp1\" } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS_CONJ\" \"slp1\" } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS_CONJ\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS\" \"vect\" } } */"}, {"sha": "cf540a08acd1a0ffe0b193dd2346a58afc0bfd2a", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mls-float.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_complex_add_float } */\n-/* { dg-additional-options \"-fno-tree-loop-vectorize\" } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n /* { dg-add-options arm_v8_3a_complex_neon } */\n \n #define TYPE float\n #define N 16\n #include \"complex-mls-template.c\"\n \n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS_CONJ\" \"slp1\"  { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS\" \"slp1\"  { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS_CONJ\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_FMS\" \"vect\" } } */"}, {"sha": "dcac519cd98c6dd5773117134ca1c007ae3e3856", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-double.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_complex_add_double } */\n /* { dg-add-options arm_v8_3a_complex_neon } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n \n #define TYPE double\n #define N 16\n #include \"complex-mul-template.c\"\n \n-/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL_CONJ\" \"slp1\" } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL\" slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL_CONJ\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL\" \"vect\" } } */"}, {"sha": "27280ae2ba4dfaee1a547d43f75240a7634caa9b", "filename": "gcc/testsuite/gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcomplex%2Ffast-math-bb-slp-complex-mul-float.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -7,5 +7,5 @@\n #define N 16\n #include \"complex-mul-template.c\"\n \n-/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL_CONJ\" \"slp1\"  { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL\" \"slp1\"  { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL_CONJ\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Found COMPLEX_MUL\" \"slp1\" } } */"}, {"sha": "155034c9ca4880bf9b46a2ea84fd640754c805c7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -3632,8 +3632,10 @@ proc check_effective_target_vect_complex_add_float { } {\n proc check_effective_target_vect_complex_add_double { } {\n     return [check_cached_effective_target_indexed vect_complex_add_double {\n       expr {\n-\t ([check_effective_target_aarch64_sve2]\n-\t      && [check_effective_target_aarch64_little_endian])\n+\t (([check_effective_target_arm_v8_3a_complex_neon_ok]\n+\t  && [check_effective_target_aarch64_little_endian])\n+\t || ([check_effective_target_aarch64_sve2]\n+\t      && [check_effective_target_aarch64_little_endian]))\n \t}}]\n }\n "}, {"sha": "0350441fad9690cd5d04337171ca3470a064a571", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/487d604b6fa0f0a981eadc216d9e481d08ed7e7b/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=487d604b6fa0f0a981eadc216d9e481d08ed7e7b", "patch": "@@ -809,14 +809,20 @@ vect_validate_multiplication (slp_tree_to_load_perm_map_t *perm_cache,\n       if (linear_loads_p (perm_cache, left_op[index2]) == PERM_EVENODD)\n \treturn true;\n     }\n-  else if (kind == PERM_EVENODD)\n+  else if (kind == PERM_EVENODD && !neg_first)\n     {\n-      if ((kind = linear_loads_p (perm_cache, left_op[index2])) == PERM_EVENODD)\n+      if ((kind = linear_loads_p (perm_cache, left_op[index2])) != PERM_EVENEVEN)\n \treturn false;\n       return true;\n     }\n-  else if (!neg_first)\n-    *conj_first_operand = true;\n+  else if (kind == PERM_EVENEVEN && neg_first)\n+    {\n+      if ((kind = linear_loads_p (perm_cache, left_op[index2])) != PERM_EVENODD)\n+\treturn false;\n+\n+      *conj_first_operand = true;\n+      return true;\n+    }\n   else\n     return false;\n \n@@ -949,7 +955,7 @@ complex_mul_pattern::matches (complex_operation_t op,\n \n   bool mul0 = vect_match_expression_p (l0node[0], MULT_EXPR);\n   bool mul1 = vect_match_expression_p (l0node[1], MULT_EXPR);\n-  if (!mul0 || !mul1)\n+  if (!mul0 && !mul1)\n     return IFN_LAST;\n \n   /* Now operand2+4 may lead to another expression.  */\n@@ -962,7 +968,7 @@ complex_mul_pattern::matches (complex_operation_t op,\n     {\n       auto vals = SLP_TREE_CHILDREN (l0node[0]);\n       /* Check if it's a multiply, otherwise no idea what this is.  */\n-      if (!vect_match_expression_p (vals[1], MULT_EXPR))\n+      if (!(mul0 = vect_match_expression_p (vals[1], MULT_EXPR)))\n \treturn IFN_LAST;\n \n       /* Check if the ADD is linear, otherwise it's not valid complex FMA.  */\n@@ -979,6 +985,8 @@ complex_mul_pattern::matches (complex_operation_t op,\n \n   if (left_op.length () != 2\n       || right_op.length () != 2\n+      || !mul0\n+      || !mul1\n       || linear_loads_p (perm_cache, left_op[1]) == PERM_ODDEVEN)\n     return IFN_LAST;\n \n@@ -993,7 +1001,7 @@ complex_mul_pattern::matches (complex_operation_t op,\n       if (!vect_validate_multiplication (perm_cache, left_op, PERM_EVENEVEN)\n \t  || vect_normalize_conj_loc (left_op))\n \treturn IFN_LAST;\n-      if (!mul0)\n+      if (add0)\n \tifn = IFN_COMPLEX_FMA;\n       else\n \tifn = IFN_COMPLEX_MUL;\n@@ -1005,7 +1013,7 @@ complex_mul_pattern::matches (complex_operation_t op,\n \t\t\t\t\t false))\n \treturn IFN_LAST;\n \n-      if(!mul0)\n+      if(add0)\n \tifn = IFN_COMPLEX_FMA_CONJ;\n       else\n \tifn = IFN_COMPLEX_MUL_CONJ;"}]}