{"sha": "ff0b6b992118d179779efac155b3484d32a1cf0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwYjZiOTkyMTE4ZDE3OTc3OWVmYWMxNTViMzQ4NGQzMmExY2YwZA==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2001-05-13T21:16:58Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2001-05-13T21:16:58Z"}, "message": "rtl.h (SYMBOL_REF_WEAK): New macro.\n\n        2001-05-13  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n        * rtl.h (SYMBOL_REF_WEAK): New macro.\n        * rtlanal.h (rtx_addr_can_trap): Use it, a weak SYMBOL_REF can trap.\n        * varasm.c (make_decl_rtl): Mark SYMBOL_REF weak if necessary.\n        * rtl.texi (SYMBOL_REF_WEAK): Document it.\n        * gcc.texi: Remove wrong description.\n\nFrom-SVN: r42046", "tree": {"sha": "944e76343c8f93f43eedc9b683710ba03f0a6739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944e76343c8f93f43eedc9b683710ba03f0a6739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff0b6b992118d179779efac155b3484d32a1cf0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0b6b992118d179779efac155b3484d32a1cf0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0b6b992118d179779efac155b3484d32a1cf0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0b6b992118d179779efac155b3484d32a1cf0d/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f22140248a891c4cdf46679cc9597f15107c5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f22140248a891c4cdf46679cc9597f15107c5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f22140248a891c4cdf46679cc9597f15107c5f3"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "6a7e6bc615e842b1691364ea3797049772fe66ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -1,3 +1,11 @@\n+2001-05-13  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* rtl.h (SYMBOL_REF_WEAK): New macro.\n+\t* rtlanal.h (rtx_addr_can_trap): Use it, a weak SYMBOL_REF can trap.\n+\t* varasm.c (make_decl_rtl): Mark SYMBOL_REF weak if necessary.\n+\t* rtl.texi (SYMBOL_REF_WEAK): Document it.\n+\t* gcc.texi: Remove wrong description.\n+\n 2001-05-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (STAMP): New macro.\n@@ -446,7 +454,7 @@ Mon May  7 09:30:14 2001  Jeffrey A Law  (law@cygnus.com)\n \t* simplify-rtx.c (simplify_binary_operation): Simplify ~a + 1\n \tinto -a.\n \n-2000-05-04  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+2001-05-04  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* config/rs6000/rs6000.md (ashldi3 splits): Guard with\n \tTARGET_POWERPC64."}, {"sha": "a2b90f1e217af7316291f129f271ad41e3d8e3e5", "filename": "gcc/gcc.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -2007,13 +2007,6 @@ return values which some callers may find useful; it makes no sense to\n clutter the program with a cast to @code{void} whenever the value isn't\n useful.\n \n-@item\n-Assuming (for optimization) that the address of an external symbol is\n-never zero.\n-\n-This assumption is false on certain systems when @samp{#pragma weak} is\n-used.\n-\n @item\n Making @samp{-fshort-enums} the default.\n "}, {"sha": "a9252105f5e2e2174a4530332d279df0fdec5b52", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -162,7 +162,8 @@ typedef struct rtx_def\n   unsigned int used : 1;\n   /* Nonzero if this rtx came from procedure integration.\n      In a REG, nonzero means this reg refers to the return value\n-     of the current function.  */\n+     of the current function.\n+     1 in a SYMBOL_REF if the symbol is weak.  */\n   unsigned integrated : 1;\n   /* 1 in an INSN or a SET if this rtx is related to the call frame,\n      either changing how we compute the frame address or saving and\n@@ -934,6 +935,9 @@ extern unsigned int subreg_regno \tPARAMS ((rtx));\n /* 1 means a SYMBOL_REF has been the library function in emit_library_call.  */\n #define SYMBOL_REF_USED(RTX) ((RTX)->used)\n \n+/* 1 means a SYMBOL_REF is weak.  */\n+#define SYMBOL_REF_WEAK(RTX) ((RTX)->integrated)\n+\n /* Define a macro to look for REG_INC notes,\n    but save time on machines where they never exist.  */\n "}, {"sha": "6c256b4ed2f5d9192a25a41c919bbfd11e92c740", "filename": "gcc/rtl.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -496,6 +496,13 @@ once.  Stored in the @code{used} field.\n In a @code{symbol_ref}, this is used as a flag for machine-specific purposes.\n Stored in the @code{volatil} field and printed as @samp{/v}.\n \n+@findex SYMBOL_REF_WEAK\n+@cindex @code{symbol_ref} and @samp{/i}\n+@cindex @code{integrated}, in @code{symbol_ref}\n+@item SYMBOL_REF_WEAK (@var{x})\n+In a @code{symbol_ref}, indicates that @var{x} has been declared weak.\n+Stored in the @code{integrated} field and printed as @samp{/i}.\n+\n @findex LABEL_OUTSIDE_LOOP_P\n @cindex @code{label_ref} and @samp{/s}\n @cindex @code{in_struct}, in @code{label_ref}"}, {"sha": "b0e2f4eeb0f0c5559e4853bf908dee37f3610901", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -207,11 +207,9 @@ rtx_addr_can_trap_p (x)\n   switch (code)\n     {\n     case SYMBOL_REF:\n+      return SYMBOL_REF_WEAK (x);\n+\n     case LABEL_REF:\n-      /* SYMBOL_REF is problematic due to the possible presence of\n-\t a #pragma weak, but to say that loads from symbols can trap is\n-\t *very* costly.  It's not at all clear what's best here.  For\n-\t now, we ignore the impact of #pragma weak.  */\n       return 0;\n \n     case REG:"}, {"sha": "9b2744a3fa5a28619e5e35154a88f6219e5c5c96", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0b6b992118d179779efac155b3484d32a1cf0d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ff0b6b992118d179779efac155b3484d32a1cf0d", "patch": "@@ -747,6 +747,7 @@ make_decl_rtl (decl, asmspec)\n \n   SET_DECL_RTL (decl, gen_rtx_MEM (DECL_MODE (decl),\n \t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, name)));\n+  SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = DECL_WEAK (decl);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     set_mem_attributes (DECL_RTL (decl), decl, 1);\n "}]}