{"sha": "292c92715b282f7c6617c94351d3e38ec027d637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyYzkyNzE1YjI4MmY3YzY2MTdjOTQzNTFkM2UzOGVjMDI3ZDYzNw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-10-20T20:55:14Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-10-20T22:46:53Z"}, "message": "Temporarily disable trap in in extract_range_builtin check.\n\nUntil we figure out how to adjust ubsan for symbolics, disable the trap.\n\n    gcc/ChangeLog:\n\n\tPR tree-optimization/97505\n\t* vr-values.c (vr_values::extract_range_basic): Trap if\n\tvr_values version disagrees with range_of_builtin_call.", "tree": {"sha": "0f6a71d61cdbe730b45c55932e207898051a5e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f6a71d61cdbe730b45c55932e207898051a5e62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292c92715b282f7c6617c94351d3e38ec027d637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c92715b282f7c6617c94351d3e38ec027d637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292c92715b282f7c6617c94351d3e38ec027d637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c92715b282f7c6617c94351d3e38ec027d637/comments", "author": null, "committer": null, "parents": [{"sha": "7cf256c3c8d9375fea7a0f02c128fa084ae53396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf256c3c8d9375fea7a0f02c128fa084ae53396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf256c3c8d9375fea7a0f02c128fa084ae53396"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "f0599b38517160ab52718ce5a09faab5bfcd6264", "filename": "gcc/testsuite/gfortran.dg/pr97505.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c92715b282f7c6617c94351d3e38ec027d637/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97505.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c92715b282f7c6617c94351d3e38ec027d637/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97505.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97505.f90?ref=292c92715b282f7c6617c94351d3e38ec027d637", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! { dg-options \"-Os -fsanitize=signed-integer-overflow\" }\n+!\n+! Test the fix for PR35824, in which the interface assignment and\n+! negation did not work correctly.\n+!\n+! Contributed by Rolf Roth <everyo@gmx.net>\n+!\n+module typemodule\n+  type alltype\n+     double precision :: a\n+     double precision,allocatable :: b(:)\n+  end type\n+  interface assignment(=)\n+    module procedure at_from_at\n+  end interface\n+  interface operator(-)\n+    module procedure  neg_at\n+  end interface\n+contains\n+  subroutine at_from_at(b,a)\n+    type(alltype), intent(in) :: a\n+    type(alltype), intent(out) :: b\n+    b%a=a%a\n+    allocate(b%b(2))\n+    b%b=a%b\n+  end subroutine at_from_at\n+  function neg_at(a) result(b)\n+    type(alltype), intent(in) :: a\n+    type(alltype) :: b\n+    b%a=-a%a\n+    allocate(b%b(2))\n+    b%b=-a%b\n+  end function neg_at\n+end module\n+  use typemodule\n+  type(alltype) t1,t2,t3\n+  allocate(t1%b(2))\n+  t1%a=0.5d0\n+  t1%b(1)=1d0\n+  t1%b(2)=2d0\n+  t2=-t1\n+  if (t2%a .ne. -0.5d0) STOP 1\n+  if (any(t2%b .ne. [-1d0, -2d0])) STOP 2\n+\n+  t1=-t1\n+  if (t1%a .ne. -0.5d0) STOP 3\n+  if (any(t1%b .ne. [-1d0, -2d0])) STOP 4\n+end"}, {"sha": "67c88006f1310fd524b37a5fd16256c8dd1c6a09", "filename": "gcc/vr-values.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292c92715b282f7c6617c94351d3e38ec027d637/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292c92715b282f7c6617c94351d3e38ec027d637/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=292c92715b282f7c6617c94351d3e38ec027d637", "patch": "@@ -1436,7 +1436,10 @@ vr_values::extract_range_basic (value_range_equiv *vr, gimple *stmt)\n       /* Assert that any ranges vr_values::extract_range_builtin gets\n \t are also handled by the ranger counterpart.  */\n       gcc_assert (range_of_builtin_call (*this, tmp, as_a<gcall *> (stmt)));\n+#if 0\n+      /* Disable this while PR97505 is resolved.  */\n       gcc_assert (tmp.equal_p (*vr, /*ignore_equivs=*/false));\n+#endif\n       return;\n     }\n   /* Handle extraction of the two results (result of arithmetics and"}]}