{"sha": "fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4MmYyZjFkZDM0YjBkZjcxMzdmODQ2MmExZmUyM2FlOThjMmRhYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-28T22:34:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-28T22:34:57Z"}, "message": "pa.c (store_reg): Do not call add_high_const generator directly.\n\n        * pa.c (store_reg): Do not call add_high_const generator directly.\n        (load_reg, set_reg_plus_d): Likewise.\n        * pa.md (add_high_const): No longer a named pattern.\n\nFrom-SVN: r28327", "tree": {"sha": "aa134d2319eb6787e5508c483b1e461fb698e477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa134d2319eb6787e5508c483b1e461fb698e477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/comments", "author": null, "committer": null, "parents": [{"sha": "2a0a6f69ea9d8f74cbfe8b04d545ac9744554148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0a6f69ea9d8f74cbfe8b04d545ac9744554148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0a6f69ea9d8f74cbfe8b04d545ac9744554148"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "cd22387d8f45c95df7b24d3de245f7ce26e2e6b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "patch": "@@ -1,5 +1,9 @@\n Wed Jul 28 13:18:35 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c (store_reg): Do not call add_high_const generator directly.\n+\t(load_reg, set_reg_plus_d): Likewise.\n+\t* pa.md (add_high_const): No longer a named pattern.\n+\n \t* pa.c (legitimize_address): Consistently use Pmode rather than\n \tSImode.  Do not call gen_pic2_highpart directly anymore.\n \t* pa.md (pic2_highpart): No longer a named pattern."}, {"sha": "a5753bfee474c883f87d2b429d900ab16469666b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "patch": "@@ -2453,7 +2453,7 @@ remove_useless_addtr_insns (insns, check_notes)\n */\n \n /* Emit RTL to store REG at the memory location specified by BASE+DISP.\n-   Handle case where DISP > 8k by using the add_high_const pattern.\n+   Handle case where DISP > 8k by using the add_high_const patterns.\n \n    Note in DISP > 8k case, we will leave the high part of the address\n    in %r1.  There is code in expand_hppa_{prologue,epilogue} that knows this.*/\n@@ -2471,9 +2471,9 @@ store_reg (reg, disp, base)\n     }\n   else\n     {\n-      emit_insn (gen_add_high_const (gen_rtx_REG (Pmode, 1),\n-\t\t\t\t     gen_rtx_REG (Pmode, base),\n-\t\t\t\t     GEN_INT (disp)));\n+      emit_move_insn (gen_rtx_REG (Pmode, 1),\n+\t\t      gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, base),\n+\t\t\t\t    gen_rtx_HIGH (Pmode, GEN_INT (disp))));\n       emit_move_insn (gen_rtx_MEM (word_mode,\n \t\t\t\t   gen_rtx_LO_SUM (Pmode,\n \t\t\t\t\t\t   gen_rtx_REG (Pmode, 1),\n@@ -2483,7 +2483,7 @@ store_reg (reg, disp, base)\n }\n \n /* Emit RTL to load REG from the memory location specified by BASE+DISP.\n-   Handle case where DISP > 8k by using the add_high_const pattern.\n+   Handle case where DISP > 8k by using the add_high_const patterns.\n \n    Note in DISP > 8k case, we will leave the high part of the address\n    in %r1.  There is code in expand_hppa_{prologue,epilogue} that knows this.*/\n@@ -2501,9 +2501,9 @@ load_reg (reg, disp, base)\n     }\n   else\n     {\n-      emit_insn (gen_add_high_const (gen_rtx_REG (Pmode, 1),\n-\t\t\t\t     gen_rtx_REG (Pmode, base),\n-\t\t\t\t     GEN_INT (disp)));\n+      emit_move_insn (gen_rtx_REG (Pmode, 1),\n+\t\t      gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, base),\n+\t\t\t\t    gen_rtx_HIGH (Pmode, GEN_INT (disp))));\n       emit_move_insn (gen_rtx_REG (word_mode, reg),\n \t\t      gen_rtx_MEM (word_mode,\n \t\t\t\t   gen_rtx_LO_SUM (Pmode,\n@@ -2513,7 +2513,7 @@ load_reg (reg, disp, base)\n }\n \n /* Emit RTL to set REG to the value specified by BASE+DISP.\n-   Handle case where DISP > 8k by using the add_high_const pattern.\n+   Handle case where DISP > 8k by using the add_high_const patterns.\n \n    Note in DISP > 8k case, we will leave the high part of the address\n    in %r1.  There is code in expand_hppa_{prologue,epilogue} that knows this.*/\n@@ -2530,9 +2530,9 @@ set_reg_plus_d(reg, base, disp)\n     }\n   else\n     {\n-      emit_insn (gen_add_high_const (gen_rtx_REG (Pmode, 1),\n-\t\t\t\t     gen_rtx_REG (Pmode, base),\n-\t\t\t\t     GEN_INT (disp)));\n+      emit_move_insn (gen_rtx_REG (Pmode, 1),\n+\t\t      gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, base),\n+\t\t\t\t    gen_rtx_HIGH (Pmode, GEN_INT (disp))));\n       emit_move_insn (gen_rtx_REG (Pmode, reg),\n \t\t      gen_rtx_LO_SUM (Pmode,\n \t\t\t\t      gen_rtx_REG (Pmode, 1),"}, {"sha": "b2c4c8cb444e77f35c16ddf4e4b7d17f24d6d01c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=fc82f2f1dd34b0df7137f8462a1fe23ae98c2dab", "patch": "@@ -1668,7 +1668,7 @@\n ;; Because of the additional %r1 pressure, we probably do not\n ;; want to use this in general code, so make it available\n ;; only after reload.\n-(define_insn \"add_high_const\"\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=!a,*r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t (high:SI (match_operand 2 \"const_int_operand\" \"\"))))]"}]}