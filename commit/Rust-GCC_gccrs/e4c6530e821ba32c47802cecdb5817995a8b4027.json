{"sha": "e4c6530e821ba32c47802cecdb5817995a8b4027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjNjUzMGU4MjFiYTMyYzQ3ODAyY2VjZGI1ODE3OTk1YThiNDAyNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T21:40:22Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T21:40:22Z"}, "message": "cmpstr.c: Fix excess failures caused by switch to GNU11.\n\ngcc/testsuite/\n\t* gcc.target/sh/cmpstr.c: Fix excess failures caused by switch to GNU11.\n\t* gcc.target/sh/strlen.c: Likewise.\n\t* gcc.target/sh/pr51244-13.c: Likewise.\n\t* gcc.target/sh/cmpstrn.c: Likewise.\n\t* gcc.target/sh/hiconst.c: Likewise.\n\t* gcc.target/sh/pr43417.c: Likewise.\n\nFrom-SVN: r216351", "tree": {"sha": "14203f6d4702eaa49ce53cac9df81962496a96b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14203f6d4702eaa49ce53cac9df81962496a96b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c6530e821ba32c47802cecdb5817995a8b4027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c6530e821ba32c47802cecdb5817995a8b4027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c6530e821ba32c47802cecdb5817995a8b4027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c6530e821ba32c47802cecdb5817995a8b4027/comments", "author": null, "committer": null, "parents": [{"sha": "957f47e6c874633c8a15b93793a314a86c5ab0b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957f47e6c874633c8a15b93793a314a86c5ab0b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957f47e6c874633c8a15b93793a314a86c5ab0b1"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "7f159c65e7f93bc9278d68bb19739ec9ab53173a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -1,3 +1,12 @@\n+2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* gcc.target/sh/cmpstr.c: Fix excess failures caused by switch to GNU11.\n+\t* gcc.target/sh/strlen.c: Likewise.\n+\t* gcc.target/sh/pr51244-13.c: Likewise.\n+\t* gcc.target/sh/cmpstrn.c: Likewise.\n+\t* gcc.target/sh/hiconst.c: Likewise.\n+\t* gcc.target/sh/pr43417.c: Likewise.\n+\n 2014-10-16  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/guality/pr43077-1.c: IPA ICF disabled"}, {"sha": "1b450899e1fd95774fc06a266497e9d893e5fdb0", "filename": "gcc/testsuite/gcc.target/sh/cmpstr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstr.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -7,20 +7,23 @@\n /* { dg-final { scan-assembler-times \"cmp/str\" 3 } } */\n /* { dg-final { scan-assembler-times \"tst\\t#3\" 2 } } */\n \n+int\n test00 (const char *s1, const char *s2)\n {\n   return __builtin_strcmp (s1, s2);\n }\n \n /* NB: This might change as further optimisation might detect the\n    max length and fallback to cmpstrn.  */\n-test01(const char *s2)\n+int\n+test01 (const char *s2)\n {\n   return __builtin_strcmp (\"abc\", s2);\n }\n \n /* Check that no test for alignment is needed.  */\n-test03(const char *s1, const char *s2)\n+int\n+test03 (const char *s1, const char *s2)\n {\n   return __builtin_strcmp (__builtin_assume_aligned (s1, 4),\n \t\t\t   __builtin_assume_aligned (s2, 4));"}, {"sha": "65cb9d6ba4ee795d2b70513bbe423438d33c05c3", "filename": "gcc/testsuite/gcc.target/sh/cmpstrn.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fcmpstrn.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -7,19 +7,22 @@\n /* { dg-final { scan-assembler-times \"cmp/str\" 1 } } */\n \n /* Test that cmp/str is not used for small lengths.  */\n-test01(const char *s1)\n+int\n+test01 (const char *s1)\n {\n   return __builtin_strncmp (s1, \"abcde\", 3);\n }\n \n /* Test that the cmp/str loop is used.  */\n-test02(const char *s1)\n+int\n+test02 (const char *s1)\n {\n   return __builtin_strncmp (s1, \"abcdefghi\", 8);\n }\n \n /* Test that no call is generated  */\n-test03(const char *s1, int n)\n+int\n+test03 (const char *s1, int n)\n {\n   return __builtin_strncmp (s1, \"abcde\", n);\n }"}, {"sha": "778bb8a3d2eeb932a6943c9a20679308af0550fc", "filename": "gcc/testsuite/gcc.target/sh/hiconst.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -4,15 +4,16 @@\n char a;\n int b;\n \n-foo(char *pt, int *pti)\n+int\n+foo (char *pt, int *pti)\n {\n   a = 0;\n   b = 0;\n   *pt = 0;\n   *pti = 0;\n }\n \n-rab(char *pt, int *pti)\n+int rab (char *pt, int *pti)\n {\n   pt[2] = 0;\n   pti[3] = 0;"}, {"sha": "67b1158950b3707fa5f276cfec11caa84d82d420", "filename": "gcc/testsuite/gcc.target/sh/pr43417.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr43417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr43417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr43417.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -2,11 +2,18 @@\n /* { dg-options \"-O2 -m4\" } */\n \n int pid_count = 0;\n-main (int argc, char *argv[])\n+\n+unsigned int getopt (int, const char**, const char*);\n+unsigned long long atoll (const char*);\n+int fork (void);\n+void kill (int, int);\n+\n+int\n+main (int argc, const char *argv[])\n {\n   unsigned int c;\n   unsigned long long maxbytes = 0;\n-  extern char *optarg;\n+  extern const char *optarg;\n   int i;\n   int pid_cntr;\n   int pid;"}, {"sha": "f9a851d68f18cf1e958f25e31cbf1bdca808949d", "filename": "gcc/testsuite/gcc.target/sh/pr51244-13.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-13.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -13,6 +13,10 @@\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 2 } } */\n \n+void printk (const char*, const char*, int);\n+void __constant_set_bit (int, unsigned long int*);\n+void __set_bit (int, unsigned long int*);\n+\n static __inline__ int\n __test_bit (unsigned long nr, volatile void * addr)\n {\n@@ -32,6 +36,8 @@ struct list_head\n   struct list_head *next, *prev;\n };\n \n+void list_add (struct list_head*, struct list_head*);\n+\n static inline void\n __list_del (struct list_head *prev, struct list_head *next)\n {"}, {"sha": "7f2d5195443cb43c0cc8c380979db502a4f0c884", "filename": "gcc/testsuite/gcc.target/sh/strlen.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c6530e821ba32c47802cecdb5817995a8b4027/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstrlen.c?ref=e4c6530e821ba32c47802cecdb5817995a8b4027", "patch": "@@ -7,13 +7,15 @@\n /* { dg-final { scan-assembler-times \"cmp/str\" 2 } } */\n /* { dg-final { scan-assembler-times \"tst\\t#3\" 1 } } */\n \n+int\n test00 (const char *s1)\n {\n   return __builtin_strlen (s1);\n }\n \n /* Check that no test for alignment is needed.  */\n-test03(const char *s1)\n+int\n+test03 (const char *s1)\n {\n   return __builtin_strlen (__builtin_assume_aligned (s1, 4));\n }"}]}