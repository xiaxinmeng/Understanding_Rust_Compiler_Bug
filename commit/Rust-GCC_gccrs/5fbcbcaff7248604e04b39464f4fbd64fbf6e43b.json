{"sha": "5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "node_id": "C_kwDOANBUbNoAKDVmYmNiY2FmZjcyNDg2MDRlMDRiMzk0NjRmNGZiZDY0ZmJmNmU0M2I", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-16T23:21:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-17T02:39:56Z"}, "message": "analyzer: const functions have no side effects [PR104576]\n\nPR analyzer/104576 tracks that we issue a false positive from\n-Wanalyzer-use-of-uninitialized-value for the reproducers of PR 63311\nwhen optimization is disabled.\n\nThe root cause is that the analyzer was considering that a call to\n__builtin_sinf could have side-effects.\n\nThis patch fixes things by generalizing the handling for \"pure\"\nfunctions to also consider \"const\" functions.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104576\n\t* region-model.cc: Include \"calls.h\".\n\t(region_model::on_call_pre): Use flags_from_decl_or_type to\n\tgeneralize check for DECL_PURE_P to also check for ECF_CONST.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104576\n\t* gcc.dg/analyzer/torture/uninit-pr63311.c: New test.\n\t* gcc.dg/analyzer/uninit-pr104576.c: New test.\n\t* gfortran.dg/analyzer/uninit-pr63311.f90: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "895f547813e8a260b8528c9adbdf655e591f674d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/895f547813e8a260b8528c9adbdf655e591f674d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3afcd2a380f2fb6c490f2c1318f76402eab43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3afcd2a380f2fb6c490f2c1318f76402eab43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3afcd2a380f2fb6c490f2c1318f76402eab43a"}], "stats": {"total": 195, "additions": 193, "deletions": 2}, "files": [{"sha": "d4d7816e0d5e9bc4a8b62db791760f2f8319d352", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "patch": "@@ -72,6 +72,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-phinodes.h\"\n #include \"tree-ssa-operands.h\"\n #include \"ssa-iterators.h\"\n+#include \"calls.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -1271,13 +1272,14 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t in region-model-impl-calls.cc.\n \t Having them split out into separate functions makes it easier\n \t to put breakpoints on the handling of specific functions.  */\n+      int callee_fndecl_flags = flags_from_decl_or_type (callee_fndecl);\n \n       if (fndecl_built_in_p (callee_fndecl, BUILT_IN_NORMAL)\n \t  && gimple_builtin_call_types_compatible_p (call, callee_fndecl))\n \tswitch (DECL_UNCHECKED_FUNCTION_CODE (callee_fndecl))\n \t  {\n \t  default:\n-\t    if (!DECL_PURE_P (callee_fndecl))\n+\t    if (!(callee_fndecl_flags & (ECF_CONST | ECF_PURE)))\n \t      unknown_side_effects = true;\n \t    break;\n \t  case BUILT_IN_ALLOCA:\n@@ -1433,7 +1435,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t  /* Handle in \"on_call_post\".  */\n \t}\n       else if (!fndecl_has_gimple_body_p (callee_fndecl)\n-\t       && !DECL_PURE_P (callee_fndecl)\n+\t       && (!(callee_fndecl_flags & (ECF_CONST | ECF_PURE)))\n \t       && !fndecl_built_in_p (callee_fndecl))\n \tunknown_side_effects = true;\n     }"}, {"sha": "a73289cb83f64be13a21edd6e4649fe52d475e8f", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-pr63311.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr63311.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr63311.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-pr63311.c?ref=5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "patch": "@@ -0,0 +1,134 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n+int foo ()\n+{\n+  static volatile int v = 42;\n+  int __result_foo;\n+\n+  __result_foo = (int) v;\n+  return __result_foo;\n+}\n+\n+void test (int * restrict n, int * restrict flag)\n+{\n+  int i;\n+  int j;\n+  int k;\n+  double t;\n+  int tt;\n+  double v;\n+\n+  if (*flag)\n+    {\n+      t = 4.2e+1;\n+      tt = foo ();\n+    }\n+  L_1: ;\n+  v = 0.0;\n+  {\n+    int D_3353;\n+\n+    D_3353 = *n;\n+    i = 1;\n+    if (i <= D_3353)\n+      {\n+        while (1)\n+          {\n+            {\n+              int D_3369;\n+\n+              v = 0.0;\n+              if (*flag)\n+                {\n+                  if (tt == i)\n+                    {\n+                      {\n+                        double M_0;\n+\n+                        M_0 = v;\n+                        if (t > M_0 || (int) (M_0 != M_0))\n+                          {\n+                            M_0 = t;\n+                          }\n+                        v = M_0;\n+                      }\n+                    }\n+                  L_5:;\n+                }\n+              L_4:;\n+              {\n+                int D_3359;\n+\n+                D_3359 = *n;\n+                j = 1;\n+                if (j <= D_3359)\n+                  {\n+                    while (1)\n+                      {\n+                        {\n+                          int D_3368;\n+\n+                          {\n+                            int D_3362;\n+\n+                            D_3362 = *n;\n+                            k = 1;\n+                            if (k <= D_3362)\n+                              {\n+                                while (1)\n+                                  {\n+                                    {\n+                                      int D_3367;\n+\n+                                      {\n+                                        double D_3366;\n+                                        double M_1;\n+\n+                                        M_1 = v;\n+                                        D_3366 = (double) __builtin_sinf ((float) (j * k));\n+                                        if (D_3366 > M_1 || (int) (M_1 != M_1))\n+                                          {\n+                                            M_1 = D_3366;\n+                                          }\n+                                        v = M_1;\n+                                      }\n+                                      L_8:;\n+                                      D_3367 = k == D_3362;\n+                                      k = k + 1;\n+                                      if (D_3367) goto L_9;\n+                                    }\n+                                  }\n+                              }\n+                            L_9:;\n+                          }\n+                          L_6:;\n+                          D_3368 = j == D_3359;\n+                          j = j + 1;\n+                          if (D_3368) goto L_7;\n+                        }\n+                      }\n+                  }\n+                L_7:;\n+              }\n+              L_2:;\n+              D_3369 = i == D_3353;\n+              i = i + 1;\n+              if (D_3369) goto L_3;\n+            }\n+          }\n+      }\n+    L_3:;\n+  }\n+}\n+\n+\n+int main ()\n+{\n+  int flag;\n+  int n;\n+\n+  n = 4;\n+  flag = 0;\n+  test (&n, &flag);\n+  return 0;\n+}"}, {"sha": "0b59acdb6e748b6fcd72ac47be5ca69810d8f6ca", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr104576.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr104576.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr104576.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr104576.c?ref=5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "patch": "@@ -0,0 +1,16 @@\n+float\n+test_1 (int *flag, float theta)\n+{\n+  float t;\n+  float f;\n+\n+  if (*flag)\n+    t = 2.0f;\n+\n+  f = __builtin_sinf (theta);\n+  \n+  if (*flag)\n+    f *= t;\n+\n+  return f;\n+}"}, {"sha": "34cc25da01dfc3078640599d3f173f733dd8d024", "filename": "gcc/testsuite/gfortran.dg/analyzer/uninit-pr63311.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Funinit-pr63311.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcbcaff7248604e04b39464f4fbd64fbf6e43b/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Funinit-pr63311.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Funinit-pr63311.f90?ref=5fbcbcaff7248604e04b39464f4fbd64fbf6e43b", "patch": "@@ -0,0 +1,39 @@\n+! { dg-additional-options \"-O0\" }\n+\n+MODULE M1\n+  IMPLICIT NONE\n+CONTAINS\n+  INTEGER FUNCTION foo()\n+     INTEGER, VOLATILE :: v=42\n+     foo=v\n+  END FUNCTION\n+  SUBROUTINE test(n,flag)\n+    INTEGER :: n,i,j,k,l,tt\n+    LOGICAL :: flag\n+    REAL(KIND=8) :: v,t\n+    IF (flag) THEN\n+      t=42\n+      tt=foo()\n+    ENDIF\n+    v=0\n+    DO i=1,n\n+       v=0\n+       IF (flag) THEN\n+          IF (tt==i) v=MAX(v,t)\n+       ENDIF\n+       DO j=1,n\n+        DO k=1,n\n+            v=MAX(v,sin(REAL(j*k)))\n+         ENDDO\n+       ENDDO\n+    ENDDO\n+  END SUBROUTINE\n+END MODULE M1\n+\n+USE M1\n+INTEGER :: n\n+LOGICAL :: flag\n+n=4\n+flag=.FALSE.\n+CALL test(n,flag)\n+END"}]}