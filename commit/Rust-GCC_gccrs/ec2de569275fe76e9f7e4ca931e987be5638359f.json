{"sha": "ec2de569275fe76e9f7e4ca931e987be5638359f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyZGU1NjkyNzVmZTc2ZTlmN2U0Y2E5MzFlOTg3YmU1NjM4MzU5Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-06T15:34:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-06T15:34:50Z"}, "message": "PR c++/87378 - bogus -Wredundant-move warning.\n\n\t* typeck.c (maybe_warn_pessimizing_move): See if the maybe-rvalue\n\toverload resolution would actually succeed.\n\n\t* g++.dg/cpp0x/Wredundant-move1.C (fn4): Drop dg-warning.\n\t* g++.dg/cpp0x/Wredundant-move7.C: New test.\n\nFrom-SVN: r269427", "tree": {"sha": "9678125a06a49ef50d03a5d32139f8fb18fad940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9678125a06a49ef50d03a5d32139f8fb18fad940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec2de569275fe76e9f7e4ca931e987be5638359f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2de569275fe76e9f7e4ca931e987be5638359f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2de569275fe76e9f7e4ca931e987be5638359f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2de569275fe76e9f7e4ca931e987be5638359f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4661094069c52581fda8e3ae6493131df7d0b1e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4661094069c52581fda8e3ae6493131df7d0b1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4661094069c52581fda8e3ae6493131df7d0b1e8"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "cfd86b250d7401a9fd79f33180c350d9011b3d32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec2de569275fe76e9f7e4ca931e987be5638359f", "patch": "@@ -1,3 +1,9 @@\n+2019-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87378 - bogus -Wredundant-move warning.\n+\t* typeck.c (maybe_warn_pessimizing_move): See if the maybe-rvalue\n+\toverload resolution would actually succeed.\n+\n 2019-03-05  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (is_really_empty_class): Add ignore_vptr parm."}, {"sha": "43ff3d63abd592f8b7ba87677e4138ea7f7c269b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ec2de569275fe76e9f7e4ca931e987be5638359f", "patch": "@@ -9429,10 +9429,24 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n \t     do maybe-rvalue overload resolution even without std::move.  */\n \t  else if (treat_lvalue_as_rvalue_p (arg, /*parm_ok*/true))\n \t    {\n-\t      auto_diagnostic_group d;\n-\t      if (warning_at (loc, OPT_Wredundant_move,\n-\t\t\t      \"redundant move in return statement\"))\n-\t\tinform (loc, \"remove %<std::move%> call\");\n+\t      /* Make sure that the overload resolution would actually succeed\n+\t\t if we removed the std::move call.  */\n+\t      tree t = convert_for_initialization (NULL_TREE, functype,\n+\t\t\t\t\t\t   move (arg),\n+\t\t\t\t\t\t   (LOOKUP_NORMAL\n+\t\t\t\t\t\t    | LOOKUP_ONLYCONVERTING\n+\t\t\t\t\t\t    | LOOKUP_PREFER_RVALUE),\n+\t\t\t\t\t\t   ICR_RETURN, NULL_TREE, 0,\n+\t\t\t\t\t\t   tf_none);\n+\t      /* If this worked, implicit rvalue would work, so the call to\n+\t\t std::move is redundant.  */\n+\t      if (t != error_mark_node)\n+\t\t{\n+\t\t  auto_diagnostic_group d;\n+\t\t  if (warning_at (loc, OPT_Wredundant_move,\n+\t\t\t\t  \"redundant move in return statement\"))\n+\t\t    inform (loc, \"remove %<std::move%> call\");\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "9b2951f631fb194ca79679aa83567cfd4abcfff2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec2de569275fe76e9f7e4ca931e987be5638359f", "patch": "@@ -1,3 +1,9 @@\n+2019-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87378 - bogus -Wredundant-move warning.\n+\t* g++.dg/cpp0x/Wredundant-move1.C (fn4): Drop dg-warning.\n+\t* g++.dg/cpp0x/Wredundant-move7.C: New test.\n+\n 2019-03-06  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/89551"}, {"sha": "e70f3cde625bb95f22a25c3bb55ee39212127a69", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move1.C?ref=ec2de569275fe76e9f7e4ca931e987be5638359f", "patch": "@@ -59,7 +59,8 @@ T\n fn4 (const T t)\n {\n   // t is const: will decay into copy despite std::move, so it's redundant.\n-  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+  // We used to warn about this, but no longer since c++/87378.\n+  return std::move (t);\n }\n \n int"}, {"sha": "015d7c4f7a447f075e865aa7b9133e15bb9cb5c8", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move7.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2de569275fe76e9f7e4ca931e987be5638359f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move7.C?ref=ec2de569275fe76e9f7e4ca931e987be5638359f", "patch": "@@ -0,0 +1,59 @@\n+// PR c++/87378\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct S1 { S1(S1 &&); };\n+struct S2 : S1 {};\n+\n+S1\n+f (S2 s)\n+{\n+  return std::move(s); // { dg-bogus \"redundant move in return statement\" }\n+}\n+\n+struct R1 {\n+  R1(R1 &&);\n+  R1(const R1 &&);\n+};\n+struct R2 : R1 {};\n+\n+R1\n+f2 (const R2 s)\n+{\n+  return std::move(s); // { dg-bogus \"redundant move in return statement\" }\n+}\n+\n+struct T1 {\n+  T1(const T1 &);\n+  T1(T1 &&);\n+  T1(const T1 &&);\n+};\n+struct T2 : T1 {};\n+\n+T1\n+f3 (const T2 s)\n+{\n+  // Without std::move: const T1 &\n+  // With std::move: const T1 &&\n+  return std::move(s); // { dg-bogus \"redundant move in return statement\" }\n+}"}]}