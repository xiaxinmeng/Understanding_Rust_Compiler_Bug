{"sha": "96ff8a163efd0c95b135cf1068ac3c6c8be8c414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmZjhhMTYzZWZkMGM5NWIxMzVjZjEwNjhhYzNjNmM4YmU4YzQxNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-27T02:08:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-27T02:08:23Z"}, "message": "Zero extend when generating a CONST_DOUBLE in convert_modes\n\nFrom-SVN: r13041", "tree": {"sha": "81306034c785e0d1483fbd24bb009979ceba0fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81306034c785e0d1483fbd24bb009979ceba0fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ff8a163efd0c95b135cf1068ac3c6c8be8c414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ff8a163efd0c95b135cf1068ac3c6c8be8c414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ff8a163efd0c95b135cf1068ac3c6c8be8c414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ff8a163efd0c95b135cf1068ac3c6c8be8c414/comments", "author": null, "committer": null, "parents": [{"sha": "8d998e52a0865dc4a0af5413e27f21fda8ccf235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d998e52a0865dc4a0af5413e27f21fda8ccf235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d998e52a0865dc4a0af5413e27f21fda8ccf235"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "abdfba723050deca4b2745c794808b5f0aacbbd7", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ff8a163efd0c95b135cf1068ac3c6c8be8c414/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ff8a163efd0c95b135cf1068ac3c6c8be8c414/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=96ff8a163efd0c95b135cf1068ac3c6c8be8c414", "patch": "@@ -1292,7 +1292,20 @@ convert_modes (mode, oldmode, x, unsignedp)\n   if (unsignedp && GET_MODE_CLASS (mode) == MODE_INT\n       && GET_MODE_BITSIZE (mode) == 2 * HOST_BITS_PER_WIDE_INT\n       && GET_CODE (x) == CONST_INT && INTVAL (x) < 0)\n-    return immed_double_const (INTVAL (x), (HOST_WIDE_INT) 0, mode);\n+    {\n+      HOST_WIDE_INT val = INTVAL (x);\n+\n+      if (oldmode != VOIDmode\n+\t  && HOST_BITS_PER_WIDE_INT > GET_MODE_BITSIZE (oldmode))\n+\t{\n+\t  int width = GET_MODE_BITSIZE (oldmode);\n+\n+\t  /* We need to zero extend VAL.  */\n+\t  val &= ((HOST_WIDE_INT) 1 << width) - 1;\n+\t}\n+\n+      return immed_double_const (val, (HOST_WIDE_INT) 0, mode);\n+    }\n \n   /* We can do this with a gen_lowpart if both desired and current modes\n      are integer, and this is either a constant integer, a register, or a"}]}