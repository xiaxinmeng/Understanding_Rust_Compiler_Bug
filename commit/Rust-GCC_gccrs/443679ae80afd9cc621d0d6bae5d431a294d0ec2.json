{"sha": "443679ae80afd9cc621d0d6bae5d431a294d0ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzNjc5YWU4MGFmZDljYzYyMWQwZDZiYWU1ZDQzMWEyOTRkMGVjMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-25T15:17:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-25T15:17:48Z"}, "message": "re PR c++/53565 (FAIL: libgomp.c++/for-7.C)\n\n\tPR c++/53565\n\t* pt.c (tsubst_omp_for_iterator): Simplify DECL_EXPR handling.\n\t(tsubst_expr) [OMP_FOR]: Here, too.\n\nFrom-SVN: r188939", "tree": {"sha": "853553ea31a3551d4a7d17c985d0352b6babfd6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853553ea31a3551d4a7d17c985d0352b6babfd6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/443679ae80afd9cc621d0d6bae5d431a294d0ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443679ae80afd9cc621d0d6bae5d431a294d0ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443679ae80afd9cc621d0d6bae5d431a294d0ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443679ae80afd9cc621d0d6bae5d431a294d0ec2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85d917484f771cd78ae2089f5d901d3c86f7ff6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d917484f771cd78ae2089f5d901d3c86f7ff6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d917484f771cd78ae2089f5d901d3c86f7ff6e"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "df3a9177b451220a251f63dfe747002180cee96c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=443679ae80afd9cc621d0d6bae5d431a294d0ec2", "patch": "@@ -1,3 +1,9 @@\n+2012-06-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53565\n+\t* pt.c (tsubst_omp_for_iterator): Simplify DECL_EXPR handling.\n+\t(tsubst_expr) [OMP_FOR]: Here, too.\n+\n 2012-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/53594"}, {"sha": "ad7134b4d978570d9ecae50cdb782517bed9f2ce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=443679ae80afd9cc621d0d6bae5d431a294d0ec2", "patch": "@@ -12659,22 +12659,24 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree initv,\n #define RECUR(NODE)\t\t\t\t\\\n   tsubst_expr ((NODE), args, complain, in_decl,\t\\\n \t       integral_constant_expression_p)\n-  tree decl, init, cond, incr, auto_node;\n+  tree decl, init, cond, incr;\n+  bool init_decl;\n \n   init = TREE_VEC_ELT (OMP_FOR_INIT (t), i);\n   gcc_assert (TREE_CODE (init) == MODIFY_EXPR);\n-  decl = RECUR (TREE_OPERAND (init, 0));\n+  decl = TREE_OPERAND (init, 0);\n   init = TREE_OPERAND (init, 1);\n-  auto_node = type_uses_auto (TREE_TYPE (decl));\n-  if (auto_node && init)\n+  /* Do this before substituting into decl to handle 'auto'.  */\n+  init_decl = (init && TREE_CODE (init) == DECL_EXPR);\n+  init = RECUR (init);\n+  decl = RECUR (decl);\n+  if (init_decl)\n     {\n-      tree init_expr = init;\n-      if (TREE_CODE (init_expr) == DECL_EXPR)\n-\tinit_expr = DECL_INITIAL (DECL_EXPR_DECL (init_expr));\n-      init_expr = RECUR (init_expr);\n-      TREE_TYPE (decl)\n-\t= do_auto_deduction (TREE_TYPE (decl), init_expr, auto_node);\n+      gcc_assert (!processing_template_decl);\n+      init = DECL_INITIAL (decl);\n+      DECL_INITIAL (decl) = NULL_TREE;\n     }\n+\n   gcc_assert (!type_dependent_expression_p (decl));\n \n   if (!CLASS_TYPE_P (TREE_TYPE (decl)))\n@@ -12695,7 +12697,7 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree initv,\n       return;\n     }\n \n-  if (init && TREE_CODE (init) != DECL_EXPR)\n+  if (init && !init_decl)\n     {\n       tree c;\n       for (c = *clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n@@ -13189,34 +13191,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \tcondv = make_tree_vec (TREE_VEC_LENGTH (OMP_FOR_INIT (t)));\n \tincrv = make_tree_vec (TREE_VEC_LENGTH (OMP_FOR_INIT (t)));\n \n+\tstmt = begin_omp_structured_block ();\n+\n \tfor (i = 0; i < TREE_VEC_LENGTH (OMP_FOR_INIT (t)); i++)\n \t  tsubst_omp_for_iterator (t, i, declv, initv, condv, incrv,\n \t\t\t\t   &clauses, args, complain, in_decl,\n \t\t\t\t   integral_constant_expression_p);\n \n-\tstmt = begin_omp_structured_block ();\n-\n-\tfor (i = 0; i < TREE_VEC_LENGTH (initv); i++)\n-\t  if (TREE_VEC_ELT (initv, i) == NULL\n-\t      || TREE_CODE (TREE_VEC_ELT (initv, i)) != DECL_EXPR)\n-\t    TREE_VEC_ELT (initv, i) = RECUR (TREE_VEC_ELT (initv, i));\n-\t  else if (CLASS_TYPE_P (TREE_TYPE (TREE_VEC_ELT (initv, i))))\n-\t    {\n-\t      tree init = RECUR (TREE_VEC_ELT (initv, i));\n-\t      gcc_assert (init == TREE_VEC_ELT (declv, i));\n-\t      TREE_VEC_ELT (initv, i) = NULL_TREE;\n-\t    }\n-\t  else\n-\t    {\n-\t      tree decl_expr = TREE_VEC_ELT (initv, i);\n-\t      tree init = DECL_INITIAL (DECL_EXPR_DECL (decl_expr));\n-\t      gcc_assert (init != NULL);\n-\t      TREE_VEC_ELT (initv, i) = RECUR (init);\n-\t      DECL_INITIAL (DECL_EXPR_DECL (decl_expr)) = NULL;\n-\t      RECUR (decl_expr);\n-\t      DECL_INITIAL (DECL_EXPR_DECL (decl_expr)) = init;\n-\t    }\n-\n \tpre_body = push_stmt_list ();\n \tRECUR (OMP_FOR_PRE_BODY (t));\n \tpre_body = pop_stmt_list (pre_body);"}, {"sha": "4441a29b7ec8097a64dc62698a46fc79964aae35", "filename": "gcc/testsuite/g++.dg/gomp/for-19.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443679ae80afd9cc621d0d6bae5d431a294d0ec2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C?ref=443679ae80afd9cc621d0d6bae5d431a294d0ec2", "patch": "@@ -26,8 +26,8 @@ template <typename T>\n void\n f3 (void)\n {\n-#pragma omp for\t\t// { dg-error \"forbids incrementing a pointer of type\" }\n-  for (T q = T (p); q < T (p + 4); q++)\n+#pragma omp for\n+  for (T q = T (p); q < T (p + 4); q++)\t// { dg-error \"forbids incrementing a pointer of type\" }\n     ;\n }\n "}]}