{"sha": "f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExNmIyZmNlM2E5YmJmZThkM2MxZDkxZTM3MDY0MGEyZGRiZTUwYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-10-20T04:16:02Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-10-20T04:16:02Z"}, "message": "re PR fortran/41706 ([OOP] Calling one TBP as an actual argument of another TBP)\n\n2009-10-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41706\n\t* resolve.c (resolve_arg_exprs): New function.\n\t(resolve_class_compcall): Call the above.\n\t(resolve_class_typebound_call): The same.\n\n2009-10-20  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41706\n\t* gfortran.dg/class_9 : New test.\n\nFrom-SVN: r153004", "tree": {"sha": "54f74b7bdddd62bec88cb3e0ebe881ed8385e3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f74b7bdddd62bec88cb3e0ebe881ed8385e3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/comments", "author": null, "committer": null, "parents": [{"sha": "91c29f68eff59da1492313465d69ee06fe0fc2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c29f68eff59da1492313465d69ee06fe0fc2f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c29f68eff59da1492313465d69ee06fe0fc2f0"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "0528e59310819bc1a40075750f38133603460d3b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "patch": "@@ -1,3 +1,10 @@\n+2009-10-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41706\n+\t* resolve.c (resolve_arg_exprs): New function.\n+\t(resolve_class_compcall): Call the above.\n+\t(resolve_class_typebound_call): The same.\n+\n 2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41586"}, {"sha": "42b6e76fc3a0106a50b7f22362d73d07b3b7eccd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "patch": "@@ -5275,6 +5275,22 @@ get_declared_from_expr (gfc_ref **class_ref, gfc_ref **new_ref,\n }\n \n \n+/* Resolve the argument expressions so that any arguments expressions\n+   that include class methods are resolved before the current call.\n+   This is necessary because of the static variables used in CLASS\n+   method resolution.  */\n+static void\n+resolve_arg_exprs (gfc_actual_arglist *arg)\n+{ \n+  /* Resolve the actual arglist expressions.  */\n+  for (; arg; arg = arg->next)\n+    {\n+      if (arg->expr)\n+\tgfc_resolve_expr (arg->expr);\n+    }\n+}\n+\n+\n /* Resolve a CLASS typebound function, or 'method'.  */\n static gfc_try\n resolve_class_compcall (gfc_expr* e)\n@@ -5295,7 +5311,10 @@ resolve_class_compcall (gfc_expr* e)\n     {\n       gfc_free_ref_list (new_ref);\n       return resolve_compcall (e, true);\n-    } \n+    }\n+\n+  /* Resolve the argument expressions,  */\n+  resolve_arg_exprs (e->value.function.actual); \n \n   /* Get the data component, which is of the declared type.  */\n   derived = declared->components->ts.u.derived;\n@@ -5349,6 +5368,9 @@ resolve_class_typebound_call (gfc_code *code)\n       return resolve_typebound_call (code);\n     } \n \n+  /* Resolve the argument expressions,  */\n+  resolve_arg_exprs (code->ext.actual); \n+\n   /* Get the data component, which is of the declared type.  */\n   derived = declared->components->ts.u.derived;\n "}, {"sha": "ad3b36061415bc4056c48a4cba24bddb076a70b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "patch": "@@ -1,3 +1,8 @@\n+2009-10-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41706\n+\t* gfortran.dg/class_9 : New test.\n+\n 2009-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/raw-string-1.c: New test."}, {"sha": "9e19869b219dc6fb8241cbbec47854c9b1eeeb47", "filename": "gcc/testsuite/gfortran.dg/class_9.f03", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_9.f03?ref=f116b2fce3a9bbfe8d3c1d91e370640a2ddbe50c", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+! Test the fix for PR41706, in which arguments of class methods that\n+! were themselves class methods did not work.\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+!\n+module m\n+type :: t\n+  real :: v = 1.5\n+contains\n+  procedure, nopass :: a\n+  procedure, nopass :: b\n+  procedure, pass :: c\n+end type\n+\n+contains\n+\n+  real function a (x)\n+    real :: x\n+    a = 2.*x\n+  end function\n+\n+  real function b (x)\n+    real :: x\n+    b = 3.*x\n+  end function\n+\n+  real function c (x)\n+    class (t) :: x\n+    c = 4.*x%v\n+  end function\n+\n+  subroutine s (x)\n+    class(t) :: x\n+    real :: r\n+    r = x%a (1.1)       ! worked\n+    if (r .ne. a (1.1)) call abort\n+\n+    r = x%a (b (1.2))   ! worked\n+    if (r .ne. a(b (1.2))) call abort\n+\n+    r = b ( x%a (1.3))  ! worked\n+    if (r .ne. b(a (1.3))) call abort\n+\n+    r = x%a(x%b (1.4))   ! failed\n+    if (r .ne. a(b (1.4))) call abort\n+\n+    r = x%a(x%c ())   ! failed\n+    if (r .ne. a(c (x))) call abort\n+\n+  end subroutine\n+\n+end\n+\n+  use m\n+  class(t),allocatable :: x\n+  allocate(x)\n+  call s (x)\n+end\n+! { dg-final { cleanup-modules \"m\" } }"}]}