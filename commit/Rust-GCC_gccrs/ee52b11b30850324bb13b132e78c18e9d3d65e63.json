{"sha": "ee52b11b30850324bb13b132e78c18e9d3d65e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1MmIxMWIzMDg1MDMyNGJiMTNiMTMyZTc4YzE4ZTlkM2Q2NWU2Mw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-08-01T12:23:17Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-08-01T12:23:17Z"}, "message": "extend.texi (AVR Built-in Functions): Document __builtin_avr_nops.\n\n\t* doc/extend.texi (AVR Built-in Functions): Document\n\t__builtin_avr_nops.\n\t* config/avr/builtins.def (NOPS): New.\n\t* config/avr/avr.c (avr_expand_nops): New static function.\n\t(avr_expand_builtin): Use it to handle AVR_BUILTIN_NOPS.\n\nFrom-SVN: r238947", "tree": {"sha": "4b91588e2f3f59ed75a7e09cde118171c919bf8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b91588e2f3f59ed75a7e09cde118171c919bf8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee52b11b30850324bb13b132e78c18e9d3d65e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee52b11b30850324bb13b132e78c18e9d3d65e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee52b11b30850324bb13b132e78c18e9d3d65e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee52b11b30850324bb13b132e78c18e9d3d65e63/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7481147265a13c906467edec41927b3f106fe558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7481147265a13c906467edec41927b3f106fe558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7481147265a13c906467edec41927b3f106fe558"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "96f3259637d14c742050987560f49a3744583eb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee52b11b30850324bb13b132e78c18e9d3d65e63", "patch": "@@ -1,3 +1,11 @@\n+2016-08-01  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* doc/extend.texi (AVR Built-in Functions): Document\n+\t__builtin_avr_nops.\n+\t* config/avr/builtins.def (NOPS): New.\n+\t* config/avr/avr.c (avr_expand_nops): New static function.\n+\t(avr_expand_builtin): Use it to handle AVR_BUILTIN_NOPS.\n+\n 2016-08-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_classify_address): Use DImode when"}, {"sha": "fba62d2c1653112f5e784ee532027f43240be66b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=ee52b11b30850324bb13b132e78c18e9d3d65e63", "patch": "@@ -12714,6 +12714,18 @@ avr_expand_delay_cycles (rtx operands0)\n }\n \n \n+static void\n+avr_expand_nops (rtx operands0)\n+{\n+  unsigned HOST_WIDE_INT n_nops = UINTVAL (operands0) & GET_MODE_MASK (HImode);\n+\n+  while (n_nops--)\n+    {\n+      emit_insn (gen_nopv (const1_rtx));\n+    }\n+}\n+\n+\n /* Compute the image of x under f, i.e. perform   x --> f(x)    */\n \n static int\n@@ -13388,6 +13400,19 @@ avr_expand_builtin (tree exp, rtx target,\n         return NULL_RTX;\n       }\n \n+    case AVR_BUILTIN_NOPS:\n+      {\n+        arg0 = CALL_EXPR_ARG (exp, 0);\n+        op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+\n+        if (!CONST_INT_P (op0))\n+          error (\"%s expects a compile time integer constant\", bname);\n+        else\n+          avr_expand_nops (op0);\n+\n+        return NULL_RTX;\n+      }\n+\n     case AVR_BUILTIN_INSERT_BITS:\n       {\n         arg0 = CALL_EXPR_ARG (exp, 0);"}, {"sha": "4088c0afc972aee97dfc8dc5bdbf30dbc9aeec5a", "filename": "gcc/config/avr/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=ee52b11b30850324bb13b132e78c18e9d3d65e63", "patch": "@@ -51,6 +51,7 @@ DEF_BUILTIN (FMULSU, 2, int_ftype_char_uchar,   fmulsu, NULL)\n /* More complex stuff that cannot be mapped 1:1 to an instruction.  */\n \n DEF_BUILTIN (DELAY_CYCLES, -1, void_ftype_ulong, nothing, NULL)\n+DEF_BUILTIN (NOPS,         -1, void_ftype_ulong, nothing, NULL)\n DEF_BUILTIN (INSERT_BITS, 3, uchar_ftype_ulong_uchar_uchar, insert_bits, NULL)\n DEF_BUILTIN (FLASH_SEGMENT, 1, char_ftype_const_memx_ptr, flash_segment, NULL)\n "}, {"sha": "5697f3a92e759064b639106e6694a31b094c9a9c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee52b11b30850324bb13b132e78c18e9d3d65e63/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ee52b11b30850324bb13b132e78c18e9d3d65e63", "patch": "@@ -12552,6 +12552,14 @@ __builtin_avr_insert_bits (0xffff3210, bits, val)\n __builtin_avr_insert_bits (0x01234567, bits, 0)\n @end smallexample\n \n+@smallexample\n+void __builtin_avr_nops (unsigned count)\n+@end smallexample\n+\n+@noindent\n+Insert @code{count} @code{NOP} instructions.\n+The number of instructions must be a compile-time integer constant.\n+\n @node Blackfin Built-in Functions\n @subsection Blackfin Built-in Functions\n "}]}