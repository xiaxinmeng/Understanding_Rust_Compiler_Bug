{"sha": "16c57fe28099740e06cb761b928b62a5a028bf66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjNTdmZTI4MDk5NzQwZTA2Y2I3NjFiOTI4YjYyYTVhMDI4YmY2Ng==", "commit": {"author": {"name": "Roberto Lublinerman", "email": "rluble@gmail.com", "date": "2011-08-03T00:37:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-08-03T00:37:26Z"}, "message": "gccgo:\tAdded code to dump the AST tree.\n\ngccgo:\tAdded code to dump the AST tree. The AST dump is\n\tactivated with -fgo-dump-ast.\n\tInitial version, it only dumps (most) constructs that\n\tare expected after the lowering transformation.\n\n\t* Make-lang.in (GO_OBJS): Add go/ast-dump.o.\n\t(go/ast-dump.o): New target.\n\t(go/expressions.o): Depend on go/gofrontend/ast-dump.h.\n\t(go/statements.o): Likewise.\n\nFrom-SVN: r177225", "tree": {"sha": "923d669821360649dcc148d547ce22a850f344c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/923d669821360649dcc148d547ce22a850f344c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c57fe28099740e06cb761b928b62a5a028bf66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c57fe28099740e06cb761b928b62a5a028bf66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c57fe28099740e06cb761b928b62a5a028bf66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c57fe28099740e06cb761b928b62a5a028bf66/comments", "author": {"login": "rluble", "id": 4175508, "node_id": "MDQ6VXNlcjQxNzU1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4175508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rluble", "html_url": "https://github.com/rluble", "followers_url": "https://api.github.com/users/rluble/followers", "following_url": "https://api.github.com/users/rluble/following{/other_user}", "gists_url": "https://api.github.com/users/rluble/gists{/gist_id}", "starred_url": "https://api.github.com/users/rluble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rluble/subscriptions", "organizations_url": "https://api.github.com/users/rluble/orgs", "repos_url": "https://api.github.com/users/rluble/repos", "events_url": "https://api.github.com/users/rluble/events{/privacy}", "received_events_url": "https://api.github.com/users/rluble/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44e7bfcb6fcfb7382b97f0b0793b1fd26c054e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e7bfcb6fcfb7382b97f0b0793b1fd26c054e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e7bfcb6fcfb7382b97f0b0793b1fd26c054e1d"}], "stats": {"total": 1866, "additions": 1861, "deletions": 5}, "files": [{"sha": "dcf420e364cb281aa856a59e572168c606dc8a5e", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -1,3 +1,10 @@\n+2011-08-02  Roberto Lublinerman  <rluble@gmail.com>\n+\n+\t* Make-lang.in (GO_OBJS): Add go/ast-dump.o.\n+\t(go/ast-dump.o): New target.\n+\t(go/expressions.o): Depend on go/gofrontend/ast-dump.h.\n+\t(go/statements.o): Likewise.\n+\n 2011-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* go-lang.c (go_langhook_init):"}, {"sha": "40fa30ceb9809a47a7f9031d0887b228493d4458", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -45,6 +45,7 @@ gccgo$(exeext): $(GCCGO_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n go-warn = $(STRICT_WARN)\n \n GO_OBJS = \\\n+\tgo/ast-dump.o \\\n \tgo/dataflow.o \\\n \tgo/export.o \\\n \tgo/expressions.o \\\n@@ -247,6 +248,9 @@ go/go-gcc.o: go/go-gcc.cc $(GO_SYSTEM_H) $(TREE_H) tree-iterator.h \\\n go/%.o: go/gofrontend/%.cc\n \t$(CXX) -c $(GOINCLUDES) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $< $(OUTPUT_OPTION)\n \n+go/ast-dump.o: go/gofrontend/ast-dump.cc $(GO_SYSTME_H) $(GO_GOGO_H) \\\n+\t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_TYPES_H) \\\n+\tgo/gofrontend/ast-dump.h $(GO_C_H) go/gofrontend/go-dump.h\n go/dataflow.o: go/gofrontend/dataflow.cc $(GO_SYSTEM_H) $(GO_GOGO_H) \\\n \t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) go/gofrontend/dataflow.h\n go/export.o: go/gofrontend/export.cc $(GO_SYSTEM_H) \\\n@@ -256,7 +260,8 @@ go/expressions.o: go/gofrontend/expressions.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \tintl.h $(TREE_H) $(GIMPLE_H) tree-iterator.h convert.h $(REAL_H) \\\n \trealmpfr.h $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n \tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n-\t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_EXPRESSIONS_H)\n+\t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_EXPRESSIONS_H) \\\n+\tgo/gofrontend/ast-dump.h\n go/go.o: go/gofrontend/go.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_LEX_H) \\\n \t$(GO_PARSE_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n@@ -285,7 +290,8 @@ go/runtime.o: go/gofrontend/runtime.cc $(GO_SYSTEM_H) $(GO_GOGO_H) \\\n \tgo/gofrontend/runtime.def\n go/statements.o: go/gofrontend/statements.cc $(GO_SYSTEM_H) \\\n \t$(GO_C_H) $(GO_TYPES_H) $(GO_EXPRESSIONS_H) $(GO_GOGO_H) \\\n-\t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_STATEMENTS_H)\n+\t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_STATEMENTS_H) \\\n+\tgo/gofrontend/ast-dump.h\n go/types.o: go/gofrontend/types.cc $(GO_SYSTEM_H) $(TOPLEV_H) intl.h $(TREE_H) \\\n \t$(GIMPLE_H) $(REAL_H) convert.h $(GO_C_H) $(GO_GOGO_H) \\\n \tgo/gofrontend/operator.h $(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) \\"}, {"sha": "d52d3676481761a1562e78ceeabf07262339cebb", "filename": "gcc/go/gofrontend/ast-dump.cc", "status": "added", "additions": 423, "deletions": 0, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -0,0 +1,423 @@\n+// ast-dump.cc -- AST debug dump.    -*- C++ -*-\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include \"go-system.h\"\n+\n+#include <iostream>\n+#include <fstream>\n+\n+#include \"gogo.h\"\n+#include \"expressions.h\"\n+#include \"statements.h\"\n+#include \"types.h\"\n+#include \"ast-dump.h\"\n+#include \"go-c.h\"\n+#include \"go-dump.h\"\n+\n+// The -fgo-dump-ast flag to activate AST dumps.\n+\n+Go_dump ast_dump_context_flag(\"ast\");\n+\n+// This class is used to traverse the tree to look for blocks and \n+// function headers.\n+\n+class Ast_dump_traverse_blocks_and_functions : public Traverse\n+{\n+ public:\n+  Ast_dump_traverse_blocks_and_functions(Ast_dump_context* ast_dump_context)\n+      : Traverse(traverse_blocks | traverse_functions),\n+      ast_dump_context_(ast_dump_context)\n+  { }\n+\n+ protected:\n+  int \n+  block(Block*);\n+ \n+  int\n+  function(Named_object*);\n+\n+ private:\n+  Ast_dump_context* ast_dump_context_;\n+};\n+\n+// This class is used to traverse the tree to look for statements.\n+\n+class Ast_dump_traverse_statements : public Traverse\n+{\n+ public:\n+  Ast_dump_traverse_statements(Ast_dump_context* ast_dump_context)\n+      : Traverse(traverse_statements),\n+      ast_dump_context_(ast_dump_context)\n+  { }\n+\n+ protected:\n+  int\n+  statement(Block*, size_t* pindex, Statement*);\n+\n+ private:\n+  Ast_dump_context* ast_dump_context_;\n+};\n+\n+// For each block we enclose it in brackets.\n+\n+int Ast_dump_traverse_blocks_and_functions::block(Block * block)\n+{\n+  this->ast_dump_context_->print_indent();\n+  this->ast_dump_context_->ostream() << \"{\" << std::endl;\n+  this->ast_dump_context_->indent();\n+\n+  // Dump statememts.\n+  Ast_dump_traverse_statements adts(this->ast_dump_context_);\n+  block->traverse(&adts);\n+\n+  this->ast_dump_context_->unindent();\n+  this->ast_dump_context_->print_indent();\n+  this->ast_dump_context_->ostream() << \"}\" << std::endl;\n+\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+ \n+// Dump each traversed statement.\n+\n+int\n+Ast_dump_traverse_statements::statement(Block* block, size_t* pindex,\n+                                        Statement* statement)\n+{\n+  statement->dump_statement(this->ast_dump_context_);\n+ \n+  if (statement->is_block_statement())\n+    {\n+      Ast_dump_traverse_blocks_and_functions adtbf(this->ast_dump_context_);\n+      statement->traverse(block, pindex, &adtbf);\n+    }\n+\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n+// Dump the function header.\n+\n+int\n+Ast_dump_traverse_blocks_and_functions::function(Named_object* no)\n+{\n+  this->ast_dump_context_->ostream() << no->name();\n+ \n+  go_assert(no->is_function());\n+  Function* func = no->func_value();\n+  \n+  this->ast_dump_context_->ostream() << \"(\"; \n+  this->ast_dump_context_->dump_typed_identifier_list(\n+                              func->type()->parameters());\n+  \n+  this->ast_dump_context_->ostream() << \")\"; \n+  \n+  Function::Results* res = func->result_variables();\n+  if (res != NULL && !res->empty())\n+    {  \n+      this->ast_dump_context_->ostream() << \" (\"; \n+      \n+      for (Function::Results::const_iterator it = res->begin(); \n+          it != res->end(); \n+          it++)\n+        {\n+          if (it != res->begin())\n+            this->ast_dump_context_->ostream() << \",\";\n+          Named_object* no = (*it);\n+          \n+          this->ast_dump_context_->ostream() << no->name() << \" \";\n+          go_assert(no->is_result_variable());\n+          Result_variable* resvar = no->result_var_value();\n+          \n+          this->ast_dump_context_->dump_type(resvar->type());\n+        \n+        }\n+      this->ast_dump_context_->ostream() << \")\";\n+    }\n+    \n+  this->ast_dump_context_->ostream() << \" : \";\n+  this->ast_dump_context_->dump_type(func->type());\n+  this->ast_dump_context_->ostream() << std::endl;\n+  \n+  return TRAVERSE_CONTINUE;\n+}\n+\n+// Class Ast_dump_context.\n+\n+Ast_dump_context::Ast_dump_context() : ostream_(NULL)\n+{\n+}\n+\n+// Dump files will be named %basename%.dump.ast\n+\n+const char* kAstDumpFileExtension = \".dump.ast\";\n+\n+// Dump the internal representation.\n+\n+void\n+Ast_dump_context::dump(Gogo* gogo, const char* basename)\n+{\n+  std::ofstream* out = new std::ofstream();\n+  std::string dumpname(basename);\n+  dumpname += \".dump.ast\";\n+  out->open(dumpname.c_str());\n+\n+  if (out->fail())\n+    {\n+      error(\"cannot open %s:%m, -fgo-dump-ast ignored\", dumpname.c_str());\n+      return;\n+    }\n+  \n+  this->indent_ = 0;\n+  this->gogo_ = gogo;\n+  this->ostream_ = out;\n+\n+  Ast_dump_traverse_blocks_and_functions adtbf(this);\n+  gogo->traverse(&adtbf);\n+\n+  out->close();\n+}\n+\n+// Dump a textual representation of a type to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_type(const Type* t)\n+{\n+  if (t == NULL)\n+    this->ostream() << \"(nil type)\";\n+  else\n+    // FIXME: write a type pretty printer instead of \n+    // using mangled names.\n+    this->ostream() << \"(\" << t->mangled_name(this->gogo_) <<  \")\"; \n+}\n+\n+// Dump a textual representation of a block to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_block(Block* b)\n+{\n+  Ast_dump_traverse_blocks_and_functions adtbf(this);\n+  b->traverse(&adtbf);\n+}\n+\n+// Dump a textual representation of an expression to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_expression(const Expression* e)\n+{\n+  e->dump_expression(this);\n+}\n+\n+// Dump a textual representation of an expression list to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_expression_list(const Expression_list* el)\n+{\n+  if (el == NULL)\n+    return;\n+  \n+  for (std::vector<Expression*>::const_iterator it = el->begin(); \n+       it != el->end();\n+       it++)\n+    {\n+      if ( it != el->begin())\n+        this->ostream() << \",\";\n+      (*it)->dump_expression(this);\n+    }\n+}\n+\n+// Dump a textual representation of a typed identifier to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_typed_identifier(const Typed_identifier* ti)\n+{\n+  this->ostream() << ti->name() << \" \";\n+  this->dump_type(ti->type());\n+}\n+\n+// Dump a textual representation of a typed identifier list to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_typed_identifier_list(\n+    const Typed_identifier_list* ti_list)         \n+{\n+  if (ti_list == NULL)\n+    return;\n+  \n+  for (Typed_identifier_list::const_iterator it = ti_list->begin(); \n+       it != ti_list->end(); \n+       it++)\n+    {\n+      if (it != ti_list->begin())\n+        this->ostream() << \",\";\n+      this->dump_typed_identifier(&(*it));\n+    }\n+}\n+\n+// Dump a textual representation of a temporary variable to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_temp_variable_name(const Statement* s)\n+{\n+  go_assert(s->classification() == Statement::STATEMENT_TEMPORARY);\n+  // Use the statement address as part of the name for the temporary variable.\n+  this->ostream() << \"tmp.\" << (uintptr_t) s;\n+}\n+\n+// Dump a textual representation of a label to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_label_name(const Unnamed_label* l)\n+{\n+  // Use the unnamed label address as part of the name for the temporary\n+  // variable.\n+  this->ostream() << \"label.\" << (uintptr_t) l;\n+}\n+\n+// Produce a textual representation of an operator symbol.\n+\n+static const char*\n+op_string(Operator op)\n+{\n+// FIXME: This should be in line with symbols that are parsed,\n+// exported and/or imported.\n+  switch (op)\n+    {\n+    case OPERATOR_PLUS:\n+      return \"+\";\n+    case OPERATOR_MINUS:\n+      return \"-\";\n+    case OPERATOR_NOT:\n+      return \"!\";\n+    case OPERATOR_XOR:\n+      return \"^\";\n+    case OPERATOR_AND:\n+      return \"&\";\n+    case OPERATOR_MULT:\n+      return \"*\";\n+    case OPERATOR_OROR:\n+      return \"||\";\n+    case OPERATOR_ANDAND:\n+      return \"&&\";\n+    case OPERATOR_EQEQ:\n+      return \"==\";\n+    case OPERATOR_NOTEQ:\n+      return \"!=\";\n+    case OPERATOR_LT:\n+      return \"<\";\n+    case OPERATOR_LE:\n+      return \"<=\";\n+    case OPERATOR_GT:\n+      return \">\";\n+    case OPERATOR_GE:\n+      return \">=\";\n+    case OPERATOR_DIV:\n+      return \"/\";\n+    case OPERATOR_MOD:\n+      return \"%\";\n+    case OPERATOR_LSHIFT:\n+      return \"<<\";\n+    case OPERATOR_RSHIFT:\n+      return \"//\";\n+    case OPERATOR_BITCLEAR:\n+      return \"&^\";\n+    case OPERATOR_CHANOP:\n+      return \"<-\";\n+    case OPERATOR_PLUSEQ:\n+      return \"+=\";\n+    case OPERATOR_MINUSEQ:\n+      return \"-=\";\n+    case OPERATOR_OREQ:\n+      return \"|=\";\n+    case OPERATOR_XOREQ:\n+      return \"^=\";\n+    case OPERATOR_MULTEQ:\n+      return \"*=\";\n+    case OPERATOR_DIVEQ:\n+      return \"/=\";\n+    case OPERATOR_MODEQ:\n+      return \"%=\";\n+    case OPERATOR_LSHIFTEQ:\n+      return \"<<=\";\n+    case OPERATOR_RSHIFTEQ:\n+      return \">>=\";\n+    case OPERATOR_ANDEQ:\n+      return \"&=\";\n+    case OPERATOR_BITCLEAREQ:\n+      return \"&^=\";\n+    case OPERATOR_PLUSPLUS:\n+      return \"++\";\n+    case OPERATOR_MINUSMINUS:\n+      return \"--\";\n+    case OPERATOR_COLON:\n+      return \":\";\n+    case OPERATOR_COLONEQ:\n+      return \":=\";\n+    case OPERATOR_SEMICOLON:\n+      return \";\";\n+    case OPERATOR_DOT:\n+      return \".\";\n+    case OPERATOR_ELLIPSIS:\n+      return \"...\";\n+    case OPERATOR_COMMA:\n+      return \",\";\n+    case OPERATOR_LPAREN:\n+      return \"(\";\n+    case OPERATOR_RPAREN:\n+      return \")\";\n+    case OPERATOR_LCURLY:\n+      return \"{\";\n+    case OPERATOR_RCURLY:\n+      return \"}\";\n+    case OPERATOR_LSQUARE:\n+      return \"[\";\n+    case OPERATOR_RSQUARE:\n+      return \"]\";\n+    default:\n+      go_unreachable();\n+    }\n+  return NULL;\n+}\n+\n+// Dump a textual representation of an operator to the\n+// the dump file.\n+\n+void\n+Ast_dump_context::dump_operator(Operator op)\n+{\n+  this->ostream() << op_string(op);\n+}\n+\n+// Size of a single indent.\n+\n+const int Ast_dump_context::offset_ = 2;\n+\n+// Print indenting spaces to dump file.\n+\n+void\n+Ast_dump_context::print_indent()\n+{\n+  for (int i = 0; i < this->indent_ * this->offset_; i++)\n+    this->ostream() << \" \";\n+}\n+\n+// Dump a textual representation of the ast to the\n+// the dump file.\n+\n+void Gogo::dump_ast(const char* basename)\n+{\n+  if (ast_dump_context_flag.is_enabled())\n+    {\n+      Ast_dump_context adc;\n+      adc.dump(this, basename);\n+    }\n+}"}, {"sha": "92a4915e625c93d6d099c2f81f3e94531c0298c5", "filename": "gcc/go/gofrontend/ast-dump.h", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.h?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -0,0 +1,96 @@\n+// ast-dump.h -- AST debug dump.    -*- C++ -*-\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_AST_DUMP_H\n+#define GO_AST_DUMP_H\n+\n+class Expression;\n+class Expression_list;\n+class Named_object;\n+class Statement;\n+class Gogo;\n+\n+// This class implements fgo-dump-ast. the\n+// Abstract syntax tree dump of the Go program.\n+\n+class Ast_dump_context \n+{\n+ public:\n+  Ast_dump_context();\n+\n+  // Initialize the dump context.\n+  void\n+  dump(Gogo*, const char* basename);\n+\n+  // Dump spaces to dumpfile as indentation.\n+  void\n+  print_indent();\n+  \n+  // Increase current indentation for print_indent().\n+  void\n+  indent() \n+  { ++this->indent_;}\n+\n+  // Decrease current indentation for print_indent().\n+  void\n+  unindent() \n+  { --this->indent_;}\n+\n+  // Get dump output stream.\n+  std::ostream& \n+  ostream() \n+  { return *this->ostream_;}\n+\n+  // Dump a Block to dump file.\n+  void \n+  dump_block(Block*);\n+  \n+  // Dump a type to dump file.\n+  void \n+  dump_type(const Type*);\n+  \n+  // Dump an expression to dump file.\n+  void \n+  dump_expression(const Expression*);\n+\n+  // Dump an expression list to dump file.\n+  void \n+  dump_expression_list(const Expression_list*);\n+  \n+  // Dump a typed identifier to dump file.\n+  void\n+  dump_typed_identifier(const  Typed_identifier*);\n+\n+  // Dump a typed identifier list to dump file.\n+  void\n+  dump_typed_identifier_list(const Typed_identifier_list*);\n+  \n+  // Dump temporary variable name to dump file.\n+  void\n+  dump_temp_variable_name(const Statement*);\n+\n+  // Dump unamed lable name to dump file.\n+  void\n+  dump_label_name(const Unnamed_label*);\n+\n+  // Dump operator symbol to dump file.\n+  void\n+  dump_operator(Operator);\n+    \n+ private:\n+   // Current indent level.\n+  int indent_;\n+  \n+  // Indentation offset.\n+  static const int offset_;\n+  \n+  // Stream on output dump file.\n+  std::ostream* ostream_;\n+    \n+  Gogo* gogo_;\n+};\n+\n+#endif  // GO_AST_DUMP_H"}, {"sha": "fbd716ab8e91fef1be60bde503de85e5ef5c716e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 588, "deletions": 0, "changes": 588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -36,6 +36,7 @@ extern \"C\"\n #include \"runtime.h\"\n #include \"backend.h\"\n #include \"expressions.h\"\n+#include \"ast-dump.h\"\n \n // Class Expression.\n \n@@ -790,6 +791,12 @@ Expression::check_bounds(tree val, tree bound_type, tree sofar,\n \t\t\t   sofar, ret);\n }\n \n+void\n+Expression::dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  this->do_dump_expression(ast_dump_context);\n+}\n+\n // Error expressions.  This are used to avoid cascading errors.\n \n class Error_expression : public Expression\n@@ -849,8 +856,19 @@ class Error_expression : public Expression\n   tree\n   do_get_tree(Translate_context*)\n   { return error_mark_node; }\n+\n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n };\n \n+// Dump the ast representation for an error expression to a dump context.\n+\n+void\n+Error_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"_Error_\" ;\n+}\n+\n Expression*\n Expression::make_error(source_location location)\n {\n@@ -894,11 +912,19 @@ Type_expression : public Expression\n   do_get_tree(Translate_context*)\n   { go_unreachable(); }\n \n+  void do_dump_expression(Ast_dump_context*) const;\n+ \n  private:\n   // The type which we are representing as an expression.\n   Type* type_;\n };\n \n+void\n+Type_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_type(this->type_);\n+}\n+\n Expression*\n Expression::make_type(Type* type, source_location location)\n {\n@@ -1018,6 +1044,14 @@ Var_expression::do_get_tree(Translate_context* context)\n   return ret;\n }\n \n+// Ast dump for variable expression.\n+\n+void\n+Var_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << this->variable_->name() ;\n+}\n+\n // Make a reference to a variable in an expression.\n \n Expression*\n@@ -1076,6 +1110,15 @@ Temporary_reference_expression::do_get_tree(Translate_context* context)\n   return ret;\n }\n \n+// Ast dump for temporary reference.\n+\n+void\n+Temporary_reference_expression::do_dump_expression(\n+                                Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_temp_variable_name(this->statement_);\n+}\n+\n // Make a reference to a temporary variable.\n \n Temporary_reference_expression*\n@@ -1113,6 +1156,9 @@ class Sink_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type of this sink variable.\n   Type* type_;\n@@ -1154,6 +1200,14 @@ Sink_expression::do_get_tree(Translate_context* context)\n   return this->var_;\n }\n \n+// Ast dump for sink expression.\n+\n+void\n+Sink_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"_\" ;\n+}\n+\n // Make a sink expression.\n \n Expression*\n@@ -1286,6 +1340,14 @@ Func_expression::do_get_tree(Translate_context* context)\n   return gogo->make_trampoline(fnaddr, closure_tree, this->location());\n }\n \n+// Ast dump for function.\n+\n+void\n+Func_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << this->function_->name() ;\n+}\n+\n // Make a reference to a function in an expression.\n \n Expression*\n@@ -1354,6 +1416,16 @@ Unknown_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n     }\n }\n \n+// Dump the ast representation for an unknown expression to a dump context.\n+\n+void\n+Unknown_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"_Unknown_(\" << this->named_object_->name()\n+\t\t\t      << \")\";\n+   \n+}\n+\n // Make a reference to an unknown name.\n \n Expression*\n@@ -1399,6 +1471,10 @@ class Boolean_expression : public Expression\n   do_export(Export* exp) const\n   { exp->write_c_string(this->val_ ? \"true\" : \"false\"); }\n \n+  void\n+  do_dump_expression(Ast_dump_context* ast_dump_context) const\n+  { ast_dump_context->ostream() << (this->val_ ? \"true\" : \"false\"); }\n+  \n  private:\n   // The constant.\n   bool val_;\n@@ -1566,6 +1642,15 @@ String_expression::do_import(Import* imp)\n   return Expression::make_string(val, imp->location());\n }\n \n+// Ast dump for string expression.\n+\n+void\n+String_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  // FIXME: Do proper backshlash quoting for this->val_\n+  ast_dump_context->ostream() << \"\\\"\" << this->val_ << \"\\\"\";\n+}\n+\n // Make a string expression.\n \n Expression*\n@@ -1595,6 +1680,10 @@ class Integer_expression : public Expression\n   static void\n   export_integer(Export* exp, const mpz_t val);\n \n+  // Write VAL to dump context.\n+  static void\n+  dump_integer(Ast_dump_context* ast_dump_context, const mpz_t val);\n+\n  protected:\n   bool\n   do_is_constant() const\n@@ -1623,6 +1712,9 @@ class Integer_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The integer value.\n   mpz_t val_;\n@@ -1871,6 +1963,28 @@ Integer_expression::do_import(Import* imp)\n     }\n }\n \n+// Write integer to dump context.\n+\n+void\n+Integer_expression::dump_integer(Ast_dump_context* ast_dump_context, \n+                                 const mpz_t val)\n+{\n+  // FIXME: refactor this code so that is used both by dump and export. Extract\n+  // a common interface for Ast_dump_context and Export.\n+  char* s = mpz_get_str(NULL, 10, val);\n+  ast_dump_context->ostream() << s ;\n+  free(s);\n+}\n+\n+\n+// Ast dump for integer expression.\n+\n+void\n+Integer_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  Integer_expression::dump_integer(ast_dump_context, this->val_);\n+}\n+\n // Build a new integer value.\n \n Expression*\n@@ -1903,6 +2017,10 @@ class Float_expression : public Expression\n   // Write VAL to export data.\n   static void\n   export_float(Export* exp, const mpfr_t val);\n+  \n+  // Write VAL to dump file.\n+  static void\n+  dump_float(Ast_dump_context* ast_dump_context, const mpfr_t val);\n \n  protected:\n   bool\n@@ -1932,6 +2050,9 @@ class Float_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The floating point value.\n   mpfr_t val_;\n@@ -2109,6 +2230,35 @@ Float_expression::do_export(Export* exp) const\n   exp->write_c_string(\" \");\n }\n \n+// Write  a floating point number to a dump context.\n+\n+void\n+Float_expression::dump_float(Ast_dump_context* ast_dump_context, \n+                                  const mpfr_t val)\n+{\n+  // FIXME: this code should be refactored so that the same code is used here\n+  // and in export_float.\n+\n+  mp_exp_t exponent;\n+  char* s = mpfr_get_str(NULL, &exponent, 10, 0, val, GMP_RNDN);\n+  if (*s == '-')\n+    ast_dump_context->ostream() << \"-\";\n+  ast_dump_context->ostream() << \"0.\";\n+  ast_dump_context->ostream() << (*s == '-' ? s + 1 : s);\n+  mpfr_free_str(s);\n+  char buf[30];\n+  snprintf(buf, sizeof buf, \"E%ld\", exponent);\n+  ast_dump_context->ostream()  << buf;\n+}\n+\n+// Dump a floating point number to the dump file.\n+\n+void\n+Float_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  Float_expression::dump_float(ast_dump_context, this->val_);\n+}\n+\n // Make a float expression.\n \n Expression*\n@@ -2143,6 +2293,11 @@ class Complex_expression : public Expression\n   static void\n   export_complex(Export* exp, const mpfr_t real, const mpfr_t val);\n \n+  // Write REAL/IMAG to dump context.\n+  static void\n+  dump_complex(Ast_dump_context* ast_dump_context, \n+\t       const mpfr_t real, const mpfr_t val);\n+  \n  protected:\n   bool\n   do_is_constant() const\n@@ -2173,6 +2328,9 @@ class Complex_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The real part.\n   mpfr_t real_;\n@@ -2342,6 +2500,34 @@ Complex_expression::do_export(Export* exp) const\n   exp->write_c_string(\" \");\n }\n \n+// Write a complex number to a dump context.\n+\n+void\n+Complex_expression::dump_complex(Ast_dump_context* ast_dump_context,\n+                                    const mpfr_t real, const mpfr_t imag) \n+{\n+  // FIXME: this code should be refactored so that it is used both here\n+  // and by export _complex\n+  if (!mpfr_zero_p(real))\n+    {\n+      Float_expression::dump_float(ast_dump_context, real);\n+      if (mpfr_sgn(imag) > 0)\n+        ast_dump_context->ostream() << \"+\";\n+    }\n+  Float_expression::dump_float(ast_dump_context, imag);\n+  ast_dump_context->ostream() << \"i\";\n+}\n+\n+// Dump a complex expression to the dump file.\n+\n+void\n+Complex_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  Complex_expression::dump_complex(ast_dump_context, \n+                                      this->real_,\n+                                      this->imag_);\n+}\n+\n // Make a complex expression.\n \n Expression*\n@@ -2443,6 +2629,9 @@ class Const_expression : public Expression\n   do_export(Export* exp) const\n   { this->constant_->const_value()->expr()->export_expression(exp); }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The constant.\n   Named_object* constant_;\n@@ -2824,6 +3013,14 @@ Const_expression::do_get_tree(Translate_context* context)\n   return ret;\n }\n \n+// Dump ast representation for constant expression.\n+\n+void\n+Const_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << this->constant_->name();\n+}\n+\n // Make a reference to a constant in an expression.\n \n Expression*\n@@ -2905,6 +3102,10 @@ class Nil_expression : public Expression\n   void\n   do_export(Export* exp) const\n   { exp->write_c_string(\"nil\"); }\n+\n+  void\n+  do_dump_expression(Ast_dump_context* ast_dump_context) const\n+  { ast_dump_context->ostream() << \"nil\"; }\n };\n \n // Import a nil expression.\n@@ -2945,6 +3146,10 @@ class Iota_expression : public Parser_expression\n   Expression*\n   do_copy()\n   { go_unreachable(); }\n+  \n+  void\n+  do_dump_expression(Ast_dump_context* ast_dump_context) const\n+  { ast_dump_context->ostream() << \"iota\"; } \n };\n \n // Make an iota expression.  This is only called for one case: the\n@@ -3040,6 +3245,9 @@ class Type_conversion_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type to convert to.\n   Type* type_;\n@@ -3570,6 +3778,18 @@ Type_conversion_expression::do_import(Import* imp)\n   return Expression::make_cast(type, val, imp->location());\n }\n \n+// Dump ast representation for a type conversion expression.\n+\n+void\n+Type_conversion_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \"(\";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \") \";\n+}\n+\n // Make a type cast expression.\n \n Expression*\n@@ -3614,6 +3834,9 @@ class Unsafe_type_conversion_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type to convert to.\n   Type* type_;\n@@ -3698,6 +3921,18 @@ Unsafe_type_conversion_expression::do_get_tree(Translate_context* context)\n     return fold_convert_loc(loc, type_tree, expr_tree);\n }\n \n+// Dump ast representation for an unsafe type conversion expression.\n+\n+void\n+Unsafe_type_conversion_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \"(\";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \") \";\n+}\n+\n // Make an unsafe type conversion expression.\n \n Expression*\n@@ -3801,6 +4036,9 @@ class Unary_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The unary operator to apply.\n   Operator op_;\n@@ -4412,6 +4650,17 @@ Unary_expression::do_import(Import* imp)\n   return Expression::make_unary(op, expr, imp->location());\n }\n \n+// Dump ast representation of an unary expression.\n+\n+void\n+Unary_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_operator(this->op_);\n+  ast_dump_context->ostream() << \"(\";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \") \";\n+}\n+\n // Make a unary expression.\n \n Expression*\n@@ -6311,6 +6560,20 @@ Binary_expression::do_import(Import* imp)\n   return Expression::make_binary(op, left, right, imp->location());\n }\n \n+// Dump ast representation of a binary expression.\n+\n+void\n+Binary_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"(\";\n+  ast_dump_context->dump_expression(this->left_);\n+  ast_dump_context->ostream() << \" \";\n+  ast_dump_context->dump_operator(this->op_);\n+  ast_dump_context->ostream() << \" \";\n+  ast_dump_context->dump_expression(this->right_);\n+  ast_dump_context->ostream() << \") \";\n+}\n+\n // Make a binary expression.\n \n Expression*\n@@ -6643,6 +6906,26 @@ Bound_method_expression::do_get_tree(Translate_context*)\n   return error_mark_node;\n }\n \n+// Dump ast representation of a bound method expression.\n+\n+void\n+Bound_method_expression::do_dump_expression(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  if (this->expr_type_ != NULL)\n+    ast_dump_context->ostream() << \"(\";\n+  ast_dump_context->dump_expression(this->expr_); \n+  if (this->expr_type_ != NULL) \n+    {\n+      ast_dump_context->ostream() << \":\";\n+      ast_dump_context->dump_type(this->expr_type_);\n+      ast_dump_context->ostream() << \")\";\n+    }\n+    \n+  ast_dump_context->ostream() << \".\";\n+  ast_dump_context->dump_expression(method_);\n+}\n+\n // Make a method expression.\n \n Bound_method_expression*\n@@ -9298,6 +9581,19 @@ Call_expression::set_results(Translate_context* context, tree call_tree)\n   return save_expr(stmt_list);\n }\n \n+// Dump ast representation for a call expressin.\n+\n+void\n+Call_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  this->fn_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \"(\";\n+  if (args_ != NULL)\n+    ast_dump_context->dump_expression_list(this->args_);\n+\n+  ast_dump_context->ostream() << \") \";\n+}\n+\n // Make a call expression.\n \n Call_expression*\n@@ -9344,6 +9640,9 @@ class Call_result_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The underlying call expression.\n   Expression* call_;\n@@ -9443,6 +9742,19 @@ Call_result_expression::do_get_tree(Translate_context* context)\n   return ref->get_tree(context);\n }\n \n+// Dump ast representation for a call result expression.\n+\n+void\n+Call_result_expression::do_dump_expression(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  // FIXME: Wouldn't it be better if the call is assigned to a temporary \n+  // (struct) and the fields are referenced instead.\n+  ast_dump_context->ostream() << this->index_ << \"@(\";\n+  ast_dump_context->dump_expression(this->call_);\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Make a reference to a single result of a call which returns\n // multiple results.\n \n@@ -9519,6 +9831,36 @@ Index_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n     }\n }\n \n+// Write an indexed expression (expr[expr:expr] or expr[expr]) to a\n+// dump context\n+\n+void\n+Index_expression::dump_index_expression(Ast_dump_context* ast_dump_context, \n+\t\t\t\t\tconst Expression* expr, \n+\t\t\t\t\tconst Expression* start,\n+\t\t\t\t\tconst Expression* end)\n+{\n+  expr->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \"[\";\n+  start->dump_expression(ast_dump_context);\n+  if (end != NULL)\n+    {\n+      ast_dump_context->ostream() << \":\";\n+      end->dump_expression(ast_dump_context);\n+    }\n+  ast_dump_context->ostream() << \"]\";\n+}\n+\n+// Dump ast representation for an index expression.\n+\n+void\n+Index_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  Index_expression::dump_index_expression(ast_dump_context, this->left_, \n+                                          this->start_, this->end_);\n+}\n+\n // Make an index expression.\n \n Expression*\n@@ -9573,6 +9915,9 @@ class Array_index_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The array we are getting a value from.\n   Expression* array_;\n@@ -9922,6 +10267,16 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \t\t\t constructor);\n }\n \n+// Dump ast representation for an array index expression.\n+\n+void\n+Array_index_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  Index_expression::dump_index_expression(ast_dump_context, this->array_, \n+                                          this->start_, this->end_);\n+}\n+\n // Make an array index expression.  END may be NULL.\n \n Expression*\n@@ -9976,6 +10331,9 @@ class String_index_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The string we are getting a value from.\n   Expression* string_;\n@@ -10176,6 +10534,16 @@ String_index_expression::do_get_tree(Translate_context* context)\n     }\n }\n \n+// Dump ast representation for a string index expression.\n+\n+void\n+String_index_expression::do_dump_expression(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  Index_expression::dump_index_expression(ast_dump_context, this->string_, \n+\t\t\t\t\t  this->start_, this->end_);\n+}\n+\n // Make a string index expression.  END may be NULL.\n \n Expression*\n@@ -10390,6 +10758,16 @@ Map_index_expression::get_value_pointer(Translate_context* context,\n   return ret;\n }\n \n+// Dump ast representation for a map index expression\n+\n+void\n+Map_index_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  Index_expression::dump_index_expression(ast_dump_context, \n+                                          this->map_, this->index_, NULL);\n+}\n+\n // Make a map index expression.\n \n Map_index_expression*\n@@ -10456,6 +10834,16 @@ Field_reference_expression::do_get_tree(Translate_context* context)\n \t\tNULL_TREE);\n }\n \n+// Dump ast representation for a field reference expression.\n+\n+void\n+Field_reference_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  this->expr_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \".\" <<  this->field_index_;\n+}\n+\n // Make a reference to a qualified identifier in an expression.\n \n Field_reference_expression*\n@@ -10602,6 +10990,16 @@ Interface_field_reference_expression::do_get_tree(Translate_context*)\n   go_unreachable();\n }\n \n+// Dump ast representation for an interface field reference.\n+\n+void\n+Interface_field_reference_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  this->expr_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \".\" << this->name_;\n+}\n+\n // Make a reference to a field in an interface.\n \n Expression*\n@@ -10639,6 +11037,9 @@ class Selector_expression : public Parser_expression\n \t\t\t\t   this->location());\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context* ast_dump_context) const;\n+\n  private:\n   Expression*\n   lower_method_expression(Gogo*);\n@@ -10859,6 +11260,17 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   return Expression::make_func_reference(no, NULL, location);\n }\n \n+// Dump the ast for a selector expression.\n+\n+void\n+Selector_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  ast_dump_context->dump_expression(this->left_);\n+  ast_dump_context->ostream() << \".\";\n+  ast_dump_context->ostream() << this->name_;\n+}\n+                      \n // Make a selector expression.\n \n Expression*\n@@ -10898,6 +11310,9 @@ class Allocation_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The type we are allocating.\n   Type* type_;\n@@ -10919,6 +11334,17 @@ Allocation_expression::do_get_tree(Translate_context* context)\n   return fold_convert(build_pointer_type(type_tree), space);\n }\n \n+// Dump ast representation for an allocation expression.\n+\n+void\n+Allocation_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  ast_dump_context->ostream() << \"new(\";\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Make an allocation expression.\n \n Expression*\n@@ -10973,6 +11399,9 @@ class Struct_construction_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type of the struct to construct.\n   Type* type_;\n@@ -11185,6 +11614,19 @@ Struct_construction_expression::do_export(Export* exp) const\n   exp->write_c_string(\")\");\n }\n \n+// Dump ast representation of a struct construction expression.\n+\n+void\n+Struct_construction_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \"{\";\n+  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->ostream() << \"}\";\n+}\n+\n // Make a struct composite literal.  This used by the thunk code.\n \n Expression*\n@@ -11249,6 +11691,9 @@ class Array_construction_expression : public Expression\n   tree\n   get_constructor_tree(Translate_context* context, tree type_tree);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type of the array to construct.\n   Type* type_;\n@@ -11422,6 +11867,19 @@ Array_construction_expression::do_export(Export* exp) const\n   exp->write_c_string(\")\");\n }\n \n+// Dump ast representation of an array construction expressin.\n+\n+void\n+Array_construction_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \"{\" ;\n+  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->ostream() << \"}\" ;\n+\n+}\n+\n // Construct a fixed array.\n \n class Fixed_array_construction_expression :\n@@ -11688,6 +12146,9 @@ class Map_construction_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The type of the map to construct.\n   Type* type_;\n@@ -11941,6 +12402,18 @@ Map_construction_expression::do_export(Export* exp) const\n   exp->write_c_string(\")\");\n }\n \n+// Dump ast representation for a map construction expression.\n+\n+void\n+Map_construction_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  // FIXME: We should print key:value pairs here.\n+  ast_dump_context->ostream() << \"{\" ;\n+  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->ostream() << \"}\";\n+}\n+\n // A general composite literal.  This is lowered to a type specific\n // version.\n \n@@ -11971,6 +12444,9 @@ class Composite_literal_expression : public Parser_expression\n \t\t\t\t\t    this->location());\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   Expression*\n   lower_struct(Gogo*, Type*);\n@@ -12382,6 +12858,20 @@ Composite_literal_expression::lower_map(Gogo* gogo, Named_object* function,\n   return new Map_construction_expression(type, this->vals_, location);\n }\n \n+// Dump ast representation for a composite literal expression.\n+\n+void\n+Composite_literal_expression::do_dump_expression(\n+                               Ast_dump_context* ast_dump_context) const\n+{\n+  // FIXME: We should print colons if this->has_keys_ is true\n+  ast_dump_context->ostream() << \"composite_literal(\" ;\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \", {\";\n+  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->ostream() << \"})\";\n+}\n+\n // Make a composite literal expression.\n \n Expression*\n@@ -12556,6 +13046,17 @@ Type_guard_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t      this->location());\n }\n \n+// Dump ast representation for a type guard expression.\n+\n+void\n+Type_guard_expression::do_dump_expression(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  this->expr_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() <<  \".\";\n+  ast_dump_context->dump_type(this->type_);\n+}\n+\n // Make a type guard expression.\n \n Expression*\n@@ -12607,6 +13108,9 @@ class Heap_composite_expression : public Expression\n   do_export(Export*) const\n   { go_unreachable(); }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The composite literal which is being put on the heap.\n   Expression* expr_;\n@@ -12635,6 +13139,17 @@ Heap_composite_expression::do_get_tree(Translate_context* context)\n   return ret;\n }\n \n+// Dump ast representation for a heap composite expression.\n+\n+void\n+Heap_composite_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"&(\";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Allocate a composite literal on the heap.\n \n Expression*\n@@ -12702,6 +13217,15 @@ Receive_expression::do_get_tree(Translate_context* context)\n \t\t\t\t    this->for_select_, this->location());\n }\n \n+// Dump ast representation for a receive expression.\n+\n+void\n+Receive_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \" <- \" ;\n+  ast_dump_context->dump_expression(channel_);\n+}\n+\n // Make a receive expression.\n \n Receive_expression*\n@@ -12741,11 +13265,23 @@ class Type_descriptor_expression : public Expression\n \t\t\t\t\t\tthis->location());\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type for which this is the descriptor.\n   Type* type_;\n };\n \n+// Dump ast representation for a type descriptor expression.\n+\n+void\n+Type_descriptor_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->dump_type(this->type_);\n+}\n+\n // Make a type descriptor expression.\n \n Expression*\n@@ -12783,6 +13319,9 @@ class Type_info_expression : public Expression\n   tree\n   do_get_tree(Translate_context* context);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The type for which we are getting information.\n   Type* type_;\n@@ -12834,6 +13373,23 @@ Type_info_expression::do_get_tree(Translate_context* context)\n     }\n }\n \n+// Dump ast representation for a type info expression.\n+\n+void\n+Type_info_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"typeinfo(\";\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \",\";\n+  ast_dump_context->ostream() << \n+    (this->type_info_ == TYPE_INFO_ALIGNMENT ? \"alignment\" \n+    : this->type_info_ == TYPE_INFO_FIELD_ALIGNMENT ? \"field alignment\"\n+    : this->type_info_ == TYPE_INFO_SIZE ? \"size \"\n+    : \"unknown\");\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Make a type info expression.\n \n Expression*\n@@ -12870,6 +13426,9 @@ class Struct_field_offset_expression : public Expression\n   tree\n   do_get_tree(Translate_context* context);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The type of the struct.\n   Struct_type* type_;\n@@ -12906,6 +13465,17 @@ Struct_field_offset_expression::do_get_tree(Translate_context* context)\n \t\t\t  byte_position(struct_field_tree));\n }\n \n+// Dump ast representation for a struct field offset expression.\n+\n+void\n+Struct_field_offset_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() <<  \"unsafe.Offsetof(\";\n+  ast_dump_context->ostream() << this->field_->field_name();\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Make an expression for a struct field offset.\n \n Expression*\n@@ -12946,11 +13516,25 @@ class Map_descriptor_expression : public Expression\n \t\t\t\t\t       this->location());\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+ \n  private:\n   // The type for which this is the descriptor.\n   Map_type* type_;\n };\n \n+// Dump ast representation for a map descriptor expression.\n+\n+void\n+Map_descriptor_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"map_descriptor(\";\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n // Make a map descriptor expression.\n \n Expression*\n@@ -12988,6 +13572,10 @@ class Label_addr_expression : public Expression\n     return expr_to_tree(this->label_->get_addr(context, this->location()));\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context* ast_dump_context) const\n+  { ast_dump_context->ostream() << this->label_->name(); }\n+  \n  private:\n   // The label whose address we are taking.\n   Label* label_;"}, {"sha": "6f74f73eb1ac2355896209194919730bfbc3a81e", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -42,6 +42,7 @@ class Export;\n class Import;\n class Temporary_statement;\n class Label;\n+class Ast_dump_context;\n \n // The base class for all expressions.\n \n@@ -635,6 +636,10 @@ class Expression\n   static tree\n   check_bounds(tree val, tree bound_type, tree sofar, source_location);\n \n+  // Dump an expression to a dump constext.\n+  void\n+  dump_expression(Ast_dump_context*) const;\n+\n  protected:\n   // May be implemented by child class: traverse the expressions.\n   virtual int\n@@ -731,6 +736,10 @@ class Expression\n   void\n   report_error(const char*);\n \n+  // Child class implements dumping to a dump context.\n+  virtual void\n+  do_dump_expression(Ast_dump_context*) const = 0;\n+\n  private:\n   // Convert to the desired statement classification, or return NULL.\n   // This is a controlled dynamic cast.\n@@ -934,6 +943,9 @@ class Var_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The variable we are referencing.\n   Named_object* variable_;\n@@ -978,6 +990,9 @@ class Temporary_reference_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The statement where the temporary variable is defined.\n   Temporary_statement* statement_;\n@@ -1031,6 +1046,9 @@ class String_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The string value.  This is immutable.\n   const std::string val_;\n@@ -1154,6 +1172,9 @@ class Binary_expression : public Expression\n   void\n   do_export(Export*) const;\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The binary operator to apply.\n   Operator op_;\n@@ -1290,6 +1311,9 @@ class Call_expression : public Expression\n   bool\n   determining_types();\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   bool\n   check_argument_type(int, const Type*, const Type*, source_location, bool);\n@@ -1384,6 +1408,9 @@ class Func_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The function itself.\n   Named_object* function_;\n@@ -1432,6 +1459,9 @@ class Unknown_expression : public Parser_expression\n   do_copy()\n   { return new Unknown_expression(this->named_object_, this->location()); }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+  \n  private:\n   // The unknown name.\n   Named_object* named_object_;\n@@ -1456,6 +1486,12 @@ class Index_expression : public Parser_expression\n   set_is_lvalue()\n   { this->is_lvalue_ = true; }\n \n+  // Dump an index expression, i.e. an expression of the form\n+  // expr[expr] or expr[expr:expr], to a dump context.\n+  static void\n+  dump_index_expression(Ast_dump_context*, const Expression* expr, \n+                        const Expression* start, const Expression* end);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -1473,6 +1509,9 @@ class Index_expression : public Parser_expression\n \t\t\t\tthis->location());\n   }\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The expression being indexed.\n   Expression* left_;\n@@ -1572,6 +1611,9 @@ class Map_index_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The map we are looking into.\n   Expression* map_;\n@@ -1641,6 +1683,9 @@ class Bound_method_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The object used to find the method.  This is passed to the method\n   // as the first argument.\n@@ -1712,6 +1757,9 @@ class Field_reference_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The expression we are looking into.  This should have a type of\n   // struct.\n@@ -1777,6 +1825,9 @@ class Interface_field_reference_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The expression for the interface object.  This should have a type\n   // of interface or pointer to interface.\n@@ -1830,6 +1881,9 @@ class Type_guard_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The expression to convert.\n   Expression* expr_;\n@@ -1889,6 +1943,9 @@ class Receive_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n  private:\n   // The channel from which we are receiving.\n   Expression* channel_;"}, {"sha": "4ab0f8ee7cf8b5fecb5324cdc102c04c91f2f828", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -133,6 +133,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n \n   // Convert complicated go and defer statements into simpler ones.\n   ::gogo->simplify_thunk_statements();\n+  \n+  // Dump ast, use filename[0] as the base name\n+  ::gogo->dump_ast(filenames[0]);\n }\n \n // Write out globals."}, {"sha": "dae22f51c05d55388f6a7f554ca35ac014aa681d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -422,6 +422,10 @@ class Gogo\n   void\n   simplify_thunk_statements();\n \n+  // Dump AST if -fgo-dump-ast is set \n+  void\n+  dump_ast(const char* basename);\n+\n   // Convert named types to the backend representation.\n   void\n   convert_named_types();\n@@ -512,7 +516,6 @@ class Gogo\n   receive_as_64bit_integer(tree type, tree channel, bool blocking,\n \t\t\t   bool for_select);\n \n-\n   // Make a trampoline which calls FNADDR passing CLOSURE.\n   tree\n   make_trampoline(tree fnaddr, tree closure, source_location);"}, {"sha": "c6d2ace91f841ce5983254c75bc5f534c198c480", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 605, "deletions": 1, "changes": 606, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -15,6 +15,7 @@\n #include \"runtime.h\"\n #include \"backend.h\"\n #include \"statements.h\"\n+#include \"ast-dump.h\"\n \n // Class Statement.\n \n@@ -142,6 +143,14 @@ Statement::get_backend(Translate_context* context)\n   return this->do_get_backend(context);\n }\n \n+// Dump AST representation for a statement to a dump context.\n+\n+void\n+Statement::dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  this->do_dump_statement(ast_dump_context);\n+}\n+\n // Note that this statement is erroneous.  This is called by children\n // when they discover an error.\n \n@@ -178,8 +187,20 @@ class Error_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n+\n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n };\n \n+// Dump the AST representation for an error statement.\n+\n+void\n+Error_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"Error statement\" << std::endl;\n+}\n+\n // Make an error statement.\n \n Statement*\n@@ -280,6 +301,30 @@ Variable_declaration_statement::do_get_backend(Translate_context* context)\n   return context->backend()->statement_list(stats);\n }\n \n+// Dump the AST representation for a variable declaration.\n+\n+void\n+Variable_declaration_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  \n+  go_assert(var_->is_variable());\n+  ast_dump_context->ostream() << \"var \" << this->var_->name() <<  \" \";\n+  Variable* var = this->var_->var_value();\n+  if (var->has_type()) \n+    {\n+      ast_dump_context->dump_type(var->type());\n+      ast_dump_context->ostream() << \" \";\n+    }\n+  if (var->init() != NULL)\n+    {\n+      ast_dump_context->ostream() <<  \"= \";\n+      ast_dump_context->dump_expression(var->init());\n+    }\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a variable declaration.\n \n Statement*\n@@ -422,6 +467,27 @@ Temporary_statement::get_backend_variable(Translate_context* context) const\n   return this->bvariable_;\n }\n \n+// Dump the AST represemtation for a temporary statement\n+\n+void\n+Temporary_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_temp_variable_name(this);\n+  if (this->type_ != NULL)\n+    {\n+      ast_dump_context->ostream() << \" \";\n+      ast_dump_context->dump_type(this->type_);\n+      \n+    }\n+  if (this->init_ != NULL)\n+    {\n+      ast_dump_context->ostream() << \" = \";\n+      ast_dump_context->dump_expression(this->init_);\n+    }\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make and initialize a temporary variable in BLOCK.\n \n Temporary_statement*\n@@ -458,6 +524,9 @@ class Assignment_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // Left hand side--the lvalue.\n   Expression* lhs_;\n@@ -542,6 +611,19 @@ Assignment_statement::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t  this->location());\n }\n \n+// Dump the AST representation for an assignment statement.\n+\n+void\n+Assignment_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->lhs_);\n+  ast_dump_context->ostream() << \" = \" ;\n+  ast_dump_context->dump_expression(this->rhs_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make an assignment statement.\n \n Statement*\n@@ -614,6 +696,9 @@ class Assignment_operation_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The operator (OPERATOR_PLUSEQ, etc.).\n   Operator op_;\n@@ -704,6 +789,19 @@ Assignment_operation_statement::do_lower(Gogo*, Named_object*,\n     }\n }\n \n+// Dump the AST representation for an assignment operation statement\n+\n+void\n+Assignment_operation_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->lhs_);\n+  ast_dump_context->dump_operator(this->op_); \n+  ast_dump_context->dump_expression(this->rhs_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make an assignment operation statement.\n \n Statement*\n@@ -741,6 +839,9 @@ class Tuple_assignment_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // Left hand side--a list of lvalues.\n   Expression_list* lhs_;\n@@ -768,7 +869,7 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   source_location loc = this->location();\n \n   Block* b = new Block(enclosing, loc);\n-  \n+\n   // First move out any subexpressions on the left hand side.  The\n   // right hand side will be evaluated in the required order anyhow.\n   Move_ordered_evals moe(b);\n@@ -832,6 +933,19 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Dump the AST representation for a tuple assignment statement.\n+\n+void\n+Tuple_assignment_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression_list(this->lhs_);\n+  ast_dump_context->ostream() << \" = \";\n+  ast_dump_context->dump_expression_list(this->rhs_);\n+  ast_dump_context->ostream()  << std::endl;\n+}\n+\n // Make a tuple assignment statement.\n \n Statement*\n@@ -869,6 +983,9 @@ class Tuple_map_assignment_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // Lvalue which receives the value from the map.\n   Expression* val_;\n@@ -960,6 +1077,21 @@ Tuple_map_assignment_statement::do_lower(Gogo*, Named_object*,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Dump the AST representation for a tuple map assignment statement.\n+\n+void\n+Tuple_map_assignment_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << \", \";\n+  ast_dump_context->dump_expression(this->present_);\n+  ast_dump_context->ostream() << \" = \";\n+  ast_dump_context->dump_expression(this->map_index_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a map assignment statement which returns a pair of values.\n \n Statement*\n@@ -998,6 +1130,9 @@ class Map_assignment_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // A reference to the map index which should be set or deleted.\n   Expression* map_index_;\n@@ -1076,6 +1211,21 @@ Map_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Dump the AST representation for a map assignment statement.\n+\n+void\n+Map_assignment_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->map_index_);\n+  ast_dump_context->ostream() << \" = \";\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << \", \";\n+  ast_dump_context->dump_expression(this->should_set_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a statement which assigns a pair of entries to a map.\n \n Statement*\n@@ -1113,6 +1263,9 @@ class Tuple_receive_assignment_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // Lvalue which receives the value from the channel.\n   Expression* val_;\n@@ -1200,6 +1353,21 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Dump the AST representation for a tuple receive statement.\n+\n+void\n+Tuple_receive_assignment_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << \", \";\n+  ast_dump_context->dump_expression(this->closed_);\n+  ast_dump_context->ostream() << \" <- \";\n+  ast_dump_context->dump_expression(this->channel_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a nonblocking receive statement.\n \n Statement*\n@@ -1240,6 +1408,9 @@ class Tuple_type_guard_assignment_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Call_expression*\n   lower_to_type(Runtime::Function);\n@@ -1375,6 +1546,23 @@ Tuple_type_guard_assignment_statement::lower_to_object_type(\n   b->add_statement(s);\n }\n \n+// Dump the AST representation for a tuple type guard statement.\n+\n+void \n+Tuple_type_guard_assignment_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << \", \";\n+  ast_dump_context->dump_expression(this->ok_);\n+  ast_dump_context->ostream() << \" = \";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \" . \";\n+  ast_dump_context->dump_type(this->type_);\n+  ast_dump_context->ostream()  << std::endl;\n+}\n+\n // Make an assignment from a type guard to a pair of variables.\n \n Statement*\n@@ -1415,6 +1603,9 @@ class Expression_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context* context);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Expression* expr_;\n };\n@@ -1459,6 +1650,17 @@ Expression_statement::do_get_backend(Translate_context* context)\n   return context->backend()->expression_statement(tree_to_expr(expr_tree));\n }\n \n+// Dump the AST representation for an expression statement\n+\n+void \n+Expression_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(expr_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make an expression statement from an Expression.\n \n Statement*\n@@ -1494,6 +1696,9 @@ class Block_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context* context);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Block* block_;\n };\n@@ -1507,6 +1712,14 @@ Block_statement::do_get_backend(Translate_context* context)\n   return context->backend()->block_statement(bblock);\n }\n \n+// Dump the AST for a block statement\n+\n+void\n+Block_statement::do_dump_statement(Ast_dump_context*) const\n+{\n+  // block statement braces are dumped when traversing.\n+}\n+\n // Make a block statement.\n \n Statement*\n@@ -1541,6 +1754,9 @@ class Inc_dec_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The l-value to increment or decrement.\n   Expression* expr_;\n@@ -1564,6 +1780,16 @@ Inc_dec_statement::do_lower(Gogo*, Named_object*, Block*, Statement_inserter*)\n   return Statement::make_assignment_operation(op, this->expr_, oexpr, loc);\n }\n \n+// Dump the AST representation for a inc/dec statement.\n+\n+void\n+Inc_dec_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(expr_);\n+  ast_dump_context->ostream() << (is_inc_? \"++\": \"--\") << std::endl;\n+}\n+\n // Make an increment statement.\n \n Statement*\n@@ -2233,6 +2459,17 @@ Go_statement::do_get_backend(Translate_context* context)\n   return context->backend()->expression_statement(call_bexpr);\n }\n \n+// Dump the AST representation for go statement.\n+\n+void\n+Go_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"go \";\n+  ast_dump_context->dump_expression(this->call());\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a go statement.\n \n Statement*\n@@ -2261,6 +2498,17 @@ Defer_statement::do_get_backend(Translate_context* context)\n   return context->backend()->expression_statement(call_bexpr);\n }\n \n+// Dump the AST representation for defer statement.\n+\n+void\n+Defer_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"defer \";\n+  ast_dump_context->dump_expression(this->call());\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a defer statement.\n \n Statement*\n@@ -2445,6 +2693,17 @@ Return_statement::do_get_backend(Translate_context* context)\n \t\t\t\t\t      retvals, loc);\n }\n \n+// Dump the AST representation for a return statement.\n+\n+void\n+Return_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"return \" ;\n+  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a return statement.\n \n Statement*\n@@ -2481,13 +2740,31 @@ class Bc_statement : public Statement\n   do_get_backend(Translate_context* context)\n   { return this->label_->get_goto(context, this->location()); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The label that this branches to.\n   Unnamed_label* label_;\n   // True if this is \"break\", false if it is \"continue\".\n   bool is_break_;\n };\n \n+// Dump the AST representation for a break/continue statement\n+\n+void\n+Bc_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << (this->is_break_ ? \"break\" : \"continue\");\n+  if (this->label_ != NULL) \n+    {\n+      ast_dump_context->ostream() << \" \"; \n+      ast_dump_context->dump_label_name(this->label_);\n+    }\n+  ast_dump_context->ostream() << std::endl; \n+}\n+\n // Make a break statement.\n \n Statement*\n@@ -2530,6 +2807,9 @@ class Goto_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Label* label_;\n };\n@@ -2557,6 +2837,15 @@ Goto_statement::do_get_backend(Translate_context* context)\n   return context->backend()->goto_statement(blabel, this->location());\n }\n \n+// Dump the AST representation for a goto statement.\n+\n+void\n+Goto_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"goto \" << this->label_->name() << std::endl;\n+}\n+\n // Make a goto statement.\n \n Statement*\n@@ -2588,10 +2877,25 @@ class Goto_unnamed_statement : public Statement\n   do_get_backend(Translate_context* context)\n   { return this->label_->get_goto(context, this->location()); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Unnamed_label* label_;\n };\n \n+// Dump the AST representation for an unnamed goto statement\n+\n+void\n+Goto_unnamed_statement::do_dump_statement(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"goto \";\n+  ast_dump_context->dump_label_name(this->label_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a goto statement to an unnamed label.\n \n Statement*\n@@ -2621,6 +2925,15 @@ Label_statement::do_get_backend(Translate_context* context)\n   return context->backend()->label_definition_statement(blabel);\n }\n \n+// Dump the AST for a label definition statement.\n+\n+void\n+Label_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << this->label_->name() << \":\" << std::endl;\n+}\n+\n // Make a label statement.\n \n Statement*\n@@ -2648,11 +2961,25 @@ class Unnamed_label_statement : public Statement\n   do_get_backend(Translate_context* context)\n   { return this->label_->get_definition(context); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The label.\n   Unnamed_label* label_;\n };\n \n+// Dump the AST representation for an unnamed label definition statement.\n+\n+void\n+Unnamed_label_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_label_name(this->label_);\n+  ast_dump_context->ostream() << \":\" << std::endl;\n+}\n+\n // Make an unnamed label statement.\n \n Statement*\n@@ -2688,6 +3015,9 @@ class If_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Expression* cond_;\n   Block* then_block_;\n@@ -2759,6 +3089,24 @@ If_statement::do_get_backend(Translate_context* context)\n \t\t\t\t\t  else_block, this->location());\n }\n \n+// Dump the AST representation for an if statement\n+\n+void\n+If_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"if \";\n+  ast_dump_context->dump_expression(this->cond_);\n+  ast_dump_context->ostream() << std::endl;\n+  ast_dump_context->dump_block(this->then_block_);\n+  if (this->else_block_ != NULL) \n+    {\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() << \"else\" << std::endl;\n+      ast_dump_context->dump_block(this->else_block_);\n+    }\n+}\n+\n // Make an if statement.\n \n Statement*\n@@ -3050,6 +3398,31 @@ Case_clauses::Case_clause::get_backend(Translate_context* context,\n     return context->backend()->compound_statement(statements, break_stat);\n }\n \n+// Dump the AST representation for a case clause\n+\n+void\n+Case_clauses::Case_clause::dump_clause(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  ast_dump_context->print_indent();\n+  if (this->is_default_)\n+    {\n+      ast_dump_context->ostream() << \"default:\";\n+    }\n+  else\n+    {\n+      ast_dump_context->ostream() << \"case \";\n+      ast_dump_context->dump_expression_list(this->cases_);\n+      ast_dump_context->ostream() << \":\" ;\n+    }\n+  ast_dump_context->dump_block(this->statements_);\n+  if (this->is_fallthrough_)\n+    {\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() <<  \" (fallthrough)\" << std::endl;\n+    }\n+}\n+\n // Class Case_clauses.\n \n // Traversal.\n@@ -3212,6 +3585,17 @@ Case_clauses::get_backend(Translate_context* context,\n     }\n }\n \n+// Dump the AST representation for case clauses (from a switch statement)\n+\n+void\n+Case_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n+{\n+  for (Clauses::const_iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)    \n+    p->dump_clause(ast_dump_context);\n+}\n+\n // A constant switch statement.  A Switch_statement is lowered to this\n // when all the cases are constants.\n \n@@ -3241,6 +3625,9 @@ class Constant_switch_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The value to switch on.\n   Expression* val_;\n@@ -3320,6 +3707,20 @@ Constant_switch_statement::do_get_backend(Translate_context* context)\n   return context->backend()->compound_statement(switch_statement, ldef);\n }\n \n+// Dump the AST representation for a constant switch statement.\n+\n+void\n+Constant_switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n+    const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"switch \";\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << \" {\" << std::endl;\n+  this->clauses_->dump_clauses(ast_dump_context);\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Class Switch_statement.\n \n // Traversal.\n@@ -3395,6 +3796,24 @@ Switch_statement::break_label()\n   return this->break_label_;\n }\n \n+// Dump the AST representation for a switch statement.\n+\n+void\n+Switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"switch \";\n+  if (this->val_ != NULL)\n+    {\n+      ast_dump_context->dump_expression(this->val_);\n+      ast_dump_context->ostream() << \" \";\n+    }\n+  ast_dump_context->ostream() << \"{\" << std::endl;\n+  this->clauses_->dump_clauses(ast_dump_context);\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Make a switch statement.\n \n Switch_statement*\n@@ -3519,6 +3938,31 @@ Type_case_clauses::Type_case_clause::lower(Block* b,\n     }\n }\n \n+// Dump the AST representation for a type case clause\n+\n+void\n+Type_case_clauses::Type_case_clause::dump_clause(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  if (this->is_default_)\n+    {\n+      ast_dump_context->ostream() << \"default:\";\n+    }\n+  else\n+    {\n+      ast_dump_context->ostream() << \"case \"; \n+      ast_dump_context->dump_type(this->type_);\n+      ast_dump_context->ostream() << \":\" ;\n+    }\n+  ast_dump_context->dump_block(this->statements_);\n+  if (this->is_fallthrough_)\n+    {\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() <<  \" (fallthrough)\" << std::endl;\n+    }\n+}\n+\n // Class Type_case_clauses.\n \n // Traversal.\n@@ -3589,6 +4033,17 @@ Type_case_clauses::lower(Block* b, Temporary_statement* descriptor_temp,\n     default_case->lower(b, descriptor_temp, break_label, NULL);\n }\n \n+// Dump the AST representation for case clauses (from a switch statement)\n+\n+void\n+Type_case_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n+{\n+  for (Type_clauses::const_iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)    \n+    p->dump_clause(ast_dump_context);\n+}\n+\n // Class Type_switch_statement.\n \n // Traversal.\n@@ -3692,6 +4147,20 @@ Type_switch_statement::break_label()\n   return this->break_label_;\n }\n \n+// Dump the AST representation for a type switch statement\n+\n+void\n+Type_switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context) \n+    const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"switch \" << this->var_->name() << \" = \";\n+  ast_dump_context->dump_expression(this->expr_);\n+  ast_dump_context->ostream() << \" .(type) {\" << std::endl;\n+  this->clauses_->dump_clauses(ast_dump_context);\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Make a type switch statement.\n \n Type_switch_statement*\n@@ -3862,6 +4331,18 @@ Send_statement::do_get_backend(Translate_context* context)\n     return context->backend()->compound_statement(btemp, s);\n }\n \n+// Dump the AST representation for a send statement\n+\n+void\n+Send_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->dump_expression(this->channel_);\n+  ast_dump_context->ostream() << \" <- \";\n+  ast_dump_context->dump_expression(this->val_);\n+  ast_dump_context->ostream() << std::endl;\n+}\n+\n // Make a send statement.\n \n Send_statement*\n@@ -4053,6 +4534,48 @@ Select_clauses::Select_clause::get_statements_backend(\n   return context->backend()->block_statement(bblock);\n }\n \n+// Dump the AST representation for a select case clause\n+\n+void\n+Select_clauses::Select_clause::dump_clause(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  if (this->is_default_)\n+    {\n+      ast_dump_context->ostream() << \"default:\";\n+    }\n+  else\n+    {\n+      ast_dump_context->ostream() << \"case \"  ;\n+      if (this->is_send_)\n+        {\n+          ast_dump_context->dump_expression(this->channel_);\n+          ast_dump_context->ostream() << \" <- \" ;\n+          ast_dump_context->dump_expression(this->val_);\n+        }\n+      else \n+        {\n+\t  if (this->val_ != NULL)\n+\t    ast_dump_context->dump_expression(this->val_);\n+          if (this->closed_ != NULL)\n+            {\n+\t      // FIXME: can val_ == NULL and closed_ ! = NULL?\n+              ast_dump_context->ostream() << \" , \" ;\n+              ast_dump_context->dump_expression(this->closed_);\n+            }\n+          if (this->closedvar_ != NULL ||\n+              this->var_ != NULL)\n+            ast_dump_context->ostream() << \" := \" ;\n+            \n+          ast_dump_context->ostream() << \" <- \" ;\n+          ast_dump_context->dump_expression(this->channel_);\n+        }\n+      ast_dump_context->ostream() << \":\" ;\n+    }\n+  ast_dump_context->dump_block(this->statements_);\n+}\n+\n // Class Select_clauses.\n \n // Traversal.\n@@ -4326,6 +4849,17 @@ Select_clauses::add_clause_backend(\n     (*clauses)[index] = context->backend()->compound_statement(s, g);\n }\n \n+// Dump the AST representation for select clauses.\n+\n+void\n+Select_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n+{\n+  for (Clauses::const_iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)    \n+    p->dump_clause(ast_dump_context);\n+}\n+\n // Class Select_statement.\n \n // Return the break label for this switch statement, creating it if\n@@ -4366,6 +4900,17 @@ Select_statement::do_get_backend(Translate_context* context)\n \t\t\t\t     this->location());\n }\n \n+// Dump the AST representation for a select statement.\n+\n+void \n+Select_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"select {\" << std::endl;\n+  this->clauses_->dump_clauses(ast_dump_context);\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Make a select statement.\n \n Select_statement*\n@@ -4501,6 +5046,38 @@ For_statement::set_break_continue_labels(Unnamed_label* break_label,\n   this->continue_label_ = continue_label;\n }\n \n+// Dump the AST representation for a for statement.\n+\n+void\n+For_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  if (this->init_ != NULL)\n+    {\n+      ast_dump_context->print_indent();\n+      ast_dump_context->indent();\n+      ast_dump_context->ostream() << \"// INIT  \" << std::endl;\n+      ast_dump_context->dump_block(this->init_);\n+      ast_dump_context->unindent();\n+    }\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"for \";\n+  if (this->cond_ != NULL)\n+    ast_dump_context->dump_expression(this->cond_);\n+  ast_dump_context->ostream() << \" {\" << std::endl;\n+  ast_dump_context->indent();\n+\n+  ast_dump_context->dump_block(this->statements_);\n+  if (this->init_ != NULL)\n+    {\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() << \"// POST \" << std::endl;\n+      ast_dump_context->dump_block(this->post_);\n+    }\n+  ast_dump_context->unindent();\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Make a for statement.\n \n For_statement*\n@@ -5119,6 +5696,33 @@ For_range_statement::continue_label()\n   return this->continue_label_;\n }\n \n+// Dump the AST representation for a for range statement.\n+\n+void\n+For_range_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n+{\n+  \n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"for \";\n+  ast_dump_context->dump_expression(this->index_var_);\n+  if (this->value_var_ != NULL)\n+    {\n+      ast_dump_context->ostream() << \", \";\n+      ast_dump_context->dump_expression(this->value_var_);\n+    }\n+    \n+  ast_dump_context->ostream() << \" = range \";      \n+  ast_dump_context->dump_expression(this->range_);\n+  ast_dump_context->ostream() << \" {\" << std::endl;\n+  ast_dump_context->indent();\n+\n+  ast_dump_context->dump_block(this->statements_);\n+\n+  ast_dump_context->unindent();\n+  ast_dump_context->print_indent();\n+  ast_dump_context->ostream() << \"}\" << std::endl;\n+}\n+\n // Make a for statement with a range clause.\n \n For_range_statement*"}, {"sha": "8b5263bb820042868d46bad2959eb82e3c0c7868", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c57fe28099740e06cb761b928b62a5a028bf66/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=16c57fe28099740e06cb761b928b62a5a028bf66", "patch": "@@ -43,6 +43,7 @@ class Typed_identifier_list;\n class Bexpression;\n class Bstatement;\n class Bvariable;\n+class Ast_dump_context;\n \n // This class is used to traverse assignments made by a statement\n // which makes assignments.\n@@ -374,6 +375,10 @@ class Statement\n   Bstatement*\n   get_backend(Translate_context*);\n \n+  // Dump AST representation of a statement to a dump context.\n+  void\n+  dump_statement(Ast_dump_context*) const;\n+\n  protected:\n   // Implemented by child class: traverse the tree.\n   virtual int\n@@ -414,6 +419,10 @@ class Statement\n   virtual Bstatement*\n   do_get_backend(Translate_context*) = 0;\n \n+  // Implemented by child class: dump ast representation.\n+  virtual void\n+  do_dump_statement(Ast_dump_context*) const = 0;\n+\n   // Traverse an expression in a statement.\n   int\n   traverse_expression(Traverse*, Expression**);\n@@ -507,6 +516,9 @@ class Temporary_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The type of the temporary variable.\n   Type* type_;\n@@ -544,6 +556,9 @@ class Variable_declaration_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Named_object* var_;\n };\n@@ -581,6 +596,9 @@ class Return_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // Return values.  This may be NULL.\n   Expression_list* vals_;\n@@ -617,6 +635,9 @@ class Send_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The channel on which to send the value.\n   Expression* channel_;\n@@ -678,6 +699,10 @@ class Select_clauses\n   Bstatement*\n   get_backend(Translate_context*, Unnamed_label* break_label, source_location);\n \n+  // Dump AST representation.\n+  void\n+  dump_clauses(Ast_dump_context*) const;\n+\n  private:\n   // A single clause.\n   class Select_clause\n@@ -748,6 +773,10 @@ class Select_clauses\n     Bstatement*\n     get_statements_backend(Translate_context*);\n \n+    // Dump AST representation.\n+    void\n+    dump_clause(Ast_dump_context*) const;\n+\n    private:\n     // The channel.\n     Expression* channel_;\n@@ -825,6 +854,9 @@ class Select_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The select clauses.\n   Select_clauses* clauses_;\n@@ -844,7 +876,7 @@ class Thunk_statement : public Statement\n \n   // Return the call expression.\n   Expression*\n-  call()\n+  call() const\n   { return this->call_; }\n \n   // Simplify a go or defer statement so that it only uses a single\n@@ -914,6 +946,9 @@ class Go_statement : public Thunk_statement\n  protected:\n   Bstatement*\n   do_get_backend(Translate_context*);\n+\n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n };\n \n // A defer statement.\n@@ -928,6 +963,9 @@ class Defer_statement : public Thunk_statement\n  protected:\n   Bstatement*\n   do_get_backend(Translate_context*);\n+\n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n };\n \n // A label statement.\n@@ -952,6 +990,9 @@ class Label_statement : public Statement\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The label.\n   Label* label_;\n@@ -1005,6 +1046,9 @@ class For_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The initialization statements.  This may be NULL.\n   Block* init_;\n@@ -1063,6 +1107,9 @@ class For_range_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   Expression*\n   make_range_ref(Named_object*, Temporary_statement*, source_location);\n@@ -1167,6 +1214,10 @@ class Case_clauses\n \t      std::vector<std::vector<Bexpression*> >* all_cases,\n \t      std::vector<Bstatement*>* all_statements) const;\n \n+  // Dump the AST representation to a dump context.\n+  void\n+  dump_clauses(Ast_dump_context*) const;\n+  \n  private:\n   // For a constant switch we need to keep a record of constants we\n   // have already seen.\n@@ -1237,6 +1288,10 @@ class Case_clauses\n     get_backend(Translate_context*, Unnamed_label* break_label,\n \t\tCase_constants*, std::vector<Bexpression*>* cases) const;\n \n+    // Dump the AST representation to a dump context.\n+    void\n+    dump_clause(Ast_dump_context*) const;\n+  \n    private:\n     // The list of case expressions.\n     Expression_list* cases_;\n@@ -1292,6 +1347,9 @@ class Switch_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The value to switch on.  This may be NULL.\n   Expression* val_;\n@@ -1342,6 +1400,10 @@ class Type_case_clauses\n   lower(Block*, Temporary_statement* descriptor_temp,\n \tUnnamed_label* break_label) const;\n \n+  // Dump the AST representation to a dump context.\n+  void\n+  dump_clauses(Ast_dump_context*) const;\n+\n  private:\n   // One type case clause.\n   class Type_case_clause\n@@ -1382,6 +1444,10 @@ class Type_case_clauses\n     lower(Block*, Temporary_statement* descriptor_temp,\n \t  Unnamed_label* break_label, Unnamed_label** stmts_label) const;\n \n+    // Dump the AST representation to a dump context.\n+    void\n+    dump_clause(Ast_dump_context*) const;\n+\n    private:\n     // The type for this type clause.\n     Type* type_;\n@@ -1438,6 +1504,9 @@ class Type_switch_statement : public Statement\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n \n+  void\n+  do_dump_statement(Ast_dump_context*) const;\n+\n  private:\n   // The variable holding the value we are switching on.\n   Named_object* var_;"}]}