{"sha": "b6ff8128de0583a91126718e81c48320aad243ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmZjgxMjhkZTA1ODNhOTExMjY3MThlODFjNDgzMjBhYWQyNDNjZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-04T09:29:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-09-04T09:29:11Z"}, "message": "re PR fortran/45507 (Bogus Error: Can't convert TYPE(c_ptr) to INTEGER(4))\n\n2010-09-04  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45507\n\t* resolve.c (resolve_allocate_expr): Generate default initializers\n\talready at this point, resolve them and put them into expr3, ...\n\t* trans-stmt.c (gfc_trans_allocate): ... instead of waiting until\n\ttranslation stage.\n\n\n2010-09-04  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45507\n\t* gfortran.dg/allocate_alloc_opt_12.f90: New.\n\nFrom-SVN: r163856", "tree": {"sha": "d729152a99901da881cd9e9f83314edc3ea3beb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d729152a99901da881cd9e9f83314edc3ea3beb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6ff8128de0583a91126718e81c48320aad243ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ff8128de0583a91126718e81c48320aad243ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ff8128de0583a91126718e81c48320aad243ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ff8128de0583a91126718e81c48320aad243ce/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502ef838c9c03499ccc8f55e0ff86f19c0f66119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502ef838c9c03499ccc8f55e0ff86f19c0f66119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502ef838c9c03499ccc8f55e0ff86f19c0f66119"}], "stats": {"total": 124, "additions": 77, "deletions": 47}, "files": [{"sha": "428cd3f25cf681d581a763e4889bc2687edc39e4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b6ff8128de0583a91126718e81c48320aad243ce", "patch": "@@ -1,3 +1,11 @@\n+2010-09-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45507\n+\t* resolve.c (resolve_allocate_expr): Generate default initializers\n+\talready at this point, resolve them and put them into expr3, ...\n+\t* trans-stmt.c (gfc_trans_allocate): ... instead of waiting until\n+\ttranslation stage.\n+\n 2010-09-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45186"}, {"sha": "9099ada8f5186735d4052609da0f0480a6f46bef", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b6ff8128de0583a91126718e81c48320aad243ce", "patch": "@@ -6714,6 +6714,34 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n       goto failure;\n     }\n \n+  if (!code->expr3)\n+    {\n+      /* Set up default initializer if needed.  */\n+      gfc_typespec ts;\n+\n+      if (code->ext.alloc.ts.type == BT_DERIVED)\n+\tts = code->ext.alloc.ts;\n+      else\n+\tts = e->ts;\n+\n+      if (ts.type == BT_CLASS)\n+\tts = ts.u.derived->components->ts;\n+\n+      if (ts.type == BT_DERIVED)\n+\t{\n+\t  code->expr3 = gfc_default_initializer (&ts);\n+\t  gfc_resolve_expr (code->expr3);\n+\t}\n+    }\n+  else if (code->expr3->mold && code->expr3->ts.type == BT_DERIVED)\n+    {\n+      /* Default initialization via MOLD (non-polymorphic).  */\n+      gfc_expr *rhs = gfc_default_initializer (&code->expr3->ts);\n+      gfc_resolve_expr (rhs);\n+      gfc_free_expr (code->expr3);\n+      code->expr3 = rhs;\n+    }\n+\n   if (e->ts.type == BT_CLASS)\n     {\n       /* Make sure the vtab symbol is present when"}, {"sha": "dda38b6503e6b725e79d8b2af6033bc0e513fc06", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 17, "deletions": 47, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=b6ff8128de0583a91126718e81c48320aad243ce", "patch": "@@ -4475,9 +4475,10 @@ gfc_trans_allocate (gfc_code * code)\n       tmp = gfc_finish_block (&se.pre);\n       gfc_add_expr_to_block (&block, tmp);\n \n-      /* Initialization via SOURCE block.  */\n       if (code->expr3 && !code->expr3->mold)\n \t{\n+\t  /* Initialization via SOURCE block\n+\t     (or static default initializer).  */\n \t  gfc_expr *rhs = gfc_copy_expr (code->expr3);\n \t  if (al->expr->ts.type == BT_CLASS)\n \t    {\n@@ -4497,53 +4498,22 @@ gfc_trans_allocate (gfc_code * code)\n \t  gfc_free_expr (rhs);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n-      else\n+      else if (code->expr3 && code->expr3->mold\n+\t    && code->expr3->ts.type == BT_CLASS)\n \t{\n-\t  /* Add default initializer for those derived types that need them.  */\n-\t  gfc_expr *rhs = NULL;\n-\t  gfc_typespec ts;\n-\n-\t  if (code->ext.alloc.ts.type == BT_DERIVED)\n-\t    ts = code->ext.alloc.ts;\n-\t  else if (code->expr3)\n-\t    ts = code->expr3->ts;\n-\t  else\n-\t    ts = expr->ts;\n-\n-\t  if (ts.type == BT_DERIVED)\n-\t    {\n-\t      rhs = gfc_default_initializer (&ts);\n-\t      gfc_resolve_expr (rhs);\n-\t    }\n-\t  else if (ts.type == BT_CLASS)\n-\t    {\n-\t      rhs = gfc_copy_expr (code->expr3);\n-\t      gfc_add_component_ref (rhs, \"$vptr\");\n-\t      gfc_add_component_ref (rhs, \"$def_init\");\n-\t    }\n-\n-\t  if (rhs)\n-\t    {\n-\t      gfc_expr *lhs = gfc_expr_to_initialize (expr);\n-\t      if (al->expr->ts.type == BT_DERIVED)\n-\t\t{\n-\t\t  tmp = gfc_trans_assignment (lhs, rhs, true, false);\n-\t\t  gfc_add_expr_to_block (&block, tmp);\n-\t\t}\n-\t      else if (al->expr->ts.type == BT_CLASS)\n-\t\t{\n-\t\t  gfc_se dst,src;\n-\t\t  gfc_init_se (&dst, NULL);\n-\t\t  gfc_init_se (&src, NULL);\n-\t\t  gfc_conv_expr (&dst, lhs);\n-\t\t  gfc_conv_expr (&src, rhs);\n-\t\t  gfc_add_block_to_block (&block, &src.pre);\n-\t\t  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n-\t\t  gfc_add_expr_to_block (&block, tmp);\n-\t\t}\n-\t      gfc_free_expr (lhs);\n-\t      gfc_free_expr (rhs);\n-\t    }\n+\t  /* Default-initialization via MOLD (polymorphic).  */\n+\t  gfc_expr *rhs = gfc_copy_expr (code->expr3);\n+\t  gfc_se dst,src;\n+\t  gfc_add_component_ref (rhs, \"$vptr\");\n+\t  gfc_add_component_ref (rhs, \"$def_init\");\n+\t  gfc_init_se (&dst, NULL);\n+\t  gfc_init_se (&src, NULL);\n+\t  gfc_conv_expr (&dst, expr);\n+\t  gfc_conv_expr (&src, rhs);\n+\t  gfc_add_block_to_block (&block, &src.pre);\n+\t  tmp = gfc_build_memcpy_call (dst.expr, src.expr, memsz);\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\t  gfc_free_expr (rhs);\n \t}\n \n       /* Allocation of CLASS entities.  */"}, {"sha": "52dd4e875eda0b97a096364d425ef6a2d8e1ed44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6ff8128de0583a91126718e81c48320aad243ce", "patch": "@@ -1,3 +1,8 @@\n+2010-09-04  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45507\n+\t* gfortran.dg/allocate_alloc_opt_12.f90: New.\n+\n 2010-09-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/opts-4.c: New test."}, {"sha": "2af069293536a8f76c2f5d4b99c8d3a3b018743b", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_12.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ff8128de0583a91126718e81c48320aad243ce/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_12.f90?ref=b6ff8128de0583a91126718e81c48320aad243ce", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! PR 45507: [4.6 Regression] Bogus Error: Can't convert TYPE(c_ptr) to INTEGER(4)\n+!\n+! Contributed by Andrew Benson <abenson@its.caltech.edu>\n+\n+ use, intrinsic :: iso_c_binding\n+\n+ type :: cType\n+   type(c_ptr) :: accelPtr = c_null_ptr\n+ end type cType\n+\n+ type(cType), allocatable, dimension(:) :: filters\n+ class(cType), allocatable :: f\n+\n+ allocate(filters(1))\n+ allocate(f,MOLD=filters(1))\n+\n+end"}]}