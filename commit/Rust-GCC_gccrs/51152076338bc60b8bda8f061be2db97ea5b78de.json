{"sha": "51152076338bc60b8bda8f061be2db97ea5b78de", "node_id": "C_kwDOANBUbNoAKDUxMTUyMDc2MzM4YmM2MGI4YmRhOGYwNjFiZTJkYjk3ZWE1Yjc4ZGU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-08T08:08:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-08T08:09:39Z"}, "message": "tree-optimization/103102 - fix error in vectorizer refactoring\n\nThis fixes an oversight that caused vectorized epilogues to have\nversioning for niters applied.\n\n2021-11-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_create_loop_vinfo): Add main_loop_info\n\tparameter.\n\t* tree-vect-loop.c (vect_create_loop_vinfo): Likewise.  Set\n\tLOOP_VINFO_ORIG_LOOP_INFO and conditionalize set of\n\tLOOP_VINFO_NITERS_ASSUMPTIONS.\n\t(vect_analyze_loop_1): Adjust.\n\t(vect_analyze_loop): Move loop constraint setting and\n\tSCEV/niter reset here from vect_create_loop_vinfo to perform\n\tit only once.\n\t(vect_analyze_loop_form): Move dumping of symbolic niters\n\there from vect_create_loop_vinfo.", "tree": {"sha": "070deabeb6ae8aac4508eca1f487af00f916d57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/070deabeb6ae8aac4508eca1f487af00f916d57d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51152076338bc60b8bda8f061be2db97ea5b78de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51152076338bc60b8bda8f061be2db97ea5b78de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51152076338bc60b8bda8f061be2db97ea5b78de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51152076338bc60b8bda8f061be2db97ea5b78de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f3a33633dd06a8e4861180ab20c9136361c69e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3a33633dd06a8e4861180ab20c9136361c69e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3a33633dd06a8e4861180ab20c9136361c69e6"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "ede9aff0522c17bc71f971f6d8bd4aaab2983685", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51152076338bc60b8bda8f061be2db97ea5b78de/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51152076338bc60b8bda8f061be2db97ea5b78de/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=51152076338bc60b8bda8f061be2db97ea5b78de", "patch": "@@ -1464,6 +1464,18 @@ vect_analyze_loop_form (class loop *loop, vect_loop_form_info *info)\n       (info->loop_cond,\n        \"not vectorized: number of iterations = 0.\\n\");\n \n+  if (!(tree_fits_shwi_p (info->number_of_iterations)\n+\t&& tree_to_shwi (info->number_of_iterations) > 0))\n+    {\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Symbolic number of iterations is \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_DETAILS, info->number_of_iterations);\n+\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t}\n+    }\n+\n   return opt_result::success ();\n }\n \n@@ -1472,36 +1484,17 @@ vect_analyze_loop_form (class loop *loop, vect_loop_form_info *info)\n \n loop_vec_info\n vect_create_loop_vinfo (class loop *loop, vec_info_shared *shared,\n-\t\t\tconst vect_loop_form_info *info)\n+\t\t\tconst vect_loop_form_info *info,\n+\t\t\tloop_vec_info main_loop_info)\n {\n   loop_vec_info loop_vinfo = new _loop_vec_info (loop, shared);\n   LOOP_VINFO_NITERSM1 (loop_vinfo) = info->number_of_iterationsm1;\n   LOOP_VINFO_NITERS (loop_vinfo) = info->number_of_iterations;\n   LOOP_VINFO_NITERS_UNCHANGED (loop_vinfo) = info->number_of_iterations;\n-  if (!integer_onep (info->assumptions))\n-    {\n-      /* We consider to vectorize this loop by versioning it under\n-\t some assumptions.  In order to do this, we need to clear\n-\t existing information computed by scev and niter analyzer.  */\n-      scev_reset_htab ();\n-      free_numbers_of_iterations_estimates (loop);\n-      /* Also set flag for this loop so that following scev and niter\n-\t analysis are done under the assumptions.  */\n-      loop_constraint_set (loop, LOOP_C_FINITE);\n-      /* Also record the assumptions for versioning.  */\n-      LOOP_VINFO_NITERS_ASSUMPTIONS (loop_vinfo) = info->assumptions;\n-    }\n-\n-  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo))\n-    {\n-      if (dump_enabled_p ())\n-        {\n-          dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t   \"Symbolic number of iterations is \");\n-\t  dump_generic_expr (MSG_NOTE, TDF_DETAILS, info->number_of_iterations);\n-          dump_printf (MSG_NOTE, \"\\n\");\n-        }\n-    }\n+  LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo) = main_loop_info;\n+  /* Also record the assumptions for versioning.  */\n+  if (!integer_onep (info->assumptions) && !main_loop_info)\n+    LOOP_VINFO_NITERS_ASSUMPTIONS (loop_vinfo) = info->assumptions;\n \n   stmt_vec_info loop_cond_info = loop_vinfo->lookup_stmt (info->loop_cond);\n   STMT_VINFO_TYPE (loop_cond_info) = loop_exit_ctrl_vec_info_type;\n@@ -2903,9 +2896,7 @@ vect_analyze_loop_1 (class loop *loop, vec_info_shared *shared,\n \t\t     bool &fatal)\n {\n   loop_vec_info loop_vinfo\n-    = vect_create_loop_vinfo (loop, shared, loop_form_info);\n-  if (main_loop_vinfo)\n-    LOOP_VINFO_ORIG_LOOP_INFO (loop_vinfo) = main_loop_vinfo;\n+    = vect_create_loop_vinfo (loop, shared, loop_form_info, main_loop_vinfo);\n \n   machine_mode vector_mode = vector_modes[mode_i];\n   loop_vinfo->vector_mode = vector_mode;\n@@ -2997,6 +2988,17 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \t\t\t \"bad loop form.\\n\");\n       return opt_loop_vec_info::propagate_failure (res);\n     }\n+  if (!integer_onep (loop_form_info.assumptions))\n+    {\n+      /* We consider to vectorize this loop by versioning it under\n+\t some assumptions.  In order to do this, we need to clear\n+\t existing information computed by scev and niter analyzer.  */\n+      scev_reset_htab ();\n+      free_numbers_of_iterations_estimates (loop);\n+      /* Also set flag for this loop so that following scev and niter\n+\t analysis are done under the assumptions.  */\n+      loop_constraint_set (loop, LOOP_C_FINITE);\n+    }\n \n   auto_vector_modes vector_modes;\n   /* Autodetect first vector size we try.  */"}, {"sha": "b552e9dccce5bce6a3bbcf5d531e7ccefa719b9a", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51152076338bc60b8bda8f061be2db97ea5b78de/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51152076338bc60b8bda8f061be2db97ea5b78de/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=51152076338bc60b8bda8f061be2db97ea5b78de", "patch": "@@ -2160,7 +2160,8 @@ struct vect_loop_form_info\n };\n extern opt_result vect_analyze_loop_form (class loop *, vect_loop_form_info *);\n extern loop_vec_info vect_create_loop_vinfo (class loop *, vec_info_shared *,\n-\t\t\t\t\t     const vect_loop_form_info *);\n+\t\t\t\t\t     const vect_loop_form_info *,\n+\t\t\t\t\t     loop_vec_info = nullptr);\n extern bool vectorizable_live_operation (vec_info *,\n \t\t\t\t\t stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\t\t slp_tree, slp_instance, int,"}]}