{"sha": "362115a9125a17809f4b7c9c37afccc9029ed733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyMTE1YTkxMjVhMTc4MDlmNGI3YzljMzdhZmNjYzkwMjllZDczMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:24Z"}, "message": "re PR c++/48450 ([C++0x][SFINAE] Hard errors with static_cast expressions)\n\n\tPR c++/48450\n\t* tree.c (build_cplus_new, build_aggr_init_expr): Take complain.\n\t(bot_manip): Adjust.\n\t* cp-tree.h: Adjust.\n\t* call.c (convert_like_real, build_cxx_call): Adjust.\n\t(perform_direct_initialization_if_possible): Adjust.\n\t* cvt.c (ocp_convert): Adjust.\n\t* init.c (build_value_init): Adjust.\n\t* semantics.c (maybe_add_lambda_conv_op): Adjust.\n\t* typeck.c (unary_complex_lvalue, cp_build_modify_expr): Adjust.\n\t* typeck2.c (build_functional_cast): Adjust.\n\nFrom-SVN: r172143", "tree": {"sha": "5171555c7e129348caefab585cca1c46559af02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5171555c7e129348caefab585cca1c46559af02a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362115a9125a17809f4b7c9c37afccc9029ed733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362115a9125a17809f4b7c9c37afccc9029ed733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362115a9125a17809f4b7c9c37afccc9029ed733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362115a9125a17809f4b7c9c37afccc9029ed733/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "351ccf209e1e4495534044e3cd77ee03f32bdda2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351ccf209e1e4495534044e3cd77ee03f32bdda2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351ccf209e1e4495534044e3cd77ee03f32bdda2"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "b8b87cf8e3d0d4773777ae0a7c470f6613eaf42b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -1,5 +1,17 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48450\n+\t* tree.c (build_cplus_new, build_aggr_init_expr): Take complain.\n+\t(bot_manip): Adjust.\n+\t* cp-tree.h: Adjust.\n+\t* call.c (convert_like_real, build_cxx_call): Adjust.\n+\t(perform_direct_initialization_if_possible): Adjust.\n+\t* cvt.c (ocp_convert): Adjust.\n+\t* init.c (build_value_init): Adjust.\n+\t* semantics.c (maybe_add_lambda_conv_op): Adjust.\n+\t* typeck.c (unary_complex_lvalue, cp_build_modify_expr): Adjust.\n+\t* typeck2.c (build_functional_cast): Adjust.\n+\n \t* init.c (build_value_init_noctor): Handle REFERENCE_TYPE at top\n \tlevel.\n \t(perform_member_init): Not here."}, {"sha": "c2730271dcf2a87bf609e5cf007e88f3e1a977b3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -5414,7 +5414,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t   we need to build up a TARGET_EXPR.  */\n \tif (DECL_CONSTRUCTOR_P (convfn))\n \t  {\n-\t    expr = build_cplus_new (totype, expr);\n+\t    expr = build_cplus_new (totype, expr, complain);\n \n \t    /* Remember that this was list-initialization.  */\n \t    if (convs->check_narrowing)\n@@ -5559,7 +5559,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  else if (diag_kind == DK_ERROR)\n \t    return error_mark_node;\n \t}\n-      return build_cplus_new (totype, expr);\n+      return build_cplus_new (totype, expr, complain);\n \n     case ck_ref_bind:\n       {\n@@ -6476,7 +6476,7 @@ build_cxx_call (tree fn, int nargs, tree *argarray)\n     return error_mark_node;\n \n   if (MAYBE_CLASS_TYPE_P (TREE_TYPE (fn)))\n-    fn = build_cplus_new (TREE_TYPE (fn), fn);\n+    fn = build_cplus_new (TREE_TYPE (fn), fn, tf_warning_or_error);\n   return convert_from_reference (fn);\n }\n \n@@ -8119,7 +8119,7 @@ perform_direct_initialization_if_possible (tree type,\n       expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t\t&args, type, LOOKUP_NORMAL, complain);\n       release_tree_vector (args);\n-      return build_cplus_new (type, expr);\n+      return build_cplus_new (type, expr, complain);\n     }\n \n   /* Get the high-water mark for the CONVERSION_OBSTACK.  */"}, {"sha": "ea251a8dbbd050e2e1c2c096968010f60d0c7eeb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -5395,8 +5395,8 @@ extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_non_dep_call_vec\t\t(tree, tree, VEC(tree,gc) *);\n-extern tree build_cplus_new\t\t\t(tree, tree);\n-extern tree build_aggr_init_expr\t\t(tree, tree);\n+extern tree build_cplus_new\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_aggr_init_expr\t\t(tree, tree, tsubst_flags_t);\n extern tree get_target_expr\t\t\t(tree);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);"}, {"sha": "6551de62ac31c8c88ba75e2427c4cd7147e39e11", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -819,7 +819,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t  release_tree_vector (ctor_vec);\n \t}\n       if (ctor)\n-\treturn build_cplus_new (type, ctor);\n+\treturn build_cplus_new (type, ctor, tf_warning_or_error);\n     }\n \n   if (flags & LOOKUP_COMPLAIN)"}, {"sha": "313169072b4ab969322163330a683cffc4228927", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -342,7 +342,8 @@ build_value_init (tree type, tsubst_flags_t complain)\n \t  (type,\n \t   build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t      NULL, type, LOOKUP_NORMAL,\n-\t\t\t\t      complain));\n+\t\t\t\t      complain),\n+\t   complain);\n       else if (TREE_CODE (type) != UNION_TYPE && TYPE_NEEDS_CONSTRUCTING (type))\n \t{\n \t  /* This is a class that needs constructing, but doesn't have\n@@ -354,7 +355,7 @@ build_value_init (tree type, tsubst_flags_t complain)\n \t     NULL, type, LOOKUP_NORMAL, complain);\n \t  if (ctor != error_mark_node)\n \t    {\n-\t      ctor = build_aggr_init_expr (type, ctor);\n+\t      ctor = build_aggr_init_expr (type, ctor, complain);\n \t      AGGR_INIT_ZERO_FIRST (ctor) = 1;\n \t    }\n \t  return ctor;"}, {"sha": "30175afaaa5fa26647b491ae88cc16778101022c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -8429,7 +8429,7 @@ maybe_add_lambda_conv_op (tree type)\n \t\t       VEC_address (tree, argvec));\n   CALL_FROM_THUNK_P (call) = 1;\n   if (MAYBE_CLASS_TYPE_P (TREE_TYPE (call)))\n-    call = build_cplus_new (TREE_TYPE (call), call);\n+    call = build_cplus_new (TREE_TYPE (call), call, tf_warning_or_error);\n   call = convert_from_reference (call);\n   finish_return_stmt (call);\n "}, {"sha": "c2aa389875a01dceba486376c4e140f825d2c3e2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -373,7 +373,7 @@ build_aggr_init_array (tree return_type, tree fn, tree slot, int nargs,\n    callable.  */\n \n tree\n-build_aggr_init_expr (tree type, tree init)\n+build_aggr_init_expr (tree type, tree init, tsubst_flags_t complain)\n {\n   tree fn;\n   tree slot;\n@@ -382,7 +382,9 @@ build_aggr_init_expr (tree type, tree init)\n \n   /* Make sure that we're not trying to create an instance of an\n      abstract class.  */\n-  abstract_virtuals_error (NULL_TREE, type);\n+  if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain)\n+      && !(complain & tf_error))\n+    return error_mark_node;\n \n   if (TREE_CODE (init) == CALL_EXPR)\n     fn = CALL_EXPR_FN (init);\n@@ -437,9 +439,9 @@ build_aggr_init_expr (tree type, tree init)\n    and language-specific expression expanders.  */\n \n tree\n-build_cplus_new (tree type, tree init)\n+build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n {\n-  tree rval = build_aggr_init_expr (type, init);\n+  tree rval = build_aggr_init_expr (type, init, complain);\n   tree slot;\n \n   if (TREE_CODE (rval) == AGGR_INIT_EXPR)\n@@ -1805,7 +1807,8 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)\n       tree u;\n \n       if (TREE_CODE (TREE_OPERAND (t, 1)) == AGGR_INIT_EXPR)\n-\tu = build_cplus_new (TREE_TYPE (t), TREE_OPERAND (t, 1));\n+\tu = build_cplus_new (TREE_TYPE (t), TREE_OPERAND (t, 1),\n+\t\t\t     tf_warning_or_error);\n       else\n \tu = build_target_expr_with_type (TREE_OPERAND (t, 1), TREE_TYPE (t));\n "}, {"sha": "71cfd8c6cf08ebd4011387894883f50303bc1b72", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -5320,7 +5320,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n \tif (TREE_CODE (arg) == SAVE_EXPR)\n \t  targ = arg;\n \telse\n-\t  targ = build_cplus_new (TREE_TYPE (arg), arg);\n+\t  targ = build_cplus_new (TREE_TYPE (arg), arg, tf_warning_or_error);\n \treturn build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (arg)), targ);\n       }\n \n@@ -6742,7 +6742,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     {\n       if (TREE_CODE (newrhs) == CALL_EXPR\n \t  && TYPE_NEEDS_CONSTRUCTING (lhstype))\n-\tnewrhs = build_cplus_new (lhstype, newrhs);\n+\tnewrhs = build_cplus_new (lhstype, newrhs, complain);\n \n       /* Can't initialize directly from a TARGET_EXPR, since that would\n \t cause the lhs to be constructed twice, and possibly result in"}, {"sha": "f67073bb5c87cfcf099b139c1bcbb684ab71309e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362115a9125a17809f4b7c9c37afccc9029ed733/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=362115a9125a17809f4b7c9c37afccc9029ed733", "patch": "@@ -1614,7 +1614,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n   if (exp == error_mark_node)\n     return error_mark_node;\n \n-  return build_cplus_new (type, exp);\n+  return build_cplus_new (type, exp, complain);\n }\n \f\n "}]}