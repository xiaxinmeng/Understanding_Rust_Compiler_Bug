{"sha": "d73fb533dc652d2201bded0d386093af57810a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDczZmI1MzNkYzY1MmQyMjAxYmRlZDBkMzg2MDkzYWY1NzgxMGE2Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-07-03T14:11:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-07-03T14:11:14Z"}, "message": "re PR middle-end/34163 (10% performance regression since Nov 1 on Polyhedron's \"NF\" on AMD64)\n\n2009-07-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34163\n\t* tree-chrec.c (chrec_convert_1): Fold (T2)(t +- x) to\n\t(T2)t +- (T2)x if t +- x is known to not overflow and\n\tthe conversion widens the operation.\n\t* Makefile.in (tree-chrec.o): Add $(FLAGS_H) dependency.\n\n\t* gfortran.dg/pr34163.f90: New testcase.\n\nFrom-SVN: r149207", "tree": {"sha": "da07aebd6bf18cfc4b02509b36bbfa4e25280ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da07aebd6bf18cfc4b02509b36bbfa4e25280ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d73fb533dc652d2201bded0d386093af57810a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73fb533dc652d2201bded0d386093af57810a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73fb533dc652d2201bded0d386093af57810a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73fb533dc652d2201bded0d386093af57810a6f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7351bcaa647fe2b7c6ef72eca078b79f5e5ffc7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7351bcaa647fe2b7c6ef72eca078b79f5e5ffc7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7351bcaa647fe2b7c6ef72eca078b79f5e5ffc7e"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "493d1b2a7578a208c02b82f17d7a42eb61d96123", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d73fb533dc652d2201bded0d386093af57810a6f", "patch": "@@ -1,3 +1,11 @@\n+2009-07-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34163\n+\t* tree-chrec.c (chrec_convert_1): Fold (T2)(t +- x) to\n+\t(T2)t +- (T2)x if t +- x is known to not overflow and\n+\tthe conversion widens the operation.\n+\t* Makefile.in (tree-chrec.o): Add $(FLAGS_H) dependency.\n+\n 2009-07-03  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-pure-const.c (analyze): Update loop optimizer init."}, {"sha": "9901d077ce80696cc4860190911d0bb9acbcedb3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d73fb533dc652d2201bded0d386093af57810a6f", "patch": "@@ -2414,7 +2414,7 @@ omega.o : omega.c omega.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) varray.h $(TREE_PASS_H) $(PARAMS_H)\n tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TREE_H) $(REAL_H) $(SCEV_H) $(TREE_PASS_H) $(PARAMS_H) \\\n-   $(DIAGNOSTIC_H) $(CFGLOOP_H) $(TREE_FLOW_H)\n+   $(DIAGNOSTIC_H) $(CFGLOOP_H) $(TREE_FLOW_H) $(FLAGS_H)\n tree-scalar-evolution.o: tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(TREE_H) $(REAL_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) \\"}, {"sha": "b73980890a19a826f04962f7fe437c49b83ec0fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d73fb533dc652d2201bded0d386093af57810a6f", "patch": "@@ -1,3 +1,8 @@\n+2009-07-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34163\n+\t* gfortran.dg/pr34163.f90: New testcase.\n+\n 2009-07-03  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/loop-24.c: Update dump file matching; enable -O2."}, {"sha": "642617736b9019d32bab635a81036b3499bdc0be", "filename": "gcc/testsuite/gfortran.dg/pr34163.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90?ref=d73fb533dc652d2201bded0d386093af57810a6f", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fpredictive-commoning -fdump-tree-pcom-details\" }\n+subroutine trisolve2(x,i1,i2,nxyz)\n+integer :: nxyz\n+real,dimension(nxyz):: au1\n+real,allocatable,dimension(:) :: gi\n+integer :: i1 , i2\n+real,dimension(i2)::x\n+integer :: i\n+allocate(gi(nxyz))\n+do i = i1+1 , i2\n+   x(i) = gi(i)*(x(i)-au1(i-1)*x(i-1))\n+enddo\n+end subroutine trisolve2\n+! { dg-final { scan-tree-dump \"Executing predictive commoning\" \"pcom\" } }\n+! { dg-final { cleanup-tree-dump \"pcom\" } }"}, {"sha": "749350439187cdf30c810ae7c10b33d143ecbe59", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d73fb533dc652d2201bded0d386093af57810a6f/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=d73fb533dc652d2201bded0d386093af57810a6f", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chrec.h\"\n #include \"tree-pass.h\"\n #include \"params.h\"\n+#include \"flags.h\"\n #include \"tree-scalar-evolution.h\"\n \n \f\n@@ -1286,7 +1287,19 @@ chrec_convert_1 (tree type, tree chrec, gimple at_stmt,\n \n   /* If we cannot propagate the cast inside the chrec, just keep the cast.  */\n keep_cast:\n-  res = fold_convert (type, chrec);\n+  /* Fold will not canonicalize (long)(i - 1) to (long)i - 1 because that\n+     may be more expensive.  We do want to perform this optimization here\n+     though for canonicalization reasons.  */\n+  if (use_overflow_semantics\n+      && (TREE_CODE (chrec) == PLUS_EXPR\n+\t  || TREE_CODE (chrec) == MINUS_EXPR)\n+      && TYPE_PRECISION (type) > TYPE_PRECISION (ct)\n+      && TYPE_OVERFLOW_UNDEFINED (ct))\n+    res = fold_build2 (TREE_CODE (chrec), type,\n+\t\t       fold_convert (type, TREE_OPERAND (chrec, 0)),\n+\t\t       fold_convert (type, TREE_OPERAND (chrec, 1)));\n+  else\n+    res = fold_convert (type, chrec);\n \n   /* Don't propagate overflows.  */\n   if (CONSTANT_CLASS_P (res))"}]}