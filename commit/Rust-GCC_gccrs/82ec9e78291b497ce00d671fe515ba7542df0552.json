{"sha": "82ec9e78291b497ce00d671fe515ba7542df0552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlYzllNzgyOTFiNDk3Y2UwMGQ2NzFmZTUxNWJhNzU0MmRmMDU1Mg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2000-03-18T03:26:47Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-03-18T03:26:47Z"}, "message": "divconst-2.c: Rewrite to check for standards-compliant result rather than specific constants.\n\n\t* execute/divconst-2.c: Rewrite to check for standards-compliant\n\tresult rather than specific constants.  Put test-values in array.\n\nFrom-SVN: r32615", "tree": {"sha": "8d871b91f313a70dc2ebe32e4563645771c56316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d871b91f313a70dc2ebe32e4563645771c56316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ec9e78291b497ce00d671fe515ba7542df0552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ec9e78291b497ce00d671fe515ba7542df0552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ec9e78291b497ce00d671fe515ba7542df0552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ec9e78291b497ce00d671fe515ba7542df0552/comments", "author": null, "committer": null, "parents": [{"sha": "787ccee0124924e9a03f6e350cb30b6d9924eb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787ccee0124924e9a03f6e350cb30b6d9924eb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787ccee0124924e9a03f6e350cb30b6d9924eb50"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "b13552900717da9d3366fb1170d845ba211a1736", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ec9e78291b497ce00d671fe515ba7542df0552/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ec9e78291b497ce00d671fe515ba7542df0552/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=82ec9e78291b497ce00d671fe515ba7542df0552", "patch": "@@ -1,3 +1,8 @@\n+Fri Mar 10 01:15:19 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* execute/divconst-2.c: Rewrite to check for standards-compliant\n+\tresult rather than specific constants.  Put test-values in array.\n+\n Sun Mar  5 23:25:12 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* execute/20000224-1.c (main): Expected return-value is\t1, not"}, {"sha": "b58f1bfddc45530d981843909e1900491adee8a5", "filename": "gcc/testsuite/gcc.c-torture/execute/divconst-2.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ec9e78291b497ce00d671fe515ba7542df0552/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivconst-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ec9e78291b497ce00d671fe515ba7542df0552/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivconst-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivconst-2.c?ref=82ec9e78291b497ce00d671fe515ba7542df0552", "patch": "@@ -4,9 +4,36 @@ f (long x)\n   return x / (-0x7fffffffL - 1L);\n }\n \n+long\n+r (long x)\n+{\n+  return x % (-0x7fffffffL - 1L);\n+}\n+\n+/* Since we have a negative divisor, this equation must hold for the\n+   results of / and %; no specific results are guaranteed.  */\n+long\n+std_eqn (long num, long denom, long quot, long rem)\n+{\n+  /* For completeness, a check for \"ABS (rem) < ABS (denom)\" belongs here,\n+     but causes trouble on 32-bit machines and isn't worthwhile.  */\n+  return quot * (-0x7fffffffL - 1L) + rem == num;\n+}\n+\n+long nums[] =\n+{\n+  -1L, 0x7fffffffL, -0x7fffffffL - 1L\n+};\n+\n main ()\n {\n-  if (f (-1L) != 0L || f (0x7fffffffL) != 0L || f (-0x7fffffffL - 1L) != 1l)\n-    abort ();\n+  int i;\n+\n+  for (i = 0;\n+       i < sizeof (nums) / sizeof (nums[0]);\n+       i++)\n+    if (std_eqn (nums[i], -0x7fffffffL - 1L, f (nums[i]), r (nums[i])) == 0)\n+      abort ();\n+\n   exit (0);\n }"}]}