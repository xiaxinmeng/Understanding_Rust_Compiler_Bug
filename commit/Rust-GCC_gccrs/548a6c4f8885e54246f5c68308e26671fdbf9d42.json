{"sha": "548a6c4f8885e54246f5c68308e26671fdbf9d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4YTZjNGY4ODg1ZTU0MjQ2ZjVjNjgzMDhlMjY2NzFmZGJmOWQ0Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-01-03T08:23:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-01-03T08:23:58Z"}, "message": "sparc.h (SPARC_RELAXED_ORDERING): Define to false.\n\n\t* config/sparc/sparc.h (SPARC_RELAXED_ORDERING): Define to false.\n\t* config/sparc/linux.h (SPARC_RELAXED_ORDERING): Define to true.\n\t* config/sparc/linux64.h (SPARC_RELAXED_ORDERING): Likewise.\n\t* config/sparc/sparc.c (TARGET_RELAXED_ORDERING): Define to\n\tSPARC_RELAXED_ORDERING.\n\nFrom-SVN: r92824", "tree": {"sha": "c81bd78bce7c6bbc171a922ee31c443d329432e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81bd78bce7c6bbc171a922ee31c443d329432e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548a6c4f8885e54246f5c68308e26671fdbf9d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548a6c4f8885e54246f5c68308e26671fdbf9d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548a6c4f8885e54246f5c68308e26671fdbf9d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548a6c4f8885e54246f5c68308e26671fdbf9d42/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0703dcebc3427694b04ba19d472fc38ec490657b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0703dcebc3427694b04ba19d472fc38ec490657b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0703dcebc3427694b04ba19d472fc38ec490657b"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "ba78b2cb4be6994606ac802eb9d71347dea19896", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=548a6c4f8885e54246f5c68308e26671fdbf9d42", "patch": "@@ -1,3 +1,11 @@\n+2005-01-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.h (SPARC_RELAXED_ORDERING): Define to false.\n+\t* config/sparc/linux.h (SPARC_RELAXED_ORDERING): Define to true.\n+\t* config/sparc/linux64.h (SPARC_RELAXED_ORDERING): Likewise.\n+\t* config/sparc/sparc.c (TARGET_RELAXED_ORDERING): Define to\n+\tSPARC_RELAXED_ORDERING.\n+\n 2005-01-03  Richard Henderson  <rth@redhat.com>\n \t    Uros Bizjak  <uros@kss-loka.si>\n "}, {"sha": "ec95ae6e30dc8d2ae6634cf54911d2bfb44940e8", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=548a6c4f8885e54246f5c68308e26671fdbf9d42", "patch": "@@ -234,3 +234,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n #define MD_UNWIND_SUPPORT \"config/sparc/linux-unwind.h\"\n+\n+/* Linux currently uses RMO in uniprocessor mode, which is equivalent to\n+   TMO, and TMO in multiprocessor mode.  But they reserve the right to\n+   change their minds.  */\n+#undef SPARC_RELAXED_ORDERING\n+#define SPARC_RELAXED_ORDERING true"}, {"sha": "deaea7795868fc285762078d17e647bdcc9c1fd8", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=548a6c4f8885e54246f5c68308e26671fdbf9d42", "patch": "@@ -371,3 +371,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n #define MD_UNWIND_SUPPORT \"config/sparc/linux-unwind.h\"\n+\n+/* Linux currently uses RMO in uniprocessor mode, which is equivalent to\n+   TMO, and TMO in multiprocessor mode.  But they reserve the right to\n+   change their minds.  */\n+#undef SPARC_RELAXED_ORDERING\n+#define SPARC_RELAXED_ORDERING true"}, {"sha": "5415beaf7f8ca4e5a4e19e8ddfb9517a4717e160", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=548a6c4f8885e54246f5c68308e26671fdbf9d42", "patch": "@@ -498,20 +498,8 @@ enum processor_type sparc_cpu;\n #define TARGET_ATTRIBUTE_TABLE sparc_attribute_table\n #endif\n \n-/* The SPARC v9 architecture defines a relaxed memory ordering model (RMO)\n-   which requires this if enabled.  Prior to v9, there are no instructions\n-   to even talk about memory syncronization.  The Ultra3 processor doesn't\n-   implement RMO.\n-\n-   Solaris never enables RMO; only ever uses total memory ordering (TMO.\n-\n-   Linux currently uses RMO in uniprocessor mode, which is equivalent to\n-   TMO, and TMO in multiprocessor mode.  But they reserve the right to\n-   change their minds.  */\n-/* ??? Getting the configury correct is harder than it's worth.  Just\n-   enable it all the time.  */\n #undef TARGET_RELAXED_ORDERING\n-#define TARGET_RELAXED_ORDERING true\n+#define TARGET_RELAXED_ORDERING SPARC_RELAXED_ORDERING\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f"}, {"sha": "673b1da854ffcd6165b250fabf95cdeec06e8539", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548a6c4f8885e54246f5c68308e26671fdbf9d42/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=548a6c4f8885e54246f5c68308e26671fdbf9d42", "patch": "@@ -204,6 +204,16 @@ extern enum cmodel sparc_cmodel;\n \n #define SPARC_DEFAULT_CMODEL CM_32\n \n+/* The SPARC-V9 architecture defines a relaxed memory ordering model (RMO)\n+   which requires the following macro to be true if enabled.  Prior to V9,\n+   there are no instructions to even talk about memory synchronization.\n+   Note that the UltraSPARC III processors don't implement RMO, unlike the\n+   UltraSPARC II processors.\n+\n+   Default to false; for example, Solaris never enables RMO, only ever uses\n+   total memory ordering (TMO).  */\n+#define SPARC_RELAXED_ORDERING false\n+\n /* This is call-clobbered in the normal ABI, but is reserved in the\n    home grown (aka upward compatible) embedded ABI.  */\n #define EMBMEDANY_BASE_REG \"%g4\""}]}