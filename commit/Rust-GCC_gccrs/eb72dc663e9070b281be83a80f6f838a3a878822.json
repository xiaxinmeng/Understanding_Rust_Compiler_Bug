{"sha": "eb72dc663e9070b281be83a80f6f838a3a878822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3MmRjNjYzZTkwNzBiMjgxYmU4M2E4MGY2ZjgzOGEzYTg3ODgyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-22T08:40:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-07T13:38:20Z"}, "message": "extend DECL_GIMPLE_REG_P to all types\n\nThis extends DECL_GIMPLE_REG_P to all types so we can clear\nTREE_ADDRESSABLE even for integers with partial defs, not just\ncomplex and vector variables.  To make that transition easier\nthe patch inverts DECL_GIMPLE_REG_P to DECL_NOT_GIMPLE_REG_P\nsince that makes the default the current state for all other\ntypes besides complex and vectors.\n\nFor the testcase in PR94703 we're able to expand the partial\ndef'ed local integer to a register then, producing a single\nmovl rather than going through the stack.\n\nOn i?86 this execute FAILs gcc.dg/torture/pr71522.c because\nwe now expand a round-trip through a long double automatic var\nto a register fld/fst which normalizes the value.  For that\nduring RTL expansion we're looking for problematic punnings\nof decls and avoid pseudos for those - I chose integer or\nBLKmode accesses on decls with modes where precision doesn't\nmatch bitsize which covers the XFmode case.\n\n2020-05-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/94703\n\t* tree-core.h (tree_decl_common::gimple_reg_flag): Rename ...\n\t(tree_decl_common::not_gimple_reg_flag): ... to this.\n\t* tree.h (DECL_GIMPLE_REG_P): Rename ...\n\t(DECL_NOT_GIMPLE_REG_P): ... to this.\n\t* gimple-expr.c (copy_var_decl): Copy DECL_NOT_GIMPLE_REG_P.\n\t(create_tmp_reg): Simplify.\n\t(create_tmp_reg_fn): Likewise.\n\t(is_gimple_reg): Check DECL_NOT_GIMPLE_REG_P for all regs.\n\t* gimplify.c (create_tmp_from_val): Simplify.\n\t(gimplify_bind_expr): Likewise.\n\t(gimplify_compound_literal_expr): Likewise.\n\t(gimplify_function_tree): Likewise.\n\t(prepare_gimple_addressable): Set DECL_NOT_GIMPLE_REG_P.\n\t* asan.c (create_odr_indicator): Do not clear DECL_GIMPLE_REG_P.\n\t(asan_add_global): Copy it.\n\t* cgraphunit.c (cgraph_node::expand_thunk): Force args\n\tto be GIMPLE regs.\n\t* function.c (gimplify_parameters): Copy\n\tDECL_NOT_GIMPLE_REG_P.\n\t* ipa-param-manipulation.c\n\t(ipa_param_body_adjustments::common_initialization): Simplify.\n\t(ipa_param_body_adjustments::reset_debug_stmts): Copy\n\tDECL_NOT_GIMPLE_REG_P.\n\t* omp-low.c (lower_omp_for_scan): Do not set DECL_GIMPLE_REG_P.\n\t* sanopt.c (sanitize_rewrite_addressable_params): Likewise.\n\t* tree-cfg.c (make_blocks_1): Simplify.\n\t(verify_address): Do not verify DECL_GIMPLE_REG_P setting.\n\t* tree-eh.c (lower_eh_constructs_2): Simplify.\n\t* tree-inline.c (declare_return_variable): Adjust and\n\tgeneralize.\n\t(copy_decl_to_var): Copy DECL_NOT_GIMPLE_REG_P.\n\t(copy_result_decl_to_var): Likewise.\n\t* tree-into-ssa.c (pass_build_ssa::execute): Adjust comment.\n\t* tree-nested.c (create_tmp_var_for): Simplify.\n\t* tree-parloops.c (separate_decls_in_region_name): Copy\n\tDECL_NOT_GIMPLE_REG_P.\n\t* tree-sra.c (create_access_replacement): Adjust and\n\tgeneralize partial def support.\n\t* tree-ssa-forwprop.c (pass_forwprop::execute): Set\n\tDECL_NOT_GIMPLE_REG_P on decls we introduce partial defs on.\n\t* tree-ssa.c (maybe_optimize_var): Handle clearing of\n\tTREE_ADDRESSABLE and setting/clearing DECL_NOT_GIMPLE_REG_P\n\tindependently.\n\t* lto-streamer-out.c (hash_tree): Hash DECL_NOT_GIMPLE_REG_P.\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Stream\n\tDECL_NOT_GIMPLE_REG_P.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n\t* cfgexpand.c (avoid_type_punning_on_regs): New.\n\t(discover_nonconstant_array_refs): Call\n\tavoid_type_punning_on_regs to avoid unsupported mode punning.\n\n\tlto/\n\t* lto-common.c (compare_tree_sccs_1): Compare\n\tDECL_NOT_GIMPLE_REG_P.\n\n\tc/\n\t* gimple-parser.c (c_parser_parse_ssa_name): Do not set\n\tDECL_GIMPLE_REG_P.\n\n\tcp/\n\t* optimize.c (update_cloned_parm): Copy DECL_NOT_GIMPLE_REG_P.\n\n\t* gcc.dg/tree-ssa/pr94703.c: New testcase.", "tree": {"sha": "6c6473ab19f840f1c108dd3fbd2c77ad9b0d4a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c6473ab19f840f1c108dd3fbd2c77ad9b0d4a7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb72dc663e9070b281be83a80f6f838a3a878822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb72dc663e9070b281be83a80f6f838a3a878822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb72dc663e9070b281be83a80f6f838a3a878822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb72dc663e9070b281be83a80f6f838a3a878822/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d865b29abc99122e9faf109fe8faf2d6616a073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d865b29abc99122e9faf109fe8faf2d6616a073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d865b29abc99122e9faf109fe8faf2d6616a073"}], "stats": {"total": 358, "additions": 194, "deletions": 164}, "files": [{"sha": "ca4a7e450d16e26a044e5f9c3f76c7c98ad632ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1,3 +1,57 @@\n+2020-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94703\n+\t* tree-core.h (tree_decl_common::gimple_reg_flag): Rename ...\n+\t(tree_decl_common::not_gimple_reg_flag): ... to this.\n+\t* tree.h (DECL_GIMPLE_REG_P): Rename ...\n+\t(DECL_NOT_GIMPLE_REG_P): ... to this.\n+\t* gimple-expr.c (copy_var_decl): Copy DECL_NOT_GIMPLE_REG_P.\n+\t(create_tmp_reg): Simplify.\n+\t(create_tmp_reg_fn): Likewise.\n+\t(is_gimple_reg): Check DECL_NOT_GIMPLE_REG_P for all regs.\n+\t* gimplify.c (create_tmp_from_val): Simplify.\n+\t(gimplify_bind_expr): Likewise.\n+\t(gimplify_compound_literal_expr): Likewise.\n+\t(gimplify_function_tree): Likewise.\n+\t(prepare_gimple_addressable): Set DECL_NOT_GIMPLE_REG_P.\n+\t* asan.c (create_odr_indicator): Do not clear DECL_GIMPLE_REG_P.\n+\t(asan_add_global): Copy it.\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Force args\n+\tto be GIMPLE regs.\n+\t* function.c (gimplify_parameters): Copy\n+\tDECL_NOT_GIMPLE_REG_P.\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_body_adjustments::common_initialization): Simplify.\n+\t(ipa_param_body_adjustments::reset_debug_stmts): Copy\n+\tDECL_NOT_GIMPLE_REG_P.\n+\t* omp-low.c (lower_omp_for_scan): Do not set DECL_GIMPLE_REG_P.\n+\t* sanopt.c (sanitize_rewrite_addressable_params): Likewise.\n+\t* tree-cfg.c (make_blocks_1): Simplify.\n+\t(verify_address): Do not verify DECL_GIMPLE_REG_P setting.\n+\t* tree-eh.c (lower_eh_constructs_2): Simplify.\n+\t* tree-inline.c (declare_return_variable): Adjust and\n+\tgeneralize.\n+\t(copy_decl_to_var): Copy DECL_NOT_GIMPLE_REG_P.\n+\t(copy_result_decl_to_var): Likewise.\n+\t* tree-into-ssa.c (pass_build_ssa::execute): Adjust comment.\n+\t* tree-nested.c (create_tmp_var_for): Simplify.\n+\t* tree-parloops.c (separate_decls_in_region_name): Copy\n+\tDECL_NOT_GIMPLE_REG_P.\n+\t* tree-sra.c (create_access_replacement): Adjust and\n+\tgeneralize partial def support.\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Set\n+\tDECL_NOT_GIMPLE_REG_P on decls we introduce partial defs on.\n+\t* tree-ssa.c (maybe_optimize_var): Handle clearing of\n+\tTREE_ADDRESSABLE and setting/clearing DECL_NOT_GIMPLE_REG_P\n+\tindependently.\n+\t* lto-streamer-out.c (hash_tree): Hash DECL_NOT_GIMPLE_REG_P.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Stream\n+\tDECL_NOT_GIMPLE_REG_P.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n+\t* cfgexpand.c (avoid_type_punning_on_regs): New.\n+\t(discover_nonconstant_array_refs): Call\n+\tavoid_type_punning_on_regs to avoid unsupported mode punning.\n+\n 2020-05-07  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/arm/arm.c (arm_add_stmt_cost): Fix declaration, remove class"}, {"sha": "c9872f1b0075ddfb1ddd40dabe707421429d8264", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2696,7 +2696,6 @@ create_odr_indicator (tree decl, tree type)\n   TREE_ADDRESSABLE (var) = 1;\n   TREE_READONLY (var) = 0;\n   TREE_THIS_VOLATILE (var) = 1;\n-  DECL_GIMPLE_REG_P (var) = 0;\n   DECL_ARTIFICIAL (var) = 1;\n   DECL_IGNORED_P (var) = 1;\n   TREE_STATIC (var) = 1;\n@@ -2766,7 +2765,7 @@ asan_add_global (tree decl, tree type, vec<constructor_elt, va_gc> *v)\n       TREE_ADDRESSABLE (refdecl) = TREE_ADDRESSABLE (decl);\n       TREE_READONLY (refdecl) = TREE_READONLY (decl);\n       TREE_THIS_VOLATILE (refdecl) = TREE_THIS_VOLATILE (decl);\n-      DECL_GIMPLE_REG_P (refdecl) = DECL_GIMPLE_REG_P (decl);\n+      DECL_NOT_GIMPLE_REG_P (refdecl) = DECL_NOT_GIMPLE_REG_P (decl);\n       DECL_ARTIFICIAL (refdecl) = DECL_ARTIFICIAL (decl);\n       DECL_IGNORED_P (refdecl) = DECL_IGNORED_P (decl);\n       TREE_STATIC (refdecl) = 1;"}, {"sha": "7cf774ed171d76856a358c7aca3b35d924621e3c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1,3 +1,9 @@\n+2020-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94703\n+\t* gimple-parser.c (c_parser_parse_ssa_name): Do not set\n+\tDECL_GIMPLE_REG_P.\n+\n 2020-04-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/94842"}, {"sha": "577d8b58c7d80dd0170ace60acfff4f9e6a1a609", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1272,9 +1272,6 @@ c_parser_parse_ssa_name (gimple_parser &parser,\n \t      error (\"invalid base %qE for SSA name\", parent);\n \t      return error_mark_node;\n \t    }\n-\t  if (VECTOR_TYPE_P (TREE_TYPE (parent))\n-\t      || TREE_CODE (TREE_TYPE (parent)) == COMPLEX_TYPE)\n-\t    DECL_GIMPLE_REG_P (parent) = 1;\n \t  name = make_ssa_name_fn (cfun, parent,\n \t\t\t\t   gimple_build_nop (), version);\n \t}"}, {"sha": "2f6ec97ed04f2023d71be8bb5b40bd74333a24f4", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -6126,6 +6126,29 @@ discover_nonconstant_array_refs_r (tree * tp, int *walk_subtrees,\n   return NULL_TREE;\n }\n \n+/* If there's a chance to get a pseudo for t then if it would be of float mode\n+   and the actual access is via an integer mode (lowered memcpy or similar\n+   access) then avoid the register expansion if the mode likely is not storage\n+   suitable for raw bits processing (like XFmode on i?86).  */\n+\n+static void\n+avoid_type_punning_on_regs (tree t)\n+{\n+  machine_mode access_mode = TYPE_MODE (TREE_TYPE (t));\n+  if (access_mode != BLKmode\n+      && !SCALAR_INT_MODE_P (access_mode))\n+    return;\n+  tree base = get_base_address (t);\n+  if (DECL_P (base)\n+      && !TREE_ADDRESSABLE (base)\n+      && FLOAT_MODE_P (DECL_MODE (base))\n+      && maybe_lt (GET_MODE_PRECISION (DECL_MODE (base)),\n+\t\t   GET_MODE_BITSIZE (GET_MODE_INNER (DECL_MODE (base))))\n+      /* Double check in the expensive way we really would get a pseudo.  */\n+      && use_register_for_decl (base))\n+    TREE_ADDRESSABLE (base) = 1;\n+}\n+\n /* RTL expansion is not able to compile array references with variable\n    offsets for arrays stored in single register.  Discover such\n    expressions and mark variables as addressable to avoid this\n@@ -6159,6 +6182,12 @@ discover_nonconstant_array_refs (void)\n \t\tdefault:\n \t\t  break;\n \t\t}\n+\t    if (gimple_vdef (stmt))\n+\t      {\n+\t\ttree t = gimple_get_lhs (stmt);\n+\t\tif (t && REFERENCE_CLASS_P (t))\n+\t\t  avoid_type_punning_on_regs (t);\n+\t      }\n \t  }\n       }\n }"}, {"sha": "0563932a7096492c367641ca646324331f042909", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2058,10 +2058,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \tfor (; i < nargs; i++, arg = DECL_CHAIN (arg))\n \t  {\n \t    tree tmp = arg;\n-\t    if (VECTOR_TYPE_P (TREE_TYPE (arg))\n-\t\t|| TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n-\t      DECL_GIMPLE_REG_P (arg) = 1;\n-\n+\t    DECL_NOT_GIMPLE_REG_P (arg) = 0;\n \t    if (!is_gimple_val (arg))\n \t      {\n \t\ttmp = create_tmp_reg (TYPE_MAIN_VARIANT"}, {"sha": "19da17a39c3c9f3415606c3b5aa0095d43884495", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94703\n+\t* optimize.c (update_cloned_parm): Copy DECL_NOT_GIMPLE_REG_P.\n+\n 2020-05-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94938"}, {"sha": "abdcd7fa19f7c3ba08e7ce27843212c30703004d", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -58,7 +58,7 @@ update_cloned_parm (tree parm, tree cloned_parm, bool first)\n   DECL_SOURCE_LOCATION (cloned_parm) = DECL_SOURCE_LOCATION (parm);\n   TREE_TYPE (cloned_parm) = TREE_TYPE (parm);\n \n-  DECL_GIMPLE_REG_P (cloned_parm) = DECL_GIMPLE_REG_P (parm);\n+  DECL_NOT_GIMPLE_REG_P (cloned_parm) = DECL_NOT_GIMPLE_REG_P (parm);\n }\n \n /* Like copy_decl_no_change, but handle DECL_OMP_PRIVATIZED_MEMBER"}, {"sha": "9eee9b59bfdd7e898da353c5d8a2ae76ce4da034", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -3913,9 +3913,8 @@ gimplify_parameters (gimple_seq *cleanup)\n \t\t     as we'll query that flag during gimplification.  */\n \t\t  if (TREE_ADDRESSABLE (parm))\n \t\t    TREE_ADDRESSABLE (local) = 1;\n-\t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n-\t\t\t   || TREE_CODE (type) == VECTOR_TYPE)\n-\t\t    DECL_GIMPLE_REG_P (local) = 1;\n+\t\t  if (DECL_NOT_GIMPLE_REG_P (parm))\n+\t\t    DECL_NOT_GIMPLE_REG_P (local) = 1;\n \n \t\t  if (!is_gimple_reg (local)\n \t\t      && flag_stack_reuse != SR_NONE)"}, {"sha": "45871ac2c2720a5925766473ffdf612af093787b", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -373,7 +373,7 @@ copy_var_decl (tree var, tree name, tree type)\n \n   TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (var);\n   TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (var);\n-  DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (var);\n+  DECL_NOT_GIMPLE_REG_P (copy) = DECL_NOT_GIMPLE_REG_P (var);\n   DECL_ARTIFICIAL (copy) = DECL_ARTIFICIAL (var);\n   DECL_IGNORED_P (copy) = DECL_IGNORED_P (var);\n   DECL_CONTEXT (copy) = DECL_CONTEXT (var);\n@@ -493,14 +493,7 @@ create_tmp_var (tree type, const char *prefix)\n tree\n create_tmp_reg (tree type, const char *prefix)\n {\n-  tree tmp;\n-\n-  tmp = create_tmp_var (type, prefix);\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp) = 1;\n-\n-  return tmp;\n+  return create_tmp_var (type, prefix);\n }\n \n /* Create a new temporary variable declaration of type TYPE by calling\n@@ -514,9 +507,6 @@ create_tmp_reg_fn (struct function *fn, tree type, const char *prefix)\n \n   tmp = create_tmp_var_raw (type, prefix);\n   gimple_add_tmp_var_fn (fn, tmp);\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp) = 1;\n \n   return tmp;\n }\n@@ -792,13 +782,9 @@ is_gimple_reg (tree t)\n   if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n     return false;\n \n-  /* Complex and vector values must have been put into SSA-like form.\n-     That is, no assignments to the individual components.  */\n-  if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-    return DECL_GIMPLE_REG_P (t);\n-\n-  return true;\n+  /* Variables can be marked as having partial definitions, avoid\n+     putting them into SSA form.  */\n+  return !DECL_NOT_GIMPLE_REG_P (t);\n }\n \n "}, {"sha": "1d532e6f373956e6394c253b43c1dc998398e33b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 44, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -559,9 +559,6 @@ create_tmp_from_val (tree val)\n   /* Drop all qualifiers and address-space information from the value type.  */\n   tree type = TYPE_MAIN_VARIANT (TREE_TYPE (val));\n   tree var = create_tmp_var (type, get_name (val));\n-  if (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n-      || TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (var) = 1;\n   return var;\n }\n \n@@ -1400,16 +1397,6 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t  if (DECL_HARD_REGISTER (t) && !is_global_var (t) && cfun)\n \t    cfun->has_local_explicit_reg_vars = true;\n \t}\n-\n-      /* Preliminarily mark non-addressed complex variables as eligible\n-\t for promotion to gimple registers.  We'll transform their uses\n-\t as we find them.  */\n-      if ((TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-\t   || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-\t  && !TREE_THIS_VOLATILE (t)\n-\t  && (VAR_P (t) && !DECL_HARD_REGISTER (t))\n-\t  && !needs_to_live_in_memory (t))\n-\tDECL_GIMPLE_REG_P (t) = 1;\n     }\n \n   bind_stmt = gimple_build_bind (BIND_EXPR_VARS (bind_expr), NULL,\n@@ -4308,7 +4295,7 @@ prepare_gimple_addressable (tree *expr_p, gimple_seq *seq_p)\n     {\n       /* Do not allow an SSA name as the temporary.  */\n       tree var = get_initialized_tmp_var (*expr_p, seq_p, NULL, false);\n-      DECL_GIMPLE_REG_P (var) = 0;\n+      DECL_NOT_GIMPLE_REG_P (var) = 1;\n       *expr_p = var;\n     }\n }\n@@ -4774,15 +4761,6 @@ gimplify_compound_literal_expr (tree *expr_p, gimple_seq *pre_p,\n       return GS_OK;\n     }\n \n-  /* Preliminarily mark non-addressed complex variables as eligible\n-     for promotion to gimple registers.  We'll transform their uses\n-     as we find them.  */\n-  if ((TREE_CODE (TREE_TYPE (decl)) == COMPLEX_TYPE\n-       || TREE_CODE (TREE_TYPE (decl)) == VECTOR_TYPE)\n-      && !TREE_THIS_VOLATILE (decl)\n-      && !needs_to_live_in_memory (decl))\n-    DECL_GIMPLE_REG_P (decl) = 1;\n-\n   /* If the decl is not addressable, then it is being used in some\n      expression or on the right hand side of a statement, and it can\n      be put into a readonly data section.  */\n@@ -5617,8 +5595,7 @@ is_gimple_stmt (tree t)\n \n \n /* Promote partial stores to COMPLEX variables to total stores.  *EXPR_P is\n-   a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a variable with\n-   DECL_GIMPLE_REG_P set.\n+   a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a gimple register.\n \n    IMPORTANT NOTE: This promotion is performed by introducing a load of the\n    other, unmodified part of the complex object just before the total store.\n@@ -14992,7 +14969,6 @@ flag_instrument_functions_exclude_p (tree fndecl)\n void\n gimplify_function_tree (tree fndecl)\n {\n-  tree parm, ret;\n   gimple_seq seq;\n   gbind *bind;\n \n@@ -15007,24 +14983,6 @@ gimplify_function_tree (tree fndecl)\n      if necessary.  */\n   cfun->curr_properties |= PROP_gimple_lva;\n \n-  for (parm = DECL_ARGUMENTS (fndecl); parm ; parm = DECL_CHAIN (parm))\n-    {\n-      /* Preliminarily mark non-addressed complex variables as eligible\n-         for promotion to gimple registers.  We'll transform their uses\n-         as we find them.  */\n-      if ((TREE_CODE (TREE_TYPE (parm)) == COMPLEX_TYPE\n-\t   || TREE_CODE (TREE_TYPE (parm)) == VECTOR_TYPE)\n-          && !TREE_THIS_VOLATILE (parm)\n-          && !needs_to_live_in_memory (parm))\n-        DECL_GIMPLE_REG_P (parm) = 1;\n-    }\n-\n-  ret = DECL_RESULT (fndecl);\n-  if ((TREE_CODE (TREE_TYPE (ret)) == COMPLEX_TYPE\n-       || TREE_CODE (TREE_TYPE (ret)) == VECTOR_TYPE)\n-      && !needs_to_live_in_memory (ret))\n-    DECL_GIMPLE_REG_P (ret) = 1;\n-\n   if (asan_sanitize_use_after_scope () && sanitize_flags_p (SANITIZE_ADDRESS))\n     asan_poisoned_variables = new hash_set<tree> ();\n   bind = gimplify_body (fndecl, true);"}, {"sha": "978916057f07038f2949475d22db5d08c5f521cb", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1028,10 +1028,6 @@ ipa_param_body_adjustments::common_initialization (tree old_fndecl,\n \t  DECL_CONTEXT (new_parm) = m_fndecl;\n \t  TREE_USED (new_parm) = 1;\n \t  DECL_IGNORED_P (new_parm) = 1;\n-\t  /* We assume all newly created arguments are not addressable.  */\n-\t  if (TREE_CODE (new_type) == COMPLEX_TYPE\n-\t      || TREE_CODE (new_type) == VECTOR_TYPE)\n-\t    DECL_GIMPLE_REG_P (new_parm) = 1;\n \t  layout_decl (new_parm, 0);\n \t  m_new_decls.quick_push (new_parm);\n \n@@ -1888,7 +1884,7 @@ ipa_param_body_adjustments::reset_debug_stmts ()\n \t  TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (decl);\n \t  TREE_READONLY (copy) = TREE_READONLY (decl);\n \t  TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (decl);\n-\t  DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (decl);\n+\t  DECL_NOT_GIMPLE_REG_P (copy) = DECL_NOT_GIMPLE_REG_P (decl);\n \t  DECL_ARTIFICIAL (copy) = DECL_ARTIFICIAL (decl);\n \t  DECL_IGNORED_P (copy) = DECL_IGNORED_P (decl);\n \t  DECL_ABSTRACT_ORIGIN (copy) = DECL_ORIGIN (decl);"}, {"sha": "3d94324881f5443230c6e6b3f4ab4e1058386f62", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1067,7 +1067,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       hstate.add_flag (DECL_USER_ALIGN (t));\n       hstate.add_flag (DECL_PRESERVE_P (t));\n       hstate.add_flag (DECL_EXTERNAL (t));\n-      hstate.add_flag (DECL_GIMPLE_REG_P (t));\n+      hstate.add_flag (DECL_NOT_GIMPLE_REG_P (t));\n       hstate.commit_flag ();\n       hstate.add_int (DECL_ALIGN (t));\n       if (code == LABEL_DECL)"}, {"sha": "dfcb9da83147072851620296a374964e5afdcff8", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1,3 +1,9 @@\n+2020-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94703\n+\t* lto-common.c (compare_tree_sccs_1): Compare\n+\tDECL_NOT_GIMPLE_REG_P.\n+\n 2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94707"}, {"sha": "682a82d61ba6f356c46544780cc0da3a7fc243cf", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1167,7 +1167,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_USER_ALIGN);\n       compare_values (DECL_PRESERVE_P);\n       compare_values (DECL_EXTERNAL);\n-      compare_values (DECL_GIMPLE_REG_P);\n+      compare_values (DECL_NOT_GIMPLE_REG_P);\n       compare_values (DECL_ALIGN);\n       if (code == LABEL_DECL)\n \t{"}, {"sha": "c8c9db43afbb3775d57e3ae1c164ecdd47a24568", "filename": "gcc/omp-low.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -10322,7 +10322,6 @@ lower_omp_for_scan (gimple_seq *body_p, gimple_seq *dlist, gomp_for *stmt,\n   gimple_seq_add_stmt (body_p, g);\n \n   tree cplx = create_tmp_var (build_complex_type (unsigned_type_node, false));\n-  DECL_GIMPLE_REG_P (cplx) = 1;\n   g = gimple_build_call_internal (IFN_MUL_OVERFLOW, 2, thread_nump1, twok);\n   gimple_call_set_lhs (g, cplx);\n   gimple_seq_add_stmt (body_p, g);"}, {"sha": "86180e32c7e03eb7a6cc75d4001a6ae7eb9fe485", "filename": "gcc/sanopt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1189,7 +1189,6 @@ sanitize_rewrite_addressable_params (function *fun)\n \t    {\n \t      /* We need to create a SSA name that will be used for the\n \t\t assignment.  */\n-\t      DECL_GIMPLE_REG_P (arg) = 1;\n \t      tree tmp = get_or_create_ssa_default_def (cfun, arg);\n \t      g = gimple_build_assign (var, tmp);\n \t      gimple_set_location (g, DECL_SOURCE_LOCATION (arg));"}, {"sha": "511c582007319a36d4d262bf1d66216f03cf05fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94703\n+\t* gcc.dg/tree-ssa/pr94703.c: New testcase.\n+\n 2020-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94946"}, {"sha": "7209fa0a4d41425ad3261d3323c4a095bb18fd15", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94703.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94703.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94703.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94703.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ssa\" } */\n+\n+unsigned int set_lowpart (unsigned int const *X)\n+{\n+  unsigned int r = 0;\n+  __builtin_memcpy(&r,X,sizeof (unsigned int) / 2);\n+  return r;\n+}\n+\n+/* { dg-final { scan-tree-dump \"No longer having address taken: r\" \"ssa\" } } */"}, {"sha": "d06a479e570274d2943996749ec070075a36d3a6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -577,9 +577,6 @@ make_blocks_1 (gimple_seq seq, basic_block bb)\n \t      gimple_set_location (s, gimple_location (stmt));\n \t      gimple_set_block (s, gimple_block (stmt));\n \t      gimple_set_lhs (stmt, tmp);\n-\t      if (TREE_CODE (TREE_TYPE (tmp)) == COMPLEX_TYPE\n-\t\t  || TREE_CODE (TREE_TYPE (tmp)) == VECTOR_TYPE)\n-\t\tDECL_GIMPLE_REG_P (tmp) = 1;\n \t      gsi_insert_after (&i, s, GSI_SAME_STMT);\n \t    }\n \t  start_new_block = true;\n@@ -2983,12 +2980,6 @@ verify_address (tree t, bool verify_addressable)\n \t|| TREE_CODE (base) == RESULT_DECL))\n     return false;\n \n-  if (DECL_GIMPLE_REG_P (base))\n-    {\n-      error (\"%<DECL_GIMPLE_REG_P%> set on a variable with address taken\");\n-      return true;\n-    }\n-\n   if (verify_addressable && !TREE_ADDRESSABLE (base))\n     {\n       error (\"address taken but %<TREE_ADDRESSABLE%> bit not set\");"}, {"sha": "03091486731d5ca28d1e32bda866a8c7d59ecc4b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1724,7 +1724,7 @@ struct GTY(()) tree_decl_common {\n   unsigned decl_flag_3 : 1;\n   /* Logically, these two would go in a theoretical base shared by var and\n      parm decl. */\n-  unsigned gimple_reg_flag : 1;\n+  unsigned not_gimple_reg_flag : 1;\n   /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_BY_REFERENCE.  */\n   unsigned decl_by_reference_flag : 1;\n   /* In a VAR_DECL and PARM_DECL, this is DECL_READ_P.  */"}, {"sha": "10ef2e3157c04523d9188e7c8fe1068d3341b568", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2072,9 +2072,6 @@ lower_eh_constructs_2 (struct leh_state *state, gimple_stmt_iterator *gsi)\n \t  gimple_set_location (s, gimple_location (stmt));\n \t  gimple_set_block (s, gimple_block (stmt));\n \t  gimple_set_lhs (stmt, tmp);\n-\t  if (TREE_CODE (TREE_TYPE (tmp)) == COMPLEX_TYPE\n-\t      || TREE_CODE (TREE_TYPE (tmp)) == VECTOR_TYPE)\n-\t    DECL_GIMPLE_REG_P (tmp) = 1;\n \t  gsi_insert_after (gsi, s, GSI_SAME_STMT);\n \t}\n       /* Look for things that can throw exceptions, and record them.  */"}, {"sha": "8c5d5da0567703feacee5fffbabd22eb74a3491a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -3670,11 +3670,9 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n \t  if (TREE_ADDRESSABLE (result))\n \t    mark_addressable (var);\n \t}\n-      if ((TREE_CODE (TREE_TYPE (result)) == COMPLEX_TYPE\n-           || TREE_CODE (TREE_TYPE (result)) == VECTOR_TYPE)\n-\t  && !DECL_GIMPLE_REG_P (result)\n+      if (DECL_NOT_GIMPLE_REG_P (result)\n \t  && DECL_P (var))\n-\tDECL_GIMPLE_REG_P (var) = 0;\n+\tDECL_NOT_GIMPLE_REG_P (var) = 1;\n \n       if (!useless_type_conversion_p (callee_type, caller_type))\n \tvar = build1 (VIEW_CONVERT_EXPR, callee_type, var);\n@@ -3717,10 +3715,8 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n \t    use_it = false;\n \t  else if (is_global_var (base_m))\n \t    use_it = false;\n-\t  else if ((TREE_CODE (TREE_TYPE (result)) == COMPLEX_TYPE\n-\t\t    || TREE_CODE (TREE_TYPE (result)) == VECTOR_TYPE)\n-\t\t   && !DECL_GIMPLE_REG_P (result)\n-\t\t   && DECL_GIMPLE_REG_P (base_m))\n+\t  else if (DECL_NOT_GIMPLE_REG_P (result)\n+\t\t   && !DECL_NOT_GIMPLE_REG_P (base_m))\n \t    use_it = false;\n \t  else if (!TREE_ADDRESSABLE (base_m))\n \t    use_it = true;\n@@ -3760,11 +3756,8 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n \t     to using a MEM_REF to not leak invalid GIMPLE to the following\n \t     passes.  */\n \t  /* Prevent var from being written into SSA form.  */\n-\t  if (TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE\n-\t      || TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE)\n-\t    DECL_GIMPLE_REG_P (var) = false;\n-\t  else if (is_gimple_reg_type (TREE_TYPE (var)))\n-\t    TREE_ADDRESSABLE (var) = true;\n+\t  if (is_gimple_reg_type (TREE_TYPE (var)))\n+\t    DECL_NOT_GIMPLE_REG_P (var) = true;\n \t  use = fold_build2 (MEM_REF, caller_type,\n \t\t\t     build_fold_addr_expr (var),\n \t\t\t     build_int_cst (ptr_type_node, 0));\n@@ -5930,7 +5923,7 @@ copy_decl_to_var (tree decl, copy_body_data *id)\n   TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (decl);\n   TREE_READONLY (copy) = TREE_READONLY (decl);\n   TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (decl);\n-  DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (decl);\n+  DECL_NOT_GIMPLE_REG_P (copy) = DECL_NOT_GIMPLE_REG_P (decl);\n   DECL_BY_REFERENCE (copy) = DECL_BY_REFERENCE (decl);\n \n   return copy_decl_for_dup_finish (id, decl, copy);\n@@ -5960,7 +5953,12 @@ copy_result_decl_to_var (tree decl, copy_body_data *id)\n   if (!DECL_BY_REFERENCE (decl))\n     {\n       TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (decl);\n-      DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (decl);\n+      DECL_NOT_GIMPLE_REG_P (copy)\n+\t= (DECL_NOT_GIMPLE_REG_P (decl)\n+\t   /* RESULT_DECLs are treated special by needs_to_live_in_memory,\n+\t      mirror that to the created VAR_DECL.  */\n+\t   || (TREE_CODE (decl) == RESULT_DECL\n+\t       && aggregate_value_p (decl, id->src_fn)));\n     }\n \n   return copy_decl_for_dup_finish (id, decl, copy);"}, {"sha": "c24931effac557712b658821309dfece5bdf787c", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2430,8 +2430,7 @@ pass_build_ssa::execute (function *fun)\n   basic_block bb;\n \n   /* Increase the set of variables we can rewrite into SSA form\n-     by clearing TREE_ADDRESSABLE and setting DECL_GIMPLE_REG_P\n-     and transform the IL to support this.  */\n+     by clearing TREE_ADDRESSABLE and transform the IL to support this.  */\n   if (optimize)\n     execute_update_addresses_taken ();\n "}, {"sha": "de168df70a13858b83359e5b91607a7e5e88c14b", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -160,9 +160,6 @@ create_tmp_var_for (struct nesting_info *info, tree type, const char *prefix)\n   DECL_CONTEXT (tmp_var) = info->context;\n   DECL_CHAIN (tmp_var) = info->new_local_var_chain;\n   DECL_SEEN_IN_BIND_EXPR_P (tmp_var) = 1;\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp_var) = 1;\n \n   info->new_local_var_chain = tmp_var;\n "}, {"sha": "8cd50234a1cc25cf082256b80c2d677cf183ff04", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1574,7 +1574,7 @@ separate_decls_in_region_name (tree name, name_to_copy_table_type *name_copies,\n   if (!dslot->to)\n     {\n       var_copy = create_tmp_var (TREE_TYPE (var), get_name (var));\n-      DECL_GIMPLE_REG_P (var_copy) = DECL_GIMPLE_REG_P (var);\n+      DECL_NOT_GIMPLE_REG_P (var_copy) = DECL_NOT_GIMPLE_REG_P (var);\n       dslot->uid = uid;\n       dslot->to = var_copy;\n "}, {"sha": "4793b48f32c4d048ba50d471f50d8ac1354563cf", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2168,15 +2168,9 @@ create_access_replacement (struct access *access, tree reg_type = NULL_TREE)\n        variant.  This avoids issues with weirdo ABIs like AAPCS.  */\n     repl = create_tmp_var (build_qualified_type (TYPE_MAIN_VARIANT (type),\n \t\t\t\t\t\t TYPE_QUALS (type)), \"SR\");\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    {\n-      if (!access->grp_partial_lhs)\n-\tDECL_GIMPLE_REG_P (repl) = 1;\n-    }\n-  else if (access->grp_partial_lhs\n-\t   && is_gimple_reg_type (type))\n-    TREE_ADDRESSABLE (repl) = 1;\n+  if (access->grp_partial_lhs\n+      && is_gimple_reg_type (type))\n+    DECL_NOT_GIMPLE_REG_P (repl) = 1;\n \n   DECL_SOURCE_LOCATION (repl) = DECL_SOURCE_LOCATION (access->base);\n   DECL_ARTIFICIAL (repl) = 1;"}, {"sha": "b2ea3622d704028498ad8734f43fbe0846717de0", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2962,6 +2962,8 @@ pass_forwprop::execute (function *fun)\n \t\t      != TARGET_MEM_REF))\n \t\t{\n \t\t  tree use_lhs = gimple_assign_lhs (use_stmt);\n+\t\t  if (auto_var_p (use_lhs))\n+\t\t    DECL_NOT_GIMPLE_REG_P (use_lhs) = 1;\n \t\t  tree new_lhs = build1 (REALPART_EXPR,\n \t\t\t\t\t TREE_TYPE (TREE_TYPE (use_lhs)),\n \t\t\t\t\t unshare_expr (use_lhs));\n@@ -3013,6 +3015,9 @@ pass_forwprop::execute (function *fun)\n \t\t    = tree_to_uhwi (TYPE_SIZE (elt_t));\n \t\t  unsigned HOST_WIDE_INT n\n \t\t    = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (rhs)));\n+\t\t  tree use_lhs = gimple_assign_lhs (use_stmt);\n+\t\t  if (auto_var_p (use_lhs))\n+\t\t    DECL_NOT_GIMPLE_REG_P (use_lhs) = 1;\n \t\t  for (unsigned HOST_WIDE_INT bi = 0; bi < n; bi += elt_w)\n \t\t    {\n \t\t      unsigned HOST_WIDE_INT ci = bi / elt_w;\n@@ -3021,7 +3026,6 @@ pass_forwprop::execute (function *fun)\n \t\t\tnew_rhs = CONSTRUCTOR_ELT (rhs, ci)->value;\n \t\t      else\n \t\t\tnew_rhs = build_zero_cst (elt_t);\n-\t\t      tree use_lhs = gimple_assign_lhs (use_stmt);\n \t\t      tree new_lhs = build3 (BIT_FIELD_REF,\n \t\t\t\t\t     elt_t,\n \t\t\t\t\t     unshare_expr (use_lhs),"}, {"sha": "c47b963bbb2ff4fbcbb37a18ac5170bd4edba173", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -1583,8 +1583,8 @@ non_rewritable_lvalue_p (tree lhs)\n   return true;\n }\n \n-/* When possible, clear TREE_ADDRESSABLE bit or set DECL_GIMPLE_REG_P bit and\n-   mark the variable VAR for conversion into SSA.  Return true when updating\n+/* When possible, clear TREE_ADDRESSABLE bit, set or clear DECL_NOT_GIMPLE_REG_P\n+   and mark the variable VAR for conversion into SSA.  Return true when updating\n    stmts is required.  */\n \n static void\n@@ -1597,24 +1597,11 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n       || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n     return;\n \n-  if (TREE_ADDRESSABLE (var)\n-      /* Do not change TREE_ADDRESSABLE if we need to preserve var as\n-\t a non-register.  Otherwise we are confused and forget to\n-\t add virtual operands for it.  */\n-      && (!is_gimple_reg_type (TREE_TYPE (var))\n-\t  || TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE\n-\t  || TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n-\t  || !bitmap_bit_p (not_reg_needs, DECL_UID (var))))\n+  bool maybe_reg = false;\n+  if (TREE_ADDRESSABLE (var))\n     {\n       TREE_ADDRESSABLE (var) = 0;\n-      /* If we cleared TREE_ADDRESSABLE make sure DECL_GIMPLE_REG_P\n-         is unset if we cannot rewrite the var into SSA.  */\n-      if ((TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE\n-\t   || TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE)\n-\t  && bitmap_bit_p (not_reg_needs, DECL_UID (var)))\n-\tDECL_GIMPLE_REG_P (var) = 0;\n-      if (is_gimple_reg (var))\n-\tbitmap_set_bit (suitable_for_renaming, DECL_UID (var));\n+      maybe_reg = true;\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"No longer having address taken: \");\n@@ -1623,20 +1610,36 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n \t}\n     }\n \n-  if (!DECL_GIMPLE_REG_P (var)\n-      && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n-      && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n-\t  || TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE)\n-      && !TREE_THIS_VOLATILE (var)\n-      && (!VAR_P (var) || !DECL_HARD_REGISTER (var)))\n+  /* For register type decls if we do not have any partial defs\n+     we cannot express in SSA form mark them as DECL_NOT_GIMPLE_REG_P\n+     as to avoid SSA rewrite.  For the others go ahead and mark\n+     them for renaming.  */\n+  if (is_gimple_reg_type (TREE_TYPE (var)))\n     {\n-      DECL_GIMPLE_REG_P (var) = 1;\n-      bitmap_set_bit (suitable_for_renaming, DECL_UID (var));\n-      if (dump_file)\n+      if (bitmap_bit_p (not_reg_needs, DECL_UID (var)))\n \t{\n-\t  fprintf (dump_file, \"Now a gimple register: \");\n-\t  print_generic_expr (dump_file, var);\n-\t  fprintf (dump_file, \"\\n\");\n+\t  DECL_NOT_GIMPLE_REG_P (var) = 1;\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Has partial defs: \");\n+\t      print_generic_expr (dump_file, var);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t}\n+      else if (DECL_NOT_GIMPLE_REG_P (var))\n+\t{\n+\t  maybe_reg = true;\n+\t  DECL_NOT_GIMPLE_REG_P (var) = 0;\n+\t}\n+      if (maybe_reg && is_gimple_reg (var))\n+\t{\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Now a gimple register: \");\n+\t      print_generic_expr (dump_file, var);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t  bitmap_set_bit (suitable_for_renaming, DECL_UID (var));\n \t}\n     }\n }\n@@ -1669,7 +1672,8 @@ is_asan_mark_p (gimple *stmt)\n   return false;\n }\n \n-/* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n+/* Compute TREE_ADDRESSABLE and whether we have unhandled partial defs\n+   for local variables.  */\n \n void\n execute_update_addresses_taken (void)"}, {"sha": "450f40d58d3917c5e1d577871219c69f928bafef", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -236,7 +236,7 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PRESERVE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_EXTERNAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  DECL_NOT_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   SET_DECL_ALIGN (expr, (unsigned) bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER\n   if (DECL_ALIGN (expr) > targetm.absolute_biggest_alignment)"}, {"sha": "127a3d8c248ad1665c85c8a0730decc5fee2c61e", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -201,7 +201,7 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_USER_ALIGN (expr), 1);\n   bp_pack_value (bp, DECL_PRESERVE_P (expr), 1);\n   bp_pack_value (bp, DECL_EXTERNAL (expr), 1);\n-  bp_pack_value (bp, DECL_GIMPLE_REG_P (expr), 1);\n+  bp_pack_value (bp, DECL_NOT_GIMPLE_REG_P (expr), 1);\n   bp_pack_var_len_unsigned (bp, DECL_ALIGN (expr));\n \n   if (TREE_CODE (expr) == LABEL_DECL)"}, {"sha": "c51c4b651d40a5ddf074514722701ac8ce60ca93", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb72dc663e9070b281be83a80f6f838a3a878822/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=eb72dc663e9070b281be83a80f6f838a3a878822", "patch": "@@ -2646,8 +2646,8 @@ extern machine_mode vector_type_mode (const_tree);\n    they are killing assignments.  Thus the variable may now\n    be treated as a GIMPLE register, and use real instead of\n    virtual ops in SSA form.  */\n-#define DECL_GIMPLE_REG_P(DECL) \\\n-  DECL_COMMON_CHECK (DECL)->decl_common.gimple_reg_flag\n+#define DECL_NOT_GIMPLE_REG_P(DECL) \\\n+  DECL_COMMON_CHECK (DECL)->decl_common.not_gimple_reg_flag\n \n extern tree decl_value_expr_lookup (tree);\n extern void decl_value_expr_insert (tree, tree);"}]}