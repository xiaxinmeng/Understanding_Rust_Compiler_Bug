{"sha": "f47cda24579db16228140f8849e9c456093c92ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3Y2RhMjQ1NzlkYjE2MjI4MTQwZjg4NDllOWM0NTYwOTNjOTJhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-16T13:45:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-16T13:45:40Z"}, "message": "re PR tree-optimization/68861 (FAIL: libgomp.fortran/vla8.f90   -O3 -g  execution test)\n\n2015-12-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68861\n\t* tree-vect-slp.c (vect_build_slp_tree): Properly handle\n\tduplicate stmts when applying swapping to stmts.\n\nFrom-SVN: r231689", "tree": {"sha": "84749a9e26e38c9d0c7cf15d1d025bb6bb8738b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84749a9e26e38c9d0c7cf15d1d025bb6bb8738b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f47cda24579db16228140f8849e9c456093c92ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47cda24579db16228140f8849e9c456093c92ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47cda24579db16228140f8849e9c456093c92ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47cda24579db16228140f8849e9c456093c92ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36e24655ddb9e88ec3718e3e4e9dddc7dad1016c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e24655ddb9e88ec3718e3e4e9dddc7dad1016c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e24655ddb9e88ec3718e3e4e9dddc7dad1016c"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "c74d25a5478e17fa7dbf120c45d4ee93796adf11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47cda24579db16228140f8849e9c456093c92ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47cda24579db16228140f8849e9c456093c92ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f47cda24579db16228140f8849e9c456093c92ab", "patch": "@@ -1,3 +1,9 @@\n+2015-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68861\n+\t* tree-vect-slp.c (vect_build_slp_tree): Properly handle\n+\tduplicate stmts when applying swapping to stmts.\n+\n 2015-12-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/i386-c.c (ix86_target_macros_internal): Remove"}, {"sha": "6955e15775e6c8d782036443e1881fe62cfd5d09", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47cda24579db16228140f8849e9c456093c92ab/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47cda24579db16228140f8849e9c456093c92ab/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f47cda24579db16228140f8849e9c456093c92ab", "patch": "@@ -1049,11 +1049,29 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t if we end up building the operand from scalars as\n \t\t we'll continue to process swapped operand two.  */\n \t      for (j = 0; j < group_size; ++j)\n-\t\tif (!matches[j])\n+\t\t{\n+\t\t  gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t  gimple_set_plf (stmt, GF_PLF_1, false);\n+\t\t}\n+\t      for (j = 0; j < group_size; ++j)\n+\t\t{\n+\t\t  gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t  if (!matches[j])\n+\t\t    {\n+\t\t      /* Avoid swapping operands twice.  */\n+\t\t      if (gimple_plf (stmt, GF_PLF_1))\n+\t\t\tcontinue;\n+\t\t      swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n+\t\t\t\t\t gimple_assign_rhs2_ptr (stmt));\n+\t\t      gimple_set_plf (stmt, GF_PLF_1, true);\n+\t\t    }\n+\t\t}\n+\t      /* Verify we swap all duplicates or none.  */\n+\t      if (flag_checking)\n+\t\tfor (j = 0; j < group_size; ++j)\n \t\t  {\n \t\t    gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n-\t\t    swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n-\t\t\t\t       gimple_assign_rhs2_ptr (stmt));\n+\t\t    gcc_assert (gimple_plf (stmt, GF_PLF_1) == ! matches[j]);\n \t\t  }\n \n \t      /* If we have all children of child built up from scalars then"}]}