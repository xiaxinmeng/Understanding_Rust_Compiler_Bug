{"sha": "73d531205083eaf19934b516b37b1cf4940895c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkNTMxMjA1MDgzZWFmMTk5MzRiNTE2YjM3YjFjZjQ5NDA4OTVjNw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-02-17T16:40:07Z"}, "committer": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2020-02-19T11:48:54Z"}, "message": "Fix -save-temp leaking files in /tmp\n\nAnd avoid signal handler calling signal unsafe functions,\nand/or calling unlink with uninitialized memory pointer.\n\n2020-02-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\t* collect2.c (c_file, o_file): Make const again.\n\t(ldout,lderrout, dump_ld_file): Remove.\n\t(tool_cleanup): Avoid calling not signal-safe functions.\n\t(maybe_run_lto_and_relink): Avoid possible signal handler\n\taccess to unintialzed memory (lto_o_files).\n\t(main): Avoid leaking temp files in $TMPDIR.\n\tInitialize c_file/o_file with concat, which avoids exposing\n\tuninitialized memory to signal handler, which calls unlink(!).\n\tAvoid calling maybe_unlink when the main function returns,\n\tsince the atexit handler is already doing this.\n\t* collect2.h (dump_ld_file, ldout, lderrout): Remove.", "tree": {"sha": "5e5393a083a3d6873314120c69276168052f5673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e5393a083a3d6873314120c69276168052f5673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d531205083eaf19934b516b37b1cf4940895c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d531205083eaf19934b516b37b1cf4940895c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d531205083eaf19934b516b37b1cf4940895c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d531205083eaf19934b516b37b1cf4940895c7/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51faf07cef9293af544bfacc7d0b320ab90d7d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51faf07cef9293af544bfacc7d0b320ab90d7d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51faf07cef9293af544bfacc7d0b320ab90d7d60"}], "stats": {"total": 148, "additions": 30, "deletions": 118}, "files": [{"sha": "6cd941a5ff87ba706e43cb32c54c0e6b53e6cf62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d531205083eaf19934b516b37b1cf4940895c7", "patch": "@@ -1,3 +1,17 @@\n+2020-02-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* collect2.c (c_file, o_file): Make const again.\n+\t(ldout,lderrout, dump_ld_file): Remove.\n+\t(tool_cleanup): Avoid calling not signal-safe functions.\n+\t(maybe_run_lto_and_relink): Avoid possible signal handler\n+\taccess to unintialzed memory (lto_o_files).\n+\t(main): Avoid leaking temp files in $TMPDIR.\n+\tInitialize c_file/o_file with concat, which avoids exposing\n+\tuninitialized memory to signal handler, which calls unlink(!).\n+\tAvoid calling maybe_unlink when the main function returns,\n+\tsince the atexit handler is already doing this.\n+\t* collect2.h (dump_ld_file, ldout, lderrout): Remove.\n+\n 2020-02-19  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/93776"}, {"sha": "f7d9f103ddc485a77d118ec59fa46233bf13294d", "filename": "gcc/collect2.c", "status": "modified", "additions": 16, "deletions": 114, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=73d531205083eaf19934b516b37b1cf4940895c7", "patch": "@@ -205,14 +205,12 @@ bool helpflag;\t\t\t/* true if --help */\n static int shared_obj;\t\t\t/* true if -shared */\n static int static_obj;\t\t\t/* true if -static */\n \n-static char *c_file;\t\t/* <xxx>.c for constructor/destructor list.  */\n-static char *o_file;\t\t/* <xxx>.o for constructor/destructor list.  */\n+static const char *c_file;\t\t/* <xxx>.c for constructor/destructor list.  */\n+static const char *o_file;\t\t/* <xxx>.o for constructor/destructor list.  */\n #ifdef COLLECT_EXPORT_LIST\n static const char *export_file;\t\t/* <xxx>.x for AIX export list.  */\n #endif\n static char **lto_o_files;\t\t/* Output files for LTO.  */\n-const char *ldout;\t\t\t/* File for ld stdout.  */\n-const char *lderrout;\t\t\t/* File for ld stderr.  */\n static const char *output_file;\t\t/* Output file for ld.  */\n static const char *nm_file_name;\t/* pathname of nm */\n #ifdef LDD_SUFFIX\n@@ -384,6 +382,10 @@ static void scan_prog_file (const char *, scanpass, scanfilter);\n void\n tool_cleanup (bool from_signal)\n {\n+  /* maybe_unlink may call notice, which is not signal safe.  */\n+  if (from_signal)\n+    verbose = false;\n+\n   if (c_file != 0 && c_file[0])\n     maybe_unlink (c_file);\n \n@@ -397,20 +399,6 @@ tool_cleanup (bool from_signal)\n \n   if (lto_o_files)\n     maybe_unlink_list (lto_o_files);\n-\n-  if (ldout != 0 && ldout[0])\n-    {\n-      if (!from_signal)\n-\tdump_ld_file (ldout, stdout);\n-      maybe_unlink (ldout);\n-    }\n-\n-  if (lderrout != 0 && lderrout[0])\n-    {\n-      if (!from_signal)\n-\tdump_ld_file (lderrout, stderr);\n-      maybe_unlink (lderrout);\n-    }\n }\n \n static void\n@@ -476,77 +464,6 @@ extract_string (const char **pp)\n   return XOBFINISH (&temporary_obstack, char *);\n }\n \f\n-void\n-dump_ld_file (const char *name, FILE *to)\n-{\n-  FILE *stream = fopen (name, \"r\");\n-\n-  if (stream == 0)\n-    return;\n-  while (1)\n-    {\n-      int c;\n-      while (c = getc (stream),\n-\t     c != EOF && (ISIDNUM (c) || c == '$' || c == '.'))\n-\tobstack_1grow (&temporary_obstack, c);\n-      if (obstack_object_size (&temporary_obstack) > 0)\n-\t{\n-\t  const char *word, *p;\n-\t  char *result;\n-\t  obstack_1grow (&temporary_obstack, '\\0');\n-\t  word = XOBFINISH (&temporary_obstack, const char *);\n-\n-\t  if (*word == '.')\n-\t    ++word, putc ('.', to);\n-\t  p = word;\n-\t  if (!strncmp (p, USER_LABEL_PREFIX, strlen (USER_LABEL_PREFIX)))\n-\t    p += strlen (USER_LABEL_PREFIX);\n-\n-#ifdef HAVE_LD_DEMANGLE\n-\t  result = 0;\n-#else\n-\t  if (no_demangle)\n-\t    result = 0;\n-\t  else\n-\t    result = cplus_demangle (p, DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE);\n-#endif\n-\n-\t  if (result)\n-\t    {\n-\t      int diff;\n-\t      fputs (result, to);\n-\n-\t      diff = strlen (word) - strlen (result);\n-\t      while (diff > 0 && c == ' ')\n-\t\t--diff, putc (' ', to);\n-\t      if (diff < 0 && c == ' ')\n-\t\t{\n-\t\t  while (diff < 0 && c == ' ')\n-\t\t    ++diff, c = getc (stream);\n-\t\t  if (!ISSPACE (c))\n-\t\t    {\n-\t\t      /* Make sure we output at least one space, or\n-\t\t\t the demangled symbol name will run into\n-\t\t\t whatever text follows.  */\n-\t\t      putc (' ', to);\n-\t\t    }\n-\t\t}\n-\n-\t      free (result);\n-\t    }\n-\t  else\n-\t    fputs (word, to);\n-\n-\t  fflush (to);\n-\t  obstack_free (&temporary_obstack, temporary_firstobj);\n-\t}\n-      if (c == EOF)\n-\tbreak;\n-      putc (c, to);\n-    }\n-  fclose (stream);\n-}\n-\f\n /* Return the kind of symbol denoted by name S.  */\n \n static symkind\n@@ -744,7 +661,10 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n \t      ++num_files;\n \t  }\n \n-\tlto_o_files = XNEWVEC (char *, num_files + 1);\n+\t/* signal handler may access uninitialized memory\n+\t   and delete whatever it points to, if lto_o_files\n+\t   is not allocatted with calloc.  */\n+\tlto_o_files = XCNEWVEC (char *, num_files + 1);\n \tlto_o_files[num_files] = NULL;\n \tstart = XOBFINISH (&temporary_obstack, char *);\n \tfor (i = 0; i < num_files; ++i)\n@@ -1262,27 +1182,19 @@ main (int argc, char **argv)\n   /* Make temp file names.  */\n   if (save_temps)\n     {\n-      c_file = (char *) xmalloc (strlen (output_file)\n-\t\t\t\t  + sizeof (\".cdtor.c\") + 1);\n-      strcpy (c_file, output_file);\n-      strcat (c_file, \".cdtor.c\");\n-      o_file = (char *) xmalloc (strlen (output_file)\n-\t\t\t\t  + sizeof (\".cdtor.o\") + 1);\n-      strcpy (o_file, output_file);\n-      strcat (o_file, \".cdtor.o\");\n+      c_file = concat (output_file, \".cdtor.c\", NULL);\n+      o_file = concat (output_file, \".cdtor.o\", NULL);\n+#ifdef COLLECT_EXPORT_LIST\n+      export_file = concat (output_file, \".x\", NULL);\n+#endif\n     }\n   else\n     {\n       c_file = make_temp_file (\".cdtor.c\");\n       o_file = make_temp_file (\".cdtor.o\");\n-    }\n #ifdef COLLECT_EXPORT_LIST\n-  export_file = make_temp_file (\".x\");\n+      export_file = make_temp_file (\".x\");\n #endif\n-  if (!debug)\n-    {\n-      ldout = make_temp_file (\".ld\");\n-      lderrout = make_temp_file (\".le\");\n     }\n   /* Build the command line to compile the ctor/dtor list.  */\n   *c_ptr++ = c_file_name;\n@@ -1811,9 +1723,6 @@ main (int argc, char **argv)\n       maybe_unlink (export_file);\n #endif\n       post_ld_pass (/*temp_file*/false);\n-\n-      maybe_unlink (c_file);\n-      maybe_unlink (o_file);\n       return 0;\n     }\n \n@@ -1912,13 +1821,6 @@ main (int argc, char **argv)\n   scan_prog_file (output_file, PASS_SECOND, SCAN_ALL);\n #endif\n \n-  maybe_unlink (c_file);\n-  maybe_unlink (o_file);\n-\n-#ifdef COLLECT_EXPORT_LIST\n-  maybe_unlink (export_file);\n-#endif\n-\n   return 0;\n }\n "}, {"sha": "aa8a03e7d879b05529b1f009a05ce7df377f2e19", "filename": "gcc/collect2.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d531205083eaf19934b516b37b1cf4940895c7/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=73d531205083eaf19934b516b37b1cf4940895c7", "patch": "@@ -25,12 +25,8 @@ extern struct pex_obj *collect_execute (const char *, char **, const char *,\n \n extern int collect_wait (const char *, struct pex_obj *);\n \n-extern void dump_ld_file (const char *, FILE *);\n-\n extern int file_exists (const char *);\n \n-extern const char *ldout;\n-extern const char *lderrout;\n extern const char *c_file_name;\n extern struct obstack temporary_obstack;\n extern char *temporary_firstobj;"}]}