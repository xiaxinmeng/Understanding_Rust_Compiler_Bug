{"sha": "e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2YzFjZmUwODBiMWY4MTUwZTI4ZWI0NWVmOGUxOTBkZjFkZDZlZg==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2016-11-23T10:29:18Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2016-11-23T10:29:18Z"}, "message": "fold-const.c (tree_expr_nonzero_p): Make non-static.\n\n2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\ngcc\n\t* fold-const.c (tree_expr_nonzero_p) : Make non-static.\n\t* fold-const.h (tree_expr_nonzero_p) : Declare.\n\t* match.pd (cmp (mult:c @0 @1) (mult:c @2 @1) : New Pattern.\n\ngcc/testsuite\n\t* gcc.dg/pr31096.c: New testcase.\n\t* gcc.dg/pr31096-1.c: New testcase.\n\nFrom-SVN: r242744", "tree": {"sha": "f8942c3388a272c51eda5a24a2aa9538f6127dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8942c3388a272c51eda5a24a2aa9538f6127dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/comments", "author": null, "committer": null, "parents": [{"sha": "fb2675cb4683a430fb63af44713cd9d2fcd77b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2675cb4683a430fb63af44713cd9d2fcd77b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2675cb4683a430fb63af44713cd9d2fcd77b97"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "30ab26a5e0b8ac614f550f9c421bf52864894d86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (tree_expr_nonzero_p) : Make non-static.\n+\t* fold-const.h (tree_expr_nonzero_p) : Declare.\n+\t* match.pd (cmp (mult:c @0 @1) (mult:c @2 @1) : New Pattern.\n+\n 2016-11-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* system.h (HAVE_DESIGNATED_INITIALIZERS,"}, {"sha": "a0055c45c372be96583eeeaec25242a22c1b80bd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -9014,7 +9014,7 @@ tree_expr_nonzero_warnv_p (tree t, bool *strict_overflow_p)\n /* Return true when T is an address and is known to be nonzero.\n    Handle warnings about undefined signed overflow.  */\n \n-static bool\n+bool\n tree_expr_nonzero_p (tree t)\n {\n   bool ret, strict_overflow_p;"}, {"sha": "fbe1328cf0150ca68fc678a9ff23cb972b686d26", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -169,6 +169,7 @@ extern tree size_diffop_loc (location_t, tree, tree);\n #define non_lvalue(T) non_lvalue_loc (UNKNOWN_LOCATION, T)\n extern tree non_lvalue_loc (location_t, tree);\n \n+extern bool tree_expr_nonzero_p (tree);\n extern bool tree_expr_nonnegative_p (tree);\n extern bool tree_expr_nonnegative_warnv_p (tree, bool *, int = 0);\n extern tree make_range (tree, int *, tree *, tree *, bool *);"}, {"sha": "3fece351022bdb2f2260d07fcd782087829c842b", "filename": "gcc/match.pd", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n    zerop\n    CONSTANT_CLASS_P\n    tree_expr_nonnegative_p\n+   tree_expr_nonzero_p\n    integer_valued_real_p\n    integer_pow2p\n    HONOR_NANS)\n@@ -1035,7 +1036,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n   (convert (bit_and (bit_not @1) @0))))\n \n+/* For integral types with undefined overflow and C != 0 fold\n+   x * C EQ/NE y * C into x EQ/NE y.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp (mult:c @0 @1) (mult:c @2 @1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+       && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))\n+       && tree_expr_nonzero_p (@1))\n+   (cmp @0 @2))))\n+\n+/* For integral types with undefined overflow and C != 0 fold\n+   x * C RELOP y * C into:\n \n+   x RELOP y for nonnegative C\n+   y RELOP x for negative C  */\n+(for cmp (lt gt le ge)\n+ (simplify\n+  (cmp (mult:c @0 @1) (mult:c @2 @1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+       && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+   (if (tree_expr_nonnegative_p (@1) && tree_expr_nonzero_p (@1))\n+    (cmp @0 @2)\n+   (if (TREE_CODE (@1) == INTEGER_CST\n+\t&& wi::neg_p (@1, TYPE_SIGN (TREE_TYPE (@1))))\n+    (cmp @2 @0))))))\n \n /* ((X inner_op C0) outer_op C1)\n    With X being a tree where value_range has reasoned certain bits to always be"}, {"sha": "47dadd8c38b1cac2a0b8574564e9c1c6126d1cb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* gcc.dg/pr31096.c: New testcase.\n+\t* gcc.dg/pr31096-1.c: New testcase.\n+\n 2016-11-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/cpp/defined.c: Mark newly introduced warnings and"}, {"sha": "e681f0fcee6d732e2ba4cb344a0be22bed5cab30", "filename": "gcc/testsuite/gcc.dg/pr31096-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096-1.c?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -0,0 +1,51 @@\n+/* PR middle-end/31096 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define zero(name, op) \\\n+int name (int a, int b) \\\n+{ return a * 0 op b * 0; }\n+\n+zero(zeq, ==) zero(zne, !=) zero(zlt, <)\n+zero(zgt, >)  zero(zge, >=) zero(zle, <=)\n+\n+#define unsign_pos(name, op) \\\n+int name (unsigned a, unsigned b) \\\n+{ return a * 4 op b * 4; }\n+\n+unsign_pos(upeq, ==) unsign_pos(upne, !=) unsign_pos(uplt, <)\n+unsign_pos(upgt, >)  unsign_pos(upge, >=) unsign_pos(uple, <=)\n+\n+#define unsign_neg(name, op) \\\n+int name (unsigned a, unsigned b) \\\n+{ return a * -2 op b * -2; }\n+\n+unsign_neg(uneq, ==) unsign_neg(unne, !=) unsign_neg(unlt, <)\n+unsign_neg(ungt, >)  unsign_neg(unge, >=) unsign_neg(unle, <=)\n+\n+#define float(name, op) \\\n+int name (float a, float b) \\\n+{ return a * 5 op b * 5; }\n+\n+float(feq, ==) float(fne, !=) float(flt, <)\n+float(fgt, >)  float(fge, >=) float(fle, <=)\n+\n+#define float_val(name, op) \\\n+int name (int a, int b) \\\n+{ return a * 54.0 op b * 54.0; }\n+\n+float_val(fveq, ==) float_val(fvne, !=) float_val(fvlt, <)\n+float_val(fvgt, >)  float_val(fvge, >=) float_val(fvle, <=)\n+\n+#define vec(name, op) \\\n+int name (int a, int b) \\\n+{ int c[10]; return a * c[1] op b * c[1]; }\n+\n+vec(veq, ==) vec(vne, !=) vec(vlt, <)\n+vec(vgt, >)  vec(vge, >=) vec(vle, <=)\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(D\\\\) \\\\* 4\" 24 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(D\\\\) \\\\* 4294967294\" 12 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(D\\\\) \\\\* 5\\\\.0e\\\\+0\" 12 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 5\\\\.4e\\\\+1\" 12 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(D\\\\) \\\\* c\\\\\\$1_8\\\\(D\\\\)\" 12 \"optimized\" } } */"}, {"sha": "32c979ed69fe4fb487f495a27f4d39af490711d7", "filename": "gcc/testsuite/gcc.dg/pr31096.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31096.c?ref=e36c1cfe080b1f8150e28eb45ef8e190df1dd6ef", "patch": "@@ -0,0 +1,36 @@\n+/* PR middle-end/31096 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define signval_pos(name, op) \\\n+int name (int a, int b) \\\n+{ return a * 4 op b * 4; }\n+\n+signval_pos(peq, ==) signval_pos(pne, !=) signval_pos(plt, <)\n+signval_pos(pgt, >)  signval_pos(pge, >=) signval_pos(ple, <=)\n+\n+#define signval_neg(name, op) \\\n+int name (int a, int b) \\\n+{ return a * -23 op b * -23; }\n+\n+signval_neg(neq, ==) signval_neg(nne, !=) signval_neg(nlt, <)\n+signval_neg(ngt, >)  signval_neg(nge, >=) signval_neg(nle, <=)\n+\n+#define vec_pos(name, op) \\\n+int name (int a[10], int b[10]) \\\n+{ return a[3] * 4 op b[8] * 4; }\n+\n+vec_pos(vpeq, ==) vec_pos(vpne, !=) vec_pos(vplt, <)\n+vec_pos(vpgt, >)  vec_pos(vpge, >=) vec_pos(vple, <=)\n+\n+#define vec_neg(name, op) \\\n+int name (int a[10], int b[10]) \\\n+{ return a[3] * -23 op b[8] * -23; }\n+\n+vec_neg(vneq, ==) vec_neg(vnne, !=) vec_neg(vnlt, <)\n+vec_neg(vngt, >)  vec_neg(vnge, >=) vec_neg(vnle, <=)\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\(D\\\\) \\\\* 4\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\(D\\\\) \\\\* -23\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"_1 = b_2\\\\(D\\\\)\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"_1 = MEM\\\\\\[\\\\(int \\\\*\\\\)b\" 4 \"optimized\" } } */"}]}