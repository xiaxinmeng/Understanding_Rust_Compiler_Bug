{"sha": "6e222b2a3aede20f3093802d1649e75848e3bd2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyMjJiMmEzYWVkZTIwZjMwOTM4MDJkMTY0OWU3NTg0OGUzYmQyYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-20T08:35:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-20T08:35:59Z"}, "message": "re PR tree-optimization/91822 (FAIL: gcc.dg/pr88031.c (internal compiler error))\n\n2019-09-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91822\n\t* tree-vectorizer.h (vectorizable_condition): Restore for_reduction\n\tparameter.\n\t* tree-vect-loop.c (vectorizable_reduction): Adjust asserts\n\tfor reduc_index in nested cycles, adjust vectorizable_condition\n\tcalls.\n\t* tree-vect-stmts.c (vectorizable_condition): Restore for_reduction\n\tparameter.\n\t(vect_analyze_stmt): Adjust.\n\t(vect_transform_stmt): Likewise.\n\nFrom-SVN: r275990", "tree": {"sha": "d92612a64f3df35647f3c751c13aed50c425544b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92612a64f3df35647f3c751c13aed50c425544b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e222b2a3aede20f3093802d1649e75848e3bd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e222b2a3aede20f3093802d1649e75848e3bd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e222b2a3aede20f3093802d1649e75848e3bd2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e222b2a3aede20f3093802d1649e75848e3bd2b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d865ed7227a98bc1229d6e42bca35f605d6f4f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d865ed7227a98bc1229d6e42bca35f605d6f4f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d865ed7227a98bc1229d6e42bca35f605d6f4f75"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "bda334b2df8667b142598e69b14d71b8e6e7a13f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e222b2a3aede20f3093802d1649e75848e3bd2b", "patch": "@@ -1,3 +1,16 @@\n+2019-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91822\n+\t* tree-vectorizer.h (vectorizable_condition): Restore for_reduction\n+\tparameter.\n+\t* tree-vect-loop.c (vectorizable_reduction): Adjust asserts\n+\tfor reduc_index in nested cycles, adjust vectorizable_condition\n+\tcalls.\n+\t* tree-vect-stmts.c (vectorizable_condition): Restore for_reduction\n+\tparameter.\n+\t(vect_analyze_stmt): Adjust.\n+\t(vect_transform_stmt): Likewise.\n+\n 2019-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR target/91767"}, {"sha": "7e1398603932d0be0d0c3eb9d7340fc8d1b81deb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6e222b2a3aede20f3093802d1649e75848e3bd2b", "patch": "@@ -6534,9 +6534,10 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     {\n       /* Only call during the analysis stage, otherwise we'll lose\n \t STMT_VINFO_TYPE.  */\n-      gcc_assert (reduc_index > 0);\n+      gcc_assert (nested_cycle || reduc_index > 0);\n       if (!vec_stmt && !vectorizable_condition (stmt_info, gsi, NULL,\n-\t\t\t\t\t\treduc_index, NULL, cost_vec))\n+\t\t\t\t\t\ttrue, reduc_index,\n+\t\t\t\t\t\tNULL, cost_vec))\n         {\n           if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -6991,7 +6992,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     {\n       gcc_assert (!slp_node && reduc_index > 0);\n       return vectorizable_condition (stmt_info, gsi, vec_stmt,\n-\t\t\t\t     reduc_index, NULL, NULL);\n+\t\t\t\t     true, reduc_index, NULL, NULL);\n     }\n \n   /* Create the destination vector  */\n@@ -7021,8 +7022,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     {\n       if (code == COND_EXPR)\n         {\n-          gcc_assert (!slp_node && reduc_index > 0);\n-\t  vectorizable_condition (stmt_info, gsi, vec_stmt,\n+          gcc_assert (!slp_node && (nested_cycle || reduc_index > 0));\n+\t  vectorizable_condition (stmt_info, gsi, vec_stmt, true,\n \t\t\t\t  reduc_index, NULL, NULL);\n           break;\n         }"}, {"sha": "b1e97f85d96b352e9e52bbb7c265dda6e1d0f3ad", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6e222b2a3aede20f3093802d1649e75848e3bd2b", "patch": "@@ -9778,7 +9778,8 @@ vect_is_simple_cond (tree cond, vec_info *vinfo,\n \n bool\n vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n-\t\t\tstmt_vec_info *vec_stmt, int reduc_index,\n+\t\t\tstmt_vec_info *vec_stmt, bool for_reduction,\n+\t\t\tint reduc_index,\n \t\t\tslp_tree slp_node, stmt_vector_for_cost *cost_vec)\n {\n   vec_info *vinfo = stmt_info->vinfo;\n@@ -9807,7 +9808,6 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   vec<tree> vec_oprnds3 = vNULL;\n   tree vec_cmp_type;\n   bool masked = false;\n-  bool for_reduction = (reduc_index > 0);\n \n   if (for_reduction && STMT_SLP_TYPE (stmt_info))\n     return false;\n@@ -10668,7 +10668,7 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n \t\t\t\t     node_instance, cost_vec)\n \t  || vectorizable_induction (stmt_info, NULL, NULL, node, cost_vec)\n \t  || vectorizable_shift (stmt_info, NULL, NULL, node, cost_vec)\n-\t  || vectorizable_condition (stmt_info, NULL, NULL, 0, node,\n+\t  || vectorizable_condition (stmt_info, NULL, NULL, false, -1, node,\n \t\t\t\t     cost_vec)\n \t  || vectorizable_comparison (stmt_info, NULL, NULL, node,\n \t\t\t\t      cost_vec));\n@@ -10687,7 +10687,7 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n \t      || vectorizable_load (stmt_info, NULL, NULL, node, node_instance,\n \t\t\t\t    cost_vec)\n \t      || vectorizable_store (stmt_info, NULL, NULL, node, cost_vec)\n-\t      || vectorizable_condition (stmt_info, NULL, NULL, 0, node,\n+\t      || vectorizable_condition (stmt_info, NULL, NULL, false, -1, node,\n \t\t\t\t\t cost_vec)\n \t      || vectorizable_comparison (stmt_info, NULL, NULL, node,\n \t\t\t\t\t  cost_vec));\n@@ -10792,7 +10792,7 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       break;\n \n     case condition_vec_info_type:\n-      done = vectorizable_condition (stmt_info, gsi, &vec_stmt, 0,\n+      done = vectorizable_condition (stmt_info, gsi, &vec_stmt, false, -1,\n \t\t\t\t     slp_node, NULL);\n       gcc_assert (done);\n       break;"}, {"sha": "a514c772a487136439fe9315c14fb2cb3d741daf", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e222b2a3aede20f3093802d1649e75848e3bd2b/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6e222b2a3aede20f3093802d1649e75848e3bd2b", "patch": "@@ -1534,7 +1534,7 @@ extern void vect_remove_stores (stmt_vec_info);\n extern opt_result vect_analyze_stmt (stmt_vec_info, bool *, slp_tree,\n \t\t\t\t     slp_instance, stmt_vector_for_cost *);\n extern bool vectorizable_condition (stmt_vec_info, gimple_stmt_iterator *,\n-\t\t\t\t    stmt_vec_info *, int, slp_tree,\n+\t\t\t\t    stmt_vec_info *, bool, int, slp_tree,\n \t\t\t\t    stmt_vector_for_cost *);\n extern bool vectorizable_shift (stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\tstmt_vec_info *, slp_tree,"}]}