{"sha": "058f0b9e5f073da9d1d98a91e482cbdead1561ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ZjBiOWU1ZjA3M2RhOWQxZDk4YTkxZTQ4MmNiZGVhZDE1NjFlZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-28T21:22:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-28T21:22:52Z"}, "message": "re PR sanitizer/81275 (-fsanitize=thread produce incorrect -Wreturn-type warning)\n\n\tPR sanitizer/81275\n\t* tree.c (block_may_fallthru): Return false if SWITCH_ALL_CASES_P\n\tis set on SWITCH_EXPR and !block_may_fallthru (SWITCH_BODY ()).\nc/\n\t* c-typeck.c (c_finish_case): Set SWITCH_ALL_CASES_P if\n\tc_switch_covers_all_cases_p returns true.\nc-family/\n\t* c-common.c (c_switch_covers_all_cases_p_1,\n\tc_switch_covers_all_cases_p): New functions.\n\t* c-common.h (c_switch_covers_all_cases_p): Declare.\ntestsuite/\n\t* c-c++-common/tsan/pr81275.c: New test.\n\nFrom-SVN: r255217", "tree": {"sha": "54a203fbcbecced881bb3fc81e309166d8c9ad5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a203fbcbecced881bb3fc81e309166d8c9ad5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058f0b9e5f073da9d1d98a91e482cbdead1561ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058f0b9e5f073da9d1d98a91e482cbdead1561ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058f0b9e5f073da9d1d98a91e482cbdead1561ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058f0b9e5f073da9d1d98a91e482cbdead1561ee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67c24a8bd6141021da49e005c0111bd42bfc7d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c24a8bd6141021da49e005c0111bd42bfc7d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c24a8bd6141021da49e005c0111bd42bfc7d08"}], "stats": {"total": 206, "additions": 206, "deletions": 0}, "files": [{"sha": "02f9a9e5789595ace18b01f9bb7ccc3ac86442a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -1,3 +1,9 @@\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81275\n+\t* tree.c (block_may_fallthru): Return false if SWITCH_ALL_CASES_P\n+\tis set on SWITCH_EXPR and !block_may_fallthru (SWITCH_BODY ()).\n+\n 2017-11-28  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "abbcb90bc9b569dcd05651cdd17c3d99546de15e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -1,3 +1,10 @@\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81275\n+\t* c-common.c (c_switch_covers_all_cases_p_1,\n+\tc_switch_covers_all_cases_p): New functions.\n+\t* c-common.h (c_switch_covers_all_cases_p): Declare.\n+\n 2017-11-28  Julia Koval  <julia.koval@intel.com>\n             Sebastian Peryt  <sebastian.peryt@intel.com>\n "}, {"sha": "1d79aee01c8b140a469e388ee08a287224f37400", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -4898,6 +4898,64 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n   return error_mark_node;\n }\n \n+/* Subroutine of c_switch_covers_all_cases_p, called via\n+   splay_tree_foreach.  Return 1 if it doesn't cover all the cases.\n+   ARGS[0] is initially NULL and after the first iteration is the\n+   so far highest case label.  ARGS[1] is the minimum of SWITCH_COND's\n+   type.  */\n+\n+static int\n+c_switch_covers_all_cases_p_1 (splay_tree_node node, void *data)\n+{\n+  tree label = (tree) node->value;\n+  tree *args = (tree *) data;\n+\n+  /* If there is a default case, we shouldn't have called this.  */\n+  gcc_assert (CASE_LOW (label));\n+\n+  if (args[0] == NULL_TREE)\n+    {\n+      if (wi::to_widest (args[1]) < wi::to_widest (CASE_LOW (label)))\n+\treturn 1;\n+    }\n+  else if (wi::add (wi::to_widest (args[0]), 1)\n+\t   != wi::to_widest (CASE_LOW (label)))\n+    return 1;\n+  if (CASE_HIGH (label))\n+    args[0] = CASE_HIGH (label);\n+  else\n+    args[0] = CASE_LOW (label);\n+  return 0;\n+}\n+\n+/* Return true if switch with CASES and switch condition with type\n+   covers all possible values in the case labels.  */\n+\n+bool\n+c_switch_covers_all_cases_p (splay_tree cases, tree type)\n+{\n+  /* If there is default:, this is always the case.  */\n+  splay_tree_node default_node\n+    = splay_tree_lookup (cases, (splay_tree_key) NULL);\n+  if (default_node)\n+    return true;\n+\n+  if (!INTEGRAL_TYPE_P (type))\n+    return false;\n+\n+  tree args[2] = { NULL_TREE, TYPE_MIN_VALUE (type) };\n+  if (splay_tree_foreach (cases, c_switch_covers_all_cases_p_1, args))\n+    return false;\n+\n+  /* If there are no cases at all, or if the highest case label\n+     is smaller than TYPE_MAX_VALUE, return false.  */\n+  if (args[0] == NULL_TREE\n+      || wi::to_widest (args[0]) < wi::to_widest (TYPE_MAX_VALUE (type)))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Finish an expression taking the address of LABEL (an\n    IDENTIFIER_NODE).  Returns an expression for the address.\n "}, {"sha": "7561531f98fd6fd1e0b2489007207ab0249f14b3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -969,6 +969,7 @@ extern int case_compare (splay_tree_key, splay_tree_key);\n \n extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree, tree,\n \t\t\t      bool *);\n+extern bool c_switch_covers_all_cases_p (splay_tree, tree);\n \n extern tree build_function_call (location_t, tree, tree);\n "}, {"sha": "2c363483bb1da0692a6bb4abdf5ff442d1254aca", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -1,3 +1,9 @@\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81275\n+\t* c-typeck.c (c_finish_case): Set SWITCH_ALL_CASES_P if\n+\tc_switch_covers_all_cases_p returns true.\n+\n 2017-11-28  Julia Koval  <julia.koval@intel.com>\n             Sebastian Peryt  <sebastian.peryt@intel.com>\n "}, {"sha": "6846bc51d28c3e7f6dd9ac646671ef33d314ec62", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -10360,6 +10360,8 @@ c_finish_case (tree body, tree type)\n \t\t\ttype ? type : TREE_TYPE (cs->switch_expr),\n \t\t\tSWITCH_COND (cs->switch_expr),\n \t\t\tcs->bool_cond_p, cs->outside_range_p);\n+  if (c_switch_covers_all_cases_p (cs->cases, TREE_TYPE (cs->switch_expr)))\n+    SWITCH_ALL_CASES_P (cs->switch_expr) = 1;\n \n   /* Pop the stack.  */\n   c_switch_stack = cs->next;"}, {"sha": "87332af7a292944c0becb7d092460dc24645aaaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -1,3 +1,8 @@\n+2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81275\n+\t* c-c++-common/tsan/pr81275.c: New test.\n+\n 2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/53796"}, {"sha": "024b0c72f2c21fd34d90aabbd3f9027ffe21397e", "filename": "gcc/testsuite/c-c++-common/tsan/pr81275.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr81275.c?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -0,0 +1,111 @@\n+/* PR sanitizer/81275 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wreturn-type -fsanitize=thread\" } */\n+\n+int\n+f1 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+        case 5:\n+\t  return 6;\n+\tcase 7:\n+\t  return 8;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    }\n+}\t/* { dg-bogus \"control reaches end of non-void function\" } */\n+\n+int\n+f2 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+        case 5:\n+\t  return 6;\n+\tcase 7:\n+\t  return 8;\n+\tdefault:\n+\t  return 0;\n+\t}\n+    default:\n+      return 0;\n+    }\n+}\t/* { dg-bogus \"control reaches end of non-void function\" } */\n+\n+int\n+f3 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+        case 5:\n+\t  return 6;\n+\tcase 7:\n+\t  return 8;\n+\tcase 8:\n+\t  break;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    }\n+}\t/* { dg-warning \"control reaches end of non-void function\" } */\n+\n+int\n+f4 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+        case 5:\n+\t  return 6;\n+\tcase 7:\n+\t  return 8;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    }\n+}\t/* { dg-warning \"control reaches end of non-void function\" } */\n+\n+int\n+f5 (int a, unsigned char b)\n+{\n+  switch (a)\n+    {\n+    case 0:\n+      switch (b)\n+        {\n+\tcase 0:\n+\t  return 1;\n+\tcase 3 ... 10:\n+\t  return 2;\n+\tcase 1 ... 2:\n+\t  return 3;\n+\tcase 126 ... (unsigned char) ~0:\n+\t  return 4;\n+\tcase 11 ... 125:\n+\t  return 5;\n+\t}\n+      break;\n+    default:\n+      return 0;\n+    }\n+}\t/* { dg-bogus \"control reaches end of non-void function\" } */"}, {"sha": "e97654cd0f1adc97d3287e83112ba9aa945a5d1c", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -12348,6 +12348,12 @@ block_may_fallthru (const_tree block)\n       return false;\n \n     case SWITCH_EXPR:\n+      /* If there is a default: label or case labels cover all possible\n+\t SWITCH_COND values, then the SWITCH_EXPR will transfer control\n+\t to some case label in all cases and all we care is whether the\n+\t SWITCH_BODY falls through.  */\n+      if (SWITCH_ALL_CASES_P (stmt))\n+\treturn block_may_fallthru (SWITCH_BODY (stmt));\n       return true;\n \n     case COND_EXPR:"}, {"sha": "db6785820b0eece7ea89a950ec9c9c6447577bff", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f0b9e5f073da9d1d98a91e482cbdead1561ee/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=058f0b9e5f073da9d1d98a91e482cbdead1561ee", "patch": "@@ -1166,6 +1166,10 @@ extern void protected_set_expr_location (tree, location_t);\n /* SWITCH_EXPR accessors. These give access to the condition and body.  */\n #define SWITCH_COND(NODE)       TREE_OPERAND (SWITCH_EXPR_CHECK (NODE), 0)\n #define SWITCH_BODY(NODE)       TREE_OPERAND (SWITCH_EXPR_CHECK (NODE), 1)\n+/* True if there are case labels for all possible values of SWITCH_COND, either\n+   because there is a default: case label or because the case label ranges cover\n+   all values.  */\n+#define SWITCH_ALL_CASES_P(NODE) (SWITCH_EXPR_CHECK (NODE)->base.private_flag)\n \n /* CASE_LABEL_EXPR accessors. These give access to the high and low values\n    of a case label, respectively.  */"}]}