{"sha": "e3b0260052f9f768e63e4a7107c5aea4df06ea19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiMDI2MDA1MmY5Zjc2OGU2M2U0YTcxMDdjNWFlYTRkZjA2ZWExOQ==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2012-10-21T23:42:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-10-21T23:42:17Z"}, "message": "configure.xml (--enable-clocale): Document the 'newlib' and 'darwin' options.\n\n2012-10-22  Yufeng Zhang  <yufeng.zhang@arm.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* doc/xml/manual/configure.xml (--enable-clocale): Document the\n\t'newlib' and 'darwin' options. Minor stylistic improvements.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r192661", "tree": {"sha": "94cbbf38b4b23dfe5d0ea163752193d95ae88671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94cbbf38b4b23dfe5d0ea163752193d95ae88671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b0260052f9f768e63e4a7107c5aea4df06ea19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b0260052f9f768e63e4a7107c5aea4df06ea19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b0260052f9f768e63e4a7107c5aea4df06ea19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b0260052f9f768e63e4a7107c5aea4df06ea19/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab54dfa3ad330dd2ccb876e85112cc4363786d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab54dfa3ad330dd2ccb876e85112cc4363786d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab54dfa3ad330dd2ccb876e85112cc4363786d5"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "0e31df93635d6cda9b0f2d286da0b1dec0a8438b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b0260052f9f768e63e4a7107c5aea4df06ea19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b0260052f9f768e63e4a7107c5aea4df06ea19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3b0260052f9f768e63e4a7107c5aea4df06ea19", "patch": "@@ -1,3 +1,9 @@\n+2012-10-22  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/manual/configure.xml (--enable-clocale): Document the\n+\t'newlib' and 'darwin' options. Minor stylistic improvements.\n+\n 2012-10-21  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/profile/map.h (map::emplace_hint): Remove invalid"}, {"sha": "827b2322f486be9c8be5fea400b97271bac6cd0a", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b0260052f9f768e63e4a7107c5aea4df06ea19/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b0260052f9f768e63e4a7107c5aea4df06ea19/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=e3b0260052f9f768e63e4a7107c5aea4df06ea19", "patch": "@@ -38,7 +38,7 @@\n </para>\n <para>The canonical way to find out the configure options that are\n    available for a given set of libstdc++ sources is to go to the\n-   source directory and then type:<command>./configure --help</command>.\n+   source directory and then type: <command>./configure --help</command>.\n </para>\n \n <variablelist>\n@@ -107,15 +107,20 @@\n \t(IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n \t'gnu' to specify a model based on functionality from the GNU C\n \tlibrary (langinfo/iconv/gettext) (from <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://sources.redhat.com/glibc/\">glibc</link>, the GNU C\n-\tlibrary), or 'generic' to use a generic \"C\"\n-\tabstraction which consists of \"C\" locale info.\n+\tlibrary), 'generic' to use a generic \"C\" abstraction which consists\n+\tof \"C\" locale info, 'newlib' to specify the Newlib C library model\n+\twhich only differs from the 'generic' model in the handling of\n+\tctype, or 'darwin' which omits the <type>wchar_t</type> specializations\n+\tneeded by the 'generic' model.\n      </para>\n \n-     <para>If not explicitly specified, the configure proccess tries\n+     <para>If not explicitly specified, the configure process tries\n       to guess the most suitable package from the choices above. The\n       default is 'generic'. On glibc-based systems of sufficient\n-      vintage (2.3 and newer), 'gnu' is automatically selected. This option\n-      can change the library ABI.\n+      vintage (2.3 and newer), 'gnu' is automatically selected. On newlib-based\n+      systems (<code>'--with_newlib=yes'</code>) and OpenBSD, 'newlib' is\n+      automatically selected. On Mac OS X 'darwin' is automatically selected.\n+      This option can change the library ABI.\n      </para>\n  </listitem></varlistentry>\n \n@@ -181,9 +186,9 @@\n \tand of the nanosleep and sched_yield functions, used in the\n \timplementation of [thread.thread.this] of the 2011 ISO C++ standard.\n \tThe choice OPTION=yes checks for the availability of the facilities\n-\tin libc and libposix4.  In case of need the latter is also linked\n+\tin libc and libposix4.  In case it's needed the latter is also linked\n \tto libstdc++ as part of the build process.  OPTION=rt also searches\n-\t(and, in case, links) librt.   Note that the latter is not always\n+\t(and, if needed, links) librt.   Note that the latter is not always\n \tdesirable because, in glibc, for example, in turn it triggers the\n \tlinking of libpthread too, which activates locking, a large overhead\n \tfor single-thread programs.  OPTION=no skips the tests completely.\n@@ -249,7 +254,7 @@\n  </listitem></varlistentry>\n \n  <varlistentry><term><code>--enable-c99</code></term>\n- <listitem><para>The \"long long\" type was introduced in C99, along\n+ <listitem><para>The <type>long long</type> type was introduced in C99, along\n \twith many other functions for wide characters, and math\n \tclassification macros, etc.  If enabled, all C99 functions not\n \tspecified by the C++ standard will be put into <code>namespace\n@@ -264,7 +269,7 @@\n  </listitem></varlistentry>\n \n  <varlistentry><term><code>--enable-wchar_t</code>[default]</term>\n- <listitem><para>Template specializations for the \"wchar_t\" type are\n+ <listitem><para>Template specializations for the <type>wchar_t</type> type are\n \trequired for wide character conversion support.  Disabling\n \twide character specializations may be expedient for initial\n \tporting efforts, but builds only a subset of what is required by\n@@ -274,7 +279,7 @@\n  </listitem></varlistentry>\n \n  <varlistentry><term><code>--enable-long-long  </code></term>\n- <listitem><para>The \"long long\" type was introduced in C99.  It is\n+ <listitem><para>The <type>long long</type> type was introduced in C99.  It is\n \tprovided as a GNU extension to C++98 in g++.  This flag builds\n \tsupport for \"long long\" into the library (specialized\n \ttemplates and the like for iostreams).  This option is on by default:\n@@ -351,7 +356,7 @@\n  <listitem><para>Use extern template to pre-instantiate all required\n  \tspecializations for certain types defined in the standard libraries. \n \tThese types include <classname>string</classname> and dependents like\n-\t<classname>char_traits</classname>, the templateized io classes,\n+\t<classname>char_traits</classname>, the templatized IO classes,\n \t<classname>allocator</classname>, and others.  \n \tDisabling means that implicit\n \ttemplate generation will be used when compiling these types.  By"}]}