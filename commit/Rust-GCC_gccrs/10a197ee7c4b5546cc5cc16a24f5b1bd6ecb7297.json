{"sha": "10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMTk3ZWU3YzRiNTU0NmNjNWNjMTZhMjRmNWIxYmQ2ZWNiNzI5Nw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-27T20:40:06Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-27T20:40:06Z"}, "message": "gcconfig: Add machine type S390.\n\n\t* include/private/gcconfig: Add machine type S390.  Add s390x support.\n\t* include/private/gc_locks.h (GC_test_and_set): Implement for s390.\n\t(GC_compare_and_exchange): Likewise.\n\nFrom-SVN: r57592", "tree": {"sha": "02c4e6e5e8bfd70e19bb4ca3880e717a5a0d6490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02c4e6e5e8bfd70e19bb4ca3880e717a5a0d6490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/comments", "author": null, "committer": null, "parents": [{"sha": "fc5295fa6af5d1f71b476500988c0739846ce348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5295fa6af5d1f71b476500988c0739846ce348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5295fa6af5d1f71b476500988c0739846ce348"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "1e39307bfa7d8ac962ef097eeb4a50cf426cef0d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "patch": "@@ -1,3 +1,9 @@\n+2002-09-27  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* include/private/gcconfig: Add machine type S390.  Add s390x support.\n+\t* include/private/gc_locks.h (GC_test_and_set): Implement for s390.\n+\t(GC_compare_and_exchange): Likewise.\n+\n 2002-09-24  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* include/private/gcconfig.h: Fix NetBSD/mips parameters."}, {"sha": "33101f8c2d02726aa03cdc1c13eda08f61777b85", "filename": "boehm-gc/include/private/gc_locks.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_locks.h?ref=10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "patch": "@@ -209,6 +209,19 @@\n         }\n #       define GC_TEST_AND_SET_DEFINED\n #    endif /* ARM32 */\n+#    ifdef S390\n+\tinline static int GC_test_and_set(volatile unsigned int *addr) {\n+\t int ret;\n+\t __asm__ __volatile__ (\n+\t\t\"\tl\t%0,0(%2)\\n\"\n+\t\t\"0:\tcs\t%0,%1,0(%2)\\n\"\n+\t\t\"\tjl\t0b\"\n+\t\t: \"=&d\" (ret)\n+\t\t: \"d\" (1), \"a\" (addr)\n+\t\t: \"cc\", \"memory\");\n+\t  return ret;\n+\t}\n+#    endif\n #  endif /* __GNUC__ */\n #  if (defined(ALPHA) && !defined(__GNUC__))\n #    define GC_test_and_set(addr) __cxx_test_and_set_atomic(addr, 1)\n@@ -330,6 +343,27 @@\n         }\n #      endif /* 0 */\n #     endif /* IA64 */\n+#     if defined(S390)\n+#      if !defined(GENERIC_COMPARE_AND_SWAP)\n+\t inline static GC_bool GC_compare_and_exchange(volatile C_word *addr,\n+\t\t\t\t\t\t       GC_word old, GC_word new_val) \n+\t {\n+\t   int retval;\n+\t   __asm__ __volatile__ (\n+#          ifndef __s390x__\n+\t\t\"\tcs  %1,%2,0(%3)\\n\"\n+#          else\n+\t\t\"\tcsg %1,%2,0(%3)\\n\"\n+#\t   endif\n+\t\t\"\tipm %0\\n\"\n+\t\t\"\tsrl %0,28\\n\"\n+\t\t: \"=&d\" (retval), \"+d\" (old)\n+\t\t: \"d\" (new_val), \"a\" (addr)\n+\t\t: \"cc\", \"memory\");\n+\t   return retval == 0;\n+\t}\n+#      endif\n+#     endif\n #     if !defined(GENERIC_COMPARE_AND_SWAP)\n         /* Returns the original value of *addr.\t*/\n         inline static GC_word GC_atomic_add(volatile GC_word *addr,"}, {"sha": "432250cf4f690df6829cd75016859323777db456", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=10a197ee7c4b5546cc5cc16a24f5b1bd6ecb7297", "patch": "@@ -370,7 +370,7 @@\n #   define mach_type_known\n # endif\n # if defined(__s390__) && defined(LINUX)\n-#    define S370\n+#    define S390\n #    define mach_type_known\n # endif\n # if defined(__GNU__)\n@@ -419,7 +419,8 @@\n \t\t    /* \t\t        (CX_UX and DGUX)\t\t*/\n \t\t    /* \t\t   S370\t      ==> 370-like machine\t*/\n \t\t    /* \t\t\trunning Amdahl UTS4\t\t*/\n-\t\t    /*\t\t\tor a 390 running LINUX\t\t*/\n+\t\t    /*\t\t   S390       ==> 390-like machine      */\n+\t\t    /*\t\t\trunning LINUX\t\t\t*/\n \t\t    /* \t\t   ARM32      ==> Intel StrongARM\t*/\n \t\t    /* \t\t   IA64\t      ==> Intel IPF\t\t*/\n \t\t    /*\t\t\t\t  (e.g. Itanium)\t*/\n@@ -1523,12 +1524,29 @@\n #\tdefine DATAEND (_end)\n #\tdefine HEURISTIC2\n #   endif\n+# endif\n+\n+# ifdef S390\n+#   define MACH_TYPE \"S390\"\n+#   define USE_GENERIC_PUSH_REGS\n+#   ifndef __s390x__\n+#\tdefine ALIGNMENT 4\n+#\tdefine CPP_WORDSZ 32\n+#   else\n+#\tdefine ALIGNMENT 8\n+#\tdefine CPP_WORDSZ 64\n+#\tdefine HBLKSIZE 4096\n+#   endif\n #   ifdef LINUX\n #       define OS_TYPE \"LINUX\"\n-#       define HEURISTIC1\n+#       define LINUX_STACKBOTTOM\n #       define DYNAMIC_LOADING\n         extern int __data_start[];\n #       define DATASTART ((ptr_t)(__data_start))\n+\textern int _end[];\n+#\tdefine DATAEND (_end)\n+#\tdefine CACHE_LINE_SIZE 256\n+#\tdefine GETPAGESIZE() 4096\n #   endif\n # endif\n "}]}