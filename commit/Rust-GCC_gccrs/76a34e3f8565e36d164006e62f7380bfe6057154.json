{"sha": "76a34e3f8565e36d164006e62f7380bfe6057154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhMzRlM2Y4NTY1ZTM2ZDE2NDAwNmU2MmY3MzgwYmZlNjA1NzE1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:59:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:59:40Z"}, "message": "Add an empty_mask_is_expensive hook\n\nThis patch adds a hook to control whether we avoid executing masked\n(predicated) stores when the mask is all false.  We don't want to do\nthat by default for SVE.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (empty_mask_is_expensive): New hook.\n\t* doc/tm.texi.in (TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_empty_mask_is_expensive): Declare.\n\t* targhooks.c (default_empty_mask_is_expensive): New function.\n\t* tree-vectorizer.c (vectorize_loops): Only call optimize_mask_stores\n\tif the target says that empty masks are expensive.\n\t* config/aarch64/aarch64.c (aarch64_empty_mask_is_expensive):\n\tNew function.\n\t(TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE): Redefine.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256631", "tree": {"sha": "5d7839c9d03b922ec19e0df424632405eecb1a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7839c9d03b922ec19e0df424632405eecb1a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a34e3f8565e36d164006e62f7380bfe6057154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a34e3f8565e36d164006e62f7380bfe6057154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a34e3f8565e36d164006e62f7380bfe6057154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a34e3f8565e36d164006e62f7380bfe6057154/comments", "author": null, "committer": null, "parents": [{"sha": "535e7c114a7ad2ad7a6a0def88cf9448fcd5f029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535e7c114a7ad2ad7a6a0def88cf9448fcd5f029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535e7c114a7ad2ad7a6a0def88cf9448fcd5f029"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "1b52ec1f2cb77eebba64edff901d9a242f2c21a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -1,3 +1,18 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (empty_mask_is_expensive): New hook.\n+\t* doc/tm.texi.in (TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_empty_mask_is_expensive): Declare.\n+\t* targhooks.c (default_empty_mask_is_expensive): New function.\n+\t* tree-vectorizer.c (vectorize_loops): Only call optimize_mask_stores\n+\tif the target says that empty masks are expensive.\n+\t* config/aarch64/aarch64.c (aarch64_empty_mask_is_expensive):\n+\tNew function.\n+\t(TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE): Redefine.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "6d6294a3c3996c9a2f01216a5629ef5c997789f9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -16875,6 +16875,16 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n   return true;\n }\n \n+/* Implement TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE.  Assume for now that\n+   it isn't worth branching around empty masked ops (including masked\n+   stores).  */\n+\n+static bool\n+aarch64_empty_mask_is_expensive (unsigned)\n+{\n+  return false;\n+}\n+\n /* Return 1 if pseudo register should be created and used to hold\n    GOT address for PIC code.  */\n \n@@ -17499,6 +17509,9 @@ aarch64_libgcc_floating_mode_supported_p\n \n #undef TARGET_VECTORIZE_GET_MASK_MODE\n #define TARGET_VECTORIZE_GET_MASK_MODE aarch64_get_mask_mode\n+#undef TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE\n+#define TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE \\\n+  aarch64_empty_mask_is_expensive\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS aarch64_init_libfuncs"}, {"sha": "faf7b8b7a9c784590911ebdb08c8189574fbff3c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -5924,6 +5924,12 @@ is @var{length} bytes long and that contains @var{nunits} elements,\n if such a mode exists.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE (unsigned @var{ifn})\n+This hook returns true if masked internal function @var{ifn} (really of\n+type @code{internal_fn}) should be considered expensive when the mask is\n+all zeros.  GCC can then try to branch around the instruction instead.\n+@end deftypefn\n+\n @deftypefn {Target Hook} {void *} TARGET_VECTORIZE_INIT_COST (struct loop *@var{loop_info})\n This hook should initialize target-specific data structures in preparation for modeling the costs of vectorizing a loop or basic block.  The default allocates three unsigned integers for accumulating costs for the prologue, body, and epilogue of the loop or basic block.  If @var{loop_info} is non-NULL, it identifies the loop being vectorized; otherwise a single block is being vectorized.\n @end deftypefn"}, {"sha": "84bd973c164369e27ef50736ad86ef4b7e0b11a3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -4108,6 +4108,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_VECTORIZE_GET_MASK_MODE\n \n+@hook TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE\n+\n @hook TARGET_VECTORIZE_INIT_COST\n \n @hook TARGET_VECTORIZE_ADD_STMT_COST"}, {"sha": "94a0ad4dca9a3af3b7bc6499f12ae834e20ebf58", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -1933,6 +1933,17 @@ if such a mode exists.\",\n  (poly_uint64 nunits, poly_uint64 length),\n  default_get_mask_mode)\n \n+/* Function to say whether a masked operation is expensive when the\n+   mask is all zeros.  */\n+DEFHOOK\n+(empty_mask_is_expensive,\n+ \"This hook returns true if masked internal function @var{ifn} (really of\\n\\\n+type @code{internal_fn}) should be considered expensive when the mask is\\n\\\n+all zeros.  GCC can then try to branch around the instruction instead.\",\n+ bool,\n+ (unsigned ifn),\n+ default_empty_mask_is_expensive)\n+\n /* Target builtin that implements vector gather operation.  */\n DEFHOOK\n (builtin_gather,"}, {"sha": "d83076fdff8d2b7822aa5854fe705e4ea122ee73", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -1319,6 +1319,14 @@ default_get_mask_mode (poly_uint64 nunits, poly_uint64 vector_size)\n   return opt_machine_mode ();\n }\n \n+/* By default consider masked stores to be expensive.  */\n+\n+bool\n+default_empty_mask_is_expensive (unsigned ifn)\n+{\n+  return ifn == IFN_MASK_STORE;\n+}\n+\n /* By default, the cost model accumulates three separate costs (prologue,\n    loop body, and epilogue) for a vectorized loop or block.  So allocate an\n    array of three unsigned ints, set it to zero, and return its address.  */"}, {"sha": "eca35d2b1ace736e0faddf9d00582f650749acde", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -111,6 +111,7 @@ extern machine_mode default_preferred_simd_mode (scalar_mode mode);\n extern machine_mode default_split_reduction (machine_mode);\n extern void default_autovectorize_vector_sizes (vector_sizes *);\n extern opt_machine_mode default_get_mask_mode (poly_uint64, poly_uint64);\n+extern bool default_empty_mask_is_expensive (unsigned);\n extern void *default_init_cost (struct loop *);\n extern unsigned default_add_stmt_cost (void *, int, enum vect_cost_for_stmt,\n \t\t\t\t       struct _stmt_vec_info *, int,"}, {"sha": "fb81b986529815330b67ab8e5f1769f7fbcbbccf", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a34e3f8565e36d164006e62f7380bfe6057154/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=76a34e3f8565e36d164006e62f7380bfe6057154", "patch": "@@ -826,7 +826,8 @@ vectorize_loops (void)\n       if (loop_vinfo)\n \thas_mask_store = LOOP_VINFO_HAS_MASK_STORE (loop_vinfo);\n       delete loop_vinfo;\n-      if (has_mask_store)\n+      if (has_mask_store\n+\t  && targetm.vectorize.empty_mask_is_expensive (IFN_MASK_STORE))\n \toptimize_mask_stores (loop);\n       loop->aux = NULL;\n     }"}]}