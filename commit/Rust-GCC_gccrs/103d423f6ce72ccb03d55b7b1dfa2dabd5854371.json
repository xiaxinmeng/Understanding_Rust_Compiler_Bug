{"sha": "103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "node_id": "C_kwDOANBUbNoAKDEwM2Q0MjNmNmNlNzJjY2IwM2Q1NWI3YjFkZmEyZGFiZDU4NTQzNzE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T15:10:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T15:10:14Z"}, "message": "c, ubsan: Instrument even shortened divisions [PR109151]\n\nOn the following testcase, the C FE decides to shorten the division because\nit has a guarantee that INT_MIN / -1 division won't be encountered, the\nfirst operand is widened from narrower unsigned and/or the second operand is\na constant other than all ones (in this case both are true).\nThe problem is that the narrower type in this case is _Bool and\nubsan_instrument_division only instruments it if op0's type is INTEGER_TYPE\nor REAL_TYPE.  Strangely this doesn't happen in C++ FE.\nAnyway, we only shorten divisions if the INT_MIN / -1 case is impossible,\nso I think we should be fine even with -fstrict-enums in C++ in case it\nshortened to ENUMERAL_TYPEs.\n\nThe following patch just instruments those on the ubsan_instrument_division\nside.  Perhaps only the first hunk and testcase might be needed because\nwe shouldn't shorten if the other case could be triggered.\n\n2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/109151\n\t* c-ubsan.cc (ubsan_instrument_division): Handle all scalar integral\n\ttypes rather than just INTEGER_TYPE.\n\n\t* c-c++-common/ubsan/div-by-zero-8.c: New test.", "tree": {"sha": "e522e6af56d03357381d2ff7deba0aca243521e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e522e6af56d03357381d2ff7deba0aca243521e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103d423f6ce72ccb03d55b7b1dfa2dabd5854371/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfb5eae96b65894da1301e966568fdf32bf64d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bfb5eae96b65894da1301e966568fdf32bf64d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bfb5eae96b65894da1301e966568fdf32bf64d0"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "c3ae515306cfbe9ee773383f1f222582fdce5cf3", "filename": "gcc/c-family/c-ubsan.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103d423f6ce72ccb03d55b7b1dfa2dabd5854371/gcc%2Fc-family%2Fc-ubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103d423f6ce72ccb03d55b7b1dfa2dabd5854371/gcc%2Fc-family%2Fc-ubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.cc?ref=103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "patch": "@@ -53,7 +53,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n   op0 = unshare_expr (op0);\n   op1 = unshare_expr (op1);\n \n-  if (TREE_CODE (type) == INTEGER_TYPE\n+  if (INTEGRAL_TYPE_P (type)\n       && sanitize_flags_p (SANITIZE_DIVIDE))\n     t = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t     op1, build_int_cst (type, 0));\n@@ -68,7 +68,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n     t = NULL_TREE;\n \n   /* We check INT_MIN / -1 only for signed types.  */\n-  if (TREE_CODE (type) == INTEGER_TYPE\n+  if (INTEGRAL_TYPE_P (type)\n       && sanitize_flags_p (SANITIZE_SI_OVERFLOW)\n       && !TYPE_UNSIGNED (type))\n     {"}, {"sha": "02e1d7cfc95eaa6d10f5a35d2dc59afdaba129ff", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103d423f6ce72ccb03d55b7b1dfa2dabd5854371/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103d423f6ce72ccb03d55b7b1dfa2dabd5854371/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-8.c?ref=103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/109151 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover=integer-divide-by-zero\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int d;\n+\n+int\n+main ()\n+{\n+  d = ((short) (d == 1 | d > 9)) / 0;\n+}\n+\n+/* { dg-output \"division by zero\" } */"}]}