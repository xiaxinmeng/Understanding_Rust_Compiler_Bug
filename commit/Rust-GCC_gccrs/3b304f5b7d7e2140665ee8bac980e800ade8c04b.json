{"sha": "3b304f5b7d7e2140665ee8bac980e800ade8c04b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzMDRmNWI3ZDdlMjE0MDY2NWVlOGJhYzk4MGU4MDBhZGU4YzA0Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-09T19:56:01Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-09T19:56:01Z"}, "message": "top level:\n\n\t* Makefile.in (WARN_CFLAGS): Add -Wwrite-strings.\n\t(tree.o): Depend on output.h.\n\n\t* c-decl.c (pending_invalid_xref_file,\n\tcurrent_function_prototype_file): Constify.\n\t(pushdecl): Constify a local char *.\n\t(define_label): Constify filename parameter.\n\t* c-lex.c (init_parse): Constify parameter and return value.\n\t* c-typeck.c (c_expand_asm_operands): Constify filename parameter.\n\t* c-tree.h: Update prototypes.\n\t* c-parse.in: Constify filename member of %union, and if_stmt_file.\n\t* c-parse.y, c-parse.c, c-parse.h, objc/objc-parse.y,\n\tobjc/objc-parse.c: Regenerate.\n\n\t* dwarfout.c (dwarfout_init): Constify main_input_filename parameter.\n\t* dwarfout.h: Update prototypes.\n\t* expr.c (expand_expr): Constify a local char *.\n\t* flags.h: Constify main_input_filename.\n\t* function.c (expand_function_end): Constify filename parameter.\n\t* genrecog.c (make_insn_sequence): Use a character array for\n\tc_test_pos.\n\t(main): Remove unused variables.\n\t* input.h: Constify input_filename, main_input_filename, and\n\tfile_stack.name.  Update prototypes.\n\t* output.h: Declare first_global_object_name and\n\tweak_global_object_name here, as const char *.\n\t* stmt.c (expand_asm_operands): Constify filename parameter.\n\t* toplev.c (compile_file, push_srcloc, debug_start_source_file):\n\tConstify filename parameter.\n\t(input_filename, main_input_filename): Constify.\n\t* toplev.h: Update prototypes.\n\t* tree.c: Include output.h.  Don't declare\n\tfirst_global_object_name or weak_global_object_name.  Clean up string\n\tbashing in get_file_function_name_long.\n\t* tree.h (struct tree_decl): Constify filename member.\n\t(input_filename): Constify.\n\tUpdate prototypes.\n\t* varasm.c (first_global_object_name, weak_global_object_name):\n\tConstify.\n\t(assemble_start_function, assemble_variable): Clean up string bashing.\n\n\t* gcc.c: Constify all spec-related strings initialized,\n\ttransitively, from string constants.  Constify all strings\n\tand string variables related to multilibs.\n\t(set_spec, read_specs): Cast argument to free to PTR.\n\t(used_arg): Do not modify multilib_matches.  Use strncmp plus\n\tlength comparison to compare multilib switches.\n\t* genmultilib: Constify everything declared in multilib.h.\n\nch:\n\t* ch-tree.h: Update prototypes.  Remove prototypes for\n\tfunctions declared elsewhere.\n\t* decl.c (define_label): Constify filename parameter.\n\t* grant.c (globalize_decl, set_default_grant_file): Constify\n\tlocal char * variables.  Don't declare\n\tfirst_global_object_name or asm_out_file.\n\t* lang.c (chill_real_input_filename): Constify.\n\t* lex.c (init_parse): Constify parameter and return value.\n\t* parse.c: Don't declare input_filename.\n\t(ch_expand_asm_operands): Constify filename parameter.\n\t(parse_multi_dimension_case_action): Constify local char *.\n\t* satisfy.c (safe_satisfy_decl): Constify local char *.\n\ncp:\n\t* cp-tree.h: Constify tree_srcloc.filename, tinst_level.file,\n\tand pending_inline.filename.  Update prototypes.\n\t* decl.c (define_label): Constify filename parameter.\n\t* decl2.c (warn_if_unknown_interface): Constify local char *.\n\t* input.c Constify input_source.filename. Don't declare\n\tinput_filename or lineno.  Constify filename parameter to feed_input.\n\t* lex.c (init_parse): Constify parameter and return value.\n\t(cp_pragma_interface, cp_pragma_implementation): Constify\n\tfilename argument.\n\t(reinit_parse_for_method, reinit_parse_for_block,\n\treinit_parse_for_expr, feed_defarg, handle_cp_pragma):\n\tConstify local char *.\n\t* pt.c: Don't declare lineno or input_filename.\n\t(print_template_context, tsubst_friend_function, tsubst_decl,\n\ttsubst, instantiate_decl): Constify local char *.\n\t* semantics.c (expand_body): Constify local char *.\n\t* tree.c (build_srcloc): Constify filename parameter.\n\t* typeck.c (c_expand_asm_operands): Constify filename\n\tparameter.\n\nf:\n\t* com.c (ffecom_subscript_check_): Constify array_name\n\tparameter. Clean up string bashing.\n\t(ffecom_arrayref_, ffecom_char_args_x_): Constify array_name\n\tparameter.\n\t(ffecom_do_entry_, ffecom_gen_sfuncdef_, ffecom_start_progunit_,\n\tffecom_sym_transform_, ffecom_sym_transform_assign_): Constify\n\tlocal char *.\n\t(init_parse): Constify parameter and return value.\n\t* lex.c: Include dwarfout.h instead of prototyping dwarfout_*\n\tfunctions here.\n\t(ffelex_file_pop_, ffelex_file_push_): Constify filename parameter.\n\t(ffelex_hash_, ffelex_include_): Constify local char *.\n\t* std.c (ffestd_exec_end): Constify local char *.\n\t* where.c (ffewhere_file_new): Constify filename parameter.\n\t* where.h: Update prototypes.\n\njava:\n\t* check_init.c (check_init): Constify local char *.\n\t* class.c (push_class): Constify local char *.\n\t* java_tree.h: Update prototypes.\n\t* jcf-io.c (open_class): Constify filename parameter and\n\treturn value.\n\t(find_class): Remove redundant string copy.  Cast return from\n\topen_class.\n\t* jcf-parse.c (read_class, parse_class_file, yyparse):\n\tConstify local char *.\n\t* jcf-write.c (generate_bytecode_insns, generate_classfile):\n\tConstify local char *.\n\t* jcf.h (JCF): Constify filename and classname.\n\t(JCF_FINISH): Cast args to FREE to char * when appropriate.\n\t* lang.c (init_parse): Constify parameter and return value.\n\t* lex.c (java_get_line_col): Constify filename parameter.\n\t* parse.h: Constify parser_ctxt.filename.  Update prototypes.\n\t* parse.y (java_parser_context_suspend,\n\tissue_warning_error_from_context, safe_layout_class): Constify\n\tlocal char *.\n\t* parse.c: Regenerate.\n\nFrom-SVN: r33804", "tree": {"sha": "11478b672b9b1d6e7c70820a940f550161e9a1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11478b672b9b1d6e7c70820a940f550161e9a1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b304f5b7d7e2140665ee8bac980e800ade8c04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b304f5b7d7e2140665ee8bac980e800ade8c04b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b304f5b7d7e2140665ee8bac980e800ade8c04b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b304f5b7d7e2140665ee8bac980e800ade8c04b/comments", "author": null, "committer": null, "parents": [{"sha": "aa9e158d7ac4e85cede46a969c62cc7dada16060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9e158d7ac4e85cede46a969c62cc7dada16060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9e158d7ac4e85cede46a969c62cc7dada16060"}], "stats": {"total": 1069, "additions": 619, "deletions": 450}, "files": [{"sha": "e0d227ce34a27c79992ceaf5cfe9077669ab1331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,3 +1,54 @@\n+2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Makefile.in (WARN_CFLAGS): Add -Wwrite-strings.\n+\t(tree.o): Depend on output.h.\n+\n+\t* c-decl.c (pending_invalid_xref_file,\n+\tcurrent_function_prototype_file): Constify.\n+\t(pushdecl): Constify a local char *.\n+\t(define_label): Constify filename parameter.\n+\t* c-lex.c (init_parse): Constify parameter and return value.\n+\t* c-typeck.c (c_expand_asm_operands): Constify filename parameter.\n+\t* c-tree.h: Update prototypes.\n+\t* c-parse.in: Constify filename member of %union, and if_stmt_file.\n+\t* c-parse.y, c-parse.c, c-parse.h, objc/objc-parse.y,\n+\tobjc/objc-parse.c: Regenerate.\n+\n+\t* dwarfout.c (dwarfout_init): Constify main_input_filename parameter.\n+\t* dwarfout.h: Update prototypes.\n+\t* expr.c (expand_expr): Constify a local char *.\n+\t* flags.h: Constify main_input_filename.\n+\t* function.c (expand_function_end): Constify filename parameter.\n+\t* genrecog.c (make_insn_sequence): Use a character array for\n+\tc_test_pos.\n+\t(main): Remove unused variables.\n+\t* input.h: Constify input_filename, main_input_filename, and\n+\tfile_stack.name.  Update prototypes.\n+\t* output.h: Declare first_global_object_name and\n+\tweak_global_object_name here, as const char *.\n+\t* stmt.c (expand_asm_operands): Constify filename parameter.\n+\t* toplev.c (compile_file, push_srcloc, debug_start_source_file):\n+\tConstify filename parameter.\n+\t(input_filename, main_input_filename): Constify.\n+\t* toplev.h: Update prototypes.\n+\t* tree.c: Include output.h.  Don't declare\n+\tfirst_global_object_name or weak_global_object_name.  Clean up string\n+\tbashing in get_file_function_name_long.\n+\t* tree.h (struct tree_decl): Constify filename member.\n+\t(input_filename): Constify.\n+\tUpdate prototypes.\n+\t* varasm.c (first_global_object_name, weak_global_object_name):\n+\tConstify.\n+\t(assemble_start_function, assemble_variable): Clean up string bashing.\n+\n+\t* gcc.c: Constify all spec-related strings initialized,\n+\ttransitively, from string constants.  Constify all strings\n+\tand string variables related to multilibs.\n+\t(set_spec, read_specs): Cast argument to free to PTR.\n+\t(used_arg): Do not modify multilib_matches.  Use strncmp plus\n+\tlength comparison to compare multilib switches.\n+\t* genmultilib: Constify everything declared in multilib.h.\n+\n Tue May  9 22:28:03 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* flow.c (flow_delete_insn): Use INSN_DELETED_P for marking insn"}, {"sha": "449ee48aad0d939efaacf208b565ca8f4eda90cf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -76,7 +76,7 @@ XCFLAGS =\n TCFLAGS =\n CFLAGS = -g @stage1_warn_cflags@\n BOOT_CFLAGS = -O2 $(CFLAGS)\n-WARN_CFLAGS = -W -Wall -Wtraditional -pedantic -Wno-long-long\n+WARN_CFLAGS = -W -Wall -Wtraditional -pedantic -Wno-long-long -Wwrite-strings\n LOOSE_CFLAGS = `echo $(CFLAGS)|sed -e 's/-pedantic//g' -e 's/-Wtraditional//g'`\n # These exists to be overridden by the x-* and t-* files, respectively.\n X_CFLAGS =\n@@ -1223,7 +1223,7 @@ prefix.o: prefix.c $(CONFIG_H) system.h Makefile prefix.h\n convert.o: convert.c $(CONFIG_H) system.h $(TREE_H) flags.h convert.h toplev.h\n \n tree.o : tree.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h toplev.h \\\n-   $(GGC_H) $(HASHTAB_H)\n+   $(GGC_H) $(HASHTAB_H) output.h\n print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) system.h $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H)"}, {"sha": "301a32279778927459609a37338564b30b32d0be", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -80,7 +80,7 @@ int ggc_p = 1;\n \n tree pending_invalid_xref;\n /* File and line to appear in the eventual error message.  */\n-char *pending_invalid_xref_file;\n+const char *pending_invalid_xref_file;\n int pending_invalid_xref_line;\n \n /* While defining an enum type, this is 1 plus the last enumerator\n@@ -116,7 +116,7 @@ static tree current_function_parm_tags;\n \n /* Similar, for the file and line that the prototype came from if this is\n    an old-style definition.  */\n-static char *current_function_prototype_file;\n+static const char *current_function_prototype_file;\n static int current_function_prototype_line;\n \n /* A list (chain of TREE_LIST nodes) of all LABEL_DECLs in the function\n@@ -2019,7 +2019,7 @@ pushdecl (x)\n \n   if (name)\n     {\n-      char *file;\n+      const char *file;\n       int line;\n       int different_binding_level = 0;\n \n@@ -2674,7 +2674,7 @@ shadow_label (name)\n \n tree\n define_label (filename, line, name)\n-     char *filename;\n+     const char *filename;\n      int line;\n      tree name;\n {"}, {"sha": "3ca8264cba9f708938eda94b4352baa0410d7e1e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -222,9 +222,9 @@ remember_protocol_qualifiers ()\n       wordlist[i].name = \"oneway\";\n }\n \f\n-char *\n+const char *\n init_parse (filename)\n-     char *filename;\n+     const char *filename;\n {\n #if !USE_CPPLIB\n   /* Open input file.  */"}, {"sha": "aff33d8e468fc9fa3b59e40d58806573719c1fda", "filename": "gcc/c-parse.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,7 +1,6 @@\n \n /*  A Bison parser, made from c-parse.y\n- by  GNU Bison version 1.27\n-  */\n+    by GNU Bison version 1.28  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -101,7 +100,7 @@ const char * const language_string = \"GNU C\";\n \n #line 65 \"c-parse.y\"\n typedef union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n+\tconst char *filename; int lineno; int ends_in_label; } YYSTYPE;\n #line 186 \"c-parse.y\"\n \n /* Number of statements (loosely speaking) and compound statements \n@@ -111,7 +110,7 @@ static int compstmt_count;\n   \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static char *if_stmt_file;\n+static const char *if_stmt_file;\n static int if_stmt_line;\n \n /* List of types and structure classes of the current declaration.  */\n@@ -1275,8 +1274,8 @@ static const short yycheck[] = {    38,\n     48,    49,    50,    51,    52,    53,    54,    55,    56,    57\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n-/* This file comes from bison-1.27.  */\n+#line 3 \"/usr/share/misc/bison.simple\"\n+/* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -1489,7 +1488,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 216 \"/usr/lib/bison.simple\"\n+#line 217 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -3836,7 +3835,7 @@ case 407:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 542 \"/usr/lib/bison.simple\"\n+#line 543 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "f93aef0a566173d2c9a612cddfe86818c5901f45", "filename": "gcc/c-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,5 +1,5 @@\n typedef union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n+\tconst char *filename; int lineno; int ends_in_label; } YYSTYPE;\n #define\tIDENTIFIER\t257\n #define\tTYPENAME\t258\n #define\tSCSPEC\t259"}, {"sha": "adc247a01626fe92369565c353dbc439603f900f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -75,7 +75,7 @@ end ifc\n %start program\n \n %union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; }\n+\tconst char *filename; int lineno; int ends_in_label; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -216,7 +216,7 @@ static int compstmt_count;\n   \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static char *if_stmt_file;\n+static const char *if_stmt_file;\n static int if_stmt_line;\n \n /* List of types and structure classes of the current declaration.  */"}, {"sha": "c228e6e67da792cbade8416f0794b7d31b2771f2", "filename": "gcc/c-parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -63,7 +63,7 @@ const char * const language_string = \"GNU C\";\n %start program\n \n %union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; }\n+\tconst char *filename; int lineno; int ends_in_label; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -191,7 +191,7 @@ static int compstmt_count;\n   \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static char *if_stmt_file;\n+static const char *if_stmt_file;\n static int if_stmt_line;\n \n /* List of types and structure classes of the current declaration.  */"}, {"sha": "68e6f47a656dc554237bf7e78636806c26f8847d", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -191,7 +191,8 @@ extern void clear_parm_order                    PARAMS ((void));\n extern tree combine_parm_decls                  PARAMS ((tree, tree, int));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));\n extern void declare_parm_level                  PARAMS ((int));\n-extern tree define_label                        PARAMS ((char *, int, tree));\n+extern tree define_label                        PARAMS ((const char *, int,\n+\t\t\t\t\t\t\t tree));\n extern void delete_block                        PARAMS ((tree));\n extern void finish_decl                         PARAMS ((tree, tree, tree));\n extern void finish_decl_top_level               PARAMS ((tree, tree, tree));\n@@ -290,8 +291,8 @@ extern void set_init_index\t\t\tPARAMS ((tree, tree));\n extern void set_init_label\t\t\tPARAMS ((tree));\n extern void process_init_element\t\tPARAMS ((tree));\n extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t\t tree, int, char *,\n-\t\t\t\t\t\t\t int));\n+\t\t\t\t\t\t\t tree, int,\n+\t\t\t\t\t\t\t const char *, int));\n extern void c_expand_return\t\t\tPARAMS ((tree));\n extern tree c_expand_start_case                 PARAMS ((tree));\n "}, {"sha": "25c19e25784147e770e85a26bdbc7b446a93d115", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -6435,7 +6435,7 @@ void\n c_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n      tree string, outputs, inputs, clobbers;\n      int vol;\n-     char *filename;\n+     const char *filename;\n      int line;\n {\n   int noutputs = list_length (outputs);"}, {"sha": "45262b340e74f318ce5f58d26b24ed6b3f29c48f", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,3 +1,18 @@\n+2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* ch-tree.h: Update prototypes.  Remove prototypes for\n+\tfunctions declared elsewhere.\n+\t* decl.c (define_label): Constify filename parameter.\n+\t* grant.c (globalize_decl, set_default_grant_file): Constify\n+\tlocal char * variables.  Don't declare\n+\tfirst_global_object_name or asm_out_file.\n+\t* lang.c (chill_real_input_filename): Constify.\n+\t* lex.c (init_parse): Constify parameter and return value.\n+\t* parse.c: Don't declare input_filename.\n+\t(ch_expand_asm_operands): Constify filename parameter.\n+\t(parse_multi_dimension_case_action): Constify local char *.\n+\t* satisfy.c (safe_satisfy_decl): Constify local char *.\n+\n 2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ch-tree.h (init_function_start): Constify."}, {"sha": "5547107e1379f4bb2e5be81a42bad8cce42a580d", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -672,7 +672,7 @@ extern void clear_parm_order                    PARAMS ((void));\n extern tree combine_parm_decls                  PARAMS ((tree, tree, int));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));\n extern void declare_parm_level                  PARAMS ((int));\n-extern tree define_label                        PARAMS ((char *, int, tree));\n+extern tree define_label                        PARAMS ((const char *, int, tree));\n extern void delete_block                        PARAMS ((tree));\n extern void finish_decl                         PARAMS ((tree));\n extern tree finish_enum                         PARAMS ((tree, tree));\n@@ -1110,16 +1110,6 @@ extern tree type_for_size                       PARAMS ((unsigned, int));\n extern int  valid_array_index                   PARAMS ((tree, tree));\n extern void validate_varying_array_ref          PARAMS ((tree, tree));\n \n-/* in function.c */\n-extern void expand_function_end                 PARAMS ((char *, int, int));\n-extern void expand_function_start               PARAMS ((tree, int));\n-extern void init_function_start                 PARAMS ((tree, const char *, int));\n-extern void pop_function_context                PARAMS ((void));\n-extern void push_function_context               PARAMS ((void));\n-\n-/* in integrate.c */\n-extern void output_inline_function              PARAMS ((tree));\n-\n /* in toplev.c */\n extern void announce_function                   PARAMS ((tree));\n extern int  floor_log2_wide                     PARAMS ((unsigned HOST_WIDE_INT));\n@@ -1132,10 +1122,6 @@ extern void make_function_rtl                   PARAMS ((tree));\n extern void init_iterators                      PARAMS ((void));\n extern int  mark_addressable\t\t\tPARAMS ((tree));\n extern tree chill_result_decl;\n-#ifdef RTX_CODE\n-extern rtx label_rtx                            PARAMS ((tree));\n-#endif\n-extern void permanent_allocation                PARAMS ((int));\n \n #ifndef SET_WORD_SIZE\n #define SET_WORD_SIZE BITS_PER_WORD"}, {"sha": "9d5fd0dcfef641cb75047ccef13e2434cdc9b5b7", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -3151,7 +3151,7 @@ pushdecl_top_level (x)\n \n tree\n define_label (filename, line, name)\n-     char *filename;\n+     const char *filename;\n      int line;\n      tree name;\n {"}, {"sha": "42328c122a869a534b4d5019af3323279e94c3fe", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -2544,9 +2544,7 @@ globalize_decl (decl)\n   if (!TREE_PUBLIC (decl) && DECL_NAME (decl) &&\n       (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL))\n     {\n-      extern\tFILE\t*asm_out_file;\n-      extern\tchar\t*first_global_object_name;\n-      const char\t*name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+      const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n \t\n       if (!first_global_object_name)\n \tfirst_global_object_name = name + (name[0] == '*');\n@@ -2686,7 +2684,8 @@ write_grant_file ()\n void\n set_default_grant_file ()\n {\n-    char\t*p, *tmp, *fname;\n+    char\t*p, *tmp;\n+    const char\t*fname;\n \n     if (dump_base_name)\n       fname = dump_base_name; /* Probably invoked via gcc */\n@@ -2993,18 +2992,18 @@ chill_finish_compile ()\n \t Perhaps rewrite this so nothing is done in pass 1. */\n       if (pass == 1)\n \t{\n-\t  extern char *first_global_object_name;\n \t  /* If we don't do this spoof, we get the name of the first\n \t     tasking_code variable, and not the file name. */\n-\t  char *tmp = first_global_object_name;\n-\n+\t  char *q;\n+\t  const char *tmp = first_global_object_name;\n \t  first_global_object_name = NULL;\n \t  chill_init_name = get_file_function_name ('I');\n \t  first_global_object_name = tmp;\n+\n \t  /* strip off the file's extension, if any. */\n-\t  tmp = strrchr (IDENTIFIER_POINTER (chill_init_name), '.');\n-\t  if (tmp)\n-\t    *tmp = '\\0';\n+\t  q = strrchr (IDENTIFIER_POINTER (chill_init_name), '.');\n+\t  if (q)\n+\t    *q = '\\0';\n \t}\n \n       start_chill_function (chill_init_name, void_type_node, NULL_TREE,"}, {"sha": "9a2f822fc1a8b4b52ffe287984b5aecf2dc452b8", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -47,7 +47,7 @@ int ignore_case = 1;\n int special_UC = 0;\n \n /* The actual name of the input file, regardless of any #line directives */\n-char* chill_real_input_filename;\n+const char* chill_real_input_filename;\n extern FILE* finput;\n \n static int deep_const_expr\t\t\tPARAMS ((tree));"}, {"sha": "cd433caf9b99d8df5f197c1f2328ee3f2c15b741", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -197,9 +197,9 @@ ch_lex_init ()\n }\n \n \n-char *\n+const char *\n init_parse (filename)\n-     char *filename;\n+     const char *filename;\n {\n   int lowercase_standard_names = ignore_case || ! special_UC;\n "}, {"sha": "f2513ff23faf0ab72fe7801ee2633b12c3de0209", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -94,7 +94,6 @@ static int expect\t\t\t\tPARAMS ((enum terminal, const char *));\n static void define__PROCNAME__\t\t\tPARAMS ((void));\n \n extern int  lineno;\n-extern char *input_filename;\n extern tree generic_signal_type_node;\n extern tree signal_code;\n extern int all_static_flag;\n@@ -451,7 +450,8 @@ static void parse_multi_dimension_case_action PARAMS ((tree));\n static void parse_case_action PARAMS ((tree));\n static tree parse_asm_operands PARAMS ((void));\n static tree parse_asm_clobbers PARAMS ((void));\n-static void ch_expand_asm_operands PARAMS ((tree, tree, tree, tree, int, char *, int));\n+static void ch_expand_asm_operands PARAMS ((tree, tree, tree, tree,\n+\t\t\t\t\t    int, const char *, int));\n static void parse_asm_action PARAMS ((void));\n static void parse_begin_end_block PARAMS ((tree));\n static void parse_if_action PARAMS ((tree));\n@@ -1785,7 +1785,7 @@ parse_multi_dimension_case_action (selector)\n   tree action_labels = NULL_TREE;\n   tree tests = NULL_TREE;\n   int  save_lineno = lineno;\n-  char *save_filename = input_filename;\n+  const char *save_filename = input_filename;\n \n   /* We can't compute the range of an (ELSE) label until all of the CASE\n      label specifications have been seen, however, the code for the actions\n@@ -2008,7 +2008,7 @@ static void\n ch_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n      tree string, outputs, inputs, clobbers;\n      int vol;\n-     char *filename;\n+     const char *filename;\n      int line;\n {\n   int noutputs = list_length (outputs);"}, {"sha": "8fa46de396629a18efd295b9a59df5ac196c0c94", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -67,7 +67,7 @@ safe_satisfy_decl (decl, prev_chain)\n   struct decl_chain new_link;\n   struct decl_chain *link;\n   struct decl_chain *chain = prev_chain;\n-  char *save_filename = input_filename;\n+  const char *save_filename = input_filename;\n   int save_lineno = lineno;\n   tree result = decl;\n   "}, {"sha": "bd7f0ead2d8f704663ea8d17da11c101cf41bc95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,3 +1,25 @@\n+2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cp-tree.h: Constify tree_srcloc.filename, tinst_level.file,\n+\tand pending_inline.filename.  Update prototypes.\n+\t* decl.c (define_label): Constify filename parameter.\n+\t* decl2.c (warn_if_unknown_interface): Constify local char *.\n+\t* input.c Constify input_source.filename. Don't declare\n+\tinput_filename or lineno.  Constify filename parameter to feed_input.\n+\t* lex.c (init_parse): Constify parameter and return value.\n+\t(cp_pragma_interface, cp_pragma_implementation): Constify\n+\tfilename argument.\n+\t(reinit_parse_for_method, reinit_parse_for_block,\n+\treinit_parse_for_expr, feed_defarg, handle_cp_pragma):\n+\tConstify local char *.\n+\t* pt.c: Don't declare lineno or input_filename.\n+\t(print_template_context, tsubst_friend_function, tsubst_decl,\n+\ttsubst, instantiate_decl): Constify local char *.\n+\t* semantics.c (expand_body): Constify local char *.\n+\t* tree.c (build_srcloc): Constify filename parameter.\n+\t* typeck.c (c_expand_asm_operands): Constify filename\n+\tparameter.\n+\n 2000-05-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tinfo.cc (__dynamic_cast): Use a reinterpret_cast. Fix"}, {"sha": "c7c0933248103195fe626f81edf4cfa4fdc035d8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -399,7 +399,7 @@ struct tree_wrapper\n struct tree_srcloc\n {\n   char common[sizeof (struct tree_common)];\n-  char *filename;\n+  const char *filename;\n   int linenum;\n };\n \n@@ -3338,7 +3338,7 @@ struct tinst_level\n {\n   tree decl;\n   int line;\n-  char *file;\n+  const char *file;\n   struct tinst_level *next;\n };\n \n@@ -3533,7 +3533,7 @@ struct pending_inline\n {\n   struct pending_inline *next;\t/* pointer to next in chain */\n   int lineno;\t\t\t/* line number we got the text from */\n-  char *filename;\t\t/* name of file we were processing */\n+  const char *filename;\t\t/* name of file we were processing */\n   tree fndecl;\t\t\t/* FUNCTION_DECL that brought us here */\n   int token;\t\t\t/* token we were scanning */\n   int token_value;\t\t/* value of token we were scanning (YYSTYPE) */\n@@ -3910,7 +3910,7 @@ extern void push_class_level_binding\t\tPARAMS ((tree, tree));\n extern tree implicitly_declare\t\t\tPARAMS ((tree));\n extern tree lookup_label\t\t\tPARAMS ((tree));\n extern tree declare_local_label                 PARAMS ((tree));\n-extern tree define_label\t\t\tPARAMS ((char *, int, tree));\n+extern tree define_label\t\t\tPARAMS ((const char *, int, tree));\n extern void push_switch\t\t\t\tPARAMS ((void));\n extern void pop_switch\t\t\t\tPARAMS ((void));\n extern void define_case_label\t\t\tPARAMS ((void));\n@@ -4593,7 +4593,7 @@ extern tree build_x_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n extern tree build_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n extern tree dubious_conversion_warnings         PARAMS ((tree, tree, const char *, tree, int));\n extern tree convert_for_initialization\t\tPARAMS ((tree, tree, tree, int, const char *, tree, int));\n-extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int, char *, int));\n+extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int, const char *, int));\n extern void c_expand_return\t\t\tPARAMS ((tree));\n extern tree c_expand_start_case\t\t\tPARAMS ((tree));\n extern int comp_ptr_ttypes\t\t\tPARAMS ((tree, tree));"}, {"sha": "b951773f08f56743cb48538080174dfa657894d0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -4794,7 +4794,7 @@ declare_local_label (id)\n \n tree\n define_label (filename, line, name)\n-     char *filename;\n+     const char *filename;\n      int line;\n      tree name;\n {"}, {"sha": "ca660e098bf48bbf768d8573f9c4f00329e43ad9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -867,7 +867,7 @@ warn_if_unknown_interface (decl)\n     {\n       struct tinst_level *til = tinst_for_decl ();\n       int sl = lineno;\n-      char *sf = input_filename;\n+      const char *sf = input_filename;\n \n       if (til)\n \t{"}, {"sha": "8c96c37963d01138d40eae77d6a32d01f9870022", "filename": "gcc/cp/input.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finput.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -54,23 +54,20 @@ struct input_source {\n   /* values to restore after reading all of current string */\n   struct pending_input *input;\n #if !USE_CPPLIB\n-  char *filename;\n+  const char *filename;\n   int lineno;\n   struct putback_buffer putback;\n #endif\n };\n \n static struct input_source *input, *free_inputs;\n \n-extern char *input_filename;\n-extern int lineno;\n-\n #if USE_CPPLIB\n extern unsigned char *yy_cur, *yy_lim;\n extern int yy_get_token ();\n #endif\n \n-extern void feed_input PARAMS ((char *, int, char *, int));\n+extern void feed_input PARAMS ((char *, int, const char *, int));\n extern void put_input PARAMS ((int));\n extern void put_back PARAMS ((int));\n extern int getch PARAMS ((void));\n@@ -114,7 +111,7 @@ void\n feed_input (str, len, file, line)\n      char *str;\n      int len;\n-     char *file;\n+     const char *file;\n      int line;\n {\n   struct input_source *inp = allocate_input ();"}, {"sha": "34fea7e1cd49d358c8c2f8c20aeae0888fd1cf2d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -65,8 +65,8 @@ static void feed_defarg PARAMS ((tree, tree));\n static void store_pending_inline PARAMS ((tree, struct pending_inline *));\n static void reinit_parse_for_expr PARAMS ((struct obstack *));\n static int *init_cpp_parse PARAMS ((void));\n-static void cp_pragma_interface PARAMS ((char *));\n-static void cp_pragma_implementation PARAMS ((char *));\n+static void cp_pragma_interface PARAMS ((const char *));\n+static void cp_pragma_implementation PARAMS ((const char *));\n static int handle_cp_pragma PARAMS ((const char *));\n #ifdef HANDLE_GENERIC_PRAGMAS\n static int handle_generic_pragma PARAMS ((int));\n@@ -510,9 +510,9 @@ init_cpp_parse ()\n   return token_count;\n }\n \n-char *\n+const char *\n init_parse (filename)\n-     char *filename;\n+     const char *filename;\n {\n   extern int flag_no_gnu_keywords;\n   extern int flag_operator_names;\n@@ -1188,7 +1188,7 @@ interface_strcmp (s)\n \n static void\n cp_pragma_interface (main_filename)\n-     char *main_filename;\n+     const char *main_filename;\n {\n   tree fileinfo \n     = TIME_IDENTIFIER_FILEINFO (get_time_identifier (input_filename));\n@@ -1235,7 +1235,7 @@ cp_pragma_interface (main_filename)\n \n static void\n cp_pragma_implementation (main_filename)\n-     char *main_filename;\n+     const char *main_filename;\n {\n   struct impl_files *ifiles = impl_file_chain;\n   for (; ifiles; ifiles = ifiles->next)\n@@ -1514,7 +1514,7 @@ reinit_parse_for_method (yychar, decl)\n {\n   int len;\n   int starting_lineno = lineno;\n-  char *starting_filename = input_filename;\n+  const char *starting_filename = input_filename;\n \n   reinit_parse_for_block (yychar, &inline_text_obstack);\n \n@@ -1562,7 +1562,7 @@ reinit_parse_for_block (pyychar, obstackp)\n   register int c;\n   int blev = 1;\n   int starting_lineno = lineno;\n-  char *starting_filename = input_filename;\n+  const char *starting_filename = input_filename;\n   int len;\n   int look_for_semicolon = 0;\n   int look_for_lbrac = 0;\n@@ -1728,7 +1728,7 @@ reinit_parse_for_expr (obstackp)\n {\n   register int c;\n   int starting_lineno = lineno;\n-  char *starting_filename = input_filename;\n+  const char *starting_filename = input_filename;\n   int len;\n   int plev = 0;\n \n@@ -1868,7 +1868,7 @@ feed_defarg (f, p)\n      tree f, p;\n {\n   tree d = TREE_PURPOSE (p);\n-  char *file;\n+  const char *file;\n   int line;\n   if (TREE_CODE (f) == FUNCTION_DECL)\n     {\n@@ -2589,7 +2589,7 @@ handle_cp_pragma (pname)\n     }\n   else if (! strcmp (pname, \"interface\"))\n     {\n-      char *main_filename = input_filename;\n+      const char *main_filename = input_filename;\n \n       main_filename = file_name_nondirectory (main_filename);\n \n@@ -2616,7 +2616,7 @@ handle_cp_pragma (pname)\n     }\n   else if (! strcmp (pname, \"implementation\"))\n     {\n-      char *main_filename = main_input_filename ? main_input_filename : input_filename;\n+      const char *main_filename = main_input_filename ? main_input_filename : input_filename;\n \n       main_filename = file_name_nondirectory (main_filename);\n "}, {"sha": "3b3f7862fb42bc4efea991c3cf3c5ce8fd2a29a3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -51,9 +51,6 @@ typedef int (*tree_fn_t) PARAMS ((tree, void*));\n \n extern struct obstack permanent_obstack;\n \n-extern int lineno;\n-extern char *input_filename;\n-\n /* The PENDING_TEMPLATES is a TREE_LIST of templates whose\n    instantiations have been deferred, either because their definitions\n    were not yet available, or because we were putting off doing the\n@@ -4240,7 +4237,7 @@ print_template_context (err)\n {\n   struct tinst_level *p = current_tinst_level;\n   int line = lineno;\n-  char *file = input_filename;\n+  const char *file = input_filename;\n \n   if (err && p)\n     {\n@@ -4375,7 +4372,7 @@ tsubst_friend_function (decl, args)\n {\n   tree new_friend;\n   int line = lineno;\n-  char *file = input_filename;\n+  const char *file = input_filename;\n \n   lineno = DECL_SOURCE_LINE (decl);\n   input_filename = DECL_SOURCE_FILE (decl);\n@@ -5389,7 +5386,7 @@ tsubst_decl (t, args, type, in_decl)\n      tree in_decl;\n {\n   int saved_lineno;\n-  char* saved_filename;\n+  const char *saved_filename;\n   tree r = NULL_TREE;\n \n   /* Set the filename and linenumber to improve error-reporting.  */\n@@ -6454,7 +6451,7 @@ tsubst (t, args, complain, in_decl)\n \t    || (code == REFERENCE_TYPE && TREE_CODE (type) == VOID_TYPE))\n \t  {\n \t    static int   last_line = 0;\n-\t    static char* last_file = 0;\n+\t    static const char* last_file = 0;\n \n \t    /* We keep track of the last time we issued this error\n \t       message to avoid spewing a ton of messages during a\n@@ -9434,7 +9431,7 @@ instantiate_decl (d, defer_ok)\n   tree gen_tmpl;\n   int pattern_defined;\n   int line = lineno;\n-  char *file = input_filename;\n+  const char *file = input_filename;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */"}, {"sha": "afa9ff273c39f8f1e3ec9fa278c29dd8b7072478", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -2694,7 +2694,7 @@ expand_body (fn)\n      tree fn;\n {\n   int saved_lineno;\n-  char *saved_input_filename;\n+  const char *saved_input_filename;\n \n   /* When the parser calls us after finishing the body of a template\n      function, we don't really want to expand the body.  When we're"}, {"sha": "078558ebd96a3f0bd58bd375020ea5c6aacbd279", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -40,7 +40,7 @@ static int list_hash PARAMS ((tree, tree, tree));\n static tree list_hash_lookup PARAMS ((int, tree, tree, tree));\n static cp_lvalue_kind lvalue_p_1 PARAMS ((tree, int));\n static tree no_linkage_helper PARAMS ((tree *, int *, void *));\n-static tree build_srcloc PARAMS ((char *, int));\n+static tree build_srcloc PARAMS ((const char *, int));\n static void mark_list_hash PARAMS ((void *));\n static int statement_code_p PARAMS ((enum tree_code));\n static tree mark_local_for_remap_r PARAMS ((tree *, int *, void *));\n@@ -1989,7 +1989,7 @@ build_int_wrapper (i)\n \n static tree\n build_srcloc (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   tree t;"}, {"sha": "671a66659ee5355a06f63bb3342039c41557813c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -6638,7 +6638,7 @@ void\n c_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n      tree string, outputs, inputs, clobbers;\n      int vol;\n-     char *filename;\n+     const char *filename;\n      int line;\n {\n   int noutputs = list_length (outputs);"}, {"sha": "c9a9d4fab9ebb135fd9293a2de38b8b553d94d18", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -5690,7 +5690,7 @@ dwarfout_undef (lineno, buffer)\n void\n dwarfout_init (asm_out_file, main_input_filename)\n      register FILE *asm_out_file;\n-     register char *main_input_filename;\n+     register const char *main_input_filename;\n {\n   /* Remember the name of the primary input file.  */\n "}, {"sha": "e0b9e2c74702c73ec6b15ccbb551e6ca36ebde38", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -18,8 +18,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarfout_init \t\tPARAMS ((FILE *asm_out_file, \n-\t\t\t\t\t\tchar *main_input_filename));\n+extern void dwarfout_init \t\tPARAMS ((FILE *, const char *));\n extern void dwarfout_finish\t\tPARAMS ((void));\n \n extern void dwarfout_define\t\tPARAMS ((unsigned, const char *));"}, {"sha": "5dace5b12f031bc8284a9a7b2e455459a6c57354", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -6077,7 +6077,7 @@ expand_expr (exp, target, tmode, modifier)\n     case EXPR_WITH_FILE_LOCATION:\n       {\n \trtx to_return;\n-\tchar *saved_input_filename = input_filename;\n+\tconst char *saved_input_filename = input_filename;\n \tint saved_lineno = lineno;\n \tinput_filename = EXPR_WFL_FILENAME (exp);\n \tlineno = EXPR_WFL_LINENO (exp);"}, {"sha": "c33a7904e3aa6db0bc53d7cf255469e1f46cc241", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,3 +1,21 @@\n+2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* com.c (ffecom_subscript_check_): Constify array_name\n+\tparameter. Clean up string bashing.\n+\t(ffecom_arrayref_, ffecom_char_args_x_): Constify array_name\n+\tparameter.\n+\t(ffecom_do_entry_, ffecom_gen_sfuncdef_, ffecom_start_progunit_,\n+\tffecom_sym_transform_, ffecom_sym_transform_assign_): Constify\n+\tlocal char *.\n+\t(init_parse): Constify parameter and return value.\n+\t* lex.c: Include dwarfout.h instead of prototyping dwarfout_*\n+\tfunctions here.\n+\t(ffelex_file_pop_, ffelex_file_push_): Constify filename parameter.\n+\t(ffelex_hash_, ffelex_include_): Constify local char *.\n+\t* std.c (ffestd_exec_end): Constify local char *.\n+\t* where.c (ffewhere_file_new): Constify filename parameter.\n+\t* where.h: Update prototypes.\n+\n 2000-05-06  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* com.c (ffecom_overlap_): Set source_offset to"}, {"sha": "c533330f215fd5a5310c0327f7c59fca0c506e96", "filename": "gcc/f/com.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -712,7 +712,7 @@ static tree shadowed_labels;\n \n static tree\n ffecom_subscript_check_ (tree array, tree element, int dim, int total_dims,\n-\t\t\t char *array_name)\n+\t\t\t const char *array_name)\n {\n   tree low = TYPE_MIN_VALUE (TYPE_DOMAIN (array));\n   tree high = TYPE_MAX_VALUE (TYPE_DOMAIN (array));\n@@ -762,31 +762,30 @@ ffecom_subscript_check_ (tree array, tree element, int dim, int total_dims,\n       {\n       case 0:\n \tvar = xmalloc (strlen (array_name) + 20);\n-\tsprintf (&var[0], \"%s[%s-substring]\",\n+\tsprintf (var, \"%s[%s-substring]\",\n \t\t array_name,\n \t\t dim ? \"end\" : \"start\");\n \tlen = strlen (var) + 1;\n+\targ1 = build_string (len, var);\n+\tfree (var);\n \tbreak;\n \n       case 1:\n \tlen = strlen (array_name) + 1;\n-\tvar = array_name;\n+\targ1 = build_string (len, array_name);\n \tbreak;\n \n       default:\n \tvar = xmalloc (strlen (array_name) + 40);\n-\tsprintf (&var[0], \"%s[subscript-%d-of-%d]\",\n+\tsprintf (var, \"%s[subscript-%d-of-%d]\",\n \t\t array_name,\n \t\t dim + 1, total_dims);\n \tlen = strlen (var) + 1;\n+\targ1 = build_string (len, var);\n+\tfree (var);\n \tbreak;\n       }\n \n-    arg1 = build_string (len, var);\n-\n-    if (total_dims != 1)\n-      free (var);\n-\n     TREE_TYPE (arg1)\n       = build_type_variant (build_array_type (char_type_node,\n \t\t\t\t\t      build_range_type\n@@ -877,7 +876,7 @@ ffecom_arrayref_ (tree item, ffebld expr, int want_ptr)\n   tree element;\n   tree tree_type;\n   tree tree_type_x;\n-  char *array_name;\n+  const char *array_name;\n   ffetype type;\n   ffebld list;\n \n@@ -2072,7 +2071,7 @@ ffecom_char_args_x_ (tree *xitem, tree *length, ffebld expr, bool with_null)\n \tffebld thing = ffebld_right (expr);\n \ttree start_tree;\n \ttree end_tree;\n-\tchar *char_name;\n+\tconst char *char_name;\n \tffebld left_symter;\n \ttree array;\n \n@@ -2678,7 +2677,7 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n   bool altreturning = FALSE;\t/* This entry point has alternate returns. */\n   int yes;\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n \n   input_filename = ffesymbol_where_filename (fn);\n   lineno = ffesymbol_where_filelinenum (fn);\n@@ -6262,7 +6261,7 @@ ffecom_gen_sfuncdef_ (ffesymbol s, ffeinfoBasictype bt, ffeinfoKindtype kt)\n   static bool recurse = FALSE;\n   int yes;\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n \n   ffecom_nested_entry_ = s;\n \n@@ -7292,7 +7291,7 @@ ffecom_start_progunit_ ()\n   && (ffecom_master_bt_ == FFEINFO_basictypeNONE);\n   bool main_program = FALSE;\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n   int yes;\n \n   assert (fn != NULL);\n@@ -7528,7 +7527,7 @@ ffecom_sym_transform_ (ffesymbol s)\n   ffeglobal g;\n   int yes;\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n \n   /* Must ensure special ASSIGN variables are declared at top of outermost\n      block, else they'll end up in the innermost block when their first\n@@ -8575,7 +8574,7 @@ ffecom_sym_transform_assign_ (ffesymbol s)\n   tree t;\t\t\t/* Transformed thingy. */\n   int yes;\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n \n   if (ffesymbol_sfdummyparent (s) == NULL)\n     {\n@@ -14770,9 +14769,9 @@ init_decl_processing ()\n   ffe_init_0 ();\n }\n \n-char *\n+const char *\n init_parse (filename)\n-     char *filename;\n+     const char *filename;\n {\n   /* Open input file.  */\n   if (filename == 0 || !strcmp (filename, \"-\"))"}, {"sha": "037063745e167564ccabf413d62186d6a459a0b0", "filename": "gcc/f/lex.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -36,11 +36,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n \n #ifdef DWARF_DEBUGGING_INFO\n-void dwarfout_resume_previous_source_file (register unsigned);\n-void dwarfout_start_new_source_file (register char *);\n-void dwarfout_define (register unsigned, register char *);\n-void dwarfout_undef (register unsigned, register char *);\n-#endif DWARF_DEBUGGING_INFO\n+#include \"dwarfout.h\"\n+#endif\n \n static void ffelex_append_to_token_ (char c);\n static int ffelex_backslash_ (int c, ffewhereColumnNumber col);\n@@ -856,7 +853,7 @@ ffelex_cfelex_ (ffelexToken *xtoken, FILE *finput, int c)\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static void\n-ffelex_file_pop_ (char *input_filename)\n+ffelex_file_pop_ (const char *input_filename)\n {\n   if (input_file_stack->next)\n     {\n@@ -882,7 +879,7 @@ ffelex_file_pop_ (char *input_filename)\n #endif\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static void\n-ffelex_file_push_ (int old_lineno, char *input_filename)\n+ffelex_file_push_ (int old_lineno, const char *input_filename)\n {\n   struct file_stack *p\n     = (struct file_stack *) xmalloc (sizeof (struct file_stack));\n@@ -1282,7 +1279,7 @@ ffelex_hash_ (FILE *finput)\n       && (ffelex_token_type (token) == FFELEX_typeNUMBER))\n     {\n       int old_lineno = lineno;\n-      char *old_input_filename = input_filename;\n+      const char *old_input_filename = input_filename;\n       ffewhereFile wf;\n \n       /* subtract one, because it is the following line that\n@@ -1554,7 +1551,7 @@ ffelex_include_ ()\n     = ffewhere_line_filelinenum (current_wl);\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n #endif\n \n   if (card_length != 0)"}, {"sha": "8610b9c01daf1da1c54dbcd8eeae959389bf7628", "filename": "gcc/f/std.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1500,7 +1500,7 @@ ffestd_exec_end ()\n {\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n   int old_lineno = lineno;\n-  char *old_input_filename = input_filename;\n+  const char *old_input_filename = input_filename;\n #endif\n \n   ffecom_end_transition ();"}, {"sha": "0fafa751b8c188b7b3b932b5629c5232773cf1a7", "filename": "gcc/f/where.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fwhere.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fwhere.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fwhere.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -161,7 +161,7 @@ ffewhere_file_kill (ffewhereFile wf)\n /* Create file object.  */\n \n ffewhereFile\n-ffewhere_file_new (char *name, size_t length)\n+ffewhere_file_new (const char *name, size_t length)\n {\n   ffewhereFile wf;\n   int filepos;"}, {"sha": "efda13a85cef2ffd12e4380a0a17ffca1ca6614e", "filename": "gcc/f/where.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fwhere.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ff%2Fwhere.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fwhere.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -89,7 +89,7 @@ extern struct _ffewhere_line_ ffewhere_unknown_line_;\n /* Declare functions with prototypes. */\n \n void ffewhere_file_kill (ffewhereFile wf);\n-ffewhereFile ffewhere_file_new (char *name, size_t length);\n+ffewhereFile ffewhere_file_new (const char *name, size_t length);\n void ffewhere_file_set (ffewhereFile wf, bool have_num, ffewhereLineNumber ln);\n void ffewhere_init_1 (void);\n char *ffewhere_line_content (ffewhereLine l);"}, {"sha": "9ca120c202004ee1d97c2ff12c39ae4aa5e59dd3", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -20,7 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Name of the input .c file being compiled.  */\n-extern char *main_input_filename;\n+extern const char *main_input_filename;\n \n enum debug_info_type\n {"}, {"sha": "9fd40cc237918afeca9f79db2cded9f673e2219a", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -6391,7 +6391,7 @@ use_return_register ()\n \n void\n expand_function_end (filename, line, end_bindings)\n-     char *filename;\n+     const char *filename;\n      int line;\n      int end_bindings;\n {"}, {"sha": "270e4ed574297ff33ade8b966be10036edd6ec85", "filename": "gcc/gcc.c", "status": "modified", "additions": 55, "deletions": 57, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -146,11 +146,11 @@ static int save_temps_flag;\n \n /* The compiler version.  */\n \n-static char *compiler_version;\n+static const char *compiler_version;\n \n /* The target version specified with -V */\n \n-static char *spec_version = DEFAULT_TARGET_VERSION;\n+static const char *spec_version = DEFAULT_TARGET_VERSION;\n \n /* The target machine specified with -b.  */\n \n@@ -160,9 +160,9 @@ static const char *spec_machine = DEFAULT_TARGET_MACHINE;\n    When -b is used, the value comes from the `specs' file.  */\n \n #ifdef CROSS_COMPILE\n-static char *cross_compile = \"1\";\n+static const char *cross_compile = \"1\";\n #else\n-static char *cross_compile = \"0\";\n+static const char *cross_compile = \"0\";\n #endif\n \n /* The number of errors that have occurred; the link phase will not be\n@@ -493,29 +493,29 @@ proper position among the other output files.  */\n #define LINKER_NAME \"collect2\"\n #endif\n \n-static char *cpp_spec = CPP_SPEC;\n-static char *cpp_predefines = CPP_PREDEFINES;\n-static char *cc1_spec = CC1_SPEC;\n-static char *cc1plus_spec = CC1PLUS_SPEC;\n-static char *signed_char_spec = SIGNED_CHAR_SPEC;\n-static char *asm_spec = ASM_SPEC;\n-static char *asm_final_spec = ASM_FINAL_SPEC;\n-static char *link_spec = LINK_SPEC;\n-static char *lib_spec = LIB_SPEC;\n-static char *libgcc_spec = LIBGCC_SPEC;\n-static char *endfile_spec = ENDFILE_SPEC;\n-static char *startfile_spec = STARTFILE_SPEC;\n-static char *switches_need_spaces = SWITCHES_NEED_SPACES;\n-static char *linker_name_spec = LINKER_NAME;\n+static const char *cpp_spec = CPP_SPEC;\n+static const char *cpp_predefines = CPP_PREDEFINES;\n+static const char *cc1_spec = CC1_SPEC;\n+static const char *cc1plus_spec = CC1PLUS_SPEC;\n+static const char *signed_char_spec = SIGNED_CHAR_SPEC;\n+static const char *asm_spec = ASM_SPEC;\n+static const char *asm_final_spec = ASM_FINAL_SPEC;\n+static const char *link_spec = LINK_SPEC;\n+static const char *lib_spec = LIB_SPEC;\n+static const char *libgcc_spec = LIBGCC_SPEC;\n+static const char *endfile_spec = ENDFILE_SPEC;\n+static const char *startfile_spec = STARTFILE_SPEC;\n+static const char *switches_need_spaces = SWITCHES_NEED_SPACES;\n+static const char *linker_name_spec = LINKER_NAME;\n \n /* Some compilers have limits on line lengths, and the multilib_select\n    and/or multilib_matches strings can be very long, so we build them at\n    run time.  */\n static struct obstack multilib_obstack;\n-static char *multilib_select;\n-static char *multilib_matches;\n-static char *multilib_defaults;\n-static char *multilib_exclusions;\n+static const char *multilib_select;\n+static const char *multilib_matches;\n+static const char *multilib_defaults;\n+static const char *multilib_exclusions;\n #include \"multilib.h\"\n \n /* Check whether a particular argument is a default argument.  */\n@@ -1119,12 +1119,12 @@ struct spec_list\n {\n \t\t\t\t/* The following 2 fields must be first */\n \t\t\t\t/* to allow EXTRA_SPECS to be initialized */\n-  char *name;\t\t\t/* name of the spec.  */\n-  char *ptr;\t\t\t/* available ptr if no static pointer */\n+  const char *name;\t\t/* name of the spec.  */\n+  const char *ptr;\t\t/* available ptr if no static pointer */\n \n \t\t\t\t/* The following fields are not initialized */\n \t\t\t\t/* by EXTRA_SPECS */\n-  char **ptr_spec;\t\t/* pointer to the spec itself.  */\n+  const char **ptr_spec;\t/* pointer to the spec itself.  */\n   struct spec_list *next;\t/* Next spec in linked list.  */\n   int name_len;\t\t\t/* length of the name */\n   int alloc_p;\t\t\t/* whether string was allocated */\n@@ -1164,8 +1164,8 @@ static struct spec_list static_specs[] =\n    That is all that the EXTRA_SPECS macro gives us.  */\n struct spec_list_1\n {\n-  char *name;\n-  char *ptr;\n+  const char *name;\n+  const char *ptr;\n };\n \n static struct spec_list_1 extra_specs_1[] = { EXTRA_SPECS };\n@@ -1230,7 +1230,7 @@ set_spec (name, spec)\n      const char *spec;\n {\n   struct spec_list *sl;\n-  char *old_spec;\n+  const char *old_spec;\n   int name_len = strlen (name);\n   int i;\n \n@@ -1278,7 +1278,7 @@ set_spec (name, spec)\n \n   /* Free the old spec.  */\n   if (old_spec && sl->alloc_p)\n-    free (old_spec);\n+    free ((PTR) old_spec);\n \n   sl->alloc_p = 1;\n }\n@@ -1413,7 +1413,7 @@ static const char *tooldir_prefix;\n #ifndef STANDARD_BINDIR_PREFIX\n #define STANDARD_BINDIR_PREFIX \"/usr/local/bin\"\n #endif\n-static char *standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n+static const char *standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n \n /* Subdirectory to use for locating libraries.  Set by\n    set_multilib_dir based on the compilation options.  */\n@@ -1657,7 +1657,7 @@ read_specs (filename, main_p)\n \n \t      set_spec (p2, *(sl->ptr_spec));\n \t      if (sl->alloc_p)\n-\t\tfree (*(sl->ptr_spec));\n+\t\tfree ((PTR) *(sl->ptr_spec));\n \n \t      *(sl->ptr_spec) = \"\";\n \t      sl->alloc_p = 0;\n@@ -4291,7 +4291,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    {\n \t      char *x = (char *) alloca (strlen (cpp_predefines) + 1);\n \t      char *buf = x;\n-\t      char *y;\n+\t      const char *y;\n \n \t      /* Copy all of the -D options in CPP_PREDEFINES into BUF.  */\n \t      y = cpp_predefines;\n@@ -4321,7 +4321,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    {\n \t      char *x = (char *) alloca (strlen (cpp_predefines) * 4 + 1);\n \t      char *buf = x;\n-\t      char *y;\n+\t      const char *y;\n \n \t      /* Copy all of CPP_PREDEFINES into BUF,\n \t\t but force them all into the reserved name space if they\n@@ -4567,8 +4567,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  case 'v':\n \t    {\n \t      int c1 = *p++;  /* Select first or second version number.  */\n-\t      char *v = compiler_version;\n-\t      char *q;\n+\t      const char *v = compiler_version;\n+\t      const char *q;\n \t      static const char zeroc = '0';\n \n \t      /* The format of the version string is\n@@ -5172,7 +5172,7 @@ main (argc, argv)\n   /* Build multilib_select, et. al from the separate lines that make up each\n      multilib selection.  */\n   {\n-    char **q = multilib_raw;\n+    const char *const *q = multilib_raw;\n     int need_space;\n \n     obstack_init (&multilib_obstack);\n@@ -5948,8 +5948,8 @@ used_arg (p, len)\n {\n   struct mswitchstr\n   {\n-    char *str;\n-    char *replace;\n+    const char *str;\n+    const char *replace;\n     int len;\n     int rep_len;\n   };\n@@ -5961,7 +5961,7 @@ used_arg (p, len)\n   if (!mswitches)\n     {\n       struct mswitchstr *matches;\n-      char *q;\n+      const char *q;\n       int cnt = 0;\n \n       /* Break multilib_matches into the component strings of string and replacement\n@@ -5982,7 +5982,6 @@ used_arg (p, len)\n \t\tabort ();\n \t      q++;\n \t    }\n-\t  *q = '\\0';\n \t  matches[i].len = q - matches[i].str;\n \n \t  matches[i].replace = ++q;\n@@ -5994,9 +5993,7 @@ used_arg (p, len)\n \t    }\n \t  matches[i].rep_len = q - matches[i].replace;\n \t  i++;\n-\t  if (*q == ';')\n-\t    *q++ = '\\0';\n-\t  else\n+\t  if (*q != ';')\n \t    break;\n \t}\n \n@@ -6011,7 +6008,8 @@ used_arg (p, len)\n \t{\n \t  int xlen = strlen (switches[i].part1);\n \t  for (j = 0; j < cnt; j++)\n-\t    if (xlen == matches[j].len && ! strcmp (switches[i].part1, matches[j].str))\n+\t    if (xlen == matches[j].len\n+\t\t&& ! strncmp (switches[i].part1, matches[j].str, xlen))\n \t      {\n \t\tmswitches[n_mswitches].str = matches[j].replace;\n \t\tmswitches[n_mswitches].len = matches[j].rep_len;\n@@ -6035,7 +6033,7 @@ default_arg (p, len)\n      const char *p;\n      int len;\n {\n-  char *start, *end;\n+  const char *start, *end;\n \n   for (start = multilib_defaults; *start != '\\0'; start = end+1)\n     {\n@@ -6072,9 +6070,9 @@ default_arg (p, len)\n static void\n set_multilib_dir ()\n {\n-  char *p;\n+  const char *p;\n   unsigned int this_path_len;\n-  char *this_path, *this_arg;\n+  const char *this_path, *this_arg;\n   int not_arg;\n   int ok;\n \n@@ -6229,8 +6227,8 @@ set_multilib_dir ()\n static void\n print_multilib_info ()\n {\n-  char *p = multilib_select;\n-  char *last_path = 0, *this_path;\n+  const char *p = multilib_select;\n+  const char *last_path = 0, *this_path;\n   int skip;\n   unsigned int last_path_len = 0;\n \n@@ -6257,8 +6255,8 @@ print_multilib_info ()\n          with the '!' in either list. If any of the exclusion rules match\n          all of its options with the select rule, we skip it.  */\n         {\n-          char *e = multilib_exclusions;\n-\t  char *this_arg;\n+          const char *e = multilib_exclusions;\n+\t  const char *this_arg;\n \n \t  while (*e != '\\0')\n \t    {\n@@ -6273,7 +6271,7 @@ print_multilib_info ()\n \t      /* Check the arguments.  */\n \t      while (*e != ';')\n \t        {\n-\t\t  char *q;\n+\t\t  const char *q;\n \t\t  int mp = 0;\n \n \t          if (*e == '\\0')\n@@ -6297,7 +6295,7 @@ print_multilib_info ()\n   \t\t  q = p + 1;\n \t\t  while (*q != ';')\n \t\t    {\n-\t\t      char *arg;\n+\t\t      const char *arg;\n \t\t      int len = e - this_arg;\n \n \t\t      if (*q == '\\0')\n@@ -6356,12 +6354,12 @@ print_multilib_info ()\n \t this one which does not require that default argument.  */\n       if (! skip)\n \t{\n-\t  char *q;\n+\t  const char *q;\n \n \t  q = p + 1;\n \t  while (*q != ';')\n \t    {\n-\t      char *arg;\n+\t      const char *arg;\n \n \t      if (*q == '\\0')\n \t\tabort ();\n@@ -6392,7 +6390,7 @@ print_multilib_info ()\n \n       if (! skip)\n \t{\n-\t  char *p1;\n+\t  const char *p1;\n \n \t  for (p1 = last_path; p1 < p; p1++)\n \t    putchar (*p1);\n@@ -6437,7 +6435,7 @@ print_multilib_info ()\n \t  if (multilib_extra && *multilib_extra)\n \t    {\n \t      int print_at = TRUE;\n-\t      char *q;\n+\t      const char *q;\n \n \t      for (q = multilib_extra; *q != '\\0'; q++)\n \t\t{"}, {"sha": "4ff64bb2809339b309f60eebe479e4d80ddf4cd4", "filename": "gcc/genmultilib", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -107,7 +107,7 @@ exceptions=$4\n extra=$5\n exclusions=$6\n \n-echo \"static char *multilib_raw[] = {\"\n+echo \"static const char *const multilib_raw[] = {\"\n \n # What we want to do is select all combinations of the sets in\n # options.  Each combination which includes a set of mutually\n@@ -285,7 +285,7 @@ echo \"};\"\n # Note, the format of the matches is reversed compared\n # to what we want, so switch them around.\n echo \"\"\n-echo \"static char *multilib_matches_raw[] = {\"\n+echo \"static const char *const multilib_matches_raw[] = {\"\n for match in ${matches}; do\n   l=`echo ${match} | sed -e 's/=.*$//' -e 's/?/=/g'`\n   r=`echo ${match} | sed -e 's/^.*=//' -e 's/?/=/g'`\n@@ -301,11 +301,11 @@ echo \"};\"\n \n # Output the default options now\n echo \"\"\n-echo \"static char *multilib_extra = \\\"${extra}\\\";\"\n+echo \"static const char *multilib_extra = \\\"${extra}\\\";\"\n \n # Output the exclusion rules now\n echo \"\"\n-echo \"static char *multilib_exclusions_raw[] = {\"\n+echo \"static const char *const multilib_exclusions_raw[] = {\"\n for rule in ${exclusions}; do\n   s=`echo ${rule} | sed -e 's,/, ,g'`\n   echo \"\\\"${s};\\\",\""}, {"sha": "5d8bb593589f13bad9683e979f74d082e9743b85", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -2281,10 +2281,11 @@ make_insn_sequence (insn, type)\n   struct decision *last;\n   struct decision_test *test, **place;\n   struct decision_head head;\n-  char *c_test_pos = \"\";\n+  char c_test_pos[2];\n \n   record_insn_name (next_insn_code, (type == RECOG ? XSTR (insn, 0) : NULL));\n \n+  c_test_pos[0] = '\\0';\n   if (type == PEEPHOLE2)\n     {\n       int i, j;\n@@ -2307,7 +2308,6 @@ make_insn_sequence (insn, type)\n \t}\n       XVECLEN (x, 0) = j;\n \n-      c_test_pos = alloca (2);\n       c_test_pos[0] = 'A' + j - 1;\n       c_test_pos[1] = '\\0';\n     }\n@@ -2473,8 +2473,6 @@ main (argc, argv)\n {\n   rtx desc;\n   struct decision_head recog_tree, split_tree, peephole2_tree, h;\n-  FILE *infile;\n-  register int c;\n \n   progname = \"genrecog\";\n "}, {"sha": "32d49b9ae8e9b37a07555a6e6df56498e687553c", "filename": "gcc/input.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -20,10 +20,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Source file current line is coming from.  */\n-extern char *input_filename;\n+extern const char *input_filename;\n \n /* Top-level source file.  */\n-extern char *main_input_filename;\n+extern const char *main_input_filename;\n \n /* Line number in current source file.  */\n extern int lineno;\n@@ -33,7 +33,7 @@ extern FILE *finput;\n \n struct file_stack\n   {\n-    char *name;\n+    const char *name;\n     struct file_stack *next;\n     int line;\n     int indent_level;\n@@ -46,5 +46,5 @@ extern struct file_stack *input_file_stack;\n /* Incremented on each change to input_file_stack.  */\n extern int input_file_stack_tick;\n \n-extern void push_srcloc PARAMS ((char *name, int line));\n+extern void push_srcloc PARAMS ((const char *name, int line));\n extern void pop_srcloc PARAMS ((void));"}, {"sha": "2f7aff924a0920ebc66bda0760f7e0bd387021e8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,3 +1,26 @@\n+2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* check_init.c (check_init): Constify local char *.\n+\t* class.c (push_class): Constify local char *.\n+\t* java_tree.h: Update prototypes.\n+\t* jcf-io.c (open_class): Constify filename parameter and\n+\treturn value.\n+\t(find_class): Remove redundant string copy.  Cast return from\n+\topen_class.\n+\t* jcf-parse.c (read_class, parse_class_file, yyparse):\n+\tConstify local char *.\n+\t* jcf-write.c (generate_bytecode_insns, generate_classfile):\n+\tConstify local char *.\n+\t* jcf.h (JCF): Constify filename and classname.\n+\t(JCF_FINISH): Cast args to FREE to char * when appropriate.\n+\t* lang.c (init_parse): Constify parameter and return value.\n+\t* lex.c (java_get_line_col): Constify filename parameter.\n+\t* parse.h: Constify parser_ctxt.filename.  Update prototypes.\n+\t* parse.y (java_parser_context_suspend,\n+\tissue_warning_error_from_context, safe_layout_class): Constify\n+\tlocal char *.\n+\t* parse.c: Regenerate.\n+\n 2000-05-08  Tom Tromey  <tromey@cygnus.com>\n \n \t* expr.c (build_jni_stub): Cache the result of"}, {"sha": "24be236568af70921fcb250872258f2ab267d67f", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -711,7 +711,7 @@ check_init (exp, before)\n \n     case EXPR_WITH_FILE_LOCATION:\n       {\n-\tchar *saved_input_filename = input_filename;\n+\tconst char *saved_input_filename = input_filename;\n \ttree saved_wfl = wfl;\n \ttree body = EXPR_WFL_NODE (exp);\n \tint saved_lineno = lineno;"}, {"sha": "21232e7f2d2e41234534814232b3245a77f5067f", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -320,7 +320,7 @@ push_class (class_type, class_name)\n      tree class_type, class_name;\n {\n   tree decl, signature;\n-  char *save_input_filename = input_filename;\n+  const char *save_input_filename = input_filename;\n   int save_lineno = lineno;\n   tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n   push_obstacks (&permanent_obstack, &permanent_obstack);"}, {"sha": "e0b594ec25588a3433d587b165bdfe3ca99371ab", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -758,9 +758,11 @@ extern void jcf_print_char PARAMS ((FILE *, int));\n extern void jcf_print_utf8_replace PARAMS ((FILE *, const unsigned char *,\n \t\t\t\t\t   int, int, int));\n # if JCF_USE_STDIO\n-extern char* open_class PARAMS ((char *, struct JCF *, FILE *, const char *));\n+extern const char* open_class PARAMS ((const char *, struct JCF *,\n+\t\t\t\t       FILE *, const char *));\n # else\n-extern char* open_class PARAMS ((char *, struct JCF *, int, const char *));\n+extern const char* open_class PARAMS ((const char *, struct JCF *,\n+\t\t\t\t       int, const char *));\n # endif /* JCF_USE_STDIO */\n #endif\n void java_debug_context PARAMS ((void));"}, {"sha": "b4f4e2eecd4195859fcf9a8021af075de68e07c8", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -183,9 +183,10 @@ DEFUN(open_in_zip, (jcf, zipfile, zipmember, is_system),\n }\n \n #if JCF_USE_STDIO\n-char*\n+const char *\n DEFUN(open_class, (filename, jcf, stream, dep_name),\n-      char *filename AND JCF *jcf AND FILE* stream AND const char *dep_name)\n+      const char *filename AND JCF *jcf AND FILE* stream\n+      AND const char *dep_name)\n {\n   if (jcf)\n     {\n@@ -204,9 +205,9 @@ DEFUN(open_class, (filename, jcf, stream, dep_name),\n   return filename;\n }\n #else\n-char*\n+const char *\n DEFUN(open_class, (filename, jcf, fd, dep_name),\n-      char *filename AND JCF *jcf AND int fd AND const char *dep_name)\n+      const char *filename AND JCF *jcf AND int fd AND const char *dep_name)\n {\n   if (jcf)\n     {\n@@ -441,9 +442,7 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n       close (fd);\t\t/* We use STDIO for source file */\n     }\n   else\n-    buffer = open_class (buffer, jcf, fd, dep_file);\n-  jcf->classname = (char *) ALLOC (classname_length + 1);\n-  strncpy (jcf->classname, classname, classname_length + 1);\n+    buffer = (char *) open_class (buffer, jcf, fd, dep_file);\n   jcf->classname = xstrdup (classname);\n   return buffer;\n #endif"}, {"sha": "cd0f283f81debe8aa9a848b99f80da1ac2d31493", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -481,7 +481,7 @@ read_class (name)\n {\n   JCF this_jcf, *jcf;\n   tree save_current_class = current_class;\n-  char *save_input_filename = input_filename;\n+  const char *save_input_filename = input_filename;\n   JCF *save_current_jcf = current_jcf;\n   long saved_pos = 0;\n   if (current_jcf->read_state)\n@@ -665,7 +665,7 @@ static void\n parse_class_file ()\n {\n   tree method;\n-  char *save_input_filename = input_filename;\n+  const char *save_input_filename = input_filename;\n   int save_lineno = lineno;\n \n   java_layout_seen_class_methods ();\n@@ -841,7 +841,7 @@ yyparse ()\n \n \t  if (twice)\n \t    {\n-\t      char *saved_input_filename = input_filename;\n+\t      const char *saved_input_filename = input_filename;\n \t      input_filename = value;\n \t      warning (\"source file seen twice on command line and will be compiled only once.\");\n \t      input_filename = saved_input_filename;"}, {"sha": "3b93e511c8dc8a75326b3db09623332c35918e4c", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1479,7 +1479,7 @@ generate_bytecode_insns (exp, target, state)\n       break;\n     case EXPR_WITH_FILE_LOCATION:\n       {\n-\tchar *saved_input_filename = input_filename;\n+\tconst char *saved_input_filename = input_filename;\n \ttree body = EXPR_WFL_NODE (exp);\n \tint saved_lineno = lineno;\n \tif (body == empty_stmt_node)\n@@ -2796,7 +2796,7 @@ generate_classfile (clas, state)\n      struct jcf_partial *state;\n {\n   struct chunk *cpool_chunk;\n-  char *source_file;\n+  const char *source_file, *s;\n   char *ptr;\n   int i;\n   char *fields_count_ptr;\n@@ -3064,13 +3064,13 @@ generate_classfile (clas, state)\n   ptr = methods_count_ptr;  UNSAFE_PUT2 (methods_count);\n \n   source_file = DECL_SOURCE_FILE (TYPE_NAME (clas));\n-  for (ptr = source_file;  ;  ptr++)\n+  for (s = source_file; ; s++)\n     {\n       char ch = *ptr;\n       if (ch == '\\0')\n \tbreak;\n       if (ch == '/' || ch == '\\\\')\n-\tsource_file = ptr+1;\n+\tsource_file = s+1;\n     }\n   ptr = append_chunk (NULL, 10, state);\n "}, {"sha": "0fe48142c7526f2db288c844326e209a341af90b", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -95,8 +95,8 @@ typedef struct JCF {\n   long zip_offset;    \n   jcf_filbuf_t filbuf;\n   void *read_state;\n-  char *filename;\n-  char *classname;\n+  const char *filename;\n+  const char *classname;\n   void *zipd;\t\t\t/* Directory entry where it was found */\n   JCF_u2 access_flags, this_class, super_class;\n   CPool cpool;\n@@ -144,8 +144,8 @@ typedef struct JCF {\n #define JCF_FINISH(JCF) { \\\n   CPOOL_FINISH(&(JCF)->cpool); \\\n   if ((JCF)->buffer) FREE ((JCF)->buffer); \\\n-  if ((JCF)->filename) FREE ((JCF)->filename); \\\n-  if ((JCF)->classname) FREE ((JCF)->classname); }\n+  if ((JCF)->filename) FREE ((char *) (JCF)->filename); \\\n+  if ((JCF)->classname) FREE ((char *) (JCF)->classname); }\n   \n #define CPOOL_INIT(CPOOL) \\\n   ((CPOOL)->capacity = 0, (CPOOL)->count = 0, (CPOOL)->tags = 0, (CPOOL)->data = 0)"}, {"sha": "4bef553a95a67d1214022e945984731598366ebb", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -303,9 +303,9 @@ lang_decode_option (argc, argv)\n }\n \n FILE *finput;\n-char *\n+const char *\n init_parse (filename)\n-     char *filename;\n+     const char *filename;\n {\n   /* Open input file.  */\n "}, {"sha": "c1d4c03c8d77add45245d4eceec23b97ad77bc19", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1363,7 +1363,7 @@ java_is_eol (fp, c)\n \n char *\n java_get_line_col (filename, line, col)\n-     char *filename ATTRIBUTE_UNUSED;\n+     const char *filename ATTRIBUTE_UNUSED;\n      int line ATTRIBUTE_UNUSED, col ATTRIBUTE_UNUSED;\n {\n #ifdef JC1_LITE"}, {"sha": "fc7a1533712f971c3988d8ed5cc6deb9d3a2803d", "filename": "gcc/java/parse.c", "status": "modified", "additions": 232, "deletions": 166, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,7 +1,6 @@\n \n /*  A Bison parser, made from ./parse.y\n- by  GNU Bison version 1.25\n-  */\n+    by GNU Bison version 1.28  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -12,113 +11,113 @@\n #define yychar java_char\n #define yydebug java_debug\n #define yynerrs java_nerrs\n-#define\tPLUS_TK\t258\n-#define\tMINUS_TK\t259\n-#define\tMULT_TK\t260\n-#define\tDIV_TK\t261\n-#define\tREM_TK\t262\n-#define\tLS_TK\t263\n-#define\tSRS_TK\t264\n-#define\tZRS_TK\t265\n-#define\tAND_TK\t266\n-#define\tXOR_TK\t267\n-#define\tOR_TK\t268\n-#define\tBOOL_AND_TK\t269\n-#define\tBOOL_OR_TK\t270\n-#define\tEQ_TK\t271\n-#define\tNEQ_TK\t272\n-#define\tGT_TK\t273\n-#define\tGTE_TK\t274\n-#define\tLT_TK\t275\n-#define\tLTE_TK\t276\n-#define\tPLUS_ASSIGN_TK\t277\n-#define\tMINUS_ASSIGN_TK\t278\n-#define\tMULT_ASSIGN_TK\t279\n-#define\tDIV_ASSIGN_TK\t280\n-#define\tREM_ASSIGN_TK\t281\n-#define\tLS_ASSIGN_TK\t282\n-#define\tSRS_ASSIGN_TK\t283\n-#define\tZRS_ASSIGN_TK\t284\n-#define\tAND_ASSIGN_TK\t285\n-#define\tXOR_ASSIGN_TK\t286\n-#define\tOR_ASSIGN_TK\t287\n-#define\tPUBLIC_TK\t288\n-#define\tPRIVATE_TK\t289\n-#define\tPROTECTED_TK\t290\n-#define\tSTATIC_TK\t291\n-#define\tFINAL_TK\t292\n-#define\tSYNCHRONIZED_TK\t293\n-#define\tVOLATILE_TK\t294\n-#define\tTRANSIENT_TK\t295\n-#define\tNATIVE_TK\t296\n-#define\tPAD_TK\t297\n-#define\tABSTRACT_TK\t298\n-#define\tMODIFIER_TK\t299\n-#define\tDECR_TK\t300\n-#define\tINCR_TK\t301\n-#define\tDEFAULT_TK\t302\n-#define\tIF_TK\t303\n-#define\tTHROW_TK\t304\n-#define\tBOOLEAN_TK\t305\n-#define\tDO_TK\t306\n-#define\tIMPLEMENTS_TK\t307\n-#define\tTHROWS_TK\t308\n-#define\tBREAK_TK\t309\n-#define\tIMPORT_TK\t310\n-#define\tELSE_TK\t311\n-#define\tINSTANCEOF_TK\t312\n-#define\tRETURN_TK\t313\n-#define\tVOID_TK\t314\n-#define\tCATCH_TK\t315\n-#define\tINTERFACE_TK\t316\n-#define\tCASE_TK\t317\n-#define\tEXTENDS_TK\t318\n-#define\tFINALLY_TK\t319\n-#define\tSUPER_TK\t320\n-#define\tWHILE_TK\t321\n-#define\tCLASS_TK\t322\n-#define\tSWITCH_TK\t323\n-#define\tCONST_TK\t324\n-#define\tTRY_TK\t325\n-#define\tFOR_TK\t326\n-#define\tNEW_TK\t327\n-#define\tCONTINUE_TK\t328\n-#define\tGOTO_TK\t329\n-#define\tPACKAGE_TK\t330\n-#define\tTHIS_TK\t331\n-#define\tBYTE_TK\t332\n-#define\tSHORT_TK\t333\n-#define\tINT_TK\t334\n-#define\tLONG_TK\t335\n-#define\tCHAR_TK\t336\n-#define\tINTEGRAL_TK\t337\n-#define\tFLOAT_TK\t338\n-#define\tDOUBLE_TK\t339\n-#define\tFP_TK\t340\n-#define\tID_TK\t341\n-#define\tREL_QM_TK\t342\n-#define\tREL_CL_TK\t343\n-#define\tNOT_TK\t344\n-#define\tNEG_TK\t345\n-#define\tASSIGN_ANY_TK\t346\n-#define\tASSIGN_TK\t347\n-#define\tOP_TK\t348\n-#define\tCP_TK\t349\n-#define\tOCB_TK\t350\n-#define\tCCB_TK\t351\n-#define\tOSB_TK\t352\n-#define\tCSB_TK\t353\n-#define\tSC_TK\t354\n-#define\tC_TK\t355\n-#define\tDOT_TK\t356\n-#define\tSTRING_LIT_TK\t357\n-#define\tCHAR_LIT_TK\t358\n-#define\tINT_LIT_TK\t359\n-#define\tFP_LIT_TK\t360\n-#define\tTRUE_TK\t361\n-#define\tFALSE_TK\t362\n-#define\tBOOL_LIT_TK\t363\n-#define\tNULL_TK\t364\n+#define\tPLUS_TK\t257\n+#define\tMINUS_TK\t258\n+#define\tMULT_TK\t259\n+#define\tDIV_TK\t260\n+#define\tREM_TK\t261\n+#define\tLS_TK\t262\n+#define\tSRS_TK\t263\n+#define\tZRS_TK\t264\n+#define\tAND_TK\t265\n+#define\tXOR_TK\t266\n+#define\tOR_TK\t267\n+#define\tBOOL_AND_TK\t268\n+#define\tBOOL_OR_TK\t269\n+#define\tEQ_TK\t270\n+#define\tNEQ_TK\t271\n+#define\tGT_TK\t272\n+#define\tGTE_TK\t273\n+#define\tLT_TK\t274\n+#define\tLTE_TK\t275\n+#define\tPLUS_ASSIGN_TK\t276\n+#define\tMINUS_ASSIGN_TK\t277\n+#define\tMULT_ASSIGN_TK\t278\n+#define\tDIV_ASSIGN_TK\t279\n+#define\tREM_ASSIGN_TK\t280\n+#define\tLS_ASSIGN_TK\t281\n+#define\tSRS_ASSIGN_TK\t282\n+#define\tZRS_ASSIGN_TK\t283\n+#define\tAND_ASSIGN_TK\t284\n+#define\tXOR_ASSIGN_TK\t285\n+#define\tOR_ASSIGN_TK\t286\n+#define\tPUBLIC_TK\t287\n+#define\tPRIVATE_TK\t288\n+#define\tPROTECTED_TK\t289\n+#define\tSTATIC_TK\t290\n+#define\tFINAL_TK\t291\n+#define\tSYNCHRONIZED_TK\t292\n+#define\tVOLATILE_TK\t293\n+#define\tTRANSIENT_TK\t294\n+#define\tNATIVE_TK\t295\n+#define\tPAD_TK\t296\n+#define\tABSTRACT_TK\t297\n+#define\tMODIFIER_TK\t298\n+#define\tDECR_TK\t299\n+#define\tINCR_TK\t300\n+#define\tDEFAULT_TK\t301\n+#define\tIF_TK\t302\n+#define\tTHROW_TK\t303\n+#define\tBOOLEAN_TK\t304\n+#define\tDO_TK\t305\n+#define\tIMPLEMENTS_TK\t306\n+#define\tTHROWS_TK\t307\n+#define\tBREAK_TK\t308\n+#define\tIMPORT_TK\t309\n+#define\tELSE_TK\t310\n+#define\tINSTANCEOF_TK\t311\n+#define\tRETURN_TK\t312\n+#define\tVOID_TK\t313\n+#define\tCATCH_TK\t314\n+#define\tINTERFACE_TK\t315\n+#define\tCASE_TK\t316\n+#define\tEXTENDS_TK\t317\n+#define\tFINALLY_TK\t318\n+#define\tSUPER_TK\t319\n+#define\tWHILE_TK\t320\n+#define\tCLASS_TK\t321\n+#define\tSWITCH_TK\t322\n+#define\tCONST_TK\t323\n+#define\tTRY_TK\t324\n+#define\tFOR_TK\t325\n+#define\tNEW_TK\t326\n+#define\tCONTINUE_TK\t327\n+#define\tGOTO_TK\t328\n+#define\tPACKAGE_TK\t329\n+#define\tTHIS_TK\t330\n+#define\tBYTE_TK\t331\n+#define\tSHORT_TK\t332\n+#define\tINT_TK\t333\n+#define\tLONG_TK\t334\n+#define\tCHAR_TK\t335\n+#define\tINTEGRAL_TK\t336\n+#define\tFLOAT_TK\t337\n+#define\tDOUBLE_TK\t338\n+#define\tFP_TK\t339\n+#define\tID_TK\t340\n+#define\tREL_QM_TK\t341\n+#define\tREL_CL_TK\t342\n+#define\tNOT_TK\t343\n+#define\tNEG_TK\t344\n+#define\tASSIGN_ANY_TK\t345\n+#define\tASSIGN_TK\t346\n+#define\tOP_TK\t347\n+#define\tCP_TK\t348\n+#define\tOCB_TK\t349\n+#define\tCCB_TK\t350\n+#define\tOSB_TK\t351\n+#define\tCSB_TK\t352\n+#define\tSC_TK\t353\n+#define\tC_TK\t354\n+#define\tDOT_TK\t355\n+#define\tSTRING_LIT_TK\t356\n+#define\tCHAR_LIT_TK\t357\n+#define\tINT_LIT_TK\t358\n+#define\tFP_LIT_TK\t359\n+#define\tTRUE_TK\t360\n+#define\tFALSE_TK\t361\n+#define\tBOOL_LIT_TK\t362\n+#define\tNULL_TK\t363\n \n #line 48 \"./parse.y\"\n \n@@ -517,7 +516,7 @@ typedef union {\n #define\tYYFLAG\t\t-32768\n #define\tYYNTBASE\t110\n \n-#define YYTRANSLATE(x) ((unsigned)(x) <= 364 ? yytranslate[x] : 272)\n+#define YYTRANSLATE(x) ((unsigned)(x) <= 363 ? yytranslate[x] : 272)\n \n static const char yytranslate[] = {     0,\n      2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n@@ -545,18 +544,18 @@ static const char yytranslate[] = {     0,\n      2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n      2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n      2,     2,     2,     2,     2,     2,     2,     2,     2,     2,\n-     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,\n-     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,\n-    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,\n-    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,\n-    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,\n-    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n-    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,\n-    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,\n-    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,\n-    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,\n-    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,\n-   106,   107,   108,   109\n+     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,\n+     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,\n+    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,\n+    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,\n+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,\n+    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n+    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,\n+    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,\n+    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,\n+    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,\n+    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,\n+   107,   108,   109\n };\n \n #if YYDEBUG != 0\n@@ -2388,6 +2387,7 @@ static const short yycheck[] = {     3,\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n #line 3 \"/usr/share/misc/bison.simple\"\n+/* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2404,46 +2404,66 @@ static const short yycheck[] = {     3,\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+   Foundation, Inc., 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n    This special exception was added by the Free Software Foundation\n    in version 1.24 of Bison.  */\n \n-#ifndef alloca\n+/* This is the parser code that is written into each bison parser\n+  when the %semantic_parser declaration is not specified in the grammar.\n+  It was written by Richard Stallman by simplifying the hairy parser\n+  used when %semantic_parser is specified.  */\n+\n+#ifndef YYSTACK_USE_ALLOCA\n+#ifdef alloca\n+#define YYSTACK_USE_ALLOCA\n+#else /* alloca not defined */\n #ifdef __GNUC__\n+#define YYSTACK_USE_ALLOCA\n #define alloca __builtin_alloca\n #else /* not GNU C.  */\n-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)\n+#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))\n+#define YYSTACK_USE_ALLOCA\n #include <alloca.h>\n #else /* not sparc */\n-#if defined (MSDOS) && !defined (__TURBOC__)\n+/* We think this test detects Watcom and Microsoft C.  */\n+/* This used to test MSDOS, but that is a bad idea\n+   since that symbol is in the user namespace.  */\n+#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)\n+#if 0 /* No need for malloc.h, which pollutes the namespace;\n+\t instead, just don't use alloca.  */\n #include <malloc.h>\n+#endif\n #else /* not MSDOS, or __TURBOC__ */\n #if defined(_AIX)\n-#include <malloc.h>\n+/* I don't know what this was needed for, but it pollutes the namespace.\n+   So I turned it off.   rms, 2 May 1997.  */\n+/* #include <malloc.h>  */\n  #pragma alloca\n-#else /* not MSDOS, __TURBOC__, or _AIX */\n-#ifdef __hpux\n-#ifdef __cplusplus\n-extern \"C\" {\n-void *alloca (unsigned int);\n-};\n-#else /* not __cplusplus */\n-void *alloca ();\n-#endif /* not __cplusplus */\n+#define YYSTACK_USE_ALLOCA\n+#else /* not MSDOS, or __TURBOC__, or _AIX */\n+#if 0\n+#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,\n+\t\t and on HPUX 10.  Eventually we can turn this on.  */\n+#define YYSTACK_USE_ALLOCA\n+#define alloca __builtin_alloca\n #endif /* __hpux */\n+#endif\n #endif /* not _AIX */\n #endif /* not MSDOS, or __TURBOC__ */\n-#endif /* not sparc.  */\n-#endif /* not GNU C.  */\n-#endif /* alloca not defined.  */\n+#endif /* not sparc */\n+#endif /* not GNU C */\n+#endif /* alloca not defined */\n+#endif /* YYSTACK_USE_ALLOCA not defined */\n \n-/* This is the parser code that is written into each bison parser\n-  when the %semantic_parser declaration is not specified in the grammar.\n-  It was written by Richard Stallman by simplifying the hairy parser\n-  used when %semantic_parser is specified.  */\n+#ifdef YYSTACK_USE_ALLOCA\n+#define YYSTACK_ALLOC alloca\n+#else\n+#define YYSTACK_ALLOC malloc\n+#endif\n \n /* Note: there must be only one dollar sign in this file.\n    It is replaced by the list of actions, each action\n@@ -2453,8 +2473,8 @@ void *alloca ();\n #define yyclearin\t(yychar = YYEMPTY)\n #define YYEMPTY\t\t-2\n #define YYEOF\t\t0\n-#define YYACCEPT\treturn(0)\n-#define YYABORT \treturn(1)\n+#define YYACCEPT\tgoto yyacceptlab\n+#define YYABORT \tgoto yyabortlab\n #define YYERROR\t\tgoto yyerrlab1\n /* Like YYERROR except do call yyerror.\n    This remains here temporarily to ease the\n@@ -2535,14 +2555,12 @@ int yydebug;\t\t\t/*  nonzero means print parse trace\t*/\n #ifndef YYMAXDEPTH\n #define YYMAXDEPTH 10000\n #endif\n-\n-/* Prevent warning if -Wstrict-prototypes.  */\n-#ifdef __GNUC__\n-#ifndef YYPARSE_PARAM\n-int yyparse (void);\n-#endif\n-#endif\n \f\n+/* Define __yy_memcpy.  Note that the size argument\n+   should be passed with type unsigned int, because that is what the non-GCC\n+   definitions require.  With GCC, __builtin_memcpy takes an arg\n+   of type size_t, but it can handle unsigned int.  */\n+\n #if __GNUC__ > 1\t\t/* GNU C and GNU C++ define this.  */\n #define __yy_memcpy(TO,FROM,COUNT)\t__builtin_memcpy(TO,FROM,COUNT)\n #else\t\t\t\t/* not GNU C or C++ */\n@@ -2554,7 +2572,7 @@ static void\n __yy_memcpy (to, from, count)\n      char *to;\n      char *from;\n-     int count;\n+     unsigned int count;\n {\n   register char *f = from;\n   register char *t = to;\n@@ -2569,10 +2587,10 @@ __yy_memcpy (to, from, count)\n /* This is the most reliable way to avoid incompatibilities\n    in available built-in functions on various systems.  */\n static void\n-__yy_memcpy (char *to, char *from, int count)\n+__yy_memcpy (char *to, char *from, unsigned int count)\n {\n-  register char *f = from;\n   register char *t = to;\n+  register char *f = from;\n   register int i = count;\n \n   while (i-- > 0)\n@@ -2582,7 +2600,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/share/misc/bison.simple\"\n+#line 217 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -2603,6 +2621,15 @@ __yy_memcpy (char *to, char *from, int count)\n #define YYPARSE_PARAM_DECL\n #endif /* not YYPARSE_PARAM */\n \n+/* Prevent warning if -Wstrict-prototypes.  */\n+#ifdef __GNUC__\n+#ifdef YYPARSE_PARAM\n+int yyparse (void *);\n+#else\n+int yyparse (void);\n+#endif\n+#endif\n+\n int\n yyparse(YYPARSE_PARAM_ARG)\n      YYPARSE_PARAM_DECL\n@@ -2631,6 +2658,7 @@ yyparse(YYPARSE_PARAM_ARG)\n #endif\n \n   int yystacksize = YYINITDEPTH;\n+  int yyfree_stacks = 0;\n \n #ifdef YYPURE\n   int yychar;\n@@ -2715,18 +2743,32 @@ yyparse(YYPARSE_PARAM_ARG)\n       if (yystacksize >= YYMAXDEPTH)\n \t{\n \t  yyerror(\"parser stack overflow\");\n+\t  if (yyfree_stacks)\n+\t    {\n+\t      free (yyss);\n+\t      free (yyvs);\n+#ifdef YYLSP_NEEDED\n+\t      free (yyls);\n+#endif\n+\t    }\n \t  return 2;\n \t}\n       yystacksize *= 2;\n       if (yystacksize > YYMAXDEPTH)\n \tyystacksize = YYMAXDEPTH;\n-      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));\n-      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));\n-      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));\n-      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));\n+#ifndef YYSTACK_USE_ALLOCA\n+      yyfree_stacks = 1;\n+#endif\n+      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));\n+      __yy_memcpy ((char *)yyss, (char *)yyss1,\n+\t\t   size * (unsigned int) sizeof (*yyssp));\n+      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));\n+      __yy_memcpy ((char *)yyvs, (char *)yyvs1,\n+\t\t   size * (unsigned int) sizeof (*yyvsp));\n #ifdef YYLSP_NEEDED\n-      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));\n-      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));\n+      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));\n+      __yy_memcpy ((char *)yyls, (char *)yyls1,\n+\t\t   size * (unsigned int) sizeof (*yylsp));\n #endif\n #endif /* no yyoverflow */\n \n@@ -4978,7 +5020,7 @@ case 503:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/share/misc/bison.simple\"\n+#line 543 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -5173,6 +5215,30 @@ case 503:\n \n   yystate = yyn;\n   goto yynewstate;\n+\n+ yyacceptlab:\n+  /* YYACCEPT comes here.  */\n+  if (yyfree_stacks)\n+    {\n+      free (yyss);\n+      free (yyvs);\n+#ifdef YYLSP_NEEDED\n+      free (yyls);\n+#endif\n+    }\n+  return 0;\n+\n+ yyabortlab:\n+  /* YYABORT comes here.  */\n+  if (yyfree_stacks)\n+    {\n+      free (yyss);\n+      free (yyvs);\n+#ifdef YYLSP_NEEDED\n+      free (yyls);\n+#endif\n+    }\n+  return 1;\n }\n #line 2546 \"./parse.y\"\n \n@@ -5310,7 +5376,7 @@ static void\n java_parser_context_suspend ()\n {\n   /* This makes debugging through java_debug_context easier */\n-  static char *name = \"<inner buffer context>\";\n+  static const char *name = \"<inner buffer context>\";\n \n   /* Duplicate the previous context, use it to save the globals we're\n      interested in */\n@@ -5597,7 +5663,7 @@ issue_warning_error_from_context (cl, msg, ap)\n      const char *msg;\n      va_list ap;\n {\n-  char *saved, *saved_input_filename;\n+  const char *saved, *saved_input_filename;\n   char buffer [4096];\n   vsprintf (buffer, msg, ap);\n   force_error = 1;\n@@ -7791,7 +7857,7 @@ safe_layout_class (class)\n      tree class;\n {\n   tree save_current_class = current_class;\n-  char *save_input_filename = input_filename;\n+  const char *save_input_filename = input_filename;\n   int save_lineno = lineno;\n \n   push_obstacks (&permanent_obstack, &permanent_obstack);"}, {"sha": "4ffee796e4158ca8ffb5c4855916f8baa8330ca0", "filename": "gcc/java/parse.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -705,7 +705,7 @@ typedef struct _jdeplist {\n /* Parser context data structure. */\n struct parser_ctxt {\n \n-  char *filename;\t\t    /* Current filename */\n+  const char *filename;\t\t    /* Current filename */\n   FILE *finput;\t\t\t    /* Current file input stream */\n   struct parser_ctxt *next;\n \n@@ -898,7 +898,7 @@ void java_expand_switch PARAMS ((tree));\n int java_report_errors PARAMS ((void));\n extern tree do_resolve_class PARAMS ((tree, tree, tree, tree));\n #endif\n-char *java_get_line_col PARAMS ((char *, int, int));\n+char *java_get_line_col PARAMS ((const char *, int, int));\n extern void reset_report PARAMS ((void));\n \n /* Always in use, no matter what you compile */"}, {"sha": "08e1a0ee5c77bc7cfc11c02236cb636d242c635c", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -2678,7 +2678,7 @@ static void\n java_parser_context_suspend ()\n {\n   /* This makes debugging through java_debug_context easier */\n-  static char *name = \"<inner buffer context>\";\n+  static const char *name = \"<inner buffer context>\";\n \n   /* Duplicate the previous context, use it to save the globals we're\n      interested in */\n@@ -2965,7 +2965,7 @@ issue_warning_error_from_context (cl, msg, ap)\n      const char *msg;\n      va_list ap;\n {\n-  char *saved, *saved_input_filename;\n+  const char *saved, *saved_input_filename;\n   char buffer [4096];\n   vsprintf (buffer, msg, ap);\n   force_error = 1;\n@@ -5159,7 +5159,7 @@ safe_layout_class (class)\n      tree class;\n {\n   tree save_current_class = current_class;\n-  char *save_input_filename = input_filename;\n+  const char *save_input_filename = input_filename;\n   int save_lineno = lineno;\n \n   push_obstacks (&permanent_obstack, &permanent_obstack);"}, {"sha": "5407d329439f0b218b8ad1f73fbc59c5a9005d39", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1,7 +1,6 @@\n \n /*  A Bison parser, made from objc-parse.y\n- by  GNU Bison version 1.27\n-  */\n+    by GNU Bison version 1.28  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -102,7 +101,7 @@ const char * const language_string = \"GNU Obj-C\";\n \n #line 66 \"objc-parse.y\"\n typedef union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; } YYSTYPE;\n+\tconst char *filename; int lineno; int ends_in_label; } YYSTYPE;\n #line 198 \"objc-parse.y\"\n \n /* Number of statements (loosely speaking) and compound statements \n@@ -112,7 +111,7 @@ static int compstmt_count;\n   \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static char *if_stmt_file;\n+static const char *if_stmt_file;\n static int if_stmt_line;\n \n /* List of types and structure classes of the current declaration.  */\n@@ -1759,8 +1758,8 @@ static const short yycheck[] = {    56,\n     50,    51,    52,    53,    54,    55,    56,    57\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n-/* This file comes from bison-1.27.  */\n+#line 3 \"/usr/share/misc/bison.simple\"\n+/* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -1973,7 +1972,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 216 \"/usr/lib/bison.simple\"\n+#line 217 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -5096,7 +5095,7 @@ case 570:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 542 \"/usr/lib/bison.simple\"\n+#line 543 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "10e135ff66cc6dbbdecaa966398da35e2ee5a7db", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -64,7 +64,7 @@ const char * const language_string = \"GNU Obj-C\";\n %start program\n \n %union {long itype; tree ttype; enum tree_code code;\n-\tchar *filename; int lineno; int ends_in_label; }\n+\tconst char *filename; int lineno; int ends_in_label; }\n \n /* All identifiers that are not reserved words\n    and are not declared typedefs in the current block */\n@@ -203,7 +203,7 @@ static int compstmt_count;\n   \n /* Input file and line number of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static char *if_stmt_file;\n+static const char *if_stmt_file;\n static int if_stmt_line;\n \n /* List of types and structure classes of the current declaration.  */"}, {"sha": "279a25b7a44cb49f9f75a5d72017e5e4f1c1b35b", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -403,6 +403,13 @@ extern int sdb_begin_function_line;\n #ifdef BUFSIZ\n extern FILE *asm_out_file;\n #endif\n+\n+/* The first global object in the file.  */\n+extern const char *first_global_object_name;\n+\n+/* The first weak object in the file.  */\n+extern const char *weak_global_object_name;\n+\n /* Nonzero if function being compiled doesn't contain any calls\n    (ignoring the prologue and epilogue).  This is set prior to\n    local register allocation and is valid for the remaining"}, {"sha": "0626e2c3e340e18e4c5c603e137b077cd2eb5723", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1311,7 +1311,7 @@ void\n expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n      tree string, outputs, inputs, clobbers;\n      int vol;\n-     char *filename;\n+     const char *filename;\n      int line;\n {\n   rtvec argvec, constraints;"}, {"sha": "165073fdb78dca28820a72c6387d1f667de32586", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -163,7 +163,7 @@ static void pipe_closed PARAMS ((int)) ATTRIBUTE_NORETURN;\n /* This might or might not be used in ASM_IDENTIFY_LANGUAGE. */\n static void output_lang_identify PARAMS ((FILE *)) ATTRIBUTE_UNUSED;\n #endif\n-static void compile_file PARAMS ((char *));\n+static void compile_file PARAMS ((const char *));\n static void display_help PARAMS ((void));\n static void mark_file_stack PARAMS ((void *));\n \n@@ -195,13 +195,13 @@ char **save_argv;\n /* Name of current original source file (what was input to cpp).\n    This comes from each #-command in the actual input.  */\n \n-char *input_filename;\n+const char *input_filename;\n \n /* Name of top-level original source file (what was input to cpp).\n    This comes from the #-command at the beginning of the actual input.\n    If there isn't any there, then this is the cc1 input file name.  */\n \n-char *main_input_filename;\n+const char *main_input_filename;\n \n /* Current line number in real source file.  */\n \n@@ -1992,7 +1992,7 @@ check_global_declarations (vec, len)\n \n void\n push_srcloc (file, line)\n-     char *file;\n+     const char *file;\n      int line;\n {\n   struct file_stack *fs;\n@@ -2037,7 +2037,7 @@ pop_srcloc ()\n \n static void\n compile_file (name)\n-     char *name;\n+     const char *name;\n {\n   tree globals;\n \n@@ -4826,7 +4826,7 @@ print_switch_values (file, pos, max, indent, sep, term)\n \n void\n debug_start_source_file (filename)\n-     register char *filename ATTRIBUTE_UNUSED;\n+     register const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_DEBUGGING_INFO\n   if (write_symbols == DBX_DEBUG)"}, {"sha": "9f7ed84e027c08c9deac0e3f61862188d7d41bb4", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -31,7 +31,7 @@ extern int read_integral_parameter\tPARAMS ((const char *, const char *,\n extern int count_error\t\t\tPARAMS ((int));\n extern void strip_off_ending\t\tPARAMS ((char *, int));\n extern void print_time\t\t\tPARAMS ((const char *, long));\n-extern void debug_start_source_file\tPARAMS ((char *));\n+extern void debug_start_source_file\tPARAMS ((const char *));\n extern void debug_end_source_file\tPARAMS ((unsigned));\n extern void debug_define\t\tPARAMS ((unsigned, char *));\n extern void debug_undef\t\t\tPARAMS ((unsigned, char *));"}, {"sha": "2a0ed56d75f8c5a815c269125b2e8e8a8e1b401f", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n+#include \"output.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -5359,9 +5360,6 @@ dump_tree_statistics ()\n #endif\t/* NO_DOT_IN_LABEL */\n #endif\t/* NO_DOLLAR_IN_LABEL */\n \n-extern char *first_global_object_name;\n-extern char *weak_global_object_name;\n-\n /* Appends 6 random characters to TEMPLATE to (hopefully) avoid name\n    clashes in cases where we can't reliably choose a unique name.\n \n@@ -5417,7 +5415,8 @@ get_file_function_name_long (type)\n      const char *type;\n {\n   char *buf;\n-  register char *p;\n+  const char *p;\n+  char *q;\n \n   if (first_global_object_name)\n     p = first_global_object_name;\n@@ -5434,10 +5433,11 @@ get_file_function_name_long (type)\n       if (! file)\n \tfile = input_filename;\n \n-      p = (char *) alloca (7 + strlen (name) + strlen (file));\n+      q = (char *) alloca (7 + strlen (name) + strlen (file));\n \n-      sprintf (p, \"%s%s\", name, file);\n-      append_random_chars (p);\n+      sprintf (q, \"%s%s\", name, file);\n+      append_random_chars (q);\n+      p = q;\n     }\n \n   buf = (char *) alloca (sizeof (FILE_FUNCTION_FORMAT) + strlen (p)\n@@ -5452,22 +5452,17 @@ get_file_function_name_long (type)\n   /* Don't need to pull weird characters out of global names.  */\n   if (p != first_global_object_name)\n     {\n-      for (p = buf+11; *p; p++)\n-\tif (! ( ISDIGIT(*p)\n-#if 0 /* we always want labels, which are valid C++ identifiers (+ `$') */\n-#ifndef ASM_IDENTIFY_GCC\t/* this is required if `.' is invalid -- k. raeburn */\n-\t       || *p == '.'\n-#endif\n-#endif\n+      for (q = buf+11; *q; q++)\n+\tif (! ( ISDIGIT(*q)\n #ifndef NO_DOLLAR_IN_LABEL\t/* this for `$'; unlikely, but... -- kr */\n-\t       || *p == '$'\n+\t       || *q == '$'\n #endif\n #ifndef NO_DOT_IN_LABEL\t\t/* this for `.'; unlikely, but...  */\n-\t       || *p == '.'\n+\t       || *q == '.'\n #endif\n-\t       || ISUPPER(*p)\n-\t       || ISLOWER(*p)))\n-\t  *p = '_';\n+\t       || ISUPPER(*q)\n+\t       || ISLOWER(*q)))\n+\t  *q = '_';\n     }\n \n   return get_identifier (buf);"}, {"sha": "ccbb9c3d29e5edb1bf67649e8b94025aeb9b72bb", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -1541,7 +1541,7 @@ struct tree_type\n struct tree_decl\n {\n   char common[sizeof (struct tree_common)];\n-  char *filename;\n+  const char *filename;\n   int linenum;\n   unsigned int uid;\n   union tree_node *size;\n@@ -2309,7 +2309,7 @@ extern int real_zerop PARAMS ((tree));\n \n /* Points to the name of the input file from which the current input\n    being parsed originally came (before it went into cpp).  */\n-extern char *input_filename;\n+extern const char *input_filename;\n \n /* Current line number in input file.  */\n extern int lineno;\n@@ -2354,7 +2354,7 @@ extern const char *(*decl_printable_name)\tPARAMS ((tree, int));\n \n extern void (*incomplete_decl_finalize_hook)\tPARAMS ((tree));\n \n-extern char *init_parse\t\t\t\tPARAMS ((char *));\n+extern const char *init_parse\t\t\tPARAMS ((const char *));\n extern void finish_parse\t\t\tPARAMS ((void));\n \n extern const char * const language_string;\n@@ -2656,7 +2656,7 @@ extern void print_obstack_statistics\tPARAMS ((const char *,\n #ifdef BUFSIZ\n extern void print_obstack_name\t\tPARAMS ((char *, FILE *, const char *));\n #endif\n-extern void expand_function_end\t\tPARAMS ((char *, int, int));\n+extern void expand_function_end\t\tPARAMS ((const char *, int, int));\n extern void expand_function_start\tPARAMS ((tree, int));\n extern int real_onep\t\t\tPARAMS ((tree));\n extern int real_twop\t\t\tPARAMS ((tree));\n@@ -2790,7 +2790,7 @@ extern void emit_nop\t\t\tPARAMS ((void));\n extern void expand_computed_goto\tPARAMS ((tree));\n extern struct rtx_def *label_rtx\tPARAMS ((tree));\n extern void expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int,\n-\t\t\t\t\t\tchar *, int));\n+\t\t\t\t\t\t const char *, int));\n extern int any_pending_cleanups\t\tPARAMS ((int));\n extern void init_stmt\t\t\tPARAMS ((void));\n extern void init_stmt_for_function\tPARAMS ((void));"}, {"sha": "633688e1455e83c35bcee4a4ee94cc96f5b5ba62", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b304f5b7d7e2140665ee8bac980e800ade8c04b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3b304f5b7d7e2140665ee8bac980e800ade8c04b", "patch": "@@ -77,8 +77,8 @@ Boston, MA 02111-1307, USA.  */\n extern FILE *asm_out_file;\n \n /* The (assembler) name of the first globally-visible object output.  */\n-char *first_global_object_name;\n-char *weak_global_object_name;\n+const char *first_global_object_name;\n+const char *weak_global_object_name;\n \n extern struct obstack *current_obstack;\n extern struct obstack *saveable_obstack;\n@@ -1061,16 +1061,16 @@ assemble_start_function (decl, fnname)\n       if (! first_global_object_name)\n \t{\n \t  const char *p;\n-\t  char **name;\n+\t  char *name;\n+\n+\t  STRIP_NAME_ENCODING (p, fnname);\n+\t  name = permalloc (strlen (p) + 1);\n+\t  strcpy (name, p);\n \n \t  if (! DECL_WEAK (decl) && ! DECL_ONE_ONLY (decl))\n-\t    name = &first_global_object_name;\n+\t    first_global_object_name = name;\n \t  else\n-\t    name = &weak_global_object_name;\n-\n-\t  STRIP_NAME_ENCODING (p, fnname);\n-\t  *name = permalloc (strlen (p) + 1);\n-\t  strcpy (*name, p);\n+\t    weak_global_object_name = name;\n \t}\n \n #ifdef ASM_WEAKEN_LABEL\n@@ -1438,10 +1438,12 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       && ! DECL_ONE_ONLY (decl))\n     {\n       const char *p;\n+      char *xname;\n \n       STRIP_NAME_ENCODING (p, name);\n-      first_global_object_name = permalloc (strlen (p) + 1);\n-      strcpy (first_global_object_name, p);\n+      xname = permalloc (strlen (p) + 1);\n+      strcpy (xname, p);\n+      first_global_object_name = xname;\n     }\n \n   /* Compute the alignment of this data.  */"}]}