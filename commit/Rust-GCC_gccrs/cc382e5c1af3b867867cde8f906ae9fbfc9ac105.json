{"sha": "cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzODJlNWMxYWYzYjg2Nzg2N2NkZThmOTA2YWU5ZmJmYzlhYzEwNQ==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2002-04-08T23:59:13Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2002-04-08T23:59:13Z"}, "message": "java_raw_api.c (ffi_java_raw_size): Handle FFI_TYPE_DOUBLE correctly.\n\n\t* src/java_raw_api.c (ffi_java_raw_size): Handle FFI_TYPE_DOUBLE\n\tcorrectly.\n\t* src/ia64/unix.S: Add unwind information. Fix comments.\n\tSave sp in a way that's compatible with unwind info.\n\t(ffi_call_unix): Correctly restore sp in all cases.\n\t* src/ia64/ffi.c: Add, fix comments.\n\nFrom-SVN: r52048", "tree": {"sha": "7c59c47afdf8cf05abdaf92fb7b67a0eb61cbf9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c59c47afdf8cf05abdaf92fb7b67a0eb61cbf9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/comments", "author": null, "committer": null, "parents": [{"sha": "613bacac4a8550b34d2ad1be9471e8e542bfc6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613bacac4a8550b34d2ad1be9471e8e542bfc6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613bacac4a8550b34d2ad1be9471e8e542bfc6a3"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "178dd9544a49b46e0af7e348342438fcfcb5c596", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "patch": "@@ -1,3 +1,12 @@\n+2002-04-08  Hans Boehm  <Hans_Boehm@hp.com>\n+\n+\t* src/java_raw_api.c (ffi_java_raw_size): Handle FFI_TYPE_DOUBLE\n+\tcorrectly.\n+\t* src/ia64/unix.S: Add unwind information. Fix comments.\n+\tSave sp in a way that's compatible with unwind info.\n+\t(ffi_call_unix): Correctly restore sp in all cases.\n+\t* src/ia64/ffi.c: Add, fix comments.\n+\n 2002-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* src/sparc/v8.S: Make .eh_frame dependent on target word size."}, {"sha": "4338d34c4b0413afdf32661f1aeec60c22dfd0cf", "filename": "libffi/src/ia64/ffi.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fia64%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fia64%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fia64%2Fffi.c?ref=cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "patch": "@@ -35,7 +35,7 @@\n /* type long enough to hold an entire register.  For now we use double.\t*/\n typedef double float80;\n \n-/* The stack layout at call to ffi_prep_regs.  Other_args will remain\t*/\n+/* The stack layout at call to ffi_prep_args.  Other_args will remain\t*/\n /* on the stack for the actual call.  Everything else we be transferred\t*/\n /* to registers and popped by the assembly code.\t\t\t*/\n \n@@ -123,7 +123,8 @@ static bool is_homogeneous_fp_aggregate(ffi_type * type, int n,\n } \n \n /* ffi_prep_args is called by the assembly routine once stack space\n-   has been allocated for the function's arguments.  Returns nonzero\n+   has been allocated for the function's arguments.  It fills in\n+   the arguments in the structure referenced by stack. Returns nonzero\n    if fp registers are used for arguments. */\n \n static bool\n@@ -463,7 +464,7 @@ ffi_prep_incoming_args_UNIX(struct ia64_args *args, void **rvalue,\n  */\n \n /* ffi_closure_UNIX is an assembly routine, which copies the register \t*/\n-/* state into s struct ia64_args, and the invokes\t\t\t*/\n+/* state into a struct ia64_args, and then invokes\t\t\t*/\n /* ffi_closure_UNIX_inner.  It also recovers the closure pointer\t*/\n /* from its fake gp pointer.\t\t\t\t\t\t*/\n void ffi_closure_UNIX();\n@@ -473,7 +474,7 @@ void ffi_closure_UNIX();\n #endif\n void\n ffi_closure_UNIX_inner (ffi_closure *closure, struct ia64_args * args)\n-/* Hopefully declarint this as a varargs function will force all args\t*/\n+/* Hopefully declaring this as a varargs function will force all args\t*/\n /* to memory.\t\t\t\t\t\t\t\t*/\n {\n   // this is our return value storage"}, {"sha": "e599268c72114e7e193419802fd5999cc1bd331d", "filename": "libffi/src/ia64/unix.S", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fia64%2Funix.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fia64%2Funix.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fia64%2Funix.S?ref=cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "patch": "@@ -42,13 +42,24 @@\n \n #define FLOAT_SZ\t8 /* in-memory size of fp operands\t*/\n \n+/* Allocate an ia64_args structure on the stack; call ffi_prep_args\t*/\n+/* to fill it in with argument values; copy those to the real \t\t*/\n+/* registers, leaving overflow arguments on the stack.  Then call fn\t*/\n+/* and move the result from registers into *raddr.\t\t\t*/\n+\t.pred.safe_across_calls p1-p5,p16-p63\n .text\n         .align 16\n-        .global ffi_call_unix#\n-        .proc ffi_call_unix#\n+        .global ffi_call_unix\n+        .proc ffi_call_unix\n ffi_call_unix:\n-\talloc   loc0=ar.pfs,6,5,8,0\n+\t.prologue\n+\t.save\tar.pfs,r38 /* loc0 */\n+\talloc   loc0=ar.pfs,6,6,8,0\n+\t.save\trp,loc1\n \tmov \tloc1=b0;\n+\t.vframe\tloc5\n+\tmov\tloc5=sp;\n+\t.body\n \tsub\tsp=sp,bytes\n \tmov\tloc4=r1\t\t/* Save gp \t*/\n \tld8\tr8=[callback],8\t/* code address of callback\t*/\n@@ -104,7 +115,7 @@ fp_done:\n \t;;\n \tld8\tr1=[fn]\t\t/* Set up gp */\n \tmov\tb6=r8;;\n-\tbr.call.sptk.many b0 = b6\t/* call ffi_prep_args\t*/\n+\tbr.call.sptk.many b0 = b6\t/* call fn\t*/\n \t\n \t/* Handle return value. */\n \tcmp.eq\tp6,p0=0,raddr\n@@ -126,6 +137,7 @@ fp_done:\n (p8)\tstfs\t[raddr]=f8\n (p9)\tstfd\t[raddr]=f8\n \t;;\n+\t.label_state 1\n (p6)\tbr.cond.dpnt.few handle_float_hfa\n (p7)\tbr.cond.dpnt.few handle_double_hfa\n \tbr done\n@@ -151,9 +163,13 @@ done:\n \tmov\tr1=loc4\t\t/* Restore gp\t*/\n \tmov\tar.pfs = loc0\n \tmov\tb0 = loc1\n+\t.restore sp\n+\tmov\tsp = loc5\n \tbr.ret.sptk.many b0\n \n handle_double_hfa:\n+\t.body\n+\t.copy_state 1\n \t/* Homogeneous floating point array of doubles is returned in\t*/\n \t/* registers f8-f15.  Save one at a time to return area.\t*/\n \tand\tflags=0xf,flags\t/* Retrieve size\t*/\n@@ -242,13 +258,19 @@ shfa2:\tadd \tloc3=1*4,raddr\n         .endp ffi_call_unix\n \n \n+\t.pred.safe_across_calls p1-p5,p16-p63\n .text\n         .align 16\n         .global ffi_closure_UNIX\n         .proc ffi_closure_UNIX\n ffi_closure_UNIX:\n-\talloc   loc0=ar.pfs,8,2,2,0\n+\t.prologue\n+\t.save \tar.pfs,r40 /* loc0 */\n+\talloc   loc0=ar.pfs,8,3,2,0\n+\t.save\trp,loc1\n \tmov\tloc1=b0\n+\t.vframe\tloc2\n+\tmov\tloc2=sp\n \t/* Retrieve closure pointer and real gp.\t*/\n \tmov\tout0=gp\n \tadd\tgp=16,gp\n@@ -295,7 +317,8 @@ ffi_closure_UNIX:\n \t;;\n \tmov\tb0=loc1\n \tmov \tar.pfs=loc0\n-\tadd\tsp=BASIC_ARGS_SZ,sp\n+\t.restore sp\n+\tmov\tsp=loc2\n \tbr.ret.sptk.many b0\n \t.endp ffi_closure_UNIX\n \t"}, {"sha": "55c3d132d5339254ad9bfa142d220001ccd09ced", "filename": "libffi/src/java_raw_api.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fjava_raw_api.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc382e5c1af3b867867cde8f906ae9fbfc9ac105/libffi%2Fsrc%2Fjava_raw_api.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fjava_raw_api.c?ref=cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "patch": "@@ -52,6 +52,7 @@ ffi_java_raw_size (ffi_cif *cif)\n       switch((*at) -> type) {\n \tcase FFI_TYPE_UINT64:\n \tcase FFI_TYPE_SINT64:\n+\tcase FFI_TYPE_DOUBLE:\n \t  result += 2 * SIZEOF_ARG;\n \t  break;\n \tcase FFI_TYPE_STRUCT:"}]}