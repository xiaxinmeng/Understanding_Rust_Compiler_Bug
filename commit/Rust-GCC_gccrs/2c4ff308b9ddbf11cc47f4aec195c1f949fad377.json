{"sha": "2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0ZmYzMDhiOWRkYmYxMWNjNDdmNGFlYzE5NWMxZjk0OWZhZDM3Nw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-14T16:22:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-07-14T16:22:49Z"}, "message": "pa.c (output_call): New function to output a function call or millicode call...\n\n\t* pa.c (output_call): New function to output a function call or\n\tmillicode call, possibly with a jump in the delay slot.\n\t(output_mul_insn): Accept additional argument, use output_call.\n\t(output_div_insn): Likewise.\n\t(output_mod_insn): Likewise.\n\t(jump_in_call_delay): New function to determine if the given\n\tJUMP_INSN is in the delay slot of a call or millicode call.\n\nFrom-SVN: r4915", "tree": {"sha": "10514be42af8742a02822b942e3c02d3d0070cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10514be42af8742a02822b942e3c02d3d0070cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4ff308b9ddbf11cc47f4aec195c1f949fad377/comments", "author": null, "committer": null, "parents": [{"sha": "0a1daad47e3e349ec4910de45f7ff1d0c13c2d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1daad47e3e349ec4910de45f7ff1d0c13c2d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1daad47e3e349ec4910de45f7ff1d0c13c2d08"}], "stats": {"total": 129, "additions": 117, "deletions": 12}, "files": [{"sha": "f0da17ef9b851fcd09588b7571e40a4331968993", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 117, "deletions": 12, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4ff308b9ddbf11cc47f4aec195c1f949fad377/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4ff308b9ddbf11cc47f4aec195c1f949fad377/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2c4ff308b9ddbf11cc47f4aec195c1f949fad377", "patch": "@@ -2954,18 +2954,22 @@ import_milli (code)\n    the proper registers. */\n \n char *\n-output_mul_insn (unsignedp)\n+output_mul_insn (unsignedp, insn)\n      int unsignedp;\n+     rtx insn;\n {\n+\n   if (unsignedp)\n     {\n       import_milli (mulU);\n-      return \"bl $$mulU,31%#\";\n+      return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$mulU\"),\n+\t\t\t  gen_rtx (REG, SImode, 31));\n     }\n   else\n     {\n       import_milli (mulI);\n-      return \"bl $$mulI,31%#\";\n+      return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$mulI\"),\n+\t\t\t  gen_rtx (REG, SImode, 31));\n     }\n }\n \n@@ -3026,60 +3030,76 @@ emit_hpdiv_const (operands, unsignedp)\n }\n \n char *\n-output_div_insn (operands, unsignedp)\n+output_div_insn (operands, unsignedp, insn)\n      rtx *operands;\n      int unsignedp;\n+     rtx insn;\n {\n   int divisor;\n   \n   /* If the divisor is a constant, try to use one of the special \n      opcodes .*/\n   if (GET_CODE (operands[0]) == CONST_INT)\n     {\n+      static char buf[100];\n       divisor = INTVAL (operands[0]);\n       if (!div_milli[divisor][unsignedp])\n \t{\n+\t  div_milli[divisor][unsignedp] = 1;\n \t  if (unsignedp)\n \t    output_asm_insn (\".IMPORT $$divU_%0,MILLICODE\", operands);\n \t  else\n \t    output_asm_insn (\".IMPORT $$divI_%0,MILLICODE\", operands);\n-\t  div_milli[divisor][unsignedp] = 1;\n \t}\n       if (unsignedp)\n-\treturn \"bl $$divU_%0,31%#\";\n-      return \"bl $$divI_%0,31%#\";\n+\t{\n+\t  sprintf (buf, \"$$divU_%d\", INTVAL (operands[0]));\n+\t  return output_call (insn, gen_rtx (SYMBOL_REF, SImode, buf),\n+\t\t\t      gen_rtx (REG, SImode, 31));\n+\t}\n+      else\n+\t{\n+\t  sprintf (buf, \"$$divI_%d\", INTVAL (operands[0]));\n+\t  return output_call (insn, gen_rtx (SYMBOL_REF, SImode, buf),\n+\t\t\t      gen_rtx (REG, SImode, 31));\n+\t}\n     }\n   /* Divisor isn't a special constant. */\n   else\n     {\n       if (unsignedp)\n \t{\n \t  import_milli (divU);\n-\t  return \"bl $$divU,31%#\";\n+\t  return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$divU\"),\n+\t\t\t      gen_rtx (REG, SImode, 31));\n \t}\n       else\n \t{\n \t  import_milli (divI);\n-\t  return \"bl $$divI,31%#\";\n+\t  return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$divI\"),\n+\t\t\t      gen_rtx (REG, SImode, 31));\n \t}\n     }\n }\n \n /* Output a $$rem millicode to do mod. */\n \n char *\n-output_mod_insn (unsignedp)\n+output_mod_insn (unsignedp, insn)\n      int unsignedp;\n+     rtx insn;\n {\n   if (unsignedp)\n     {\n       import_milli (remU);\n-      return \"bl $$remU,31%#\";\n+      return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$remU\"),\n+\t\t\t  gen_rtx (REG, SImode, 31));\n     }\n   else\n     {\n       import_milli (remI);\n-      return \"bl $$remI,31%#\";\n+      return output_call (insn, gen_rtx (SYMBOL_REF, SImode, \"$$remI\"),\n+\t\t\t  gen_rtx (REG, SImode, 31));\n     }\n }\n \n@@ -3650,6 +3670,68 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n }\n \n \n+/* INSN is either a function call or a millicode call.  It may have an\n+   unconditional jump in its delay slot.  \n+\n+   CALL_DEST is the routine we are calling.\n+\n+   RETURN_POINTER is the register which will hold the return address.\n+   %r2 for most calls, %r31 for millicode calls.  */\n+char *\n+output_call (insn, call_dest, return_pointer)\n+  rtx insn;\n+  rtx call_dest;\n+  rtx return_pointer;\n+\n+{\n+  int distance;\n+  rtx xoperands[4];\n+  rtx seq_insn;\n+\n+  /* Handle common case -- empty delay slot or no jump in the delay slot.  */\n+  if (dbr_sequence_length () == 0\n+      || (dbr_sequence_length () != 0 \n+\t  && GET_CODE (NEXT_INSN (insn)) != JUMP_INSN))\n+    {\n+      xoperands[0] = call_dest;\n+      xoperands[1] = return_pointer;\n+      output_asm_insn (\"bl %0,%r1%#\", xoperands);\n+      return \"\";\n+    }\n+    \n+  /* This call has an unconditional jump in its delay slot.  */\n+\n+  /* Use the containing sequence insn's address.  */\n+  seq_insn = NEXT_INSN (PREV_INSN (XVECEXP (final_sequence, 0, 0)));\n+\n+  distance = insn_addresses[INSN_UID (JUMP_LABEL (NEXT_INSN (insn)))] \n+\t       - insn_addresses[INSN_UID (seq_insn)] - 8;\n+\n+  /* If the branch was too far away, emit a normal call followed\n+     by a nop, followed by the unconditional branch.\n+\n+     If the branch is close, then adjust %r2 from within the \n+     call's delay slot.  */\n+\n+  xoperands[0] = call_dest;\n+  xoperands[1] = XEXP (PATTERN (NEXT_INSN (insn)), 1);\n+  xoperands[2] = return_pointer;\n+  if (! VAL_14_BITS_P (distance))\n+    output_asm_insn (\"bl %0,%r2\\n\\tnop\\n\\tbl,n %1,%%r0\", xoperands);\n+  else\n+    {\n+      xoperands[3] = gen_label_rtx ();\n+      output_asm_label (xoperands[3]);\n+      output_asm_insn (\"\\n\\tbl %0,%r2\\n\\tldo %1-%3-8(%r2),%r2\", xoperands);\n+    }\n+\n+  /* Delete the jump.  */\n+  PUT_CODE (NEXT_INSN (insn), NOTE);\n+  NOTE_LINE_NUMBER (NEXT_INSN (insn)) = NOTE_INSN_DELETED;\n+  NOTE_SOURCE_FILE (NEXT_INSN (insn)) = 0;\n+  return \"\";\n+}\n+\n extern struct obstack *saveable_obstack;\n \n /* In HPUX 8.0's shared library scheme, special relocations are needed\n@@ -3831,3 +3913,26 @@ movb_comparison_operator (op, mode)\n \t  || GET_CODE (op) == LT || GET_CODE (op) == GE);\n }\n \n+/* Return 1 if INSN is in the delay slot of a call instruction.  */\n+int\n+jump_in_call_delay (insn)\n+     rtx insn;\n+{\n+\n+  if (GET_CODE (insn) != JUMP_INSN)\n+    return 0;\n+\n+  if (PREV_INSN (insn)\n+      && PREV_INSN (PREV_INSN (insn))\n+      && GET_CODE (next_active_insn (PREV_INSN (PREV_INSN (insn)))) == INSN)\n+    {\n+      rtx test_insn = next_active_insn (PREV_INSN (PREV_INSN (insn)));\n+\n+      return (GET_CODE (PATTERN (test_insn)) == SEQUENCE\n+\t      && XVECEXP (PATTERN (test_insn), 0, 1) == insn);\n+\n+    }\n+  else\n+    return 0;\n+}\n+"}]}