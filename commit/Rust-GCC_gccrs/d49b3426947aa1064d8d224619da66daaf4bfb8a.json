{"sha": "d49b3426947aa1064d8d224619da66daaf4bfb8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5YjM0MjY5NDdhYTEwNjRkOGQyMjQ2MTlkYTY2ZGFhZjRiZmI4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-03T14:08:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-03T14:08:36Z"}, "message": "PR libstdc++/84535 constrain std::thread constructor\n\nThe standard requires that the std::thread constructor is constrained so\nit can't be called with a first argument of type std::thread. The\ncurrent implementation only meets that requirement if the constructor is\ncalled with one argument, by using deleted overloads. This uses an\nenable_if constraint to enforce the requirement for any number of\narguments.\n\nAlso add a static assertion to give a more readable error for invalid\narguments that cannot be invoked. Also simplify _Invoker to reduce the\nerror cascade for ill-formed instantiations with non-invocable\narguments.\n\n\tPR libstdc++/84535\n\t* include/std/thread (thread::__not_same): New SFINAE helper.\n\t(thread::thread(_Callable&&, _Args&&...)): Add SFINAE constraint that\n\tfirst argument is not a std::thread. Add static assertion to check\n\tINVOKE expression is valid.\n\t(thread::thread(thread&), thread::thread(const thread&&)): Remove.\n\t(thread::_Invoke::_M_invoke, thread::_Invoke::operator()): Use\n\t__invoke_result for return types and remove exception specifications.\n\t* testsuite/30_threads/thread/cons/84535.cc: New.\n\nFrom-SVN: r259893", "tree": {"sha": "f9749ffd105f6da70ff696ec7a8837ce916d1670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9749ffd105f6da70ff696ec7a8837ce916d1670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d49b3426947aa1064d8d224619da66daaf4bfb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b3426947aa1064d8d224619da66daaf4bfb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49b3426947aa1064d8d224619da66daaf4bfb8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b3426947aa1064d8d224619da66daaf4bfb8a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f122152f8f6f02cfd19677167f05428c2e7f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f122152f8f6f02cfd19677167f05428c2e7f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f122152f8f6f02cfd19677167f05428c2e7f9a"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "41760444d59726993a85d378dc6f5386e4c53076", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d49b3426947aa1064d8d224619da66daaf4bfb8a", "patch": "@@ -1,5 +1,15 @@\n 2018-05-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/84535\n+\t* include/std/thread (thread::__not_same): New SFINAE helper.\n+\t(thread::thread(_Callable&&, _Args&&...)): Add SFINAE constraint that\n+\tfirst argument is not a std::thread. Add static assertion to check\n+\tINVOKE expression is valid.\n+\t(thread::thread(thread&), thread::thread(const thread&&)): Remove.\n+\t(thread::_Invoke::_M_invoke, thread::_Invoke::operator()): Use\n+\t__invoke_result for return types and remove exception specifications.\n+\t* testsuite/30_threads/thread/cons/84535.cc: New.\n+\n \t* include/std/future (__async_result_of): Use __invoke_result instead\n \tof result_of.\n "}, {"sha": "61861b585206fab18b21beedcf70f0c843d2cf42", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=d49b3426947aa1064d8d224619da66daaf4bfb8a", "patch": "@@ -102,21 +102,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   private:\n     id\t\t\t\t_M_id;\n \n-  public:\n-    thread() noexcept = default;\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 2097.  packaged_task constructors should be constrained\n-    thread(thread&) = delete;\n-    thread(const thread&) = delete;\n-    thread(const thread&&) = delete;\n+    template<typename _Tp>\n+      using __not_same = __not_<is_same<__remove_cvref_t<_Tp>, thread>>;\n \n-    thread(thread&& __t) noexcept\n-    { swap(__t); }\n+  public:\n+    thread() noexcept = default;\n \n-    template<typename _Callable, typename... _Args>\n+    template<typename _Callable, typename... _Args,\n+\t     typename = _Require<__not_same<_Callable>>>\n       explicit\n       thread(_Callable&& __f, _Args&&... __args)\n       {\n+\tstatic_assert( __is_invocable<typename decay<_Callable>::type,\n+\t\t\t\t      typename decay<_Args>::type...>::value,\n+\t  \"std::thread arguments must be invocable after conversion to rvalues\"\n+\t  );\n+\n #ifdef GTHR_ACTIVE_PROXY\n \t// Create a reference to pthread_create, not just the gthr weak symbol.\n \tauto __depend = reinterpret_cast<void(*)()>(&pthread_create);\n@@ -135,6 +138,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::terminate();\n     }\n \n+    thread(const thread&) = delete;\n+\n+    thread(thread&& __t) noexcept\n+    { swap(__t); }\n+\n     thread& operator=(const thread&) = delete;\n \n     thread& operator=(thread&& __t) noexcept\n@@ -222,29 +230,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t_Tuple _M_t;\n \n-\ttemplate<size_t _Index>\n-\t  static __tuple_element_t<_Index, _Tuple>&&\n-\t  _S_declval();\n+\ttemplate<typename>\n+\t  struct __result;\n+\ttemplate<typename _Fn, typename... _Args>\n+\t  struct __result<tuple<_Fn, _Args...>>\n+\t  : __invoke_result<_Fn, _Args...>\n+\t  { };\n \n \ttemplate<size_t... _Ind>\n-\t  auto\n+\t  typename __result<_Tuple>::type\n \t  _M_invoke(_Index_tuple<_Ind...>)\n-\t  noexcept(noexcept(std::__invoke(_S_declval<_Ind>()...)))\n-\t  -> decltype(std::__invoke(_S_declval<_Ind>()...))\n \t  { return std::__invoke(std::get<_Ind>(std::move(_M_t))...); }\n \n-\tusing _Indices\n-\t  = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;\n-\n-\tauto\n+\ttypename __result<_Tuple>::type\n \toperator()()\n-\tnoexcept(noexcept(std::declval<_Invoker&>()._M_invoke(_Indices())))\n-\t-> decltype(std::declval<_Invoker&>()._M_invoke(_Indices()))\n-\t{ return _M_invoke(_Indices()); }\n+\t{\n+\t  using _Indices\n+\t    = typename _Build_index_tuple<tuple_size<_Tuple>::value>::__type;\n+\t  return _M_invoke(_Indices());\n+\t}\n       };\n \n     template<typename... _Tp>\n-      using __decayed_tuple = tuple<typename std::decay<_Tp>::type...>;\n+      using __decayed_tuple = tuple<typename decay<_Tp>::type...>;\n \n   public:\n     // Returns a call wrapper that stores"}, {"sha": "c96929b687382d1112097d0d5c2676d14114cb17", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/84535.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F84535.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b3426947aa1064d8d224619da66daaf4bfb8a/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F84535.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F84535.cc?ref=d49b3426947aa1064d8d224619da66daaf4bfb8a", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <thread>\n+\n+using std::is_constructible;\n+using std::thread;\n+\n+// PR libstdc++/84535\n+static_assert(!is_constructible<thread, thread, int>::value, \"\");\n+static_assert(!is_constructible<thread, thread&, int>::value, \"\");\n+static_assert(!is_constructible<thread, const thread&, int>::value, \"\");\n+static_assert(!is_constructible<thread, const thread&&, int>::value, \"\");"}]}