{"sha": "a298680ca5bbf7254b79e310e683c33baffa18af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5ODY4MGNhNWJiZjcyNTRiNzllMzEwZTY4M2MzM2JhZmZhMThhZg==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2007-11-24T08:37:00Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2007-11-24T08:37:00Z"}, "message": "typeck.c (delta_from_ptrmemfunc): New function.\n\n\tgcc/cp/\n\t* typeck.c (delta_from_ptrmemfunc): New function.\n\t(get_member_function_from_ptrfunc): Call delta_from_ptrmemfunc.\n\t(build_binary_op): Call delta_from_ptrmemfunc.\n\nFrom-SVN: r130394", "tree": {"sha": "d83e3f3a97b8de7bd50a0d41aa0d0b08d0d85534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83e3f3a97b8de7bd50a0d41aa0d0b08d0d85534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a298680ca5bbf7254b79e310e683c33baffa18af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a298680ca5bbf7254b79e310e683c33baffa18af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a298680ca5bbf7254b79e310e683c33baffa18af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a298680ca5bbf7254b79e310e683c33baffa18af/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af90c10fe1738861ec3b9be24a13e8215905c6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c10fe1738861ec3b9be24a13e8215905c6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af90c10fe1738861ec3b9be24a13e8215905c6e2"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "d07b5a09d917f0092d96de634909078391341b95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a298680ca5bbf7254b79e310e683c33baffa18af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a298680ca5bbf7254b79e310e683c33baffa18af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a298680ca5bbf7254b79e310e683c33baffa18af", "patch": "@@ -1,3 +1,9 @@\n+2007-11-24  Ollie Wild  <aaw@google.com>\n+\n+\t* typeck.c (delta_from_ptrmemfunc): New function.\n+\t(get_member_function_from_ptrfunc): Call delta_from_ptrmemfunc.\n+\t(build_binary_op): Call delta_from_ptrmemfunc.\n+\n 2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/30293"}, {"sha": "da46bb35cac26fb115c75166a9a7067cf30881a3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a298680ca5bbf7254b79e310e683c33baffa18af/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a298680ca5bbf7254b79e310e683c33baffa18af/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a298680ca5bbf7254b79e310e683c33baffa18af", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n \n static tree pfn_from_ptrmemfunc (tree);\n+static tree delta_from_ptrmemfunc (tree);\n static tree convert_for_assignment (tree, tree, const char *, tree, int);\n static tree cp_pointer_int_sum (enum tree_code, tree, tree);\n static tree rationalize_conditional_expr (enum tree_code, tree);\n@@ -2586,7 +2587,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \n       /* Start by extracting all the information from the PMF itself.  */\n       e3 = pfn_from_ptrmemfunc (function);\n-      delta = build_ptrmemfunc_access_expr (function, delta_identifier);\n+      delta = delta_from_ptrmemfunc (function);\n       idx = build1 (NOP_EXPR, vtable_index_type, e3);\n       switch (TARGET_PTRMEMFUNC_VBIT_LOCATION)\n \t{\n@@ -3370,8 +3371,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      == ptrmemfunc_vbit_in_delta)\n \t    {\n \t      tree pfn0 = pfn_from_ptrmemfunc (op0);\n-\t      tree delta0 = build_ptrmemfunc_access_expr (op0,\n-\t\t\t \t \t\t\t  delta_identifier);\n+\t      tree delta0 = delta_from_ptrmemfunc (op0);\n \t      tree e1 = cp_build_binary_op (EQ_EXPR,\n \t  \t\t\t            pfn0,\t\n \t\t\t\t      \t    fold_convert (TREE_TYPE (pfn0),\n@@ -3412,10 +3412,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n \t  pfn0 = pfn_from_ptrmemfunc (op0);\n \t  pfn1 = pfn_from_ptrmemfunc (op1);\n-\t  delta0 = build_ptrmemfunc_access_expr (op0,\n-\t\t\t\t\t\t delta_identifier);\n-\t  delta1 = build_ptrmemfunc_access_expr (op1,\n-\t\t\t\t\t\t delta_identifier);\n+\t  delta0 = delta_from_ptrmemfunc (op0);\n+\t  delta1 = delta_from_ptrmemfunc (op1);\n \t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION\n \t      == ptrmemfunc_vbit_in_delta)\n \t    {\n@@ -6290,6 +6288,25 @@ pfn_from_ptrmemfunc (tree t)\n   return build_ptrmemfunc_access_expr (t, pfn_identifier);\n }\n \n+/* Return an expression for DELTA from the pointer-to-member function\n+   given by T.  */\n+\n+static tree\n+delta_from_ptrmemfunc (tree t)\n+{\n+  if (TREE_CODE (t) == PTRMEM_CST)\n+    {\n+      tree delta;\n+      tree pfn;\n+\n+      expand_ptrmemfunc_cst (t, &delta, &pfn);\n+      if (delta)\n+\treturn delta;\n+    }\n+\n+  return build_ptrmemfunc_access_expr (t, delta_identifier);\n+}\n+\n /* Convert value RHS to type TYPE as preparation for an assignment to\n    an lvalue of type TYPE.  ERRTYPE is a string to use in error\n    messages: \"assignment\", \"return\", etc.  If FNDECL is non-NULL, we"}]}