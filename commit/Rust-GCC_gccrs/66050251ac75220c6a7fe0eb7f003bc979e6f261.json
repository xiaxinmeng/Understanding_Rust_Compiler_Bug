{"sha": "66050251ac75220c6a7fe0eb7f003bc979e6f261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwNTAyNTFhYzc1MjIwYzZhN2ZlMGViN2YwMDNiYzk3OWU2ZjI2MQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-08-09T20:51:08Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-08-09T20:51:08Z"}, "message": "(output_float_compare): Don't try to initialize aggregate local variable; use assignment statements instead.\n\nFrom-SVN: r12609", "tree": {"sha": "11e8bf0189603925dff94ab37fdab13f1fe99eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e8bf0189603925dff94ab37fdab13f1fe99eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66050251ac75220c6a7fe0eb7f003bc979e6f261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66050251ac75220c6a7fe0eb7f003bc979e6f261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66050251ac75220c6a7fe0eb7f003bc979e6f261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66050251ac75220c6a7fe0eb7f003bc979e6f261/comments", "author": null, "committer": null, "parents": [{"sha": "3d5c883bbf7334aa4a9edd8ab7b0057a02f11f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5c883bbf7334aa4a9edd8ab7b0057a02f11f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5c883bbf7334aa4a9edd8ab7b0057a02f11f4b"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "f56f0d98fdd25627f8c048e02ee63570713972b6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66050251ac75220c6a7fe0eb7f003bc979e6f261/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66050251ac75220c6a7fe0eb7f003bc979e6f261/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=66050251ac75220c6a7fe0eb7f003bc979e6f261", "patch": "@@ -1844,10 +1844,12 @@ while (0)\n \tHOST_WIDE_INT value = INTVAL (XEXP (X, 1));\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (value == 1)\t\t\t\t\t\t\t\\\n-\t  return COSTS_N_INSNS (ix86_cost->add) + rtx_cost(XEXP (X, 0));\\\n+\t  return COSTS_N_INSNS (ix86_cost->add) \t\t\t\\\n+\t\t\t\t+ rtx_cost(XEXP (X, 0), OUTER_CODE);\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (value == 2 || value == 3)\t\t\t\t\t\\\n-\t  return COSTS_N_INSNS (ix86_cost->lea) + rtx_cost(XEXP (X, 0));\\\n+\t  return COSTS_N_INSNS (ix86_cost->lea)\t\t\t\t\\\n+\t\t\t\t + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     /* fall through */\t\t\t\t\t\t\t\\\n \t\t  \t\t\t\t\t\t\t\\\n@@ -1865,12 +1867,12 @@ while (0)\n \treturn ((GET_CODE (XEXP (X, 1)) == AND\t\t\t\t\\\n \t\t ? COSTS_N_INSNS(ix86_cost->shift_var * 2)\t\t\\\n \t\t : COSTS_N_INSNS(ix86_cost->shift_var * 6 + 2))\t\t\\\n-\t\t+ rtx_cost(XEXP (X, 0)));\t\t\t\t\\\n+\t\t+ rtx_cost(XEXP (X, 0), OUTER_CODE));\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     return COSTS_N_INSNS (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n \t\t\t  ? ix86_cost->shift_const\t\t\t\\\n \t\t\t  : ix86_cost->shift_var)\t\t\t\\\n-      + rtx_cost(XEXP (X, 0));\t\t\t\t\t\t\\\n+      + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   case MULT:\t\t\t\t\t\t\t\t\\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\t\\\n@@ -1879,10 +1881,11 @@ while (0)\n \tint nbits = 0;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (value == 2)\t\t\t\t\t\t\t\\\n-\t  return COSTS_N_INSNS (ix86_cost->add) + rtx_cost(XEXP (X, 0));\\\n-\t\t\t\t\t\t\t\t\t\\\n+\t  return COSTS_N_INSNS (ix86_cost->add)\t\t\t\t\\\n+\t\t\t\t + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\\\n \tif (value == 4 || value == 8)\t\t\t\t\t\\\n-\t  return COSTS_N_INSNS (ix86_cost->lea) + rtx_cost(XEXP (X, 0));\\\n+\t  return COSTS_N_INSNS (ix86_cost->lea)\t\t\t\t\\\n+\t\t\t\t + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\\\n \t\t\t\t\t\t\t\t\t\\\n \twhile (value != 0)\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n@@ -1892,11 +1895,11 @@ while (0)\n \t\t\t\t\t\t\t\t\t\\\n \tif (nbits == 1)\t\t\t\t\t\t\t\\\n \t  return COSTS_N_INSNS (ix86_cost->shift_const)\t\t\t\\\n-\t    + rtx_cost(XEXP (X, 0));\t\t\t\t\t\\\n+\t    + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (ix86_cost->mult_init\t\t\t\\\n \t\t\t      + nbits * ix86_cost->mult_bit)\t\t\\\n-\t  + rtx_cost(XEXP (X, 0));\t\t\t\t\t\\\n+\t  + rtx_cost(XEXP (X, 0), OUTER_CODE);\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     else\t\t\t/* This is arbitrary */\t\t\t\\\n@@ -1922,8 +1925,10 @@ while (0)\n   case MINUS:\t\t\t\t\t\t\t\t\\\n     if (GET_MODE (X) == DImode)\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (ix86_cost->add) * 2\t\t\t\t\\\n-\t+ (rtx_cost (XEXP (X, 0)) << (GET_MODE (XEXP (X, 0)) != DImode))\\\n-\t+ (rtx_cost (XEXP (X, 1)) << (GET_MODE (XEXP (X, 1)) != DImode));\\\n+\t+ (rtx_cost (XEXP (X, 0), OUTER_CODE)\t\t\t\t\\\n+\t   << (GET_MODE (XEXP (X, 0)) != DImode))\t\t\t\\\n+\t+ (rtx_cost (XEXP (X, 1), OUTER_CODE)\t\t\t\t\\\n+ \t   << (GET_MODE (XEXP (X, 1)) != DImode));\t\t\t\\\n   case NEG:\t\t\t\t\t\t\t\t\\\n   case NOT:\t\t\t\t\t\t\t\t\\\n     if (GET_MODE (X) == DImode)\t\t\t\t\t\t\\"}]}