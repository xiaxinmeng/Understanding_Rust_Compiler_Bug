{"sha": "22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhYzJjMmYxODYyY2ZiN2NiMjcxOWRjNWI2NTYwM2I2MmY0MzkxYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-10-10T05:02:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-10-10T05:02:11Z"}, "message": "config.gcc: Enable zEC12 for with-arch and with-tune configure switches.\n\n2012-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config.gcc: Enable zEC12 for with-arch and with-tune\n          configure switches.\n\t* common/config/s390/s390-common.c (processor_flags_table): Add\n\tzEC12 entry.\n\t* config/s390/2827.md: New file.\n\t* config/s390/s390-opts.h (enum processor_type): Add\n\tPROCESSOR_2827_ZEC12.\n\t* config/s390/s390.h (enum processor_flags): Add PF_ZEC12.\n\t(TARGET_CPU_ZEC12, TARGET_ZEC12): New macro definitions.\n\t* config/s390/s390.c (zEC12_cost): New definition.\n\t(s390_option_override): Set costs for zEC12.\n\tSet parameter defaults for zEC12.\n\t(legitimate_reload_fp_constant_p): Adjust comment.\n\t(preferred_la_operand_p): Adjust comment.\n\t(s390_expand_insv): Generate insv pattern without CC clobber for\n\tzEC12.\n\t(s390_adjust_priority): Add zEC12 check.\n\t(s390_issue_rate): Return 2 for zEC12.\n\t(s390_reorg): Enable code optimizations for zEC12.\n\t(s390_sched_reorder): Reorder insns according to OOO attributes.\n\t(s390_get_sched_attrmask): New function.\n\t(s390_sched_score): New function.\n\t(s390_sched_variable_issue): Update s390_sched_state.\n\t(s390_sched_init): Reset s390_sched_state.\n\t(s390_loop_unroll_adjust): Enable for zEC12.\n\t* config/s390/s390.opt: Add zEC12 processor type value.\n\t* config/s390/s390.md: Enable mnemonic attribute.\n\t(attr cpu, cpu_facility): Add zEC12.\n\tInclude 2827.md.\n\t(\"*insv<mode>_zEC12\", \"*insv<mode>_zEC12_noshift\")\n\t(\"*load_and_trap<mode>\"): New insn definition.\n\t(\"*cmp_and_trap_unsigned_int<mode>\"): Add clt and clgt.\n\nFrom-SVN: r192289", "tree": {"sha": "0f7fda06a6174be74bc6b29f6af0e09bb95cb101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7fda06a6174be74bc6b29f6af0e09bb95cb101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/comments", "author": null, "committer": null, "parents": [{"sha": "ce8aa074367f364f59edc373597c716e2adbf49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce8aa074367f364f59edc373597c716e2adbf49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce8aa074367f364f59edc373597c716e2adbf49e"}], "stats": {"total": 1034, "additions": 1009, "deletions": 25}, "files": [{"sha": "153abd42e53f2d191b7189089337077eabc6edc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -1,3 +1,38 @@\n+2012-10-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config.gcc: Enable zEC12 for with-arch and with-tune\n+          configure switches.\n+\t* common/config/s390/s390-common.c (processor_flags_table): Add\n+\tzEC12 entry.\n+\t* config/s390/2827.md: New file.\n+\t* config/s390/s390-opts.h (enum processor_type): Add\n+\tPROCESSOR_2827_ZEC12.\n+\t* config/s390/s390.h (enum processor_flags): Add PF_ZEC12.\n+\t(TARGET_CPU_ZEC12, TARGET_ZEC12): New macro definitions.\n+\t* config/s390/s390.c (zEC12_cost): New definition.\n+\t(s390_option_override): Set costs for zEC12.\n+\tSet parameter defaults for zEC12.\n+\t(legitimate_reload_fp_constant_p): Adjust comment.\n+\t(preferred_la_operand_p): Adjust comment.\n+\t(s390_expand_insv): Generate insv pattern without CC clobber for\n+\tzEC12.\n+\t(s390_adjust_priority): Add zEC12 check.\n+\t(s390_issue_rate): Return 2 for zEC12.\n+\t(s390_reorg): Enable code optimizations for zEC12.\n+\t(s390_sched_reorder): Reorder insns according to OOO attributes.\n+\t(s390_get_sched_attrmask): New function.\n+\t(s390_sched_score): New function.\n+\t(s390_sched_variable_issue): Update s390_sched_state.\n+\t(s390_sched_init): Reset s390_sched_state.\n+\t(s390_loop_unroll_adjust): Enable for zEC12.\n+\t* config/s390/s390.opt: Add zEC12 processor type value.\n+\t* config/s390/s390.md: Enable mnemonic attribute.\n+\t(attr cpu, cpu_facility): Add zEC12.\n+\tInclude 2827.md.\n+\t(\"*insv<mode>_zEC12\", \"*insv<mode>_zEC12_noshift\")\n+\t(\"*load_and_trap<mode>\"): New insn definition.\n+\t(\"*cmp_and_trap_unsigned_int<mode>\"): Add clt and clgt.\n+\n 2012-10-09  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.md (type attribute): Add new types 'visl'"}, {"sha": "6bbe3785ef4c0a88cecbd0b2ea5e76b5fbc70590", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -41,7 +41,9 @@ EXPORTED_CONST int processor_flags_table[] =\n     /* z10 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n                  | PF_EXTIMM | PF_DFP | PF_Z10,\n     /* z196 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n-                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196,\n+    /* zEC12 */  PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12\n   };\n \n /* Change optimizations to be performed, depending on the"}, {"sha": "ed7474ad68c4ae7234072d508b697a9a2218d18d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -3355,7 +3355,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196)\n+\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "9bdd30aa29b8e3bc673bd9adcc3958dadfedd579", "filename": "gcc/config/s390/2827.md", "status": "added", "additions": 606, "deletions": 0, "changes": 606, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2F2827.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2F2827.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2827.md?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -0,0 +1,606 @@\n+;; Scheduling description for zEC12 (cpu 2827).\n+;;   Copyright (C) 2012\n+;;   Free Software Foundation, Inc.\n+;;   Contributed by Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3, or (at your option) any later\n+;; version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+;; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+(define_attr \"ooo_cracked\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"cgdbr,clfxtr,cdgtr,celfbr,cxgtr,clfebr,clc,lngfr,cs,cfxbr,xc,clfdbr,basr,ex,cxlgtr,clfdtr,srdl,lpgfr,cdlgbr,cgxtr,cxlftr,nc,cxftr,cdfbr,clfxbr,cdftr,clgxbr,cgdtr,cxlgbr,mvc,clgdtr,cegbr,cfebr,cdlftr,sldl,cdlgtr,csg,chhsi,clgebr,cxgbr,cxfbr,cdlfbr,cgebr,lzxr,oc,cdgbr,brasl,cgxbr,cxlfbr,clgxtr,exrl,cfdbr,celgbr,clgdbr,lxr,cpsdr,lcgfr,bras,srda,cefbr\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"ooo_expanded\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"dlr,dsgr,d,dsgf,stam,dsgfr,dlgr,dsg,cds,dr,stm,mvc,dl,cdsg,stmy,dlg,stmg,lam\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"ooo_endgroup\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"ipm\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"ooo_groupalone\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"lnxbr,madb,ltxtr,clc,axtr,msebr,slbgr,xc,alcr,lpxbr,slbr,maebr,mlg,mfy,lxdtr,maeb,lxeb,nc,mxtr,sxtr,dxbr,alc,msdbr,ltxbr,lxdb,madbr,lxdbr,lxebr,mvc,m,mseb,mlr,mlgr,slb,tcxb,msdb,sqxbr,alcgr,oc,flogr,alcg,mxbr,dxtr,axbr,mr,sxbr,slbg,ml,lcxbr\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_insn_reservation \"zEC12_simple\" 1\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ltg,ogrk,lr,lnebr,lghrl,sdbr,x,asi,lhr,sebr,madb,ar,lhrl,clfxtr,llgfr,clghrl,cgr,cli,agrk,ic,adbr,aebr,lrv,clg,cy,cghi,sy,celfbr,seb,clgfr,al,tm,lang,clfebr,lghr,cdb,lpebr,laa,ark,lh,or,icy,xi,msebr,n,llihl,afi,cs,nrk,sth,lgr,l,lcr,stey,xg,crt,slgfr,ny,ld,j,llihh,slgr,clfhsi,slg,lb,lgrl,lrl,llihf,lndbr,llcr,laxg,mvghi,rllg,sdb,xrk,laag,alhsik,algfi,algr,aly,agfi,lrvr,d,crl,llgc,tmhl,algsi,lgh,icmh,clhrl,xgrk,icm,iilf,ork,lbr,cg,ldgr,lgf,iihf,llghr,sg,clfdbr,llgtr,stam,cebr,tmhh,tceb,slgf,basr,lgbr,maebr,lgb,cgfi,aeb,ltebr,lax,clfit,lrvgr,nihl,ni,clfdtr,srdl,mdb,srk,xihf,stgrl,sthrl,algf,ltr,cdlgbr,cgit,ng,lat,llghrl,ltgr,nihh,clgfrl,srlk,maeb,agr,cxlftr,ler,bcr,stcy,cds,clfi,nihf,ly,clt,lgat,alg,lhy,lgfrl,clghsi,clrt,tmll,srlg,tcdb,ay,sty,clr,lgfi,lan,lpdbr,clgt,adb,ahik,sra,algrk,cdfbr,lcebr,clfxbr,msdbr,ceb,clgr,tmy,tmlh,alghsik,lcgr,mvi,cdbr,ltgf,xr,larl,ldr,llgcr,clgrt,clrl,cghsi,cliy,madbr,oy,ogr,llgt,meebr,slr,clgxbr,chi,s,icmy,llc,ngr,clhhsi,ltgfr,llill,lhi,o,meeb,clgdtr,sll,clgrl,clgf,ledbr,cegbr,mviy,algfr,rll,cdlftr,sldl,cdlgtr,lg,niy,st,sgr,ag,le,xgr,cr,stg,llilh,sr,lzer,cdsg,sllk,mdbr,stoc,csg,clgit,chhsi,strl,llilf,lndfr,ngrk,clgebr,clgfi,llgh,mseb,ltdbr,oill,la,llhrl,stc,lghi,oihl,xiy,sllg,llgf,cgrt,ldeb,cl,sl,cdlfbr,oi,oilh,nr,srak,oihh,ear,slgrk,og,c,slgfi,sthy,oilf,oiy,msdb,oihf,a,cfi,lzxr,lzdr,srag,cdgbr,brasl,alr,cgrl,llgfrl,cit,clgxtr,ley,exrl,lcdfr,lay,xilf,lcdbr,alsi,mvhhi,srl,chsi,lgfr,lrvg,cly,sgrk,ahi,celgbr,nill,clgdbr,jg,slrk,lxr,sar,slfi,cpsdr,lcgfr,aghik,nilh,mvhi,lpdfr,xy,alrk,lao,agsi,ldy,nilf,llhr,alfi,laog,sly,aghi,ldebr,bras,srda,cefbr,lt\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgdbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgdbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_clm\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"clm\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lnxbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lnxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lngr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lngr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cdgtr\" 45\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cdgtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ddtr\" 37\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ddtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mhy\" 5\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mhy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dlr\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dlr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ltxtr\" 18\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ltxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxgtr\" 32\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxgtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lgdr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lgdr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_clc\" 5\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"clc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dsgr\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dsgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_axtr\" 27\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"axtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lngfr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lngfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cghrl\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cghrl\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ah\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ah\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgh\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgh\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_locg\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"locg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msgfi\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msgfi\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_slbgr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"slbgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lpgr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lpgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_loc\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"loc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgf\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgf\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lmy\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lmy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_std\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"std\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_xc\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"xc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msy\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sqebr\" 29\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sqebr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_alcr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"alcr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msgr\" 8\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mhi\" 5\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mhi\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mdtr\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dsgf\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dsgf\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lpxbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lpxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_stdy\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"stdy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_deb\" 23\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"deb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ltdtr\" 17\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ltdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dsgfr\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dsgfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_slbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"slbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dlgr\" 27\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dlgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dsg\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dsg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mlg\" 9\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mlg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ex\" 16\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ex\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mfy\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mfy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxlgtr\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxlgtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lxdtr\" 15\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lxdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mghi\" 5\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mghi\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lpgfr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lpgfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ledtr\" 34\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ledtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ms\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ms\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ldetr\" 17\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ldetr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_tdcxt\" 12\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"tdcxt\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lpr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lpr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msgf\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msgf\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_chy\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"chy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgxtr\" 30\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lmg\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lmg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_tdcet\" 14\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"tdcet\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lxeb\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lxeb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msg\" 8\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_nc\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"nc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_locgr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"locgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_debr\" 23\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"debr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_chrl\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"chrl\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mxtr\" 37\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sgfr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sgfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxftr\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxftr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sxtr\" 27\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dxbr\" 50\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_alc\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"alc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgfrl\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgfrl\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ltxbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ltxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dr\" 16\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lxdb\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lxdb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_tdcdt\" 11\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"tdcdt\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_clmy\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"clmy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_locr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"locr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_agf\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"agf\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lm\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lm\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msgfr\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msgfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lxdbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lxdbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_stm\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"stm\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgdtr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lxebr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lxebr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxlgbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxlgbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mvc\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mvc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sqdbr\" 43\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sqdbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dl\" 25\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dl\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cfebr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cfebr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_agfr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"agfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lnr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lnr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_m\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"m\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ipm\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ipm\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxbr\" 18\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ddbr\" 30\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ddbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_stmy\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"stmy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ste\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ste\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ahy\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ahy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mlr\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mlr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sqeb\" 29\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sqeb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dlg\" 27\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dlg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxgbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxgbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxfbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxfbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mlgr\" 9\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mlgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgfr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgfr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_slb\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"slb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sdtr\" 12\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_tcxb\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"tcxb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgebr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgebr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ch\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ch\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sh\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sh\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sgf\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sgf\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msr\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sqxbr\" 50\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sqxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_alcgr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"alcgr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_oc\" 4\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"oc\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_adtr\" 24\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"adtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cgxbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cgxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxlfbr\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxlfbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sqdb\" 43\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sqdb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_flogr\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"flogr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_popcnt\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"popcnt\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cfdbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cfdbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_alcg\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"alcg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mxbr\" 41\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_dxtr\" 45\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"dxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_axbr\" 12\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"axbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mr\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_stmg\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"stmg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_sxbr\" 12\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"sxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ddb\" 30\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ddb\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cdtr\" 11\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_cxtr\" 14\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"cxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_slbg\" 3\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"slbg\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_ml\" 7\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"ml\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lam\" 0\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lam\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_lcxbr\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"lcxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_msfi\" 6\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"msfi\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_shy\" 2\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"shy\")) \"nothing\")\n+\n+(define_insn_reservation \"zEC12_mh\" 5\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"mh\")) \"nothing\")\n+"}, {"sha": "ecb4e75c3fea4c73c5dd3a0f83d629dc62be2f1f", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -35,6 +35,7 @@ enum processor_type\n   PROCESSOR_2094_Z9_EC,\n   PROCESSOR_2097_Z10,\n   PROCESSOR_2817_Z196,\n+  PROCESSOR_2827_ZEC12,\n   PROCESSOR_max\n };\n "}, {"sha": "a9a1af5e5163965f0a56b4cde0da771202da2d43", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 272, "deletions": 13, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -253,6 +253,38 @@ struct processor_costs z196_cost =\n   COSTS_N_INSNS (160),   /* DSGR cracked */\n };\n \n+static const\n+struct processor_costs zEC12_cost =\n+{\n+  COSTS_N_INSNS (7),     /* M     */\n+  COSTS_N_INSNS (5),     /* MGHI  */\n+  COSTS_N_INSNS (5),     /* MH    */\n+  COSTS_N_INSNS (5),     /* MHI   */\n+  COSTS_N_INSNS (7),     /* ML    */\n+  COSTS_N_INSNS (7),     /* MR    */\n+  COSTS_N_INSNS (6),     /* MS    */\n+  COSTS_N_INSNS (8),     /* MSG   */\n+  COSTS_N_INSNS (6),     /* MSGF  */\n+  COSTS_N_INSNS (6),     /* MSGFR */\n+  COSTS_N_INSNS (8),     /* MSGR  */\n+  COSTS_N_INSNS (6),     /* MSR   */\n+  COSTS_N_INSNS (1) ,    /* multiplication in DFmode */\n+  COSTS_N_INSNS (40),    /* MXBR B+40 */\n+  COSTS_N_INSNS (100),   /* SQXBR B+100 */\n+  COSTS_N_INSNS (42),    /* SQDBR B+42 */\n+  COSTS_N_INSNS (28),    /* SQEBR B+28 */\n+  COSTS_N_INSNS (1),     /* MADBR B */\n+  COSTS_N_INSNS (1),     /* MAEBR B */\n+  COSTS_N_INSNS (131),   /* DXBR B+131 */\n+  COSTS_N_INSNS (29),    /* DDBR */\n+  COSTS_N_INSNS (22),    /* DEBR */\n+  COSTS_N_INSNS (160),   /* DLGR cracked */\n+  COSTS_N_INSNS (160),   /* DLR cracked */\n+  COSTS_N_INSNS (160),   /* DR expanded */\n+  COSTS_N_INSNS (160),   /* DSGFR cracked */\n+  COSTS_N_INSNS (160),   /* DSGR cracked */\n+};\n+\n extern int reload_completed;\n \n /* Kept up to date using the SCHED_VARIABLE_ISSUE hook.  */\n@@ -1584,6 +1616,9 @@ s390_option_override (void)\n     case PROCESSOR_2817_Z196:\n       s390_cost = &z196_cost;\n       break;\n+    case PROCESSOR_2827_ZEC12:\n+      s390_cost = &zEC12_cost;\n+      break;\n     default:\n       s390_cost = &z900_cost;\n     }\n@@ -1608,7 +1643,8 @@ s390_option_override (void)\n #endif\n \n   if (s390_tune == PROCESSOR_2097_Z10\n-      || s390_tune == PROCESSOR_2817_Z196)\n+      || s390_tune == PROCESSOR_2817_Z196\n+      || s390_tune == PROCESSOR_2827_ZEC12)\n     {\n       maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100,\n \t\t\t     global_options.x_param_values,\n@@ -2894,7 +2930,8 @@ static bool\n legitimate_reload_fp_constant_p (rtx op)\n {\n   /* Accept floating-point zero operands if the load zero instruction\n-     can be used.  */\n+     can be used.  Prior to z196 the load fp zero instruction caused a\n+     performance penalty if the result is used as BFP number.  */\n   if (TARGET_Z196\n       && GET_CODE (op) == CONST_DOUBLE\n       && s390_float_const_zero_p (op))\n@@ -3303,7 +3340,9 @@ preferred_la_operand_p (rtx op1, rtx op2)\n     return false;\n \n   /* Avoid LA instructions with index register on z196; it is\n-     preferable to use regular add instructions when possible.  */\n+     preferable to use regular add instructions when possible.\n+     Starting with zEC12 the la with index register is \"uncracked\"\n+     again.  */\n   if (addr.indx && s390_tune == PROCESSOR_2817_Z196)\n     return false;\n \n@@ -4717,8 +4756,13 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n \n       op = gen_rtx_ZERO_EXTRACT (mode, dest, op1, op2),\n       op = gen_rtx_SET (VOIDmode, op, src);\n-      clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n-      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clobber)));\n+\n+      if (!TARGET_ZEC12)\n+\t{\n+\t  clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n+\t  op = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clobber));\n+\t}\n+      emit_insn (op);\n \n       return true;\n     }\n@@ -5710,7 +5754,8 @@ s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n   if (s390_tune != PROCESSOR_2084_Z990\n       && s390_tune != PROCESSOR_2094_Z9_109\n       && s390_tune != PROCESSOR_2097_Z10\n-      && s390_tune != PROCESSOR_2817_Z196)\n+      && s390_tune != PROCESSOR_2817_Z196\n+      && s390_tune != PROCESSOR_2827_ZEC12)\n     return priority;\n \n   switch (s390_safe_attr_type (insn))\n@@ -5742,6 +5787,7 @@ s390_issue_rate (void)\n     case PROCESSOR_2817_Z196:\n       return 3;\n     case PROCESSOR_2097_Z10:\n+    case PROCESSOR_2827_ZEC12:\n       return 2;\n     default:\n       return 1;\n@@ -10569,7 +10615,8 @@ s390_reorg (void)\n \n   /* Walk over the insns and do some >=z10 specific changes.  */\n   if (s390_tune == PROCESSOR_2097_Z10\n-      || s390_tune == PROCESSOR_2817_Z196)\n+      || s390_tune == PROCESSOR_2817_Z196\n+      || s390_tune == PROCESSOR_2827_ZEC12)\n     {\n       rtx insn;\n       bool insn_added_p = false;\n@@ -10679,32 +10726,241 @@ s390_z10_prevent_earlyload_conflicts (rtx *ready, int *nready_p)\n   ready[0] = tmp;\n }\n \n+\n+/* The s390_sched_state variable tracks the state of the current or\n+   the last instruction group.\n+\n+   0,1,2 number of instructions scheduled in the current group\n+   3     the last group is complete - normal insns\n+   4     the last group was a cracked/expanded insn */\n+\n+static int s390_sched_state;\n+\n+#define S390_OOO_SCHED_STATE_NORMAL  3\n+#define S390_OOO_SCHED_STATE_CRACKED 4\n+\n+#define S390_OOO_SCHED_ATTR_MASK_CRACKED    0x1\n+#define S390_OOO_SCHED_ATTR_MASK_EXPANDED   0x2\n+#define S390_OOO_SCHED_ATTR_MASK_ENDGROUP   0x4\n+#define S390_OOO_SCHED_ATTR_MASK_GROUPALONE 0x8\n+\n+static unsigned int\n+s390_get_sched_attrmask (rtx insn)\n+{\n+  unsigned int mask = 0;\n+\n+  if (get_attr_ooo_cracked (insn))\n+    mask |= S390_OOO_SCHED_ATTR_MASK_CRACKED;\n+  if (get_attr_ooo_expanded (insn))\n+    mask |= S390_OOO_SCHED_ATTR_MASK_EXPANDED;\n+  if (get_attr_ooo_endgroup (insn))\n+    mask |= S390_OOO_SCHED_ATTR_MASK_ENDGROUP;\n+  if (get_attr_ooo_groupalone (insn))\n+    mask |= S390_OOO_SCHED_ATTR_MASK_GROUPALONE;\n+  return mask;\n+}\n+\n+/* Return the scheduling score for INSN.  The higher the score the\n+   better.  The score is calculated from the OOO scheduling attributes\n+   of INSN and the scheduling state s390_sched_state.  */\n+static int\n+s390_sched_score (rtx insn)\n+{\n+  unsigned int mask = s390_get_sched_attrmask (insn);\n+  int score = 0;\n+\n+  switch (s390_sched_state)\n+    {\n+    case 0:\n+      /* Try to put insns into the first slot which would otherwise\n+\t break a group.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n+\tscore += 5;\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+\tscore += 10;\n+    case 1:\n+      /* Prefer not cracked insns while trying to put together a\n+\t group.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0\n+\t  && (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) == 0)\n+\tscore += 10;\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) == 0)\n+\tscore += 5;\n+      break;\n+    case 2:\n+      /* Prefer not cracked insns while trying to put together a\n+\t group.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0\n+\t  && (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) == 0)\n+\tscore += 10;\n+      /* Prefer endgroup insns in the last slot.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) != 0)\n+\tscore += 10;\n+      break;\n+    case S390_OOO_SCHED_STATE_NORMAL:\n+      /* Prefer not cracked insns if the last was not cracked.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0)\n+\tscore += 5;\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+\tscore += 10;\n+      break;\n+    case S390_OOO_SCHED_STATE_CRACKED:\n+      /* Try to keep cracked insns together to prevent them from\n+\t interrupting groups.  */\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n+\tscore += 5;\n+      break;\n+    }\n+  return score;\n+}\n+\n /* This function is called via hook TARGET_SCHED_REORDER before\n-   issuing one insn from list READY which contains *NREADYP entries.\n+   issueing one insn from list READY which contains *NREADYP entries.\n    For target z10 it reorders load instructions to avoid early load\n    conflicts in the floating point pipeline  */\n static int\n-s390_sched_reorder (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n+s390_sched_reorder (FILE *file, int verbose,\n \t\t    rtx *ready, int *nreadyp, int clock ATTRIBUTE_UNUSED)\n {\n   if (s390_tune == PROCESSOR_2097_Z10)\n     if (reload_completed && *nreadyp > 1)\n       s390_z10_prevent_earlyload_conflicts (ready, nreadyp);\n \n+  if (s390_tune == PROCESSOR_2827_ZEC12\n+      && reload_completed\n+      && *nreadyp > 1)\n+    {\n+      int i;\n+      int last_index = *nreadyp - 1;\n+      int max_index = -1;\n+      int max_score = -1;\n+      rtx tmp;\n+\n+      /* Just move the insn with the highest score to the top (the\n+\t end) of the list.  A full sort is not needed since a conflict\n+\t in the hazard recognition cannot happen.  So the top insn in\n+\t the ready list will always be taken.  */\n+      for (i = last_index; i >= 0; i--)\n+\t{\n+\t  int score;\n+\n+\t  if (recog_memoized (ready[i]) < 0)\n+\t    continue;\n+\n+\t  score = s390_sched_score (ready[i]);\n+\t  if (score > max_score)\n+\t    {\n+\t      max_score = score;\n+\t      max_index = i;\n+\t    }\n+\t}\n+\n+      if (max_index != -1)\n+\t{\n+\t  if (max_index != last_index)\n+\t    {\n+\t      tmp = ready[max_index];\n+\t      ready[max_index] = ready[last_index];\n+\t      ready[last_index] = tmp;\n+\n+\t      if (verbose > 5)\n+\t\tfprintf (file,\n+\t\t\t \"move insn %d to the top of list\\n\",\n+\t\t\t INSN_UID (ready[last_index]));\n+\t    }\n+\t  else if (verbose > 5)\n+\t    fprintf (file,\n+\t\t     \"best insn %d already on top\\n\",\n+\t\t     INSN_UID (ready[last_index]));\n+\t}\n+\n+      if (verbose > 5)\n+\t{\n+\t  fprintf (file, \"ready list ooo attributes - sched state: %d\\n\",\n+\t\t   s390_sched_state);\n+\n+\t  for (i = last_index; i >= 0; i--)\n+\t    {\n+\t      if (recog_memoized (ready[i]) < 0)\n+\t\tcontinue;\n+\t      fprintf (file, \"insn %d score: %d: \", INSN_UID (ready[i]),\n+\t\t       s390_sched_score (ready[i]));\n+#define PRINT_OOO_ATTR(ATTR) fprintf (file, \"%s \", get_attr_##ATTR (ready[i]) ? #ATTR : \"!\" #ATTR);\n+\t      PRINT_OOO_ATTR (ooo_cracked);\n+\t      PRINT_OOO_ATTR (ooo_expanded);\n+\t      PRINT_OOO_ATTR (ooo_endgroup);\n+\t      PRINT_OOO_ATTR (ooo_groupalone);\n+#undef PRINT_OOO_ATTR\n+\t      fprintf (file, \"\\n\");\n+\t    }\n+\t}\n+    }\n+\n   return s390_issue_rate ();\n }\n \n+\n /* This function is called via hook TARGET_SCHED_VARIABLE_ISSUE after\n    the scheduler has issued INSN.  It stores the last issued insn into\n    last_scheduled_insn in order to make it available for\n    s390_sched_reorder.  */\n static int\n-s390_sched_variable_issue (FILE *file ATTRIBUTE_UNUSED,\n-                           int verbose ATTRIBUTE_UNUSED,\n-                         rtx insn, int more)\n+s390_sched_variable_issue (FILE *file, int verbose, rtx insn, int more)\n {\n   last_scheduled_insn = insn;\n \n+  if (s390_tune == PROCESSOR_2827_ZEC12\n+      && reload_completed\n+      && recog_memoized (insn) >= 0)\n+    {\n+      unsigned int mask = s390_get_sched_attrmask (insn);\n+\n+      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n+\ts390_sched_state = S390_OOO_SCHED_STATE_CRACKED;\n+      else if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) != 0\n+\t       || (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+\ts390_sched_state = S390_OOO_SCHED_STATE_NORMAL;\n+      else\n+\t{\n+\t  /* Only normal insns are left (mask == 0).  */\n+\t  switch (s390_sched_state)\n+\t    {\n+\t    case 0:\n+\t    case 1:\n+\t    case 2:\n+\t    case S390_OOO_SCHED_STATE_NORMAL:\n+\t      if (s390_sched_state == S390_OOO_SCHED_STATE_NORMAL)\n+\t\ts390_sched_state = 1;\n+\t      else\n+\t\ts390_sched_state++;\n+\n+\t      break;\n+\t    case S390_OOO_SCHED_STATE_CRACKED:\n+\t      s390_sched_state = S390_OOO_SCHED_STATE_NORMAL;\n+\t      break;\n+\t    }\n+\t}\n+      if (verbose > 5)\n+\t{\n+\t  fprintf (file, \"insn %d: \", INSN_UID (insn));\n+#define PRINT_OOO_ATTR(ATTR)\t\t\t\t\t\t\\\n+\t  fprintf (file, \"%s \", get_attr_##ATTR (insn) ? #ATTR : \"\");\n+\t  PRINT_OOO_ATTR (ooo_cracked);\n+\t  PRINT_OOO_ATTR (ooo_expanded);\n+\t  PRINT_OOO_ATTR (ooo_endgroup);\n+\t  PRINT_OOO_ATTR (ooo_groupalone);\n+#undef PRINT_OOO_ATTR\n+\t  fprintf (file, \"\\n\");\n+\t  fprintf (file, \"sched state: %d\\n\", s390_sched_state);\n+\t}\n+    }\n+\n   if (GET_CODE (PATTERN (insn)) != USE\n       && GET_CODE (PATTERN (insn)) != CLOBBER)\n     return more - 1;\n@@ -10718,6 +10974,7 @@ s390_sched_init (FILE *file ATTRIBUTE_UNUSED,\n \t\t int max_ready ATTRIBUTE_UNUSED)\n {\n   last_scheduled_insn = NULL_RTX;\n+  s390_sched_state = 0;\n }\n \n /* This function checks the whole of insn X for memory references. The\n@@ -10748,7 +11005,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n   unsigned i;\n   unsigned mem_count = 0;\n \n-  if (s390_tune != PROCESSOR_2097_Z10 && s390_tune != PROCESSOR_2817_Z196)\n+  if (s390_tune != PROCESSOR_2097_Z10\n+      && s390_tune != PROCESSOR_2817_Z196\n+      && s390_tune != PROCESSOR_2827_ZEC12)\n     return nunroll;\n \n   /* Count the number of memory references within the loop body.  */"}, {"sha": "30408f4ac28afb187911b5e915bccec4d7fbc1ce", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -34,7 +34,8 @@ enum processor_flags\n   PF_EXTIMM = 8,\n   PF_DFP = 16,\n   PF_Z10 = 32,\n-  PF_Z196 = 64\n+  PF_Z196 = 64,\n+  PF_ZEC12 = 128\n };\n \n /* This is necessary to avoid a warning about comparing different enum\n@@ -59,6 +60,8 @@ enum processor_flags\n  \t(s390_arch_flags & PF_Z10)\n #define TARGET_CPU_Z196 \\\n  \t(s390_arch_flags & PF_Z196)\n+#define TARGET_CPU_ZEC12 \\\n+ \t(s390_arch_flags & PF_ZEC12)\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility when run in\n@@ -74,6 +77,8 @@ enum processor_flags\n        (TARGET_ZARCH && TARGET_CPU_Z10)\n #define TARGET_Z196 \\\n        (TARGET_ZARCH && TARGET_CPU_Z196)\n+#define TARGET_ZEC12 \\\n+       (TARGET_ZARCH && TARGET_CPU_ZEC12)\n \n \n #define TARGET_AVOID_CMP_AND_BRANCH (s390_tune == PROCESSOR_2817_Z196)"}, {"sha": "439d78ce4c822212d309e63a20e2eef3ee6dedd8", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -260,6 +260,8 @@\n                          z196_cracked\"\n              (const_string \"none\"))\n \n+(define_attr \"mnemonic\" \"unknown\" (const_string \"unknown\"))\n+\n ;; Length in bytes.\n \n (define_attr \"length\" \"\"\n@@ -273,10 +275,10 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n-(define_attr \"cpu_facility\" \"standard,ieee,zarch,longdisp,extimm,dfp,z10,z196\"\n+(define_attr \"cpu_facility\" \"standard,ieee,zarch,longdisp,extimm,dfp,z10,z196,zEC12\"\n   (const_string \"standard\"))\n \n (define_attr \"enabled\" \"\"\n@@ -309,6 +311,10 @@\n \n          (and (eq_attr \"cpu_facility\" \"z196\")\n               (match_test \"TARGET_Z196\"))\n+\t (const_int 1)\n+\n+         (and (eq_attr \"cpu_facility\" \"zEC12\")\n+              (match_test \"TARGET_ZEC12\"))\n \t (const_int 1)]\n \t(const_int 0)))\n \n@@ -325,6 +331,9 @@\n ;; Pipeline description for z196\n (include \"2817.md\")\n \n+;; Pipeline description for zEC12\n+(include \"2827.md\")\n+\n ;; Predicates\n (include \"predicates.md\")\n \n@@ -3360,6 +3369,28 @@\n   FAIL;\n })\n \n+(define_insn \"*insv<mode>_zEC12\"\n+  [(set (zero_extract:GPR (match_operand:GPR 0 \"nonimmediate_operand\" \"+d\")\n+\t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")\n+\t\t\t  (match_operand 2 \"const_int_operand\"    \"I\"))\n+\t(match_operand:GPR 3 \"nonimmediate_operand\" \"d\"))]\n+  \"TARGET_ZEC12\n+   && (INTVAL (operands[1]) + INTVAL (operands[2])) <=\n+      GET_MODE_BITSIZE (<MODE>mode)\"\n+{\n+  int start = INTVAL (operands[2]);\n+  int size = INTVAL (operands[1]);\n+  int offset = 64 - GET_MODE_BITSIZE (<MODE>mode);\n+\n+  operands[2] = GEN_INT (offset + start);              /* start bit position */\n+  operands[1] = GEN_INT (offset + start + size - 1);   /* end bit position */\n+  operands[4] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) -\n+\t\t\t start - size);       /* left shift count */\n+\n+  return \"risbgn\\t%0,%3,%b2,%b1,%b4\";\n+}\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n (define_insn \"*insv<mode>_z10\"\n   [(set (zero_extract:GPR (match_operand:GPR 0 \"nonimmediate_operand\" \"+d\")\n \t\t\t  (match_operand 1 \"const_int_operand\"    \"I\")\n@@ -3384,6 +3415,34 @@\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n+; and op1 with a mask being 1 for the selected bits and 0 for the rest\n+; and op3=op0 with a mask being 0 for the selected bits and 1 for the rest\n+(define_insn \"*insv<mode>_zEC12_noshift\"\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n+\t(ior:GPR (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t (and:GPR (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")\n+\t\t\t  (match_operand 4 \"const_int_operand\" \"n\"))))]\n+  \"TARGET_ZEC12\n+   && s390_contiguous_bitmask_p (INTVAL (operands[2]),\n+                                 GET_MODE_BITSIZE (<MODE>mode), NULL, NULL)\n+   && INTVAL (operands[2]) == ~(INTVAL (operands[4]))\"\n+\n+{\n+  int start;\n+  int size;\n+\n+  s390_contiguous_bitmask_p (INTVAL (operands[2]),\n+                             GET_MODE_BITSIZE (<MODE>mode), &start, &size);\n+\n+  operands[5] = GEN_INT (64 - start - size); /* start bit position */\n+  operands[6] = GEN_INT (64 - 1 - start);    /* end bit position */\n+  operands[7] = const0_rtx;                  /* left shift count */\n+\n+  return \"risbgn\\t%0,%1,%b5,%b6,%b7\";\n+}\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n ; and op1 with a mask being 1 for the selected bits and 0 for the rest\n ; and op3=op0 with a mask being 0 for the selected bits and 1 for the rest\n (define_insn \"*insv<mode>_z10_noshift\"\n@@ -7894,19 +7953,33 @@\n    (set_attr \"type\"    \"branch\")\n    (set_attr \"z10prop\" \"z10_super_c,z10_super\")])\n \n-; clrt, clgrt, clfit, clgit\n+; clrt, clgrt, clfit, clgit, clt, clgt\n (define_insn \"*cmp_and_trap_unsigned_int<mode>\"\n   [(trap_if (match_operator 0 \"s390_unsigned_integer_comparison\"\n-\t       [(match_operand:GPR 1 \"register_operand\"  \"d,d\")\n-\t\t(match_operand:GPR 2 \"nonmemory_operand\" \"d,D\")])\n+\t       [(match_operand:GPR 1 \"register_operand\" \"d,d, d\")\n+\t\t(match_operand:GPR 2 \"general_operand\"  \"d,D,RT\")])\n \t    (const_int 0))]\n   \"TARGET_Z10\"\n   \"@\n    cl<g>rt%C0\\t%1,%2\n-   cl<gf>it%C0\\t%1,%x2\"\n-  [(set_attr \"op_type\" \"RRF,RIE\")\n-   (set_attr \"type\"    \"branch\")\n-   (set_attr \"z10prop\" \"z10_super_c,z10_super\")])\n+   cl<gf>it%C0\\t%1,%x2\n+   cl<g>t%C0\\t%1,%2\"\n+  [(set_attr \"op_type\"      \"RRF,RIE,RSY\")\n+   (set_attr \"type\"         \"branch\")\n+   (set_attr \"z10prop\"      \"z10_super_c,z10_super,*\")\n+   (set_attr \"cpu_facility\" \"z10,z10,zEC12\")])\n+\n+; lat, lgat\n+(define_insn \"*load_and_trap<mode>\"\n+  [(trap_if (eq (match_operand:GPR 0 \"memory_operand\"  \"RT\")\n+\t\t(const_int 0))\n+\t    (const_int 0))\n+   (set (match_operand:GPR 1 \"register_operand\" \"=d\")\n+\t(match_dup 0))]\n+  \"TARGET_ZEC12\"\n+  \"l<g>at\\t%1,%0\"\n+  [(set_attr \"op_type\" \"RXY\")])\n+\n \n ;;\n ;;- Loop instructions."}, {"sha": "cddf06834326dd1a93d5e0cb4c8bc35f24e54f51", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ac2c2f1862cfb7cb2719dc5b65603b62f4391a/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=22ac2c2f1862cfb7cb2719dc5b65603b62f4391a", "patch": "@@ -73,6 +73,9 @@ Enum(processor_type) String(z10) Value(PROCESSOR_2097_Z10)\n EnumValue\n Enum(processor_type) String(z196) Value(PROCESSOR_2817_Z196)\n \n+EnumValue\n+Enum(processor_type) String(zEC12) Value(PROCESSOR_2827_ZEC12)\n+\n mbackchain\n Target Report Mask(BACKCHAIN)\n Maintain backchain pointer"}]}