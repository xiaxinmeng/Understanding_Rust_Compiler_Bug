{"sha": "c172df28ca37addf2ef24eed4ba98422b18a3425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3MmRmMjhjYTM3YWRkZjJlZjI0ZWVkNGJhOTg0MjJiMThhMzQyNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2009-06-13T17:12:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2009-06-13T17:12:50Z"}, "message": "utils.c (record_builtin_type): Pass location argument to build_decl.\n\n        * gcc-interface/utils.c (record_builtin_type): Pass location\n        argument to build_decl.\n        (create_type_stub_decl): Same.\n        (create_type_decl): Same.\n        (create_var_decl_1): Same.\n        (create_field_decl): Same.\n        (create_param_decl): Same.\n        (create_label_decl): Same.\n        (build_decl): Same.\n        (create_subprog_decl): Same.\n        * gcc-interface/decl.c (gnat_to_gnu_entity): Same.\n        * gcc-interface/trans.c (Case_Statement_to_gnu): Pass location\n        argument to create_artificial_label.\n        (Case_Statement_to_gnu): Same.\n        (Loop_Statement_to_gnu): Same.\n        (Subprogram_Body_to_gnu): Same.\n        (gnat_gimplify_stmt): Same.\n\nFrom-SVN: r148459", "tree": {"sha": "b009cefe74ecc29902a3fe07b35f69de0385e7ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b009cefe74ecc29902a3fe07b35f69de0385e7ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c172df28ca37addf2ef24eed4ba98422b18a3425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c172df28ca37addf2ef24eed4ba98422b18a3425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c172df28ca37addf2ef24eed4ba98422b18a3425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c172df28ca37addf2ef24eed4ba98422b18a3425/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1e6dc737e629e7280e70dbd403d0d6da9c4e1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e6dc737e629e7280e70dbd403d0d6da9c4e1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e6dc737e629e7280e70dbd403d0d6da9c4e1a6"}], "stats": {"total": 70, "additions": 52, "deletions": 18}, "files": [{"sha": "cd160a218910036cabfe82aa824a05f873cb347b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c172df28ca37addf2ef24eed4ba98422b18a3425", "patch": "@@ -1,3 +1,23 @@\n+2009-06-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc-interface/utils.c (record_builtin_type): Pass location\n+\targument to build_decl.\n+\t(create_type_stub_decl): Same.\n+\t(create_type_decl): Same.\n+\t(create_var_decl_1): Same.\n+\t(create_field_decl): Same.\n+\t(create_param_decl): Same.\n+\t(create_label_decl): Same.\n+\t(build_decl): Same.\n+\t(create_subprog_decl): Same.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Same.\n+\t* gcc-interface/trans.c (Case_Statement_to_gnu): Pass location\n+\targument to create_artificial_label.\n+\t(Case_Statement_to_gnu): Same.\n+\t(Loop_Statement_to_gnu): Same.\n+\t(Subprogram_Body_to_gnu): Same.\n+\t(gnat_gimplify_stmt): Same.\n+\n 2009-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* gcc-interface/misc.c (gnat_handle_option): Rename"}, {"sha": "63ade27c5e98e41e5f75041e2cf0d3ec9a3b0528", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c172df28ca37addf2ef24eed4ba98422b18a3425", "patch": "@@ -574,7 +574,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tif (Present (Debug_Renaming_Link (gnat_entity)))\n \t  {\n \t    rtx addr;\n-\t    gnu_decl = build_decl (VAR_DECL, gnu_entity_name, gnu_type);\n+\t    gnu_decl = build_decl (input_location,\n+\t\t\t\t   VAR_DECL, gnu_entity_name, gnu_type);\n \t    /* The (MEM (CONST (0))) pattern is prescribed by STABS.  */\n \t    if (global_bindings_p ())\n \t      addr = gen_rtx_CONST (VOIDmode, const0_rtx);\n@@ -2833,7 +2834,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       base type of the parent subtype.  */\n \t    gnu_get_parent = build3 (COMPONENT_REF, void_type_node,\n \t\t\t\t     build0 (PLACEHOLDER_EXPR, gnu_type),\n-\t\t\t\t     build_decl (FIELD_DECL, NULL_TREE,\n+\t\t\t\t     build_decl (input_location,\n+\t\t\t\t\t\t FIELD_DECL, NULL_TREE,\n \t\t\t\t\t\t void_type_node),\n \t\t\t\t     NULL_TREE);\n "}, {"sha": "b59af8cdb1925f68a2d1c0f1f14280e0c31db6f9", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=c172df28ca37addf2ef24eed4ba98422b18a3425", "patch": "@@ -1843,7 +1843,8 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n   /* We build a SWITCH_EXPR that contains the code with interspersed\n      CASE_LABEL_EXPRs for each label.  */\n \n-  push_stack (&gnu_switch_label_stack, NULL_TREE, create_artificial_label ());\n+  push_stack (&gnu_switch_label_stack, NULL_TREE,\n+\t      create_artificial_label (input_location));\n   start_stmt_group ();\n   for (gnat_when = First_Non_Pragma (Alternatives (gnat_node));\n        Present (gnat_when);\n@@ -1908,9 +1909,10 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t  if ((!gnu_low || TREE_CODE (gnu_low) == INTEGER_CST)\n \t      && (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST))\n \t    {\n-\t      add_stmt_with_node (build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t\t  gnu_low, gnu_high,\n-\t\t\t\t\t  create_artificial_label ()),\n+\t      add_stmt_with_node (build3\n+\t\t\t\t  (CASE_LABEL_EXPR, void_type_node,\n+\t\t\t\t   gnu_low, gnu_high,\n+\t\t\t\t   create_artificial_label (input_location)),\n \t\t\t\t  gnat_choice);\n \t      choices_added++;\n \t    }\n@@ -1953,7 +1955,7 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n \n   TREE_TYPE (gnu_loop_stmt) = void_type_node;\n   TREE_SIDE_EFFECTS (gnu_loop_stmt) = 1;\n-  LOOP_STMT_LABEL (gnu_loop_stmt) = create_artificial_label ();\n+  LOOP_STMT_LABEL (gnu_loop_stmt) = create_artificial_label (input_location);\n   set_expr_location_from_node (gnu_loop_stmt, gnat_node);\n   Sloc_to_locus (Sloc (End_Label (gnat_node)),\n \t\t &DECL_SOURCE_LOCATION (LOOP_STMT_LABEL (gnu_loop_stmt)));\n@@ -2213,7 +2215,8 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n      properly copies them out.  We do this by making a new block and converting\n      any inner return into a goto to a label at the end of the block.  */\n   push_stack (&gnu_return_label_stack, NULL_TREE,\n-\t      gnu_cico_list ? create_artificial_label () : NULL_TREE);\n+\t      gnu_cico_list ? create_artificial_label (input_location)\n+\t      : NULL_TREE);\n \n   /* Get a tree corresponding to the code for the subprogram.  */\n   start_stmt_group ();\n@@ -5875,7 +5878,7 @@ gnat_gimplify_stmt (tree *stmt_p)\n \n     case LOOP_STMT:\n       {\n-\ttree gnu_start_label = create_artificial_label ();\n+\ttree gnu_start_label = create_artificial_label (input_location);\n \ttree gnu_end_label = LOOP_STMT_LABEL (stmt);\n \ttree t;\n "}, {"sha": "922e2941506aaf5b135a683fad586bfb9302965d", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c172df28ca37addf2ef24eed4ba98422b18a3425/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=c172df28ca37addf2ef24eed4ba98422b18a3425", "patch": "@@ -547,7 +547,8 @@ gnat_init_decl_processing (void)\n void\n record_builtin_type (const char *name, tree type)\n {\n-  tree type_decl = build_decl (TYPE_DECL, get_identifier (name), type);\n+  tree type_decl = build_decl (input_location,\n+\t\t\t       TYPE_DECL, get_identifier (name), type);\n \n   gnat_pushdecl (type_decl, Empty);\n \n@@ -1244,7 +1245,8 @@ create_type_stub_decl (tree type_name, tree type)\n   /* Using a named TYPE_DECL ensures that a type name marker is emitted in\n      STABS while setting DECL_ARTIFICIAL ensures that no DW_TAG_typedef is\n      emitted in DWARF.  */\n-  tree type_decl = build_decl (TYPE_DECL, type_name, type);\n+  tree type_decl = build_decl (input_location,\n+\t\t\t       TYPE_DECL, type_name, type);\n   DECL_ARTIFICIAL (type_decl) = 1;\n   return type_decl;\n }\n@@ -1274,7 +1276,8 @@ create_type_decl (tree type_name, tree type, struct attrib *attr_list,\n       DECL_NAME (type_decl) = type_name;\n     }\n   else\n-    type_decl = build_decl (TYPE_DECL, type_name, type);\n+    type_decl = build_decl (input_location,\n+\t\t\t    TYPE_DECL, type_name, type);\n \n   DECL_ARTIFICIAL (type_decl) = artificial_p;\n   gnat_pushdecl (type_decl, gnat_node);\n@@ -1352,7 +1355,8 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n   /* The actual DECL node.  CONST_DECL was initially intended for enumerals\n      and may be used for scalars in general but not for aggregates.  */\n   tree var_decl\n-    = build_decl ((constant_p && const_decl_allowed_p\n+    = build_decl (input_location,\n+\t\t  (constant_p && const_decl_allowed_p\n \t\t   && !AGGREGATE_TYPE_P (type)) ? CONST_DECL : VAR_DECL,\n \t\t  var_name, type);\n \n@@ -1465,7 +1469,8 @@ tree\n create_field_decl (tree field_name, tree field_type, tree record_type,\n                    int packed, tree size, tree pos, int addressable)\n {\n-  tree field_decl = build_decl (FIELD_DECL, field_name, field_type);\n+  tree field_decl = build_decl (input_location,\n+\t\t\t\tFIELD_DECL, field_name, field_type);\n \n   DECL_CONTEXT (field_decl) = record_type;\n   TREE_READONLY (field_decl) = TYPE_READONLY (field_type);\n@@ -1606,7 +1611,8 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n tree\n create_param_decl (tree param_name, tree param_type, bool readonly)\n {\n-  tree param_decl = build_decl (PARM_DECL, param_name, param_type);\n+  tree param_decl = build_decl (input_location,\n+\t\t\t\tPARM_DECL, param_name, param_type);\n \n   /* Honor TARGET_PROMOTE_PROTOTYPES like the C compiler, as not doing so\n      can lead to various ABI violations.  */\n@@ -1786,7 +1792,8 @@ potential_alignment_gap (tree prev_field, tree curr_field, tree offset)\n tree\n create_label_decl (tree label_name)\n {\n-  tree label_decl = build_decl (LABEL_DECL, label_name, void_type_node);\n+  tree label_decl = build_decl (input_location,\n+\t\t\t\tLABEL_DECL, label_name, void_type_node);\n \n   DECL_CONTEXT (label_decl)     = current_function_decl;\n   DECL_MODE (label_decl)        = VOIDmode;\n@@ -1810,7 +1817,8 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n                      struct attrib *attr_list, Node_Id gnat_node)\n {\n   tree return_type  = TREE_TYPE (subprog_type);\n-  tree subprog_decl = build_decl (FUNCTION_DECL, subprog_name, subprog_type);\n+  tree subprog_decl = build_decl (input_location,\n+\t\t\t\t  FUNCTION_DECL, subprog_name, subprog_type);\n \n   /* If this is a non-inline function nested inside an inlined external\n      function, we cannot honor both requests without cloning the nested\n@@ -1831,7 +1839,8 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n   TREE_SIDE_EFFECTS (subprog_decl) = TYPE_VOLATILE (subprog_type);\n   DECL_DECLARED_INLINE_P (subprog_decl) = inline_flag;\n   DECL_ARGUMENTS (subprog_decl) = param_decl_list;\n-  DECL_RESULT (subprog_decl)    = build_decl (RESULT_DECL, 0, return_type);\n+  DECL_RESULT (subprog_decl)    = build_decl (input_location,\n+\t\t\t\t\t      RESULT_DECL, 0, return_type);\n   DECL_ARTIFICIAL (DECL_RESULT (subprog_decl)) = 1;\n   DECL_IGNORED_P (DECL_RESULT (subprog_decl)) = 1;\n "}]}