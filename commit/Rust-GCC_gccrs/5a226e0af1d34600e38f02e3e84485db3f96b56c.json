{"sha": "5a226e0af1d34600e38f02e3e84485db3f96b56c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyMjZlMGFmMWQzNDYwMGUzOGYwMmUzZTg0NDg1ZGIzZjk2YjU2Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-02-20T12:19:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-02-20T12:19:47Z"}, "message": "re PR tree-optimization/52286 (wrong code bug)\n\n\tPR tree-optimization/52286\n\t* fold-const.c (fold_binary_loc): For (X & C1) | C2\n\toptimization use double_int_to_tree instead of build_int_cst_wide,\n\trewrite to use double_int vars.\n\n\t* gcc.c-torture/execute/pr52286.c: New test.\n\nFrom-SVN: r184391", "tree": {"sha": "37656215e21718bda37d1449687ef091d6ca5cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37656215e21718bda37d1449687ef091d6ca5cd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a226e0af1d34600e38f02e3e84485db3f96b56c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a226e0af1d34600e38f02e3e84485db3f96b56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a226e0af1d34600e38f02e3e84485db3f96b56c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a226e0af1d34600e38f02e3e84485db3f96b56c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e992fc2e5d6ece7463384caa8c1e0a70cfe57e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e992fc2e5d6ece7463384caa8c1e0a70cfe57e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e992fc2e5d6ece7463384caa8c1e0a70cfe57e91"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "de00a9d9307d4f41c37298e1c622e311bf9f2f6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a226e0af1d34600e38f02e3e84485db3f96b56c", "patch": "@@ -1,3 +1,10 @@\n+2012-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52286\n+\t* fold-const.c (fold_binary_loc): For (X & C1) | C2\n+\toptimization use double_int_to_tree instead of build_int_cst_wide,\n+\trewrite to use double_int vars.\n+\n 2012-02-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/50166"}, {"sha": "ef630fb0d474cb59866e0d5a4073a60752482236", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5a226e0af1d34600e38f02e3e84485db3f96b56c", "patch": "@@ -1,7 +1,7 @@\n /* Fold a constant sub-tree into a single node for C-compiler\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n+   2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -10959,66 +10959,50 @@ fold_binary_loc (location_t loc,\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  unsigned HOST_WIDE_INT hi1, lo1, hi2, lo2, hi3, lo3, mlo, mhi;\n+\t  double_int c1, c2, c3, msk;\n \t  int width = TYPE_PRECISION (type), w;\n-\t  hi1 = TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1));\n-\t  lo1 = TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1));\n-\t  hi2 = TREE_INT_CST_HIGH (arg1);\n-\t  lo2 = TREE_INT_CST_LOW (arg1);\n+\t  c1 = tree_to_double_int (TREE_OPERAND (arg0, 1));\n+\t  c2 = tree_to_double_int (arg1);\n \n \t  /* If (C1&C2) == C1, then (X&C1)|C2 becomes (X,C2).  */\n-\t  if ((hi1 & hi2) == hi1 && (lo1 & lo2) == lo1)\n+\t  if (double_int_equal_p (double_int_and (c1, c2), c1))\n \t    return omit_one_operand_loc (loc, type, arg1,\n-\t\t\t\t     TREE_OPERAND (arg0, 0));\n+\t\t\t\t\t TREE_OPERAND (arg0, 0));\n \n-\t  if (width > HOST_BITS_PER_WIDE_INT)\n-\t    {\n-\t      mhi = (unsigned HOST_WIDE_INT) -1\n-\t\t    >> (2 * HOST_BITS_PER_WIDE_INT - width);\n-\t      mlo = -1;\n-\t    }\n-\t  else\n-\t    {\n-\t      mhi = 0;\n-\t      mlo = (unsigned HOST_WIDE_INT) -1\n-\t\t    >> (HOST_BITS_PER_WIDE_INT - width);\n-\t    }\n+\t  msk = double_int_mask (width);\n \n \t  /* If (C1|C2) == ~0 then (X&C1)|C2 becomes X|C2.  */\n-\t  if ((~(hi1 | hi2) & mhi) == 0 && (~(lo1 | lo2) & mlo) == 0)\n+\t  if (double_int_zero_p (double_int_and_not (msk,\n+\t\t\t\t\t\t     double_int_ior (c1, c2))))\n \t    return fold_build2_loc (loc, BIT_IOR_EXPR, type,\n-\t\t\t\tTREE_OPERAND (arg0, 0), arg1);\n+\t\t\t\t    TREE_OPERAND (arg0, 0), arg1);\n \n \t  /* Minimize the number of bits set in C1, i.e. C1 := C1 & ~C2,\n \t     unless (C1 & ~C2) | (C2 & C3) for some C3 is a mask of some\n \t     mode which allows further optimizations.  */\n-\t  hi1 &= mhi;\n-\t  lo1 &= mlo;\n-\t  hi2 &= mhi;\n-\t  lo2 &= mlo;\n-\t  hi3 = hi1 & ~hi2;\n-\t  lo3 = lo1 & ~lo2;\n+\t  c1 = double_int_and (c1, msk);\n+\t  c2 = double_int_and (c2, msk);\n+\t  c3 = double_int_and_not (c1, c2);\n \t  for (w = BITS_PER_UNIT;\n \t       w <= width && w <= HOST_BITS_PER_WIDE_INT;\n \t       w <<= 1)\n \t    {\n \t      unsigned HOST_WIDE_INT mask\n \t\t= (unsigned HOST_WIDE_INT) -1 >> (HOST_BITS_PER_WIDE_INT - w);\n-\t      if (((lo1 | lo2) & mask) == mask\n-\t\t  && (lo1 & ~mask) == 0 && hi1 == 0)\n+\t      if (((c1.low | c2.low) & mask) == mask\n+\t\t  && (c1.low & ~mask) == 0 && c1.high == 0)\n \t\t{\n-\t\t  hi3 = 0;\n-\t\t  lo3 = mask;\n+\t\t  c3 = uhwi_to_double_int (mask);\n \t\t  break;\n \t\t}\n \t    }\n-\t  if (hi3 != hi1 || lo3 != lo1)\n+\t  if (!double_int_equal_p (c3, c1))\n \t    return fold_build2_loc (loc, BIT_IOR_EXPR, type,\n-\t\t\t\tfold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t     build_int_cst_wide (type,\n-\t\t\t\t\t\t\t\t lo3, hi3)),\n-\t\t\t\targ1);\n+\t\t\t\t    fold_build2_loc (loc, BIT_AND_EXPR, type,\n+\t\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n+\t\t\t\t\t\t     double_int_to_tree (type,\n+\t\t\t\t\t\t\t\t\t c3)),\n+\t\t\t\t    arg1);\n \t}\n \n       /* (X & Y) | Y is (X, Y).  */"}, {"sha": "1287d7acb536a8fb15c7b66e251987ef1e8994b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a226e0af1d34600e38f02e3e84485db3f96b56c", "patch": "@@ -1,3 +1,8 @@\n+2012-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/52286\n+\t* gcc.c-torture/execute/pr52286.c: New test.\n+\n 2012-02-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52295"}, {"sha": "003406d37eea1bb1650eca1e7e26c5366d0ec577", "filename": "gcc/testsuite/gcc.c-torture/execute/pr52286.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a226e0af1d34600e38f02e3e84485db3f96b56c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr52286.c?ref=5a226e0af1d34600e38f02e3e84485db3f96b56c", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/52286 */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  int a, b;\n+  asm (\"\" : \"=r\" (a) : \"0\" (0));\n+  b = (~a | 1) & -2038094497;\n+  if (b >= 0)\n+    abort ();\n+  return 0;\n+}"}]}