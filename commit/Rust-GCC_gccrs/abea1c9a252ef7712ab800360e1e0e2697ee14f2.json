{"sha": "abea1c9a252ef7712ab800360e1e0e2697ee14f2", "node_id": "C_kwDOANBUbNoAKGFiZWExYzlhMjUyZWY3NzEyYWI4MDAzNjBlMWUwZTI2OTdlZTE0ZjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-26T18:40:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-26T18:40:29Z"}, "message": "c++: Fix up handling of vector CONSTRUCTORs with vectors in it in constexpr.cc [PR104226]\n\nThe middle-end uses sometimes VECTOR_TYPE CONSTRUCTORs that contain\nsome other VECTOR_TYPE elements in it (should be with compatible element\nsize and smaller number of elements, e.g. a V8SImode vector can be\nconstructed as { V4SImode_var_1, V4SImode_var_2 }), and expansion of\n__builtin_shufflevector emits these early, so constexpr.cc can see those\ntoo.\nconstexpr.cc already has special cases for NULL index which is typical\nfor VECTOR_TYPE CONSTRUCTORs, and for VECTOR_TYPE CONSTRUCTORs that\ncontain just scalar elts that works just fine - init_subob_ctx just\nreturns on non-aggregate elts and get_or_insert_ctor_field has\n  if (TREE_CODE (type) == VECTOR_TYPE && index == NULL_TREE)\n    {\n      CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (ctor), index, NULL_TREE);\n      return &CONSTRUCTOR_ELTS (ctor)->last();\n    }\nhandling for it.  But for the vector in vector case init_subob_ctx would\ntry to create a sub-CONSTRUCTOR and even didn't handle the NULL index\ncase well, so instead of creating the sub-CONSTRUCTOR after the elts already\nin it overwrote the first one.  So\n(V8SImode) { { 0, 0, 0, 0 }, { 0, 0, 0, 0 } }\nbecame\n(V8SImode) { 0, 0, 0, 0 }\nThe following patch fixes it by not forcing a sub-CONSTRUCTOR for this\nvector in vector case.\n\n2022-01-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104226\n\t* constexpr.cc (init_subob_ctx): For vector ctors containing\n\tvector elements, ensure appending to the same ctor instead of\n\tcreating another one.\n\n\t* g++.dg/cpp0x/constexpr-104226.C: New test.", "tree": {"sha": "eb1e8a153fc4d97f95b133c8bca5052d07ae0d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb1e8a153fc4d97f95b133c8bca5052d07ae0d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abea1c9a252ef7712ab800360e1e0e2697ee14f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abea1c9a252ef7712ab800360e1e0e2697ee14f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abea1c9a252ef7712ab800360e1e0e2697ee14f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abea1c9a252ef7712ab800360e1e0e2697ee14f2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "7f4425326be07d4de74b52a6e3e1cca280595db1", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abea1c9a252ef7712ab800360e1e0e2697ee14f2/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abea1c9a252ef7712ab800360e1e0e2697ee14f2/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=abea1c9a252ef7712ab800360e1e0e2697ee14f2", "patch": "@@ -4658,6 +4658,13 @@ init_subob_ctx (const constexpr_ctx *ctx, constexpr_ctx &new_ctx,\n   if (!AGGREGATE_TYPE_P (type) && !VECTOR_TYPE_P (type))\n     /* A non-aggregate member doesn't get its own CONSTRUCTOR.  */\n     return;\n+  if (VECTOR_TYPE_P (type)\n+      && VECTOR_TYPE_P (TREE_TYPE (ctx->ctor))\n+      && index == NULL_TREE)\n+    /* A vector inside of a vector CONSTRUCTOR, e.g. when a larger\n+       vector is constructed from smaller vectors, doesn't get its own\n+       CONSTRUCTOR either.  */\n+    return;\n \n   /* The sub-aggregate initializer might contain a placeholder;\n      update object to refer to the subobject and ctor to refer to"}, {"sha": "a44f417f7ab5a5ed4c67fcd29a3ce40971c03ff7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-104226.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abea1c9a252ef7712ab800360e1e0e2697ee14f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104226.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abea1c9a252ef7712ab800360e1e0e2697ee14f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104226.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-104226.C?ref=abea1c9a252ef7712ab800360e1e0e2697ee14f2", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/104226\n+// { dg-do compile }\n+// { dg-options \"-Wno-psabi\" }\n+\n+typedef unsigned short __attribute__((__vector_size__(16))) U;\n+typedef unsigned int __attribute__((__vector_size__(16))) V;\n+typedef unsigned int __attribute__((__vector_size__(32))) W;\n+\n+U\n+foo (void)\n+{\n+  return __builtin_convertvector (__builtin_shufflevector ((V){}, (W){},\n+\t\t\t\t\t\t\t   0, 0, 1, 0,\n+\t\t\t\t\t\t\t   5, 5, 0, 2), U);\n+}"}]}