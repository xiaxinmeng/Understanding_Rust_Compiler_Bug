{"sha": "0d4b5b86f2020986ca74c4c79d425764b563f83f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0YjViODZmMjAyMDk4NmNhNzRjNGM3OWQ0MjU3NjRiNTYzZjgzZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-10T16:12:21Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-11-10T16:12:21Z"}, "message": "Add a target hook for assembling undeclared decls.\n\n\t* target.def (assemble_undefined_decl): New hooks.\n\t* hooks.c (hook_void_FILEptr_constcharptr_const_tree): New function.\n\t* hooks.h (hook_void_FILEptr_constcharptr_const_tree): Declare.\n\t* doc/tm.texi.in (TARGET_ASM_ASSEMBLE_UNDEFINED_DECL): Add.\n\t* doc/tm.texi: Regenerate.\n\t* output.h (assemble_undefined_decl): Declare.\n\t(get_fnname_from_decl): Declare.\n\t* varasm.c (assemble_undefined_decl): New function.\n\t(get_fnname_from_decl): New function.\n\t* final.c (rest_of_handle_final): Use it.\n\t* varpool.c (varpool_output_variables): Call assemble_undefined_decl\n\tfor nodes without a definition.\n\nFrom-SVN: r217293", "tree": {"sha": "9c8ca24ffe36df06c483d82a49f4e61dcb15c17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c8ca24ffe36df06c483d82a49f4e61dcb15c17e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4b5b86f2020986ca74c4c79d425764b563f83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4b5b86f2020986ca74c4c79d425764b563f83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4b5b86f2020986ca74c4c79d425764b563f83f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4b5b86f2020986ca74c4c79d425764b563f83f/comments", "author": null, "committer": null, "parents": [{"sha": "42fd12b1e7fc50183bcf62861aae81301a9efbcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fd12b1e7fc50183bcf62861aae81301a9efbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fd12b1e7fc50183bcf62861aae81301a9efbcf"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "4dc83d3f5ad9c8e232ff945939725cbae2c65254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -272,6 +272,19 @@\n \n 2014-11-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n+\t* target.def (assemble_undefined_decl): New hooks.\n+\t* hooks.c (hook_void_FILEptr_constcharptr_const_tree): New function.\n+\t* hooks.h (hook_void_FILEptr_constcharptr_const_tree): Declare.\n+\t* doc/tm.texi.in (TARGET_ASM_ASSEMBLE_UNDEFINED_DECL): Add.\n+\t* doc/tm.texi: Regenerate.\n+\t* output.h (assemble_undefined_decl): Declare.\n+\t(get_fnname_from_decl): Declare.\n+\t* varasm.c (assemble_undefined_decl): New function.\n+\t(get_fnname_from_decl): New function.\n+\t* final.c (rest_of_handle_final): Use it.\n+\t* varpool.c (varpool_output_variables): Call assemble_undefined_decl\n+\tfor nodes without a definition.\n+\n \t* target.def (call_args, end_call_args): New hooks.\n \t* hooks.c (hook_void_rtx_tree): New empty function.\n \t* hooks.h (hook_void_rtx_tree): Declare."}, {"sha": "33a5a9744e551b121d757957e158ac5c7aa7992d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -7896,6 +7896,13 @@ global; that is, available for reference from other files.\n The default implementation uses the TARGET_ASM_GLOBALIZE_LABEL target hook.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_ASSEMBLE_UNDEFINED_DECL (FILE *@var{stream}, const char *@var{name}, const_tree @var{decl})\n+This target hook is a function to output to the stdio stream\n+@var{stream} some commands that will declare the name associated with\n+@var{decl} which is not defined in the current translation unit.  Most\n+assemblers do not require anything to be output in this case.\n+@end deftypefn\n+\n @defmac ASM_WEAKEN_LABEL (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} some commands that will make the label @var{name} weak;"}, {"sha": "068aa31ba3269ad64a0e575e6071b4a89b8bea31", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -5606,6 +5606,8 @@ You may wish to use @code{ASM_OUTPUT_SIZE_DIRECTIVE} and/or\n \n @hook TARGET_ASM_GLOBALIZE_DECL_NAME\n \n+@hook TARGET_ASM_ASSEMBLE_UNDEFINED_DECL\n+\n @defmac ASM_WEAKEN_LABEL (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} some commands that will make the label @var{name} weak;"}, {"sha": "c3805c9e283c68775ce0e7adfbf8cf8d6c8609b1", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -4468,17 +4468,7 @@ leaf_renumber_regs_insn (rtx in_rtx)\n static unsigned int\n rest_of_handle_final (void)\n {\n-  rtx x;\n-  const char *fnname;\n-\n-  /* Get the function's name, as described by its RTL.  This may be\n-     different from the DECL_NAME name used in the source file.  */\n-\n-  x = DECL_RTL (current_function_decl);\n-  gcc_assert (MEM_P (x));\n-  x = XEXP (x, 0);\n-  gcc_assert (GET_CODE (x) == SYMBOL_REF);\n-  fnname = XSTR (x, 0);\n+  const char *fnname = get_fnname_from_decl (current_function_decl);\n \n   assemble_start_function (current_function_decl, fnname);\n   final_start_function (get_insns (), asm_out_file, optimize);"}, {"sha": "356c64c9d928bc8942d8e46704615138d8ac14f4", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -139,6 +139,13 @@ hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUT\n {\n }\n \n+/* Generic hook that takes (FILE *, const char *, constr_tree *) and does\n+   nothing.  */\n+void\n+hook_void_FILEptr_constcharptr_const_tree (FILE *, const char *, const_tree)\n+{\n+}\n+\n /* Generic hook that takes (FILE *, rtx) and returns false.  */\n bool\n hook_bool_FILEptr_rtx_false (FILE *a ATTRIBUTE_UNUSED,"}, {"sha": "5e4f95b0f0aa3844c39fe6c33cc4a8888d6dc291", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -70,6 +70,8 @@ extern void hook_void_void (void);\n extern void hook_void_constcharptr (const char *);\n extern void hook_void_rtx_insn_int (rtx_insn *, int);\n extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n+extern void hook_void_FILEptr_constcharptr_const_tree (FILE *, const char *,\n+\t\t\t\t\t\t       const_tree);\n extern bool hook_bool_FILEptr_rtx_false (FILE *, rtx);\n extern void hook_void_rtx_tree (rtx, tree);\n extern void hook_void_tree (tree);"}, {"sha": "e19fdd3f42b2a8ea02e22db4568b68b814c51c5e", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -178,6 +178,9 @@ extern void default_assemble_visibility (tree, int);\n    for an `asm' keyword used between functions.  */\n extern void assemble_asm (tree);\n \n+/* Get the function's name from a decl, as described by its RTL.  */\n+extern const char *get_fnname_from_decl (tree);\n+\n /* Output assembler code for the constant pool of a function and associated\n    with defining the name of the function.  DECL describes the function.\n    NAME is the function's name.  For the constant pool, we use the current\n@@ -203,6 +206,10 @@ extern void assemble_variable (tree, int, int, int);\n    into the preinit array.  */\n extern void assemble_vtv_preinit_initializer (tree);\n \n+/* Assemble everything that is needed for a variable declaration that has\n+   no definition in the current translation unit.  */\n+extern void assemble_undefined_decl (tree);\n+\n /* Compute the alignment of variable specified by DECL.\n    DONT_OUTPUT_DATA is from assemble_variable.  */\n extern void align_variable (tree decl, bool dont_output_data);"}, {"sha": "b2fe47b806653685f03793e73fbdc62f8cbb4db7", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -158,6 +158,16 @@ global; that is, available for reference from other files.\\n\\\n The default implementation uses the TARGET_ASM_GLOBALIZE_LABEL target hook.\",\n  void, (FILE *stream, tree decl), default_globalize_decl_name)\n \n+/* Output code that will declare an external variable.  */\n+DEFHOOK\n+(assemble_undefined_decl,\n+ \"This target hook is a function to output to the stdio stream\\n\\\n+@var{stream} some commands that will declare the name associated with\\n\\\n+@var{decl} which is not defined in the current translation unit.  Most\\n\\\n+assemblers do not require anything to be output in this case.\",\n+ void, (FILE *stream, const char *name, const_tree decl),\n+ hook_void_FILEptr_constcharptr_const_tree)\n+\n /* Output code that will emit a label for unwind info, if this\n    target requires such labels.  Second argument is the decl the\n    unwind info is associated with, third is a boolean: true if"}, {"sha": "54611f8fd3f17a035eb3befbc606a6ce311fc7de", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -1673,6 +1673,18 @@ decide_function_section (tree decl)\n   in_cold_section_p = first_function_block_is_cold;\n }\n \n+/* Get the function's name, as described by its RTL.  This may be\n+   different from the DECL_NAME name used in the source file.  */\n+const char *\n+get_fnname_from_decl (tree decl)\n+{\n+  rtx x = DECL_RTL (decl);\n+  gcc_assert (MEM_P (x));\n+  x = XEXP (x, 0);\n+  gcc_assert (GET_CODE (x) == SYMBOL_REF);\n+  return XSTR (x, 0);\n+}\n+\n /* Output assembler code for the constant pool of a function and associated\n    with defining the name of the function.  DECL describes the function.\n    NAME is the function's name.  For the constant pool, we use the current\n@@ -2045,6 +2057,15 @@ assemble_variable_contents (tree decl, const char *name,\n     }\n }\n \n+/* Write out assembly for the variable DECL, which is not defined in\n+   the current translation unit.  */\n+void\n+assemble_undefined_decl (tree decl)\n+{\n+  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  targetm.asm_out.assemble_undefined_decl (asm_out_file, name, decl);\n+}\n+\n /* Assemble everything that is needed for a variable or function declaration.\n    Not used for automatic variables, and not used for function definitions.\n    Should not be called for variables of incomplete structure type."}, {"sha": "ac7abc1be86b10491844a6b4cfa4cb23ed8738eb", "filename": "gcc/varpool.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4b5b86f2020986ca74c4c79d425764b563f83f/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=0d4b5b86f2020986ca74c4c79d425764b563f83f", "patch": "@@ -707,6 +707,9 @@ symbol_table::output_variables (void)\n \n   timevar_push (TV_VAROUT);\n \n+  FOR_EACH_VARIABLE (node)\n+    if (!node->definition)\n+      assemble_undefined_decl (node->decl);\n   FOR_EACH_DEFINED_VARIABLE (node)\n     {\n       /* Handled in output_in_order.  */"}]}