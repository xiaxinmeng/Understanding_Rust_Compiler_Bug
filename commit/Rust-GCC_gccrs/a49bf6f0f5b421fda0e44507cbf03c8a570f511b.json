{"sha": "a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5YmY2ZjBmNWI0MjFmZGEwZTQ0NTA3Y2JmMDNjOGE1NzBmNTExYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-09T09:42:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-09T09:42:39Z"}, "message": "re PR bootstrap/81926 (go/parse.o differs between stage2 and stage3)\n\n\tPR bootstrap/81926\n\t* cp-objcp-common.c (struct debug_type_hasher): New class.\n\t(debug_type_hash): New variable.\n\t(cp_get_debug_type): Associate the OFFSET_TYPEs with the types.\n\nFrom-SVN: r251922", "tree": {"sha": "c00e7fecfc9db60837dc9aeece2c8499aa20dc68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00e7fecfc9db60837dc9aeece2c8499aa20dc68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49bf6f0f5b421fda0e44507cbf03c8a570f511b/comments", "author": null, "committer": null, "parents": [{"sha": "630e912e68399c711e603d8eaa388b80a8741159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630e912e68399c711e603d8eaa388b80a8741159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630e912e68399c711e603d8eaa388b80a8741159"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "fa3e00889c3eac801a7e6397e9a9a464c1d6acc5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49bf6f0f5b421fda0e44507cbf03c8a570f511b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49bf6f0f5b421fda0e44507cbf03c8a570f511b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "patch": "@@ -1,3 +1,10 @@\n+2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/81926\n+\t* cp-objcp-common.c (struct debug_type_hasher): New class.\n+\t(debug_type_hash): New variable.\n+\t(cp_get_debug_type): Associate the OFFSET_TYPEs with the types.\n+\n 2017-09-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70029 - ICE with ref-qualifier and -flto"}, {"sha": "183e7f7bf5714accb23ec2c220403846d08c3a20", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49bf6f0f5b421fda0e44507cbf03c8a570f511b/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49bf6f0f5b421fda0e44507cbf03c8a570f511b/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=a49bf6f0f5b421fda0e44507cbf03c8a570f511b", "patch": "@@ -131,15 +131,56 @@ cxx_types_compatible_p (tree x, tree y)\n   return same_type_ignoring_top_level_qualifiers_p (x, y);\n }\n \n+struct debug_type_hasher : ggc_cache_ptr_hash<tree_map>\n+{\n+  static hashval_t hash (tree_map *m) { return tree_map_hash (m); }\n+  static bool equal (tree_map *a, tree_map *b) { return tree_map_eq (a, b); }\n+\n+  static int\n+  keep_cache_entry (tree_map *&e)\n+  {\n+    return ggc_marked_p (e->base.from);\n+  }\n+};\n+\n+static GTY((cache)) hash_table<debug_type_hasher> *debug_type_hash;\n+\n /* Return a type to use in the debug info instead of TYPE, or NULL_TREE to\n    keep TYPE.  */\n \n tree\n cp_get_debug_type (const_tree type)\n {\n   if (TYPE_PTRMEMFUNC_P (type) && !typedef_variant_p (type))\n-    return build_offset_type (TYPE_PTRMEMFUNC_OBJECT_TYPE (type),\n-\t\t\t      TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type)));\n+    {\n+      if (debug_type_hash == NULL)\n+\tdebug_type_hash = hash_table<debug_type_hasher>::create_ggc (512);\n+\n+      /* We cannot simply use build_offset_type here because the function uses\n+\t the type canonicalization hashtable, which is GC-ed, so its behavior\n+\t depends on the actual collection points.  Since we are building these\n+\t types on the fly for the debug info only, they would not be attached\n+\t to any GC root and always be swept, so we would make the contents of\n+\t the debug info depend on the collection points.  */\n+      struct tree_map in, *h;\n+\n+      in.base.from = CONST_CAST_TREE (type);\n+      in.hash = htab_hash_pointer (type);\n+      h = debug_type_hash->find_with_hash (&in, in.hash);\n+      if (h)\n+\treturn h->to;\n+\n+      tree t = build_offset_type (TYPE_PTRMEMFUNC_OBJECT_TYPE (type),\n+\t\t\t\t  TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type)));\n+\n+      h = ggc_alloc<tree_map> ();\n+      h->base.from = CONST_CAST_TREE (type);\n+      h->hash = htab_hash_pointer (type);\n+      h->to = t;\n+      *debug_type_hash->find_slot_with_hash (h, h->hash, INSERT) = h;\n+\n+      return t;\n+    }\n \n   return NULL_TREE;\n }"}]}