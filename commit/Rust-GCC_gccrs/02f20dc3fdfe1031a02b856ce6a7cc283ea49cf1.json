{"sha": "02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmMjBkYzNmZGZlMTAzMWEwMmI4NTZjZTZhN2NjMjgzZWE0OWNmMQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-05-12T21:45:05Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-05-12T21:45:05Z"}, "message": "sh.c: Declare the prototype of sh_adjust_unroll_max only when...\n\n\t* config/sh/sh.c: Declare the prototype of sh_adjust_unroll_max\n\tonly when TARGET_ADJUST_UNROLL_MAX is defined.\n\t(general_movsrc_operand): Use the C style comment.\n\t(ua_offset): Use prototype.\n\nFrom-SVN: r99631", "tree": {"sha": "0de4973d1c391bc685364f47bd9c8d7dc326b3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de4973d1c391bc685364f47bd9c8d7dc326b3c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1/comments", "author": null, "committer": null, "parents": [{"sha": "ed9c043b26ae0e3578a51d1a481fb11219a8dcab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9c043b26ae0e3578a51d1a481fb11219a8dcab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9c043b26ae0e3578a51d1a481fb11219a8dcab"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "b5e5e6f6f8a897666723ca3e69be1f2f61421a7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "patch": "@@ -1,3 +1,10 @@\n+2005-05-12  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c: Declare the prototype of sh_adjust_unroll_max\n+\tonly when TARGET_ADJUST_UNROLL_MAX is defined.\n+\t(general_movsrc_operand): Use the C style comment.\n+\t(ua_offset): Use prototype.\n+\n 2005-05-12  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-im.c (struct mem_ref): Add field \"next\"."}, {"sha": "d1fb0e298c0a96ff236d86d4c8b1053cacd09eb4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=02f20dc3fdfe1031a02b856ce6a7cc283ea49cf1", "patch": "@@ -266,7 +266,9 @@ static bool unspec_caller_rtx_p (rtx);\n static bool sh_cannot_copy_insn_p (rtx);\n static bool sh_rtx_costs (rtx, int, int, int *);\n static int sh_address_cost (rtx);\n+#ifdef TARGET_ADJUST_UNROLL_MAX\n static int sh_adjust_unroll_max (struct loop *, int, int, int, int);\n+#endif\n static int shmedia_target_regs_stack_space (HARD_REG_SET *);\n static int shmedia_reserve_space_for_target_registers_p (int, HARD_REG_SET *);\n static int shmedia_target_regs_stack_adjust (HARD_REG_SET *);\n@@ -7554,7 +7556,7 @@ general_movsrc_operand (rtx op, enum machine_mode mode)\n   if (TARGET_SHMEDIA && 1\n       && GET_CODE (op) == SUBREG && GET_MODE (op) == mode\n       && SUBREG_REG (op) == const0_rtx && subreg_lowpart_p (op))\n-    /* FIXME */ abort (); // return 1;\n+    /* FIXME */ abort (); /* return 1; */\n   return general_operand (op, mode);\n }\n \n@@ -8766,9 +8768,7 @@ mark_constant_pool_use (rtx x)\n }\n \n int\n-ua_offset (c, mode)\n-     rtx c;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+ua_offset (rtx c, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return GET_CODE (c) == CONST_INT && CONST_OK_FOR_I06 (INTVAL (c));\n }"}]}