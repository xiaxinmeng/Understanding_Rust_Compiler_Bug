{"sha": "7af4b20d83a8ce3033148f0d14c2e725791a7afd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmNGIyMGQ4M2E4Y2UzMDMzMTQ4ZjBkMTRjMmU3MjU3OTFhN2FmZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-07T11:26:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-07T11:26:08Z"}, "message": "gimple-parser.c (c_parser_gimple_expr_list): Simplify.\n\n2017-02-07  Richard Biener  <rguenther@suse.de>\n\n\tc/\n\t* gimple-parser.c (c_parser_gimple_expr_list): Simplify.\n\t(c_parser_gimple_postfix_expression_after_primary):\n\tDo not use c_build_function_call_vec to avoid folding and promotion.\n\tSimplify.\n\n\t* gcc.dg/gimplefe-23.c: New testcase.\n\t* gcc.dg/gimplefe-24.c: Likewise.\n\nFrom-SVN: r245244", "tree": {"sha": "0e37c75259436cdd13220d04e15726e6b65ffded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e37c75259436cdd13220d04e15726e6b65ffded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7af4b20d83a8ce3033148f0d14c2e725791a7afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af4b20d83a8ce3033148f0d14c2e725791a7afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af4b20d83a8ce3033148f0d14c2e725791a7afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af4b20d83a8ce3033148f0d14c2e725791a7afd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4166fe55334f1d4e1c2615792fca5b5ebc23eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4166fe55334f1d4e1c2615792fca5b5ebc23eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4166fe55334f1d4e1c2615792fca5b5ebc23eee"}], "stats": {"total": 121, "additions": 65, "deletions": 56}, "files": [{"sha": "1ab194a631077fe289ff51b8c50a3951c7201533", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7af4b20d83a8ce3033148f0d14c2e725791a7afd", "patch": "@@ -1,3 +1,10 @@\n+2017-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_expr_list): Simplify.\n+\t(c_parser_gimple_postfix_expression_after_primary):\n+\tDo not use c_build_function_call_vec to avoid folding and promotion.\n+\tSimplify.\n+\n 2017-01-25  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR lto/79061"}, {"sha": "e167e420150424b364f0734fdac877f83547c88d", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=7af4b20d83a8ce3033148f0d14c2e725791a7afd", "patch": "@@ -73,8 +73,7 @@ static void c_parser_gimple_switch_stmt (c_parser *, gimple_seq *);\n static void c_parser_gimple_return_stmt (c_parser *, gimple_seq *);\n static void c_finish_gimple_return (location_t, tree);\n static tree c_parser_gimple_paren_condition (c_parser *);\n-static vec<tree, va_gc> *c_parser_gimple_expr_list (c_parser *,\n-\t\t    vec<tree, va_gc> **, vec<location_t> *);\n+static void c_parser_gimple_expr_list (c_parser *, vec<tree> *);\n \n \n /* Parse the body of a function declaration marked with \"__GIMPLE\".  */\n@@ -898,10 +897,6 @@ c_parser_gimple_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t\t  location_t expr_loc,\n \t\t\t\t\t\t  struct c_expr expr)\n {\n-  struct c_expr orig_expr;\n-  vec<tree, va_gc> *exprlist;\n-  vec<tree, va_gc> *origtypes = NULL;\n-  vec<location_t> arg_loc = vNULL;\n   location_t start;\n   location_t finish;\n   tree ident;\n@@ -936,34 +931,16 @@ c_parser_gimple_postfix_expression_after_primary (c_parser *parser,\n \t  {\n \t    /* Function call.  */\n \t    c_parser_consume_token (parser);\n-\t    if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n-\t      exprlist = NULL;\n-\t    else\n-\t      exprlist = c_parser_gimple_expr_list (parser, &origtypes,\n-\t\t\t\t\t\t    &arg_loc);\n+\t    auto_vec<tree> exprlist;\n+\t    if (! c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n+\t      c_parser_gimple_expr_list (parser, &exprlist);\n \t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t       \"expected %<)%>\");\n-\t    orig_expr = expr;\n-\t    start = expr.get_start ();\n-\t    finish = c_parser_tokens_buf (parser, 0)->get_finish ();\n-\t    expr.value = c_build_function_call_vec (expr_loc, arg_loc,\n-\t\t\t\t\t\t    expr.value,\n-\t\t\t\t\t\t    exprlist, origtypes);\n-\t    set_c_expr_source_range (&expr, start, finish);\n-\n+\t    expr.value = build_call_array_loc\n+\t\t(expr_loc, TREE_TYPE (TREE_TYPE (expr.value)),\n+\t\t expr.value, exprlist.length (), exprlist.address ());\n \t    expr.original_code = ERROR_MARK;\n-\t    if (TREE_CODE (expr.value) == INTEGER_CST\n-\t\t&& TREE_CODE (orig_expr.value) == FUNCTION_DECL\n-\t\t&& DECL_BUILT_IN_CLASS (orig_expr.value) == BUILT_IN_NORMAL\n-\t\t&& DECL_FUNCTION_CODE (orig_expr.value) == BUILT_IN_CONSTANT_P)\n-\t      expr.original_code = C_MAYBE_CONST_EXPR;\n \t    expr.original_type = NULL;\n-\t    if (exprlist)\n-\t      {\n-\t\trelease_tree_vector (exprlist);\n-\t\trelease_tree_vector (origtypes);\n-\t      }\n-\t    arg_loc.release ();\n \t    break;\n \t  }\n \tcase CPP_DOT:\n@@ -1058,41 +1035,19 @@ c_parser_gimple_postfix_expression_after_primary (c_parser *parser,\n \n  */\n \n-static vec<tree, va_gc> *\n-c_parser_gimple_expr_list (c_parser *parser, vec<tree, va_gc> **p_orig_types,\n-\t\t\t   vec<location_t> *locations)\n+static void\n+c_parser_gimple_expr_list (c_parser *parser, vec<tree> *ret)\n {\n-  vec<tree, va_gc> *ret;\n-  vec<tree, va_gc> *orig_types;\n   struct c_expr expr;\n-  location_t loc = c_parser_peek_token (parser)->location;\n-\n-  ret = make_tree_vector ();\n-  if (p_orig_types == NULL)\n-    orig_types = NULL;\n-  else\n-    orig_types = make_tree_vector ();\n \n   expr = c_parser_gimple_unary_expression (parser);\n-  vec_safe_push (ret, expr.value);\n-  if (orig_types)\n-    vec_safe_push (orig_types, expr.original_type);\n-  if (locations)\n-    locations->safe_push (loc);\n+  ret->safe_push (expr.value);\n   while (c_parser_next_token_is (parser, CPP_COMMA))\n     {\n       c_parser_consume_token (parser);\n-      loc = c_parser_peek_token (parser)->location;\n       expr = c_parser_gimple_unary_expression (parser);\n-      vec_safe_push (ret, expr.value);\n-      if (orig_types)\n-\tvec_safe_push (orig_types, expr.original_type);\n-      if (locations)\n-\tlocations->safe_push (loc);\n+      ret->safe_push (expr.value);\n     }\n-  if (orig_types)\n-    *p_orig_types = orig_types;\n-  return ret;\n }\n \n /* Parse gimple label."}, {"sha": "517d5621bacff071e001ee97cc3059a95dac5df3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7af4b20d83a8ce3033148f0d14c2e725791a7afd", "patch": "@@ -1,3 +1,8 @@\n+2017-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-23.c: New testcase.\n+\t* gcc.dg/gimplefe-24.c: Likewise.\n+\n 2017-02-07  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/test_frame_1.c: Scan epilogue with"}, {"sha": "05f87ed4df4e4e981b72f3cf18f0acdc1b81fdbe", "filename": "gcc/testsuite/gcc.dg/gimplefe-23.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-23.c?ref=7af4b20d83a8ce3033148f0d14c2e725791a7afd", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+short int __GIMPLE ()\n+foo (short int s)\n+{\n+  short int D_1803;\n+\n+bb_2:\n+  D_1803 = s;\n+\n+L0:\n+  return D_1803;\n+\n+}\n+\n+int __GIMPLE ()\n+main (int argc, char * * argv)\n+{\n+  short int s;\n+  int D_1805;\n+  int _1;\n+  short _2;\n+\n+bb_2:\n+  s = (short int) argc;\n+  _1 = (int) s;\n+  _2 = foo (_1);\n+  D_1805 = (int) _2;\n+\n+L0:\n+  return D_1805;\n+}"}, {"sha": "1f8dbb472538d883d60ffcffbdb0f20859bb4023", "filename": "gcc/testsuite/gcc.dg/gimplefe-24.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7af4b20d83a8ce3033148f0d14c2e725791a7afd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-24.c?ref=7af4b20d83a8ce3033148f0d14c2e725791a7afd", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+int __GIMPLE foo(int a)\n+{\n+  int t1;\n+  t1_1 = __builtin_abs (a);\n+  return t1_1;\n+}"}]}