{"sha": "25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhYTA1OWU2M2ZlNWI3NTllMThmZGNiN2NhYzRiNTE4NjhhNDRkMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-11T15:34:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-11T15:34:46Z"}, "message": "tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid redundant lookups, make looking through aggregate copies stronger.\n\n2011-08-11  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid redundant\n\tlookups, make looking through aggregate copies stronger.\n\n\t* g++.dg/tree-ssa/pr41186.C: Un-XFAIL.\n\nFrom-SVN: r177672", "tree": {"sha": "3a96213939be6830b497510e57e5946effbabfec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a96213939be6830b497510e57e5946effbabfec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3627ac1ad60986ccd4b6682ebc69d1be4bcb3d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3627ac1ad60986ccd4b6682ebc69d1be4bcb3d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3627ac1ad60986ccd4b6682ebc69d1be4bcb3d16"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "c2c62bc5f21c96bbdb7a6b5cf24e6f45a85a7e5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "patch": "@@ -1,3 +1,8 @@\n+2011-08-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid redundant\n+\tlookups, make looking through aggregate copies stronger.\n+\n 2011-08-11  Richard Henderson  <rth@redhat.com>\n \n \tPR bootstrap/50018"}, {"sha": "8c1dcfd7b4f6bedf28cd717b489bb0178e0031e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "patch": "@@ -1,3 +1,7 @@\n+2011-08-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* g++.dg/tree-ssa/pr41186.C: Un-XFAIL.\n+\n 2011-08-11  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/graphite/run-id-pr47593.c: Remove -m32."}, {"sha": "cc685b207f1c80da3e4561b1042022f128dcd0db", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr41186.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C?ref=25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-sra -fdump-tree-fre1-details\" } */\n \n struct Foo {\n   Foo() {};\n@@ -30,6 +30,6 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump \"Replaced b1.b with 1\" \"fre1\" } } */\n-/* { dg-final { scan-tree-dump \"Replaced b1.i with 0\" \"fre1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Replaced b1.f with 1\" \"fre1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced b1.D.\\[0-9\\]*.i with 0\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced b1.D.\\[0-9\\]*.f with 1\" \"fre1\" } } */\n /* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "d65b9ebe9c26a1f9e350f1675ca29db1cd26ca58", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aa059e63fe5b759e18fdcb7cac4b51868a44d0/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=25aa059e63fe5b759e18fdcb7cac4b51868a44d0", "patch": "@@ -1351,17 +1351,27 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n     {\n       VEC (vn_reference_op_s, heap) *tem;\n       tree lhs = gimple_assign_lhs (def_stmt);\n+      bool valueized_anything = false;\n       /* Avoid re-allocation overhead.  */\n       VEC_truncate (vn_reference_op_s, lhs_ops, 0);\n       copy_reference_ops_from_ref (lhs, &lhs_ops);\n       tem = lhs_ops;\n-      lhs_ops = valueize_refs (lhs_ops);\n+      lhs_ops = valueize_refs_1 (lhs_ops, &valueized_anything);\n       gcc_assert (lhs_ops == tem);\n-      lhs_ref_ok = ao_ref_init_from_vn_reference (&lhs_ref, get_alias_set (lhs),\n-\t\t\t\t\t\t  TREE_TYPE (lhs), lhs_ops);\n-      if (lhs_ref_ok\n-\t  && !refs_may_alias_p_1 (ref, &lhs_ref, true))\n-\treturn NULL;\n+      if (valueized_anything)\n+\t{\n+\t  lhs_ref_ok = ao_ref_init_from_vn_reference (&lhs_ref,\n+\t\t\t\t\t\t      get_alias_set (lhs),\n+\t\t\t\t\t\t      TREE_TYPE (lhs), lhs_ops);\n+\t  if (lhs_ref_ok\n+\t      && !refs_may_alias_p_1 (ref, &lhs_ref, true))\n+\t    return NULL;\n+\t}\n+      else\n+\t{\n+\t  ao_ref_init (&lhs_ref, lhs);\n+\t  lhs_ref_ok = true;\n+\t}\n     }\n \n   base = ao_ref_base (ref);\n@@ -1469,6 +1479,20 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  j--;\n \t}\n \n+      /* ???  The innermost op should always be a MEM_REF and we already\n+         checked that the assignment to the lhs kills vr.  Thus for\n+\t aggregate copies using char[] types the vn_reference_op_eq\n+\t may fail when comparing types for compatibility.  But we really\n+\t don't care here - further lookups with the rewritten operands\n+\t will simply fail if we messed up types too badly.  */\n+      if (j == 0 && i == 0\n+\t  && VEC_index (vn_reference_op_s, lhs_ops, 0)->opcode == MEM_REF\n+\t  && VEC_index (vn_reference_op_s, vr->operands, i)->opcode == MEM_REF\n+\t  && tree_int_cst_equal\n+\t       (VEC_index (vn_reference_op_s, lhs_ops, 0)->op0,\n+\t\tVEC_index (vn_reference_op_s, vr->operands, i)->op0))\n+\ti--, j--;\n+\n       /* i now points to the first additional op.\n \t ???  LHS may not be completely contained in VR, one or more\n \t VIEW_CONVERT_EXPRs could be in its way.  We could at least"}]}