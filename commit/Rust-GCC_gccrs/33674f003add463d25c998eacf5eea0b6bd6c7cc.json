{"sha": "33674f003add463d25c998eacf5eea0b6bd6c7cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2NzRmMDAzYWRkNDYzZDI1Yzk5OGVhY2Y1ZWVhMGI2YmQ2YzdjYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-15T09:02:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-15T09:02:30Z"}, "message": "locale_facets.tcc (money_get<>::_M_extract): Adjust the logic underlying the parsing of symbol to deal correctly with an...\n\n2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n\tAdjust the logic underlying the parsing of symbol to deal\n\tcorrectly with an optional sign component (i.e., when either\n\tnegative_sign or positive_sign is empty)\n\t* testsuite/22_locale/money_get/get/char/19.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/19.cc: New.\n\n2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n\tDo not accept an incomplete currency symbol.\n\t* testsuite/22_locale/money_get/get/char/18.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/18.cc: New.\n\nFrom-SVN: r79491", "tree": {"sha": "e6b9bf11a13a7a1d457822fdca9f858c9c5b62c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6b9bf11a13a7a1d457822fdca9f858c9c5b62c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33674f003add463d25c998eacf5eea0b6bd6c7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33674f003add463d25c998eacf5eea0b6bd6c7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33674f003add463d25c998eacf5eea0b6bd6c7cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33674f003add463d25c998eacf5eea0b6bd6c7cc/comments", "author": null, "committer": null, "parents": [{"sha": "d08418fa778b010bb8f18e2390a0d976c491e14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08418fa778b010bb8f18e2390a0d976c491e14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d08418fa778b010bb8f18e2390a0d976c491e14f"}], "stats": {"total": 442, "additions": 427, "deletions": 15}, "files": [{"sha": "ff6a3977f61c53699f9f1223aa4ca707c7fa8549", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -1,3 +1,19 @@\n+2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n+\tAdjust the logic underlying the parsing of symbol to deal\n+\tcorrectly with an optional sign component (i.e., when either\n+\tnegative_sign or positive_sign is empty) \n+\t* testsuite/22_locale/money_get/get/char/19.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/19.cc: New.\n+\n+2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n+\tDo not accept an incomplete currency symbol.\n+\t* testsuite/22_locale/money_get/get/char/18.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/18.cc: New.\n+\n 2004-03-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/allocator: New."}, {"sha": "e5c8e0bc545a5936a8686d372306ca8c53c95cf8", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -1185,6 +1185,9 @@ namespace std\n \tbool __negative = false;\n \t// Sign size.\n \tsize_type __sign_size = 0;\n+\t// True if sign is mandatory.\n+\tconst bool __mandatory_sign = (__lc->_M_positive_sign_size\n+\t\t\t\t       && __lc->_M_negative_sign_size);\n \t// String of grouping info from thousands_sep plucked from __units.\n \tstring __grouping_tmp;\n \tif (__lc->_M_use_grouping)\n@@ -1211,21 +1214,30 @@ namespace std\n \t    switch (__which)\n \t      {\n \t      case money_base::symbol:\n-\t\tif (__io.flags() & ios_base::showbase\n-\t\t    || __i < 2 || __sign_size > 1\n-\t\t    || ((static_cast<part>(__p.field[3]) != money_base::none)\n-\t\t\t&& __i == 2))\n+\t\t// According to 22.2.6.1.2, p2, symbol is required\n+\t\t// if (__io.flags() & ios_base::showbase), otherwise\n+\t\t// is optional and consumed only if other characters\n+\t\t// are needed to complete the format.\n+\t\tif (__io.flags() & ios_base::showbase || __sign_size > 1\n+\t\t    || __i == 0\n+\t\t    || (__i == 1 && (__mandatory_sign\n+\t\t\t\t     || (static_cast<part>(__p.field[0])\n+\t\t\t\t\t == sign)\n+\t\t\t\t     || (static_cast<part>(__p.field[2])\n+\t\t\t\t\t == space)))\n+\t\t    || (__i == 2 && ((static_cast<part>(__p.field[3])\n+\t\t\t\t      == money_base::value)\n+\t\t\t\t     || __mandatory_sign\n+\t\t\t\t     && (static_cast<part>(__p.field[3])\n+\t\t\t\t\t == money_base::sign))))\n \t\t  {\n-\t\t    // According to 22.2.6.1.2, p2, symbol is required\n-\t\t    // if (__io.flags() & ios_base::showbase), otherwise\n-\t\t    // is optional and consumed only if other characters\n-\t\t    // are needed to complete the format.\n \t\t    const size_type __len = __lc->_M_curr_symbol_size;\n \t\t    size_type __j = 0;\n \t\t    for (; __beg != __end && __j < __len\n \t\t\t   && *__beg == __lc->_M_curr_symbol[__j];\n \t\t\t ++__beg, ++__j);\n-\t\t    if (__j != __len && (__io.flags() & ios_base::showbase))\n+\t\t    if (__j != __len\n+\t\t\t&& (__j || __io.flags() & ios_base::showbase))\n \t\t      __testvalid = false;\n \t\t  }\n \t\tbreak;\n@@ -1249,12 +1261,8 @@ namespace std\n \t\t  // \"... if no sign is detected, the result is given the sign\n \t\t  // that corresponds to the source of the empty string\"\n \t\t  __negative = true;\n-\t\telse if (__lc->_M_positive_sign_size\n-\t\t\t && __lc->_M_negative_sign_size)\n-\t\t  {\n-\t\t    // Sign is mandatory.\n-\t\t    __testvalid = false;\n-\t\t  }\n+\t\telse if (__mandatory_sign)\n+\t\t  __testvalid = false;\n \t\tbreak;\n \t      case money_base::value:\n \t\t// Extract digits, remove and stash away the"}, {"sha": "3da65de43d157e05dd6c184d3af7383452caf038", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/18.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F18.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F18.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F18.cc?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -0,0 +1,69 @@\n+// 2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// If (str.flags() & str.showbase) is false, the currency symbol is optional,\n+// but, if found, must be consumed entirely.\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n+  VERIFY( loc_c != loc_hk );\n+  \n+  iterator_type end, end01, end02;\n+  istringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get =\n+    use_facet<money_get<char> >(iss.getloc()); \n+\n+  iss.str(\"HK7,200,000,000.00\"); \n+  iterator_type is_it01(iss);\n+  string result01;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get.get(is_it01, end, false, iss, err01, result01);\n+  VERIFY( err01 == ios_base::failbit );\n+  VERIFY( *end01 == '7' );\n+\n+  iss.str(\"(HK100,000,000,000.00)\"); \n+  iterator_type is_it02(iss);\n+  string result02;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get.get(is_it02, end, true, iss, err02, result02);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == '1' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5d9dea2be1ea84902a411470916552b9d36f3cab", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/19.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F19.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F19.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F19.cc?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -0,0 +1,125 @@\n+// 2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_01 : public std::moneypunct<char, false>\n+{\n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"\"; }\n+  std::string do_negative_sign() const { return \"\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, symbol, none, sign } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_02 : public std::moneypunct<char, false>\n+{\n+  std::string do_curr_symbol() const { return \"%\"; }\n+  std::string do_positive_sign() const { return \"\"; }\n+  std::string do_negative_sign() const { return \"-\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, symbol, sign, none } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_03 : public std::moneypunct<char, false>\n+{\n+  std::string do_curr_symbol() const { return \"&\"; }\n+  std::string do_positive_sign() const { return \"\"; }\n+  std::string do_negative_sign() const { return \"\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, space, symbol, sign } };\n+    return pat;\n+  }\n+};\n+\n+// When both do_positive_sign and do_negative_sign return an empty\n+// string, patterns of the forms { value, symbol, none, sign },\n+// { value, symbol, sign, none } and { X, Y, symbol, sign } imply\n+// that the symbol is not consumed since no other characters are\n+// needed to complete the format.\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_01(locale::classic(), new My_money_io_01);\n+  locale loc_02(locale::classic(), new My_money_io_02);\n+  locale loc_03(locale::classic(), new My_money_io_03);\n+\n+  iterator_type end, end01, end02, end03;\n+  istringstream iss_01, iss_02, iss_03;\n+  iss_01.imbue(loc_01);\n+  iss_02.imbue(loc_02);\n+  iss_03.imbue(loc_03);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get_01 =\n+    use_facet<money_get<char> >(iss_01.getloc());\n+  const money_get<char>& mon_get_02 =\n+    use_facet<money_get<char> >(iss_02.getloc());\n+  const money_get<char>& mon_get_03 =\n+    use_facet<money_get<char> >(iss_03.getloc());\n+\n+  iss_01.str(\"10$\"); \n+  iterator_type is_it01(iss_01);\n+  string result01;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get_01.get(is_it01, end, false, iss_01, err01, result01);\n+  VERIFY( err01 == ios_base::goodbit );\n+  VERIFY( *end01 == '$' );\n+\n+  iss_02.str(\"50%\");\n+  iterator_type is_it02(iss_02);\n+  string result02;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get_02.get(is_it02, end, false, iss_02, err02, result02);\n+  VERIFY( err02 == ios_base::goodbit );\n+  VERIFY( *end02 == '%' );\n+\n+  iss_03.str(\"7 &\");\n+  iterator_type is_it03(iss_03);\n+  string result03;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  end03 = mon_get_03.get(is_it03, end, false, iss_03, err03, result03);\n+  VERIFY( err03 == ios_base::goodbit );\n+  VERIFY( *end03 == '&' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "285de23627664d895bc2d7746ef06807a71ab331", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/18.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F18.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F18.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F18.cc?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -0,0 +1,69 @@\n+// 2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// If (str.flags() & str.showbase) is false, the currency symbol is optional,\n+// but, if found, must be consumed entirely.\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n+  VERIFY( loc_c != loc_hk );\n+  \n+  iterator_type end, end01, end02;\n+  wistringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get =\n+    use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  iss.str(L\"HK7,200,000,000.00\"); \n+  iterator_type is_it01(iss);\n+  wstring result01;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get.get(is_it01, end, false, iss, err01, result01);\n+  VERIFY( err01 == ios_base::failbit );\n+  VERIFY( *end01 == L'7' );\n+\n+  iss.str(L\"(HK100,000,000,000.00)\"); \n+  iterator_type is_it02(iss);\n+  wstring result02;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get.get(is_it02, end, true, iss, err02, result02);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == L'1' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "93c63e6ea294bfb1122b30083b3c50a5854ad7ba", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/19.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F19.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33674f003add463d25c998eacf5eea0b6bd6c7cc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F19.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F19.cc?ref=33674f003add463d25c998eacf5eea0b6bd6c7cc", "patch": "@@ -0,0 +1,125 @@\n+// 2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_01 : public std::moneypunct<wchar_t, false>\n+{\n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"\"; }\n+  std::wstring do_negative_sign() const { return L\"\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, symbol, none, sign } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_02 : public std::moneypunct<wchar_t, false>\n+{\n+  std::wstring do_curr_symbol() const { return L\"%\"; }\n+  std::wstring do_positive_sign() const { return L\"\"; }\n+  std::wstring do_negative_sign() const { return L\"-\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, symbol, sign, none } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_03 : public std::moneypunct<wchar_t, false>\n+{\n+  std::wstring do_curr_symbol() const { return L\"&\"; }\n+  std::wstring do_positive_sign() const { return L\"\"; }\n+  std::wstring do_negative_sign() const { return L\"\"; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { value, space, symbol, sign } };\n+    return pat;\n+  }\n+};\n+\n+// When both do_positive_sign and do_negative_sign return an empty\n+// string, patterns of the forms { value, symbol, none, sign },\n+// { value, symbol, sign, none } and { X, Y, symbol, sign } imply\n+// that the symbol is not consumed since no other characters are\n+// needed to complete the format.\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_01(locale::classic(), new My_money_io_01);\n+  locale loc_02(locale::classic(), new My_money_io_02);\n+  locale loc_03(locale::classic(), new My_money_io_03);\n+\n+  iterator_type end, end01, end02, end03;\n+  wistringstream iss_01, iss_02, iss_03;\n+  iss_01.imbue(loc_01);\n+  iss_02.imbue(loc_02);\n+  iss_03.imbue(loc_03);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get_01 =\n+    use_facet<money_get<wchar_t> >(iss_01.getloc());\n+  const money_get<wchar_t>& mon_get_02 =\n+    use_facet<money_get<wchar_t> >(iss_02.getloc());\n+  const money_get<wchar_t>& mon_get_03 =\n+    use_facet<money_get<wchar_t> >(iss_03.getloc());\n+\n+  iss_01.str(L\"10$\"); \n+  iterator_type is_it01(iss_01);\n+  wstring result01;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  end01 = mon_get_01.get(is_it01, end, false, iss_01, err01, result01);\n+  VERIFY( err01 == ios_base::goodbit );\n+  VERIFY( *end01 == L'$' );\n+\n+  iss_02.str(L\"50%\");\n+  iterator_type is_it02(iss_02);\n+  wstring result02;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get_02.get(is_it02, end, false, iss_02, err02, result02);\n+  VERIFY( err02 == ios_base::goodbit );\n+  VERIFY( *end02 == L'%' );\n+\n+  iss_03.str(L\"7 &\");\n+  iterator_type is_it03(iss_03);\n+  wstring result03;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  end03 = mon_get_03.get(is_it03, end, false, iss_03, err03, result03);\n+  VERIFY( err03 == ios_base::goodbit );\n+  VERIFY( *end03 == L'&' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}