{"sha": "7b6078223126fb3927b8199d9048e4f0cccc17e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2MDc4MjIzMTI2ZmIzOTI3YjgxOTlkOTA0OGU0ZjBjY2NjMTdlOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2017-09-25T08:47:41Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2017-09-25T08:47:41Z"}, "message": "[Patch, Darwin] Fix PR80556 by linking the system unwinder ahead of libgcc_eh.\n\n\tPR target/80556\n\t* config/i386/darwin.h (REAL_LIB_SPEC): New; put libSystem ahead\n\tof libgcc_eh for m64.\n\t* config/i386/darwin64.h: Likewise.\n\n/* WORKAROUND pr80556:\n   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n   updated to include new images, and might not even be valid for a single\n   image.\n   Therefore, for 64b exes at least, we must use the libunwind implementation,\n   even when static-libgcc is specified.  We put libSystem first so that\n   unwinder symbols are satisfied from there.\n\nFrom-SVN: r253137", "tree": {"sha": "782cacda1a2e6bd9023f670e135085e992c974c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/782cacda1a2e6bd9023f670e135085e992c974c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b6078223126fb3927b8199d9048e4f0cccc17e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b6078223126fb3927b8199d9048e4f0cccc17e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b6078223126fb3927b8199d9048e4f0cccc17e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b6078223126fb3927b8199d9048e4f0cccc17e9/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7fb5c08f36ea1c1aeebe1710839d1c0d5e68674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7fb5c08f36ea1c1aeebe1710839d1c0d5e68674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7fb5c08f36ea1c1aeebe1710839d1c0d5e68674"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "aae06a1e87c00143996a0817fcf252eb83192b4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b6078223126fb3927b8199d9048e4f0cccc17e9", "patch": "@@ -1,3 +1,10 @@\n+2017-09-25  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/80556\n+\t* config/i386/darwin.h (REAL_LIB_SPEC): New; put libSystem ahead\n+\tof libgcc_eh for m64.\n+\t* config/i386/darwin64.h: Likewise.\n+\n 2017-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/82144"}, {"sha": "321ed27fa3a8484947d56e45b1a3aa313a8122ed", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=7b6078223126fb3927b8199d9048e4f0cccc17e9", "patch": "@@ -39,6 +39,32 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n #endif\n \n+/* WORKAROUND pr80556:\n+   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n+   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n+   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n+   updated to include new images, and might not even be valid for a single\n+   image.\n+   Therefore, for 64b exes at least, we must use the libunwind implementation,\n+   even when static-libgcc is specified.  We put libSystem first so that\n+   unwinder symbols are satisfied from there. */\n+#undef REAL_LIBGCC_SPEC\n+#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n+   \"%{static-libgcc|static: \t\t\t\t\t\t   \\\n+      %{m64:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)}\t   \\\n+        -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n+      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n+       -lgcc ;\t\t\t\t\t\t\t\t   \\\n+      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n+       -lgcc }\"\n+\n /* Size of the Obj-C jump buffer.  */\n #define OBJC_JBLEN ((TARGET_64BIT) ? ((9 * 2) + 3 + 16) : (18))\n "}, {"sha": "32cb789c191a6c02d8b50fe7778da3f4d69dcebe", "filename": "gcc/config/i386/darwin64.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2Fconfig%2Fi386%2Fdarwin64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b6078223126fb3927b8199d9048e4f0cccc17e9/gcc%2Fconfig%2Fi386%2Fdarwin64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin64.h?ref=7b6078223126fb3927b8199d9048e4f0cccc17e9", "patch": "@@ -21,6 +21,32 @@ along with GCC; see the file COPYING3.  If not see\n #undef  DARWIN_ARCH_SPEC\n #define DARWIN_ARCH_SPEC \"%{m32:i386;:x86_64}\"\n \n+/* WORKAROUND pr80556:\n+   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n+   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n+   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n+   updated to include new images, and might not even be valid for a single\n+   image.\n+   Therefore, for 64b exes at least, we must use the libunwind implementation,\n+   even when static-libgcc is specified.  We put libSystem first so that\n+   unwinder symbols are satisfied from there. */\n+#undef REAL_LIBGCC_SPEC\n+#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n+   \"%{static-libgcc|static: \t\t\t\t\t\t   \\\n+      %{!m32:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)}\t   \\\n+        -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n+      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n+       -lgcc ;\t\t\t\t\t\t\t\t   \\\n+      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n+       -lgcc }\"\n+\n #undef  DARWIN_SUBARCH_SPEC\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n "}]}