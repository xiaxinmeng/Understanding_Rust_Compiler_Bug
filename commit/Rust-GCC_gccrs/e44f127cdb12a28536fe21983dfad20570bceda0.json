{"sha": "e44f127cdb12a28536fe21983dfad20570bceda0", "node_id": "C_kwDOANBUbNoAKGU0NGYxMjdjZGIxMmEyODUzNmZlMjE5ODNkZmFkMjA1NzBiY2VkYTA", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-05T10:36:41Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-07T11:36:58Z"}, "message": "ast: Add difference between attributes\n\nAdd a boolean to tell inner and outer attributes ast nodes appart. This\nmeant refactoring a bit their parsing function.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: Add boolean for differenciation.\n\t* parse/rust-parse-impl.h (Parser::parse_doc_comment): Change\n\tfunction interface to make code cleaner. It should return a body\n\tinstead of the whole attribute.\n\t(Parser::parse_inner_attribute): Specify the inner status of the\n\tnode.\n\t(Parser::parse_attribute_body): Change function interface to\n\tmake the code cleaner much like parse_doc_comment.\n\t(Parser::parse_outer_attribute): Specify outer status of the\n\tnode.\n\t* parse/rust-parse.h: Update functions prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "a43962685d333f2efbd03901ebb69761aee75e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43962685d333f2efbd03901ebb69761aee75e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e44f127cdb12a28536fe21983dfad20570bceda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44f127cdb12a28536fe21983dfad20570bceda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44f127cdb12a28536fe21983dfad20570bceda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44f127cdb12a28536fe21983dfad20570bceda0/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b137048583c2c22c585097119dba6a5fe06228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b137048583c2c22c585097119dba6a5fe06228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b137048583c2c22c585097119dba6a5fe06228"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "be9c7224ab2b046b2cbe25df1ba0e2bfd64c8ba4", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=e44f127cdb12a28536fe21983dfad20570bceda0", "patch": "@@ -456,6 +456,8 @@ struct Attribute\n \n   Location locus;\n \n+  bool inner_attribute;\n+\n   // TODO: maybe a variable storing whether attr input is parsed or not\n \n public:\n@@ -464,8 +466,9 @@ struct Attribute\n \n   // Constructor has pointer AttrInput for polymorphism reasons\n   Attribute (SimplePath path, std::unique_ptr<AttrInput> input,\n-\t     Location locus = Location ())\n-    : path (std::move (path)), attr_input (std::move (input)), locus (locus)\n+\t     Location locus = Location (), bool inner_attribute = false)\n+    : path (std::move (path)), attr_input (std::move (input)), locus (locus),\n+      inner_attribute (inner_attribute)\n   {}\n \n   // default destructor\n@@ -554,6 +557,8 @@ struct Attribute\n \n   std::string as_string () const;\n \n+  bool is_inner_attribute () const { return inner_attribute; }\n+\n   // no visitor pattern as not currently polymorphic\n \n   const SimplePath &get_path () const { return path; }"}, {"sha": "d49aa6f3d5c98eefdd7443fa8584620614460cc1", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=e44f127cdb12a28536fe21983dfad20570bceda0", "patch": "@@ -484,7 +484,7 @@ Parser<ManagedTokenSource>::parse_inner_attributes ()\n \n // Parse a inner or outer doc comment into an doc attribute\n template <typename ManagedTokenSource>\n-AST::Attribute\n+std::tuple<AST::SimplePath, std::unique_ptr<AST::AttrInput>, Location>\n Parser<ManagedTokenSource>::parse_doc_comment ()\n {\n   const_TokenPtr token = lexer.peek_token ();\n@@ -498,7 +498,7 @@ Parser<ManagedTokenSource>::parse_doc_comment ()\n   std::unique_ptr<AST::AttrInput> attr_input (\n     new AST::AttrInputLiteral (std::move (lit_expr)));\n   lexer.skip_token ();\n-  return AST::Attribute (std::move (attr_path), std::move (attr_input), locus);\n+  return std::make_tuple (std::move (attr_path), std::move (attr_input), locus);\n }\n \n // Parse a single inner attribute.\n@@ -507,7 +507,13 @@ AST::Attribute\n Parser<ManagedTokenSource>::parse_inner_attribute ()\n {\n   if (lexer.peek_token ()->get_id () == INNER_DOC_COMMENT)\n-    return parse_doc_comment ();\n+    {\n+      auto values = parse_doc_comment ();\n+      auto path = std::move (std::get<0> (values));\n+      auto input = std::move (std::get<1> (values));\n+      auto loc = std::get<2> (values);\n+      return AST::Attribute (std::move (path), std::move (input), loc, true);\n+    }\n \n   if (lexer.peek_token ()->get_id () != HASH)\n     {\n@@ -533,7 +539,13 @@ Parser<ManagedTokenSource>::parse_inner_attribute ()\n   if (!skip_token (LEFT_SQUARE))\n     return AST::Attribute::create_empty ();\n \n-  AST::Attribute actual_attribute = parse_attribute_body ();\n+  auto values = parse_attribute_body ();\n+\n+  auto path = std::move (std::get<0> (values));\n+  auto input = std::move (std::get<1> (values));\n+  auto loc = std::get<2> (values);\n+  auto actual_attribute\n+    = AST::Attribute (std::move (path), std::move (input), loc, true);\n \n   if (!skip_token (RIGHT_SQUARE))\n     return AST::Attribute::create_empty ();\n@@ -543,7 +555,7 @@ Parser<ManagedTokenSource>::parse_inner_attribute ()\n \n // Parses the body of an attribute (inner or outer).\n template <typename ManagedTokenSource>\n-AST::Attribute\n+std::tuple<AST::SimplePath, std::unique_ptr<AST::AttrInput>, Location>\n Parser<ManagedTokenSource>::parse_attribute_body ()\n {\n   Location locus = lexer.peek_token ()->get_locus ();\n@@ -558,13 +570,13 @@ Parser<ManagedTokenSource>::parse_attribute_body ()\n \n       // Skip past potential further info in attribute (i.e. attr_input)\n       skip_after_end_attribute ();\n-      return AST::Attribute::create_empty ();\n+      return std::make_tuple (std::move (attr_path), nullptr, Location ());\n     }\n \n   std::unique_ptr<AST::AttrInput> attr_input = parse_attr_input ();\n   // AttrInput is allowed to be null, so no checks here\n \n-  return AST::Attribute (std::move (attr_path), std::move (attr_input), locus);\n+  return std::make_tuple (std::move (attr_path), std::move (attr_input), locus);\n }\n \n /* Determines whether token is a valid simple path segment. This does not\n@@ -1161,7 +1173,13 @@ AST::Attribute\n Parser<ManagedTokenSource>::parse_outer_attribute ()\n {\n   if (lexer.peek_token ()->get_id () == OUTER_DOC_COMMENT)\n-    return parse_doc_comment ();\n+    {\n+      auto values = parse_doc_comment ();\n+      auto path = std::move (std::get<0> (values));\n+      auto input = std::move (std::get<1> (values));\n+      auto loc = std::get<2> (values);\n+      return AST::Attribute (std::move (path), std::move (input), loc, false);\n+    }\n \n   if (lexer.peek_token ()->get_id () == INNER_DOC_COMMENT)\n     {\n@@ -1199,7 +1217,12 @@ Parser<ManagedTokenSource>::parse_outer_attribute ()\n \n   lexer.skip_token ();\n \n-  AST::Attribute actual_attribute = parse_attribute_body ();\n+  auto values = parse_attribute_body ();\n+  auto path = std::move (std::get<0> (values));\n+  auto input = std::move (std::get<1> (values));\n+  auto loc = std::get<2> (values);\n+  auto actual_attribute\n+    = AST::Attribute (std::move (path), std::move (input), loc, true);\n \n   if (lexer.peek_token ()->get_id () != RIGHT_SQUARE)\n     return AST::Attribute::create_empty ();"}, {"sha": "6957b66a2bba4e44a576b9675d4d826d766f5e0e", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44f127cdb12a28536fe21983dfad20570bceda0/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=e44f127cdb12a28536fe21983dfad20570bceda0", "patch": "@@ -149,7 +149,8 @@ template <typename ManagedTokenSource> class Parser\n   AST::Visibility parse_visibility ();\n   std::unique_ptr<AST::IdentifierPattern> parse_identifier_pattern ();\n   std::unique_ptr<AST::TokenTree> parse_token_tree ();\n-  AST::Attribute parse_attribute_body ();\n+  std::tuple<AST::SimplePath, std::unique_ptr<AST::AttrInput>, Location>\n+  parse_attribute_body ();\n   AST::AttrVec parse_inner_attributes ();\n   std::unique_ptr<AST::MacroInvocation>\n   parse_macro_invocation (AST::AttrVec outer_attrs);\n@@ -172,7 +173,8 @@ template <typename ManagedTokenSource> class Parser\n   AST::AttrVec parse_outer_attributes ();\n   AST::Attribute parse_outer_attribute ();\n   std::unique_ptr<AST::AttrInput> parse_attr_input ();\n-  AST::Attribute parse_doc_comment ();\n+  std::tuple<AST::SimplePath, std::unique_ptr<AST::AttrInput>, Location>\n+  parse_doc_comment ();\n \n   // Path-related\n   AST::SimplePath parse_simple_path ();"}]}