{"sha": "c2a78352e509bdd1eb1092ff5447f17aeee7a651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhNzgzNTJlNTA5YmRkMWViMTA5MmZmNTQ0N2YxN2FlZWU3YTY1MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-07-04T23:18:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-07-04T23:18:06Z"}, "message": "Change 8bit divmod to HImode.\n\ngcc/\n\n2010-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR rtl-optimization/44695\n\t* config/i386/i386.md (extract_code): Removed.\n\t(<u>divmodqi4): Likewise.\n\t(divmodqi4): New.\n\t(udivmodqi4): Likewise.\n\t(divmodhiqi3): Change div/mod to HImode and extend operand 2 to\n\tHImode.\n\t(udivmodhiqi3): Likewise.\n\ngcc/testsuite/\n\n2010-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR rtl-optimization/44695\n\t* gcc.dg/torture/pr44695.c: New.\n\nFrom-SVN: r161813", "tree": {"sha": "97ee382d5c1eac24f16e452c5ce88bcfbe17d2e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ee382d5c1eac24f16e452c5ce88bcfbe17d2e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a78352e509bdd1eb1092ff5447f17aeee7a651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a78352e509bdd1eb1092ff5447f17aeee7a651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a78352e509bdd1eb1092ff5447f17aeee7a651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a78352e509bdd1eb1092ff5447f17aeee7a651/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4aa1c0d5927826c697c06dc9967d355eeb605605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa1c0d5927826c697c06dc9967d355eeb605605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa1c0d5927826c697c06dc9967d355eeb605605"}], "stats": {"total": 120, "additions": 91, "deletions": 29}, "files": [{"sha": "2b0f0ef3c6632e36cc8a6a94b01592f4ab706394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a78352e509bdd1eb1092ff5447f17aeee7a651", "patch": "@@ -1,3 +1,14 @@\n+2010-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/44695\n+\t* config/i386/i386.md (extract_code): Removed.\n+\t(<u>divmodqi4): Likewise.\n+\t(divmodqi4): New.\n+\t(udivmodqi4): Likewise.\n+\t(divmodhiqi3): Change div/mod to HImode and extend operand 2 to\n+\tHImode.\n+\t(udivmodhiqi3): Likewise.\n+\n 2010-07-04  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (input_edge): Do not care about resolution decisions."}, {"sha": "a82e3b63a00f33beb629b189f62181794c5d22c8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 60, "deletions": 29, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c2a78352e509bdd1eb1092ff5447f17aeee7a651", "patch": "@@ -760,8 +760,6 @@\n \n ;; Used in signed and unsigned divisions.\n (define_code_iterator any_div [div udiv])\n-(define_code_attr extract_code\n-  [(div \"SIGN_EXTRACT\") (udiv \"ZERO_EXTRACT\")])\n \n ;; Instruction prefix for signed and unsigned operations.\n (define_code_attr sgnprefix [(sign_extend \"i\") (zero_extend \"\")\n@@ -7308,9 +7306,9 @@\n \f\n ;; Divmod instructions.\n \n-(define_expand \"<u>divmodqi4\"\n+(define_expand \"divmodqi4\"\n   [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t   (any_div:QI\n+\t\t   (div:QI\n \t\t     (match_operand:QI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonimmediate_operand\" \"\")))\n \t      (set (match_operand:QI 3 \"register_operand\" \"\")\n@@ -7326,36 +7324,58 @@\n \n   /* Extend operands[1] to HImode.  Generate 8bit divide.  Result is\n      in AX.  */\n-  if (<extract_code> == SIGN_EXTRACT)\n-    {\n-      emit_insn (gen_extendqihi2 (tmp1, operands[1]));\n-      emit_insn (gen_divmodhiqi3 (tmp0, tmp1, operands[2]));\n+  emit_insn (gen_extendqihi2 (tmp1, operands[1]));\n+  emit_insn (gen_divmodhiqi3 (tmp0, tmp1, operands[2]));\n \n-      div = gen_rtx_DIV (QImode, operands[1], operands[2]);\n-      mod = gen_rtx_MOD (QImode, operands[1], operands[2]);\n+  /* Extract remainder from AH.  */\n+  tmp1 = gen_rtx_SIGN_EXTRACT (QImode, tmp0, GEN_INT (8), GEN_INT (8));\n+  insn = emit_move_insn (operands[3], tmp1);\n \n-      tmp1 = gen_rtx_<extract_code> (QImode, tmp0,\n-\t\t\t\t     GEN_INT (8), GEN_INT (8));\n-    }\n-  else\n-    {\n-      emit_insn (gen_zero_extendqihi2 (tmp1, operands[1]));\n-      emit_insn (gen_udivmodhiqi3 (tmp0, tmp1, operands[2]));\n+  mod = gen_rtx_MOD (QImode, operands[1], operands[2]);\n+  set_unique_reg_note (insn, REG_EQUAL, mod);\n+\n+  /* Extract quotient from AL.  */\n+  insn = emit_move_insn (operands[0], gen_lowpart (QImode, tmp0));\n \n-      div = gen_rtx_UDIV (QImode, operands[1], operands[2]);\n-      mod = gen_rtx_UMOD (QImode, operands[1], operands[2]);\n+  div = gen_rtx_DIV (QImode, operands[1], operands[2]);\n+  set_unique_reg_note (insn, REG_EQUAL, div);\n \n-      tmp1 = gen_rtx_<extract_code> (SImode, tmp0,\n-\t\t\t\t     GEN_INT (8), GEN_INT (8));\n-      tmp1 = simplify_gen_subreg (QImode, tmp1, SImode, 0);\n-    }\n+  DONE;\n+})\n+\n+(define_expand \"udivmodqi4\"\n+  [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t   (udiv:QI\n+\t\t     (match_operand:QI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:QI 3 \"register_operand\" \"\")\n+\t\t   (umod:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_QIMODE_MATH\"\n+{\n+  rtx div, mod, insn;\n+  rtx tmp0, tmp1;\n+  \n+  tmp0 = gen_reg_rtx (HImode);\n+  tmp1 = gen_reg_rtx (HImode);\n+\n+  /* Extend operands[1] to HImode.  Generate 8bit divide.  Result is\n+     in AX.  */\n+  emit_insn (gen_zero_extendqihi2 (tmp1, operands[1]));\n+  emit_insn (gen_udivmodhiqi3 (tmp0, tmp1, operands[2]));\n \n   /* Extract remainder from AH.  */\n+  tmp1 = gen_rtx_ZERO_EXTRACT (SImode, tmp0, GEN_INT (8), GEN_INT (8));\n+  tmp1 = simplify_gen_subreg (QImode, tmp1, SImode, 0);\n   insn = emit_move_insn (operands[3], tmp1);\n+\n+  mod = gen_rtx_UMOD (QImode, operands[1], operands[2]);\n   set_unique_reg_note (insn, REG_EQUAL, mod);\n \n   /* Extract quotient from AL.  */\n   insn = emit_move_insn (operands[0], gen_lowpart (QImode, tmp0));\n+\n+  div = gen_rtx_UDIV (QImode, operands[1], operands[2]);\n   set_unique_reg_note (insn, REG_EQUAL, div);\n \n   DONE;\n@@ -7364,15 +7384,22 @@\n ;; Divide AX by r/m8, with result stored in\n ;; AL <- Quotient\n ;; AH <- Remainder\n+;; Change div/mod to HImode and extend the second argument to HImode\n+;; so that mode of div/mod matches with mode of arguments.  Otherwise\n+;; combine may fail.\n (define_insn \"divmodhiqi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(ior:HI\n \t  (ashift:HI\n \t    (zero_extend:HI\n-\t      (mod:QI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n+\t      (truncate:QI\n+\t\t(mod:HI (match_operand:HI 1 \"register_operand\" \"0\")\n+\t\t\t(sign_extend:HI\n+\t\t\t  (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))))\n \t    (const_int 8))\n-\t  (zero_extend:HI (div:QI (match_dup 1) (match_dup 2)))))\n+\t  (zero_extend:HI\n+\t    (truncate:QI\n+\t      (div:HI (match_dup 1) (sign_extend:HI (match_dup 2)))))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_QIMODE_MATH\"\n   \"idiv{b}\\t%2\"\n@@ -7384,10 +7411,14 @@\n \t(ior:HI\n \t  (ashift:HI\n \t    (zero_extend:HI\n-\t      (umod:QI (match_operand:HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n+\t      (truncate:QI\n+\t\t(mod:HI (match_operand:HI 1 \"register_operand\" \"0\")\n+\t\t\t(zero_extend:HI\n+\t\t\t  (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))))\n \t    (const_int 8))\n-\t  (zero_extend:HI (udiv:QI (match_dup 1) (match_dup 2)))))\n+\t  (zero_extend:HI\n+\t    (truncate:QI\n+\t      (div:HI (match_dup 1) (zero_extend:HI (match_dup 2)))))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_QIMODE_MATH\"\n   \"div{b}\\t%2\""}, {"sha": "ca16bb680e5771beb5a6f46cc1667596cac4f8eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2a78352e509bdd1eb1092ff5447f17aeee7a651", "patch": "@@ -1,3 +1,8 @@\n+2010-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/44695\n+\t* gcc.dg/torture/pr44695.c: New.\n+\n 2010-07-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/16630"}, {"sha": "85bb4c7b9271ea5b3a067b05303afa0abbf840e5", "filename": "gcc/testsuite/gcc.dg/torture/pr44695.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr44695.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a78352e509bdd1eb1092ff5447f17aeee7a651/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr44695.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr44695.c?ref=c2a78352e509bdd1eb1092ff5447f17aeee7a651", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned char uint8_t;\n+\n+static uint8_t\n+safe_div_func_uint8_t_u_u (uint8_t ui1, uint8_t ui2)\n+{\n+  return ui2 ? ui2 : (ui1 / ui2);\n+}\n+\n+int\n+int81 (int x)\n+{\n+  return safe_div_func_uint8_t_u_u (1, 8 & x);\n+}"}]}