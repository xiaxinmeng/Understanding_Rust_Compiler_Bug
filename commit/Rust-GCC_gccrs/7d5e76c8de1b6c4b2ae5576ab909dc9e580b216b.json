{"sha": "7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1ZTc2YzhkZTFiNmM0YjJhZTU1NzZhYjkwOWRjOWU1ODBiMjE2Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-09T03:58:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-09T03:58:00Z"}, "message": "Core 624/N2932: Throw bad_array_new_length on overflow\n\tin array new size calculation.\n\nlibstdc++-v3/\n\t* libsupc++/new: Add std::bad_array_new_length.\n\t* libsupc++/bad_array_new.cc: New.\n\t* libsupc++/eh_aux_runtime.cc: Add __cxa_throw_bad_array_new_length.\n\t* libsupc++/Makefile.in: Build them.\n\t* config/abi/pre/gnu.ver: Add new symbols.\n\t* config/abi/pre/gnu-versioned-namespace.ver: Add new symbols.\ngcc/cp/\n\t* init.c (throw_bad_array_new_length): New.\n\t(build_new_1): Use it.  Don't warn about braced-init-list.\n\t(build_vec_init): Use it.\n\t* call.c (build_operator_new_call): Use it.\n\nFrom-SVN: r198731", "tree": {"sha": "09467b7a6778576ce54cf16a985769ff3c2dacb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09467b7a6778576ce54cf16a985769ff3c2dacb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0f36e5ee07dd1fa2d8345bcb1751aab3e95f980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f36e5ee07dd1fa2d8345bcb1751aab3e95f980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f36e5ee07dd1fa2d8345bcb1751aab3e95f980"}], "stats": {"total": 195, "additions": 184, "deletions": 11}, "files": [{"sha": "c2ce5d93087014edbcd6b60e5c58d7736b6b8b47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -1,5 +1,11 @@\n 2013-05-08  Jason Merrill  <jason@redhat.com>\n \n+\tCore 624/N2932\n+\t* init.c (throw_bad_array_new_length): New.\n+\t(build_new_1): Use it.  Don't warn about braced-init-list.\n+\t(build_vec_init): Use it.\n+\t* call.c (build_operator_new_call): Use it.\n+\n \tPR c++/57068\n \t* decl.c (grokdeclarator): Warn about ref-qualifiers here.\n \t* parser.c (cp_parser_ref_qualifier_seq_opt): Not here."}, {"sha": "bd8f531eea4ae38fd22890017972166fd0bbdc88", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -3951,8 +3951,13 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n     *fn = NULL_TREE;\n   /* Set to (size_t)-1 if the size check fails.  */\n   if (size_check != NULL_TREE)\n-    *size = fold_build3 (COND_EXPR, sizetype, size_check,\n-\t\t\t original_size, TYPE_MAX_VALUE (sizetype));\n+    {\n+      tree errval = TYPE_MAX_VALUE (sizetype);\n+      if (cxx_dialect >= cxx11)\n+\terrval = throw_bad_array_new_length ();\n+      *size = fold_build3 (COND_EXPR, sizetype, size_check,\n+\t\t\t   original_size, errval);\n+    }\n   vec_safe_insert (*args, 0, *size);\n   *args = resolve_args (*args, complain);\n   if (*args == NULL)"}, {"sha": "dec7390616786748220c704463585bbd8fdc1aef", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -5357,6 +5357,7 @@ extern tree build_value_init\t\t\t(tree, tsubst_flags_t);\n extern tree build_value_init_noctor\t\t(tree, tsubst_flags_t);\n extern tree build_offset_ref\t\t\t(tree, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern tree throw_bad_array_new_length\t\t(void);\n extern tree build_new\t\t\t\t(vec<tree, va_gc> **, tree, tree,\n \t\t\t\t\t\t vec<tree, va_gc> **, int,\n                                                  tsubst_flags_t);"}, {"sha": "765c47192cffcff8bf603cd200d046d0b21d176c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -2170,6 +2170,21 @@ diagnose_uninitialized_cst_or_ref_member (tree type, bool using_new, bool compla\n   return diagnose_uninitialized_cst_or_ref_member_1 (type, type, using_new, complain);\n }\n \n+/* Call __cxa_bad_array_new_length to indicate that the size calculation\n+   overflowed.  Pretend it returns sizetype so that it plays nicely in the\n+   COND_EXPR.  */\n+\n+tree\n+throw_bad_array_new_length (void)\n+{\n+  tree fn = get_identifier (\"__cxa_throw_bad_array_new_length\");\n+  if (!get_global_value_if_present (fn, &fn))\n+    fn = push_throw_library_fn (fn, build_function_type_list (sizetype,\n+\t\t\t\t\t\t\t      NULL_TREE));\n+\n+  return build_cxx_call (fn, 0, NULL, tf_warning_or_error);\n+}\n+\n /* Generate code for a new-expression, including calling the \"operator\n    new\" function, initializing the object, and, if an exception occurs\n    during construction, cleaning up.  The arguments are as for\n@@ -2472,9 +2487,12 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\touter_nelts_check = NULL_TREE;\n \t    }\n \t  /* Perform the overflow check.  */\n+\t  tree errval = TYPE_MAX_VALUE (sizetype);\n+\t  if (cxx_dialect >= cxx11)\n+\t    errval = throw_bad_array_new_length ();\n \t  if (outer_nelts_check != NULL_TREE)\n             size = fold_build3 (COND_EXPR, sizetype, outer_nelts_check,\n-                                size, TYPE_MAX_VALUE (sizetype));\n+                                size, errval);\n \t  /* Create the argument list.  */\n \t  vec_safe_insert (*placement, 0, size);\n \t  /* Do name-lookup to find the appropriate operator.  */\n@@ -2699,12 +2717,8 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t    domain = compute_array_index_type (NULL_TREE, nelts,\n \t\t\t\t\t\t       complain);\n \t\t  else\n-\t\t    {\n-\t\t      domain = NULL_TREE;\n-\t\t      if (CONSTRUCTOR_NELTS (vecinit) > 0)\n-\t\t\twarning (0, \"non-constant array size in new, unable \"\n-\t\t\t\t \"to verify length of initializer-list\");\n-\t\t    }\n+\t\t    /* We'll check the length at runtime.  */\n+\t\t    domain = NULL_TREE;\n \t\t  arraytype = build_cplus_array_type (type, domain);\n \t\t  vecinit = digest_init (arraytype, vecinit, complain);\n \t\t}\n@@ -3291,6 +3305,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n   tree obase = base;\n   bool xvalue = false;\n   bool errors = false;\n+  tree length_check = NULL_TREE;\n \n   if (TREE_CODE (atype) == ARRAY_TYPE && TYPE_DOMAIN (atype))\n     maxindex = array_type_nelts (atype);\n@@ -3309,6 +3324,14 @@ build_vec_init (tree base, tree maxindex, tree init,\n       && from_array != 2)\n     init = TARGET_EXPR_INITIAL (init);\n \n+  /* If we have a braced-init-list, make sure that the array\n+     is big enough for all the initializers.  */\n+  if (init && TREE_CODE (init) == CONSTRUCTOR\n+      && CONSTRUCTOR_NELTS (init) > 0\n+      && !TREE_CONSTANT (maxindex))\n+    length_check = fold_build2 (LT_EXPR, boolean_type_node, maxindex,\n+\t\t\t\tsize_int (CONSTRUCTOR_NELTS (init) - 1));\n+\n   if (init\n       && TREE_CODE (atype) == ARRAY_TYPE\n       && (from_array == 2\n@@ -3441,6 +3464,15 @@ build_vec_init (tree base, tree maxindex, tree init,\n       vec<constructor_elt, va_gc> *new_vec;\n       from_array = 0;\n \n+      if (length_check)\n+\t{\n+\t  tree throw_call;\n+\t    throw_call = throw_bad_array_new_length ();\n+\t  length_check = build3 (COND_EXPR, void_type_node, length_check,\n+\t\t\t\t throw_call, void_zero_node);\n+\t  finish_expr_stmt (length_check);\n+\t}\n+\n       if (try_const)\n \tvec_alloc (new_vec, CONSTRUCTOR_NELTS (init));\n       else"}, {"sha": "cd5f0c829c675b9c78565be278d100ba320c951e", "filename": "gcc/testsuite/g++.dg/cpp0x/bad_array_new1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new1.C?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -0,0 +1,20 @@\n+// Test for throwing bad_array_new_length on invalid array length\n+// { dg-options -std=c++11 }\n+// { dg-do run }\n+\n+#include <new>\n+\n+void * f(int i)\n+{\n+  return new int[i];\n+}\n+\n+int main()\n+{\n+  try\n+    {\n+      f(-1);\n+    }\n+  catch (std::bad_array_new_length) { return 0; }\n+  __builtin_abort ();\n+}"}, {"sha": "ab36510a4dbf3bf1112674a81f26d59a5f87141b", "filename": "gcc/testsuite/g++.dg/cpp0x/bad_array_new2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fbad_array_new2.C?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -0,0 +1,21 @@\n+// Test for throwing bad_array_new_length on invalid array length\n+// { dg-options -std=c++11 }\n+// { dg-do run }\n+\n+#include <new>\n+\n+void * f(int i)\n+{\n+  return new int[i]{1,2,3,4};\n+}\n+\n+int main()\n+{\n+  f(4);\t\t\t\t// OK\n+  try\n+    {\n+      f(3);\n+    }\n+  catch (std::bad_array_new_length) { return 0; }\n+  __builtin_abort ();\n+}"}, {"sha": "16923f87d7df9070faa794ccdf1426bba0720602", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist21.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -12,7 +12,6 @@ class X\n int f(int n)\n {\n   const float * pData = new const float[1] { 1.5, 2.5 }; // { dg-error \"too many initializers\" }\n-  pData = new const float[n] { 1.5, 2.5 }; // { dg-warning \"array size\" }\n \n   return 0;\n }"}, {"sha": "026712dc1a21cc93bc69ea8afc084e4c81ec2e1f", "filename": "gcc/testsuite/g++.dg/init/new40.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew40.C?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -1,5 +1,7 @@\n // Testcase for overflow handling in operator new[].\n // Optimization of unnecessary overflow checks.\n+// In C++11 we throw bad_array_new_length instead.\n+// { dg-options -std=c++03 }\n // { dg-do run }\n \n #include <assert.h>"}, {"sha": "f2b5e09cf58d9abd83356d833266dc517c1a06b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -1,3 +1,13 @@\n+2013-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\tAdd std::bad_array_new_length (N2932)\n+\t* libsupc++/new: Add std::bad_array_new_length.\n+\t* libsupc++/bad_array_new.cc: New.\n+\t* libsupc++/eh_aux_runtime.cc: Add __cxa_throw_bad_array_new_length.\n+\t* libsupc++/Makefile.in: Build them.\n+\t* config/abi/pre/gnu.ver: Add new symbols.\n+\t* config/abi/pre/gnu-versioned-namespace.ver: Add new symbols.\n+\n 2013-05-08  Andoni Morales Alastruey <ylatuya@gmail.com>\n \n \tPR libstdc++/57212"}, {"sha": "07feda06454fdf8512bae212a252e65a1c473bbb", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -232,6 +232,9 @@ CXXABI_2.0 {\n     _ZTSSt17bad_function_call;\n     _ZTVSt17bad_function_call;\n \n+    __cxa_throw_bad_array_new_length;\n+    _Z*St20bad_array_new_length*;\n+\n     # Default function.\n     _ZSt11_Hash_bytesPKv*;\n "}, {"sha": "7256c6f782e02a897c4d5b290d7b54ecc13bd85d", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -1556,6 +1556,10 @@ CXXABI_1.3.7 {\n     __cxa_thread_atexit;\n } CXXABI_1.3.6;\n \n+CXXABI_1.3.8 {\n+    __cxa_throw_bad_array_new_length;\n+    _Z*St20bad_array_new_length*;\n+} CXXABI_1.3.7;\n \n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {"}, {"sha": "9f24fef30ebcde7ae76e8cdad6d3adb716aaa733", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -92,7 +92,8 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(bitsdir)\" \\\n LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libsupc___la_LIBADD =\n am__objects_1 = array_type_info.lo atexit_arm.lo atexit_thread.lo \\\n-\tbad_alloc.lo bad_cast.lo bad_typeid.lo class_type_info.lo \\\n+\tbad_alloc.lo bad_array_new.lo bad_cast.lo bad_typeid.lo \\\n+\tclass_type_info.lo \\\n \tdel_op.lo del_opnt.lo del_opv.lo del_opvnt.lo dyncast.lo \\\n \teh_alloc.lo eh_arm.lo eh_aux_runtime.lo eh_call.lo eh_catch.lo \\\n \teh_exception.lo eh_globals.lo eh_personality.lo eh_ptr.lo \\\n@@ -366,6 +367,7 @@ sources = \\\n \tatexit_arm.cc \\\n \tatexit_thread.cc \\\n \tbad_alloc.cc \\\n+\tbad_array_new.cc \\\n \tbad_cast.cc \\\n \tbad_typeid.cc \\\n \tclass_type_info.cc \\\n@@ -788,6 +790,16 @@ cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n # Use special rules for the C++11 sources so that the proper flags are passed.\n+bad_array_new.lo: bad_array_new.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+bad_array_new.o: bad_array_new.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+eh_aux_runtime.lo: eh_aux_runtime.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+eh_aux_runtime.o: eh_aux_runtime.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n eh_ptr.lo: eh_ptr.cc\n \t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n eh_ptr.o: eh_ptr.cc"}, {"sha": "5282f525abfbabd2558eed7bfdb4670404cb7a45", "filename": "libstdc++-v3/libsupc++/bad_array_new.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_new.cc?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <new>\n+\n+namespace std {\n+\n+bad_array_new_length::~bad_array_new_length() _GLIBCXX_USE_NOEXCEPT { }\n+\n+const char*\n+bad_array_new_length::what() const _GLIBCXX_USE_NOEXCEPT\n+{\n+  return \"std::bad_array_new_length\";\n+}\n+\n+} // namespace std"}, {"sha": "83749ce80381c27bba64a44c3bfb5be62fa54237", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -151,6 +151,9 @@ namespace __cxxabiv1\n   void \n   __cxa_bad_typeid() __attribute__((__noreturn__));\n \n+  void\n+  __cxa_throw_bad_array_new_length() __attribute__((__noreturn__));\n+\n \n   /**\n    *  @brief Demangling routine."}, {"sha": "1cc831b4b9f8d75b39e9a294cc1a88f03b06f694", "filename": "libstdc++-v3/libsupc++/eh_aux_runtime.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -24,6 +24,7 @@\n \n #include \"typeinfo\"\n #include \"exception\"\n+#include \"new\"\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n #include <bits/exception_defines.h>\n@@ -36,3 +37,6 @@ extern \"C\" void\n __cxxabiv1::__cxa_bad_typeid ()\n { _GLIBCXX_THROW_OR_ABORT(std::bad_typeid()); }\n \n+extern \"C\" void\n+__cxxabiv1::__cxa_throw_bad_array_new_length ()\n+{ _GLIBCXX_THROW_OR_ABORT(std::bad_array_new_length()); }"}, {"sha": "3087502190edece1e972879b26408a70f6ca89f2", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=7d5e76c8de1b6c4b2ae5576ab909dc9e580b216b", "patch": "@@ -64,6 +64,21 @@ namespace std\n     virtual const char* what() const throw();\n   };\n \n+#if __cplusplus >= 201103L\n+  class bad_array_new_length : public bad_alloc\n+  {\n+  public:\n+    bad_array_new_length() throw() { };\n+\n+    // This declaration is not useless:\n+    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n+    virtual ~bad_array_new_length() throw();\n+\n+    // See comment in eh_exception.cc.\n+    virtual const char* what() const throw();\n+  };\n+#endif\n+\n   struct nothrow_t { };\n \n   extern const nothrow_t nothrow;"}]}