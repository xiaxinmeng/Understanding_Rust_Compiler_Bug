{"sha": "5e65297bbb0b49c238b9543a6e730ef54c54196d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU2NTI5N2JiYjBiNDljMjM4Yjk1NDNhNmU3MzBlZjU0YzU0MTk2ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-01-02T23:18:59Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-01-02T23:18:59Z"}, "message": "gcc.c (default_compilers): Const-ify.\n\n\t* gcc.c (default_compilers): Const-ify.\n\t* mips-tdump.c (stab_names): Likewise.\n\t* mips-tfile.c (map_coff_types, map_coff_storage,\n\tmap_coff_sym_type, map_coff_derived_type, stabs_symbol,\n\tpseudo_ops_t, pseudo_ops): Likewise.\n\t* protoize.c (default_include): Likewise\n\nf:\n\t* com.c (clear_binding_level): Const-ify.\n\t(ffecom_arglist_expr_): Likewise.\n\t* info.c (ffeinfo_types_): Don't needlessly zero init.\n\t* lex.c (ffelex_hash_kludge): Const-ify.\n\njava:\n\t* parse.y (src_parse_roots): Don't needlessly zero init.\n\nlibiberty:\n\t* cp-demangle.c (long_options): Const-ify.\n\t* cplus-dem.c (long_options): Likewise.\n\nFrom-SVN: r48485", "tree": {"sha": "1b3ba80e154ddb807e8dfcaefbbd0018b015a992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b3ba80e154ddb807e8dfcaefbbd0018b015a992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e65297bbb0b49c238b9543a6e730ef54c54196d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e65297bbb0b49c238b9543a6e730ef54c54196d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e65297bbb0b49c238b9543a6e730ef54c54196d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e65297bbb0b49c238b9543a6e730ef54c54196d/comments", "author": null, "committer": null, "parents": [{"sha": "0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "64c0b4d0cb0a9f01e7c7c0e22406b895ffb23f5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -1,5 +1,12 @@\n 2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.c (default_compilers): Const-ify.\n+\t* mips-tdump.c (stab_names): Likewise.\n+\t* mips-tfile.c (map_coff_types, map_coff_storage,\n+\tmap_coff_sym_type, map_coff_derived_type, stabs_symbol,\n+\tpseudo_ops_t, pseudo_ops): Likewise.\n+\t* protoize.c (default_include): Likewise\n+\n \t* real.c (GET_REAL, PUT_REAL): Don't cast away const-ness.\n \t(ezero, ehalf, eone, etwo, e32, elog2, esqrt2, epi): Const-ify.\n \tAdd array size in declaration."}, {"sha": "54d07282dd2ca39898d0189264c2407fdb302972", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -1,3 +1,10 @@\n+Wed Jan  2 18:13:11 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (clear_binding_level): Const-ify.\n+\t(ffecom_arglist_expr_): Likewise.\n+\t* info.c (ffeinfo_types_): Don't needlessly zero init.\n+\t* lex.c (ffelex_hash_kludge): Const-ify.\n+\n Sun Dec 23 10:45:09 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (ffecom_gfrt_volatile_, ffecom_gfrt_complex_,"}, {"sha": "9abab693235dcf5b5ee050d7b68a1cbd323c9a88", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -563,7 +563,7 @@ static struct binding_level *global_binding_level;\n \n /* Binding level structures are initialized by copying this one.  */\n \n-static struct binding_level clear_binding_level\n+static const struct binding_level clear_binding_level\n =\n {NULL, NULL, NULL, NULL_BINDING_LEVEL, 0};\n \n@@ -1283,7 +1283,7 @@ ffecom_arglist_expr_ (const char *c, ffebld expr)\n   tree item;\n   bool ptr = FALSE;\n   tree wanted = NULL_TREE;\n-  static char zed[] = \"0\";\n+  static const char zed[] = \"0\";\n \n   if (c == NULL)\n     c = &zed[0];"}, {"sha": "b632f41592f17354da2e83257ff825df8ee623f9", "filename": "gcc/f/info.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Finfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Finfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finfo.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -98,8 +98,7 @@ static const char *const ffeinfo_where_string_[]\n #include \"info-w.def\"\n #undef FFEINFO_WHERE\n };\n-static ffetype ffeinfo_types_[FFEINFO_basictype][FFEINFO_kindtype]\n-  = { { NULL } };\n+static ffetype ffeinfo_types_[FFEINFO_basictype][FFEINFO_kindtype];\n \n /* Static functions (internal). */\n "}, {"sha": "acbb4d336c73746c7bc65779a2510caf329b50ca", "filename": "gcc/f/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -3898,10 +3898,10 @@ ffelex_hash_kludge (FILE *finput)\n   /* If you change this constant string, you have to change whatever\n      code might thus be affected by it in terms of having to use\n      ffelex_getc_() instead of getc() in the lexers and _hash_.  */\n-  static char match[] = \"# 1 \\\"\";\n+  static const char match[] = \"# 1 \\\"\";\n   static int kludge[ARRAY_SIZE (match) + 1];\n   int c;\n-  char *p;\n+  const char *p;\n   int *q;\n \n   /* Read chars as long as they match the target string."}, {"sha": "bb2b0c42a8e9e35872eee893010e264a492b6828", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -807,7 +807,7 @@ static int n_compilers;\n \n /* The default list of file name suffixes and their compilation specs.  */\n \n-static struct compiler default_compilers[] =\n+static const struct compiler default_compilers[] =\n {\n   /* Add lists of suffixes of known languages here.  If those languages\n      were not present when we built the driver, we will hit these copies"}, {"sha": "c2a66eedd53da527b1500c63b50662c35e935e6d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -1,3 +1,7 @@\n+2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parse.y (src_parse_roots): Don't needlessly zero init.\n+\n 2001-12-31  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (dump_java_tree): New function."}, {"sha": "2ca0197724e9a7406ecac9b6ff4dd08660fb231f", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -421,7 +421,7 @@ static tree currently_caught_type_list;\n    `ctxp->current_loop'.  */\n static tree case_label_list; \n \n-static tree src_parse_roots[1] = { NULL_TREE };\n+static tree src_parse_roots[1];\n \n /* All classes seen from source code */\n #define gclass_list src_parse_roots[0]"}, {"sha": "d7040d95b70aecc1091464768ddbc49a8e082139", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -247,7 +247,7 @@ extern int   opterr;\n /* Create a table of debugging stab-codes and corresponding names.  */\n \n #define __define_stab(NAME, CODE, STRING) {(int)CODE, STRING},\n-struct {short code; char string[10];} stab_names[]  = {\n+const struct {const short code; const char string[10];} stab_names[]  = {\n #include \"stab.def\"\n #undef __define_stab\n };"}, {"sha": "9e49713302e3a64faed3ad41ec171e639709451b", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -1273,7 +1273,7 @@ static EXTR\t  *last_func_eptr;\n    Maybe this will be fixed in 2.10 or 2.20 of the MIPS compiler\n    suite, but for now go with what works.  */\n \n-static bt_t map_coff_types[ (int)T_MAX ] = {\n+static const bt_t map_coff_types[ (int)T_MAX ] = {\n   bt_Nil,\t\t\t/* T_NULL */\n   bt_Nil,\t\t\t/* T_ARG */\n   bt_Char,\t\t\t/* T_CHAR */\n@@ -1293,7 +1293,7 @@ static bt_t map_coff_types[ (int)T_MAX ] = {\n };\n \n /* Convert COFF storage class to ECOFF storage class.  */\n-static sc_t map_coff_storage[ (int)C_MAX ] = {\n+static const sc_t map_coff_storage[ (int)C_MAX ] = {\n   sc_Nil,\t\t\t/*   0: C_NULL */\n   sc_Abs,\t\t\t/*   1: C_AUTO\t  auto var */\n   sc_Undefined,\t\t\t/*   2: C_EXT\t  external */\n@@ -1404,7 +1404,7 @@ static sc_t map_coff_storage[ (int)C_MAX ] = {\n };\n \n /* Convert COFF storage class to ECOFF symbol type.  */\n-static st_t map_coff_sym_type[ (int)C_MAX ] = {\n+static const st_t map_coff_sym_type[ (int)C_MAX ] = {\n   st_Nil,\t\t\t/*   0: C_NULL */\n   st_Local,\t\t\t/*   1: C_AUTO\t  auto var */\n   st_Global,\t\t\t/*   2: C_EXT\t  external */\n@@ -1515,7 +1515,7 @@ static st_t map_coff_sym_type[ (int)C_MAX ] = {\n };\n \n /* Map COFF derived types to ECOFF type qualifiers.  */\n-static tq_t map_coff_derived_type[ (int)DT_MAX ] = {\n+static const tq_t map_coff_derived_type[ (int)DT_MAX ] = {\n   tq_Nil,\t\t\t/* 0: DT_NON\tno more qualifiers */\n   tq_Ptr,\t\t\t/* 1: DT_PTR\tpointer */\n   tq_Proc,\t\t\t/* 2: DT_FCN\tfunction */\n@@ -1594,7 +1594,7 @@ static int\tstabs_seen\t= 0;\t\t/* != 0 if stabs have been seen */\n #define STABS_SYMBOL \"@stabs\"\n #endif\n \n-static char stabs_symbol[] = STABS_SYMBOL;\n+static const char stabs_symbol[] = STABS_SYMBOL;\n \n \f\n /* Forward reference for functions.  See the definition for more details.  */\n@@ -1715,12 +1715,12 @@ extern int   opterr;\n    do......  */\n \n typedef struct _pseudo_ops {\n-  const char *name;\t\t\t/* pseudo-op in ascii */\n-  int len;\t\t\t\t/* length of name to compare */\n-  void (*func) PARAMS ((const char *));\t/* function to handle line */\n+  const char *const name;\t\t\t/* pseudo-op in ascii */\n+  const int len;\t\t\t\t/* length of name to compare */\n+  void (*const func) PARAMS ((const char *));\t/* function to handle line */\n } pseudo_ops_t;\n \n-static pseudo_ops_t pseudo_ops[] = {\n+static const pseudo_ops_t pseudo_ops[] = {\n   { \"#.def\",\tsizeof(\"#.def\")-1,\tparse_def },\n   { \"#.begin\",\tsizeof(\"#.begin\")-1,\tparse_begin },\n   { \"#.bend\",\tsizeof(\"#.bend\")-1,\tparse_bend },"}, {"sha": "34fdb2bdb36dafa5c46ddf1cb37561e514edb839", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -207,7 +207,7 @@ static const int hash_mask = (HASH_TABLE_SIZE - 1);\n \n static const struct default_include { const char *const fname; \n \t\t\t const char *const component;\n-\t\t\t int x1, x2; } include_defaults[]\n+\t\t\t const int x1, x2; } include_defaults[]\n #ifdef INCLUDE_DEFAULTS\n   = INCLUDE_DEFAULTS;\n #else"}, {"sha": "fdccb59ab438391b6f4eb488d136e0ca389ea654", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -1,5 +1,8 @@\n 2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* cp-demangle.c (long_options): Const-ify.\n+\t* cplus-dem.c (long_options): Likewise.\n+\n \t* cplus-dem.c (mystrstr): Delete.  All callers changed to use\n \tstrstr instead.\n "}, {"sha": "457a09f4c19e4efd3344cb95751bc4300b277178", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -3945,7 +3945,7 @@ print_usage (fp, exit_value)\n }\n \n /* Option specification for getopt_long.  */\n-static struct option long_options[] = \n+static const struct option long_options[] = \n {\n   { \"help\",    no_argument, NULL, 'h' },\n   { \"strict\",  no_argument, NULL, 's' },"}, {"sha": "5af8826368629a1fa86b4ad80ba3f42dd23e2720", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e65297bbb0b49c238b9543a6e730ef54c54196d/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=5e65297bbb0b49c238b9543a6e730ef54c54196d", "patch": "@@ -4947,7 +4947,7 @@ extern int prepends_underscore;\n \n int strip_underscore = 0;\n \n-static struct option long_options[] = {\n+static const struct option long_options[] = {\n   {\"strip-underscores\", no_argument, 0, '_'},\n   {\"format\", required_argument, 0, 's'},\n   {\"help\", no_argument, 0, 'h'},"}]}