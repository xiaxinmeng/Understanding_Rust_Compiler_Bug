{"sha": "49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllN2E5ZDRiODIxYzk4MmE1NWY5NzgzYjdjMTVjYjRiZWRjNTU0OA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-19T00:54:29Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-19T00:54:29Z"}, "message": "re PR rtl-optimization/28173 (misses constant folding)\n\n\n\tPR rtl-optimization/28173\n\t* simplify-rtx.c (simplify_binary_operation_1) <IOR>:  Optimize\n\t(X & C1) | C2 as C2 when (C1 & C2) == C1 and X has no side-effects.\n\tOptimize (X & C1) | C2 as X | C2 when (C1 | C2) == ~0.\n\tCanonicalize (X & C1) | C2 as (X & (C1 & ~C2)) | C2.\n\t<AND>: Canonicalize (X | C1) & C2 as (X & C2) | (C1 & C2).\n\n\t* gcc.target/i386/andor-1.c: New test case.\n\nFrom-SVN: r122116", "tree": {"sha": "0df33a267eac0cd5b69159ce8812e9f705957b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df33a267eac0cd5b69159ce8812e9f705957b24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/comments", "author": null, "committer": null, "parents": [{"sha": "1b16dad6f4447d60879db3809d934836260cedf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b16dad6f4447d60879db3809d934836260cedf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b16dad6f4447d60879db3809d934836260cedf8"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "dada581356723afd62918e517771db2b1bea9a32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "patch": "@@ -1,3 +1,12 @@\n+2007-02-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/28173\n+\t* simplify-rtx.c (simplify_binary_operation_1) <IOR>:  Optimize\n+\t(X & C1) | C2 as C2 when (C1 & C2) == C1 and X has no side-effects.\n+\tOptimize (X & C1) | C2 as X | C2 when (C1 | C2) == ~0.\n+\tCanonicalize (X & C1) | C2 as (X & (C1 & ~C2)) | C2.\n+\t<AND>: Canonicalize (X | C1) & C2 as (X & C2) | (C1 & C2).\n+\n 2007-02-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_load_exponent): New."}, {"sha": "4251df520c8ab9e90fb8f94c2e1f68d9855d5b9a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "patch": "@@ -2072,6 +2072,33 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  && (nonzero_bits (op0, mode) & ~INTVAL (op1)) == 0)\n \treturn op1;\n  \n+      /* Canonicalize (X & C1) | C2.  */\n+      if (GET_CODE (op0) == AND\n+\t  && GET_CODE (trueop1) == CONST_INT\n+\t  && GET_CODE (XEXP (op0, 1)) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT mask = GET_MODE_MASK (mode);\n+\t  HOST_WIDE_INT c1 = INTVAL (XEXP (op0, 1));\n+\t  HOST_WIDE_INT c2 = INTVAL (trueop1);\n+\n+\t  /* If (C1&C2) == C1, then (X&C1)|C2 becomes X.  */\n+\t  if ((c1 & c2) == c1\n+\t      && !side_effects_p (XEXP (op0, 0)))\n+\t    return trueop1;\n+\n+\t  /* If (C1|C2) == ~0 then (X&C1)|C2 becomes X|C2.  */\n+\t  if (((c1|c2) & mask) == mask)\n+\t    return simplify_gen_binary (IOR, mode, XEXP (op0, 0), op1);\n+\n+\t  /* Minimize the number of bits set in C1, i.e. C1 := C1 & ~C2.  */\n+\t  if (((c1 & ~c2) & mask) != (c1 & mask))\n+\t    {\n+\t      tem = simplify_gen_binary (AND, mode, XEXP (op0, 0),\n+\t\t\t\t\t gen_int_mode (c1 & ~c2, mode));\n+\t      return simplify_gen_binary (IOR, mode, tem, op1);\n+\t    }\n+\t}\n+\n       /* Convert (A & B) | A to A.  */\n       if (GET_CODE (op0) == AND\n \t  && (rtx_equal_p (XEXP (op0, 0), op1)\n@@ -2312,6 +2339,18 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  return simplify_gen_unary (ZERO_EXTEND, mode, tem, imode);\n \t}\n \n+      /* Canonicalize (A | C1) & C2 as (A & C2) | (C1 & C2).  */\n+      if (GET_CODE (op0) == IOR\n+\t  && GET_CODE (trueop1) == CONST_INT\n+\t  && GET_CODE (XEXP (op0, 1)) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT tmp = INTVAL (trueop1) & INTVAL (XEXP (op0, 1));\n+\t  return simplify_gen_binary (IOR, mode,\n+\t\t\t\t      simplify_gen_binary (AND, mode,\n+\t\t\t\t\t\t\t   XEXP (op0, 0), op1),\n+\t\t\t\t      gen_int_mode (tmp, mode));\n+\t}\n+\n       /* Convert (A ^ B) & A to A & (~B) since the latter is often a single\n \t insn (and may simplify more).  */\n       if (GET_CODE (op0) == XOR"}, {"sha": "bf4845f9c3657283c52abf8ec97885274eeec40d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "patch": "@@ -1,3 +1,8 @@\n+2007-02-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/28173\n+\t* gcc.target/i386/andor-1.c: New test case.\n+\n 2007-02-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-ldexp-1.c: New."}, {"sha": "6cc12b348339d6e6d837c792c6979deac7a57169", "filename": "gcc/testsuite/gcc.target/i386/andor-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fandor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e7a9d4b821c982a55f9783b7c15cb4bedc5548/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fandor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fandor-1.c?ref=49e7a9d4b821c982a55f9783b7c15cb4bedc5548", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"andl\" } } */\n+\n+unsigned int foo(unsigned int x)\n+{\n+  unsigned int t = x & ~1;\n+  return t | 1;\n+}\n+"}]}