{"sha": "2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0ZDU0ZTZkMDdhMGIzYWFiNzRjMGE1YmFmZTU1ZjQ5ZGFiYjg2ZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T10:51:42Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T10:51:42Z"}, "message": "JLayeredPane.java, [...]: Fixed HTML tags in javadocs all over.\n\n2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/JLayeredPane.java,\n\tjavax/swing/plaf/BorderUIResource.java,\n\tjavax/swing/plaf/ComponentUI.java,\n\tjavax/swing/undo/CompoundEdit.java,\n\tjavax/swing/undo/StateEdit.java:\n\tFixed HTML tags in javadocs all over.\n\nFrom-SVN: r80893", "tree": {"sha": "97f2ca60a2bbac3c68603fd274d0726714c063ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f2ca60a2bbac3c68603fd274d0726714c063ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/comments", "author": null, "committer": null, "parents": [{"sha": "5589f3e5a5baa446f71948f5caec0811366ec32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5589f3e5a5baa446f71948f5caec0811366ec32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5589f3e5a5baa446f71948f5caec0811366ec32c"}], "stats": {"total": 149, "additions": 79, "deletions": 70}, "files": [{"sha": "2388b08190176778244f3fe2cfc24f947551904d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -1,3 +1,12 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/JLayeredPane.java,\n+\tjavax/swing/plaf/BorderUIResource.java,\n+\tjavax/swing/plaf/ComponentUI.java,\n+\tjavax/swing/undo/CompoundEdit.java,\n+\tjavax/swing/undo/StateEdit.java:\n+\tFixed HTML tags in javadocs all over.\n+\n 2004-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/print/attribute/EnumSyntax.java"}, {"sha": "7002b6e0c86164608778608fde684787d56c5f79", "filename": "libjava/javax/swing/JLayeredPane.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJLayeredPane.java?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -82,16 +82,15 @@\n  * <dd>An offset into a layer's \"logical drawing order\". Layer position 0\n  * is drawn last. Layer position -1 is a synonym for the first layer\n  * position (the logical \"bottom\").</dd>\n+ * </dl>\n  *\n  * <p><b>Note:</b> the layer numbering order is the <em>reverse</em> of the\n  * component indexing and position order</p>\n  *\n  * @author Graydon Hoare <graydon@redhat.com>\n  */\n-\n public class JLayeredPane extends JComponent implements Accessible\n {\n-\n   public static String LAYER_PROPERTY = \"LAYER_PROPERTY\";\n \n   public static Integer FRAME_CONTENT_LAYER = new Integer (-30000);"}, {"sha": "c0bb2402fe7f007c859917b5f32c0ca9ee4930e9", "filename": "libjava/javax/swing/plaf/BorderUIResource.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fplaf%2FBorderUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fplaf%2FBorderUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FBorderUIResource.java?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -279,7 +279,7 @@ public static class BevelBorderUIResource\n      *\n      * <p><img src=\"../border/doc-files/BevelBorder-1.png\"\n      * width=\"500\" height=\"150\"\n-     * alt=\"[An illustration showing raised and lowered BevelBorders]\" />\n+     * alt=\"[An illustration showing raised and lowered BevelBorders]\" /></p>\n      *\n      * @param bevelType the desired appearance of the border. The value\n      *        must be either {@link javax.swing.border.BevelBorder#RAISED}\n@@ -300,7 +300,7 @@ public BevelBorderUIResource(int bevelType)\n      *\n      * <p><img src=\"../border/doc-files/BevelBorder-2.png\" width=\"500\"\n      * height=\"150\" alt=\"[An illustration showing BevelBorders that were\n-     * constructed with this method]\" />\n+     * constructed with this method]\" /></p>\n      *\n      * @param bevelType the desired appearance of the border. The value\n      *        must be either {@link javax.swing.border.BevelBorder#RAISED}\n@@ -340,7 +340,7 @@ public BevelBorderUIResource(int bevelType,\n      *\n      * <p><img src=\"../border/doc-files/BevelBorder-3.png\" width=\"500\"\n      * height=\"150\" alt=\"[An illustration showing BevelBorders that\n-     * were constructed with this method]\" />\n+     * were constructed with this method]\" /></p>\n      *\n      * @param bevelType the desired appearance of the border. The value\n      *        must be either {@link javax.swing.border.BevelBorder#RAISED}\n@@ -432,7 +432,7 @@ public CompoundBorderUIResource(Border outsideBorder,\n    *\n    * <p><img src=\"../border/doc-files/EmptyBorder-1.png\"\n    * width=\"290\" height=\"200\"\n-   * alt=\"[An illustration of EmptyBorder]\" />\n+   * alt=\"[An illustration of EmptyBorder]\" /></p>\n    *\n    * @author Brian Jones (cbj@gnu.org)\n    * @author Sascha Brawer (brawer@dandelis.ch)\n@@ -487,7 +487,7 @@ public EmptyBorderUIResource(Insets insets)\n    *\n    * <p><img src=\"../border/doc-files/EtchedBorder-1.png\" width=\"500\"\n    * height=\"200\" alt=\"[An illustration of the two EtchedBorder\n-   * variants]\" />\n+   * variants]\" /></p>\n    *\n    * @author Brian Jones (cbj@gnu.org)\n    * @author Sascha Brawer (brawer@dandelis.ch)\n@@ -514,7 +514,7 @@ public EtchedBorderUIResource()\n      *\n      * <p><img src=\"../border/doc-files/EtchedBorder-1.png\"\n      * width=\"500\" height=\"200\" alt=\"[An illustration of the two\n-     * EtchedBorder variants]\" />\n+     * EtchedBorder variants]\" /></p>\n      *\n      * @param etchType the desired appearance of the border. The value\n      *        must be either {@link javax.swing.border.EtchedBorder#RAISED}\n@@ -555,7 +555,7 @@ public EtchedBorderUIResource(Color highlight, Color shadow)\n      *\n      * <p><img src=\"../border/doc-files/EtchedBorder-2.png\" width=\"500\"\n      * height=\"200\" alt=\"[An illustration that shows which pixels get\n-     * painted in what color]\" />\n+     * painted in what color]\" /></p>\n      *\n      * @param etchType the desired appearance of the border. The value\n      *        must be either {@link javax.swing.border.EtchedBorder#RAISED}\n@@ -588,7 +588,7 @@ public EtchedBorderUIResource(int etchType,\n    * such as the borders provided by this class.\n    *\n    * <p><img src=\"../border/doc-files/LineBorder-1.png\" width=\"500\"\n-   * height=\"200\" alt=\"[An illustration of two LineBorders] />\n+   * height=\"200\" alt=\"[An illustration of two LineBorders]\" /></p>\n    *\n    * @author Brian Jones (cbj@gnu.org)\n    * @author Sascha Brawer (brawer@dandelis.ch)\n@@ -643,7 +643,7 @@ public LineBorderUIResource(Color color, int thickness)\n    * such as the borders provided by this class.\n    *\n    * <p><img src=\"../border/doc-files/MatteBorder-1.png\" width=\"500\"\n-   * height=\"150\" alt=\"[An illustration of two MatteBorders] />\n+   * height=\"150\" alt=\"[An illustration of two MatteBorders]\" /></p>\n    *\n    * @author Brian Jones (cbj@gnu.org)\n    * @author Sascha Brawer (brawer@dandelis.ch)\n@@ -658,7 +658,7 @@ public LineBorderUIResource(Color color, int thickness)\n      *\n      * <p><img src=\"../border/doc-files/MatteBorder-2.png\" width=\"500\"\n      * height=\"150\" alt=\"[A picture of a MatteBorder made by this\n-     * constructor]\" />\n+     * constructor]\" /></p>\n      *\n      * @param top the width of the border at its top edge.\n      * @param left the width of the border at its left edge.\n@@ -680,7 +680,7 @@ public MatteBorderUIResource(int top, int left,\n      *\n      * <p><img src=\"../border/doc-files/MatteBorder-4.png\" width=\"500\"\n      * height=\"150\" alt=\"[A picture of a MatteBorder made by this\n-     * constructor]\" />\n+     * constructor]\" /></p>\n      *\n      * @param top the width of the border at its top edge.\n      * @param left the width of the border at its left edge.\n@@ -704,7 +704,7 @@ public MatteBorderUIResource(int top, int left,\n      *\n      * <p><img src=\"../border/doc-files/MatteBorder-6.png\" width=\"500\"\n      * height=\"150\" alt=\"[A picture of a MatteBorder made by this\n-     * constructor]\" />\n+     * constructor]\" /></p>\n      *\n      * @param tileIcon an icon for tiling the border area. \n      */"}, {"sha": "a2ca1f00941a37e7960c51565fe702b65f729219", "filename": "libjava/javax/swing/plaf/ComponentUI.java", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -52,7 +52,7 @@\n  *\n  * <p><img src=\"doc-files/ComponentUI-1.png\" width=\"700\" height=\"550\"\n  * alt=\"[UML diagram illustrating the architecture for pluggable\n- * look and feels]\" />\n+ * look and feels]\" /></p>\n  *\n  * <p>Components such as {@link javax.swing.JSlider} do not directly\n  * implement operations related to the look and feel of the user\n@@ -68,14 +68,14 @@\n  * services. Soon before the end of its lifecycle, the\n  * <code>ComponentUI</code> will receive an {@link #uninstallUI}\n  * message, at which time the <code>ComponentUI</code> is expected to\n- * undo any changes.\n+ * undo any changes.</p>\n  *\n  * <p>Note that the <code>ui</code> of a <code>JComponent</code>\n  * changes whenever the user switches between look and feels.  For\n  * example, the <code>ui</code> property of a <code>JSlider</code>\n  * could change from an instance of <code>MetalSliderUI</code> to an\n  * instance of <code>FooSliderUI</code>. This switch can happen at any\n- * time, but it will always be performed from inside the Swing thread.\n+ * time, but it will always be performed from inside the Swing thread.</p>\n  *\n  * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n@@ -96,26 +96,24 @@ public ComponentUI()\n    * The delegate object then receives an <code>installUI</code>\n    * message.\n    *\n-   * <p>This method should perform the following tasks:\n-   *\n-   * <ul><li>Set visual properties such as borders, fonts, colors, or\n-   * icons. However, no change should be performed for those\n-   * properties whose values have been directly set by the client\n-   * application. To allow the distinction, LookAndFeels are expected\n-   * to use values that implement the {@link UIResource} marker\n-   * interface, such as {@link BorderUIResource} or {@link\n-   * ColorUIResource}.</li>\n+   * <p>This method should perform the following tasks:</p>\n    *\n+   * <ul>\n+   * <li>Set visual properties such as borders, fonts, colors, or\n+   *     icons. However, no change should be performed for those\n+   *     properties whose values have been directly set by the client\n+   *     application. To allow the distinction, LookAndFeels are expected\n+   *     to use values that implement the {@link UIResource} marker\n+   *     interface, such as {@link BorderUIResource} or {@link\n+   *     ColorUIResource}.</li>\n    * <li>If necessary, install a {@link java.awt.LayoutManager}.</li>\n-   *\n    * <li>Embed custom sub-components. For instance, the UI delegate\n-   * for a {@link javax.swing.JSplitPane} might install a special\n-   * component for the divider.</li>\n-   *\n+   *     for a {@link javax.swing.JSplitPane} might install a special\n+   *     component for the divider.</li>\n    * <li>Register event listeners.</li>\n-   *\n    * <li>Set up properties related to keyborad navigation, such as\n-   * mnemonics or focus traversal policies.</li></ul>\n+   *     mnemonics or focus traversal policies.</li>\n+   * </ul>\n    *\n    * @param c the component for which this delegate will provide\n    *        services."}, {"sha": "730d5b253a17de31a0422b75cd6808a4f002b3eb", "filename": "libjava/javax/swing/undo/CompoundEdit.java", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fundo%2FCompoundEdit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fundo%2FCompoundEdit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FCompoundEdit.java?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -45,17 +45,18 @@\n  * <code>UndoableEdits</code>.\n  *\n  * <p>The use of a <code>CompoundEdit</code> is divided in two separate\n- * phases.\n- *\n- * <ol><li>In the first phase, the <code>CompoundEdit</code> is\n- * initialized.  After a new instance of <code>CompoundEdit</code> has\n- * been created, {@link #addEdit(UndoableEdit)} is called for each\n- * element of the compound.  To terminate the initialization phase,\n- * call {@link #end()}.</li>\n+ * phases.</p>\n  *\n+ * <ol>\n+ * <li>In the first phase, the <code>CompoundEdit</code> is\n+ *     initialized.  After a new instance of <code>CompoundEdit</code> has\n+ *     been created, {@link #addEdit(UndoableEdit)} is called for each\n+ *     element of the compound.  To terminate the initialization phase,\n+ *     call {@link #end()}.</li>\n  * <li>In the second phase, the the <code>CompoundEdit</code> can be\n- * used, typically by invoking {@link #undo()} and {@link\n- * #redo()}.</li></ol>\n+ *     used, typically by invoking {@link #undo()} and\n+ *     {@link #redo()}.</li>\n+ * </ol>\n  *\n  * @author Andrew Selkirk (aselkirk@sympatico.ca)\n  * @author Sascha Brawer (brawer@dandelis.ch)"}, {"sha": "633807b71674239a37d2d5d08f24de853b380d34", "filename": "libjava/javax/swing/undo/StateEdit.java", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java?ref=2c4d54e6d07a0b3aab74c0a5bafe55f49dabb86d", "patch": "@@ -44,52 +44,54 @@\n /**\n  * A helper class, making it easy to support undo and redo.\n  *\n- * <p>The following example shows how to use this class.\n+ * <p>The following example shows how to use this class.</p>\n  *\n- * <pre>  Foo foo; // class Foo implements {@link StateEditable}\n- *  StateEdit edit;\n+ * <pre>\n+ * Foo foo; // class Foo implements {@link StateEditable}\n+ * StateEdit edit;\n  *\n- *  edit = new StateEdit(foo, \"Name Change\");\n- *  foo.setName(\"Jane Doe\");\n- *  edit.end();\n- *  undoManager.addEdit(edit);</pre>\n+ * edit = new StateEdit(foo, \"Name Change\");\n+ * foo.setName(\"Jane Doe\");\n+ * edit.end();\n+ * undoManager.addEdit(edit);\n+ * </pre>\n  *\n  * <p>If <code>Foo</code>&#x2019;s implementation of {@link\n  * StateEditable} considers the name as part of the editable state,\n  * the user can now choose &#x201c;Undo Name Change&#x201d; or\n  * &#x201c;Redo Name Change&#x201d; from the respective menu. No\n- * further undo support is needed from the application.\n+ * further undo support is needed from the application.</p>\n  *\n- * <p>The following explains what happens in the example.\n- *\n- * <p><ol><li>When a <code>StateEdit</code> is created, the associated\n- * {@link StateEditable} gets asked to store its state into a hash\n- * table, {@link #preState}.</li>\n+ * <p>The following explains what happens in the example.</p>\n  *\n+ * <ol>\n+ * <li>When a <code>StateEdit</code> is created, the associated\n+ *     {@link StateEditable} gets asked to store its state into a hash\n+ *     table, {@link #preState}.</li>\n  * <li>The application will now perform some changes to the edited\n- * object.  This typically happens by invoking methods on the edited\n- * object.</li>\n- *\n+ *     object. This typically happens by invoking methods on the edited\n+ *     object.</li>\n  * <li>The editing phase is terminated by invoking the {@link #end()}\n- * method of the <code>StateEdit</code>. The <code>end()</code> method\n- * does two things.\n- *\n- *   <ul><li>The edited object receives a second request for storing\n- *   its state.  This time, it will use a different hash table, {@link\n- *   #postState}.</li>\n- *\n- *   <li>To increase efficiency, the <code>StateEdit</code> now removes\n- *   any entries from {@link #preState} and {@link #postState} that have\n- *   the same key, and whose values are equal. Equality is determined\n- *   by invoking the <code>equals</code> method inherited from\n- *   {@link java.lang.Object}.</li></ul></li>\n+ *     method of the <code>StateEdit</code>. The <code>end()</code> method\n+ *     does two things.\n  *\n+ *     <ul>\n+ *     <li>The edited object receives a second request for storing\n+ *         its state.  This time, it will use a different hash table, {@link\n+ *         #postState}.</li>\n+ *     <li>To increase efficiency, the <code>StateEdit</code> now removes\n+ *         any entries from {@link #preState} and {@link #postState} that have\n+ *         the same key, and whose values are equal. Equality is determined\n+ *         by invoking the <code>equals</code> method inherited from\n+ *         {@link java.lang.Object}.</li>\n+ *     </ul></li>\n  * <li>When the user later chooses to undo the <code>StateEdit</code>,\n  * the edited object is asked to {@linkplain StateEditable#restoreState\n  * restore its state} from the {@link #preState} table.  Similarly,\n  * when the user chooses to <i>redo</i> the <code>StateEdit</code>,\n  * the edited object gets asked to restore its state from the {@link\n- * #postState}.</li></ol>\n+ * #postState}.</li>\n+ * </ol>\n  *\n  * @author Andrew Selkirk (aselkirk@sympatico.ca)\n  * @author Sascha Brawer (brawer@dandelis.ch)"}]}