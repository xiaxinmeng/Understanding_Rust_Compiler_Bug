{"sha": "e6e616074f02b81c397a2848ab242b54ef21efbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlNjE2MDc0ZjAyYjgxYzM5N2EyODQ4YWIyNDJiNTRlZjIxZWZiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-29T10:21:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-29T10:25:16Z"}, "message": "lto/94822 - fix ICE in component_ref_size\n\nThis ICE appears because gcc will stream it to the function_body section\nwhen processing the variable with the initial value of the constructor\ntype, and the error_mark_node to the decls section.\nWhen recompiling, the value obtained with DECL_INITIAL will be error_mark.\n\n2020-04-29  Richard Biener  <rguenther@suse.de>\n\t    Li Zekun  <lizekun1@huawei.com>\n\n\tPR lto/94822\n\t* tree.c (component_ref_size): Guard against error_mark_node\n\tDECL_INITIAL as it happens with LTO.\n\n\t* gcc.dg/lto/pr94822_0.c: New testcase.\n\t* gcc.dg/lto/pr94822_1.c: Alternate file.\n\t* gcc.dg/lto/pr94822.h: Likewise.", "tree": {"sha": "b8ad7a4f51ce18f0ca707802a74a6575c404dd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ad7a4f51ce18f0ca707802a74a6575c404dd56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6e616074f02b81c397a2848ab242b54ef21efbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e616074f02b81c397a2848ab242b54ef21efbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e616074f02b81c397a2848ab242b54ef21efbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e616074f02b81c397a2848ab242b54ef21efbc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56fe3ca30e1343e4f232ca539726506440e23dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe3ca30e1343e4f232ca539726506440e23dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fe3ca30e1343e4f232ca539726506440e23dd3"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "4b4eeefb675c3ddd4f3f0d517a35bd1ed8fb8e41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -1,3 +1,10 @@\n+2020-04-29  Richard Biener  <rguenther@suse.de>\n+\t    Li Zekun  <lizekun1@huawei.com>\n+\n+\tPR lto/94822\n+\t* tree.c (component_ref_size): Guard against error_mark_node\n+\tDECL_INITIAL as it happens with LTO.\n+\n 2020-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_function_arg_alignment): Add a"}, {"sha": "3810ea3375e2089c89f8722fd75bdccc9794881a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -1,3 +1,11 @@\n+2020-04-29  Richard Biener  <rguenther@suse.de>\n+\t    Li Zekun  <lizekun1@huawei.com>\n+\n+\tPR lto/94822\n+\t* gcc.dg/lto/pr94822_0.c: New testcase.\n+\t* gcc.dg/lto/pr94822_1.c: Alternate file.\n+\t* gcc.dg/lto/pr94822.h: Likewise.\n+\n 2020-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.target/aarch64/no_unique_address_1.C: New test."}, {"sha": "d9e6c3da6459b9b3d971200e857ce90193696421", "filename": "gcc/testsuite/gcc.dg/lto/pr94822.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822.h?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -0,0 +1,4 @@\n+typedef struct {\n+  int i;\n+  int ints[];\n+} struct_t;"}, {"sha": "698c0928a81c3195aa7f2e71189d0ad79d1867b4", "filename": "gcc/testsuite/gcc.dg/lto/pr94822_0.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_0.c?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-lto-do link } */\n+\n+#include \"pr94822.h\"\n+\n+extern struct_t my_struct;\n+\n+int main() {\n+ return my_struct.ints[1];\n+}\n+"}, {"sha": "a7ace71680f274fc073a2a3ab5055566a42227fa", "filename": "gcc/testsuite/gcc.dg/lto/pr94822_1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr94822_1.c?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -0,0 +1,6 @@\n+#include \"pr94822.h\"\n+\n+struct_t my_struct = {\n+ 20,\n+ { 1, 2 }\n+};"}, {"sha": "e451401822c8eed91976b62a47386459534e4eae", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e616074f02b81c397a2848ab242b54ef21efbc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e6e616074f02b81c397a2848ab242b54ef21efbc", "patch": "@@ -13723,24 +13723,25 @@ component_ref_size (tree ref, bool *interior_zero_length /* = NULL */)\n     /* MEMBER is a true flexible array member.  Compute its size from\n        the initializer of the BASE object if it has one.  */\n     if (tree init = DECL_P (base) ? DECL_INITIAL (base) : NULL_TREE)\n-      {\n-\tinit = get_initializer_for (init, member);\n-\tif (init)\n-\t  {\n-\t    memsize = TYPE_SIZE_UNIT (TREE_TYPE (init));\n-\t    if (tree refsize = TYPE_SIZE_UNIT (reftype))\n-\t      {\n-\t\t/* Use the larger of the initializer size and the tail\n-\t\t   padding in the enclosing struct.  */\n-\t\tpoly_int64 rsz = tree_to_poly_int64 (refsize);\n-\t\trsz -= baseoff;\n-\t\tif (known_lt (tree_to_poly_int64 (memsize), rsz))\n-\t\t  memsize = wide_int_to_tree (TREE_TYPE (memsize), rsz);\n-\t      }\n+      if (init != error_mark_node)\n+\t{\n+\t  init = get_initializer_for (init, member);\n+\t  if (init)\n+\t    {\n+\t      memsize = TYPE_SIZE_UNIT (TREE_TYPE (init));\n+\t      if (tree refsize = TYPE_SIZE_UNIT (reftype))\n+\t\t{\n+\t\t  /* Use the larger of the initializer size and the tail\n+\t\t     padding in the enclosing struct.  */\n+\t\t  poly_int64 rsz = tree_to_poly_int64 (refsize);\n+\t\t  rsz -= baseoff;\n+\t\t  if (known_lt (tree_to_poly_int64 (memsize), rsz))\n+\t\t    memsize = wide_int_to_tree (TREE_TYPE (memsize), rsz);\n+\t\t}\n \n-\t    baseoff = 0;\n-\t  }\n-      }\n+\t      baseoff = 0;\n+\t    }\n+\t}\n \n   if (!memsize)\n     {"}]}