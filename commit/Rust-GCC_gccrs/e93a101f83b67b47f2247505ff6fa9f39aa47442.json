{"sha": "e93a101f83b67b47f2247505ff6fa9f39aa47442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzYTEwMWY4M2I2N2I0N2YyMjQ3NTA1ZmY2ZmE5ZjM5YWE0NzQ0Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-21T19:38:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-21T19:38:51Z"}, "message": "Fix out-of-bound array accesses in libstdc++ testsuite\n\n\t* testsuite/21_strings/basic_string/modifiers/append/char/1.cc: Fix\n\treads past the end of strings.\n\t* testsuite/21_strings/basic_string/operations/compare/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/char_traits/requirements/short/1.cc: Fix\n\tinvalid array accesses.\n\t* testsuite/experimental/string_view/operations/compare/char/1.cc:\n\tFix read past the end of string.\n\t* testsuite/util/testsuite_character.cc: Fix out-of-bounds write.\n\nFrom-SVN: r238609", "tree": {"sha": "68fb4010a5409749d66d2fd65b200aeb60dddd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68fb4010a5409749d66d2fd65b200aeb60dddd18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93a101f83b67b47f2247505ff6fa9f39aa47442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93a101f83b67b47f2247505ff6fa9f39aa47442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93a101f83b67b47f2247505ff6fa9f39aa47442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93a101f83b67b47f2247505ff6fa9f39aa47442/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a024155c41930a6994d08157a26900832cdfe63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a024155c41930a6994d08157a26900832cdfe63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a024155c41930a6994d08157a26900832cdfe63"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "7ad94786bd74d01fb76f574d6752eb7184637af4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -1,5 +1,15 @@\n 2016-07-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/21_strings/basic_string/modifiers/append/char/1.cc: Fix\n+\treads past the end of strings.\n+\t* testsuite/21_strings/basic_string/operations/compare/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/char_traits/requirements/short/1.cc: Fix\n+\tinvalid array accesses.\n+\t* testsuite/experimental/string_view/operations/compare/char/1.cc:\n+\tFix read past the end of string.\n+\t* testsuite/util/testsuite_character.cc: Fix out-of-bounds write.\n+\n \t* testsuite/24_iterators/container_access.cc: Fix missing returns.\n \t* testsuite/24_iterators/range_access_cpp14.cc: Likewise.\n "}, {"sha": "1ccb9da5fd6775f7f1573bf90466c55fc216b36e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/append/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fappend%2Fchar%2F1.cc?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -118,7 +118,7 @@ bool test01(void)\n   VERIFY( str06 == \"corpus, corpus\" );\n \n   str06 = str02;\n-  str06.append(\"corpus, \", 12);\n+  str06.append(\"corpus, \", 9); // n=9 includes null terminator\n   VERIFY( str06 != \"corpus, corpus, \" );\n \n "}, {"sha": "7fe30a7ea7f470635f2fb52485f9199a3e42b296", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -80,10 +80,10 @@ test01()\n   test_value(strcmp(str_1.data(), str_0.data()), lt);\n   test_value(strcmp(str_0.data(), str_1.data()), gt);\n   test_value(strncmp(str_1.data(), str_0.data(), 6), z);\n-  test_value(strncmp(str_1.data(), str_0.data(), 14), lt);\n+  test_value(strncmp(str_1.data(), str_0.data(), 10), lt);\n   test_value(memcmp(str_1.data(), str_0.data(), 6), z);\n-  test_value(memcmp(str_1.data(), str_0.data(), 14), lt);\n-  test_value(memcmp(\"costa marbella\", \"costa rica\", 14), lt);\n+  test_value(memcmp(str_1.data(), str_0.data(), 10), lt);\n+  test_value(memcmp(\"costa marbella\", \"costa rica\", 10), lt);\n \n   // int compare(const basic_string& str) const;\n   test_value(str_0.compare(str_1), gt); //because r>m"}, {"sha": "0a2d2ee1dc57324eb1d3bc1af6960bee9fe77102", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/short/1.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -75,10 +75,11 @@ void test02(void)\n \n   const char_type str_lit1[] = {'m', 'o', 'n', 't', 'a', 'r', 'a', ' ', 'a', 'n', 'd', ' ', 'o', 'c', 'e', 'a', 'n', ' ', 'b', 'e', 'a', 'c', 'h', 0};\n \n-  int len = sizeof(str_lit1)/sizeof(char_type) + sizeof(array1)/sizeof(char_type) - 1;\n+  const int array2_len = sizeof(str_lit1)/sizeof(char_type) + sizeof(array1)/sizeof(char_type) - 1;\n   // two terminating chars\n   char_type array3[] = {'b', 'o', 'r', 'a', 'c', 'a', 'y', ',', ' ', 'p', 'h', 'i', 'l', 'i', 'p', 'p', 'i', 'n', 'e', 's', 0};\n-  char_type array2[len];\n+  char_type array2[array2_len];\n+  int len = std::min<int>(array2_len, sizeof(array3)/sizeof(char_type));\n   std::char_traits<char_type>::copy(array2, array3, len);\n \n   VERIFY( str_lit1[0] == 'm' );\n@@ -139,13 +140,12 @@ void test02(void)\n   VERIFY( pc4 == 0 );\n \n   // char_type* X::assign(char_type* s, size_t n, char_type c)\n-  len = sizeof(array2) / sizeof(char_type);\n-  std::memset(array2, 0xaf, len * sizeof(char_type));\n+  std::memset(array2, 0xaf, array2_len * sizeof(char_type));\n   VERIFY( array2[0] != 0x15a8 );\n \n-  pc1 = std::char_traits<char_type>::assign (array2, len, 0x15a8);\n+  pc1 = std::char_traits<char_type>::assign (array2, array2_len, 0x15a8);\n   VERIFY( pc1 == array2 );\n-  for (int i = 0; i < len; ++i)\n+  for (int i = 0; i < array2_len; ++i)\n     VERIFY( array2[i] == 0x15a8 );\n \n   // char_type* X::copy(char_type* s, const char_type* p, size_t n)"}, {"sha": "e4d733fe6f1e53eb2aa8f75433fb744452755da2", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F1.cc?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -82,8 +82,8 @@ test01()\n   test_value(strncmp(str_1.data(), str_0.data(), 6), z);\n   test_value(strncmp(str_1.data(), str_0.data(), 14), lt);\n   test_value(memcmp(str_1.data(), str_0.data(), 6), z);\n-  test_value(memcmp(str_1.data(), str_0.data(), 14), lt);\n-  test_value(memcmp(\"costa marbella\", \"costa rica\", 14), lt);\n+  test_value(memcmp(str_1.data(), str_0.data(), 10), lt);\n+  test_value(memcmp(\"costa marbella\", \"costa rica\", 10), lt);\n \n   // int compare(const basic_string_view& str) const;\n   test_value(str_0.compare(str_1), gt); //because r>m"}, {"sha": "e4fea0e771d27f728a041b22063c3848346b4671", "filename": "libstdc++-v3/testsuite/util/testsuite_character.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93a101f83b67b47f2247505ff6fa9f39aa47442/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_character.cc?ref=e93a101f83b67b47f2247505ff6fa9f39aa47442", "patch": "@@ -154,11 +154,9 @@ namespace std\n \t  value_type v = __num_base::_S_atoms_out[i];\n \t  _M_data->_M_atoms_out[i].value = v;\n \t}\n-      _M_data->_M_atoms_out[__num_base::_S_oend] = pod_ushort();\n \n       for (size_t j = 0; j < __num_base::_S_iend; ++j)\n \t_M_data->_M_atoms_in[j].value = value_type(__num_base::_S_atoms_in[j]);\n-      _M_data->_M_atoms_in[__num_base::_S_iend] = pod_ushort();\n \n       // \"true\"\n       pod_ushort* __truename = new pod_ushort[4 + 1];"}]}