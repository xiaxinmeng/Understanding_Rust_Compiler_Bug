{"sha": "cd5a58e5925d0983a59dc98a4ab12224d4624559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1YTU4ZTU5MjVkMDk4M2E1OWRjOThhNGFiMTIyMjRkNDYyNDU1OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-02-20T05:49:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-02-20T05:49:06Z"}, "message": "sibcall.c (skip_copy_to_return_value): Call identify_call_return_value here, and return orig_insn if it returns zero.\n\n\t* sibcall.c (skip_copy_to_return_value): Call\n\tidentify_call_return_value here, and return orig_insn if it\n\treturns zero.  Hardret and softret arguments now unnecessary.\n\t(call_ends_block_p): Don't call identify_call_return_value here.\n\n\t* ggc-common.c (ggc_mark_rtx_children): No need to mark 'S' or\n\t's' slots in RTXen.\n\t* ggc-page.c, ggc-simple.c (ggc_mark_if_gcable): Delete\tfunction.\n\t* ggc.h (ggc_mark_if_gcable): Delete prototype.\n\ntestsuite:\n\t* g77.dg: New directory.\n\t* g77.dg/20010216-1.f: New test case.\n\t* g77.dg/dg.exp: New driver.\n\t* lib/g77-dg.exp: New driver library.\n\nFrom-SVN: r39916", "tree": {"sha": "51e806341a185dae0e1fc20ec036ecd1ec7fa9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e806341a185dae0e1fc20ec036ecd1ec7fa9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5a58e5925d0983a59dc98a4ab12224d4624559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5a58e5925d0983a59dc98a4ab12224d4624559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5a58e5925d0983a59dc98a4ab12224d4624559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5a58e5925d0983a59dc98a4ab12224d4624559/comments", "author": null, "committer": null, "parents": [{"sha": "3d55d2f8dce48e3511a24887892f4a95fa607b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d55d2f8dce48e3511a24887892f4a95fa607b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d55d2f8dce48e3511a24887892f4a95fa607b45"}], "stats": {"total": 331, "additions": 280, "deletions": 51}, "files": [{"sha": "af312cd6b7a2a869bd661fa865a6d9189465a233", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1,3 +1,15 @@\n+2001-02-19  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* sibcall.c (skip_copy_to_return_value): Call\n+\tidentify_call_return_value here, and return orig_insn if it\n+\treturns zero.  Hardret and softret arguments now unnecessary.\n+\t(call_ends_block_p): Don't call identify_call_return_value here.\n+\n+\t* ggc-common.c (ggc_mark_rtx_children): No need to mark 'S' or\n+\t's' slots in RTXen.\n+\t* ggc-page.c, ggc-simple.c (ggc_mark_if_gcable): Delete\tfunction.\n+\t* ggc.h (ggc_mark_if_gcable): Delete prototype.\n+\n Mon Feb 19 20:30:16 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.c (move_operand): Accept code to load the address of a"}, {"sha": "cb75a75f4be5f236487483d8616bd84e58b75f30", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1,5 +1,5 @@\n /* Simple garbage collection for the GNU compiler.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -277,9 +277,6 @@ ggc_mark_rtx_children (r)\n \t    case 'V': case 'E':\n \t      ggc_mark_rtvec (XVEC (r, i));\n \t      break;\n-\t    case 'S': case 's':\n-\t      ggc_mark_if_gcable (XSTR (r, i));\n-\t      break;\n \t    }\n \t}\n     }"}, {"sha": "559183e2d3494c786acc72d8e824e250ad99005a", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1001,16 +1001,6 @@ ggc_set_mark (p)\n   return 0;\n }\n \n-/* Mark P, but check first that it was allocated by the collector.  */\n-\n-void\n-ggc_mark_if_gcable (p)\n-     const void *p;\n-{\n-  if (p && ggc_allocated_p (p))\n-    ggc_set_mark (p);\n-}\n-\n /* Return the size of the gc-able object P.  */\n \n size_t"}, {"sha": "457b420f2607a077b867e8525c5b84b1c6960d75", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1,5 +1,5 @@\n /* Simple garbage collection for the GNU compiler.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -228,29 +228,6 @@ ggc_set_mark (p)\n   return 0;\n }\n \n-/* Mark a node, but check first to see that it's really gc-able memory.  */\n-\n-void\n-ggc_mark_if_gcable (p)\n-     const void *p;\n-{\n-  struct ggc_mem *x;\n-\n-  if (p == NULL)\n-    return;\n-\n-  x = (struct ggc_mem *) ((const char *)p - offsetof (struct ggc_mem, u));\n-  if (! tree_lookup (x))\n-    return;\n-\n-  if (x->mark)\n-    return;\n-\n-  x->mark = 1;\n-  G.allocated += x->size;\n-  G.objects += 1;\n-}\n-\n /* Return the size of the gc-able object P.  */\n \n size_t"}, {"sha": "3decec35615ae08ba3908c0f69f0aa4175d57c54", "filename": "gcc/ggc.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1,5 +1,5 @@\n /* Garbage collection for the GNU compiler.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -99,9 +99,6 @@ extern void ggc_mark_rtvec_children PARAMS ((struct rtvec_def *));\n       ggc_set_mark (a__);\t\t\t\\\n   } while (0)\n \n-/* Mark, but only if it was allocated in collectable memory.  */\n-extern void ggc_mark_if_gcable PARAMS ((const void *));\n-\n /* A GC implementation must provide these functions.  */\n \n /* Initialize the garbage collector.   */\n@@ -141,8 +138,8 @@ const char *ggc_alloc_string PARAMS ((const char *contents, int length));\n /* Make a copy of S, in GC-able memory.  */\n #define ggc_strdup(S) ggc_alloc_string((S), -1)\n \n-/* Invoke the collector.  This is really just a hint, but in the case of\n-   the simple collector, the only time it will happen.  */\n+/* Invoke the collector.  Garbage collection occurs only when this\n+   function is called, not during allocations.  */\n void ggc_collect PARAMS ((void));\n \n /* Actually set the mark on a particular region of memory, but don't"}, {"sha": "e00e8b790d6909dea7f34a6c62a39b719df077a5", "filename": "gcc/sibcall.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -33,7 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n \n static int identify_call_return_value\tPARAMS ((rtx, rtx *, rtx *));\n-static rtx skip_copy_to_return_value\tPARAMS ((rtx, rtx, rtx));\n+static rtx skip_copy_to_return_value\tPARAMS ((rtx));\n static rtx skip_use_of_return_value\tPARAMS ((rtx, enum rtx_code));\n static rtx skip_stack_adjustment\tPARAMS ((rtx));\n static rtx skip_pic_restore\t\tPARAMS ((rtx));\n@@ -133,11 +133,15 @@ identify_call_return_value (cp, p_hard_return, p_soft_return)\n    copy.  Otherwise return ORIG_INSN.  */\n \n static rtx\n-skip_copy_to_return_value (orig_insn, hardret, softret)\n+skip_copy_to_return_value (orig_insn)\n      rtx orig_insn;\n-     rtx hardret, softret;\n {\n   rtx insn, set = NULL_RTX;\n+  rtx hardret, softret;\n+\n+  /* If there is no return value, we have nothing to do.  */\n+  if (! identify_call_return_value (PATTERN (orig_insn), &hardret, &softret))\n+    return orig_insn;\n \n   insn = next_nonnote_insn (orig_insn);\n   if (! insn)\n@@ -265,8 +269,6 @@ call_ends_block_p (insn, end)\n      rtx insn;\n      rtx end;\n {\n-  rtx hardret, softret;\n-\n   /* END might be a note, so get the last nonnote insn of the block.  */\n   end = next_nonnote_insn (PREV_INSN (end));\n \n@@ -277,8 +279,7 @@ call_ends_block_p (insn, end)\n   /* Skip over copying from the call's return value pseudo into\n      this function's hard return register and if that's the end\n      of the block, we're OK.  */\n-  identify_call_return_value (PATTERN (insn), &hardret, &softret);\n-  insn = skip_copy_to_return_value (insn, hardret, softret);\n+  insn = skip_copy_to_return_value (insn);\n   if (insn == end)\n     return 1;\n "}, {"sha": "62549f89f1dbbfe68a2c0543adb562d273466050", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -1,3 +1,10 @@\n+2001-02-19  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* g77.dg: New directory.\n+\t* g77.dg/20010216-1.f: New test case.\n+\t* g77.dg/dg.exp: New driver.\n+\t* lib/g77-dg.exp: New driver library.\n+\n 2001-02-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.old-deja/g++.other/inline19.c: Remove XFAIL."}, {"sha": "150dc9f016ac511fd1ff2ccf773eab06853a98b0", "filename": "gcc/testsuite/g77.dg/20010216-1.f", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Fg77.dg%2F20010216-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Fg77.dg%2F20010216-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2F20010216-1.f?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -0,0 +1,51 @@\n+C Test for bug in reg-stack handling conditional moves.\n+C Reported by Tim Prince <tprince@computer.org>\n+C\n+C { dg-do run { target \"i[6789]86-*-*\" } }\n+C { dg-options \"-ffast-math -march=pentiumpro\" }\n+\n+      double precision function foo(x, y)\n+         implicit none\n+         double precision x, y\n+         double precision a, b, c, d\n+         if (x /= y) then\n+             if (x * y >= 0) then\n+                 a = abs(x)\n+                 b = abs(y)\n+                 c = max(a, b)\n+                 d = min(a, b)\n+                 foo = 1 - d/c\n+             else       \n+                 foo = 1\n+             end if  \n+         else\n+             foo = 0\n+         end if\n+      end\n+\n+      program test\n+      implicit none\n+\n+      integer ntests\n+      parameter (ntests=7)\n+      double precision tolerance\n+      parameter (tolerance=1.0D-6)\n+\n+C Each column is a pair of values to feed to foo,\n+C and its expected return value.\n+      double precision a(ntests) /1, -23, -1,   1,   9,  10,  -9/\n+      double precision b(ntests) /1, -23, 12, -12,  10,   9, -10/\n+      double precision x(ntests) /0,   0,  1,   1, 0.1, 0.1, 0.1/\n+\n+      double precision foo\n+      double precision result\n+      integer i\n+\n+      do i = 1, ntests\n+         result = foo(a(i), b(i))\n+         if (abs(result - x(i)) > tolerance) then\n+           print *, i, a(i), b(i), x(i), result\n+           call abort\n+         end if\n+      end do\n+      end"}, {"sha": "446166c49dbe066644eac895da5fdba07e88e7ac", "filename": "gcc/testsuite/g77.dg/dg.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Fg77.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Fg77.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2Fdg.exp?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -0,0 +1,36 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g77-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_FFLAGS\n+if ![info exists DEFAULT_FFLAGS] then {\n+    set DEFAULT_FFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+g77-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.f]] \\\n+\t$DEFAULT_FFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "cb72c365361c8ee2fc516f900d92e85bee606a23", "filename": "gcc/testsuite/lib/g77-dg.exp", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Flib%2Fg77-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5a58e5925d0983a59dc98a4ab12224d4624559/gcc%2Ftestsuite%2Flib%2Fg77-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg77-dg.exp?ref=cd5a58e5925d0983a59dc98a4ab12224d4624559", "patch": "@@ -0,0 +1,161 @@\n+#   Copyright (C) 1997, 1999, 2000 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+load_lib dg.exp\n+load_lib file-format.exp\n+load_lib target-supports.exp\n+load_lib scanasm.exp\n+\n+if ![info exists TORTURE_OPTIONS] {\n+    # It is theoretically beneficial to group all of the O2/O3 options together,\n+    # as in many cases the compiler will generate identical executables for\n+    # all of them--and the c-torture testsuite will skip testing identical\n+    # executables multiple times.\n+    # Also note that -finline-functions is explicitly included in one of the\n+    # items below, even though -O3 is also specified, because some ports may\n+    # choose to disable inlining functions by default, even when optimizing.\n+    set TORTURE_OPTIONS [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 -fomit-frame-pointer } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n+\t{ -O3 -g } \\\n+\t{ -Os } ]\n+}\n+\n+\n+# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n+# one for testcases without loops.\n+\n+set torture_with_loops $TORTURE_OPTIONS\n+set torture_without_loops \"\"\n+foreach option $TORTURE_OPTIONS {\n+    if ![string match \"*loop*\" $option] {\n+\tlappend torture_without_loops $option\n+    }\n+}\n+\n+# Define g77 callbacks for dg.exp.\n+\n+proc g77-dg-test { prog do_what extra_tool_flags } {\n+    # Set up the compiler flags, based on what we're going to do.\n+\n+    switch $do_what {\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"a.out\"\n+\t    # The following line is needed for targets like the i960 where\n+\t    # the default output file is b.out.  Sigh.\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./a.out\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    remote_file build delete $output_file;\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n+    }\n+    set options \"\"\n+    if { $extra_tool_flags != \"\" } {\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n+    }\n+\n+    set comp_output [g77_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+proc g77-dg-prune { system text } {\n+    set text [prune_g77_output $text]\n+\n+    # If we see \"region xxx is full\" then the testcase is too big for ram.\n+    # This is tricky to deal with in a large testsuite like c-torture so\n+    # deal with it here.  Just mark the testcase as unsupported.\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $text] {\n+\t# The format here is important.  See dg.exp.\n+\treturn \"::unsupported::memory full\"\n+    }\n+\n+    return $text\n+}\n+\n+# Utility routines.\n+\n+#\n+# search_for -- looks for a string match in a file\n+#\n+proc search_for { file pattern } {\n+    set fd [open $file r]\n+    while { [gets $fd cur_line]>=0 } {\n+\tif [string match \"*$pattern*\" $cur_line] then {\n+\t    close $fd\n+\t    return 1\n+\t}\n+    }\n+    close $fd\n+    return 0\n+}\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc g77-dg-runtest { testcases default-extra-flags } {\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of \n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+        }\n+\n+\t# Look for a loop within the source code - if we don't find one,\n+\t# don't pass -funroll[-all]-loops.\n+\tglobal torture_with_loops torture_without_loops\n+\tif [expr [search_for $test \"do *\\[0-9\\]\"]+[search_for $test \"end *do\"]] {\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list $torture_without_loops\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    verbose \"Testing $nshort, $flags\" 1\n+\t    dg-test $test $flags ${default-extra-flags}\n+\t}\n+    }\n+}"}]}