{"sha": "3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2MDFjYTNlYjFjYjU4OGNjMDM4M2M5NDgwZWI2ZmNiOTg2ZWEyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-10-23T14:40:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-23T14:40:07Z"}, "message": "linux-common.h (STACK_CHECK_STATIC_BUILTIN): Define.\n\n\t* config/mips/linux-common.h (STACK_CHECK_STATIC_BUILTIN): Define.\n\t(STACK_CHECK_PROTECT): Likewise.\n\t* config/mips/mips.h (MIPS_PROLOGUE_TEMP2_REGNUM): Likewise.\n\t(MIPS_PROLOGUE_TEMP2): Likewise.\n\t* config/mips/mips-protos.h (mips_output_probe_stack_range): Declare.\n\t* config/mips/mips.c: Include common/common-target.h.\n\t(mips_emit_probe_stack_range): New function.\n\t(mips_output_probe_stack_range): Likewise.\n\t(mips_expand_prologue): Invoke mips_emit_probe_stack_range if static\n\tbuiltin stack checking is enabled.\n\t* config/mips/mips.md (UNSPEC_PROBE_STACK_RANGE): New constant.\n\t(probe_stack_range_<P:mode>): New insn.\nada/\n\t* system-linux-mipsel.ads (Stack_Check_Probes): Set to True.\n\t* system-linux-mips.ads (Stack_Check_Probes): Likewise.\n\t* system-linux-mips64el.ads (Stack_Check_Probes): Likewise.\n\nFrom-SVN: r192713", "tree": {"sha": "24d37e2d6914736c1bee09bde10d8ad7b3d8a934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d37e2d6914736c1bee09bde10d8ad7b3d8a934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/comments", "author": null, "committer": null, "parents": [{"sha": "a8dcc458896307fb03bb3b8c56c33a1b860837c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8dcc458896307fb03bb3b8c56c33a1b860837c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8dcc458896307fb03bb3b8c56c33a1b860837c4"}], "stats": {"total": 205, "additions": 199, "deletions": 6}, "files": [{"sha": "8b530790bd8939f76a652095eba92410716e0f91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -1,3 +1,18 @@\n+2012-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/mips/linux-common.h (STACK_CHECK_STATIC_BUILTIN): Define.\n+\t(STACK_CHECK_PROTECT): Likewise.\n+\t* config/mips/mips.h (MIPS_PROLOGUE_TEMP2_REGNUM): Likewise.\n+\t(MIPS_PROLOGUE_TEMP2): Likewise.\n+\t* config/mips/mips-protos.h (mips_output_probe_stack_range): Declare.\n+\t* config/mips/mips.c: Include common/common-target.h.\n+\t(mips_emit_probe_stack_range): New function.\n+\t(mips_output_probe_stack_range): Likewise.\n+\t(mips_expand_prologue): Invoke mips_emit_probe_stack_range if static\n+\tbuiltin stack checking is enabled.\n+\t* config/mips/mips.md (UNSPEC_PROBE_STACK_RANGE): New constant.\n+\t(probe_stack_range_<P:mode>): New insn.\n+\n 2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_cond): Handle vectors."}, {"sha": "001a8d901f17c39b14ff80a86259fcd19904f1a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -1,3 +1,9 @@\n+2012-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* system-linux-mipsel.ads (Stack_Check_Probes): Set to True.\n+\t* system-linux-mips.ads (Stack_Check_Probes): Likewise.\n+\t* system-linux-mips64el.ads (Stack_Check_Probes): Likewise.\n+\n 2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Force"}, {"sha": "18f449563d4a22e37809941d2dffbec9df7e2bdf", "filename": "gcc/ada/system-linux-mips.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mips.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mips.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-mips.ads?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                          (GNU-Linux/MIPS Version)                        --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -128,7 +128,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;"}, {"sha": "85a0f41c3b0a24ab65ebed8b8c48e93341dc5de0", "filename": "gcc/ada/system-linux-mips64el.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mips64el.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mips64el.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-mips64el.ads?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (GNU-Linux/MIPS64EL Version)                       --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -128,7 +128,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;"}, {"sha": "c700048b8797249b8e826bc9f01f95aa4561d16c", "filename": "gcc/ada/system-linux-mipsel.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mipsel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fada%2Fsystem-linux-mipsel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-mipsel.ads?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                        (GNU-Linux/MIPSEL Version)                        --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -128,7 +128,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;"}, {"sha": "513590544c7a33fbbcec4d0632878ddcb95e647d", "filename": "gcc/config/mips/linux-common.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-common.h?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -56,3 +56,9 @@ along with GCC; see the file COPYING3.  If not see\n \t\t       GNU_USER_TARGET_ENDFILE_SPEC,\t\t\t\\\n \t\t       GNU_USER_TARGET_MATHFILE_SPEC \" \"\t\t\\\n \t\t       ANDROID_ENDFILE_SPEC)\n+\n+/* Define this to be nonzero if static stack checking is supported.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)"}, {"sha": "3aaf5f347eafb805e521e276491f5468c4571242", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -316,6 +316,7 @@ extern const char *mips_output_sync (void);\n extern const char *mips_output_sync_loop (rtx, rtx *);\n extern unsigned int mips_sync_loop_insns (rtx, rtx *);\n extern const char *mips_output_division (const char *, rtx *);\n+extern const char *mips_output_probe_stack_range (rtx, rtx);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n extern bool mips_linked_madd_p (rtx, rtx);\n extern bool mips_store_data_bypass_p (rtx, rtx);"}, {"sha": "b8675927715a38e1181f181fec1e03bfeb0c4004", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"sched-int.h\"\n #include \"gimple.h\"\n@@ -10613,6 +10614,144 @@ mips_emit_loadgp (void)\n     emit_insn (gen_loadgp_blockage ());\n }\n \n+#define PROBE_INTERVAL (1 << STACK_CHECK_PROBE_INTERVAL_EXP)\n+\n+#if PROBE_INTERVAL > 32768\n+#error Cannot use indexed addressing mode for stack probing\n+#endif\n+\n+/* Emit code to probe a range of stack addresses from FIRST to FIRST+SIZE,\n+   inclusive.  These are offsets from the current stack pointer.  */\n+\n+static void\n+mips_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n+{\n+  if (TARGET_MIPS16)\n+    sorry (\"-fstack-check=specific not implemented for MIPS16\");\n+\n+  /* See if we have a constant small number of probes to generate.  If so,\n+     that's the easy case.  */\n+  if (first + size <= 32768)\n+    {\n+      HOST_WIDE_INT i;\n+\n+      /* Probe at FIRST + N * PROBE_INTERVAL for values of N from 1 until\n+\t it exceeds SIZE.  If only one probe is needed, this will not\n+\t generate any code.  Then probe at FIRST + SIZE.  */\n+      for (i = PROBE_INTERVAL; i < size; i += PROBE_INTERVAL)\n+        emit_stack_probe (plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t -(first + i)));\n+\n+      emit_stack_probe (plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t       -(first + size)));\n+    }\n+\n+  /* Otherwise, do the same as above, but in a loop.  Note that we must be\n+     extra careful with variables wrapping around because we might be at\n+     the very top (or the very bottom) of the address space and we have\n+     to be able to handle this case properly; in particular, we use an\n+     equality test for the loop condition.  */\n+  else\n+    {\n+      HOST_WIDE_INT rounded_size;\n+      rtx r3 = MIPS_PROLOGUE_TEMP (Pmode);\n+      rtx r12 = MIPS_PROLOGUE_TEMP2 (Pmode);\n+\n+      /* Sanity check for the addressing mode we're going to use.  */\n+      gcc_assert (first <= 32768);\n+\n+\n+      /* Step 1: round SIZE to the previous multiple of the interval.  */\n+\n+      rounded_size = size & -PROBE_INTERVAL;\n+\n+\n+      /* Step 2: compute initial and final value of the loop counter.  */\n+\n+      /* TEST_ADDR = SP + FIRST.  */\n+      emit_insn (gen_rtx_SET (VOIDmode, r3,\n+\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t     -first)));\n+\n+      /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n+      if (rounded_size > 32768)\n+\t{\n+          emit_move_insn (r12, GEN_INT (rounded_size));\n+\t  emit_insn (gen_rtx_SET (VOIDmode, r12,\n+\t\t\t          gen_rtx_MINUS (Pmode, r3, r12)));\n+\t}\n+      else\n+\temit_insn (gen_rtx_SET (VOIDmode, r12,\n+\t\t\t        plus_constant (Pmode, r3, -rounded_size)));\n+\n+\n+      /* Step 3: the loop\n+\n+\twhile (TEST_ADDR != LAST_ADDR)\n+\t  {\n+\t    TEST_ADDR = TEST_ADDR + PROBE_INTERVAL\n+\t    probe at TEST_ADDR\n+\t  }\n+\n+\tprobes at FIRST + N * PROBE_INTERVAL for values of N from 1\n+\tuntil it is equal to ROUNDED_SIZE.  */\n+\n+      emit_insn (PMODE_INSN (gen_probe_stack_range, (r3, r3, r12)));\n+\n+\n+      /* Step 4: probe at FIRST + SIZE if we cannot assert at compile-time\n+\t that SIZE is equal to ROUNDED_SIZE.  */\n+\n+      if (size != rounded_size)\n+\temit_stack_probe (plus_constant (Pmode, r12, rounded_size - size));\n+    }\n+\n+  /* Make sure nothing is scheduled before we are done.  */\n+  emit_insn (gen_blockage ());\n+}\n+\n+/* Probe a range of stack addresses from REG1 to REG2 inclusive.  These are\n+   absolute addresses.  */\n+\n+const char *\n+mips_output_probe_stack_range (rtx reg1, rtx reg2)\n+{\n+  static int labelno = 0;\n+  char loop_lab[32], end_lab[32], tmp[64];\n+  rtx xops[2];\n+\n+  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno);\n+  ASM_GENERATE_INTERNAL_LABEL (end_lab, \"LPSRE\", labelno++);\n+\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, loop_lab);\n+\n+  /* Jump to END_LAB if TEST_ADDR == LAST_ADDR.  */\n+  xops[0] = reg1;\n+  xops[1] = reg2;\n+  strcpy (tmp, \"%(%<beq\\t%0,%1,\");\n+  output_asm_insn (strcat (tmp, &end_lab[1]), xops);\n+ \n+  /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n+  xops[1] = GEN_INT (-PROBE_INTERVAL);\n+  if (TARGET_64BIT && TARGET_LONG64)\n+    output_asm_insn (\"daddiu\\t%0,%0,%1\", xops);\n+  else\n+    output_asm_insn (\"addiu\\t%0,%0,%1\", xops);\n+\n+  /* Probe at TEST_ADDR and branch.  */\n+  fprintf (asm_out_file, \"\\tb\\t\");\n+  assemble_name_raw (asm_out_file, loop_lab);\n+  fputc ('\\n', asm_out_file);\n+  if (TARGET_64BIT)\n+    output_asm_insn (\"sd\\t$0,0(%0)%)\", xops);\n+  else\n+    output_asm_insn (\"sw\\t$0,0(%0)%)\", xops);\n+\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, end_lab);\n+\n+  return \"\";\n+}\n+\n /* A for_each_rtx callback.  Stop the search if *X is a kernel register.  */\n \n static int\n@@ -10652,6 +10791,9 @@ mips_expand_prologue (void)\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n+  if (flag_stack_check == STATIC_BUILTIN_STACK_CHECK && size)\n+    mips_emit_probe_stack_range (STACK_CHECK_PROTECT, size);\n+\n   /* Save the registers.  Allocate up to MIPS_MAX_FIRST_STACK_STEP\n      bytes beforehand; this is enough to cover the register save area\n      without going out of range.  */"}, {"sha": "308b59b856e18d0d18a5aa265ea1369269e0980c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -1743,6 +1743,9 @@ struct mips_cpu_info {\n    - The prologue can use MIPS_PROLOGUE_TEMP as a general temporary\n      register.  The register must not conflict with MIPS16_PIC_TEMP.\n \n+   - If we aren't generating MIPS16 code, the prologue can also use\n+     MIPS_PROLOGUE_TEMP2 as a general temporary register.\n+\n    - The epilogue can use MIPS_EPILOGUE_TEMP as a general temporary\n      register.\n \n@@ -1759,13 +1762,19 @@ struct mips_cpu_info {\n #define MIPS16_PIC_TEMP_REGNUM (GP_REG_FIRST + 2)\n #define MIPS_PROLOGUE_TEMP_REGNUM \\\n   (cfun->machine->interrupt_handler_p ? K0_REG_NUM : GP_REG_FIRST + 3)\n+#define MIPS_PROLOGUE_TEMP2_REGNUM \\\n+  (TARGET_MIPS16 \\\n+   ? (gcc_unreachable (), INVALID_REGNUM) \\\n+   : cfun->machine->interrupt_handler_p ? K1_REG_NUM : GP_REG_FIRST + 12)\n #define MIPS_EPILOGUE_TEMP_REGNUM\t\t\\\n   (cfun->machine->interrupt_handler_p\t\t\\\n    ? K0_REG_NUM\t\t\t\t\t\\\n    : GP_REG_FIRST + (TARGET_MIPS16 ? 6 : 8))\n \n #define MIPS16_PIC_TEMP gen_rtx_REG (Pmode, MIPS16_PIC_TEMP_REGNUM)\n #define MIPS_PROLOGUE_TEMP(MODE) gen_rtx_REG (MODE, MIPS_PROLOGUE_TEMP_REGNUM)\n+#define MIPS_PROLOGUE_TEMP2(MODE) \\\n+  gen_rtx_REG (MODE, MIPS_PROLOGUE_TEMP2_REGNUM)\n #define MIPS_EPILOGUE_TEMP(MODE) gen_rtx_REG (MODE, MIPS_EPILOGUE_TEMP_REGNUM)\n \n /* Define this macro if it is as good or better to call a constant"}, {"sha": "f6a13129d600eb89b9363927af76ca2acd4ec987", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "patch": "@@ -137,6 +137,9 @@\n \n   ;; MIPS16 casesi jump table dispatch.\n   UNSPEC_CASESI_DISPATCH\n+\n+  ;; Stack checking.\n+  UNSPEC_PROBE_STACK_RANGE\n ])\n \n (define_constants\n@@ -6040,6 +6043,17 @@\n   [(set_attr \"type\" \"ghost\")\n    (set_attr \"mode\" \"none\")])\n \n+(define_insn \"probe_stack_range_<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")\n+\t\t\t    (match_operand:P 2 \"register_operand\" \"d\")]\n+\t\t\t    UNSPEC_PROBE_STACK_RANGE))]\n+  \"\"\n+ { return mips_output_probe_stack_range (operands[0], operands[2]); }\n+  [(set_attr \"type\" \"unknown\")\n+   (set_attr \"can_delay\" \"no\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"epilogue\"\n   [(const_int 2)]\n   \"\""}]}