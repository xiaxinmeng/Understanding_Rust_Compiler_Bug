{"sha": "deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjYTczZjVkZTRmZDI1ZWE5ZTg0ZGZkYzhmMzJhNmNiZGRmYjcwNQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-04-29T19:42:20Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-04-29T19:42:20Z"}, "message": "re PR target/57097 (ICE: in find_hard_regno_for, at lra-assigns.c:561 with -O2 -fPIC -m32)\n\n2013-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/57097\n        * lra-constraints.c (process_alt_operands): Discourage a bit more\n\tusing memory for pseudos.  Print cost dump for alternatives.\n\tModify cost values for conflicts with early clobbers.\n\t(curr_insn_transform): Spill pseudos reassigned to NO_REGS.\n\n2013-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/57097\n\t* gcc.target/i386/pr57097.c: New test.\n\nFrom-SVN: r198432", "tree": {"sha": "a36cb170cf50fd59a283c83c77438361a593bf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a36cb170cf50fd59a283c83c77438361a593bf80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdca7d03ed6e89242d79d704659a70e147350823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdca7d03ed6e89242d79d704659a70e147350823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdca7d03ed6e89242d79d704659a70e147350823"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "f587af83b6c523b072100222be7a7c3579fe5aed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "patch": "@@ -1,3 +1,11 @@\n+2013-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/57097\n+        * lra-constraints.c (process_alt_operands): Discourage a bit more\n+\tusing memory for pseudos.  Print cost dump for alternatives.\n+\tModify cost values for conflicts with early clobbers.\n+\t(curr_insn_transform): Spill pseudos reassigned to NO_REGS.\n+\n 2013-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/57098"}, {"sha": "d9e14dc44ce767597b4ed3832c219d4684aa90be", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "patch": "@@ -2013,7 +2013,7 @@ process_alt_operands (int only_alternative)\n \t\t although it might takes the same number of\n \t\t reloads.  */\n \t      if (no_regs_p && REG_P (op))\n-\t\treject++;\n+\t\treject += 2;\n \n #ifdef SECONDARY_MEMORY_NEEDED\n \t      /* If reload requires moving value through secondary\n@@ -2044,7 +2044,13 @@ process_alt_operands (int only_alternative)\n \t     or non-important thing to be worth to do it.  */\n \t  overall = losers * LRA_LOSER_COST_FACTOR + reject;\n \t  if ((best_losers == 0 || losers != 0) && best_overall < overall)\n-\t    goto fail;\n+            {\n+              if (lra_dump_file != NULL)\n+\t\tfprintf (lra_dump_file,\n+\t\t\t \"          alt=%d,overall=%d,losers=%d -- reject\\n\",\n+\t\t\t nalt, overall, losers);\n+              goto fail;\n+            }\n \n \t  curr_alt[nop] = this_alternative;\n \t  COPY_HARD_REG_SET (curr_alt_set[nop], this_alternative_set);\n@@ -2139,7 +2145,10 @@ process_alt_operands (int only_alternative)\n \t      curr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++]\n \t\t= last_conflict_j;\n \t      losers++;\n-\t      overall += LRA_LOSER_COST_FACTOR;\n+\t      /* Early clobber was already reflected in REJECT. */\n+\t      lra_assert (reject > 0);\n+\t      reject--;\n+\t      overall += LRA_LOSER_COST_FACTOR - 1;\n \t    }\n \t  else\n \t    {\n@@ -2163,14 +2172,22 @@ process_alt_operands (int only_alternative)\n \t\t}\n \t      curr_alt_win[i] = curr_alt_match_win[i] = false;\n \t      losers++;\n-\t      overall += LRA_LOSER_COST_FACTOR;\n+\t      /* Early clobber was already reflected in REJECT. */\n+\t      lra_assert (reject > 0);\n+\t      reject--;\n+\t      overall += LRA_LOSER_COST_FACTOR - 1;\n \t    }\n \t}\n       small_class_operands_num = 0;\n       for (nop = 0; nop < n_operands; nop++)\n \tsmall_class_operands_num\n \t  += SMALL_REGISTER_CLASS_P (curr_alt[nop]) ? 1 : 0;\n \n+      if (lra_dump_file != NULL)\n+\tfprintf (lra_dump_file, \"          alt=%d,overall=%d,losers=%d,\"\n+\t\t \"small_class_ops=%d,rld_nregs=%d\\n\",\n+\t\t nalt, overall, losers, small_class_operands_num, reload_nregs);\n+\n       /* If this alternative can be made to work by reloading, and it\n \t needs less reloading than the others checked so far, record\n \t it as the chosen goal for reloading.  */\n@@ -3136,7 +3153,15 @@ curr_insn_transform (void)\n \t\t spilled.  Spilled scratch pseudos are transformed\n \t\t back to scratches at the LRA end.  */\n \t      && lra_former_scratch_operand_p (curr_insn, i))\n-\t    change_class (REGNO (op), NO_REGS, \"      Change\", true);\n+\t    {\n+\t      int regno = REGNO (op);\n+\t      change_class (regno, NO_REGS, \"      Change\", true);\n+\t      if (lra_get_regno_hard_regno (regno) >= 0)\n+\t\t/* We don't have to mark all insn affected by the\n+\t\t   spilled pseudo as there is only one such insn, the\n+\t\t   current one.  */\n+\t\treg_renumber[regno] = -1;\n+\t    }\n \t  continue;\n \t}\n "}, {"sha": "42f141e92a2b6a5ab5cb53ef88074ccd0dbbd074", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "patch": "@@ -1,3 +1,8 @@\n+2013-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/57097\n+\t* gcc.target/i386/pr57097.c: New test.\n+\n 2013-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/57098"}, {"sha": "2f0093840df51850519887c35d521fa1a8b6944e", "filename": "gcc/testsuite/gcc.target/i386/pr57097.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57097.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57097.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57097.c?ref=deca73f5de4fd25ea9e84dfdc8f32a6cbddfb705", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+extern double ad[], bd[], cd[], dd[];\n+extern long long all[], bll[], cll[], dll[];\n+\n+int\n+main (int i, char **a)\n+{\n+  bd[i] = i + 64;\n+  if (i % 3 == 0)\n+    {\n+      cd[i] = i;\n+    }\n+  dd[i] = i / 2;\n+  ad[i] = i * 2;\n+  if (i % 3 == 1)\n+    {\n+      dll[i] = 127;\n+    }\n+  dll[i] = i;\n+  cll[i] = i * 2;\n+  switch (i % 3)\n+    {\n+    case 0:\n+      bll[i] = i + 64;\n+    }\n+  all[i] = i / 2;\n+  return 0;\n+}"}]}