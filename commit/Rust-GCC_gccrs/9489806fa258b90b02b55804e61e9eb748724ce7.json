{"sha": "9489806fa258b90b02b55804e61e9eb748724ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4OTgwNmZhMjU4YjkwYjAyYjU1ODA0ZTYxZTllYjc0ODcyNGNlNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-08T09:41:00Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-08T09:41:00Z"}, "message": "Fix PR97325.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97325\n\t* gimple-range.cc (gimple_ranger::range_of_builtin_call): Handle\n\tnegative numbers in __builtin_ffs and __builtin_popcount.", "tree": {"sha": "87ce8119e0bbeabb45d8b4305f2d32b29041ea87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ce8119e0bbeabb45d8b4305f2d32b29041ea87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9489806fa258b90b02b55804e61e9eb748724ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9489806fa258b90b02b55804e61e9eb748724ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9489806fa258b90b02b55804e61e9eb748724ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9489806fa258b90b02b55804e61e9eb748724ce7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ae6930ed4a87d7b8e25e10378388b3f0dc1729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ae6930ed4a87d7b8e25e10378388b3f0dc1729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ae6930ed4a87d7b8e25e10378388b3f0dc1729"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "2461bb78394c592f3a46da9fb8631479379ce994", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9489806fa258b90b02b55804e61e9eb748724ce7/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9489806fa258b90b02b55804e61e9eb748724ce7/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=9489806fa258b90b02b55804e61e9eb748724ce7", "patch": "@@ -620,6 +620,8 @@ gimple_ranger::range_of_builtin_call (irange &r, gcall *call)\n       // If some high bits are known to be zero, decrease the maximum.\n       if (!r.undefined_p ())\n \t{\n+\t  if (TYPE_SIGN (r.type ()) == SIGNED)\n+\t    range_cast (r, unsigned_type_for (r.type ()));\n \t  wide_int max = r.upper_bound ();\n \t  maxi = wi::floor_log2 (max) + 1;\n \t}"}]}