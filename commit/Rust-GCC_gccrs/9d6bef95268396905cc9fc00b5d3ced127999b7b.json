{"sha": "9d6bef95268396905cc9fc00b5d3ced127999b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2YmVmOTUyNjgzOTY5MDVjYzlmYzAwYjVkM2NlZDEyNzk5OWI3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-06-30T13:16:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-06-30T13:16:26Z"}, "message": "defaults.h (PUSH_ARGS_REVERSED): Define default here.\n\n        * defaults.h (PUSH_ARGS_REVERSED): Define default here.\n        * calls.c: Not here.\n\nFrom-SVN: r68701", "tree": {"sha": "3775fee47e7deef7f819597bbd152626ecbaf88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3775fee47e7deef7f819597bbd152626ecbaf88e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6bef95268396905cc9fc00b5d3ced127999b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6bef95268396905cc9fc00b5d3ced127999b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6bef95268396905cc9fc00b5d3ced127999b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6bef95268396905cc9fc00b5d3ced127999b7b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e938719ec8336a0f0108ea84ab4eccceaf30ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e938719ec8336a0f0108ea84ab4eccceaf30ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e938719ec8336a0f0108ea84ab4eccceaf30ed5"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "9b559e5fb9f3c10ba8e1866fb3c30fd116bfe67c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d6bef95268396905cc9fc00b5d3ced127999b7b", "patch": "@@ -1,3 +1,8 @@\n+2003-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* defaults.h (PUSH_ARGS_REVERSED): Define default here.\n+\t* calls.c: Not here.\n+\n 2003-06-30  Ben Elliston  <bje@wasabisystems.com>\n \n \t* config/arm/arm.c (arm_rtx_costs): Remove #if 0 block."}, {"sha": "c15cb5532f31d16c50886340c68d9c4b760ca975", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9d6bef95268396905cc9fc00b5d3ced127999b7b", "patch": "@@ -40,26 +40,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cgraph.h\"\n #include \"except.h\"\n \n-/* Decide whether a function's arguments should be processed\n-   from first to last or from last to first.\n-\n-   They should if the stack and args grow in opposite directions, but\n-   only if we have push insns.  */\n-\n-#ifdef PUSH_ROUNDING\n-\n-#ifndef PUSH_ARGS_REVERSED\n-#if defined (STACK_GROWS_DOWNWARD) != defined (ARGS_GROW_DOWNWARD)\n-#define PUSH_ARGS_REVERSED  PUSH_ARGS\n-#endif\n-#endif\n-\n-#endif\n-\n-#ifndef PUSH_ARGS_REVERSED\n-#define PUSH_ARGS_REVERSED 0\n-#endif\n-\n #ifndef STACK_POINTER_OFFSET\n #define STACK_POINTER_OFFSET    0\n #endif"}, {"sha": "20dc172faa43f629c2994f8cf6294d9a80d6ed5c", "filename": "gcc/defaults.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9d6bef95268396905cc9fc00b5d3ced127999b7b", "patch": "@@ -411,6 +411,26 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n #endif\n #endif\n \n+/* Decide whether a function's arguments should be processed\n+   from first to last or from last to first.\n+\n+   They should if the stack and args grow in opposite directions, but\n+   only if we have push insns.  */\n+\n+#ifdef PUSH_ROUNDING\n+\n+#ifndef PUSH_ARGS_REVERSED\n+#if defined (STACK_GROWS_DOWNWARD) != defined (ARGS_GROW_DOWNWARD)\n+#define PUSH_ARGS_REVERSED  PUSH_ARGS\n+#endif\n+#endif\n+\n+#endif\n+\n+#ifndef PUSH_ARGS_REVERSED\n+#define PUSH_ARGS_REVERSED 0\n+#endif\n+\n /* If PREFERRED_STACK_BOUNDARY is not defined, set it to STACK_BOUNDARY.\n    STACK_BOUNDARY is required.  */\n #ifndef PREFERRED_STACK_BOUNDARY"}, {"sha": "cbc40ffc460b8319558a493c98fe61db366cc71a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bef95268396905cc9fc00b5d3ced127999b7b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9d6bef95268396905cc9fc00b5d3ced127999b7b", "patch": "@@ -3374,6 +3374,13 @@ allocate the entire argument block and then store the arguments into\n it.  When @code{PUSH_ARGS} is nonzero, @code{PUSH_ROUNDING} must be defined too.\n @end defmac\n \n+@defmac PUSH_ARGS_REVERSED\n+A C expression.  If nonzero, function arguments will be evaluated from\n+last to first, rather than from first to last.  If this macro is not\n+defined, it defaults to @code{PUSH_ARGS} on targets where the stack\n+and args grow in opposite directions, and 0 otherwise.\n+@end defmac\n+\n @defmac PUSH_ROUNDING (@var{npushed})\n A C expression that is the number of bytes actually pushed onto the\n stack when an instruction attempts to push @var{npushed} bytes."}]}