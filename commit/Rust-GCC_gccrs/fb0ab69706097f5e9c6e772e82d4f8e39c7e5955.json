{"sha": "fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwYWI2OTcwNjA5N2Y1ZTljNmU3NzJlODJkNGY4ZTM5YzdlNTk1NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-10-10T15:47:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-10-10T15:47:19Z"}, "message": "ira.c (struct equivalence): Promote INIT_INSNs field to an rtx_insn_list.\n\n        * ira.c (struct equivalence): Promote INIT_INSNs field to\n        an rtx_insn_list.  Add comments.\n        (no_equiv): Promote LIST to an rtx_insn_list.  Update\n        testing for and creating the special marker.  Use methods\n        to extract the insn and next pointers.  Promote INSN to an\n        rtx_insn.\n        (update_equiv_regs): Update test for special marker in the\n        INIT_INSNs list.\n\nFrom-SVN: r216095", "tree": {"sha": "d68b4989f69dc506295ec24f56282c11eb24e00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d68b4989f69dc506295ec24f56282c11eb24e00a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955/comments", "author": null, "committer": null, "parents": [{"sha": "375f837be1166c39096769bb7afa16502490035f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375f837be1166c39096769bb7afa16502490035f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375f837be1166c39096769bb7afa16502490035f"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "2186328045940dae7799fedb633cba7a0e2d4bce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "patch": "@@ -1,3 +1,14 @@\n+2014-10-10  Jeff Law  <law@redhat.com>\n+\n+\t* ira.c (struct equivalence): Promote INIT_INSNs field to\n+\tan rtx_insn_list.  Add comments.\n+\t(no_equiv): Promote LIST to an rtx_insn_list.  Update\n+\ttesting for and creating the special marker.  Use methods\n+\tto extract the insn and next pointers.  Promote INSN to an\n+\trtx_insn.\n+\t(update_equiv_regs): Update test for special marker in the\n+\tINIT_INSNs list.\n+\n 2014-10-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* configure.ac: Add --enable-fix-cortex-a53-835769 option."}, {"sha": "d057ea6ddfef0ab1a10165df87c1ec4ebf9fe0e5", "filename": "gcc/ira.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0ab69706097f5e9c6e772e82d4f8e39c7e5955/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=fb0ab69706097f5e9c6e772e82d4f8e39c7e5955", "patch": "@@ -2890,8 +2890,16 @@ struct equivalence\n      e.g. by reload.  */\n   rtx replacement;\n   rtx *src_p;\n-  /* The list of each instruction which initializes this register.  */\n-  rtx init_insns;\n+\n+  /* The list of each instruction which initializes this register.\n+\n+     NULL indicates we know nothing about this register's equivalence\n+     properties.\n+\n+     An INSN_LIST with a NULL insn indicates this pseudo is already\n+     known to not have a valid equivalence.  */\n+  rtx_insn_list *init_insns;\n+\n   /* Loop depth is used to recognize equivalences which appear\n      to be present within the same loop (or in an inner loop).  */\n   int loop_depth;\n@@ -3242,25 +3250,25 @@ no_equiv (rtx reg, const_rtx store ATTRIBUTE_UNUSED,\n \t  void *data ATTRIBUTE_UNUSED)\n {\n   int regno;\n-  rtx list;\n+  rtx_insn_list *list;\n \n   if (!REG_P (reg))\n     return;\n   regno = REGNO (reg);\n   list = reg_equiv[regno].init_insns;\n-  if (list == const0_rtx)\n+  if (list && list->insn () == NULL)\n     return;\n-  reg_equiv[regno].init_insns = const0_rtx;\n+  reg_equiv[regno].init_insns = gen_rtx_INSN_LIST (VOIDmode, NULL_RTX, NULL);\n   reg_equiv[regno].replacement = NULL_RTX;\n   /* This doesn't matter for equivalences made for argument registers, we\n      should keep their initialization insns.  */\n   if (reg_equiv[regno].is_arg_equivalence)\n     return;\n   ira_reg_equiv[regno].defined_p = false;\n   ira_reg_equiv[regno].init_insns = NULL;\n-  for (; list; list =  XEXP (list, 1))\n+  for (; list; list = list->next ())\n     {\n-      rtx insn = XEXP (list, 0);\n+      rtx_insn *insn = list->insn ();\n       remove_note (insn, find_reg_note (insn, REG_EQUIV, NULL_RTX));\n     }\n }\n@@ -3437,7 +3445,8 @@ update_equiv_regs (void)\n \n \t  if (!REG_P (dest)\n \t      || (regno = REGNO (dest)) < FIRST_PSEUDO_REGISTER\n-\t      || reg_equiv[regno].init_insns == const0_rtx\n+\t      || (reg_equiv[regno].init_insns\n+\t\t  && reg_equiv[regno].init_insns->insn () == NULL)\n \t      || (targetm.class_likely_spilled_p (reg_preferred_class (regno))\n \t\t  && MEM_P (src) && ! reg_equiv[regno].is_arg_equivalence))\n \t    {\n@@ -3608,8 +3617,8 @@ update_equiv_regs (void)\n \t  && (regno = REGNO (src)) >= FIRST_PSEUDO_REGISTER\n \t  && REG_BASIC_BLOCK (regno) >= NUM_FIXED_BLOCKS\n \t  && DF_REG_DEF_COUNT (regno) == 1\n-\t  && reg_equiv[regno].init_insns != 0\n-\t  && reg_equiv[regno].init_insns != const0_rtx\n+\t  && reg_equiv[regno].init_insns != NULL\n+\t  && reg_equiv[regno].init_insns->insn () != NULL\n \t  && ! find_reg_note (XEXP (reg_equiv[regno].init_insns, 0),\n \t\t\t      REG_EQUIV, NULL_RTX)\n \t  && ! contains_replace_regs (XEXP (dest, 0))\n@@ -3728,7 +3737,7 @@ update_equiv_regs (void)\n \t\t      delete_insn (equiv_insn);\n \n \t\t      reg_equiv[regno].init_insns\n-\t\t\t= XEXP (reg_equiv[regno].init_insns, 1);\n+\t\t\t= reg_equiv[regno].init_insns->next ();\n \n \t\t      ira_reg_equiv[regno].init_insns = NULL;\n \t\t      bitmap_set_bit (cleared_regs, regno);"}]}