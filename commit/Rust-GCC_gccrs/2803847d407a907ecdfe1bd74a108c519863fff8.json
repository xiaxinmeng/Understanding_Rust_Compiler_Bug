{"sha": "2803847d407a907ecdfe1bd74a108c519863fff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwMzg0N2Q0MDdhOTA3ZWNkZmUxYmQ3NGExMDhjNTE5ODYzZmZmOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-08-12T03:46:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-08-12T03:46:18Z"}, "message": "basic_ios.h: Remove *_iter typedefs, change num* typedefs to num_*.\n\n\n2003-08-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_ios.h: Remove *_iter typedefs, change num*\n\ttypedefs to num_*.\n\t* include/bits/basic_ios.tcc: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/std/std_istream.h: Same.\n\t* include/std/std_ostream.h: Same.\n\t* testsuite/26_numerics/complex_inserters_extractors.cc: Fix.\n\n\t* include/ext/rope: Remove build warning.\n\nFrom-SVN: r70357", "tree": {"sha": "091c0db47473e04926843b1e5c591bc8f5973924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091c0db47473e04926843b1e5c591bc8f5973924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2803847d407a907ecdfe1bd74a108c519863fff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2803847d407a907ecdfe1bd74a108c519863fff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2803847d407a907ecdfe1bd74a108c519863fff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2803847d407a907ecdfe1bd74a108c519863fff8/comments", "author": null, "committer": null, "parents": [{"sha": "4ac1102286d5622db427fc981f3f93a597447eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac1102286d5622db427fc981f3f93a597447eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac1102286d5622db427fc981f3f93a597447eb3"}], "stats": {"total": 173, "additions": 89, "deletions": 84}, "files": [{"sha": "1f1db93b939b4844884b01bde8e6bd4db004e10c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -1,3 +1,17 @@\n+2003-08-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_ios.h: Remove *_iter typedefs, change num*\n+\ttypedefs to num_*.\t\n+\t* include/bits/basic_ios.tcc: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/std/std_istream.h: Same.\n+\t* include/std/std_ostream.h: Same.\n+\t* testsuite/26_numerics/complex_inserters_extractors.cc: Fix.\n+\n+\t* include/ext/rope: Remove build warning.\n+\t\n 2003-08-11  Andreas Jaeger  <aj@suse.de>\n \n \t* include/Makefile.am (stamp-c_base): Add dependency on stamp-bits"}, {"sha": "7e5b6055ef69955b56f1d2b59529ea35e4f66b1d", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -76,10 +76,10 @@ namespace std\n        *  @endif\n       */\n       typedef ctype<_CharT>                          __ctype_type;\n-      typedef ostreambuf_iterator<_CharT, _Traits>   __ostreambuf_iter;\n-      typedef num_put<_CharT, __ostreambuf_iter>     __numput_type;\n-      typedef istreambuf_iterator<_CharT, _Traits>   __istreambuf_iter;\n-      typedef num_get<_CharT, __istreambuf_iter>     __numget_type;\n+      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >     \n+\t\t\t\t\t\t     __num_put_type;\n+      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >     \n+      \t\t\t\t\t\t     __num_get_type;\n       //@}\n       \n       // Data members:\n@@ -92,9 +92,9 @@ namespace std\n       // Cached use_facet<ctype>, which is based on the current locale info.\n       const __ctype_type*                            _M_ctype;      \n       // For ostream.\n-      const __numput_type*                           _M_num_put;\n+      const __num_put_type*                          _M_num_put;\n       // For istream.\n-      const __numget_type*                           _M_num_get;\n+      const __num_get_type*                          _M_num_get;\n \n     public:\n       //@{"}, {"sha": "9df5f4880e343f8dfaecc73341cc6d1ec4cb64dc", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -167,10 +167,10 @@ namespace std\n     {\n       if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n \t_M_ctype = &use_facet<__ctype_type>(__loc);\n-      if (__builtin_expect(has_facet<__numput_type>(__loc), true))\n-\t_M_num_put = &use_facet<__numput_type>(__loc); \n-      if (__builtin_expect(has_facet<__numget_type>(__loc), true))\n-\t_M_num_get = &use_facet<__numget_type>(__loc); \n+      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))\n+\t_M_num_put = &use_facet<__num_put_type>(__loc); \n+      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))\n+\t_M_num_get = &use_facet<__num_get_type>(__loc); \n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "543d94d0f1d3546cb32ac3dd6459316fb869f124", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -56,10 +56,10 @@ namespace std\n \t      __streambuf_type* __sb = __in.rdbuf();\n \t      __int_type __c = __sb->sgetc();\n \n-\t      __check_facet(__in._M_ctype);\n+\t      const __ctype_type& __ct = __check_facet(__in._M_ctype);\n \t      while (!traits_type::eq_int_type(__c, __eof)\n-\t\t     && __in._M_ctype->is(ctype_base::space, \n-\t\t\t\t\t  traits_type::to_char_type(__c)))\n+\t\t     && __ct.is(ctype_base::space, \n+\t\t\t\ttraits_type::to_char_type(__c)))\n \t\t  __c = __sb->snextc();\n \n #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -117,7 +117,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -142,9 +143,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __l);\n #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n@@ -179,7 +181,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -204,9 +207,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n+\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __l);\n #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n@@ -241,7 +245,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -267,7 +272,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -293,7 +299,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -320,7 +327,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -346,7 +354,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -373,7 +382,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -399,7 +409,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -425,7 +436,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -451,7 +463,8 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n+\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t      __ng.get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -1027,14 +1040,16 @@ namespace std\n \t      if (__num <= 0)\n \t\t__num = numeric_limits<streamsize>::max();\n \t      \n-\t      const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\n \t      const int_type __eof = _Traits::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n \t      int_type __c = __sb->sgetc();\n \t      \n \t      while (__extracted < __num - 1 \n \t\t     && !_Traits::eq_int_type(__c, __eof)\n-\t\t     && !__ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t     && !__ct.is(ctype_base::space, \n+\t\t\t\t _Traits::to_char_type(__c)))\n \t\t{\n \t\t  *__s++ = _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n@@ -1073,13 +1088,13 @@ namespace std\n       typedef typename __istream_type::__ctype_type \t__ctype_type;\n       typedef typename __istream_type::int_type \t__int_type;\n \n-      const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n+      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n       const __int_type __eof = _Traits::eof();\t      \n       __streambuf_type* __sb = __in.rdbuf();\n       __int_type __c = __sb->sgetc();\n \n       while (!_Traits::eq_int_type(__c, __eof) \n-\t     && __ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t     && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t__c = __sb->snextc();\n \n        if (_Traits::eq_int_type(__c, __eof))\n@@ -1110,14 +1125,14 @@ namespace std\n \t  __size_type __n;\n \t  __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();\n \n-\t  const __ctype_type& __ctype = use_facet<__ctype_type>(__in.getloc());\n+\t  const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \t  const __int_type __eof = _Traits::eof();\n \t  __streambuf_type* __sb = __in.rdbuf();\n \t  __int_type __c = __sb->sgetc();\n \t  \n \t  while (__extracted < __n \n \t\t && !_Traits::eq_int_type(__c, __eof)\n-\t\t && !__ctype.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t    {\n \t      __str += _Traits::to_char_type(__c);\n \t      ++__extracted;\n@@ -1161,8 +1176,7 @@ namespace std\n \t  const __int_type __eof = _Traits::eof();\n \t  __testdelim = _Traits::eq_int_type(__c, __idelim);\n \n-\t  while (__extracted <= __n \n-\t\t && !_Traits::eq_int_type(__c, __eof)\n+\t  while (__extracted <= __n && !_Traits::eq_int_type(__c, __eof)\n \t\t && !__testdelim)\n \t    {\n \t      __str += _Traits::to_char_type(__c);"}, {"sha": "234a0cf269e34753e8483faf56fffa3a7acb31c5", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -917,22 +917,6 @@ namespace std\n   template<typename _CharT, typename _InIter>\n     locale::id num_get<_CharT, _InIter>::id;\n \n-#if 0\n-  // Partial specialization for istreambuf_iterator, so can use traits_type.\n-  template<typename _CharT>\n-    class num_get<_CharT, istreambuf_iterator<_CharT> >;\n-\n-      iter_type \n-      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&, \n-\t\t       string& __xtrc) const;\n-\n-      iter_type \n-      _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&, \n-\t\t     string& __xtrc, int& __base) const;\n-\n-      virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;\n-#endif\n \n   template<typename _CharT, typename _OutIter>\n     class num_put : public locale::facet, public __num_base"}, {"sha": "401b58ff80f9e78a132026bbac2538aa13bbceae", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -160,9 +160,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n@@ -189,14 +188,14 @@ namespace std\n \t      bool __b = false;\n \t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      __check_facet(this->_M_num_put);\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n \t\t  unsigned long __l = static_cast<unsigned long>(__n);\n-\t\t  __b = this->_M_num_put->put(*this, *this, __c, __l).failed();\n+\t\t  __b = __np.put(*this, *this, __c, __l).failed();\n \t\t}\n \t      else\n-\t\t__b = this->_M_num_put->put(*this, *this, __c, __n).failed();\n+\t\t__b = __np.put(*this, *this, __c, __n).failed();\n \t      if (__b)  \n \t\tthis->setstate(ios_base::badbit);\n \t    }\n@@ -221,9 +220,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n@@ -251,15 +249,15 @@ namespace std\n \t      bool __b = false;\n \t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      __check_facet(this->_M_num_put);\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n \t\t  unsigned long long __l;\n \t\t  __l = static_cast<unsigned long long>(__n);\n-\t\t  __b = this->_M_num_put->put(*this, *this, __c, __l).failed();\n+\t\t  __b = __np.put(*this, *this, __c, __l).failed();\n \t\t}\n \t      else\n-\t\t__b = this->_M_num_put->put(*this, *this, __c, __n).failed();\n+\t\t__b = __np.put(*this, *this, __c, __n).failed();\n \t      if (__b)  \n \t\tthis->setstate(ios_base::badbit);\n \t    }\n@@ -284,9 +282,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n@@ -311,9 +308,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n@@ -337,9 +333,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n@@ -363,9 +358,8 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      __check_facet(this->_M_num_put);\n-\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n-\t\t\t\t\t__n).failed())\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n \t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)"}, {"sha": "7bd66710e28a6b817907685d51cb4674eaf9c9f8", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -189,8 +189,7 @@ class sequence_buffer : public iterator<std::output_iterator_tag,void,void,void,\n         {\n             if (__len + _M_buf_count <= _Buf_sz) {\n                 size_t __i = _M_buf_count;\n-                size_t __j = 0;\n-                for (; __j < __len; __i++, __j++) {\n+                for (size_t __j = 0; __j < __len; __i++, __j++) {\n                     _M_buffer[__i] = __s[__j];\n                 }\n                 _M_buf_count += __len;"}, {"sha": "ce4e61168cef4625928dff0a754b5c621ca617c8", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -70,8 +70,8 @@ namespace std\n       typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n       typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambuf_iter;\n-      typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n+      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >        \n+ \t\t\t\t\t\t\t__num_get_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n       template<typename _CharT2, typename _Traits2>"}, {"sha": "27669549ce0382645df6ce82af172ca7f7bfcc0c", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -69,8 +69,8 @@ namespace std\n       typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n       typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n       typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n-      typedef ostreambuf_iterator<_CharT, _Traits>\t__ostreambuf_iter;\n-      typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n+      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >        \n+      \t\t\t\t\t\t\t__num_put_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n       template<typename _CharT2, typename _Traits2>"}, {"sha": "f285fb70fec58cac4cd7fc379bb2188691ba9d88", "filename": "libstdc++-v3/testsuite/26_numerics/complex_inserters_extractors.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2803847d407a907ecdfe1bd74a108c519863fff8/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc?ref=2803847d407a907ecdfe1bd74a108c519863fff8", "patch": "@@ -108,8 +108,8 @@ void test02()\n   bool test = true;\n \n   // Construct locale with specialized facets.\n-  typedef gnu_sstream::__numput_type numput_type;\n-  typedef gnu_sstream::__numget_type numget_type;\n+  typedef gnu_sstream::__num_put_type numput_type;\n+  typedef gnu_sstream::__num_get_type numget_type;\n   std::locale loc_c = std::locale::classic();\n   std::locale loc_1(loc_c, new numput_type);\n   std::locale loc_2(loc_1, new numget_type);"}]}