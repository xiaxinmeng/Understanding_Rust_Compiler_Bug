{"sha": "a176426f3573d5eceb4f60caf01a291ab778e475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE3NjQyNmYzNTczZDVlY2ViNGY2MGNhZjAxYTI5MWFiNzc4ZTQ3NQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-12-30T17:27:28Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-12-30T17:27:28Z"}, "message": "c-pretty-print.h (struct c_pretty_print_info): Add new member \"constant\".\n\n2005-12-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        * c-pretty-print.h (struct c_pretty_print_info): Add new\n          member\n        \"constant\".\n        (pp_constant): New macro.\n        * c-pretty-print.c (pp_c_pretty_printer_init): Set\n          pp->constant.\n\ncp/\n2005-12-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        * cxx-pretty-print.c (pp_cxx_constant): New.  Print\n        string-literal in parens if input program says so.\n        (pp_cxx_primary_expression): Hand off constant printing to\n        pp_cxx_constant.\n        (pp_cxx_pretty_printer_init): Set pp->c_base.constant.\n        (pp_cxx_expression): Use pp_cxx_constant for literals.\n        * error.c (dump_expr): Use pp_constant for literals.\n\nFrom-SVN: r109176", "tree": {"sha": "ffda47dc57c458a506ebdbf3be62d77501367c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffda47dc57c458a506ebdbf3be62d77501367c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a176426f3573d5eceb4f60caf01a291ab778e475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a176426f3573d5eceb4f60caf01a291ab778e475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a176426f3573d5eceb4f60caf01a291ab778e475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a176426f3573d5eceb4f60caf01a291ab778e475/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf013e9fdbd98b7798cbd88f126000c72361c56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf013e9fdbd98b7798cbd88f126000c72361c56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf013e9fdbd98b7798cbd88f126000c72361c56c"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "22e6673eadcf84a023bf57851ef1d02ae866e3b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -1,3 +1,10 @@\n+2005-12-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.h (struct c_pretty_print_info): Add new member\n+\t\"constant\". \n+\t(pp_constant): New macro.\n+\t* c-pretty-print.c (pp_c_pretty_printer_init): Set pp->constant.\n+\n 2005-12-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR fortran/25586"}, {"sha": "516022340ca978669dbe544045b7b2982721a308", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -2001,6 +2001,7 @@ pp_c_pretty_printer_init (c_pretty_printer *pp)\n \n   pp->statement                 = pp_c_statement;\n \n+  pp->constant                  = pp_c_constant;\n   pp->id_expression             = pp_c_id_expression;\n   pp->primary_expression        = pp_c_primary_expression;\n   pp->postfix_expression        = pp_c_postfix_expression;"}, {"sha": "14cb670c7edbdf1c55046c2e49e2938843e71e24", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -80,6 +80,7 @@ struct c_pretty_print_info\n \n   c_pretty_print_fn statement;\n \n+  c_pretty_print_fn constant;\n   c_pretty_print_fn id_expression;\n   c_pretty_print_fn primary_expression;\n   c_pretty_print_fn postfix_expression;\n@@ -129,6 +130,8 @@ struct c_pretty_print_info\n #define pp_statement(PPI, S)                      \\\n   pp_c_base (PPI)->statement (pp_c_base (PPI), S)\n \n+#define pp_constant(PP, E) \\\n+  pp_c_base (PP)->constant (pp_c_base (PP), E)\n #define pp_id_expression(PP, E)  \\\n   pp_c_base (PP)->id_expression (pp_c_base (PP), E)\n #define pp_primary_expression(PPI, E)             \\"}, {"sha": "c895ce58f862cd30d5fc700be953cfa6d676f22b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -1,3 +1,13 @@\n+2005-12-30  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.c (pp_cxx_constant): New.  Print\n+\tstring-literal in parens if input program says so.\n+\t(pp_cxx_primary_expression): Hand off constant printing to\n+\tpp_cxx_constant. \n+\t(pp_cxx_pretty_printer_init): Set pp->c_base.constant.\n+\t(pp_cxx_expression): Use pp_cxx_constant for literals. \n+\t* error.c (dump_expr): Use pp_constant for literals.\n+\n 2005-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (make_thunk): Don't set comdat_linkage here."}, {"sha": "43fbe2b3bfa02b9bb1cdafa789e21b54c166a01e", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -292,6 +292,29 @@ pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n     }\n }\n \n+\n+static void\n+pp_cxx_constant (cxx_pretty_printer *pp, tree t)\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case STRING_CST:\n+      {\n+        const bool in_parens = PAREN_STRING_LITERAL_P (t);\n+        if (in_parens)\n+          pp_cxx_left_paren (pp);\n+        pp_c_constant (pp_c_base (pp), t);\n+        if (in_parens)\n+          pp_cxx_right_paren (pp);\n+      }\n+      break;\n+\n+    default:\n+      pp_c_constant (pp_c_base (pp), t);\n+      break;\n+    }\n+}\n+\n /* id-expression:\n       unqualified-id\n       qualified-id   */\n@@ -321,10 +344,10 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n {\n   switch (TREE_CODE (t))\n     {\n-    case STRING_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n-      pp_c_constant (pp_c_base (pp), t);\n+    case STRING_CST:\n+      pp_cxx_constant (pp, t);\n       break;\n \n     case BASELINK:\n@@ -848,7 +871,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case STRING_CST:\n     case INTEGER_CST:\n     case REAL_CST:\n-      pp_c_constant (pp_c_base (pp), t);\n+      pp_cxx_constant (pp, t);\n       break;\n \n     case RESULT_DECL:\n@@ -1961,6 +1984,7 @@ pp_cxx_pretty_printer_init (cxx_pretty_printer *pp)\n \n   /* pp->c_base.statement = (pp_fun) pp_cxx_statement;  */\n \n+  pp->c_base.constant = (pp_fun) pp_cxx_constant;\n   pp->c_base.id_expression = (pp_fun) pp_cxx_id_expression;\n   pp->c_base.primary_expression = (pp_fun) pp_cxx_primary_expression;\n   pp->c_base.postfix_expression = (pp_fun) pp_cxx_postfix_expression;"}, {"sha": "d2ee9c509d7cdd3e2d59d78f2a881972c47fa92c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a176426f3573d5eceb4f60caf01a291ab778e475/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a176426f3573d5eceb4f60caf01a291ab778e475", "patch": "@@ -1318,17 +1318,10 @@ dump_expr (tree t, int flags)\n       dump_decl (t, (flags & ~TFF_DECL_SPECIFIERS) | TFF_NO_FUNCTION_ARGUMENTS);\n       break;\n \n-    case STRING_CST:\n-      if (PAREN_STRING_LITERAL_P (t))\n-\tpp_cxx_left_paren (cxx_pp);\n-      pp_c_constant (pp_c_base (cxx_pp), t);\n-      if (PAREN_STRING_LITERAL_P (t))\n-\tpp_cxx_right_paren (cxx_pp);\n-      break;\n-\n     case INTEGER_CST:\n     case REAL_CST:\n-       pp_c_constant (pp_c_base (cxx_pp), t);\n+    case STRING_CST:\n+      pp_constant (cxx_pp, t);\n       break;\n \n     case THROW_EXPR:"}]}