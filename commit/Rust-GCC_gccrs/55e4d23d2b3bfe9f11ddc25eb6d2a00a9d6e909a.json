{"sha": "55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlNGQyM2QyYjNiZmU5ZjExZGRjMjVlYjZkMmEwMGE5ZDZlOTA5YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-01-26T10:13:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-26T10:13:33Z"}, "message": "par_sco.adb (Is_Logical_Operator): Exclude AND/OR/XOR\n\n2010-01-26  Robert Dewar  <dewar@adacore.com>\n\n\t* par_sco.adb (Is_Logical_Operator): Exclude AND/OR/XOR\n\t* scos.ads: Clarify handling of logical operators\n\nFrom-SVN: r156239", "tree": {"sha": "ba3954fe91ad567ff6bd27c6227483d88e599273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3954fe91ad567ff6bd27c6227483d88e599273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/comments", "author": null, "committer": null, "parents": [{"sha": "2593c3e1cb8b4325f87ea5a2ce9c1f906c4cf45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2593c3e1cb8b4325f87ea5a2ce9c1f906c4cf45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2593c3e1cb8b4325f87ea5a2ce9c1f906c4cf45b"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "e46d80e6f9134c77973aab32444ceffee7580c83", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "patch": "@@ -1,3 +1,8 @@\n+2010-01-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par_sco.adb (Is_Logical_Operator): Exclude AND/OR/XOR\n+\t* scos.ads: Clarify handling of logical operators\n+\n 2010-01-26  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-tpoben.adb: Update comments."}, {"sha": "e47dbbc7dea6389a67d5057a96a8ceed9d5cf93b", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "patch": "@@ -95,8 +95,9 @@ package body Par_SCO is\n \n    function Is_Logical_Operator (N : Node_Id) return Boolean;\n    --  N is the node for a subexpression. This procedure just tests N to see\n-   --  if it is a logical operator (including short circuit conditions) and\n-   --  returns True if so, False otherwise, it does no other processing.\n+   --  if it is a logical operator (including short circuit conditions, but\n+   --  excluding OR and AND) and returns True if so, False otherwise, it does\n+   --  no other processing.\n \n    procedure Process_Decisions (N : Node_Id; T : Character);\n    --  If N is Empty, has no effect. Otherwise scans the tree for the node N,\n@@ -297,9 +298,7 @@ package body Par_SCO is\n \n    function Is_Logical_Operator (N : Node_Id) return Boolean is\n    begin\n-      return Nkind_In (N, N_Op_And,\n-                          N_Op_Or,\n-                          N_Op_Xor,\n+      return Nkind_In (N, N_Op_Xor,\n                           N_Op_Not,\n                           N_And_Then,\n                           N_Or_Else);\n@@ -436,15 +435,11 @@ package body Par_SCO is\n       begin\n          case Nkind (N) is\n \n-               --  Logical operators and short circuit forms, output table\n-               --  entries and then process operands recursively to deal with\n-               --  nested conditions.\n+               --  Logical operators, output table entries and then process\n+               --  operands recursively to deal with nested conditions.\n \n             when N_And_Then                    |\n                  N_Or_Else                     |\n-                 N_Op_And                      |\n-                 N_Op_Or                       |\n-                 N_Op_Xor                      |\n                  N_Op_Not                      =>\n \n                declare"}, {"sha": "b1a61b25ec5db500ff2384219c7f61e6108de944", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=55e4d23d2b3bfe9f11ddc25eb6d2a00a9d6e909a", "patch": "@@ -162,10 +162,12 @@ package SCOs is\n    --    Note: in the following description, logical operator includes only the\n    --    short circuited forms and NOT (so can be only NOT, AND THEN, OR ELSE).\n    --    The reason that we can exclude AND/OR/XOR is that we expect SCO's to\n-   --    be generated using the restriction No_Direct_Boolean_Operators, which\n-   --    does not permit the use of AND/OR/XOR on boolean operands. These are\n-   --    permitted on modular integer types, but such operations do not count\n-   --    as decisions in any case\n+   --    be generated using the restriction No_Direct_Boolean_Operators if we\n+   --    are interested in decision coverage, which does not permit the use of\n+   --    AND/OR/XOR on boolean operands. These are permitted on modular integer\n+   --    types, but such operations do not count as decisions in any case. If\n+   --    we are generating SCO's only for simple coverage, then we are not\n+   --    interested in decisions in any case.\n \n    --    Decisions are either simple or complex. A simple decision is a boolean\n    --    expresssion that occurs in the context of a control structure in the"}]}