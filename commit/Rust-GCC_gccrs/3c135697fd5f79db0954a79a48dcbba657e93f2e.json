{"sha": "3c135697fd5f79db0954a79a48dcbba657e93f2e", "node_id": "C_kwDOANBUbNoAKDNjMTM1Njk3ZmQ1Zjc5ZGIwOTU0YTc5YTQ4ZGNiYmE2NTdlOTNmMmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-18T11:40:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-18T11:40:04Z"}, "message": "i386: Fix up replacement of registers in certain peephole2s [PR108832]\n\nAs mentioned in the PR, replace_rtx has 2 modes, one that only replaces\nx == from with to, the other which i386.md uses which also replaces\nREGNO (x) == REGNO (from) with to if both are REGs, but assert they have\nthe same mode.  This is reasonable behavior if one replaces from with\nsome other expression, say constant etc., but ICEs whenever the register\nappears in a different mode, which happens e.g. on the following testcase,\nwhere from/to has DImode but inside of the operands we have SImode of\nthe from register.  replace_rtx also does some limited simplifications\n(though far less than simplify_replace_fn_rtx), which is needed if\nfrom a REG is replaced say with CONST_INT, but the peephole2s that use\nthis only replace one REG with another one.\n\nThe following patch introduces a new backend function for this, avoids doing\nany simplifications and just replaces the REGs, for safety on a copy of\nthe expression if any changes will be needed.\n\n2023-02-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/108832\n\t* config/i386/i386-protos.h (ix86_replace_reg_with_reg): Declare.\n\t* config/i386/i386-expand.cc (ix86_replace_reg_with_reg): New\n\tfunction.\n\t* config/i386/i386.md: Replace replace_rtx calls in all peephole2s\n\twith ix86_replace_reg_with_reg.\n\n\t* gcc.target/i386/pr108832.c: New test.", "tree": {"sha": "7a0e3fee3b6dde28be5d7d58502e2b08b7d41cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0e3fee3b6dde28be5d7d58502e2b08b7d41cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c135697fd5f79db0954a79a48dcbba657e93f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c135697fd5f79db0954a79a48dcbba657e93f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c135697fd5f79db0954a79a48dcbba657e93f2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c135697fd5f79db0954a79a48dcbba657e93f2e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e558fb7f3c8e7f736b23710d94f4226f4df38b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e558fb7f3c8e7f736b23710d94f4226f4df38b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e558fb7f3c8e7f736b23710d94f4226f4df38b8"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "1094ece8b6d9c04dbe0f3e0e213cbe283e64cbe4", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=3c135697fd5f79db0954a79a48dcbba657e93f2e", "patch": "@@ -7093,6 +7093,37 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n     }\n }\n \n+/* Replace all occurrences of REG FROM with REG TO in X, including\n+   occurrences with different modes.  */\n+\n+rtx\n+ix86_replace_reg_with_reg (rtx x, rtx from, rtx to)\n+{\n+  gcc_checking_assert (REG_P (from)\n+\t\t       && REG_P (to)\n+\t\t       && GET_MODE (from) == GET_MODE (to));\n+  if (!reg_overlap_mentioned_p (from, x))\n+    return x;\n+  rtx ret = copy_rtx (x);\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, &ret, NONCONST)\n+    {\n+      rtx *loc = *iter;\n+      x = *loc;\n+      if (REG_P (x) && REGNO (x) == REGNO (from))\n+\t{\n+\t  if (x == from)\n+\t    *loc = to;\n+\t  else\n+\t    {\n+\t      gcc_checking_assert (REG_NREGS (x) == 1);\n+\t      *loc = gen_rtx_REG (GET_MODE (x), REGNO (to));\n+\t    }\n+\t}\n+    }\n+  return ret;\n+}\n+\n /* Return mode for the memcpy/memset loop counter.  Prefer SImode over\n    DImode for constant loop counts.  */\n "}, {"sha": "bfb2198265ae597de7469d16203d649849df7b72", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3c135697fd5f79db0954a79a48dcbba657e93f2e", "patch": "@@ -168,6 +168,7 @@ extern void ix86_split_lshr (rtx *, rtx, machine_mode);\n extern void ix86_expand_v1ti_shift (enum rtx_code, rtx[]);\n extern void ix86_expand_v1ti_rotate (enum rtx_code, rtx[]);\n extern void ix86_expand_v1ti_ashiftrt (rtx[]);\n+extern rtx ix86_replace_reg_with_reg (rtx, rtx, rtx);\n extern rtx ix86_find_base_term (rtx);\n extern bool ix86_check_movabs (rtx, int);\n extern bool ix86_check_no_addr_space (rtx);"}, {"sha": "6382cfbce21cd3c82b12251ca9d0734b7a497fa4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3c135697fd5f79db0954a79a48dcbba657e93f2e", "patch": "@@ -22101,8 +22101,10 @@\n \t\t\t\t\t  (match_dup 0)))]\n {\n   operands[7] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (1)), 0, 0));\n-  operands[8] = replace_rtx (operands[5], operands[0], operands[1], true);\n-  operands[9] = replace_rtx (operands[6], operands[0], operands[1], true);\n+  operands[8]\n+    = ix86_replace_reg_with_reg (operands[5], operands[0], operands[1]);\n+  operands[9]\n+    = ix86_replace_reg_with_reg (operands[6], operands[0], operands[1]);\n })\n \n ;; Eliminate a reg-reg mov by inverting the condition of a cmov (#2).\n@@ -22134,8 +22136,10 @@\n \t\t\t\t\t  (match_dup 0)))]\n {\n   operands[7] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (2)), 0, 0));\n-  operands[8] = replace_rtx (operands[5], operands[0], operands[1], true);\n-  operands[9] = replace_rtx (operands[6], operands[0], operands[1], true);\n+  operands[8]\n+    = ix86_replace_reg_with_reg (operands[5], operands[0], operands[1]);\n+  operands[9]\n+    = ix86_replace_reg_with_reg (operands[6], operands[0], operands[1]);\n })\n \n (define_insn \"movhf_mask\"\n@@ -23274,7 +23278,10 @@\n    (parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 0) (match_dup 1)]))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[4] = replace_rtx (operands[2], operands[0], operands[1], true);\")\n+{\n+  operands[4]\n+    = ix86_replace_reg_with_reg (operands[2], operands[0], operands[1]);\n+})\n \n (define_peephole2\n   [(set (match_operand 0 \"mmx_reg_operand\")"}, {"sha": "b6d4731ccb9953e63636edc399100faec02f44b6", "filename": "gcc/testsuite/gcc.target/i386/pr108832.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108832.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c135697fd5f79db0954a79a48dcbba657e93f2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108832.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108832.c?ref=3c135697fd5f79db0954a79a48dcbba657e93f2e", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/108832 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funroll-loops\" } */\n+\n+unsigned int m;\n+short int n;\n+\n+long int\n+bar (unsigned int x)\n+{\n+  return x ? x : 1;\n+}\n+\n+__attribute__ ((simd)) void\n+foo (void)\n+{\n+  int a = m / bar (3);\n+  n = 1 % bar (a << 1);\n+}"}]}