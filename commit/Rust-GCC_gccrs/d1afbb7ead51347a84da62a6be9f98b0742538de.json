{"sha": "d1afbb7ead51347a84da62a6be9f98b0742538de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhZmJiN2VhZDUxMzQ3YTg0ZGE2MmE2YmU5Zjk4YjA3NDI1MzhkZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-21T15:52:23Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-23T14:47:34Z"}, "message": "Implement compilation of ArrayElemsCopied to GIMPLE\n\nlet mut array = [123; 5]", "tree": {"sha": "220f0a8396e7018041622da455562362a23041e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220f0a8396e7018041622da455562362a23041e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1afbb7ead51347a84da62a6be9f98b0742538de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1afbb7ead51347a84da62a6be9f98b0742538de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1afbb7ead51347a84da62a6be9f98b0742538de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1afbb7ead51347a84da62a6be9f98b0742538de/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f701ad5352c7bc8dad53a1ee7f666c8365b35307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f701ad5352c7bc8dad53a1ee7f666c8365b35307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f701ad5352c7bc8dad53a1ee7f666c8365b35307"}], "stats": {"total": 111, "additions": 96, "deletions": 15}, "files": [{"sha": "5c3206ae744a38e4e56d1a5b4d38fdfc4123d90f", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -211,6 +211,15 @@ class CompileExpr : public HIRCompileBase\n     });\n   }\n \n+  void visit (HIR::ArrayElemsCopied &elems)\n+  {\n+    Bexpression *translated_expr\n+      = CompileExpr::Compile (elems.get_elem_to_copy (), ctx);\n+\n+    for (size_t i = 0; i < elems.get_num_elements (); ++i)\n+      constructor.push_back (translated_expr);\n+  }\n+\n   void visit (HIR::ArithmeticOrLogicalExpr &expr)\n   {\n     Operator op;"}, {"sha": "a165eaf3c8a3a96451b96090b1722e7099246746", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -26,6 +26,42 @@\n namespace Rust {\n namespace HIR {\n \n+class ArrayCapacityConstant : public ASTLoweringBase\n+{\n+public:\n+  static bool fold (AST::Expr *expr, size_t *folded_result)\n+  {\n+    ArrayCapacityConstant folder;\n+    expr->accept_vis (folder);\n+    *folded_result = folder.result;\n+    return folder.ok;\n+  }\n+\n+  virtual ~ArrayCapacityConstant () {}\n+\n+  void visit (AST::LiteralExpr &expr)\n+  {\n+    switch (expr.get_lit_type ())\n+      {\n+\tcase AST::Literal::LitType::INT: {\n+\t  ok = true;\n+\t  std::stringstream ss (expr.as_string ());\n+\t  ss >> result;\n+\t}\n+\tbreak;\n+\n+      default:\n+\treturn;\n+      }\n+  }\n+\n+private:\n+  ArrayCapacityConstant () : ok (false), result (-1) {}\n+\n+  bool ok;\n+  size_t result;\n+}; // namespace Resolver\n+\n class ASTLoweringExpr : public ASTLoweringBase\n {\n public:\n@@ -209,8 +245,23 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::ArrayElemsCopied &elems)\n   {\n-    // TODO\n-    gcc_unreachable ();\n+    HIR::Expr *element\n+      = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n+    HIR::Expr *num_copies\n+      = ASTLoweringExpr::translate (elems.get_num_copies ().get ());\n+\n+    size_t folded;\n+    if (!ArrayCapacityConstant::fold (elems.get_num_copies ().get (), &folded))\n+      {\n+\trust_fatal_error (elems.get_num_copies ()->get_locus_slow (),\n+\t\t\t  \"failed to fold capacity constant\");\n+\treturn;\n+      }\n+\n+    translated_array_elems\n+      = new HIR::ArrayElemsCopied (std::unique_ptr<HIR::Expr> (element),\n+\t\t\t\t   std::unique_ptr<HIR::Expr> (num_copies),\n+\t\t\t\t   folded);\n   }\n \n   void visit (AST::LiteralExpr &expr)"}, {"sha": "1110f988dc7626e6d7eaf9315e6279b73bde88db", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -980,28 +980,33 @@ class ArrayElemsCopied : public ArrayElems\n {\n   std::unique_ptr<Expr> elem_to_copy;\n   std::unique_ptr<Expr> num_copies;\n+  size_t folded_copy_amount;\n \n   // TODO: should this store location data?\n \n public:\n   // Constructor requires pointers for polymorphism\n   ArrayElemsCopied (std::unique_ptr<Expr> copied_elem,\n-\t\t    std::unique_ptr<Expr> copy_amount)\n+\t\t    std::unique_ptr<Expr> copy_amount,\n+\t\t    size_t folded_copy_amount)\n     : elem_to_copy (std::move (copied_elem)),\n-      num_copies (std::move (copy_amount))\n+      num_copies (std::move (copy_amount)),\n+      folded_copy_amount (folded_copy_amount)\n   {}\n \n   // Copy constructor required due to unique_ptr - uses custom clone\n   ArrayElemsCopied (ArrayElemsCopied const &other)\n     : elem_to_copy (other.elem_to_copy->clone_expr ()),\n-      num_copies (other.num_copies->clone_expr ())\n+      num_copies (other.num_copies->clone_expr ()),\n+      folded_copy_amount (other.folded_copy_amount)\n   {}\n \n   // Overloaded assignment operator for deep copying\n   ArrayElemsCopied &operator= (ArrayElemsCopied const &other)\n   {\n     elem_to_copy = other.elem_to_copy->clone_expr ();\n     num_copies = other.num_copies->clone_expr ();\n+    folded_copy_amount = other.folded_copy_amount;\n \n     return *this;\n   }\n@@ -1014,7 +1019,9 @@ class ArrayElemsCopied : public ArrayElems\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  size_t get_num_elements () const override { return 0; }\n+  size_t get_num_elements () const override { return folded_copy_amount; }\n+\n+  Expr *get_elem_to_copy () { return elem_to_copy.get (); }\n \n protected:\n   ArrayElemsCopied *clone_array_elems_impl () const override"}, {"sha": "d86866c0b87b75726c6b720bce9fb3e6b20cbe3f", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -150,8 +150,8 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::ArrayElemsCopied &elems)\n   {\n-    // TODO\n-    gcc_unreachable ();\n+    ResolveExpr::go (elems.get_num_copies ().get (), elems.get_node_id ());\n+    ResolveExpr::go (elems.get_elem_to_copy ().get (), elems.get_node_id ());\n   }\n \n private:"}, {"sha": "116fab7f2fb864dff3339ab72eee74dd37d3baf3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -232,15 +232,9 @@ class TypeCheckExpr : public TypeCheckBase\n \n     expr.get_array_expr ()->accept_vis (*this);\n     rust_assert (infered != nullptr);\n-    printf (\"Resolved array-index 1  [%u] -> %s\\n\",\n-\t    expr.get_mappings ().get_hirid (), infered->as_string ().c_str ());\n+\n     // extract the element type out now from the base type\n     infered = TyTyExtractorArray::ExtractElementTypeFromArray (infered);\n-\n-    printf (\"Resolved array-index 2  [%u] -> %s\\n\",\n-\t    expr.get_mappings ().get_hirid (), infered->as_string ().c_str ());\n-    printf (\"array-expr node [%u]\\n\",\n-\t    expr.get_array_expr ()->get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::ArrayExpr &expr)\n@@ -270,6 +264,11 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n   }\n \n+  void visit (HIR::ArrayElemsCopied &elems)\n+  {\n+    infered_array_elems = TypeCheckExpr::Resolve (elems.get_elem_to_copy ());\n+  }\n+\n private:\n   TypeCheckExpr ()\n     : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)"}, {"sha": "a3c85232c29453b789b513f5e24008346e2f9e50", "filename": "gcc/testsuite/rust.test/compilable/arrays2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays2.rs?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+\n+    let a = array[0];\n+    let mut c;\n+    c = array[2];\n+}"}, {"sha": "8dd1c048b87679b2f05194fc071c6f58a04398a9", "filename": "gcc/testsuite/rust.test/compilable/arrays_index1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1afbb7ead51347a84da62a6be9f98b0742538de/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index1.rs?ref=d1afbb7ead51347a84da62a6be9f98b0742538de", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+\n+    let a = array[0];\n+    let x = 0;\n+    let mut c;\n+    c = array[x+1];\n+}"}]}