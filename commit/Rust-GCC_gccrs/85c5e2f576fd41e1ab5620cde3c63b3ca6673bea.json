{"sha": "85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjNWUyZjU3NmZkNDFlMWFiNTYyMGNkZTNjNjNiM2NhNjY3M2JlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-02-12T08:54:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-02-12T08:54:28Z"}, "message": "re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)\n\n2018-02-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84037\n\t* tree-vect-slp.c (vect_build_slp_tree_2): Try swapping the\n\tmatched stmts if we cannot swap the non-matched ones.\n\nFrom-SVN: r257581", "tree": {"sha": "b0279b176c4372e59c4ceff410a03f0ddb7aa771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0279b176c4372e59c4ceff410a03f0ddb7aa771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e027956d0baae2fbdeff5f4b6923a4e6c3db9bb"}], "stats": {"total": 79, "additions": 57, "deletions": 22}, "files": [{"sha": "f6df008a6fd8abb920cc9c4a90ae283ea0093168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "patch": "@@ -1,3 +1,9 @@\n+2018-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84037\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Try swapping the\n+\tmatched stmts if we cannot swap the non-matched ones.\n+\n 2018-02-12  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm_mask_scalef_round_sd,"}, {"sha": "453f0199a4c09ca20273d86098a1007e5381addf", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c5e2f576fd41e1ab5620cde3c63b3ca6673bea/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=85c5e2f576fd41e1ab5620cde3c63b3ca6673bea", "patch": "@@ -1308,37 +1308,65 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  && nops == 2\n \t  && oprnds_info[1]->first_dt == vect_internal_def\n \t  && is_gimple_assign (stmt)\n-\t  && commutative_tree_code (gimple_assign_rhs_code (stmt))\n-\t  && ! two_operators\n \t  /* Do so only if the number of not successful permutes was nor more\n \t     than a cut-ff as re-trying the recursive match on\n \t     possibly each level of the tree would expose exponential\n \t     behavior.  */\n \t  && *npermutes < 4)\n \t{\n-\t  /* Verify if we can safely swap or if we committed to a specific\n-\t     operand order already.  */\n-\t  for (j = 0; j < group_size; ++j)\n-\t    if (!matches[j]\n-\t\t&& (swap[j] != 0\n-\t\t    || STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmts[j]))))\n-\t      {\n-\t\tif (dump_enabled_p ())\n-\t\t  {\n-\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t     \"Build SLP failed: cannot swap operands \"\n-\t\t\t\t     \"of shared stmt \");\n-\t\t    dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n-\t\t\t\t      stmts[j], 0);\n-\t\t  }\n-\t\tgoto fail;\n-\t      }\n+\t  /* See whether we can swap the matching or the non-matching\n+\t     stmt operands.  */\n+\t  bool swap_not_matching = true;\n+\t  do\n+\t    {\n+\t      for (j = 0; j < group_size; ++j)\n+\t\t{\n+\t\t  if (matches[j] != !swap_not_matching)\n+\t\t    continue;\n+\t\t  gimple *stmt = stmts[j];\n+\t\t  /* Verify if we can swap operands of this stmt.  */\n+\t\t  if (!is_gimple_assign (stmt)\n+\t\t      || !commutative_tree_code (gimple_assign_rhs_code (stmt)))\n+\t\t    {\n+\t\t      if (!swap_not_matching)\n+\t\t\tgoto fail;\n+\t\t      swap_not_matching = false;\n+\t\t      break;\n+\t\t    }\n+\t\t  /* Verify if we can safely swap or if we committed to a\n+\t\t     specific operand order already.\n+\t\t     ???  Instead of modifying GIMPLE stmts here we could\n+\t\t     record whether we want to swap operands in the SLP\n+\t\t     node and temporarily do that when processing it\n+\t\t     (or wrap operand accessors in a helper).  */\n+\t\t  else if (swap[j] != 0\n+\t\t\t   || STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)))\n+\t\t    {\n+\t\t      if (!swap_not_matching)\n+\t\t\t{\n+\t\t\t  if (dump_enabled_p ())\n+\t\t\t    {\n+\t\t\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n+\t\t\t\t\t       vect_location,\n+\t\t\t\t\t       \"Build SLP failed: cannot swap \"\n+\t\t\t\t\t       \"operands of shared stmt \");\n+\t\t\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION,\n+\t\t\t\t\t\tTDF_SLIM, stmts[j], 0);\n+\t\t\t    }\n+\t\t\t  goto fail;\n+\t\t\t}\n+\t\t      swap_not_matching = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  while (j != group_size);\n \n \t  /* Swap mismatched definition stmts.  */\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"Re-trying with swapped operands of stmts \");\n \t  for (j = 0; j < group_size; ++j)\n-\t    if (!matches[j])\n+\t    if (matches[j] == !swap_not_matching)\n \t      {\n \t\tstd::swap (oprnds_info[0]->def_stmts[j],\n \t\t\t   oprnds_info[1]->def_stmts[j]);\n@@ -1367,7 +1395,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t      for (j = 0; j < group_size; ++j)\n \t\t{\n \t\t  gimple *stmt = stmts[j];\n-\t\t  if (!matches[j])\n+\t\t  if (matches[j] == !swap_not_matching)\n \t\t    {\n \t\t      /* Avoid swapping operands twice.  */\n \t\t      if (gimple_plf (stmt, GF_PLF_1))\n@@ -1382,7 +1410,8 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\tfor (j = 0; j < group_size; ++j)\n \t\t  {\n \t\t    gimple *stmt = stmts[j];\n-\t\t    gcc_assert (gimple_plf (stmt, GF_PLF_1) == ! matches[j]);\n+\t\t    gcc_assert (gimple_plf (stmt, GF_PLF_1)\n+\t\t\t\t== (matches[j] == !swap_not_matching));\n \t\t  }\n \n \t      /* If we have all children of child built up from scalars then"}]}