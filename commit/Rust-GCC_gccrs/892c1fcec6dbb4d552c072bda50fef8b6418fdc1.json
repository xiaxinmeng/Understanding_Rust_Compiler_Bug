{"sha": "892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYzFmY2VjNmRiYjRkNTUyYzA3MmJkYTUwZmVmOGI2NDE4ZmRjMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-05-31T14:07:30Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-31T14:07:30Z"}, "message": "Port Doxygen support script from Perl to Python; add unittests\n\n2017-05-31  David Malcolm  <dmalcolm@redhat.com>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* filter_params.py: New, porting the perl script to python,\n\tadding a test suite.\n\t* filter_gcc_for_doxygen_new: New file.\n\nCo-Authored-By: Martin Liska <mliska@suse.cz>\n\nFrom-SVN: r248739", "tree": {"sha": "6e02b42b188e05bf618690c44a75701a2e40e44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e02b42b188e05bf618690c44a75701a2e40e44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fc5e7a4430d16742e4cb910f0dbb26460cee50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc5e7a4430d16742e4cb910f0dbb26460cee50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc5e7a4430d16742e4cb910f0dbb26460cee50e"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "20b390db22399bc03cb5fbea46baf44fc0fe49f6", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "patch": "@@ -1,3 +1,10 @@\n+2017-05-31  David Malcolm  <dmalcolm@redhat.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* filter_params.py: New, porting the perl script to python,\n+\tadding a test suite.\n+\t* filter_gcc_for_doxygen_new: New file.\n+\n 2017-05-30  Martin Liska  <mliska@suse.cz>\n \n \t* analyze_brprob.py: Add new argument to parse and modify"}, {"sha": "d1109a50c88fd7304cde56df17854318bb3ae824", "filename": "contrib/filter_gcc_for_doxygen_new", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2Ffilter_gcc_for_doxygen_new", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2Ffilter_gcc_for_doxygen_new", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffilter_gcc_for_doxygen_new?ref=892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "patch": "@@ -0,0 +1,12 @@\n+#!/bin/sh\n+\n+# This filters GCC source before Doxygen can get confused by it;\n+# this script is listed in the doxyfile.  The output is not very\n+# pretty, but at least we get output that Doxygen can understand.\n+#\n+# $1 is a source file of some kind.  The source we wish doxygen to\n+# process is put on stdout.\n+\n+dir=`dirname $0`\n+python $dir/filter_params.py $1\n+exit 0"}, {"sha": "f94d201bbf82afb69144b9ba8c7f41c13f4da2c1", "filename": "contrib/filter_params.py", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2Ffilter_params.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c1fcec6dbb4d552c072bda50fef8b6418fdc1/contrib%2Ffilter_params.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffilter_params.py?ref=892c1fcec6dbb4d552c072bda50fef8b6418fdc1", "patch": "@@ -0,0 +1,144 @@\n+#!/usr/bin/python\n+\"\"\"\n+Filters out some of the #defines used throughout the GCC sources:\n+- GTY(()) marks declarations for gengtype.c\n+- PARAMS(()) is used for K&R compatibility. See ansidecl.h.\n+\n+When passed one or more filenames, acts on those files and prints the\n+results to stdout.\n+\n+When run without a filename, runs a unit-testing suite.\n+\"\"\"\n+import re\n+import sys\n+import unittest\n+\n+# Optional whitespace\n+OPT_WS = '\\s*'\n+\n+def filter_src(text):\n+    \"\"\"\n+    str -> str.  We operate on the whole of the source file at once\n+    (rather than individual lines) so that we can have multiline\n+    regexes.\n+    \"\"\"\n+\n+    # Convert C comments from GNU coding convention of:\n+    #    /* FIRST_LINE\n+    #       NEXT_LINE\n+    #       FINAL_LINE.  */\n+    # to:\n+    #    /** @verbatim FIRST_LINE\n+    #       NEXT_LINE\n+    #       FINAL_LINE.  @endverbatim */\n+    # so that doxygen will parse them.\n+    #\n+    # Only comments that begin on the left-most column are converted.\n+    text = re.sub(r'^/\\* ',\n+                  r'/** @verbatim ',\n+                  text,\n+                  flags=re.MULTILINE)\n+    text = re.sub(r'\\*/',\n+                  r' @endverbatim */',\n+                  text)\n+\n+    # Remove GTY markings (potentially multiline ones):\n+    text = re.sub('GTY' + OPT_WS + r'\\(\\(.*?\\)\\)\\s+',\n+                  '',\n+                  text,\n+                  flags=(re.MULTILINE|re.DOTALL))\n+\n+    # Strip out 'ATTRIBUTE_UNUSED'\n+    text = re.sub('\\sATTRIBUTE_UNUSED',\n+                  '',\n+                  text)\n+\n+    # PARAMS(()) is used for K&R compatibility. See ansidecl.h.\n+    text = re.sub('PARAMS' + OPT_WS + r'\\(\\((.*?)\\)\\)',\n+                  r'(\\1)',\n+                  text)\n+\n+    return text\n+\n+class FilteringTests(unittest.TestCase):\n+    '''\n+    Unit tests for filter_src.\n+    '''\n+    def assert_filters_to(self, src_input, expected_result):\n+        # assertMultiLineEqual was added to unittest in 2.7/3.1\n+        if hasattr(self, 'assertMultiLineEqual'):\n+            assertion = self.assertMultiLineEqual\n+        else:\n+            assertion = self.assertEqual\n+        assertion(expected_result, filter_src(src_input))\n+\n+    def test_comment_example(self):\n+        self.assert_filters_to(\n+            ('/* FIRST_LINE\\n'\n+             '   NEXT_LINE\\n'\n+             '   FINAL_LINE.  */\\n'),\n+            ('/** @verbatim FIRST_LINE\\n'\n+             '   NEXT_LINE\\n'\n+             '   FINAL_LINE.   @endverbatim */\\n'))\n+\n+    def test_oneliner_comment(self):\n+        self.assert_filters_to(\n+            '/* Returns the string representing CLASS.  */\\n',\n+            ('/** @verbatim Returns the string representing CLASS.   @endverbatim */\\n'))\n+\n+    def test_multiline_comment(self):\n+        self.assert_filters_to(\n+            ('/* The thread-local storage model associated with a given VAR_DECL\\n'\n+             \"   or SYMBOL_REF.  This isn't used much, but both trees and RTL refer\\n\"\n+             \"   to it, so it's here.  */\\n\"),\n+            ('/** @verbatim The thread-local storage model associated with a given VAR_DECL\\n'\n+             \"   or SYMBOL_REF.  This isn't used much, but both trees and RTL refer\\n\"\n+             \"   to it, so it's here.   @endverbatim */\\n\"))\n+\n+    def test_GTY(self):\n+        self.assert_filters_to(\n+            ('typedef struct GTY(()) alias_pair {\\n'\n+             '  tree decl;\\n'\n+             '  tree target;\\n'\n+             '} alias_pair;\\n'),\n+            ('typedef struct alias_pair {\\n'\n+             '  tree decl;\\n'\n+             '  tree target;\\n'\n+             '} alias_pair;\\n'))\n+\n+    def test_multiline_GTY(self):\n+        # Ensure that a multiline GTY is filtered out.\n+        self.assert_filters_to(\n+            ('class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\\n'\n+             '\\t   chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\\n'\n+             '  symtab_node_base\\n'\n+             '{\\n'),\n+            ('class symtab_node_base\\n'\n+             '{\\n'))\n+\n+    def test_ATTRIBUTE_UNUSED(self):\n+        # Ensure that ATTRIBUTE_UNUSED is filtered out.\n+        self.assert_filters_to(\n+            ('static void\\n'\n+             'record_set (rtx dest, const_rtx set, void *data ATTRIBUTE_UNUSED)\\n'\n+             '{\\n'),\n+            ('static void\\n'\n+             'record_set (rtx dest, const_rtx set, void *data)\\n'\n+             '{\\n'))\n+\n+    def test_PARAMS(self):\n+        self.assert_filters_to(\n+            'char *strcpy PARAMS ((char *dest, char *source));\\n',\n+            'char *strcpy (char *dest, char *source);\\n')\n+\n+def act_on_files(argv):\n+    for filename in argv[1:]:\n+        with open(filename) as f:\n+            text = f.read()\n+            print(filter_src(text))\n+\n+if __name__ == '__main__':\n+    if len(sys.argv) > 1:\n+        act_on_files(sys.argv)\n+    else:\n+        unittest.main()"}]}