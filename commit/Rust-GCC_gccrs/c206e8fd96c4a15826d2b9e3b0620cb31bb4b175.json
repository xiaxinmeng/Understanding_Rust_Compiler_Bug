{"sha": "c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwNmU4ZmQ5NmM0YTE1ODI2ZDJiOWUzYjA2MjBjYjMxYmI0YjE3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:34:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T12:34:24Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting\n\n        * sem_ch3.adb, sem_ch6.adb: Minor reformatting\n\n        * adaint.c (__gnat_is_readable_file): Check for file existence\n        when not using ACL (always the case on remote drives).\n\nFrom-SVN: r146406", "tree": {"sha": "1b76c5327d29f638f11d48cfe4dcdd83c9235d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b76c5327d29f638f11d48cfe4dcdd83c9235d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/comments", "author": null, "committer": null, "parents": [{"sha": "5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5987e59ca5bb18dc8eaa20e820e46fa6df59b6d4"}], "stats": {"total": 138, "additions": 66, "deletions": 72}, "files": [{"sha": "e78440ac0c5899582f4ef59c39cefaff39485dfb", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "patch": "@@ -1956,7 +1956,7 @@ __gnat_is_readable_file (char *name)\n       return __gnat_check_OWNER_ACL (wname, FILE_READ_DATA, GenericMapping);\n     }\n   else\n-    return 1;\n+    return GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES;\n \n #else\n   int ret;"}, {"sha": "45c483a7c18f94015444da1a0f029883dd6b4d21", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 63, "deletions": 69, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "patch": "@@ -5527,14 +5527,14 @@ package body Sem_Ch3 is\n          --  derived from the full view of the parent, and hopefully has\n          --  known discriminants.\n \n-         --  If the full view of the parent type has its underlying record view\n-         --  available then use it to generate the underlying record view of\n-         --  this Derived_Type (required to handle chains of derivations with\n-         --  unknown discriminants).\n+         --  If the full view of the parent type has an underlying record view,\n+         --  use it to generate the underlying record view of this derived type\n+         --  (required for chains of derivations with unknown discriminants).\n \n-         --  Minor optimization: We avoid the generation of useless underlying\n+         --  Minor optimization: we avoid the generation of useless underlying\n          --  record view entities if the private type declaration has unknown\n-         --  discriminants but its corresponding full view has no discriminants\n+         --  discriminants but its corresponding full view has no\n+         --  discriminants.\n \n          if Has_Unknown_Discriminants (Parent_Type)\n            and then Present (Full_P)\n@@ -5575,8 +5575,8 @@ package body Sem_Ch3 is\n                Set_Has_Private_Declaration (Full_Der);\n                Set_Has_Private_Declaration (Derived_Type);\n \n-               --  If the parent type has its underlying record view then we\n-               --  force here its use to derive the new underlying record view.\n+               --  If the parent type has an underlying record view, use it\n+               --  here to build the new underlying record view.\n \n                if Present (Underlying_Record_View (Full_P)) then\n                   pragma Assert\n@@ -5590,12 +5590,11 @@ package body Sem_Ch3 is\n                Install_Visible_Declarations (Par_Scope);\n                Insert_After (N, Decl);\n \n-               --  Mark the entity as underlying record view before its\n-               --  analysis. Done to avoid the generation of its list of\n-               --  primitives (which is not really required for this entity)\n-               --  and thus avoid supurious errors associated with missing\n-               --  overriding of its abstract primitives (because they are\n-               --  overriden in the list of primitives of Derived_Type).\n+               --  Mark entity as an underlying record view before analysis,\n+               --  to avoid generating the list of its primitive operations\n+               --  (which is not really required for this entity) and thus\n+               --  prevent spurious errors associated with missing overriding\n+               --  of abstract primitives (overridden only for Derived_Type).\n \n                Set_Ekind (Full_Der, E_Record_Type);\n                Set_Is_Underlying_Record_View (Full_Der);\n@@ -5607,20 +5606,19 @@ package body Sem_Ch3 is\n \n                Uninstall_Declarations (Par_Scope);\n \n-               --  Freeze the underlying record view, to prevent generation\n-               --  of useless dispatching information, which is simply shared\n-               --  with the real derived type.\n+               --  Freeze the underlying record view, to prevent generation of\n+               --  useless dispatching information, which is simply shared with\n+               --  the real derived type.\n \n                Set_Is_Frozen (Full_Der);\n \n-               --  Keep fully linked the real entity and its underlying record\n-               --  view entity\n+               --  Set up links between real entity and underlying record view\n \n                Set_Underlying_Record_View (Derived_Type, Base_Type (Full_Der));\n                Set_Underlying_Record_View (Base_Type (Full_Der), Derived_Type);\n             end;\n \n-         --  if discriminants are known, build derived record\n+         --  If discriminants are known, build derived record\n \n          else\n             Build_Derived_Record_Type\n@@ -5645,12 +5643,12 @@ package body Sem_Ch3 is\n                Insert_After (N, Full_Decl);\n \n             else\n-               --  If this is a completion, the full view being built is\n-               --  itself private. We build a subtype of the parent with\n-               --  the same constraints as this full view, to convey to the\n-               --  back end the constrained components and the size of this\n-               --  subtype. If the parent is constrained, its full view can\n-               --  serve as the underlying full view of the derived type.\n+               --  If this is a completion, the full view being built is itself\n+               --  private. We build a subtype of the parent with the same\n+               --  constraints as this full view, to convey to the back end the\n+               --  constrained components and the size of this subtype. If the\n+               --  parent is constrained, its full view can serve as the\n+               --  underlying full view of the derived type.\n \n                if No (Discriminant_Specifications (N)) then\n                   if Nkind (Subtype_Indication (Type_Definition (N))) =\n@@ -5666,7 +5664,7 @@ package body Sem_Ch3 is\n                else\n                   --  If there are new discriminants, the parent subtype is\n                   --  constrained by them, but it is not clear how to build\n-                  --  the underlying_full_view in this case ???\n+                  --  the Underlying_Full_View in this case???\n \n                   null;\n                end if;\n@@ -5678,9 +5676,7 @@ package body Sem_Ch3 is\n          Build_Derived_Record_Type\n            (N, Parent_Type, Derived_Type, Derive_Subps);\n \n-         if Present (Full_View (Parent_Type))\n-           and then not Is_Completion\n-         then\n+         if Present (Full_View (Parent_Type)) and then not Is_Completion then\n             if not In_Open_Scopes (Par_Scope)\n               or else not In_Same_Source_Unit (N, Parent_Type)\n             then\n@@ -5710,8 +5706,8 @@ package body Sem_Ch3 is\n                end if;\n \n             else\n-               --  If full view of parent is tagged, the completion\n-               --  inherits the proper primitive operations.\n+               --  If full view of parent is tagged, the completion inherits\n+               --  the proper primitive operations.\n \n                Set_Defining_Identifier (Full_Decl, Full_Der);\n                Build_Derived_Record_Type\n@@ -5732,13 +5728,12 @@ package body Sem_Ch3 is\n             Set_Full_View (Der_Base, Base_Type (Full_Der));\n \n             --  Copy the discriminant list from full view to the partial views\n-            --  (base type and its subtype). Gigi requires that the partial\n-            --  and full views have the same discriminants.\n+            --  (base type and its subtype). Gigi requires that the partial and\n+            --  full views have the same discriminants.\n \n             --  Note that since the partial view is pointing to discriminants\n             --  in the full view, their scope will be that of the full view.\n-            --  This might cause some front end problems and need\n-            --  adjustment???\n+            --  This might cause some front end problems and need adjustment???\n \n             Discr := First_Discriminant (Base_Type (Full_Der));\n             Set_First_Entity (Der_Base, Discr);\n@@ -5756,10 +5751,10 @@ package body Sem_Ch3 is\n             Set_Stored_Constraint (Full_Der, Stored_Constraint (Derived_Type));\n \n          else\n-            --  If this is a completion, the derived type stays private\n-            --  and there is no need to create a further full view, except\n-            --  in the unusual case when the derivation is nested within a\n-            --  child unit, see below.\n+            --  If this is a completion, the derived type stays private and\n+            --  there is no need to create a further full view, except in the\n+            --  unusual case when the derivation is nested within a child unit,\n+            --  see below.\n \n             null;\n          end if;\n@@ -5777,14 +5772,14 @@ package body Sem_Ch3 is\n             return;\n          end if;\n \n-         --  If full view of parent is a record type, Build full view as\n-         --  a derivation from the parent's full view. Partial view remains\n-         --  private. For code generation and linking, the full view must\n-         --  have the same public status as the partial one. This full view\n-         --  is only needed if the parent type is in an enclosing scope, so\n-         --  that the full view may actually become visible, e.g. in a child\n-         --  unit. This is both more efficient, and avoids order of freezing\n-         --  problems with the added entities.\n+         --  If full view of parent is a record type, build full view as a\n+         --  derivation from the parent's full view. Partial view remains\n+         --  private. For code generation and linking, the full view must have\n+         --  the same public status as the partial one. This full view is only\n+         --  needed if the parent type is in an enclosing scope, so that the\n+         --  full view may actually become visible, e.g. in a child unit. This\n+         --  is both more efficient, and avoids order of freezing problems with\n+         --  the added entities.\n \n          if not Is_Private_Type (Full_View (Parent_Type))\n            and then (In_Open_Scopes (Scope (Parent_Type)))\n@@ -5809,8 +5804,8 @@ package body Sem_Ch3 is\n                 Derive_Subps => False);\n          end if;\n \n-         --  In any case, the primitive operations are inherited from\n-         --  the parent type, not from the internal full view.\n+         --  In any case, the primitive operations are inherited from the\n+         --  parent type, not from the internal full view.\n \n          Set_Etype (Base_Type (Derived_Type), Base_Type (Parent_Type));\n \n@@ -5832,8 +5827,7 @@ package body Sem_Ch3 is\n            and then Present (Full_View (Parent_Type))\n            and then not Is_Tagged_Type (Full_View (Parent_Type))\n          then\n-            Error_Msg_N\n-              (\"cannot add discriminants to untagged type\", N);\n+            Error_Msg_N (\"cannot add discriminants to untagged type\", N);\n          end if;\n \n          Set_Stored_Constraint (Derived_Type, No_Elist);\n@@ -5850,13 +5844,13 @@ package body Sem_Ch3 is\n               (Base_Type (Derived_Type), Finalize_Storage_Only (Parent_Type));\n          end if;\n \n-         --  Construct the implicit full view by deriving from full view of\n-         --  the parent type. In order to get proper visibility, we install\n-         --  the parent scope and its declarations.\n+         --  Construct the implicit full view by deriving from full view of the\n+         --  parent type. In order to get proper visibility, we install the\n+         --  parent scope and its declarations.\n \n-         --  ??? if the parent is untagged private and its completion is\n-         --  tagged, this mechanism will not work because we cannot derive\n-         --  from the tagged full view unless we have an extension\n+         --  ??? If the parent is untagged private and its completion is\n+         --  tagged, this mechanism will not work because we cannot derive from\n+         --  the tagged full view unless we have an extension.\n \n          if Present (Full_View (Parent_Type))\n            and then not Is_Tagged_Type (Full_View (Parent_Type))\n@@ -5905,7 +5899,7 @@ package body Sem_Ch3 is\n             Set_Is_Frozen            (Full_Der, False);\n             Set_Freeze_Node          (Full_Der, Empty);\n             Set_Depends_On_Private   (Full_Der,\n-                                        Has_Private_Component    (Full_Der));\n+                                       Has_Private_Component (Full_Der));\n             Set_Public_Status        (Full_Der);\n          end if;\n       end if;\n@@ -5929,11 +5923,11 @@ package body Sem_Ch3 is\n            and then Scope (Parent_Type) /= Current_Scope\n          then\n             --  This is the unusual case where a type completed by a private\n-            --  derivation occurs within a package nested in a child unit,\n-            --  and the parent is declared in an ancestor. In this case, the\n-            --  full view of the parent type will become visible in the body\n-            --  of the enclosing child, and only then will the current type\n-            --  be possibly non-private. We build a underlying full view that\n+            --  derivation occurs within a package nested in a child unit, and\n+            --  the parent is declared in an ancestor. In this case, the full\n+            --  view of the parent type will become visible in the body of the\n+            --  enclosing child, and only then will the current type be\n+            --   possibly non-private. We build a underlying full view that\n             --  will be installed when the enclosing child body is compiled.\n \n             Full_Der :=\n@@ -7121,8 +7115,8 @@ package body Sem_Ch3 is\n             Set_Is_Controlled (Derived_Type, Is_Controlled (Parent_Base));\n          end if;\n \n-         --  Minor optimization: There is no need to generate the class wide\n-         --  entity associated with an underlying record view\n+         --  Minor optimization: there is no need to generate the class-wide\n+         --  entity associated with an underlying record view.\n \n          if not Is_Underlying_Record_View (Derived_Type) then\n             Make_Class_Wide_Type (Derived_Type);\n@@ -7322,8 +7316,8 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  Update the class_wide type, which shares the now-completed entity\n-      --  list with its specific type. In case of underlying record views\n+      --  Update the class-wide type, which shares the now-completed entity\n+      --  list with its specific type. In case of underlying record views,\n       --  we do not generate the corresponding class wide entity.\n \n       if Is_Tagged\n@@ -13189,7 +13183,7 @@ package body Sem_Ch3 is\n          Error_Msg_N (\"null exclusion can only apply to an access type\", N);\n       end if;\n \n-      --  Avoid deriving parent primitives in underlying record views\n+      --  Avoid deriving parent primitives of underlying record views\n \n       Build_Derived_Type (N, Parent_Type, T, Is_Completion,\n         Derive_Subps => not Is_Underlying_Record_View (T));"}, {"sha": "9ef452207c1f358b67192c1653fbd186de77ef3c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c206e8fd96c4a15826d2b9e3b0620cb31bb4b175/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c206e8fd96c4a15826d2b9e3b0620cb31bb4b175", "patch": "@@ -583,8 +583,8 @@ package body Sem_Ch6 is\n                Error_Msg_N (\"must use anonymous access type\", Subtype_Ind);\n             end if;\n \n-         --  Subtype_indication case; check that the types are the same, and\n-         --  statically match if appropriate. Handle also record types with\n+         --  Subtype indication case: check that the types are the same, and\n+         --  statically match if appropriate. Also handle record types with\n          --  unknown discriminants for which we have built the underlying\n          --  record view.\n "}]}