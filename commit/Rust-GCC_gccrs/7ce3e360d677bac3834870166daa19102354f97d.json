{"sha": "7ce3e360d677bac3834870166daa19102354f97d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlM2UzNjBkNjc3YmFjMzgzNDg3MDE2NmRhYTE5MTAyMzU0Zjk3ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-03-09T17:06:25Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-09T17:06:25Z"}, "message": "simplify-rtx.c (simplify_const_relational_operation): New function renamed from simplify_relational_operation.\n\n\n\t* simplify-rtx.c (simplify_const_relational_operation): New function\n\trenamed from simplify_relational_operation.\n\t(simplify_relational_operation): Change prototype to accept an\n\tadditional mode argument.  Call simplify_const_relational_operation.\n\t(simplify_gen_relational): Update simplify_relational_operation call.\n\t(simplify_ternary_operation): Update simplify_relational_operation\n\tsubroutine call to use simplify_const_relational_operation instead.\n\n\t* rtl.h (simplify_const_relational_operation): Prototype here.\n\t(simplify_relational_operation): Add addtional mode argument.\n\n\t* combine.c (combine_simplify_rtx): Update calls to\n\tsimplify_relational_operation.\n\t(simplify_set): Likewise.\n\t(gen_binary): Likewise.\n\t* cse.c (fold_rtx): Likewise.\n\t* dojump.c (compare_from_rtx): Likewise.\n\t(do_compare_rtx_and_jump): Likewise.\n\t* integrate.c (subst_constants): Likewise.\n\t* unroll.c (simplify_cmp_and_jump_insns): Likewise.\n\nFrom-SVN: r79187", "tree": {"sha": "5ba3ac08512b4ef5ef973ef6ab99aab95cee4053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ba3ac08512b4ef5ef973ef6ab99aab95cee4053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce3e360d677bac3834870166daa19102354f97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3e360d677bac3834870166daa19102354f97d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce3e360d677bac3834870166daa19102354f97d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3e360d677bac3834870166daa19102354f97d/comments", "author": null, "committer": null, "parents": [{"sha": "0da99d4e61c59953f97eade1f44c23205c7949f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da99d4e61c59953f97eade1f44c23205c7949f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da99d4e61c59953f97eade1f44c23205c7949f5"}], "stats": {"total": 171, "additions": 86, "deletions": 85}, "files": [{"sha": "0c98dbfa28eb8abe7d8d5850e09eaeaf9fecb93c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -1,3 +1,26 @@\n+2004-03-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_const_relational_operation): New function\n+\trenamed from simplify_relational_operation.\n+\t(simplify_relational_operation): Change prototype to accept an\n+\tadditional mode argument.  Call simplify_const_relational_operation.\n+\t(simplify_gen_relational): Update simplify_relational_operation call.\n+\t(simplify_ternary_operation): Update simplify_relational_operation\n+\tsubroutine call to use simplify_const_relational_operation instead.\n+\n+\t* rtl.h (simplify_const_relational_operation): Prototype here.\n+\t(simplify_relational_operation): Add addtional mode argument.\n+\n+\t* combine.c (combine_simplify_rtx): Update calls to\n+\tsimplify_relational_operation.\n+\t(simplify_set): Likewise.\n+\t(gen_binary): Likewise.\n+\t* cse.c (fold_rtx): Likewise.\n+\t* dojump.c (compare_from_rtx): Likewise.\n+\t(do_compare_rtx_and_jump): Likewise.\n+\t* integrate.c (subst_constants): Likewise.\n+\t* unroll.c (simplify_cmp_and_jump_insns): Likewise.\n+\n 2004-03-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r.md: Remove all define_peephole's."}, {"sha": "0262f1cc8cd280d2489c860c965b0f6b740b13c0", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -3712,19 +3712,9 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int last,\n \t    if (cmp_mode == VOIDmode)\n \t      cmp_mode = op0_mode;\n \t  }\n-\ttemp = simplify_relational_operation (code, cmp_mode,\n+\ttemp = simplify_relational_operation (code, mode, cmp_mode,\n \t\t\t\t\t      XEXP (x, 0), XEXP (x, 1));\n       }\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-      if (temp != 0 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\t{\n-\t  if (temp == const0_rtx)\n-\t    temp = CONST0_RTX (mode);\n-\t  else\n-\t    temp = CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE (mode),\n-\t\t\t\t\t\t mode);\n-\t}\n-#endif\n       break;\n     case RTX_COMM_ARITH:\n     case RTX_BIN_ARITH:\n@@ -4993,7 +4983,8 @@ simplify_set (rtx x)\n \ttmp_mode = GET_MODE (op1);\n       else\n \ttmp_mode = compare_mode;\n-      tmp = simplify_relational_operation (old_code, tmp_mode, op0, op1);\n+      tmp = simplify_const_relational_operation (old_code, tmp_mode,\n+\t\t\t\t\t\t op0, op1);\n       if (tmp != NULL_RTX)\n \t{\n \t  rtx pat = PATTERN (other_insn);\n@@ -10108,7 +10099,7 @@ gen_binary (enum rtx_code code, enum machine_mode mode, rtx op0, rtx op1)\n \n       if (op_mode == VOIDmode)\n \top_mode = GET_MODE (op1);\n-      result = simplify_relational_operation (code, op_mode, op0, op1);\n+      result = simplify_relational_operation (code, mode, op_mode, op0, op1);\n     }\n   else\n     result = simplify_binary_operation (code, mode, op0, op1);"}, {"sha": "632d353b3158afa84ab0effcd212d6fbe43971c2", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -3907,7 +3907,7 @@ fold_rtx (rtx x, rtx insn)\n \t    }\n \t}\n \n-      new = simplify_relational_operation (code,\n+      new = simplify_relational_operation (code, mode,\n \t\t\t\t\t   (mode_arg0 != VOIDmode\n \t\t\t\t\t    ? mode_arg0\n \t\t\t\t\t    : (GET_MODE (const_arg0\n@@ -3922,16 +3922,6 @@ fold_rtx (rtx x, rtx insn)\n \t\t\t\t\t\t\t: folded_arg1)),\n \t\t\t\t\t   const_arg0 ? const_arg0 : folded_arg0,\n \t\t\t\t\t   const_arg1 ? const_arg1 : folded_arg1);\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-      if (new != 0 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\t{\n-\t  if (new == const0_rtx)\n-\t    new = CONST0_RTX (mode);\n-\t  else\n-\t    new = (CONST_DOUBLE_FROM_REAL_VALUE\n-\t\t   (FLOAT_STORE_FLAG_VALUE (mode), mode));\n-\t}\n-#endif\n       break;\n \n     case RTX_BIN_ARITH:"}, {"sha": "48e495394d5842d71e705d67bd1edee1a9ccf192", "filename": "gcc/dojump.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -787,7 +787,8 @@ compare_from_rtx (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n   do_pending_stack_adjust ();\n \n   ucode = unsignedp ? unsigned_condition (code) : code;\n-  if ((tem = simplify_relational_operation (ucode, mode, op0, op1)) != 0)\n+  tem = simplify_const_relational_operation (ucode, mode, op0, op1);\n+  if (tem != 0)\n     return tem;\n \n #if 0\n@@ -865,7 +866,8 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n   do_pending_stack_adjust ();\n \n   ucode = unsignedp ? unsigned_condition (code) : code;\n-  if ((tem = simplify_relational_operation (ucode, mode, op0, op1)) != 0)\n+  tem = simplify_const_relational_operation (ucode, mode, op0, op1);\n+  if (tem != 0)\n     {\n       if (tem == const_true_rtx)\n         {"}, {"sha": "d90dfaa104951346cce2bc920ff226ea5f5d6645", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -2738,24 +2738,8 @@ subst_constants (rtx *loc, rtx insn, struct inline_remap *map, int memonly)\n \n \t  if (op_mode == VOIDmode)\n \t    op_mode = GET_MODE (XEXP (x, 1));\n-\t  new = simplify_relational_operation (code, op_mode,\n+\t  new = simplify_relational_operation (code, GET_MODE (x), op_mode,\n \t\t\t\t\t       XEXP (x, 0), XEXP (x, 1));\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-\t  if (new != 0 && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t    {\n-\t      enum machine_mode mode = GET_MODE (x);\n-\t      if (new == const0_rtx)\n-\t\tnew = CONST0_RTX (mode);\n-\t      else\n-\t\t{\n-\t\t  REAL_VALUE_TYPE val;\n-\n-\t\t  /* Avoid automatic aggregate initialization.  */\n-\t\t  val = FLOAT_STORE_FLAG_VALUE (mode);\n-\t\t  new = CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n-\t\t}\n-\t    }\n-#endif\n \t  break;\n \t}\n \n@@ -2783,10 +2767,10 @@ subst_constants (rtx *loc, rtx insn, struct inline_remap *map, int memonly)\n \t\t/* We have compare of two VOIDmode constants for which\n \t\t   we recorded the comparison mode.  */\n \t\trtx temp =\n-\t\t  simplify_relational_operation (GET_CODE (op0),\n-\t\t\t\t\t\t map->compare_mode,\n-\t\t\t\t\t\t XEXP (op0, 0),\n-\t\t\t\t\t\t XEXP (op0, 1));\n+\t\t  simplify_const_relational_operation (GET_CODE (op0),\n+\t\t\t\t\t\t       map->compare_mode,\n+\t\t\t\t\t\t       XEXP (op0, 0),\n+\t\t\t\t\t\t       XEXP (op0, 1));\n \n \t\tif (temp == const0_rtx)\n \t\t  new = XEXP (x, 2);"}, {"sha": "e98203fdb72e8880e18931cfeb1d90cca49a7cff", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -1751,8 +1751,10 @@ extern rtx simplify_binary_operation (enum rtx_code, enum machine_mode, rtx,\n \t\t\t\t      rtx);\n extern rtx simplify_ternary_operation (enum rtx_code, enum machine_mode,\n \t\t\t\t       enum machine_mode, rtx, rtx, rtx);\n+extern rtx simplify_const_relational_operation (enum rtx_code,\n+\t\t\t\t\t\tenum machine_mode, rtx, rtx);\n extern rtx simplify_relational_operation (enum rtx_code, enum machine_mode,\n-\t\t\t\t\t  rtx, rtx);\n+\t\t\t\t\t  enum machine_mode, rtx, rtx);\n extern rtx simplify_gen_binary (enum rtx_code, enum machine_mode, rtx, rtx);\n extern rtx simplify_gen_unary (enum rtx_code, enum machine_mode, rtx,\n \t\t\t       enum machine_mode);"}, {"sha": "3647c2440774aebdc59b08fc535f324290311504", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -205,24 +205,9 @@ simplify_gen_relational (enum rtx_code code, enum machine_mode mode,\n \n   if (cmp_mode != VOIDmode)\n     {\n-      tem = simplify_relational_operation (code, cmp_mode, op0, op1);\n-\n+      tem = simplify_relational_operation (code, mode, cmp_mode, op0, op1);\n       if (tem)\n-\t{\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-\t  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\t    {\n-\t      REAL_VALUE_TYPE val;\n-\t      if (tem == const0_rtx)\n-\t\treturn CONST0_RTX (mode);\n-\t      if (tem != const_true_rtx)\n-\t\tabort ();\n-\t      val = FLOAT_STORE_FLAG_VALUE (mode);\n-\t      return CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n-\t    }\n-#endif\n-\t  return tem;\n-\t}\n+\treturn tem;\n     }\n \n   /* For the following tests, ensure const0_rtx is op1.  */\n@@ -1156,6 +1141,7 @@ simplify_associative_operation (enum rtx_code code, enum machine_mode mode,\n \n    Don't use this for relational operations such as EQ or LT.\n    Use simplify_relational_operation instead.  */\n+\n rtx\n simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t\t   rtx op0, rtx op1)\n@@ -2515,12 +2501,13 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n    is VOIDmode, both operands must also be VOIDmode and we compare the\n    operands in \"infinite precision\".\n \n-   If no simplification is possible, this function returns zero.  Otherwise,\n-   it returns either const_true_rtx or const0_rtx.  */\n+   If no simplification is possible, this function returns zero.\n+   Otherwise, it returns either const_true_rtx or const0_rtx.  */\n \n rtx\n-simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n-\t\t\t       rtx op0, rtx op1)\n+simplify_const_relational_operation (enum rtx_code code,\n+\t\t\t\t     enum machine_mode mode,\n+\t\t\t\t     rtx op0, rtx op1)\n {\n   int equal, op0lt, op0ltu, op1lt, op1ltu;\n   rtx tem;\n@@ -2569,8 +2556,8 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n       /* We cannot do this for == or != if tem is a nonzero address.  */\n       && ((code != EQ && code != NE) || ! nonzero_address_p (tem))\n       && code != GTU && code != GEU && code != LTU && code != LEU)\n-    return simplify_relational_operation (signed_condition (code),\n-\t\t\t\t\t  mode, tem, const0_rtx);\n+    return simplify_const_relational_operation (signed_condition (code),\n+\t\t\t\t\t\tmode, tem, const0_rtx);\n \n   if (flag_unsafe_math_optimizations && code == ORDERED)\n     return const_true_rtx;\n@@ -2802,6 +2789,36 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n       abort ();\n     }\n }\n+\n+/* Like simplify_binary_operation except used for relational operators.\n+   MODE is the mode of the result, and CMP_MODE is the mode of the operands.\n+   If CMP_MODE is VOIDmode, both operands must also be VOIDmode and we\n+   compare the operands in \"infinite precision\".  */\n+\n+rtx\n+simplify_relational_operation (enum rtx_code code,\n+\t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       enum machine_mode cmp_mode, rtx op0, rtx op1)\n+{\n+  rtx tmp;\n+\n+  tmp = simplify_const_relational_operation (code, cmp_mode, op0, op1);\n+  if (tmp)\n+    {\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t{\n+\t  if (tmp == const0_rtx)\n+\t    return CONST0_RTX (mode);\n+\t  return CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALE (mode),\n+\t\t\t\t\t       mode);\n+\t}\n+#endif\n+      return tmp;\n+    }\n+\n+  return NULL_RTX;\n+}\n \f\n /* Simplify CODE, an operation with result mode MODE and three operands,\n    OP0, OP1, and OP2.  OP0_MODE was the mode of OP0 before it became\n@@ -2898,8 +2915,10 @@ simplify_ternary_operation (enum rtx_code code, enum machine_mode mode,\n \t  rtx temp;\n \t  if (cmp_mode == VOIDmode)\n \t    cmp_mode = op0_mode;\n-\t  temp = simplify_relational_operation (GET_CODE (op0), cmp_mode,\n-\t\t\t\t\t        XEXP (op0, 0), XEXP (op0, 1));\n+\t  temp = simplify_const_relational_operation (GET_CODE (op0),\n+\t\t\t\t\t\t      cmp_mode,\n+\t\t\t\t\t\t      XEXP (op0, 0),\n+\t\t\t\t\t\t      XEXP (op0, 1));\n \n \t  /* See if any simplifications were possible.  */\n \t  if (temp == const0_rtx)\n@@ -3561,22 +3580,12 @@ simplify_rtx (rtx x)\n \n     case RTX_COMPARE:\n     case RTX_COMM_COMPARE:\n-      temp = simplify_relational_operation (code,\n+      temp = simplify_relational_operation (code, mode,\n \t\t\t\t\t    ((GET_MODE (XEXP (x, 0))\n \t\t\t\t\t      != VOIDmode)\n \t\t\t\t\t     ? GET_MODE (XEXP (x, 0))\n \t\t\t\t\t     : GET_MODE (XEXP (x, 1))),\n \t\t\t\t\t    XEXP (x, 0), XEXP (x, 1));\n-#ifdef FLOAT_STORE_FLAG_VALUE\n-      if (temp != 0 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\t{\n-\t  if (temp == const0_rtx)\n-\t    temp = CONST0_RTX (mode);\n-\t  else\n-\t    temp = CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE (mode),\n-\t\t\t\t\t\t mode);\n-\t}\n-#endif\n       return temp;\n \n     case RTX_EXTRA:"}, {"sha": "88e442301e6590bbf7bf74d680006992e47eb8fe", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce3e360d677bac3834870166daa19102354f97d/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=7ce3e360d677bac3834870166daa19102354f97d", "patch": "@@ -1338,7 +1338,7 @@ simplify_cmp_and_jump_insns (enum rtx_code code, enum machine_mode mode,\n {\n   rtx t, insn;\n \n-  t = simplify_relational_operation (code, mode, op0, op1);\n+  t = simplify_const_relational_operation (code, mode, op0, op1);\n   if (!t)\n     {\n       enum rtx_code scode = signed_condition (code);"}]}