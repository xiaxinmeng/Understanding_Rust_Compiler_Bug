{"sha": "4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "node_id": "C_kwDOANBUbNoAKDRlN2VjN2RiYmJlZjNiNGE4M2RhNTk2N2I1ZjI1ZTNiZTkwYzJkYzY", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-05-26T07:46:40Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-10-21T02:42:00Z"}, "message": "i386: Auto vectorize sdot_prod, udot_prod with VNNIINT8 instruction.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (ssedvecmode): Rename from VI1SI.\n\t(ssedvecmodelower): Rename from vi1si.\n\t(sdot_prod<mode>): New define_expand.\n\t(udot_prod<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/vnniint8-auto-vectorize-1.c: New test.\n\t* gcc.target/i386/vnniint8-auto-vectorize-2.c: Ditto.", "tree": {"sha": "c16d74e647238e197e5d4faa63f9188186891d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c16d74e647238e197e5d4faa63f9188186891d0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406675947d26ccbc2108e9689a2918bb36f61a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406675947d26ccbc2108e9689a2918bb36f61a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406675947d26ccbc2108e9689a2918bb36f61a63"}], "stats": {"total": 164, "additions": 153, "deletions": 11}, "files": [{"sha": "f4b5506703f2a1798e4773e114a63d7ba0ff1b83", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "patch": "@@ -1035,6 +1035,13 @@\n    (V16HI \"v16hi\") (V8HI \"v8hi\")\n    (V32QI \"v32qi\") (V16QI \"v16qi\")])\n \n+;; Mapping of vector modes to an V*SImode of the same size\n+(define_mode_attr ssedvecmode\n+ [(V64QI \"V16SI\") (V32QI \"V8SI\") (V16QI \"V4SI\")])\n+\n+(define_mode_attr ssedvecmodelower\n+ [(V64QI \"v16si\") (V32QI \"v8si\") (V16QI \"v4si\")])\n+\n ;; Mapping of vector modes to a vector mode of double size\n (define_mode_attr ssedoublevecmode\n   [(V64QI \"V128QI\") (V32HI \"V64HI\") (V16SI \"V32SI\") (V8DI \"V16DI\")\n@@ -28509,29 +28516,23 @@\n    [(set_attr (\"prefix\") (\"evex\"))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_mode_attr VI1SI\n- [(V64QI \"V16SI\") (V32QI \"V8SI\") (V16QI \"V4SI\")])\n-\n-(define_mode_attr vi1si\n- [(V64QI \"v16si\") (V32QI \"v8si\") (V16QI \"v4si\")])\n-\n (define_expand \"usdot_prod<mode>\"\n-  [(match_operand:<VI1SI> 0 \"register_operand\")\n+  [(match_operand:<ssedvecmode> 0 \"register_operand\")\n    (match_operand:VI1_AVX512VNNI 1 \"register_operand\")\n    (match_operand:VI1_AVX512VNNI 2 \"register_operand\")\n-   (match_operand:<VI1SI> 3 \"register_operand\")]\n+   (match_operand:<ssedvecmode> 3 \"register_operand\")]\n   \"(<MODE_SIZE> == 64\n     ||((TARGET_AVX512VNNI && TARGET_AVX512VL)\n \t    || TARGET_AVXVNNI))\"\n {\n-  operands[1] = lowpart_subreg (<VI1SI>mode,\n+  operands[1] = lowpart_subreg (<ssedvecmode>mode,\n \t\t\t\tforce_reg (<MODE>mode, operands[1]),\n \t\t\t\t<MODE>mode);\n-  operands[2] = lowpart_subreg (<VI1SI>mode,\n+  operands[2] = lowpart_subreg (<ssedvecmode>mode,\n \t\t\t\tforce_reg (<MODE>mode, operands[2]),\n \t\t\t\t<MODE>mode);\n   emit_insn (gen_rtx_SET (operands[0], operands[3]));\n-  emit_insn (gen_vpdpbusd_<vi1si> (operands[0], operands[3],\n+  emit_insn (gen_vpdpbusd_<ssedvecmodelower> (operands[0], operands[3],\n \t\t\t\t  operands[1], operands[2]));\n   DONE;\n })\n@@ -29256,6 +29257,44 @@\n    (UNSPEC_VPDPBSUD \"bsud\") (UNSPEC_VPDPBSUDS \"bsuds\")\n    (UNSPEC_VPDPBUUD \"buud\") (UNSPEC_VPDPBUUDS \"buuds\")])\n \n+(define_expand \"sdot_prod<mode>\"\n+  [(match_operand:<ssedvecmode> 0 \"register_operand\")\n+   (match_operand:VI1 1 \"register_operand\")\n+   (match_operand:VI1 2 \"register_operand\")\n+   (match_operand:<ssedvecmode> 3 \"register_operand\")]\n+  \"TARGET_AVXVNNIINT8\"\n+{\n+  operands[1] = lowpart_subreg (<ssedvecmode>mode,\n+                                force_reg (<MODE>mode, operands[1]),\n+                                <MODE>mode);\n+  operands[2] = lowpart_subreg (<ssedvecmode>mode,\n+                                force_reg (<MODE>mode, operands[2]),\n+                                <MODE>mode);\n+  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+  emit_insn (gen_vpdpbssd_<ssedvecmodelower> (operands[0], operands[3],\n+\t\t\t\t   operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"udot_prod<mode>\"\n+  [(match_operand:<ssedvecmode> 0 \"register_operand\")\n+   (match_operand:VI1 1 \"register_operand\")\n+   (match_operand:VI1 2 \"register_operand\")\n+   (match_operand:<ssedvecmode> 3 \"register_operand\")]\n+  \"TARGET_AVXVNNIINT8\"\n+{\n+  operands[1] = lowpart_subreg (<ssedvecmode>mode,\n+                                force_reg (<MODE>mode, operands[1]),\n+                                <MODE>mode);\n+  operands[2] = lowpart_subreg (<ssedvecmode>mode,\n+                                force_reg (<MODE>mode, operands[2]),\n+                                <MODE>mode);\n+  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+  emit_insn (gen_vpdpbuud_<ssedvecmodelower> (operands[0], operands[3],\n+\t\t\t\t   operands[1], operands[2]));\n+  DONE;\n+})\n+\n (define_insn \"vpdp<vpdotprodtype>_<mode>\"\n   [(set (match_operand:VI4_AVX 0 \"register_operand\" \"=x\")\n \t(unspec:VI4_AVX"}, {"sha": "9cadab6a845bc054ea8ee67dbb7d2f13c0525d47", "filename": "gcc/testsuite/gcc.target/i386/vnniint8-auto-vectorize-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-1.c?ref=4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */                                     \n+/* { dg-options \"-mavxvnniint8 -O2\" } */\n+/* { dg-final { scan-assembler \"vpdpbssd\\t\" } } */\n+/* { dg-final { scan-assembler \"vpdpbuud\\t\" } } */\n+\n+int __attribute__((noinline, noclone, optimize(\"tree-vectorize\")))\n+sdot_prod_qi (char * restrict a, char * restrict b,\n+\t      int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+int __attribute__((noinline, noclone, optimize(\"tree-vectorize\")))\n+udot_prod_qi (unsigned char * restrict a, unsigned char *restrict b,\n+\t      int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}"}, {"sha": "99853e6c3b7604056f3060f47fddb68f84432fe0", "filename": "gcc/testsuite/gcc.target/i386/vnniint8-auto-vectorize-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnniint8-auto-vectorize-2.c?ref=4e7ec7dbbbef3b4a83da5967b5f25e3be90c2dc6", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+#include \"vnniint8-auto-vectorize-1.c\"\n+\n+#define N 256\n+char a_i8[N], b_i8[N];\n+unsigned char c_u8[N], d_u8[N];\n+int i8_exp, i8_ref;\n+\n+int __attribute__((noipa, optimize(\"no-tree-vectorize\")))\n+sdot_prod_qi_scalar (char * restrict a, char * restrict b,\n+\t\t     int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+int __attribute__((noipa, optimize(\"no-tree-vectorize\")))\n+udot_prod_qi_scalar (unsigned char * restrict a, unsigned char *restrict b,\n+\t\t     int c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      c += ((int) a[i] * (int) b[i]);\n+    }\n+  return c;\n+}\n+\n+void init ()\n+{\n+  int i;\n+\n+  i8_exp = i8_ref = 127;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a_i8[i] = (-i + 4) % 128;\n+      b_i8[i] = (i + 1) % 128;\n+      c_u8[i] = (i + 3) % 256;\n+      d_u8[i] = (i + 5) % 256;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  init ();\n+  i8_exp = sdot_prod_qi (a_i8, b_i8, i8_exp, N);\n+  i8_ref = sdot_prod_qi_scalar (a_i8, b_i8, i8_ref, N);\n+  if (i8_exp != i8_ref)\n+    abort ();\n+\n+  init ();\n+  i8_exp = udot_prod_qi (c_u8, d_u8, i8_exp, N);\n+  i8_ref = udot_prod_qi_scalar (c_u8, d_u8, i8_ref, N);\n+  if (i8_exp != i8_ref)\n+    abort ();\n+}"}]}