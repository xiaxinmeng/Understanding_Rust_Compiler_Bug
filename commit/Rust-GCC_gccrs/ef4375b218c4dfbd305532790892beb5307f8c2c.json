{"sha": "ef4375b218c4dfbd305532790892beb5307f8c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0Mzc1YjIxOGM0ZGZiZDMwNTUzMjc5MDg5MmJlYjUzMDdmOGMyYw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2007-07-11T22:57:51Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2007-07-11T22:57:51Z"}, "message": "toplev.c (no_new_pseudos): Deleted.\n\n2007-07-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* toplev.c (no_new_pseudos): Deleted.\n\t* rtl.h (no_new_pseudos): Deleted.\n\t* tree-pass.h (pass_no_new_pseudos): Deleted. \n\t* passes.c (pass_no_new_pseudos): Deleted.\n\t* final.c (rest_of_clean_state): Removed no_new_pseudos.\n\t(rest_of_no_new_pseudos, pass_no_new_pseudos): Deleted.\n\t* struct-equiv.c (rtx_equiv_p): Replaced no_new_pseudos with \n\treload_completed.\n\t* cfgcleanup.c (try_crossjump_to_edge): Ditto. \n\t* rtlhooks.c (gen_lowpart_general): Ditto.\n\t* optabs.c (prepare_operand): Ditto.\n\t* mode-switching.c (rest_of_handle_mode_switching): Deleted set of\n\tno_new_pseudos.\n\t* modulo-sched.c (rest_of_handle_sms): Ditto.\n\t* see.c (rest_of_handle_see): Ditto.\n\t* ifcvt.c (if_convert): Ditto.\n\t(gate_handle_if_after_combine): Replaced no_new_pseudos with \n\treload_completed.\n\t* init-regs.c (gate_initialize_regs): Deleted set of\n\tno_new_pseudos.\n\t* lower-subreg.c (decompose_multiword_subregs): Ditto. \n\t* bb-reorder.c (rest_of_handle_partition_blocks): Ditto.\n\t* doc/md.texi: Changed no_new_pseudos to can_create_pseudo_p.\n\nFrom-SVN: r126561", "tree": {"sha": "661a2bd8e3dcb30517cb9fc58f05901d2e4ef6cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661a2bd8e3dcb30517cb9fc58f05901d2e4ef6cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4375b218c4dfbd305532790892beb5307f8c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4375b218c4dfbd305532790892beb5307f8c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4375b218c4dfbd305532790892beb5307f8c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4375b218c4dfbd305532790892beb5307f8c2c/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d90dc4fc7f0aeab51d520a5f750a3150de401ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90dc4fc7f0aeab51d520a5f750a3150de401ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90dc4fc7f0aeab51d520a5f750a3150de401ac3"}], "stats": {"total": 96, "additions": 32, "deletions": 64}, "files": [{"sha": "5be80244c9ea83374773e62ed5146107f78687ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -1,3 +1,29 @@\n+2007-07-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* toplev.c (no_new_pseudos): Deleted.\n+\t* rtl.h (no_new_pseudos): Deleted.\n+\t* tree-pass.h (pass_no_new_pseudos): Deleted. \n+\t* passes.c (pass_no_new_pseudos): Deleted.\n+\t* final.c (rest_of_clean_state): Removed no_new_pseudos.\n+\t(rest_of_no_new_pseudos, pass_no_new_pseudos): Deleted.\n+\t* struct-equiv.c (rtx_equiv_p): Replaced no_new_pseudos with \n+\treload_completed.\n+\t* cfgcleanup.c (try_crossjump_to_edge): Ditto. \n+\t* rtlhooks.c (gen_lowpart_general): Ditto.\n+\t* optabs.c (prepare_operand): Ditto.\n+\t* mode-switching.c (rest_of_handle_mode_switching): Deleted set of\n+\tno_new_pseudos.\n+\t* modulo-sched.c (rest_of_handle_sms): Ditto.\n+\t* see.c (rest_of_handle_see): Ditto.\n+\t* ifcvt.c (if_convert): Ditto.\n+\t(gate_handle_if_after_combine): Replaced no_new_pseudos with \n+\treload_completed.\n+\t* init-regs.c (gate_initialize_regs): Deleted set of\n+\tno_new_pseudos.\n+\t* lower-subreg.c (decompose_multiword_subregs): Ditto. \n+\t* bb-reorder.c (rest_of_handle_partition_blocks): Ditto.\n+\t* doc/md.texi: Changed no_new_pseudos to can_create_pseudo_p.\n+\t\n 2007-07-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32661"}, {"sha": "dd6d30e4875794cd5e5690e29e8fc5f412a7e076", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -2256,9 +2256,7 @@ gate_handle_partition_blocks (void)\n static unsigned int\n rest_of_handle_partition_blocks (void)\n {\n-  no_new_pseudos = 0;\n   partition_hot_cold_basic_blocks ();\n-  no_new_pseudos = 1;\n   return 0;\n }\n "}, {"sha": "1334e162fd7f4dadcc54943ce445bf7f6d4a68af", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -1587,7 +1587,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2)\n      partition boundaries).  See the comments at the top of\n      bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n \n-  if (flag_reorder_blocks_and_partition && no_new_pseudos)\n+  if (flag_reorder_blocks_and_partition && reload_completed)\n     return false;\n \n   /* Search backward through forwarder blocks.  We don't need to worry"}, {"sha": "0942e57349c8ac206ae052a3490f9be400cc7e87", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -3435,8 +3435,8 @@ it can be allocated using @code{gen_reg_rtx} prior to life analysis.\n If there are cases which need scratch registers during or after reload,\n you must provide an appropriate secondary_reload target hook.\n \n-@findex no_new_pseudos\n-The global variable @code{no_new_pseudos} can be used to determine if it\n+@findex can_create_pseudo_p\n+The macro @code{can_create_pseudo_p} can be used to determine if it\n is unsafe to create new pseudo registers.  If this variable is nonzero, then\n it is unsafe to call @code{gen_reg_rtx} to allocate a new pseudo.\n "}, {"sha": "35a4b406f9f91fbcbfdcdf8feb3bfe566d821bb9", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -4091,7 +4091,6 @@ rest_of_clean_state (void)\n \n   reload_completed = 0;\n   epilogue_completed = 0;\n-  no_new_pseudos = 0;\n #ifdef STACK_REGS\n   regstack_completed = 0;\n #endif\n@@ -4147,27 +4146,3 @@ struct tree_opt_pass pass_clean_state =\n   0                                     /* letter */\n };\n \n-/* Set no_new_pseudos.  */\n-static unsigned int\n-rest_of_no_new_pseudos (void)\n-{\n-  no_new_pseudos = 1;\n-  return 0;\n-}\n-\n-struct tree_opt_pass pass_no_new_pseudos =\n-{\n-  NULL,\t\t\t                /* name */\n-  NULL,                                 /* gate */\n-  rest_of_no_new_pseudos,               /* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  0,                                    /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  'p'                                   /* letter */\n-};"}, {"sha": "0d6d49ead5078c82746975b1d37577acd7f61a7e", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -3968,10 +3968,6 @@ if_convert (bool recompute_dominance)\n   num_updated_if_blocks = 0;\n   num_true_changes = 0;\n \n-  /* Some transformations in this pass can create new pseudos,\n-     if the pass runs before reload.  Make sure we can do so.  */\n-  gcc_assert (! no_new_pseudos || reload_completed);\n-\n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n   mark_loop_exit_edges ();\n   loop_optimizer_finalize ();\n@@ -4105,9 +4101,7 @@ gate_handle_if_after_combine (void)\n static unsigned int\n rest_of_handle_if_after_combine (void)\n {\n-  no_new_pseudos = 0;\n   if_convert (true);\n-  no_new_pseudos = 1;\n   return 0;\n }\n "}, {"sha": "567b5d1744b44776f2a5032f382b1f83ac4db916", "filename": "gcc/init-regs.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Finit-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Finit-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -132,9 +132,7 @@ gate_initialize_regs (void)\n static unsigned int\n rest_of_handle_initialize_regs (void)\n {\n-  no_new_pseudos = 0;\n   initialize_uninitialized_regs ();\n-  no_new_pseudos = 1;\n   return 0;\n }\n "}, {"sha": "828d90d27c939773f5ecdc3b1fe089846f69f49f", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -1070,7 +1070,6 @@ decompose_multiword_subregs (void)\n   bitmap_and_compl_into (decomposable_context, non_decomposable_context);\n   if (!bitmap_empty_p (decomposable_context))\n     {\n-      int hold_no_new_pseudos = no_new_pseudos;\n       sbitmap sub_blocks;\n       unsigned int i;\n       sbitmap_iterator sbi;\n@@ -1079,7 +1078,6 @@ decompose_multiword_subregs (void)\n \n       propagate_pseudo_copies ();\n \n-      no_new_pseudos = 0;\n       sub_blocks = sbitmap_alloc (last_basic_block);\n       sbitmap_zero (sub_blocks);\n \n@@ -1185,8 +1183,6 @@ decompose_multiword_subregs (void)\n \t    }\n \t}\n \n-      no_new_pseudos = hold_no_new_pseudos;\n-\n       /* If we had insns to split that caused control flow insns in the middle\n \t of a basic block, split those blocks now.  Note that we only handle\n \t the case where splitting a load has caused multiple possibly trapping"}, {"sha": "3fdb2b4137e2f9c6b62cfbae18cafbb698627ce0", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -740,9 +740,7 @@ static unsigned int\n rest_of_handle_mode_switching (void)\n {\n #ifdef OPTIMIZE_MODE_SWITCHING\n-  no_new_pseudos = 0;\n   optimize_mode_switching ();\n-  no_new_pseudos = 1;\n #endif /* OPTIMIZE_MODE_SWITCHING */\n   return 0;\n }"}, {"sha": "a0ff4a7b041777a70f28f36ec3ae9a66e9f45d9d", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -2472,15 +2472,12 @@ rest_of_handle_sms (void)\n #ifdef INSN_SCHEDULING\n   basic_block bb;\n \n-  /* We want to be able to create new pseudos.  */\n-  no_new_pseudos = 0;\n   /* Collect loop information to be used in SMS.  */\n   cfg_layout_initialize (0);\n   sms_schedule ();\n \n   /* Update the life information, because we add pseudos.  */\n   max_regno = max_reg_num ();\n-  no_new_pseudos = 1;\n \n   /* Finalize layout changes.  */\n   FOR_EACH_BB (bb)"}, {"sha": "95b2ec9b2321b3459728b757aa60dcbe2704a921", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -3953,7 +3953,7 @@ prepare_operand (int icode, rtx x, int opnum, enum machine_mode mode,\n   if (!insn_data[icode].operand[opnum].predicate\n       (x, insn_data[icode].operand[opnum].mode))\n     {\n-      if (no_new_pseudos)\n+      if (reload_completed)\n \treturn NULL_RTX;\n       x = copy_to_mode_reg (insn_data[icode].operand[opnum].mode, x);\n     }"}, {"sha": "0f39d61d546ffa1956c8650fea38f0019068272a", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -727,7 +727,6 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_regclass_init);\n       NEXT_PASS (pass_inc_dec);\n       NEXT_PASS (pass_initialize_regs);\n-      NEXT_PASS (pass_no_new_pseudos);\n       NEXT_PASS (pass_outof_cfg_layout_mode);\n       NEXT_PASS (pass_ud_rtl_dce);\n       NEXT_PASS (pass_combine);"}, {"sha": "124f5280950605d976d899f040e1edea35e79ff6", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -1977,10 +1977,6 @@ extern int regstack_completed;\n    the same indirect address eventually.  */\n extern int cse_not_expected;\n \n-/* Set to nonzero before life analysis to indicate that it is unsafe to\n-   generate any new pseudo registers.  */\n-extern int no_new_pseudos;\n-\n /* Translates rtx code to tree code, for those codes needed by\n    REAL_ARITHMETIC.  The function returns an int because the caller may not\n    know what `enum tree_code' means.  */"}, {"sha": "a0ad851c11b16db3717e7024539bd8e554629283", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -66,7 +66,7 @@ gen_lowpart_general (enum machine_mode mode, rtx x)\n \t  && SCALAR_INT_MODE_P (GET_MODE (x))\n \t  && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n \t\t\t\t    GET_MODE_BITSIZE (GET_MODE (x)))\n-\t  && ! no_new_pseudos)\n+\t  && !reload_completed)\n \treturn gen_lowpart_general (mode, force_reg (GET_MODE (x), x));\n \n       if (WORDS_BIG_ENDIAN)"}, {"sha": "cba0721659ddb225d9a7a6f3e7af4513c911123b", "filename": "gcc/see.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -3814,12 +3814,7 @@ gate_handle_see (void)\n static unsigned int\n rest_of_handle_see (void)\n {\n-  int no_new_pseudos_bcp = no_new_pseudos;\n-\n-  no_new_pseudos = 0;\n   see_main ();\n-  no_new_pseudos = no_new_pseudos_bcp;\n-  \n   run_fast_dce ();\n   return 0;\n }"}, {"sha": "395fef2a550cc7cadcd4c0325fedee84706810a9", "filename": "gcc/struct-equiv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fstruct-equiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Fstruct-equiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstruct-equiv.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -431,7 +431,7 @@ rtx_equiv_p (rtx *xp, rtx y, int rvalue, struct equiv_info *info)\n \t  return false;\n \telse if (x_common_live)\n \t  {\n-\t    if (! rvalue || info->input_cost < 0 || no_new_pseudos)\n+\t    if (! rvalue || info->input_cost < 0 || reload_completed)\n \t      return false;\n \t    /* If info->live_update is not set, we are processing notes.\n \t       We then allow a match with x_input / y_input found in a"}, {"sha": "ff0d8a3ea7defd53c1e149ba670b14b5b237ea83", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -149,9 +149,6 @@ location_t input_location;\n \n struct line_maps line_table;\n \n-/* Nonzero if it is unsafe to create any new pseudo registers.  */\n-int no_new_pseudos;\n-\n /* Stack of currently pending input files.  */\n \n struct file_stack *input_file_stack;"}, {"sha": "a2271cbb646dee0eeb653ecde2b6042ace4bb34b", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4375b218c4dfbd305532790892beb5307f8c2c/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ef4375b218c4dfbd305532790892beb5307f8c2c", "patch": "@@ -384,7 +384,6 @@ extern struct tree_opt_pass pass_regclass_init;\n extern struct tree_opt_pass pass_subregs_of_mode_init;\n extern struct tree_opt_pass pass_subregs_of_mode_finish;\n extern struct tree_opt_pass pass_inc_dec;\n-extern struct tree_opt_pass pass_no_new_pseudos;\n extern struct tree_opt_pass pass_stack_ptr_mod;\n extern struct tree_opt_pass pass_initialize_regs;\n extern struct tree_opt_pass pass_combine;"}]}