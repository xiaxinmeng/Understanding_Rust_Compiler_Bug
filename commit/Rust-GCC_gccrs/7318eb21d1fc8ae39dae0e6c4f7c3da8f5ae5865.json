{"sha": "7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxOGViMjFkMWZjOGFlMzlkYWUwZTZjNGY3YzNkYThmNWFlNTg2NQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-08-02T11:17:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-08-02T11:17:40Z"}, "message": "2003-08-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/ByteBufferImpl.java\n\t(getChar): Check remaining bytes, fixed comment about endianess.\n\t(putChar): Likewise.\n\t(getShort): Likewise.\n\t(putShort): Likewise.\n\t(getInt): Check remaining bytes, fixed conversion, fixed comment about\n\tendianess.\n\t(putInt): Likewise.\n\t(getLong): Likewise.\n\t(putLong): Likewise.\n\t(getFloat): Likewise.\n\t(putFloat): Likewise.\n\t(getDouble): Likewise.\n\t(putDouble): Likewise.\n\t* java/nio/DirectByteBufferImpl.java\n\t(getChar): Wrapped code, fixed comment about endianess.\n\t(putchar): Likewise.\n\t(getShort): Likewise.\n\t(putShort): Likewise.\n\t(getInt): Fixed conversion, fixed comment about endianess.\n\t(putInt): Likewise.\n\t(getLong): Likewise.\n\t(putLong): Likewise.\n\t(getFloat): Likewise.\n\t(putFloat): Likewise.\n\t(getDouble): Likewise.\n\t(putDouble): Likewise.\n\t* java/nio/MappedByteBufferImpl.java\n\t(compact): Implemented.\n\t(getChar): Implemented.\n\t(putChar): Implemented.\n\t(getDouble): Implemented.\n\t(putdouble): Implemented.\n\t(getFloat): Implemented.\n\t(putFloat): Implemented.\n\t(getInt): Implemented.\n\t(putInt): Implemented.\n\t(getLong): Implemented.\n\t(putLong): Implemented.\n\t(getShort): Implemented.\n\t(putShort): Implemented.\n\t* java/nio/channels/FileChannelImpl.java\n\t(read): Set position where to access file.\n\t(write): Likewise.\n\t(transferTo): Flip buffer after read and before write.\n\t(transferFrom): Likewise.\n\nFrom-SVN: r70102", "tree": {"sha": "74653b76448900743d8783089006138f40c280d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74653b76448900743d8783089006138f40c280d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/comments", "author": null, "committer": null, "parents": [{"sha": "2937079664a6145b45cc217f2fe4bafa83027bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2937079664a6145b45cc217f2fe4bafa83027bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2937079664a6145b45cc217f2fe4bafa83027bdd"}], "stats": {"total": 438, "additions": 300, "deletions": 138}, "files": [{"sha": "5453e30fdd8002f69f2be219f9c7c5a909497f88", "filename": "libjava/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "patch": "@@ -1,3 +1,52 @@\n+2003-08-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/ByteBufferImpl.java\n+\t(getChar): Check remaining bytes, fixed comment about endianess.\n+\t(putChar): Likewise.\n+\t(getShort): Likewise.\n+\t(putShort): Likewise.\n+\t(getInt): Check remaining bytes, fixed conversion, fixed comment about\n+\tendianess.\n+\t(putInt): Likewise.\n+\t(getLong): Likewise.\n+\t(putLong): Likewise.\n+\t(getFloat): Likewise.\n+\t(putFloat): Likewise.\n+\t(getDouble): Likewise.\n+\t(putDouble): Likewise.\n+\t* java/nio/DirectByteBufferImpl.java\n+\t(getChar): Wrapped code, fixed comment about endianess.\n+\t(putchar): Likewise.\n+\t(getShort): Likewise.\n+\t(putShort): Likewise.\n+\t(getInt): Fixed conversion, fixed comment about endianess.\n+\t(putInt): Likewise.\n+\t(getLong): Likewise.\n+\t(putLong): Likewise.\n+\t(getFloat): Likewise.\n+\t(putFloat): Likewise.\n+\t(getDouble): Likewise.\n+\t(putDouble): Likewise.\n+\t* java/nio/MappedByteBufferImpl.java\n+\t(compact): Implemented.\n+\t(getChar): Implemented.\n+\t(putChar): Implemented.\n+\t(getDouble): Implemented.\n+\t(putdouble): Implemented.\n+\t(getFloat): Implemented.\n+\t(putFloat): Implemented.\n+\t(getInt): Implemented.\n+\t(putInt): Implemented.\n+\t(getLong): Implemented.\n+\t(putLong): Implemented.\n+\t(getShort): Implemented.\n+\t(putShort): Implemented.\n+\t* java/nio/channels/FileChannelImpl.java\n+\t(read): Set position where to access file.\n+\t(write): Likewise.\n+\t(transferTo): Flip buffer after read and before write.\n+\t(transferFrom): Likewise.\n+\n 2003-08-02  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/lang/ArrayHelper.java"}, {"sha": "7ea3a3a0e6dbf79ac792a5b8ef67ad1aa80f9f6a", "filename": "libjava/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 137, "deletions": 65, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferImpl.java?ref=7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "patch": "@@ -182,114 +182,156 @@ final public ByteBuffer put (int index, byte value)\n   \n   final public char getChar ()\n   {\n-    // FIXME: this handles big endian only\n-    return (char) (((get () & 0xff) << 8) + (get () & 0xff));\n+    if (remaining() < 2)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n+    return (char) (((get () & 0xff) << 8)\n+                   + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putChar (char value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff00) >> 8));\n     put ((byte) (((int) value) & 0x00ff));\n     return this;\n   }\n   \n   final public char getChar (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (char) (((get (index) & 0xff) << 8) + (get (index + 1) & 0xff));\n   }\n   \n   final public ByteBuffer putChar (int index, char value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferOverflowException();\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff00) >> 8));\n     put (index + 1, (byte) (((int) value) & 0x00ff));\n     return this;\n   }\n \n   final public short getShort ()\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (short) (((get () & 0xff) << 8) + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putShort (short value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff00) >> 8));\n     put ((byte) (((int) value) & 0x00ff));\n     return this;\n   }\n   \n   final public short getShort (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (short) (((get (index) & 0xff) << 8) + (get (index + 1) & 0xff));\n   }\n   \n   final public ByteBuffer putShort (int index, short value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 2)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff00) >> 8));\n     put (index + 1, (byte) (((int) value) & 0x00ff));\n     return this;\n   }\n \n   final public int getInt ()\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (int) (((get () & 0xff) << 24)\n-                  + (get () & 0xff) << 16\n-                  + (get () & 0xff) << 8\n+                  + ((get () & 0xff) << 16)\n+                  + ((get () & 0xff) << 8)\n                   + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putInt (int value)\n   {\n-    // FIXME: this handles big endian only\n-    put ((byte) ((((int) value) & 0xff000000) >> 24));\n-    put ((byte) ((((int) value) & 0x00ff0000) >> 16));\n-    put ((byte) ((((int) value) & 0x0000ff00) >> 8));\n-    put ((byte) (((int) value) & 0x000000ff));\n+    if (remaining() < 4)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n+    put ((byte) ((value & 0xff000000) >> 24));\n+    put ((byte) ((value & 0x00ff0000) >> 16));\n+    put ((byte) ((value & 0x0000ff00) >> 8));\n+    put ((byte) (value & 0x000000ff));\n     return this;\n   }\n   \n   final public int getInt (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (int) (((get (index) & 0xff) << 24)\n-                  + (get (index + 1) & 0xff) << 16\n-                  + (get (index + 2) & 0xff) << 8\n+                  + ((get (index + 1) & 0xff) << 16)\n+                  + ((get (index + 2) & 0xff) << 8)\n                   + (get (index + 3) & 0xff));\n   }\n   \n   final public ByteBuffer putInt (int index, int value)\n   {\n-    // FIXME: this handles big endian only\n-    put (index, (byte) ((((int) value) & 0xff000000) >> 24));\n-    put (index + 1, (byte) ((((int) value) & 0x00ff0000) >> 16));\n-    put (index + 2, (byte) ((((int) value) & 0x0000ff00) >> 8));\n-    put (index + 3, (byte) (((int) value) & 0x000000ff));\n+    if (remaining() < 4)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n+    put (index, (byte) ((value & 0xff000000) >> 24));\n+    put (index + 1, (byte) ((value & 0x00ff0000) >> 16));\n+    put (index + 2, (byte) ((value & 0x0000ff00) >> 8));\n+    put (index + 3, (byte) (value & 0x000000ff));\n     return this;\n   }\n \n   final public long getLong ()\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (long) (((get () & 0xff) << 56)\n-                   + (get () & 0xff) << 48\n-                   + (get () & 0xff) << 40\n-                   + (get () & 0xff) << 32\n-                   + (get () & 0xff) << 24\n-                   + (get () & 0xff) << 16\n-                   + (get () & 0xff) << 8\n+                   + ((get () & 0xff) << 48)\n+                   + ((get () & 0xff) << 40)\n+                   + ((get () & 0xff) << 32)\n+                   + ((get () & 0xff) << 24)\n+                   + ((get () & 0xff) << 16)\n+                   + ((get () & 0xff) << 8)\n                    + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putLong (long value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put ((byte) ((value & 0xff00000000000000L) >> 56));\n     put ((byte) ((value & 0x00ff000000000000L) >> 48));\n     put ((byte) ((value & 0x0000ff0000000000L) >> 40));\n@@ -303,20 +345,26 @@ final public ByteBuffer putLong (long value)\n   \n   final public long getLong (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (long) (((get (index) & 0xff) << 56)\n-                   + (get (index + 1) & 0xff) << 48\n-                   + (get (index + 2) & 0xff) << 40\n-                   + (get (index + 3) & 0xff) << 32\n-                   + (get (index + 4) & 0xff) << 24\n-                   + (get (index + 5) & 0xff) << 16\n-                   + (get (index + 6) & 0xff) << 8\n+                   + ((get (index + 1) & 0xff) << 48)\n+                   + ((get (index + 2) & 0xff) << 40)\n+                   + ((get (index + 3) & 0xff) << 32)\n+                   + ((get (index + 4) & 0xff) << 24)\n+                   + ((get (index + 5) & 0xff) << 16)\n+                   + ((get (index + 6) & 0xff) << 8)\n                    + (get (index + 7) & 0xff));\n   }\n   \n   final public ByteBuffer putLong (int index, long value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((value & 0xff00000000000000L) >> 56));\n     put (index + 1, (byte) ((value & 0x00ff000000000000L) >> 48));\n     put (index + 2, (byte) ((value & 0x0000ff0000000000L) >> 40));\n@@ -330,16 +378,22 @@ final public ByteBuffer putLong (int index, long value)\n \n   final public float getFloat ()\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (float) (((get () & 0xff) << 24)\n-                    + (get () & 0xff) << 16\n-                    + (get () & 0xff) << 8\n+                    + ((get () & 0xff) << 16)\n+                    + ((get () & 0xff) << 8)\n                     + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putFloat (float value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff000000) >> 24));\n     put ((byte) ((((int) value) & 0x00ff0000) >> 16));\n     put ((byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -349,16 +403,22 @@ final public ByteBuffer putFloat (float value)\n   \n   final public float getFloat (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (float) (((get (index) & 0xff) << 24)\n-                    + (get (index + 1) & 0xff) << 16\n-                    + (get (index + 2) & 0xff) << 8\n+                    + ((get (index + 1) & 0xff) << 16)\n+                    + ((get (index + 2) & 0xff) << 8)\n                     + (get (index + 3) & 0xff));\n   }\n \n   final public ByteBuffer putFloat (int index, float value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 4)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff000000) >> 24));\n     put (index + 1, (byte) ((((int) value) & 0x00ff0000) >> 16));\n     put (index + 2, (byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -368,20 +428,26 @@ final public ByteBuffer putFloat (int index, float value)\n \n   final public double getDouble ()\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (double) (((get () & 0xff) << 56)\n-                     + (get () & 0xff) << 48\n-                     + (get () & 0xff) << 40\n-                     + (get () & 0xff) << 32\n-                     + (get () & 0xff) << 24\n-                     + (get () & 0xff) << 16\n-                     + (get () & 0xff) << 8\n+                     + ((get () & 0xff) << 48)\n+                     + ((get () & 0xff) << 40)\n+                     + ((get () & 0xff) << 32)\n+                     + ((get () & 0xff) << 24)\n+                     + ((get () & 0xff) << 16)\n+                     + ((get () & 0xff) << 8)\n                      + (get () & 0xff));\n   }\n \n   final public ByteBuffer putDouble (double value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put ((byte) ((((long) value) & 0xff00000000000000L) >> 56));\n     put ((byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n     put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n@@ -395,20 +461,26 @@ final public ByteBuffer putDouble (double value)\n   \n   final public double getDouble (int index)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferUnderflowException();\n+\n+    // FIXME: this handles little endian only\n     return (double) (((get (index) & 0xff) << 56)\n-                     + (get (index + 1) & 0xff) << 48\n-                     + (get (index + 2) & 0xff) << 40\n-                     + (get (index + 3) & 0xff) << 32\n-                     + (get (index + 4) & 0xff) << 24\n-                     + (get (index + 5) & 0xff) << 16\n-                     + (get (index + 6) & 0xff) << 8\n+                     + ((get (index + 1) & 0xff) << 48)\n+                     + ((get (index + 2) & 0xff) << 40)\n+                     + ((get (index + 3) & 0xff) << 32)\n+                     + ((get (index + 4) & 0xff) << 24)\n+                     + ((get (index + 5) & 0xff) << 16)\n+                     + ((get (index + 6) & 0xff) << 8)\n                      + (get (index + 7) & 0xff));\n   }\n   \n   final public ByteBuffer putDouble (int index, double value)\n   {\n-    // FIXME: this handles big endian only\n+    if (remaining() < 8)\n+      throw new BufferOverflowException();\n+\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n     put (index + 1, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n     put (index + 2, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));"}, {"sha": "cdeafef6dfdbb8cc54ea8adcb178e9c643d26ac8", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 64, "deletions": 60, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "patch": "@@ -181,72 +181,76 @@ public ShortBuffer asShortBuffer ()\n   \n   final public char getChar ()\n   {\n-    // FIXME: this handles big endian only\n-    return (char) (((get () & 0xff) << 8) + (get () & 0xff));\n+    // FIXME: this handles little endian only\n+    return (char) (((get () & 0xff) << 8)\n+                   + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putChar (char value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff00) >> 8));\n     put ((byte) (((int) value) & 0x00ff));\n     return this;\n   }\n   \n   final public char getChar (int index)\n   {\n-    // FIXME: this handles big endian only\n-    return (char) (((get (index) & 0xff) << 8) + (get (index + 1) & 0xff));\n+    // FIXME: this handles little endian only\n+    return (char) (((get (index) & 0xff) << 8)\n+                   + (get (index + 1) & 0xff));\n   }\n   \n   final public ByteBuffer putChar (int index, char value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff00) >> 8));\n     put (index + 1, (byte) (((int) value) & 0x00ff));\n     return this;\n   }\n \n   final public short getShort ()\n   {\n-    // FIXME: this handles big endian only\n-    return (short) (((get () & 0xff) << 8) + (get () & 0xff));\n+    // FIXME: this handles little endian only\n+    return (short) (((get () & 0xff) << 8)\n+                    + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putShort (short value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff00) >> 8));\n     put ((byte) (((int) value) & 0x00ff));\n     return this;\n   }\n   \n   final public short getShort (int index)\n   {\n-    // FIXME: this handles big endian only\n-    return (short) (((get (index) & 0xff) << 8) + (get (index + 1) & 0xff));\n+    // FIXME: this handles little endian only\n+    return (short) (((get (index) & 0xff) << 8)\n+                    + (get (index + 1) & 0xff));\n   }\n   \n   final public ByteBuffer putShort (int index, short value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff00) >> 8));\n     put (index + 1, (byte) (((int) value) & 0x00ff));\n     return this;\n   }\n \n   final public int getInt ()\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (int) (((get () & 0xff) << 24)\n-                  + (get () & 0xff) << 16\n-                  + (get () & 0xff) << 8\n+                  + ((get () & 0xff) << 16)\n+                  + ((get () & 0xff) << 8)\n                   + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putInt (int value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff000000) >> 24));\n     put ((byte) ((((int) value) & 0x00ff0000) >> 16));\n     put ((byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -256,16 +260,16 @@ final public ByteBuffer putInt (int value)\n   \n   final public int getInt (int index)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (int) (((get (index) & 0xff) << 24)\n-                  + (get (index + 1) & 0xff) << 16\n-                  + (get (index + 2) & 0xff) << 8\n+                  + ((get (index + 1) & 0xff) << 16)\n+                  + ((get (index + 2) & 0xff) << 8)\n                   + (get (index + 3) & 0xff));\n   }\n   \n   final public ByteBuffer putInt (int index, int value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff000000) >> 24));\n     put (index + 1, (byte) ((((int) value) & 0x00ff0000) >> 16));\n     put (index + 2, (byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -275,20 +279,20 @@ final public ByteBuffer putInt (int index, int value)\n \n   final public long getLong ()\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (long) (((get () & 0xff) << 56)\n-                   + (get () & 0xff) << 48\n-                   + (get () & 0xff) << 40\n-                   + (get () & 0xff) << 32\n-                   + (get () & 0xff) << 24\n-                   + (get () & 0xff) << 16\n-                   + (get () & 0xff) << 8\n+                   + ((get () & 0xff) << 48)\n+                   + ((get () & 0xff) << 40)\n+                   + ((get () & 0xff) << 32)\n+                   + ((get () & 0xff) << 24)\n+                   + ((get () & 0xff) << 16)\n+                   + ((get () & 0xff) << 8)\n                    + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putLong (long value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((value & 0xff00000000000000L) >> 56));\n     put ((byte) ((value & 0x00ff000000000000L) >> 48));\n     put ((byte) ((value & 0x0000ff0000000000L) >> 40));\n@@ -302,20 +306,20 @@ final public ByteBuffer putLong (long value)\n   \n   final public long getLong (int index)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (long) (((get (index) & 0xff) << 56)\n-                   + (get (index + 1) & 0xff) << 48\n-                   + (get (index + 2) & 0xff) << 40\n-                   + (get (index + 3) & 0xff) << 32\n-                   + (get (index + 4) & 0xff) << 24\n-                   + (get (index + 5) & 0xff) << 16\n-                   + (get (index + 6) & 0xff) << 8\n+                   + ((get (index + 1) & 0xff) << 48)\n+                   + ((get (index + 2) & 0xff) << 40)\n+                   + ((get (index + 3) & 0xff) << 32)\n+                   + ((get (index + 4) & 0xff) << 24)\n+                   + ((get (index + 5) & 0xff) << 16)\n+                   + ((get (index + 6) & 0xff) << 8)\n                    + (get (index + 7) & 0xff));\n   }\n   \n   final public ByteBuffer putLong (int index, long value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((value & 0xff00000000000000L) >> 56));\n     put (index + 1, (byte) ((value & 0x00ff000000000000L) >> 48));\n     put (index + 2, (byte) ((value & 0x0000ff0000000000L) >> 40));\n@@ -329,16 +333,16 @@ final public ByteBuffer putLong (int index, long value)\n \n   final public float getFloat ()\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (float) (((get () & 0xff) << 24)\n-                    + (get () & 0xff) << 16\n-                    + (get () & 0xff) << 8\n+                    + ((get () & 0xff) << 16)\n+                    + ((get () & 0xff) << 8)\n                     + (get () & 0xff));\n   }\n   \n   final public ByteBuffer putFloat (float value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((((int) value) & 0xff000000) >> 24));\n     put ((byte) ((((int) value) & 0x00ff0000) >> 16));\n     put ((byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -348,16 +352,16 @@ final public ByteBuffer putFloat (float value)\n   \n   final public float getFloat (int index)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (float) (((get (index) & 0xff) << 24)\n-                    + (get (index + 1) & 0xff) << 16\n-                    + (get (index + 2) & 0xff) << 8\n+                    + ((get (index + 1) & 0xff) << 16)\n+                    + ((get (index + 2) & 0xff) << 8)\n                     + (get (index + 3) & 0xff));\n   }\n \n   final public ByteBuffer putFloat (int index, float value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((int) value) & 0xff000000) >> 24));\n     put (index + 1, (byte) ((((int) value) & 0x00ff0000) >> 16));\n     put (index + 2, (byte) ((((int) value) & 0x0000ff00) >> 8));\n@@ -367,20 +371,20 @@ final public ByteBuffer putFloat (int index, float value)\n \n   final public double getDouble ()\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (double) (((get () & 0xff) << 56)\n-                     + (get () & 0xff) << 48\n-                     + (get () & 0xff) << 40\n-                     + (get () & 0xff) << 32\n-                     + (get () & 0xff) << 24\n-                     + (get () & 0xff) << 16\n-                     + (get () & 0xff) << 8\n+                     + ((get () & 0xff) << 48)\n+                     + ((get () & 0xff) << 40)\n+                     + ((get () & 0xff) << 32)\n+                     + ((get () & 0xff) << 24)\n+                     + ((get () & 0xff) << 16)\n+                     + ((get () & 0xff) << 8)\n                      + (get () & 0xff));\n   }\n \n   final public ByteBuffer putDouble (double value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put ((byte) ((((long) value) & 0xff00000000000000L) >> 56));\n     put ((byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n     put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n@@ -394,20 +398,20 @@ final public ByteBuffer putDouble (double value)\n   \n   final public double getDouble (int index)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     return (double) (((get (index) & 0xff) << 56)\n-                     + (get (index + 1) & 0xff) << 48\n-                     + (get (index + 2) & 0xff) << 40\n-                     + (get (index + 3) & 0xff) << 32\n-                     + (get (index + 4) & 0xff) << 24\n-                     + (get (index + 5) & 0xff) << 16\n-                     + (get (index + 6) & 0xff) << 8\n+                     + ((get (index + 1) & 0xff) << 48)\n+                     + ((get (index + 2) & 0xff) << 40)\n+                     + ((get (index + 3) & 0xff) << 32)\n+                     + ((get (index + 4) & 0xff) << 24)\n+                     + ((get (index + 5) & 0xff) << 16)\n+                     + ((get (index + 6) & 0xff) << 8)\n                      + (get (index + 7) & 0xff));\n   }\n   \n   final public ByteBuffer putDouble (int index, double value)\n   {\n-    // FIXME: this handles big endian only\n+    // FIXME: this handles little endian only\n     put (index, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n     put (index + 1, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n     put (index + 2, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));"}, {"sha": "c5b460e49003f9861f3cc8ed1bc7961b3b650cf9", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "patch": "@@ -102,7 +102,16 @@ public ByteBuffer put (int index, byte value)\n \n   public ByteBuffer compact ()\n   {\n-    throw new Error (\"Not implemented\");\n+    int copied = 0;\n+    \n+    while (remaining () > 0)\n+      {\n+\tput (copied, get ());\n+\tcopied++;\n+      }\n+\n+    position (copied);\n+    return this;\n   }\n \n   public boolean isDirect ()\n@@ -157,7 +166,9 @@ public DoubleBuffer asDoubleBuffer ()\n \n   public char getChar ()\n   {\n-    throw new Error (\"Not implemented\");\n+    char value = getChar (position());\n+    position (position() + 2);\n+    return value;\n   }\n \n   public char getChar (int index)\n@@ -167,7 +178,9 @@ public char getChar (int index)\n \n   public ByteBuffer putChar (char value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putChar (position(), value);\n+    position (position() + 2);\n+    return this;\n   }\n \n   public ByteBuffer putChar (int index, char value)\n@@ -177,7 +190,9 @@ public ByteBuffer putChar (int index, char value)\n \n   public double getDouble ()\n   {\n-    throw new Error (\"Not implemented\");\n+    double value = getDouble (position());\n+    position (position() + 8);\n+    return value;\n   }\n \n   public double getDouble (int index)\n@@ -187,7 +202,9 @@ public double getDouble (int index)\n \n   public ByteBuffer putDouble (double value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putDouble (position(), value);\n+    position (position() + 8);\n+    return this;\n   }\n \n   public ByteBuffer putDouble (int index, double value)\n@@ -197,7 +214,9 @@ public ByteBuffer putDouble (int index, double value)\n \n   public float getFloat ()\n   {\n-    throw new Error (\"Not implemented\");\n+    float value = getFloat (position ());\n+    position (position() + 4);\n+    return value;\n   }\n \n   public float getFloat (int index)\n@@ -207,7 +226,9 @@ public float getFloat (int index)\n \n   public ByteBuffer putFloat (float value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putFloat (position(), value);\n+    position (position() + 4);\n+    return this;\n   }\n \n   public ByteBuffer putFloat (int index, float value)\n@@ -217,7 +238,9 @@ public ByteBuffer putFloat (int index, float value)\n \n   public int getInt ()\n   {\n-    throw new Error (\"Not implemented\");\n+    int value = getInt (position());\n+    position (position() + 8);\n+    return value;\n   }\n \n   public int getInt (int index)\n@@ -227,7 +250,9 @@ public int getInt (int index)\n \n   public ByteBuffer putInt (int value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putInt (position(), value);\n+    position (position() + 4);\n+    return this;\n   }\n \n   public ByteBuffer putInt (int index, int value)\n@@ -237,7 +262,9 @@ public ByteBuffer putInt (int index, int value)\n \n   public long getLong ()\n   {\n-    throw new Error (\"Not implemented\");\n+    long value = getLong (position());\n+    position (position() + 8);\n+    return value;\n   }\n \n   public long getLong (int index)\n@@ -247,7 +274,9 @@ public long getLong (int index)\n \n   public ByteBuffer putLong (long value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putLong (position(), value);\n+    position (position() + 8);\n+    return this;\n   }\n \n   public ByteBuffer putLong (int index, long value)\n@@ -257,7 +286,9 @@ public ByteBuffer putLong (int index, long value)\n \n   public short getShort ()\n   {\n-    throw new Error (\"Not implemented\");\n+    short value = getShort (position());\n+    position (position() + 2);\n+    return value;\n   }\n \n   public short getShort (int index)\n@@ -267,7 +298,9 @@ public short getShort (int index)\n \n   public ByteBuffer putShort (short value)\n   {\n-    throw new Error (\"Not implemented\");\n+    putShort (position(), value);\n+    position (position() + 2);\n+    return this;\n   }\n \n   public ByteBuffer putShort (int index, short value)"}, {"sha": "85113a0287b6565de9fd63a7e15b2d3090a9d375", "filename": "libjava/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=7318eb21d1fc8ae39dae0e6c4f7c3da8f5ae5865", "patch": "@@ -146,6 +146,7 @@ public int read (ByteBuffer dst, long position)\n     long oldPosition;\n \n     oldPosition = implPosition ();\n+    position (position);\n     result = implRead (dst);\n     implPosition (oldPosition);\n     \n@@ -208,6 +209,7 @@ public int write (ByteBuffer src, long position)\n     long oldPosition;\n \n     oldPosition = implPosition ();\n+    position (position);\n     result = implWrite (src);\n     implPosition (oldPosition);\n     \n@@ -298,6 +300,7 @@ public long transferTo (long position, long count, WritableByteChannel target)\n     // XXX: count needs to be casted from long to int. Dataloss ?\n     ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n     read (buffer, position);\n+    buffer.flip();\n     return target.write (buffer);\n   }\n \n@@ -317,6 +320,7 @@ public long transferFrom (ReadableByteChannel src, long position, long count)\n     // XXX: count needs to be casted from long to int. Dataloss ?\n     ByteBuffer buffer = ByteBuffer.allocate ((int) count);\n     src.read (buffer);\n+    buffer.flip();\n     return write (buffer, position);\n   }\n "}]}