{"sha": "8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmZGI0MTkxMjIxZjgzZjE1ZmE5YzFlYzhiNTUxODJkNTZiOGQ0Yw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-01-26T22:11:51Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-01-26T22:11:51Z"}, "message": "Handle DR_NUM_DIMENSIONS == 0 in initialize_data_dependence_relation\n\n2016-01-26  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/69110\n\t* tree-data-ref.c (initialize_data_dependence_relation): Handle\n\tDR_NUM_DIMENSIONS == 0.\n\n\t* gcc.dg/autopar/pr69110.c: New test.\n\n\t* testsuite/libgomp.c/pr69110.c: New test.\n\nFrom-SVN: r232852", "tree": {"sha": "01016121051cdf5eed6022d3e5383732ab09ec22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01016121051cdf5eed6022d3e5383732ab09ec22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/comments", "author": null, "committer": null, "parents": [{"sha": "56f80f54fea87fd139fc3e8637eb86fd1f886380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f80f54fea87fd139fc3e8637eb86fd1f886380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f80f54fea87fd139fc3e8637eb86fd1f886380"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "f38b374e58ffb59cb6892c3ba8c40ecfc7f3e008", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -1,3 +1,9 @@\n+2016-01-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69110\n+\t* tree-data-ref.c (initialize_data_dependence_relation): Handle\n+\tDR_NUM_DIMENSIONS == 0.\n+\n 2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n             Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "08e2485086577c18f1e1d1fd75417e1eb5eeff08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -1,3 +1,8 @@\n+2016-01-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69110\n+\t* gcc.dg/autopar/pr69110.c: New test.\n+\n 2016-01-26  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n             Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "27cdae535b8306bb04f8d38019d9a6caa7c16309", "filename": "gcc/testsuite/gcc.dg/autopar/pr69110.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69110.c?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-parallelize-loops=2 -fno-tree-loop-im -fdump-tree-parloops2-details\" } */\n+\n+#define N 1000\n+\n+unsigned int i = 0;\n+\n+void\n+foo (void)\n+{\n+  unsigned int z;\n+  for (z = 0; z < N; ++z)\n+    ++i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 0 \"parloops2\" } } */\n+/* { dg-final { scan-tree-dump-times \"FAILED: data dependencies exist across iterations\" 1 \"parloops2\" } } */"}, {"sha": "d6d9ffcaa3424992c7203712a9c16969bc50ad02", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -1509,13 +1509,14 @@ initialize_data_dependence_relation (struct data_reference *a,\n   /* The case where the references are exactly the same.  */\n   if (operand_equal_p (DR_REF (a), DR_REF (b), 0))\n     {\n-     if (loop_nest.exists ()\n-        && !object_address_invariant_in_loop_p (loop_nest[0],\n-       \t\t\t\t\t        DR_BASE_OBJECT (a)))\n-      {\n-        DDR_ARE_DEPENDENT (res) = chrec_dont_know;\n-        return res;\n-      }\n+      if ((loop_nest.exists ()\n+\t   && !object_address_invariant_in_loop_p (loop_nest[0],\n+\t\t\t\t\t\t   DR_BASE_OBJECT (a)))\n+\t  || DR_NUM_DIMENSIONS (a) == 0)\n+\t{\n+\t  DDR_ARE_DEPENDENT (res) = chrec_dont_know;\n+\t  return res;\n+\t}\n       DDR_AFFINE_P (res) = true;\n       DDR_ARE_DEPENDENT (res) = NULL_TREE;\n       DDR_SUBSCRIPTS (res).create (DR_NUM_DIMENSIONS (a));\n@@ -1547,9 +1548,9 @@ initialize_data_dependence_relation (struct data_reference *a,\n   /* If the base of the object is not invariant in the loop nest, we cannot\n      analyze it.  TODO -- in fact, it would suffice to record that there may\n      be arbitrary dependences in the loops where the base object varies.  */\n-  if (loop_nest.exists ()\n-      && !object_address_invariant_in_loop_p (loop_nest[0],\n-     \t\t\t\t\t      DR_BASE_OBJECT (a)))\n+  if ((loop_nest.exists ()\n+       && !object_address_invariant_in_loop_p (loop_nest[0], DR_BASE_OBJECT (a)))\n+      || DR_NUM_DIMENSIONS (a) == 0)\n     {\n       DDR_ARE_DEPENDENT (res) = chrec_dont_know;\n       return res;"}, {"sha": "9c09ac50cba825fa86c4f14485c099f3ecdccc5a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -1,3 +1,8 @@\n+2016-01-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69110\n+\t* testsuite/libgomp.c/pr69110.c: New test.\n+\n 2016-01-25  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/69393"}, {"sha": "0d9e5ca5c3cfe7d794ae94610829080bc0b1a55d", "filename": "libgomp/testsuite/libgomp.c/pr69110.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr69110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr69110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr69110.c?ref=8dfdb4191221f83f15fa9c1ec8b55182d56b8d4c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-ftree-parallelize-loops=2 -O1 -fno-tree-loop-im\" } */\n+\n+#define N 1000\n+\n+unsigned int i = 0;\n+\n+static void __attribute__((noinline, noclone))\n+foo (void)\n+{\n+  unsigned int z;\n+  for (z = 0; z < N; ++z)\n+    ++i;\n+}\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  foo ();\n+  if (i != N)\n+    abort ();\n+\n+  return 0;\n+}"}]}