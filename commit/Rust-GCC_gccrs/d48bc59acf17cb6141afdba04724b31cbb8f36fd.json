{"sha": "d48bc59acf17cb6141afdba04724b31cbb8f36fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4YmM1OWFjZjE3Y2I2MTQxYWZkYmEwNDcyNGIzMWNiYjhmMzZmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-18T19:27:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-18T19:27:52Z"}, "message": "final.c (HAVE_READONLY_DATA_SECTION): New.\n\n\t* final.c (HAVE_READONLY_DATA_SECTION): New.\n\t(shorten_branches): Use it instead of ifdefs.\n\t* varasm.c (enum in_section): Add in_readonly_data.\n\t(text_section, data_section): Tidy.\n\t(readonly_data_section): Use READONLY_DATA_SECTION_ASM_OP if present.\n\n\t* config/darwin.h, config/nextstep.h, config/h8300/elf.h,\n\tconfig/i860/paragon.h, config/m68k/dpx2.h, config/m68k/hp320.h\n\t(READONLY_DATA_SECTION): Don't undef.\n\n\t* config/alpha/unicosmk.h, config/h8300/elf.h, config/i386/aix386ng.h,\n\tconfig/i860/paragon.h, config/m68k/dpx2.h, config/m68k/hp320.h,\n\tconfig/rs6000/lynx.h (READONLY_DATA_SECTION_ASM_OP): Undef.\n\n\t* config/elfos.h, config/svr3.h, config/alpha/alpha-interix.h,\n\tconfig/alpha/elf.h, config/c4x/c4x.h, config/i386/i386-interix.h,\n\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/i860/sysv3.h,\n\tconfig/m88k/m88k.h, config/pa/pa64-hpux.h (USE_CONST_SECTION): Remove.\n\n\t* config/elfos.h, config/netware.h, config/alpha/alpha-interix.h,\n\tconfig/alpha/elf.h, config/alpha/vms.h, config/arc/arc.h,\n\tconfig/arm/coff.h, config/c4x/c4x.h, config/dsp16xx/dsp16xx.h,\n\tconfig/i386/dgux.h, config/i386/i386-interix.h, config/i386/sco5.h,\n\tconfig/ia64/hpux.h, config/m32r/m32r.h, config/m68k/tower-as.h,\n\tconfig/m88k/m88k.h, config/mcore/mcore-pe.h, config/mips/iris6.h,\n\tconfig/mips/mips.h, config/mmix/mmix.h, config/pa/pa64-hpux.h,\n\tconfig/sparc/sysv4.h (READONLY_DATA_SECTION_ASM_OP): Rename from\n\tCONST_SECTION_ASM_OP/READONLY_SECTION_ASM_OP/RDATA_SECTION_ASM_OP.\n\n\t* config/elfos.h, config/netware.h, config/1750a/1750a.h,\n\tconfig/a29k/a29k.h, config/alpha/alpha-interix.h, config/alpha/alpha.h,\n\tconfig/arm/coff.h, config/h8300/h8300.h, config/i386/aix386ng.h,\n\tconfig/i386/i386-interix.h, config/i386/osfrose.h, config/mmix/mmix.h,\n\tconfig/pa/pa64-hpux.h, config/sparc/litecoff.h\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Remove.\n\n\t* config/elfos.h, config/netware.h, config/svr3.h,\n\tconfig/alpha/alpha-interix.h, config/alpha/alpha.h, config/alpha/elf.h,\n\tconfig/arm/coff.h, config/c4x/c4x.h, config/dsp16xx/dsp16xx.h,\n\tconfig/h8300/h8300.h, config/i386/i386-interix.h,\n\tconfig/i386/osfrose.h, config/i386/svr3gas.h, config/mmix/mmix.h,\n\tconfig/pa/pa64-hpux.h (READONLY_DATA_SECTION): Remove.\n\n\t* config/elfos.h, config/netware.h, config/svr3.h,\n\tconfig/alpha/alpha-interix.h, config/alpha/alpha.h, config/alpha/elf.h,\n\tconfig/c4x/c4x.h, config/i386/aix386ng.h, config/i386/i386-interix.h,\n\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/mmix/mmix.h,\n\tconfig/pa/pa64-hpux.h (CONST_SECTION_FUNCTION): Remove.\n\n\t* config/lynx.h, config/svr3.h, config/alpha/elf.h, config/alpha/vms.h,\n\tconfig/c4x/c4x.h, config/dsp16xx/dsp16xx.h, config/i386/sco5.h,\n\tconfig/i386/svr3gas.h, config/i860/sysv3.h, config/i860/sysv4.h,\n\tconfig/ia64/sysv4.h, config/m32r/m32r.h, config/m88k/m88k.h,\n\tconfig/mcore/mcore-elf.h, config/mcore/mcore-pe.h, config/mips/elf.h,\n\tconfig/mips/elf64.h, config/mips/iris6.h, config/mips/linux.h,\n\tconfig/mips/mips.h, config/mips/rtems64.h, config/mips/vxworks.h,\n\tconfig/rs6000/sysv4.h, config/v850/v850.h\n\t(EXTRA_SECTIONS): Remove in_const/in_rdata.\n\t(EXTRA_SECTION_FUNCTIONS): Remove accompanying function.\n\n\t* config/svr3.h, config/c4x/c4x.h, config/i386/dgux.h,\n\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/ia64/aix.h,\n\tconfig/m88k/dgux.h, config/mcore/mcore-pe.h, config/mmix/mmix.h,\n\tconfig/sparc/sysv4.h (SELECT_RTX_SECTION): Use readonly_data_section.\n\t* config/alpha/alpha.c (alpha_start_function): Likewise.\n\t(alpha_write_linkage): Likewise.\n\t* config/m32r/m32r.c (m32r_select_section): Likewise.\n\t* config/m88k/m88k.c (m88k_select_section): Likewise.\n\t* config/mips/mips.c (mips_select_rtx_section): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_select_rtx_section): Likewise.\n\t(rs6000_elf_select_section): Likewise.\n\t* config/v850/v850.c (v850_select_section): Likewise.\n\n\t* config/1750a/1750a.h, config/i860/sysv3.h\n\t(READONLY_DATA_SECTION_ASM_OP): New.\n\tREADONLY_DATA_SECTION_ASM_OP.\n\t* config/i386/interix.c, config/i386/winnt.c\n\t(i386_pe_unique_section): Always use .rdata prefix.\n\t* config/pa/som.h (readonly_data): Always switch to read-only section.\n\t(READONLY_DATA_SECTION): Predicate on flag_pic.\n\t* config/we32k/we32k.h (READONLY_DATA_SECTION): Remove parenthesis.\n\t* doc/tm.texi (READONLY_DATA_SECTION_ASM_OP): New.\n\t(READONLY_DATA_SECTION): Update.\n\nFrom-SVN: r53593", "tree": {"sha": "2dca4d9feb84fe806bc6aea4af3df7eeedd15b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dca4d9feb84fe806bc6aea4af3df7eeedd15b0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48bc59acf17cb6141afdba04724b31cbb8f36fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48bc59acf17cb6141afdba04724b31cbb8f36fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48bc59acf17cb6141afdba04724b31cbb8f36fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48bc59acf17cb6141afdba04724b31cbb8f36fd/comments", "author": null, "committer": null, "parents": [{"sha": "e964a55607b3cd9e45a45d3331c6f163df7519f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e964a55607b3cd9e45a45d3331c6f163df7519f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e964a55607b3cd9e45a45d3331c6f163df7519f5"}], "stats": {"total": 1186, "additions": 336, "deletions": 850}, "files": [{"sha": "7deb0653a69b9627c0e865048c9617f213d268ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,3 +1,89 @@\n+2002-05-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* final.c (HAVE_READONLY_DATA_SECTION): New.\n+\t(shorten_branches): Use it instead of ifdefs.\n+\t* varasm.c (enum in_section): Add in_readonly_data.\n+\t(text_section, data_section): Tidy.\n+\t(readonly_data_section): Use READONLY_DATA_SECTION_ASM_OP if present.\n+\n+\t* config/darwin.h, config/nextstep.h, config/h8300/elf.h,\n+\tconfig/i860/paragon.h, config/m68k/dpx2.h, config/m68k/hp320.h\n+\t(READONLY_DATA_SECTION): Don't undef.\n+\n+\t* config/alpha/unicosmk.h, config/h8300/elf.h, config/i386/aix386ng.h,\n+\tconfig/i860/paragon.h, config/m68k/dpx2.h, config/m68k/hp320.h,\n+\tconfig/rs6000/lynx.h (READONLY_DATA_SECTION_ASM_OP): Undef.\n+\n+\t* config/elfos.h, config/svr3.h, config/alpha/alpha-interix.h,\n+\tconfig/alpha/elf.h, config/c4x/c4x.h, config/i386/i386-interix.h,\n+\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/i860/sysv3.h,\n+\tconfig/m88k/m88k.h, config/pa/pa64-hpux.h (USE_CONST_SECTION): Remove.\n+\n+\t* config/elfos.h, config/netware.h, config/alpha/alpha-interix.h,\n+\tconfig/alpha/elf.h, config/alpha/vms.h, config/arc/arc.h,\n+\tconfig/arm/coff.h, config/c4x/c4x.h, config/dsp16xx/dsp16xx.h,\n+\tconfig/i386/dgux.h, config/i386/i386-interix.h, config/i386/sco5.h,\n+\tconfig/ia64/hpux.h, config/m32r/m32r.h, config/m68k/tower-as.h,\n+\tconfig/m88k/m88k.h, config/mcore/mcore-pe.h, config/mips/iris6.h,\n+\tconfig/mips/mips.h, config/mmix/mmix.h, config/pa/pa64-hpux.h,\n+\tconfig/sparc/sysv4.h (READONLY_DATA_SECTION_ASM_OP): Rename from\n+\tCONST_SECTION_ASM_OP/READONLY_SECTION_ASM_OP/RDATA_SECTION_ASM_OP.\n+\n+\t* config/elfos.h, config/netware.h, config/1750a/1750a.h,\n+\tconfig/a29k/a29k.h, config/alpha/alpha-interix.h, config/alpha/alpha.h,\n+\tconfig/arm/coff.h, config/h8300/h8300.h, config/i386/aix386ng.h,\n+\tconfig/i386/i386-interix.h, config/i386/osfrose.h, config/mmix/mmix.h,\n+\tconfig/pa/pa64-hpux.h, config/sparc/litecoff.h\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Remove.\n+\n+\t* config/elfos.h, config/netware.h, config/svr3.h,\n+\tconfig/alpha/alpha-interix.h, config/alpha/alpha.h, config/alpha/elf.h,\n+\tconfig/arm/coff.h, config/c4x/c4x.h, config/dsp16xx/dsp16xx.h,\n+\tconfig/h8300/h8300.h, config/i386/i386-interix.h,\n+\tconfig/i386/osfrose.h, config/i386/svr3gas.h, config/mmix/mmix.h,\n+\tconfig/pa/pa64-hpux.h (READONLY_DATA_SECTION): Remove.\n+\n+\t* config/elfos.h, config/netware.h, config/svr3.h,\n+\tconfig/alpha/alpha-interix.h, config/alpha/alpha.h, config/alpha/elf.h,\n+\tconfig/c4x/c4x.h, config/i386/aix386ng.h, config/i386/i386-interix.h,\n+\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/mmix/mmix.h,\n+\tconfig/pa/pa64-hpux.h (CONST_SECTION_FUNCTION): Remove.\n+\n+\t* config/lynx.h, config/svr3.h, config/alpha/elf.h, config/alpha/vms.h,\n+\tconfig/c4x/c4x.h, config/dsp16xx/dsp16xx.h, config/i386/sco5.h,\n+\tconfig/i386/svr3gas.h, config/i860/sysv3.h, config/i860/sysv4.h,\n+\tconfig/ia64/sysv4.h, config/m32r/m32r.h, config/m88k/m88k.h,\n+\tconfig/mcore/mcore-elf.h, config/mcore/mcore-pe.h, config/mips/elf.h,\n+\tconfig/mips/elf64.h, config/mips/iris6.h, config/mips/linux.h,\n+\tconfig/mips/mips.h, config/mips/rtems64.h, config/mips/vxworks.h,\n+\tconfig/rs6000/sysv4.h, config/v850/v850.h\n+\t(EXTRA_SECTIONS): Remove in_const/in_rdata.\n+\t(EXTRA_SECTION_FUNCTIONS): Remove accompanying function.\n+\n+\t* config/svr3.h, config/c4x/c4x.h, config/i386/dgux.h,\n+\tconfig/i386/sco5.h, config/i386/svr3gas.h, config/ia64/aix.h,\n+\tconfig/m88k/dgux.h, config/mcore/mcore-pe.h, config/mmix/mmix.h,\n+\tconfig/sparc/sysv4.h (SELECT_RTX_SECTION): Use readonly_data_section.\n+\t* config/alpha/alpha.c (alpha_start_function): Likewise.\n+\t(alpha_write_linkage): Likewise.\n+\t* config/m32r/m32r.c (m32r_select_section): Likewise.\n+\t* config/m88k/m88k.c (m88k_select_section): Likewise.\n+\t* config/mips/mips.c (mips_select_rtx_section): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_select_rtx_section): Likewise.\n+\t(rs6000_elf_select_section): Likewise.\n+\t* config/v850/v850.c (v850_select_section): Likewise.\n+\n+\t* config/1750a/1750a.h, config/i860/sysv3.h\n+\t(READONLY_DATA_SECTION_ASM_OP): New.\n+\tREADONLY_DATA_SECTION_ASM_OP.\n+\t* config/i386/interix.c, config/i386/winnt.c\n+\t(i386_pe_unique_section): Always use .rdata prefix.\n+\t* config/pa/som.h (readonly_data): Always switch to read-only section.\n+\t(READONLY_DATA_SECTION): Predicate on flag_pic.\n+\t* config/we32k/we32k.h (READONLY_DATA_SECTION): Remove parenthesis.\n+\t* doc/tm.texi (READONLY_DATA_SECTION_ASM_OP): New.\n+\t(READONLY_DATA_SECTION): Update.\n+\n 2002-05-18  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* c-common.c (c_common_post_options): Warn if -Wformat-zero-length"}, {"sha": "162120ca76ee34042153a1d25ad42bb5b819137c", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -889,16 +889,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n #define ASM_APP_OFF \"; ASM_APP_OFF\\n\"\n \n-\n-#define EXTRA_SECTIONS  in_readonly_data\n-\n #define EXTRA_SECTION_FUNCTIONS\t\t\\\n-    extern void const_section PARAMS ((void));\t\t\t\\\n-    void const_section()\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-\tfprintf(asm_out_file,\"\\tkonst\\n\");\t\t\t\\\n-\tcurrent_section = Konst;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n     void check_section(sect)\t\t\t\t\t\\\n \t enum section sect;\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n@@ -920,9 +911,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \t}\t\t\t\t\t\t\t\\\n     }\n \n-\t\t\n-/* Function that switches to the read-only data section (optional) */\n-#define READONLY_DATA_SECTION\tconst_section\n+#define READONLY_DATA_SECTION_ASM_OP \"\\tkonst\"\n \n /* Output before program init section */\n #define INIT_SECTION_ASM_OP \"\\n\\tinit     ; init_section\\n\""}, {"sha": "1dcd51c969cc27e3f3fc5c6b96204cdad33c3173", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1333,24 +1333,6 @@ extern const char *a29k_function_name;\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* Define an extra section for read-only data, a routine to enter it, and\n-   indicate that it is for read-only data.  */\n-\n-#define EXTRA_SECTIONS\treadonly_data\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-literal_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != readonly_data)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_SECTION_ASM_OP); \\\n-      in_section = readonly_data;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-\n-#define READONLY_DATA_SECTION\tliteral_section\n-\n /* If we are referencing a function that is static or is known to be\n    in this file, make the SYMBOL_REF special.  We can use this to indicate\n    that we can branch to this function without emitting a no-op after the"}, {"sha": "bb602a56afe224456ded74fc3d4947e947cb9e72", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -69,9 +69,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Support const sections and the ctors and dtors sections for g++.  */\n \n-#define USE_CONST_SECTION\t1\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.rdata\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.rdata\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n \n@@ -91,38 +89,6 @@ Boston, MA 02111-1307, USA.  */\n #define CTORS_SECTION_ASM_OP\t\"\\t.ctors\"\n #define DTORS_SECTION_ASM_OP\t\"\\t.dtors\"\n \n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* The linker will take care of this, and having them causes problems with\n    ld -r (specifically -rU).  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1"}, {"sha": "33a6419a887a09878dfb4f83ad4f680990d8a6af", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -6617,15 +6617,14 @@ alpha_start_function (file, fnname, decl)\n     }\n \n #if TARGET_ABI_OPEN_VMS\n-  /* Ifdef'ed cause readonly_section and link_section are only\n-     available then.  */\n-  readonly_section ();\n+  /* Ifdef'ed cause link_section are only available then.  */\n+  readonly_data_section ();\n   fprintf (file, \"\\t.align 3\\n\");\n   assemble_name (file, fnname); fputs (\"..na:\\n\", file);\n   fputs (\"\\t.ascii \\\"\", file);\n   assemble_name (file, fnname);\n   fputs (\"\\\\0\\\"\\n\", file);\n-      \n+\n   link_section ();\n   fprintf (file, \"\\t.align 3\\n\");\n   fputs (\"\\t.name \", file);\n@@ -8256,7 +8255,7 @@ alpha_write_linkage (stream)\n {\n   if (alpha_links)\n     {\n-      readonly_section ();\n+      readonly_data_section ();\n       fprintf (stream, \"\\t.align 3\\n\");\n       splay_tree_foreach (alpha_links, alpha_write_one_linkage, stream);\n     }"}, {"sha": "b890bd63ce6bc21da1a1040d7f318f604e2322d0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1724,36 +1724,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* Define an extra section for read-only data, a routine to enter it, and\n-   indicate that it is for read-only data.\n-\n-   The first time we enter the readonly data section for a file, we write\n-   eight bytes of zero.  This works around a bug in DEC's assembler in\n-   some versions of OSF/1 V3.x.  */\n-\n-#define EXTRA_SECTIONS\treadonly_data\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-literal_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != readonly_data)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      static int firsttime = 1;\t\t\t\t        \\\n-\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_SECTION_ASM_OP); \\\n-      if (firsttime)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  firsttime = 0;\t\t\t\t        \\\n-\t  assemble_aligned_integer (8, const0_rtx);\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      in_section = readonly_data;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-\n-#define READONLY_DATA_SECTION\tliteral_section\n-\n /* Define this macro if references to a symbol must be treated differently\n    depending on something about the variable or function named by the symbol\n    (such as what section it is in).  */"}, {"sha": "3e8d1e06f9bb765a9cca084c31a8d8d66a62ab22", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -191,14 +191,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  ASCII_DATA_ASM_OP\n #define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n-/* Support const sections and the ctors and dtors sections for g++.  */\n-\n-#undef USE_CONST_SECTION\n-#define USE_CONST_SECTION\t1\n-\n-#undef  CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n-\n+#undef  READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n #undef  BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #undef  SBSS_SECTION_ASM_OP\n@@ -233,38 +227,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n    includes this file.  */\n \n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_sbss, in_sdata\n+#define EXTRA_SECTIONS in_sbss, in_sdata\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n extern void sbss_section\t\tPARAMS ((void));\n extern void sdata_section\t\tPARAMS ((void));\n \n-#undef  READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#undef  CONST_SECTION_FUNCTION\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\\\n-      in_section = in_const;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n #undef  SECTION_FUNCTION_TEMPLATE\n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n void FN ()\t\t\t\t\t\\"}, {"sha": "a8c8915d406f93aa53d0b791e080fa1cdebaf61e", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -347,9 +347,9 @@ do { fprintf (FILE, \"\\tbr $1,0\\n\");\t\t\t\\\n #undef DATA_SECTION_ASM_OP\n #define DATA_SECTION_ASM_OP unicosmk_data_section ()\n \n-/* There are ni read-only sections on Unicos/Mk.  */\n+/* There are no read-only sections on Unicos/Mk.  */\n \n-#undef READONLY_DATA_SECTION\n+#undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION data_section\n \n /* Define extra sections for common data and SSIBs (static subroutine"}, {"sha": "06d9c9585765c06a5a2960ea6de52a31ef9b7953", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -263,26 +263,17 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n }\n \n #define LINK_SECTION_ASM_OP \"\\t.link\"\n-#define READONLY_SECTION_ASM_OP \"\\t.rdata\"\n+#define READONLY_DATA_SECTION_ASM_OP \"\\t.rdata\"\n #define LITERALS_SECTION_ASM_OP \"\\t.literals\"\n #define CTORS_SECTION_ASM_OP \"\\t.ctors\"\n #define DTORS_SECTION_ASM_OP \"\\t.dtors\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS\tin_link, in_rdata, in_literals\n+#define EXTRA_SECTIONS\tin_link, in_literals\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n-readonly_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_SECTION_ASM_OP);\t\\\n-      in_section = in_rdata;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n link_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_link)\t\t\t\t\t\\\n@@ -301,7 +292,6 @@ literals_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-extern void readonly_section\tPARAMS ((void));\n extern void link_section\tPARAMS ((void));\n extern void literals_section\tPARAMS ((void));\n \n@@ -312,9 +302,6 @@ extern void literals_section\tPARAMS ((void));\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n   fprintf (FILE, \"\\t.quad $L%d\\n\", (VALUE))\n \n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION readonly_section\n-\n #define ASM_FILE_END(FILE) alpha_write_linkage (FILE);\n \n #undef CASE_VECTOR_MODE"}, {"sha": "d431bd4636f3e85f8dbf7a5d76824325e5ce3ac5", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1106,12 +1106,12 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n #if defined (CRT_INIT) || defined (CRT_FINI)\n #define TEXT_SECTION_ASM_OP\t\"\\t.section .text\"\n #else\n-#define TEXT_SECTION_ASM_OP\tarc_text_section /*\"\\t.section .text\"*/\n+#define TEXT_SECTION_ASM_OP\tarc_text_section\n #endif\n-#define DATA_SECTION_ASM_OP\tarc_data_section /*\"\\t.section .data\"*/\n+#define DATA_SECTION_ASM_OP\tarc_data_section\n \n-#undef CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP\tarc_rodata_section /*\"\\t.section .rodata\"*/\n+#undef  READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP\tarc_rodata_section\n \n #define BSS_SECTION_ASM_OP\t\"\\t.section .bss\"\n "}, {"sha": "d784050c4b02958c5e18f57f19b6611c7aa4b1bc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -5342,7 +5342,7 @@ get_jump_table_size (insn)\n   /* ADDR_VECs only take room if read-only data does into the text\n      section.  */\n   if (JUMP_TABLES_IN_TEXT_SECTION\n-#if !defined(READONLY_DATA_SECTION)\n+#if !defined(READONLY_DATA_SECTION) && !defined(READONLY_DATA_SECTION_ASM_OP)\n       || 1\n #endif\n       )"}, {"sha": "263e115311f08d4df7652d37844b5526b191c47a", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    For ARM with COFF object format.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2002\n    Free Software Foundation, Inc.\n    Contributed by Doug Evans (devans@cygnus.com).\n    \n@@ -76,42 +76,12 @@ Boston, MA 02111-1307, USA.  */\n    more efficient, but for Thumb it's better to put them out of band.  */\n #define JUMP_TABLES_IN_TEXT_SECTION (TARGET_ARM)\n \n-#undef  READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION\trdata_section\n-#undef  RDATA_SECTION_ASM_OP\n-#define RDATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n+#undef  READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n #undef  CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\"\\t.section .ctors,\\\"x\\\"\"\n #undef  DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP\t\"\\t.section .dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata\n-\n-#define SUBTARGET_EXTRA_SECTIONS\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS \\\n-  RDATA_SECTION_FUNCTION\t\\\n-  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-\n-#define RDATA_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n-      in_section = in_rdata;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n \f\n /* Support the ctors/dtors sections for g++.  */\n "}, {"sha": "ed2b4cb13c2f432d1fba6a661912ef902fa91750", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1673,9 +1673,7 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-#define USE_CONST_SECTION 1\n-\n-#define CONST_SECTION_ASM_OP \"\\t.sect\\t\\\".const\\\"\"\n+#define READONLY_DATA_SECTION_ASM_OP \"\\t.sect\\t\\\".const\\\"\"\n \n /* Do not use .init section so __main will be called on startup. This will\n    call __do_global_ctors and prepare for __do_global_dtors on exit.  */\n@@ -1687,11 +1685,10 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n #define FINI_SECTION_ASM_OP  \"\\t.sect\\t\\\".fini\\\"\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini\n+#define EXTRA_SECTIONS in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n@@ -1718,21 +1715,6 @@ fini_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (! USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define ASM_STABS_OP \"\\t.stabs\\t\"\n \n /* Switch into a generic section.  */\n@@ -1759,7 +1741,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) const_section()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section()\n \n \n /* Overall Framework of an Assembler File.  */"}, {"sha": "a0b17e241626e6d4c69318058dfefcadda7afaa7", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -2747,16 +2747,6 @@ extern const char *d30v_branch_cost_string;\n    Defined in svr4.h.  */\n /* #define EXTRA_SECTION_FUNCTIONS */\n \n-/* On most machines, read-only variables, constants, and jump tables are placed\n-   in the text section.  If this is not the case on your machine, this macro\n-   should be defined to be the name of a function (either `data_section' or a\n-   function defined in `EXTRA_SECTIONS') that switches to the section to be\n-   used for read-only items.\n-\n-   If these items should be placed in the text section, this macro should not\n-   be defined.  */\n-/* #define READONLY_DATA_SECTION */\n-\n /* A C statement or statements to switch to the appropriate section for output\n    of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n    RTL.  The argument MODE is redundant except in the case of a `const_int'"}, {"sha": "9d7c59039f2ecefb4676bb591df02ec08a8c6b35", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -483,7 +483,6 @@ objc_section_init ()\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n }\n \n-#undef\tREADONLY_DATA_SECTION\n #define READONLY_DATA_SECTION const_section\n \n #undef\tTARGET_ASM_SELECT_SECTION"}, {"sha": "0848bbd13c7e265d70a56c4ab5d8a1c293a041ba", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1548,8 +1548,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n \n /* Output before constants and strings */\n #define DEFAULT_CONST_SEG_NAME  \".const\"\n-#define READONLY_SECTION_ASM_OP rsect_const\n-#define READONLY_DATA_SECTION   const_section\n+#define READONLY_DATA_SECTION_ASM_OP rsect_const\n \n /* Output before writable data.  */\n #define DEFAULT_DATA_SEG_NAME \".data\"\n@@ -1561,22 +1560,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n /* We will default to using 1610 if the user doesn't\n    specify it.  */\n #define DEFAULT_CHIP_NAME \"1610\"\n-\n-/* A list of names for sections other than the standard ones, which are\n-   'in_text' and 'in_data' (and .bss if BSS_SECTION_ASM_OP is defined).  */\n-#define EXTRA_SECTIONS in_const\n-\n-#define EXTRA_SECTION_FUNCTIONS  \\\n-extern void const_section PARAMS ((void));                         \\\n-void                                                               \\\n-const_section ()                                                   \\\n-{                                                                  \\\n-    if (in_section != in_const)                                    \\\n-    {                                                              \\\n-        fprintf (asm_out_file, \"%s\\n\", READONLY_SECTION_ASM_OP);   \\\n-\tin_section = in_const;                                     \\\n-    }                                                              \\\n-}\n \f\n /* THE OVERALL FRAMEWORK OF AN ASSEMBLER FILE */\n "}, {"sha": "3cec99595eadbd5d4ac9aafc6c873034e6c9e0c8", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -216,10 +216,8 @@ Boston, MA 02111-1307, USA.  */\n #undef  ASCII_DATA_ASM_OP\n #define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n-/* Support const sections and the ctors and dtors sections for g++.  */\n-\n-#define USE_CONST_SECTION\t1\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n+/* Support a read-only data section.  */\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n@@ -230,47 +228,13 @@ Boston, MA 02111-1307, USA.  */\n #define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n-#ifdef HAVE_GAS_SUBSECTION_ORDERING\n-\n-#define ASM_SECTION_START_OP\t\"\\t.subsection\\t-1\"\n-\n /* Output assembly directive to move to the beginning of current section.  */\n-#define ASM_OUTPUT_SECTION_START(FILE)\t\\\n+#ifdef HAVE_GAS_SUBSECTION_ORDERING\n+# define ASM_SECTION_START_OP\t\"\\t.subsection\\t-1\"\n+# define ASM_OUTPUT_SECTION_START(FILE)\t\\\n   fprintf ((FILE), \"%s\\n\", ASM_SECTION_START_OP)\n-\n #endif\n \n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\\\n-    text_section ();\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\\\n-      in_section = in_const;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n      \n /* Switch into a generic section.  */"}, {"sha": "7aad2a64c8c837c7c93072cb3ff276b1b0ec90d6", "filename": "gcc/config/h8300/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fh8300%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fh8300%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Felf.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -9,7 +9,7 @@\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n #undef INIT_SECTION_ASM_OP\n-#undef READONLY_DATA_SECTION\n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef TARGET_ASM_NAMED_SECTION\n #undef TARGET_MEM_FUNCTIONS\n #undef PREFERRED_DEBUGGING_TYPE"}, {"sha": "97955a3c32f1870e3ae9bf95d15679bc8cd0bc36", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1062,35 +1062,12 @@ struct cum_arg\n /* The assembler op to get a word, 2 bytes for the H8/300, 4 for H8/300H.  */\n #define ASM_WORD_OP\t(TARGET_H8300 ? \"\\t.word\\t\" : \"\\t.long\\t\")\n \n-/* We define a readonly data section solely to remove readonly data\n-   from the instruction stream.  This can improve relaxing in two significant\n-   ways.  First it's more likely that references to readonly data\n-   can be done with a 16bit absolute address since they'll be in low\n-   memory.  Second, it's more likely that jsr instructions can be\n-   turned into bsr instructions since read-only data is not in the\n-   instruction stream.  */\n-#define READONLY_DATA_SECTION readonly_data\n-\n #define TEXT_SECTION_ASM_OP \"\\t.section .text\"\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n #define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n #define INIT_SECTION_ASM_OP \"\\t.section .init\"\n #define READONLY_DATA_SECTION_ASM_OP \"\\t.section .rodata\"\n \n-#define EXTRA_SECTIONS in_readonly_data\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-extern void readonly_data PARAMS ((void));\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-readonly_data ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_readonly_data)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_SECTION_ASM_OP);\t\\\n-      in_section = in_readonly_data;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #undef DO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\"}, {"sha": "5905867ac7ae28411d649f1c3963f32198f78eb0", "filename": "gcc/config/i386/aix386ng.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Faix386ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Faix386ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Faix386ng.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -92,6 +92,7 @@ Boston, MA 02111-1307, USA.  */\n  * cannot handle those.\n  */\n #ifndef USE_GAS\n+# undef READONLY_DATA_SECTION_ASM_OP\n # undef INIT_SECTION_ASM_OP\n # undef FINI_SECTION_ASM_OP\n # undef CTORS_SECTION_ASM_OP\n@@ -109,18 +110,6 @@ Boston, MA 02111-1307, USA.  */\n # undef DTOR_LIST_END\n # define DTOR_LIST_END\n \n-# undef CONST_SECTION_FUNCTION\n-# define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  text_section();\t\t\t\t\t\t\t\\\n-}\n-\n-# undef EXTRA_SECTION_FUNCTIONS\n-# define EXTRA_SECTION_FUNCTIONS\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n /* for collect2 */\n # define OBJECT_FORMAT_COFF\n # define MY_ISCOFF(magic) \\"}, {"sha": "998c8c307e4ceb90d8b256090d740e10402eb9b6", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80x86 running DG/ux\n-   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000, 2001\n+   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Currently maintained by gcc@dg-rtp.dg.com.\n \n@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n */\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.16 $\"\n+#define VERSION_INFO2   \"$Revision: 1.17 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -232,13 +232,13 @@ Boston, MA 02111-1307, USA.  */\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)      \\\n-{                                               \\\n-  if (flag_pic && symbolic_operand (RTX, VOIDmode)) \\\n-    data_section ();                            \\\n-  else                                          \\\n-    const_section ();                           \\\n-}\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\\\n+    data_section ();\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    readonly_data_section ();\t\t\t\t\\\n+} while (0)\n \n /* This supplements FUNCTION_ARG's definition in i386.h to check\n    TARGET_WARN_PASS_STRUCT */\n@@ -250,5 +250,5 @@ Boston, MA 02111-1307, USA.  */\n     (function_arg (&CUM, MODE, TYPE, NAMED)))\n \n /* Add .align 1 to avoid .backalign bug in assembler */\n-#undef CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP    \"\\t.section\\t.rodata\\n\\t.align 1\"\n+#undef READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP    \"\\t.section\\t.rodata\\n\\t.align 1\""}, {"sha": "ea37a1cc543ce5244380183a56150b8b2084330c", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -234,41 +234,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define EH_FRAME_IN_DATA_SECTION\n \n-#define USE_CONST_SECTION\t1\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n-\n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n \n /* The MS compilers take alignment as a number of bytes, so we do as well */\n #undef ASM_OUTPUT_ALIGN"}, {"sha": "e8caa60e6050a540d9d01a0a0c322bd78d518756", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Windows NT.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -93,15 +93,8 @@ i386_pe_unique_section (decl, reloc)\n      without a .rdata section.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     prefix = \".text$\";\n-/* else if (DECL_INITIAL (decl) == 0\n-\t   || DECL_INITIAL (decl) == error_mark_node)\n-    prefix = \".bss\"; */\n   else if (DECL_READONLY_SECTION (decl, reloc))\n-#ifdef READONLY_DATA_SECTION\n     prefix = \".rdata$\";\n-#else\n-    prefix = \".text$\";\n-#endif\n   else\n     prefix = \".data$\";\n   len = strlen (name) + strlen (prefix);"}, {"sha": "03aa95a145055528bc5905065500e496987363ab", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -464,42 +464,6 @@ do\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n \n-\n-/* On most machines, read-only variables, constants, and jump tables\n-   are placed in the text section.  If this is not the case on your\n-   machine, this macro should be defined to be the name of a function\n-   (either `data_section' or a function defined in `EXTRA_SECTIONS')\n-   that switches to the section to be used for read-only items.\n-\n-   If these items should be placed in the text section, this macro\n-   should not be defined.  */\n-\n-#if 0\n-#undef\tREADONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION()\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (in_section != in_rodata)\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    fprintf (asm_out_file, \"\\t.section \\\"rodata\\\"\\n\");\t\t\\\n-\t    in_section = in_rodata;\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      text_section ();\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-#endif\n-\n-/* A list of names for sections other than the standard two, which are\n-   `in_text' and `in_data'.  You need not define this macro on a\n-   system with no other sections (that GCC needs to use).  */\n-\n-#undef\tEXTRA_SECTIONS\n-#define\tEXTRA_SECTIONS in_rodata, in_data1\n-\n /* Given a decl node or constant node, choose the section to output it in\n    and select that section.  */\n "}, {"sha": "90aba9b9c53fce86b016b731fb8064a030abf9cf", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -77,17 +77,13 @@ Boston, MA 02111-1307, USA.  */\n #define DWARF2_UNWIND_INFO\t\\\n   ((TARGET_ELF) ? 1 : 0 )  \n \n-#undef CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP_COFF\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n-#define CONST_SECTION_ASM_OP_ELF\t\"\\t.section\\t.rodata\"\n-#define CONST_SECTION_ASM_OP\t\\\n-  ((TARGET_ELF) ? CONST_SECTION_ASM_OP_ELF : CONST_SECTION_ASM_OP_COFF)\n-\n-#undef USE_CONST_SECTION\n-#define USE_CONST_SECTION_ELF\t\t1\n-#define USE_CONST_SECTION_COFF\t\t0\n-#define USE_CONST_SECTION\t\\\n- ((TARGET_ELF) ? USE_CONST_SECTION_ELF : USE_CONST_SECTION_COFF)\n+#undef READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP_COFF\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n+#define READONLY_DATA_SECTION_ASM_OP_ELF\t\"\\t.section\\t.rodata\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\t\\\n+  ((TARGET_ELF)\t\t\t\t\t\\\n+   ? READONLY_DATA_SECTION_ASM_OP_ELF\t\t\\\n+   : READONLY_DATA_SECTION_ASM_OP_COFF)\n \n #undef INIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP_ELF\t\t\"\\t.section\\t.init\"\n@@ -354,15 +350,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-    if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\t\t\\\n-      data_section ();\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      const_section ();\t\t\t\t\t\t\t\\\n-  } else\t\t\t\t\t\t\t\t\\\n-    readonly_data_section();\t\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  if (TARGET_ELF) {\t\t\t\t\t\\\n+    if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\\\n+      data_section ();\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      readonly_data_section ();\t\t\t\t\\\n+  } else\t\t\t\t\t\t\\\n+    readonly_data_section();\t\t\t\t\\\n }\n \n #undef ASM_OUTPUT_CASE_LABEL\n@@ -458,28 +454,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ((TARGET_ELF) ? DWARF2_DEBUG: SDB_DEBUG)\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini\n+#define EXTRA_SECTIONS in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n-#undef CONST_SECTION_FUNCTION\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #undef FINI_SECTION_FUNCTION\n #define FINI_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\"}, {"sha": "f47a90627ece605bb4692f2b77218497774a5c0e", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -83,13 +83,8 @@ Boston, MA 02111-1307, USA.  */\n    this file should be rewritten to include config/svr3.h\n    and override what isn't right.  */\n \n-/* Support const sections and the ctors and dtors sections for g++.  */\n-\n-#define USE_CONST_SECTION\t0\n-\n #define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n #define FINI_SECTION_ASM_OP     \"\\t.section .fini,\\\"x\\\"\"\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n #define CTORS_SECTION_ASM_OP\tINIT_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n \n@@ -113,14 +108,11 @@ do {\t\t\t\t\t\t\t\t\\\n     (*--p) ();\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* Add extra sections .rodata, .init and .fini.  */\n-\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini\n+#define EXTRA_SECTIONS in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n@@ -146,21 +138,6 @@ fini_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor\n \n /* A C statement or statements to switch to the appropriate\n@@ -169,4 +146,4 @@ const_section ()\t\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section()\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) readonly_data_section()"}, {"sha": "87f3c70849c3606c5a1dd36d2237fcefec6f792f", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -445,15 +445,8 @@ i386_pe_unique_section (decl, reloc)\n      without a .rdata section.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     prefix = \".text$\";\n-/* else if (DECL_INITIAL (decl) == 0\n-\t   || DECL_INITIAL (decl) == error_mark_node)\n-    prefix = \".bss\";  */\n   else if (DECL_READONLY_SECTION (decl, reloc))\n-#ifdef READONLY_DATA_SECTION\n     prefix = \".rdata$\";\n-#else\n-    prefix = \".text$\";\n-#endif\n   else\n     prefix = \".data$\";\n   len = strlen (name) + strlen (prefix);"}, {"sha": "cb2ae642e73d8758943c484122c5dc8d6e2f2c7a", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -176,14 +176,13 @@ Boston, MA 02111-1307, USA.  */\n  */\n #undef INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP\n-#undef CONST_SECTION_ASM_OP\n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n #undef DO_GLOBAL_CTORS_BODY\n #undef ASM_OUTPUT_DESTRUCTOR\n #undef TARGET_ASM_SELECT_SECTION\n #undef SELECT_RTX_SECTION\n-#undef READONLY_DATA_SECTION\n \n #define\tBSS_SECTION_ASM_OP\t\"\\t.bss\"\t/* XXX */\n #undef EXTRA_SECTIONS"}, {"sha": "f361a0108b55e94c405f6a840a50267a55daaa2f", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running System V.3\n-   Copyright (C) 1991, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -134,6 +134,7 @@ extern const char *current_function_original_name;\n   while (0)\n \n \n+#define READONLY_DATA_SECTION_ASM_OP \"\\t.section\\t.rodata, \\\"x\\\"\"\n #undef CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #undef DTORS_SECTION_ASM_OP\n@@ -145,11 +146,10 @@ extern const char *current_function_original_name;\n #define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_tdesc\n+#define EXTRA_SECTIONS in_tdesc\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TDESC_SECTION_FUNCTION\n \n #define TDESC_SECTION_FUNCTION\t\t\t\t\t\t\\\n@@ -162,7 +162,3 @@ tdesc_section ()\t\t\t\t\t\t\t\\\n       in_section = in_tdesc;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n-\n-/* Enable the `const' section that svr3.h defines how to use.  */\n-#undef USE_CONST_SECTION\n-#define USE_CONST_SECTION\t1"}, {"sha": "753807fe123ca3f200a931206530e68eae3528c6", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80860 running System V.4\n-   Copyright (C) 1991, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -124,11 +124,10 @@ extern const char *current_function_original_name;\n #define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_tdesc\n+#define EXTRA_SECTIONS in_tdesc\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TDESC_SECTION_FUNCTION\n \n #define TDESC_SECTION_FUNCTION\t\t\t\t\t\t\\"}, {"sha": "700950fc3caf2e69da61176e2f6b9c45316a88ec", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -139,15 +139,15 @@ do {\t\t\t\t\t\t\t\\\n \n extern unsigned int ia64_section_threshold;\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\t\\\n-      && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\t\\\n-    sdata_section ();\t\t\t\t\t\t\t\\\n-  else if (symbolic_operand ((RTX), (MODE)))\t\t                \\\n-    data_section ();\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    const_section ();\t\t\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\\\n+      && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\\\n+    sdata_section ();\t\t\t\t\t\t\\\n+  else if (symbolic_operand ((RTX), (MODE)))\t\t\t\\\n+    data_section ();\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    readonly_data_section ();\t\t\t\t\t\\\n }\n \n /* Override ia64/sysv4.h setting with that used by AIX5.  */"}, {"sha": "afc799903179aab976f88f6d0a57d0586b48958e", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Steve Ellcey <sje@cup.hp.com> and\n                   Reva Cuthbertson <reva@cup.hp.com>\n \n@@ -85,8 +85,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define JMP_BUF_SIZE  (8 * 76)\n \n-#undef CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP    \"\\t.section\\t.rodata,\\t\\\"a\\\",\\t\\\"progbits\\\"\"\n+#undef READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP \\\n+  \"\\t.section\\t.rodata,\\t\\\"a\\\",\\t\\\"progbits\\\"\"\n \n #undef BITS_BIG_ENDIAN\n #define BITS_BIG_ENDIAN 1"}, {"sha": "881b23da45307332400d742265e176372f8b2d7a", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -156,11 +156,10 @@ extern unsigned int ia64_section_threshold;\n }\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_sdata, in_sbss\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SBSS_SECTION_FUNCTION\n "}, {"sha": "193935ee2283c91a2d208aeaf998094e10a212e0", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,6 @@\n /* Target independent definitions for LynxOS.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1999, 2000, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -128,11 +129,10 @@ do {\t\t\t\t\t\t\t\t\\\n #undef INIT_SECTION_ASM_OP\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_fini\n+#define EXTRA_SECTIONS in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n #undef CTORS_SECTION_ASM_OP"}, {"sha": "a1f3c9115e03688da843127a29d4ac793b69bae9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -331,7 +331,7 @@ m32r_select_section (decl, reloc, align)\n   if (TREE_CODE (decl) == STRING_CST)\n     {\n       if (! flag_writable_strings)\n-\tconst_section ();\n+\treadonly_data_section ();\n       else\n \tdata_section ();\n     }\n@@ -347,10 +347,10 @@ m32r_select_section (decl, reloc, align)\n \t\t   && !TREE_CONSTANT (DECL_INITIAL (decl))))\n \tdata_section ();\n       else\n-\tconst_section ();\n+\treadonly_data_section ();\n     }\n   else\n-    const_section ();\n+    readonly_data_section ();\n }\n \n /* Encode section information of DECL, which is either a VAR_DECL,"}, {"sha": "c3b00326e29ccaf5ba8a63fa83e4eaadd52f3e57", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1526,22 +1526,21 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SDATA_SECTION_ASM_OP\t\"\\t.section .sdata\"\n #define SBSS_SECTION_ASM_OP\t\"\\t.section .sbss\"\n /* This one is for svr4.h.  */\n-#undef  CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP\t\"\\t.section .rodata\"\n+#undef  READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section .rodata\"\n \n /* A list of names for sections other than the standard two, which are\n    `in_text' and `in_data'.  You need not define this macro\n    on a system with no other sections (that GCC needs to use).  */\n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_const\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n \n /* One or more functions to be defined in \"varasm.c\".  These\n    functions should do jobs analogous to those of `text_section' and\n    `data_section', for your additional sections.  Do not define this\n    macro if you do not define `EXTRA_SECTIONS'.  */\n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\\\n-  CONST_SECTION_FUNCTION\t\\\n   SDATA_SECTION_FUNCTION\t\\\n   SBSS_SECTION_FUNCTION\n "}, {"sha": "3595eebcdecfe573f193ca5e56d885a23c676cd6", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -47,8 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #undef SELECT_RTX_SECTION\n #undef EXTRA_SECTIONS\n #undef EXTRA_SECTION_FUNCTIONS\n-#undef CONST_SECTION_ASM_OP\n-#undef READONLY_DATA_SECTION\n+#undef READONLY_DATA_SECTION_ASM_OP\n \n #define DPX2\n "}, {"sha": "7a18c52256a80ef0136af81c1d65367102774750", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  HP-UX 68000/68020 version.\n-   Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1999, 2000\n+   Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1999, 2000, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -164,7 +164,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #undef TEXT_SECTION_ASM_OP\n #undef DATA_SECTION_ASM_OP\n-#undef READONLY_DATA_SECTION\n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #undef ASM_OUTPUT_ALIGN"}, {"sha": "cd457cd1d25bb645451474116d17117091448bd3", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    For NCR Tower 32/4x0 and 32/6x0 running System V Release 3.\n-   Copyright (C) 1990, 1993, 1994, 1996, 1997, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1993, 1994, 1996, 1997, 2000, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Robert Andersson (ra@intsys.no), International Systems,\n    Oslo, Norway.\n \n@@ -543,8 +544,8 @@ do { fprintf (asm_out_file, \"\\ttag\\t\");\t\\\n #define INIT_SECTION_ASM_OP\t\"\\tsection\\t~init\"\n #undef FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP\t\"\\tsection\\t~fini\"\n-#undef CONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP\t\"\\tsection\\t~rodata\"\n+#undef READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\tsection\\t~rodata\"\n \n #define CTOR_LIST_BEGIN\t\t\t\t\\\n   asm (INIT_SECTION_ASM_OP);\t\t\t\\"}, {"sha": "7c12b7c7a47dc8ca0085487d7a5a9dc3e7461efc", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola m88100 running DG/UX.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2001\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@mcc.com)\n    Currently maintained by (gcc@dg-rtp.dg.com)\n@@ -293,10 +293,10 @@ func_ptr __DTOR_END__[1] = { (func_ptr) (-1) }\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)      \\\n-{                                               \\\n-  if (flag_pic && symbolic_operand ((RTX), (MODE))) \\\n-    data_section ();                            \\\n-  else                                          \\\n-    const_section ();                           \\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\\\n+    data_section ();\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    readonly_data_section ();\t\t\t\t\\\n }"}, {"sha": "8e2c5c0832eb81fad776062faba338b2c64af9e6", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -3329,7 +3329,7 @@ m88k_select_section (decl, reloc, align)\n   if (TREE_CODE (decl) == STRING_CST)\n     {\n       if (! flag_writable_strings)\n-\tconst_section ();\n+\treadonly_data_section ();\n       else if (TREE_STRING_LENGTH (decl) <= m88k_gp_threshold)\n \tsdata_section ();\n       else\n@@ -3346,10 +3346,10 @@ m88k_select_section (decl, reloc, align)\n \t\t   && !TREE_CONSTANT (DECL_INITIAL (decl))))\n \tdata_section ();\n       else\n-\tconst_section ();\n+\treadonly_data_section ();\n     }\n   else\n-    const_section ();\n+    readonly_data_section ();\n }\n \n /* Adjust the cost of INSN based on the relationship between INSN that"}, {"sha": "0edec9faf4fa89b524eb09d4810b172898b371a6", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1619,7 +1619,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Allow pseudo-ops to be overridden.  Override these in svr[34].h.  */\n #undef\tASCII_DATA_ASM_OP\n-#undef\tCONST_SECTION_ASM_OP\n+#undef\tREADONLY_DATA_SECTION_ASM_OP\n #undef\tCTORS_SECTION_ASM_OP\n #undef\tDTORS_SECTION_ASM_OP\n #undef  TARGET_ASM_NAMED_SECTION\n@@ -1638,7 +1638,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define DATA_SECTION_ASM_OP\t\"\\tdata\"\n \n /* Other sections.  */\n-#define CONST_SECTION_ASM_OP (TARGET_SVR4\t\t\t\\\n+#define READONLY_DATA_SECTION_ASM_OP (TARGET_SVR4\t\t\\\n \t\t\t      ? \"\\tsection\\t .rodata,\\\"a\\\"\"\t\\\n \t\t\t      : \"\\tsection\\t .rodata,\\\"x\\\"\")\n #define TDESC_SECTION_ASM_OP (TARGET_SVR4\t\t\t\\\n@@ -2295,32 +2295,24 @@ do {\t\t\t\t\t\t\t\t\t \\\n    and so follows DECLARE_ASM_NAME.  Note that strings go in text\n    rather than const.  Override svr[34].h.  */\n \n-#undef\tUSE_CONST_SECTION\n #undef\tEXTRA_SECTIONS\n \n-#define USE_CONST_SECTION DECLARE_ASM_NAME\n-\n #if defined(USING_SVR4_H)\n \n-#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata\n+#define EXTRA_SECTIONS in_tdesc, in_sdata\n #define INIT_SECTION_FUNCTION\n #define FINI_SECTION_FUNCTION\n \n #else\n #if defined(USING_SVR3_H)\n \n-#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata, in_init, in_fini\n+#define EXTRA_SECTIONS in_tdesc, in_sdata, in_init, in_fini\n \n #else /* luna or other not based on svr[34].h.  */\n \n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef INIT_SECTION_ASM_OP\n-#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  text_section();\t\t\t\t\t\t\t\\\n-}\n+#define EXTRA_SECTIONS in_tdesc, in_sdata\n #define INIT_SECTION_FUNCTION\n #define FINI_SECTION_FUNCTION\n \n@@ -2329,8 +2321,6 @@ const_section ()\t\t\t\t\t\t\t\\\n \n #undef\tEXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n tdesc_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "2cdbae01063762701ae5f34101b00beff4f7e6b4", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -42,13 +42,10 @@ Boston, MA 02111-1307, USA.  */\n \n #define EXPORTS_SECTION_ASM_OP\t\"\\t.section .exports\"\n \n-#define SUBTARGET_EXTRA_SECTIONS in_const, in_exports\n+#define SUBTARGET_EXTRA_SECTIONS in_exports\n \n #define SUBTARGET_EXTRA_SECTION_FUNCTIONS\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\\\n-  EXPORT_SECTION_FUNCTION\t\t\t\\\n-\n-/* CONST_SECTION_FUNCTION is defined svr4.h.  */\n+  EXPORT_SECTION_FUNCTION\n \n #define EXPORT_SECTION_FUNCTION \t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n@@ -62,8 +59,7 @@ exports_section ()\t\t\t\t\t\t\\\n }\n \n #define SUBTARGET_SWITCH_SECTIONS\t\t\\\n-  case in_exports: exports_section (); break;\t\\\n-  case in_const: const_section (); break;\n+  case in_exports: exports_section (); break;\n \n \n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\"}, {"sha": "c5e8e45300e957bfe08348f0ddf0ca0eb02b1adf", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -43,17 +43,15 @@ Boston, MA 02111-1307, USA.  */\n    and readonly data. This gets them out of default places.  */\n \n #define SUBTARGET_SWITCH_SECTIONS \t\t\\\n-  case in_drectve: drectve_section (); break;\t\\\n-  case in_rdata:   rdata_section (); break;\n+  case in_drectve: drectve_section (); break;\n \n #define DRECTVE_SECTION_ASM_OP\t\"\\t.section .drectve\"\n-#define RDATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n \n-#define SUBTARGET_EXTRA_SECTIONS in_drectve, in_rdata\n+#define SUBTARGET_EXTRA_SECTIONS in_drectve\n \n #define SUBTARGET_EXTRA_SECTION_FUNCTIONS \\\n-  DRECTVE_SECTION_FUNCTION\t\t  \\\n-  RDATA_SECTION_FUNCTION\n+  DRECTVE_SECTION_FUNCTION\n \n #define DRECTVE_SECTION_FUNCTION \t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n@@ -65,28 +63,13 @@ drectve_section ()\t\t\t\t\t\t\\\n       in_section = in_drectve;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n-\n-#define RDATA_SECTION_FUNCTION \t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n-      in_section = in_rdata;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#undef  READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION() rdata_section ()\n-\n /* A C statement or statements to switch to the appropriate\n    section for output of RTX in mode MODE.  RTX is some kind\n    of constant in RTL.  The argument MODE is redundant except\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) rdata_section ()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section ()\n \n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "de870c09a898b1635b142a4a337e61a3ca7b0a63", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -225,13 +225,12 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_rdata\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n void FN ()                                                            \\"}, {"sha": "8d6bf4a675249c2641586b6cca9cda5d77935c5b", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -215,12 +215,11 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata\n+#define EXTRA_SECTIONS in_sdata\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n void FN ()                                                            \\"}, {"sha": "ff03d35aeaae23ca6c97ed1c649d95abea014cb6", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.  Iris version 6.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -249,23 +250,26 @@ Boston, MA 02111-1307, USA.  */\n    do_global_* functions instead of running collect2.  */\n \n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n-#define CONST_SECTION_ASM_OP_32\t\"\\t.rdata\"\n-#define CONST_SECTION_ASM_OP_64\t\"\\t.section\\t.rodata\"\n+\n+#define READONLY_DATA_SECTION_ASM_OP_32\t\"\\t.rdata\"\n+#define READONLY_DATA_SECTION_ASM_OP_64\t\"\\t.section\\t.rodata\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\t\\\n+  (mips_abi != ABI_32 && mips_abi != ABI_O64\t\\\n+   ? READONLY_DATA_SECTION_ASM_OP_64\t\t\\\n+   : READONLY_DATA_SECTION_ASM_OP_32)\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n    should override this definition in the target-specific file which\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata, in_const\n+#define EXTRA_SECTIONS in_sdata\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n-/* ??? rdata_section is now same as svr4 const_section.  */\n-\n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -278,19 +282,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (mips_abi != ABI_32 && mips_abi != ABI_O64)\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP_64);\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP_32);\t\\\n-      in_section = in_rdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n const char *\t\t\t\t\t\t\t\t\\\n current_section_name ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -301,8 +292,7 @@ current_section_name ()\t\t\t\t\t\t\t\\\n     case in_data:\treturn \".data\";\t\t\t\t\t\\\n     case in_sdata:\treturn \".sdata\";\t\t\t\t\\\n     case in_bss:\treturn \".bss\";\t\t\t\t\t\\\n-    case in_rdata:\t\t\t\t\t\t\t\\\n-    case in_const:\t\t\t\t\t\t\t\\\n+    case in_readonly_data:\t\t\t\t\t\t\\\n       if (mips_abi != ABI_32 && mips_abi != ABI_O64)\t\t\t\\\n \treturn \".rodata\";\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n@@ -323,8 +313,7 @@ current_section_flags ()\t\t\t\t\t\t\\\n     case in_data:\treturn SECTION_WRITE;\t\t\t\t\\\n     case in_sdata:\treturn SECTION_WRITE | SECTION_SMALL;\t\t\\\n     case in_bss:\treturn SECTION_WRITE | SECTION_BSS;\t\t\\\n-    case in_rdata:\t\t\t\t\t\t\t\\\n-    case in_const:\treturn 0;\t\t\t\t\t\\\n+    case in_readonly_data: return 0;\t\t\t\t\t\\\n     case in_named:\treturn get_named_section_flags (in_named_name);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   abort ();\t\t\t\t\t\t\t\t\\"}, {"sha": "701e896aa12c6dda5ffb38339daf52990ac35760", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -93,13 +93,12 @@ do {\t\t\t\t\t\t\t\t\\\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_rdata\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\t\t\\\n void FN ()\t\t\t\t\t\t\t\\"}, {"sha": "f551d62788983636583d61b79fca49edb27345ad", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -7913,7 +7913,7 @@ mips_select_rtx_section (mode, x)\n     {\n       /* For embedded applications, always put constants in read-only data,\n \t in order to reduce RAM usage.  */\n-      READONLY_DATA_SECTION ();\n+      readonly_data_section ();\n     }\n   else\n     {\n@@ -7932,7 +7932,7 @@ mips_select_rtx_section (mode, x)\n \t   read-only).  */\n \tdata_section ();\n       else\n-\tREADONLY_DATA_SECTION ();\n+\treadonly_data_section ();\n     }\n }\n \n@@ -7979,7 +7979,7 @@ mips_select_section (decl, reloc, align)\n \t       && (TREE_CODE (decl) != STRING_CST\n \t\t   || !flag_writable_strings)))\n \t  && ! (flag_pic && reloc))\n-\tREADONLY_DATA_SECTION ();\n+\treadonly_data_section ();\n       else if (size > 0 && size <= mips_section_threshold)\n \tSMALL_DATA_SECTION ();\n       else\n@@ -8002,7 +8002,7 @@ mips_select_section (decl, reloc, align)\n \t\t    && (TREE_CODE (decl) != STRING_CST\n \t\t\t|| !flag_writable_strings)))\n \t       && ! (flag_pic && reloc))\n-\tREADONLY_DATA_SECTION ();\n+\treadonly_data_section ();\n       else\n \tdata_section ();\n     }"}, {"sha": "3dea475d676f6ca0a9973f8fbd22dad9855ec84a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -169,7 +169,6 @@ extern struct rtx_def *mips_load_reg4;\t/* 4th reg to check for load delay */\n extern int mips_string_length;\t\t/* length of strings for mips16 */\n \n /* Functions to change what output section we are using.  */\n-extern void\t\trdata_section PARAMS ((void));\n extern void\t\tsdata_section PARAMS ((void));\n extern void\t\tsbss_section PARAMS ((void));\n \n@@ -4534,7 +4533,7 @@ while (0)\n \tif (TREE_PUBLIC (DECL) && DECL_NAME (DECL))\t\t\t\\\n \t  ASM_GLOBALIZE_LABEL (STREAM, NAME);\t\t\t\t\\\n \t    \t\t\t\t\t\t\t\t\\\n-\tREADONLY_DATA_SECTION ();\t\t\t\t\t\\\n+\treadonly_data_section ();\t\t\t\t\t\\\n \tASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n \tmips_declare_object (STREAM, NAME, \"\", \":\\n\\t.space\\t%u\\n\",\t\\\n \t    (SIZE));\t\t\t\t\t\t\t\\\n@@ -4676,7 +4675,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   const char *p = STRING;\t\t\t\t\t\t\\\n   int size = strlen (p) + 1;\t\t\t\t\t\t\\\n-  rdata_section ();\t\t\t\t\t\t\t\\\n+  readonly_data_section ();\t\t\t\t\t\t\\\n   assemble_string (p, size);\t\t\t\t\t\t\\\n }\n \f\n@@ -4689,15 +4688,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TEXT_SECTION_ASM_OP\t\"\\t.text\"\t/* instructions */\n #define DATA_SECTION_ASM_OP\t\"\\t.data\"\t/* large data */\n #define SDATA_SECTION_ASM_OP\t\"\\t.sdata\"\t/* small data */\n-#define RDATA_SECTION_ASM_OP\t\"\\t.rdata\"\t/* read-only data */\n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION\trdata_section\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.rdata\"\t/* read-only data */\n #define SMALL_DATA_SECTION\tsdata_section\n \n /* What other sections we support other than the normal .data/.text.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata\n+#define EXTRA_SECTIONS in_sdata\n \n /* Define the additional functions to select our additional sections.  */\n \n@@ -4719,16 +4716,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n       in_section = in_sdata;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_rdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n }\n \n /* Given a decl node or constant node, choose the section to output it in"}, {"sha": "c4e4f4bc13f460b4ba2bb4e6517685d3287697b6", "filename": "gcc/config/mips/rtems64.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Frtems64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Frtems64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems64.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -26,12 +26,11 @@ Boston, MA 02111-1307, USA.  */\n    -D__rtems__ -Asystem=rtems\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata\n+#define EXTRA_SECTIONS in_sdata\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC"}, {"sha": "67838e201fdc31bd5d6ec69f4f40a3c9963e91dc", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -18,13 +18,12 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata, in_sbss\n+#define EXTRA_SECTIONS in_sdata, in_sbss\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n \n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC"}, {"sha": "fdb60ccbe3dde328e9ecfde0f541519ef8331ea8", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -905,29 +905,10 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n #define DATA_SECTION_ASM_OP \\\n  mmix_data_section_asm_op ()\n \n-/* Stuff copied from elfos.h.  */\n-#define EXTRA_SECTIONS in_const\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\\\n-      in_section = in_const;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) const_section ()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) readonly_data_section ()\n \n #define ENCODE_SECTION_INFO(DECL, FIRST) \\\n  mmix_encode_section_info (DECL, FIRST)"}, {"sha": "90e85aac1d5daebb11413197f6b2ddd5b896d115", "filename": "gcc/config/netware.h", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetware.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -61,36 +61,9 @@ Boston, MA 02111-1307, USA.  */\n #undef\tHAS_INIT_SECTION\n #undef\tINIT_SECTION_ASM_OP\n \n-#undef\tREADONLY_DATA_SECTION\n-#define\tREADONLY_DATA_SECTION\tconst_section \n-\n-#undef\tCONST_SECTION_ASM_OP\n-#define CONST_SECTION_ASM_OP    \".section\\t.rodata\"\n+#undef\tREADONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP    \".section\\t.rodata\"\n #undef\tCTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n #undef\tDTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef\tEXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-#undef\tCONST_SECTION_FUNCTION\n-#define CONST_SECTION_FUNCTION                                          \\\n-void                                                                    \\\n-const_section ()                                                        \\\n-{                                                                       \\\n-  if (in_section != in_const)                                      \t\\\n-    {                                                                   \\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);             \\\n-      in_section = in_const;                                            \\\n-    }                                                                   \\\n-}"}, {"sha": "1f3c43723269a5b5dd99cfbf1d431a27b5d1cafb", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -439,7 +439,6 @@ objc_section_init ()\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n }\n \n-#undef\tREADONLY_DATA_SECTION\n #define READONLY_DATA_SECTION const_section\n \n #undef\tTARGET_ASM_SELECT_SECTION"}, {"sha": "047ca6f8d330647e94b792412b9ad5a0d13e9bff", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -95,17 +95,7 @@ do {  \\\n    would like to simply include svr4.h instead of copying all these\n    definitions.  */\n \n-/* Support const sections and the ctors and dtors sections for g++.\n-   Note that there appears to be two different ways to support const\n-   sections at the moment.  You can either #define the symbol\n-   READONLY_DATA_SECTION (giving it some code which switches to the\n-   readonly data section) or else you can #define the symbols\n-   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n-   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n-\n-#define USE_CONST_SECTION\t1\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n+#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n@@ -135,38 +125,6 @@ do {  \\\n \t\t\t  %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\"\n #endif\n \n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n-\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n "}, {"sha": "062fff756f700d7d45356d46e3bead3bb7adae41", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -250,7 +250,34 @@ do {  \\\n /* Supposedly the assembler rejects the command if there is no tab!  */\n #define READONLY_DATA_ASM_OP \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $LIT$\\n\"\n \n-#define READONLY_DATA_SECTION readonly_data\n+#define EXTRA_SECTIONS in_readonly_data\n+\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+extern void readonly_data PARAMS ((void));\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+readonly_data ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_readonly_data)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      in_section = in_readonly_data;\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n+   which reference data within the $TEXT$ space (for example constant\n+   strings in the $LIT$ subspace).\n+\n+   The assemblers (GAS and HP as) both have problems with handling\n+   the difference of two symbols which is the other correct way to\n+   reference constant data during PIC code generation.\n+\n+   So, there's no way to reference constant data which is in the\n+   $TEXT$ space during PIC generation.  Instead place all constant\n+   data into the $PRIVATE$ subspace (this reduces sharing, but it\n+   works correctly).  */\n+\n+#define READONLY_DATA_SECTION (flag_pic ? data_section : readonly_data)\n \n /* Output before writable data.  */\n \n@@ -268,38 +295,6 @@ do {  \\\n    So, we force exception information into the data section.  */\n #define TARGET_ASM_EXCEPTION_SECTION data_section\n \n-/* Define the .bss section for ASM_OUTPUT_LOCAL to use.  */\n-\n-#define EXTRA_SECTIONS in_readonly_data\n-\n-/* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n-   which reference data within the $TEXT$ space (for example constant\n-   strings in the $LIT$ subspace).\n-\n-   The assemblers (GAS and HP as) both have problems with handling\n-   the difference of two symbols which is the other correct way to\n-   reference constant data during PIC code generation.\n-\n-   So, there's no way to reference constant data which is in the\n-   $TEXT$ space during PIC generation.  Instead place all constant\n-   data into the $PRIVATE$ subspace (this reduces sharing, but it\n-   works correctly).  */\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-extern void readonly_data PARAMS ((void));\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-readonly_data ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_readonly_data)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (flag_pic)\t\t\t\t\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", DATA_SECTION_ASM_OP);\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n-      in_section = in_readonly_data;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.\n "}, {"sha": "87058b232eb82a3c44fb2e8dbccbaa75c16b048b", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_START\n #undef EXTRA_SECTIONS\n #undef READONLY_DATA_SECTION\n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef EXTRA_SECTION_FUNCTIONS\n #undef SELECT_RTX_SECTION\n #undef TARGET_ASM_SELECT_SECTION"}, {"sha": "5bca89be604ef12bee3e5c7ceb7ac73442bfb6bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -10952,7 +10952,7 @@ rs6000_select_rtx_section (mode, x)\n \t       || GET_CODE (x) == CONST))\n     data_section ();\n   else\n-    const_section ();\n+    readonly_data_section ();\n }\n \n /* A C statement or statements to switch to the appropriate\n@@ -10970,7 +10970,7 @@ rs6000_elf_select_section (decl, reloc, align)\n   int needs_sdata;\n   int readonly;\n   static void (* const sec_funcs[4]) PARAMS ((void)) = {\n-    &const_section,\n+    &readonly_data_section,\n     &sdata2_section,\n     &data_section,\n     &sdata_section"}, {"sha": "06a5bf68f3e12866e08967070c6512e0f4647474", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -431,12 +431,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Besides the usual ELF sections, we need a toc section.  */\n /* Override elfos.h definition.  */\n #undef\tEXTRA_SECTIONS\n-#define\tEXTRA_SECTIONS in_const, in_toc, in_sdata, in_sdata2, in_sbss, in_init, in_fini\n+#define\tEXTRA_SECTIONS in_toc, in_sdata, in_sdata2, in_sbss, in_init, in_fini\n \n /* Override elfos.h definition.  */\n #undef\tEXTRA_SECTION_FUNCTIONS\n #define\tEXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TOC_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n   SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SDATA2_SECTION_FUNCTION\t\t\t\t\t\t\\"}, {"sha": "91808f5eda74843f5436c37bde853561ea57bc23", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SPARClite w/o FPU, COFF.\n-   Copyright (C) 1994, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 2000, 2002 Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com).\n \n This file is part of GNU CC.\n@@ -32,18 +32,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef INIT_SECTION_ASM_OP\n \n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\n-\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n "}, {"sha": "a5242bd8dd1b2a440ff3dd82b1ef57b959e102c7", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Sparc running System V.4\n-   Copyright (C) 1991, 1992, 1995, 1996, 1997, 1998, 2000\n+   Copyright (C) 1991, 1992, 1995, 1996, 1997, 1998, 2000, 2002\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP\n-#undef CONST_SECTION_ASM_OP\n+#undef READONLY_DATA_SECTION_ASM_OP\n #undef TYPE_OPERAND_FMT\n #undef PUSHSECTION_FORMAT\n #undef STRING_ASM_OP\n@@ -70,12 +70,12 @@ Boston, MA 02111-1307, USA.  */\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n-{\t\t\t\t\t\t\\\n-  if (flag_pic && symbolic_operand ((RTX), (MODE))) \\\n-    data_section ();\t\t\t\t\\\n-  else\t\t\t\t\t\t\\\n-    const_section ();\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\\\n+    data_section ();\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    readonly_data_section ();\t\t\t\t\\\n }\n \n /* Define the names of various pseudo-op used by the Sparc/svr4 assembler.\n@@ -143,7 +143,7 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n #define TEXT_SECTION_ASM_OP\t\"\\t.section\\t\\\".text\\\"\"\n #define DATA_SECTION_ASM_OP\t\"\\t.section\\t\\\".data\\\"\"\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t\\\".bss\\\"\"\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t\\\".rodata\\\"\"\n+#define READONLY_DATA_SECTION_ASM_OP \"\\t.section\\t\\\".rodata\\\"\"\n #define INIT_SECTION_ASM_OP\t\"\\t.section\\t\\\".init\\\"\"\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t\\\".fini\\\"\"\n "}, {"sha": "9518f5fd002946b849b03aba6e58868691cb9944", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -2535,16 +2535,6 @@ do {\t\t\t\t\t\t\t\\\n    Defined in svr4.h.  */\n /* #define EXTRA_SECTION_FUNCTIONS */\n \n-/* On most machines, read-only variables, constants, and jump tables are placed\n-   in the text section.  If this is not the case on your machine, this macro\n-   should be defined to be the name of a function (either `data_section' or a\n-   function defined in `EXTRA_SECTIONS') that switches to the section to be\n-   used for read-only items.\n-\n-   If these items should be placed in the text section, this macro should not\n-   be defined.  */\n-/* #define READONLY_DATA_SECTION */\n-\n /* A C statement or statements to switch to the appropriate section for output\n    of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n    RTL.  The argument MODE is redundant except in the case of a `const_int'"}, {"sha": "9a90c6f25a4c5507c5dfb2e0767e79b2d34a6ae1", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -199,11 +199,8 @@ Boston, MA 02111-1307, USA.\n \n    Define TARGET_ASM_CONSTRUCTOR to push the address of the constructor.  */\n \n-#define USE_CONST_SECTION\t0\n-\n #define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n #define FINI_SECTION_ASM_OP     \"\\t.section .fini,\\\"x\\\"\"\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n #define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n \n /* CTOR_LIST_BEGIN and CTOR_LIST_END are machine-dependent\n@@ -234,14 +231,11 @@ do {\t\t\t\t\t\t\t\t\\\n \n #endif /* STACK_GROWS_DOWNWARD */\n \n-/* Add extra sections .rodata, .init and .fini.  */\n-\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini\n+#define EXTRA_SECTIONS in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n@@ -267,26 +261,11 @@ fini_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* A C statement or statements to switch to the appropriate\n    section for output of RTX in mode MODE.  RTX is some kind\n    of constant in RTL.  The argument MODE is redundant except\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section()\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) readonly_data_section()"}, {"sha": "72129d3868d73d11c82b535959f4d85fecf19206", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -2890,7 +2890,7 @@ v850_select_section (exp, reloc, align)\n \n         default:\n           if (is_const)\n-\t    const_section ();\n+\t    readonly_data_section ();\n \t  else\n \t    data_section ();\n \t  break;\n@@ -2899,10 +2899,10 @@ v850_select_section (exp, reloc, align)\n   else if (TREE_CODE (exp) == STRING_CST)\n     {\n       if (! flag_writable_strings)\n-\tconst_section ();\n+\treadonly_data_section ();\n       else\n \tdata_section ();\n     }\n   else\n-    const_section ();\n+    readonly_data_section ();\n }"}, {"sha": "becef7cc7bb001171a50ca1e8a7b11562f789231", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -1021,7 +1021,7 @@ typedef enum\n    `in_text' and `in_data'.  You need not define this macro on a\n    system with no other sections (that GCC needs to use).  */\n #undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_tdata, in_sdata, in_zdata, in_const, \\\n+#define EXTRA_SECTIONS in_tdata, in_sdata, in_zdata, \\\n  in_rozdata, in_rosdata, in_sbss, in_zbss, in_zcommon, in_scommon\n \n /* One or more functions to be defined in `varasm.c'.  These\n@@ -1032,8 +1032,6 @@ typedef enum\n \n /* This could be done a lot more cleanly using ANSI C ... */\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-CONST_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n sdata_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "e918ac0cd15fc8b40f6b534963040caae1e6bd51", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -672,12 +672,11 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* Read-only data goes in the data section because\n-   AT&T's assembler doesn't guarantee the proper alignment\n-   of data in the text section even if an align statement\n-   is used.  */\n+/* Read-only data goes in the data section because AT&T's assembler\n+   doesn't guarantee the proper alignment of data in the text section\n+   even if an align statement is used.  */\n \n-#define READONLY_DATA_SECTION() data_section()\n+#define READONLY_DATA_SECTION data_section\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "339d83d2be4d5c6603f33b36952ca3490b72827b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -5668,6 +5668,22 @@ A C expression whose value is a string, including spacing, containing the\n assembler operation to identify the following data as writable initialized\n data.  Normally @code{\"\\t.data\"} is right.\n \n+@findex READONLY_DATA_SECTION_ASM_OP\n+@item READONLY_DATA_SECTION_ASM_OP\n+A C expression whose value is a string, including spacing, containing the\n+assembler operation to identify the following data as read-only initialized\n+data.\n+\n+@findex READONLY_DATA_SECTION\n+@item READONLY_DATA_SECTION\n+A macro naming a function to call to switch to the proper section for\n+read-only data.  The default is to use @code{READONLY_DATA_SECTION_ASM_OP}\n+if defined, else fall back to @code{text_section}.\n+\n+The most common definition will be @code{data_section}, if the target\n+does not have a special read-only data section, and does not put data\n+in the text section.\n+\n @findex SHARED_SECTION_ASM_OP\n @item SHARED_SECTION_ASM_OP\n If defined, a C expression whose value is a string, including spacing,\n@@ -5741,17 +5757,6 @@ functions should do jobs analogous to those of @code{text_section} and\n @code{data_section}, for your additional sections.  Do not define this\n macro if you do not define @code{EXTRA_SECTIONS}.\n \n-@findex READONLY_DATA_SECTION\n-@item READONLY_DATA_SECTION\n-On most machines, read-only variables, constants, and jump tables are\n-placed in the text section.  If this is not the case on your machine,\n-this macro should be defined to be the name of a function (either\n-@code{data_section} or a function defined in @code{EXTRA_SECTIONS}) that\n-switches to the section to be used for read-only items.\n-\n-If these items should be placed in the text section, this macro should\n-not be defined.\n-\n @findex SELECT_RTX_SECTION\n @item SELECT_RTX_SECTION (@var{mode}, @var{rtx}, @var{align})\n A C statement or statements to switch to the appropriate section for"}, {"sha": "eeed1a1e89281457e0f658e4d4bc878a2c214898", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -99,6 +99,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n #endif\n \n+#if defined(READONLY_DATA_SECTION) || defined(READONLY_DATA_SECTION_ASM_OP)\n+#define HAVE_READONLY_DATA_SECTION 1\n+#else\n+#define HAVE_READONLY_DATA_SECTION 0\n+#endif\n+\n /* Last insn processed by final_scan_insn.  */\n static rtx debug_insn;\n rtx current_output_insn;\n@@ -1115,11 +1121,7 @@ shorten_branches (first)\n \t  next = NEXT_INSN (insn);\n \t  /* ADDR_VECs only take room if read-only data goes into the text\n \t     section.  */\n-\t  if (JUMP_TABLES_IN_TEXT_SECTION\n-#if !defined(READONLY_DATA_SECTION)\n-\t      || 1\n-#endif\n-\t      )\n+\t  if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n \t    if (next && GET_CODE (next) == JUMP_INSN)\n \t      {\n \t\trtx nextbody = PATTERN (next);\n@@ -1282,11 +1284,7 @@ shorten_branches (first)\n \t{\n \t  /* This only takes room if read-only data goes into the text\n \t     section.  */\n-\t  if (JUMP_TABLES_IN_TEXT_SECTION\n-#if !defined(READONLY_DATA_SECTION)\n-\t      || 1\n-#endif\n-\t      )\n+\t  if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n \t    insn_lengths[uid] = (XVECLEN (body,\n \t\t\t\t\t  GET_CODE (body) == ADDR_DIFF_VEC)\n \t\t\t\t * GET_MODE_SIZE (GET_MODE (body)));\n@@ -1487,11 +1485,7 @@ shorten_branches (first)\n \t      PUT_MODE (body, CASE_VECTOR_SHORTEN_MODE (min_addr - rel_addr,\n \t\t\t\t\t\t\tmax_addr - rel_addr,\n \t\t\t\t\t\t\tbody));\n-\t      if (JUMP_TABLES_IN_TEXT_SECTION\n-#if !defined(READONLY_DATA_SECTION)\n-\t\t  || 1\n-#endif\n-\t\t  )\n+\t      if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n \t\t{\n \t\t  insn_lengths[uid]\n \t\t    = (XVECLEN (body, 1) * GET_MODE_SIZE (GET_MODE (body)));"}, {"sha": "3fc3af8d8d059f6232c2026f3ad71afc79942a09", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48bc59acf17cb6141afdba04724b31cbb8f36fd/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d48bc59acf17cb6141afdba04724b31cbb8f36fd", "patch": "@@ -196,6 +196,9 @@ static enum in_section { no_section, in_text, in_data, in_named\n #ifdef DTORS_SECTION_ASM_OP\n   , in_dtors\n #endif\n+#ifdef READONLY_DATA_SECTION_ASM_OP\n+  , in_readonly_data\n+#endif\n #ifdef EXTRA_SECTIONS\n   , EXTRA_SECTIONS\n #endif\n@@ -234,12 +237,12 @@ text_section ()\n {\n   if (in_section != in_text)\n     {\n+      in_section = in_text;\n #ifdef TEXT_SECTION\n       TEXT_SECTION ();\n #else\n       fprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\n #endif\n-      in_section = in_text;\n     }\n }\n \n@@ -250,6 +253,7 @@ data_section ()\n {\n   if (in_section != in_data)\n     {\n+      in_section = in_data;\n       if (flag_shared_data)\n \t{\n #ifdef SHARED_SECTION_ASM_OP\n@@ -260,8 +264,6 @@ data_section ()\n \t}\n       else\n \tfprintf (asm_out_file, \"%s\\n\", DATA_SECTION_ASM_OP);\n-\n-      in_section = in_data;\n     }\n }\n \n@@ -283,9 +285,18 @@ readonly_data_section ()\n {\n #ifdef READONLY_DATA_SECTION\n   READONLY_DATA_SECTION ();  /* Note this can call data_section.  */\n+#else\n+#ifdef READONLY_DATA_SECTION_ASM_OP\n+  if (in_section != in_readonly_data)\n+    {\n+      in_section = in_readonly_data;\n+      fputs (READONLY_DATA_SECTION_ASM_OP, asm_out_file);\n+      fputc ('\\n', asm_out_file);\n+    }\n #else\n   text_section ();\n #endif\n+#endif\n }\n \n /* Determine if we're in the text section.  */"}]}