{"sha": "fa56377de3213de3b1f2cc263cfda2843a610685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1NjM3N2RlMzIxM2RlM2IxZjJjYzI2M2NmZGEyODQzYTYxMDY4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@ultra.linux.cz", "date": "1999-08-02T23:14:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-02T23:14:12Z"}, "message": "Jakub Jelinek  <jj@ultra.linux.cz>\n\n        * call.c (convert_default_arg, build_over_call): Change all uses of\n        PROMOTE_PROTOTYPES, so that it tests it as a C expression.\n        Ensure expr.h is included.\n        * decl.c (grokparams): Ditto.\n        * pt.c (tsubst_decl): Ditto.\n        * typeck.c (convert_arguments): Ditto.\n\nFrom-SVN: r28418", "tree": {"sha": "54437d1d5bb898c54fd276ecda231468f447b527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54437d1d5bb898c54fd276ecda231468f447b527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa56377de3213de3b1f2cc263cfda2843a610685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa56377de3213de3b1f2cc263cfda2843a610685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa56377de3213de3b1f2cc263cfda2843a610685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa56377de3213de3b1f2cc263cfda2843a610685/comments", "author": null, "committer": null, "parents": [{"sha": "40cae311f5c7317fcc247e334517fb8c431e973f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cae311f5c7317fcc247e334517fb8c431e973f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40cae311f5c7317fcc247e334517fb8c431e973f"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "0858a28d3221434080bef4ea605f13b60737adfb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa56377de3213de3b1f2cc263cfda2843a610685", "patch": "@@ -1,3 +1,12 @@\n+1999-08-02  Jakub Jelinek  <jj@ultra.linux.cz>\n+\n+\t* call.c (convert_default_arg, build_over_call): Change all uses of\n+\tPROMOTE_PROTOTYPES, so that it tests it as a C expression.\n+\tEnsure expr.h is included.\n+\t* decl.c (grokparams): Ditto.\n+\t* pt.c (tsubst_decl): Ditto.\n+\t* typeck.c (convert_arguments): Ditto.\n+\n 1999-08-02  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (mark_overriders): Fix order of args to overrides."}, {"sha": "1a5f9fe550de8332d6f1c91f67947ecb4f6d0643", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fa56377de3213de3b1f2cc263cfda2843a610685", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n+#include \"expr.h\"\n \n #include \"obstack.h\"\n #define obstack_chunk_alloc xmalloc\n@@ -3827,12 +3828,11 @@ convert_default_arg (type, arg, fn)\n \n       arg = convert_for_initialization (0, type, arg, LOOKUP_NORMAL,\n \t\t\t\t\t\"default argument\", 0, 0);\n-#ifdef PROMOTE_PROTOTYPES\n-      if ((TREE_CODE (type) == INTEGER_TYPE\n-\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+      if (PROMOTE_PROTOTYPES\n+\t  && (TREE_CODE (type) == INTEGER_TYPE\n+\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n \t  && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n \targ = default_conversion (arg);\n-#endif\n     }\n \n   return arg;\n@@ -3943,12 +3943,11 @@ build_over_call (cand, args, flags)\n \t  val = convert_like (conv, TREE_VALUE (arg));\n \t}\n \n-#ifdef PROMOTE_PROTOTYPES\n-      if ((TREE_CODE (type) == INTEGER_TYPE\n-\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+      if (PROMOTE_PROTOTYPES\n+\t  && (TREE_CODE (type) == INTEGER_TYPE\n+\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n \t  && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n \tval = default_conversion (val);\n-#endif\n       converted_args = expr_tree_cons (NULL_TREE, val, converted_args);\n     }\n "}, {"sha": "94a010f16d3e9801d6a1a280f9d7ba4a9258d478", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fa56377de3213de3b1f2cc263cfda2843a610685", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"toplev.h\"\n #include \"../hash.h\"\n+#include \"expr.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -11652,12 +11653,11 @@ grokparms (first_parm, funcdef_flag)\n \n \t      /* Since there is a prototype, args are passed in their own types.  */\n \t      DECL_ARG_TYPE (decl) = TREE_TYPE (decl);\n-#ifdef PROMOTE_PROTOTYPES\n-\t      if ((TREE_CODE (type) == INTEGER_TYPE\n-\t\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+\t      if (PROMOTE_PROTOTYPES\n+\t\t  && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n \t\t  && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n \t\tDECL_ARG_TYPE (decl) = integer_type_node;\n-#endif\n \t      if (!any_error && init)\n \t\t{\n \t\t  any_init++;"}, {"sha": "d3f1a7e6f78c5d41b558166146253a520287414f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fa56377de3213de3b1f2cc263cfda2843a610685", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"rtl.h\"\n #include \"varray.h\"\n+#include \"expr.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n    returning an int.  */\n@@ -5839,12 +5840,11 @@ tsubst_decl (t, args, type, in_decl)\n \t\t\t\t     /*complain=*/1, in_decl);\n \n \tDECL_CONTEXT (r) = NULL_TREE;\n-#ifdef PROMOTE_PROTOTYPES\n-\tif ((TREE_CODE (type) == INTEGER_TYPE\n-\t     || TREE_CODE (type) == ENUMERAL_TYPE)\n+\tif (PROMOTE_PROTOTYPES\n+\t    && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t|| TREE_CODE (type) == ENUMERAL_TYPE)\n \t    && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n \t  DECL_ARG_TYPE (r) = integer_type_node;\n-#endif\n \tif (TREE_CHAIN (t))\n \t  TREE_CHAIN (r) = tsubst (TREE_CHAIN (t), args,\n \t\t\t\t   /*complain=*/1, TREE_CHAIN (t));"}, {"sha": "2b268f85b9d64e9e4c2fa8136823ed0f91bb00a0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa56377de3213de3b1f2cc263cfda2843a610685/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fa56377de3213de3b1f2cc263cfda2843a610685", "patch": "@@ -3204,13 +3204,12 @@ convert_arguments (typelist, values, fndecl, flags)\n \t      parmval = convert_for_initialization\n \t\t(NULL_TREE, type, val, flags,\n \t\t \"argument passing\", fndecl, i);\n-#ifdef PROMOTE_PROTOTYPES\n-\t      if ((TREE_CODE (type) == INTEGER_TYPE\n-\t\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+\t      if (PROMOTE_PROTOTYPES\n+\t\t  && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n \t\t  && (TYPE_PRECISION (type)\n \t\t      < TYPE_PRECISION (integer_type_node)))\n \t\tparmval = default_conversion (parmval);\n-#endif\n \t    }\n \n \t  if (parmval == error_mark_node)"}]}