{"sha": "de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2YWRmYTJmNGRmZDdhZmQwNWVlY2FiM2I2Y2I2YjIzMjFkNmVmMg==", "commit": {"author": {"name": "Naveen.H.S", "email": "naveen.hs@kpitcummins.com", "date": "2008-03-25T13:44:00Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-03-25T13:44:00Z"}, "message": "constraints.md (Pso, Psz): New constraints.\n\n\t* config/sh/constraints.md (Pso, Psz): New constraints.\n\t* config/sh/sh.c (print_operand): Add %V and %W operand codes.\n\t* config/sh/sh.md (*andsi3_bclr, *iorsi3_bset): New insns.\n\n\t* gcc.target/sh/sh2a-bclr.c: New test.\n\t* gcc.target/sh/sh2a-bset.c: New test.\n\nFrom-SVN: r133518", "tree": {"sha": "e7d1092da69cec2fe7ccfc962bbdc1439a0678b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d1092da69cec2fe7ccfc962bbdc1439a0678b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/comments", "author": null, "committer": null, "parents": [{"sha": "f326a6cbc00ba13125882eb13d257660f2618d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f326a6cbc00ba13125882eb13d257660f2618d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f326a6cbc00ba13125882eb13d257660f2618d56"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "03f6332e777273aeaae5f2965d011763a7abed0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -1,3 +1,9 @@\n+2008-03-25  Naveen.H.S  <naveen.hs@kpitcummins.com>\n+\n+\t* config/sh/constraints.md (Pso, Psz): New constraints.\n+\t* config/sh/sh.c (print_operand): Add %V and %W operand codes.\n+\t* config/sh/sh.md (*andsi3_bclr, *iorsi3_bset): New insns.\n+\n 2008-03-25  Naveen.H.S  <naveen.hs@kpitcummins.com>\n \n \t* config/sh/sh.c (sh_expand_t_scc): Emit movrt for SH2A if"}, {"sha": "5844793e59edfed7e7ad6804c2d879227177ab38", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -35,6 +35,8 @@\n ;;  M: 1\n ;;  N: 0\n ;;  P27: 1 | 2 | 8 | 16\n+;;  Pso: 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128\n+;;  Psz: ~1 | ~2 | ~4 | ~8 | ~16 | ~32 | ~64 | ~128\n ;; Q: pc relative load operand\n ;; Rxx: reserved for exotic register classes.\n ;; Sxx: extra memory (storage) constraints\n@@ -204,6 +206,30 @@\n    PIC_DIRECT_ADDR_P.\"\n   (match_test \"IS_NON_EXPLICIT_CONSTANT_P (op)\"))\n \n+(define_constraint \"Pso\"\n+  \"Integer constant with a single bit set in its lower 8-bit.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"ival == 1\")\n+\t    (match_test \"ival == 2\")\n+\t    (match_test \"ival == 4\")\n+\t    (match_test \"ival == 8\")\n+\t    (match_test \"ival == 16\")\n+\t    (match_test \"ival == 32\")\n+\t    (match_test \"ival == 64\")\n+\t    (match_test \"ival == 128\"))))\n+\n+(define_constraint \"Psz\"\n+  \"Integer constant with a single zero bit in the lower 8-bit.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"~ival == 1\")\n+\t    (match_test \"~ival == 2\")\n+\t    (match_test \"~ival == 4\")\n+\t    (match_test \"~ival == 8\")\n+\t    (match_test \"~ival == 16\")\n+\t    (match_test \"~ival == 32\")\n+\t    (match_test \"~ival == 64\")\n+\t    (match_test \"~ival == 128\"))))\n+\n (define_memory_constraint \"Sr0\"\n   \"@internal\"\n   (and (match_test \"memory_operand (op, GET_MODE (op))\")"}, {"sha": "8bba3228a7cbf12edb48c4a629031825cd5ba62f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -681,6 +681,8 @@ print_operand_address (FILE *stream, rtx x)\n    'd'  print a V2SF reg as dN instead of fpN.\n    'm'  print a pair `base,offset' or `base,index', for LD and ST.\n    'U'  Likewise for {LD,ST}{HI,LO}.\n+   'V'  print the position of a single bit set.\n+   'W'  print the position of a single bit cleared.\n    'u'  prints the lowest 16 bits of CONST_INT, as an unsigned value.\n    'o'  output an operator.  */\n \n@@ -887,6 +889,22 @@ print_operand (FILE *stream, rtx x, int code)\n \t}\n       break;\n \n+    case 'V':\n+      {\n+\tint num = exact_log2 (INTVAL (x));\n+\tgcc_assert (num >= 0);\n+\tfprintf (stream, \"#%d\", num);\n+      }\n+      break;\n+\n+    case 'W':\n+      {\n+\tint num = exact_log2 (~INTVAL (x));\n+\tgcc_assert (num >= 0);\n+\tfprintf (stream, \"#%d\", num);\n+      }\n+      break;\n+\n     case 'd':\n       gcc_assert (GET_CODE (x) == REG && GET_MODE (x) == V2SFmode);\n "}, {"sha": "f62b3b9594af07775a8bb791e9bf234a6069acb1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -3170,6 +3170,14 @@ label:\n \tandi\t%1, %2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n+(define_insn \"*andsi3_bclr\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(and:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"Psz\")))]\n+  \"TARGET_SH2A && satisfies_constraint_Psz (operands[2])\"\n+  \"bclr\\\\t%W2,%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n ;; If the constant is 255, then emit an extu.b instruction instead of an\n ;; and, since that will give better code.\n \n@@ -3252,6 +3260,14 @@ label:\n \tori\t%1, %2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n+(define_insn \"*iorsi3_bset\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(ior:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n+\t(match_operand:SI 2 \"const_int_operand\" \"Pso\")))]\n+  \"TARGET_SH2A && satisfies_constraint_Pso (operands[2])\"\n+  \"bset\\\\t%V2,%0\"\n+  [(set_attr \"type\" \"arith\")])\n+\n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,r\")\n \t(ior:DI (match_operand:DI 1 \"arith_reg_operand\" \"%r,r\")"}, {"sha": "05e9c267e869203e3639d94aa636fe8422befeaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -1,3 +1,8 @@\n+2008-03-25  Naveen.H.S  <naveen.hs@kpitcummins.com>\n+\n+\t* gcc.target/sh/sh2a-bclr.c: New test.\n+\t* gcc.target/sh/sh2a-bset.c: New test.\n+\n 2008-03-25  Naveen.H.S  <naveen.hs@kpitcummins.com>\n \n \t* gcc.target/sh/sh2a-movrt.c: New test."}, {"sha": "d4e11f95298d411294c95e81a7866ae47324505b", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bclr.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -0,0 +1,57 @@\n+/* Testcase to check generation of a SH2A specific instruction\n+   'BCLR #imm3,Rn'.  */\n+/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-options \"-O1\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n+/* { dg-final { scan-assembler \"bclr\"} }  */\n+\n+struct a\n+{\n+  char a, b;\n+  short c;\n+};\n+\n+/* This function generates the instruction \"BCLR #imm3,Rn\" only\n+   on using optimization option \"-O1\" and above.  */\n+\n+int\n+a2 ()\n+{\n+  volatile int j;\n+  volatile static struct a x = {1, 66, ~1}, y = {1, 2, ~2};\n+\n+  if (j > 1)\n+    return (x.a == y.a && (x.b & ~1) == y.b);\n+  if (j > 2)\n+    return (x.a == y.a && (x.b & ~2) == y.b);\n+  if (j > 3)\n+    return (x.a == y.a && (x.b & ~4) == y.b);\n+  if (j > 4)\n+    return (x.a == y.a && (x.b & ~8) == y.b);\n+  if (j > 5)\n+    return (x.a == y.a && (x.b & ~16) == y.b);\n+  if (j > 6)\n+    return (x.a == y.a && (x.b & ~32) == y.b);\n+  if (j > 7)\n+    return (x.a == y.a && (x.b & ~64) == y.b);\n+  if (j > 8)\n+    return (x.a == y.a && (x.b & ~128) == y.b);\n+}\n+\n+int\n+main ()\n+{\n+  volatile unsigned char x;\n+\n+  x &= 0xFE;\n+  x &= 0xFD;\n+  x &= 0xFB;\n+  x &= 0xF7;\n+  x &= 0xEF;\n+  x &= 0xDF;\n+  x &= 0xBF;\n+  x &= 0x7F;\n+\n+  if (!a2 ())\n+    return 0;\n+}"}, {"sha": "b64852b4c36b8e07f6e4ae7057932b91964ee138", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bset.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c?ref=de6adfa2f4dfd7afd05eecab3b6cb6b2321d6ef2", "patch": "@@ -0,0 +1,57 @@\n+/* Testcase to check generation of a SH2A specific instruction\n+  'BSET #imm3,Rn'.  */\n+/* { dg-do assemble {target sh*-*-*}}  */\n+/* { dg-options \"-O1\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n+/* { dg-final { scan-assembler \"bset\"} }  */\n+\n+struct a\n+{\n+  char a, b;\n+  short c;\n+};\n+\n+/* This function generates the instruction \"BSET #imm3,Rn\" only\n+   on using optimization option \"-O1\" and above.  */\n+\n+int\n+a2 ()\n+{\n+  volatile int j;\n+  volatile static struct a x = {1, 66, ~1}, y = {1, 2, ~2};\n+\n+  if (j > 1)\n+    return (x.a == y.a && (x.b | 1) == y.b);\n+  if (j > 2)\n+    return (x.a == y.a && (x.b | 2) == y.b);\n+  if (j > 3)\n+    return (x.a == y.a && (x.b | 4) == y.b);\n+  if (j > 4)\n+    return (x.a == y.a && (x.b | 8) == y.b);\n+  if (j > 5)\n+    return (x.a == y.a && (x.b | 16) == y.b);\n+  if (j > 6)\n+    return (x.a == y.a && (x.b | 32) == y.b);\n+  if (j > 7)\n+    return (x.a == y.a && (x.b | 64) == y.b);\n+  if (j > 8)\n+    return (x.a == y.a && (x.b | 128) == y.b);\n+}\n+\n+int\n+main ()\n+{\n+  volatile unsigned char x;\n+\n+  x |= 0x1;\n+  x |= 0x2;\n+  x |= 0x4;\n+  x |= 0x8;\n+  x |= 0x16;\n+  x |= 0x32;\n+  x |= 0x64;\n+  x |= 0x128;\n+\n+  if (!a2 ())\n+    return 0;\n+}"}]}