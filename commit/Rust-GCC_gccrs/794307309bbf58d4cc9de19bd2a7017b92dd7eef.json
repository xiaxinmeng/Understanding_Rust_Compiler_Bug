{"sha": "794307309bbf58d4cc9de19bd2a7017b92dd7eef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0MzA3MzA5YmJmNThkNGNjOWRlMTliZDJhNzAxN2I5MmRkN2VlZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-02T11:26:20Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-02T11:26:20Z"}, "message": "40x.md (ppc403-integer): Move \"exts\" to \"no dot\".\n\n2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/40x.md (ppc403-integer): Move \"exts\" to \"no dot\".\n\t(ppc403-compare): Add \"exts with dot\" case.\n\t* config/rs6000/440.md (ppc440-integer, ppc440-compare): As above.\n\t* config/rs6000/476.md (ppc476-simple-integer, ppc476-compare): Ditto.\n\t* config/rs6000/601.md (ppc601-integer, ppc601-compare): Ditto.\n\t* config/rs6000/603.md (ppc603-integer, ppc603-compare): Ditto.\n\t* config/rs6000/6xx.md (ppc604-integer, ppc604-compare): Ditto.\n\t* config/rs6000/7450.md (ppc7450-integer, ppc7450-compare): Ditto.\n\t* config/rs6000/7xx.md (ppc750-integer, ppc750-compare): Ditto.\n\t* config/rs6000/cell.md (cell-integer, cell-fast-cmp,\n\tcell-cmp-microcoded): Similarly.\n\t* config/rs6000/e300c2c3.md (ppce300c3_iu, ppce300c3_cmp): As before.\n\t* config/rs6000/e500mc64.md (e500mc64_su, e500mc64_su2): Ditto.\n\t* config/rs6000/e5500.md (e5500_sfx, e5500_sfx2): Ditto.\n\t* config/rs6000/e6500.md (e6500_sfx, e6500_sfx2): Ditto.\n\t* config/rs6000/mpc.md (mpccore-integer, mpccore-compare): Ditto.\n\t* config/rs6000/power4.md (power4-integer, power4-compare): Ditto.\n\t* config/rs6000/power5.md (power5-integer, power5-compare): Ditto.\n\t* config/rs6000/power6.md (power6-exts): Add \"no dot\" condition.\n\t(power6-compare): Add \"exts with dot\" case.\n\t* config/rs6000/power7.md (power7-integer, power7-compare): As before.\n\t* config/rs6000/power8.md (power8-1cyc, power8-compare): Ditto.\n\t* config/rs6000/rs64.md (rs64a-integer, rs64a-compare): Ditto.\n\n\t* config/rs6000/predicates.md (lwa_operand): Don't allow memory\n\tif avoiding Cell microcode.\n\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Handle exts+dot case.\n\t(is_cracked_insn): Ditto.\n\t(insn_must_be_first_in_group): Ditto.\n\t* config/rs6000/rs6000.md (dot): Adjust comment.\n\t(cell_micro): Handle exts+dot.\n\t(extendqidi2, extendhidi2, extendsidi2, *extendsidi2_lfiwax,\n\t*extendsidi2_nocell, *extendsidi2_nocell, extendqisi2, extendqihi2,\n\textendhisi2, 16 anonymous instructions, and 12 splitters): Delete.\n\t(extendqi<mode>2, *extendqi<mode>2_dot, *extendqi<mode>2_dot2,\n\textendhi<mode>2, *extendhi<mode>2, *extendhi<mode>2_noload,\n\t*extendhi<mode>2_dot, *extendhi<mode>2_dot2, extendsi<mode>2,\n\t*extendsi<mode>2_dot, *extendsi<mode>2_dot2): New.\n\nFrom-SVN: r214816", "tree": {"sha": "4688e3af785179ec7c369fbc4a11a78aa2452b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4688e3af785179ec7c369fbc4a11a78aa2452b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794307309bbf58d4cc9de19bd2a7017b92dd7eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794307309bbf58d4cc9de19bd2a7017b92dd7eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794307309bbf58d4cc9de19bd2a7017b92dd7eef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794307309bbf58d4cc9de19bd2a7017b92dd7eef/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cbab4af8022564e7ec3849e13ce5b9d5b814abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbab4af8022564e7ec3849e13ce5b9d5b814abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbab4af8022564e7ec3849e13ce5b9d5b814abe"}], "stats": {"total": 604, "additions": 203, "deletions": 401}, "files": [{"sha": "b615fab05d69f235098ad37ee7b2b14d7026823b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -1,3 +1,44 @@\n+2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/40x.md (ppc403-integer): Move \"exts\" to \"no dot\".\n+\t(ppc403-compare): Add \"exts with dot\" case.\n+\t* config/rs6000/440.md (ppc440-integer, ppc440-compare): As above.\n+\t* config/rs6000/476.md (ppc476-simple-integer, ppc476-compare): Ditto.\n+\t* config/rs6000/601.md (ppc601-integer, ppc601-compare): Ditto.\n+\t* config/rs6000/603.md (ppc603-integer, ppc603-compare): Ditto.\n+\t* config/rs6000/6xx.md (ppc604-integer, ppc604-compare): Ditto.\n+\t* config/rs6000/7450.md (ppc7450-integer, ppc7450-compare): Ditto.\n+\t* config/rs6000/7xx.md (ppc750-integer, ppc750-compare): Ditto.\n+\t* config/rs6000/cell.md (cell-integer, cell-fast-cmp,\n+\tcell-cmp-microcoded): Similarly.\n+\t* config/rs6000/e300c2c3.md (ppce300c3_iu, ppce300c3_cmp): As before.\n+\t* config/rs6000/e500mc64.md (e500mc64_su, e500mc64_su2): Ditto.\n+\t* config/rs6000/e5500.md (e5500_sfx, e5500_sfx2): Ditto.\n+\t* config/rs6000/e6500.md (e6500_sfx, e6500_sfx2): Ditto.\n+\t* config/rs6000/mpc.md (mpccore-integer, mpccore-compare): Ditto.\n+\t* config/rs6000/power4.md (power4-integer, power4-compare): Ditto.\n+\t* config/rs6000/power5.md (power5-integer, power5-compare): Ditto.\n+\t* config/rs6000/power6.md (power6-exts): Add \"no dot\" condition.\n+\t(power6-compare): Add \"exts with dot\" case.\n+\t* config/rs6000/power7.md (power7-integer, power7-compare): As before.\n+\t* config/rs6000/power8.md (power8-1cyc, power8-compare): Ditto.\n+\t* config/rs6000/rs64.md (rs64a-integer, rs64a-compare): Ditto.\n+\n+\t* config/rs6000/predicates.md (lwa_operand): Don't allow memory\n+\tif avoiding Cell microcode.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Handle exts+dot case.\n+\t(is_cracked_insn): Ditto.\n+\t(insn_must_be_first_in_group): Ditto.\n+\t* config/rs6000/rs6000.md (dot): Adjust comment.\n+\t(cell_micro): Handle exts+dot.\n+\t(extendqidi2, extendhidi2, extendsidi2, *extendsidi2_lfiwax,\n+\t*extendsidi2_nocell, *extendsidi2_nocell, extendqisi2, extendqihi2,\n+\textendhisi2, 16 anonymous instructions, and 12 splitters): Delete.\n+\t(extendqi<mode>2, *extendqi<mode>2_dot, *extendqi<mode>2_dot2,\n+\textendhi<mode>2, *extendhi<mode>2, *extendhi<mode>2_noload,\n+\t*extendhi<mode>2_dot, *extendhi<mode>2_dot2, extendsi<mode>2,\n+\t*extendsi<mode>2_dot, *extendsi<mode>2_dot2): New.\n+\n 2014-09-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (QHSI): Delete."}, {"sha": "0903536ecd4e438381c8b0be20ebc4e9ccc75515", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -36,8 +36,8 @@\n   \"iu_40x\")\n \n (define_insn_reservation \"ppc403-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x\")\n@@ -54,7 +54,7 @@\n \n (define_insn_reservation \"ppc403-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc403,ppc405\"))\n   \"iu_40x,nothing,bpu_40x\")"}, {"sha": "ff91fdbd7c327f63735f95367b8b42c2ecf74f89", "filename": "gcc/config/rs6000/440.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -53,8 +53,8 @@\n   \"ppc440_issue,ppc440_l_pipe\")\n \n (define_insn_reservation \"ppc440-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_i_pipe|ppc440_j_pipe\")\n@@ -96,7 +96,7 @@\n \n (define_insn_reservation \"ppc440-compare\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare,cr_logical,delayed_cr,mfcr\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_i_pipe\")"}, {"sha": "9bfd6b605345bf5cc032e92cbd409926a7f70dd4", "filename": "gcc/config/rs6000/476.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F476.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F476.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F476.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -63,8 +63,8 @@\n    ppc476_lj_pipe\")\n \n (define_insn_reservation \"ppc476-simple-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,exts\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\\n@@ -78,7 +78,7 @@\n \n (define_insn_reservation \"ppc476-compare\" 4\n   (and (ior (eq_attr \"type\" \"compare,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue,\\"}, {"sha": "de51cbfbbaf9f391ae315828c54099c346a18ecb", "filename": "gcc/config/rs6000/601.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F601.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F601.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F601.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -45,8 +45,8 @@\n   \"iu_ppc601+fpu_ppc601\")\n \n (define_insn_reservation \"ppc601-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,add,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+  (and (ior (eq_attr \"type\" \"integer,add,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601\")\n@@ -75,7 +75,7 @@\n ; execute on the branch unit.\n (define_insn_reservation \"ppc601-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"iu_ppc601,nothing,bpu_ppc601\")"}, {"sha": "dc030181d40e50508a9d54e033421522531a5788", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -58,8 +58,8 @@\n   \"lsu_603\")\n \n (define_insn_reservation \"ppc603-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"iu_603\")\n@@ -94,7 +94,7 @@\n \n (define_insn_reservation \"ppc603-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"iu_603,nothing,bpu_603\")"}, {"sha": "db8346913d38c09f7da88440125cbdb6953c7df7", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -73,8 +73,8 @@\n   \"lsu_6xx\")\n   \n (define_insn_reservation \"ppc604-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"iu1_6xx|iu2_6xx\")\n@@ -148,7 +148,7 @@\n \n (define_insn_reservation \"ppc604-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   \"(iu1_6xx|iu2_6xx)\")"}, {"sha": "3679c79ce0acf6888ef9d08a0ed3069a457d152d", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -73,8 +73,8 @@\n   \"ppc7450_du,lsu_7450\")\n \n (define_insn_reservation \"ppc7450-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,iu1_7450|iu2_7450|iu3_7450\")\n@@ -109,7 +109,7 @@\n \n (define_insn_reservation \"ppc7450-compare\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,(iu1_7450|iu2_7450|iu3_7450)\")"}, {"sha": "b27fe355441f4d6489b4f8a209e0eeb2393f693f", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -61,8 +61,8 @@\n   \"ppc750_du,lsu_7xx\")\n \n (define_insn_reservation \"ppc750-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,iu1_7xx|iu2_7xx\")\n@@ -102,7 +102,7 @@\n \n (define_insn_reservation \"ppc750-compare\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,(iu1_7xx|iu2_7xx)\")"}, {"sha": "f1ce3526b3552104920aa3fb410296f7a4282c88", "filename": "gcc/config/rs6000/cell.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fcell.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fcell.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcell.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -166,8 +166,8 @@\n \n ;; Integer latency is 2 cycles\n (define_insn_reservation \"cell-integer\" 2\n-  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\"))\n \t    (and (eq_attr \"type\" \"insert\")\n \t\t (eq_attr \"size\" \"64\")))\n@@ -202,15 +202,15 @@\n ;; add, addo, sub, subo, alter cr0, rldcli, rlwinm \n (define_insn_reservation \"cell-fast-cmp\" 2\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"cell\")\n        (eq_attr \"cell_micro\" \"not\"))\n   \"slot01,fxu_cell\")\n \n (define_insn_reservation \"cell-cmp-microcoded\" 9\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"cell\")\n        (eq_attr \"cell_micro\" \"always\"))"}, {"sha": "276b9e96818c1c833fd94073320dc14efdd6bdc9", "filename": "gcc/config/rs6000/e300c2c3.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -84,7 +84,7 @@\n ;; Compares can be executed either one of the IU or SRU\n (define_insn_reservation \"ppce300c3_cmp\" 1\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n   \"ppce300c3_decode,ppce300c3_issue+(ppce300c3_iu_stage0|ppce300c3_sru_stage0) \\\n@@ -93,7 +93,7 @@\n ;; Other one cycle IU insns\n (define_insn_reservation \"ppce300c3_iu\" 1\n   (and (ior (eq_attr \"type\" \"integer,insert,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (ior (eq_attr \"cpu\" \"ppce300c2\") (eq_attr \"cpu\" \"ppce300c3\")))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_iu_stage0+ppce300c3_retire\")"}, {"sha": "dc3eb6a0917c6c9f8a6098d37e47b60cc6da7f64", "filename": "gcc/config/rs6000/e500mc64.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe500mc64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe500mc64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500mc64.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -69,8 +69,8 @@\n \n ;; Simple SU insns.\n (define_insn_reservation \"e500mc64_su\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,cntlz,exts\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\" \"no\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"dot\" \"no\")\n@@ -80,7 +80,7 @@\n \n (define_insn_reservation \"e500mc64_su2\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare,trap\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\" \"yes\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"dot\" \"yes\")"}, {"sha": "3cad8bd46674a4ab2f202e26aaf265eb6abcaf62", "filename": "gcc/config/rs6000/e5500.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe5500.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -56,8 +56,8 @@\n \n ;; SFX.\n (define_insn_reservation \"e5500_sfx\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,cntlz,exts\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\" \"no\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"var_shift\" \"no\")))\n@@ -66,7 +66,7 @@\n \n (define_insn_reservation \"e5500_sfx2\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare,trap\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\"  \"yes\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"dot\"  \"yes\")"}, {"sha": "9d4b4833b3291e3afd91336755ce08b04ee83544", "filename": "gcc/config/rs6000/e6500.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe6500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fe6500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe6500.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -59,8 +59,8 @@\n \n ;; SFX.\n (define_insn_reservation \"e6500_sfx\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,cntlz,exts\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,cntlz\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\"  \"no\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"dot\"  \"no\")\n@@ -70,7 +70,7 @@\n \n (define_insn_reservation \"e6500_sfx2\" 2\n   (and (ior (eq_attr \"type\" \"cmp,compare,trap\")\n-\t    (and (eq_attr \"type\" \"add,logical\")\n+\t    (and (eq_attr \"type\" \"add,logical,exts\")\n \t\t (eq_attr \"dot\"  \"yes\"))\n \t    (and (eq_attr \"type\" \"shift\")\n \t\t (eq_attr \"dot\"  \"yes\")"}, {"sha": "9ac611a8e13ba9da08de97faee22597a5c57aa77", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -41,8 +41,8 @@\n   \"lsu_mpc\")\n \n (define_insn_reservation \"mpccore-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"iu_mpc\")\n@@ -70,7 +70,7 @@\n \n (define_insn_reservation \"mpccore-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"iu_mpc,nothing,bpu_mpc\")"}, {"sha": "a436ec7f12b131675195d200400dce1f8db0149f", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -210,8 +210,8 @@\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power4-integer\" 2\n-  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\"))\n \t    (and (eq_attr \"type\" \"insert\")\n \t\t (eq_attr \"size\" \"64\")))\n@@ -258,7 +258,7 @@\n \n (define_insn_reservation \"power4-compare\" 2\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"power4\"))\n   \"(du1_power4+du2_power4|du2_power4+du3_power4|du3_power4+du4_power4),\\"}, {"sha": "530c25590c676a4bd8b398effa5a92802cf3daa9", "filename": "gcc/config/rs6000/power5.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -166,8 +166,8 @@\n \n ; Integer latency is 2 cycles\n (define_insn_reservation \"power5-integer\" 2\n-  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,exts,isel,popcnt\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,trap,cntlz,isel,popcnt\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\"))\n \t    (and (eq_attr \"type\" \"insert\")\n \t\t (eq_attr \"size\" \"64\")))\n@@ -211,7 +211,7 @@\n \n (define_insn_reservation \"power5-compare\" 2\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"power5\"))\n   \"du1_power5+du2_power5,iu1_power5,iu2_power5\")"}, {"sha": "695f64297fdd11317d74b4e41db850a3eb208916", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -235,6 +235,7 @@\n \n (define_insn_reservation \"power6-exts\" 1\n   (and (eq_attr \"type\" \"exts\")\n+       (eq_attr \"dot\" \"no\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"FXU_power6\")\n \n@@ -333,7 +334,9 @@\n   \"FXU_power6\")\n \n (define_insn_reservation \"power6-compare\" 1\n-  (and (eq_attr \"type\" \"compare\")\n+  (and (ior (eq_attr \"type\" \"compare\")\n+            (and (eq_attr \"type\" \"exts\")\n+                 (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"power6\"))\n   \"FXU_power6\")\n "}, {"sha": "8be287953a817604313304d630cb6d427c242c28", "filename": "gcc/config/rs6000/power7.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower7.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -174,8 +174,8 @@\n \n ; FX Unit\n (define_insn_reservation \"power7-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,exts,isel,popcnt\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,isel,popcnt\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,FXU_power7\")\n@@ -204,7 +204,7 @@\n \n (define_insn_reservation \"power7-compare\" 2\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU2F_power7,FXU_power7,FXU_power7\")"}, {"sha": "4b03ac2cbfd95dc0809e04e553bebe72e1bdace6", "filename": "gcc/config/rs6000/power8.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -168,8 +168,8 @@\n \n ; FX Unit\n (define_insn_reservation \"power8-1cyc\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,FXU_power8\")\n@@ -216,7 +216,7 @@\n ; shift with dot : rlwinm./slwi./rlwnm./slw./etc\n (define_insn_reservation \"power8-compare\" 2\n   (and (ior (eq_attr \"type\" \"compare\")\n-\t    (and (eq_attr \"type\" \"shift\")\n+\t    (and (eq_attr \"type\" \"shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_cracked_power8,FXU_power8,FXU_power8\")"}, {"sha": "ef7bc69c8121fd895095eac6b1ce036756949fd3", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -1022,6 +1022,9 @@\n     return true;\n   if (!memory_operand (inner, mode))\n     return false;\n+  if (!rs6000_gen_cell_microcode)\n+    return false;\n+\n   addr = XEXP (inner, 0);\n   if (GET_CODE (addr) == PRE_INC\n       || GET_CODE (addr) == PRE_DEC"}, {"sha": "5b1aa5540a4174141d1d32cefcc15cc78922bb2e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -26444,6 +26444,7 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n                 case TYPE_CR_LOGICAL:\n                 case TYPE_DELAYED_CR:\n \t\t  return cost + 2;\n+                case TYPE_EXTS:\n                 case TYPE_MUL:\n \t\t  if (get_attr_dot (dep_insn) == DOT_YES)\n \t\t    return cost + 2;\n@@ -26736,6 +26737,8 @@ is_cracked_insn (rtx insn)\n \t      && get_attr_update (insn) == UPDATE_YES)\n \t  || type == TYPE_DELAYED_CR\n \t  || type == TYPE_COMPARE\n+\t  || (type == TYPE_EXTS\n+\t      && get_attr_dot (insn) == DOT_YES)\n \t  || (type == TYPE_SHIFT\n \t      && get_attr_dot (insn) == DOT_YES\n \t      && get_attr_var_shift (insn) == VAR_SHIFT_NO)\n@@ -27624,6 +27627,7 @@ insn_must_be_first_in_group (rtx insn)\n           return true;\n         case TYPE_MUL:\n         case TYPE_SHIFT:\n+        case TYPE_EXTS:\n           if (get_attr_dot (insn) == DOT_YES)\n             return true;\n           else\n@@ -27665,6 +27669,7 @@ insn_must_be_first_in_group (rtx insn)\n         case TYPE_MTJMPR:\n           return true;\n         case TYPE_SHIFT:\n+        case TYPE_EXTS:\n         case TYPE_MUL:\n           if (get_attr_dot (insn) == DOT_YES)\n             return true;"}, {"sha": "d2bc07d44f1d30dec01cfdc61e9f0f9e53ae599e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 93, "deletions": 343, "changes": 436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -181,7 +181,7 @@\n (define_attr \"size\" \"8,16,32,64\" (const_string \"32\"))\n \n ;; Is this instruction record form (\"dot\", signed compare to 0, writing CR0)?\n-;; This is used for add, logical, shift, mul.\n+;; This is used for add, logical, shift, exts, mul.\n (define_attr \"dot\" \"no,yes\" (const_string \"no\"))\n \n ;; Does this instruction sign-extend its result?\n@@ -254,7 +254,7 @@\n ; The default for load extended, the recorded instructions and rotate/shifts by a variable is always microcoded\n (define_attr \"cell_micro\" \"not,conditional,always\"\n   (if_then_else (ior (eq_attr \"type\" \"compare\")\n-\t\t     (and (eq_attr \"type\" \"shift,mul\")\n+\t\t     (and (eq_attr \"type\" \"shift,exts,mul\")\n \t\t\t  (eq_attr \"dot\" \"yes\"))\n \t\t     (and (eq_attr \"type\" \"load\")\n \t\t\t  (eq_attr \"sign_extend\" \"yes\"))\n@@ -726,150 +726,124 @@\n    (set_attr \"length\" \"4,8\")])\n \n \n-(define_insn \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64\"\n+(define_insn \"extendqi<mode>2\"\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"\"\n   \"extsb %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n+(define_insn_and_split \"*extendqi<mode>2_dot\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n+   (clobber (match_scratch:EXTQI 0 \"=r,r\"))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n-   extsb. %2,%1\n+   extsb. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(sign_extend:EXTQI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"*extendqi<mode>2_dot2\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n+   (set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:EXTQI (match_dup 1)))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    extsb. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n   [(set (match_dup 0)\n-\t(sign_extend:DI (match_dup 1)))\n+\t(sign_extend:EXTQI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_expand \"extendhidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64\"\n+\n+(define_expand \"extendhi<mode>2\"\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"\")\n+\t(sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n+  \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n+(define_insn \"*extendhi<mode>2\"\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n   [(set_attr \"type\" \"load,exts\")\n    (set_attr \"sign_extend\" \"yes\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64 && !rs6000_gen_cell_microcode\"\n+(define_insn \"*extendhi<mode>2_noload\"\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r\")\n+        (sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"!rs6000_gen_cell_microcode\"\n   \"extsh %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n+(define_insn_and_split \"*extendhi<mode>2_dot\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n+   (clobber (match_scratch:EXTHI 0 \"=r,r\"))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n-   extsh. %2,%1\n+   extsh. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n+  [(set (match_dup 0)\n+\t(sign_extend:EXTHI (match_dup 1)))\n+   (set (match_dup 2)\n+\t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"*extendhi<mode>2_dot2\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n+   (set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:EXTHI (match_dup 1)))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    extsh. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n   [(set (match_dup 0)\n-\t(sign_extend:DI (match_dup 1)))\n+\t(sign_extend:EXTHI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"4,8\")])\n \n-(define_expand \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64\"\n-  \"\")\n \n-(define_insn \"*extendsidi2_lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,??wj,!wl,!wu\")\n-\t(sign_extend:DI (match_operand:SI 1 \"lwa_operand\" \"Y,r,r,Z,Z\")))]\n-  \"TARGET_POWERPC64 && TARGET_LFIWAX\"\n+(define_insn \"extendsi<mode>2\"\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,??wj,!wl,!wu\")\n+\t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\" \"Y,r,r,Z,Z\")))]\n+  \"\"\n   \"@\n    lwa%U1%X1 %0,%1\n    extsw %0,%1\n@@ -879,270 +853,46 @@\n   [(set_attr \"type\" \"load,exts,mffgpr,fpload,fpload\")\n    (set_attr \"sign_extend\" \"yes\")])\n \n-(define_insn \"*extendsidi2_nocell\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:SI 1 \"lwa_operand\" \"Y,r\")))]\n-  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode && !TARGET_LFIWAX\"\n-  \"@\n-   lwa%U1%X1 %0,%1\n-   extsw %0,%1\"\n-  [(set_attr \"type\" \"load,exts\")\n-   (set_attr \"sign_extend\" \"yes\")])\n-\n-(define_insn \"*extendsidi2_nocell\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64 && !rs6000_gen_cell_microcode\"\n-  \"extsw %0,%1\"\n-  [(set_attr \"type\" \"exts\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_64BIT\"\n-  \"@\n-   extsw. %2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:DI 2 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*extendsi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (sign_extend:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n+   (clobber (match_scratch:EXTSI 0 \"=r,r\"))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    extsw. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(sign_extend:DI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-\n-(define_insn \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"\"\n-  \"extsb %0,%1\"\n-  [(set_attr \"type\" \"exts\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=r,r\"))]\n-  \"\"\n-  \"@\n-   extsb. %2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:SI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_dup 1)))]\n-  \"\"\n-  \"@\n-   extsb. %0,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:SI (match_dup 1)))]\n-  \"reload_completed\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n   [(set (match_dup 0)\n-\t(sign_extend:SI (match_dup 1)))\n+\t(sign_extend:EXTSI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n-\n-\n-(define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"\"\n-  \"extsb %0,%1\"\n-  [(set_attr \"type\" \"exts\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:HI 2 \"=r,r\"))]\n   \"\"\n-  \"@\n-   extsb. %2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n \n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:HI 2 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:HI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n+(define_insn_and_split \"*extendsi<mode>2_dot2\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n+\t(compare:CC (sign_extend:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n-   (set (match_operand:HI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:HI (match_dup 1)))]\n-  \"\"\n+   (set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:EXTSI (match_dup 1)))]\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n-   extsb. %0,%1\n+   extsw. %0,%1\n    #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:HI (match_dup 1)))]\n-  \"reload_completed\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[2], CCmode)\"\n   [(set (match_dup 0)\n-\t(sign_extend:HI (match_dup 1)))\n+\t(sign_extend:EXTSI (match_dup 1)))\n    (set (match_dup 2)\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n-  \"\")\n-\n-\n-(define_expand \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"rs6000_gen_cell_microcode\"\n-  \"@\n-   lha%U1%X1 %0,%1\n-   extsh %0,%1\"\n-  [(set_attr \"type\" \"load,exts\")\n-   (set_attr \"sign_extend\" \"yes\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"!rs6000_gen_cell_microcode\"\n-  \"extsh %0,%1\"\n-  [(set_attr \"type\" \"exts\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=r,r\"))]\n   \"\"\n-  \"@\n-   extsh. %2,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:SI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 2)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_dup 1)))]\n-  \"\"\n-  \"@\n-   extsh. %0,%1\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n+  [(set_attr \"type\" \"exts\")\n+   (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:SI (match_dup 1)))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(sign_extend:SI (match_dup 1)))\n-   (set (match_dup 2)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n \f\n ;; IBM 405, 440, 464 and 476 half-word multiplication operations.\n "}, {"sha": "8925f38310545c0e7a4771cb6e32b4b4b8b6428a", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794307309bbf58d4cc9de19bd2a7017b92dd7eef/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=794307309bbf58d4cc9de19bd2a7017b92dd7eef", "patch": "@@ -46,8 +46,8 @@\n   \"lsu_rs64\")\n \n (define_insn_reservation \"rs64a-integer\" 1\n-  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,exts,isel\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+  (and (ior (eq_attr \"type\" \"integer,insert,trap,cntlz,isel\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"no\")))\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"iu_rs64\")\n@@ -100,7 +100,7 @@\n \n (define_insn_reservation \"rs64a-compare\" 3\n   (and (ior (eq_attr \"type\" \"cmp,compare\")\n-\t    (and (eq_attr \"type\" \"add,logical,shift\")\n+\t    (and (eq_attr \"type\" \"add,logical,shift,exts\")\n \t\t (eq_attr \"dot\" \"yes\")))\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"iu_rs64,nothing,bpu_rs64\")"}]}