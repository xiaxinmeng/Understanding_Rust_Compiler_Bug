{"sha": "c92716b2b1d117a803775a2e2336b751050ff7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyNzE2YjJiMWQxMTdhODAzNzc1YTJlMjMzNmI3NTEwNTBmZjdjMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T11:21:41Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T11:22:29Z"}, "message": "Port bugzilla-close-candidate script to git.\n\nmaintainer-scripts/ChangeLog:\n\n\t* bugzilla-close-candidate.py: Support both SVN and GIT messages\n\tin PRs. Remove need of usage of the bugzilla API key.", "tree": {"sha": "959f706d4f2edc94228faeb5a182ff921c1b26a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/959f706d4f2edc94228faeb5a182ff921c1b26a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c92716b2b1d117a803775a2e2336b751050ff7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7Q8HUACgkQTcGC3A+n\nN4U1NAf9GSeYK5TfK9PZdrjxQY/azAmAx4Gti1WmB7ZTtiXyvA2GS4SeFow/uDQK\nh4COGA9OoXFM+WAt+hFmG+yBbBhTbboyDVf8kX7eN9KxJot+/Q0cRWJQy/7dAGkf\nQQDepBmf7c4hrJtc/6Q22awwYngGxgPsVHDc+oxlQ54gT6dzezBLA1jLyAsXQMWF\nZ7lcvk6DjAFV0M4MNbkm5EeYWah7Runn783hlt/Hj7Yb6dR9icHQAu10tv8ThVp/\nfMM+30y4PyPIo2HIDMjHNsoPbjD22rm+HOBKFrxhkPKN5OiCIR+idAsClbNfaEo1\nwtOgWecN2/9OMkQ4uKC8Dl3HgQ162Q==\n=sjBi\n-----END PGP SIGNATURE-----", "payload": "tree 959f706d4f2edc94228faeb5a182ff921c1b26a9\nparent 961c2aac7fd1050e1dc1c11f78c10579c7d24164\nauthor Martin Liska <mliska@suse.cz> 1590751301 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590751349 +0200\n\nPort bugzilla-close-candidate script to git.\n\nmaintainer-scripts/ChangeLog:\n\n\t* bugzilla-close-candidate.py: Support both SVN and GIT messages\n\tin PRs. Remove need of usage of the bugzilla API key.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92716b2b1d117a803775a2e2336b751050ff7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92716b2b1d117a803775a2e2336b751050ff7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92716b2b1d117a803775a2e2336b751050ff7c2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961c2aac7fd1050e1dc1c11f78c10579c7d24164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961c2aac7fd1050e1dc1c11f78c10579c7d24164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961c2aac7fd1050e1dc1c11f78c10579c7d24164"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "dfd67ac1cbbfc4f43ea6b0d1615fd720a74cc9bf", "filename": "maintainer-scripts/bugzilla-close-candidate.py", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92716b2b1d117a803775a2e2336b751050ff7c2/maintainer-scripts%2Fbugzilla-close-candidate.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92716b2b1d117a803775a2e2336b751050ff7c2/maintainer-scripts%2Fbugzilla-close-candidate.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fbugzilla-close-candidate.py?ref=c92716b2b1d117a803775a2e2336b751050ff7c2", "patch": "@@ -1,19 +1,19 @@\n #!/usr/bin/env python3\n \n-# The script is used for finding PRs that have a SVN revision that\n+# The script is used for finding PRs that have a GIT revision that\n # mentiones the PR and are not closed.  It's done by iterating all\n-# comments of a PR and finding SVN commit entries.\n+# comments of a PR and finding GIT commit entries.\n \n \"\"\"\n Sample output of the script:\n Bugzilla URL page size: 50\n HINT: bugs with following comment are ignored: Can the bug be marked as resolved?\n \n-Bug URL                                              SVN commits                   known-to-fail                           known-to-work                           Bug summary                                                 \n-https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88129   trunk                                                                                                         Two blockage insns are emited in the function epilogue      \n-https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88122   trunk                                                                                                         [9 Regression] g++ ICE: internal compiler error: Segmentation fault\n-https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88084   trunk                                                                                                         basic_string_view::copy doesn't use Traits::copy            \n-https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88083   trunk                                                                                                         ICE in find_constant_pool_ref_1, at config/s390/s390.c:8231 \n+Bug URL                                              GIT commits                   known-to-fail                           known-to-work                           Bug summary\n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88129   master                                                                                                        Two blockage insns are emited in the function epilogue\n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88122   master                                                                                                        [9 Regression] g++ ICE: internal compiler error: Segmentation fault\n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88084   master                                                                                                        basic_string_view::copy doesn't use Traits::copy\n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88083   master                                                                                                        ICE in find_constant_pool_ref_1, at config/s390/s390.c:8231\n ...\n Bugzilla lists:\n https://gcc.gnu.org/bugzilla/buglist.cgi?bug_id=88129,88122,88084,88083,88074,88073,88071,88070,88051,88018,87985,87955,87926,87917,87913,87898,87895,87874,87871,87855,87853,87826,87824,87819,87818,87799,87793,87789,87788,87787,87754,87725,87674,87665,87649,87647,87645,87625,87611,87610,87598,87593,87582,87566,87556,87547,87544,87541,87537,87528\n@@ -36,37 +36,46 @@ def get_branches_by_comments(comments):\n     versions = set()\n     for c in comments:\n         text = c['text']\n-        if 'URL: https://gcc.gnu.org/viewcvs' in text:\n-            version = 'trunk'\n-            for l in text.split('\\n'):\n-                if 'branches/gcc-' in l:\n-                    parts = l.strip().split('/')\n+        lines = text.split('\\n')\n+        for line in lines:\n+            if 'URL: https://gcc.gnu.org/viewcvs' in line:\n+                version = 'master'\n+                if 'branches/gcc-' in line:\n+                    parts = line.strip().split('/')\n                     parts = parts[1].split('-')\n                     assert len(parts) == 3\n                     versions.add(parts[1])\n-            versions.add(version)\n+                versions.add(version)\n+            elif line.startswith('The ') and 'branch has been updated' in line:\n+                version = 'master'\n+                name = line.strip().split(' ')[1]\n+                if '/' in name:\n+                    name = name.split('/')[1]\n+                    assert '-' in name\n+                    version = name.split('-')[1]\n+                versions.add(version)\n     return versions\n \n-def get_bugs(api_key, query):\n+def get_bugs(query):\n     u = base_url + 'bug'\n     r = requests.get(u, params = query)\n     return r.json()['bugs']\n \n-def search(api_key):\n+def search():\n     chunk = 1000\n     ids = []\n-    print('%-53s%-30s%-40s%-40s%-60s' % ('Bug URL', 'SVN commits', 'known-to-fail', 'known-to-work', 'Bug summary'))\n+    print('%-30s%-30s%-40s%-40s%-60s' % ('Bug URL', 'GIT commits', 'known-to-fail', 'known-to-work', 'Bug summary'))\n     for i in range(start_page, 0, -1):\n         # print('offset: %d' % (i * chunk), flush = True)\n-        bugs = get_bugs(api_key, {'api_key': api_key, 'bug_status': statuses, 'limit': chunk, 'offset': i * chunk})\n+        bugs = get_bugs({'bug_status': statuses, 'limit': chunk, 'offset': i * chunk})\n         for b in sorted(bugs, key = lambda x: x['id'], reverse = True):\n             id = b['id']\n \n             fail = b['cf_known_to_fail']\n             work = b['cf_known_to_work']\n \n             u = base_url + 'bug/' + str(id) + '/comment'\n-            r = requests.get(u, params = {'api_key': api_key} ).json()\n+            r = requests.get(u).json()\n             keys = list(r['bugs'].keys())\n             assert len(keys) == 1\n             comments = r['bugs'][keys[0]]['comments']\n@@ -77,7 +86,7 @@ def search(api_key):\n             branches = get_branches_by_comments(comments)\n             if len(branches):\n                 branches_str = ','.join(sorted(list(branches)))\n-                print('%-53s%-30s%-40s%-40s%-60s' % ('https://gcc.gnu.org/bugzilla/show_bug.cgi?id=%d' % id, branches_str, fail, work, b['summary']))\n+                print('%-30s%-30s%-40s%-40s%-60s' % ('https://gcc.gnu.org/PR%d' % id, branches_str, fail, work, b['summary']), flush=True)\n                 ids.append(id)\n \n     # print all URL lists\n@@ -90,7 +99,6 @@ def search(api_key):\n print('HINT: bugs with following comment are ignored: %s\\n' % closure_question)\n \n parser = argparse.ArgumentParser(description='')\n-parser.add_argument('api_key', help = 'API key')\n \n args = parser.parse_args()\n-search(args.api_key)\n+search()"}]}