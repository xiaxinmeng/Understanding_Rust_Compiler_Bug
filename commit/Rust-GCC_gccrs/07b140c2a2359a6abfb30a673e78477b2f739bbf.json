{"sha": "07b140c2a2359a6abfb30a673e78477b2f739bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiMTQwYzJhMjM1OWE2YWJmYjMwYTY3M2U3ODQ3N2IyZjczOWJiZg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-12-16T12:10:59Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-12-16T12:10:59Z"}, "message": "[Testsuite] Support ARMv8.1 ARM tests.\n\n\ttestsuite/\n\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): Update\n\tcomment.  Use check_effective_target_arm_v8_1a_neon_ok to select\n\tthe command line options.\n\t(check_effective_target_arm_v8_1a_neon_ok_nocache): Update initial\n\ttest to allow ARM targets.  Select and record a working set of\n\tcommand line options.\n\t(check_effective_target_arm_v8_1a_neon_hw): Add tests for ARM\n\ttargets.\n\n\tgcc/\n\t* doc/sourcebuild.texi (ARM-specific attributes): Add\n\t\"arm_v8_1a_neon_ok\" and \"arm_v8_1a_neon_hw\".\n\nFrom-SVN: r231683", "tree": {"sha": "16907b279f1b9093339e57fefa208aa42675d412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16907b279f1b9093339e57fefa208aa42675d412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b140c2a2359a6abfb30a673e78477b2f739bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b140c2a2359a6abfb30a673e78477b2f739bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b140c2a2359a6abfb30a673e78477b2f739bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b140c2a2359a6abfb30a673e78477b2f739bbf/comments", "author": null, "committer": null, "parents": [{"sha": "c48083824abcf22864f846c1b735ef6318badd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c48083824abcf22864f846c1b735ef6318badd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c48083824abcf22864f846c1b735ef6318badd26"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "a28614cb5e8248c27c8fb67cd48940a3fda539b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07b140c2a2359a6abfb30a673e78477b2f739bbf", "patch": "@@ -1,3 +1,8 @@\n+2015-12-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* doc/sourcebuild.texi (ARM-specific attributes): Add\n+\t\"arm_v8_1a_neon_ok\" and \"arm_v8_1a_neon_hw\".\n+\n 2015-12-16  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-c.c (arm_cpu_builtins): Define"}, {"sha": "cd49e6d8a93f18c6f505d765601ac5fd87e60255", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=07b140c2a2359a6abfb30a673e78477b2f739bbf", "patch": "@@ -1582,6 +1582,15 @@ Some multilibs may be incompatible with these options.\n ARM target supports @code{-mfpu=neon-fp-armv8 -mfloat-abi=softfp}.\n Some multilibs may be incompatible with these options.\n \n+@item arm_v8_1a_neon_ok\n+ARM target supports options to generate ARMv8.1 Adv.SIMD instructions.\n+Some multilibs may be incompatible with these options.\n+\n+@item arm_v8_1a_neon_hw\n+ARM target supports executing ARMv8.1 Adv.SIMD instructions.  Some\n+multilibs may be incompatible with the options needed.  Implies\n+arm_v8_1a_neon_ok.\n+\n @item arm_prefer_ldrd_strd\n ARM target prefers @code{LDRD} and @code{STRD} instructions over\n @code{LDM} and @code{STM} instructions."}, {"sha": "99fc42b0ade852f0a8c7c71fbbe695ce8c63f4c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07b140c2a2359a6abfb30a673e78477b2f739bbf", "patch": "@@ -1,3 +1,14 @@\n+2015-12-16  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): Update\n+\tcomment.  Use check_effective_target_arm_v8_1a_neon_ok to select\n+\tthe command line options.\n+\t(check_effective_target_arm_v8_1a_neon_ok_nocache): Update initial\n+\ttest to allow ARM targets.  Select and record a working set of\n+\tcommand line options.\n+\t(check_effective_target_arm_v8_1a_neon_hw): Add tests for ARM\n+\ttargets.\n+\n 2015-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/68648"}, {"sha": "3184775e94ef8e96f50c8c46621fe4e572cc9772", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b140c2a2359a6abfb30a673e78477b2f739bbf/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=07b140c2a2359a6abfb30a673e78477b2f739bbf", "patch": "@@ -2830,14 +2830,15 @@ proc add_options_for_arm_v8_neon { flags } {\n     return \"$flags $et_arm_v8_neon_flags -march=armv8-a\"\n }\n \n-# Add the options needed for ARMv8.1 Adv.SIMD.\n+# Add the options needed for ARMv8.1 Adv.SIMD.  Also adds the ARMv8 NEON\n+# options for AArch64 and for ARM.\n \n proc add_options_for_arm_v8_1a_neon { flags } {\n-    if { [istarget aarch64*-*-*] } {\n-\treturn \"$flags -march=armv8.1-a\"\n-    } else {\n+    if { ! [check_effective_target_arm_v8_1a_neon_ok] } {\n \treturn \"$flags\"\n     }\n+    global et_arm_v8_1a_neon_flags\n+    return \"$flags $et_arm_v8_1a_neon_flags -march=armv8.1-a\"\n }\n \n proc add_options_for_arm_crc { flags } {\n@@ -3285,17 +3286,33 @@ proc check_effective_target_arm_neonv2_hw { } {\n }\n \n # Return 1 if the target supports the ARMv8.1 Adv.SIMD extension, 0\n-# otherwise.  The test is valid for AArch64.\n+# otherwise.  The test is valid for AArch64 and ARM.  Record the command\n+# line options needed.\n \n proc check_effective_target_arm_v8_1a_neon_ok_nocache { } {\n-    if { ![istarget aarch64*-*-*] } {\n-\treturn 0\n+    global et_arm_v8_1a_neon_flags\n+    set et_arm_v8_1a_neon_flags \"\"\n+\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n+\treturn 0;\n     }\n-    return [check_no_compiler_messages_nocache arm_v8_1a_neon_ok assembly {\n-\t#if !defined (__ARM_FEATURE_QRDMX)\n-\t#error \"__ARM_FEATURE_QRDMX not defined\"\n-\t#endif\n-    } [add_options_for_arm_v8_1a_neon \"\"]]\n+\n+    # Iterate through sets of options to find the compiler flags that\n+    # need to be added to the -march option.  Start with the empty set\n+    # since AArch64 only needs the -march setting.\n+    foreach flags {\"\" \"-mfpu=neon-fp-armv8\" \"-mfloat-abi=softfp\" \\\n+\t\t       \"-mfpu=neon-fp-armv8 -mfloat-abi=softfp\"} {\n+\tif { [check_no_compiler_messages_nocache arm_v8_1a_neon_ok object {\n+\t    #if !defined (__ARM_FEATURE_QRDMX)\n+\t    #error \"__ARM_FEATURE_QRDMX not defined\"\n+\t    #endif\n+\t} \"$flags -march=armv8.1-a\"] } {\n+\t    set et_arm_v8_1a_neon_flags \"$flags -march=armv8.1-a\"\n+\t    return 1\n+\t}\n+    }\n+\n+    return 0;\n }\n \n proc check_effective_target_arm_v8_1a_neon_ok { } {\n@@ -3322,16 +3339,17 @@ proc check_effective_target_arm_v8_neon_hw { } {\n }\n \n # Return 1 if the target supports executing the ARMv8.1 Adv.SIMD extension, 0\n-# otherwise.  The test is valid for AArch64.\n+# otherwise.  The test is valid for AArch64 and ARM.\n \n proc check_effective_target_arm_v8_1a_neon_hw { } {\n     if { ![check_effective_target_arm_v8_1a_neon_ok] } {\n \treturn 0;\n     }\n-    return [check_runtime_nocache arm_v8_1a_neon_hw_available {\n+    return [check_runtime arm_v8_1a_neon_hw_available {\n \tint\n \tmain (void)\n \t{\n+\t  #ifdef __ARM_ARCH_ISA_A64\n \t  __Int32x2_t a = {0, 1};\n \t  __Int32x2_t b = {0, 2};\n \t  __Int32x2_t result;\n@@ -3341,9 +3359,21 @@ proc check_effective_target_arm_v8_1a_neon_hw { } {\n \t       : \"w\"(a), \"w\"(b)\n \t       : /* No clobbers.  */);\n \n+\t  #else\n+\n+\t  __simd64_int32_t a = {0, 1};\n+\t  __simd64_int32_t b = {0, 2};\n+\t  __simd64_int32_t result;\n+\n+\t  asm (\"vqrdmlah.s32 %P0, %P1, %P2\"\n+\t       : \"=w\"(result)\n+\t       : \"w\"(a), \"w\"(b)\n+\t       : /* No clobbers.  */);\n+\t  #endif\n+\n \t  return result[0];\n \t}\n-    }  [add_options_for_arm_v8_1a_neon \"\"]]\n+    } [add_options_for_arm_v8_1a_neon \"\"]]\n }\n \n # Return 1 if this is a ARM target with NEON enabled."}]}