{"sha": "b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3Y2E0ZDEwYmE2Y2U1OTY2YWE2ZTRiMDE5NjZiY2RjNDNhMzE4MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-07-15T16:50:31Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-07-15T16:50:31Z"}, "message": "diagnostic.c (doing_line_wrapping, [...]): Remove.\n\n2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* diagnostic.c (doing_line_wrapping, line_wrapper_printf, notice,\n\tv_error_with_decl, v_warning_with_decl, v_pedwarn_with_decl): Remove.\n\t(v_message_with_decl): Rename to ...\n\t(format_with_decl): ... this. Tweak\n\t(diagnostic_for_decl): New function.\n\t(fatal_io_error): Use verbatim in lieu of notice.\n\t(announce_function): Use verbatim.\n\t(default_print_error_function): Likewise.\n\t(error_with_decl, warning_with_decl, pedwarn_with_decl): Use new\n\tinfratructure.\n\nFrom-SVN: r35048", "tree": {"sha": "6a5e4d9d44774be1c2c978a2323a0134ed1a3ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5e4d9d44774be1c2c978a2323a0134ed1a3ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181/comments", "author": null, "committer": null, "parents": [{"sha": "404e48547ae0ddd515fa0615eebd8449e7741c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404e48547ae0ddd515fa0615eebd8449e7741c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404e48547ae0ddd515fa0615eebd8449e7741c98"}], "stats": {"total": 326, "additions": 84, "deletions": 242}, "files": [{"sha": "b428538437b5e3739b81c0edc8e37b1e67d63fec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "patch": "@@ -1,3 +1,16 @@\n+2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.c (doing_line_wrapping, line_wrapper_printf, notice,\n+\tv_error_with_decl, v_warning_with_decl, v_pedwarn_with_decl): Remove. \n+\t(v_message_with_decl): Rename to ...\n+\t(format_with_decl): ... this. Tweak\n+\t(diagnostic_for_decl): New function.\n+\t(fatal_io_error): Use verbatim in lieu of notice.\n+\t(announce_function): Use verbatim.\n+\t(default_print_error_function): Likewise.\n+\t(error_with_decl, warning_with_decl, pedwarn_with_decl): Use new\n+\tinfratructure. \n+\n 2000-07-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mips.c (function_arg_pass_by_reference): Don't do automatic"}, {"sha": "4294ba5da3953f4a57f937319a98b45874e7c1ce", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 71, "deletions": 242, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "patch": "@@ -62,8 +62,6 @@ Boston, MA 02111-1307, USA.  */\n #define diagnostic_msg output_buffer_text_cursor (diagnostic_buffer)\n \n /* Prototypes. */\n-static int doing_line_wrapping PARAMS ((void));\n-\n static void finish_diagnostic PARAMS ((void));\n static void output_do_verbatim PARAMS ((output_buffer *,\n                                         const char *, va_list));\n@@ -75,16 +73,10 @@ static char *build_message_string PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n static char *context_as_prefix PARAMS ((const char *, int, int));\n static void output_do_printf PARAMS ((output_buffer *, const char *));\n-static void line_wrapper_printf PARAMS ((FILE *, const char *, ...))\n-     ATTRIBUTE_PRINTF_2;\n-static void notice PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n-static void v_message_with_decl PARAMS ((tree, int, const char *, va_list));\n+static void format_with_decl PARAMS ((output_buffer *, tree));\n static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list, int));\n-static void v_error_with_decl PARAMS ((tree, const char *, va_list));\n-static void v_warning_with_decl PARAMS ((tree, const char *, va_list));\n-static void v_pedwarn_with_decl PARAMS ((tree, const char *, va_list));\n-static void report_file_and_line PARAMS ((const char *, int, int));\n+static void diagnostic_for_decl PARAMS ((tree, const char *, va_list, int));\n static void vnotice PARAMS ((FILE *, const char *, va_list));\n static void set_real_maximum_length PARAMS ((output_buffer *));\n                                           \n@@ -158,14 +150,6 @@ initialize_diagnostics ()\n   default_initialize_buffer (diagnostic_buffer);\n }\n \n-/* Predicate. Return 1 if we're in automatic line wrapping mode.  */\n-\n-static int\n-doing_line_wrapping ()\n-{\n-  return diagnostic_message_length_per_line > 0;\n-}\n-\n void\n set_message_prefixing_rule (rule)\n      int rule;\n@@ -567,8 +551,8 @@ output_to_stream (buffer, file)\n    specifiers are recognized as  being language independent:\n    %d, %i: (signed) integer in base ten.\n    %u: unsigned integer in base ten.\n-   %o: (signed) integer in base eight.\n-   %x: (signged) integer in base sixteen.\n+   %o: unsigned integer in base eight.\n+   %x: unsigned integer in base sixteen.\n    %ld, %li, %lo, %lu, %lx: long versions of the above.\n    %c: character.\n    %s: string.\n@@ -790,33 +774,6 @@ output_printf VPARAMS ((struct output_buffer *buffer, const char *msgid, ...))\n   va_end (ap);\n }\n \n-\n-/* Format a MESSAGE into FILE.  Do line wrapping, starting new lines\n-   with PREFIX.  */\n-\n-static void\n-line_wrapper_printf VPARAMS ((FILE *file, const char *msgid, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  FILE *file;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-  output_buffer buffer;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  file = va_arg (ap, FILE *);\n-  msgid = va_arg (ap, const char *);\n-#endif  \n-  default_initialize_buffer (&buffer);\n-  output_buffer_ptr_to_format_args (&buffer) = &ap;\n-  output_do_printf (&buffer, msgid);\n-  output_to_stream (&buffer, file);\n-  va_end (ap);\n-}\n-\n /* Print the message MSGID in FILE.  */\n \n static void\n@@ -828,71 +785,19 @@ vnotice (file, msgid, ap)\n   vfprintf (file, _(msgid), ap);\n }\n \n-/* Print MSGID on stderr.  */\n-\n-static void\n-notice VPARAMS ((const char *msgid, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, char *);\n-#endif\n-\n-  vnotice (stderr, msgid, ap);\n-  va_end (ap);\n-}\n-\n-/* Report FILE and LINE (or program name), and optionally just WARN.  */\n-\n-static void\n-report_file_and_line (file, line, warn)\n-     const char *file;\n-     int line;\n-     int warn;\n-{\n-  if (file)\n-    fprintf (stderr, \"%s:%d: \", file, line);\n-  else\n-    fprintf (stderr, \"%s: \", progname);\n-\n-  if (warn)\n-    notice (\"warning: \");\n-}\n-\n /* Print a message relevant to the given DECL.  */\n \n static void\n-v_message_with_decl (decl, warn, msgid, ap)\n+format_with_decl (buffer, decl)\n+     output_buffer *buffer;\n      tree decl;\n-     int warn;\n-     const char *msgid;\n-     va_list ap;\n {\n   const char *p;\n-  output_buffer buffer;\n-\n-  if (doing_line_wrapping ())\n-    {\n-      init_output_buffer\n-        (&buffer, context_as_prefix\n-         (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn),\n-         diagnostic_message_length_per_line);\n-    }\n-  else\n-    report_file_and_line (DECL_SOURCE_FILE (decl),\n-                          DECL_SOURCE_LINE (decl), warn);\n-\n+  \n   /* Do magic to get around lack of varargs support for insertion\n      of arguments into existing list.  We know that the decl is first;\n      we ass_u_me that it will be printed with \"%s\".  */\n-\n-  for (p = _(msgid); *p; ++p)\n+  for (p = output_buffer_text_cursor (buffer); *p; ++p)\n     {\n       if (*p == '%')\n \t{\n@@ -905,23 +810,15 @@ v_message_with_decl (decl, warn, msgid, ap)\n \t}\n     }\n \n-  if (p > _(msgid))\t\t\t/* Print the left-hand substring.  */\n-    {\n-      if (doing_line_wrapping ())\n-        output_printf (&buffer, \"%.*s\", (int)(p - _(msgid)), _(msgid));\n-      else\n-        fprintf (stderr, \"%.*s\", (int)(p - _(msgid)), _(msgid));\n-    }\n-\n+  /* Print the left-hand substring.  */\n+  maybe_wrap_text (buffer, output_buffer_text_cursor (buffer), p);\n+  \n   if (*p == '%')\t\t/* Print the name.  */\n     {\n       const char *n = (DECL_NAME (decl)\n \t\t ? (*decl_printable_name) (decl, 2)\n \t\t : _(\"((anonymous))\"));\n-      if (doing_line_wrapping ())\n-        output_add_string (&buffer, n);\n-      else\n-        fputs (n, stderr);\n+      output_add_string (buffer, n);\n       while (*p)\n \t{\n \t  ++p;\n@@ -932,22 +829,9 @@ v_message_with_decl (decl, warn, msgid, ap)\n \n   if (*p)\t\t\t/* Print the rest of the message.  */\n     {\n-      if (doing_line_wrapping ())\n-        {\n-          output_buffer_ptr_to_format_args (&buffer) = &ap;\n-          output_do_printf (&buffer, p);\n-        }\n-      else\n-        vfprintf (stderr, p, ap);\n+      output_buffer_text_cursor (buffer) = p;\n+      output_format (buffer);\n     }\n-\n-  if (doing_line_wrapping())\n-    {\n-      output_to_stream (&buffer, stderr);\n-      output_destroy_prefix (&buffer);\n-    }\n-  \n-  fputc ('\\n', stderr);\n }\n \n /* Figure file and line of the given INSN.  */\n@@ -1004,61 +888,32 @@ diagnostic_for_asm (insn, msg, args, warn)\n   report_diagnostic (msg, args, file, line, warn);\n }\n \n-/* Report an error at the declaration DECL.\n-   MSGID is a format string which uses %s to substitute the declaration\n-   name; subsequent substitutions are a la printf.  */\n-\n-static void\n-v_error_with_decl (decl, msgid, ap)\n-     tree decl;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  count_error (0);\n-  report_error_function (DECL_SOURCE_FILE (decl));\n-  v_message_with_decl (decl, 0, msgid, ap);\n-}\n-\n-/* Report a warning at the declaration DECL.\n-   MSGID is a format string which uses %s to substitute the declaration\n-   name; subsequent substitutions are a la printf.  */\n-\n+/* Report a diagnostic MESSAGE at the declaration DECL.\n+   MSG is a format string which uses %s to substitute the declaration\n+   name; subsequent substitutions are a la output_format.  */\n static void\n-v_warning_with_decl (decl, msgid, ap)\n+diagnostic_for_decl (decl, msg, args, warn)\n      tree decl;\n-     const char *msgid;\n-     va_list ap;\n-{\n-  if (count_error (1))\n-    {\n-      report_error_function (DECL_SOURCE_FILE (decl));\n-      v_message_with_decl (decl, 1, msgid, ap);\n-    }\n-}\n-\n-/* These functions issue either warnings or errors depending on\n-   -pedantic-errors.  */\n-\n-static void\n-v_pedwarn_with_decl (decl, msgid, ap)\n-     tree decl;\n-     const char *msgid;\n-     va_list ap;\n+     const char *msg;\n+     va_list args;\n+     int warn;\n {\n-  /* We don't want -pedantic-errors to cause the compilation to fail from\n-     \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n-     broken (eg: unsigned char bitfields - fixing it may change the alignment\n-     which will cause programs to mysteriously fail because the C library\n-     or kernel uses the original layout).  There's no point in issuing a\n-     warning either, it's just unnecessary noise.  */\n+  output_state os;\n \n-  if (! DECL_IN_SYSTEM_HEADER (decl))\n-    {\n-      if (flag_pedantic_errors)\n-\tv_error_with_decl (decl, msgid, ap);\n-      else\n-\tv_warning_with_decl (decl, msgid, ap);\n-    }\n+  if (!count_error (warn))\n+    return;\n+  os = diagnostic_buffer->state;\n+  report_error_function (DECL_SOURCE_FILE (decl));\n+  output_set_prefix\n+    (diagnostic_buffer, context_as_prefix\n+     (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn));\n+  output_buffer_ptr_to_format_args (diagnostic_buffer) = &args;\n+  output_buffer_text_cursor (diagnostic_buffer) = msg;\n+  format_with_decl (diagnostic_buffer, decl);\n+  finish_diagnostic ();\n+  output_destroy_prefix (diagnostic_buffer);\n+  \n+  diagnostic_buffer->state = os;\n }\n \n \f\n@@ -1126,7 +981,7 @@ void\n fatal_io_error (name)\n   const char *name;\n {\n-  notice (\"%s: %s: I/O error\\n\", progname, name);\n+  verbatim (\"%s: %s: I/O error\\n\", progname, name);\n   exit (FATAL_EXIT_CODE);\n }\n \n@@ -1165,8 +1020,14 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   decl = va_arg (ap, tree);\n   msgid = va_arg (ap, const char *);\n #endif\n-\n-  v_pedwarn_with_decl (decl, msgid, ap);\n+  /* We don't want -pedantic-errors to cause the compilation to fail from\n+     \"errors\" in system header files.  Sometimes fixincludes can't fix what's\n+     broken (eg: unsigned char bitfields - fixing it may change the alignment\n+     which will cause programs to mysteriously fail because the C library\n+     or kernel uses the original layout).  There's no point in issuing a\n+     warning either, it's just unnecessary noise.  */\n+  if (!DECL_IN_SYSTEM_HEADER (decl))\n+    diagnostic_for_decl (decl, msgid, ap, !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1232,15 +1093,9 @@ announce_function (decl)\n   if (! quiet_flag)\n     {\n       if (rtl_dump_and_exit)\n-\tfprintf (stderr, \"%s \", IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\tverbatim (\"%s \", IDENTIFIER_POINTER (DECL_NAME (decl)));\n       else\n-        {\n-          if (doing_line_wrapping ())\n-            line_wrapper_printf\n-              (stderr, \" %s\", (*decl_printable_name) (decl, 2));\n-          else\n-            fprintf (stderr, \" %s\", (*decl_printable_name) (decl, 2));\n-        }\n+        verbatim (\" %s\", (*decl_printable_name) (decl, 2));\n       fflush (stderr);\n       need_error_newline = 1;\n       last_error_function = current_function_decl;\n@@ -1256,57 +1111,32 @@ default_print_error_function (file)\n {\n   if (last_error_function != current_function_decl)\n     {\n-      char *prefix = NULL;\n-      output_buffer buffer;\n-      \n-      if (file)\n-        prefix = build_message_string (\"%s: \", file);\n+      char *prefix = file ? build_message_string (\"%s: \", file) : NULL;\n+      output_state os;\n \n-      if (doing_line_wrapping ())\n-        init_output_buffer\n-          (&buffer, prefix, diagnostic_message_length_per_line);\n-      else\n-        {\n-          if (file)\n-            fprintf (stderr, \"%s: \", file);\n-        }\n+      os = diagnostic_buffer->state;\n+      output_set_prefix (diagnostic_buffer, prefix);\n       \n       if (current_function_decl == NULL)\n         {\n-          if (doing_line_wrapping ())\n-            output_printf (&buffer, \"At top level:\\n\");\n-          else\n-            notice (\"At top level:\\n\");\n+          output_add_string (diagnostic_buffer, \"At top level:\");\n+          output_add_newline (diagnostic_buffer);\n         }\n       else\n \t{\n \t  if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n-            {\n-              if (doing_line_wrapping ())\n-                output_printf\n-                  (&buffer, \"In method `%s':\\n\",\n-                   (*decl_printable_name) (current_function_decl, 2));\n-              else\n-                notice (\"In method `%s':\\n\",\n-                        (*decl_printable_name) (current_function_decl, 2));\n-            }\n+            output_printf\n+              (diagnostic_buffer, \"In method `%s':\\n\",\n+               (*decl_printable_name) (current_function_decl, 2));\n \t  else\n-            {\n-              if (doing_line_wrapping ())\n-                output_printf\n-                  (&buffer, \"In function `%s':\\n\",\n-                   (*decl_printable_name) (current_function_decl, 2));\n-              else\n-                notice (\"In function `%s':\\n\",\n-                        (*decl_printable_name) (current_function_decl, 2));\n-            }\n+            output_printf\n+              (diagnostic_buffer, \"In function `%s':\\n\",\n+               (*decl_printable_name) (current_function_decl, 2));\n \t}\n \n       last_error_function = current_function_decl;\n-\n-      if (doing_line_wrapping ())\n-        output_to_stream (&buffer, stderr);\n-      \n+      output_to_stream (diagnostic_buffer, stderr);\n+      diagnostic_buffer->state = os;\n       free ((char*) prefix);\n     }\n }\n@@ -1381,7 +1211,7 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_error_with_decl (decl, msgid, ap);\n+  diagnostic_for_decl (decl, msgid, ap, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1526,7 +1356,7 @@ warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  v_warning_with_decl (decl, msgid, ap);\n+  diagnostic_for_decl (decl, msgid, ap, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1651,17 +1481,16 @@ report_diagnostic (msg, args, file, line, warn)\n {\n   output_state os;\n \n+  if (!count_error (warn))\n+    return;\n   os = diagnostic_buffer->state;\n   diagnostic_msg = msg;\n   diagnostic_args = &args;\n-  if (count_error (warn))\n-    {\n-      report_error_function (file);\n-      output_set_prefix\n-        (diagnostic_buffer, context_as_prefix (file, line, warn));\n-      output_format (diagnostic_buffer);\n-      finish_diagnostic();\n-      output_destroy_prefix (diagnostic_buffer);\n-    }\n+  report_error_function (file);\n+  output_set_prefix\n+    (diagnostic_buffer, context_as_prefix (file, line, warn));\n+  output_format (diagnostic_buffer);\n+  finish_diagnostic ();\n+  output_destroy_prefix (diagnostic_buffer);\n   diagnostic_buffer->state = os;\n }"}]}