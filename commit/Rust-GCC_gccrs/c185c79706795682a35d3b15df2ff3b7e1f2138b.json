{"sha": "c185c79706795682a35d3b15df2ff3b7e1f2138b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4NWM3OTcwNjc5NTY4MmEzNWQzYjE1ZGYyZmYzYjdlMWYyMTM4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-01-25T09:10:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-01-25T09:10:56Z"}, "message": "rtl.texi (SYMBOL_REF_CONSTANT, [...]): Document.\n\n\t* doc/rtl.texi (SYMBOL_REF_CONSTANT, SYMBOL_REF_DATA): Document.\n\t* gengtype.c (adjust_field_rtx_def): Garbage-collect field 2 of\n\ta SYMBOL_REF as either a tree or a constant_descriptor_rtx,\n\tdepending on the value of CONSTANT_POOL_ADDRESS_P.\n\t* optabs.c (init_one_libfunc): Nullify SYMBOL_REF_DATA rather than\n\tSYMBOL_REF_DECL.\n\t* varasm.c (make_decl_rtl, build_constant_desc): Set SYMBOL_REF_DATA\n\trather than SYMBOL_REF_DECL.\n\t(rtx_constant_pool): Remove const_rtx_sym_htab.\n\t(const_desc_rtx_sym_hash, const_desc_rtx_sym_eq): Delete.\n\t(init_varasm_status): Don't initialize const_rtx_sym_htab.\n\t(force_const_mem): Point SYMBOL_REF_DATA to the constant pool entry.\n\tRemove handling of const_rtx_sym_htab.\n\t(find_pool_constant): Delete.\n\t(get_pool_constant, get_pool_constant_mark): Use SYMBOL_REF_CONSTANT\n\trather than find_pool_constant.\n\t(get_pool_constant_for_function): Delete.\n\t(get_pool_mode, mark_constant): Use SYMBOL_REF_CONSTANT rather than\n\tfind_pool_constant. \n\t* rtl.h (rtunion_def): Add rt_constant and rt_ptr fields.\n\t(X0CONSTANT, X0PTR, SYMBOL_REF_DATA): New macros.\n\t(SYMBOL_REF_DECL): Return NULL if CONSTANT_POOL_ADDRESS_P.\n\t(SYMBOL_REF_CONSTANT): New macro.\n\t(get_pool_constant_for_function): Delete.\n\t* config/i386/winnt.c (i386_pe_mark_dllexport): Set SYMBOL_REF_DATA\n\trather than SYMBOL_REF_DECL.\n\t(i386_pe_mark_dllimport): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Copy SYMBOL_REF_DATA\n\trather than SYMBOL_REF_DECL.\n\t* config/darwin.c (machopic_indirect_data_reference): Likewise.\n\t(machopic_indirect_call_target): Likewise.\n\nFrom-SVN: r110210", "tree": {"sha": "9ec01d7044846a0ba35c49e3628382ad19db08d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec01d7044846a0ba35c49e3628382ad19db08d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c185c79706795682a35d3b15df2ff3b7e1f2138b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c185c79706795682a35d3b15df2ff3b7e1f2138b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c185c79706795682a35d3b15df2ff3b7e1f2138b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c185c79706795682a35d3b15df2ff3b7e1f2138b/comments", "author": null, "committer": null, "parents": [{"sha": "14c1a9d75ed4be5d79d3cc47cd49dfba36bd9967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c1a9d75ed4be5d79d3cc47cd49dfba36bd9967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c1a9d75ed4be5d79d3cc47cd49dfba36bd9967"}], "stats": {"total": 117, "additions": 56, "deletions": 61}, "files": [{"sha": "05de707b8ff3cac6f28e510e2aeb294abc70b918", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -559,7 +559,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t\t (Pmode,\n \t\t  machopic_indirection_name (orig, /*stub_p=*/false)));\n \n-      SYMBOL_REF_DECL (ptr_ref) = SYMBOL_REF_DECL (orig);\n+      SYMBOL_REF_DATA (ptr_ref) = SYMBOL_REF_DATA (orig);\n \n       ptr_ref = gen_const_mem (Pmode, ptr_ref);\n       machopic_define_symbol (ptr_ref);\n@@ -642,10 +642,9 @@ machopic_indirect_call_target (rtx target)\n       const char *stub_name = machopic_indirection_name (sym_ref,\n \t\t\t\t\t\t\t /*stub_p=*/true);\n       enum machine_mode mode = GET_MODE (sym_ref);\n-      tree decl = SYMBOL_REF_DECL (sym_ref);\n \n       XEXP (target, 0) = gen_rtx_SYMBOL_REF (mode, stub_name);\n-      SYMBOL_REF_DECL (XEXP (target, 0)) = decl;\n+      SYMBOL_REF_DATA (XEXP (target, 0)) = SYMBOL_REF_DATA (sym_ref);\n       MEM_READONLY_P (target) = 1;\n       MEM_NOTRAP_P (target) = 1;\n     }"}, {"sha": "711766c84f510077f1619a65312d9fe80954f512", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -229,7 +229,7 @@ i386_pe_mark_dllexport (tree decl)\n   idp = get_identifier (newname);\n \n   symref = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n-  SYMBOL_REF_DECL (symref) = decl;\n+  SYMBOL_REF_DATA (symref) = decl;\n   XEXP (DECL_RTL (decl), 0) = symref;\n }\n \n@@ -274,7 +274,7 @@ i386_pe_mark_dllimport (tree decl)\n   idp = get_identifier (newname);\n \n   symref = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n-  SYMBOL_REF_DECL (symref) = decl;\n+  SYMBOL_REF_DATA (symref) = decl;\n   newrtl = gen_rtx_MEM (Pmode,symref);\n   XEXP (DECL_RTL (decl), 0) = newrtl;\n "}, {"sha": "cba6cb7b4969b3b03a06e9ebdb321e53f8026e52", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -4002,7 +4002,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t= CONSTANT_POOL_ADDRESS_P (operands[1]);\n \t      SYMBOL_REF_FLAGS (new_ref) = SYMBOL_REF_FLAGS (operands[1]);\n \t      SYMBOL_REF_USED (new_ref) = SYMBOL_REF_USED (operands[1]);\n-\t      SYMBOL_REF_DECL (new_ref) = SYMBOL_REF_DECL (operands[1]);\n+\t      SYMBOL_REF_DATA (new_ref) = SYMBOL_REF_DATA (operands[1]);\n \t      operands[1] = new_ref;\n \t    }\n "}, {"sha": "610261694b6d739285edfa8966200493fc04d6f9", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -455,6 +455,16 @@ that is, some sort of constant.  In this case, the @code{symbol_ref}\n is an entry in the per-file constant pool; again, there is no associated\n front end symbol table entry.\n \n+@findex SYMBOL_REF_CONSTANT\n+@item SYMBOL_REF_CONSTANT (@var{x})\n+If @samp{CONSTANT_POOL_ADDRESS_P (@var{x})} is true, this is the constant\n+pool entry for @var{x}.  It is null otherwise.\n+\n+@findex SYMBOL_REF_DATA\n+@item SYMBOL_REF_DATA (@var{x})\n+A @samp{void *} pointer used to store @code{SYMBOL_REF_DECL} or\n+@code{SYMBOL_REF_CONSTANT}.\n+\n @findex SYMBOL_REF_FLAGS\n @item SYMBOL_REF_FLAGS (@var{x})\n In a @code{symbol_ref}, this is used to communicate various predicates"}, {"sha": "06c965ee5685c58ac85eed6ed18c49aa887fe838", "filename": "gcc/gengtype.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -454,7 +454,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n   options_p nodot;\n   int i;\n   type_p rtx_tp, rtvec_tp, tree_tp, mem_attrs_tp, note_union_tp, scalar_tp;\n-  type_p bitmap_tp, basic_block_tp, reg_attrs_tp;\n+  type_p bitmap_tp, basic_block_tp, reg_attrs_tp, constant_tp, symbol_union_tp;\n \n   if (t->kind != TYPE_UNION)\n     {\n@@ -472,6 +472,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n   reg_attrs_tp = create_pointer (find_structure (\"reg_attrs\", 0));\n   bitmap_tp = create_pointer (find_structure (\"bitmap_element_def\", 0));\n   basic_block_tp = create_pointer (find_structure (\"basic_block_def\", 0));\n+  constant_tp = create_pointer (find_structure (\"constant_descriptor_rtx\", 0));\n   scalar_tp = create_scalar_type (\"rtunion scalar\", 14);\n \n   {\n@@ -510,6 +511,19 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n     note_union_tp = new_structure (\"rtx_def_note_subunion\", 1,\n \t\t\t\t   &lexer_line, note_flds, NULL);\n   }\n+  /* Create a type to represent the various forms of SYMBOL_REF_DATA.  */\n+  {\n+    pair_p sym_flds;\n+\n+    sym_flds = create_field (NULL, tree_tp, \"rt_tree\");\n+    sym_flds->opt = create_option (nodot, \"default\", \"\");\n+\n+    sym_flds = create_field (sym_flds, constant_tp, \"rt_constant\");\n+    sym_flds->opt = create_option (nodot, \"tag\", \"1\");\n+\n+    symbol_union_tp = new_structure (\"rtx_def_symbol_subunion\", 1,\n+\t\t\t\t     &lexer_line, sym_flds, NULL);\n+  }\n   for (i = 0; i < NUM_RTX_CODE; i++)\n     {\n       pair_p subfields = NULL;\n@@ -562,7 +576,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t      else if (i == SYMBOL_REF && aindex == 1)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == SYMBOL_REF && aindex == 2)\n-\t\tt = tree_tp, subname = \"rt_tree\";\n+\t\tt = symbol_union_tp, subname = \"\";\n \t      else if (i == BARRIER && aindex >= 3)\n \t\tt = scalar_tp, subname = \"rt_int\";\n \t      else\n@@ -627,6 +641,9 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t  if (t == note_union_tp)\n \t    subfields->opt = create_option (subfields->opt, \"desc\",\n \t\t\t\t\t    \"NOTE_LINE_NUMBER (&%0)\");\n+\t  if (t == symbol_union_tp)\n+\t    subfields->opt = create_option (subfields->opt, \"desc\",\n+\t\t\t\t\t    \"CONSTANT_POOL_ADDRESS_P (&%0)\");\n \t}\n \n       sname = xasprintf (\"rtx_def_%s\", rtx_name[i]);"}, {"sha": "972339c6605dc8e4f2f1a492ae3de91b13d2cd66", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -5133,7 +5133,7 @@ init_one_libfunc (const char *name)\n \n   /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n      are the flags assigned by targetm.encode_section_info.  */\n-  SYMBOL_REF_DECL (symbol) = 0;\n+  SYMBOL_REF_DATA (symbol) = 0;\n \n   return symbol;\n }"}, {"sha": "03cfcb6403e3c95d620ad6f6efbc181a87e33fc7", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -171,6 +171,8 @@ union rtunion_def\n   struct basic_block_def *rt_bb;\n   mem_attrs *rt_mem;\n   reg_attrs *rt_reg;\n+  struct constant_descriptor_rtx *rt_constant;\n+  void *rt_ptr;\n };\n typedef union rtunion_def rtunion;\n \n@@ -630,6 +632,8 @@ extern void rtl_check_failed_flag (const char *, rtx, const char *,\n #define X0CSELIB(RTX, N)   (RTL_CHECK1 (RTX, N, '0').rt_cselib)\n #define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)\n #define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)\n+#define X0CONSTANT(RTX, N) (RTL_CHECK1 (RTX, N, '0').rt_constant)\n+#define X0PTR(RTX, N)      (RTL_CHECK1 (RTX, N, '0').rt_ptr)\n \n /* Access a '0' field with any type.  */\n #define X0ANY(RTX, N)\t   RTL_CHECK1 (RTX, N, '0')\n@@ -1193,8 +1197,17 @@ do {\t\t\t\t\t\t\\\n #define SYMBOL_REF_WEAK(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"SYMBOL_REF_WEAK\", (RTX), SYMBOL_REF)->return_val)\n \n+/* A pointer attached to the SYMBOL_REF; either SYMBOL_REF_DECL or\n+   SYMBOL_REF_CONSTANT.  */\n+#define SYMBOL_REF_DATA(RTX) X0PTR ((RTX), 2)\n+\n /* The tree (decl or constant) associated with the symbol, or null.  */\n-#define SYMBOL_REF_DECL(RTX)\tX0TREE ((RTX), 2)\n+#define SYMBOL_REF_DECL(RTX) \\\n+  (CONSTANT_POOL_ADDRESS_P (RTX) ? NULL : X0TREE ((RTX), 2))\n+\n+/* The rtx constant pool entry for a symbol, or null.  */\n+#define SYMBOL_REF_CONSTANT(RTX) \\\n+  (CONSTANT_POOL_ADDRESS_P (RTX) ? X0CONSTANT ((RTX), 2) : NULL)\n \n /* A set of flags on a symbol_ref that are, in some respects, redundant with\n    information derivable from the tree decl associated with this symbol.\n@@ -1417,7 +1430,6 @@ struct function;\n extern rtx get_pool_constant (rtx);\n extern rtx get_pool_constant_mark (rtx, bool *);\n extern enum machine_mode get_pool_mode (rtx);\n-extern rtx get_pool_constant_for_function (struct function *, rtx);\n extern rtx simplify_subtraction (rtx);\n \n /* In function.c  */"}, {"sha": "1a29d27804a873d5024bd1fc6353fcb9f7299a40", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 50, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c185c79706795682a35d3b15df2ff3b7e1f2138b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c185c79706795682a35d3b15df2ff3b7e1f2138b", "patch": "@@ -845,7 +845,7 @@ make_decl_rtl (tree decl)\n \n   x = gen_rtx_SYMBOL_REF (Pmode, name);\n   SYMBOL_REF_WEAK (x) = DECL_WEAK (decl);\n-  SYMBOL_REF_DECL (x) = decl;\n+  SYMBOL_REF_DATA (x) = decl;\n \n   x = gen_rtx_MEM (DECL_MODE (decl), x);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n@@ -2573,7 +2573,7 @@ build_constant_desc (tree exp)\n   /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n   symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n   SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n-  SYMBOL_REF_DECL (symbol) = desc->value;\n+  SYMBOL_REF_DATA (symbol) = desc->value;\n   TREE_CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n \n   rtl = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)), symbol);\n@@ -2751,7 +2751,6 @@ struct rtx_constant_pool GTY(())\n      constant addresses are restricted so that such constants must be stored\n      in memory.  */\n   htab_t GTY((param_is (struct constant_descriptor_rtx))) const_rtx_htab;\n-  htab_t GTY((param_is (struct constant_descriptor_rtx))) const_rtx_sym_htab;\n \n   /* Current offset in constant pool (does not include any\n      machine-specific header).  */\n@@ -2792,23 +2791,6 @@ const_desc_rtx_eq (const void *a, const void *b)\n   return rtx_equal_p (x->constant, y->constant);\n }\n \n-/* Hash and compare functions for const_rtx_sym_htab.  */\n-\n-static hashval_t\n-const_desc_rtx_sym_hash (const void *ptr)\n-{\n-  const struct constant_descriptor_rtx *desc = ptr;\n-  return htab_hash_string (XSTR (desc->sym, 0));\n-}\n-\n-static int\n-const_desc_rtx_sym_eq (const void *a, const void *b)\n-{\n-  const struct constant_descriptor_rtx *x = a;\n-  const struct constant_descriptor_rtx *y = b;\n-  return XSTR (x->sym, 0) == XSTR (y->sym, 0);\n-}\n-\n /* This is the worker function for const_rtx_hash, called via for_each_rtx.  */\n \n static int\n@@ -2912,8 +2894,6 @@ init_varasm_status (struct function *f)\n \n   pool->const_rtx_htab = htab_create_ggc (31, const_desc_rtx_hash,\n \t\t\t\t\t  const_desc_rtx_eq, NULL);\n-  pool->const_rtx_sym_htab = htab_create_ggc (31, const_desc_rtx_sym_hash,\n-\t\t\t\t\t      const_desc_rtx_sym_eq, NULL);\n   pool->first = pool->last = NULL;\n   pool->offset = 0;\n }\n@@ -2998,14 +2978,10 @@ force_const_mem (enum machine_mode mode, rtx x)\n      the constants pool.  */\n   desc->sym = symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n   SYMBOL_REF_FLAGS (symbol) = SYMBOL_FLAG_LOCAL;\n+  SYMBOL_REF_DATA (symbol) = desc;\n   CONSTANT_POOL_ADDRESS_P (symbol) = 1;\n   current_function_uses_const_pool = 1;\n \n-  /* Insert the descriptor into the symbol cross-reference table too.  */\n-  slot = htab_find_slot (pool->const_rtx_sym_htab, desc, INSERT);\n-  gcc_assert (!*slot);\n-  *slot = desc;\n-\n   /* Construct the MEM.  */\n   desc->mem = def = gen_const_mem (mode, symbol);\n   set_mem_attributes (def, lang_hooks.types.type_for_mode (mode, 0), 1);\n@@ -3019,23 +2995,12 @@ force_const_mem (enum machine_mode mode, rtx x)\n   return copy_rtx (def);\n }\n \f\n-/* Given a SYMBOL_REF with CONSTANT_POOL_ADDRESS_P true, return a pointer to\n-   the corresponding constant_descriptor_rtx structure.  */\n-\n-static struct constant_descriptor_rtx *\n-find_pool_constant (struct rtx_constant_pool *pool, rtx sym)\n-{\n-  struct constant_descriptor_rtx tmp;\n-  tmp.sym = sym;\n-  return htab_find (pool->const_rtx_sym_htab, &tmp);\n-}\n-\n /* Given a constant pool SYMBOL_REF, return the corresponding constant.  */\n \n rtx\n get_pool_constant (rtx addr)\n {\n-  return find_pool_constant (cfun->varasm->pool, addr)->constant;\n+  return SYMBOL_REF_CONSTANT (addr)->constant;\n }\n \n /* Given a constant pool SYMBOL_REF, return the corresponding constant\n@@ -3046,25 +3011,17 @@ get_pool_constant_mark (rtx addr, bool *pmarked)\n {\n   struct constant_descriptor_rtx *desc;\n \n-  desc = find_pool_constant (cfun->varasm->pool, addr);\n+  desc = SYMBOL_REF_CONSTANT (addr);\n   *pmarked = (desc->mark != 0);\n   return desc->constant;\n }\n \n-/* Likewise, but for the constant pool of a specific function.  */\n-\n-rtx\n-get_pool_constant_for_function (struct function *f, rtx addr)\n-{\n-  return find_pool_constant (f->varasm->pool, addr)->constant;\n-}\n-\n /* Similar, return the mode.  */\n \n enum machine_mode\n get_pool_mode (rtx addr)\n {\n-  return find_pool_constant (cfun->varasm->pool, addr)->mode;\n+  return SYMBOL_REF_CONSTANT (addr)->mode;\n }\n \n /* Return the size of the constant pool.  */\n@@ -3208,7 +3165,7 @@ mark_constant (rtx *current_rtx, void *data)\n \n   if (CONSTANT_POOL_ADDRESS_P (x))\n     {\n-      struct constant_descriptor_rtx *desc = find_pool_constant (pool, x);\n+      struct constant_descriptor_rtx *desc = SYMBOL_REF_CONSTANT (x);\n       if (desc->mark == 0)\n \t{\n \t  desc->mark = 1;"}]}