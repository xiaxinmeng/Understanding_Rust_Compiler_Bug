{"sha": "9dfc6c55085848a60d19825bdc0b7d345bdf8603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRmYzZjNTUwODU4NDhhNjBkMTk4MjViZGMwYjdkMzQ1YmRmODYwMw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-08-12T08:59:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:59:53Z"}, "message": "[Ada] New aspect/pragma No_Caching for analysis of volatile data\n\nA new aspect/pragma can be attached to volatile variables to indicate\nthat such a variable is not used for interactions with the external\nworld, but only that accesses to that variable should not be optimized\nby the compiler. This is in particular useful for guarding against fault\ninjection. SPARK Reference manual has been updated to allow this use of\nvolatile data, see section 7.1.2, so that GNATprove can analyze such\nvariables as not volatile.\n\n2019-08-12  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* aspects.adb, aspects.ads (Aspect_No_Caching): New aspect.\n\t* contracts.adb, contracts.ads (Add_Contract_Item): Add handling\n\tof No_Caching.\n\t(Analyze_Object_Contract): Add handling of No_Caching.\n\t* einfo.adb, einfo.ads\n\t(Get_Pragma): Add handling of No_Caching.\n\t* doc/gnat_rm/implementation_defined_aspects.rst,\n\tdoc/gnat_rm/implementation_defined_pragmas.rst: Document new\n\taspect/pragma.\n\t* gnat_rm.texi: Regenerate.\n\t* par-prag.adb (Prag): New pragma Pragma_No_Caching.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n\tCheck_Aspect_At_Freeze_Point): Add handling of No_Caching.\n\t* sem_prag.adb (Analyze_Pragma): Deal with pragma No_Caching.\n\t* sem_prag.ads (Analyze_External_Property_In_Decl_Part): Now\n\tapplies to No_Caching.\n\t* sem_util.adb, sem_util.ads (Is_Effectively_Volatile): Add\n\thandling of No_Caching.\n\t(No_Caching_Enabled): New query function.\n\t* snames.ads-tmpl: New names for pragma.\n\ngcc/testsuite/\n\n\t* gnat.dg/no_caching.adb, gnat.dg/no_caching.ads: New testcase.\n\nFrom-SVN: r274292", "tree": {"sha": "1aeb86d69692de5f00207e441462e5ade8f2c735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aeb86d69692de5f00207e441462e5ade8f2c735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dfc6c55085848a60d19825bdc0b7d345bdf8603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfc6c55085848a60d19825bdc0b7d345bdf8603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfc6c55085848a60d19825bdc0b7d345bdf8603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfc6c55085848a60d19825bdc0b7d345bdf8603/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1debd630ed40eec6db2f4aab4524fde4643b70a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1debd630ed40eec6db2f4aab4524fde4643b70a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1debd630ed40eec6db2f4aab4524fde4643b70a7"}], "stats": {"total": 1641, "additions": 928, "deletions": 713}, "files": [{"sha": "78d78ccf08570fc0c58fb79dca75157be1b841f8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -1,3 +1,26 @@\n+2019-08-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* aspects.adb, aspects.ads (Aspect_No_Caching): New aspect.\n+\t* contracts.adb, contracts.ads (Add_Contract_Item): Add handling\n+\tof No_Caching.\n+\t(Analyze_Object_Contract): Add handling of No_Caching.\n+\t* einfo.adb, einfo.ads\n+\t(Get_Pragma): Add handling of No_Caching.\n+\t* doc/gnat_rm/implementation_defined_aspects.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst: Document new\n+\taspect/pragma.\n+\t* gnat_rm.texi: Regenerate.\n+\t* par-prag.adb (Prag): New pragma Pragma_No_Caching.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications,\n+\tCheck_Aspect_At_Freeze_Point): Add handling of No_Caching.\n+\t* sem_prag.adb (Analyze_Pragma): Deal with pragma No_Caching.\n+\t* sem_prag.ads (Analyze_External_Property_In_Decl_Part): Now\n+\tapplies to No_Caching.\n+\t* sem_util.adb, sem_util.ads (Is_Effectively_Volatile): Add\n+\thandling of No_Caching.\n+\t(No_Caching_Enabled): New query function.\n+\t* snames.ads-tmpl: New names for pragma.\n+\n 2019-08-12  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb, sem_util.ads (Traverse_More_Func,"}, {"sha": "4618749d969e95e03ff825ab158744a64999cd84", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -573,6 +573,7 @@ package body Aspects is\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n     Aspect_Max_Entry_Queue_Depth        => Aspect_Max_Entry_Queue_Depth,\n     Aspect_Max_Queue_Length             => Aspect_Max_Queue_Length,\n+    Aspect_No_Caching                   => Aspect_No_Caching,\n     Aspect_No_Elaboration_Code_All      => Aspect_No_Elaboration_Code_All,\n     Aspect_No_Inline                    => Aspect_No_Inline,\n     Aspect_No_Return                    => Aspect_No_Return,"}, {"sha": "86eb72292a0c0d39a6b3d1cbc8f46bc09633777a", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -118,6 +118,7 @@ package Aspects is\n       Aspect_Machine_Radix,\n       Aspect_Max_Entry_Queue_Depth,\n       Aspect_Max_Queue_Length,              -- GNAT\n+      Aspect_No_Caching,                    -- GNAT\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Obsolescent,                   -- GNAT\n       Aspect_Output,\n@@ -376,6 +377,7 @@ package Aspects is\n       Aspect_Machine_Radix              => Expression,\n       Aspect_Max_Entry_Queue_Depth      => Expression,\n       Aspect_Max_Queue_Length           => Expression,\n+      Aspect_No_Caching                 => Optional_Expression,\n       Aspect_Object_Size                => Expression,\n       Aspect_Obsolescent                => Optional_Expression,\n       Aspect_Output                     => Name,\n@@ -486,6 +488,7 @@ package Aspects is\n       Aspect_Machine_Radix                => Name_Machine_Radix,\n       Aspect_Max_Entry_Queue_Depth        => Name_Max_Entry_Queue_Depth,\n       Aspect_Max_Queue_Length             => Name_Max_Queue_Length,\n+      Aspect_No_Caching                   => Name_No_Caching,\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n       Aspect_No_Inline                    => Name_No_Inline,\n       Aspect_No_Return                    => Name_No_Return,\n@@ -763,6 +766,7 @@ package Aspects is\n       Aspect_Initializes                  => Never_Delay,\n       Aspect_Max_Entry_Queue_Depth        => Never_Delay,\n       Aspect_Max_Queue_Length             => Never_Delay,\n+      Aspect_No_Caching                   => Never_Delay,\n       Aspect_No_Elaboration_Code_All      => Never_Delay,\n       Aspect_No_Tagged_Streams            => Never_Delay,\n       Aspect_Obsolescent                  => Never_Delay,"}, {"sha": "981bb91a424793fe3f978271c0066278a385682f", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -317,6 +317,7 @@ package body Contracts is\n       --    Effective_Reads\n       --    Effective_Writes\n       --    Global\n+      --    No_Caching\n       --    Part_Of\n \n       elsif Ekind (Id) = E_Variable then\n@@ -327,6 +328,7 @@ package body Contracts is\n                               Name_Effective_Reads,\n                               Name_Effective_Writes,\n                               Name_Global,\n+                              Name_No_Caching,\n                               Name_Part_Of)\n          then\n             Add_Classification;\n@@ -741,6 +743,7 @@ package body Contracts is\n       AW_Val   : Boolean := False;\n       ER_Val   : Boolean := False;\n       EW_Val   : Boolean := False;\n+      NC_Val   : Boolean := False;\n       Items    : Node_Id;\n       Prag     : Node_Id;\n       Ref_Elmt : Elmt_Id;\n@@ -847,6 +850,14 @@ package body Contracts is\n             Check_External_Properties (Obj_Id, AR_Val, AW_Val, ER_Val, EW_Val);\n          end if;\n \n+         --  Analyze the non-external volatility property No_Caching\n+\n+         Prag := Get_Pragma (Obj_Id, Pragma_No_Caching);\n+\n+         if Present (Prag) then\n+            Analyze_External_Property_In_Decl_Part (Prag, NC_Val);\n+         end if;\n+\n          --  The anonymous object created for a single concurrent type carries\n          --  pragmas Depends and Globat of the type.\n "}, {"sha": "ca99c3477d8ce0c78ccab1d65dce6a0ac43f5c19", "filename": "gcc/ada/contracts.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fcontracts.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fcontracts.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -50,6 +50,7 @@ package Contracts is\n    --    Initial_Condition\n    --    Initializes\n    --    Interrupt_Handler\n+   --    No_Caching\n    --    Part_Of\n    --    Postcondition\n    --    Precondition"}, {"sha": "89f6718e3333fd39c6b5a72d4c267129119c0a4c", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -370,6 +370,12 @@ Aspect Max_Queue_Length\n \n This aspect is equivalent to :ref:`pragma Max_Queue_Length<Pragma-Max_Queue_Length>`.\n \n+Aspect No_Caching\n+=================\n+.. index:: No_Caching\n+\n+This boolean aspect is equivalent to :ref:`pragma No_Caching<Pragma-No_Caching>`.\n+\n Aspect No_Elaboration_Code_All\n ==============================\n .. index:: No_Elaboration_Code_All"}, {"sha": "a4ff222e146605582a39a0f3dbb72bed961700ef", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -3881,6 +3881,20 @@ such a way that a body needed before is no longer needed. The provision of a\n dummy body with a No_Body pragma ensures that there is no interference from\n earlier versions of the package body.\n \n+.. _Pragma-No_Caching:\n+\n+Pragma No_Caching\n+=================\n+\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma No_Caching [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect ``No_Caching`` in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n+\n Pragma No_Component_Reordering\n ==============================\n \n@@ -7355,6 +7369,7 @@ validity checks as shown in the following example:\n   pragma Validity_Checks (On);  -- turn validity checks back on\n   A := C;                       -- C will be validity checked\n \n+.. _Pragma-Volatile:\n \n Pragma Volatile\n ==============="}, {"sha": "4e5681d23e0bbcc6e08a70589f457b02db0c5de6", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -7589,6 +7589,7 @@ package body Einfo is\n                  Id = Pragma_Initial_Condition          or else\n                  Id = Pragma_Initializes                or else\n                  Id = Pragma_Interrupt_Handler          or else\n+                 Id = Pragma_No_Caching                 or else\n                  Id = Pragma_Part_Of                    or else\n                  Id = Pragma_Refined_Depends            or else\n                  Id = Pragma_Refined_Global             or else"}, {"sha": "007b7d2efae992c3371fc8fc0e13110f8e7fedde", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -8429,6 +8429,7 @@ package Einfo is\n    --    Initial_Condition\n    --    Initializes\n    --    Interrupt_Handler\n+   --    No_Caching\n    --    Part_Of\n    --    Precondition\n    --    Postcondition"}, {"sha": "7de5de6ef4e7d3c793ba989e5157626b14e4eaf2", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 731, "deletions": 704, "changes": 1435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603"}, {"sha": "9042b97d3f992d7820f87302647f6c591bf4192d", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -1418,6 +1418,7 @@ begin\n          | Pragma_Max_Queue_Length\n          | Pragma_Memory_Size\n          | Pragma_No_Body\n+         | Pragma_No_Caching\n          | Pragma_No_Component_Reordering\n          | Pragma_No_Elaboration_Code_All\n          | Pragma_No_Heap_Finalization"}, {"sha": "5ec34872964e353708c28b43a9bc8401ea4ab263", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -2824,7 +2824,7 @@ package body Sem_Ch13 is\n                   Insert_Pragma (Aitem);\n                   goto Continue;\n \n-               --  Aspect Effecitve_Reads is never delayed because it is\n+               --  Aspect Effective_Reads is never delayed because it is\n                --  equivalent to a source pragma which appears after the\n                --  related object declaration.\n \n@@ -3027,6 +3027,21 @@ package body Sem_Ch13 is\n                   Insert_Pragma (Aitem);\n                   goto Continue;\n \n+               --  Aspect No_Caching is never delayed because it is equivalent\n+               --  to a source pragma which appears after the related object\n+               --  declaration.\n+\n+               when Aspect_No_Caching =>\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Loc,\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name                  => Name_No_Caching);\n+\n+                  Decorate (Aspect, Aitem);\n+                  Insert_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Obsolescent\n \n                when Aspect_Obsolescent => declare\n@@ -9637,6 +9652,7 @@ package body Sem_Ch13 is\n             | Aspect_Initializes\n             | Aspect_Max_Entry_Queue_Depth\n             | Aspect_Max_Queue_Length\n+            | Aspect_No_Caching\n             | Aspect_Obsolescent\n             | Aspect_Part_Of\n             | Aspect_Post"}, {"sha": "599ac4c963f9ed55995caf37e8aa7672278fe1f2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -2064,6 +2064,7 @@ package body Sem_Prag is\n      (N        : Node_Id;\n       Expr_Val : out Boolean)\n    is\n+      Prag_Id  : constant Pragma_Id := Get_Pragma_Id (Pragma_Name (N));\n       Arg1     : constant Node_Id   :=\n                    First (Pragma_Argument_Associations (N));\n       Obj_Decl : constant Node_Id   := Find_Related_Context (N);\n@@ -2090,9 +2091,28 @@ package body Sem_Prag is\n       --    pragma Async_Readers (Obj);\n       --    pragma Volatile (Obj);\n \n-      if not Is_Effectively_Volatile (Obj_Id) then\n-         SPARK_Msg_N\n-           (\"external property % must apply to a volatile object\", N);\n+      if Prag_Id /= Pragma_No_Caching\n+        and then not Is_Effectively_Volatile (Obj_Id)\n+      then\n+         if No_Caching_Enabled (Obj_Id) then\n+            SPARK_Msg_N\n+              (\"illegal combination of external property % and property \"\n+               & \"\"\"No_Caching\"\" (SPARK RM 7.1.2(6))\", N);\n+         else\n+            SPARK_Msg_N\n+              (\"external property % must apply to a volatile object\", N);\n+         end if;\n+\n+      --  Pragma No_Caching should only apply to volatile variables of\n+      --  a non-effectively volatile type (SPARK RM 7.1.2).\n+\n+      elsif Prag_Id = Pragma_No_Caching then\n+         if Is_Effectively_Volatile (Etype (Obj_Id)) then\n+            SPARK_Msg_N (\"property % must not apply to an object of \"\n+                         & \"an effectively volatile type\", N);\n+         elsif not Is_Volatile (Obj_Id) then\n+            SPARK_Msg_N (\"property % must apply to a volatile object\", N);\n+         end if;\n       end if;\n \n       --  Ensure that the Boolean expression (if present) is static. A missing\n@@ -13618,17 +13638,20 @@ package body Sem_Prag is\n \n          ------------------------------------------------------------------\n          -- Async_Readers/Async_Writers/Effective_Reads/Effective_Writes --\n+         --                          No_Caching                          --\n          ------------------------------------------------------------------\n \n          --  pragma Async_Readers    [ (boolean_EXPRESSION) ];\n          --  pragma Async_Writers    [ (boolean_EXPRESSION) ];\n          --  pragma Effective_Reads  [ (boolean_EXPRESSION) ];\n          --  pragma Effective_Writes [ (boolean_EXPRESSION) ];\n+         --  pragma No_Caching       [ (boolean_EXPRESSION) ];\n \n          when Pragma_Async_Readers\n             | Pragma_Async_Writers\n             | Pragma_Effective_Reads\n             | Pragma_Effective_Writes\n+            | Pragma_No_Caching\n          =>\n          Async_Effective : declare\n             Obj_Decl : Node_Id;\n@@ -31038,12 +31061,13 @@ package body Sem_Prag is\n       Pragma_Max_Entry_Queue_Depth          =>  0,\n       Pragma_Max_Queue_Length               =>  0,\n       Pragma_Memory_Size                    =>  0,\n-      Pragma_No_Return                      =>  0,\n       Pragma_No_Body                        =>  0,\n+      Pragma_No_Caching                     =>  0,\n       Pragma_No_Component_Reordering        => -1,\n       Pragma_No_Elaboration_Code_All        =>  0,\n       Pragma_No_Heap_Finalization           =>  0,\n       Pragma_No_Inline                      =>  0,\n+      Pragma_No_Return                      =>  0,\n       Pragma_No_Run_Time                    => -1,\n       Pragma_No_Strict_Aliasing             => -1,\n       Pragma_No_Tagged_Streams              =>  0,"}, {"sha": "941a72387c383125e1dbd55f66656ce209d2da43", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -218,8 +218,9 @@ package Sem_Prag is\n      (N        : Node_Id;\n       Expr_Val : out Boolean);\n    --  Perform full analysis of delayed pragmas Async_Readers, Async_Writers,\n-   --  Effective_Reads and Effective_Writes. Flag Expr_Val contains the Boolean\n-   --  argument of the pragma or a default True if no argument is present.\n+   --  Effective_Reads, Effective_Writes and No_Caching. Flag Expr_Val contains\n+   --  the Boolean argument of the pragma or a default True if no argument\n+   --  is present.\n \n    procedure Analyze_Global_In_Decl_Part (N : Node_Id);\n    --  Perform full analysis of delayed pragma Global. This routine is also"}, {"sha": "42085c7402dcd10ac5728d8fdff1564b7937ff2e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -14605,8 +14605,11 @@ package body Sem_Util is\n       --  Otherwise Id denotes an object\n \n       else\n+         --  A volatile object for which No_Caching is enabled is not\n+         --  effectively volatile.\n+\n          return\n-           Is_Volatile (Id)\n+           (Is_Volatile (Id) and then not No_Caching_Enabled (Id))\n              or else Has_Volatile_Components (Id)\n              or else Is_Effectively_Volatile (Etype (Id));\n       end if;\n@@ -21652,6 +21655,38 @@ package body Sem_Util is\n       end if;\n    end New_Requires_Transient_Scope;\n \n+   ------------------------\n+   -- No_Caching_Enabled --\n+   ------------------------\n+\n+   function No_Caching_Enabled (Id : Entity_Id) return Boolean is\n+      Prag : constant Node_Id := Get_Pragma (Id, Pragma_No_Caching);\n+      Arg1 : Node_Id;\n+\n+   begin\n+      if Present (Prag) then\n+         Arg1 := First (Pragma_Argument_Associations (Prag));\n+\n+         --  The pragma has an optional Boolean expression, the related\n+         --  property is enabled only when the expression evaluates to True.\n+\n+         if Present (Arg1) then\n+            return Is_True (Expr_Value (Get_Pragma_Arg (Arg1)));\n+\n+         --  Otherwise the lack of expression enables the property by\n+         --  default.\n+\n+         else\n+            return True;\n+         end if;\n+\n+      --  The property was never set in the first place\n+\n+      else\n+         return False;\n+      end if;\n+   end No_Caching_Enabled;\n+\n    --------------------------\n    -- No_Heap_Finalization --\n    --------------------------"}, {"sha": "1d3fcbf71e6f84cdbf781d88c28d2308c00dde1f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -1682,7 +1682,7 @@ package Sem_Util is\n    function Is_Effectively_Volatile (Id : Entity_Id) return Boolean;\n    --  Determine whether a type or object denoted by entity Id is effectively\n    --  volatile (SPARK RM 7.1.2). To qualify as such, the entity must be either\n-   --    * Volatile\n+   --    * Volatile without No_Caching\n    --    * An array type subject to aspect Volatile_Components\n    --    * An array type whose component type is effectively volatile\n    --    * A protected type\n@@ -2387,6 +2387,11 @@ package Sem_Util is\n    --  and possibly Next_Global a number of times. Returns the next global item\n    --  with the same mode.\n \n+   function No_Caching_Enabled (Id : Entity_Id) return Boolean;\n+   --  Given the entity of a variable, determine whether Id is subject to\n+   --  volatility property No_Caching and if it is, the related expression\n+   --  evaluates to True.\n+\n    function No_Heap_Finalization (Typ : Entity_Id) return Boolean;\n    --  Determine whether type Typ is subject to pragma No_Heap_Finalization\n "}, {"sha": "ef6b17c1e0f80d94f4f56ad6db43af670ae34b3e", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -596,6 +596,7 @@ package Snames is\n    Name_Max_Queue_Length               : constant Name_Id := N + $; -- GNAT\n    Name_Memory_Size                    : constant Name_Id := N + $; -- Ada 83\n    Name_No_Body                        : constant Name_Id := N + $; -- GNAT\n+   Name_No_Caching                     : constant Name_Id := N + $; -- GNAT\n    Name_No_Elaboration_Code_All        : constant Name_Id := N + $; -- GNAT\n    Name_No_Inline                      : constant Name_Id := N + $; -- GNAT\n    Name_No_Return                      : constant Name_Id := N + $; -- Ada 05\n@@ -2009,6 +2010,7 @@ package Snames is\n       Pragma_Max_Queue_Length,\n       Pragma_Memory_Size,\n       Pragma_No_Body,\n+      Pragma_No_Caching,\n       Pragma_No_Elaboration_Code_All,\n       Pragma_No_Inline,\n       Pragma_No_Return,"}, {"sha": "c7ee99716d7a55421427142dbf90f0ae27c0ae0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -1,3 +1,7 @@\n+2019-08-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat.dg/no_caching.adb, gnat.dg/no_caching.ads: New testcase.\n+\n 2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/range_check7.adb: New testcase."}, {"sha": "446dbd671ce320c6269a458275583980910e26f8", "filename": "gcc/testsuite/gnat.dg/no_caching.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.adb?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -0,0 +1,29 @@\n+--  { dg-do compile }\n+\n+package body No_Caching with SPARK_Mode is\n+   Status : Boolean;\n+\n+   procedure Handle (V : Mult_Bit_Boolean) is\n+      Ret_Val : Mult_Bit_Boolean := V with Volatile, No_Caching;\n+   begin\n+      if (Ret_Val = NV_TRUE) then\n+         Do_Something;\n+      elsif (Ret_Val = NV_FALSE) then\n+         Do_Something_Else;\n+      else\n+         null;\n+         -- Fault inject detected. Take punitive action\n+      end if;\n+   end Handle;\n+\n+   procedure Do_Something is\n+   begin\n+      Status := True;\n+   end Do_Something;\n+\n+   procedure Do_Something_Else is\n+   begin\n+      Status := False;\n+   end Do_Something_Else;\n+\n+end No_Caching;"}, {"sha": "24a9cd3d7f69e9c90af843547c96dbe78934b2c9", "filename": "gcc/testsuite/gnat.dg/no_caching.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfc6c55085848a60d19825bdc0b7d345bdf8603/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fno_caching.ads?ref=9dfc6c55085848a60d19825bdc0b7d345bdf8603", "patch": "@@ -0,0 +1,8 @@\n+package No_Caching with SPARK_Mode is\n+   type Mult_Bit_Boolean is (NV_FALSE, NV_TRUE);\n+   for Mult_Bit_Boolean use (NV_FALSE => 16#55_AA#,\n+                             NV_TRUE => 16#AA_55#);\n+   procedure Handle (V : Mult_Bit_Boolean);\n+   procedure Do_Something;\n+   procedure Do_Something_Else;\n+end No_Caching;"}]}