{"sha": "cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4YWJiMWNmOWY5NjM2NWQ3ZmExZjQ1ODNhYjNjYjg0NTg3NmYxNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:34:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:34:31Z"}, "message": "Change use to type-based pool allocator in lra-lives.c.\n\n\t* lra-lives.c (free_live_range): Use new type-based pool allocator.\n\t(free_live_range_list) Likewise.\n\t(create_live_range) Likewise.\n\t(copy_live_range) Likewise.\n\t(lra_merge_live_ranges) Likewise.\n\t(remove_some_program_points_and_update_live_ranges) Likewise.\n\t(lra_live_ranges_init) Likewise.\n\t(lra_live_ranges_finish) Likewise.\n\nFrom-SVN: r223944", "tree": {"sha": "6ab57ff78b223b14ea0991bdf21f1047264c68a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab57ff78b223b14ea0991bdf21f1047264c68a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64afff5b0205e524fa696a6a74d5759f0803f8c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64afff5b0205e524fa696a6a74d5759f0803f8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64afff5b0205e524fa696a6a74d5759f0803f8c9"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "be5ce2a69cec4f776bb611af82b17c3b94eb3787", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -1,3 +1,14 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* lra-lives.c (free_live_range): Use new type-based pool allocator.\n+\t(free_live_range_list) Likewise.\n+\t(create_live_range) Likewise.\n+\t(copy_live_range) Likewise.\n+\t(lra_merge_live_ranges) Likewise.\n+\t(remove_some_program_points_and_update_live_ranges) Likewise.\n+\t(lra_live_ranges_init) Likewise.\n+\t(lra_live_ranges_finish) Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* et-forest.c (et_new_occ): Use new type-based pool allocator."}, {"sha": "b38560323a396a7b6b7966891f2e0ec4a1b61c22", "filename": "gcc/lra-coalesce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-coalesce.c?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"except.h\"\n #include \"timevar.h\"\n #include \"ira.h\"\n+#include \"alloc-pool.h\"\n #include \"lra-int.h\"\n #include \"df.h\"\n "}, {"sha": "42e4a5445d5eb3ae8ae51907a7e0beb8c919d980", "filename": "gcc/lra-int.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -54,6 +54,21 @@ struct lra_live_range\n   lra_live_range_t next;\n   /* Pointer to structures with the same start.\t */\n   lra_live_range_t start_next;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((lra_live_range *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<lra_live_range> pool;\n };\n \n typedef struct lra_copy *lra_copy_t;"}, {"sha": "4dfe30f26b4af84dc4cd3ef30876d3267ca36c16", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -121,14 +121,7 @@ static sparseset unused_set, dead_set;\n static bitmap_head temp_bitmap;\n \n /* Pool for pseudo live ranges.\t */\n-static alloc_pool live_range_pool;\n-\n-/* Free live range LR.\t*/\n-static void\n-free_live_range (lra_live_range_t lr)\n-{\n-  pool_free (live_range_pool, lr);\n-}\n+pool_allocator <lra_live_range> lra_live_range::pool (\"live ranges\", 100);\n \n /* Free live range list LR.  */\n static void\n@@ -139,7 +132,7 @@ free_live_range_list (lra_live_range_t lr)\n   while (lr != NULL)\n     {\n       next = lr->next;\n-      free_live_range (lr);\n+      delete lr;\n       lr = next;\n     }\n }\n@@ -148,9 +141,7 @@ free_live_range_list (lra_live_range_t lr)\n static lra_live_range_t\n create_live_range (int regno, int start, int finish, lra_live_range_t next)\n {\n-  lra_live_range_t p;\n-\n-  p = (lra_live_range_t) pool_alloc (live_range_pool);\n+  lra_live_range_t p = new lra_live_range;\n   p->regno = regno;\n   p->start = start;\n   p->finish = finish;\n@@ -162,11 +153,7 @@ create_live_range (int regno, int start, int finish, lra_live_range_t next)\n static lra_live_range_t\n copy_live_range (lra_live_range_t r)\n {\n-  lra_live_range_t p;\n-\n-  p = (lra_live_range_t) pool_alloc (live_range_pool);\n-  *p = *r;\n-  return p;\n+  return new lra_live_range (*r);\n }\n \n /* Copy live range list given by its head R and return the result.  */\n@@ -209,7 +196,7 @@ lra_merge_live_ranges (lra_live_range_t r1, lra_live_range_t r2)\n \t  r1->start = r2->start;\n \t  lra_live_range_t temp = r2;\n \t  r2 = r2->next;\n-\t  pool_free (live_range_pool, temp);\n+\t  delete temp;\n \t}\n       else\n \t{\n@@ -480,7 +467,7 @@ live_con_fun_n (edge e)\n   basic_block dest = e->dest;\n   bitmap bb_liveout = df_get_live_out (bb);\n   bitmap dest_livein = df_get_live_in (dest);\n-  \n+\n   return bitmap_ior_and_compl_into (bb_liveout,\n \t\t\t\t    dest_livein, &all_hard_regs_bitmap);\n }\n@@ -1024,7 +1011,7 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n       if (sparseset_bit_p (pseudos_live_through_calls, j))\n \tcheck_pseudos_live_through_calls (j);\n     }\n-  \n+\n   if (need_curr_point_incr)\n     next_program_point (curr_point, freq);\n \n@@ -1109,7 +1096,7 @@ remove_some_program_points_and_update_live_ranges (void)\n \t\t}\n \t      prev_r->start = r->start;\n \t      prev_r->next = next_r;\n-\t      free_live_range (r);\n+\t      delete r;\n \t    }\n \t}\n     }\n@@ -1252,7 +1239,7 @@ lra_create_live_ranges_1 (bool all_p, bool dead_insn_p)\n \t}\n     }\n   lra_free_copies ();\n- \n+\n   /* Under some circumstances, we can have functions without pseudo\n      registers.  For such functions, lra_live_max_point will be 0,\n      see e.g. PR55604, and there's nothing more to do for us here.  */\n@@ -1380,8 +1367,6 @@ lra_clear_live_ranges (void)\n void\n lra_live_ranges_init (void)\n {\n-  live_range_pool = create_alloc_pool (\"live ranges\",\n-\t\t\t\t       sizeof (struct lra_live_range), 100);\n   bitmap_initialize (&temp_bitmap, &reg_obstack);\n   initiate_live_solver ();\n }\n@@ -1392,5 +1377,5 @@ lra_live_ranges_finish (void)\n {\n   finish_live_solver ();\n   bitmap_clear (&temp_bitmap);\n-  free_alloc_pool (live_range_pool);\n+  lra_live_range::pool.release ();\n }"}, {"sha": "caece9a043b349b2b91837db6fcd7bee8e5e7bd6", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -98,6 +98,7 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"except.h\"\n #include \"timevar.h\"\n #include \"target.h\"\n+#include \"alloc-pool.h\"\n #include \"lra-int.h\"\n #include \"ira.h\"\n #include \"df.h\""}, {"sha": "7440668d69a829b23b86b4661437b50db768d057", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8abb1cf9f96365d7fa1f4583ab3cb845876f17/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=cb8abb1cf9f96365d7fa1f4583ab3cb845876f17", "patch": "@@ -149,6 +149,7 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"timevar.h\"\n #include \"target.h\"\n #include \"ira.h\"\n+#include \"alloc-pool.h\"\n #include \"lra-int.h\"\n #include \"df.h\"\n "}]}