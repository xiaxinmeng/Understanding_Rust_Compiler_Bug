{"sha": "410902c31caa82cf414f020b5db51ddc20159f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwOTAyYzMxY2FhODJjZjQxNGYwMjBiNWRiNTFkZGMyMDE1OWYyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-11-28T20:48:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-28T20:48:53Z"}, "message": "predict.c (determine_unlikely_bbs): Forward declare...\n\n\n\t* predict.c (determine_unlikely_bbs): Forward declare; also determine\n\tedges that are always known to be taken because it is only likely\n\tedge out of given BB.\n\t(tree_estimate_probability): Call before profile guessing to get bit\n\tof extra precision.\n\n\t* gcc.dg/predict-13.c: Update template.\n\t* gcc.dg/predict-13b.c: New testcase.\n\t* gcc.dg/predict-22.c: New testcase.\n\t* gcc.dg/tree-ssa/ipa-split-4.c: Change abort to other function to\n\tget sane profile.\n\nFrom-SVN: r266587", "tree": {"sha": "25f6fe6b41b104035d34d83de12cc84a6419e7cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f6fe6b41b104035d34d83de12cc84a6419e7cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410902c31caa82cf414f020b5db51ddc20159f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410902c31caa82cf414f020b5db51ddc20159f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410902c31caa82cf414f020b5db51ddc20159f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410902c31caa82cf414f020b5db51ddc20159f20/comments", "author": null, "committer": null, "parents": [{"sha": "ad42aa96b6ca0695dce4925d9655938fc1900edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad42aa96b6ca0695dce4925d9655938fc1900edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad42aa96b6ca0695dce4925d9655938fc1900edf"}], "stats": {"total": 156, "additions": 142, "deletions": 14}, "files": [{"sha": "6607cd7c7102021c6121b0f9d2eab0b2178a8dfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -1,3 +1,11 @@\n+2018-11-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (determine_unlikely_bbs): Forward declare; also determine\n+\tedges that are always known to be taken because it is only likely\n+\tedge out of given BB.\n+\t(tree_estimate_probability): Call before profile guessing to get bit\n+\tof extra precision.\n+\n 2018-11-28  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-ifcombine.c (update_profile_after_ifcombine): Handle"}, {"sha": "5ad252c2d3947dd7956113c4388cfbfc25cf903e", "filename": "gcc/predict.c", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -93,6 +93,7 @@ static void predict_paths_leading_to_edge (edge, enum br_predictor,\n \t\t\t\t\t   struct loop *in_loop = NULL);\n static bool can_predict_insn_p (const rtx_insn *);\n static HOST_WIDE_INT get_predictor_value (br_predictor, HOST_WIDE_INT);\n+static void determine_unlikely_bbs ();\n \n /* Information we hold about each branch predictor.\n    Filled using information from predict.def.  */\n@@ -3063,6 +3064,9 @@ tree_estimate_probability (bool dry_run)\n      preheaders.  */\n   create_preheaders (CP_SIMPLE_PREHEADERS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n+  /* Decide which edges are known to be unlikely.  This improves later\n+     branch prediction. */\n+  determine_unlikely_bbs ();\n \n   bb_predictions = new hash_map<const_basic_block, edge_prediction *>;\n   tree_bb_level_predictions ();\n@@ -3768,17 +3772,40 @@ determine_unlikely_bbs ()\n     }\n   /* Finally all edges from non-0 regions to 0 are unlikely.  */\n   FOR_ALL_BB_FN (bb, cfun)\n-    if (!(bb->count == profile_count::zero ()))\n+    {\n+      if (!(bb->count == profile_count::zero ()))\n+\tFOR_EACH_EDGE (e, ei, bb->succs)\n+\t  if (!(e->probability == profile_probability::never ())\n+\t      && e->dest->count == profile_count::zero ())\n+\t     {\n+\t       if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t fprintf (dump_file, \"Edge %i->%i is unlikely because \"\n+\t\t\t  \"it enters unlikely block\\n\",\n+\t\t\t  bb->index, e->dest->index);\n+\t       e->probability = profile_probability::never ();\n+\t     }\n+\n+      edge other = NULL;\n+\n       FOR_EACH_EDGE (e, ei, bb->succs)\n-\tif (!(e->probability == profile_probability::never ())\n-\t    && e->dest->count == profile_count::zero ())\n-\t   {\n-\t     if (dump_file && (dump_flags & TDF_DETAILS))\n-\t       fprintf (dump_file, \"Edge %i->%i is unlikely because \"\n-\t\t \t\"it enters unlikely block\\n\",\n-\t\t\tbb->index, e->dest->index);\n-\t     e->probability = profile_probability::never ();\n-\t   }\n+\tif (e->probability == profile_probability::never ())\n+\t  ;\n+\telse if (other)\n+\t  {\n+\t    other = NULL;\n+\t    break;\n+\t  }\n+\telse\n+\t  other = e;\n+      if (other\n+\t  && !(other->probability == profile_probability::always ()))\n+\t{\n+            if (dump_file && (dump_flags & TDF_DETAILS))\n+\t      fprintf (dump_file, \"Edge %i->%i is locally likely\\n\",\n+\t\t       bb->index, other->dest->index);\n+\t  other->probability = profile_probability::always ();\n+\t}\n+    }\n   if (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count == profile_count::zero ())\n     cgraph_node::get (current_function_decl)->count = profile_count::zero ();\n }"}, {"sha": "575c6316c89ef4c58734185fa83891e2c7e91012", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -1,3 +1,11 @@\n+2018-11-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/predict-13.c: Update template.\n+\t* gcc.dg/predict-13b.c: New testcase.\n+\t* gcc.dg/predict-22.c: New testcase.\n+\t* gcc.dg/tree-ssa/ipa-split-4.c: Change abort to other function to\n+\tget sane profile.\n+\n 2018-11-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88222 - ICE with bit-field with invalid type."}, {"sha": "9602e789dc2707fb3874d0d23ade3ce8a3c5fe1f", "filename": "gcc/testsuite/gcc.dg/predict-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -20,5 +20,5 @@ int main(int argc, char **argv)\n   return 10;\n }\n \n-/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 33.30%\" 3 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 0.05%\" 2 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"33.33%\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"0.00%\" 3 \"profile_estimate\"} } */"}, {"sha": "7f4722fcc5291c32f2b234e14fae03f9ff9cc11f", "filename": "gcc/testsuite/gcc.dg/predict-13b.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13b.c?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+void exit(int);\n+\n+int main(int argc, char **argv)\n+{\n+  switch (argc)\n+    {\n+    case 1:\n+      return 1;\n+    case 2:\n+      return 2;\n+    case 3:\n+      exit(1);\n+    case 4:\n+      exit(2);\n+    default:\n+      return 5;\n+    }\n+\n+  return 10;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 33.30%\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 0.05%\" 2 \"profile_estimate\"} } */"}, {"sha": "0d50c81ebcefc449bbc513fa593e176ae5ac9e1b", "filename": "gcc/testsuite/gcc.dg/predict-22.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-22.c?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized-details-blocks -fdump-rtl-bbpart-details-blocks -freorder-blocks-and-partition\" } */\n+volatile int v;\n+void bar (void) __attribute__((leaf, cold));\n+void baz (int *);\n+\n+void\n+foo (int x, int y, int z)\n+{\n+  static int f __attribute__((section (\"mysection\")));\n+  f = 1;\n+  if (__builtin_expect (x, 0))\n+  if (__builtin_expect (y, 0))\n+  if (__builtin_expect (z, 0))\n+    {\n+      f = 2;\n+      bar ();\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      v += 1;\n+      v *= 2;\n+      v /= 2;\n+      v -= 1;\n+      f = 3;\n+      __builtin_abort ();\n+    }\n+  f = 4;\n+  f = 5;\n+  baz (&f);\n+}\n+/* { dg-final { scan-tree-dump-times \"Invalid sum\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"count 0,\" 1 \"optimized\"} } */\n+/* { dg-final { scan-rtl-dump-times \"COLD_PARTITION\" 1 \"bbpart\"} } */"}, {"sha": "43537b6714cd3b52dbe5a2f6095cd9bd3c03d9d8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-split-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410902c31caa82cf414f020b5db51ddc20159f20/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-4.c?ref=410902c31caa82cf414f020b5db51ddc20159f20", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fdump-tree-fnsplit\" } */\n int make_me_big (void);\n-void abort (void);\n+void do_work (void);\n \n int\n split_me (int a)\n {\n   if (__builtin_expect(a<10, 1))\n     {\n-      abort ();\n+      do_work ();\n     }\n   else\n     {"}]}