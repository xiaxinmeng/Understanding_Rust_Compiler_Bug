{"sha": "d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmNjc1M2VmZWM0MmM2M2MzMmIwZTBjZmExZTk5NDRhMmU5YWM0YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-11-20T12:22:25Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-11-20T12:22:25Z"}, "message": "bfin.h (LEGITIMATE_CONSTANT_P): Call bfin_legitimate_constant_p.\n\n\t* config/bfin/bfin.h (LEGITIMATE_CONSTANT_P): Call\n\tbfin_legitimate_constant_p.\n\t* config/bfin/bfin.md (movsi expander): Check return value of\n\texpand_mvoe.\n\t* config/bfin/bfin-protos.h (bfin_legitimate_constant_p): Declare.\n\t(expand_move): Adjust prototype.\n\t* config/bfin/bfin.c (expand_move): Now returns bool.  Handle\n\tinvalid constants specially.\n\t(bfin_cannot_force_const_mem, bfin_legitimate_constant_p): New\n\tfunctions.\n\t(TARGET_CANNOT_FORCE_CONST_MEM): New macro.\n\nFrom-SVN: r119011", "tree": {"sha": "0f1f7a4aeff6b0ce5ab4e6785108850140a44cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1f7a4aeff6b0ce5ab4e6785108850140a44cdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/comments", "author": null, "committer": null, "parents": [{"sha": "f81c1b60f257f47b08ed9e03585b81922b9ec31e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81c1b60f257f47b08ed9e03585b81922b9ec31e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81c1b60f257f47b08ed9e03585b81922b9ec31e"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "bafe4c42b297eddff61a0378481c2a0d01e34c2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "patch": "@@ -1,3 +1,17 @@\n+2006-11-20  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.h (LEGITIMATE_CONSTANT_P): Call\n+\tbfin_legitimate_constant_p.\n+\t* config/bfin/bfin.md (movsi expander): Check return value of\n+\texpand_mvoe.\n+\t* config/bfin/bfin-protos.h (bfin_legitimate_constant_p): Declare.\n+\t(expand_move): Adjust prototype.\n+\t* config/bfin/bfin.c (expand_move): Now returns bool.  Handle\n+\tinvalid constants specially.\n+\t(bfin_cannot_force_const_mem, bfin_legitimate_constant_p): New\n+\tfunctions.\n+\t(TARGET_CANNOT_FORCE_CONST_MEM): New macro.\n+\n 2006-11-19  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR rtl-opt/29879"}, {"sha": "31d15b6bfb0aedb4de5a747ace302d0e471d8b32", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "patch": "@@ -36,6 +36,7 @@ extern char *bfin_asm_short (void);\n extern int log2constp (unsigned HOST_WIDE_INT);\n \n extern rtx legitimize_address (rtx, rtx, Mmode);\n+extern bool bfin_legitimate_constant_p (rtx);\n extern int hard_regno_mode_ok (int, Mmode);\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\t  \n extern int bfin_frame_pointer_required (void);\n@@ -44,7 +45,7 @@ extern HOST_WIDE_INT bfin_initial_elimination_offset (int, int);\n extern int effective_address_32bit_p (rtx, Mmode);\n extern int symbolic_reference_mentioned_p (rtx);\n extern rtx bfin_gen_compare (rtx, Mmode);\n-extern void expand_move (rtx *, Mmode);\n+extern bool expand_move (rtx *, Mmode);\n extern void bfin_expand_call (rtx, rtx, rtx, rtx, int);\n extern bool bfin_longcall_p (rtx, int);\n extern bool bfin_dsp_memref_p (rtx);"}, {"sha": "edc7cc49ee88b0ca175a592758a1d2f288a1958f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "patch": "@@ -1648,21 +1648,44 @@ emit_pic_move (rtx *operands, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t\t\t\t\t  : pic_offset_table_rtx);\n }\n \n-/* Expand a move operation in mode MODE.  The operands are in OPERANDS.  */\n+/* Expand a move operation in mode MODE.  The operands are in OPERANDS.\n+   Returns true if no further code must be generated, false if the caller\n+   should generate an insn to move OPERANDS[1] to OPERANDS[0].  */\n \n-void\n+bool\n expand_move (rtx *operands, enum machine_mode mode)\n {\n   rtx op = operands[1];\n   if ((TARGET_ID_SHARED_LIBRARY || TARGET_FDPIC)\n       && SYMBOLIC_CONST (op))\n     emit_pic_move (operands, mode);\n+  else if (mode == SImode && GET_CODE (op) == CONST\n+\t   && GET_CODE (XEXP (op, 0)) == PLUS\n+\t   && GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n+\t   && !bfin_legitimate_constant_p (op))\n+    {\n+      rtx dest = operands[0];\n+      rtx op0, op1;\n+      gcc_assert (!reload_in_progress && !reload_completed);\n+      op = XEXP (op, 0);\n+      op0 = force_reg (mode, XEXP (op, 0));\n+      op1 = XEXP (op, 1);\n+      if (!insn_data[CODE_FOR_addsi3].operand[2].predicate (op1, mode))\n+\top1 = force_reg (mode, op1);\n+      if (GET_CODE (dest) == MEM)\n+\tdest = gen_reg_rtx (mode);\n+      emit_insn (gen_addsi3 (dest, op0, op1));\n+      if (dest == operands[0])\n+\treturn true;\n+      operands[1] = dest;\n+    }\n   /* Don't generate memory->memory or constant->memory moves, go through a\n      register */\n   else if ((reload_in_progress | reload_completed) == 0\n \t   && GET_CODE (operands[0]) == MEM\n     \t   && GET_CODE (operands[1]) != REG)\n     operands[1] = force_reg (mode, operands[1]);\n+  return false;\n }\n \f\n /* Split one or more DImode RTL references into pairs of SImode\n@@ -2306,6 +2329,53 @@ bfin_legitimate_address_p (enum machine_mode mode, rtx x, int strict)\n   return false;\n }\n \n+/* Decide whether we can force certain constants to memory.  If we\n+   decide we can't, the caller should be able to cope with it in\n+   another way.  */\n+\n+static bool\n+bfin_cannot_force_const_mem (rtx x ATTRIBUTE_UNUSED)\n+{\n+  /* We have only one class of non-legitimate constants, and our movsi\n+     expander knows how to handle them.  Dropping these constants into the\n+     data section would only shift the problem - we'd still get relocs\n+     outside the object, in the data section rather than the text section.  */\n+  return true;\n+}\n+\n+/* Ensure that for any constant of the form symbol + offset, the offset\n+   remains within the object.  Any other constants are ok.\n+   This ensures that flat binaries never have to deal with relocations\n+   crossing section boundaries.  */\n+\n+bool\n+bfin_legitimate_constant_p (rtx x)\n+{\n+  rtx sym;\n+  HOST_WIDE_INT offset;\n+\n+  if (GET_CODE (x) != CONST)\n+    return true;\n+\n+  x = XEXP (x, 0);\n+  gcc_assert (GET_CODE (x) == PLUS);\n+\n+  sym = XEXP (x, 0);\n+  x = XEXP (x, 1);\n+  if (GET_CODE (sym) != SYMBOL_REF\n+      || GET_CODE (x) != CONST_INT)\n+    return true;\n+  offset = INTVAL (x);\n+\n+  if (SYMBOL_REF_DECL (sym) == 0)\n+    return true;\n+  if (offset < 0\n+      || offset >= int_size_in_bytes (TREE_TYPE (SYMBOL_REF_DECL (sym))))\n+    return false;\n+\n+  return true;\n+}\n+\n static bool\n bfin_rtx_costs (rtx x, int code, int outer_code, int *total)\n {\n@@ -4432,4 +4502,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS bfin_delegitimize_address\n \n+#undef TARGET_CANNOT_FORCE_CONST_MEM\n+#define TARGET_CANNOT_FORCE_CONST_MEM bfin_cannot_force_const_mem\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "00b6c29f40f372c5f210bdab26ce24cf9bac3ed1", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "patch": "@@ -729,7 +729,7 @@ typedef struct {\n    See force_const_mem().\n    If -mno-pool, all constants are legitimate.\n  */\n-#define LEGITIMATE_CONSTANT_P(x) 1\n+#define LEGITIMATE_CONSTANT_P(X) bfin_legitimate_constant_p (X)\n \n /*   A number, the maximum number of registers that can appear in a\n      valid memory address.  Note that it is up to you to specify a"}, {"sha": "afd24e62da7b9199f3d58b2cd13c0b083cc5d649", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=d6f6753efec42c63c32b0e0cfa1e9944a2e9ac4a", "patch": "@@ -605,7 +605,10 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"expand_move (operands, SImode);\")\n+{\n+  if (expand_move (operands, SImode))\n+    DONE;\n+})\n \n (define_expand \"movv2hi\"\n   [(set (match_operand:V2HI 0 \"nonimmediate_operand\" \"\")"}]}