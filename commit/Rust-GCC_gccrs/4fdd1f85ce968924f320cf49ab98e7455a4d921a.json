{"sha": "4fdd1f85ce968924f320cf49ab98e7455a4d921a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkZDFmODVjZTk2ODkyNGYzMjBjZjQ5YWI5OGU3NDU1YTRkOTIxYQ==", "commit": {"author": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-09-06T18:37:01Z"}, "committer": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-09-06T18:37:01Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r8026", "tree": {"sha": "197e169aab42574d00d19a3c69c95492dadd99e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/197e169aab42574d00d19a3c69c95492dadd99e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fdd1f85ce968924f320cf49ab98e7455a4d921a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdd1f85ce968924f320cf49ab98e7455a4d921a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fdd1f85ce968924f320cf49ab98e7455a4d921a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdd1f85ce968924f320cf49ab98e7455a4d921a/comments", "author": null, "committer": null, "parents": [{"sha": "6922033c580da54c98a373af44e1f4062eeb5c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6922033c580da54c98a373af44e1f4062eeb5c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6922033c580da54c98a373af44e1f4062eeb5c50"}], "stats": {"total": 126, "additions": 49, "deletions": 77}, "files": [{"sha": "a841ec9f5f437952ce54c4c6887fd9cde6a0cf45", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4fdd1f85ce968924f320cf49ab98e7455a4d921a", "patch": "@@ -127,19 +127,26 @@ void\n push (rn)\n      int rn;\n {\n-  emit_insn (gen_push (gen_rtx (REG, SImode, rn)));\n+  rtx x ;\n+  x=  emit_insn (gen_push (gen_rtx (REG, SImode, rn)));\n+  REG_NOTES (x) = gen_rtx (EXPR_LIST, REG_INC, \n+\t\t\t   gen_rtx(REG, SImode, STACK_POINTER_REGNUM), 0);\n }\n \n void\n pop (rn)\n      int rn;\n {\n-  emit_insn (gen_pop (gen_rtx (REG, SImode, rn)));\n+  rtx x;\n+  x =  emit_insn (gen_pop (gen_rtx (REG, SImode, rn)));\n+  REG_NOTES (x) = gen_rtx (EXPR_LIST, REG_INC, \n+\t\t\t   gen_rtx(REG, SImode, STACK_POINTER_REGNUM), 0);\n }\n \n \n /* Adjust the stack and return the number of bytes taken to do it */\n-\n+static rtx lastreg;\n+int lastval;\n static void\n output_stack_adjust (size)\n      int size;\n@@ -151,9 +158,11 @@ output_stack_adjust (size)\n \n       if (!CONST_OK_FOR_I (size))\n \t{\n-\t  rtx nval = gen_rtx (REG, SImode, 3);\n-\t  emit_insn (gen_movsi (nval, val));\n-\t  val = nval;\n+\t  lastreg = gen_rtx (REG, SImode, 3);\n+\t  lastval = size;\n+\t  emit_insn (gen_movsi (lastreg, val));\n+\t  val = lastreg;\n+\n \t}\n \n       insn = gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, val);\n@@ -471,6 +480,7 @@ synth_constant (operands, mode)\n       dst = operands[0];\n     }\n \n+\n   /*  00000000 00000000 11111111 1NNNNNNNN load and zero extend word      */\n   if ((i & 0xffffff80) == 0x0000ff80)\n     {\n@@ -510,8 +520,8 @@ synth_constant (operands, mode)\n     }\n   /*     00000000 0NNNNNNN 00000000 000000000 load and shift by 16\n \t 11111111 1NNNNNNN 00000000 000000000 load and shift by 16 */\n-  else if ((i & 0xff80ffff) == 0\n-\t   || (i & 0xff80ffff) == 0xff80ffff)\n+  else if ((i & 0xff80ffff) == 0x00000000\n+\t   || (i & 0xff80ffff) == 0xff800000)\n     {\n       emit_move_insn (dst, GEN_INT (sextb (i >> 16)));\n       emit_insn (gen_ashlsi3_n (dst, dst, GEN_INT (16)));\n@@ -1046,9 +1056,11 @@ output_far_jump (insn, op)\n \t    break;\n \t}\n \n+\n+      print_slot (final_sequence);\n       output_asm_insn (\"mov.l\t%1,@-r15\", vec);\n       output_asm_insn (\"mov.l\t%O0,%1\", vec);\n-      print_slot (final_sequence);\n+\n       output_asm_insn (\"jmp\t@%1 ! 32 xcond\", vec);\n       output_asm_insn (\"mov.l\t@r15+,%1\", vec);\n     }\n@@ -1365,7 +1377,7 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n   data_section ();\n \n \n-  pos = fprintf (file, \"\\n! Hitachi SH cc1 (%s) (release H-1) arguments:\", version_string);\n+  pos = fprintf (file, \"\\n! Hitachi SH cc1 (%s) (release I-1) arguments:\", version_string);\n   output_options (file, f_options, f_len, W_options, W_len,\n \t\t  pos, 75, \" \", \"\\n! \", \"\\n\\n\");\n }\n@@ -2044,6 +2056,7 @@ sh_expand_epilogue ()\n \n   live_regs_mask = calc_live_regs (&d);\n \n+  \n   if (frame_pointer_needed)\n     {\n       emit_insn (gen_movsi (stack_pointer_rtx, frame_pointer_rtx));"}, {"sha": "58bb11347decdd4d43e437b7fd7d8c75e706e0ba", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=4fdd1f85ce968924f320cf49ab98e7455a4d921a", "patch": "@@ -800,7 +800,7 @@ extern int current_function_anonymous_args;\n    functions that have frame pointers.\n    No definition is equivalent to always zero.  */\n \n-#define EXIT_IGNORE_STACK 0\n+#define EXIT_IGNORE_STACK 1\n \n /* Generate the assembly code for function exit \n    Just dump out any accumulated constant table.*/"}, {"sha": "4c46a9cb3a2b02647651b556ba9f5f6c265b6389", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 25, "deletions": 66, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdd1f85ce968924f320cf49ab98e7455a4d921a/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4fdd1f85ce968924f320cf49ab98e7455a4d921a", "patch": "@@ -262,45 +262,17 @@\n ;; Addition instructions\n ;; -------------------------------------------------------------------------\n \n-\n-\n ;; this should be a define split.\n \n-\n-\n-(define_insn \"addc\"\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(plus:SI (match_dup 0)\n-\t\t (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (reg:SI 18))))\n+(define_insn \"adddi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:SI 18))]\n   \"\"\n-  \"addc\t%1,%0\")\n-\n-(define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  rtx low_a = operand_subword (operands[1], 1, 1, DImode);\n-  rtx low_b = operand_subword (operands[2], 1, 1, DImode);\n-  rtx low_s = operand_subword (operands[0], 1, 1, DImode);\n-\n-  rtx high_a = operand_subword (operands[1], 0, 1, DImode);\n-  rtx high_b = operand_subword (operands[2], 0, 1, DImode);\n-  rtx high_s = operand_subword (operands[0], 0, 1, DImode);\n-\n-  emit_insn (gen_clrt ());\n-\n-  emit_move_insn (low_s, low_a);\n-  emit_insn (gen_addc (low_s, low_b));\n-  emit_move_insn (high_s, high_a);\n-  emit_insn (gen_addc (high_s, high_b));\n+  \"clrt\\;addc\t%R2,%R0\\;addc\t%2,%0\"\n+  [(set_attr \"length\" \"6\")])\n \n-  DONE;\n-}\")\n \n (define_insn \"addsi3_real\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n@@ -324,36 +296,14 @@\n ;; -------------------------------------------------------------------------\n \n \n-(define_insn \"subc\"\n-  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n-\t\t  (plus:SI  (match_operand:SI 2 \"arith_reg_operand\" \"r\")\n-\t\t\t    (reg:SI 18))))\n+(define_insn \"subdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:SI 18))]\n   \"\"\n-  \"subc\t%2,%0\")\n-\n-(define_expand \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  rtx low_a = operand_subword (operands[1], 1, 1, DImode);\n-  rtx low_b = operand_subword (operands[2], 1, 1, DImode);\n-  rtx low_s = operand_subword (operands[0], 1, 1, DImode);\n-\n-  rtx high_a = operand_subword (operands[1], 0, 1, DImode);\n-  rtx high_b = operand_subword (operands[2], 0, 1, DImode);\n-  rtx high_s = operand_subword (operands[0], 0, 1, DImode);\n-\n-  emit_insn (gen_clrt ());\n-  emit_insn (gen_subc (low_s, low_a, low_b));\n-  emit_insn (gen_subc (high_s, high_a, high_b));\n-\n-  DONE;\n-}\")\n+  \"clrt\\;subc\t%R2,%R0\\;subc\t%2,%0\"\n+  [(set_attr \"length\" \"6\")])\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n@@ -410,7 +360,8 @@\n \t(div:SI (reg:SI 4) (reg:SI 5)))\n    (clobber (reg:SI 18))\n    (clobber (reg:SI 17))\n-   (clobber (reg:SI 4))\n+   (clobber (reg:SI 1))\n+   (clobber (reg:SI 2))\n    (clobber (reg:SI 3))\n    (use (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n@@ -428,7 +379,8 @@\n \t\t\t   (reg:SI 5)))\n \t     (clobber (reg:SI 18))\n \t     (clobber (reg:SI 17))\n-\t     (clobber (reg:SI 4))\n+\t     (clobber (reg:SI 1))\n+\t     (clobber (reg:SI 2))\n \t     (clobber (reg:SI 3))\n \t     (use (match_dup 3))])\n    (set (match_operand:SI 0 \"general_operand\" \"=g\") \n@@ -1538,7 +1490,9 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 5)))\n+   (set (match_dup 6) (match_dup 5))\n+   (parallel[(set (match_dup 6) (ashift:SI (match_dup 6) (match_dup 7)))\n+\t\t(clobber (reg:SI 18))])\n    (set (reg:SI 0) (label_ref (match_operand 3 \"\" \"\")))\n    (parallel[(set (reg:SI 0) (plus:SI (reg:SI 0)\n \t\t\t\t      (mem:HI (plus:SI (reg:SI 0)\n@@ -1552,6 +1506,7 @@\n   operands[2] = copy_to_mode_reg (SImode, operands[2]);\n   operands[5] = gen_reg_rtx (SImode);\n   operands[6] = gen_reg_rtx (SImode);\n+  operands[7] = GEN_INT (TARGET_BIGTABLE  ? 2 : 1);\n }\")\n \n (define_insn \"casesi_worker\"\n@@ -1562,7 +1517,11 @@\n    (set (match_dup 0) (mem:HI (plus:SI (reg:SI 0)\n \t\t\t\t       (match_dup 0))))]\n   \"\"\n-  \"mov.w\t@(r0,%0),%0\\;add\t%0,r0\"\n+  \"*\n+\tif (TARGET_BIGTABLE) \n+\t\treturn \\\"mov.l\t@(r0,%0),%0\\;add\t%0,r0\\\";\n+\telse\n+\t   \treturn \\\"mov.w\t@(r0,%0),%0\\;add\t%0,r0\\\";\"\n   [(set_attr \"needs_delay_slot\" \"no\")\n    (set_attr \"in_delay_slot\" \"no\")\n    (set_attr \"length\" \"4\")])"}]}