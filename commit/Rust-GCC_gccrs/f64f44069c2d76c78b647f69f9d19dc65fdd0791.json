{"sha": "f64f44069c2d76c78b647f69f9d19dc65fdd0791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0ZjQ0MDY5YzJkNzZjNzhiNjQ3ZjY5ZjlkMTlkYzY1ZmRkMDc5MQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2004-01-30T08:24:27Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2004-01-30T08:24:27Z"}, "message": "check_performance: Only compile with $THREAD_FLAG when test is marked to require it.\n\n\t* scripts/check_performance: Only compile with $THREAD_FLAG\n\twhen test is marked to require it.  Allow multiple\n\tcompilations/executions of marked tests.\n\t* testsuite/testsuite_performance.h (report_performance):\n\tReport dynamic thread support status.\n\t(report_header): Likewise.\n\t* testsuite/performance/allocator.cc: Stabilize iteration\n\tcount.  Support more allocators.  Mark each allocator test to\n\trun and report independently.\n\t* testsuite/performance/allocator_map_thread.cc: Likewise.\n\t* testsuite/performance/allocator_thread.cc: Likewise.\n\nFrom-SVN: r76932", "tree": {"sha": "9af121b7518c99dcd4554d9c6477fc2ba15b30db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9af121b7518c99dcd4554d9c6477fc2ba15b30db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64f44069c2d76c78b647f69f9d19dc65fdd0791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64f44069c2d76c78b647f69f9d19dc65fdd0791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64f44069c2d76c78b647f69f9d19dc65fdd0791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64f44069c2d76c78b647f69f9d19dc65fdd0791/comments", "author": null, "committer": null, "parents": [{"sha": "5fddd9fe582272b47be32830d0fac43ba29cd3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fddd9fe582272b47be32830d0fac43ba29cd3c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fddd9fe582272b47be32830d0fac43ba29cd3c8"}], "stats": {"total": 189, "additions": 113, "deletions": 76}, "files": [{"sha": "2baf9852bb22980404312d9140a88659fea03645", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -1,3 +1,17 @@\n+2004-01-30  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* scripts/check_performance: Only compile with $THREAD_FLAG\n+\twhen test is marked to require it.  Allow multiple\n+\tcompilations/executions of marked tests.\n+\t* testsuite/testsuite_performance.h (report_performance):\n+\tReport dynamic thread support status.\n+\t(report_header): Likewise.\n+\t* testsuite/performance/allocator.cc: Stabilize iteration\n+\tcount.  Support more allocators.  Mark each allocator test to\n+\trun and report independently.\n+\t* testsuite/performance/allocator_map_thread.cc: Likewise.\n+\t* testsuite/performance/allocator_thread.cc: Likewise.\n+\n 2004-01-29  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n \n \t* config/local/generic/c_locale.h: Change ::malloc() to new char[]."}, {"sha": "cbfabb0a032f76aacf7279aa58b19553d8966859", "filename": "libstdc++-v3/scripts/check_performance", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_performance?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -31,19 +31,43 @@ SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc \\\n          -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n ST_FLAG=\"-static\"\n LINK=$SH_FLAG\n-CXX=\"$COMPILER $INCLUDES $FLAGS $THREAD_FLAG $LINK\"\n+CXX=\"$COMPILER $INCLUDES $FLAGS $LINK\"\n+CXX_THREAD=\"$COMPILER $INCLUDES $FLAGS $THREAD_FLAG $LINK\"\n \n \n TESTS_FILE=\"testsuite_files_performance\"\n \n for NAME in `cat $TESTS_FILE`\n do\n-  echo $NAME\n-  FILE_NAME=\"`basename $NAME`\"\n-  EXE_NAME=\"`echo $FILE_NAME | sed 's/cc$/exe/'`\"\n-  $CXX $SRC_DIR/testsuite/$NAME -o $EXE_NAME\n-  ./$EXE_NAME\n-  echo \"\"\n+  RUN=true\n+  for CYCLE in `sed -n 's,.*\\(TEST_[SB][0-9]*\\)$,\\1,p' $SRC_DIR/testsuite/$NAME`\n+  do\n+    RUN=false\n+    echo $NAME $CYCLE\n+    FILE_NAME=\"`basename $NAME`\"\n+    EXE_NAME=\"`echo $FILE_NAME-$CYCLE | sed 's/cc$/exe/'`\"\n+    $CXX -D$CYCLE $SRC_DIR/testsuite/$NAME -o $EXE_NAME\n+    ./$EXE_NAME\n+    echo \"\"\n+  done\n+  for CYCLE in `sed -n 's,.*\\(TEST_[TB][0-9]*\\)$,\\1,p' $SRC_DIR/testsuite/$NAME`\n+  do\n+    RUN=false\n+    echo $NAME $CYCLE THREAD\n+    FILE_NAME=\"`basename $NAME`\"\n+    EXE_NAME=\"`echo $FILE_NAME-$CYCLE | sed 's/cc$/exe/'`\"\n+    $CXX_THREAD -D$CYCLE $SRC_DIR/testsuite/$NAME -o $EXE_NAME\n+    ./$EXE_NAME\n+    echo \"\"\n+  done\n+  if $RUN; then\n+    echo $NAME\n+    FILE_NAME=\"`basename $NAME`\"\n+    EXE_NAME=\"`echo $FILE_NAME | sed 's/cc$/exe/'`\"\n+    $CXX $SRC_DIR/testsuite/$NAME -o $EXE_NAME\n+    ./$EXE_NAME\n+    echo \"\"\n+  fi\n done\n \n exit 0"}, {"sha": "5f864ea0425cf0d8b599fecd794f91cf4a7e0d1d", "filename": "libstdc++-v3/testsuite/performance/allocator.cc", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator.cc?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -38,18 +38,20 @@\n #include <typeinfo>\n #include <sstream>\n #include <ext/mt_allocator.h>\n+#include <ext/new_allocator.h>\n #include <ext/malloc_allocator.h>\n #include <cxxabi.h>\n #include <testsuite_performance.h>\n \n using namespace std;\n-using __gnu_cxx::malloc_allocator;\n using __gnu_cxx::__mt_alloc;\n+using __gnu_cxx::new_allocator;\n+using __gnu_cxx::malloc_allocator;\n \n typedef int test_type;\n \n // The number of iterations to be performed.\n-int iterations;\n+int iterations = 100000;\n \n // The number of values to insert in the container, 32 will cause 5\n // (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n@@ -81,29 +83,6 @@ template<typename Container>\n     return test_iterations;\n   }\n \n-template<typename Container>\n-  void\n-  calibrate_iterations()\n-  {\n-    int try_iterations = iterations = 100000;\n-    int test_iterations;\n-\n-    __gnu_test::time_counter timer;\n-    timer.start();\n-    test_iterations = do_loop<Container>();\n-    timer.stop();\n-\n-    if (try_iterations > test_iterations && test_iterations > iterations)\n-      iterations = test_iterations - 100;\n-    else\n-      {\n-\tdouble tics = timer.real_time();\n-\tdouble iterpc = test_iterations / tics; //iterations per clock\n-\tdouble xtics = 200; // works for linux 2gig x86\n-\titerations = static_cast<int>(xtics * iterpc);\n-      }\n-  }\n-\n template<typename Container>\n   void\n   test_container(Container obj)\n@@ -130,15 +109,31 @@ template<typename Container>\n // http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n int main(void)\n {\n-  calibrate_iterations<vector<test_type> >();\n+#ifdef TEST_B1\n   test_container(vector<test_type>());\n+#endif\n+#ifdef TEST_B2\n   test_container(vector<test_type, malloc_allocator<test_type> >());\n+#endif\n+#ifdef TEST_B3\n+  test_container(vector<test_type, new_allocator<test_type> >());\n+#endif\n+#ifdef TEST_B4\n   test_container(vector<test_type, __mt_alloc<test_type> >());\n+#endif\n \n-  calibrate_iterations<list<test_type> >();\n+#ifdef TEST_B5\n   test_container(list<test_type>());\n+#endif\n+#ifdef TEST_B6\n   test_container(list<test_type, malloc_allocator<test_type> >());\n+#endif\n+#ifdef TEST_B7\n+  test_container(list<test_type, new_allocator<test_type> >());\n+#endif\n+#ifdef TEST_B8\n   test_container(list<test_type, __mt_alloc<test_type> >());\n+#endif\n \n   return 0;\n }"}, {"sha": "f6b4d45b651547c57235c14ee64057afbac14e91", "filename": "libstdc++-v3/testsuite/performance/allocator_map_thread.cc", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_map_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_map_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_map_thread.cc?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -37,17 +37,19 @@\n #include <iostream>\n #include <typeinfo>\n #include <sstream>\n-#include <cxxabi.h>\n #include <ext/mt_allocator.h>\n+#include <ext/new_allocator.h>\n #include <ext/malloc_allocator.h>\n+#include <cxxabi.h>\n #include <testsuite_performance.h>\n \n using namespace std;\n-using __gnu_cxx::malloc_allocator;\n using __gnu_cxx::__mt_alloc;\n+using __gnu_cxx::new_allocator;\n+using __gnu_cxx::malloc_allocator;\n \n // The number of iterations to be performed.\n-int iterations;\n+int iterations = 25000;\n \n template<typename Container>\n   void*\n@@ -69,23 +71,6 @@ template<typename Container>\n       }\n   }\n \n-template<typename Container>\n-  void\n-  calibrate_iterations()\n-  {\n-    int try_iterations = iterations = 10000;\n-\n-    __gnu_test::time_counter timer;\n-    timer.start();\n-    do_loop<Container>();\n-    timer.stop();\n-\n-    double tics = timer.real_time();\n-    double iterpc = iterations / tics; //iterations per clock\n-    double xtics = 100; // works for linux 2gig x86\n-    iterations = static_cast<int>(xtics * iterpc);\n-  }\n-\n template<typename Container>\n   void\n   test_container(Container obj)\n@@ -122,11 +107,19 @@ template<typename Container>\n \n int main(void)\n {\n-  calibrate_iterations<map<int, int> >();\n+#ifdef TEST_T1\n   test_container(map<int, int>());\n+#endif\n+#ifdef TEST_T2\n+  test_container(map<int, int, less<const int>, new_allocator<int> >());\n+#endif\n+#ifdef TEST_T3\n   test_container(map<int, int, less<const int>, malloc_allocator<int> >());\n+#endif\n+#ifdef TEST_T4\n   test_container(map<int, int, less<const int>,\n                      __mt_alloc< pair<const int, int> > >());\n+#endif\n \n   return 0;\n }"}, {"sha": "b313a1f7c4c4cec9475c4bae9a0c57279cc82aac", "filename": "libstdc++-v3/testsuite/performance/allocator_thread.cc", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fallocator_thread.cc?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -39,18 +39,20 @@\n #include <sstream>\n #include <pthread.h>\n #include <ext/mt_allocator.h>\n+#include <ext/new_allocator.h>\n #include <ext/malloc_allocator.h>\n #include <cxxabi.h>\n #include <testsuite_performance.h>\n \n using namespace std;\n-using __gnu_cxx::malloc_allocator;\n using __gnu_cxx::__mt_alloc;\n+using __gnu_cxx::new_allocator;\n+using __gnu_cxx::malloc_allocator;\n \n typedef int test_type;\n \n // The number of iterations to be performed.\n-int iterations;\n+int iterations = 25000;\n \n // The number of values to insert in the container, 32 will cause 5\n // (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n@@ -89,23 +91,6 @@ template<typename Container>\n       }\n   }\n \n-template<typename Container>\n-  void\n-  calibrate_iterations()\n-  {\n-    int try_iterations = iterations = 100000;\n-\n-    __gnu_test::time_counter timer;\n-    timer.start();\n-    do_loop<Container>();\n-    timer.stop();\n-\n-    double tics = timer.real_time();\n-    double iterpc = iterations / tics; //iterations per clock\n-    double xtics = 100; // works for linux 2gig x86\n-    iterations = static_cast<int>(xtics * iterpc);\n-  }\n-\n template<typename Container>\n   void\n   test_container(Container obj)\n@@ -144,15 +129,31 @@ template<typename Container>\n // http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n int main(void)\n {\n-  calibrate_iterations<vector<test_type> >();\n+#ifdef TEST_T1\n   test_container(vector<test_type>());\n+#endif\n+#ifdef TEST_T2\n   test_container(vector<test_type, malloc_allocator<test_type> >());\n+#endif\n+#ifdef TEST_T3\n+  test_container(vector<test_type, new_allocator<test_type> >());\n+#endif\n+#ifdef TEST_T4\n   test_container(vector<test_type, __mt_alloc<test_type> >());\n+#endif\n \n-  calibrate_iterations<list<test_type> >();\n+#ifdef TEST_T5\n   test_container(list<test_type>());\n+#endif\n+#ifdef TEST_T6\n   test_container(list<test_type, malloc_allocator<test_type> >());\n+#endif\n+#ifdef TEST_T7\n+  test_container(list<test_type, new_allocator<test_type> >());\n+#endif\n+#ifdef TEST_T8\n   test_container(list<test_type, __mt_alloc<test_type> >());\n+#endif\n \n   return 0;\n }"}, {"sha": "56b02bc64d8f367d1d16345646a9116bb7bf384a", "filename": "libstdc++-v3/testsuite/testsuite_performance.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64f44069c2d76c78b647f69f9d19dc65fdd0791/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h?ref=f64f44069c2d76c78b647f69f9d19dc65fdd0791", "patch": "@@ -183,6 +183,11 @@ namespace __gnu_test\n \n     std::ofstream out(name, std::ios_base::app);\n \n+#ifdef __GTHREADS\n+    if (__gthread_active_p ())\n+      testname.append (\"-thread\");\n+#endif\n+\n     out.setf(std::ios_base::left);\n     out << std::setw(25) << testname << tab;\n     out << std::setw(25) << comment << tab;\n@@ -209,6 +214,11 @@ namespace __gnu_test\n \n     std::ofstream out(name, std::ios_base::app);\n \n+#ifdef __GTHREADS\n+    if (__gthread_active_p ())\n+      testname.append (\"-thread\");\n+#endif\n+\n     out.setf(std::ios_base::left);\n     out << std::setw(25) << testname << tab;\n     out << std::setw(40) << header << tab;"}]}