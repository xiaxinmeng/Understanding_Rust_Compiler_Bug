{"sha": "fb0cb7fa67a4e267715129fc06185f631904cd86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwY2I3ZmE2N2E0ZTI2NzcxNTEyOWZjMDYxODVmNjMxOTA0Y2Q4Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-04-30T17:03:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-30T17:03:26Z"}, "message": "[AArch64] Add alternative 'extr' pattern, calculate rtx cost properly\n\n\t* config/aarch64/aarch64.md (*extr<mode>5_insn_alt): New pattern.\n\t(*extrsi5_insn_uxtw_alt): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_extr_rtx_p): New function.\n\t(aarch64_rtx_costs, IOR case): Use above to properly cost extr\n\toperations.\n\nFrom-SVN: r222639", "tree": {"sha": "ad3217dda400a9658457de3b3337e2df31f4cdf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3217dda400a9658457de3b3337e2df31f4cdf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0cb7fa67a4e267715129fc06185f631904cd86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0cb7fa67a4e267715129fc06185f631904cd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0cb7fa67a4e267715129fc06185f631904cd86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0cb7fa67a4e267715129fc06185f631904cd86/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19261b995bae88efa98e73cf9cf002aa1a4163ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19261b995bae88efa98e73cf9cf002aa1a4163ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19261b995bae88efa98e73cf9cf002aa1a4163ff"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "d24460f90b1aeae493cb37322881dcf24986901b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb0cb7fa67a4e267715129fc06185f631904cd86", "patch": "@@ -1,3 +1,11 @@\n+2015-04-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*extr<mode>5_insn_alt): New pattern.\n+\t(*extrsi5_insn_uxtw_alt): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_extr_rtx_p): New function.\n+\t(aarch64_rtx_costs, IOR case): Use above to properly cost extr\n+\toperations.\n+\n 2015-04-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs): Handle pattern for"}, {"sha": "d7ef4734989fcd10a7711517dc7b51e7f0bba6e5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fb0cb7fa67a4e267715129fc06185f631904cd86", "patch": "@@ -5445,6 +5445,51 @@ aarch64_frint_unspec_p (unsigned int u)\n     }\n }\n \n+/* Return true iff X is an rtx that will match an extr instruction\n+   i.e. as described in the *extr<mode>5_insn family of patterns.\n+   OP0 and OP1 will be set to the operands of the shifts involved\n+   on success and will be NULL_RTX otherwise.  */\n+\n+static bool\n+aarch64_extr_rtx_p (rtx x, rtx *res_op0, rtx *res_op1)\n+{\n+  rtx op0, op1;\n+  machine_mode mode = GET_MODE (x);\n+\n+  *res_op0 = NULL_RTX;\n+  *res_op1 = NULL_RTX;\n+\n+  if (GET_CODE (x) != IOR)\n+    return false;\n+\n+  op0 = XEXP (x, 0);\n+  op1 = XEXP (x, 1);\n+\n+  if ((GET_CODE (op0) == ASHIFT && GET_CODE (op1) == LSHIFTRT)\n+      || (GET_CODE (op1) == ASHIFT && GET_CODE (op0) == LSHIFTRT))\n+    {\n+     /* Canonicalise locally to ashift in op0, lshiftrt in op1.  */\n+      if (GET_CODE (op1) == ASHIFT)\n+        std::swap (op0, op1);\n+\n+      if (!CONST_INT_P (XEXP (op0, 1)) || !CONST_INT_P (XEXP (op1, 1)))\n+        return false;\n+\n+      unsigned HOST_WIDE_INT shft_amnt_0 = UINTVAL (XEXP (op0, 1));\n+      unsigned HOST_WIDE_INT shft_amnt_1 = UINTVAL (XEXP (op1, 1));\n+\n+      if (shft_amnt_0 < GET_MODE_BITSIZE (mode)\n+          && shft_amnt_0 + shft_amnt_1 == GET_MODE_BITSIZE (mode))\n+        {\n+          *res_op0 = XEXP (op0, 0);\n+          *res_op1 = XEXP (op1, 0);\n+          return true;\n+        }\n+    }\n+\n+  return false;\n+}\n+\n /* Calculate the cost of calculating (if_then_else (OP0) (OP1) (OP2)),\n    storing it in *COST.  Result is true if the total cost of the operation\n    has now been calculated.  */\n@@ -5977,6 +6022,16 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n           return true;\n         }\n+\n+      if (aarch64_extr_rtx_p (x, &op0, &op1))\n+        {\n+          *cost += rtx_cost (op0, IOR, 0, speed)\n+                   + rtx_cost (op1, IOR, 1, speed);\n+          if (speed)\n+            *cost += extra_cost->alu.shift;\n+\n+          return true;\n+        }\n     /* Fall through.  */\n     case XOR:\n     case AND:"}, {"sha": "11c470951dc77067a1b3859e0b49639f306f542d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0cb7fa67a4e267715129fc06185f631904cd86/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fb0cb7fa67a4e267715129fc06185f631904cd86", "patch": "@@ -3597,6 +3597,21 @@\n   [(set_attr \"type\" \"shift_imm\")]\n )\n \n+;; There are no canonicalisation rules for ashift and lshiftrt inside an ior\n+;; so we have to match both orderings.\n+(define_insn \"*extr<mode>5_insn_alt\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(ior:GPI  (lshiftrt:GPI (match_operand:GPI 2 \"register_operand\" \"r\")\n+\t\t\t        (match_operand 4 \"const_int_operand\" \"n\"))\n+\t\t  (ashift:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand 3 \"const_int_operand\" \"n\"))))]\n+  \"UINTVAL (operands[3]) < GET_MODE_BITSIZE (<MODE>mode)\n+   && (UINTVAL (operands[3]) + UINTVAL (operands[4])\n+       == GET_MODE_BITSIZE (<MODE>mode))\"\n+  \"extr\\\\t%<w>0, %<w>1, %<w>2, %4\"\n+  [(set_attr \"type\" \"shift_imm\")]\n+)\n+\n ;; zero_extend version of the above\n (define_insn \"*extrsi5_insn_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -3611,6 +3626,19 @@\n   [(set_attr \"type\" \"shift_imm\")]\n )\n \n+(define_insn \"*extrsi5_insn_uxtw_alt\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (ior:SI (lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t       (match_operand 4 \"const_int_operand\" \"n\"))\n+\t\t (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand 3 \"const_int_operand\" \"n\")))))]\n+  \"UINTVAL (operands[3]) < 32 &&\n+   (UINTVAL (operands[3]) + UINTVAL (operands[4]) == 32)\"\n+  \"extr\\\\t%w0, %w1, %w2, %4\"\n+  [(set_attr \"type\" \"shift_imm\")]\n+)\n+\n (define_insn \"*ror<mode>3_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(rotate:GPI (match_operand:GPI 1 \"register_operand\" \"r\")"}]}