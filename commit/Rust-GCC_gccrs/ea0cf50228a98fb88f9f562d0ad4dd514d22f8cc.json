{"sha": "ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwY2Y1MDIyOGE5OGZiODhmOWY1NjJkMGFkNGRkNTE0ZDIyZjhjYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-06-10T18:23:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-10T18:23:31Z"}, "message": "re PR target/66473 (ICE: in extract_insn, at recog.c:2343 (unrecognizable insn) with -mavx512f)\n\n\tPR target/66473\n\t* config/i386/i386.c (ix86_expand_vector_set): Use gen_int_mode\n\tto prepare mask operand for AVX512 modes.\n\ntestsuite/ChangeLog:\n\n\tPR target/66473\n\t* gcc.target/i386/pr66473.c: New test.\n\nFrom-SVN: r224340", "tree": {"sha": "84aeb720cee26bdc7ad4f6f2ed19150d73d8d6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84aeb720cee26bdc7ad4f6f2ed19150d73d8d6a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a116f140f8921880516df7bcfb62fb6a3db033a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a116f140f8921880516df7bcfb62fb6a3db033a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a116f140f8921880516df7bcfb62fb6a3db033a"}], "stats": {"total": 105, "additions": 62, "deletions": 43}, "files": [{"sha": "32fce15f1e811eb6b4746f88bc5242efc1d32687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "patch": "@@ -1,3 +1,9 @@\n+2015-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66473\n+\t* config/i386/i386.c (ix86_expand_vector_set): Use gen_int_mode\n+\tto prepare mask operand for AVX512 modes.\n+\n 2015-06-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/66474"}, {"sha": "86ce41305b869c54767425333778fda61827a3f6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "patch": "@@ -44720,6 +44720,8 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t{ gen_vec_set_lo_v4df, gen_vec_set_hi_v4df }\n       };\n   int i, j, n;\n+  machine_mode mmode = VOIDmode;\n+  rtx (*gen_blendm) (rtx, rtx, rtx, rtx);\n \n   switch (mode)\n     {\n@@ -44936,75 +44938,64 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n     case V8DFmode:\n       if (TARGET_AVX512F)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512f_blendmv8df (target, tmp, target,\n-\t\t\t\t\t     force_reg (QImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = QImode;\n+\t  gen_blendm = gen_avx512f_blendmv8df;\n \t}\n-      else\n-\tbreak;\n+      break;\n+\n     case V8DImode:\n       if (TARGET_AVX512F)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512f_blendmv8di (target, tmp, target,\n-\t\t\t\t\t     force_reg (QImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = QImode;\n+\t  gen_blendm = gen_avx512f_blendmv8di;\n \t}\n-      else\n-\tbreak;\n+      break;\n+\n     case V16SFmode:\n       if (TARGET_AVX512F)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512f_blendmv16sf (target, tmp, target,\n-\t\t\t\t\t      force_reg (HImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = HImode;\n+\t  gen_blendm = gen_avx512f_blendmv16sf;\n \t}\n-      else\n-\tbreak;\n+      break;\n+\n     case V16SImode:\n       if (TARGET_AVX512F)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512f_blendmv16si (target, tmp, target,\n-\t\t\t\t\t      force_reg (HImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = HImode;\n+\t  gen_blendm = gen_avx512f_blendmv16si;\n \t}\n-      else\n-\tbreak;\n+      break;\n+\n     case V32HImode:\n       if (TARGET_AVX512F && TARGET_AVX512BW)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512bw_blendmv32hi (target, tmp, target,\n-\t\t\t\t\t       force_reg (SImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = SImode;\n+\t  gen_blendm = gen_avx512bw_blendmv32hi;\n \t}\n-      else\n-\tbreak;\n+      break;\n+\n     case V64QImode:\n       if (TARGET_AVX512F && TARGET_AVX512BW)\n \t{\n-\t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n-\t  emit_insn (gen_avx512bw_blendmv64qi (target, tmp, target,\n-\t\t\t\t\t       force_reg (DImode, GEN_INT (1 << elt))));\n-\t  return;\n+\t  mmode = DImode;\n+\t  gen_blendm = gen_avx512bw_blendmv64qi;\n \t}\n-      else\n-\tbreak;\n+      break;\n \n     default:\n       break;\n     }\n \n-  if (use_vec_merge)\n+  if (mmode != VOIDmode)\n+    {\n+      tmp = gen_reg_rtx (mode);\n+      emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n+      emit_insn (gen_blendm (target, tmp, target,\n+\t\t\t     force_reg (mmode,\n+\t\t\t\t\tgen_int_mode (1 << elt, mmode))));\n+    }\n+  else if (use_vec_merge)\n     {\n       tmp = gen_rtx_VEC_DUPLICATE (mode, val);\n       tmp = gen_rtx_VEC_MERGE (mode, tmp, target, GEN_INT (1 << elt));"}, {"sha": "fb09b175e92ce23b9de07c167aa7b99b73cdca2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "patch": "@@ -1,3 +1,8 @@\n+2015-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66473\n+\t* gcc.target/i386/pr66473.c: New test.\n+\n 2015-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/66470"}, {"sha": "f2433abf8ebe44eb3f920450260303ef7fdc1828", "filename": "gcc/testsuite/gcc.target/i386/pr66473.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66473.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66473.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66473.c?ref=ea0cf50228a98fb88f9f562d0ad4dd514d22f8cc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+typedef double __m512d __attribute__ ((__vector_size__ (64)));\n+\n+extern __m512d _ZGVeN8v_func (__m512d);\n+\n+double\n+func_vlen8 (double x)\n+{\n+  __m512d mx, mr;\n+\n+  mx[0] = mx[1] = mx[2] = mx[3] = mx[4] = mx[5] = mx[6] = mx[7] = x;\n+  mr = _ZGVeN8v_func (mx);\n+\n+  return (double) mr[0];\n+}"}]}