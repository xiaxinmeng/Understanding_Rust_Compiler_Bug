{"sha": "e3390f5602149c9f918efdd9fdc63448920da916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzOTBmNTYwMjE0OWM5ZjkxOGVmZGQ5ZmRjNjM0NDg5MjBkYTkxNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-07T15:53:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-10T20:27:44Z"}, "message": "Introduce placeholder type\n\nThis is used in Traits with associated types that can contain TypeBounds\nbut provides an ability to reuse out type system to check that trait items\nare compatible with their respective ImplBlock Items", "tree": {"sha": "f17c9224919b79e520ef5dc0a87c3550b53e077c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17c9224919b79e520ef5dc0a87c3550b53e077c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3390f5602149c9f918efdd9fdc63448920da916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3390f5602149c9f918efdd9fdc63448920da916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3390f5602149c9f918efdd9fdc63448920da916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3390f5602149c9f918efdd9fdc63448920da916/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91aa2cba1ca4b481a9b3fed77054258a3fdc442d"}], "stats": {"total": 129, "additions": 126, "deletions": 3}, "files": [{"sha": "d8229376138f70a213f01e3dcf34d055fa4596a2", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -336,6 +336,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ParamType &param) override\n   {\n     param.resolve ()->accept_vis (*this);"}, {"sha": "d2890e0f7c6b33528502ab9a20f62cab4f5673ae", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -48,6 +48,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ADTType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)"}, {"sha": "c71dd39868e474d87acae01fe37b681fb45d5068", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -51,6 +51,8 @@ class ConstFoldType : public TyTy::TyVisitor\n \n   void visit (TyTy::FnType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::TupleType &type) override\n   {\n     if (type.num_fields () == 0)"}, {"sha": "1b83be3741900b08e74bfdcda72815e7589389b3", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -44,8 +44,9 @@ class ResolveTraitItemToRef : public TypeCheckBase\n \n   void visit (HIR::TraitItemType &type) override\n   {\n-    // associated types are not typed and only support bounds\n-    TyTy::BaseType *ty = nullptr;\n+    TyTy::BaseType *ty\n+      = new TyTy::PlaceholderType (type.get_mappings ().get_hirid ());\n+    context->insert_type (type.get_mappings (), ty);\n \n     // create trait-item-ref\n     Location locus = type.get_locus ();"}, {"sha": "9741dfac3e836ec470092eb66bf476820964a7f7", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -106,6 +106,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -183,6 +184,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperInternal (HirId ref, TyTy::SubstitutionArgumentMappings &mappings)\n@@ -238,6 +240,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperFromExisting (TyTy::BaseType *concrete, TyTy::BaseType *receiver)\n@@ -286,6 +289,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "f6121ca9bca4d505bdf7a71d17e79a9400ff0d62", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -54,6 +54,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n+  void visit (PlaceholderType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -102,6 +103,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n+  void visit (PlaceholderType &) override { gcc_unreachable (); }\n \n   // FIXME\n   void visit (FnPtr &type) override { gcc_unreachable (); }"}, {"sha": "7595e2ff885fdad5a662f4695c18bca7a7d3a778", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -86,6 +86,11 @@ class BaseCmp : public TyVisitor\n \n   virtual void visit (NeverType &) override { ok = false; }\n \n+  virtual void visit (PlaceholderType &) override\n+  { // it is ok for types to can eq to a placeholder\n+    ok = true;\n+  }\n+\n protected:\n   BaseCmp (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -832,6 +837,19 @@ class NeverCmp : public BaseCmp\n   NeverType *base;\n };\n \n+class PlaceholderCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  PlaceholderCmp (PlaceholderType *base) : BaseCmp (base), base (base) {}\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  PlaceholderType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "5db005b51898f0fc62bb81bfdbde402f856f2c10", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -299,7 +299,21 @@ class BaseRules : public TyVisitor\n   virtual void visit (NeverType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n+  virtual void visit (PlaceholderType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -1165,6 +1179,19 @@ class NeverRules : public BaseRules\n   NeverType *base;\n };\n \n+class PlaceholderRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  PlaceholderRules (PlaceholderType *base) : BaseRules (base), base (base) {}\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  PlaceholderType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "2bac5fe4d712dc758c0bbdf49b2ee8a2524957b7", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -45,6 +45,7 @@ class TyVisitor\n   virtual void visit (ParamType &type) = 0;\n   virtual void visit (StrType &type) = 0;\n   virtual void visit (NeverType &type) = 0;\n+  virtual void visit (PlaceholderType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "503d38034902993cc354a6b0ebd6542e18859cdb", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -1495,6 +1495,38 @@ NeverType::clone ()\n   return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n+void\n+PlaceholderType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+PlaceholderType::as_string () const\n+{\n+  return \"<placeholder>\";\n+}\n+\n+BaseType *\n+PlaceholderType::unify (BaseType *other)\n+{\n+  PlaceholderRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+PlaceholderType::can_eq (BaseType *other)\n+{\n+  PlaceholderCmp r (this);\n+  return r.can_eq (other);\n+}\n+\n+BaseType *\n+PlaceholderType::clone ()\n+{\n+  return new PlaceholderType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "c04c2493bac20cfbc8600210c3fea51b71c0179a", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3390f5602149c9f918efdd9fdc63448920da916/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=e3390f5602149c9f918efdd9fdc63448920da916", "patch": "@@ -48,6 +48,7 @@ enum TypeKind\n   USIZE,\n   ISIZE,\n   NEVER,\n+  PLACEHOLDER,\n   // there are more to add...\n   ERROR\n };\n@@ -110,6 +111,9 @@ class TypeKindFormat\n       case TypeKind::NEVER:\n \treturn \"Never\";\n \n+      case TypeKind::PLACEHOLDER:\n+\treturn \"Placeholder\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }\n@@ -1474,6 +1478,34 @@ class NeverType : public BaseType\n   bool is_unit () const override { return true; }\n };\n \n+// used at the type in associated types in traits\n+// see: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+class PlaceholderType : public BaseType\n+{\n+public:\n+  PlaceholderType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::PLACEHOLDER, refs)\n+  {}\n+\n+  PlaceholderType (HirId ref, HirId ty_ref,\n+\t\t   std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::PLACEHOLDER, refs)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (BaseType *other) override;\n+\n+  BaseType *clone () final override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  bool is_unit () const override { return true; }\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}]}