{"sha": "1d201131fee1d6028d36cc9b82db7dad944fa1ce", "node_id": "C_kwDOANBUbNoAKDFkMjAxMTMxZmVlMWQ2MDI4ZDM2Y2M5YjgyZGI3ZGFkOTQ0ZmExY2U", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-10-07T10:20:55Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-04T13:47:25Z"}, "message": "ada: Fix various typos in GNAT RM\n\nList of unknown words in files can be produced with:\n\n  $ cat *.rst | ispell -l |\n    tr '[:upper:]' '[:lower:]' | sort | uniq | less\n\nand can be easily filtered with eyes.\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_aspects.rst: Fix typos.\n\t* doc/gnat_rm/implementation_defined_attributes.rst: Likewise\n\t* doc/gnat_rm/implementation_defined_characteristics.rst: Likewise\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Likewise\n\t* doc/gnat_rm/standard_library_routines.rst: Likewise.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "c95ff9d7ae87485f86e29c3a2083ac48854ec94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c95ff9d7ae87485f86e29c3a2083ac48854ec94c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d201131fee1d6028d36cc9b82db7dad944fa1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d201131fee1d6028d36cc9b82db7dad944fa1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d201131fee1d6028d36cc9b82db7dad944fa1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d201131fee1d6028d36cc9b82db7dad944fa1ce/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533d79ac93b7757060a901df055575320e2ca422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533d79ac93b7757060a901df055575320e2ca422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533d79ac93b7757060a901df055575320e2ca422"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "960c505c9ae311963a6b444a36fa3ccb1b5334f0", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -422,7 +422,7 @@ This aspect is equivalent to :ref:`attribute Object_Size<Attribute-Object_Size>`\n \n Aspect Obsolescent\n ==================\n-.. index:: Obsolsecent\n+.. index:: Obsolescent\n \n This aspect is equivalent to :ref:`pragma Obsolescent<Pragma_Obsolescent>`. Note that the\n evaluation of this aspect happens at the point of occurrence, it is not"}, {"sha": "22dae06cefeea7599419b383344094f8e2c95497", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -589,7 +589,7 @@ Attribute Library_Level\n ``P'Library_Level``, where P is an entity name,\n returns a Boolean value which is True if the entity is declared\n at the library level, and False otherwise. Note that within a\n-generic instantition, the name of the generic unit denotes the\n+generic instantiation, the name of the generic unit denotes the\n instance, which means that this attribute can be used to test\n if a generic is instantiated at the library level, as shown\n in this example:\n@@ -1231,7 +1231,7 @@ Attribute System_Allocator_Alignment\n .. index:: System_Allocator_Alignment\n \n ``Standard'System_Allocator_Alignment`` (``Standard`` is the only\n-allowed prefix) provides the observable guaranted to be honored by\n+allowed prefix) provides the observable guaranteed to be honored by\n the system allocator (malloc). This is a static value that can be used\n in user storage pools based on malloc either to reject allocation\n with alignment too large or to enable a realignment circuitry if the"}, {"sha": "fb6a63ced2cf4790021668c63913d06583f55065", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -1215,7 +1215,7 @@ a distributed application.\n *\n   \"The range of type System.RPC.Partition_Id.  See E.5(14).\"\n \n-System.RPC.Partion_ID'Last is Integer'Last. See source file :file:`s-rpc.ads`.\n+System.RPC.Partition_ID'Last is Integer'Last. See source file :file:`s-rpc.ads`.\n \n *\n   \"Implementation-defined interfaces in the PCS.  See E.5(26).\""}, {"sha": "100d79e69b1fe5de15cbb4060d77150579fb33ef", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -1389,7 +1389,7 @@ Pragma CPP_Virtual\n This pragma is now obsolete and, other than generating a warning if warnings\n on obsolescent features are enabled, is completely ignored.\n It is retained for compatibility\n-purposes. It used to be required to ensure compoatibility with C++, but\n+purposes. It used to be required to ensure compatibility with C++, but\n is no longer required for that purpose because GNAT generates\n the same object layout as the G++ compiler by default.\n \n@@ -3870,7 +3870,7 @@ decrease or increase in successive iterations of the loop. In its simplest\n form, just one expression is specified, whose value must increase or decrease\n on each iteration of the loop.\n \n-In a more complex form, multiple arguments can be given which are intepreted\n+In a more complex form, multiple arguments can be given which are interpreted\n in a nesting lexicographic manner. For example:\n \n .. code-block:: ada\n@@ -4951,7 +4951,7 @@ appear at the start of the declarations in a subprogram body\n Note: This pragma is called ``Post_Class`` rather than\n ``Post'Class`` because the latter would not be strictly\n conforming to the allowed syntax for pragmas. The motivation\n-for provinding pragmas equivalent to the aspects is to allow a program\n+for providing pragmas equivalent to the aspects is to allow a program\n to be written using the pragmas, and then compiled if necessary\n using an Ada compiler that does not recognize the pragmas or\n aspects, but is prepared to ignore the pragmas. The assertion\n@@ -6217,7 +6217,7 @@ replacement of any dots in the unit name by the specified string literal.\n \n Note that Source_File_Name pragmas should not be used if you are using\n project files. The reason for this rule is that the project manager is not\n-aware of these pragmas, and so other tools that use the projet file would not\n+aware of these pragmas, and so other tools that use the project file would not\n be aware of the intended naming conventions. If you are using project files,\n file naming is controlled by Source_File_Name_Project pragmas, which are\n usually supplied automatically by the project manager. A pragma\n@@ -7291,7 +7291,7 @@ configuration pragma will ensure this test is not suppressed:\n This pragma is standard in Ada 2005. It is available in all earlier versions\n of Ada as an implementation-defined pragma.\n \n-Note that in addition to the checks defined in the Ada RM, GNAT recogizes a\n+Note that in addition to the checks defined in the Ada RM, GNAT recognizes a\n number of implementation-defined check names. See the description of pragma\n ``Suppress`` for full details.\n \n@@ -7592,7 +7592,7 @@ expression (which does not exist in Ada 83).\n Note if the second argument of ``DETAILS`` is a ``local_NAME`` then the\n second form is always understood. If the intention is to use\n the fourth form, then you can write ``NAME & \"\"`` to force the\n-intepretation as a *static_string_EXPRESSION*.\n+interpretation as a *static_string_EXPRESSION*.\n \n Note: if the first argument is a valid ``TOOL_NAME``, it will be interpreted\n that way. The use of the ``TOOL_NAME`` argument is relevant only to users"}, {"sha": "f9749e07e4f562ee84d68d89058889cbe9507b9e", "filename": "gcc/ada/doc/gnat_rm/standard_library_routines.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -550,7 +550,7 @@ the unit is not implemented.\n   This package provides the capability of associating arbitrary\n   task-specific data with separate tasks.\n \n-``Ada.Task_Identifification`` *(C.7.1)*\n+``Ada.Task_Identification`` *(C.7.1)*\n   This package provides capabilities for task identification.\n \n ``Ada.Task_Termination`` *(C.7.3)*"}, {"sha": "ad6a8adbde4719c0666f6b9951a9d18ccdef5dbe", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d201131fee1d6028d36cc9b82db7dad944fa1ce/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1d201131fee1d6028d36cc9b82db7dad944fa1ce", "patch": "@@ -2787,7 +2787,7 @@ that is, they never return an object whose type is a descendant of type T.\n This pragma is now obsolete and, other than generating a warning if warnings\n on obsolescent features are enabled, is completely ignored.\n It is retained for compatibility\n-purposes. It used to be required to ensure compoatibility with C++, but\n+purposes. It used to be required to ensure compatibility with C++, but\n is no longer required for that purpose because GNAT generates\n the same object layout as the G++ compiler by default.\n \n@@ -5387,7 +5387,7 @@ decrease or increase in successive iterations of the loop. In its simplest\n form, just one expression is specified, whose value must increase or decrease\n on each iteration of the loop.\n \n-In a more complex form, multiple arguments can be given which are intepreted\n+In a more complex form, multiple arguments can be given which are interpreted\n in a nesting lexicographic manner. For example:\n \n @example\n@@ -6445,7 +6445,7 @@ appear at the start of the declarations in a subprogram body\n Note: This pragma is called @code{Post_Class} rather than\n @code{Post'Class} because the latter would not be strictly\n conforming to the allowed syntax for pragmas. The motivation\n-for provinding pragmas equivalent to the aspects is to allow a program\n+for providing pragmas equivalent to the aspects is to allow a program\n to be written using the pragmas, and then compiled if necessary\n using an Ada compiler that does not recognize the pragmas or\n aspects, but is prepared to ignore the pragmas. The assertion\n@@ -7761,7 +7761,7 @@ replacement of any dots in the unit name by the specified string literal.\n \n Note that Source_File_Name pragmas should not be used if you are using\n project files. The reason for this rule is that the project manager is not\n-aware of these pragmas, and so other tools that use the projet file would not\n+aware of these pragmas, and so other tools that use the project file would not\n be aware of the intended naming conventions. If you are using project files,\n file naming is controlled by Source_File_Name_Project pragmas, which are\n usually supplied automatically by the project manager. A pragma\n@@ -8820,7 +8820,7 @@ pragma Unsuppress (Duplicated_Tag_Check);\n This pragma is standard in Ada 2005. It is available in all earlier versions\n of Ada as an implementation-defined pragma.\n \n-Note that in addition to the checks defined in the Ada RM, GNAT recogizes a\n+Note that in addition to the checks defined in the Ada RM, GNAT recognizes a\n number of implementation-defined check names. See the description of pragma\n @code{Suppress} for full details.\n \n@@ -9112,7 +9112,7 @@ expression (which does not exist in Ada 83).\n Note if the second argument of @code{DETAILS} is a @code{local_NAME} then the\n second form is always understood. If the intention is to use\n the fourth form, then you can write @code{NAME & \"\"} to force the\n-intepretation as a `static_string_EXPRESSION'.\n+interpretation as a `static_string_EXPRESSION'.\n \n Note: if the first argument is a valid @code{TOOL_NAME}, it will be interpreted\n that way. The use of the @code{TOOL_NAME} argument is relevant only to users\n@@ -9928,7 +9928,7 @@ This aspect is equivalent to @ref{141,,attribute Object_Size}.\n @section Aspect Obsolescent\n \n \n-@geindex Obsolsecent\n+@geindex Obsolescent\n \n This aspect is equivalent to @ref{ac,,pragma Obsolescent}. Note that the\n evaluation of this aspect happens at the point of occurrence, it is not\n@@ -10984,7 +10984,7 @@ this attribute.\n @code{P'Library_Level}, where P is an entity name,\n returns a Boolean value which is True if the entity is declared\n at the library level, and False otherwise. Note that within a\n-generic instantition, the name of the generic unit denotes the\n+generic instantiation, the name of the generic unit denotes the\n instance, which means that this attribute can be used to test\n if a generic is instantiated at the library level, as shown\n in this example:\n@@ -11710,7 +11710,7 @@ an implicit dependency on this unit.\n @geindex System_Allocator_Alignment\n \n @code{Standard'System_Allocator_Alignment} (@code{Standard} is the only\n-allowed prefix) provides the observable guaranted to be honored by\n+allowed prefix) provides the observable guaranteed to be honored by\n the system allocator (malloc). This is a static value that can be used\n in user storage pools based on malloc either to reject allocation\n with alignment too large or to enable a realignment circuitry if the\n@@ -17859,7 +17859,7 @@ a distributed application.\n \u201cThe range of type System.RPC.Partition_Id.  See E.5(14).\u201d\n @end itemize\n \n-System.RPC.Partion_ID\u2019Last is Integer\u2019Last. See source file @code{s-rpc.ads}.\n+System.RPC.Partition_ID\u2019Last is Integer\u2019Last. See source file @code{s-rpc.ads}.\n \n \n @itemize *\n@@ -21343,7 +21343,7 @@ only the tag value.\n This package provides the capability of associating arbitrary\n task-specific data with separate tasks.\n \n-@item @code{Ada.Task_Identifification} `(C.7.1)'\n+@item @code{Ada.Task_Identification} `(C.7.1)'\n \n This package provides capabilities for task identification.\n "}]}