{"sha": "b21155754fcccc8980d5e696969229bb20375da5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxMTU1NzU0ZmNjY2M4OTgwZDVlNjk2OTY5MjI5YmIyMDM3NWRhNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-01-23T12:39:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-23T12:39:30Z"}, "message": "function.c (assign_parms): Don't put args of inline functions into registers when not optimizing.\n\n        * function.c (assign_parms): Don't put args of inline functions\n        into registers when not optimizing.\n        * cp/decl2.c (grokclassfn): Don't set DECL_REGISTER on 'this'.\n\nFrom-SVN: r49131", "tree": {"sha": "781114677aafcbf00cc97478a4b47d556724ba1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781114677aafcbf00cc97478a4b47d556724ba1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21155754fcccc8980d5e696969229bb20375da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21155754fcccc8980d5e696969229bb20375da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21155754fcccc8980d5e696969229bb20375da5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21155754fcccc8980d5e696969229bb20375da5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bacc7b094be8ab0fff0a465298d14d298fc9d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bacc7b094be8ab0fff0a465298d14d298fc9d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bacc7b094be8ab0fff0a465298d14d298fc9d29"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "7d0e69cb7bc779e515d39d17a2839ac63ac95bf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21155754fcccc8980d5e696969229bb20375da5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21155754fcccc8980d5e696969229bb20375da5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b21155754fcccc8980d5e696969229bb20375da5", "patch": "@@ -1,3 +1,8 @@\n+2002-01-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* function.c (assign_parms): Don't put args of inline functions\n+\tinto registers when not optimizing.\n+\n 2002-01-23  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* config/arm/arm.md (UNSPEC_PROLOGUE_USE): New unspec constant."}, {"sha": "ff79b13382792203c7dd18eaecea88a38207b5f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b21155754fcccc8980d5e696969229bb20375da5", "patch": "@@ -1,5 +1,7 @@\n 2002-01-22  Jason Merrill  <jason@redhat.com>\n \n+\t* decl2.c (grokclassfn): Don't set DECL_REGISTER on 'this'.\n+\n \t* parse.y (function_body): Suppress the block for the outermost\n \tcurly braces.\n \t* decl.c (pushdecl): Don't try to skip it."}, {"sha": "1c7b579a9ec1a0718898b6be453a46f444766960", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b21155754fcccc8980d5e696969229bb20375da5", "patch": "@@ -983,10 +983,6 @@ grokclassfn (ctype, function, flags, quals)\n       qual_type = cp_build_qualified_type (type, this_quals);\n       parm = build_artificial_parm (this_identifier, qual_type);\n       c_apply_type_quals_to_decl (this_quals, parm);\n-\n-      /* We can make this a register, so long as we don't\n-\t accidentally complain if someone tries to take its address.  */\n-      DECL_REGISTER (parm) = 1;\n       TREE_CHAIN (parm) = last_function_parms;\n       last_function_parms = parm;\n     }"}, {"sha": "d304b309c4e0eb58001818f5154217f82c174d05", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21155754fcccc8980d5e696969229bb20375da5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b21155754fcccc8980d5e696969229bb20375da5", "patch": "@@ -4650,8 +4650,7 @@ assign_parms (fndecl)\n \t  SET_DECL_RTL (parm, stack_parm);\n \t}\n       else if (! ((! optimize\n-\t\t   && ! DECL_REGISTER (parm)\n-\t\t   && ! DECL_INLINE (fndecl))\n+\t\t   && ! DECL_REGISTER (parm))\n \t\t  || TREE_SIDE_EFFECTS (parm)\n \t\t  /* If -ffloat-store specified, don't put explicit\n \t\t     float variables into registers.  */\n@@ -4751,8 +4750,7 @@ assign_parms (fndecl)\n \t     can safely live in a register, put it in one.  */\n \t  if (passed_pointer && TYPE_MODE (TREE_TYPE (parm)) != BLKmode\n \t      && ! ((! optimize\n-\t\t     && ! DECL_REGISTER (parm)\n-\t\t     && ! DECL_INLINE (fndecl))\n+\t\t     && ! DECL_REGISTER (parm))\n \t\t    || TREE_SIDE_EFFECTS (parm)\n \t\t    /* If -ffloat-store specified, don't put explicit\n \t\t       float variables into registers.  */"}]}