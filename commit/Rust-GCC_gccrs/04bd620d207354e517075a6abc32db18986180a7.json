{"sha": "04bd620d207354e517075a6abc32db18986180a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiZDYyMGQyMDczNTRlNTE3MDc1YTZhYmMzMmRiMTg5ODYxODBhNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1997-12-24T22:10:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-24T22:10:46Z"}, "message": "abi64.h (LONG_MAX_SPEC): Check MIPS_ABI_DEFAULT and TARGET_DEFAULT, and define __LONG_MAX__ appropriately.\n\n        * abi64.h (LONG_MAX_SPEC): Check MIPS_ABI_DEFAULT and TARGET_DEFAULT,\n        and define __LONG_MAX__ appropriately.  Add support for -mabi=X,\n        -mlong64, and -mgp{32,64} options.\n        * mips.c (mips_abi): Change type to int.\n        * mips.h (enum mips_abi_type): Delete.\n        (ABI_32, ABI_N32, ABI_64, ABI_EABI): Define as constants.\n        (mips_abi): Change type to int.\n\nFrom-SVN: r17229", "tree": {"sha": "ae30bb63d5386952a7440ae2c9a0425fd5b09667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae30bb63d5386952a7440ae2c9a0425fd5b09667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04bd620d207354e517075a6abc32db18986180a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bd620d207354e517075a6abc32db18986180a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04bd620d207354e517075a6abc32db18986180a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bd620d207354e517075a6abc32db18986180a7/comments", "author": null, "committer": null, "parents": [{"sha": "439d5a35d8e60afa53dd6a7ca541c480b9b38239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439d5a35d8e60afa53dd6a7ca541c480b9b38239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439d5a35d8e60afa53dd6a7ca541c480b9b38239"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "fd3149d4700bf5050b4d6700574bc47ae2acafdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bd620d207354e517075a6abc32db18986180a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bd620d207354e517075a6abc32db18986180a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04bd620d207354e517075a6abc32db18986180a7", "patch": "@@ -1,3 +1,13 @@\n+Wed Dec 24 23:12:14 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* abi64.h (LONG_MAX_SPEC): Check MIPS_ABI_DEFAULT and TARGET_DEFAULT,\n+\tand define __LONG_MAX__ appropriately.  Add support for -mabi=X,\n+\t-mlong64, and -mgp{32,64} options.\n+\t* mips.c (mips_abi): Change type to int.\n+\t* mips.h (enum mips_abi_type): Delete.\n+\t(ABI_32, ABI_N32, ABI_64, ABI_EABI): Define as constants.\n+\t(mips_abi): Change type to int.\n+\n Wed Dec 24 22:38:34 1997  John Carr  <jfc@mit.edu>\n \n \t* flags.h, toplev.c, calls.c, alias.c: Remove flag_alias_check;"}, {"sha": "4f6fccfafb9919e007a29b70508adaa8b3222d52", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=04bd620d207354e517075a6abc32db18986180a7", "patch": "@@ -213,8 +213,24 @@ extern struct rtx_def *mips_function_value ();\n   (mips_abi == ABI_EABI && (NAMED)\t\t\t\t\t\\\n    && FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED))\n \n+/* Define LONG_MAX correctly for all users.  We need to handle 32 bit EABI,\n+   64 bit EABI, N32, and N64 as possible defaults.  The checks performed here\n+   are the same as the checks in override_options in mips.c that determines\n+   whether MASK_LONG64 will be set.\n+\n+   This does not handle inappropriate options or ununusal option\n+   combinations.  */\n+\n #undef LONG_MAX_SPEC\n-#define LONG_MAX_SPEC \"%{!mno-long64:-D__LONG_MAX__=9223372036854775807LL}\"\n+#if ((MIPS_ABI_DEFAULT == ABI_64) || ((MIPS_ABI_DEFAULT == ABI_EABI) && ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_64BIT)))\n+#define LONG_MAX_SPEC \\\n+  \"%{!mabi=n32:%{!mno-long64:%{!mgp32:-D__LONG_MAX__=9223372036854775807L}}}\"\n+#else\n+#define LONG_MAX_SPEC \\\n+  \"%{mabi=64:-D__LONG_MAX__=9223372036854775807L} \\\n+   %{mlong64:-D__LONG_MAX__=9223372036854775807L} \\\n+   %{mgp64:-D__LONG_MAX__=9223372036854775807L}\"\n+#endif\n \n /* ??? Unimplemented stuff follows.  */\n "}, {"sha": "88569abdba81b15ba5dd6a309ac68103d8908c06", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=04bd620d207354e517075a6abc32db18986180a7", "patch": "@@ -194,9 +194,9 @@ enum processor_type mips_cpu;\n int mips_isa;\n \n #ifdef MIPS_ABI_DEFAULT\n-/* which ABI to use.  This is defined to a constant in mips.h if the target\n+/* Which ABI to use.  This is defined to a constant in mips.h if the target\n    doesn't support multiple ABIs.  */\n-enum mips_abi_type mips_abi;\n+int mips_abi;\n #endif\n \n /* Strings to hold which cpu and instruction set architecture to use.  */"}, {"sha": "919092d9782c878128b62b3a33360ee8044931a4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04bd620d207354e517075a6abc32db18986180a7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=04bd620d207354e517075a6abc32db18986180a7", "patch": "@@ -75,21 +75,20 @@ enum processor_type {\n /* Recast the cpu class to be the cpu attribute.  */\n #define mips_cpu_attr ((enum attr_cpu)mips_cpu)\n \n-/* Which ABI to use.  This is only used by the Irix 6 port currently.  */\n+/* Which ABI to use.  These are constants because abi64.h must check their\n+   value at preprocessing time.  */\n \n-enum mips_abi_type {\n-  ABI_32,\n-  ABI_N32,\n-  ABI_64,\n-  ABI_EABI\n-};\n+#define ABI_32  0\n+#define ABI_N32 1\n+#define ABI_64  2\n+#define ABI_EABI 3\n \n #ifndef MIPS_ABI_DEFAULT\n /* We define this away so that there is no extra runtime cost if the target\n    doesn't support multiple ABIs.  */\n #define mips_abi ABI_32\n #else\n-extern enum mips_abi_type mips_abi;\n+extern int mips_abi;\n #endif\n \n /* Whether to emit abicalls code sequences or not.  */"}]}