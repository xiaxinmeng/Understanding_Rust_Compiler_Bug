{"sha": "85998a930587e8b03cf19bae41bb198cf82328b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5OThhOTMwNTg3ZThiMDNjZjE5YmFlNDFiYjE5OGNmODIzMjhiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-28T09:18:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-28T09:18:35Z"}, "message": "re PR tree-optimization/52395 (Too conservative alignment info from SRA)\n\n2012-02-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52395\n\t* tree-sra.c (build_ref_for_offset): Also look at the base\n\tTYPE_ALIGN when figuring out the alignment of the replacement.\n\nFrom-SVN: r184620", "tree": {"sha": "a9d21a45612ee50fadb48bf21238faf85aacf741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9d21a45612ee50fadb48bf21238faf85aacf741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85998a930587e8b03cf19bae41bb198cf82328b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85998a930587e8b03cf19bae41bb198cf82328b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85998a930587e8b03cf19bae41bb198cf82328b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85998a930587e8b03cf19bae41bb198cf82328b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a5a825aaecd124c57d3b08ba349631ac8e89123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a825aaecd124c57d3b08ba349631ac8e89123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5a825aaecd124c57d3b08ba349631ac8e89123"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "155ba4606eacd771c78c1b7824876a7ff5fca6f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85998a930587e8b03cf19bae41bb198cf82328b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85998a930587e8b03cf19bae41bb198cf82328b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85998a930587e8b03cf19bae41bb198cf82328b8", "patch": "@@ -1,3 +1,9 @@\n+2012-02-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52395\n+\t* tree-sra.c (build_ref_for_offset): Also look at the base\n+\tTYPE_ALIGN when figuring out the alignment of the replacement.\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52402"}, {"sha": "710f24eeba6bb13cf7a63f75dd3acbbc64441d21", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85998a930587e8b03cf19bae41bb198cf82328b8/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85998a930587e8b03cf19bae41bb198cf82328b8/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=85998a930587e8b03cf19bae41bb198cf82328b8", "patch": "@@ -1526,10 +1526,12 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n      we can extract more optimistic alignment information\n      by looking at the access mode.  That would constrain the\n      alignment of base + base_offset which we would need to\n-     adjust according to offset.\n-     ???  But it is not at all clear that prev_base is an access\n-     that was in the IL that way, so be conservative for now.  */\n+     adjust according to offset.  */\n   align = get_pointer_alignment_1 (base, &misalign);\n+  if (misalign == 0\n+      && (TREE_CODE (prev_base) == MEM_REF\n+\t  || TREE_CODE (prev_base) == TARGET_MEM_REF))\n+    align = MAX (align, TYPE_ALIGN (TREE_TYPE (prev_base)));\n   misalign += (double_int_sext (tree_to_double_int (off),\n \t\t\t\tTYPE_PRECISION (TREE_TYPE (off))).low\n \t       * BITS_PER_UNIT);"}]}