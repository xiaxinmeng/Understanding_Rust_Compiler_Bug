{"sha": "85cc7011a5cce9bc8c478555f4f4fce5a3ae015c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjYzcwMTFhNWNjZTliYzhjNDc4NTU1ZjRmNGZjZTVhM2FlMDE1Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-09-29T19:04:41Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-09-29T19:04:41Z"}, "message": "Add prototypes for static function.\n\n(add_dependence, remove_dependence, regno_use_in): Now static.\n(schedule_insns): Have dummy version also take FILE * parameter.\n\nFrom-SVN: r5530", "tree": {"sha": "95a9f31d29ffe1b096e0411dab852d86ab50973d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a9f31d29ffe1b096e0411dab852d86ab50973d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c/comments", "author": null, "committer": null, "parents": [{"sha": "f7531123b54ad4ff38bca85d56c8ae9e682fb8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7531123b54ad4ff38bca85d56c8ae9e682fb8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7531123b54ad4ff38bca85d56c8ae9e682fb8d3"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "7f9c831f662490050e93c6849b4bcefcb9a1b398", "filename": "gcc/sched.c", "status": "modified", "additions": 66, "deletions": 16, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cc7011a5cce9bc8c478555f4f4fce5a3ae015c/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=85cc7011a5cce9bc8c478555f4f4fce5a3ae015c", "patch": "@@ -280,12 +280,66 @@ static int q_size = 0;\n static int *insn_tick;\n #define INSN_TICK(INSN) (insn_tick[INSN_UID (INSN)])\n \n+/* Data structure for keeping track of register information\n+   during that register's life.  */\n+\n+struct sometimes\n+{\n+  short offset; short bit;\n+  short live_length; short calls_crossed;\n+};\n+\n /* Forward declarations.  */\n-static void sched_analyze_2 ();\n-static void schedule_block ();\n+static rtx canon_rtx\t\t\tPROTO((rtx));\n+static int rtx_equal_for_memref_p\tPROTO((rtx, rtx));\n+static rtx find_symbolic_term\t\tPROTO((rtx));\n+static int memrefs_conflict_p\t\tPROTO((int, rtx, int, rtx,\n+\t\t\t\t\t       HOST_WIDE_INT));\n+static void add_dependence\t\tPROTO((rtx, rtx, enum reg_note));\n+static void remove_dependence\t\tPROTO((rtx, rtx));\n+static rtx find_insn_list\t\tPROTO((rtx, rtx));\n+static int insn_unit\t\t\tPROTO((rtx));\n+static unsigned int blockage_range\tPROTO((int, rtx));\n+static void clear_units\t\t\tPROTO((void));\n+static void prepare_unit\t\tPROTO((int));\n+static int actual_hazard_this_instance\tPROTO((int, int, rtx, int, int));\n+static void schedule_unit\t\tPROTO((int, rtx, int));\n+static int actual_hazard\t\tPROTO((int, rtx, int, int));\n+static int potential_hazard\t\tPROTO((int, rtx, int));\n+static int insn_cost\t\t\tPROTO((rtx, rtx, rtx));\n+static int priority\t\t\tPROTO((rtx));\n+static void free_pending_lists\t\tPROTO((void));\n+static void add_insn_mem_dependence\tPROTO((rtx *, rtx *, rtx, rtx));\n+static void flush_pending_lists\t\tPROTO((rtx));\n+static void sched_analyze_1\t\tPROTO((rtx, rtx));\n+static void sched_analyze_2\t\tPROTO((rtx, rtx));\n+static void sched_analyze_insn\t\tPROTO((rtx, rtx));\n+static int sched_analyze\t\tPROTO((rtx, rtx));\n+static void sched_note_set\t\tPROTO((int, rtx, int));\n+static int rank_for_schedule\t\tPROTO((rtx *, rtx *));\n+static void swap_sort\t\t\tPROTO((rtx *, int));\n+static void queue_insn\t\t\tPROTO((rtx, int));\n+static int birthing_insn\t\tPROTO((rtx));\n+static void adjust_priority\t\tPROTO((rtx));\n+static int schedule_insn\t\tPROTO((rtx, rtx *, int, int));\n+static int schedule_select\t\tPROTO((rtx *, int, int, FILE *));\n+static void create_reg_dead_note\tPROTO((rtx, rtx));\n+static void attach_deaths\t\tPROTO((rtx, rtx, int));\n+static void attach_deaths_insn\t\tPROTO((rtx));\n+static rtx unlink_notes\t\t\tPROTO((rtx, rtx));\n+static int new_sometimes_live\t\tPROTO((struct sometimes *, int, int,\n+\t\t\t\t\t       int));\n+static void finish_sometimes_live\tPROTO((struct sometimes *, int));\n+static void schedule_block\t\tPROTO((int, FILE *));\n+static rtx regno_use_in\t\t\tPROTO((int, rtx));\n+static void split_hard_reg_notes\tPROTO((rtx, rtx, rtx, rtx));\n+static void new_insn_dead_notes\t\tPROTO((rtx, rtx, rtx, rtx));\n+static void update_n_sets\t\tPROTO((rtx, int));\n+static void update_flow_info\t\tPROTO((rtx, rtx, rtx, rtx));\n \n /* Main entry point of this file.  */\n-void schedule_insns ();\n+void schedule_insns\tPROTO((FILE *));\n+\n #endif /* INSN_SCHEDULING */\n \f\n #define SIZE_FOR_MODE(X) (GET_MODE_SIZE (GET_MODE (X)))\n@@ -817,7 +871,7 @@ output_dependence (mem, x)\n    LOG_LINKS of INSN, if not already there.  DEP_TYPE indicates the type\n    of dependence that this link represents.  */\n \n-void\n+static void\n add_dependence (insn, elem, dep_type)\n      rtx insn;\n      rtx elem;\n@@ -885,7 +939,8 @@ add_dependence (insn, elem, dep_type)\n \n /* Remove ELEM wrapped in an INSN_LIST from the LOG_LINKS\n    of INSN.  Abort if not found.  */\n-void\n+\n+static void\n remove_dependence (insn, elem)\n      rtx insn;\n      rtx elem;\n@@ -912,7 +967,11 @@ remove_dependence (insn, elem)\n }\n \f\n #ifndef INSN_SCHEDULING\n-void schedule_insns () {}\n+void\n+schedule_insns (dump_file)\n+     FILE *dump_file;\n+{\n+}\n #else\n #ifndef __GNUC__\n #define __inline\n@@ -2835,15 +2894,6 @@ unlink_notes (insn, tail)\n   return insn;\n }\n \n-/* Data structure for keeping track of register information\n-   during that register's life.  */\n-\n-struct sometimes\n-{\n-  short offset; short bit;\n-  short live_length; short calls_crossed;\n-};\n-\n /* Constructor for `sometimes' data structure.  */\n \n static int\n@@ -3799,7 +3849,7 @@ schedule_block (b, file)\n    REGNO, returning the rtx of the reference found if any.  Otherwise,\n    returns 0.  */\n \n-rtx\n+static rtx\n regno_use_in (regno, x)\n      int regno;\n      rtx x;"}]}