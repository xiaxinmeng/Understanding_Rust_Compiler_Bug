{"sha": "611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjExNDk1ZTIxYjA3YzY1OGMyZTZlYWIzYjNhNmM2NDhhOGUxYjFhMw==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-07-01T11:22:17Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-07-01T11:22:17Z"}, "message": "lex.c (real_yylex): Change integer literal overflow handling to be like c-lex.c.\n\n\t* lex.c (real_yylex) : Change integer literal overflow handling to\n\tbe like c-lex.c.\n\nFrom-SVN: r27879", "tree": {"sha": "0c4df4dbd7a96702a02cd297899ed20bdc452f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4df4dbd7a96702a02cd297899ed20bdc452f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3/comments", "author": null, "committer": null, "parents": [{"sha": "0d072f2298d8f17990241da9d521cc3b7638b39c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d072f2298d8f17990241da9d521cc3b7638b39c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d072f2298d8f17990241da9d521cc3b7638b39c"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "25a0005bb5b66143676588745f683f56278849af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "patch": "@@ -1,5 +1,8 @@\n 1999-07-01  Gavin Romig-Koch  <gavin@cygnus.com>\n \n+\t* lex.c (real_yylex) : Change integer literal overflow handling to\n+\tbe like c-lex.c.\n+\n \t* lex.c (real_yylex): Improve 'integer constant out of range' messages.\n \n 1999-06-28  Richard Henderson  <rth@cygnus.com>"}, {"sha": "54489905ac3144b558614d1e2ce04b7dd93f62f3", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611495e21b07c658c2e6eab3b3a6c648a8e1b1a3/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=611495e21b07c658c2e6eab3b3a6c648a8e1b1a3", "patch": "@@ -3857,7 +3857,7 @@ real_yylex ()\n \t    int spec_long = 0;\n \t    int spec_long_long = 0;\n \t    int spec_imag = 0;\n-\t    int bytes, warn;\n+\t    int warn;\n \n \t    while (1)\n \t      {\n@@ -3895,25 +3895,10 @@ real_yylex ()\n \t\tc = getch ();\n \t      }\n \n-\t    /* If the constant is not long long and it won't fit in an\n-\t       unsigned long, or if the constant is long long and won't fit\n-\t       in an unsigned long long, then warn that the constant is out\n-\t       of range.  */\n-\n-\t    /* ??? This assumes that long long and long integer types are\n-\t       a multiple of 8 bits.  This better than the original code\n-\t       though which assumed that long was exactly 32 bits and long\n-\t       long was exactly 64 bits.  */\n-\n-\t    if (spec_long_long)\n-\t      bytes = TYPE_PRECISION (long_long_integer_type_node) / 8;\n-\t    else\n-\t      bytes = TYPE_PRECISION (long_integer_type_node) / 8;\n+\t    /* If it won't fit in the host's representation for integers,\n+\t       then pedwarn. */\n \n \t    warn = overflow;\n-\t    for (i = bytes; i < TOTAL_PARTS; i++)\n-\t      if (parts[i])\n-\t\twarn = 1;\n \t    if (warn)\n \t      pedwarn (\"integer constant is too large for this configuration of the compiler - truncated to %d bits\", HOST_BITS_PER_WIDE_INT * 2);\n "}]}