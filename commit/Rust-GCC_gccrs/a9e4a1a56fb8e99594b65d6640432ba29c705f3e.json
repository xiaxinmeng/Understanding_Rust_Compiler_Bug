{"sha": "a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllNGExYTU2ZmI4ZTk5NTk0YjY1ZDY2NDA0MzJiYTI5YzcwNWYzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-27T21:07:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-27T21:07:21Z"}, "message": "re PR target/80162 (ICE on invalid code (address of register variable))\n\n\tPR middle-end/80162\nc-family/\n\t* c-common.c (c_common_mark_addressable_vec): Don't set\n\tTREE_ADDRESSABLE on DECL_HARD_REGISTER.\nc/\n\t* c-tree.h (c_mark_addressable): Add array_ref_p argument.\n\t* c-typeck.c (c_mark_addressable): Likewise.  Look through\n\tVIEW_CONVERT_EXPR unless array_ref_p and VCE is from VECTOR_TYPE\n\tto ARRAY_TYPE.\n\t(build_array_ref): Pass true as array_ref_p to c_mark_addressable.\ncp/\n\t* cp-tree.h (cxx_mark_addressable): Add array_ref_p argument.\n\t* typeck.c (cxx_mark_addressable): Likewise.  Look through\n\tVIEW_CONVERT_EXPR unless array_ref_p and VCE is from VECTOR_TYPE\n\tto ARRAY_TYPE.\n\t(cp_build_array_ref): Pass true as array_ref_p to cxx_mark_addressable.\ntestsuite/\n\t* c-c++-common/pr80162-1.c: New test.\n\t* c-c++-common/pr80162-2.c: New test.\n\t* c-c++-common/pr80162-3.c: New test.\n\nFrom-SVN: r246512", "tree": {"sha": "2a71ba738ce8094ef17accb652eb7b850caad814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a71ba738ce8094ef17accb652eb7b850caad814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "0b543ec52f6ebf945df3a1a1de249df11e8f4148", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -1,3 +1,9 @@\n+2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80162\n+\t* c-common.c (c_common_mark_addressable_vec): Don't set\n+\tTREE_ADDRESSABLE on DECL_HARD_REGISTER.\n+\n 2017-03-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/79548"}, {"sha": "07af384cd6b9f1c049bdf780bdbc57a1aa99a4ee", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -6542,7 +6542,8 @@ c_common_mark_addressable_vec (tree t)\n       && TREE_CODE (t) != PARM_DECL\n       && TREE_CODE (t) != COMPOUND_LITERAL_EXPR)\n     return;\n-  TREE_ADDRESSABLE (t) = 1;\n+  if (!VAR_P (t) || !DECL_HARD_REGISTER (t))\n+    TREE_ADDRESSABLE (t) = 1;\n }\n \n "}, {"sha": "08a5b9ae2d7773f95fb7019ba13738ea6dc2bcbb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -1,3 +1,12 @@\n+2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80162\n+\t* c-tree.h (c_mark_addressable): Add array_ref_p argument.\n+\t* c-typeck.c (c_mark_addressable): Likewise.  Look through\n+\tVIEW_CONVERT_EXPR unless array_ref_p and VCE is from VECTOR_TYPE\n+\tto ARRAY_TYPE.\n+\t(build_array_ref): Pass true as array_ref_p to c_mark_addressable.\n+\n 2017-03-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-tree.h: Remove a C_RID_YYCODE reference."}, {"sha": "5fa32a48f294e0a465f764ba1f30393240464115", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -615,7 +615,7 @@ extern int same_translation_unit_p (const_tree, const_tree);\n extern int comptypes (tree, tree);\n extern int comptypes_check_different_types (tree, tree, bool *);\n extern bool c_vla_type_p (const_tree);\n-extern bool c_mark_addressable (tree);\n+extern bool c_mark_addressable (tree, bool = false);\n extern void c_incomplete_type_error (location_t, const_tree, const_tree);\n extern tree c_type_promotes_to (tree);\n extern struct c_expr default_function_array_conversion (location_t,"}, {"sha": "ff239e2d6282025d855bcd1c39a0bfaab904a26e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -2654,7 +2654,7 @@ build_array_ref (location_t loc, tree array, tree index)\n \t  || (COMPLETE_TYPE_P (TREE_TYPE (TREE_TYPE (array)))\n \t      && TREE_CODE (TYPE_SIZE (TREE_TYPE (TREE_TYPE (array)))) != INTEGER_CST))\n \t{\n-\t  if (!c_mark_addressable (array))\n+\t  if (!c_mark_addressable (array, true))\n \t    return error_mark_node;\n \t}\n       /* An array that is indexed by a constant value which is not within\n@@ -4755,16 +4755,26 @@ lvalue_or_else (location_t loc, const_tree ref, enum lvalue_use use)\n \f\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n-   Returns true if successful.  */\n+   Returns true if successful.  ARRAY_REF_P is true if this\n+   is for ARRAY_REF construction - in that case we don't want\n+   to look through VIEW_CONVERT_EXPR from VECTOR_TYPE to ARRAY_TYPE,\n+   it is fine to use ARRAY_REFs for vector subscripts on vector\n+   register variables.  */\n \n bool\n-c_mark_addressable (tree exp)\n+c_mark_addressable (tree exp, bool array_ref_p)\n {\n   tree x = exp;\n \n   while (1)\n     switch (TREE_CODE (x))\n       {\n+      case VIEW_CONVERT_EXPR:\n+\tif (array_ref_p\n+\t    && TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n+\t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (x, 0))))\n+\t  return true;\n+\t/* FALLTHRU */\n       case COMPONENT_REF:\n       case ADDR_EXPR:\n       case ARRAY_REF:"}, {"sha": "1d75be5a2d4679399894c9555918dda58ca6b438", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -1,3 +1,12 @@\n+2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/80162\n+\t* cp-tree.h (cxx_mark_addressable): Add array_ref_p argument.\n+\t* typeck.c (cxx_mark_addressable): Likewise.  Look through\n+\tVIEW_CONVERT_EXPR unless array_ref_p and VCE is from VECTOR_TYPE\n+\tto ARRAY_TYPE.\n+\t(cp_build_array_ref): Pass true as array_ref_p to cxx_mark_addressable.\n+\n 2017-03-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/77339 - ICE with invalid use of alias template."}, {"sha": "daa1a81103e6583a8681e3d8c910763a62051bf8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -6715,7 +6715,7 @@ extern void cxx_print_error_function\t\t(diagnostic_context *,\n \t\t\t\t\t\t struct diagnostic_info *);\n \n /* in typeck.c */\n-extern bool cxx_mark_addressable\t\t(tree);\n+extern bool cxx_mark_addressable\t\t(tree, bool = false);\n extern int string_conv_p\t\t\t(const_tree, const_tree, int);\n extern tree cp_truthvalue_conversion\t\t(tree);\n extern tree condition_conversion\t\t(tree);"}, {"sha": "79391c04fd6452dfadfa8b75d51dab1c0b66861d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -3217,7 +3217,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \t      && (TREE_CODE (TYPE_SIZE (TREE_TYPE (TREE_TYPE (array))))\n \t\t  != INTEGER_CST)))\n \t{\n-\t  if (!cxx_mark_addressable (array))\n+\t  if (!cxx_mark_addressable (array, true))\n \t    return error_mark_node;\n \t}\n \n@@ -6269,18 +6269,28 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n \f\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n-   Value is true if successful.\n+   Value is true if successful.  ARRAY_REF_P is true if this\n+   is for ARRAY_REF construction - in that case we don't want\n+   to look through VIEW_CONVERT_EXPR from VECTOR_TYPE to ARRAY_TYPE,\n+   it is fine to use ARRAY_REFs for vector subscripts on vector\n+   register variables.\n \n    C++: we do not allow `current_class_ptr' to be addressable.  */\n \n bool\n-cxx_mark_addressable (tree exp)\n+cxx_mark_addressable (tree exp, bool array_ref_p)\n {\n   tree x = exp;\n \n   while (1)\n     switch (TREE_CODE (x))\n       {\n+      case VIEW_CONVERT_EXPR:\n+\tif (array_ref_p\n+\t    && TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n+\t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (x, 0))))\n+\t  return true;\n+\t/* FALLTHRU */\n       case ADDR_EXPR:\n       case COMPONENT_REF:\n       case ARRAY_REF:"}, {"sha": "14f6d6b5408b2b3b173879f4c435233d50dd2656", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -1,5 +1,10 @@\n 2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/80162\n+\t* c-c++-common/pr80162-1.c: New test.\n+\t* c-c++-common/pr80162-2.c: New test.\n+\t* c-c++-common/pr80162-3.c: New test.\n+\n \tPR target/80102\n \t* g++.dg/opt/pr80102.C: New test.\n "}, {"sha": "7d442b37417b6e019110894fd05ff5e6abab52fe", "filename": "gcc/testsuite/c-c++-common/pr80162-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-1.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/80162 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-msse2 -ffixed-xmm7\" } */\n+\n+typedef int v8 __attribute__ ((vector_size (8)));\n+struct U { v8 a; v8 b; };\n+register struct U u asm (\"xmm7\");\n+\n+int *\n+foo (int i)\n+{\n+  return &u.a[i];\t/* { dg-error \"address of \\[^ \\n\\r]* register variable\" } */\n+}"}, {"sha": "cb2c8991ae9801b4c4dcc50178484c1ad0106249", "filename": "gcc/testsuite/c-c++-common/pr80162-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-2.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/80162 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-mavx2 -ffixed-xmm7\" } */\n+\n+typedef int V __attribute__ ((vector_size (32)));\n+register V u asm (\"xmm7\");\n+\n+int\n+foo (int i)\n+{\n+  return u[i];\n+}\n+\n+int\n+bar (void)\n+{\n+  return u[5];\n+}"}, {"sha": "a600fde2a6b9bfd9e14727ad4953ec28781ff167", "filename": "gcc/testsuite/c-c++-common/pr80162-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e4a1a56fb8e99594b65d6640432ba29c705f3e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr80162-3.c?ref=a9e4a1a56fb8e99594b65d6640432ba29c705f3e", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/80162 */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-mavx2 -ffixed-xmm7\" } */\n+\n+typedef int V __attribute__ ((vector_size (32)));\n+register V u asm (\"xmm7\");\n+\n+int *\n+foo (int i)\n+{\n+  return &u[i];\t\t/* { dg-error \"address of \\[^ \\n\\r]* register variable\" } */\n+}\n+\n+int *\n+bar (void)\n+{\n+  return &u[5];\t\t/* { dg-error \"address of \\[^ \\n\\r]* register variable\" } */\n+}"}]}