{"sha": "51214775d039b7818a3a60222ed6dfcc37539b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyMTQ3NzVkMDM5Yjc4MThhM2E2MDIyMmVkNmRmY2MzNzUzOWIxNw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-04-24T21:35:43Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-04-24T21:35:43Z"}, "message": "sh.md (divsi3_i4_media): Use match_operand for input values rather than hard registers.\n\n\t* sh.md (divsi3_i4_media): Use match_operand for input values\n\trather than hard registers.\n\t(divsi3 - TARGET_SHMEDIA_FPU case): Don't ferry values\n\tunnecessarily through hard registers.  Keep copies of pseudo\n\tregisters outside of the libcall sequence.\n\n\t* sh.md (casesi_shift_media): Add modes.\n\nFrom-SVN: r52732", "tree": {"sha": "2edc6f3a5b0fff39b651ecf78860ff28d037cf5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edc6f3a5b0fff39b651ecf78860ff28d037cf5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51214775d039b7818a3a60222ed6dfcc37539b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51214775d039b7818a3a60222ed6dfcc37539b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51214775d039b7818a3a60222ed6dfcc37539b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51214775d039b7818a3a60222ed6dfcc37539b17/comments", "author": null, "committer": null, "parents": [{"sha": "b700634a642cae0297fb863638ab9e625d6f5b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b700634a642cae0297fb863638ab9e625d6f5b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b700634a642cae0297fb863638ab9e625d6f5b38"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "7ad7742f745e707fdb9fd50bb0ddd8353ae7ed92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51214775d039b7818a3a60222ed6dfcc37539b17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51214775d039b7818a3a60222ed6dfcc37539b17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51214775d039b7818a3a60222ed6dfcc37539b17", "patch": "@@ -1,4 +1,12 @@\n-Wed Apr 24 21:20:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+Wed Apr 24 21:25:59 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.md (divsi3_i4_media): Use match_operand for input values\n+\trather than hard registers.\n+\t(divsi3 - TARGET_SHMEDIA_FPU case): Don't ferry values\n+\tunnecessarily through hard registers.  Keep copies of pseudo\n+\tregisters outside of the libcall sequence.\n+\n+\t* sh.md (casesi_shift_media): Add modes.\n \n \t* sh.h (RETURN_IN_MEMORY): Return variable size BLKmode\n \tvalues in memory."}, {"sha": "096b6840369f271a97702099d2bee72e3727d5ad", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51214775d039b7818a3a60222ed6dfcc37539b17/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51214775d039b7818a3a60222ed6dfcc37539b17/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=51214775d039b7818a3a60222ed6dfcc37539b17", "patch": "@@ -1412,21 +1412,17 @@\n   \"blink\t%1, r18\")\n \n (define_expand \"divsi3_i4_media\"\n-  [(set (match_dup 2) (reg:SI R4_REG))\n-   (set (match_dup 3) (reg:SI R5_REG))\n-   (set (match_dup 4) (float:DF (match_dup 2)))\n-   (set (match_dup 5) (float:DF (match_dup 3)))\n-   (set (match_dup 6) (div:DF (match_dup 4) (match_dup 5)))\n+  [(set (match_dup 3) (float:DF (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (match_dup 4) (float:DF (match_operand:SI 2 \"register_operand\" \"r\")))\n+   (set (match_dup 5) (div:DF (match_dup 3) (match_dup 4)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(fix:SI (match_dup 6)))]\n+\t(fix:SI (match_dup 5)))]\n   \"TARGET_SHMEDIA_FPU\"\n   \"\n {\n-  operands[2] = gen_reg_rtx (SImode);\n-  operands[3] = gen_reg_rtx (SImode);\n+  operands[3] = gen_reg_rtx (DFmode);\n   operands[4] = gen_reg_rtx (DFmode);\n   operands[5] = gen_reg_rtx (DFmode);\n-  operands[6] = gen_reg_rtx (DFmode);\n }\")\n \n (define_insn \"divsi3_i4\"\n@@ -1472,7 +1468,7 @@\n   \"\"\n   \"\n {\n-  rtx first, last;\n+  rtx first = 0, last;\n \n   operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n@@ -1486,7 +1482,12 @@\n \tlast = gen_divsi3_i4 (operands[0], operands[3]);\n     }\n   else if (TARGET_SHMEDIA_FPU)\n-    last = gen_divsi3_i4_media (operands[0]);\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+      operands[2] = force_reg (SImode, operands[2]);\n+      last = gen_divsi3_i4_media (operands[0], operands[1], operands[2]);\n+      first = XVECEXP (last, 0, 0);\n+    }\n   else if (TARGET_SH5)\n     {\n       emit_move_insn (operands[3],\n@@ -1511,8 +1512,11 @@\n       emit_move_insn (operands[3], gen_rtx_SYMBOL_REF (SImode, \\\"__sdivsi3\\\"));\n       last = gen_divsi3_i1 (operands[0], operands[3]);\n     }\n-  first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n-  emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n+  if (! first)\n+    {\n+      first = emit_move_insn (gen_rtx_REG (SImode, 4), operands[1]);\n+      emit_move_insn (gen_rtx_REG (SImode, 5), operands[2]);\n+    }\n   last = emit_insn (last);\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n@@ -6458,9 +6462,10 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"casesi_shift_media\"\n-  [(set (match_operand 0 \"arith_reg_operand\" \"=r\")\n-\t(ashift (match_operand 1 \"arith_reg_operand\" \"r\")\n-\t\t(unspec [(label_ref:DI (match_operand 2 \"\" \"\"))] 2)))]\n+  [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n+\t(ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n+\t\t   (unspec:DI [(label_ref:DI (match_operand 2 \"\" \"\"))]\n+\t\t    UNSPEC_CASESI)))]\n   \"TARGET_SHMEDIA\"\n   \"*\n {"}]}