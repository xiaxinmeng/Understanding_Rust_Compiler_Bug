{"sha": "d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2ZjQ5YmY2NDc5ZjhmNjFiYjkwNGJkZTZmY2FhYmNlNjlkMWIxNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-12T22:55:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-12T22:55:28Z"}, "message": "tree-ssa-alias.c (set_initial_properties, [...]): Use VEC instead of VARRAY.\n\n\t* tree-ssa-alias.c (set_initial_properties, init_alias_info,\n\tdelete_alias_info, compute_flow_sensitive_aliasing,\n\tgroup_aliases): Use VEC instead of VARRAY.\n\t* tree-ssa-structalias.c (update_alias_info): Likewise.\n\t* tree-ssa-structalias.h (alias_info): Change the type of\n\tprocessed_ptrs to VEC(tree,heap) *.\n\nFrom-SVN: r112903", "tree": {"sha": "67e0521f1ea7b116a6b340efd5a11541bd856f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67e0521f1ea7b116a6b340efd5a11541bd856f35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/comments", "author": null, "committer": null, "parents": [{"sha": "86066f9bd4c6ea678e843eea7bad9a260d25e22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86066f9bd4c6ea678e843eea7bad9a260d25e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86066f9bd4c6ea678e843eea7bad9a260d25e22a"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "747c3b2c4d7a5c6d3f6cb9edfac4fd5b47aa6f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "patch": "@@ -1,3 +1,12 @@\n+2006-04-12  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree-ssa-alias.c (set_initial_properties, init_alias_info,\n+\tdelete_alias_info, compute_flow_sensitive_aliasing,\n+\tgroup_aliases): Use VEC instead of VARRAY.\n+\t* tree-ssa-structalias.c (update_alias_info): Likewise.\n+\t* tree-ssa-structalias.h (alias_info): Change the type of\n+\tprocessed_ptrs to VEC(tree,heap) *.\n+\n 2006-04-12  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR target/27060"}, {"sha": "4e8b5a4374ad1bb478967d98cf9c6117f0752529", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "patch": "@@ -314,6 +314,7 @@ set_initial_properties (struct alias_info *ai)\n   unsigned int i;\n   referenced_var_iterator rvi;\n   tree var;\n+  tree ptr;\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n@@ -334,9 +335,8 @@ set_initial_properties (struct alias_info *ai)\n \t}\n     }\n \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n+  for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n-      tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n       var_ann_t v_ann = var_ann (SSA_NAME_VAR (ptr));\n       \n@@ -859,7 +859,7 @@ init_alias_info (void)\n   ai = XCNEW (struct alias_info);\n   ai->ssa_names_visited = sbitmap_alloc (num_ssa_names);\n   sbitmap_zero (ai->ssa_names_visited);\n-  VARRAY_TREE_INIT (ai->processed_ptrs, 50, \"processed_ptrs\");\n+  ai->processed_ptrs = VEC_alloc (tree, heap, 50);\n   ai->written_vars = BITMAP_ALLOC (&alias_obstack);\n   ai->dereferenced_ptrs_store = BITMAP_ALLOC (&alias_obstack);\n   ai->dereferenced_ptrs_load = BITMAP_ALLOC (&alias_obstack);\n@@ -943,7 +943,7 @@ delete_alias_info (struct alias_info *ai)\n   tree var;\n \n   sbitmap_free (ai->ssa_names_visited);\n-  ai->processed_ptrs = NULL;\n+  VEC_free (tree, heap, ai->processed_ptrs);\n \n   for (i = 0; i < ai->num_addressable_vars; i++)\n     free (ai->addressable_vars[i]);\n@@ -1085,20 +1085,19 @@ static void\n compute_flow_sensitive_aliasing (struct alias_info *ai)\n {\n   size_t i;\n+  tree ptr;\n   \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n+  for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n-      tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n       if (!find_what_p_points_to (ptr))\n \tset_pt_anything (ptr);\n     }\n \n   create_name_tags ();\n \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n+  for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n       unsigned j;\n-      tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n       var_ann_t v_ann = var_ann (SSA_NAME_VAR (ptr));\n       bitmap_iterator bi;\n@@ -1411,6 +1410,7 @@ static void\n group_aliases (struct alias_info *ai)\n {\n   size_t i;\n+  tree ptr;\n \n   /* Sort the POINTERS array in descending order of contributed\n      virtual operands.  */\n@@ -1478,10 +1478,9 @@ group_aliases (struct alias_info *ai)\n      into p_5->field, but that is wrong because there have been\n      modifications to 'SMT.20' in between.  To prevent this we have to\n      replace 'a' with 'SMT.20' in the name tag of p_5.  */\n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n+  for (i = 0; VEC_iterate (tree, ai->processed_ptrs, i, ptr); i++)\n     {\n       size_t j;\n-      tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n       tree name_tag = SSA_NAME_PTR_INFO (ptr)->name_mem_tag;\n       VEC(tree,gc) *aliases;\n       tree alias;"}, {"sha": "7a00de456117e871021453cc182ea3f826c528b7", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "patch": "@@ -3041,7 +3041,7 @@ update_alias_info (tree stmt, struct alias_info *ai)\n       if (!TEST_BIT (ai->ssa_names_visited, SSA_NAME_VERSION (op)))\n \t{\n \t  SET_BIT (ai->ssa_names_visited, SSA_NAME_VERSION (op));\n-\t  VARRAY_PUSH_TREE (ai->processed_ptrs, op);\n+\t  VEC_safe_push (tree, heap, ai->processed_ptrs, op);\n \t}\n \n       /* If STMT is a PHI node, then it will not have pointer"}, {"sha": "008c0156b870151dfed6469bbfb2de3566d02d54", "filename": "gcc/tree-ssa-structalias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-structalias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d96f49bf6479f8f61bb904bde6fcaabce69d1b15/gcc%2Ftree-ssa-structalias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.h?ref=d96f49bf6479f8f61bb904bde6fcaabce69d1b15", "patch": "@@ -34,7 +34,7 @@ struct alias_info\n   sbitmap ssa_names_visited;\n \n   /* Array of SSA_NAME pointers processed by the points-to collector.  */\n-  varray_type processed_ptrs;\n+  VEC(tree,heap) *processed_ptrs;\n \n   /* ADDRESSABLE_VARS contains all the global variables and locals that\n      have had their address taken.  */"}]}