{"sha": "00b8a212ea2132fb68e42488317392346e169035", "node_id": "C_kwDOANBUbNoAKDAwYjhhMjEyZWEyMTMyZmI2OGU0MjQ4ODMxNzM5MjM0NmUxNjkwMzU", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-13T16:17:46Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-13T19:24:02Z"}, "message": "i386: Relax extract location operand mode requirements [PR108516]\n\nCombine pass simplifies zero-extend of a zero-extract to:\n\nTrying 16 -> 6:\n   16: r86:QI#0=zero_extract(r87:HI,0x8,0x8)\n      REG_DEAD r87:HI\n    6: r84:SI=zero_extend(r86:QI)\n      REG_DEAD r86:QI\nFailed to match this instruction:\n(set (reg:SI 84 [ s.e2 ])\n    (zero_extract:SI (reg:HI 87)\n        (const_int 8 [0x8])\n        (const_int 8 [0x8])))\n\nwhich fails instruction recognision.  The pattern is valid, since there\nis no requirement on the mode of the location operand.\n\nThe patch relaxes location operand mode requirements of *extzv and *extv\ninsn patterns to allow all supported integer modes.  The patch also\nadds support for a related sign-extend from zero-extracted operand.\n\n2023-02-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/108516\n\t* config/i386/predicates.md (extr_register_operand):\n\tNew special predicate.\n\t* config/i386/i386.md (*extv<mode>): Use extr_register_operand\n\tas operand 1 predicate.\n\t(*exzv<mode>): Ditto.\n\t(*extendqi<SWI24:mode>_ext_1): New insn pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108516\n\t* gcc.target/i386/pr108516-1.c: New test.\n\t* gcc.target/i386/pr108516-2.c: Ditto.", "tree": {"sha": "5992125499ae81eb4f1720c6b7f0d0abc49d3da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5992125499ae81eb4f1720c6b7f0d0abc49d3da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b8a212ea2132fb68e42488317392346e169035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b8a212ea2132fb68e42488317392346e169035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b8a212ea2132fb68e42488317392346e169035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b8a212ea2132fb68e42488317392346e169035/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296cf77b78b5c95069a9c07a2919d82438db2fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296cf77b78b5c95069a9c07a2919d82438db2fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296cf77b78b5c95069a9c07a2919d82438db2fba"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "5a946beb1c6a1700615527939a3038183ccceace", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b8a212ea2132fb68e42488317392346e169035/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b8a212ea2132fb68e42488317392346e169035/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=00b8a212ea2132fb68e42488317392346e169035", "patch": "@@ -3159,7 +3159,7 @@\n \n (define_insn \"*extv<mode>\"\n   [(set (match_operand:SWI24 0 \"register_operand\" \"=R\")\n-\t(sign_extract:SWI24 (match_operand:SWI24 1 \"register_operand\" \"Q\")\n+\t(sign_extract:SWI24 (match_operand 1 \"extr_register_operand\" \"Q\")\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8)))]\n   \"\"\n@@ -3202,7 +3202,7 @@\n \n (define_insn \"*extzv<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n-\t(zero_extract:SWI248 (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t(zero_extract:SWI248 (match_operand 1 \"extr_register_operand\" \"Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8)))]\n   \"\"\n@@ -4777,6 +4777,19 @@\n      (if_then_else (eq_attr \"prefix_0f\" \"0\")\n \t(const_string \"0\")\n \t(const_string \"1\")))])\n+\n+(define_insn \"*extendqi<SWI24:mode>_ext_1\"\n+  [(set (match_operand:SWI24 0 \"register_operand\" \"=R\")\n+\t(sign_extend:SWI24\n+\t  (subreg:QI\n+\t    (zero_extract:SWI248\n+\t      (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)))]\n+  \"\"\n+  \"movs{b<SWI24:imodesuffix>|x}\\t{%h1, %0|%0, %h1}\"\n+   [(set_attr \"type\" \"imovx\")\n+    (set_attr \"mode\" \"<SWI24:MODE>\")])\n \f\n ;; Conversions between float and double.\n "}, {"sha": "cca64f00a6aae5a6341471fe81af37a375df5afc", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b8a212ea2132fb68e42488317392346e169035/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b8a212ea2132fb68e42488317392346e169035/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=00b8a212ea2132fb68e42488317392346e169035", "patch": "@@ -92,6 +92,14 @@\n   (and (match_code \"reg\")\n        (match_test \"MASK_REGNO_P (REGNO (op))\")))\n \n+;; Match a DI, SI or HImode register operand for extract op.\n+(define_special_predicate \"extr_register_operand\"\n+  (and (match_operand 0 \"register_operand\")\n+       (ior (and (match_test \"TARGET_64BIT\")\n+\t\t (match_test \"GET_MODE (op) == DImode\"))\n+\t    (match_test \"GET_MODE (op) == SImode\")\n+\t    (match_test \"GET_MODE (op) == HImode\"))))\n+\n ;; Match a DI, SI, HI or QImode nonimmediate_operand.\n (define_special_predicate \"int_nonimmediate_operand\"\n   (and (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "d5344ef23e712207dd9c3d5406fc008c72c0266e", "filename": "gcc/testsuite/gcc.target/i386/pr108516-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b8a212ea2132fb68e42488317392346e169035/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b8a212ea2132fb68e42488317392346e169035/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-1.c?ref=00b8a212ea2132fb68e42488317392346e169035", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/108516 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -dp\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+\n+struct S\n+{\n+  unsigned char e1;\n+  unsigned char e2;\n+  unsigned char e3;\n+};\n+\n+unsigned int\n+f2 (struct S s)\n+{\n+  return s.e2;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\*zero_extend\" } } */"}, {"sha": "3e709e8c73842471961e62354b55de572541aac7", "filename": "gcc/testsuite/gcc.target/i386/pr108516-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b8a212ea2132fb68e42488317392346e169035/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b8a212ea2132fb68e42488317392346e169035/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108516-2.c?ref=00b8a212ea2132fb68e42488317392346e169035", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/108516 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -dp\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+\n+struct S\n+{\n+  signed char e1;\n+  signed char e2;\n+  signed char e3;\n+};\n+\n+int\n+f2 (struct S s)\n+{\n+  return s.e2;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\*extzv\" } } */"}]}