{"sha": "db3b96df03fdbe2fb770729501e2e9b65e66c2da", "node_id": "C_kwDOANBUbNoAKGRiM2I5NmRmMDNmZGJlMmZiNzcwNzI5NTAxZTJlOWI2NWU2NmMyZGE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:58:04Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T04:56:30Z"}, "message": "AVX512FP16: Add vfcmaddcsh/vfmaddcsh/vfcmulcsh/vfmulcsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_mask_fcmadd_sch):\n\tNew intrinsic.\n\t(_mm_mask3_fcmadd_sch): Likewise.\n\t(_mm_maskz_fcmadd_sch): Likewise.\n\t(_mm_fcmadd_sch): Likewise.\n\t(_mm_mask_fmadd_sch): Likewise.\n\t(_mm_mask3_fmadd_sch): Likewise.\n\t(_mm_maskz_fmadd_sch): Likewise.\n\t(_mm_fmadd_sch): Likewise.\n\t(_mm_mask_fcmadd_round_sch): Likewise.\n\t(_mm_mask3_fcmadd_round_sch): Likewise.\n\t(_mm_maskz_fcmadd_round_sch): Likewise.\n\t(_mm_fcmadd_round_sch): Likewise.\n\t(_mm_mask_fmadd_round_sch): Likewise.\n\t(_mm_mask3_fmadd_round_sch): Likewise.\n\t(_mm_maskz_fmadd_round_sch): Likewise.\n\t(_mm_fmadd_round_sch): Likewise.\n\t(_mm_fcmul_sch): Likewise.\n\t(_mm_mask_fcmul_sch): Likewise.\n\t(_mm_maskz_fcmul_sch): Likewise.\n\t(_mm_fmul_sch): Likewise.\n\t(_mm_mask_fmul_sch): Likewise.\n\t(_mm_maskz_fmul_sch): Likewise.\n\t(_mm_fcmul_round_sch): Likewise.\n\t(_mm_mask_fcmul_round_sch): Likewise.\n\t(_mm_maskz_fcmul_round_sch): Likewise.\n\t(_mm_fmul_round_sch): Likewise.\n\t(_mm_mask_fmul_round_sch): Likewise.\n\t(_mm_maskz_fmul_round_sch): Likewise.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/sse.md\n\t(avx512fp16_fmaddcsh_v8hf_maskz<round_expand_name>): New expander.\n\t(avx512fp16_fcmaddcsh_v8hf_maskz<round_expand_name>): Ditto.\n\t(avx512fp16_fma_<complexopname>sh_v8hf<mask_scalarcz_name><round_scalarcz_name>):\n\tNew define insn.\n\t(avx512fp16_<complexopname>sh_v8hf_mask<round_name>): Ditto.\n\t(avx512fp16_<complexopname>sh_v8hf<mask_scalarc_name><round_scalarcz_name>):\n\tDitto.\n\t* config/i386/subst.md (mask_scalarcz_name): New.\n\t(mask_scalarc_name): Ditto.\n\t(mask_scalarc_operand3): Ditto.\n\t(mask_scalarcz_operand4): Ditto.\n\t(round_scalarcz_name): Ditto.\n\t(round_scalarc_mask_operand3): Ditto.\n\t(round_scalarcz_mask_operand4): Ditto.\n\t(round_scalarc_mask_op3): Ditto.\n\t(round_scalarcz_mask_op4): Ditto.\n\t(round_scalarcz_constraint): Ditto.\n\t(round_scalarcz_nimm_predicate): Ditto.\n\t(mask_scalarcz): Ditto.\n\t(mask_scalarc): Ditto.\n\t(round_scalarcz): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "69d34dc30b53e2a8be67231b9496b9021915c3b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d34dc30b53e2a8be67231b9496b9021915c3b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3b96df03fdbe2fb770729501e2e9b65e66c2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3b96df03fdbe2fb770729501e2e9b65e66c2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3b96df03fdbe2fb770729501e2e9b65e66c2da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3b96df03fdbe2fb770729501e2e9b65e66c2da/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed643e9f171e99b0aa1453b3f29ed1103e9b5c80"}], "stats": {"total": 682, "additions": 682, "deletions": 0}, "files": [{"sha": "e01cff674d7561a3732254772ec70906967de513", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 475, "deletions": 0, "changes": 475, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -6511,6 +6511,481 @@ _mm512_maskz_fmul_round_pch (__mmask16 __A, __m512h __B,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vf[,c]maddcsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmadd_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+#ifdef __AVX512VL__\n+  return (__m128h) __builtin_ia32_movaps128_mask (\n+    (__v4sf)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D, __B,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION),\n+    (__v4sf) __A, __B);\n+#else\n+  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n+    (__v4sf)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D, __B,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION),\n+    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n+#endif\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fcmadd_sch (__m128h __A, __m128h __B, __m128h __C, __mmask8 __D)\n+{\n+  return (__m128h) _mm_move_ss ((__m128) __C,\n+    (__m128)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C, __D,\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION));\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmadd_sch (__mmask8 __A, __m128h __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_maskz_round ((__v8hf) __B,\n+\t\t\t\t\t   (__v8hf) __C,\n+\t\t\t\t\t   (__v8hf) __D,\n+\t\t\t\t\t   __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmadd_sch (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_round ((__v8hf) __A,\n+\t\t\t\t     (__v8hf) __B,\n+\t\t\t\t     (__v8hf) __C,\n+\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+#ifdef __AVX512VL__\n+  return (__m128h) __builtin_ia32_movaps128_mask (\n+    (__v4sf)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D, __B,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION),\n+    (__v4sf) __A, __B);\n+#else\n+  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n+    (__v4sf)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D, __B,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION),\n+    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n+#endif\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_sch (__m128h __A, __m128h __B, __m128h __C, __mmask8 __D)\n+{\n+  return (__m128h) _mm_move_ss ((__m128) __C,\n+    (__m128)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __B,\n+\t\t\t\t\t (__v8hf) __C, __D,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION));\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_sch (__mmask8 __A, __m128h __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_maskz_round ((__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D,\n+\t\t\t\t\t  __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_sch (__m128h __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_round ((__v8hf) __A,\n+\t\t\t\t    (__v8hf) __B,\n+\t\t\t\t    (__v8hf) __C,\n+\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmadd_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t   __m128h __D, const int __E)\n+{\n+#ifdef __AVX512VL__\n+  return (__m128h) __builtin_ia32_movaps128_mask (\n+    (__v4sf)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D,\n+\t\t\t\t\t  __B, __E),\n+    (__v4sf) __A, __B);\n+#else\n+  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n+    (__v4sf)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D,\n+\t\t\t\t\t  __B, __E),\n+    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n+#endif\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fcmadd_round_sch (__m128h __A, __m128h __B, __m128h __C,\n+\t\t\t    __mmask8 __D, const int __E)\n+{\n+  return (__m128h) _mm_move_ss ((__m128) __C,\n+    (__m128)\n+    __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  __D, __E));\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmadd_round_sch (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t    __m128h __D, const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_maskz_round ((__v8hf) __B,\n+\t\t\t\t\t   (__v8hf) __C,\n+\t\t\t\t\t   (__v8hf) __D,\n+\t\t\t\t\t   __A, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmadd_round_sch (__m128h __A, __m128h __B, __m128h __C, const int __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmaddcsh_round ((__v8hf) __A,\n+\t\t\t\t     (__v8hf) __B,\n+\t\t\t\t     (__v8hf) __C,\n+\t\t\t\t     __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t  __m128h __D, const int __E)\n+{\n+#ifdef __AVX512VL__\n+  return (__m128h) __builtin_ia32_movaps128_mask (\n+    (__v4sf)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D,\n+\t\t\t\t\t __B, __E),\n+    (__v4sf) __A, __B);\n+#else\n+  return (__m128h) __builtin_ia32_blendvps ((__v4sf) __A,\n+    (__v4sf)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D,\n+\t\t\t\t\t __B, __E),\n+    (__v4sf) _mm_set_ss ((float) ((int) __B << 31)));\n+#endif\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_round_sch (__m128h __A, __m128h __B, __m128h __C,\n+\t\t\t   __mmask8 __D, const int __E)\n+{\n+  return (__m128h) _mm_move_ss ((__m128) __C,\n+    (__m128)\n+    __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t (__v8hf) __B,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t __D, __E));\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_round_sch (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t   __m128h __D, const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_maskz_round ((__v8hf) __B,\n+\t\t\t\t\t  (__v8hf) __C,\n+\t\t\t\t\t  (__v8hf) __D,\n+\t\t\t\t\t  __A, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_round_sch (__m128h __A, __m128h __B, __m128h __C, const int __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmaddcsh_round ((__v8hf) __A,\n+\t\t\t\t    (__v8hf) __B,\n+\t\t\t\t    (__v8hf) __C,\n+\t\t\t\t    __D);\n+}\n+#else\n+#ifdef __AVX512VL__\n+#define _mm_mask_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n+    ((__m128h) __builtin_ia32_movaps128_mask (\t\t\t\t\\\n+     (__v4sf)\t\t\t\t\t\t\t\t\\\n+     __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t   (__v8hf) (C),\t\t\\\n+\t\t\t\t\t   (__v8hf) (D),\t\t\\\n+\t\t\t\t\t   (B), (E)),\t\t\t\\\n+\t\t\t\t\t   (__v4sf) (A), (B)))\n+\n+#else\n+#define _mm_mask_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n+  ((__m128h) __builtin_ia32_blendvps ((__v4sf) (A),\t\t\t\\\n+   (__v4sf)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t (__v8hf) (C),\t\t\\\n+\t\t\t\t\t (__v8hf) (D),\t\t\\\n+\t\t\t\t\t (B), (E)),\t\t\\\n+    (__v4sf) _mm_set_ss ((float) ((int) (B) << 31))))\n+#endif\n+\n+#define _mm_mask3_fcmadd_round_sch(A, B, C, D, E)\t\t\t\\\n+  ((__m128h) _mm_move_ss ((__m128) (C),\t\t\t\t\t\\\n+   (__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfcmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t (__v8hf) (B),\t\t\\\n+\t\t\t\t\t (__v8hf) (C),\t\t\\\n+\t\t\t\t\t (D), (E))))\n+\n+#define _mm_maskz_fcmadd_round_sch(A, B, C, D, E)\t\t\\\n+  __builtin_ia32_vfcmaddcsh_maskz_round ((B), (C), (D), (A), (E))\n+\n+#define _mm_fcmadd_round_sch(A, B, C, D)\t\t\\\n+  __builtin_ia32_vfcmaddcsh_round ((A), (B), (C), (D))\n+\n+#ifdef __AVX512VL__\n+#define _mm_mask_fmadd_round_sch(A, B, C, D, E)\t\t\t\t\\\n+    ((__m128h) __builtin_ia32_movaps128_mask (\t\t\t\t\\\n+     (__v4sf)\t\t\t\t\t\t\t\t\\\n+     __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t  (__v8hf) (C),\t\t\\\n+\t\t\t\t\t  (__v8hf) (D),\t\t\\\n+\t\t\t\t\t  (B), (E)),\t\t\\\n+\t\t\t\t\t  (__v4sf) (A), (B)))\n+\n+#else\n+#define _mm_mask_fmadd_round_sch(A, B, C, D, E)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_blendvps ((__v4sf) (A),\t\t\t\\\n+   (__v4sf)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t(__v8hf) (C),\t\t\\\n+\t\t\t\t\t(__v8hf) (D),\t\t\\\n+\t\t\t\t\t(B), (E)),\t\t\\\n+    (__v4sf) _mm_set_ss ((float) ((int) (B) << 31))))\n+#endif\n+\n+#define _mm_mask3_fmadd_round_sch(A, B, C, D, E)\t\t\t\\\n+  ((__m128h) _mm_move_ss ((__m128) (C),\t\t\t\t\t\\\n+   (__m128)\t\t\t\t\t\t\t\t\\\n+   __builtin_ia32_vfmaddcsh_mask_round ((__v8hf) (A),\t\t\\\n+\t\t\t\t\t(__v8hf) (B),\t\t\\\n+\t\t\t\t\t(__v8hf) (C),\t\t\\\n+\t\t\t\t\t(D), (E))))\n+\n+#define _mm_maskz_fmadd_round_sch(A, B, C, D, E)\t\t\\\n+  __builtin_ia32_vfmaddcsh_maskz_round ((B), (C), (D), (A), (E))\n+\n+#define _mm_fmadd_round_sch(A, B, C, D)\t\t\\\n+  __builtin_ia32_vfmaddcsh_round ((A), (B), (C), (D))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vf[,c]mulcsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmul_sch (__m128h __A, __m128h __B)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_round ((__v8hf) __A,\n+\t\t\t\t    (__v8hf) __B,\n+\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmul_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D,\n+\t\t\t\t\t (__v8hf) __A,\n+\t\t\t\t\t __B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmul_sch (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __B,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t __A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmul_sch (__m128h __A, __m128h __B)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_round ((__v8hf) __A,\n+\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmul_sch (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __C,\n+\t\t\t\t\t(__v8hf) __D,\n+\t\t\t\t\t(__v8hf) __A,\n+\t\t\t\t\t__B, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmul_sch (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __B,\n+\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t__A, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fcmul_round_sch (__m128h __A, __m128h __B, const int __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_round ((__v8hf) __A,\n+\t\t\t\t    (__v8hf) __B,\n+\t\t\t\t    __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fcmul_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t  __m128h __D, const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __C,\n+\t\t\t\t\t (__v8hf) __D,\n+\t\t\t\t\t (__v8hf) __A,\n+\t\t\t\t\t __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fcmul_round_sch (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t   const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __B,\n+\t\t\t\t\t (__v8hf) __C,\n+\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t __A, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmul_round_sch (__m128h __A, __m128h __B, const int __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_round ((__v8hf) __A,\n+\t\t\t\t   (__v8hf) __B, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmul_round_sch (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t\t __m128h __D, const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __C,\n+\t\t\t\t\t(__v8hf) __D,\n+\t\t\t\t\t(__v8hf) __A,\n+\t\t\t\t\t__B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmul_round_sch (__mmask8 __A, __m128h __B, __m128h __C, const int __E)\n+{\n+  return (__m128h)\n+    __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __B,\n+\t\t\t\t\t(__v8hf) __C,\n+\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t__A, __E);\n+}\n+\n+#else\n+#define _mm_fcmul_round_sch(__A, __B, __D)\t\t\t\t\\\n+  (__m128h) __builtin_ia32_vfcmulcsh_round ((__v8hf) __A,\t\t\\\n+\t\t\t\t\t    (__v8hf) __B, __D)\n+\n+#define _mm_mask_fcmul_round_sch(__A, __B, __C, __D, __E)\t\t\\\n+  (__m128h) __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __C,\t\t\\\n+\t\t\t\t\t\t (__v8hf) __D,\t\t\\\n+\t\t\t\t\t\t (__v8hf) __A,\t\t\\\n+\t\t\t\t\t\t __B, __E)\n+\n+#define _mm_maskz_fcmul_round_sch(__A, __B, __C, __E)\t\t\t\\\n+  (__m128h) __builtin_ia32_vfcmulcsh_mask_round ((__v8hf) __B,\t\t\\\n+\t\t\t\t\t\t (__v8hf) __C,\t\t\\\n+\t\t\t\t\t\t _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t __A, __E)\n+\n+#define _mm_fmul_round_sch(__A, __B, __D)\t\t\t\t\\\n+  (__m128h) __builtin_ia32_vfmulcsh_round ((__v8hf) __A,\t\t\\\n+\t\t\t\t\t   (__v8hf) __B, __D)\n+\n+#define _mm_mask_fmul_round_sch(__A, __B, __C, __D, __E)\t\t\\\n+  (__m128h) __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __C,\t\t\\\n+\t\t\t\t\t\t(__v8hf) __D,\t\t\\\n+\t\t\t\t\t\t(__v8hf) __A,\t\t\\\n+\t\t\t\t\t\t__B, __E)\n+\n+#define _mm_maskz_fmul_round_sch(__A, __B, __C, __E)\t\t\t\\\n+  (__m128h) __builtin_ia32_vfmulcsh_mask_round ((__v8hf) __B,\t\t\\\n+\t\t\t\t\t\t(__v8hf) __C,\t\t\\\n+\t\t\t\t\t\t_mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t__A, __E)\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "302e1bc6502f3e3871f8cdbbdcd96224f03b83e0", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -3231,6 +3231,16 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_round, \"__\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fcmulc_v32hf_mask_round, \"__builtin_ia32_vfcmulcph512_mask_round\", IX86_BUILTIN_VFCMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_round, \"__builtin_ia32_vfmulcph512_round\", IX86_BUILTIN_VFMULCPH512_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmulc_v32hf_mask_round, \"__builtin_ia32_vfmulcph512_mask_round\", IX86_BUILTIN_VFMULCPH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fma_fcmaddcsh_v8hf_round, \"__builtin_ia32_vfcmaddcsh_round\", IX86_BUILTIN_VFCMADDCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_mask_round, \"__builtin_ia32_vfcmaddcsh_mask_round\", IX86_BUILTIN_VFCMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmaddcsh_v8hf_maskz_round, \"__builtin_ia32_vfcmaddcsh_maskz_round\", IX86_BUILTIN_VFCMADDCSH_MASKZ_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fma_fmaddcsh_v8hf_round, \"__builtin_ia32_vfmaddcsh_round\", IX86_BUILTIN_VFMADDCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_mask_round, \"__builtin_ia32_vfmaddcsh_mask_round\", IX86_BUILTIN_VFMADDCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmaddcsh_v8hf_maskz_round, \"__builtin_ia32_vfmaddcsh_maskz_round\", IX86_BUILTIN_VFMADDCSH_MASKZ_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulcsh_v8hf_round, \"__builtin_ia32_vfcmulcsh_round\", IX86_BUILTIN_VFCMULCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fcmulcsh_v8hf_mask_round, \"__builtin_ia32_vfcmulcsh_mask_round\", IX86_BUILTIN_VFCMULCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmulcsh_v8hf_round, \"__builtin_ia32_vfmulcsh_round\", IX86_BUILTIN_VFMULCSH_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_fmulcsh_v8hf_mask_round, \"__builtin_ia32_vfmulcsh_mask_round\", IX86_BUILTIN_VFMULCSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "b08a9d300736f1e75fc712f87ca7d002b476323b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -5891,6 +5891,82 @@\n   [(set_attr \"type\" \"ssemul\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"avx512fp16_fmaddcsh_v8hf_maskz<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_avx512fp16_fma_fmaddcsh_v8hf_maskz<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (V8HFmode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_fcmaddcsh_v8hf_maskz<round_expand_name>\"\n+  [(match_operand:V8HF 0 \"register_operand\")\n+   (match_operand:V8HF 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:V8HF 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512FP16 && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_avx512fp16_fma_fcmaddcsh_v8hf_maskz<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (V8HFmode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_insn \"avx512fp16_fma_<complexopname>sh_v8hf<mask_scalarcz_name><round_scalarcz_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=&v\")\n+\t(vec_merge:V8HF\n+\t  (unspec:V8HF\n+\t    [(match_operand:V8HF 1 \"<round_scalarcz_nimm_predicate>\" \"v\")\n+\t     (match_operand:V8HF 2 \"<round_scalarcz_nimm_predicate>\" \"<round_scalarcz_constraint>\")\n+\t     (match_operand:V8HF 3 \"<round_scalarcz_nimm_predicate>\" \"0\")]\n+\t     UNSPEC_COMPLEX_F_C_MA)\n+\t  (match_dup 2)\n+\t  (const_int 3)))]\n+  \"TARGET_AVX512FP16\"\n+  \"v<complexopname>sh\\t{<round_scalarcz_mask_op4>%2, %1, %0<mask_scalarcz_operand4>|%0<mask_scalarcz_operand4>, %1, %2<round_scalarcz_maskcz_mask_op4>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"V8HF\")])\n+\n+(define_insn \"avx512fp16_<complexopname>sh_v8hf_mask<round_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=&v\")\n+\t(vec_merge:V8HF\n+\t  (vec_merge:V8HF\n+\t    (unspec:V8HF\n+\t      [(match_operand:V8HF 1 \"<round_nimm_predicate>\" \"v\")\n+\t       (match_operand:V8HF 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n+\t       (match_operand:V8HF 3 \"<round_nimm_predicate>\" \"0\")]\n+\t       UNSPEC_COMPLEX_F_C_MA)\n+\t    (match_dup 1)\n+\t    (unspec:QI [(match_operand:QI 4 \"register_operand\" \"Yk\")]\n+\t      UNSPEC_COMPLEX_MASK))\n+\t  (match_dup 2)\n+\t  (const_int 3)))]\n+  \"TARGET_AVX512FP16\"\n+  \"v<complexopname>sh\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"V8HF\")])\n+\n+(define_insn \"avx512fp16_<complexopname>sh_v8hf<mask_scalarc_name><round_scalarcz_name>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=&v\")\n+\t  (vec_merge:V8HF\n+\t    (unspec:V8HF\n+\t      [(match_operand:V8HF 1 \"nonimmediate_operand\" \"v\")\n+\t       (match_operand:V8HF 2 \"<round_scalarcz_nimm_predicate>\" \"<round_scalarcz_constraint>\")]\n+\t       UNSPEC_COMPLEX_F_C_MUL)\n+\t    (match_dup 1)\n+\t    (const_int 3)))]\n+  \"TARGET_AVX512FP16\"\n+  \"v<complexopname>sh\\t{<round_scalarc_mask_op3>%2, %1, %0<mask_scalarc_operand3>|%0<mask_scalarc_operand3>, %1, %2<round_scalarc_mask_op3>}\"\n+  [(set_attr \"type\" \"ssemul\")\n+   (set_attr \"mode\" \"V8HF\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel half-precision floating point conversion operations"}, {"sha": "11e62c67fcc0db20d6782d269a6252e7db780b93", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -328,8 +328,12 @@\n     (match_operand:<avx512fmaskmode> 5 \"register_operand\")])\n \n (define_subst_attr \"mask_scalar_name\" \"mask_scalar\" \"\" \"_mask\")\n+(define_subst_attr \"mask_scalarcz_name\" \"mask_scalarcz\" \"\" \"_maskz\")\n+(define_subst_attr \"mask_scalarc_name\" \"mask_scalarc\" \"\" \"_mask\")\n+(define_subst_attr \"mask_scalarc_operand3\" \"mask_scalarc\" \"\" \"%{%4%}%N3\")\n (define_subst_attr \"mask_scalar_operand3\" \"mask_scalar\" \"\" \"%{%4%}%N3\")\n (define_subst_attr \"mask_scalar_operand4\" \"mask_scalar\" \"\" \"%{%5%}%N4\")\n+(define_subst_attr \"mask_scalarcz_operand4\" \"mask_scalarcz\" \"\" \"%{%5%}%N4\")\n \n (define_subst \"mask_scalar\"\n   [(set (match_operand:SUBST_V 0)\n@@ -347,12 +351,55 @@\n \t  (match_dup 2)\n \t  (const_int 1)))])\n \n+(define_subst \"mask_scalarcz\"\n+  [(set (match_operand:SUBST_CV 0)\n+\t(vec_merge:SUBST_CV\n+\t  (match_operand:SUBST_CV 1)\n+\t  (match_operand:SUBST_CV 2)\n+\t  (const_int 3)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(vec_merge:SUBST_CV\n+\t  (vec_merge:SUBST_CV\n+\t    (match_dup 1)\n+\t    (match_operand:SUBST_CV 3 \"const0_operand\" \"C\")\n+\t    (unspec:<avx512fmaskmode>\n+\t      [(match_operand:<avx512fmaskcmode> 4 \"register_operand\" \"Yk\")]\n+\t      UNSPEC_COMPLEX_MASK))\n+\t  (match_dup 2)\n+\t  (const_int 3)))])\n+\n+(define_subst \"mask_scalarc\"\n+  [(set (match_operand:SUBST_CV 0)\n+\t(vec_merge:SUBST_CV\n+\t  (match_operand:SUBST_CV 1)\n+\t  (match_operand:SUBST_CV 2)\n+\t  (const_int 3)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(vec_merge:SUBST_CV\n+\t  (vec_merge:SUBST_CV\n+\t    (match_dup 1)\n+\t    (match_operand:SUBST_CV 3 \"nonimm_or_0_operand\" \"0C\")\n+\t    (unspec:<avx512fmaskmode>\n+\t      [(match_operand:<avx512fmaskcmode> 4 \"register_operand\" \"Yk\")]\n+\t      UNSPEC_COMPLEX_MASK))\n+\t  (match_dup 2)\n+\t  (const_int 3)))])\n+\n (define_subst_attr \"round_scalar_name\" \"round_scalar\" \"\" \"_round\")\n+(define_subst_attr \"round_scalarcz_name\" \"round_scalarcz\" \"\" \"_round\")\n (define_subst_attr \"round_scalar_mask_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_scalarc_mask_operand3\" \"mask_scalarc\" \"%R3\" \"%R5\")\n+(define_subst_attr \"round_scalarcz_mask_operand4\" \"mask_scalarcz\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_scalar_mask_op3\" \"round_scalar\" \"\" \"<round_scalar_mask_operand3>\")\n+(define_subst_attr \"round_scalarc_mask_op3\" \"round_scalarcz\" \"\" \"<round_scalarc_mask_operand3>\")\n+(define_subst_attr \"round_scalarcz_mask_op4\" \"round_scalarcz\" \"\" \"<round_scalarcz_mask_operand4>\")\n (define_subst_attr \"round_scalar_constraint\" \"round_scalar\" \"vm\" \"v\")\n+(define_subst_attr \"round_scalarcz_constraint\" \"round_scalarcz\" \"vm\" \"v\")\n (define_subst_attr \"round_scalar_prefix\" \"round_scalar\" \"vex\" \"evex\")\n (define_subst_attr \"round_scalar_nimm_predicate\" \"round_scalar\" \"nonimmediate_operand\" \"register_operand\")\n+(define_subst_attr \"round_scalarcz_nimm_predicate\" \"round_scalarcz\" \"vector_operand\" \"register_operand\")\n \n (define_subst \"round_scalar\"\n   [(set (match_operand:SUBST_V 0)\n@@ -370,6 +417,22 @@\n \t     (match_operand:SI 3 \"const_4_or_8_to_11_operand\")]\n \t\tUNSPEC_EMBEDDED_ROUNDING))])\n \n+(define_subst \"round_scalarcz\"\n+  [(set (match_operand:SUBST_V 0)\n+\t(vec_merge:SUBST_V\n+\t  (match_operand:SUBST_V 1)\n+\t  (match_operand:SUBST_V 2)\n+\t  (const_int 3)))]\n+  \"TARGET_AVX512F\"\n+  [(set (match_dup 0)\n+\t(unspec:SUBST_V [\n+\t     (vec_merge:SUBST_V\n+\t\t(match_dup 1)\n+\t\t(match_dup 2)\n+\t\t(const_int 3))\n+\t     (match_operand:SI 3 \"const_4_or_8_to_11_operand\")]\n+\t\tUNSPEC_EMBEDDED_ROUNDING))])\n+\n (define_subst_attr \"round_saeonly_scalar_name\" \"round_saeonly_scalar\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_scalar_mask_operand3\" \"mask_scalar\" \"%r3\" \"%r5\")\n (define_subst_attr \"round_saeonly_scalar_mask_operand4\" \"mask_scalar\" \"%r4\" \"%r6\")"}, {"sha": "8744aa7df557470904e7bb494003b1822cc81433", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -797,6 +797,16 @@\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcsh_round(A, B, C) __builtin_ia32_vfcmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "f6d54e3a815d6b0e063ec9308274bda436fc8eba", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -814,6 +814,16 @@\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcsh_round(A, B, C) __builtin_ia32_vfcmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "956a9d16f84964f0bb68559540a294bd8d7e1c68", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -774,6 +774,8 @@ test_2 (_mm_cvt_roundi32_sh, __m128h, __m128h, int, 8)\n test_2 (_mm_cvt_roundu32_sh, __m128h, __m128h, unsigned, 8)\n test_2 (_mm512_fmul_round_pch, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_fcmul_round_pch, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_fmul_round_sch, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_fcmul_round_sch, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -850,8 +852,12 @@ test_3 (_mm_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm512_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n test_3 (_mm512_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm_fmadd_round_sch, __m128h, __m128h, __m128h, __m128h, 8)\n+test_3 (_mm_fcmadd_round_sch, __m128h, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_fmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_fcmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_fmul_round_sch, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_fcmul_round_sch, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -920,8 +926,16 @@ test_4 (_mm512_mask3_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmas\n test_4 (_mm512_mask3_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n test_4 (_mm512_maskz_fmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n test_4 (_mm512_maskz_fcmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm_mask_fmadd_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_fcmadd_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask3_fmadd_round_sch, __m128h, __m128h, __m128h, __m128h, __mmask8, 8)\n+test_4 (_mm_mask3_fcmadd_round_sch, __m128h, __m128h, __m128h, __m128h, __mmask8, 8)\n+test_4 (_mm_maskz_fmadd_round_sch, __m128h, __mmask8, __m128h, __m128h, __m128h, 8)\n+test_4 (_mm_maskz_fcmadd_round_sch, __m128h, __mmask8, __m128h, __m128h, __m128h, 8)\n test_4 (_mm512_mask_fmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n test_4 (_mm512_mask_fcmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm_mask_fmul_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_fcmul_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "31492ef36970839f0e15ef937d4b823b7b22ba13", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -878,6 +878,8 @@ test_2 (_mm_cvt_roundss_sh, __m128h, __m128h, __m128, 8)\n test_2 (_mm_cvt_roundsd_sh, __m128h, __m128h, __m128d, 8)\n test_2 (_mm512_fmul_round_pch, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_fcmul_round_pch, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_fmul_round_sch, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_fcmul_round_sch, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -954,6 +956,10 @@ test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3 (_mm512_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n test_3 (_mm512_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_fmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_fmul_round_sch, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_fcmul_round_sch, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_fmadd_round_sch, __m128h, __m128h, __m128h, __m128h, 8)\n+test_3 (_mm_fcmadd_round_sch, __m128h, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_fcmul_round_pch, __m512h, __mmask16, __m512h, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n@@ -1022,8 +1028,16 @@ test_4 (_mm512_mask3_fmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmas\n test_4 (_mm512_mask3_fcmadd_round_pch, __m512h, __m512h, __m512h, __m512h, __mmask16, 8)\n test_4 (_mm512_maskz_fmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n test_4 (_mm512_maskz_fcmadd_round_pch, __m512h, __mmask16, __m512h, __m512h, __m512h, 8)\n+test_4 (_mm_mask_fmadd_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_fcmadd_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask3_fmadd_round_sch, __m128h, __m128h, __m128h, __m128h, __mmask8, 8)\n+test_4 (_mm_mask3_fcmadd_round_sch, __m128h, __m128h, __m128h, __m128h, __mmask8, 8)\n+test_4 (_mm_maskz_fmadd_round_sch, __m128h, __mmask8, __m128h, __m128h, __m128h, 8)\n+test_4 (_mm_maskz_fcmadd_round_sch, __m128h, __mmask8, __m128h, __m128h, __m128h, 8)\n test_4 (_mm512_mask_fmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n test_4 (_mm512_mask_fcmul_round_pch, __m512h, __m512h, __mmask16, __m512h, __m512h, 8)\n+test_4 (_mm_mask_fmul_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_fcmul_round_sch, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "98251269a64510b9383222db5c0bfad1055dae27", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3b96df03fdbe2fb770729501e2e9b65e66c2da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=db3b96df03fdbe2fb770729501e2e9b65e66c2da", "patch": "@@ -815,6 +815,16 @@\n #define __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcph512_mask_round(A, C, D, B, 8)\n #define __builtin_ia32_vfcmulcph512_round(A, B, C) __builtin_ia32_vfcmulcph512_round(A, B, 8)\n #define __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcph512_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_round(A, B, C, D) __builtin_ia32_vfmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfcmaddcsh_round(A, B, C, D) __builtin_ia32_vfcmaddcsh_round(A, B, C, 8)\n+#define __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmaddcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, E) __builtin_ia32_vfcmaddcsh_maskz_round(B, C, D, A, 8)\n+#define __builtin_ia32_vfmulcsh_round(A, B, C) __builtin_ia32_vfmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfmulcsh_mask_round(A, C, D, B, 8)\n+#define __builtin_ia32_vfcmulcsh_round(A, B, C) __builtin_ia32_vfcmulcsh_round(A, B, 8)\n+#define __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, E) __builtin_ia32_vfcmulcsh_mask_round(A, C, D, B, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}