{"sha": "ac1a984a5f45df2273bb58445378bc8ecff18564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxYTk4NGE1ZjQ1ZGYyMjczYmI1ODQ0NTM3OGJjOGVjZmYxODU2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-12-19T00:02:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-12-19T00:02:05Z"}, "message": "re PR c++/63723 (Narrowing conversion allowed in braced init list in SFINAE context)\n\n2014-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/63723\n\t* g++.dg/cpp0x/sfinae54.C: New.\n\nFrom-SVN: r218880", "tree": {"sha": "489f3fdeedf6636c21b3176f6bce9d56e4a17fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/489f3fdeedf6636c21b3176f6bce9d56e4a17fc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1a984a5f45df2273bb58445378bc8ecff18564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1a984a5f45df2273bb58445378bc8ecff18564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1a984a5f45df2273bb58445378bc8ecff18564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1a984a5f45df2273bb58445378bc8ecff18564/comments", "author": null, "committer": null, "parents": [{"sha": "90f6debee40951552f873164d332f7a46b1007df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f6debee40951552f873164d332f7a46b1007df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f6debee40951552f873164d332f7a46b1007df"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "87453b57fab6cc386b7ac6cb1ede1fe5e2aa237b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a984a5f45df2273bb58445378bc8ecff18564/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a984a5f45df2273bb58445378bc8ecff18564/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac1a984a5f45df2273bb58445378bc8ecff18564", "patch": "@@ -1,3 +1,8 @@\n+2014-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/63723\n+\t* g++.dg/cpp0x/sfinae54.C: New.\n+\n 2014-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59204"}, {"sha": "f681fa7fa3e3ddac601b07c05cbe9c9125edc9da", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae54.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a984a5f45df2273bb58445378bc8ecff18564/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a984a5f45df2273bb58445378bc8ecff18564/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae54.C?ref=ac1a984a5f45df2273bb58445378bc8ecff18564", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/63723\n+// { dg-do compile { target c++11 } }\n+\n+template<typename Tp> Tp declval();\n+\n+template<typename Tp, Tp v>\n+struct integral_constant\n+{\n+  static constexpr Tp value = v;\n+  typedef Tp value_type;\n+  typedef integral_constant<Tp, v> type;\n+  constexpr operator value_type() const { return value; }\n+};\n+\n+typedef integral_constant<bool, true>   true_type;\n+typedef integral_constant<bool, false> false_type;\n+\n+template <typename From, typename To>\n+class is_list_convertible_helper\n+{\n+  template <typename To2>\n+  static void requires_conversion(To2 t);\n+\n+  template <typename From2, typename To2,\n+      typename = decltype(requires_conversion<To2>({declval<From2>()}))>\n+  static true_type helper(int);\n+\n+  template <typename From2, typename To2>\n+  static false_type helper(...);\n+\n+public:\n+  using type = decltype(helper<From, To>(0));\n+};\n+\n+template <typename From, typename To>\n+class is_list_convertible\n+  : public is_list_convertible_helper<From, To>::type\n+{ };\n+\n+static_assert(!is_list_convertible<double, int>::value,\n+\t      \"double -> int is narrowing!\");"}]}