{"sha": "c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlMjVlNjU5M2FiMGNhMmFlNDhhY2I1NjM1NDg5OTk4YmNkYzFiYg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-12-17T12:26:10Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-12-17T12:26:10Z"}, "message": "[ARM 2/5 big.LITTLE] Allow tuning parameters without unique tuning targets.\n\ngcc/\n\t* config/arm/arm-cores.def: Add new column for TUNE_IDENT.\n\t* config/arm/genopt.sh: Improve layout.\n\t* config/arm/arm-tune.md: Regenerate.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm-opts.h (ARM_CORE): Modify macro for TUNE_IDENT.\n\t* config/arm/arm.c (ARM_CORE): Modify macro for TUNE_IDENT.\n\t(arm_option_override): When a CPU is chosen, that should also\n\tform the tune target.\n\t* config/arm/arm.h (ARM_CORE): Modify macro for TUNE_IDENT.\n\nFrom-SVN: r206046", "tree": {"sha": "d790fb5ef8e845dd15e4938eba8085a19139c64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d790fb5ef8e845dd15e4938eba8085a19139c64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b848e289cf60afff769c04dcc6e95a92da5c3748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b848e289cf60afff769c04dcc6e95a92da5c3748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b848e289cf60afff769c04dcc6e95a92da5c3748"}], "stats": {"total": 271, "additions": 162, "deletions": 109}, "files": [{"sha": "5170f2da2171e2567b2d6c845a67fa67cff6df0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -1,3 +1,15 @@\n+2013-12-17  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/arm/arm-cores.def: Add new column for TUNE_IDENT.\n+\t* config/arm/genopt.sh: Improve layout.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-opts.h (ARM_CORE): Modify macro for TUNE_IDENT.\n+\t* config/arm/arm.c (ARM_CORE): Modify macro for TUNE_IDENT.\n+\t(arm_option_override): When a CPU is chosen, that should also\n+\tform the tune target.\n+\t* config/arm/arm.h (ARM_CORE): Modify macro for TUNE_IDENT.\n+\n 2013-12-17  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* common/config/arm/arm-common.c (arm_rewrite_selected_cpu): New."}, {"sha": "3264eedd57c62a924eb1ee99a2ef5f070fbdef0f", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 99, "deletions": 90, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -20,10 +20,13 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_CORE(CORE_NAME, CORE_IDENT, ARCH, FLAGS, COSTS)\n+      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, ARCH, FLAGS, COSTS)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n-   The CORE_IDENT is the name of the core, represented as an identifier.\n+   The INTERNAL_IDENT is the name of the core represented as an identifier.\n+   This must be unique for each entry in this table.\n+   The TUNE_IDENT is the name of the core for which scheduling decisions\n+   should be made, represented as an identifier.\n    ARCH is the architecture revision implemented by the chip.\n    FLAGS are the bitwise-or of the traits that apply to that core.\n    This need not include flags implied by the architecture.\n@@ -35,109 +38,115 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",   arm2,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm250\", arm250,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm3\",   arm3,\t2,\tFL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm2\", \tarm2, arm2,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm250\", \tarm250, arm250,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",          arm6,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm60\",         arm60,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm600\",        arm600,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm610\",        arm610,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm620\",        arm620,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7\",          arm7,\t\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm7d\",         arm7d,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm7di\",        arm7di,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm70\",         arm70,\t3,\tFL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm700\",        arm700,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm700i\",       arm700i,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm710\",        arm710,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm720\",        arm720,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm710c\",       arm710c,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7100\",       arm7100,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7500\",       arm7500,\t3,\t             FL_MODE26 | FL_WBUF, slowmul)\n-/* Doesn't have an external co-proc, but does have embedded fpa.  */\n-ARM_CORE(\"arm7500fe\",     arm7500fe,\t3,\tFL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3, FL_MODE26 | FL_WBUF, slowmul)\n+/* Doesn't have an external co-proc, but does have embedded fpa. */\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",         arm7m,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(\"arm7dm\",        arm7dm,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(\"arm7dmi\",       arm7dmi,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8,\t\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm810\",        arm810,\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(\"strongarm\",     strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"fa526\",         fa526,        4,                               FL_LDSCHED, fastmul)\n-ARM_CORE(\"fa626\",         fa626,        4,                               FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4, FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm810\",        arm810, arm810,\t\t4, FL_MODE26 | FL_LDSCHED, fastmul)\n+ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4, FL_LDSCHED, fastmul)\n+ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4, FL_LDSCHED, fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",      arm7tdmi,\t4T,\tFL_CO_PROC          , fastmul)\n-ARM_CORE(\"arm7tdmi-s\",    arm7tdmis,\t4T,\tFL_CO_PROC          , fastmul)\n-ARM_CORE(\"arm710t\",       arm710t,\t4T,\t             FL_WBUF, fastmul)\n-ARM_CORE(\"arm720t\",       arm720t,\t4T,\t             FL_WBUF, fastmul)\n-ARM_CORE(\"arm740t\",       arm740t,\t4T,\t             FL_WBUF, fastmul)\n-ARM_CORE(\"arm9\",          arm9,\t\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm9tdmi\",      arm9tdmi,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm920\",        arm920,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm920t\",       arm920t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm922t\",       arm922t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm940t\",       arm940t,\t4T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"ep9312\",        ep9312,\t4T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T, FL_CO_PROC, fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T, FL_CO_PROC, fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T, FL_WBUF,    fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T, FL_WBUF,    fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T, FL_WBUF,    fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T, FL_LDSCHED, fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",     arm10tdmi,\t5T,\t                         FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1020t\",      arm1020t,\t5T,\t                         FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T, FL_LDSCHED, fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",         arm9e,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm946e-s\",     arm946es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm966e-s\",     arm966es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm968e-s\",     arm968es,\t5TE,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm10e\",        arm10e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1020e\",      arm1020e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1022e\",      arm1022e,\t5TE,\t\t\t\t FL_LDSCHED, fastmul)\n-ARM_CORE(\"xscale\",        xscale,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n-ARM_CORE(\"iwmmxt\",        iwmmxt,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n-ARM_CORE(\"iwmmxt2\",       iwmmxt2,\t5TE,\t                         FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2, xscale)\n-ARM_CORE(\"fa606te\",       fa606te,      5TE,                             FL_LDSCHED, 9e)\n-ARM_CORE(\"fa626te\",       fa626te,      5TE,                             FL_LDSCHED, 9e)\n-ARM_CORE(\"fmp626\",        fmp626,       5TE,                             FL_LDSCHED, 9e)\n-ARM_CORE(\"fa726te\",       fa726te,      5TE,                             FL_LDSCHED, fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE, FL_LDSCHED, fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2, xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE, FL_LDSCHED, 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE, FL_LDSCHED, fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",    arm926ejs,\t5TEJ,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1026ej-s\",   arm1026ejs,\t5TEJ,\t                         FL_LDSCHED, 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ, FL_LDSCHED, 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",    arm1136js,\t6J,\t                         FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1136jf-s\",   arm1136jfs,\t6J,\t                         FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"arm1176jz-s\",\t  arm1176jzs,\t6ZK,\t\t\t\t FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1176jzf-s\",  arm1176jzfs,\t6ZK,\t\t\t\t FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"mpcorenovfp\",\t  mpcorenovfp,\t6K,\t\t\t\t FL_LDSCHED, 9e)\n-ARM_CORE(\"mpcore\",\t  mpcore,\t6K,\t\t\t\t FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"arm1156t2-s\",\t  arm1156t2s,\t6T2,\t\t\t\t FL_LDSCHED, v6t2)\n-ARM_CORE(\"arm1156t2f-s\",  arm1156t2fs,  6T2,\t\t\t\t FL_LDSCHED | FL_VFPV2, v6t2)\n-ARM_CORE(\"generic-armv7-a\", genericv7a,\t7A,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-a5\",\t  cortexa5,\t7A,\t\t\t\t FL_LDSCHED, cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t  cortexa7,\t7A,\t\t\t\t FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t  cortexa8,\t7A,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-a9\",\t  cortexa9,\t7A,\t\t\t\t FL_LDSCHED, cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t  cortexa12,\t7A,\t\t\t\t FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t  cortexa15,\t7A,\t\t\t\t FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)\n-ARM_CORE(\"cortex-a53\",\t  cortexa53,\t8A,\t\t\t\t FL_LDSCHED, cortex_a53)\n-ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-r5\",\t  cortexr5,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-r7\",\t  cortexr7,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-m4\",\t  cortexm4,\t7EM,\t\t\t\t FL_LDSCHED, v7m)\n-ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, v7m)\n-ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n-ARM_CORE(\"cortex-m0\",\t  cortexm0,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n-ARM_CORE(\"cortex-m0plus\", cortexm0plus,\t6M,\t\t\t\t FL_LDSCHED, v6m)\n-ARM_CORE(\"marvell-pj4\",   marvell_pj4,  7A,                              FL_LDSCHED, 9e)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,  FL_LDSCHED, 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,  FL_LDSCHED | FL_VFPV2, 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6ZK, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6ZK, FL_LDSCHED | FL_VFPV2, 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,  FL_LDSCHED, 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,  FL_LDSCHED | FL_VFPV2, 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2, FL_LDSCHED, v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2, FL_LDSCHED | FL_VFPV2, v6t2)\n+\n+/* V6M Architecture Processors */\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M, FL_LDSCHED, v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M, FL_LDSCHED, v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M, FL_LDSCHED, v6m)\n+\n+/* V7 Architecture Processors */\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,  FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,  FL_LDSCHED, cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,  FL_LDSCHED, cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t  \tcortexa12, cortexa12,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,  FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,  FL_LDSCHED, cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM, FL_LDSCHED, v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,  FL_LDSCHED, v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,  FL_LDSCHED, 9e)\n+\n+/* V8 Architecture Processors */\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A, FL_LDSCHED, cortex_a53)"}, {"sha": "dab308ee3c3dda7aa78da0458dc7650775c3058b", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -23,8 +23,9 @@\n /* The various ARM cores.  */\n enum processor_type\n {\n-#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n-  IDENT,\n+#undef ARM_CORE\n+#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, FLAGS, COSTS) \\\n+  INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   /* Used to indicate that no processor has been specified.  */"}, {"sha": "7da7cc8e91049c9a7efa9a03b8735b82c437ed5d", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -231,6 +231,15 @@ Enum(processor_type) String(arm1156t2-s) Value(arm1156t2s)\n EnumValue\n Enum(processor_type) String(arm1156t2f-s) Value(arm1156t2fs)\n \n+EnumValue\n+Enum(processor_type) String(cortex-m1) Value(cortexm1)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m0) Value(cortexm0)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m0plus) Value(cortexm0plus)\n+\n EnumValue\n Enum(processor_type) String(generic-armv7-a) Value(genericv7a)\n \n@@ -252,9 +261,6 @@ Enum(processor_type) String(cortex-a12) Value(cortexa12)\n EnumValue\n Enum(processor_type) String(cortex-a15) Value(cortexa15)\n \n-EnumValue\n-Enum(processor_type) String(cortex-a53) Value(cortexa53)\n-\n EnumValue\n Enum(processor_type) String(cortex-r4) Value(cortexr4)\n \n@@ -274,16 +280,10 @@ EnumValue\n Enum(processor_type) String(cortex-m3) Value(cortexm3)\n \n EnumValue\n-Enum(processor_type) String(cortex-m1) Value(cortexm1)\n-\n-EnumValue\n-Enum(processor_type) String(cortex-m0) Value(cortexm0)\n-\n-EnumValue\n-Enum(processor_type) String(cortex-m0plus) Value(cortexm0plus)\n+Enum(processor_type) String(marvell-pj4) Value(marvell_pj4)\n \n EnumValue\n-Enum(processor_type) String(marvell-pj4) Value(marvell_pj4)\n+Enum(processor_type) String(cortex-a53) Value(cortexa53)\n \n Enum\n Name(arm_arch) Type(int)"}, {"sha": "0386afff7428169ad0e31ae4de4bd677413bc817", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -1,5 +1,33 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,fa526,fa626,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,iwmmxt2,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,arm1156t2fs,genericv7a,cortexa5,cortexa7,cortexa8,cortexa9,cortexa12,cortexa15,cortexa53,cortexr4,cortexr4f,cortexr5,cortexr7,cortexm4,cortexm3,cortexm1,cortexm0,cortexm0plus,marvell_pj4\"\n+\t\"arm2,arm250,arm3,\n+\tarm6,arm60,arm600,\n+\tarm610,arm620,arm7,\n+\tarm7d,arm7di,arm70,\n+\tarm700,arm700i,arm710,\n+\tarm720,arm710c,arm7100,\n+\tarm7500,arm7500fe,arm7m,\n+\tarm7dm,arm7dmi,arm8,\n+\tarm810,strongarm,strongarm110,\n+\tstrongarm1100,strongarm1110,fa526,\n+\tfa626,arm7tdmi,arm7tdmis,\n+\tarm710t,arm720t,arm740t,\n+\tarm9,arm9tdmi,arm920,\n+\tarm920t,arm922t,arm940t,\n+\tep9312,arm10tdmi,arm1020t,\n+\tarm9e,arm946es,arm966es,\n+\tarm968es,arm10e,arm1020e,\n+\tarm1022e,xscale,iwmmxt,\n+\tiwmmxt2,fa606te,fa626te,\n+\tfmp626,fa726te,arm926ejs,\n+\tarm1026ejs,arm1136js,arm1136jfs,\n+\tarm1176jzs,arm1176jzfs,mpcorenovfp,\n+\tmpcore,arm1156t2s,arm1156t2fs,\n+\tcortexm1,cortexm0,cortexm0plus,\n+\tgenericv7a,cortexa5,cortexa7,\n+\tcortexa8,cortexa9,cortexa12,\n+\tcortexa15,cortexr4,cortexr4f,\n+\tcortexr5,cortexr7,cortexm4,\n+\tcortexm3,marvell_pj4,cortexa53\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "2bc9bf10d9c460959ccebe34d56e2f19cfda6575", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -1742,7 +1742,7 @@ const struct tune_params arm_fa726te_tune =\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n   {NAME, IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n     FLAGS | FL_FOR_ARCH##ARCH, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n@@ -2251,7 +2251,10 @@ arm_option_override (void)\n     arm_selected_arch = &all_architectures[arm_arch_option];\n \n   if (global_options_set.x_arm_cpu_option)\n-    arm_selected_cpu = &all_cores[(int) arm_cpu_option];\n+    {\n+      arm_selected_cpu = &all_cores[(int) arm_cpu_option];\n+      arm_selected_tune = &all_cores[(int) arm_cpu_option];\n+    }\n \n   if (global_options_set.x_arm_tune_option)\n     arm_selected_tune = &all_cores[(int) arm_tune_option];"}, {"sha": "7b5a7f98e31f1a0490752730bb51e5c79b4ae4da", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -162,8 +162,8 @@ extern char arm_arch_name[];\n \n enum target_cpus\n {\n-#define ARM_CORE(NAME, IDENT, ARCH, FLAGS, COSTS) \\\n-  TARGET_CPU_##IDENT,\n+#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, FLAGS, COSTS) \\\n+  TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   TARGET_CPU_generic"}, {"sha": "2893ab4ef8d02e19ffdcfba06dd98294cc371261", "filename": "gcc/config/arm/gentune.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Fgentune.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e25e6593ab0ca2ae48acb5635489998bcdc1bb/gcc%2Fconfig%2Farm%2Fgentune.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgentune.sh?ref=c0e25e6593ab0ca2ae48acb5635489998bcdc1bb", "patch": "@@ -25,5 +25,5 @@ echo \";; Generated automatically by gentune.sh from arm-cores.def\"\n allcores=`awk -F'[(, \t]+' '/^ARM_CORE/ { cores = cores$3\",\" } END { print cores } ' $1`\n \n echo \"(define_attr \\\"tune\\\"\"\n-echo \"\t\\\"$allcores\\\"\" | sed -e 's/,\"$/\"/'\n+echo \"\t\\\"$allcores\\\"\" | sed -e 's/,\"$/\"/' | sed -e 's/\\([a-z0-9_]\\+,[a-z0-9_]\\+,[a-z0-9_]\\+,\\)/\\1\\n\\t/g'\n echo \"\t(const (symbol_ref \\\"((enum attr_tune) arm_tune)\\\")))\""}]}