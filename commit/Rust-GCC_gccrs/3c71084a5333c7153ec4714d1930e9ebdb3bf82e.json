{"sha": "3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3MTA4NGE1MzMzYzcxNTNlYzQ3MTRkMTkzMGU5ZWJkYjNiZjgyZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-09-14T19:24:08Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-09-14T19:24:08Z"}, "message": "Makefile.am: Re-work shell commands that exceeded command-line length limits.\n\n* Makefile.am: Re-work shell commands that exceeded command-line\nlength limits.\n* Makefile.in: Rebuilt.\n\nFrom-SVN: r36416", "tree": {"sha": "a6909851043602a931bd93b723ff1101583d7c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6909851043602a931bd93b723ff1101583d7c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/comments", "author": null, "committer": null, "parents": [{"sha": "8a17a7b460c3f511a5ed5d29974861c1628e1ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a17a7b460c3f511a5ed5d29974861c1628e1ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a17a7b460c3f511a5ed5d29974861c1628e1ecd"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "6327de5be460ea96852d1a5fc60df4393f3bb51e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "patch": "@@ -1,5 +1,9 @@\n 2000-09-14  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* Makefile.am: Re-work shell commands that exceeded command-line\n+\tlength limits.\n+\t* Makefile.in: Rebuilt.\n+\n \t* java/lang/natRuntime.cc (lt_preloaded_symbols): Define as `extern'.\n \n \t* defineclass.cc: Include alloca.h only if HAVE_ALLOCA_H."}, {"sha": "8c5c41a50d262029eae8ce218ffa5df45de648f0", "filename": "libjava/Makefile.am", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "patch": "@@ -142,9 +142,12 @@ $(java_source_files:.java=.class): libgcj.zip\n $(built_java_source_files:.java=.class): $(built_java_source_files)\n ## This little nastiness is here so that the backquoted stuff in the\n ## GCJ definition can be correctly expanded, if required.\n-\tjavac=\"$(JAVAC)\"; \\\n-\t$$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` \\\n-\t  -d $(here) $?\n+\t@javac=\"$(JAVAC)\"; \\\n+\tfor f in $?; do \\\n+\t  echo $$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` -d $(here) $$f; \\\n+\t  $$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` \\\n+\t  -d $(here) $$f; \\\n+\tdone\n \n ## We have the zip file depend on the java sources and not the class\n ## files, because we don't know the names of all the class files.\n@@ -153,20 +156,24 @@ $(built_java_source_files:.java=.class): $(built_java_source_files)\n ## `make libgcj.zip' will not rebuilt foo.class.  That's because\n ## libgcj.zip is not out-of-date with respect to foo.java.\n libgcj.zip: $(java_source_files)\n+## Create a list of all Java sources, without exceeding any shell limits.\n+\t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$(subst $(srcdir)/,,$?),$(shell echo $(source) >> tmp-list))\n ## FIXME: this ought to depend on built_java_source_files, but right\n ## now it can't.  Ugly.\n \t$(MAKE) $(built_java_source_files:.java=.class)\n ## This little nastiness is here so that the backquoted stuff in the\n ## GCJ definition can be correctly expanded, if required.\n-\tjavac=\"$(JAVAC)\"; cd $(srcdir); \\\n-\t  $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) \\\n-\t    $(subst $(srcdir)/,,$?)\n-\t-@rm -f libgcj.zip\n+\t@javac=\"$(JAVAC)\"; dir=`/bin/pwd`; cd $(srcdir); \\\n+\t  for f in `cat $$dir/tmp-list`; do \\\n+\t    echo $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) $$f; \\\n+\t    $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) $$f; \\\n+\tdone\n+\t-@rm -f tmp-list libgcj.zip\n ## Note that we explicitly want to include directory information.\n \t$(ZIP) -r libgcj java gnu -n .class -i '*.class' -i '*/'\n \n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files)\n-CLEANFILES = libgcj.zip\n+CLEANFILES = tmp-list libgcj.zip\n \n clean-local:\n ## We just remove every .class file that was created."}, {"sha": "924e2663790557d4c720faa8acf28aa6aa390434", "filename": "libjava/Makefile.in", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c71084a5333c7153ec4714d1930e9ebdb3bf82e/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=3c71084a5333c7153ec4714d1930e9ebdb3bf82e", "patch": "@@ -207,7 +207,7 @@ libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) \\\n libgcj_la_LINK = $(LIBLINK)\n \n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files)\n-CLEANFILES = libgcj.zip\n+CLEANFILES = tmp-list libgcj.zip\n \n SUFFIXES = .class .java .h\n \n@@ -2060,16 +2060,22 @@ mostlyclean distclean maintainer-clean\n $(java_source_files:.java=.class): libgcj.zip\n \n $(built_java_source_files:.java=.class): $(built_java_source_files)\n-\tjavac=\"$(JAVAC)\"; \\\n-\t$$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` \\\n-\t  -d $(here) $?\n+\t@javac=\"$(JAVAC)\"; \\\n+\tfor f in $?; do \\\n+\t  echo $$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` -d $(here) $$f; \\\n+\t  $$javac -L$(here) $(JCFLAGS) -classpath $(here):`cd $(srcdir) && /bin/pwd` \\\n+\t  -d $(here) $$f; \\\n+\tdone\n \n libgcj.zip: $(java_source_files)\n+\t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$(subst $(srcdir)/,,$?),$(shell echo $(source) >> tmp-list))\n \t$(MAKE) $(built_java_source_files:.java=.class)\n-\tjavac=\"$(JAVAC)\"; cd $(srcdir); \\\n-\t  $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) \\\n-\t    $(subst $(srcdir)/,,$?)\n-\t-@rm -f libgcj.zip\n+\t@javac=\"$(JAVAC)\"; dir=`/bin/pwd`; cd $(srcdir); \\\n+\t  for f in `cat $$dir/tmp-list`; do \\\n+\t    echo $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) $$f; \\\n+\t    $$javac $(JCFLAGS) -classpath $(here):`/bin/pwd` -d $(here) $$f; \\\n+\tdone\n+\t-@rm -f tmp-list libgcj.zip\n \t$(ZIP) -r libgcj java gnu -n .class -i '*.class' -i '*/'\n \n clean-local:"}]}