{"sha": "46ed79630c489235e9dc605a56e5e587652b123f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlZDc5NjMwYzQ4OTIzNWU5ZGM2MDVhNTZlNWU1ODc2NTJiMTIzZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-04-09T13:10:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-04-09T13:10:22Z"}, "message": "i386.md (truncdfsf2_*): Add i387->int/sse reg alternatives...\n\n\t* i386.md (truncdfsf2_*): Add i387->int/sse reg alternatives;\n\tDo not require source to match destination anymore;\n\tAdd abort to the nontrivial cases that should be handled by split.\n\t(fix_trunc?fdi): Add SSE case for x86_64.\n\t(floatdi?f): Likewise.\n\t(floatdi?f_sse): New.\n\t(fix_trunc?fdi_sse): New.\n\nFrom-SVN: r41203", "tree": {"sha": "d8bb6f492656c15b39fc8c0ce419cff630911bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bb6f492656c15b39fc8c0ce419cff630911bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ed79630c489235e9dc605a56e5e587652b123f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed79630c489235e9dc605a56e5e587652b123f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ed79630c489235e9dc605a56e5e587652b123f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed79630c489235e9dc605a56e5e587652b123f/comments", "author": null, "committer": null, "parents": [{"sha": "0444812842614acbc34c1c0d8d1fba9c6595730f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0444812842614acbc34c1c0d8d1fba9c6595730f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0444812842614acbc34c1c0d8d1fba9c6595730f"}], "stats": {"total": 216, "additions": 149, "deletions": 67}, "files": [{"sha": "7d3a024a39ff45544b67c47619ae100c934ea66a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed79630c489235e9dc605a56e5e587652b123f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed79630c489235e9dc605a56e5e587652b123f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46ed79630c489235e9dc605a56e5e587652b123f", "patch": "@@ -1,3 +1,13 @@\n+Mon Apr  9 15:09:13 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (truncdfsf2_*): Add i387->int/sse reg alternatives;\n+\tDo not require source to match destination anymore;\n+\tAdd abort to the nontrivial cases that should be handled by split.\n+\t(fix_trunc?fdi): Add SSE case for x86_64.\n+\t(floatdi?f): Likewise.\n+\t(floatdi?f_sse): New.\n+\t(fix_trunc?fdi_sse): New.\n+\n 2001-04-09  Richard Sandiford   <rsandifo@redhat.com>\n \n \t* dwarfout.c (DEBUG_ARANGES_BEGIN_LABEL): New label."}, {"sha": "fb43781d5e8bcbe264b64bbf9f6b15269123a461", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 139, "deletions": 67, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed79630c489235e9dc605a56e5e587652b123f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed79630c489235e9dc605a56e5e587652b123f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=46ed79630c489235e9dc605a56e5e587652b123f", "patch": "@@ -4271,10 +4271,10 @@\n \")\n \n (define_insn \"*truncdfsf2_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m\"))]\n+\t (match_operand:DF 1 \"register_operand\" \"f,f,f,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_80387 && !TARGET_SSE2\"\n   \"*\n {\n@@ -4285,19 +4285,18 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n+    default:\n+      abort ();\n     }\n-  abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"SF,SF\")])\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n+   (set_attr \"mode\" \"SF,SF,SF,SF\")])\n \n (define_insn \"*truncdfsf2_1_sse\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=*!m,?f,Y\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=*!m,?f#rx,?r#fx,?x#rf,Y\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"f,0,mY\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,X\"))]\n+\t (match_operand:DF 1 \"nonimmediate_operand\" \"f,f,f,f,mY\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m,X\"))]\n   \"TARGET_80387 && TARGET_SSE2\"\n   \"*\n {\n@@ -4308,16 +4307,14 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n-    case 2:\n-    case 3:\n+    case 4:\n       return \\\"cvtsd2ss\\\\t{%1, %0|%0, %1}\\\";\n+    default:\n+      abort ();\n     }\n-  abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi,sse\")\n-   (set_attr \"mode\" \"SF,SF,DF\")])\n+  [(set_attr \"type\" \"fmov,multi,multi,multi,sse\")\n+   (set_attr \"mode\" \"SF,SF,SF,SF,DF\")])\n \n (define_insn \"*truncdfsf2_2\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=Y,!m\")\n@@ -4389,7 +4386,7 @@\n \t (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\n-   && FP_REG_P (operands[0])\"\n+   && FP_REG_P (operands[1])\"\n   [(set (match_dup 2) (float_truncate:SF (match_dup 1)))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n@@ -4403,10 +4400,10 @@\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*truncxfsf2_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,f\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n-\t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=m,m\"))]\n+\t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n@@ -4417,12 +4414,11 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n+    default:\n+      abort();\n     }\n-  abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncxfsf2_2\"\n@@ -4468,10 +4464,10 @@\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*trunctfsf2_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,f\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=m,m\"))]\n+\t (match_operand:TF 1 \"register_operand\" \"f,f,f,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -4482,12 +4478,11 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n+    default:\n+      abort();\n     }\n-  abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*trunctfsf2_2\"\n@@ -4534,10 +4529,10 @@\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*truncxfdf2_1\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,f\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n \t(float_truncate:DF\n-\t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"=m,m\"))]\n+\t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n@@ -4548,12 +4543,12 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n+    default:\n+      abort();\n     }\n   abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*truncxfdf2_2\"\n@@ -4599,10 +4594,10 @@\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*trunctfdf2_1\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,f\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n \t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"f,0\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"=m,m\"))]\n+\t (match_operand:TF 1 \"register_operand\" \"f,f,f,f\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n   \"TARGET_80387\"\n   \"*\n {\n@@ -4613,15 +4608,15 @@\n \treturn \\\"fstp%z0\\\\t%y0\\\";\n       else\n \treturn \\\"fst%z0\\\\t%y0\\\";\n-    case 1:\n-      return \\\"fstp%z2\\\\t%y2\\;fld%z2\\\\t%y2\\\";\n+    default:\n+      abort();\n     }\n   abort ();\n }\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"*trunctfdf2_2\"\n+\t(define_insn \"*trunctfdf2_2\"\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:TF 1 \"register_operand\" \"f\")))]\n@@ -4689,9 +4684,23 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (match_scratch:DF 5 \"\"))])]\n-  \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (DImode, 1);\")\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_64BIT)\"\n+  \"\n+{\n+  if (TARGET_SSE2)\n+   {\n+     rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DImode);\n+     emit_insn (gen_fix_truncdfdi_sse (out, operands[1]));\n+     if (out != operands[0])\n+\temit_move_insn (operands[0], out);\n+     DONE;\n+   }\n+  else\n+   {\n+     operands[2] = assign_386_stack_local (SImode, 0);\n+     operands[3] = assign_386_stack_local (DImode, 1);\n+   }\n+}\")\n \n (define_expand \"fix_truncsfdi2\"\n   [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -4700,9 +4709,23 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (match_scratch:SF 5 \"\"))])]\n-  \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SImode, 0);\n-   operands[3] = assign_386_stack_local (DImode, 1);\")\n+  \"TARGET_80387 || (TARGET_SSE && TARGET_64BIT)\"\n+  \"\n+{\n+  if (TARGET_SSE2)\n+   {\n+     rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DImode);\n+     emit_insn (gen_fix_truncsfdi_sse (out, operands[1]));\n+     if (out != operands[0])\n+\temit_move_insn (operands[0], out);\n+     DONE;\n+   }\n+  else\n+   {\n+     operands[2] = assign_386_stack_local (SImode, 0);\n+     operands[3] = assign_386_stack_local (DImode, 1);\n+   }\n+}\")\n \n (define_insn \"*fix_truncdi_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,?r\")\n@@ -4711,7 +4734,9 @@\n    (clobber (match_operand:DI 3 \"memory_operand\" \"=m,m\"))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))\n    (clobber (match_scratch 5 \"=&f,&f\"))]\n-  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\"\n+  \"TARGET_80387 && FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && (!TARGET_SSE2 || !TARGET_64BIT\n+       || !SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n   \"* return output_fix_trunc (insn, operands);\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -4731,6 +4756,21 @@\n    (set (match_dup 0) (match_dup 3))]\n   \"\")\n \n+;; When SSE available, it is always faster to use it!\n+(define_insn \"fix_truncsfdi_sse\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE && TARGET_64BIT\"\n+  \"cvttss2si{q}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"fix_truncdfdi_sse\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Ym\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"cvttsd2si{q}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n ;; Signed conversion to SImode.\n \n (define_expand \"fix_truncxfsi2\"\n@@ -4789,7 +4829,7 @@\n   if (TARGET_SSE2)\n    {\n      rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (SImode);\n-     emit_insn (gen_fix_truncdfsi_sse (out, operands[1]));\n+     emit_insn (gen_fix_truncsfsi_sse (out, operands[1]));\n      if (out != operands[0])\n \temit_move_insn (operands[0], out);\n      DONE;\n@@ -4984,20 +5024,36 @@\n (define_insn \"*floatsisf2_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n \t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"mr\")))]\n-  \"TARGET_80387 && TARGET_SSE\"\n+  \"TARGET_SSE\"\n   \"cvtsi2ss\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"floatdisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387\"\n+(define_expand \"floatdisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+  \"(TARGET_SSE && TARGET_64BIT) || TARGET_80387\"\n+  \"\")\n+\n+(define_insn \"*floatdisf2_i387\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  \"TARGET_80387 && (!TARGET_SSE || !TARGET_64BIT || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+   #\n+   cvtsi2ss{q}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,multi,sse\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n+(define_insn \"*floatdisf2_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"mr\")))]\n+  \"TARGET_SSE && TARGET_64BIT\"\n+  \"cvtsi2ss{q}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n@@ -5039,14 +5095,30 @@\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"floatdidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387 && TARGET_SSE2\"\n+(define_expand \"floatdidf2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387 || (TARGET_SSE2 && TARGET_64BIT)\"\n+  \"\")\n+\n+(define_insn \"*floatdidf2_i387\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,Y\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n+  \"TARGET_80387 && (!TARGET_SSE2 || !TARGET_64BIT || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n+   #\n+   cvtsi2sd{q}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,multi,sse\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"fp_int_src\" \"true\")])\n+\n+(define_insn \"*floatdidf2_sse\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n+\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"mr\")))]\n+  \"TARGET_SSE2\"\n+  \"cvtsi2sd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"fp_int_src\" \"true\")])\n "}]}