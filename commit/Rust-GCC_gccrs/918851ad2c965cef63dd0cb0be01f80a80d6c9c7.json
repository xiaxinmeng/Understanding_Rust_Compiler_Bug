{"sha": "918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "node_id": "C_kwDOANBUbNoAKDkxODg1MWFkMmM5NjVjZWY2M2RkMGNiMGJlMDFmODBhODBkNmM5Yzc", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-22T09:44:16Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-23T09:58:25Z"}, "message": "typecheck: Refactor coercion_site\n\nRefactor coercion_site to be a simple function in rust-type-util.h\ninstead of a static function in TypeCheckBase.\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-trait-resolve.cc (TraitItemReference::resolve_item):\n\tRemove TypeCheckBase namespace qualifier.\n\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::coercion_site):\n\tRemove coercion_site function.\n\t* typecheck/rust-hir-type-check-base.h: Remove coercion_site\n\tprototype.\n\t* typecheck/rust-type-util.cc (coercion_site): Add coercion_site\n\tfunction.\n\t* typecheck/rust-type-util.h (coercion_site): Add coercion_site\n\tprototype.\n\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit):\n\tRemove TypeCheckBase namespace qualifier.\n\t(TypeCheckMethodCallExpr::check): Remove TypeCheckBase namespace\n\tqualifier.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "f040a3a9e916c5edf7850d58107a3fc784e902fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f040a3a9e916c5edf7850d58107a3fc784e902fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1145917c6b82ed475b84ae0dd6de241bd018721d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145917c6b82ed475b84ae0dd6de241bd018721d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1145917c6b82ed475b84ae0dd6de241bd018721d"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "5a4d9660219daaec3048a58d5d2ec834a1099d58", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -349,11 +349,9 @@ TraitItemReference::resolve_item (HIR::TraitItemFunc &func)\n \t? func.get_decl ().get_return_type ()->get_locus ()\n \t: func.get_locus ();\n \n-  TypeCheckBase::coercion_site (func.get_mappings ().get_hirid (),\n-\t\t\t\tTyTy::TyWithLocation (expected_ret_tyty,\n-\t\t\t\t\t\t      fn_return_locus),\n-\t\t\t\tTyTy::TyWithLocation (block_expr_ty),\n-\t\t\t\tfunc.get_locus ());\n+  coercion_site (func.get_mappings ().get_hirid (),\n+\t\t TyTy::TyWithLocation (expected_ret_tyty, fn_return_locus),\n+\t\t TyTy::TyWithLocation (block_expr_ty), func.get_locus ());\n \n   context->pop_return_type ();\n }"}, {"sha": "0c54a05ced115f49712008693f494ac443fab837", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -18,7 +18,6 @@\n \n #include \"rust-hir-type-check-base.h\"\n #include \"rust-casts.h\"\n-#include \"rust-coercion.h\"\n #include \"rust-hir-type-check-expr.h\"\n #include \"rust-hir-type-check-implitem.h\"\n #include \"rust-hir-type-check-item.h\"\n@@ -349,40 +348,6 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n   return repr;\n }\n \n-TyTy::BaseType *\n-TypeCheckBase::coercion_site (HirId id, TyTy::TyWithLocation lhs,\n-\t\t\t      TyTy::TyWithLocation rhs, Location locus)\n-{\n-  TyTy::BaseType *expected = lhs.get_ty ();\n-  TyTy::BaseType *expr = rhs.get_ty ();\n-\n-  rust_debug (\"coercion_site id={%u} expected={%s} expr={%s}\", id,\n-\t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n-\n-  auto context = TypeCheckContext::get ();\n-  if (expected->get_kind () == TyTy::TypeKind::ERROR\n-      || expr->get_kind () == TyTy::TypeKind::ERROR)\n-    return expr;\n-\n-  // can we autoderef it?\n-  auto result = TypeCoercionRules::Coerce (expr, expected, locus);\n-\n-  // the result needs to be unified\n-  TyTy::BaseType *receiver = expr;\n-  if (!result.is_error ())\n-    {\n-      receiver = result.tyty;\n-    }\n-\n-  rust_debug (\"coerce_default_unify(a={%s}, b={%s})\",\n-\t      receiver->debug_str ().c_str (), expected->debug_str ().c_str ());\n-  TyTy::BaseType *coerced\n-    = unify_site (id, lhs, TyTy::TyWithLocation (receiver, rhs.get_locus ()),\n-\t\t  locus);\n-  context->insert_autoderef_mappings (id, std::move (result.adjustments));\n-  return coerced;\n-}\n-\n TyTy::BaseType *\n TypeCheckBase::cast_site (HirId id, TyTy::TyWithLocation from,\n \t\t\t  TyTy::TyWithLocation to, Location cast_locus)"}, {"sha": "e6f0e3c4305730718e85eabf43372a68ebcc4232", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -34,10 +34,6 @@ class TypeCheckBase\n public:\n   virtual ~TypeCheckBase () {}\n \n-  static TyTy::BaseType *coercion_site (HirId id, TyTy::TyWithLocation lhs,\n-\t\t\t\t\tTyTy::TyWithLocation rhs,\n-\t\t\t\t\tLocation coercion_locus);\n-\n   static TyTy::BaseType *cast_site (HirId id, TyTy::TyWithLocation from,\n \t\t\t\t    TyTy::TyWithLocation to,\n \t\t\t\t    Location cast_locus);"}, {"sha": "16b0a240589366019a1ca134930c61876b6a325b", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-hir-visitor.h\"\n #include \"rust-name-resolver.h\"\n #include \"rust-unify.h\"\n+#include \"rust-coercion.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -119,5 +120,39 @@ unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t\t\t      true /*emit_error*/);\n }\n \n+TyTy::BaseType *\n+coercion_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t       Location locus)\n+{\n+  TyTy::BaseType *expected = lhs.get_ty ();\n+  TyTy::BaseType *expr = rhs.get_ty ();\n+\n+  rust_debug (\"coercion_site id={%u} expected={%s} expr={%s}\", id,\n+\t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n+\n+  auto context = TypeCheckContext::get ();\n+  if (expected->get_kind () == TyTy::TypeKind::ERROR\n+      || expr->get_kind () == TyTy::TypeKind::ERROR)\n+    return expr;\n+\n+  // can we autoderef it?\n+  auto result = TypeCoercionRules::Coerce (expr, expected, locus);\n+\n+  // the result needs to be unified\n+  TyTy::BaseType *receiver = expr;\n+  if (!result.is_error ())\n+    {\n+      receiver = result.tyty;\n+    }\n+\n+  rust_debug (\"coerce_default_unify(a={%s}, b={%s})\",\n+\t      receiver->debug_str ().c_str (), expected->debug_str ().c_str ());\n+  TyTy::BaseType *coerced\n+    = unify_site (id, lhs, TyTy::TyWithLocation (receiver, rhs.get_locus ()),\n+\t\t  locus);\n+  context->insert_autoderef_mappings (id, std::move (result.adjustments));\n+  return coerced;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "764ec4d7b811d6c94b365b4f20e8f902afce96a4", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -37,6 +37,10 @@ TyTy::BaseType *\n unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t    Location unify_locus);\n \n+TyTy::BaseType *\n+coercion_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t       Location coercion_locus);\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "b50c809a561d1f298320e7accc32408632a8f68e", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918851ad2c965cef63dd0cb0be01f80a80d6c9c7/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=918851ad2c965cef63dd0cb0be01f80a80d6c9c7", "patch": "@@ -60,9 +60,10 @@ TypeCheckCallExpr::visit (ADTType &type)\n \t}\n \n       HirId coercion_side_id = argument->get_mappings ().get_hirid ();\n-      auto res = Resolver::TypeCheckBase::coercion_site (\n-\tcoercion_side_id, TyWithLocation (field_tyty),\n-\tTyWithLocation (arg, arg_locus), argument->get_locus ());\n+      auto res = Resolver::coercion_site (coercion_side_id,\n+\t\t\t\t\t  TyWithLocation (field_tyty),\n+\t\t\t\t\t  TyWithLocation (arg, arg_locus),\n+\t\t\t\t\t  argument->get_locus ());\n       if (res->get_kind () == TyTy::TypeKind::ERROR)\n \t{\n \t  return;\n@@ -134,10 +135,12 @@ TypeCheckCallExpr::visit (FnType &type)\n \t\t: fn_param_pattern->get_locus ();\n \n \t  HirId coercion_side_id = argument->get_mappings ().get_hirid ();\n-\t  auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n-\t    coercion_side_id, TyWithLocation (param_ty, param_locus),\n-\t    TyWithLocation (argument_expr_tyty, arg_locus),\n-\t    argument->get_locus ());\n+\t  auto resolved_argument_type\n+\t    = Resolver::coercion_site (coercion_side_id,\n+\t\t\t\t       TyWithLocation (param_ty, param_locus),\n+\t\t\t\t       TyWithLocation (argument_expr_tyty,\n+\t\t\t\t\t\t       arg_locus),\n+\t\t\t\t       argument->get_locus ());\n \t  if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n \t    {\n \t      return;\n@@ -240,7 +243,7 @@ TypeCheckCallExpr::visit (FnPtr &type)\n \t  return;\n \t}\n \n-      auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n+      auto resolved_argument_type = Resolver::coercion_site (\n \targument->get_mappings ().get_hirid (), TyWithLocation (fnparam),\n \tTyWithLocation (argument_expr_tyty, arg_locus), argument->get_locus ());\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)\n@@ -347,7 +350,7 @@ TypeCheckMethodCallExpr::check (FnType &type)\n \n       auto argument_expr_tyty = argument.get_argument_type ();\n       HirId coercion_side_id = argument.get_mappings ().get_hirid ();\n-      auto resolved_argument_type = Resolver::TypeCheckBase::coercion_site (\n+      auto resolved_argument_type = Resolver::coercion_site (\n \tcoercion_side_id, TyWithLocation (param_ty, param_locus),\n \tTyWithLocation (argument_expr_tyty, arg_locus), arg_locus);\n       if (resolved_argument_type->get_kind () == TyTy::TypeKind::ERROR)"}]}