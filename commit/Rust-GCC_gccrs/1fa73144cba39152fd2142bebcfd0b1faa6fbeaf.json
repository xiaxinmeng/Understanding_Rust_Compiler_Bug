{"sha": "1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhNzMxNDRjYmEzOTE1MmZkMjE0MmJlYmNmZDBiMWZhYTZmYmVhZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2001-11-08T15:38:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-08T15:38:10Z"}, "message": "parse.y (trap_overflow_corner_case): New rule.\n\n\t* parse.y (trap_overflow_corner_case): New rule.\n\t(unary_expression): Use it.\n\t* lex.c (java_init_lex): Don't set minus_seen.\n\t(yylex): Don't use minus_seen.  Communicate overflow to parser for\n\tit to handle.\n\t(error_if_numeric_overflow): New function.\n\t* parse.h (minus_seen): Removed field.\n\t(JAVA_RADIX10_FLAG): New define.\n\nFrom-SVN: r46846", "tree": {"sha": "8d9569c5e98df492ddd441e2d8ef2f828d2237e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d9569c5e98df492ddd441e2d8ef2f828d2237e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/comments", "author": null, "committer": null, "parents": [{"sha": "5a21a051b749b5b61090d9c08a719057c3fa959f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a21a051b749b5b61090d9c08a719057c3fa959f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a21a051b749b5b61090d9c08a719057c3fa959f"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "a016b6993d2c9b934ded6dfed2d4f066d9389146", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "patch": "@@ -1,3 +1,14 @@\n+2001-11-08  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* parse.y (trap_overflow_corner_case): New rule.\n+\t(unary_expression): Use it.\n+\t* lex.c (java_init_lex): Don't set minus_seen.\n+\t(yylex): Don't use minus_seen.  Communicate overflow to parser for\n+\tit to handle.\n+\t(error_if_numeric_overflow): New function.\n+\t* parse.h (minus_seen): Removed field.\n+\t(JAVA_RADIX10_FLAG): New define.\n+\n 2001-11-07  Tom Tromey  <tromey@redhat.com>\n \n \tPatch for PR java/1414:"}, {"sha": "779bbcbd3827aee84835489e87cf07ca423c469e", "filename": "gcc/java/lex.c", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "patch": "@@ -66,6 +66,9 @@ static int utf8_cmp PARAMS ((const unsigned char *, int, const char *));\n #endif\n \n java_lexer *java_new_lexer PARAMS ((FILE *, const char *));\n+#ifndef JC1_LITE\n+static void error_if_numeric_overflow PARAMS ((tree));\n+#endif\n \n #ifdef HAVE_ICONV\n /* This is nonzero if we have initialized `need_byteswap'.  */\n@@ -132,7 +135,6 @@ java_init_lex (finput, encoding)\n   ctxp->lineno = lineno = 0;\n   ctxp->p_line = NULL;\n   ctxp->c_line = NULL;\n-  ctxp->minus_seen = 0;\n   ctxp->java_error_flag = 0;\n   ctxp->lexer = java_new_lexer (finput, encoding);\n }\n@@ -995,6 +997,7 @@ java_lex (java_lval)\n       int  i;\n #ifndef JC1_LITE\n       int  number_beginning = ctxp->c_line->current;\n+      tree value;\n #endif\n       \n       /* We might have a . separator instead of a FP like .[0-9]* */\n@@ -1233,9 +1236,8 @@ java_lex (java_lval)\n \t     expressed using a 10 radix. For other radixes, everything that\n \t     fits withing 64 bits is OK. */\n \t  int hb = (high >> 31);\n-\t  if (overflow || (hb && low && radix == 10) ||  \n-\t      (hb && high & 0x7fffffff && radix == 10) ||\n-\t      (hb && !(high & 0x7fffffff) && !ctxp->minus_seen && radix == 10))\n+\t  if (overflow || (hb && low && radix == 10)\n+\t      || (hb && high & 0x7fffffff && radix == 10))\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `long' literal\");\n \t}\n       else\n@@ -1246,19 +1248,21 @@ java_lex (java_lval)\n \t     that fits within 32 bits is OK.  As all literals are\n \t     signed, we sign extend here. */\n \t  int hb = (low >> 31) & 0x1;\n-\t  if (overflow || high || (hb && low & 0x7fffffff && radix == 10) ||\n-\t      (hb && !(low & 0x7fffffff) && !ctxp->minus_seen && radix == 10))\n+\t  if (overflow || high || (hb && low & 0x7fffffff && radix == 10))\n \t    JAVA_INTEGRAL_RANGE_ERROR (\"Numeric overflow for `int' literal\");\n \t  high = -hb;\n \t}\n-      ctxp->minus_seen = 0;\n+#ifndef JC1_LITE\n+      value = build_int_2 (low, high);\n+      JAVA_RADIX10_FLAG (value) = radix == 10;\n+      SET_LVAL_NODE_TYPE (value, long_suffix ? long_type_node : int_type_node);\n+#else\n       SET_LVAL_NODE_TYPE (build_int_2 (low, high),\n-\t\t\t  (long_suffix ? long_type_node : int_type_node));\n+\t\t\t  long_suffix ? long_type_node : int_type_node);\n+#endif\n       return INT_LIT_TK;\n     }\n \n-  ctxp->minus_seen = 0;\n-\n   /* Character literals */\n   if (c == '\\'')\n     {\n@@ -1475,7 +1479,6 @@ java_lex (java_lval)\n \t  BUILD_OPERATOR2 (MINUS_ASSIGN_TK);\n \tdefault:\n \t  java_unget_unicode ();\n-\t  ctxp->minus_seen = 1;\n \t  BUILD_OPERATOR (MINUS_TK);\n \t}\n \n@@ -1649,6 +1652,37 @@ java_lex (java_lval)\n   return 0;\n }\n \n+#ifndef JC1_LITE\n+/* This is called by the parser to see if an error should be generated\n+   due to numeric overflow.  This function only handles the particular\n+   case of the largest negative value, and is only called in the case\n+   where this value is not preceeded by `-'.  */\n+static void\n+error_if_numeric_overflow (value)\n+     tree value;\n+{\n+  if (TREE_CODE (value) == INTEGER_CST && JAVA_RADIX10_FLAG (value))\n+    {\n+      unsigned HOST_WIDE_INT lo, hi;\n+\n+      lo = TREE_INT_CST_LOW (value);\n+      hi = TREE_INT_CST_HIGH (value);\n+      if (TREE_TYPE (value) == long_type_node)\n+\t{\n+\t  int hb = (hi >> 31);\n+\t  if (hb && !(hi & 0x7fffffff))\n+\t    java_lex_error (\"Numeric overflow for `long' literal\", 0);\n+\t}\n+      else\n+\t{\n+\t  int hb = (lo >> 31) & 0x1;\n+\t  if (hb && !(lo & 0x7fffffff))\n+\t    java_lex_error (\"Numeric overflow for `int' literal\", 0);\n+\t}\n+    }\n+}\n+#endif /* JC1_LITE */\n+\n static void\n java_unicode_2_utf8 (unicode)\n     unicode_t unicode;"}, {"sha": "b9f4b0f8921e658649b7dfe39e1698ce56f23cf4", "filename": "gcc/java/parse.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "patch": "@@ -752,8 +752,6 @@ struct parser_ctxt {\n   /* Indicates that a context already contains saved data and that the\n      next save operation will require a new context to be created. */\n   unsigned saved_data:1;\n-  /* Integral literal overflow */\n-  unsigned minus_seen:1;\n   /* Report error when true */\n   unsigned java_error_flag:1;\n   /* @deprecated tag seen */\n@@ -914,6 +912,11 @@ struct parser_ctxt {\n   if (CPC_INSTANCE_INITIALIZER_LIST(C))\t\t\t\t\\\n     TREE_PURPOSE (CPC_INSTANCE_INITIALIZER_LIST (C)) = (S);\n \n+/* This is used by the lexer to communicate with the parser.  It is\n+   set on an integer constant if the radix is 10, so that the parser\n+   can correctly diagnose a numeric overflow.  */\n+#define JAVA_RADIX10_FLAG(NODE) TREE_LANG_FLAG_0(NODE)\n+\n #ifndef JC1_LITE\n void java_complete_class PARAMS ((void));\n void java_check_circular_reference PARAMS ((void));"}, {"sha": "3b9900dff6f60deec3d70271918332359a641828", "filename": "gcc/java/parse.y", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa73144cba39152fd2142bebcfd0b1faa6fbeaf/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=1fa73144cba39152fd2142bebcfd0b1faa6fbeaf", "patch": "@@ -577,7 +577,7 @@ static tree src_parse_roots[1] = { NULL_TREE };\n \t\t\tswitch_statement synchronized_statement throw_statement\n \t\t\ttry_statement switch_expression switch_block\n \t\t\tcatches catch_clause catch_clause_parameter finally\n-\t\t\tanonymous_class_creation\n+\t\t\tanonymous_class_creation trap_overflow_corner_case\n %type    <node>         return_statement break_statement continue_statement\n \n %type    <operator>     ASSIGN_TK      MULT_ASSIGN_TK  DIV_ASSIGN_TK  \n@@ -2317,16 +2317,24 @@ post_decrement_expression:\n \t\t{ $$ = build_incdec ($2.token, $2.location, $1, 1); }\n ;\n \n-unary_expression:\n+trap_overflow_corner_case:\n \tpre_increment_expression\n |\tpre_decrement_expression\n |\tPLUS_TK unary_expression\n \t\t{$$ = build_unaryop ($1.token, $1.location, $2); }\n-|\tMINUS_TK unary_expression\n-\t\t{$$ = build_unaryop ($1.token, $1.location, $2); }\n |\tunary_expression_not_plus_minus\n |\tPLUS_TK error\n \t\t{yyerror (\"Missing term\"); RECOVER}\n+;\n+\n+unary_expression:\n+\ttrap_overflow_corner_case\n+\t\t{\n+\t\t  error_if_numeric_overflow ($1);\n+\t\t  $$ = $1;\n+\t\t}\n+|\tMINUS_TK trap_overflow_corner_case\n+\t\t{$$ = build_unaryop ($1.token, $1.location, $2); }\n |\tMINUS_TK error\n \t\t{yyerror (\"Missing term\"); RECOVER}\n ;"}]}