{"sha": "32ede1083fad4b68873bec3e5a775e2092d6566e", "node_id": "C_kwDOANBUbNoAKDMyZWRlMTA4M2ZhZDRiNjg4NzNiZWMzZTVhNzc1ZTIwOTJkNjU2NmU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:29Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T09:52:29Z"}, "message": "if-conv: Apply VN to hoisted conversions\n\nThis patch is a prerequisite for a later one.  At the moment,\nif-conversion converts predicated POINTER_PLUS_EXPRs into\nnon-wrapping forms, which for:\n\n    \u2026 = base + offset\n\nbecomes:\n\n    tmp = (unsigned long) base\n    \u2026 = tmp + offset\n\nIt then hoists these conversions out of the loop where possible.\n\nHowever, because \u201cbase\u201d is a valid gimple operand, there can be\nmultiple POINTER_PLUS_EXPRs with the same base, which can in turn\nlead to multiple instances of the same conversion.  The later VN pass\nis (and I think needs to be) restricted to the new if-converted code,\nwhereas here we're deliberately inserting the conversions before the\n.LOOP_VECTORIZED condition:\n\n\t/* If we versioned loop then make sure to insert invariant\n\t   stmts before the .LOOP_VECTORIZED check since the vectorizer\n\t   will re-use that for things like runtime alias versioning\n\t   whose condition can end up using those invariants.  */\n\nWe can therefore enter the vectoriser with redundant conversions.\n\nThe easiest fix seemed to be to defer the hoisting until after VN.\nThis catches other hoisting opportunities too.\n\nHoisting the code from the (artificial) loop in pr99102.c means\nthat it's no longer worth vectorising.  The patch forces vectorisation\ninstead of relying on the cost model.\n\nThe patch also reverts pr87007-4.c and pr87007-5.c back to their\noriginal forms, undoing changes in 783dc66f9ccb0019c3dad.\nThe code at the time the tests were added was:\n\n        testl   %edi, %edi\n        je      .L10\n        vxorps  %xmm1, %xmm1, %xmm1\n        vsqrtsd d3(%rip), %xmm1, %xmm0\n        vsqrtsd d2(%rip), %xmm1, %xmm1\n\t...\n.L10:\n        ret\n\nwith the operations being hoisted, and the vxorps was specifically\nwanted (compared to the previous code).  This patch restores the code\nto that form, with the hoisted operations and the vxorps.\n\ngcc/\n\t* tree-if-conv.c: Include tree-eh.h.\n\t(predicate_statements): Remove pe argument.  Don't hoist\n\tstatements here.\n\t(combine_blocks): Remove pe argument.\n\t(ifcvt_available_on_edge_p, ifcvt_can_hoist): New functions.\n\t(ifcvt_hoist_invariants): Likewise.\n\t(tree_if_conversion): Update call to combine_blocks.  Call\n\tifcvt_hoist_invariants after VN.\n\ngcc/testsuite/\n\t* gcc.dg/vect/pr99102.c: Add -fno-vect-cost-model.\n\n\tRevert:\n\t2020-09-09  Richard Biener  [rguenther@suse.de]\n\n\t* gcc.target/i386/pr87007-4.c: Adjust.\n\t* gcc.target/i386/pr87007-5.c: Likewise.", "tree": {"sha": "5bb00283ab0e8633020e602716bd7171db7bc601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb00283ab0e8633020e602716bd7171db7bc601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ede1083fad4b68873bec3e5a775e2092d6566e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ede1083fad4b68873bec3e5a775e2092d6566e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ede1083fad4b68873bec3e5a775e2092d6566e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ede1083fad4b68873bec3e5a775e2092d6566e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10833849b55401a52f2334eb032a70beb688e9fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10833849b55401a52f2334eb032a70beb688e9fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10833849b55401a52f2334eb032a70beb688e9fc"}], "stats": {"total": 118, "additions": 104, "deletions": 14}, "files": [{"sha": "0d030d15c86d86353ca8d524ce689d3c850a3ec7", "filename": "gcc/testsuite/gcc.dg/vect/pr99102.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99102.c?ref=32ede1083fad4b68873bec3e5a775e2092d6566e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n /* { dg-additional-options \"-msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n long a[44];\n short d, e = -7;"}, {"sha": "e91bdcbac44b2510d6462fbf03e82f948467395f", "filename": "gcc/testsuite/gcc.target/i386/pr87007-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-4.c?ref=32ede1083fad4b68873bec3e5a775e2092d6566e", "patch": "@@ -15,4 +15,4 @@ foo (int n, int k)\n       d1 = ceil (d3);\n }\n \n-/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}, {"sha": "20d13cf650b9100f5c07b5a16c456d2dcc2b1e1e", "filename": "gcc/testsuite/gcc.target/i386/pr87007-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87007-5.c?ref=32ede1083fad4b68873bec3e5a775e2092d6566e", "patch": "@@ -15,4 +15,4 @@ foo (int n, int k)\n       d1 = sqrt (d3);\n }\n \n-/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}, {"sha": "d0ca04600ce5c615f27606346fb587fea36f751d", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 101, "deletions": 11, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ede1083fad4b68873bec3e5a775e2092d6566e/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=32ede1083fad4b68873bec3e5a775e2092d6566e", "patch": "@@ -121,6 +121,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfgcleanup.h\"\n #include \"tree-ssa-dse.h\"\n #include \"tree-vectorizer.h\"\n+#include \"tree-eh.h\"\n \n /* Only handle PHIs with no more arguments unless we are asked to by\n    simd pragma.  */\n@@ -2496,7 +2497,7 @@ predicate_rhs_code (gassign *stmt, tree mask, tree cond,\n */\n \n static void\n-predicate_statements (loop_p loop, edge pe)\n+predicate_statements (loop_p loop)\n {\n   unsigned int i, orig_loop_num_nodes = loop->num_nodes;\n   auto_vec<int, 1> vect_sizes;\n@@ -2597,13 +2598,7 @@ predicate_statements (loop_p loop, edge pe)\n \t\t{\n \t\t  gassign *stmt2 = as_a <gassign *> (gsi_stmt (gsi2));\n \t\t  gsi_remove (&gsi2, false);\n-\t\t  /* Make sure to move invariant conversions out of the\n-\t\t     loop.  */\n-\t\t  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt2))\n-\t\t      && expr_invariant_in_loop_p (loop,\n-\t\t\t\t\t\t   gimple_assign_rhs1 (stmt2)))\n-\t\t    gsi_insert_on_edge_immediate (pe, stmt2);\n-\t\t  else if (first)\n+\t\t  if (first)\n \t\t    {\n \t\t      gsi_insert_before (&gsi, stmt2, GSI_NEW_STMT);\n \t\t      first = false;\n@@ -2684,7 +2679,7 @@ remove_conditions_and_labels (loop_p loop)\n    blocks.  Replace PHI nodes with conditional modify expressions.  */\n \n static void\n-combine_blocks (class loop *loop, edge pe)\n+combine_blocks (class loop *loop)\n {\n   basic_block bb, exit_bb, merge_target_bb;\n   unsigned int orig_loop_num_nodes = loop->num_nodes;\n@@ -2697,7 +2692,7 @@ combine_blocks (class loop *loop, edge pe)\n   predicate_all_scalar_phis (loop);\n \n   if (need_to_predicate || need_to_rewrite_undefined)\n-    predicate_statements (loop, pe);\n+    predicate_statements (loop);\n \n   /* Merge basic blocks.  */\n   exit_bb = NULL;\n@@ -3181,6 +3176,99 @@ ifcvt_local_dce (class loop *loop)\n     }\n }\n \n+/* Return true if VALUE is already available on edge PE.  */\n+\n+static bool\n+ifcvt_available_on_edge_p (edge pe, tree value)\n+{\n+  if (is_gimple_min_invariant (value))\n+    return true;\n+\n+  if (TREE_CODE (value) == SSA_NAME)\n+    {\n+      basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (value));\n+      if (!def_bb || dominated_by_p (CDI_DOMINATORS, pe->dest, def_bb))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if STMT can be hoisted from if-converted loop LOOP to\n+   edge PE.  */\n+\n+static bool\n+ifcvt_can_hoist (class loop *loop, edge pe, gimple *stmt)\n+{\n+  if (auto *call = dyn_cast<gcall *> (stmt))\n+    {\n+      if (gimple_call_internal_p (call)\n+\t  && internal_fn_mask_index (gimple_call_internal_fn (call)) >= 0)\n+\treturn false;\n+    }\n+  else if (auto *assign = dyn_cast<gassign *> (stmt))\n+    {\n+      if (gimple_assign_rhs_code (assign) == COND_EXPR)\n+\treturn false;\n+    }\n+  else\n+    return false;\n+\n+  if (gimple_has_side_effects (stmt)\n+      || gimple_could_trap_p (stmt)\n+      || stmt_could_throw_p (cfun, stmt)\n+      || gimple_vdef (stmt)\n+      || gimple_vuse (stmt))\n+    return false;\n+\n+  int num_args = gimple_num_args (stmt);\n+  if (pe != loop_preheader_edge (loop))\n+    {\n+      for (int i = 0; i < num_args; ++i)\n+\tif (!ifcvt_available_on_edge_p (pe, gimple_arg (stmt, i)))\n+\t  return false;\n+    }\n+  else\n+    {\n+      for (int i = 0; i < num_args; ++i)\n+\tif (!expr_invariant_in_loop_p (loop, gimple_arg (stmt, i)))\n+\t  return false;\n+    }\n+\n+  return true;\n+}\n+\n+/* Hoist invariant statements from LOOP to edge PE.  */\n+\n+static void\n+ifcvt_hoist_invariants (class loop *loop, edge pe)\n+{\n+  gimple_stmt_iterator hoist_gsi = {};\n+  unsigned int num_blocks = loop->num_nodes;\n+  basic_block *body = get_loop_body (loop);\n+  for (unsigned int i = 0; i < num_blocks; ++i)\n+    for (gimple_stmt_iterator gsi = gsi_start_bb (body[i]); !gsi_end_p (gsi);)\n+      {\n+\tgimple *stmt = gsi_stmt (gsi);\n+\tif (ifcvt_can_hoist (loop, pe, stmt))\n+\t  {\n+\t    /* Once we've hoisted one statement, insert other statements\n+\t       after it.  */\n+\t    gsi_remove (&gsi, false);\n+\t    if (hoist_gsi.ptr)\n+\t      gsi_insert_after (&hoist_gsi, stmt, GSI_NEW_STMT);\n+\t    else\n+\t      {\n+\t\tgsi_insert_on_edge_immediate (pe, stmt);\n+\t\thoist_gsi = gsi_for_stmt (stmt);\n+\t      }\n+\t    continue;\n+\t  }\n+\tgsi_next (&gsi);\n+      }\n+  free (body);\n+}\n+\n /* If-convert LOOP when it is legal.  For the moment this pass has no\n    profitability analysis.  Returns non-zero todo flags when something\n    changed.  */\n@@ -3275,7 +3363,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   /* Now all statements are if-convertible.  Combine all the basic\n      blocks into one huge basic block doing the if-conversion\n      on-the-fly.  */\n-  combine_blocks (loop, pe);\n+  combine_blocks (loop);\n \n   /* Perform local CSE, this esp. helps the vectorizer analysis if loads\n      and stores are involved.  CSE only the loop body, not the entry\n@@ -3297,6 +3385,8 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   ifcvt_local_dce (loop);\n   BITMAP_FREE (exit_bbs);\n \n+  ifcvt_hoist_invariants (loop, pe);\n+\n   todo |= TODO_cleanup_cfg;\n \n  cleanup:"}]}