{"sha": "e549dd44b5ff0547004a640554ebe55f1ce2936b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0OWRkNDRiNWZmMDU0NzAwNGE2NDA1NTRlYmU1NWYxY2UyOTM2Yg==", "commit": {"author": {"name": "Luo Xiong Hu", "email": "luoxhu@linux.ibm.com", "date": "2019-12-02T01:59:26Z"}, "committer": {"name": "Xiong Hu Luo", "email": "luoxhu@gcc.gnu.org", "date": "2019-12-02T01:59:26Z"}, "message": "PR92398: Fix testcase failure of pr72804.c\n\nP9LE generated instruction is not worse than P8LE.\nmtvsrdd;xxlnot;stxv vs. not;not;std;std.\nIt can have longer latency, but latency via memory is not so critical,\nand this does save decode and other resources.  It's hard to choose\nwhich is best.  Update the test case to fix failures.\n\ngcc/testsuite/ChangeLog:\n\n\t2019-12-02  Luo Xiong Hu  <luoxhu@linux.ibm.com>\n\n\tPR testsuite/92398\n\t* gcc.target/powerpc/pr72804.c: Split the store function to...\n\t* gcc.target/powerpc/pr92398.h: ... this one.  New.\n\t* gcc.target/powerpc/pr92398.p9+.c: New.\n\t* gcc.target/powerpc/pr92398.p9-.c: New.\n\t* lib/target-supports.exp (check_effective_target_p8): New.\n\t(check_effective_target_p9+): New.\n\nFrom-SVN: r278890", "tree": {"sha": "3864f706fad9dde8643d8745d4c415259aadba2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3864f706fad9dde8643d8745d4c415259aadba2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e549dd44b5ff0547004a640554ebe55f1ce2936b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e549dd44b5ff0547004a640554ebe55f1ce2936b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e549dd44b5ff0547004a640554ebe55f1ce2936b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e549dd44b5ff0547004a640554ebe55f1ce2936b/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa2d575313b70ab55f5b52a91c3cef3aef3bad62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2d575313b70ab55f5b52a91c3cef3aef3bad62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2d575313b70ab55f5b52a91c3cef3aef3bad62"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "d49905272446c708e7ee32d60cc71d4319015b45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -1,3 +1,13 @@\n+2019-12-02  Luo Xiong Hu  <luoxhu@linux.ibm.com>\n+\n+\ttestsuite/pr92398\n+\t* gcc.target/powerpc/pr72804.c: Split the store function to...\n+\t* gcc.target/powerpc/pr92398.h: ... this one.  New.\n+\t* gcc.target/powerpc/pr92398.p9+.c: New.\n+\t* gcc.target/powerpc/pr92398.p9-.c: New.\n+\t* lib/target-supports.exp (check_effective_target_p8): New.\n+\t(check_effective_target_p9+): New.\n+\n 2019-11-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general-c/sizeless-1.c: New test."}, {"sha": "d424bccd5c3e7f46f81714463177df82bd32e575", "filename": "gcc/testsuite/gcc.target/powerpc/pr72804.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr72804.c?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -1,25 +1,14 @@\n /* { dg-do compile { target { lp64 } } } */\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O2 -mvsx -fno-inline-functions --param max-inline-insns-single=200\" } */\n+/* { dg-options \"-O2 -mvsx\"} */\n \n __int128_t\n foo (__int128_t *src)\n {\n   return ~*src;\n }\n \n-void\n-bar (__int128_t *dst, __int128_t src)\n-{\n-  *dst =  ~src;\n-}\n \n-/* { dg-final { scan-assembler-times \"not \" 4 } } */\n-/* { dg-final { scan-assembler-times \"std \" 2 } } */\n-/* { dg-final { scan-assembler-times \"ld \" 2 } } */\n-/* { dg-final { scan-assembler-not \"lxvd2x\" } } */\n-/* { dg-final { scan-assembler-not \"stxvd2x\" } } */\n-/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n-/* { dg-final { scan-assembler-not \"mfvsrd\" } } */\n-/* { dg-final { scan-assembler-not \"mfvsrd\" } } */\n+/* { dg-final { scan-assembler-times {\\mld\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mnot\\M} 2 } } */\n+/* { dg-final { scan-assembler-not {\\mlxvd2x\\M} } }*/"}, {"sha": "5a4a8bcab80218efc7652c0fd478a14990fbd4bd", "filename": "gcc/testsuite/gcc.target/powerpc/pr92398.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.h?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -0,0 +1,17 @@\n+/* This test code is included into pr92398.p9-.c and pr92398.p9+.c.\n+   The two files have the tests for the number of instructions generated for\n+   P9- versus P9+.\n+\n+   store generates difference instructions as below:\n+   P9+: mtvsrdd;xxlnot;stxv.\n+   P8/P7/P6 LE: not;not;std;std.\n+   P8 BE: mtvsrd;mtvsrd;xxpermdi;xxlnor;stxvd2x.\n+   P7/P6 BE: std;std;addi;lxvd2x;xxlnor;stxvd2x.\n+   P9+ and P9- LE are expected, P6/P7/P8 BE are unexpected.  */\n+\n+void\n+bar (__int128_t *dst, __int128_t src)\n+{\n+  *dst =  ~src;\n+}\n+"}, {"sha": "a819c3f16afa52e213aeae402d609c2b206da048", "filename": "gcc/testsuite/gcc.target/powerpc/pr92398.p9+.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9%2B.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9%2B.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9%2B.c?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { lp64 && p9+ } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* { dg-final { scan-assembler-times {\\mmtvsrdd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstxv\\M} 1 } } */\n+/* { dg-final { scan-assembler-not {\\mld\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mnot\\M} } } */\n+\n+/* Source code for the test in pr92398.h */\n+#include \"pr92398.h\""}, {"sha": "065ae73f26770703b66830ec659cd131515a326e", "filename": "gcc/testsuite/gcc.target/powerpc/pr92398.p9-.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9-.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9-.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92398.p9-.c?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { lp64 && {! p9+} } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* { dg-final { scan-assembler-times {\\mnot\\M} 2 { xfail be } } } */\n+/* { dg-final { scan-assembler-times {\\mstd\\M} 2 { xfail { p8 && be } } } } */\n+\n+/* Source code for the test in pr92398.h */\n+#include \"pr92398.h\"\n+"}, {"sha": "5b4cc02f9219ed8cfa329f97732abffca677883c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e549dd44b5ff0547004a640554ebe55f1ce2936b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e549dd44b5ff0547004a640554ebe55f1ce2936b", "patch": "@@ -2585,6 +2585,26 @@ proc check_effective_target_le { } {\n     }]\n }\n \n+# Return 1 if we're generating code for only power8 platforms.\n+\n+proc check_effective_target_p8 {  } {\n+  return [check_no_compiler_messages_nocache p8 assembly {\n+\t#if !(!defined(_ARCH_PWR9) && defined(_ARCH_PWR8))\n+\t#error NO\n+\t#endif\n+  } \"\"]\n+}\n+\n+# Return 1 if we're generating code for power9 and future platforms.\n+\n+proc check_effective_target_p9+ {  } {\n+  return [check_no_compiler_messages_nocache p9+ assembly {\n+\t#if !(defined(_ARCH_PWR9))\n+\t#error NO\n+\t#endif\n+  } \"\"]\n+}\n+\n # Return 1 if we're generating 32-bit code using default options, 0\n # otherwise.\n "}]}