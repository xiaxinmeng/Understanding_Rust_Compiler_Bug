{"sha": "578f023490bab56ea603aa4374ecbf31b38c24b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4ZjAyMzQ5MGJhYjU2ZWE2MDNhYTQzNzRlY2JmMzFiMzhjMjRiNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-12T18:40:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-12T18:40:58Z"}, "message": "re PR c++/50594 (Option -fwhole-program discards replaced new operator for std::string)\n\n2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50594\n\t* decl.c (cxx_init_decl_processing): Add\n\t__attribute__((externally_visible)) to operator new and\n\toperator delete library fn.\n\n2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50594\n\t* libsupc++/new (operator new, operator delete): Decorate with\n\t__attribute__((__externally_visible__)).\n\t* include/bits/c++config: Add _GLIBCXX_THROW.\n\t* libsupc++/del_op.cc: Adjust.\n\t* libsupc++/del_opv.cc: Likewise.\n\t* libsupc++/del_opnt.cc: Likewise.\n\t* libsupc++/del_opvnt.cc: Likewise.\n\t* libsupc++/new_op.cc: Likewise.\n\t* libsupc++/new_opv.cc: Likewise.\n\t* libsupc++/new_opnt.cc: Likewise.\n\t* libsupc++/new_opvnt.cc: Likewise.\n\t* testsuite/18_support/50594.cc: New.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r179863", "tree": {"sha": "86535a35e8420259fa52ecd17bb9798257bc4968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86535a35e8420259fa52ecd17bb9798257bc4968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/578f023490bab56ea603aa4374ecbf31b38c24b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578f023490bab56ea603aa4374ecbf31b38c24b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/578f023490bab56ea603aa4374ecbf31b38c24b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578f023490bab56ea603aa4374ecbf31b38c24b5/comments", "author": null, "committer": null, "parents": [{"sha": "0a6fa37645370f2bbbee102afd270464259c4124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6fa37645370f2bbbee102afd270464259c4124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6fa37645370f2bbbee102afd270464259c4124"}], "stats": {"total": 185, "additions": 152, "deletions": 33}, "files": [{"sha": "e7c5b49ff7e691d346104c7f92e1d27c11501dcf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,3 +1,10 @@\n+2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50594\n+\t* decl.c (cxx_init_decl_processing): Add\n+\t__attribute__((externally_visible)) to operator new and\n+\toperator delete library fn.\n+\n 2011-10-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* decl.c (duplicate_decls): Delete old interface with two parallel"}, {"sha": "8b5033f32060b2884d5bb67d7872f0b95028ed8c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -3654,7 +3654,7 @@ cxx_init_decl_processing (void)\n   current_lang_name = lang_name_cplusplus;\n \n   {\n-    tree newattrs;\n+    tree newattrs, extvisattr;\n     tree newtype, deltype;\n     tree ptr_ftype_sizetype;\n     tree new_eh_spec;\n@@ -3684,12 +3684,15 @@ cxx_init_decl_processing (void)\n \n     /* Ensure attribs.c is initialized.  */\n     init_attributes ();\n-    newattrs\n-      = build_tree_list (get_identifier (\"alloc_size\"),\n-\t\t\t build_tree_list (NULL_TREE, integer_one_node));\n+    extvisattr = build_tree_list (get_identifier (\"externally_visible\"),\n+\t\t\t\t  NULL_TREE);\n+    newattrs = tree_cons (get_identifier (\"alloc_size\"),\n+\t\t\t  build_tree_list (NULL_TREE, integer_one_node),\n+\t\t\t  extvisattr);\n     newtype = cp_build_type_attribute_variant (ptr_ftype_sizetype, newattrs);\n     newtype = build_exception_variant (newtype, new_eh_spec);\n-    deltype = build_exception_variant (void_ftype_ptr, empty_except_spec);\n+    deltype = cp_build_type_attribute_variant (void_ftype_ptr, extvisattr);\n+    deltype = build_exception_variant (deltype, empty_except_spec);\n     push_cp_library_fn (NEW_EXPR, newtype);\n     push_cp_library_fn (VEC_NEW_EXPR, newtype);\n     global_delete_fndecl = push_cp_library_fn (DELETE_EXPR, deltype);"}, {"sha": "31bf711d7e5bf7b3d34d0a7eb158b091740c2970", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,3 +1,21 @@\n+2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50594\n+\t* libsupc++/new (operator new, operator delete): Decorate with\n+\t__attribute__((__externally_visible__)).\n+\t* include/bits/c++config: Add _GLIBCXX_THROW.\n+\t* libsupc++/del_op.cc: Adjust.\n+\t* libsupc++/del_opv.cc: Likewise.\n+\t* libsupc++/del_opnt.cc: Likewise.\n+\t* libsupc++/del_opvnt.cc: Likewise.\n+\t* libsupc++/new_op.cc: Likewise.\n+\t* libsupc++/new_opv.cc: Likewise.\n+\t* libsupc++/new_opnt.cc: Likewise.\n+\t* libsupc++/new_opvnt.cc: Likewise.\n+\t* testsuite/18_support/50594.cc: New.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2011-10-11  Emil Wojak  <emil@wojak.eu>\n \n \tPR c++/50661"}, {"sha": "f77da5ee1a70211b820d08828824fdac51c16fe5", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -103,9 +103,11 @@\n # ifdef __GXX_EXPERIMENTAL_CXX0X__\n #  define _GLIBCXX_NOEXCEPT noexcept\n #  define _GLIBCXX_USE_NOEXCEPT noexcept\n+#  define _GLIBCXX_THROW(_EXC)\n # else\n #  define _GLIBCXX_NOEXCEPT\n #  define _GLIBCXX_USE_NOEXCEPT throw()\n+#  define _GLIBCXX_THROW(_EXC) throw(_EXC)\n # endif\n #endif\n "}, {"sha": "0d69aa3aa35aaa351d99d987db0a8b591d900608", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2007, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2007, 2009, 2010, 2011\n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -41,7 +42,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete(void* ptr) throw ()\n+operator delete(void* ptr) _GLIBCXX_USE_NOEXCEPT\n {\n   if (ptr)\n     std::free(ptr);"}, {"sha": "1a43ca4e7894983ed4c76ec3d0aabfabb618f75c", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009, 2010, 2011 \n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -29,7 +30,7 @@\n extern \"C\" void free (void *);\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete (void *ptr, const std::nothrow_t&) throw ()\n+operator delete (void *ptr, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n {\n   free (ptr);\n }"}, {"sha": "594f86262d79de9499c9d911bd76499ea0076aa7", "filename": "libstdc++-v3/libsupc++/del_opv.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009, 2010, 2011 \n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -27,7 +28,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr) throw ()\n+operator delete[] (void *ptr) _GLIBCXX_USE_NOEXCEPT\n {\n   ::operator delete (ptr);\n }"}, {"sha": "e27eb5826e37592cbbcebd0770bffdd927b69380", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009, 2010, 2011\n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -27,7 +28,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, const std::nothrow_t&) throw ()\n+operator delete[] (void *ptr, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n {\n   ::operator delete (ptr);\n }"}, {"sha": "1c258002e658d07967cf5e9d212d14daef2b6545", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,7 +1,7 @@\n // The -*- C++ -*- dynamic memory management header.\n \n // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-// 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+// 2003, 2004, 2005, 2006, 2007, 2009, 2010, 2011\n // Free Software Foundation\n \n // This file is part of GCC.\n@@ -90,22 +90,32 @@ namespace std\n  *  Placement new and delete signatures (take a memory address argument,\n  *  does nothing) may not be replaced by a user's program.\n */\n-void* operator new(std::size_t) throw (std::bad_alloc);\n-void* operator new[](std::size_t) throw (std::bad_alloc);\n-void operator delete(void*) throw();\n-void operator delete[](void*) throw();\n-void* operator new(std::size_t, const std::nothrow_t&) throw();\n-void* operator new[](std::size_t, const std::nothrow_t&) throw();\n-void operator delete(void*, const std::nothrow_t&) throw();\n-void operator delete[](void*, const std::nothrow_t&) throw();\n+void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n+  __attribute__((__externally_visible__));\n+void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)\n+  __attribute__((__externally_visible__));\n+void operator delete(void*) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n+void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n+void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n+void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n+void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n+void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+  __attribute__((__externally_visible__));\n \n // Default placement versions of operator new.\n-inline void* operator new(std::size_t, void* __p) throw() { return __p; }\n-inline void* operator new[](std::size_t, void* __p) throw() { return __p; }\n+inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n+{ return __p; }\n+inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT\n+{ return __p; }\n \n // Default placement versions of operator delete.\n-inline void  operator delete  (void*, void*) throw() { }\n-inline void  operator delete[](void*, void*) throw() { }\n+inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }\n+inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }\n //@}\n } // extern \"C++\"\n "}, {"sha": "bb0199e969e3c50ae7aea9d79fcb72dfcb6d5827", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -42,7 +42,7 @@ extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n _GLIBCXX_WEAK_DEFINITION void *\n-operator new (std::size_t sz) throw (std::bad_alloc)\n+operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n {\n   void *p;\n "}, {"sha": "71600a63c3d1fd2c02b45496e7830cc3698c425c", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -34,7 +34,7 @@ extern \"C\" void *malloc (std::size_t);\n extern new_handler __new_handler;\n \n _GLIBCXX_WEAK_DEFINITION void *\n-operator new (std::size_t sz, const std::nothrow_t&) throw()\n+operator new (std::size_t sz, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n {\n   void *p;\n "}, {"sha": "4080bd25b4f1bf0e14c6862a9ffc855c9a3719d3", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009, 2010, 2011\n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -27,7 +28,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void*\n-operator new[] (std::size_t sz) throw (std::bad_alloc)\n+operator new[] (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n {\n   return ::operator new(sz);\n }"}, {"sha": "0609e687ab7fe1870d8f0fa907884948d7ab5d53", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -1,6 +1,7 @@\n // Boilerplate support routines for -*- C++ -*- dynamic memory management.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009 Free Software Foundation\n+// Copyright (C) 1997, 1998, 1999, 2000, 2004, 2009, 2010, 2011\n+// Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -27,7 +28,8 @@\n #include \"new\"\n  \n _GLIBCXX_WEAK_DEFINITION void*\n-operator new[] (std::size_t sz, const std::nothrow_t& nothrow) throw()\n+operator new[] (std::size_t sz, const std::nothrow_t& nothrow)\n+  _GLIBCXX_USE_NOEXCEPT\n {\n   return ::operator new(sz, nothrow);\n }"}, {"sha": "047f4a732bf2bcebd6658a0086067dac6289a2b3", "filename": "libstdc++-v3/testsuite/18_support/50594.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-fwhole-program\" }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <new>\n+#include <string>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+bool user_new_called;\n+bool user_delete_called;\n+\n+void* operator new(std::size_t n)\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+  throw(std::bad_alloc)\n+#endif\n+{\n+  user_new_called = true;\n+\n+  void* p = std::malloc(n);\n+\n+  if (!p)\n+    throw std::bad_alloc();\n+\n+  return p;\n+}\n+\n+void operator delete(void* p)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  noexcept\n+#else\n+  throw()\n+#endif\n+{\n+  user_delete_called = true;\n+\n+  std::free(p);\n+}\n+\n+// libstdc++/50594\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  {\n+    std::string s = \"Hello World.\";\n+  }\n+\n+  VERIFY( user_new_called );\n+  VERIFY( user_delete_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4e2d071b8336d1b4cd4a6804c26ad3df1d1c70c7", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/578f023490bab56ea603aa4374ecbf31b38c24b5/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=578f023490bab56ea603aa4374ecbf31b38c24b5", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 256 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 258 }"}]}