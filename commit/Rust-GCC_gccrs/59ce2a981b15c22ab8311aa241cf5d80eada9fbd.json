{"sha": "59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTljZTJhOTgxYjE1YzIyYWI4MzExYWEyNDFjZjVkODBlYWRhOWZiZA==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-16T08:26:56Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:34:59Z"}, "message": "Renamed `combine` to `unify`", "tree": {"sha": "2c24c7a1f7fa56ddf3d756b3cee0e9f350e92159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c24c7a1f7fa56ddf3d756b3cee0e9f350e92159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a2f3d7eaa60516a40037dadb6761e69b7863f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a2f3d7eaa60516a40037dadb6761e69b7863f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a2f3d7eaa60516a40037dadb6761e69b7863f7"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "b85da5a3f8f8d43e11c783aa3f756f8a9b1a4aff", "filename": "gcc/rust/typecheck/rust-hir-method-resolve.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-method-resolve.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -66,14 +66,14 @@ class MethodResolution : public TypeCheckBase\n \n     // FIXME this can be simplified with\n     // https://github.com/Rust-GCC/gccrs/issues/187\n-    auto combined = receiver->combine (self_lookup);\n-    if (combined == nullptr)\n+    auto unified_ty = receiver->unify (self_lookup);\n+    if (unified_ty == nullptr)\n       {\n \t// incompatible self argument then this is not a valid method for this\n \t// receiver\n \treturn;\n       }\n-    delete combined;\n+    delete unified_ty;\n \n     probed.push_back (&method);\n   }"}, {"sha": "07d0d4c43f88842c2f4e874e81fb0c964234cd0b", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -155,7 +155,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = fn_return_tyty->combine (expr_ty);\n+    infered = fn_return_tyty->unify (expr_ty);\n     fn_return_tyty->append_reference (expr_ty->get_ref ());\n     for (auto &ref : infered->get_combined_refs ())\n       fn_return_tyty->append_reference (ref);\n@@ -245,7 +245,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n-    auto result = lhs->combine (rhs);\n+    auto result = lhs->unify (rhs);\n     if (result->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (expr.get_locus (),\n@@ -469,7 +469,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = lhs->combine (rhs);\n+    infered = lhs->unify (rhs);\n     infered->append_reference (lhs->get_ref ());\n     infered->append_reference (rhs->get_ref ());\n   }\n@@ -479,7 +479,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n-    auto result = lhs->combine (rhs);\n+    auto result = lhs->unify (rhs);\n     if (result == nullptr || result->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n@@ -496,16 +496,16 @@ class TypeCheckExpr : public TypeCheckBase\n \n     // we expect the lhs and rhs must be bools at this point\n     TyTy::BoolType elhs (expr.get_mappings ().get_hirid ());\n-    lhs = elhs.combine (lhs);\n+    lhs = elhs.unify (lhs);\n     if (lhs == nullptr || lhs->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n     TyTy::BoolType rlhs (expr.get_mappings ().get_hirid ());\n-    rhs = elhs.combine (rhs);\n+    rhs = elhs.unify (rhs);\n     if (lhs == nullptr || lhs->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n-    infered = lhs->combine (rhs);\n+    infered = lhs->unify (rhs);\n     infered->append_reference (lhs->get_ref ());\n     infered->append_reference (rhs->get_ref ());\n   }\n@@ -575,7 +575,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto else_blk_resolved\n       = TypeCheckExpr::Resolve (expr.get_else_block (), inside_loop);\n \n-    infered = if_blk_resolved->combine (else_blk_resolved);\n+    infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n@@ -585,7 +585,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto else_blk\n       = TypeCheckExpr::Resolve (expr.get_conseq_if_expr (), inside_loop);\n \n-    infered = if_blk->combine (else_blk);\n+    infered = if_blk->unify (else_blk);\n   }\n \n   void visit (HIR::BlockExpr &expr);\n@@ -601,7 +601,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    auto resolved_index_expr = size_ty->combine (\n+    auto resolved_index_expr = size_ty->unify (\n       TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n     if (resolved_index_expr == nullptr)\n       {\n@@ -656,7 +656,7 @@ class TypeCheckExpr : public TypeCheckBase\n     infered_array_elems = types[0];\n     for (size_t i = 1; i < types.size (); i++)\n       {\n-\tinfered_array_elems = infered_array_elems->combine (types.at (i));\n+\tinfered_array_elems = infered_array_elems->unify (types.at (i));\n       }\n \n     for (auto &elem : types)\n@@ -822,8 +822,8 @@ class TypeCheckExpr : public TypeCheckBase\n \t    return;\n \t  }\n \n-\tTyTy::BaseType *combined = loop_context->combine (break_expr_tyty);\n-\tcontext->swap_head_loop_context (combined);\n+\tTyTy::BaseType *unified_ty = loop_context->unify (break_expr_tyty);\n+\tcontext->swap_head_loop_context (unified_ty);\n       }\n \n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());"}, {"sha": "b24a280cbf9c967e5d9d652a6a75224609adc646", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -43,7 +43,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     TyTy::BaseType *expr_type\n       = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n-    context->insert_type (constant.get_mappings (), type->combine (expr_type));\n+    context->insert_type (constant.get_mappings (), type->unify (expr_type));\n   }\n \n   void visit (HIR::Function &function)\n@@ -172,7 +172,7 @@ class TypeCheckImplItem : public TypeCheckBase\n     context->push_return_type (expected_ret_tyty);\n \n     auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n-    auto ret_resolved = expected_ret_tyty->combine (result);\n+    auto ret_resolved = expected_ret_tyty->unify (result);\n     if (ret_resolved == nullptr)\n       return;\n \n@@ -205,7 +205,7 @@ class TypeCheckImplItem : public TypeCheckBase\n \n     auto result\n       = TypeCheckExpr::Resolve (method.get_function_body ().get (), false);\n-    auto ret_resolved = expected_ret_tyty->combine (result);\n+    auto ret_resolved = expected_ret_tyty->unify (result);\n     if (ret_resolved == nullptr)\n       return;\n "}, {"sha": "c66be5706bf303a8b00cda94d0c9305563481938", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -76,7 +76,7 @@ class TypeCheckItem : public TypeCheckBase\n     context->push_return_type (expected_ret_tyty);\n \n     auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n-    auto ret_resolved = expected_ret_tyty->combine (result);\n+    auto ret_resolved = expected_ret_tyty->unify (result);\n     if (ret_resolved == nullptr)\n       return;\n "}, {"sha": "d443e87e065503a5d57da50f9d15051246da02f0", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -72,15 +72,15 @@ class TypeCheckStmt : public TypeCheckBase\n     // let x:i32 = 123;\n     if (specified_ty != nullptr && init_expr_ty != nullptr)\n       {\n-\tauto combined = specified_ty->combine (init_expr_ty);\n-\tif (combined->get_kind () == TyTy::TypeKind::ERROR)\n+\tauto unified_ty = specified_ty->unify (init_expr_ty);\n+\tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_fatal_error (stmt.get_locus (),\n \t\t\t      \"failure in setting up let stmt type\");\n \t    return;\n \t  }\n \n-\tcontext->insert_type (stmt.get_mappings (), combined);\n+\tcontext->insert_type (stmt.get_mappings (), unified_ty);\n       }\n     else\n       {"}, {"sha": "838d2dcfbbac3310006b24b013fb15eb7d810340", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -88,7 +88,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     TyTy::BaseType *type = TypeCheckType::Resolve (var.get_type ());\n     TyTy::BaseType *expr_type = TypeCheckExpr::Resolve (var.get_expr (), false);\n \n-    context->insert_type (var.get_mappings (), type->combine (expr_type));\n+    context->insert_type (var.get_mappings (), type->unify (expr_type));\n   }\n \n   void visit (HIR::ConstantItem &constant)\n@@ -97,7 +97,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     TyTy::BaseType *expr_type\n       = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n-    context->insert_type (constant.get_mappings (), type->combine (expr_type));\n+    context->insert_type (constant.get_mappings (), type->unify (expr_type));\n   }\n \n   void visit (HIR::Function &function)"}, {"sha": "a43dcf63f834503ce7a175dab286087e337b1910", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -73,7 +73,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n \t  bool ok = context->lookup_builtin (\"i32\", &default_integer);\n \t  rust_assert (ok);\n \n-\t  auto result = ty->combine (default_integer);\n+\t  auto result = ty->unify (default_integer);\n \t  result->set_ref (id);\n \t  context->insert_type (\n \t    Analysis::NodeMapping (mappings->get_current_crate (), 0, id,\n@@ -87,7 +87,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n \t  bool ok = context->lookup_builtin (\"f32\", &default_float);\n \t  rust_assert (ok);\n \n-\t  auto result = ty->combine (default_float);\n+\t  auto result = ty->unify (default_float);\n \t  result->set_ref (id);\n \t  context->insert_type (\n \t    Analysis::NodeMapping (mappings->get_current_crate (), 0, id,\n@@ -164,7 +164,7 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n       TyTy::BaseType *base_resolved\n \t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get (),\n \t\t\t\t  false);\n-      resolved = struct_path_resolved->combine (base_resolved);\n+      resolved = struct_path_resolved->unify (base_resolved);\n       if (resolved == nullptr)\n \t{\n \t  rust_fatal_error (\n@@ -338,7 +338,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n       return;\n     }\n \n-  resolved_field = field_type->get_field_type ()->combine (value);\n+  resolved_field = field_type->get_field_type ()->unify (value);\n   if (resolved_field != nullptr)\n     {\n       fields_assigned.insert (field.field_name);\n@@ -367,7 +367,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n       return;\n     }\n \n-  resolved_field = field_type->get_field_type ()->combine (value);\n+  resolved_field = field_type->get_field_type ()->unify (value);\n   if (resolved_field != nullptr)\n     {\n       fields_assigned.insert (field_name);\n@@ -400,7 +400,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n \t\t\t    field.get_locus ());\n   TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr, false);\n \n-  resolved_field = field_type->get_field_type ()->combine (value);\n+  resolved_field = field_type->get_field_type ()->unify (value);\n   if (resolved_field != nullptr)\n     {\n       fields_assigned.insert (field.field_name);"}, {"sha": "55933718ba267617dcd164bf8306bbd1a2ebd305", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -33,7 +33,7 @@ class BaseRules : public TyVisitor\n public:\n   virtual ~BaseRules () {}\n \n-  BaseType *combine (BaseType *other)\n+  BaseType *unify (BaseType *other)\n   {\n     other->accept_vis (*this);\n     if (resolved != nullptr)\n@@ -423,7 +423,7 @@ class StructFieldTypeRules : public BaseRules\n \n   void visit (StructFieldType &type)\n   {\n-    BaseType *ty = base->get_field_type ()->combine (type.get_field_type ());\n+    BaseType *ty = base->get_field_type ()->unify (type.get_field_type ());\n     if (ty == nullptr)\n       return;\n \n@@ -480,17 +480,17 @@ class FnRules : public BaseRules\n \tauto a = base->param_at (i).second;\n \tauto b = type.param_at (i).second;\n \n-\tauto combined_param = a->combine (b);\n-\tif (combined_param == nullptr)\n+\tauto unified_param = a->unify (b);\n+\tif (unified_param == nullptr)\n \t  {\n \t    BaseRules::visit (type);\n \t    return;\n \t  }\n       }\n \n-    auto combined_return\n-      = base->get_return_type ()->combine (type.get_return_type ());\n-    if (combined_return == nullptr)\n+    auto unified_return\n+      = base->get_return_type ()->unify (type.get_return_type ());\n+    if (unified_return == nullptr)\n       {\n \tBaseRules::visit (type);\n \treturn;\n@@ -512,7 +512,7 @@ class ArrayRules : public BaseRules\n   void visit (ArrayType &type) override\n   {\n     // check base type\n-    auto base_resolved = base->get_type ()->combine (type.get_type ());\n+    auto base_resolved = base->get_type ()->unify (type.get_type ());\n     if (base_resolved == nullptr)\n       {\n \t// fixme add error message\n@@ -670,14 +670,14 @@ class ADTRules : public BaseRules\n \tTyTy::StructFieldType *base_field = base->get_field (i);\n \tTyTy::StructFieldType *other_field = type.get_field (i);\n \n-\tBaseType *combined = base_field->combine (other_field);\n-\tif (combined == nullptr)\n+\tBaseType *unified_ty = base_field->unify (other_field);\n+\tif (unified_ty == nullptr)\n \t  {\n \t    BaseRules::visit (type);\n \t    return;\n \t  }\n \n-\tfields.push_back ((TyTy::StructFieldType *) combined);\n+\tfields.push_back ((TyTy::StructFieldType *) unified_ty);\n       }\n \n     resolved = new TyTy::ADTType (type.get_ref (), type.get_ty_ref (),\n@@ -707,14 +707,14 @@ class TupleRules : public BaseRules\n \tBaseType *bo = base->get_field (i);\n \tBaseType *fo = type.get_field (i);\n \n-\tBaseType *combined = bo->combine (fo);\n-\tif (combined == nullptr)\n+\tBaseType *unified_ty = bo->unify (fo);\n+\tif (unified_ty == nullptr)\n \t  {\n \t    BaseRules::visit (type);\n \t    return;\n \t  }\n \n-\tfields.push_back (combined->get_ref ());\n+\tfields.push_back (unified_ty->get_ref ());\n       }\n \n     resolved\n@@ -806,7 +806,7 @@ class ReferenceRules : public BaseRules\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    TyTy::BaseType *base_resolved = base_type->combine (other_base_type);\n+    TyTy::BaseType *base_resolved = base_type->unify (other_base_type);\n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t  base_resolved->get_ref ());\n   }"}, {"sha": "a3a2ffec53a6733ea3f3d07513f4da81799eedc6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -38,10 +38,10 @@ UnitType::as_string () const\n }\n \n BaseType *\n-UnitType::combine (BaseType *other)\n+UnitType::unify (BaseType *other)\n {\n   UnitRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -72,10 +72,10 @@ InferType::as_string () const\n }\n \n BaseType *\n-InferType::combine (BaseType *other)\n+InferType::unify (BaseType *other)\n {\n   InferRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -98,7 +98,7 @@ ErrorType::as_string () const\n }\n \n BaseType *\n-ErrorType::combine (BaseType *other)\n+ErrorType::unify (BaseType *other)\n {\n   // FIXME\n   // rust_error_at ();\n@@ -124,10 +124,10 @@ StructFieldType::as_string () const\n }\n \n BaseType *\n-StructFieldType::combine (BaseType *other)\n+StructFieldType::unify (BaseType *other)\n {\n   StructFieldTypeRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -159,10 +159,10 @@ ADTType::as_string () const\n }\n \n BaseType *\n-ADTType::combine (BaseType *other)\n+ADTType::unify (BaseType *other)\n {\n   ADTRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -205,10 +205,10 @@ TupleType::get_field (size_t index) const\n }\n \n BaseType *\n-TupleType::combine (BaseType *other)\n+TupleType::unify (BaseType *other)\n {\n   TupleRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -241,10 +241,10 @@ FnType::as_string () const\n }\n \n BaseType *\n-FnType::combine (BaseType *other)\n+FnType::unify (BaseType *other)\n {\n   FnRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -273,10 +273,10 @@ ArrayType::as_string () const\n }\n \n BaseType *\n-ArrayType::combine (BaseType *other)\n+ArrayType::unify (BaseType *other)\n {\n   ArrayRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -309,10 +309,10 @@ BoolType::as_string () const\n }\n \n BaseType *\n-BoolType::combine (BaseType *other)\n+BoolType::unify (BaseType *other)\n {\n   BoolRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -348,10 +348,10 @@ IntType::as_string () const\n }\n \n BaseType *\n-IntType::combine (BaseType *other)\n+IntType::unify (BaseType *other)\n {\n   IntRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -388,10 +388,10 @@ UintType::as_string () const\n }\n \n BaseType *\n-UintType::combine (BaseType *other)\n+UintType::unify (BaseType *other)\n {\n   UintRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -422,10 +422,10 @@ FloatType::as_string () const\n }\n \n BaseType *\n-FloatType::combine (BaseType *other)\n+FloatType::unify (BaseType *other)\n {\n   FloatRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -448,10 +448,10 @@ USizeType::as_string () const\n }\n \n BaseType *\n-USizeType::combine (BaseType *other)\n+USizeType::unify (BaseType *other)\n {\n   USizeRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -473,10 +473,10 @@ ISizeType::as_string () const\n }\n \n BaseType *\n-ISizeType::combine (BaseType *other)\n+ISizeType::unify (BaseType *other)\n {\n   ISizeRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -498,10 +498,10 @@ CharType::as_string () const\n }\n \n BaseType *\n-CharType::combine (BaseType *other)\n+CharType::unify (BaseType *other)\n {\n   CharRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n BaseType *\n@@ -523,10 +523,10 @@ ReferenceType::as_string () const\n }\n \n BaseType *\n-ReferenceType::combine (BaseType *other)\n+ReferenceType::unify (BaseType *other)\n {\n   ReferenceRules r (this);\n-  return r.combine (other);\n+  return r.unify (other);\n }\n \n const BaseType *\n@@ -581,7 +581,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n \treturn false;\n       }\n \n-    auto res = field_tyty->combine (arg);\n+    auto res = field_tyty->unify (arg);\n     if (res == nullptr)\n       return false;\n \n@@ -623,7 +623,7 @@ TypeCheckCallExpr::visit (FnType &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam.second->combine (argument_expr_tyty);\n+    auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n     if (resolved_argument_type == nullptr)\n       {\n \trust_error_at (param->get_locus_slow (),\n@@ -674,7 +674,7 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam.second->combine (argument_expr_tyty);\n+    auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n     if (resolved_argument_type == nullptr)\n       {\n \trust_error_at (param->get_locus_slow (),"}, {"sha": "df39d046672fea72e0a6cf4d4733212359d82982", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ce2a981b15c22ab8311aa241cf5d80eada9fbd/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=59ce2a981b15c22ab8311aa241cf5d80eada9fbd", "patch": "@@ -67,7 +67,7 @@ class BaseType\n \n   virtual std::string as_string () const = 0;\n \n-  virtual BaseType *combine (BaseType *other) = 0;\n+  virtual BaseType *unify (BaseType *other) = 0;\n \n   virtual bool is_unit () const { return kind == TypeKind::UNIT; }\n \n@@ -118,7 +118,7 @@ class InferType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n \n@@ -145,7 +145,7 @@ class ErrorType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -167,7 +167,7 @@ class UnitType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -191,7 +191,7 @@ class StructFieldType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   std::string get_name () const { return name; }\n \n@@ -223,7 +223,7 @@ class TupleType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   size_t num_fields () const { return fields.size (); }\n \n@@ -267,7 +267,7 @@ class ADTType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   size_t num_fields () const { return fields.size (); }\n \n@@ -332,7 +332,7 @@ class FnType : public BaseType\n \n   BaseType *return_type () { return type; }\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   size_t num_params () const { return params.size (); }\n \n@@ -374,7 +374,7 @@ class ArrayType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   size_t get_capacity () const { return capacity; }\n \n@@ -404,7 +404,7 @@ class BoolType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -434,7 +434,7 @@ class IntType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   IntKind get_kind () const { return int_kind; }\n \n@@ -469,7 +469,7 @@ class UintType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   UintKind get_kind () const { return uint_kind; }\n \n@@ -502,7 +502,7 @@ class FloatType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   FloatKind get_kind () const { return float_kind; }\n \n@@ -527,7 +527,7 @@ class USizeType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -547,7 +547,7 @@ class ISizeType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -568,7 +568,7 @@ class CharType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n };\n@@ -594,7 +594,7 @@ class ReferenceType : public BaseType\n \n   std::string as_string () const override;\n \n-  BaseType *combine (BaseType *other) override;\n+  BaseType *unify (BaseType *other) override;\n \n   BaseType *clone () final override;\n "}]}