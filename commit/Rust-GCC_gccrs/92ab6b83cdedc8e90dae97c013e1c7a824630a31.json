{"sha": "92ab6b83cdedc8e90dae97c013e1c7a824630a31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhYjZiODNjZGVkYzhlOTBkYWU5N2MwMTNlMWM3YTgyNDYzMGEzMQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2019-01-28T06:35:41Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2019-01-28T06:35:41Z"}, "message": "libgfortran: Use proper gthr.h API\n\nlibgfortran/\n\n\t* io/async.c (init_adv_cond): Use __GTHREAD_COND_INIT_FUNCTION().\n\nFrom-SVN: r268331", "tree": {"sha": "f40ebcc9e1c46501125c8a6668f06bbd9bbd735e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40ebcc9e1c46501125c8a6668f06bbd9bbd735e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ab6b83cdedc8e90dae97c013e1c7a824630a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ab6b83cdedc8e90dae97c013e1c7a824630a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ab6b83cdedc8e90dae97c013e1c7a824630a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ab6b83cdedc8e90dae97c013e1c7a824630a31/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32ed8fa248e1c0b9cc5836ecca58f25320f9d6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ed8fa248e1c0b9cc5836ecca58f25320f9d6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ed8fa248e1c0b9cc5836ecca58f25320f9d6aa"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "2a604a5959ca17f6669a5a7a42d4bed09b2dc01b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ab6b83cdedc8e90dae97c013e1c7a824630a31/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ab6b83cdedc8e90dae97c013e1c7a824630a31/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=92ab6b83cdedc8e90dae97c013e1c7a824630a31", "patch": "@@ -1,3 +1,7 @@\n+2019-01-28  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* io/async.c (init_adv_cond): Use __GTHREAD_COND_INIT_FUNCTION().\n+\n 2019-01-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/89020"}, {"sha": "e3d1d01122ec99b31320de894d63e37dd36039cc", "filename": "libgfortran/io/async.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ab6b83cdedc8e90dae97c013e1c7a824630a31/libgfortran%2Fio%2Fasync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ab6b83cdedc8e90dae97c013e1c7a824630a31/libgfortran%2Fio%2Fasync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fasync.c?ref=92ab6b83cdedc8e90dae97c013e1c7a824630a31", "patch": "@@ -224,7 +224,7 @@ init_adv_cond (struct adv_cond *ac)\n {\n   ac->pending = 0;\n   __GTHREAD_MUTEX_INIT_FUNCTION (&ac->lock);\n-  __gthread_cond_init_function (&ac->signal);\n+  __GTHREAD_COND_INIT_FUNCTION (&ac->signal);\n }\n \n /* Initialize an asyncronous unit, returning zero on success,"}]}