{"sha": "f070035e54ea019f78aad2db4132b71d1478a797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3MDAzNWU1NGVhMDE5Zjc4YWFkMmRiNDEzMmI3MWQxNDc4YTc5Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-07T12:27:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-12-07T12:27:51Z"}, "message": "update\n\nFrom-SVN: r24151", "tree": {"sha": "920f9c615d284363c3c636566e76447b4a6c2fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920f9c615d284363c3c636566e76447b4a6c2fe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f070035e54ea019f78aad2db4132b71d1478a797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f070035e54ea019f78aad2db4132b71d1478a797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f070035e54ea019f78aad2db4132b71d1478a797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f070035e54ea019f78aad2db4132b71d1478a797/comments", "author": null, "committer": null, "parents": [{"sha": "2642b9bfd55db180d5e689d0fc7198dfc324c488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2642b9bfd55db180d5e689d0fc7198dfc324c488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2642b9bfd55db180d5e689d0fc7198dfc324c488"}], "stats": {"total": 238, "additions": 24, "deletions": 214}, "files": [{"sha": "3dedd0c5bade0ba38e093e3efe2d4611eb315704", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p15561.C", "status": "removed", "additions": 0, "deletions": 194, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2642b9bfd55db180d5e689d0fc7198dfc324c488/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp15561.C?ref=2642b9bfd55db180d5e689d0fc7198dfc324c488", "patch": "@@ -1,194 +0,0 @@\n-//980418 bkoz reduced from kumar's g++/15561\n-// Build don't link:\n-// prms-id: 15561\n-\n-extern int errno;\n-extern int\twrite  (int, const void *, long unsigned int )  ;\n-\n-/* to debug\n-#ifdef BUG\n-*/\n-//this crashes\n-typedef long unsigned int size_t;\t\t\n-//typedef unsigned long size_t;\n-//this is ok\n-//typedef unsigned int size_t;\n-\n-class exception {\n-public:\n-  exception () { }\n-  virtual ~exception () { }\n-  virtual const char* what () const;\n-};\n-\n-class bad_alloc : public exception {\n-public:\n-  virtual const char* what() const throw() { return \"bad_alloc\"; }\n-};\n-\n-struct nothrow_t {};\n-extern const nothrow_t nothrow;\n-\n-typedef void (*new_handler)();\n-new_handler set_new_handler (new_handler);\n-\n-void *operator new (size_t) throw (std::bad_alloc);\n-void *operator new[] (size_t) throw (std::bad_alloc);\n-void operator delete (void *) throw();\n-void operator delete[] (void *) throw();\n-void *operator new (size_t, const nothrow_t&) throw();\n-void *operator new[] (size_t, const nothrow_t&) throw();\n-void operator delete (void *, const nothrow_t&) throw();\n-void operator delete[] (void *, const nothrow_t&) throw();\n-inline void *operator new(size_t, void *place) throw() { return place; }\n-inline void *operator new[](size_t, void *place) throw() { return place; }\n-\n-/* to debug\n-#else\n-#include <new>\n-#endif\n-*/\n-\n-//from kumar's ace file\n-typedef\tunsigned long\tu_long;\n-typedef int ACE_thread_t;\n-typedef int ACE_hthread_t;\n-typedef int ACE_thread_key_t;\n-typedef int ssize_t;\n-typedef int ACE_HANDLE;\n-typedef ACE_HANDLE ACE_SOCKET;\n-\n-struct ACE_OVERLAPPED\n-{\n-  u_long Internal;\n-  u_long InternalHigh;\n-  u_long Offset;\n-  u_long OffsetHigh;\n-  ACE_HANDLE hEvent;\n-};\n-\n-struct strbuf {\n-\tint\tmaxlen;\t\t\t \n-\tint\tlen;\t\t\t \n-\tchar\t*buf;\t\t\t \n-};\n-\n-struct flock {\n-\tshort\tl_type;\t\t \n-\tshort\tl_whence;\t \n-\tlong\tl_start;\t \n-\tlong\tl_len;\t\t \n-\tshort\tl_pid;\t\t \n-\tshort\tl_xxx;\t\t \n-};\n-\n-class   ACE_OS\n-{\n-public:\n-  struct ace_flock_t\n-  {\n-    void dump (void) const;\n-    struct flock lock_;\n-    ACE_HANDLE handle_;\n-  };\n-  static ssize_t write (ACE_HANDLE handle,\n-\t\t\tconst void *buf,\n-\t\t\tsize_t nbyte);\n-  static ssize_t write (ACE_HANDLE handle,\n-\t\t\tconst void *buf,\n-\t\t\tsize_t nbyte,\n-\t\t\tACE_OVERLAPPED *);\n-\n-  static void *memcpy (void *t,\n-\t\t       const void *s,\n-\t\t       size_t len);\n-\n-  static int putmsg (ACE_HANDLE handle,\n-\t\t     const struct strbuf *ctl,\n-\t\t     const struct strbuf *data,\n-\t\t     int flags); \n-\n-  static ACE_thread_t NULL_thread;\n-  static ACE_hthread_t NULL_hthread;\n-  static ACE_thread_key_t NULL_key;\n-  static void mutex_lock_cleanup (void *mutex);\n-private:\n-  ACE_OS (void);\n-};\n-\n-\n- \n-inline  ssize_t \n-ACE_OS::write (ACE_HANDLE handle, const void *buf, size_t nbyte)\n-{\n- do {   \n-\tssize_t  ace_result_ =   -1 ; \n-\tace_result_ = ace_result_; \n-\treturn  ::write (handle, buf, nbyte) ; } while (0) ;\n-}\n-\n-inline  ssize_t \n-ACE_OS::write (ACE_HANDLE handle, const void *buf, size_t nbyte,\n-\t       ACE_OVERLAPPED *overlapped)\n-{\n-  overlapped = overlapped;\n-  return ACE_OS::write (handle, buf, nbyte);\n-}\n-  \n-\n-inline  int \n-ACE_OS::putmsg (ACE_HANDLE handle, const struct strbuf *ctl, \n-\t\tconst struct strbuf *data, int flags) \n-{\n-  {\n-    if (& flags ) \n-      ;\n-  } ;\n-  if (ctl == 0 && data == 0)\n-    {\n-      errno = 22 ;\n-      return 0;\n-    }\n-   \n-  else if (ctl != 0)\n-    return ACE_OS::write (handle, ctl->buf, ctl->len);\n-  else if (data != 0)\n-    return ACE_OS::write (handle, data->buf, data->len);\n-  else\n-    {\n-      char *buf;\n-      do \n-\t{  \n-\t  buf  = new   char [ctl->len + data->len] ; \n-\t  if ( buf  == 0) \n-\t    { \n-\t      errno = 12 ; \n-\t      return   -1 ;\n-\t    } \n-      \t} \n-      while (0) ;\n-      ACE_OS::memcpy (buf, ctl->buf, ctl->len);\n-      ACE_OS::memcpy (buf + ctl->len, data->buf, data->len);\n-      int result = ACE_OS::write (handle, buf, ctl->len + data->len);\n-      delete [] buf;\n-      return result;\n-    }\n-}\n-\n-int main() \n-{\n-  return (1);\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "1e7aea1e10c5da5860861ffb56c556bd6e589108", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/visibility4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility4.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -1,5 +1,4 @@\n // Build don't link: \n-// Special g++ Options: -w\n // GROUPS passed visibility\n template <class T> \n class Feld {\n@@ -8,7 +7,8 @@ public:\n };\n \n class Polynom : private Feld<double> {\n-friend Polynom f(const Polynom&);\n+  Polynom();\n+  friend Polynom f(const Polynom&);\n };\n \n Polynom f(const Polynom& p) { return p; }    "}, {"sha": "33b9450f6be88a4f2d090dabed00e36df7c81ce8", "filename": "gcc/testsuite/g++.old-deja/g++.ext/implicit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fimplicit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fimplicit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fimplicit1.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -1,5 +1,5 @@\n // test for implicit declaration\n-// Special g++ Options: -w\n+// Special g++ Options: -w -fpermissive\n \n int\n main ()"}, {"sha": "07895223350eef244608099587c083f54b945af1", "filename": "gcc/testsuite/g++.old-deja/g++.jason/ref5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fref5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fref5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fref5.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -1,8 +1,8 @@\n // Build don't link:\n-// Special g++ Options: -w\n+\n int i;\n-int &const j = i;\n-int &const f();\n+int &const j = i;\t\t// ERROR - invalid const\n+int &const f();\t\t\t// ERROR - invalid const\n void g ()\n {\n   j = 1;"}, {"sha": "eeda777e116c3e9e781f5d382f793a456e854416", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility11.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility11.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -37,7 +37,8 @@ public:\n \n class D : public B, public C\n {\n-\n+public:\n+  D();\n protected:\n \n     virtual void State(int a)\n@@ -46,3 +47,6 @@ protected:\n         C::State(a);\n     }\n };\n+\n+\n+"}, {"sha": "3bddb3ce1e4ced43992d6221505da303d7021e99", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast1.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -4,11 +4,11 @@\n #include <typeinfo>\n \n struct B {\n-  virtual f() { }\n+  virtual int f() { }\n };\n \n struct D {\n-  virtual f() { }\n+  virtual int f() { }\n };\n \n main() {"}, {"sha": "fcf625e8c69fa6131038a9b3d483a933bd0afefa", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast2.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -6,11 +6,11 @@\n #include <typeinfo>\n \n struct B {\n-  virtual f() { }\n+  virtual int f() { }\n } ob;\n \n struct D : public B {\n-  virtual f() { }\n+  virtual int f() { }\n } od;\n \n main() {"}, {"sha": "627a7da23b5046e6f74b49d3547f831353a1d0a9", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast3.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -3,11 +3,11 @@\n // Ensure that the return type of dynamic_cast is the real type.\n \n struct B {\n-  virtual f() { }\n+  virtual int f() { }\n };\n \n struct D : public B {\n-  virtual f() { }\n+  virtual int f() { }\n   int i;\n } od;\n "}, {"sha": "fc4a81f1266d621b48085c96617816b75368c4f0", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net47.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet47.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options: -w\n+// Special g++ Options: -w -fpermissive\n \n class foo {};\n class bar : foo {"}, {"sha": "ce6104977f1f6f651456aa7b5bb6f5b129dc9ade", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p784.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp784.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -616,7 +616,7 @@ class ostream : public ios\n     void do_osfx();\n   public:\n     ostream();\n-    ostream(streambuf* sb, ostream* tied=((void *)0) );\n+    ostream(streambuf* sb, ostream* tied=(__null) );\n     ~ostream();\n \n     int opfx() { if (!good()) return 0; if (_tie) _tie->flush(); return 1; }\n@@ -661,7 +661,7 @@ class istream : public ios\n     size_t _gcount;\n   public:\n     istream();\n-    istream(streambuf* sb, ostream*tied=((void *)0) );\n+    istream(streambuf* sb, ostream*tied=(__null) );\n     ~istream();\n     streambuf* istreambuf() const { return _strbuf; }\n     istream& get(char& c);\n@@ -2238,7 +2238,7 @@ class strstreambuf : public streambuf {\n   public:\n     strstreambuf();\n     strstreambuf(int initial);\n-    strstreambuf(char *ptr, int size, char *pstart = ((void *)0) );\n+    strstreambuf(char *ptr, int size, char *pstart = (__null) );\n     ~strstreambuf();\n     int frozen() { return _frozen; }\n     void freeze(int n=1) { _frozen = n != 0; }"}, {"sha": "ae1f5ca2c5bdd2a563642010d1848d4fc51ac973", "filename": "gcc/testsuite/g++.old-deja/g++.pt/lookup6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Flookup6.C?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -10,6 +10,6 @@ template <class T> struct B : public A<T> {\n   // according to [temp.dep.type], `t' and `u' cannot be dependent types,\n   // and so there's no reason to delay lookup to specialization time.\n   void f(t p); // this is ::t [temp.dep]/3\n-  void f(typename A<T>::t p); // gets bogus error - redefinition - XFAIL *-*-*\n-  void g(u p); // ERROR - unknown type name - XFAIL *-*-*\n+  void f(typename A<T>::t p); // gets bogus error - redefinition\n+  void g(u p); // ERROR - unknown type name\n };"}, {"sha": "70b822abc80f9908c360f623d750759c73bc0189", "filename": "gcc/testsuite/g++.old-deja/old-deja.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070035e54ea019f78aad2db4132b71d1478a797/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp?ref=f070035e54ea019f78aad2db4132b71d1478a797", "patch": "@@ -55,7 +55,7 @@ foreach file [lsort [find $srcdir/$subdir *.C]] {\n     # We don't want old-dejagnu.exp to have to know about all the global\n     # variables we use.  For now we tell it about CXXFLAGS and LIBS and\n     # leave LDFLAGS alone.\n-    old-dejagnu $GXX_UNDER_TEST \"$file\" \"\" \"$DEFAULT_CXXFLAGS\" \"-lstdc++\"\n+    old-dejagnu $GXX_UNDER_TEST \"$file\" \"$tfile\" \"\" \"$DEFAULT_CXXFLAGS\" \"-lstdc++\"\n }\n \n # The framework doesn't like to see any error remnants,"}]}