{"sha": "c6d55c5b0eca1f85864f8b668a82248d17060333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkNTVjNWIwZWNhMWY4NTg2NGY4YjY2OGE4MjI0OGQxNzA2MDMzMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-11-21T08:54:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-21T08:54:18Z"}, "message": "mmx.md (mmx_nand<mode>3): Rename to mmx_andnot<mode>3.\n\n\t* config/i386/mmx.md (mmx_nand<mode>3): Rename to mmx_andnot<mode>3.\n\t* config/i386/sse.md (avx_nand<mode>3): Rename to avx_andnot<mode>3.\n\t(<sse>_nand<mode>3): Rename to <sse>_andnot<mode>3.\n\t(sse2_nand<mode>3): Rename to sse2_andnot<mode>3.\n\t(*sse_nand<mode>3): Rename to *sse_andnot<mode>3.\n\t(*avx_nand<mode>3): Rename to *avx_andnot<mode>3.\n\t(*nand<mode>3): Rename to *andnot<mode>3.\n\t(*nandtf3): rename to *andnottf3.\n\t* config/i386/i386.c (bdesc_args) [IX86_BUILTIN_PANDN]:\n\tUse CODE_FOR_mmx_andnotv2si3.\n\t[IX86_BUILTIN_ANDNPS]: Use CODE_FOR_sse_andnotv4sf3.\n\t[IX86_BUILTIN_ANDNPD]: Use CODE_FOR_sse2_andnotv2df3.\n\t[IX86_BUILTIN_PANDN128]: Use CODE_FOR_sse2_andnotv2di3.\n\t[IX86_BUILTIN_ANDNPS256]: Use CODE_FOR_avx_andnotv8sf3.\n\t[IX86_BUILTIN_ANDNPD256]: Use CODE_FOR_avx_andnotv4df3.\n\nFrom-SVN: r142083", "tree": {"sha": "c0969dfd4006670fcfbbd1a6b45262246a6c08c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0969dfd4006670fcfbbd1a6b45262246a6c08c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d55c5b0eca1f85864f8b668a82248d17060333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d55c5b0eca1f85864f8b668a82248d17060333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d55c5b0eca1f85864f8b668a82248d17060333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d55c5b0eca1f85864f8b668a82248d17060333/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "974920dc2411fd05a1ff946e30ad76f396f8fca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974920dc2411fd05a1ff946e30ad76f396f8fca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974920dc2411fd05a1ff946e30ad76f396f8fca9"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "43028ef0a96067dc55450d9230ded789b954808b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d55c5b0eca1f85864f8b668a82248d17060333", "patch": "@@ -1,3 +1,21 @@\n+2008-11-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (mmx_nand<mode>3): Rename to mmx_andnot<mode>3.\n+\t* config/i386/sse.md (avx_nand<mode>3): Rename to avx_andnot<mode>3.\n+\t(<sse>_nand<mode>3): Rename to <sse>_andnot<mode>3.\n+\t(sse2_nand<mode>3): Rename to sse2_andnot<mode>3.\n+\t(*sse_nand<mode>3): Rename to *sse_andnot<mode>3.\n+\t(*avx_nand<mode>3): Rename to *avx_andnot<mode>3.\n+\t(*nand<mode>3): Rename to *andnot<mode>3.\n+\t(*nandtf3): rename to *andnottf3.\n+\t* config/i386/i386.c (bdesc_args) [IX86_BUILTIN_PANDN]:\n+\tUse CODE_FOR_mmx_andnotv2si3.\n+\t[IX86_BUILTIN_ANDNPS]: Use CODE_FOR_sse_andnotv4sf3.\n+\t[IX86_BUILTIN_ANDNPD]: Use CODE_FOR_sse2_andnotv2df3.\n+\t[IX86_BUILTIN_PANDN128]: Use CODE_FOR_sse2_andnotv2di3.\n+\t[IX86_BUILTIN_ANDNPS256]: Use CODE_FOR_avx_andnotv8sf3.\n+\t[IX86_BUILTIN_ANDNPD256]: Use CODE_FOR_avx_andnotv4df3.\n+\n 2008-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/37908"}, {"sha": "e6f00d7c8e7f804972d22ea64fab71270447aeb2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c6d55c5b0eca1f85864f8b668a82248d17060333", "patch": "@@ -20319,7 +20319,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI },\n \n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_nandv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_andnotv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n \n@@ -20446,7 +20446,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsmaxv4sf3, \"__builtin_ia32_maxss\", IX86_BUILTIN_MAXSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n \n   { OPTION_MASK_ISA_SSE, CODE_FOR_andv4sf3, \"__builtin_ia32_andps\", IX86_BUILTIN_ANDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_nandv4sf3,  \"__builtin_ia32_andnps\", IX86_BUILTIN_ANDNPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_andnotv4sf3,  \"__builtin_ia32_andnps\", IX86_BUILTIN_ANDNPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_iorv4sf3, \"__builtin_ia32_orps\", IX86_BUILTIN_ORPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_xorv4sf3,  \"__builtin_ia32_xorps\", IX86_BUILTIN_XORPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n \n@@ -20543,7 +20543,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsmaxv2df3, \"__builtin_ia32_maxsd\", IX86_BUILTIN_MAXSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2df3, \"__builtin_ia32_andpd\", IX86_BUILTIN_ANDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2df3,  \"__builtin_ia32_andnpd\", IX86_BUILTIN_ANDNPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_andnotv2df3,  \"__builtin_ia32_andnpd\", IX86_BUILTIN_ANDNPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2df3, \"__builtin_ia32_orpd\", IX86_BUILTIN_ORPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2df3,  \"__builtin_ia32_xorpd\", IX86_BUILTIN_XORPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n \n@@ -20575,7 +20575,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_smulv8hi3_highpart, \"__builtin_ia32_pmulhw128\", IX86_BUILTIN_PMULHW128, UNKNOWN,(int) V8HI_FTYPE_V8HI_V8HI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2di3, \"__builtin_ia32_pand128\", IX86_BUILTIN_PAND128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2di3, \"__builtin_ia32_pandn128\", IX86_BUILTIN_PANDN128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_andnotv2di3, \"__builtin_ia32_pandn128\", IX86_BUILTIN_PANDN128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2di3, \"__builtin_ia32_por128\", IX86_BUILTIN_POR128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2di3, \"__builtin_ia32_pxor128\", IX86_BUILTIN_PXOR128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n \n@@ -20785,8 +20785,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_addsubv8sf3, \"__builtin_ia32_addsubps256\", IX86_BUILTIN_ADDSUBPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_andv4df3, \"__builtin_ia32_andpd256\", IX86_BUILTIN_ANDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_andv8sf3, \"__builtin_ia32_andps256\", IX86_BUILTIN_ANDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_nandv4df3, \"__builtin_ia32_andnpd256\", IX86_BUILTIN_ANDNPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_nandv8sf3, \"__builtin_ia32_andnps256\", IX86_BUILTIN_ANDNPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_andnotv4df3, \"__builtin_ia32_andnpd256\", IX86_BUILTIN_ANDNPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_andnotv8sf3, \"__builtin_ia32_andnps256\", IX86_BUILTIN_ANDNPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_divv4df3, \"__builtin_ia32_divpd256\", IX86_BUILTIN_DIVPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_divv8sf3, \"__builtin_ia32_divps256\", IX86_BUILTIN_DIVPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_haddv4df3, \"__builtin_ia32_haddpd256\", IX86_BUILTIN_HADDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },"}, {"sha": "870fc8855e7fd24ca100e84a06d712ceb319f430", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=c6d55c5b0eca1f85864f8b668a82248d17060333", "patch": "@@ -1027,7 +1027,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"mmx_nand<mode>3\"\n+(define_insn \"mmx_andnot<mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n \t(and:MMXMODEI\n \t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\" \"0\"))"}, {"sha": "48c9f6d0c1d915046bf4f123a9765bbb7cee70a9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d55c5b0eca1f85864f8b668a82248d17060333/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c6d55c5b0eca1f85864f8b668a82248d17060333", "patch": "@@ -1482,7 +1482,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"avx_nand<mode>3\"\n+(define_insn \"avx_andnot<mode>3\"\n   [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n \t(and:AVXMODEF2P\n \t  (not:AVXMODEF2P\n@@ -1494,7 +1494,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n-(define_insn \"<sse>_nand<mode>3\"\n+(define_insn \"<sse>_andnot<mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n \t(and:SSEMODEF2P\n \t  (not:SSEMODEF2P\n@@ -1549,7 +1549,7 @@\n ;; allocation lossage.  These patterns do not allow memory operands\n ;; because the native instructions read the full 128-bits.\n \n-(define_insn \"*avx_nand<mode>3\"\n+(define_insn \"*avx_andnot<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n \t(and:MODEF\n \t  (not:MODEF\n@@ -1561,7 +1561,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<ssevecmode>\")])\n \n-(define_insn \"*nand<mode>3\"\n+(define_insn \"*andnot<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n \t(and:MODEF\n \t  (not:MODEF\n@@ -5866,7 +5866,7 @@\n   operands[2] = force_reg (<MODE>mode, gen_rtx_CONST_VECTOR (<MODE>mode, v));\n })\n \n-(define_insn \"*avx_nand<mode>3\"\n+(define_insn \"*avx_andnot<mode>3\"\n   [(set (match_operand:AVX256MODEI 0 \"register_operand\" \"=x\")\n \t(and:AVX256MODEI\n \t  (not:AVX256MODEI (match_operand:AVX256MODEI 1 \"register_operand\" \"x\"))\n@@ -5877,7 +5877,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecpsmode>\")])\n \n-(define_insn \"*sse_nand<mode>3\"\n+(define_insn \"*sse_andnot<mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n \t(and:SSEMODEI\n \t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"0\"))\n@@ -5887,7 +5887,7 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"*avx_nand<mode>3\"\n+(define_insn \"*avx_andnot<mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n \t(and:SSEMODEI\n \t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"x\"))\n@@ -5898,7 +5898,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_nand<mode>3\"\n+(define_insn \"sse2_andnot<mode>3\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n \t(and:SSEMODEI\n \t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"0\"))\n@@ -5909,7 +5909,7 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*nandtf3\"\n+(define_insn \"*andnottf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n \t(and:TF\n \t  (not:TF (match_operand:TF 1 \"register_operand\" \"0\"))"}]}