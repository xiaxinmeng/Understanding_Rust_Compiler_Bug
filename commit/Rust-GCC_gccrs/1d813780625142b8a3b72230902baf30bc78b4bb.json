{"sha": "1d813780625142b8a3b72230902baf30bc78b4bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4MTM3ODA2MjUxNDJiOGEzYjcyMjMwOTAyYmFmMzBiYzc4YjRiYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-12T12:34:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-12T12:34:36Z"}, "message": "Minor whitespace changed\n\nFrom-SVN: r33102", "tree": {"sha": "916c4d7c8b15c8865e6763dfaa0bc38875da3ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/916c4d7c8b15c8865e6763dfaa0bc38875da3ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d813780625142b8a3b72230902baf30bc78b4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d813780625142b8a3b72230902baf30bc78b4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d813780625142b8a3b72230902baf30bc78b4bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d813780625142b8a3b72230902baf30bc78b4bb/comments", "author": null, "committer": null, "parents": [{"sha": "cc2a3e631d06ffded098888acfd8c8322e47e81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2a3e631d06ffded098888acfd8c8322e47e81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2a3e631d06ffded098888acfd8c8322e47e81d"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "9485e8a037eee9433de3a107518f19d67c2d75a5", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d813780625142b8a3b72230902baf30bc78b4bb/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d813780625142b8a3b72230902baf30bc78b4bb/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=1d813780625142b8a3b72230902baf30bc78b4bb", "patch": "@@ -2750,6 +2750,7 @@ elimination_effects (x, mem_mode)\n /* Descend through rtx X and verify that no references to eliminable registers\n    remain.  If any do remain, mark the involved register as not\n    eliminable.  */\n+\n static void\n check_eliminable_occurrences (x)\n      rtx x;\n@@ -3227,6 +3228,7 @@ verify_initial_elim_offsets ()\n }\n \n /* Reset all offsets on eliminable registers to their initial values.  */\n+\n static void\n set_initial_elim_offsets ()\n {\n@@ -3266,6 +3268,7 @@ set_initial_label_offsets ()\n \n /* Set all elimination offsets to the known values for the code label given\n    by INSN.  */\n+\n static void\n set_offsets_for_label (insn)\n      rtx insn;\n@@ -3369,6 +3372,7 @@ update_eliminables (pset)\n }\n \n /* Initialize the table of registers to eliminate.  */\n+\n static void\n init_elim_table ()\n {\n@@ -5751,6 +5755,7 @@ choose_reload_regs (chain)\n \n /* Deallocate the reload register for reload R.  This is called from\n    remove_address_replacements.  */\n+\n void\n deallocate_reload_reg (r)\n      int r;\n@@ -6609,9 +6614,7 @@ do_input_reload (chain, rl, j)\n       && (! reload_inherited[j] || (rl->out && ! rl->out_reg))\n       && ! rtx_equal_p (rl->reg_rtx, old)\n       && rl->reg_rtx != 0)\n-    {\n-      emit_input_reload_insns (chain, rld + j, old, j);\n-    }\n+    emit_input_reload_insns (chain, rld + j, old, j);\n \n   /* When inheriting a wider reload, we have a MEM in rl->in,\n      e.g. inheriting a SImode output reload for"}]}