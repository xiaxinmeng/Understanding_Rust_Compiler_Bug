{"sha": "239bca9def334ad1537f26613869bb0f4f0a04be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5YmNhOWRlZjMzNGFkMTUzN2YyNjYxMzg2OWJiMGY0ZjBhMDRiZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2009-08-03T17:55:11Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-08-03T17:55:11Z"}, "message": "re PR middle-end/40867 (FAIL: StackTrace2 output - source compiled test)\n\n2009-07-31  Andrew Haley  <aph@redhat.com>\n\n\tPR java/40867\n\t* decl.c (java_replace_references): Set EXPR_LOCATION on all\n\tgenerated expressions.\n\t(binding_level.loc): new field.\n\t(clear_binding_level): Initialize loc.\n\t(set_input_location): New function.\n\t(pushlevel): Set new binding_level.loc.\n\t(poplevel): Set EXPR_LOCATION on the new BIND_EXPR_BODY.\n\t(start_java_method): Set DECL_SOURCE_LOCATION of this new method.\n\t(java_add_stmt): Set the EXPR_LOCATION on all subtrees of new_stmt.\n\nFrom-SVN: r150376", "tree": {"sha": "2b8fe4e8aa3a69488ece71fb4cb159ce67c494f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8fe4e8aa3a69488ece71fb4cb159ce67c494f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239bca9def334ad1537f26613869bb0f4f0a04be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239bca9def334ad1537f26613869bb0f4f0a04be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239bca9def334ad1537f26613869bb0f4f0a04be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239bca9def334ad1537f26613869bb0f4f0a04be/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "267bd2b15edda2e1c1d9102037f6b6c79fa03b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267bd2b15edda2e1c1d9102037f6b6c79fa03b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267bd2b15edda2e1c1d9102037f6b6c79fa03b3e"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "d78ff7338182c68cec11e5e91085bfd7740fe78b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239bca9def334ad1537f26613869bb0f4f0a04be/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239bca9def334ad1537f26613869bb0f4f0a04be/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=239bca9def334ad1537f26613869bb0f4f0a04be", "patch": "@@ -1,3 +1,16 @@\n+2009-07-31  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/40867\n+\t* decl.c (java_replace_references): Set EXPR_LOCATION on all\n+\tgenerated expressions.\n+\t(binding_level.loc): new field.\n+\t(clear_binding_level): Initialize loc.\n+\t(set_input_location): New function.\n+\t(pushlevel): Set new binding_level.loc.\n+\t(poplevel): Set EXPR_LOCATION on the new BIND_EXPR_BODY.\n+\t(start_java_method): Set DECL_SOURCE_LOCATION of this new method.\n+\t(java_add_stmt): Set the EXPR_LOCATION on all subtrees of new_stmt.\n+\n 2009-07-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/40401"}, {"sha": "4ab67d6cf51aa2c929fd3232e2849a7b2b434d15", "filename": "gcc/java/decl.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239bca9def334ad1537f26613869bb0f4f0a04be/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239bca9def334ad1537f26613869bb0f4f0a04be/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=239bca9def334ad1537f26613869bb0f4f0a04be", "patch": "@@ -349,6 +349,7 @@ java_replace_references (tree *tp, int *walk_subtrees,\n {\n   if (TREE_CODE (*tp) == MODIFY_EXPR)\n     {\n+      source_location loc = EXPR_LOCATION (*tp);\n       tree lhs = TREE_OPERAND (*tp, 0);\n       /* This is specific to the bytecode compiler.  If a variable has\n \t LOCAL_SLOT_P set, replace an assignment to it with an assignment\n@@ -361,9 +362,12 @@ java_replace_references (tree *tp, int *walk_subtrees,\n \t  tree new_lhs = java_replace_reference (lhs, /* want_lvalue */ true);\n \t  tree new_rhs = build1 (NOP_EXPR, TREE_TYPE (new_lhs),\n \t\t\t\t TREE_OPERAND (*tp, 1));\n-\t  *tp = build2 (MODIFY_EXPR, TREE_TYPE (new_lhs),\n-\t\t\tnew_lhs, new_rhs);\n-\t  *tp = build1 (NOP_EXPR, TREE_TYPE (lhs), *tp);\n+\t  tree tem = build2 (MODIFY_EXPR, TREE_TYPE (new_lhs),\n+\t\t\t     new_lhs, new_rhs);\n+\t  *tp = build1 (NOP_EXPR, TREE_TYPE (lhs), tem);\n+\t  SET_EXPR_LOCATION (tem, loc);\n+\t  SET_EXPR_LOCATION (new_rhs, loc);\n+\t  SET_EXPR_LOCATION (*tp, loc);\n \t}\n     }\n   if (TREE_CODE (*tp) == VAR_DECL)\n@@ -418,6 +422,9 @@ struct GTY(())\n \n     /* Binding depth at which this level began.  Used only for debugging.  */\n     unsigned binding_depth;\n+\n+    /* The location at which this level began.  */\n+    source_location loc;\n   };\n \n #define NULL_BINDING_LEVEL (struct binding_level *) NULL\n@@ -458,10 +465,11 @@ static const struct binding_level clear_binding_level\n     NULL, /* stmts */\n     NULL, /* exception_range */\n     0, /* binding_depth */\n+    0, /* loc */\n   };\n \n tree java_global_trees[JTI_MAX];\n-  \n+\n /* Build (and pushdecl) a \"promoted type\" for all standard\n    types shorter than int.  */\n \n@@ -1394,7 +1402,8 @@ pushlevel (int unused ATTRIBUTE_UNUSED)\n \n   *newlevel = clear_binding_level;\n   newlevel->level_chain = current_binding_level;\n-  current_binding_level = newlevel;\n+  newlevel->loc = input_location;\n+  current_binding_level = newlevel;  \n #if defined(DEBUG_JAVA_BINDING_LEVELS)\n   newlevel->binding_depth = binding_depth;\n   indent ();\n@@ -1509,6 +1518,8 @@ poplevel (int keep, int reverse, int functionbody)\n \t  if (BIND_EXPR_BODY (bind) == NULL)\n \t    BIND_EXPR_BODY (bind) = build_java_empty_stmt ();\n \n+\t  SET_EXPR_LOCATION (bind, current_binding_level->loc);\n+\n \t  current_binding_level->stmts = NULL;\n \t}\n       else\n@@ -1876,6 +1887,7 @@ start_java_method (tree fndecl)\n     type_map[i++] = NULL_TREE;\n \n   build_result_decl (fndecl);\n+  DECL_SOURCE_LOCATION (fndecl) = input_location;\n \n   /* Push local variables.  */\n   pushlevel (2);\n@@ -2037,6 +2049,26 @@ add_stmt_to_compound (tree existing, tree type, tree stmt)\n     return stmt;\n }\n \n+/* If this node is an expr, mark its input location.  Called from\n+   walk_tree().  */\n+\n+static tree\n+set_input_location (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t    void *data ATTRIBUTE_UNUSED)\n+{\n+  tree t = *tp;\n+\n+  if (CAN_HAVE_LOCATION_P (t))\n+    {\n+      if (EXPR_HAS_LOCATION(t))\n+\treturn t;  /* Don't walk any further into this expr.   */\n+      else\n+\tSET_EXPR_LOCATION (t, input_location);\n+    }\n+\n+  return NULL_TREE;  /* Continue walking this expr.   */\n+}\n+\n /* Add a statement to the statement_list currently being constructed.\n    If the statement_list is null, we don't create a singleton list.\n    This is necessary because poplevel() assumes that adding a\n@@ -2049,8 +2081,8 @@ java_add_stmt (tree new_stmt)\n   tree_stmt_iterator i;\n \n   if (input_filename)\n-    SET_EXPR_LOCATION (new_stmt, input_location);\n-  \n+    walk_tree (&new_stmt, set_input_location, NULL, NULL);\n+\n   if (stmts == NULL)\n     return current_binding_level->stmts = new_stmt;\n "}]}