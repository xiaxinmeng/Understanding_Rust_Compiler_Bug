{"sha": "96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZjNmIwZTIyYTFmYmIxYTNhODk4M2I1NzY1ZGY1NzMxMWNlYTNiNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-01-17T23:25:12Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-01-17T23:25:12Z"}, "message": "re PR classpath/20198 (java.security.CodeSource.getLocation output is different than expected)\n\n\tPR classpath/20198:\n\t* java/net/URLClassLoader.java (FileURLLoader): Added argument.\n\t(JarURLLoader): Likewise.\n\t(addURLImpl): Canonicalize file URLs.\n\nFrom-SVN: r109844", "tree": {"sha": "201e8542f05dcd33e5a48830e4e6ac2a4ee84ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/201e8542f05dcd33e5a48830e4e6ac2a4ee84ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6/comments", "author": null, "committer": null, "parents": [{"sha": "a37a4460b58efb3e01d94dc944babdbea2780a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a4460b58efb3e01d94dc944babdbea2780a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37a4460b58efb3e01d94dc944babdbea2780a22"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "9b8dff9c05225687f4cff1d33829f402c5a55670", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "patch": "@@ -1,3 +1,10 @@\n+2006-01-17  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR classpath/20198:\n+\t* java/net/URLClassLoader.java (FileURLLoader): Added argument.\n+\t(JarURLLoader): Likewise.\n+\t(addURLImpl): Canonicalize file URLs.\n+\n 2006-01-16  Mark Wielaard  <mark@klomp.org>\n \n \tImported GNU Classpath 0.20"}, {"sha": "ada4b637c32f8d418a6ce82042542b040b4caa35", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6b0e22a1fbb1a3a8983b5765df57311cea3b6/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=96c6b0e22a1fbb1a3a8983b5765df57311cea3b6", "patch": "@@ -1,5 +1,5 @@\n /* URLClassLoader.java --  ClassLoader that loads classes from one or more URLs\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -305,9 +305,10 @@ static final class JarURLLoader extends URLLoader\n \n     Vector classPath;\t// The \"Class-Path\" attribute of this Jar's manifest\n \n-    public JarURLLoader(URLClassLoader classloader, URL baseURL)\n+    public JarURLLoader(URLClassLoader classloader, URL baseURL,\n+\t\t\tURL absoluteUrl)\n     {\n-      super(classloader, baseURL);\n+      super(classloader, baseURL, absoluteUrl);\n \n       // Cache url prefix for all resources in this jar url.\n       String external = baseURL.toExternalForm();\n@@ -601,10 +602,10 @@ static final class FileURLLoader extends URLLoader\n   {\n     File dir; //the file for this file url\n \n-    FileURLLoader(URLClassLoader classloader, URL url)\n+    FileURLLoader(URLClassLoader classloader, URL url, URL absoluteUrl)\n     {\n-      super(classloader, url);\n-      dir = new File(baseURL.getFile());\n+      super(classloader, url, absoluteUrl);\n+      dir = new File(absoluteUrl.getFile());\n     }\n \n     /** get resource with the name \"name\" in the file url */\n@@ -885,13 +886,44 @@ private void addURLImpl(URL newUrl)\n             String file = newUrl.getFile();\n             String protocol = newUrl.getProtocol();\n \n+\t    // If we have a file: URL, we want to make it absolute\n+\t    // here, before we decide whether it is really a jar.\n+\t    URL absoluteURL;\n+\t    if (\"file\".equals (protocol))\n+\t      {\n+\t\tFile dir = new File(file);\n+\t\tURL absUrl;\n+\t\ttry\n+\t\t  {\n+\t\t    absoluteURL = dir.getCanonicalFile().toURL();\n+\t\t  }\n+\t\tcatch (IOException ignore)\n+\t\t  {\n+\t\t    try\n+\t\t      {\n+\t\t\tabsoluteURL = dir.getAbsoluteFile().toURL();\n+\t\t      }\n+\t\t    catch (MalformedURLException _)\n+\t\t      {\n+\t\t\t// This really should not happen.\n+\t\t\tabsoluteURL = newUrl;\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\t// This doesn't hurt, and it simplifies the logic a\n+\t\t// little.\n+\t\tabsoluteURL = newUrl;\n+\t      }\n+\n             // Check that it is not a directory\n \t    if (\"gcjlib\".equals(protocol))\n \t      loader = new SoURLLoader(this, newUrl);\n \t    else if (! (file.endsWith(\"/\") || file.endsWith(File.separator)))\n-              loader = new JarURLLoader(this, newUrl);\n+              loader = new JarURLLoader(this, newUrl, absoluteURL);\n             else if (\"file\".equals(protocol))\n-              loader = new FileURLLoader(this, newUrl);\n+\t      loader = new FileURLLoader(this, newUrl, absoluteURL);\n \t    else if (\"core\".equals(protocol))\n \t      loader = new CoreURLLoader(this, newUrl);\n             else"}]}