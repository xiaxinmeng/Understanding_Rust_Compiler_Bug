{"sha": "ab900bfa4d485263b9744e4a56ba047ac071d272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5MDBiZmE0ZDQ4NTI2M2I5NzQ0ZTRhNTZiYTA0N2FjMDcxZDI3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-11-07T08:01:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-11-07T08:01:54Z"}, "message": "re PR rtl-optimization/23567 (if-conversion causes wrong code)\n\n\tPR rtl-optimization/23567\n\t* ifcvt.c (noce_mem_write_may_trap_or_fault_p): New function.\n\t(noce_process_if_block): Don't do any optimizations except\n\tif (cond) x = x; if !set_b and write into orig_x may trap\n\tor fault.  Remove the MEM_READONLY_P check.\n\n\t* gcc.c-torture/execute/20051104-1.c: New test.\n\nFrom-SVN: r106585", "tree": {"sha": "326efcbb68db7f5227e4470ec802b9873ee47ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326efcbb68db7f5227e4470ec802b9873ee47ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab900bfa4d485263b9744e4a56ba047ac071d272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab900bfa4d485263b9744e4a56ba047ac071d272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab900bfa4d485263b9744e4a56ba047ac071d272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab900bfa4d485263b9744e4a56ba047ac071d272/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73a08f87174affa40571a17dbeba247adc358fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a08f87174affa40571a17dbeba247adc358fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a08f87174affa40571a17dbeba247adc358fa0"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "fb378115a8f1c5506dce0401608318998e55e7ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab900bfa4d485263b9744e4a56ba047ac071d272", "patch": "@@ -1,3 +1,11 @@\n+2005-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/23567\n+\t* ifcvt.c (noce_mem_write_may_trap_or_fault_p): New function.\n+\t(noce_process_if_block): Don't do any optimizations except\n+\tif (cond) x = x; if !set_b and write into orig_x may trap\n+\tor fault.  Remove the MEM_READONLY_P check.\n+\n 2005-11-06  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 24670"}, {"sha": "da32ab45a71c10549c3bc617680da5850c3ab16e", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 63, "deletions": 25, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=ab900bfa4d485263b9744e4a56ba047ac071d272", "patch": "@@ -2025,6 +2025,59 @@ noce_operand_ok (rtx op)\n   return ! may_trap_p (op);\n }\n \n+/* Return true if a write into MEM may trap or fault.  */\n+\n+static bool\n+noce_mem_write_may_trap_or_fault_p (rtx mem)\n+{\n+  rtx addr;\n+\n+  if (MEM_READONLY_P (mem))\n+    return true;\n+\n+  if (may_trap_or_fault_p (mem))\n+    return true;\n+\n+  addr = XEXP (mem, 0);\n+\n+  /* Call target hook to avoid the effects of -fpic etc....  */\n+  addr = targetm.delegitimize_address (addr);\n+\n+  while (addr)\n+    switch (GET_CODE (addr))\n+      {\n+      case CONST:\n+      case PRE_DEC:\n+      case PRE_INC:\n+      case POST_DEC:\n+      case POST_INC:\n+      case POST_MODIFY:\n+\taddr = XEXP (addr, 0);\n+\tbreak;\n+      case LO_SUM:\n+      case PRE_MODIFY:\n+\taddr = XEXP (addr, 1);\n+\tbreak;\n+      case PLUS:\n+\tif (GET_CODE (XEXP (addr, 1)) == CONST_INT)\n+\t  addr = XEXP (addr, 0);\n+\telse\n+\t  return false;\n+\tbreak;\n+      case LABEL_REF:\n+\treturn true;\n+      case SYMBOL_REF:\n+\tif (SYMBOL_REF_DECL (addr)\n+\t    && decl_readonly_section (SYMBOL_REF_DECL (addr), 0))\n+\t  return true;\n+\treturn false;\n+      default:\n+\treturn false;\n+      }\n+\n+  return false;\n+}\n+\n /* Given a simple IF-THEN or IF-THEN-ELSE block, attempt to convert it\n    without using conditional execution.  Return TRUE if we were\n    successful at converting the block.  */\n@@ -2136,14 +2189,6 @@ noce_process_if_block (struct ce_if_block * ce_info)\n   if (side_effects_p (x))\n     return FALSE;\n \n-  /* If x is a read-only memory, then the program is valid only if we\n-     avoid the store into it.  If there are stores on both the THEN and\n-     ELSE arms, then we can go ahead with the conversion; either the \n-     program is broken, or the condition is always false such that the\n-     other memory is selected.  */\n-  if (!set_b && MEM_P (x) && MEM_READONLY_P (x))\n-    return FALSE;\n-\n   b = (set_b ? SET_SRC (set_b) : x);\n \n   /* Only operate on register destinations, and even then avoid extending\n@@ -2211,23 +2256,16 @@ noce_process_if_block (struct ce_if_block * ce_info)\n     }\n \n   /* Disallow the \"if (...) x = a;\" form (with an implicit \"else x = x;\")\n-     for most optimizations if writing to x may trap, i.e. it's a memory\n-     other than a static var or a stack slot.  */\n-  if (! set_b\n-      && MEM_P (orig_x)\n-      && ! MEM_NOTRAP_P (orig_x)\n-      && rtx_addr_can_trap_p (XEXP (orig_x, 0)))\n-    {\n-      if (HAVE_conditional_move)\n-\t{\n-\t  if (noce_try_cmove (&if_info))\n-\t    goto success;\n-\t  if (! HAVE_conditional_execution\n-\t      && noce_try_cmove_arith (&if_info))\n-\t    goto success;\n-\t}\n-      return FALSE;\n-    }\n+     for optimizations if writing to x may trap or fault, i.e. it's a memory\n+     other than a static var or a stack slot, is misaligned on strict\n+     aligned machines or is read-only.\n+     If x is a read-only memory, then the program is valid only if we\n+     avoid the store into it.  If there are stores on both the THEN and\n+     ELSE arms, then we can go ahead with the conversion; either the\n+     program is broken, or the condition is always false such that the\n+     other memory is selected.  */\n+  if (!set_b && MEM_P (orig_x) && noce_mem_write_may_trap_or_fault_p (orig_x))\n+    return FALSE;\n \n   if (noce_try_move (&if_info))\n     goto success;"}, {"sha": "0ab25393c78c881258869db68007a500471dbbf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab900bfa4d485263b9744e4a56ba047ac071d272", "patch": "@@ -1,3 +1,8 @@\n+2005-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/23567\n+\t* gcc.c-torture/execute/20051104-1.c: New test.\n+\n 2005-11-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24534"}, {"sha": "16578778cc61ea064b240681325f578c085b796e", "filename": "gcc/testsuite/gcc.c-torture/execute/20051104-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab900bfa4d485263b9744e4a56ba047ac071d272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051104-1.c?ref=ab900bfa4d485263b9744e4a56ba047ac071d272", "patch": "@@ -0,0 +1,17 @@\n+/* PR rtl-optimization/23567 */\n+\n+struct\n+{\n+  int len;\n+  char *name;\n+} s;\n+\n+int\n+main (void)\n+{\n+  s.len = 0;\n+  s.name = \"\";\n+  if (s.name [s.len] != 0)\n+    s.name [s.len] = 0;\n+  return 0;\n+}"}]}