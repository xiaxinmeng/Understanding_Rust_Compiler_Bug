{"sha": "fa258f6894801aef6785f0327594dc803da63fbd", "node_id": "C_kwDOANBUbNoAKGZhMjU4ZjY4OTQ4MDFhZWY2Nzg1ZjAzMjc1OTRkYzgwM2RhNjNmYmQ", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-06T14:26:21Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-06T14:26:21Z"}, "message": "c: C2x typeof\n\nC2x adds typeof as a standard feature.  In general this follows\nexisting GNU C semantics very closely, but there are various ways in\nwhich the implementation involves more than simply enabling the\nkeyword for C2x:\n\n* As well as typeof, there is a typeof_unqual variant, which removes\n  all qualifiers and _Atomic from the resulting type (whereas typeof\n  preserves qualifiers and _Atomic on qualified or atomic (lvalue or\n  type name) operands).\n\n* The typeof keyword is disabled by -fno-asm, so enabling it for C2x\n  needs to be implemented in a way that preserves the disabling by\n  -fno-asm for older standard versions (which having -fno-asm having\n  no effect on it in C2x mode).  This is done via adding a new D_EXT11\n  mask (which is also where the C++ front-end change comes from, to\n  handle D_EXT11 appropriately there for -fno-asm and\n  -fno-gnu-keywords).\n\n* GNU typeof treats the noreturn property of a function (as specified\n  in standard C with _Noreturn or [[noreturn]]) as being part of the\n  type of a pointer to function, but it is not part of the type in\n  standard terms.  Thus a special case is needed in the typeof\n  implementation, just like in the _Generic implementation, to avoid\n  treating it as a type for standard typeof.  It seems plausible this\n  is being used when copying the type of one object to another using\n  typeof, so the existing semantics are preserved for __typeof__, and\n  for typeof in pre-C2x modes, while typeof for C2x or later has the\n  standard semantics.\n\n* It turns out that, even after Martin Uecker's changes in this area,\n  there were still cases where rvalues could wrongly have a qualified\n  or atomic type in GCC.  This applied to ++ and -- increment and\n  decrement expressions, and also to calls to functions returning an\n  atomic type.  (For the latter, the working draft doesn't actually\n  explicitly exclude the function call expression having an atomic\n  type, but given all the changes that have gone into C17 and C2x to\n  avoid rvalues ever having qualified types, and given that\n  lvalue-to-rvalue conversion removes both qualifiers and _Atomic, it\n  seems unlikely that this (or casts, where GCC already removes\n  _Atomic) is actually intended as a route to allow an\n  _Atomic-qualified rvalue; I've noted this to raise as an NB comment\n  on the CD ballot.)\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.  OK to\ncommit (C+\n\ngcc/\n\t* doc/invoke.texi (-fno-asm): Update description of effects on\n\ttypeof keyword.\n\ngcc/c-family/\n\t* c-common.cc (c_common_reswords): Mark typeof as D_EXT11.  Add\n\ttypeof_unqual.\n\t* c-common.h (enum rid): Add RID_TYPEOF_UNQUAL.\n\t(D_EXT11): New macro.  Values of subsequent macros updated.\n\ngcc/c/\n\t* c-parser.cc (c_parse_init): Add D_EXT11 to mask if flag_no_asm\n\tand not C2x.\n\t(c_keyword_starts_typename, c_token_starts_declspecs)\n\t(c_parser_declspecs, c_parser_objc_selector): Handle\n\tRID_TYPEOF_UNQUAL.\n\t(c_parser_typeof_specifier): Handle RID_TYPEOF_UNQUAL.\n\tDistinguish typeof for C2x from __typeof__ for all standard\n\tversions and typeof before C2x.\n\t* c-typeck.cc (build_function_call_vec): Use unqualified version\n\tof non-void return type.\n\t(build_unary_op): Use unqualified type for increment and\n\tdecrement.\n\ngcc/cp/\n\t* lex.cc (init_reswords): Handle D_EXT11.\n\ngcc/testsuite/\n\t* gcc.dg/c11-typeof-1.c, gcc.dg/c2x-typeof-1.c,\n\tgcc.dg/c2x-typeof-2.c, gcc.dg/c2x-typeof-3.c,\n\tgcc.dg/gnu11-typeof-1.c, gcc.dg/gnu11-typeof-2.c,\n\tgcc.dg/gnu2x-typeof-1.c: New tests.", "tree": {"sha": "c11370ab02d3e2babc54547c0778057ce4a36e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c11370ab02d3e2babc54547c0778057ce4a36e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa258f6894801aef6785f0327594dc803da63fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa258f6894801aef6785f0327594dc803da63fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa258f6894801aef6785f0327594dc803da63fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa258f6894801aef6785f0327594dc803da63fbd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09df0d8b14dda66c5159a1b2cf85b73f26282152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09df0d8b14dda66c5159a1b2cf85b73f26282152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09df0d8b14dda66c5159a1b2cf85b73f26282152"}], "stats": {"total": 429, "additions": 406, "deletions": 23}, "files": [{"sha": "ffe17eaa9d953b5ae0a3e814ad2023099f641e7c", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -494,7 +494,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n   { \"typename\",\t\tRID_TYPENAME,\tD_CXXONLY | D_CXXWARN },\n   { \"typeid\",\t\tRID_TYPEID,\tD_CXXONLY | D_CXXWARN },\n-  { \"typeof\",\t\tRID_TYPEOF,\tD_ASM | D_EXT },\n+  { \"typeof\",\t\tRID_TYPEOF,\tD_EXT11 },\n+  { \"typeof_unqual\",\tRID_TYPEOF_UNQUAL,\tD_CONLY | D_C2X },\n   { \"union\",\t\tRID_UNION,\t0 },\n   { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n   { \"using\",\t\tRID_USING,\tD_CXXONLY | D_CXXWARN },"}, {"sha": "62ab4ba437bc38b95e61e3e3e5291a7855d332de", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -104,7 +104,8 @@ enum rid\n   RID_SIZEOF,\n \n   /* C extensions */\n-  RID_ASM,       RID_TYPEOF,   RID_ALIGNOF,  RID_ATTRIBUTE,  RID_VA_ARG,\n+  RID_ASM,       RID_TYPEOF,   RID_TYPEOF_UNQUAL, RID_ALIGNOF,  RID_ATTRIBUTE,\n+  RID_VA_ARG,\n   RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL,      RID_CHOOSE_EXPR,\n   RID_TYPES_COMPATIBLE_P,      RID_BUILTIN_COMPLEX,\t     RID_BUILTIN_SHUFFLE,\n   RID_BUILTIN_SHUFFLEVECTOR,   RID_BUILTIN_CONVERTVECTOR,   RID_BUILTIN_TGMATH,\n@@ -438,16 +439,17 @@ extern machine_mode c_default_pointer_mode;\n #define D_CXX11         0x0010\t/* In C++, C++11 only.  */\n #define D_EXT\t\t0x0020\t/* GCC extension.  */\n #define D_EXT89\t\t0x0040\t/* GCC extension incorporated in C99.  */\n-#define D_ASM\t\t0x0080\t/* Disabled by -fno-asm.  */\n-#define D_OBJC\t\t0x0100\t/* In Objective C and neither C nor C++.  */\n-#define D_CXX_OBJC\t0x0200\t/* In Objective C, and C++, but not C.  */\n-#define D_CXXWARN\t0x0400\t/* In C warn with -Wcxx-compat.  */\n-#define D_CXX_CONCEPTS  0x0800\t/* In C++, only with concepts.  */\n-#define D_TRANSMEM\t0x1000\t/* C++ transactional memory TS.  */\n-#define D_CXX_CHAR8_T\t0x2000\t/* In C++, only with -fchar8_t.  */\n-#define D_CXX20\t\t0x4000  /* In C++, C++20 only.  */\n-#define D_CXX_COROUTINES 0x8000  /* In C++, only with coroutines.  */\n-#define D_CXX_MODULES\t0x10000  /* In C++, only with modules.  */\n+#define D_EXT11\t\t0x0080\t/* GCC extension incorporated in C2X.  */\n+#define D_ASM\t\t0x0100\t/* Disabled by -fno-asm.  */\n+#define D_OBJC\t\t0x0200\t/* In Objective C and neither C nor C++.  */\n+#define D_CXX_OBJC\t0x0400\t/* In Objective C, and C++, but not C.  */\n+#define D_CXXWARN\t0x0800\t/* In C warn with -Wcxx-compat.  */\n+#define D_CXX_CONCEPTS  0x1000\t/* In C++, only with concepts.  */\n+#define D_TRANSMEM\t0x2000\t/* C++ transactional memory TS.  */\n+#define D_CXX_CHAR8_T\t0x4000\t/* In C++, only with -fchar8_t.  */\n+#define D_CXX20\t\t0x8000  /* In C++, C++20 only.  */\n+#define D_CXX_COROUTINES 0x10000  /* In C++, only with coroutines.  */\n+#define D_CXX_MODULES\t0x20000  /* In C++, only with modules.  */\n \n #define D_CXX_CONCEPTS_FLAGS D_CXXONLY | D_CXX_CONCEPTS\n #define D_CXX_CHAR8_T_FLAGS D_CXXONLY | D_CXX_CHAR8_T"}, {"sha": "89e05870f4709171a750dcc6e9fcddf641af857b", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -127,6 +127,8 @@ c_parse_init (void)\n       mask |= D_ASM | D_EXT;\n       if (!flag_isoc99)\n \tmask |= D_EXT89;\n+      if (!flag_isoc2x)\n+\tmask |= D_EXT11;\n     }\n   if (!c_dialect_objc ())\n     mask |= D_OBJC | D_CXX_OBJC;\n@@ -580,6 +582,7 @@ c_keyword_starts_typename (enum rid keyword)\n     case RID_STRUCT:\n     case RID_UNION:\n     case RID_TYPEOF:\n+    case RID_TYPEOF_UNQUAL:\n     case RID_CONST:\n     case RID_ATOMIC:\n     case RID_VOLATILE:\n@@ -757,6 +760,7 @@ c_token_starts_declspecs (c_token *token)\n \tcase RID_STRUCT:\n \tcase RID_UNION:\n \tcase RID_TYPEOF:\n+\tcase RID_TYPEOF_UNQUAL:\n \tcase RID_CONST:\n \tcase RID_VOLATILE:\n \tcase RID_RESTRICT:\n@@ -3081,6 +3085,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  declspecs_add_type (loc, specs, t);\n \t  break;\n \tcase RID_TYPEOF:\n+\tcase RID_TYPEOF_UNQUAL:\n \t  /* ??? The old parser rejected typeof after other type\n \t     specifiers, but is a syntax error the best way of\n \t     handling this?  */\n@@ -3768,22 +3773,38 @@ c_parser_struct_declaration (c_parser *parser)\n   return decls;\n }\n \n-/* Parse a typeof specifier (a GNU extension).\n+/* Parse a typeof specifier (a GNU extension adopted in C2X).\n \n    typeof-specifier:\n      typeof ( expression )\n      typeof ( type-name )\n+     typeof_unqual ( expression )\n+     typeof_unqual ( type-name )\n */\n \n static struct c_typespec\n c_parser_typeof_specifier (c_parser *parser)\n {\n+  bool is_unqual;\n+  bool is_std;\n   struct c_typespec ret;\n   ret.kind = ctsk_typeof;\n   ret.spec = error_mark_node;\n   ret.expr = NULL_TREE;\n   ret.expr_const_operands = true;\n-  gcc_assert (c_parser_next_token_is_keyword (parser, RID_TYPEOF));\n+  if (c_parser_next_token_is_keyword (parser, RID_TYPEOF))\n+    {\n+      is_unqual = false;\n+      tree spelling = c_parser_peek_token (parser)->value;\n+      is_std = (flag_isoc2x\n+\t\t&& strcmp (IDENTIFIER_POINTER (spelling), \"typeof\") == 0);\n+    }\n+  else\n+    {\n+      gcc_assert (c_parser_next_token_is_keyword (parser, RID_TYPEOF_UNQUAL));\n+      is_unqual = true;\n+      is_std = true;\n+    }\n   c_parser_consume_token (parser);\n   c_inhibit_evaluation_warnings++;\n   in_typeof++;\n@@ -3825,6 +3846,24 @@ c_parser_typeof_specifier (c_parser *parser)\n       pop_maybe_used (was_vm);\n     }\n   parens.skip_until_found_close (parser);\n+  if (ret.spec != error_mark_node)\n+    {\n+      if (is_unqual && TYPE_QUALS (ret.spec) != TYPE_UNQUALIFIED)\n+\tret.spec = TYPE_MAIN_VARIANT (ret.spec);\n+      if (is_std)\n+\t{\n+\t  /* In ISO C terms, _Noreturn is not part of the type of\n+\t     expressions such as &abort, but in GCC it is represented\n+\t     internally as a type qualifier.  */\n+\t  if (TREE_CODE (ret.spec) == FUNCTION_TYPE\n+\t      && TYPE_QUALS (ret.spec) != TYPE_UNQUALIFIED)\n+\t    ret.spec = TYPE_MAIN_VARIANT (ret.spec);\n+\t  else if (FUNCTION_POINTER_TYPE_P (ret.spec)\n+\t\t   && TYPE_QUALS (TREE_TYPE (ret.spec)) != TYPE_UNQUALIFIED)\n+\t    ret.spec\n+\t      = build_pointer_type (TYPE_MAIN_VARIANT (TREE_TYPE (ret.spec)));\n+\t}\n+    }\n   return ret;\n }\n \n@@ -11961,7 +12000,7 @@ c_parser_objc_synchronized_statement (c_parser *parser)\n      identifier\n      one of\n        enum struct union if else while do for switch case default\n-       break continue return goto asm sizeof typeof __alignof\n+       break continue return goto asm sizeof typeof typeof_unqual __alignof\n        unsigned long const short volatile signed restrict _Complex\n        in out inout bycopy byref oneway int char float double void _Bool\n        _Atomic\n@@ -12001,6 +12040,7 @@ c_parser_objc_selector (c_parser *parser)\n     case RID_ASM:\n     case RID_SIZEOF:\n     case RID_TYPEOF:\n+    case RID_TYPEOF_UNQUAL:\n     case RID_ALIGNOF:\n     case RID_UNSIGNED:\n     case RID_LONG:"}, {"sha": "f9190680a3cac4112177b0265e53b3c3a7fc7e36", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -3187,6 +3187,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n \n   /* fntype now gets the type of function pointed to.  */\n   fntype = TREE_TYPE (fntype);\n+  tree return_type = TREE_TYPE (fntype);\n \n   /* Convert the parameters to the types declared in the\n      function prototype, or apply default promotions.  */\n@@ -3203,8 +3204,6 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n       && TREE_CODE (tem = TREE_OPERAND (tem, 0)) == FUNCTION_DECL\n       && !comptypes (fntype, TREE_TYPE (tem)))\n     {\n-      tree return_type = TREE_TYPE (fntype);\n-\n       /* This situation leads to run-time undefined behavior.  We can't,\n \t therefore, simply error unless we can prove that all possible\n \t executions of the program must execute the code.  */\n@@ -3229,22 +3228,25 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   bool warned_p = check_function_arguments (loc, fundecl, fntype,\n \t\t\t\t\t    nargs, argarray, &arg_loc);\n \n+  if (TYPE_QUALS (return_type) != TYPE_UNQUALIFIED\n+      && !VOID_TYPE_P (return_type))\n+    return_type = c_build_qualified_type (return_type, TYPE_UNQUALIFIED);\n   if (name != NULL_TREE\n       && startswith (IDENTIFIER_POINTER (name), \"__builtin_\"))\n     {\n       if (require_constant_value)\n \tresult\n-\t  = fold_build_call_array_initializer_loc (loc, TREE_TYPE (fntype),\n+\t  = fold_build_call_array_initializer_loc (loc, return_type,\n \t\t\t\t\t\t   function, nargs, argarray);\n       else\n-\tresult = fold_build_call_array_loc (loc, TREE_TYPE (fntype),\n+\tresult = fold_build_call_array_loc (loc, return_type,\n \t\t\t\t\t    function, nargs, argarray);\n       if (TREE_CODE (result) == NOP_EXPR\n \t  && TREE_CODE (TREE_OPERAND (result, 0)) == INTEGER_CST)\n \tSTRIP_TYPE_NOPS (result);\n     }\n   else\n-    result = build_call_array_loc (loc, TREE_TYPE (fntype),\n+    result = build_call_array_loc (loc, return_type,\n \t\t\t\t   function, nargs, argarray);\n   /* If -Wnonnull warning has been diagnosed, avoid diagnosing it again\n      later.  */\n@@ -4831,6 +4833,9 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \telse\n \t  val = build2 (code, TREE_TYPE (arg), arg, inc);\n \tTREE_SIDE_EFFECTS (val) = 1;\n+\tif (TYPE_QUALS (TREE_TYPE (val)) != TYPE_UNQUALIFIED)\n+\t  TREE_TYPE (val) = c_build_qualified_type (TREE_TYPE (val),\n+\t\t\t\t\t\t    TYPE_UNQUALIFIED);\n \tret = val;\n \tgoto return_build_unary_op;\n       }"}, {"sha": "22d1ab92add37fde74cf2f08d2732e9abcc47994", "filename": "gcc/cp/lex.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fcp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fcp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.cc?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -241,9 +241,9 @@ init_reswords (void)\n   if (!flag_char8_t)\n     mask |= D_CXX_CHAR8_T;\n   if (flag_no_asm)\n-    mask |= D_ASM | D_EXT;\n+    mask |= D_ASM | D_EXT | D_EXT11;\n   if (flag_no_gnu_keywords)\n-    mask |= D_EXT;\n+    mask |= D_EXT | D_EXT11;\n \n   /* The Objective-C keywords are all context-dependent.  */\n   mask |= D_OBJC;"}, {"sha": "a2b0b9636f06007bb083b40d3d7b9d3d03dcc847", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -2534,7 +2534,10 @@ this switch.  You may want to use the @option{-fno-gnu-keywords} flag\n instead, which disables @code{typeof} but not @code{asm} and\n @code{inline}.  In C99 mode (@option{-std=c99} or @option{-std=gnu99}),\n this switch only affects the @code{asm} and @code{typeof} keywords,\n-since @code{inline} is a standard keyword in ISO C99.\n+since @code{inline} is a standard keyword in ISO C99.  In C2X mode\n+(@option{-std=c2x} or @option{-std=gnu2x}), this switch only affects\n+the @code{asm} keyword, since @code{typeof} is a standard keyword in\n+ISO C2X.\n \n @item -fno-builtin\n @itemx -fno-builtin-@var{function}"}, {"sha": "a2abe8e465cfe9d46830b53b93aaf43f821c950b", "filename": "gcc/testsuite/gcc.dg/c11-typeof-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-typeof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-typeof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-typeof-1.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,6 @@\n+/* Test typeof and typeof_unqual not keywords in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int typeof = 1;\n+long typeof_unqual = 2;"}, {"sha": "0b721fedd4cf5d044529e830651c52ad62432d85", "filename": "gcc/testsuite/gcc.dg/c2x-typeof-1.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-1.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,208 @@\n+/* Test C2x typeof and typeof_unqual.  Valid code.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int i;\n+extern typeof (i) i;\n+extern typeof (int) i;\n+extern typeof_unqual (i) i;\n+extern typeof_unqual (int) i;\n+\n+volatile int vi;\n+extern typeof (volatile int) vi;\n+extern typeof (vi) vi;\n+\n+extern typeof_unqual (volatile int) i;\n+extern typeof_unqual (vi) i;\n+extern typeof ((const int) vi) i;\n+extern typeof ((volatile int) vi) i;\n+\n+const int ci;\n+extern typeof (const int) ci;\n+extern typeof (ci) ci;\n+\n+extern typeof_unqual (const int) i;\n+extern typeof_unqual (ci) i;\n+extern typeof ((const int) ci) i;\n+extern typeof (+ci) i;\n+extern typeof (0, ci) i;\n+extern typeof (1 ? ci : ci) i;\n+extern typeof (0) i;\n+\n+const int fci (void);\n+extern typeof (fci ()) i;\n+\n+_Atomic int ai;\n+extern typeof (_Atomic int) ai;\n+extern typeof (_Atomic (int)) ai;\n+extern typeof (ai) ai;\n+\n+extern typeof_unqual (_Atomic int) i;\n+extern typeof_unqual (_Atomic (int)) i;\n+extern typeof_unqual (ai) i;\n+extern typeof (+ai) i;\n+extern typeof ((_Atomic int) ai) i;\n+extern typeof (0, ai) i;\n+extern typeof (1 ? ai : ai) i;\n+\n+_Atomic int fai (void);\n+extern typeof (fai ()) i;\n+\n+_Atomic const volatile int acvi;\n+extern typeof (int volatile const _Atomic) acvi;\n+extern typeof (acvi) acvi;\n+extern const _Atomic volatile typeof (acvi) acvi;\n+extern _Atomic volatile typeof (ci) acvi;\n+extern _Atomic const typeof (vi) acvi;\n+extern const typeof (ai) volatile acvi;\n+\n+extern typeof_unqual (acvi) i;\n+extern typeof_unqual (typeof (acvi)) i;\n+extern typeof_unqual (_Atomic typeof_unqual (acvi)) i;\n+\n+extern _Atomic typeof_unqual (acvi) ai;\n+\n+char c;\n+volatile char vc;\n+volatile char *pvc;\n+volatile char *const cpvc;\n+const char *pcc;\n+const char *volatile vpcc;\n+typeof (*vpcc) cc;\n+\n+extern typeof (*cpvc) vc;\n+extern typeof_unqual (*cpvc) c;\n+extern typeof_unqual (cpvc) pvc;\n+extern typeof_unqual (vpcc) pcc;\n+extern const char cc;\n+\n+extern typeof (++vi) i;\n+extern typeof (++ai) i;\n+extern typeof (--vi) i;\n+extern typeof (--ai) i;\n+extern typeof (vi++) i;\n+extern typeof (ai++) i;\n+extern typeof (vi--) i;\n+extern typeof (ai--) i;\n+\n+bool b;\n+volatile bool vb;\n+_Atomic bool ab;\n+extern typeof (++vb) b;\n+extern typeof (++ab) b;\n+extern typeof (--vb) b;\n+extern typeof (--ab) b;\n+extern typeof (vb++) b;\n+extern typeof (ab++) b;\n+extern typeof (vb--) b;\n+extern typeof (ab--) b;\n+\n+extern typeof (vc = 1) c;\n+extern typeof (vpcc = 0) pcc;\n+extern typeof (ai *= 2) i;\n+\n+int s = sizeof (typeof (int (*)[++i]));\n+\n+void *vp;\n+\n+/* The non-returning property of a function is not part of the type given by\n+   ISO C typeof.  */\n+_Noreturn void nf1 (void);\n+[[noreturn]] void nf2 (void);\n+void fg (void) {}\n+typeof (&nf1) pnf1 = fg;\n+typeof (&nf2) pnf2 = fg;\n+extern void (*pnf1) (void);\n+extern void (*pnf2) (void);\n+extern typeof (nf1) *pnf1;\n+extern typeof (nf1) *pnf2;\n+extern typeof (nf2) *pnf1;\n+extern typeof (nf2) *pnf2;\n+typeof (*&nf1) fg2, fg2a, fg2b;\n+typeof (*&nf2) fg3, fg3a, fg3b;\n+typeof (nf1) fg4, fg4a, fg4b;\n+typeof (nf2) fg5, fg5a, fg5b;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void fg2 (void) {}\n+_Noreturn void fg2a (void) { abort (); }\n+[[noreturn]] void fg2b (void) { abort (); }\n+void fg3 (void) {}\n+_Noreturn void fg3a (void) { abort (); }\n+[[noreturn]] void fg3b (void) { abort (); }\n+void fg4 (void) {}\n+_Noreturn void fg4a (void) { abort (); }\n+[[noreturn]] void fg4b (void) { abort (); }\n+void fg5 (void) {}\n+_Noreturn void fg5a (void) { abort (); }\n+[[noreturn]] void fg5b (void) { abort (); }\n+\n+extern int only_used_in_typeof;\n+\n+static int not_defined (void);\n+\n+typeof (i)\n+main (typeof (*vp))\n+{\n+  volatile typeof (only_used_in_typeof) ii = 2;\n+  if (ii != 2)\n+    abort ();\n+  const typeof (not_defined ()) jj = 3;\n+  if (jj != 3)\n+    abort ();\n+  unsigned int u = 1;\n+  typeof (u) u2 = 0;\n+  typeof (int (*)[++u2]) p = 0;\n+  if (u2 != 1)\n+    abort ();\n+  if (sizeof (*p) != sizeof (int))\n+    abort ();\n+  typeof_unqual (int (*)[++u2]) q = 0;\n+  if (u2 != 2)\n+    abort ();\n+  if (sizeof (*q) != 2 * sizeof (int))\n+    abort ();\n+  if (sizeof (*p) != sizeof (int))\n+    abort ();\n+  typeof (++u2) u3 = 1;\n+  if (u2 != u + u3)\n+    abort ();\n+  typeof_unqual (++u2) u4 = 2;\n+  if (u2 != u4)\n+    abort ();\n+  u = sizeof (typeof (int (*)[++u2]));\n+  if (u2 != 2)\n+    abort ();\n+  u = sizeof (typeof_unqual (int (*)[++u2]));\n+  if (u2 != 2)\n+    abort ();\n+  typeof ((int (*)[++u2]) 0) q2;\n+  if (u2 != 3)\n+    abort ();\n+  typeof ((void) 0, (int (*)[++u2]) 0) q3;\n+  if (u2 != 4)\n+    abort ();\n+  typeof ((int (*)[++u2]) 0, 0) q4;\n+  if (u2 != 4)\n+    abort ();\n+  typeof_unqual ((int (*)[++u2]) 0) q5;\n+  if (u2 != 5)\n+    abort ();\n+  typeof_unqual ((void) 0, (int (*)[++u2]) 0) q6;\n+  if (u2 != 6)\n+    abort ();\n+  typeof_unqual ((int (*)[++u2]) 0, 0) q7;\n+  if (u2 != 6)\n+    abort ();\n+  int a1[6], a2[6];\n+  int (*pa)[u2] = &a1;\n+  typeof (pa = &a2) pp;\n+  if (pa != &a2)\n+    abort ();\n+  typeof_unqual (pa = &a1) pp2;\n+  if (pa != &a1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "f1c30a00a7fd60e2b3a936bd0baaeffaee7c94be", "filename": "gcc/testsuite/gcc.dg/c2x-typeof-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-2.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,27 @@\n+/* Test C2x typeof and typeof_unqual.  Invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+struct s { int i : 2; } x;\n+union u { unsigned int j : 1; } y;\n+\n+typeof (x.i) j; /* { dg-error \"applied to a bit-field\" } */\n+typeof_unqual (x.i) j2; /* { dg-error \"applied to a bit-field\" } */\n+typeof (y.j) j3; /* { dg-error \"applied to a bit-field\" } */\n+typeof_unqual (y.j) j4; /* { dg-error \"applied to a bit-field\" } */\n+\n+static int ok (void);\n+static int also_ok (void);\n+static int not_defined (void); /* { dg-error \"used but never defined\" } */\n+static int also_not_defined (void); /* { dg-error \"used but never defined\" } */\n+\n+void\n+f (void)\n+{\n+  typeof (ok ()) x = 2;\n+  typeof_unqual (also_ok ()) y = 2;\n+  int a[2];\n+  int (*p)[x] = &a;\n+  typeof (p + not_defined ()) q;\n+  typeof_unqual (p + also_not_defined ()) q2;\n+}"}, {"sha": "c7a057700d36b73b4f342cbf26680e6dcfe0dcd5", "filename": "gcc/testsuite/gcc.dg/c2x-typeof-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-typeof-3.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,7 @@\n+/* Test C2x typeof and typeof_unqual.  -fno-asm has no effect on keywords in\n+   C2x mode.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors -fno-asm\" } */\n+\n+int i;\n+extern typeof (i) i;"}, {"sha": "6477c78bd37160eb8d5e17ad77c5166567c2df33", "filename": "gcc/testsuite/gcc.dg/gnu11-typeof-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-1.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,6 @@\n+/* Test typeof and typeof_unqual not keywords with -std=gnu11 -fno-asm.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -fno-asm\" } */\n+\n+int typeof = 1;\n+long typeof_unqual = 2;"}, {"sha": "e60ad466c37ff682ed332e07639ae2283e205a53", "filename": "gcc/testsuite/gcc.dg/gnu11-typeof-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-typeof-2.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,39 @@\n+/* Test typeof propagation of noreturn function attributes with -std=gnu11:\n+   these are part of the type of a function pointer with GNU typeof, but not\n+   with C2x typeof.  */\n+/* { dg-do link } */\n+/* { dg-options \"-std=gnu11 -O2\" } */\n+\n+_Noreturn void f (void);\n+\n+typeof (&f) volatile p;\n+typeof (&p) volatile pp;\n+\n+void link_failure (void);\n+\n+void\n+g (void)\n+{\n+  (*p) ();\n+  link_failure ();\n+}\n+\n+void\n+h (void)\n+{\n+  (**pp) ();\n+  link_failure ();\n+}\n+\n+volatile int flag;\n+volatile int x;\n+\n+int\n+main (void)\n+{\n+  if (flag)\n+    g ();\n+  if (flag)\n+    h ();\n+  return x;\n+}"}, {"sha": "f14b54f1f7fdb2c3adac8a69aa7f15efa46a188a", "filename": "gcc/testsuite/gcc.dg/gnu2x-typeof-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-typeof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa258f6894801aef6785f0327594dc803da63fbd/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-typeof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-typeof-1.c?ref=fa258f6894801aef6785f0327594dc803da63fbd", "patch": "@@ -0,0 +1,39 @@\n+/* Test __typeof__ propagation of noreturn function attributes with -std=gnu2x:\n+   these are part of the type of a function pointer with GNU __typeof__, but\n+   not with C2x typeof.  */\n+/* { dg-do link } */\n+/* { dg-options \"-std=gnu2x -O2\" } */\n+\n+_Noreturn void f (void);\n+\n+__typeof__ (&f) volatile p;\n+__typeof__ (&p) volatile pp;\n+\n+void link_failure (void);\n+\n+void\n+g (void)\n+{\n+  (*p) ();\n+  link_failure ();\n+}\n+\n+void\n+h (void)\n+{\n+  (**pp) ();\n+  link_failure ();\n+}\n+\n+volatile int flag;\n+volatile int x;\n+\n+int\n+main (void)\n+{\n+  if (flag)\n+    g ();\n+  if (flag)\n+    h ();\n+  return x;\n+}"}]}