{"sha": "86d8e0c0652ef5236a460b75c25e4f7093cc0651", "node_id": "C_kwDOANBUbNoAKDg2ZDhlMGMwNjUyZWY1MjM2YTQ2MGI3NWMyNWU0ZjcwOTNjYzA2NTE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-01T13:01:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-01T14:00:26Z"}, "message": "Revert \"c++: delayed parse DMI [PR96645]\"\n\nThe breakage from r12-7804 (in WebKit, particularly) is more of a can of\nworms than I think we can address in GCC 12, so let's return to the GCC 11\nstatus quo for now and try again in stage 1.\n\nI think the change was correct for the current standard, but the standard\nneeds a fix in this area; this is CWG issue 2335.\n\n\tPR c++/96645\n\nThis reverts commits r12-7804 and r12-7929.", "tree": {"sha": "6685db841ca78121ca5adaa70b114fe832462e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6685db841ca78121ca5adaa70b114fe832462e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86d8e0c0652ef5236a460b75c25e4f7093cc0651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d8e0c0652ef5236a460b75c25e4f7093cc0651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d8e0c0652ef5236a460b75c25e4f7093cc0651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d8e0c0652ef5236a460b75c25e4f7093cc0651/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a172da8a3f3625d6d35675e604678ab0154bef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a172da8a3f3625d6d35675e604678ab0154bef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a172da8a3f3625d6d35675e604678ab0154bef7"}], "stats": {"total": 109, "additions": 7, "deletions": 102}, "files": [{"sha": "40e17140db5ed12d124d9f0409ddfb64d801d34a", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=86d8e0c0652ef5236a460b75c25e4f7093cc0651", "patch": "@@ -5415,11 +5415,10 @@ type_has_user_provided_or_explicit_constructor (tree t)\n \n /* Returns true iff class T has a non-user-provided (i.e. implicitly\n    declared or explicitly defaulted in the class body) default\n-   constructor.  If SYNTH, only return true if it hasn't been\n-   implicitly defined yet.  */\n+   constructor.  */\n \n-static bool\n-type_has_non_user_provided_default_constructor_1 (tree t, bool synth)\n+bool\n+type_has_non_user_provided_default_constructor (tree t)\n {\n   if (!TYPE_HAS_DEFAULT_CONSTRUCTOR (t))\n     return false;\n@@ -5432,28 +5431,12 @@ type_has_non_user_provided_default_constructor_1 (tree t, bool synth)\n       if (TREE_CODE (fn) == FUNCTION_DECL\n \t  && default_ctor_p (fn)\n \t  && !user_provided_p (fn))\n-\t{\n-\t  if (synth)\n-\t    return !DECL_INITIAL (fn);\n-\t  return true;\n-\t}\n+\treturn true;\n     }\n \n   return false;\n }\n \n-bool\n-type_has_non_user_provided_default_constructor (tree t)\n-{\n-  return type_has_non_user_provided_default_constructor_1 (t, false);\n-}\n-\n-bool\n-type_has_default_ctor_to_be_synthesized (tree t)\n-{\n-  return type_has_non_user_provided_default_constructor_1 (t, true);\n-}\n-\n /* TYPE is being used as a virtual base, and has a non-trivial move\n    assignment.  Return true if this is due to there being a user-provided\n    move assignment in TYPE or one of its subobjects; if there isn't, then"}, {"sha": "2f718852ac182693f20ca16cb18925cad5d42ff0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86d8e0c0652ef5236a460b75c25e4f7093cc0651", "patch": "@@ -6720,7 +6720,6 @@ extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_non_user_provided_default_constructor (tree);\n-extern bool type_has_default_ctor_to_be_synthesized (tree);\n extern bool vbase_has_user_provided_move_assign (tree);\n extern tree default_init_uninitialized_part (tree);\n extern bool trivial_default_constructor_is_constexpr (tree);"}, {"sha": "903ee666ef3966ef5be691d6a573acf4da666109", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=86d8e0c0652ef5236a460b75c25e4f7093cc0651", "patch": "@@ -2056,28 +2056,6 @@ assignable_expr (tree to, tree from)\n   return r;\n }\n \n-/* An unparsed default member initializer prevents calling a defaulted default\n-   constructor; make checking std::is_constructible ill-formed until the DMI\n-   has been parsed, to avoid caching the wrong value.  */\n-\n-static bool\n-complain_about_unparsed_dmi (tree t)\n-{\n-  if (type_has_default_ctor_to_be_synthesized (t)\n-      && TYPE_HAS_COMPLEX_DFLT (t))\n-    for (tree f = TYPE_FIELDS (t); f; f = DECL_CHAIN (f))\n-      if (TREE_CODE (f) == FIELD_DECL\n-\t  && DECL_INITIAL (f)\n-\t  && TREE_CODE (DECL_INITIAL (f)) == DEFERRED_PARSE)\n-\t{\n-\t  error (\"default member initializer for %qD required by %qs before \"\n-\t\t \"the end of its enclosing class\", f, \"std::is_constructible\");\n-\t  inform (location_of (f), \"defined here\");\n-\t  return true;\n-\t}\n-  return false;\n-}\n-\n /* The predicate condition for a template specialization\n    is_constructible<T, Args...> shall be satisfied if and only if the\n    following variable definition would be well-formed for some invented\n@@ -2092,8 +2070,6 @@ constructible_expr (tree to, tree from)\n   cp_unevaluated cp_uneval_guard;\n   if (CLASS_TYPE_P (to))\n     {\n-      if (!from && complain_about_unparsed_dmi (to))\n-\treturn error_mark_node;\n       tree ctype = to;\n       vec<tree, va_gc> *args = NULL;\n       if (!TYPE_REF_P (to))"}, {"sha": "7e1c777364e79d3b5fe606ffeb5b0537f1b9acbb", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=86d8e0c0652ef5236a460b75c25e4f7093cc0651", "patch": "@@ -2701,8 +2701,6 @@ static tree cp_parser_late_parse_one_default_arg\n   (cp_parser *, tree, tree, tree);\n static void cp_parser_late_parsing_nsdmi\n   (cp_parser *, tree);\n-static bool cp_parser_early_parsing_nsdmi\n-  (cp_parser *, tree);\n static void cp_parser_late_parsing_default_args\n   (cp_parser *, tree);\n static tree cp_parser_sizeof_operand\n@@ -27480,8 +27478,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      if (DECL_DECLARES_FUNCTION_P (decl))\n \t\tcp_parser_save_default_args (parser, STRIP_TEMPLATE (decl));\n \t      else if (TREE_CODE (decl) == FIELD_DECL\n-\t\t       && DECL_INITIAL (decl)\n-\t\t       && !cp_parser_early_parsing_nsdmi (parser, decl))\n+\t\t       && DECL_INITIAL (decl))\n \t\t/* Add DECL to the queue of NSDMI to be parsed later.  */\n \t\tvec_safe_push (unparsed_nsdmis, decl);\n \t    }\n@@ -32295,29 +32292,6 @@ cp_parser_late_parsing_nsdmi (cp_parser *parser, tree field)\n   DECL_INITIAL (field) = def;\n }\n \n-/* If the DEFERRED_PARSE for FIELD is safe to parse immediately, do so.\n-   Returns true if deferred parsing is no longer needed.  */\n-\n-static bool\n-cp_parser_early_parsing_nsdmi (cp_parser *parser, tree field)\n-{\n-  tree init = DECL_INITIAL (field);\n-  if (TREE_CODE (init) != DEFERRED_PARSE)\n-    return true;\n-\n-  cp_token_cache *tokens = DEFPARSE_TOKENS (init);\n-  for (cp_token *p = tokens->first; p != tokens->last; ++p)\n-    if (p->type == CPP_NAME\n-\t|| p->keyword == RID_THIS\n-\t|| p->keyword == RID_OPERATOR)\n-      /* There's a name to look up or 'this', give up.  */\n-      return false;\n-\n-  /* It's trivial, parse now.  */\n-  cp_parser_late_parsing_nsdmi (parser, field);\n-  return true;\n-}\n-\n /* FN is a FUNCTION_DECL which may contains a parameter with an\n    unparsed DEFERRED_PARSE.  Parse the default args now.  This function\n    assumes that the current scope is the scope in which the default"}, {"sha": "d8588b7f29ea0a77fa5038e4c2927a50c946631b", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d8e0c0652ef5236a460b75c25e4f7093cc0651/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi10.C?ref=86d8e0c0652ef5236a460b75c25e4f7093cc0651", "patch": "@@ -6,13 +6,13 @@ struct A1 {\n     int y1 = 1;\n   };\n \n-  A1(const B1& opts = B1()) {}\n+  A1(const B1& opts = B1()) {}  // { dg-error \"default member initializer\" }\n };\n \n struct A2 {\n   struct B2 {\n     int x2, y2 = 1;\n   };\n \n-  A2(const B2& opts = B2()) {}\n+  A2(const B2& opts = B2()) {}  // { dg-error \"default member initializer\" }\n };"}, {"sha": "013a1df03c6ad7e81685c5b338b3d008ba170e9e", "filename": "gcc/testsuite/g++.dg/ext/is_constructible7.C", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a172da8a3f3625d6d35675e604678ab0154bef7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a172da8a3f3625d6d35675e604678ab0154bef7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible7.C?ref=1a172da8a3f3625d6d35675e604678ab0154bef7", "patch": "@@ -1,27 +0,0 @@\n-// PR c++/96645\n-// { dg-do compile { target c++11 } }\n-\n-template<bool B>\n-struct bool_constant\n-{\n-  static constexpr bool value = B;\n-  using type = bool_constant;\n-};\n-\n-using true_type = bool_constant<true>;\n-\n-template<typename T>\n-struct is_default_constructible\n-  : bool_constant<__is_constructible(T)>\n-{ };\n-\n-void testVarStruct()\n-{\n-  struct DataWithStruct {\n-    struct A {\n-      int number = 5; // compiles, if remove initialization\n-    };\n-\n-    is_default_constructible<A>::type t = true_type{};\n-  };\n-}"}]}