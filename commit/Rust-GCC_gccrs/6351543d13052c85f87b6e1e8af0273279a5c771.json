{"sha": "6351543d13052c85f87b6e1e8af0273279a5c771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1MTU0M2QxMzA1MmM4NWY4N2I2ZTFlOGFmMDI3MzI3OWE1Yzc3MQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2001-08-08T23:33:51Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-08-08T23:33:51Z"}, "message": "class.c (emit_register_classes): Use assemble_jcr if possible.\n\n2001-08-08  Anthony Green  <green@redhat.com>\n\n\t* java/class.c (emit_register_classes): Use assemble_jcr if\n\tpossible.  Keep the original mechanism as a fallback.\n\t* defaults.h (JCR_SECTION_NAME): Define if we have named section\n\tand weak symbol support.\n\t* crtstuff.c (__JCR_LIST__): Define.\n\t(__JCR_END__): Define.\n\t(_Jv_RegiserClasses): Define weak symbol if possible.\n\t(__do_global_ctors_aux): Register classes for ELF targets with\n\tweak symbol support.\n\nFrom-SVN: r44731", "tree": {"sha": "b2a3074871661348b009c02745413b72c17c05ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a3074871661348b009c02745413b72c17c05ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6351543d13052c85f87b6e1e8af0273279a5c771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6351543d13052c85f87b6e1e8af0273279a5c771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6351543d13052c85f87b6e1e8af0273279a5c771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6351543d13052c85f87b6e1e8af0273279a5c771/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8406c89d1aeb29b08924d191293dbb102051065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8406c89d1aeb29b08924d191293dbb102051065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8406c89d1aeb29b08924d191293dbb102051065"}], "stats": {"total": 140, "additions": 104, "deletions": 36}, "files": [{"sha": "6f285955a3cce50ed85586a540c53a9276847e48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6351543d13052c85f87b6e1e8af0273279a5c771", "patch": "@@ -1,3 +1,15 @@\n+2001-08-08  Anthony Green  <green@redhat.com>\n+\n+\t* java/class.c (emit_register_classes): Use assemble_jcr if\n+\tpossible.  Keep the original mechanism as a fallback.\n+\t* defaults.h (JCR_SECTION_NAME): Define if we have named section\n+\tand weak symbol support.\n+\t* crtstuff.c (__JCR_LIST__): Define.\n+\t(__JCR_END__): Define.\n+\t(_Jv_RegiserClasses): Define weak symbol if possible.\n+\t(__do_global_ctors_aux): Register classes for ELF targets with\n+\tweak symbol support.\n+\n 2001-08-08  Kazu Hirata  <kazu@hxi.com>\n \n \t* dbxout.c: Fix comment formatting."}, {"sha": "c74377eefee7768d86ad654583946f96ef5c6663", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=6351543d13052c85f87b6e1e8af0273279a5c771", "patch": "@@ -415,6 +415,14 @@ char __EH_FRAME_BEGIN__[]\n      = { };\n #endif /* EH_FRAME_SECTION_NAME */\n \n+#ifdef JCR_SECTION_NAME\n+/* Stick a label at the beginning of the java class registration info\n+   so we can register them properly.  */\n+\n+STATIC void *__JCR_LIST__[] __attribute__ ((unused, section(JCR_SECTION_NAME)))\n+  = { 0 };\n+#endif /* JCR_SECTION_NAME */\n+\n #endif /* defined(CRT_BEGIN) */\n \n #ifdef CRT_END\n@@ -423,11 +431,25 @@ char __EH_FRAME_BEGIN__[]\n \n #ifdef OBJECT_FORMAT_ELF\n \n+#ifdef JCR_SECTION_NAME\n+extern void _Jv_RegisterClasses (void *) __attribute__((weak));\n+static void *__JCR_END__[];\n+#endif\n+\n static func_ptr __CTOR_END__[];\n static void\n __do_global_ctors_aux (void)\n {\n   func_ptr *p;\n+#ifdef JCR_SECTION_NAME\n+  void **jcr;\n+  if (_Jv_RegisterClasses)\n+    {\n+      for (jcr = __JCR_END__ - 1; *jcr != NULL; jcr--);\n+      if (*(jcr + 1))\n+\t_Jv_RegisterClasses (jcr + 1);\n+    }\n+#endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n     (*p) ();\n }\n@@ -543,6 +565,14 @@ STATIC int __FRAME_END__[]\n      = { 0 };\n #endif /* EH_FRAME_SECTION */\n \n+#ifdef JCR_SECTION_NAME\n+/* Stick a label at the beginning of the java class registration info\n+   so we can register them properly.  */\n+\n+STATIC void *__JCR_END__[1] \n+     __attribute__ ((unused, section(JCR_SECTION_NAME))) = { 0 };\n+#endif /* JCR_SECTION_NAME */\n+\n #endif /* defined(CRT_END) */\n \n #else  /* OBJECT_FORMAT_MACHO */"}, {"sha": "0939d077d63b10e80bae14dfc554eeb92866f9a2", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=6351543d13052c85f87b6e1e8af0273279a5c771", "patch": "@@ -217,6 +217,15 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #endif\n #endif\n \n+/* If we have named section and we support weak symbols, then use the\n+   .jcr section for recording java classes which need to be registered\n+   at program start-up time.  */\n+#if defined (TARGET_ASM_NAMED_SECTION) && SUPPORTS_WEAK\n+#ifndef JCR_SECTION_NAME\n+#define JCR_SECTION_NAME \".jcr\"\n+#endif\n+#endif\n+\n /* If we have no definition for UNIQUE_SECTION, but do have the \n    ability to generate arbitrary sections, construct something\n    reasonable.  */"}, {"sha": "8113340e3fc961cb07e33776b62e120e672de9b0", "filename": "gcc/java/class.c", "status": "modified", "additions": 53, "deletions": 36, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6351543d13052c85f87b6e1e8af0273279a5c771/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6351543d13052c85f87b6e1e8af0273279a5c771", "patch": "@@ -37,6 +37,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"output.h\"\n #include \"parse.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n static tree make_method_value PARAMS ((tree));\n static tree build_java_method_type PARAMS ((tree, tree, int));\n@@ -848,7 +849,6 @@ build_utf8_ref (name)\n   sprintf(buf, \"_Utf%d\", ++utf8_count);\n \n   decl = build_decl (VAR_DECL, get_identifier (buf), utf8const_type);\n-  /* FIXME get some way to force this into .text, not .data. */\n   TREE_STATIC (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n@@ -1865,45 +1865,62 @@ register_class ()\n   end = current;\n }\n \n-/* Generate a function that gets called at start-up (static contructor) time,\n-   which calls registerClass for all the compiled classes. */\n+/* Emit something to register classes at start-up time.\n+\n+   The preferred mechanism is through the .jcr section, which contain\n+   a list of pointers to classes which get registered during\n+   constructor invoction time.  The fallback mechanism is to generate\n+   a `constructor' function which calls _Jv_RegisterClass for each\n+   class in this file.  */\n \n void\n emit_register_classes ()\n {\n-  extern tree get_file_function_name PARAMS ((int));\n-  tree init_name = get_file_function_name ('I');\n-  tree init_type = build_function_type (void_type_node, end_params_node);\n-  tree init_decl;\n-  tree t;\n-\n-  init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n-  SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n-  TREE_STATIC (init_decl) = 1;\n-  current_function_decl = init_decl;\n-  DECL_RESULT (init_decl) = build_decl(RESULT_DECL, NULL_TREE, void_type_node);\n-  /*  DECL_EXTERNAL (init_decl) = 1;*/\n-  TREE_PUBLIC (init_decl) = 1;\n-  pushlevel (0);\n-  make_decl_rtl (init_decl, NULL);\n-  init_function_start (init_decl, input_filename, 0);\n-  expand_function_start (init_decl, 0);\n-\n-  for ( t = registered_class; t; t = TREE_CHAIN (t))\n-    emit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n-\t\t       XEXP (DECL_RTL (t), 0), Pmode);\n-\n-  expand_function_end (input_filename, 0, 0);\n-  poplevel (1, 0, 1);\n-  { \n-    /* Force generation, even with -O3 or deeper. Gross hack. FIXME */\n-    int saved_flag = flag_inline_functions;\n-    flag_inline_functions = 0;\t\n-    rest_of_compilation (init_decl);\n-    flag_inline_functions = saved_flag;\n-  }\n-  current_function_decl = NULL_TREE;\n-  assemble_constructor (XEXP (DECL_RTL (init_decl), 0), DEFAULT_INIT_PRIORITY);\n+  if (SUPPORTS_WEAK && targetm.have_named_sections)\n+    {\n+      tree t;\n+      named_section_flags (JCR_SECTION_NAME, SECTION_WRITE,\n+\t\t\t   POINTER_SIZE / BITS_PER_UNIT);\n+      for (t = registered_class; t; t = TREE_CHAIN (t))\n+\tassemble_integer (XEXP (DECL_RTL (t), 0),\n+\t\t\t  POINTER_SIZE / BITS_PER_UNIT, 1);\n+    }\n+  else\n+    {\n+      extern tree get_file_function_name PARAMS ((int));\n+      tree init_name = get_file_function_name ('I');\n+      tree init_type = build_function_type (void_type_node, end_params_node);\n+      tree init_decl;\n+      tree t;\n+      \n+      init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n+      SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n+      TREE_STATIC (init_decl) = 1;\n+      current_function_decl = init_decl;\n+      DECL_RESULT (init_decl) = build_decl(RESULT_DECL, NULL_TREE, void_type_node);\n+      /*  DECL_EXTERNAL (init_decl) = 1;*/\n+      TREE_PUBLIC (init_decl) = 1;\n+      pushlevel (0);\n+      make_decl_rtl (init_decl, NULL);\n+      init_function_start (init_decl, input_filename, 0);\n+      expand_function_start (init_decl, 0);\n+      \n+      for ( t = registered_class; t; t = TREE_CHAIN (t))\n+\temit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n+\t\t\t   XEXP (DECL_RTL (t), 0), Pmode);\n+      \n+      expand_function_end (input_filename, 0, 0);\n+      poplevel (1, 0, 1);\n+      { \n+\t/* Force generation, even with -O3 or deeper. Gross hack. FIXME */\n+\tint saved_flag = flag_inline_functions;\n+\tflag_inline_functions = 0;\t\n+\trest_of_compilation (init_decl);\n+\tflag_inline_functions = saved_flag;\n+      }\n+      current_function_decl = NULL_TREE;\n+      assemble_constructor (XEXP (DECL_RTL (init_decl), 0), DEFAULT_INIT_PRIORITY);\n+    }\n }\n \n void"}]}