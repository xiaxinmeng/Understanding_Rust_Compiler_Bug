{"sha": "bf0340541587406a003d0afc213a5def81f7d377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwMzQwNTQxNTg3NDA2YTAwM2QwYWZjMjEzYTVkZWY4MWY3ZDM3Nw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-05-03T20:10:06Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-05-03T20:10:06Z"}, "message": "aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Change non-PowerPC and AIX64 combination to warning.\n\n        * rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Change non-PowerPC\n        and AIX64 combination to warning.  Add warning for disabling\n        PowerPC64 support when using 64-bit mode.\n        (LIB_SPEC): Do not link with libg.a in 64-bit mode.\n        (LINK_SPEC): Do not export libg.exp symbols in 64-bit mode.\n        * rs6000/rs6000.h (MY_ISCOFF): Treat import/export files as valid\n        XCOFF files.\n        (read_only_data_section, private_data_section,\n        read_only_private_data_section): Always align CSECTs to doubleword\n        boundary regardless of mode.\n        (TEXT_SECTION_ASM_OP): Align text CSECT on doubleword boundary in\n        64-bit mode.\n        (DATA_SECTION_ASM_OP): Always align CSECT to doubleword boundary.\n        (ASM_OUTPUT_LOCAL): Use rounded size in 64-bit mode to\n        maintain doublword alignment.\n\nFrom-SVN: r26762", "tree": {"sha": "5aa6b202bffd11f3f47a1b1ec2e9ab2d5c9b9c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa6b202bffd11f3f47a1b1ec2e9ab2d5c9b9c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf0340541587406a003d0afc213a5def81f7d377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0340541587406a003d0afc213a5def81f7d377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0340541587406a003d0afc213a5def81f7d377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0340541587406a003d0afc213a5def81f7d377/comments", "author": null, "committer": null, "parents": [{"sha": "51d2ffa1a2447bfa78a7fa4c01c72c08dc761783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d2ffa1a2447bfa78a7fa4c01c72c08dc761783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d2ffa1a2447bfa78a7fa4c01c72c08dc761783"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "68dd128a47daa53abf6ce56d66ed9a4065ab68ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf0340541587406a003d0afc213a5def81f7d377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf0340541587406a003d0afc213a5def81f7d377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf0340541587406a003d0afc213a5def81f7d377", "patch": "@@ -1,3 +1,21 @@\n+Mon May  3 22:38:41 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000/aix43.h (SUBTARGET_OVERRIDE_OPTIONS): Change non-PowerPC\n+\tand AIX64 combination to warning.  Add warning for disabling\n+\tPowerPC64 support when using 64-bit mode.\n+\t(LIB_SPEC): Do not link with libg.a in 64-bit mode.\n+\t(LINK_SPEC): Do not export libg.exp symbols in 64-bit mode.\n+\t* rs6000/rs6000.h (MY_ISCOFF): Treat import/export files as valid\n+\tXCOFF files.\n+\t(read_only_data_section, private_data_section,\n+\tread_only_private_data_section): Always align CSECTs to doubleword\n+\tboundary regardless of mode.\n+\t(TEXT_SECTION_ASM_OP): Align text CSECT on doubleword boundary in\n+\t64-bit mode.\n+\t(DATA_SECTION_ASM_OP): Always align CSECT to doubleword boundary.\n+\t(ASM_OUTPUT_LOCAL): Use rounded size in 64-bit mode to\n+\tmaintain doublword alignment.\n+\n Mon May  3 14:45:23 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* mn10200.md (btst insns): btst does not leave cc0 in a useable"}, {"sha": "7814f6b9c6495c19ffa88b3dea98465ac4deb8df", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf0340541587406a003d0afc213a5def81f7d377/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf0340541587406a003d0afc213a5def81f7d377/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=bf0340541587406a003d0afc213a5def81f7d377", "patch": "@@ -48,7 +48,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      error (\"-maix64 and POWER architecture are incompatible.\");\t\\\n+      warning (\"-maix64 and POWER architecture are incompatible.\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! (target_flags & MASK_POWERPC64))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      warning (\"-maix64 requires PowerPC64 architecture remain enabled.\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0);\n \n@@ -172,14 +177,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n-   %{p:-L/lib/profiled -L/usr/lib/profiled} %{!shared:%{g*:-lg}}\\\n+   %{p:-L/lib/profiled -L/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n    %{mpe:-L/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n-   %{mthreads: -L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a}\\\n-   %{!mthreads: -lc}\"\n+   %{mthreads:-L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a}\\\n+   %{!mthreads:-lc}\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n-   %{static:-bnso %(link_syscalls) } %{!shared: %{g*: %(link_libg) }}\\\n+   %{static:-bnso %(link_syscalls) } %{!maix64:%{!shared:%{g*: %(link_libg) }}}\\\n    %{shared:-bM:SRE %{!e:-bnoentry}} %{maix64:-b64}\"\n \n #undef STARTFILE_SPEC"}, {"sha": "527daf0df3053779d866daf25c61d88e7d293266", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf0340541587406a003d0afc213a5def81f7d377/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf0340541587406a003d0afc213a5def81f7d377/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bf0340541587406a003d0afc213a5def81f7d377", "patch": "@@ -2215,12 +2215,16 @@ do {                                                                    \\\n #define OBJECT_FORMAT_COFF\n \n /* Define the magic numbers that we recognize as COFF.\n+\n    AIX 4.3 adds U803XTOCMAGIC (0757) for 64-bit objects, but collect2.c\n    does not include files in the correct order to conditionally define\n-   the symbolic name in this macro.  */\n+   the symbolic name in this macro. \n+\n+   The AIX linker accepts import/export files as object files,\n+   so accept \"#!\" (0x2321) magic number.  */\n #define MY_ISCOFF(magic) \\\n   ((magic) == U802WRMAGIC || (magic) == U802ROMAGIC \\\n-   || (magic) == U802TOCMAGIC || (magic) == 0757)\n+   || (magic) == U802TOCMAGIC || (magic) == 0757 || (magic) == 0x2321)\n \n /* This is the only version of nm that collect2 can work with.  */\n #define REAL_NM_FILE_NAME \"/usr/ucb/nm\"\n@@ -2542,7 +2546,8 @@ extern int rs6000_trunc_used;\n \n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* Define the routines to implement these extra sections.  */\n+/* Define the routines to implement these extra sections.\n+   BIGGEST_ALIGNMENT is 64, so align the sections that much.  */\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n@@ -2551,9 +2556,8 @@ read_only_data_section ()\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != read_only_data)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \".csect %s[RO]%s\\n\",\t\\\n-\t       xcoff_read_only_section_name,\t\t\\\n-\t       (TARGET_32BIT ? \"\" : \",3\"));\t\t\\\n+      fprintf (asm_out_file, \".csect %s[RO],3\\n\",\t\\\n+\t       xcoff_read_only_section_name);\t\t\\\n       in_section = read_only_data;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -2563,9 +2567,8 @@ private_data_section ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != private_data)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \".csect %s[RW]%s\\n\",\t\\\n-\t       xcoff_private_data_section_name,\t\t\\\n-\t       (TARGET_32BIT ? \"\" : \",3\"));\t\t\\\n+      fprintf (asm_out_file, \".csect %s[RW],3\\n\",\t\\\n+\t       xcoff_private_data_section_name);\t\\\n       in_section = private_data;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -2575,9 +2578,8 @@ read_only_private_data_section ()\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != read_only_private_data)\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \".csect %s[RO]%s\\n\",\t\\\n-\t       xcoff_private_data_section_name,\t\t\\\n-\t       (TARGET_32BIT ? \"\" : \",3\"));\t\t\\\n+      fprintf (asm_out_file, \".csect %s[RO],3\\n\",\t\\\n+\t       xcoff_private_data_section_name);\t\\\n       in_section = read_only_private_data;\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -2806,14 +2808,16 @@ extern int toc_initialized;\n \n #define ASM_APP_OFF \"\"\n \n-/* Output before instructions.  */\n+/* Output before instructions.\n+   Text section for 64-bit target may contain 64-bit address jump table.  */\n \n-#define TEXT_SECTION_ASM_OP \".csect .text[PR]\"\n+#define TEXT_SECTION_ASM_OP (TARGET_32BIT \\\n+\t\t\t     ? \".csect .text[PR]\" : \".csect .text[PR],3\")\n \n-/* Output before writable data.  */\n+/* Output before writable data.\n+   Align entire section to BIGGEST_ALIGNMENT.  */\n \n-#define DATA_SECTION_ASM_OP (TARGET_32BIT \\\n-\t\t\t     ? \".csect .data[RW]\" : \".csect .data[RW],3\")\n+#define DATA_SECTION_ASM_OP \".csect .data[RW],3\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n@@ -3116,12 +3120,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* This says how to output an assembler line\n-   to define a local common symbol.  */\n+   to define a local common symbol.\n+   Alignment cannot be specified, but we can try to maintain\n+   alignment after preceding TOC section if it was aligned\n+   for 64-bit mode.  */\n \n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n   do { fputs (\".lcomm \", (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",%d,%s\\n\", (SIZE), xcoff_bss_section_name); \\\n+       fprintf ((FILE), \",%d,%s\\n\", (TARGET_32BIT ? (SIZE) : (ROUNDED)), \\\n+\t\txcoff_bss_section_name);\t\t\\\n      } while (0)\n \n /* Store in OUTPUT a string (made with alloca) containing"}]}