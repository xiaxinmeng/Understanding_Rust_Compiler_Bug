{"sha": "dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwNzA5MmViZThhODlmNjAzYjc2NDUxOWI0YjhiNDNjZjNhYmMyZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-02T18:53:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-02T18:53:54Z"}, "message": "h8300.c (extra_pop): Remove unused variable.\n\n        * h8300/h8300.c (extra_pop): Remove unused variable.\n        (current_function_anonymous_args): Likewise.\n        (function_prologue): Remove incorrect varargs/stdarg\n        related code.\n        (function_epilogue): Likewise.\n        (function_arg): Never pass unnamed arguments in registers.\n        * h8300.h (LONG_LONG_TYPE_SIZE): Use 64bits when ints are\n        32bits.\n        (SETUP_INCOMING_VARARGS): Remove definition.\n\nFrom-SVN: r11653", "tree": {"sha": "0e2bccbfb112984d662dfce033a12e9a712fded7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2bccbfb112984d662dfce033a12e9a712fded7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07092ebe8a89f603b764519b4b8b43cf3abc2e/comments", "author": null, "committer": null, "parents": [{"sha": "cf0a001cb1a5f9dc91e1d61571b685ef3133c95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0a001cb1a5f9dc91e1d61571b685ef3133c95d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0a001cb1a5f9dc91e1d61571b685ef3133c95d"}], "stats": {"total": 81, "additions": 10, "deletions": 71}, "files": [{"sha": "8abe7d7a4ba196a51f442a19640d758cc3a46db5", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 9, "deletions": 63, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07092ebe8a89f603b764519b4b8b43cf3abc2e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07092ebe8a89f603b764519b4b8b43cf3abc2e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "patch": "@@ -180,11 +180,6 @@ static int pop_order[FIRST_PSEUDO_REGISTER] =\n    <saved registers>   \t<- sp\n */\n \n-int current_function_anonymous_args;\n-\n-/* Extra arguments to pop, in words (IE: 2 bytes for 300, 4 for 300h */\n-static int extra_pop;\n-\n void\n function_prologue (file, size)\n      FILE *file;\n@@ -193,50 +188,12 @@ function_prologue (file, size)\n   register int mask = 0;\n   int fsize = (size + STACK_BOUNDARY / 8 - 1) & -STACK_BOUNDARY / 8;\n   int idx;\n-  extra_pop = 0;\n \n+  /* Note a function with the interrupt attribute and set interrupt_handler\n+     accordingly.  */\n   if (h8300_interrupt_function_p (current_function_decl))\n     interrupt_handler = 1;\n \n-  if (current_function_anonymous_args && TARGET_QUICKCALL)\n-    {\n-      /* Push regs as if done by caller, and move around return address.  */\n-\n-      switch (current_function_args_info.nbytes / UNITS_PER_WORD)\n-\t{\n-\tcase 0:\n-\t  /* get ret addr */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[3]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[2]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[1]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[0]);\n-\t  /* push it again */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[3]);\n-\t  extra_pop = 3;\n-\t  break;\n-\tcase 1:\n-\t  /* get ret addr */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[3]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[2]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[1]);\n-\t  /* push it again */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[3]);\n-\t  extra_pop = 2;\n-\t  break;\n-\tcase 2:\n-\t  /* get ret addr */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[3]);\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[2]);\n-\t  /* push it again */\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_push_op, h8_reg_names[3]);\n-\t  extra_pop = 1;\n-\t  break;\n-\tdefault:\n-\t  fprintf (file, \"; varargs\\n\");\n-\t  break;\n-\t}\n-    }\n-\n   if (frame_pointer_needed)\n     {\n       /* Push fp */\n@@ -321,28 +278,13 @@ function_epilogue (file, size)\n       dosize (file, \"add\", fsize, 0);\n     }\n \n-  if (extra_pop)\n-    {\n-      fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[3]);\n-      while (extra_pop)\n-\t{\n-\t  fprintf (file, \"\\t%s\\t%s\\n\", h8_pop_op, h8_reg_names[2]);\n-\t  extra_pop--;\n-\t}\n-      fprintf (file, \"\\tjmp\t@%s\\n\", h8_reg_names[3]);\n-    }\n+  if (interrupt_handler)\n+    fprintf (file, \"\\trte\\n\");\n   else\n-    {\n-      if (interrupt_handler)\n-\tfprintf (file, \"\\trte\\n\");\n-      else\n-\tfprintf (file, \"\\trts\\n\");\n-    }\n+    fprintf (file, \"\\trts\\n\");\n \n   interrupt_handler = 0;\n   pragma_saveall = 0;\n-\n-  current_function_anonymous_args = 0;\n }\n \n /* Output assembly code for the start of the file.  */\n@@ -652,6 +594,10 @@ function_arg (cum, mode, type, named)\n   char *fname;\n   int regpass = 0;\n \n+  /* Never pass unnamed arguments in registers.  */\n+  if (!named)\n+    return 0;\n+\n   /* Pass 3 regs worth of data in regs when user asked on the command line.  */\n   if (TARGET_QUICKCALL)\n     regpass = 3;"}, {"sha": "2a0f451c73eacf4dc1a997bc8cdce708cc79ac87", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07092ebe8a89f603b764519b4b8b43cf3abc2e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07092ebe8a89f603b764519b4b8b43cf3abc2e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=dd07092ebe8a89f603b764519b4b8b43cf3abc2e", "patch": "@@ -170,7 +170,7 @@ do {\t\t\t\t\\\n #define SHORT_TYPE_SIZE \t16\n #define INT_TYPE_SIZE \t\t(TARGET_INT32 ? 32 : 16)\n #define LONG_TYPE_SIZE \t\t32\n-#define LONG_LONG_TYPE_SIZE \t32\n+#define LONG_LONG_TYPE_SIZE   (TARGET_INT32 ? 64 : 32)\n #define FLOAT_TYPE_SIZE \t32\n #define DOUBLE_TYPE_SIZE \t32\n #define LONG_DOUBLE_TYPE_SIZE \tDOUBLE_TYPE_SIZE\n@@ -612,13 +612,6 @@ struct rtx_def *function_arg();\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments.  */\n-\n-extern int current_function_anonymous_args;\n-#define SETUP_INCOMING_VARARGS(ASF, MODE, TYPE, PAS, ST) \\\n-  current_function_anonymous_args = 1;\n-\n /* Generate assembly output for the start of a function.  */\n \n #define FUNCTION_PROLOGUE(FILE, SIZE) \\"}]}