{"sha": "2709efd88c169398f2d23305813f6c7f3c3b18f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwOWVmZDg4YzE2OTM5OGYyZDIzMzA1ODEzZjZjN2YzYzNiMThmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-05T15:16:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-05T15:16:10Z"}, "message": "tree-pretty-print.c (dump_generic_node, [...]): Properly print bounds.\n\n\t* tree-pretty-print.c (dump_generic_node, case ARRAY_TYPE): Properly\n\tprint bounds.\n\nFrom-SVN: r84118", "tree": {"sha": "e633c0c3816f8e0ea732d6167dcc622a1965f33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e633c0c3816f8e0ea732d6167dcc622a1965f33e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2709efd88c169398f2d23305813f6c7f3c3b18f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2709efd88c169398f2d23305813f6c7f3c3b18f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2709efd88c169398f2d23305813f6c7f3c3b18f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2709efd88c169398f2d23305813f6c7f3c3b18f0/comments", "author": null, "committer": null, "parents": [{"sha": "ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "bcb3ca89efd47b12d07851e81c7d9946cba8d72d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2709efd88c169398f2d23305813f6c7f3c3b18f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2709efd88c169398f2d23305813f6c7f3c3b18f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2709efd88c169398f2d23305813f6c7f3c3b18f0", "patch": "@@ -5,6 +5,9 @@\n \n 2004-07-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree-pretty-print.c (dump_generic_node, case ARRAY_TYPE): Properly\n+\tprint bounds.\n+\n \t* expr.c (expand_expr_real_1, case SWITCH_EXPR): Don't check against\n \tbounds if bounds aren't constant.\n "}, {"sha": "48f8c13611e9acaaf2996f0baa9af520a9d32ddd", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2709efd88c169398f2d23305813f6c7f3c3b18f0/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2709efd88c169398f2d23305813f6c7f3c3b18f0/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=2709efd88c169398f2d23305813f6c7f3c3b18f0", "patch": "@@ -378,27 +378,37 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       {\n \ttree tmp;\n \n-\t/* Print the array type.  */\n-\tdump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n+\t/* Print the innermost component type.  */\n+\tfor (tmp = TREE_TYPE (node); TREE_CODE (tmp) == ARRAY_TYPE;\n+\t     tmp = TREE_TYPE (tmp))\n+\t  ;\n+\tdump_generic_node (buffer, tmp, spc, flags, false);\n \n \t/* Print the dimensions.  */\n-\ttmp = node;\n-\twhile (tmp && TREE_CODE (tmp) == ARRAY_TYPE)\n+\tfor (tmp = node; TREE_CODE (tmp) == ARRAY_TYPE;\n+\t     tmp = TREE_TYPE (tmp))\n \t  {\n+\t    tree domain = TYPE_DOMAIN (tmp);\n+\n \t    pp_character (buffer, '[');\n-\t    if (TYPE_SIZE (tmp))\n+\t    if (domain)\n \t      {\n-\t\ttree size = TYPE_SIZE (tmp);\n-\t\tif (TREE_CODE (size) == INTEGER_CST)\n-\t\t  pp_wide_integer (buffer,\n-\t\t\t\t  TREE_INT_CST_LOW (TYPE_SIZE (tmp)) /\n-\t\t\t\t  TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (tmp))));\n-\t\telse if (TREE_CODE (size) == MULT_EXPR)\n-\t\t  dump_generic_node (buffer, TREE_OPERAND (size, 0), spc, flags, false);\n-\t\t/* else punt.  */\n+\t\tif (TYPE_MIN_VALUE (domain)\n+\t\t    && !integer_zerop (TYPE_MIN_VALUE (domain)))\n+\t\t  {\n+\t\t    dump_generic_node (buffer, TYPE_MIN_VALUE (domain),\n+\t\t\t\t       spc, flags, false);\n+\t\t    pp_string (buffer, \" .. \");\n+\t\t  }\n+\n+\t\tif (TYPE_MAX_VALUE (domain))\n+\t\t  dump_generic_node (buffer, TYPE_MAX_VALUE (domain),\n+\t\t\t\t     spc, flags, false);\n \t      }\n+\t    else\n+\t      pp_string (buffer, \"<unknown>\");\n+\n \t    pp_character (buffer, ']');\n-\t    tmp = TREE_TYPE (tmp);\n \t  }\n \tbreak;\n       }"}]}