{"sha": "40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhNGEzN2JkN2RhYjA2ODZkMmYzNjQxNGVlYmMxYjgyNzY0ZGRjNQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@caviumnetworks.com", "date": "2009-08-06T05:24:25Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2009-08-06T05:24:25Z"}, "message": "sync.md (sync_compare_and_swap<mode>, [...]): Rewrite calls to mips_output_sync_loop.\n\n2009-08-05  David Daney  <ddaney@caviumnetworks.com>\n\n\t* gcc/config/mips/sync.md (sync_compare_and_swap<mode>,\n\tcompare_and_swap_12, sync_add<mode>, sync_<optab>_12,\n\tsync_old_<optab>_12, sync_new_<optab>_12, sync_nand_12,\n\tsync_old_nand_12, sync_new_nand_12, sync_sub<mode>,\n\tsync_old_add<mode>, sync_old_sub<mode>, sync_new_add<mode>,\n\tsync_new_sub<mode>, sync_<optab><mode>, sync_old_<optab><mode>,\n\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n\tsync_new_nand<mode>, sync_lock_test_and_set<mode>,\n\ttest_and_set_12): Rewrite calls to mips_output_sync_loop.\n\t* gcc/config/mips/mips-protos.h (mips_output_sync_loop): Make\n\tthe prototype declaration match the definition.\n\t* gcc/config/mips/mips.c (mips_output_sync_loop):  Emit sync\n\tinstructions explicitly.  Add barrier_before and operands\n\tparameters.\n\t* gcc/config/mips/mips.h (MIPS_COMPARE_AND_SWAP,\n\tMIPS_COMPARE_AND_SWAP_12, MIPS_SYNC_OP, MIPS_SYNC_OP_12,\n\tMIPS_SYNC_OLD_OP_12, MIPS_SYNC_NEW_OP_12, MIPS_SYNC_OLD_OP,\n\tMIPS_SYNC_NEW_OP, MIPS_SYNC_NAND, MIPS_SYNC_OLD_NAND,\n\tMIPS_SYNC_NEW_NAND, MIPS_SYNC_EXCHANGE,\n\tMIPS_SYNC_EXCHANGE_12): Remove sync instructions.\n\nFrom-SVN: r150512", "tree": {"sha": "410ada2da163b5b1fc35055380a2bd99d9f04c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410ada2da163b5b1fc35055380a2bd99d9f04c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/comments", "author": null, "committer": null, "parents": [{"sha": "60376e9d194f781b45916c701a9062fe2a25506c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60376e9d194f781b45916c701a9062fe2a25506c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60376e9d194f781b45916c701a9062fe2a25506c"}], "stats": {"total": 230, "additions": 130, "deletions": 100}, "files": [{"sha": "077929d1399d740c5650552c0d1c0db6af0dd3e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "patch": "@@ -1,3 +1,26 @@\n+2009-08-05  David Daney  <ddaney@caviumnetworks.com>\n+\n+\t* gcc/config/mips/sync.md (sync_compare_and_swap<mode>,\n+\tcompare_and_swap_12, sync_add<mode>, sync_<optab>_12,\n+\tsync_old_<optab>_12, sync_new_<optab>_12, sync_nand_12,\n+\tsync_old_nand_12, sync_new_nand_12, sync_sub<mode>,\n+\tsync_old_add<mode>, sync_old_sub<mode>, sync_new_add<mode>,\n+\tsync_new_sub<mode>, sync_<optab><mode>, sync_old_<optab><mode>,\n+\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n+\tsync_new_nand<mode>, sync_lock_test_and_set<mode>,\n+\ttest_and_set_12): Rewrite calls to mips_output_sync_loop.\n+\t* gcc/config/mips/mips-protos.h (mips_output_sync_loop): Make\n+\tthe prototype declaration match the definition.\n+\t* gcc/config/mips/mips.c (mips_output_sync_loop):  Emit sync\n+\tinstructions explicitly.  Add barrier_before and operands\n+\tparameters.\n+\t* gcc/config/mips/mips.h (MIPS_COMPARE_AND_SWAP,\n+\tMIPS_COMPARE_AND_SWAP_12, MIPS_SYNC_OP, MIPS_SYNC_OP_12,\n+\tMIPS_SYNC_OLD_OP_12, MIPS_SYNC_NEW_OP_12, MIPS_SYNC_OLD_OP,\n+\tMIPS_SYNC_NEW_OP, MIPS_SYNC_NAND, MIPS_SYNC_OLD_NAND,\n+\tMIPS_SYNC_NEW_NAND, MIPS_SYNC_EXCHANGE,\n+\tMIPS_SYNC_EXCHANGE_12): Remove sync instructions.\n+\n 2009-08-05  Andrew Pinski  <pinskia@gmail.com>\n \n \t* tree-ssa-alias.c: Fix intervals to use [) syntax."}, {"sha": "c96ecaef86eaec8a14eb29b34eec171e864e0804", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "patch": "@@ -298,7 +298,7 @@ extern const char *mips_output_load_label (void);\n extern const char *mips_output_conditional_branch (rtx, rtx *, const char *,\n \t\t\t\t\t\t   const char *);\n extern const char *mips_output_order_conditional_branch (rtx, rtx *, bool);\n-extern const char *mips_output_sync_loop (const char *);\n+extern const char *mips_output_sync_loop (bool, const char *, rtx *);\n extern const char *mips_output_division (const char *, rtx *);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n extern bool mips_linked_madd_p (rtx, rtx);"}, {"sha": "ade652c8056b76998124c8b8cfacac01f4f3b507", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "patch": "@@ -10750,15 +10750,23 @@ mips_output_order_conditional_branch (rtx insn, rtx *operands, bool inverted_p)\n   return mips_output_conditional_branch (insn, operands, branch[1], branch[0]);\n }\n \f\n-/* Return the assembly code for __sync_*() loop LOOP.  The loop should support\n-   both normal and likely branches, using %? and %~ where appropriate.  */\n+/* Return or emit the assembly code for __sync_*() loop LOOP.  The\n+   loop should support both normal and likely branches, using %? and\n+   %~ where appropriate.  If BARRIER_BEFORE is true a sync sequence is\n+   emitted before the loop.  A sync is always emitted after the loop.\n+   OPERANDS are the insn operands.  */\n \n const char *\n-mips_output_sync_loop (const char *loop)\n+mips_output_sync_loop (bool barrier_before,\n+\t\t       const char *loop, rtx *operands)\n {\n+  if (barrier_before)\n+    output_asm_insn (\"sync\", NULL);\n   /* Use branch-likely instructions to work around the LL/SC R10000 errata.  */\n   mips_branch_likely = TARGET_FIX_R10000;\n-  return loop;\n+  output_asm_insn (loop, operands);\n+\n+  return \"sync\";\n }\n \f\n /* Return the assembly code for DIV or DDIV instruction DIVISION, which has"}, {"sha": "4ce9be365e4f3a8a5d5785f77072442d3ba357c4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "patch": "@@ -3144,14 +3144,12 @@ while (0)\n    and OP is the instruction that should be used to load %3 into a\n    register.  */\n #define MIPS_COMPARE_AND_SWAP(SUFFIX, OP)\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\\\n   \"\\tbne\\t%0,%z2,2f\\n\"\t\t\t\t\\\n   \"\\t\" OP \"\\t%@,%3\\n\"\t\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n+  \"\\tnop%-%]%>%)\\n\"\t\t\t\t\\\n   \"2:\\n\"\n \n /* Return an asm string that atomically:\n@@ -3167,16 +3165,14 @@ while (0)\n \n     OPS are the instructions needed to OR %5 with %@.  */\n #define MIPS_COMPARE_AND_SWAP_12(OPS)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"%(%<%[%|1:\\tll\\t%0,%1\\n\"\t\t\t\\\n   \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n   \"\\tbne\\t%@,%z4,2f\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n   OPS\t\t\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n+  \"\\tnop%-%]%>%)\\n\"\t\t\t\t\\\n   \"2:\\n\"\n \n #define MIPS_COMPARE_AND_SWAP_12_ZERO_OP \"\"\n@@ -3190,13 +3186,11 @@ while (0)\n    SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n    instructions.  */\n #define MIPS_SYNC_OP(SUFFIX, INSN)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\\\n   \"\\t\" INSN \"\\t%@,%@,%1\\n\"\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3213,16 +3207,14 @@ while (0)\n     INSN is already correctly masked -- it instead performs a bitwise\n     not.  */\n #define MIPS_SYNC_OP_12(INSN, AND_OP)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\\t%4,%0\\n\"\t\t\t\t\\\n+  \"%(%<%[%|1:\\tll\\t%4,%0\\n\"\t\t\t\\\n   \"\\tand\\t%@,%4,%2\\n\"\t\t\t\t\\\n   \"\\t\" INSN \"\\t%4,%4,%z3\\n\"\t\t\t\\\n   AND_OP\t\t\t\t\t\\\n   \"\\tor\\t%@,%@,%4\\n\"\t\t\t\t\\\n   \"\\tsc\\t%@,%0\\n\"\t\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n #define MIPS_SYNC_OP_12_AND \"\\tand\\t%4,%4,%1\\n\"\n #define MIPS_SYNC_OP_12_XOR \"\\txor\\t%4,%4,%1\\n\"\n@@ -3244,16 +3236,14 @@ while (0)\n     INSN is already correctly masked -- it instead performs a bitwise\n     not.  */\n #define MIPS_SYNC_OLD_OP_12(INSN, AND_OP)\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"%(%<%[%|1:\\tll\\t%0,%1\\n\"\t\t\t\\\n   \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n   \"\\t\" INSN \"\\t%5,%0,%z4\\n\"\t\t\t\\\n   AND_OP\t\t\t\t\t\\\n   \"\\tor\\t%@,%@,%5\\n\"\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n #define MIPS_SYNC_OLD_OP_12_AND \"\\tand\\t%5,%5,%2\\n\"\n #define MIPS_SYNC_OLD_OP_12_XOR \"\\txor\\t%5,%5,%2\\n\"\n@@ -3273,16 +3263,14 @@ while (0)\n     INSN is already correctly masked -- it instead performs a bitwise\n     not.  */\n #define MIPS_SYNC_NEW_OP_12(INSN, AND_OP)\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"%(%<%[%|1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n   \"\\t\" INSN \"\\t%0,%0,%z4\\n\"\t\t\t\\\n   AND_OP\t\t\t\t\t\\\n   \"\\tor\\t%@,%@,%0\\n\"\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n #define MIPS_SYNC_NEW_OP_12_AND \"\\tand\\t%0,%0,%2\\n\"\n #define MIPS_SYNC_NEW_OP_12_XOR \"\\txor\\t%0,%0,%2\\n\"\n@@ -3296,13 +3284,11 @@ while (0)\n    SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n    instructions.  */\n #define MIPS_SYNC_OLD_OP(SUFFIX, INSN)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\\\n   \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3313,13 +3299,11 @@ while (0)\n    SUFFIX is the suffix that should be added to \"ll\" and \"sc\"\n    instructions.  */\n #define MIPS_SYNC_NEW_OP(SUFFIX, INSN)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\\\n   \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b%~\\n\"\t\t\t\\\n-  \"\\t\" INSN \"\\t%0,%0,%2\\n\"\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\t\" INSN \"\\t%0,%0,%2%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3329,14 +3313,12 @@ while (0)\n    instructions.  INSN is the and instruction needed to and a register\n    with %2.  */\n #define MIPS_SYNC_NAND(SUFFIX, INSN)\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%@,%0\\n\"\t\t\\\n   \"\\t\" INSN \"\\t%@,%@,%1\\n\"\t\t\t\\\n   \"\\tnor\\t%@,%@,%.\\n\"\t\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%0\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3348,14 +3330,12 @@ while (0)\n    instructions.  INSN is the and instruction needed to and a register\n    with %2.  */\n #define MIPS_SYNC_OLD_NAND(SUFFIX, INSN)\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n   \"\\t\" INSN \"\\t%@,%0,%2\\n\"\t\t\t\\\n   \"\\tnor\\t%@,%@,%.\\n\"\t\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3367,14 +3347,12 @@ while (0)\n    instructions.  INSN is the and instruction needed to and a register\n    with %2.  */\n #define MIPS_SYNC_NEW_NAND(SUFFIX, INSN)\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n+  \"%(%<%[%|1:\\tll\" SUFFIX \"\\t%0,%1\\n\"\t\t\t\\\n   \"\\t\" INSN \"\\t%0,%0,%2\\n\"\t\t\t\\\n   \"\\tnor\\t%@,%0,%.\\n\"\t\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b%~\\n\"\t\t\t\\\n-  \"\\tnor\\t%0,%0,%.\\n\"\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnor\\t%0,%0,%.%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3391,8 +3369,7 @@ while (0)\n   \"\\t\" OP \"\\t%@,%2\\n\"\t\t\t\t\\\n   \"\\tsc\" SUFFIX \"\\t%@,%1\\n\"\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n /* Return an asm string that atomically:\n \n@@ -3415,8 +3392,7 @@ while (0)\n   OPS\t\t\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n   \"\\tbeq%?\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\"\n+  \"\\tnop%-%]%>%)\"\n \n #define MIPS_SYNC_EXCHANGE_12_ZERO_OP \"\"\n #define MIPS_SYNC_EXCHANGE_12_NONZERO_OP \"\\tor\\t%@,%@,%4\\n\""}, {"sha": "affb3faff753e56c05f7bceb80c1ba97304e7c0b", "filename": "gcc/config/mips/sync.md", "status": "modified", "additions": 70, "deletions": 47, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a4a37bd7dab0686d2f36414eebc1b82764ddc5/gcc%2Fconfig%2Fmips%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsync.md?ref=40a4a37bd7dab0686d2f36414eebc1b82764ddc5", "patch": "@@ -51,10 +51,12 @@\n \t UNSPEC_COMPARE_AND_SWAP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_COMPARE_AND_SWAP (\"<d>\", \"li\"));\n+    loop = MIPS_COMPARE_AND_SWAP (\"<d>\", \"li\");\n   else\n-    return mips_output_sync_loop (MIPS_COMPARE_AND_SWAP (\"<d>\", \"move\"));\n+    loop = MIPS_COMPARE_AND_SWAP (\"<d>\", \"move\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"32\")])\n \n@@ -84,12 +86,12 @@\n \t\t\t    UNSPEC_COMPARE_AND_SWAP_12))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return (mips_output_sync_loop\n-\t    (MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_NONZERO_OP)));\n+    loop = MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_NONZERO_OP);\n   else\n-    return (mips_output_sync_loop\n-\t    (MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_ZERO_OP)));\n+    loop = MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_ZERO_OP);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40,36\")])\n \n@@ -101,10 +103,12 @@\n \t  UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_OP (\"<d>\", \"<d>addiu\"));\n+    loop = MIPS_SYNC_OP (\"<d>\", \"<d>addiu\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_OP (\"<d>\", \"<d>addu\"));\n+    loop = MIPS_SYNC_OP (\"<d>\", \"<d>addu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -135,8 +139,8 @@\n    (clobber (match_scratch:SI 4 \"=&d\"))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_OP_12 (\"<insn>\", MIPS_SYNC_OP_12_AND)));\n+  const char *loop = MIPS_SYNC_OP_12 (\"<insn>\", MIPS_SYNC_OP_12_AND);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -172,8 +176,8 @@\n    (clobber (match_scratch:SI 5 \"=&d\"))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_OLD_OP_12 (\"<insn>\", MIPS_SYNC_OLD_OP_12_AND)));\n+  const char *loop = MIPS_SYNC_OLD_OP_12 (\"<insn>\", MIPS_SYNC_OLD_OP_12_AND);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -214,8 +218,8 @@\n \t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_NEW_OP_12 (\"<insn>\", MIPS_SYNC_NEW_OP_12_AND)));\n+  const char *loop = MIPS_SYNC_NEW_OP_12 (\"<insn>\", MIPS_SYNC_NEW_OP_12_AND);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -246,8 +250,8 @@\n    (clobber (match_scratch:SI 4 \"=&d\"))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_OP_12 (\"and\", MIPS_SYNC_OP_12_XOR)));\n+  const char *loop = MIPS_SYNC_OP_12 (\"and\", MIPS_SYNC_OP_12_XOR);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -281,8 +285,8 @@\n    (clobber (match_scratch:SI 5 \"=&d\"))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_OLD_OP_12 (\"and\", MIPS_SYNC_OLD_OP_12_XOR)));\n+  const char *loop = MIPS_SYNC_OLD_OP_12 (\"and\", MIPS_SYNC_OLD_OP_12_XOR);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -321,8 +325,8 @@\n \t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n   \"GENERATE_LL_SC\"\n {\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_NEW_OP_12 (\"and\", MIPS_SYNC_NEW_OP_12_XOR)));\n+  const char *loop = MIPS_SYNC_NEW_OP_12 (\"and\", MIPS_SYNC_NEW_OP_12_XOR);\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"40\")])\n \n@@ -334,7 +338,8 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n-  return mips_output_sync_loop (MIPS_SYNC_OP (\"<d>\", \"<d>subu\"));\n+  const char *loop = MIPS_SYNC_OP (\"<d>\", \"<d>subu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -348,10 +353,12 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addiu\"));\n+    loop = MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addiu\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addu\"));\n+    loop = MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -365,7 +372,8 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n-  return mips_output_sync_loop (MIPS_SYNC_OLD_OP (\"<d>\", \"<d>subu\"));\n+  const char *loop = MIPS_SYNC_OLD_OP (\"<d>\", \"<d>subu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -379,10 +387,12 @@\n \t UNSPEC_SYNC_NEW_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addiu\"));\n+    loop = MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addiu\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addu\"));\n+    loop = MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -396,7 +406,8 @@\n \t UNSPEC_SYNC_NEW_OP))]\n   \"GENERATE_LL_SC\"\n {\n-  return mips_output_sync_loop (MIPS_SYNC_NEW_OP (\"<d>\", \"<d>subu\"));\n+  const char *loop = MIPS_SYNC_NEW_OP (\"<d>\", \"<d>subu\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -408,10 +419,12 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_OP (\"<d>\", \"<immediate_insn>\"));\n+    loop = MIPS_SYNC_OP (\"<d>\", \"<immediate_insn>\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_OP (\"<d>\", \"<insn>\"));\n+    loop = MIPS_SYNC_OP (\"<d>\", \"<insn>\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -425,11 +438,12 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_OLD_OP (\"<d>\", \"<immediate_insn>\")));\n+    loop = MIPS_SYNC_OLD_OP (\"<d>\", \"<immediate_insn>\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_OLD_OP (\"<d>\", \"<insn>\"));\n+    loop = MIPS_SYNC_OLD_OP (\"<d>\", \"<insn>\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -443,11 +457,12 @@\n \t UNSPEC_SYNC_NEW_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_NEW_OP (\"<d>\", \"<immediate_insn>\")));\n+    loop = MIPS_SYNC_NEW_OP (\"<d>\", \"<immediate_insn>\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_NEW_OP (\"<d>\", \"<insn>\"));\n+    loop = MIPS_SYNC_NEW_OP (\"<d>\", \"<insn>\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"28\")])\n \n@@ -457,10 +472,12 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_NAND (\"<d>\", \"andi\"));\n+    loop = MIPS_SYNC_NAND (\"<d>\", \"andi\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_NAND (\"<d>\", \"and\"));\n+    loop = MIPS_SYNC_NAND (\"<d>\", \"and\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"32\")])\n \n@@ -472,10 +489,12 @@\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_OLD_NAND (\"<d>\", \"andi\"));\n+    loop = MIPS_SYNC_OLD_NAND (\"<d>\", \"andi\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_OLD_NAND (\"<d>\", \"and\"));\n+    loop = MIPS_SYNC_OLD_NAND (\"<d>\", \"and\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"32\")])\n \n@@ -487,10 +506,12 @@\n \t UNSPEC_SYNC_NEW_OP))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_NEW_NAND (\"<d>\", \"andi\"));\n+    loop = MIPS_SYNC_NEW_NAND (\"<d>\", \"andi\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_NEW_NAND (\"<d>\", \"and\"));\n+    loop = MIPS_SYNC_NEW_NAND (\"<d>\", \"and\");\n+  return mips_output_sync_loop (true, loop, operands);\n }\n   [(set_attr \"length\" \"32\")])\n \n@@ -502,10 +523,12 @@\n \t UNSPEC_SYNC_EXCHANGE))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return mips_output_sync_loop (MIPS_SYNC_EXCHANGE (\"<d>\", \"li\"));\n+    loop = MIPS_SYNC_EXCHANGE (\"<d>\", \"li\");\n   else\n-    return mips_output_sync_loop (MIPS_SYNC_EXCHANGE (\"<d>\", \"move\"));\n+    loop = MIPS_SYNC_EXCHANGE (\"<d>\", \"move\");\n+  return mips_output_sync_loop (false, loop, operands);\n }\n   [(set_attr \"length\" \"24\")])\n \n@@ -532,11 +555,11 @@\n \t  UNSPEC_SYNC_EXCHANGE_12))]\n   \"GENERATE_LL_SC\"\n {\n+  const char *loop;\n   if (which_alternative == 0)\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_NONZERO_OP)));\n+    loop = MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_NONZERO_OP);\n   else\n-    return (mips_output_sync_loop\n-\t    (MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_ZERO_OP)));\n+    loop = MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_ZERO_OP);\n+  return mips_output_sync_loop (false, loop, operands);\n }\n   [(set_attr \"length\" \"28,24\")])"}]}