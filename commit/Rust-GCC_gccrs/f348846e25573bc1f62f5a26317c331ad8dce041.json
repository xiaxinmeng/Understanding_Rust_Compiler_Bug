{"sha": "f348846e25573bc1f62f5a26317c331ad8dce041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0ODg0NmUyNTU3M2JjMWY2MmY1YTI2MzE3YzMzMWFkOGRjZTA0MQ==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-11T11:14:07Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-11T11:14:07Z"}, "message": "[GCC][PATCH][ARM]Add ACLE intrinsics for dot product (vusdot - vector, v<us/su>dot - by element) for AArch32 AdvSIMD ARMv8.6 Extension\n\nThis patch adds the ARMv8.6 Extension ACLE intrinsics for dot product\noperations (vector/by element) to the ARM back-end.\n\nThese are:\nusdot (vector), <us/su>dot (by element).\n\nThe functions are optional from ARMv8.2-a as -march=armv8.2-a+i8mm and\nfor ARM they remain optional after as of ARMv8.6-a.\n\nThe functions are declared in arm_neon.h, RTL patterns are defined to\ngenerate assembler and tests are added to verify and perform adequate checks.\n\nRegression testing on arm-none-eabi passed successfully.\n\ngcc/ChangeLog:\n\n2020-02-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* config/arm/arm-builtins.c (enum arm_type_qualifiers):\n\t(USTERNOP_QUALIFIERS): New define.\n\t(USMAC_LANE_QUADTUP_QUALIFIERS): New define.\n\t(SUMAC_LANE_QUADTUP_QUALIFIERS): New define.\n\t(arm_expand_builtin_args): Add case ARG_BUILTIN_LANE_QUADTUP_INDEX.\n\t(arm_expand_builtin_1): Add qualifier_lane_quadtup_index.\n\t* config/arm/arm_neon.h (vusdot_s32): New.\n\t(vusdot_lane_s32): New.\n\t(vusdotq_lane_s32): New.\n\t(vsudot_lane_s32): New.\n\t(vsudotq_lane_s32): New.\n\t* config/arm/arm_neon_builtins.def (usdot, usdot_lane,sudot_lane): New.\n\t* config/arm/iterators.md (DOTPROD_I8MM): New.\n\t(sup, opsuffix): Add <us/su>.\n\t* config/arm/neon.md (neon_usdot, <us/su>dot_lane: New.\n\t* config/arm/unspecs.md (UNSPEC_DOT_US, UNSPEC_DOT_SU): New.\n\ngcc/testsuite/ChangeLog:\n\n2020-02-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* gcc.target/arm/simd/vdot-2-1.c: New test.\n\t* gcc.target/arm/simd/vdot-2-2.c: New test.\n\t* gcc.target/arm/simd/vdot-2-3.c: New test.\n\t* gcc.target/arm/simd/vdot-2-4.c: New test.", "tree": {"sha": "525854ccd2afbb7cb7e5bc3149bb38ce3ad50090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525854ccd2afbb7cb7e5bc3149bb38ce3ad50090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f348846e25573bc1f62f5a26317c331ad8dce041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f348846e25573bc1f62f5a26317c331ad8dce041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f348846e25573bc1f62f5a26317c331ad8dce041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f348846e25573bc1f62f5a26317c331ad8dce041/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667afe5a49ccb73947c6b895780d266f4a4dac73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667afe5a49ccb73947c6b895780d266f4a4dac73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667afe5a49ccb73947c6b895780d266f4a4dac73"}], "stats": {"total": 391, "additions": 385, "deletions": 6}, "files": [{"sha": "fa4e59e32efe3cc06b32da9dc372f4b6359e5ee3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -1,3 +1,22 @@\n+2020-02-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* config/arm/arm-builtins.c (enum arm_type_qualifiers): \n+\t(USTERNOP_QUALIFIERS): New define.\n+\t(USMAC_LANE_QUADTUP_QUALIFIERS): New define.\n+\t(SUMAC_LANE_QUADTUP_QUALIFIERS): New define.\n+\t(arm_expand_builtin_args): Add case ARG_BUILTIN_LANE_QUADTUP_INDEX.\n+\t(arm_expand_builtin_1): Add qualifier_lane_quadtup_index.\n+\t* config/arm/arm_neon.h (vusdot_s32): New.\n+\t(vusdot_lane_s32): New.\n+\t(vusdotq_lane_s32): New.\n+\t(vsudot_lane_s32): New.\n+\t(vsudotq_lane_s32): New.\n+\t* config/arm/arm_neon_builtins.def (usdot, usdot_lane,sudot_lane): New.\n+\t* config/arm/iterators.md (DOTPROD_I8MM): New.\n+\t(sup, opsuffix): Add <us/su>.\n+\t* config/arm/neon.md (neon_usdot, <us/su>dot_lane: New.\n+\t* config/arm/unspecs.md (UNSPEC_DOT_US, UNSPEC_DOT_SU): New.\n+\n 2020-02-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93661"}, {"sha": "4d31405cf6e09e3a61faa3e8142940bbdb23c60a", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -86,7 +86,10 @@ enum arm_type_qualifiers\n   qualifier_const_void_pointer = 0x802,\n   /* Lane indices selected in pairs - must be within range of previous\n      argument = a vector.  */\n-  qualifier_lane_pair_index = 0x1000\n+  qualifier_lane_pair_index = 0x1000,\n+  /* Lane indices selected in quadtuplets - must be within range of previous\n+     argument = a vector.  */\n+  qualifier_lane_quadtup_index = 0x2000\n };\n \n /*  The qualifier_internal allows generation of a unary builtin from\n@@ -122,6 +125,13 @@ arm_unsigned_uternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned };\n #define UTERNOP_QUALIFIERS (arm_unsigned_uternop_qualifiers)\n \n+/* T (T, unsigned T, T).  */\n+static enum arm_type_qualifiers\n+arm_usternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned,\n+      qualifier_none };\n+#define USTERNOP_QUALIFIERS (arm_usternop_qualifiers)\n+\n /* T (T, immediate).  */\n static enum arm_type_qualifiers\n arm_binop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -176,6 +186,20 @@ arm_umac_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_lane_index };\n #define UMAC_LANE_QUALIFIERS (arm_umac_lane_qualifiers)\n \n+/* T (T, unsigned T, T, lane index).  */\n+static enum arm_type_qualifiers\n+arm_usmac_lane_quadtup_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned,\n+      qualifier_none, qualifier_lane_quadtup_index };\n+#define USMAC_LANE_QUADTUP_QUALIFIERS (arm_usmac_lane_quadtup_qualifiers)\n+\n+/* T (T, T, unsigend T, lane index).  */\n+static enum arm_type_qualifiers\n+arm_sumac_lane_quadtup_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_unsigned, qualifier_lane_quadtup_index };\n+#define SUMAC_LANE_QUADTUP_QUALIFIERS (arm_sumac_lane_quadtup_qualifiers)\n+\n /* T (T, T, immediate).  */\n static enum arm_type_qualifiers\n arm_ternop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -2177,6 +2201,7 @@ typedef enum {\n   ARG_BUILTIN_LANE_INDEX,\n   ARG_BUILTIN_STRUCT_LOAD_STORE_LANE_INDEX,\n   ARG_BUILTIN_LANE_PAIR_INDEX,\n+  ARG_BUILTIN_LANE_QUADTUP_INDEX,\n   ARG_BUILTIN_NEON_MEMORY,\n   ARG_BUILTIN_MEMORY,\n   ARG_BUILTIN_STOP\n@@ -2325,11 +2350,24 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t      if (CONST_INT_P (op[argc]))\n \t\t{\n \t\t  machine_mode vmode = mode[argc - 1];\n-\t\t  neon_lane_bounds (op[argc], 0, GET_MODE_NUNITS (vmode) / 2, exp);\n+\t\t  neon_lane_bounds (op[argc], 0,\n+\t\t\t\t    GET_MODE_NUNITS (vmode) / 2, exp);\n+\t\t}\n+\t      /* If the lane index isn't a constant then error out.  */\n+\t      goto constant_arg;\n+\n+\t    case ARG_BUILTIN_LANE_QUADTUP_INDEX:\n+\t      /* Previous argument must be a vector, which this indexes.  */\n+\t      gcc_assert (argc > 0);\n+\t      if (CONST_INT_P (op[argc]))\n+\t\t{\n+\t\t  machine_mode vmode = mode[argc - 1];\n+\t\t  neon_lane_bounds (op[argc], 0,\n+\t\t\t\t    GET_MODE_NUNITS (vmode) / 4, exp);\n \t\t}\n-\t      /* If the lane index isn't a constant then the next\n-\t\t case will error.  */\n-\t      /* Fall through.  */\n+\t      /* If the lane index isn't a constant then error out.  */\n+\t      goto constant_arg;\n+\n \t    case ARG_BUILTIN_CONSTANT:\n constant_arg:\n \t      if (!(*insn_data[icode].operand[opno].predicate)\n@@ -2493,6 +2531,8 @@ arm_expand_builtin_1 (int fcode, tree exp, rtx target,\n \targs[k] = ARG_BUILTIN_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_lane_pair_index)\n \targs[k] = ARG_BUILTIN_LANE_PAIR_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_lane_quadtup_index)\n+\targs[k] = ARG_BUILTIN_LANE_QUADTUP_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_struct_load_store_lane_index)\n \targs[k] = ARG_BUILTIN_STRUCT_LOAD_STORE_LANE_INDEX;\n       else if (d->qualifiers[qualifiers_k] & qualifier_immediate)"}, {"sha": "81f550988f7b987b4efe504ccc849e3f6fdc692a", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -18742,6 +18742,52 @@ vcmlaq_rot270_laneq_f32 (float32x4_t __r, float32x4_t __a, float32x4_t __b,\n   return __builtin_neon_vcmla_lane270v4sf (__r, __a, __b, __index);\n }\n \n+\n+/* AdvSIMD Matrix Multiply-Accumulate and Dot Product intrinsics.  */\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+i8mm\")\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_s32 (int32x2_t __r, uint8x8_t __a, int8x8_t __b)\n+{\n+  return __builtin_neon_usdotv8qi_ssus (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_lane_s32 (int32x2_t __r, uint8x8_t __a,\n+\t\t int8x8_t __b, const int __index)\n+{\n+  return __builtin_neon_usdot_lanev8qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_lane_s32 (int32x4_t __r, uint8x16_t __a,\n+\t\t  int8x8_t __b, const int __index)\n+{\n+  return __builtin_neon_usdot_lanev16qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudot_lane_s32 (int32x2_t __r, int8x8_t __a,\n+\t\t uint8x8_t __b, const int __index)\n+{\n+  return __builtin_neon_sudot_lanev8qi_sssus (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudotq_lane_s32 (int32x4_t __r, int8x16_t __a,\n+\t\t  uint8x8_t __b, const int __index)\n+{\n+  return __builtin_neon_sudot_lanev16qi_sssus (__r, __a, __b, __index);\n+}\n+\n+#pragma GCC pop_options\n+\n #pragma GCC pop_options\n #endif\n "}, {"sha": "b4537ff5de97d6a59435cc7fb7afd5c4c2aa4d44", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -352,6 +352,10 @@ VAR2 (UTERNOP, udot, v8qi, v16qi)\n VAR2 (MAC_LANE, sdot_lane, v8qi, v16qi)\n VAR2 (UMAC_LANE, udot_lane, v8qi, v16qi)\n \n+VAR1 (USTERNOP, usdot, v8qi)\n+VAR2 (USMAC_LANE_QUADTUP, usdot_lane, v8qi, v16qi)\n+VAR2 (SUMAC_LANE_QUADTUP, sudot_lane, v8qi, v16qi)\n+\n VAR4 (BINOP, vcadd90, v4hf, v2sf, v8hf, v4sf)\n VAR4 (BINOP, vcadd270, v4hf, v2sf, v8hf, v4sf)\n VAR4 (TERNOP, vcmla0, v2sf, v4sf, v4hf, v8hf)"}, {"sha": "f8a76fb59cb8afcba762593d3617139490e3a091", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -480,6 +480,8 @@\n \n (define_int_iterator DOTPROD [UNSPEC_DOT_S UNSPEC_DOT_U])\n \n+(define_int_iterator DOTPROD_I8MM [UNSPEC_DOT_US UNSPEC_DOT_SU])\n+\n (define_int_iterator VFMLHALVES [UNSPEC_VFML_LO UNSPEC_VFML_HI])\n \n (define_int_iterator VCADD [UNSPEC_VCADD90 UNSPEC_VCADD270])\n@@ -938,6 +940,7 @@\n   (UNSPEC_VRSRA_S_N \"s\") (UNSPEC_VRSRA_U_N \"u\")\n   (UNSPEC_VCVTH_S \"s\") (UNSPEC_VCVTH_U \"u\")\n   (UNSPEC_DOT_S \"s\") (UNSPEC_DOT_U \"u\")\n+  (UNSPEC_DOT_US \"us\") (UNSPEC_DOT_SU \"su\")\n   (UNSPEC_SSAT16 \"s\") (UNSPEC_USAT16 \"u\")\n ])\n \n@@ -1169,6 +1172,9 @@\n (define_int_attr MRRC [(VUNSPEC_MRRC \"MRRC\") (VUNSPEC_MRRC2 \"MRRC2\")])\n \n (define_int_attr opsuffix [(UNSPEC_DOT_S \"s8\")\n-\t\t\t   (UNSPEC_DOT_U \"u8\")])\n+\t\t\t   (UNSPEC_DOT_U \"u8\")\n+\t\t\t   (UNSPEC_DOT_US \"s8\")\n+\t\t\t   (UNSPEC_DOT_SU \"u8\")\n+\t\t\t   ])\n \n (define_int_attr smlaw_op [(UNSPEC_SMLAWB \"smlawb\") (UNSPEC_SMLAWT \"smlawt\")])"}, {"sha": "5d085dc6f613f6ab4ce3c4302d6021b01446327f", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -3279,6 +3279,20 @@\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n \n+;; These instructions map to the __builtins for the Dot Product operations.\n+(define_insn \"neon_usdot<vsi2qi>\"\n+  [(set (match_operand:VCVTI 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTI\n+\t  (unspec:VCVTI\n+\t    [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t    (match_operand:<VSI2QI> 3 \"register_operand\" \"w\")]\n+\t    UNSPEC_DOT_US)\n+\t  (match_operand:VCVTI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n+  \"vusdot.s8\\\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n ;; These instructions map to the __builtins for the Dot Product\n ;; indexed operations.\n (define_insn \"neon_<sup>dot_lane<vsi2qi>\"\n@@ -3298,6 +3312,25 @@\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n \n+;; These instructions map to the __builtins for the Dot Product\n+;; indexed operations in the v8.6 I8MM extension.\n+(define_insn \"neon_<sup>dot_lane<vsi2qi>\"\n+  [(set (match_operand:VCVTI 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTI\n+\t  (unspec:VCVTI\n+\t   [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8QI 3 \"register_operand\" \"t\")\n+\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t    DOTPROD_I8MM)\n+\t  (match_operand:VCVTI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n+  {\n+    operands[4] = GEN_INT (INTVAL (operands[4]));\n+    return \"v<sup>dot.<opsuffix>\\\\t%<V_reg>0, %<V_reg>2, %P3[%c4]\";\n+  }\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n ;; These expands map to the Dot Product optab the vectorizer checks for.\n ;; The auto-vectorizer expects a dot product builtin that also does an\n ;; accumulation into the provided register."}, {"sha": "2dd62467fe6e221ad569c7186454b1460436efef", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -493,6 +493,8 @@\n   UNSPEC_VRNDX\n   UNSPEC_DOT_S\n   UNSPEC_DOT_U\n+  UNSPEC_DOT_US\n+  UNSPEC_DOT_SU\n   UNSPEC_VFML_LO\n   UNSPEC_VFML_HI\n   UNSPEC_VCADD90"}, {"sha": "e90ba18466fc02461b0e2d7d9bd7af2d991653f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -1,3 +1,10 @@\n+2020-02-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/arm/simd/vdot-2-1.c: New test.\n+\t* gcc.target/arm/simd/vdot-2-2.c: New test.\n+\t* gcc.target/arm/simd/vdot-2-3.c: New test.\n+\t* gcc.target/arm/simd/vdot-2-4.c: New test.\n+\n 2020-02-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93661"}, {"sha": "4d5f07b771bbb3ef44edeb60881964ed7592356d", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"-O -save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+/* Unsigned-Signed Dot Product instructions.  */\n+\n+/*\n+**usfoo:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d2\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**usfoo_lane:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d2\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**usfooq_lane:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, d4\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  return vusdotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_lane:\n+**\t...\n+**\tvsudot\\.u8\td0, d1, d2\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  return vsudot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**sfooq_lane:\n+**\t...\n+**\tvsudot\\.u8\tq0, q1, d4\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  return vsudotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**usfoo_untied:\n+**\t...\n+**\tvusdot\\.s8\td1, d2, d3\n+**\tvmov\td0, d1  @ v2si\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**usfoo_lane_untied:\n+**\t...\n+**\tvusdot.s8\td1, d2, d3\\[0\\]\n+**\tvmov\td0, d1  @ v2si\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_lane_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}\n+"}, {"sha": "b7b76e27486b1dab6b496989fe556f228d130fc3", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-2.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do assemble { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"-O -save-temps -mbig-endian\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+/* Unsigned-Signed Dot Product instructions.  */\n+\n+/*\n+**usfoo:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d2\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**usfoo_lane:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d2\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**usfooq_lane:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, d4\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  return vusdotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_lane:\n+**\t...\n+**\tvsudot\\.u8\td0, d1, d2\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  return vsudot_lane_s32 (r, x, y, 0);\n+}\n+\n+/*\n+**sfooq_lane:\n+**\t...\n+**\tvsudot\\.u8\tq0, q1, d4\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  return vsudotq_lane_s32 (r, x, y, 1);\n+}\n+\n+/*\n+**usfoo_untied:\n+**\t...\n+**\tvusdot\\.s8\td1, d2, d3\n+**\tvmov\td0, d1  @ v2si\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_s32 (r, x, y);\n+}\n+\n+/*\n+**usfoo_lane_untied:\n+**\t...\n+**\tvusdot.s8\td1, d2, d3\\[0\\]\n+**\tvmov\td0, d1  @ v2si\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_lane_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  return vusdot_lane_s32 (r, x, y, 0);\n+}"}, {"sha": "e14fe8f4433c9bf4c3347ebf728157bdb54861b2", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-3.c?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Unsigned-Signed Dot Product instructions.  */\n+\n+int32x2_t usfoo_lane (int32x2_t r, uint8x8_t x, int8x8_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vusdot_lane_s32 (r, x, y, -1);\n+}\n+\n+\n+int32x4_t usfooq_lane (int32x4_t r, uint8x16_t x, int8x8_t y)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vusdotq_lane_s32 (r, x, y, 2);\n+}"}, {"sha": "fb7ebb484e1778a1d06611f8c8a639d4c0dcb9a7", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f348846e25573bc1f62f5a26317c331ad8dce041/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-4.c?ref=f348846e25573bc1f62f5a26317c331ad8dce041", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+int32x2_t sfoo_lane (int32x2_t r, int8x8_t x, uint8x8_t y)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vsudot_lane_s32 (r, x, y, -1);\n+}\n+\n+int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n+{\n+  /* { dg-error \"lane 2 out of range 0 - 1\" \"\" { target *-*-* } 0 } */\n+  return vsudotq_lane_s32 (r, x, y, 2);\n+}"}]}