{"sha": "1fa782725c0a33e23e5f280be091c29e116768bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhNzgyNzI1YzBhMzNlMjNlNWYyODBiZTA5MWMyOWUxMTY3NjhiYg==", "commit": {"author": {"name": "Eric Blake", "email": "ebb9@email.byu.edu", "date": "2002-03-06T18:54:45Z"}, "committer": {"name": "Eric Blake", "email": "ericb@gcc.gnu.org", "date": "2002-03-06T18:54:45Z"}, "message": "unicode-decomp.pl: Move from chartables.pl...\n\n2002-03-04  Eric Blake  <ebb9@email.byu.edu>\n\n\t* scripts/unicode-decomp.pl: Move from chartables.pl, and remove\n\tthe code for generating include/java-chartables.h.\n\t* scripts/unicode-blocks.pl: Move from scripts/blocks.pl, and\n\tmerge with Classpath.\n\t* scripts/unicode-muncher.pl: Copy from Classpath.\n\t* scritps/MakeCharTables.java: New file.\n\t* gnu/gcj/convert/Blocks-3.txt: New file.\n\t* gnu/gcj/convert/UnicodeData-3.0.0.txt: New file.\n\t* gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html: New file.\n\t* gnu/java/lang/CharData.java: Copy from Classpath.\n\t* Makefile.am (ordinary_java_source_files): Add\n\tgnu/java/lang/CharData.java.\n\t* configure.in: Remove --enable-fast-character option.\n\t* java/lang/Character.java: Merge algorithms and Javadoc with\n\tClasspath.\n\t* java/lang/natCharacter.cc: Implement Unicode lookup table more\n\tefficiently.\n\t* include/java-chardecomp.h: Regenerate.\n\t* include/java-chartables.h: Regenerate.\n\nFrom-SVN: r50368", "tree": {"sha": "39e77dc5162e7baedcffa2d9b50203ada00b27d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e77dc5162e7baedcffa2d9b50203ada00b27d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa782725c0a33e23e5f280be091c29e116768bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa782725c0a33e23e5f280be091c29e116768bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa782725c0a33e23e5f280be091c29e116768bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa782725c0a33e23e5f280be091c29e116768bb/comments", "author": null, "committer": null, "parents": [{"sha": "b87e4a4c6f15f89994f99205995f1664ae0b9950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87e4a4c6f15f89994f99205995f1664ae0b9950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87e4a4c6f15f89994f99205995f1664ae0b9950"}], "stats": {"total": 101332, "additions": 16492, "deletions": 84840}, "files": [{"sha": "a769c463ca0b8da9caf74698024708701aca9f5e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -1,3 +1,25 @@\n+2002-03-04  Eric Blake  <ebb9@email.byu.edu>\n+\n+\t* scripts/unicode-decomp.pl: Move from chartables.pl, and remove\n+\tthe code for generating include/java-chartables.h.\n+\t* scripts/unicode-blocks.pl: Move from scripts/blocks.pl, and\n+\tmerge with Classpath.\n+\t* scripts/unicode-muncher.pl: Copy from Classpath.\n+\t* scritps/MakeCharTables.java: New file.\n+\t* gnu/gcj/convert/Blocks-3.txt: New file.\n+\t* gnu/gcj/convert/UnicodeData-3.0.0.txt: New file.\n+\t* gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html: New file.\n+\t* gnu/java/lang/CharData.java: Copy from Classpath.\n+\t* Makefile.am (ordinary_java_source_files): Add\n+\tgnu/java/lang/CharData.java.\n+\t* configure.in: Remove --enable-fast-character option.\n+\t* java/lang/Character.java: Merge algorithms and Javadoc with\n+\tClasspath.\n+\t* java/lang/natCharacter.cc: Implement Unicode lookup table more\n+\tefficiently.\n+\t* include/java-chardecomp.h: Regenerate.\n+\t* include/java-chartables.h: Regenerate.\n+\n 2002-03-06  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/awt/MediaTracker.java: Implemented."}, {"sha": "b3cbb0c700e56dd47fc9791c3cd8e0060d4e6c0d", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -1288,6 +1288,7 @@ gnu/java/io/NullOutputStream.java \\\n gnu/java/io/ObjectIdentityWrapper.java \\\n gnu/java/lang/ArrayHelper.java \\\n gnu/java/lang/ClassHelper.java \\\n+gnu/java/lang/CharData.java \\\n gnu/java/lang/reflect/TypeSignature.java \\\n gnu/java/locale/Calendar.java \\\n gnu/java/locale/Calendar_de.java \\"}, {"sha": "fef7d8742cf10b4baa946ecac69b86edc8e2a0c3", "filename": "libjava/chartables.pl", "status": "removed", "additions": 0, "deletions": 965, "changes": 965, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87e4a4c6f15f89994f99205995f1664ae0b9950/libjava%2Fchartables.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87e4a4c6f15f89994f99205995f1664ae0b9950/libjava%2Fchartables.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fchartables.pl?ref=b87e4a4c6f15f89994f99205995f1664ae0b9950", "patch": "@@ -1,965 +0,0 @@\n-# chartables.pl - A perl program to generate tables for use by the\n-# Character class.\n-\n-# Copyright (C) 1998, 1999  Red Hat, Inc.\n-#\n-# This file is part of libjava.\n-# \n-# This software is copyrighted work licensed under the terms of the\n-# Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-# details.\n-\n-# This program requires a `unidata.txt' file of the form distributed\n-# on the Unicode 2.0 CD ROM.  Or, get it more conveniently here:\n-# ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData-Latest.txt\n-# Version `2.1.8' of this file was last used to update the Character class.\n-\n-# Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n-# \"The Java Language Specification\", ISBN 0-201-63451-1\n-# plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n-\n-# Usage: perl chartables.pl [-n] UnicodeData-VERSION.txt\n-# If this exits with nonzero status, then you must investigate the\n-# cause of the problem.\n-# Diagnostics and other information to stderr.\n-# This creates the new include/java-chartables.h and\n-# include/java-chardecomp.h files directly.\n-# With -n, the files are not created, but all processing\n-# still occurs.\n-\n-# Fields in the table.\n-$CODE = 0;\n-$NAME = 1;\n-$CATEGORY = 2;\n-$DECOMPOSITION = 5;\n-$DECIMAL = 6;\n-$DIGIT = 7;\n-$NUMERIC = 8;\n-$UPPERCASE = 12;\n-$LOWERCASE = 13;\n-$TITLECASE = 14;\n-\n-# A special case.\n-$TAMIL_DIGIT_ONE  = 0x0be7;\n-$TAMIL_DIGIT_NINE = 0x0bef;\n-\n-# These are endpoints of legitimate gaps in the tables.\n-$CJK_IDEOGRAPH_END = 0x9fa5;\n-$HANGUL_END = 0xd7a3;\n-$HIGH_SURROGATE_END = 0xdb7f;\n-$PRIVATE_HIGH_SURROGATE_END = 0xdbff;\n-$LOW_SURROGATE_END = 0xdfff;\n-$PRIVATE_END = 0xf8ff;\n-\n-%title_to_upper = ();\n-%title_to_lower = ();\n-%numerics  = ();\n-%name = ();\n-\n-@digit_start = ();\n-@digit_end   = ();\n-\n-@space_start = ();\n-@space_end   = ();\n-\n-# @letter_start = ();\n-# @letter_end   = ();\n-\n-@all_start = ();\n-@all_end   = ();\n-@all_cats  = ();\n-\n-@upper_start = ();\n-@upper_end   = ();\n-@upper_map   = ();\n-%upper_anom  = ();\n-\n-@lower_start = ();\n-@lower_end   = ();\n-@lower_map   = ();\n-%lower_anom  = ();\n-\n-@attributes = ();\n-\n-# There are a few characters which actually need two attributes.\n-# These are special-cased.\n-$ROMAN_START = 0x2160;\n-$ROMAN_END   = 0x217f;\n-%second_attributes = ();\n-\n-$prevcode = -1;\n-$status = 0;\n-\n-%category_map =\n-(\n- 'Mn' => 'NON_SPACING_MARK',\n- 'Mc' => 'COMBINING_SPACING_MARK',\n- 'Me' => 'ENCLOSING_MARK',\n- 'Nd' => 'DECIMAL_DIGIT_NUMBER',\n- 'Nl' => 'LETTER_NUMBER',\n- 'No' => 'OTHER_NUMBER',\n- 'Zs' => 'SPACE_SEPARATOR',\n- 'Zl' => 'LINE_SEPARATOR',\n- 'Zp' => 'PARAGRAPH_SEPARATOR',\n- 'Cc' => 'CONTROL',\n- 'Cf' => 'FORMAT',\n- 'Cs' => 'SURROGATE',\n- 'Co' => 'PRIVATE_USE',\n- 'Cn' => 'UNASSIGNED',\n- 'Lu' => 'UPPERCASE_LETTER',\n- 'Ll' => 'LOWERCASE_LETTER',\n- 'Lt' => 'TITLECASE_LETTER',\n- 'Lm' => 'MODIFIER_LETTER',\n- 'Lo' => 'OTHER_LETTER',\n- 'Pc' => 'CONNECTOR_PUNCTUATION',\n- 'Pd' => 'DASH_PUNCTUATION',\n- 'Ps' => 'START_PUNCTUATION',\n- 'Pe' => 'END_PUNCTUATION',\n- 'Pi' => 'START_PUNCTUATION',\n- 'Pf' => 'END_PUNCTUATION',\n- 'Po' => 'OTHER_PUNCTUATION',\n- 'Sm' => 'MATH_SYMBOL',\n- 'Sc' => 'CURRENCY_SYMBOL',\n- 'Sk' => 'MODIFIER_SYMBOL',\n- 'So' => 'OTHER_SYMBOL'\n- );\n-\n-# These maps characters to their decompositions.\n-%canonical_decomposition = ();\n-%full_decomposition = ();\n-\n-\n-# Handle `-n' and open output files.\n-local ($f1, $f2) = ('include/java-chartables.h',\n-\t\t    'include/java-chardecomp.h');\n-if ($ARGV[0] eq '-n')\n-{\n-    shift @ARGV;\n-    $f1 = '/dev/null';\n-    $f2 = '/dev/null';\n-}\n-\n-open (CHARTABLE, \"> $f1\");\n-open (DECOMP, \"> $f2\");\n-\n-# Process the Unicode file.\n-while (<>)\n-{\n-    chop;\n-    # Specify a limit for split so that we pick up trailing fields.\n-    # We make the limit larger than we need, to catch the case where\n-    # there are extra fields.\n-    @fields = split (';', $_, 30);\n-    # Convert code to number.\n-    $ncode = hex ($fields[$CODE]);\n-\n-    if ($#fields != 14)\n-    {\n-\tprint STDERR (\"Entry for \\\\u\", $fields[$CODE],\n-\t\t      \" has wrong number of fields: \", $#fields, \"\\n\");\n-    }\n-\n-    $name{$fields[$CODE]} = $fields[$NAME];\n-\n-    # If we've found a gap in the table, fill it in.\n-    if ($ncode != $prevcode + 1)\n-    {\n-\t&process_gap (*fields, $prevcode, $ncode);\n-    }\n-\n-    &process_char (*fields, $ncode);\n-\n-    $prevcode = $ncode;\n-}\n-\n-if ($prevcode != 0xffff)\n-{\n-    # Setting of `fields' parameter doesn't matter here.\n-    &process_gap (*fields, $prevcode, 0x10000);\n-}\n-\n-print CHARTABLE \"// java-chartables.h - Character tables for java.lang.Character -*- c++ -*-\\n\\n\";\n-print CHARTABLE \"#ifndef __JAVA_CHARTABLES_H__\\n\";\n-print CHARTABLE \"#define __JAVA_CHARTABLES_H__\\n\\n\";\n-print CHARTABLE \"// These tables are automatically generated by the chartables.pl\\n\";\n-print CHARTABLE \"// script.  DO NOT EDIT the tables.  Instead, fix the script\\n\";\n-print CHARTABLE \"// and run it again.\\n\\n\";\n-print CHARTABLE \"// This file should only be included by natCharacter.cc\\n\\n\";\n-\n-\n-$bytes = 0;\n-\n-# Titlecase mapping tables.\n-if ($#title_to_lower != $#title_to_upper)\n-{\n-    # If this fails we need to reimplement toTitleCase.\n-    print STDERR \"titlecase mappings have different sizes\\n\";\n-    $status = 1;\n-}\n-# Also ensure that the tables are entirely parallel.\n-foreach $key (sort keys %title_to_lower)\n-{\n-    if (! defined $title_to_upper{$key})\n-    {\n-\tprint STDERR \"titlecase mappings have different entries\\n\";\n-\t$status = 1;\n-    }\n-}\n-&print_single_map (\"title_to_lower_table\", %title_to_lower);\n-&print_single_map (\"title_to_upper_table\", %title_to_upper);\n-\n-print CHARTABLE \"#ifdef COMPACT_CHARACTER\\n\\n\";\n-\n-printf CHARTABLE \"#define TAMIL_DIGIT_ONE 0x%04x\\n\\n\", $TAMIL_DIGIT_ONE;\n-\n-# All numeric values.\n-&print_numerics;\n-\n-# Digits only.\n-&print_block (\"digit_table\", *digit_start, *digit_end);\n-\n-# Space characters.\n-&print_block (\"space_table\", *space_start, *space_end);\n-\n-# Letters.  We used to generate a separate letter table.  But this\n-# doesn't really seem worthwhile.  Simply using `all_table' saves us\n-# about 800 bytes, and only adds 3 table probes to isLetter.\n-# &print_block (\"letter_table\", *letter_start, *letter_end);\n-\n-# Case tables.\n-&print_case_table (\"upper\", *upper_start, *upper_end, *upper_map, *upper_anom);\n-&print_case_table (\"lower\", *lower_start, *lower_end, *lower_map, *lower_anom);\n-\n-# Everything else.\n-&print_all_block (*all_start, *all_end, *all_cats);\n-\n-print CHARTABLE \"#else /* COMPACT_CHARACTER */\\n\\n\";\n-\n-printf CHARTABLE \"#define ROMAN_START 0x%04x\\n\", $ROMAN_START;\n-printf CHARTABLE \"#define ROMAN_END   0x%04x\\n\\n\", $ROMAN_END;\n-\n-&print_fast_tables (*all_start, *all_end, *all_cats,\n-\t\t    *attributes, *second_attributes);\n-\n-print CHARTABLE \"#endif /* COMPACT_CHARACTER */\\n\\n\";\n-\n-print CHARTABLE \"#endif /* __JAVA_CHARTABLES_H__ */\\n\";\n-\n-printf STDERR \"Approximately %d bytes of data generated (compact case)\\n\",\n-    $bytes;\n-\n-\n-# Now generate decomposition tables.\n-printf DECOMP \"// java-chardecomp.h - Decomposition character tables -*- c++ -*-\\n\\n\";\n-printf DECOMP \"#ifndef __JAVA_CHARDECOMP_H__\\n\";\n-printf DECOMP \"#define __JAVA_CHARDECOMP_H__\\n\\n\";\n-print DECOMP \"// These tables are automatically generated by the chartables.pl\\n\";\n-print DECOMP \"// script.  DO NOT EDIT the tables.  Instead, fix the script\\n\";\n-print DECOMP \"// and run it again.\\n\\n\";\n-print DECOMP \"// This file should only be included by natCollator.cc\\n\\n\";\n-\n-print DECOMP \"struct decomp_entry\\n{\\n\";\n-print DECOMP \"  jchar key;\\n\";\n-print DECOMP \"  const char *value;\\n\";\n-print DECOMP \"};\\n\\n\";\n-\n-&write_decompositions;\n-\n-printf DECOMP \"#endif /* __JAVA_CHARDECOMP_H__ */\\n\";\n-\n-\n-close (CHARTABLE);\n-close (DECOMP);\n-\n-exit $status;\n-\n-\n-# Process a gap in the space.\n-sub process_gap\n-{\n-    local (*fields, $prevcode, $ncode) = @_;\n-    local (@gap_fields, $i);\n-\n-    if ($ncode == $CJK_IDEOGRAPH_END\n-\t|| $ncode == $HANGUL_END\n-\t|| $ncode == $HIGH_SURROGATE_END\n-\t|| $ncode == $PRIVATE_HIGH_SURROGATE_END\n-\t|| $ncode == $LOW_SURROGATE_END\n-\t|| $ncode == $PRIVATE_END)\n-    {\n-\t# The characters in the gap we just found are known to\n-\t# have the same properties as the character at the end of\n-\t# the gap.\n-\t@gap_fields = @fields;\n-    }\n-    else\n-    {\n-\t# This prints too much to be enabled.\n-\t# print STDERR \"Gap found at \\\\u\", $fields[$CODE], \"\\n\";\n-\t@gap_fields = ('', '', 'Cn', '', '', '', '', '', '', '', '',\n-\t\t       '', '', '', '');\n-    }\n-\n-    for ($i = $prevcode + 1; $i < $ncode; ++$i)\n-    {\n-\t$gap_fields[$CODE] = sprintf (\"%04x\", $i);\n-\t$gap_fields[$NAME] = \"CHARACTER \" . $gap_fields[$CODE];\n-\t&process_char (*gap_fields, $i);\n-    }\n-}\n-\n-# Process a single character.\n-sub process_char\n-{\n-    local (*fields, $ncode) = @_;\n-\n-    if ($fields[$DECOMPOSITION] ne '')\n-    {\n-\t&add_decomposition ($ncode, $fields[$DECOMPOSITION]);\n-    }\n-\n-    # If this is a titlecase character, mark it.\n-    if ($fields[$CATEGORY] eq 'Lt')\n-    {\n-\t$title_to_upper{$fields[$CODE]} = $fields[$UPPERCASE];\n-\t$title_to_lower{$fields[$CODE]} = $fields[$LOWERCASE];\n-    }\n-    else\n-    {\n-\t# For upper and lower case mappings, we try to build compact\n-\t# tables that map range onto range.  We specifically want to\n-\t# avoid titlecase characters.  Java specifies a range check to\n-\t# make sure the character is not between 0x2000 and 0x2fff.\n-\t# We avoid that here because we need to generate table entries\n-\t# -- toLower and toUpper still work in that range.\n-\tif ($fields[$UPPERCASE] eq ''\n-\t    && ($fields[$LOWERCASE] ne ''\n-\t\t|| $fields[$NAME] =~ /CAPITAL (LETTER|LIGATURE)/))\n-\t{\n-\t    if ($fields[$LOWERCASE] ne '')\n-\t    {\n-\t\t&update_case_block (*upper_start, *upper_end, *upper_map,\n-\t\t\t\t    $fields[$CODE], $fields[$LOWERCASE]);\n-\t\t&set_attribute ($ncode, hex ($fields[$LOWERCASE]));\n-\t    }\n-\t    else\n-\t    {\n-\t\t$upper_anom{$fields[$CODE]} = 1;\n-\t    }\n-\t}\n-\telsif ($fields[$LOWERCASE] ne '')\n-\t{\n-\t    print STDERR (\"Java missed upper case char \\\\u\",\n-\t\t\t  $fields[$CODE], \"\\n\");\n-\t}\n-\telsif ($fields[$CATEGORY] eq 'Lu')\n-\t{\n-\t    # This case is for letters which are marked as upper case\n-\t    # but for which there is no lower case equivalent.  For\n-\t    # instance, LATIN LETTER YR.\n-\t}\n-\n-\tif ($fields[$LOWERCASE] eq ''\n-\t    && ($fields[$UPPERCASE] ne ''\n-\t\t|| $fields[$NAME] =~ /SMALL (LETTER|LIGATURE)/))\n-\t{\n-\t    if ($fields[$UPPERCASE] ne '')\n-\t    {\n-\t\t&update_case_block (*lower_start, *lower_end, *lower_map,\n-\t\t\t\t    $fields[$CODE], $fields[$UPPERCASE]);\n-\t\t&set_attribute ($ncode, hex ($fields[$UPPERCASE]));\n-\t    }\n-\t    else\n-\t    {\n-\t\t$lower_anom{$fields[$CODE]} = 1;\n-\t    }\n-\t}\n-\telsif ($fields[$UPPERCASE] ne '')\n-\t{\n-\t    print STDERR (\"Java missed lower case char \\\\u\",\n-\t\t\t  $fields[$CODE], \"\\n\");\n-\t}\n-\telsif ($fields[$CATEGORY] eq 'Ll')\n-\t{\n-\t    # This case is for letters which are marked as lower case\n-\t    # but for which there is no upper case equivalent.  For\n-\t    # instance, FEMININE ORDINAL INDICATOR.\n-\t}\n-    }\n-\n-\n-    # If we have a non-decimal numeric value, add it to the list.\n-    if ($fields[$CATEGORY] eq 'Nd'\n-\t&& ($ncode < 0x2000 || $ncode > 0x2fff)\n-\t&& $fields[$NAME] =~ /DIGIT/)\n-    {\n-\t# This is a digit character that is handled elsewhere.\n-    }\n-    elsif ($fields[$DIGIT] ne '' || $fields[$NUMERIC] ne '')\n-    {\n-\t# Do a simple check.\n-\tif ($fields[$DECIMAL] ne '')\n-\t{\n-\t    # This catches bugs in an earlier implementation of\n-\t    # chartables.pl.  Now it is here for historical interest\n-\t    # only.\n-\t    # print STDERR (\"Character \\u\", $fields[$CODE],\n-\t    # \" would have been missed as digit\\n\");\n-\t}\n-\n-\tlocal ($val) = $fields[$DIGIT];\n-\t$val = $fields[$NUMERIC] if $val eq '';\n-\tlocal ($ok) = 1;\n-\n-\t# If we have a value which is not a positive integer, then we\n-\t# set the value to -2 to make life easier for\n-\t# Character.getNumericValue.\n-\tif ($val !~ m/^[0-9]+$/)\n-\t{\n-\t    if ($fields[$CATEGORY] ne 'Nl'\n-\t\t&& $fields[$CATEGORY] ne 'No')\n-\t    {\n-\t\t# This shows a few errors in the Unicode table.  These\n-\t\t# characters have a missing Numeric field, and the `N'\n-\t\t# for the mirrored field shows up there instead.  I\n-\t\t# reported these characters to errata@unicode.org on\n-\t\t# Thu Sep 10 1998.  They said it will be fixed in the\n-\t\t# 2.1.6 release of the tables.\n-\t\tprint STDERR (\"Character \\u\", $fields[$CODE],\n-\t\t\t      \" has value but is not numeric; val = '\",\n-\t\t\t      $val, \"'\\n\");\n-\t\t# We skip these.\n-\t\t$ok = 0;\n-\t    }\n-\t    $val = \"-2\";\n-\t}\n-\n-\tif ($ok)\n-\t{\n-\t    $numerics{$fields[$CODE]} = $val;\n-\t    &set_attribute ($ncode, $val);\n-\t}\n-    }\n-\n-    # We build a table that lists ranges of ordinary decimal values.\n-    # At each step we make sure that the digits are in the correct\n-    # order, with no holes, as this is assumed by Character.  If this\n-    # fails, reimplementation is required.  This implementation\n-    # dovetails nicely with the Java Spec, which has strange rules for\n-    # what constitutes a decimal value.  In particular the Unicode\n-    # name must contain the word `DIGIT'.  The spec doesn't directly\n-    # say that digits must have type `Nd' (or that their value must an\n-    # integer), but that can be inferred from the list of digits in\n-    # the book(s).  Currently the only Unicode characters whose name\n-    # includes `DIGIT' which would not fit are the Tibetan \"half\"\n-    # digits.\n-    if ($fields[$CATEGORY] eq 'Nd')\n-    {\n-\tif (($ncode < 0x2000 || $ncode > 0x2fff)\n-\t    && $fields[$NAME] =~ /DIGIT/)\n-\t{\n-\t    &update_digit_block (*digit_start, *digit_end, $fields[$CODE],\n-\t\t\t\t $fields[$DECIMAL]);\n-\t    &set_attribute ($ncode, $fields[$DECIMAL]);\n-\t}\n-\telse\n-\t{\n-\t    # If this fails then Character.getType will fail.  We\n-\t    # assume that things in `digit_table' are the only\n-\t    # category `Nd' characters.\n-\t    print STDERR (\"Character \\u\", $fields[$CODE],\n-\t\t\t  \" is class Nd but not in digit table\\n\");\n-\t    $status = 1;\n-\t}\n-    }\n-\n-    # Keep track of space characters.\n-    if ($fields[$CATEGORY] =~ /Z[slp]/)\n-    {\n-\t&update_block (*space_start, *space_end, $fields[$CODE]);\n-    }\n-\n-    # Keep track of letters.\n-    # if ($fields[$CATEGORY] =~ /L[ultmo]/)\n-    # {\n-    # \t&update_letter_block (*letter_start, *letter_end, $fields[$CODE],\n-    # \t\t\t      $fields[$CATEGORY]);\n-    # }\n-\n-    # Keep track of all characters.  You might think we wouldn't have\n-    # to do this for uppercase letters, or other characters we already\n-    # \"classify\".  The problem is that this classification is\n-    # different.  E.g., \\u216f is uppercase by Java rules, but is a\n-    # LETTER_NUMBER here.\n-    &update_all_block (*all_start, *all_end, *all_cats,\n-\t\t       $fields[$CODE], $fields[$CATEGORY]);\n-}\n-\n-\n-# Called to add a new decomposition.\n-sub add_decomposition\n-{\n-    local ($ncode, $value) = @_;\n-    local ($is_full) = 0;\n-    local ($first) = 1;\n-    local (@decomp) = ();\n-\n-    foreach (split (' ', $value))\n-    {\n-\tif ($first && /^\\<.*\\>$/)\n-\t{\n-\t    $is_full = 1;\n-\t}\n-\telse\n-\t{\n-\t    push (@decomp, hex ($_));\n-\t}\n-\t$first = 0;\n-    }\n-\n-    # We pack the value into a string because this means we can stick\n-    # with Perl 4 features.\n-    local ($s) = pack \"I*\", @decomp;\n-    if ($is_full)\n-    {\n-\t$full_decomposition{$ncode} = $s;\n-    }\n-    else\n-    {\n-\t$canonical_decomposition{$ncode} = $s;\n-    }\n-}\n-\n-# Write a single decomposition table.\n-sub write_single_decomposition\n-{\n-    local ($name, $is_canon, %table) = @_;\n-\n-    printf DECOMP \"static const decomp_entry ${name}_decomposition[] =\\n{\\n\";\n-\n-    local ($key, @expansion, $char);\n-    local ($first_line) = 1;\n-\n-    for ($key = 0; $key <= 65535; ++$key)\n-    {\n-\tnext if ! defined $table{$key};\n-\n-\tprintf DECOMP \",\\n\"\n-\t    unless $first_line;\n-\t$first_line = 0;\n-\n-\tprintf DECOMP \"  { 0x%04x, \\\"\", $key;\n-\n-\t# We represent the expansion as a series of bytes, terminated\n-\t# with a double nul.  This is ugly, but relatively\n-\t# space-efficient.  Most expansions are short, but there are a\n-\t# few that are very long (e.g. \\uFDFA).  This means that if we\n-\t# chose a fixed-space representation we would waste a lot of\n-\t# space.\n-\t@expansion = unpack \"I*\", $table{$key};\n-\tforeach $char (@expansion)\n-\t{\n-\t    printf DECOMP \"\\\\x%02x\\\\x%02x\", ($char / 256), ($char % 256);\n-\t}\n-\n-\tprintf DECOMP \"\\\" }\";\n-    }\n-\n-    printf DECOMP \"\\n};\\n\\n\";\n-}\n-\n-sub write_decompositions\n-{\n-    &write_single_decomposition ('canonical', 1, %canonical_decomposition);\n-    &write_single_decomposition ('full', 0, %full_decomposition);\n-}\n-\n-# We represent a block of characters with a pair of lists.  This\n-# function updates the pair to account for the new character.  Returns\n-# 1 if we added to the old block, 0 otherwise.\n-sub update_block\n-{\n-    local (*start, *end, $char) = @_;\n-\n-    local ($nchar) = hex ($char);\n-    local ($count) = $#end;\n-    if ($count >= 0 && $end[$count] == $nchar - 1)\n-    {\n-\t++$end[$count];\n-\treturn 1;\n-    }\n-    else\n-    {\n-\t++$count;\n-\t$start[$count] = $nchar;\n-\t$end[$count] = $nchar;\n-    }\n-    return 0;\n-}\n-\n-# Return true if we will be appending this character to the end of the\n-# existing block.\n-sub block_append_p\n-{\n-    local (*end, $char) = @_;\n-    return $#end >= 0 && $end[$#end] == $char - 1;\n-}\n-\n-# This updates the digit block.  This table is much like an ordinary\n-# block, but it has an extra constraint.\n-sub update_digit_block\n-{\n-    local (*start, *end, $char, $value) = @_;\n-\n-    &update_block ($start, $end, $char);\n-    local ($nchar) = hex ($char);\n-\n-    # We want to make sure that the new digit's value is correct for\n-    # its place in the block.  However, we special-case Tamil digits,\n-    # since Tamil does not have a digit `0'.\n-    local ($count) = $#start;\n-    if (($nchar < $TAMIL_DIGIT_ONE || $nchar > $TAMIL_DIGIT_NINE)\n-\t&& $nchar - $start[$count] != $value)\n-    {\n-\t# If this fails then Character.digit_value will be wrong.\n-\tprint STDERR \"Character \\\\u\", $char, \" violates digit constraint\\n\";\n-\t$status = 1;\n-    }\n-}\n-\n-# Update letter table.  We could be smart about avoiding upper or\n-# lower case letters, but it is much simpler to just track them all.\n-sub update_letter_block\n-{\n-    local (*start, *end, $char, $category) = @_;\n-\n-    &update_block (*start, *end, $char);\n-}\n-\n-# Update `all' table.  This table holds all the characters we don't\n-# already categorize for other reasons.  FIXME: if a given type has\n-# very few characters, we should just inline the code.  E.g., there is\n-# only one paragraph separator.\n-sub update_all_block\n-{\n-    local (*start, *end, *cats, $char, $category) = @_;\n-\n-    local ($nchar) = hex ($char);\n-    local ($count) = $#end;\n-    if ($count >= 0\n-\t&& $end[$count] == $nchar - 1\n-\t&& $cats[$count] eq $category)\n-    {\n-\t++$end[$count];\n-    }\n-    else\n-    {\n-\t++$count;\n-\t$start[$count] = $nchar;\n-\t$end[$count] = $nchar;\n-\t$cats[$count] = $category;\n-    }\n-}\n-\n-# Update a case table.  We handle case tables specially because we\n-# want to map (e.g.) a block of uppercase characters directly onto the\n-# corresponding block of lowercase characters.  Therefore we generate\n-# a new entry when the block would no longer map directly.\n-sub update_case_block\n-{\n-    local (*start, *end, *map, $char, $mapchar) = @_;\n-\n-    local ($nchar) = hex ($char);\n-    local ($nmap) = hex ($mapchar);\n-\n-    local ($count) = $#end;\n-    if ($count >= 0\n-\t&& $end[$count] == $nchar - 1\n-\t&& $nchar - $start[$count] == $nmap - $map[$count])\n-    {\n-\t++$end[$count];\n-    }\n-    else\n-    {\n-\t++$count;\n-\t$start[$count] = $nchar;\n-\t$end[$count] = $nchar;\n-\t$map[$count] = $nmap;\n-    }\n-}\n-\n-# Set the attribute value for the character.  Each character can have\n-# only one attribute.\n-sub set_attribute\n-{\n-    local ($ncode, $attr) = @_;\n-\n-    if ($attributes{$ncode} ne '' && $attributes{$ncode} ne $attr)\n-    {\n-\tif ($ncode >= $ROMAN_START && $ncode <= $ROMAN_END)\n-\t{\n-\t    $second_attributes{$ncode} = $attr;\n-\t}\n-\telse\n-\t{\n-\t    printf STDERR \"character \\\\u%04x already has attribute\\n\", $ncode;\n-\t}\n-    }\n-    # Attributes can be interpreted as unsigned in some situations,\n-    # so we check against 65535.  This could cause errors -- we need\n-    # to check the interpretation here.\n-    elsif ($attr < -32768 || $attr > 65535)\n-    {\n-\tprintf STDERR \"attribute out of range for character \\\\u%04x\\n\", $ncode;\n-    }\n-    else\n-    {\n-\t$attributes{$ncode} = $attr;\n-    }\n-}\n-\n-\n-# Print a block table.\n-sub print_block\n-{\n-    local ($title, *start, *end) = @_;\n-\n-    print CHARTABLE \"static const jchar \", $title, \"[][2] =\\n\";\n-    print CHARTABLE \"  {\\n\";\n-\n-    local ($i) = 0;\n-    while ($i <= $#start)\n-    {\n-\tprint CHARTABLE \"    { \";\n-\t&print_char ($start[$i]);\n-\tprint CHARTABLE \", \";\n-\t&print_char ($end[$i]);\n-\tprint CHARTABLE \" }\";\n-\tprint CHARTABLE \",\" if ($i != $#start);\n-\tprint CHARTABLE \"\\n\";\n-\t++$i;\n-\t$bytes += 4;\t\t# Two bytes per char.\n-    }\n-\n-    print CHARTABLE \"  };\\n\\n\";\n-}\n-\n-# Print the numerics table.\n-sub print_numerics\n-{\n-    local ($i, $key, $count, @keys);\n-\n-    $i = 0;\n-    @keys = sort keys %numerics;\n-    $count = @keys;\n-\n-    print CHARTABLE \"static const jchar numeric_table[] =\\n\";\n-    print CHARTABLE \"  { \";\n-    foreach $key (@keys)\n-    {\n-\t&print_char (hex ($key));\n-\t++$i;\n-\tprint CHARTABLE \", \" if $i < $count;\n-\t# Print 5 per line.\n-\tprint CHARTABLE \"\\n    \" if ($i % 5 == 0);\n-\t$bytes += 2;\t\t# One character.\n-    }\n-    print CHARTABLE \" };\\n\\n\";\n-\n-    print CHARTABLE \"static const jshort numeric_value[] =\\n\";\n-    print CHARTABLE \"  { \";\n-    $i = 0;\n-    foreach $key (@keys)\n-    {\n-\tprint CHARTABLE $numerics{$key};\n-\tif ($numerics{$key} > 32767 || $numerics{$key} < -32768)\n-\t{\n-\t    # This means our generated type info is incorrect.  We\n-\t    # could just detect and work around this here, but I'm\n-\t    # lazy.\n-\t    print STDERR \"numeric value won't fit in a short\\n\";\n-\t    $status = 1;\n-\t}\n-\t++$i;\n-\tprint CHARTABLE \", \" if $i < $count;\n-\t# Print 10 per line.\n-\tprint CHARTABLE \"\\n    \" if ($i % 10 == 0);\n-\t$bytes += 2;\t\t# One short.\n-    }\n-    print CHARTABLE \" };\\n\\n\";\n-}\n-\n-# Print a table that maps one single letter onto another.  It assumes\n-# the map is index by char code.\n-sub print_single_map\n-{\n-    local ($title, %map) = @_;\n-\n-    local (@keys) = sort keys %map;\n-    $num = @keys;\n-    print CHARTABLE \"static const jchar \", $title, \"[][2] =\\n\";\n-    print CHARTABLE \"  {\\n\";\n-    $i = 0;\n-    for $key (@keys)\n-    {\n-\tprint CHARTABLE \"    { \";\n-\t&print_char (hex ($key));\n-\tprint CHARTABLE \", \";\n-\t&print_char (hex ($map{$key}));\n-\tprint CHARTABLE \" }\";\n-\t++$i;\n-\tif ($i < $num)\n-\t{\n-\t    print CHARTABLE \",\";\n-\t}\n-\telse\n-\t{\n-\t    print CHARTABLE \" \";\n-\t}\n-\tprint CHARTABLE \"   // \", $name{$key}, \"\\n\";\n-\t$bytes += 4;\t\t# Two bytes per char.\n-    }\n-    print CHARTABLE \"  };\\n\\n\";\n-}\n-\n-# Print the `all' block.\n-sub print_all_block\n-{\n-    local (*start, *end, *cats) = @_;\n-\n-    &print_block (\"all_table\", *start, *end);\n-\n-    local ($i) = 0;\n-    local ($sum) = 0;\n-    while ($i <= $#start)\n-    {\n-\t$sum += $end[$i] - $start[$i] + 1;\n-\t++$i;\n-    }\n-    # We do this computation just to make sure it isn't cheaper to\n-    # simply list all the characters individually.\n-    printf STDERR (\"all_table encodes %d characters in %d entries\\n\",\n-\t\t   $sum, $#start + 1);\n-\n-    print CHARTABLE \"static const jbyte category_table[] =\\n\";\n-    print CHARTABLE \"  { \";\n-\n-    $i = 0;\n-    while ($i <= $#cats)\n-    {\n-\tif ($i > 0 && $cats[$i] eq $cats[$i - 1])\n-\t{\n-\t    # This isn't an error.  We can have a duplicate because\n-\t    # two ranges are not adjacent while the intervening\n-\t    # characters are left out of the table for other reasons.\n-\t    # We could exploit this to make the table a little smaller.\n-\t    # printf STDERR \"Duplicate all entry at \\\\u%04x\\n\", $start[$i];\n-\t}\n-\tprint CHARTABLE 'java::lang::Character::', $category_map{$cats[$i]};\n-\tprint CHARTABLE \", \" if ($i < $#cats);\n-\t++$i;\n-\tprint CHARTABLE \"\\n    \";\n-\t++$bytes;\n-    }\n-    print CHARTABLE \"  };\\n\\n\";\n-}\n-\n-# Print case table.\n-sub print_case_table\n-{\n-    local ($title, *start, *end, *map, *anomalous) = @_;\n-\n-    &print_block ($title . '_case_table', *start, *end);\n-\n-    print CHARTABLE \"static const jchar \", $title, \"_case_map_table[] =\\n\";\n-    print CHARTABLE \"  { \";\n-\n-    local ($i) = 0;\n-    while ($i <= $#map)\n-    {\n-\t&print_char ($map[$i]);\n-\tprint CHARTABLE \", \" if $i < $#map;\n-\t++$i;\n-\tprint CHARTABLE \"\\n    \" if $i % 5 == 0;\n-\t$bytes += 2;\n-    }\n-    print CHARTABLE \"  };\\n\";\n-\n-\n-    local ($key, @keys);\n-    @keys = sort keys %anomalous;\n-\n-    if ($title eq 'upper')\n-    {\n-\tif ($#keys >= 0)\n-\t{\n-\t    # If these are found we need to change Character.isUpperCase.\n-\t    print STDERR \"Found anomalous upper case characters\\n\";\n-\t    $status = 1;\n-\t}\n-    }\n-    else\n-    {\n-\tprint CHARTABLE \"\\n\";\n-\tprint CHARTABLE \"static const jchar \", $title, \"_anomalous_table[] =\\n\";\n-\tprint CHARTABLE \"  { \";\n-\t$i = 0;\n-\tforeach $key (@keys)\n-\t{\n-\t    &print_char (hex ($key));\n-\t    print CHARTABLE \", \" if $i < $#keys;\n-\t    ++$i;\n-\t    print CHARTABLE \"\\n    \" if $i % 5 == 0;\n-\t    $bytes += 2;\n-\t}\n-\tprint CHARTABLE \"  };\\n\";\n-    }\n-\n-    print CHARTABLE \"\\n\";\n-}\n-\n-# Print the type table and attributes table for the fast version.\n-sub print_fast_tables\n-{\n-    local (*start, *end, *cats, *atts, *second_atts) = @_;\n-\n-    print CHARTABLE \"static const jbyte type_table[] =\\n{ \";\n-\n-    local ($i, $j);\n-    for ($i = 0; $i <= $#cats; ++$i)\n-    {\n-\tfor ($j = $start[$i]; $j <= $end[$i]; ++$j)\n-\t{\n-\t    print CHARTABLE 'java::lang::Character::', $category_map{$cats[$i]};\n-\t    print CHARTABLE \",\" if ($i < $#cats || $j < $end[$i]);\n-\t    print CHARTABLE \"\\n    \";\n-\t}\n-    }\n-    print CHARTABLE \"\\n };\\n\\n\";\n-\n-    print CHARTABLE \"static const jshort attribute_table[] =\\n{ \";\n-    for ($i = 0; $i <= 0xffff; ++$i)\n-    {\n-\t$atts{$i} = 0 if ! defined $atts{$i};\n-\tprint CHARTABLE $atts{$i};\n-\tprint CHARTABLE \", \" if $i < 0xffff;\n-\tprint CHARTABLE \"\\n    \" if $i % 5 == 1;\n-    }\n-    print CHARTABLE \"\\n };\\n\\n\";\n-\n-    print CHARTABLE \"static const jshort secondary_attribute_table[] =\\n{ \";\n-    for ($i = $ROMAN_START; $i <= $ROMAN_END; ++$i)\n-    {\n-\tprint CHARTABLE $second_atts{$i};\n-\tprint CHARTABLE \", \" if $i < $ROMAN_END;\n-\tprint CHARTABLE \"\\n    \" if $i % 5 == 1;\n-    }\n-    print CHARTABLE \"\\n };\\n\\n\";\n-}\n-\n-# Print a character constant.\n-sub print_char\n-{\n-    local ($ncode) = @_;\n-    printf CHARTABLE \"0x%04x\", $ncode;\n-}"}, {"sha": "5984dcc06b3d6be9973119c78ce801cec4998f22", "filename": "libjava/configure.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -42,13 +42,6 @@ AC_SUBST(COMPPATH)\n dnl The -no-testsuite modules omit the test subdir.\n AM_CONDITIONAL(TESTSUBDIR, test -d $srcdir/testsuite)\n \n-dnl See whether the user prefers size or speed for Character.\n-dnl The default is size.\n-AC_ARG_ENABLE(fast-character,\n-[  --enable-fast-character prefer speed over size for Character],\n-# Nothing\n-, AC_DEFINE(COMPACT_CHARACTER))\n-\n dnl Should the runtime set system properties by examining the \n dnl environment variable GCJ_PROPERTIES?\n AC_ARG_ENABLE(getenv-properties,"}, {"sha": "15c8957f2da00628f79efe7c63db6bd49df5998c", "filename": "libjava/gnu/gcj/convert/Blocks-3.txt", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FBlocks-3.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FBlocks-3.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FBlocks-3.txt?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,90 @@\n+# Start Code; End Code; Block Name\n+0000; 007F; Basic Latin\n+0080; 00FF; Latin-1 Supplement\n+0100; 017F; Latin Extended-A\n+0180; 024F; Latin Extended-B\n+0250; 02AF; IPA Extensions\n+02B0; 02FF; Spacing Modifier Letters\n+0300; 036F; Combining Diacritical Marks\n+0370; 03FF; Greek\n+0400; 04FF; Cyrillic\n+0530; 058F; Armenian\n+0590; 05FF; Hebrew\n+0600; 06FF; Arabic\n+0700; 074F; Syriac  \n+0780; 07BF; Thaana\n+0900; 097F; Devanagari\n+0980; 09FF; Bengali\n+0A00; 0A7F; Gurmukhi\n+0A80; 0AFF; Gujarati\n+0B00; 0B7F; Oriya\n+0B80; 0BFF; Tamil\n+0C00; 0C7F; Telugu\n+0C80; 0CFF; Kannada\n+0D00; 0D7F; Malayalam\n+0D80; 0DFF; Sinhala\n+0E00; 0E7F; Thai\n+0E80; 0EFF; Lao\n+0F00; 0FFF; Tibetan\n+1000; 109F; Myanmar \n+10A0; 10FF; Georgian\n+1100; 11FF; Hangul Jamo\n+1200; 137F; Ethiopic\n+13A0; 13FF; Cherokee\n+1400; 167F; Unified Canadian Aboriginal Syllabics\n+1680; 169F; Ogham\n+16A0; 16FF; Runic\n+1780; 17FF; Khmer\n+1800; 18AF; Mongolian\n+1E00; 1EFF; Latin Extended Additional\n+1F00; 1FFF; Greek Extended\n+2000; 206F; General Punctuation\n+2070; 209F; Superscripts and Subscripts\n+20A0; 20CF; Currency Symbols\n+20D0; 20FF; Combining Marks for Symbols\n+2100; 214F; Letterlike Symbols\n+2150; 218F; Number Forms\n+2190; 21FF; Arrows\n+2200; 22FF; Mathematical Operators\n+2300; 23FF; Miscellaneous Technical\n+2400; 243F; Control Pictures\n+2440; 245F; Optical Character Recognition\n+2460; 24FF; Enclosed Alphanumerics\n+2500; 257F; Box Drawing\n+2580; 259F; Block Elements\n+25A0; 25FF; Geometric Shapes\n+2600; 26FF; Miscellaneous Symbols\n+2700; 27BF; Dingbats\n+2800; 28FF; Braille Patterns\n+2E80; 2EFF; CJK Radicals Supplement\n+2F00; 2FDF; Kangxi Radicals\n+2FF0; 2FFF; Ideographic Description Characters\n+3000; 303F; CJK Symbols and Punctuation\n+3040; 309F; Hiragana\n+30A0; 30FF; Katakana\n+3100; 312F; Bopomofo\n+3130; 318F; Hangul Compatibility Jamo\n+3190; 319F; Kanbun\n+31A0; 31BF; Bopomofo Extended\n+3200; 32FF; Enclosed CJK Letters and Months\n+3300; 33FF; CJK Compatibility\n+3400; 4DB5; CJK Unified Ideographs Extension A\n+4E00; 9FFF; CJK Unified Ideographs\n+A000; A48F; Yi Syllables\n+A490; A4CF; Yi Radicals\n+AC00; D7A3; Hangul Syllables\n+D800; DB7F; High Surrogates\n+DB80; DBFF; High Private Use Surrogates\n+DC00; DFFF; Low Surrogates\n+E000; F8FF; Private Use\n+F900; FAFF; CJK Compatibility Ideographs\n+FB00; FB4F; Alphabetic Presentation Forms\n+FB50; FDFF; Arabic Presentation Forms-A\n+FE20; FE2F; Combining Half Marks\n+FE30; FE4F; CJK Compatibility Forms\n+FE50; FE6F; Small Form Variants\n+FE70; FEFE; Arabic Presentation Forms-B\n+FEFF; FEFF; Specials\n+FF00; FFEF; Halfwidth and Fullwidth Forms\n+FFF0; FFFD; Specials\n+"}, {"sha": "113d311f01b27d8aee8d408a97bb53bd7046c651", "filename": "libjava/gnu/gcj/convert/UnicodeCharacterDatabase-3.0.0.html", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeCharacterDatabase-3.0.0.html?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,345 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n+\n+       \"http://www.w3.org/TR/REC-html40/loose.dtd\"> \n+\n+<html>\n+\n+\n+\n+<head>\n+\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n+\n+<meta http-equiv=\"Content-Language\" content=\"en-us\">\n+\n+<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 4.0\">\n+\n+<meta name=\"ProgId\" content=\"FrontPage.Editor.Document\">\n+\n+<link rel=\"stylesheet\" href=\"http://www.unicode.org/unicode.css\" type=\"text/css\">\n+\n+<title>Unicode Character Database</title>\n+\n+</head>\n+\n+\n+\n+<body>\n+\n+\n+\n+<h1>UNICODE CHARACTER DATABASE<br>  \n+Version 3.0.0</h1>\n+\n+<table border=\"1\" cellspacing=\"2\" cellpadding=\"0\" height=\"87\" width=\"100%\">\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">Revision</td>\n+\n+    <td valign=\"TOP\">3.0.0</td>\n+\n+  </tr>\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">Authors</td>\n+\n+    <td valign=\"TOP\">Mark Davis and Ken Whistler</td>\n+\n+  </tr>\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">Date</td>\n+\n+    <td valign=\"TOP\">1999-09-11</td>\n+\n+  </tr>\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">This Version</td>\n+\n+    <td valign=\"TOP\"><a href=\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html\">ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html</a></td>\n+\n+  </tr>\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">Previous Version</td>\n+\n+    <td valign=\"TOP\">n/a</td>\n+\n+  </tr>\n+\n+  <tr>\n+\n+    <td valign=\"TOP\" width=\"144\">Latest Version</td>\n+\n+    <td valign=\"TOP\"><a href=\"ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html\">ftp://ftp.unicode.org/Public/3.0-Update/UnicodeCharacterDatabase-3.0.0.html</a></td>\n+\n+  </tr>\n+\n+</table>\n+\n+<p align=\"center\">Copyright \u00a9 1995-1999 Unicode, Inc. All Rights reserved.</p>  \n+  \n+<h2>Disclaimer</h2>  \n+  \n+<p>The Unicode Character Database is provided as is by Unicode, Inc. No claims   \n+  \n+are made as to fitness for any particular purpose. No warranties of any kind are   \n+  \n+expressed or implied. The recipient agrees to determine applicability of   \n+  \n+information provided. If this file has been purchased on magnetic or optical   \n+  \n+media from Unicode, Inc., the sole remedy for any claim will be exchange of   \n+  \n+defective media within 90 days of receipt.</p>  \n+  \n+<p>This disclaimer is applicable for all other data files accompanying the   \n+  \n+Unicode Character Database, some of which have been compiled by the Unicode   \n+  \n+Consortium, and some of which have been supplied by other sources.</p>  \n+  \n+<h2>Limitations on Rights to Redistribute This Data</h2>  \n+  \n+<p>Recipient is granted the right to make copies in any form for internal   \n+  \n+distribution and to freely use the information supplied in the creation of   \n+  \n+products supporting the Unicode<sup>TM</sup> Standard. The files in the Unicode   \n+  \n+Character Database can be redistributed to third parties or other organizations   \n+  \n+(whether for profit or not) as long as this notice and the disclaimer notice are   \n+  \n+retained. Information can be extracted from these files and used in   \n+  \n+documentation or programs, as long as there is an accompanying notice indicating   \n+  \n+the source.</p>  \n+  \n+<h2>Introduction</h2>  \n+  \n+<p>The Unicode Character Database is a set of files that define the Unicode   \n+  \n+character properties and internal mappings. For more information about character   \n+  \n+properties and mappings, see <i><a href=\"http://www.unicode.org/unicode/uni2book/u2.html\">The   \n+  \n+Unicode Standard</a></i>.</p>  \n+  \n+<p>The Unicode Character Database has been updated to reflect Version 3.0 of the   \n+  \n+Unicode Standard, with many characters added to those published in Version 2.0.   \n+  \n+A number of corrections have also been made to case mappings or other errors in   \n+  \n+the database noted since the publication of Version 2.0. Normative bidirectional   \n+  \n+properties have also been modified to reflect decisions of the Unicode Technical   \n+  \n+Committee.</p>  \n+  \n+<p>For more information on versions of the Unicode Standard and how to reference   \n+  \n+them, see <a href=\"http://www.unicode.org/unicode/standard/versions/\">http://www.unicode.org/unicode/standard/versions/</a>.</p>  \n+  \n+<h2>Conformance</h2>  \n+  \n+<p>Character properties may be either normative or informative. <i>Normative</i>   \n+  \n+means that implementations that claim conformance to the Unicode Standard (at a   \n+  \n+particular version) and which make use of a particular property or field must   \n+  \n+follow the specifications of the standard for that property or field in order to   \n+  \n+be conformant. The term <i>normative</i> when applied to a property or field of   \n+  \n+the Unicode Character Database, does <i>not</i> mean that the value of that   \n+  \n+field will never change. Corrections and extensions to the standard in the   \n+  \n+future may require minor changes to normative values, even though the Unicode   \n+  \n+Technical Committee strives to minimize such changes. An<i> informative </i>property   \n+  \n+or field is strongly recommended, but a conformant implementation is free to use   \n+  \n+or change such values as it may require while still being conformant to the   \n+  \n+standard. Particular implementations may choose to override the properties and   \n+  \n+mappings that are not normative. In that case, it is up to the implementer to   \n+  \n+establish a protocol to convey that information.</p>  \n+  \n+<h2>Files</h2>  \n+  \n+<p>The following summarizes the files in the Unicode Character Database. &nbsp;For   \n+  \n+more information about these files, see the referenced technical report or   \n+  \n+section of Unicode Standard, Version 3.0.</p>  \n+  \n+<p><b>UnicodeData.txt (Chapter 4)</b>  \n+  \n+<ul>  \n+  \n+  <li>The main file in the Unicode Character Database.</li>  \n+  \n+  <li>For detailed information on the format, see <a href=\"UnicodeData.html\">UnicodeData.html</a>.   \n+  \n+    This file also characterizes which properties are normative and which are   \n+  \n+    informative.</li>  \n+  \n+</ul>  \n+  \n+<p><b>PropList.txt (Chapter 4)</b>  \n+  \n+<ul>  \n+  \n+  <li>Additional informative properties list: <i>Alphabetic, Ideographic,</i>   \n+  \n+    and <i>Mathematical</i>, among others.</li>  \n+  \n+</ul>  \n+  \n+<p><b>SpecialCasing.txt (Chapter 4)</b>  \n+  \n+<ul>  \n+  \n+  <li>List of informative special casing properties, including one-to-many   \n+  \n+    mappings such as SHARP S =&gt; &quot;SS&quot;, and locale-specific mappings,   \n+  \n+    such as for Turkish <i>dotless i</i>.</li>  \n+  \n+</ul>  \n+  \n+<p><b>Blocks.txt (Chapter 14)</b>  \n+  \n+<ul>  \n+  \n+  <li>List of normative block names.</li>  \n+  \n+</ul>  \n+  \n+<p><b>Jamo.txt (Chapter 4)</b>  \n+  \n+<ul>  \n+  \n+  <li>List of normative Jamo short names, used in deriving HANGUL SYLLABLE names   \n+  \n+    algorithmically.</li>  \n+  \n+</ul>  \n+  \n+<p><b>ArabicShaping.txt (Section 8.2)</b>  \n+  \n+<ul>  \n+  \n+  <li>Basic Arabic and Syriac character shaping properties, such as initial,   \n+  \n+    medial and final shapes. These properties are normative for minimal shaping   \n+  \n+    of Arabic and Syriac. </li>  \n+  \n+</ul>  \n+  \n+<p><b>NamesList.txt (Chapter 14)</b>  \n+  \n+<ul>  \n+  \n+  <li>This file duplicates some of the material in the UnicodeData file, and   \n+  \n+    adds informative annotations uses in the character charts, as printed in the   \n+  \n+    Unicode Standard. </li>  \n+  \n+  <li><b>Note: </b>The information in NamesList.txt and Index.txt files matches   \n+  \n+    the appropriate version of the book. Changes in the Unicode Character   \n+  \n+    Database since then may not be reflected in these files, since they are   \n+  \n+    primarily of archival interest.</li>  \n+  \n+</ul>  \n+  \n+<p><b>Index.txt (Chapter 14)</b>  \n+  \n+<ul>  \n+  \n+  <li>Informative index to Unicode characters, as printed in the Unicode   \n+  \n+    Standard</li>  \n+  \n+  <li><b>Note: </b>The information in NamesList.txt and Index.txt files matches   \n+  \n+    the appropriate version of the book. Changes in the Unicode Character   \n+  \n+    Database since then may not be reflected in these files, since they are   \n+  \n+    primarily of archival interest.</li>  \n+  \n+</ul>  \n+  \n+<p><b>CompositionExclusions.txt (<a href=\"http://www.unicode.org/unicode/reports/tr15/\">UTR#15   \n+  \n+Unicode Normalization Forms</a>)</b>  \n+  \n+<ul>  \n+  \n+  <li>Normative properties for normalization.</li>  \n+  \n+</ul>  \n+  \n+<p><b>LineBreak.txt (<a href=\"http://www.unicode.org/unicode/reports/tr14/\">UTR   \n+  \n+#14: Line Breaking Properties</a>)</b>  \n+  \n+<ul>  \n+  \n+  <li>Normative and informative properties for line breaking. To see which   \n+  \n+    properties are informative and which are normative, consult UTR#14.</li>  \n+  \n+</ul>  \n+  \n+<p><b>EastAsianWidth.txt (<a href=\"http://www.unicode.org/unicode/reports/tr11/\">UTR   \n+  \n+#11: East Asian Character Width</a>)</b>  \n+  \n+<ul>  \n+  \n+  <li>Informative properties for determining the choice of wide vs. narrow   \n+  \n+    glyphs in East Asian contexts.</li>  \n+  \n+</ul>  \n+  \n+<p><b>diffXvY.txt</b>  \n+  \n+<ul>  \n+  \n+  <li>Mechanically-generated informative files containing accumulated   \n+  \n+    differences between successive versions of UnicodeData.txt</li>  \n+  \n+</ul>  \n+  \n+  \n+  \n+</body>  \n+  \n+  \n+  \n+</html>  \n+  "}, {"sha": "6a54d3d74e933ba8d1c741248debfce8917ddd70", "filename": "libjava/gnu/gcj/convert/UnicodeData-3.0.0.txt", "status": "added", "additions": 10617, "deletions": 0, "changes": 10617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeData-3.0.0.txt?ref=1fa782725c0a33e23e5f280be091c29e116768bb"}, {"sha": "00eeb45a6beef356c07124ee15d1427add9ab7d7", "filename": "libjava/gnu/java/lang/CharData.java", "status": "added", "additions": 936, "deletions": 0, "changes": 936, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Flang%2FCharData.java?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,936 @@\n+/* gnu/java/lang/CharData -- Database for java.lang.Character Unicode info\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   *** This file is generated by scripts/unicode-muncher.pl ***\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.lang;\n+\n+/**\n+ * This contains the info about the unicode characters, that\n+ * java.lang.Character needs.  It is generated automatically from\n+ * <code>gnu/gcj/convert/UnicodeData-3.0.0.txt</code>, by some\n+ * perl scripts. This Unicode definition file can be found on the\n+ * <a href=\"http://www.unicode.org\">http://www.unicode.org</a> website.\n+ * JDK 1.4 uses Unicode version 3.0.0.\n+ *\n+ * The data is stored as string constants, but Character will convert these\n+ * Strings to their respective <code>char[]</code> components.  The field\n+ * <code>BLOCKS</code> stores the offset of a block of 2<sup>SHIFT</sup>\n+ * characters within <code>DATA</code>.  The DATA field, in turn, stores\n+ * information about each character in the low order bits, and an offset\n+ * into the attribute tables <code>UPPER</code>, <code>LOWER</code>,\n+ * <code>NUM_VALUE</code>, and <code>DIRECTION</code>.  Notice that the\n+ * attribute tables are much smaller than 0xffff entries; as many characters\n+ * in Unicode share common attributes.  Finally, there is a listing for\n+ * <code>TITLE</code> exceptions (most characters just have the same\n+ * title case as upper case).\n+ *\n+ * @author scripts/unicode-muncher.pl (written by Jochen Hoenicke,\n+ *         Eric Blake)\n+ * @see Character\n+ */\n+public interface CharData\n+{\n+  /**\n+   * The Unicode definition file that was parsed to build this database.\n+   */\n+  String SOURCE = \"gnu/gcj/convert/UnicodeData-3.0.0.txt\";\n+\n+  /**\n+   * The character shift amount to look up the block offset. In other words,\n+   * <code>(char) (BLOCKS.value[ch >> SHIFT] + ch)</code> is the index where\n+   * <code>ch</code> is described in <code>DATA</code>.\n+   */\n+  int SHIFT = 5;\n+\n+  /**\n+   * The mapping of character blocks to their location in <code>DATA</code>.\n+   * Each entry has been adjusted so that the 16-bit sum with the desired\n+   * character gives the actual index into <code>DATA</code>.\n+   */\n+  String BLOCKS\n+    = \"\\u01c2\\u01c2\\u01c1\\u012c\\u012b\\u01a0\\u01f8\\u027e\\u0201\\u0290\\u01b7\"\n+    + \"\\u02c9\\u0157\\u02a9\\u023f\\u01b8\\u0101\\u0257\\u02f9\\u02f9\\u0370\\u0363\"\n+    + \"\\ufe8f\\u033e\\uff85\\uff65\\ufdb5\\ufda1\\uffbd\\u02be\\uffbe\\uffe9\\ufea8\"\n+    + \"\\uff2e\\u022f\\ufea1\\uff9d\\ufe61\\uffa9\\ufb20\\u00c3\\u010d\\u00fe\\ufb61\"\n+    + \"\\ufb5a\\u0105\\u0103\\u00f8\\ufe8b\\u0223\\u0258\\u01c1\\u01f6\\u01d6\\ufee1\"\n+    + \"\\u0223\\ufdaa\\ufb55\\u0163\\ufe63\\u00f6\\u00fd\\ufe03\\ufde3\\ufdc3\\ufda3\"\n+    + \"\\ufd83\\ufd63\\ufd43\\ufd23\\ufd03\\ufce3_J\\u00a5\\u0133\\ufe08\"\n+    + \"]\\u014f\\u01a2\\uf669\\u0123\\u0122\\uf8c1\\ufe50\\u0102\\u0101\\ufa43\"\n+    + \"\\ufc88\\ufea7\\u00c0\\ufca1\\ufb8f\\uf47d\\u0099\\ufb11\\ufe1a\\ufd22\\ufb29\"\n+    + \"5\\uf3b9\\ufe51\\ufcc8\\uffb5\\uf339\\ufa92\\uff85\\uff35\\ufa4e\\uf766\"\n+    + \"\\uff25\\ufad1\\ufb63\\ufc34\\ufedf\\uf763\\ufcaa\\ufa82\\ufdb9\\uf6e3\\ufe3f\"\n+    + \"\\ufcc1\\ufe49\\uf7eb\\uf70f\\uf2e8\\ufd99\\uf5e3\\uf964\\ufbfc\\ufd91\\uf563\"\n+    + \"\\uf543\\uf43c\\uf436\\uef6b\\uf864\\uf844\\ufc52\\uf804\\uf7e4\\ufc09\\uf7a4\"\n+    + \"\\uee9c\\ufb8a\\uf744\\uf7f4\\uf704\\uf7c4\\uf78c\\uf46b\\uf4cc\\uf72c\\uf644\"\n+    + \"\\uf3fb\\uf647\\uf243\\uf5c4\\uf5a4\\ueca1\\uf563\\uf544\\uf524\\uf504\\uf4e4\"\n+    + \"\\uf4c4\\uf4a4\\uf484\\uf464\\uf444\\uf424\\uf404\\uf3e4\\uf3c4\\uf3a4\\uf384\"\n+    + \"\\uf364\\uf344\\uf324\\uf283\\uf771\\uf2c4\\uf2a4\\uf731\\ueec3\\ueea3\\uee83\"\n+    + \"\\uee63\\uf1e4\\uf49c\\uf53f\\ued49\\uf2d1\\uf144\\ue8ed\\ue81e\\uf0e4\\uf591\"\n+    + \"\\ued03\\uece3\\uecc3\\ueca3\\uec83\\uec63\\uec43\\uec23\\uec03\\uebe3\\uebc3\"\n+    + \"\\ueba3\\ueb83\\ueb63\\ueb43\\ueb23\\ueb03\\ueae3\\ueac3\\ueaa3\\uea83\\uea63\"\n+    + \"\\uea43\\uea23\\uea03\\ue9e3\\ue9c3\\ue9a3\\ue983\\ue963\\ue943\\ue923\\ue903\"\n+    + \"\\ue8e3\\ue8c3\\ue8a3\\ue883\\ue863\\ue843\\ue823\\ue803\\ue7e3\\ue501\\ue4e1\"\n+    + \"\\ue4c1\\ue4a1\\uefd1\\ue461\\ue441\\ue427\\uef81\\uef51\\uef51\\uef51\\uef51\"\n+    + \"\\uef41\\ue1ad\\uef40\\uef40\\uef40\\ue1e0\\ue37f\\uef00\\ue9d3\\uebe5\\ue4df\"\n+    + \"\\ueece\\uef5f\\ue490\\uef3f\\ueee3\\uef76\\uee6e\\uef6a\\uef77\\uef72\\uee8b\"\n+    + \"\\uefcd\\uee77\\uee1f\\uee21\\uef5f\\uefd7\\uee90\\uefcd\\uefdb\\uef63\\ue223\"\n+    + \"\\ue203\\ue1e3\\ued25\\ued37\\ued13\\uef16\\uef02\\ued41\\ued37\\ued2d\\uec25\"\n+    + \"\\uec05\\uebe5\\uebc5\\uebc8\\uea76\\ueb63\\ueb66\\ue9b0\\ueb05\\ueae5\\ue9e3\"\n+    + \"\\udf43\\udf23\\udf03\\udee3\\ue90a\\uea1d\\ueb52\\ueb49\\ueb3f\\ueadf\\ude03\"\n+    + \"\\udde3\\ue925\\ue905\\ue8e5\\ue8c5\\ue8a5\\ue885\\ue865\\ue845\\udcc3\\udca3\"\n+    + \"\\udc83\\udc63\\udc43\\udc23\\udc03\\udbe3\\udbc3\\udba3\\udb83\\udb63\\udb43\"\n+    + \"\\udb23\\udb03\\udae3\\udac3\\udaa3\\uda83\\uda63\\uda43\\uda23\\uda03\\ud9e3\"\n+    + \"\\ud9c3\\ud9a3\\ud983\\ud963\\ud943\\ud923\\ud903\\ud8e3\\ud8c3\\ud8a3\\ud883\"\n+    + \"\\ud863\\ud843\\ud823\\ud803\\ud7e3\\ud7c3\\ud7a3\\ud783\\ud763\\ue2ab\\ue285\"\n+    + \"\\ue265\\ue26a\\ue225\\ue205\\ue1e5\\ue1c5\\ue1a5\\ue185\\ue188\\udd89\\ue3a2\"\n+    + \"\\udfcd\\ud923\\ud904\\ue342\\ud8c3\\ud8a4\\udcd1\\udcac\\ud67b\\ud824\\ud804\"\n+    + \"\\ue262\\ucede\\ud403\\ud3e3\\ue110\\ue0e3\\ue1c5\\ue0b1\\ue0b1\\ue158\\udf11\"\n+    + \"\\ue02e\\ue00d\\udfed\\udfcd\\ude66\\udf8d\\udf6d\\udf4f\\udf2e\\ud564\\ud544\"\n+    + \"\\ud524\\ud504\\ud4e4\\ud4c4\\ud4a4\\ud484\\ud464\\ud444\\ud424\\ud404\\ud3e4\"\n+    + \"\\ud3c4\\ud3a4\\ud384\\ud364\\ud344\\ud324\\ud304\\ud2e4\\ud2c4\\ud2a4\\ud284\"\n+    + \"\\ud264\\ud244\\ud224\\ud204\\ud1e4\\ud1c4\\ud1a4\\ud184\\ud164\\ud144\\ud124\"\n+    + \"\\ud104\\ud0e4\\ud0c4\\ud0a4\\ud084\\ud064\\ud044\\ud024\\ud004\\ucfe4\\ucfc4\"\n+    + \"\\ucfa4\\ucf84\\ucf64\\ucf44\\ucf24\\ucf04\\ucee4\\ucec4\\ucea4\\uce84\\uce64\"\n+    + \"\\uce44\\uce24\\uce04\\ucde4\\ucdc4\\ucda4\\ucd84\\ucd64\\ucd44\\ucd24\\ucd04\"\n+    + \"\\ucce4\\uccc4\\ucca4\\ucc84\\ucc64\\ucc44\\ucc24\\ucc04\\ucbe4\\ucbc4\\ucba4\"\n+    + \"\\ucb84\\ucb64\\ucb44\\ucb24\\ucb04\\ucae4\\ucac4\\ucaa4\\uca84\\uca64\\uca44\"\n+    + \"\\uca24\\uca04\\uc9e4\\uc9c4\\uc9a4\\uc984\\uc964\\uc944\\uc924\\uc904\\uc8e4\"\n+    + \"\\uc8c4\\uc8a4\\uc884\\uc864\\uc844\\uc824\\uc804\\uc7e4\\uc7c4\\uc7a4\\uc784\"\n+    + \"\\uc764\\uc744\\uc724\\uc704\\uc6e4\\uc6c4\\uc6a4\\uc684\\uc664\\uc644\\uc624\"\n+    + \"\\uc604\\uc5e4\\uc5c4\\uc5a4\\uc584\\uc564\\uc544\\uc524\\uc504\\uc4e4\\uc4c4\"\n+    + \"\\uc4a4\\uc484\\uc464\\uc444\\uc424\\uc404\\uc3e4\\uc3c4\\uc3a4\\uc384\\uc364\"\n+    + \"\\uc344\\uc324\\uc304\\uc2e4\\uc2c4\\uc2a4\\uc284\\uc264\\uc244\\uc224\\uc204\"\n+    + \"\\uc1e4\\uc1c4\\uc1a4\\uc184\\uc164\\uc144\\uc124\\uc104\\uc0e4\\uc0c4\\uc0a4\"\n+    + \"\\uc084\\uc064\\uc044\\uc024\\uc004\\ubfe4\\ubfc4\\ubfa4\\ubf84\\ubf64\\ubf44\"\n+    + \"\\ubf24\\ubf04\\ubee4\\ubec4\\ubea4\\ube84\\ube64\\ube44\\ube24\\ube04\\ubde4\"\n+    + \"\\ubdc4\\ubda4\\ubd84\\ubd64\\ubd44\\ubd24\\ubd04\\ubce4\\ubcc4\\ubca4\\ubc84\"\n+    + \"\\ubc64\\ubc44\\ubc24\\ubc04\\ubbe4\\ub2e0\\ub803\\ub7e3\\ubb64\\ubb44\\ubb24\"\n+    + \"\\ubb04\\ubae4\\ubac4\\ubaa4\\uba84\\uba64\\uba44\\uba24\\uba04\\ub9e4\\ub9c4\"\n+    + \"\\ub9a4\\ub984\\ub964\\ub944\\ub924\\ub904\\ub8e4\\ub8c4\\ub8a4\\ub884\\ub864\"\n+    + \"\\ub844\\ub824\\ub804\\ub7e4\\ub7c4\\ub7a4\\ub784\\ub764\\ub744\\ub724\\ub704\"\n+    + \"\\ub6e4\\ub6c4\\ub6a4\\ub684\\ub664\\ub644\\ub624\\ub604\\ub5e4\\ub5c4\\ub5a4\"\n+    + \"\\ub584\\ub564\\ub544\\ub524\\ub504\\ub4e4\\ub4c4\\ub4a4\\ub484\\ub464\\ub444\"\n+    + \"\\ub424\\ub404\\ub3e4\\ub3c4\\ub3a4\\ub384\\ub364\\ub344\\ub324\\ub304\\ub2e4\"\n+    + \"\\ub2c4\\ub2a4\\ub284\\ub264\\ub244\\ub224\\ub204\\ub1e4\\ub1c4\\ub1a4\\ub184\"\n+    + \"\\ub164\\ub144\\ub124\\ub104\\ub0e4\\ub0c4\\ub0a4\\ub084\\ub064\\ub044\\ub024\"\n+    + \"\\ub004\\uafe4\\uafc4\\uafa4\\uaf84\\uaf64\\uaf44\\uaf24\\uaf04\\uaee4\\uaec4\"\n+    + \"\\uaea4\\uae84\\uae64\\uae44\\uae24\\uae04\\uade4\\uadc4\\uada4\\uad84\\uad64\"\n+    + \"\\uad44\\uad24\\uad04\\uace4\\uacc4\\uaca4\\uac84\\uac64\\uac44\\uac24\\uac04\"\n+    + \"\\uabe4\\uabc4\\uaba4\\uab84\\uab64\\uab44\\uab24\\uab04\\uaae4\\uaac4\\uaaa4\"\n+    + \"\\uaa84\\uaa64\\uaa44\\uaa24\\uaa04\\ua9e4\\ua9c4\\ua9a4\\ua984\\ua964\\ua944\"\n+    + \"\\ua924\\ua904\\ua8e4\\ua8c4\\ua8a4\\ua884\\ua864\\ua844\\ua824\\ua804\\ua7e4\"\n+    + \"\\ua7c4\\ua7a4\\ua784\\ua764\\ua744\\ua724\\ua704\\ua6e4\\ua6c4\\ua6a4\\ua684\"\n+    + \"\\ua664\\ua644\\ua624\\ua604\\ua5e4\\ua5c4\\ua5a4\\ua584\\ua564\\ua544\\ua524\"\n+    + \"\\ua504\\ua4e4\\ua4c4\\ua4a4\\ua484\\ua464\\ua444\\ua424\\ua404\\ua3e4\\ua3c4\"\n+    + \"\\ua3a4\\ua384\\ua364\\ua344\\ua324\\ua304\\ua2e4\\ua2c4\\ua2a4\\ua284\\ua264\"\n+    + \"\\ua244\\ua224\\ua204\\ua1e4\\ua1c4\\ua1a4\\ua184\\ua164\\ua144\\ua124\\ua104\"\n+    + \"\\ua0e4\\ua0c4\\ua0a4\\ua084\\ua064\\ua044\\ua024\\ua004\\u9fe4\\u9fc4\\u9fa4\"\n+    + \"\\u9f84\\u9f64\\u9f44\\u9f24\\u9f04\\u9ee4\\u9ec4\\u9ea4\\u9e84\\u9e64\\u9e44\"\n+    + \"\\u9e24\\u9e04\\u9de4\\u9dc4\\u9da4\\u9d84\\u9d64\\u9d44\\u9d24\\u9d04\\u9ce4\"\n+    + \"\\u9cc4\\u9ca4\\u9c84\\u9c64\\u9c44\\u9c24\\u9c04\\u9be4\\u9bc4\\u9ba4\\u9b84\"\n+    + \"\\u9b64\\u9b44\\u9b24\\u9b04\\u9ae4\\u9ac4\\u9aa4\\u9a84\\u9a64\\u9a44\\u9a24\"\n+    + \"\\u9a04\\u99e4\\u99c4\\u99a4\\u9984\\u9964\\u9944\\u9924\\u9904\\u98e4\\u98c4\"\n+    + \"\\u98a4\\u9884\\u9864\\u9844\\u9824\\u9804\\u97e4\\u97c4\\u97a4\\u9784\\u9764\"\n+    + \"\\u9744\\u9724\\u9704\\u96e4\\u96c4\\u96a4\\u9684\\u9664\\u9644\\u9624\\u9604\"\n+    + \"\\u95e4\\u95c4\\u95a4\\u9584\\u9564\\u9544\\u9524\\u9504\\u94e4\\u94c4\\u94a4\"\n+    + \"\\u9484\\u9464\\u9444\\u9424\\u9404\\u93e4\\u93c4\\u93a4\\u9384\\u9364\\u9344\"\n+    + \"\\u9324\\u9304\\u92e4\\u92c4\\u92a4\\u9284\\u9264\\u9244\\u9224\\u9204\\u91e4\"\n+    + \"\\u91c4\\u91a4\\u9184\\u9164\\u9144\\u9124\\u9104\\u90e4\\u90c4\\u90a4\\u9084\"\n+    + \"\\u9064\\u9044\\u9024\\u9004\\u8fe4\\u8fc4\\u8fa4\\u8f84\\u8f64\\u8f44\\u8f24\"\n+    + \"\\u8f04\\u8ee4\\u8ec4\\u8ea4\\u8e84\\u8e64\\u8e44\\u8e24\\u8e04\\u8de4\\u8dc4\"\n+    + \"\\u8da4\\u8d84\\u8d64\\u8d44\\u8d24\\u8d04\\u8ce4\\u8cc4\\u8ca4\\u8c84\\u8c64\"\n+    + \"\\u8c44\\u8c24\\u8c04\\u8be4\\u8bc4\\u8ba4\\u8b84\\u8b64\\u8b44\\u8b24\\u8b04\"\n+    + \"\\u8ae4\\u8ac4\\u8aa4\\u8a84\\u8a64\\u8a44\\u8a24\\u8a04\\u89e4\\u89c4\\u89a4\"\n+    + \"\\u8984\\u8964\\u8944\\u8924\\u8904\\u88e4\\u88c4\\u88a4\\u8884\\u8864\\u8844\"\n+    + \"\\u8824\\u8804\\u87e4\\u87c4\\u87a4\\u8784\\u8764\\u8744\\u8724\\u8704\\u86e4\"\n+    + \"\\u86c4\\u86a4\\u8684\\u8664\\u8644\\u8624\\u8604\\u85e4\\u85c4\\u85a4\\u8584\"\n+    + \"\\u8564\\u8544\\u8524\\u8504\\u84e4\\u84c4\\u84a4\\u8484\\u8464\\u8444\\u8424\"\n+    + \"\\u8404\\u83e4\\u83c4\\u83a4\\u8384\\u8364\\u8344\\u8324\\u8304\\u82e4\\u82c4\"\n+    + \"\\u82a4\\u8284\\u8264\\u8244\\u8224\\u8204\\u81e4\\u81c4\\u81a4\\u8184\\u8164\"\n+    + \"\\u8144\\u8124\\u8104\\u80e4\\u80c4\\u80a4\\u8084\\u8064\\u8044\\u8024\\u8004\"\n+    + \"\\u7fe4\\u7fc4\\u7fa4\\u7f84\\u7f64\\u7f44\\u7f24\\u7f04\\u7ee4\\u7ec4\\u7ea4\"\n+    + \"\\u7e84\\u7e64\\u7e44\\u7e24\\u7e04\\u7de4\\u7dc4\\u7da4\\u7d84\\u7d64\\u7d44\"\n+    + \"\\u7d24\\u7d04\\u7ce4\\u7cc4\\u7ca4\\u7c84\\u7c64\\u7c44\\u7c24\\u7c04\\u7be4\"\n+    + \"\\u7bc4\\u7ba4\\u7b84\\u7b64\\u7b44\\u7b24\\u7b04\\u7ae4\\u7ac4\\u7aa4\\u7a84\"\n+    + \"\\u7a64\\u7a44\\u7a24\\u7a04\\u79e4\\u79c4\\u79a4\\u7984\\u7964\\u7944\\u7924\"\n+    + \"\\u7904\\u78e4\\u78c4\\u78a4\\u7884\\u7864\\u7844\\u7824\\u7804\\u77e4\\u77c4\"\n+    + \"\\u77a4\\u7784\\u7764\\u7744\\u7724\\u7704\\u76e4\\u76c4\\u76a4\\u7684\\u7664\"\n+    + \"\\u7644\\u7624\\u7604\\u75e4\\u75c4\\u75a4\\u7584\\u7564\\u7544\\u7524\\u7504\"\n+    + \"\\u74e4\\u74c4\\u74a4\\u7484\\u7464\\u7444\\u7424\\u7404\\u73e4\\u73c4\\u73a4\"\n+    + \"\\u7384\\u7364\\u7344\\u7324\\u7304\\u72e4\\u72c4\\u72a4\\u7284\\u7264\\u7244\"\n+    + \"\\u7224\\u7204\\u71e4\\u71c4\\u71a4\\u7184\\u7164\\u7144\\u7124\\u7104\\u70e4\"\n+    + \"\\u70c4\\u70a4\\u7084\\u7064\\u7044\\u7024\\u7004\\u6fe4\\u6fc4\\u6fa4\\u6f84\"\n+    + \"\\u6f64\\u6f44\\u6f24\\u6f04\\u6ee4\\u6ec4\\u6ea4\\u6e84\\u6e64\\u6e44\\u6e24\"\n+    + \"\\u6e04\\u6de4\\u6dc4\\u6da4\\u6d84\\u6d64\\u6d44\\u6d24\\u6d04\\u6ce4\\u6cc4\"\n+    + \"\\u6ca4\\u6c84\\u6c64\\u6c44\\u6c24\\u6c04\\u6be4\\u6bc4\\u6ba4\\u6b84\\u6b64\"\n+    + \"\\u6b44\\u6b24\\u6b04\\u6ae4\\u6ac4\\u6aa4\\u6a84\\u6a64\\u6a44\\u6a24\\u6a04\"\n+    + \"\\u69e4\\u60f0\\u6603\\u65e3\\u6964\\u6944\\u6924\\u6904\\u68e4\\u68c4\\u68a4\"\n+    + \"\\u6884\\u6864\\u6844\\u6824\\u6804\\u67e4\\u67c4\\u67a4\\u6784\\u6764\\u6744\"\n+    + \"\\u6724\\u6704\\u66e4\\u66c4\\u66a4\\u6684\\u6664\\u6644\\u6624\\u6604\\u65e4\"\n+    + \"\\u65c4\\u65a4\\u6584\\u6564\\u6544\\u6524\\u6504\\u6b20\\u6ddb\\u6e96\\u60e3\"\n+    + \"\\u60c3\\u60a3\\u6083\\u6063\\u6043\\u6023\\u6003\\u5fe3\\u5fc3\\u5fa3\\u5f83\"\n+    + \"\\u5f63\\u5f43\\u5f23\\u5f03\\u5ee3\\u5ec3\\u5ea3\\u5e83\\u5e63\\u5e43\\u5e23\"\n+    + \"\\u5e03\\u5de3\\u5dc3\\u5da3\\u5d83\\u5d63\\u5d43\\u5d23\\u5d03\\u5ce3\\u5cc3\"\n+    + \"\\u5ca3\\u5c83\\u5c63\\u5c43\\u5c23\\u5c03\\u5be3\\u5bc3\\u5ba3\\u5b83\\u5b63\"\n+    + \"\\u5b43\\u5b23\\u5b03\\u5ae3\\u5ac3\\u5aa3\\u5a83\\u5a63\\u5a43\\u5a23\\u5a03\"\n+    + \"\\u59e3\\u5d64\\u5d44\\u5d24\\u5d04\\u5ce4\\u5cc4\\u5ca4\\u5c84\\u5c64\\u5c44\"\n+    + \"\\u5c24\\u5c04\\u5be4\\u5bc4\\u5ba4\\u5b84\\u5b64\\u5b44\\u5b24\\u5b04\\u5ae4\"\n+    + \"\\u5ac4\\u5aa4\\u5a84\\u5a64\\u5a44\\u5a24\\u5a04\\u59e4\\u59c4\\u59a4\\u5984\"\n+    + \"\\u5964\\u5944\\u5924\\u5904\\u58e4\\u58c4\\u58a4\\u5884\\u5864\\u5844\\u5824\"\n+    + \"\\u5804\\u57e4\\u57c4\\u57a4\\u5784\\u5764\\u5744\\u5724\\u5704\\u56e4\\u56c4\"\n+    + \"\\u56a4\\u5684\\u5664\\u5644\\u5624\\u5604\\u55e4\\u55c4\\u55a4\\u5584\\u5564\"\n+    + \"\\u5544\\u5524\\u5504\\u54e4\\u54c4\\u54a4\\u5484\\u5464\\u5444\\u5424\\u5404\"\n+    + \"\\u53e4\\u53c4\\u53a4\\u5384\\u5364\\u5344\\u5324\\u5304\\u52e4\\u52c4\\u52a4\"\n+    + \"\\u5284\\u5264\\u5244\\u5224\\u5204\\u51e4\\u51c4\\u51a4\\u5184\\u5164\\u5144\"\n+    + \"\\u5124\\u5104\\u50e4\\u50c4\\u50a4\\u5084\\u5064\\u5044\\u5024\\u5004\\u4fe4\"\n+    + \"\\u4fc4\\u4fa4\\u4f84\\u4f64\\u4f44\\u4f24\\u4f04\\u4ee4\\u4ec4\\u4ea4\\u4e84\"\n+    + \"\\u4e64\\u4e44\\u4e24\\u4e04\\u4de4\\u4dc4\\u4da4\\u4d84\\u4d64\\u4d44\\u4d24\"\n+    + \"\\u4d04\\u4ce4\\u4cc4\\u4ca4\\u4c84\\u4c64\\u4c44\\u4c24\\u4c04\\u4be4\\u4bc4\"\n+    + \"\\u4ba4\\u4b84\\u4b64\\u4b44\\u4b24\\u4b04\\u4ae4\\u4ac4\\u4aa4\\u4a84\\u4a64\"\n+    + \"\\u4a44\\u4a24\\u4a04\\u49e4\\u49c4\\u49a4\\u4984\\u4964\\u4944\\u4924\\u4904\"\n+    + \"\\u48e4\\u48c4\\u48a4\\u4884\\u4864\\u4844\\u4824\\u4804\\u47e4\\u47c4\\u47a4\"\n+    + \"\\u4784\\u4764\\u4744\\u4724\\u4704\\u46e4\\u46c4\\u46a4\\u4684\\u4664\\u4644\"\n+    + \"\\u4624\\u4604\\u45e4\\u45c4\\u45a4\\u4584\\u4564\\u4544\\u4524\\u4504\\u44e4\"\n+    + \"\\u44c4\\u44a4\\u4484\\u4464\\u4444\\u4424\\u4404\\u43e4\\u43c4\\u43a4\\u4384\"\n+    + \"\\u4364\\u4344\\u4324\\u4304\\u42e4\\u42c4\\u42a4\\u4284\\u4264\\u4244\\u4224\"\n+    + \"\\u4204\\u41e4\\u41c4\\u41a4\\u4184\\u4164\\u4144\\u4124\\u4104\\u40e4\\u40c4\"\n+    + \"\\u40a4\\u4084\\u4064\\u4044\\u4024\\u4004\\u3fe4\\u3fc4\\u3fa4\\u3f84\\u3f64\"\n+    + \"\\u3f44\\u3f24\\u3f04\\u3ee4\\u3ec4\\u3ea4\\u3e84\\u3e64\\u3e44\\u3e24\\u3e04\"\n+    + \"\\u3de4\\u3dc4\\u3da4\\u3d84\\u3d64\\u3d44\\u3d24\\u3d04\\u3ce4\\u3cc4\\u3ca4\"\n+    + \"\\u3c84\\u3c64\\u3c44\\u3c24\\u3c04\\u3be4\\u3bc4\\u3ba4\\u3b84\\u3b64\\u3b44\"\n+    + \"\\u3b24\\u3b04\\u3ae4\\u3ac4\\u3aa4\\u3a84\\u3a64\\u3a44\\u3a24\\u3a04\\u39e4\"\n+    + \"\\u39c4\\u39a4\\u3984\\u3964\\u3944\\u3924\\u3904\\u38e4\\u38c4\\u38a4\\u3884\"\n+    + \"\\u3864\\u3844\\u3824\\u3804\\u37e4\\u37c4\\u37a4\\u3784\\u3764\\u3744\\u3724\"\n+    + \"\\u3704\\u36e4\\u36c4\\u36a4\\u3684\\u3664\\u3644\\u3624\\u3604\\u35e4\\u35c4\"\n+    + \"\\u35a4\\u3584\\u3564\\u3544\\u3524\\u3504\\u34e4\\u34c4\\u34a4\\u3484\\u3464\"\n+    + \"\\u3444\\u3424\\u3404\\u33e4\\u33c4\\u33a4\\u3384\\u3364\\u3344\\u3324\\u3304\"\n+    + \"\\u32e4\\u32c4\\u32a4\\u3284\\u3264\\u3244\\u3224\\u3204\\u31e4\\u28f2\\u2e03\"\n+    + \"\\u2de3\\u3c25\\u3c05\\u3be5\\u3bc5\\u3ba5\\u3b85\\u3b65\\u3b45\\u3b25\\u3b05\"\n+    + \"\\u3ae5\\u3ac5\\u3aa5\\u3a85\\u3a65\\u3a45\\u3a25\\u3a05\\u39e5\\u39c5\\u39a5\"\n+    + \"\\u3985\\u3965\\u3945\\u3925\\u3905\\u38e5\\u38c5\\u38a5\\u3885\\u3865\\u3845\"\n+    + \"\\u3825\\u3805\\u37e5\\u37c5\\u37a5\\u3785\\u3765\\u3745\\u3725\\u3705\\u36e5\"\n+    + \"\\u36c5\\u36a5\\u3685\\u3665\\u3645\\u3625\\u3605\\u35e5\\u35c5\\u35a5\\u3585\"\n+    + \"\\u3565\\u3545\\u3525\\u3505\\u34e5\\u34c5\\u34a5\\u3485\\u3465\\u3445\\u3445\"\n+    + \"\\u3425\\u3405\\u33e5\\u33c5\\u33a5\\u3385\\u3365\\u3345\\u3325\\u3305\\u32e5\"\n+    + \"\\u32c5\\u32a5\\u3285\\u3265\\u3245\\u3225\\u3205\\u31e5\\u31c5\\u31a5\\u3185\"\n+    + \"\\u3165\\u3145\\u3125\\u3105\\u30e5\\u30c5\\u30a5\\u3085\\u3065\\u3045\\u3025\"\n+    + \"\\u3005\\u2fe5\\u2fc5\\u2fa5\\u2f85\\u2f65\\u2f45\\u2f25\\u2f05\\u2ee5\\u2ec5\"\n+    + \"\\u2ea5\\u2e85\\u2e65\\u2e45\\u2e25\\u2e05\\u2de5\\u2dc5\\u2da5\\u2d85\\u2d65\"\n+    + \"\\u2d45\\u2d25\\u2d05\\u2ce5\\u2cc5\\u2ca5\\u2c85\\u2c65\\u2c45\\u2c25\\u2c05\"\n+    + \"\\u2be5\\u2bc5\\u2ba5\\u2b85\\u2b65\\u2b45\\u2b25\\u2b05\\u2ae5\\u2ac5\\u2aa5\"\n+    + \"\\u2a85\\u2a65\\u2a45\\u2a25\\u2a05\\u29e5\\u29c5\\u29a5\\u2985\\u2965\\u2945\"\n+    + \"\\u2925\\u2905\\u28e5\\u28c5\\u28a5\\u2885\\u2865\\u2845\\u2825\\u2805\\u27e5\"\n+    + \"\\u27c5\\u27a5\\u2785\\u2765\\u2745\\u2725\\u2705\\u26e5\\u26c5\\u26a5\\u2685\"\n+    + \"\\u2665\\u2645\\u2625\\u2605\\u25e5\\u25c5\\u25a5\\u2585\\u2565\\u2545\\u2525\"\n+    + \"\\u2505\\u24e5\\u24c5\\u24a5\\u2485\\u2465\\u2445\\u2425\\u2405\\u23e5\\u23c5\"\n+    + \"\\u23a5\\u2385\\u2365\\u2345\\u2325\\u2305\\u22e5\\u22c5\\u22a5\\u2285\\u2265\"\n+    + \"\\u2245\\u2225\\u2205\\u21e5\\u21c5\\u21a5\\u2185\\u2165\\u2145\\u2125\\u2105\"\n+    + \"\\u20e5\\u20c5\\u20a5\\u2085\\u2065\\u2045\\u2025\\u2005\\u1fe5\\u1fc5\\u1fa5\"\n+    + \"\\u1f85\\u1f65\\u1f45\\u1f25\\u1f05\\u1ee5\\u1ec5\\u1ea5\\u1e85\\u1e65\\u1e45\"\n+    + \"\\u1e25\\u1e05\\u1de5\\u1dc5\\u1da5\\u1d85\\u1d65\\u1d45\\u1d25\\u1d05\\u1ce5\"\n+    + \"\\u1cc5\\u1ca5\\u1c85\\u1c65\\u1c45\\u1c25\\u1c05\\u1be5\\u1bc5\\u1ba5\\u1b85\"\n+    + \"\\u1b65\\u1064\\u1044\\u1024\\u1004\\u0fe4\\u0fc4\\u0fa4\\u0f84\\u0f64\\u0668\"\n+    + \"\\u0b83\\u0b63\\u0b43\\u0b23\\u0b03\\u0ae3\\u0a72\\u1945\\u0a51\\u0d16\\u0cf6\"\n+    + \"\\u0cac\\u0ca3\\u0c96\\u0c76\\u0c56\\u0c36\\u0c16\\u0bf6\\u0bd6\\u0bb6\\u0b96\"\n+    + \"\\u0b76\\u0b58\\u0b26\\u0b16\\u0ab2\\u0ad6\\u0a96\\u02c2\\u07c3\\u1665\\u1661\"\n+    + \"\\u03ff\\u09f6\\u09d6\\u09b6\\u05dc\\u0bb2\\u15a1\\u0fc0\\u01c0\\u01b1\\u09c5\"\n+    + \"\\u0826\\u127f\";\n+\n+  /**\n+   * Information about each character.  The low order 5 bits form the\n+   * character type, the next bit is a flag for non-breaking spaces, and the\n+   * next bit is a flag for mirrored directionality.  The high order 9 bits\n+   * form the offset into the attribute tables.  Note that this limits the\n+   * number of unique character attributes to 512, which is not a problem\n+   * as of Unicode version 3.2.0, but may soon become one.\n+   */\n+  String DATA\n+    = \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u3e00\\u3e00\\u2f81\\u3002\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u5098\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u3e00\\u3e00\\u3e00\\u3e00\\u5102\\u5102\\u5102\\u5102\"\n+    + \"\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\"\n+    + \"\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\\u5102\"\n+    + \"\\u5102\\u5102\\u5102\\u5102\\u5102\\u2902\\u3e00\\u5098\\u2a14\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4606\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u1a1b\\u1a1b\\u3e00\\u3e00\\u3e00\\u3e00\\u4504\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u0298\\u3e00\\u0298\\u6515\\u6596\\u0298\\u1a97\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u4504\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u4504\\u4504\\u1a1b\\u1a1b\\u1a1b\\u1a1b\"\n+    + \"\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u4504\"\n+    + \"\\u4504\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\"\n+    + \"\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u2902\\u7102\\u2902\\u3e00\\u2902\\u2902\\u7301\"\n+    + \"\\u7301\\u7301\\u7301\\u7203\\u1a1b\\u1a1b\\u1a1b\\u6c82\\u6c82\\u2902\\u2902\"\n+    + \"\\u3e00\\u3e00\\u2902\\u2902\\u6d01\\u6d01\\u7381\\u7381\\u3e00\\u1a1b\\u1a1b\"\n+    + \"\\u1a1b\\u1b02\\u1b82\\u1c02\\u1c82\\u1d02\\u1d82\\u1e02\\u1e82\\u1f02\\u1f82\"\n+    + \"\\u2002\\u2082\\u2102\\u2182\\u2202\\u2282\\u2302\\u2382\\u2402\\u2482\\u2502\"\n+    + \"\\u2582\\u2602\\u2682\\u2702\\u2782\\u0455\\u0c99\\u04d6\\u0c99\\017\\017\"\n+    + \"\\017\\017\\017\\u010f\\017\\017\\017\\017\\017\\017\\017\"\n+    + \"\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\\017\"\n+    + \"\\017\\017\\017\\017\\017\\017\\017\\017\\u008f\\u010f\\u008f\"\n+    + \"\\u018f\\u010f\\017\\017\\017\\017\\017\\017\\017\\017\\017\"\n+    + \"\\017\\017\\017\\017\\017\\u010f\\u010f\\u010f\\u008f\\u020c\\u0298\"\n+    + \"\\u0298\\u0318\\u039a\\u0318\\u0298\\u0298\\u0455\\u04d6\\u0298\\u0519\\u0598\"\n+    + \"\\u0614\\u0598\\u0698\\u0709\\u0789\\u0809\\u0889\\u0909\\u0989\\u0a09\\u0a89\"\n+    + \"\\u0b09\\u0b89\\u0598\\u0298\\u0c59\\u0c99\\u0c59\\u0298\\u0d01\\u0d81\\u0e01\"\n+    + \"\\u0e81\\u0f01\\u0f81\\u1001\\u1081\\u1101\\u1181\\u1201\\u1281\\u1301\\u1381\"\n+    + \"\\u1401\\u1481\\u1501\\u1581\\u1601\\u1681\\u1701\\u1781\\u1801\\u1881\\u1901\"\n+    + \"\\u1981\\u0455\\u0298\\u04d6\\u1a1b\\u1a97\\u0298\\u0298\\u0298\\u0c99\\u0455\"\n+    + \"\\u04d6\\u3e00\\u0298\\u0298\\u0298\\u0298\\u0298\\u0298\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u282c\\u0298\\u039a\\u039a\\u039a\\u039a\\u289c\"\n+    + \"\\u289c\\u1a1b\\u289c\\u2902\\u29dd\\u0c99\\u2a14\\u289c\\u1a1b\\u2a9c\\u0519\"\n+    + \"\\u2b0b\\u2b8b\\u1a1b\\u2c02\\u289c\\u0298\\u1a1b\\u2c8b\\u2902\\u2d5e\\u2d8b\"\n+    + \"\\u2d8b\\u2d8b\\u0298\\u0298\\u0519\\u0614\\u0c99\\u0c99\\u0c99\\u3e00\\u0298\"\n+    + \"\\u039a\\u0318\\u0298\\u3e00\\u3e00\\u3e00\\u3e00\\u5305\\u5305\\u5305\\u3e00\"\n+    + \"\\u5305\\u3e00\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\\u4f1c\\u4f1c\\u4e81\\u4e81\"\n+    + \"\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\\u4e81\"\n+    + \"\\u4e81\\u4e81\\u4e81\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\"\n+    + \"\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\"\n+    + \"\\u2e01\\u2e01\\u2e01\\u2e01\\u0c99\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\"\n+    + \"\\u2e01\\u2902\\u3281\\u2f81\\u3002\\u2f81\\u3002\\u3301\\u2f81\\u3002\\u3381\"\n+    + \"\\u3381\\u2f81\\u3002\\u2902\\u3401\\u3481\\u3501\\u2f81\\u3002\\u3381\\u3581\"\n+    + \"\\u3602\\u3681\\u3701\\u2f81\\u3002\\u2902\\u2902\\u3681\\u3781\\u2902\\u3801\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2902\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\"\n+    + \"\\u5e89\\u5f09\\u5f89\\u4586\\u4586\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u1a1b\\u1a1b\\u4681\"\n+    + \"\\u0298\\u4701\\u4701\\u4701\\u3e00\\u4781\\u3e00\\u4801\\u4801\\u2902\\u2e01\"\n+    + \"\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\"\n+    + \"\\u2e01\\u2e01\\u2e01\\u2e01\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u0c99\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u2f02\\u2e82\\u2e82\\u4982\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u2e82\\u2e82\\u4a02\\u4a82\\u4a82\\u3e00\\u4b02\\u4b82\\u4c01\"\n+    + \"\\u4c01\\u4c01\\u4c82\\u4d02\\u2902\\u3e00\\u3e00\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2902\\u3b01\\u3b83\\u3c02\\u2f81\\u3002\\u3d01\\u3d81\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u3081\\u3102\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2902\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u4d82\\u4e02\\u3c82\\u2902\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u5a10\\u5a10\\u5a10\\u5a10\\u5a10\\u5a10\\u7d8b\\u3e00\\u3e00\\u3e00\\u7e0b\"\n+    + \"\\u7e8b\\u7f0b\\u7f8b\\u800b\\u808b\\u0519\\u0519\\u0c99\\u0455\\u04d6\\u2902\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3b01\\u3b83\\u3c02\\u3b01\\u3b83\\u3c02\\u3b01\"\n+    + \"\\u3b83\\u3c02\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u3c82\\u2f81\\u3002\\u4f1c\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u3e00\\u4f87\\u4f87\\u3e00\\u3e00\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u3181\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u3202\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u3881\\u2f81\\u3002\\u3881\\u2902\\u2902\\u2f81\\u3002\"\n+    + \"\\u3881\\u2f81\\u3002\\u3901\\u3901\\u2f81\\u3002\\u2f81\\u3002\\u3981\\u2f81\"\n+    + \"\\u3002\\u2902\\u3a05\\u2f81\\u3002\\u2902\\u3a82\\u4c01\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u3e00\\u3e00\\u2f81\\u3002\\u3e00\\u3e00\\u2f81\\u3002\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u0598\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u5298\\u3e00\\u3e00\\u3e00\\u5298\\u5298\\u5298\\u5298\\u5298\"\n+    + \"\\u5298\\u5298\\u5298\\u5298\\u5298\\u5298\\u5298\\u5298\\u5298\\u3e00\\u5a10\"\n+    + \"\\u5305\\u4586\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u3e00\\u3e00\"\n+    + \"\\u5a10\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\"\n+    + \"\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\"\n+    + \"\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u2902\\u2902\\u2902\\u3e82\\u3f02\\u2902\\u3f82\\u3f82\\u2902\\u4002\\u2902\"\n+    + \"\\u4082\\u2902\\u2902\\u2902\\u2902\\u3f82\\u2902\\u2902\\u4102\\u2902\\u2902\"\n+    + \"\\u2902\\u2902\\u4182\\u4202\\u2902\\u2902\\u2902\\u2902\\u2902\\u4202\\u2902\"\n+    + \"\\u2902\\u4282\\u2902\\u2902\\u4302\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\"\n+    + \"\\u2902\\u2902\\u2902\\u2902\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u2902\\u2902\\u2902\\u2902\\u2902\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u5205\\u4586\\u5205\\u5205\\u3e00\\u5205\\u5205\"\n+    + \"\\u3e00\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5298\\u5305\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4f87\\u4f87\\u4586\\u4f87\"\n+    + \"\\u4f87\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\\u2d8b\"\n+    + \"\\u2d8b\\u828b\\u4382\\u2902\\u2902\\u4382\\u2902\\u2902\\u2902\\u2902\\u4382\"\n+    + \"\\u2902\\u4402\\u4402\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u4482\\u2902\"\n+    + \"\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\\u2902\"\n+    + \"\\u2902\\u2902\\u3e00\\u3e00\\u4504\\u4504\\u4504\\u4504\\u4504\\u4504\\u4504\"\n+    + \"\\u4504\\u4504\\u1a1b\\u1a1b\\u4504\\u4504\\u4504\\u4504\\u4504\\u1a1b\\u1a1b\"\n+    + \"\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u1a1b\\u4504\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\"\n+    + \"\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\\u5001\"\n+    + \"\\u5001\\u5001\\u5001\\u5001\\u3e00\\u3e00\\u4504\\u5098\\u5098\\u5098\\u5098\"\n+    + \"\\u5098\\u5098\\u2e01\\u2e01\\u3e00\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\\u2e01\"\n+    + \"\\u2e01\\u2e01\\u2e01\\u4882\\u4902\\u4902\\u4902\\u2902\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\\u2e82\"\n+    + \"\\u2e82\\u2e82\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\"\n+    + \"\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4e02\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u5098\\u4586\\u4586\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u3e00\\u4586\\u4586\\u4586\\u5198\\u4586\\u4586\\u5198\\u4586\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5205\\u5205\"\n+    + \"\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\"\n+    + \"\\u5205\\u5205\\u5205\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5205\\u5205\\u5205\"\n+    + \"\\u5198\\u5198\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\"\n+    + \"\\u630b\\u638b\\u640b\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u5a88\\u5a88\\u5a88\\u5a88\\u3e00\"\n+    + \"\\u4586\\u4586\\u4586\\u3e00\\u4586\\u4586\\u4586\\u4586\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u5a88\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u5a88\"\n+    + \"\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u5b09\\u5b89\"\n+    + \"\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\\u4f1c\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u5409\\u5489\\u5509\\u5589\\u5609\\u5689\\u5709\\u5789\\u5809\"\n+    + \"\\u5889\\u0318\\u5918\\u5918\\u5298\\u3e00\\u3e00\\u4586\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u3e00\\u3e00\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u6515\\u6596\"\n+    + \"\\u5384\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\\u5305\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\"\n+    + \"\\u5a88\\u5098\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u4586\\u4586\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u5098\\u5098\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u5384\\u5384\\u4586\\u4586\\u289c\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u3e00\\u3e00\\u0709\\u0789\\u0809\\u0889\\u0909\\u0989\\u0a09\\u0a89\\u0b09\"\n+    + \"\\u0b89\\u5305\\u5305\\u5305\\u599c\\u599c\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3e00\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u4586\\u3a05\\u3a05\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\"\n+    + \"\\u4586\\u4586\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u4586\\u4586\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u4586\\u3a05\\u5a88\\u5a88\"\n+    + \"\\u5a88\\u5a88\\u5a88\\u3e00\\u4586\\u5a88\\u5a88\\u3e00\\u5a88\\u5a88\\u4586\"\n+    + \"\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u5a88\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3e00\\u5098\\u5098\\u5098\"\n+    + \"\\u5098\\u5098\\u5098\\u5098\\u5098\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\"\n+    + \"\\u5e89\\u5f09\\u5f89\\u630b\\u660b\\u668b\\u670b\\u678b\\u680b\\u688b\\u690b\"\n+    + \"\\u698b\\u638b\\u6a0b\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3e00\\u4586\\u3a05\\u5a88\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u5a88\\u5a88\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\\u3a05\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3a05\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\"\n+    + \"\\u4586\\u3e00\\u5a88\\u5a88\\u5a88\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u4586\"\n+    + \"\\u3a05\\u3a05\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\"\n+    + \"\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\\u039a\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3a05\\u3a05\\u4586\\u4586\\u5098\\u5098\\u5b09\\u5b89\\u5c09\\u5c89\"\n+    + \"\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\\u5098\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u0298\\u0298\\u0318\\u039a\\u0318\\u0298\\u0298\\u6515\\u6596\\u0298\\u0519\"\n+    + \"\\u0598\\u0614\\u0598\\u0698\\u0709\\u0789\\u0809\\u0889\\u0909\\u0989\\u0a09\"\n+    + \"\\u0a89\\u0b09\\u0b89\\u0598\\u0298\\u0c99\\u0c99\\u0c99\\u0298\\u0298\\u0298\"\n+    + \"\\u0298\\u0298\\u0298\\u2a14\\u0298\\u0298\\u0298\\u0298\\u5a10\\u5a10\\u5a10\"\n+    + \"\\u5a10\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\"\n+    + \"\\u5f89\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u4586\\u4586\\u4586\\u4586\\u3e00\\u3e00\"\n+    + \"\\u5a88\\u5a88\\u3e00\\u3e00\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3a05\\u3e00\\u3e00\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3e00\\u3e00\\u4586\\u3e00\\u5a88\\u5a88\"\n+    + \"\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u3e00\\u3e00\\u4586\"\n+    + \"\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u4586\\u4586\\u3e00\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\"\n+    + \"\\u5e89\\u5f09\\u5f89\\u3a05\\u3a05\\u039a\\u039a\\u600b\\u608b\\u610b\\u618b\"\n+    + \"\\u620b\\u628b\\u4f1c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u3e00\\u4586\\u3a05\\u5a88\\u5a88\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u3e00\\u4586\\u4586\\u5a88\\u3e00\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\"\n+    + \"\\u5e09\\u5e89\\u5f09\\u5f89\\u620b\\u620b\\u620b\\u620b\\u620b\\u620b\\u620b\"\n+    + \"\\u620b\\u620b\\u620b\\u4f1c\\u4586\\u4f1c\\u4586\\u4f1c\\u4586\\u6515\\u6596\"\n+    + \"\\u6515\\u6596\\u5a88\\u5a88\\u4586\\u4586\\u4586\\u3e00\\u3e00\\u3e00\\u5a88\"\n+    + \"\\u5a88\\u3e00\\u3e00\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u4586\\u5a88\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\\u3e00\\u5a88\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u4586\\u4586\"\n+    + \"\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u5a88\\u5a88\\u5a88\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u5a88\\u5a88\\u3e00\\u3e00\\u3e00\\u5a88\"\n+    + \"\\u5a88\\u5a88\\u3e00\\u5a88\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u4504\\u3e00\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u3e00\\u3e00\\u5b09\\u5b89\\u5c09\"\n+    + \"\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\\u3e00\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\"\n+    + \"\\u5e89\\u5f09\\u5f89\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4f87\"\n+    + \"\\u4f87\\u4f87\\u5a88\\u4586\\u4586\\u4586\\u3e00\\u3e00\\u5a88\\u5a88\\u5a88\"\n+    + \"\\u3e00\\u5a88\\u5a88\\u5a88\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u5a88\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u5a88\\u5a88\\u5a88\\u4586\\u4586\\u4586\"\n+    + \"\\u3e00\\u4586\\u3e00\\u5a88\\u5a88\\u5a88\\u5a88\\u5a88\\u5a88\\u5a88\\u5a88\"\n+    + \"\\u4586\\u5a88\\u5a88\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u4586\\u4586\\u5098\\u5098\\u5098\\u5098\\u5098\\u5098\\u5098\\u039a\"\n+    + \"\\u5098\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u4504\"\n+    + \"\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u4586\\u5098\\u5b09\\u5b89\"\n+    + \"\\u5c09\\u5c89\\u5d09\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\\u5098\\u5098\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3a05\\u4f1c\\u4f1c\\u4f1c\\u5098\\u5098\\u5098\\u5098\"\n+    + \"\\u5098\\u5098\\u5098\\u5098\\u64b8\\u5098\\u5098\\u5098\\u5098\\u5098\\u5098\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4586\\u4586\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4586\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u3e00\\u3e00\"\n+    + \"\\u4f1c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u1a97\\u4504\\u4504\\u4504\\u3e00\\u5b09\\u5b89\\u5c09\\u5c89\\u5d09\"\n+    + \"\\u5d89\\u5e09\\u5e89\\u5f09\\u5f89\\u5098\\u5098\\u5098\\u5098\\u5098\\u5098\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u5a88\\u5a88\\u4586\\u4586\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u020c\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u6515\"\n+    + \"\\u6596\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u5098\\u5098\\u5098\\u6a8b\\u6b0b\\u6b8b\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u4586\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\"\n+    + \"\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\\u2f81\\u3002\"\n+    + \"\\u2f81\\u3002\\u2902\\u2902\\u2902\\u2902\\u2902\\u6c02\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6d01\\u6d01\"\n+    + \"\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\"\n+    + \"\\u6c82\\u6c82\\u6c82\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\\u6d01\"\n+    + \"\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u3e00\\u3e00\\u6d01\\u6d01\\u6d01\"\n+    + \"\\u6d01\\u6d01\\u6d01\\u3e00\\u3e00\\u2902\\u6c82\\u2902\\u6c82\\u2902\\u6c82\"\n+    + \"\\u2902\\u6c82\\u3e00\\u6d01\\u3e00\\u6d01\\u3e00\\u6d01\\u3e00\\u6d01\\u6c82\"\n+    + \"\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6d01\\u6d01\\u6d01\\u6d01\"\n+    + \"\\u6d01\\u6d01\\u6d01\\u6d01\\u6d82\\u6d82\\u6e02\\u6e02\\u6e02\\u6e02\\u6e82\"\n+    + \"\\u6e82\\u6f02\\u6f02\\u6f82\\u6f82\\u7002\\u7002\\u3e00\\u3e00\\u6c82\\u6c82\"\n+    + \"\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u7083\\u7083\\u7083\\u7083\\u7083\"\n+    + \"\\u7083\\u7083\\u7083\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\\u6c82\"\n+    + \"\\u7083\\u7083\\u7083\\u7083\\u7083\\u7083\\u7083\\u7083\\u6c82\\u6c82\\u2902\"\n+    + \"\\u7102\\u2902\\u3e00\\u2902\\u2902\\u6d01\\u6d01\\u7181\\u7181\\u7203\\u1a1b\"\n+    + \"\\u7282\\u1a1b\\u1b02\\u1b82\\u1c02\\u1c82\\u1d02\\u1d82\\u1e02\\u1e82\\u1f02\"\n+    + \"\\u1f82\\u2002\\u2082\\u2102\\u2182\\u2202\\u2282\\u2302\\u2382\\u2402\\u2482\"\n+    + \"\\u2502\\u2582\\u2602\\u2682\\u2702\\u2782\\u6515\\u0c99\\u6596\\u0c99\\u3e00\"\n+    + \"\\u6c82\\u6c82\\u2902\\u2902\\u2902\\u7402\\u2902\\u2902\\u6d01\\u6d01\\u7481\"\n+    + \"\\u7481\\u7501\\u1a1b\\u1a1b\\u1a1b\\u3e00\\u3e00\\u2902\\u7102\\u2902\\u3e00\"\n+    + \"\\u2902\\u2902\\u7581\\u7581\\u7601\\u7601\\u7203\\u1a1b\\u1a1b\\u3e00\\u020c\"\n+    + \"\\u020c\\u020c\\u020c\\u020c\\u020c\\u020c\\u76ac\\u020c\\u020c\\u020c\\u770c\"\n+    + \"\\u5a10\\u5a10\\u7790\\u7810\\u2a14\\u78b4\\u2a14\\u2a14\\u2a14\\u2a14\\u0298\"\n+    + \"\\u0298\\u791d\\u799e\\u6515\\u791d\\u791d\\u799e\\u6515\\u791d\\u0298\\u0298\"\n+    + \"\\u0298\\u0298\\u0298\\u0298\\u0298\\u0298\\u7a0d\\u7a8e\\u7b10\\u7b90\\u7c10\"\n+    + \"\\u7c90\\u7d10\\u76ac\\u0318\\u0318\\u0318\\u0318\\u0318\\u0298\\u0298\\u0298\"\n+    + \"\\u0298\\u29dd\\u2d5e\\u0298\\u0298\\u0298\\u0298\\u1a97\\u7d8b\\u2c8b\\u2b0b\"\n+    + \"\\u2b8b\\u7e0b\\u7e8b\\u7f0b\\u7f8b\\u800b\\u808b\\u0519\\u0519\\u0c99\\u0455\"\n+    + \"\\u04d6\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u4c01\\u289c\\u289c\\u289c\\u289c\\u4c01\\u289c\\u289c\\u2902\\u4c01\\u4c01\"\n+    + \"\\u4c01\\u2902\\u2902\\u4c01\\u4c01\\u4c01\\u2902\\u289c\\u4c01\\u289c\\u289c\"\n+    + \"\\u289c\\u4c01\\u4c01\\u4c01\\u4c01\\u4c01\\u289c\\u289c\\ua08a\\ua10a\\ua18a\"\n+    + \"\\ua20a\\ua28a\\ua30a\\ua38a\\ua40a\\ua48a\\u4586\\u4586\\u4586\\u4586\\u4586\"\n+    + \"\\u4586\\u2a14\\u4504\\u4504\\u4504\\u4504\\u4504\\u289c\\u289c\\ua50a\\ua58a\"\n+    + \"\\ua60a\\u3e00\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u3e00\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u0c99\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u0c99\\u0c99\"\n+    + \"\\u289c\\u289c\\u0c99\\u289c\\u0c99\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u0c99\\u289c\"\n+    + \"\\u289c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u930a\\u938a\\u940a\\u948a\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u0c99\\u0c99\"\n+    + \"\\u0c99\\u0c99\\u0c99\\u289c\\u289c\\u289c\\u289c\\u289c\\u0c99\\u0c99\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u4c01\\u289c\\u8101\\u289c\\u4c01\\u289c\\u8181\\u8201\"\n+    + \"\\u4c01\\u4c01\\u2a9c\\u2902\\u4c01\\u4c01\\u289c\\u4c01\\u2902\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u2902\\u289c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u830a\\u838a\"\n+    + \"\\u840a\\u848a\\u850a\\u858a\\u860a\\u868a\\u870a\\u878a\\u880a\\u888a\\u890a\"\n+    + \"\\u898a\\u8a0a\\u8a8a\\u8b0a\\u8b8a\\u8c0a\\u8c8a\\u8d0a\\u8d8a\\u8e0a\\u8e8a\"\n+    + \"\\u8f0a\\u8f8a\\u900a\\u908a\\u910a\\u918a\\u920a\\u928a\\u0c99\\u0c99\\u0c59\"\n+    + \"\\u0c59\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\\u0c99\"\n+    + \"\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c99\\u0c99\\u0c59\\u0c59\\u0c99\\u0c99\\u0c99\\u0c99\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\"\n+    + \"\\u0c59\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u0c99\\u289c\\u289c\\u0c99\"\n+    + \"\\u289c\\u289c\\u0c99\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u0c99\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u3e00\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\"\n+    + \"\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\\u0c99\\u0c99\"\n+    + \"\\u0c59\\u0519\\u0519\\u0c99\\u0c59\\u0c59\\u0c99\\u0c99\\u0c99\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c59\\u0c99\\u0c59\\u0c99\\u0c59\\u0c99\\u0c99\\u0c99\\u0c99\\u0c59\"\n+    + \"\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\\u0c99\\u0c99\"\n+    + \"\\u0c99\\u0c99\\u0c59\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u0455\\u04d6\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\"\n+    + \"\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9a9c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\"\n+    + \"\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\\u9b1c\"\n+    + \"\\u7d8b\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u0c59\\u0c99\\u0c59\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c99\\u0c99\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\"\n+    + \"\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c59\\u0c99\"\n+    + \"\\u0c99\\u0c59\\u0c59\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u039a\\u039a\\u0c99\\u1a1b\\u289c\"\n+    + \"\\u039a\\u039a\\u3e00\\u289c\\u0c99\\u0c99\\u0c99\\u0c99\\u289c\\u289c\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u5a10\\u5a10\"\n+    + \"\\u5a10\\u289c\\u289c\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u3e00\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u3e00\\u289c\\u3e00\\u289c\\u289c\\u289c\\u289c\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u289c\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u828b\\u9b8b\\u9c0b\\u9c8b\\u9d0b\\u9d8b\\u9e0b\\u9e8b\"\n+    + \"\\u9f0b\\u9f8b\\u828b\\u9b8b\\u9c0b\\u9c8b\\u9d0b\\u9d8b\\u9e0b\\u9e8b\\u9f0b\"\n+    + \"\\u9f8b\\u289c\\u3e00\\u3e00\\u3e00\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u0c59\\u0c59\\u0c59\\u0c59\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u289c\\u289c\\u289c\\u289c\\u289c\\u4f1c\\u289c\\u289c\\u289c\\u289c\\u289c\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u620b\\u620b\\u620b\\u620b\\u620b\\u620b\"\n+    + \"\\u620b\\u620b\\u620b\\u620b\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u3e00\\u3e00\\u3e00\\u4f1c\\u600b\\u608b\\u610b\\u618b\"\n+    + \"\\ua68b\\ua70b\\ua78b\\ua80b\\ua88b\\u630b\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u289c\\u3e00\\u289c\\u289c\\u289c\\u3e00\\u289c\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u2c8b\"\n+    + \"\\u2b0b\\u2b8b\\u7e0b\\u7e8b\\u7f0b\\u7f8b\\u800b\\u808b\\u950b\\u958b\\u960b\"\n+    + \"\\u968b\\u970b\\u978b\\u980b\\u988b\\u990b\\u998b\\u9a0b\\u2c8b\\u2b0b\\u2b8b\"\n+    + \"\\u7e0b\\u7e8b\\u7f0b\\u7f8b\\u800b\\u808b\\u950b\\u958b\\u960b\\u968b\\u970b\"\n+    + \"\\u978b\\u980b\\u988b\\u990b\\u998b\\u9a0b\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u020c\"\n+    + \"\\u0298\\u0298\\u0298\\u289c\\u4504\\u3a05\\ua00a\\u0455\\u04d6\\u0455\\u04d6\"\n+    + \"\\u0455\\u04d6\\u0455\\u04d6\\u0455\\u04d6\\u289c\\u289c\\u0455\\u04d6\\u0455\"\n+    + \"\\u04d6\\u0455\\u04d6\\u0455\\u04d6\\u2a14\\u6515\\u6596\\u6596\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u4586\\u4586\\u1a1b\\u1a1b\\u4504\\u4504\\u3e00\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\\u3a05\"\n+    + \"\\u3a05\\u3e00\\u4f1c\\u4f1c\\u620b\\u620b\\u620b\\u620b\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\\u4f1c\"\n+    + \"\\u4f1c\\u4f1c\\u4f1c\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\ua913\\ua913\"\n+    + \"\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\"\n+    + \"\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\"\n+    + \"\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua913\\ua992\\ua992\\ua992\"\n+    + \"\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\"\n+    + \"\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\"\n+    + \"\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\ua992\\u5205\\u5205\\u5205\\u5205\"\n+    + \"\\u5205\\u5205\\u5205\\u5205\\u5205\\u0519\\u5205\\u5205\\u5205\\u5205\\u5205\"\n+    + \"\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u5205\\u3e00\\u5205\\u5205\"\n+    + \"\\u5205\\u5205\\u5205\\u3e00\\u5205\\u3e00\\u4586\\u4586\\u4586\\u4586\\u3e00\"\n+    + \"\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\\u3e00\"\n+    + \"\\u0298\\u2a14\\u2a14\\u1a97\\u1a97\\u6515\\u6596\\u6515\\u6596\\u6515\\u6596\"\n+    + \"\\u6515\\u6596\\u6515\\u6596\\u6515\\u6596\\u3e00\\u3e00\\u3e00\\u3e00\\u0298\"\n+    + \"\\u0298\\u0298\\u0298\\u1a97\\u1a97\\u1a97\\u0598\\u0298\\u0598\\u3e00\\u0298\"\n+    + \"\\u0598\\u0298\\u0298\\u2a14\\u6515\\u6596\\u6515\\u6596\\u6515\\u6596\\u0318\"\n+    + \"\\u0298\\u0d01\\u0d81\\u0e01\\u0e81\\u0f01\\u0f81\\u1001\\u1081\\u1101\\u1181\"\n+    + \"\\u1201\\u1281\\u1301\\u1381\\u1401\\u1481\\u1501\\u1581\\u1601\\u1681\\u1701\"\n+    + \"\\u1781\\u1801\\u1881\\u1901\\u1981\\u6515\\u0298\\u6596\\u1a1b\\u1a97\";\n+\n+  /**\n+   * This is the attribute table for computing the numeric value of a\n+   * character.  The value is -1 if Unicode does not define a value, -2\n+   * if the value is not a positive integer, otherwise it is the value.\n+   * Note that this is a signed value, but stored as an unsigned char\n+   * since this is a String literal.\n+   */\n+  String NUM_VALUE\n+    = \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\000\\001\\002\\003\\004\\005\\006\\007\"\n+    + \"\\010\\011\\uffff\\uffff\\012\\013\\014\\015\\016\\017\\020\"\n+    + \"\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\"\n+    + \"\\034\\035\\036\\037 !\\\"#\\uffff\\uffff\\012\"\n+    + \"\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\"\n+    + \"\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037 \"\n+    + \"!\\\"#\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\002\\003\"\n+    + \"\\uffff\\001\\uffff\\ufffe\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\000\\001\\002\\003\\004\\005\\006\\007\"\n+    + \"\\010\\011\\uffff\\uffff\\uffff\\uffff\\000\\001\\002\\003\\004\"\n+    + \"\\005\\006\\007\\010\\011\\001\\002\\003\\004\\uffff\\020\"\n+    + \"\\012d\\u03e8\\uffff\\uffff\\uffff\\024\\036(2<\"\n+    + \"FPZ\\u2710\\021\\022\\023\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\"\n+    + \"\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\000\\004\"\n+    + \"\\005\\006\\007\\010\\011\\uffff\\uffff\\uffff\\001\\001\\002\"\n+    + \"\\003\\004\\005\\006\\007\\010\\011\\012\\013\\0142\"\n+    + \"d\\u01f4\\u03e8\\001\\002\\003\\004\\005\\006\\007\\010\"\n+    + \"\\011\\012\\013\\0142d\\u01f4\\u03e8\\u03e8\\u1388\\u2710\"\n+    + \"\\uffff\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\"\n+    + \"\\024\\uffff\\uffff\\002\\003\\004\\005\\006\\007\\010\\011\"\n+    + \"\\012\\000\\001\\002\\003\\004\\005\\006\\007\\010\\011\"\n+    + \"\\012\\024\\036\\005\\006\\007\\010\\011\\uffff\\uffff\";\n+\n+  /**\n+   * This is the attribute table for computing the uppercase representation\n+   * of a character.  The value is the signed difference between the\n+   * character and its uppercase version.  Note that this is stored as an\n+   * unsigned char since this is a String literal.\n+   */\n+  String UPPER\n+    = \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\uffe0\"\n+    + \"\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\"\n+    + \"\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\\uffe0\"\n+    + \"\\uffe0\\uffe0\\uffe0\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\u02e7\\000\\000\\000\\000\\uffe0y\\000\\uffff\\000\\uff18\"\n+    + \"\\000\\ufed4\\000\\000\\000\\000\\000\\000\\000a\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\0008\\000\\uffff\\ufffe\"\n+    + \"\\uffb1\\000\\000\\000\\uff2e\\uff32\\uff33\\uff36\\uff35\\uff31\\uff2f\"\n+    + \"\\uff2d\\uff2b\\uff2a\\uff26\\uff27\\uff25\\000\\000T\\000\\000\"\n+    + \"\\000\\000\\uffda\\uffdb\\uffe1\\uffc0\\uffc1\\uffc2\\uffc7\\000\\uffd1\"\n+    + \"\\uffca\\uffaa\\uffb0\\000\\000\\000\\000\\000\\uffd0\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\uffc5\\010\\000J\"\n+    + \"Vd\\u0080p~\\000\\011\\000\\000\\ue3db\\000\"\n+    + \"\\000\\007\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\"\n+    + \"\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\ufff0\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\uffe6\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\";\n+\n+  /**\n+   * This is the attribute table for computing the lowercase representation\n+   * of a character.  The value is the signed difference between the\n+   * character and its lowercase version.  Note that this is stored as an\n+   * unsigned char since this is a String literal.\n+   */\n+  String LOWER\n+    = \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000       \"\n+    + \"           \"\n+    + \"        \\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000 \\000\\000\\001\\000\\uff39\\000\"\n+    + \"\\uff87\\000\\u00d2\\u00ce\\u00cdO\\u00ca\\u00cb\\u00cf\\000\\u00d3\"\n+    + \"\\u00d1\\u00d5\\u00d6\\u00da\\u00d9\\u00db\\000\\000\\002\\001\\000\"\n+    + \"\\000\\uff9f\\uffc8\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000&%\"\n+    + \"@?\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000P\\000\\0000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\ufff8\\000\"\n+    + \"\\000\\000\\000\\000\\000\\ufff8\\000\\uffb6\\ufff7\\000\\uffaa\"\n+    + \"\\uff9c\\000\\uff90\\ufff9\\uff80\\uff82\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\ue2a3\\udf41\\udfba\\000\\020\\020\"\n+    + \"\\020\\020\\020\\020\\020\\020\\020\\020\\020\\020\\020\"\n+    + \"\\020\\020\\020\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\032\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\";\n+\n+  /**\n+   * This is the attribute table for computing the directionality class\n+   * of a character.  At present, the value is in the range 0 - 18 if the\n+   * character has a direction, otherwise it is -1.  Note that this is\n+   * stored as an unsigned char since this is a String literal.\n+   */\n+  String DIRECTION\n+    = \"\\011\\013\\012\\014\\014\\015\\005\\005\\015\\015\\005\"\n+    + \"\\007\\005\\004\\003\\003\\003\\003\\003\\003\\003\\003\"\n+    + \"\\003\\003\\015\\015\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\015\\015\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\007\\015\\000\\015\\015\\005\\003\\003\"\n+    + \"\\000\\003\\015\\015\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\uffff\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\010\\010\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\010\\000\\000\\000\\001\\001\"\n+    + \"\\002\\002\\002\\006\\006\\006\\006\\006\\006\\006\\006\"\n+    + \"\\006\\006\\006\\002\\011\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\015\\015\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\014\\011\\000\\001\\015\"\n+    + \"\\015\\015\\014\\012\\016\\020\\022\\017\\021\\003\\003\"\n+    + \"\\003\\003\\003\\003\\003\\000\\000\\000\\015\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"\n+    + \"\\003\\000\\000\\015\\015\\015\\015\\015\\015\\015\\015\"\n+    + \"\\015\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n+    + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\";\n+\n+  /**\n+   * This is the listing of titlecase special cases (all other character\n+   * can use <code>UPPER</code> to determine their titlecase).  The listing\n+   * is a sequence of character pairs; converting the first character of the\n+   * pair to titlecase produces the second character.\n+   */\n+  String TITLE\n+    = \"\\u01c4\\u01c5\\u01c5\\u01c5\\u01c6\\u01c5\\u01c7\\u01c8\\u01c8\\u01c8\\u01c9\"\n+    + \"\\u01c8\\u01ca\\u01cb\\u01cb\\u01cb\\u01cc\\u01cb\\u01f1\\u01f2\\u01f2\\u01f2\"\n+    + \"\\u01f3\\u01f2\";\n+}"}, {"sha": "cdfd6adbb295f07a898b42a1f4329b6e8e1701ce", "filename": "libjava/include/java-chardecomp.h", "status": "modified", "additions": 315, "deletions": 221, "changes": 536, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Finclude%2Fjava-chardecomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Finclude%2Fjava-chardecomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-chardecomp.h?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -3,7 +3,8 @@\n #ifndef __JAVA_CHARDECOMP_H__\n #define __JAVA_CHARDECOMP_H__\n \n-// These tables are automatically generated by the chartables.pl\n+\n+// These tables are automatically generated by the scripts/unicode-decomp.pl\n // script.  DO NOT EDIT the tables.  Instead, fix the script\n // and run it again.\n \n@@ -200,8 +201,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x01dc, \"\\x00\\xfc\\x03\\x00\" },\n   { 0x01de, \"\\x00\\xc4\\x03\\x04\" },\n   { 0x01df, \"\\x00\\xe4\\x03\\x04\" },\n-  { 0x01e0, \"\\x00\\x41\\x03\\x07\\x03\\x04\" },\n-  { 0x01e1, \"\\x00\\x61\\x03\\x07\\x03\\x04\" },\n+  { 0x01e0, \"\\x02\\x26\\x03\\x04\" },\n+  { 0x01e1, \"\\x02\\x27\\x03\\x04\" },\n   { 0x01e2, \"\\x00\\xc6\\x03\\x04\" },\n   { 0x01e3, \"\\x00\\xe6\\x03\\x04\" },\n   { 0x01e6, \"\\x00\\x47\\x03\\x0c\" },\n@@ -217,6 +218,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x01f0, \"\\x00\\x6a\\x03\\x0c\" },\n   { 0x01f4, \"\\x00\\x47\\x03\\x01\" },\n   { 0x01f5, \"\\x00\\x67\\x03\\x01\" },\n+  { 0x01f8, \"\\x00\\x4e\\x03\\x00\" },\n+  { 0x01f9, \"\\x00\\x6e\\x03\\x00\" },\n   { 0x01fa, \"\\x00\\xc5\\x03\\x01\" },\n   { 0x01fb, \"\\x00\\xe5\\x03\\x01\" },\n   { 0x01fc, \"\\x00\\xc6\\x03\\x01\" },\n@@ -247,6 +250,26 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x0215, \"\\x00\\x75\\x03\\x0f\" },\n   { 0x0216, \"\\x00\\x55\\x03\\x11\" },\n   { 0x0217, \"\\x00\\x75\\x03\\x11\" },\n+  { 0x0218, \"\\x00\\x53\\x03\\x26\" },\n+  { 0x0219, \"\\x00\\x73\\x03\\x26\" },\n+  { 0x021a, \"\\x00\\x54\\x03\\x26\" },\n+  { 0x021b, \"\\x00\\x74\\x03\\x26\" },\n+  { 0x021e, \"\\x00\\x48\\x03\\x0c\" },\n+  { 0x021f, \"\\x00\\x68\\x03\\x0c\" },\n+  { 0x0226, \"\\x00\\x41\\x03\\x07\" },\n+  { 0x0227, \"\\x00\\x61\\x03\\x07\" },\n+  { 0x0228, \"\\x00\\x45\\x03\\x27\" },\n+  { 0x0229, \"\\x00\\x65\\x03\\x27\" },\n+  { 0x022a, \"\\x00\\xd6\\x03\\x04\" },\n+  { 0x022b, \"\\x00\\xf6\\x03\\x04\" },\n+  { 0x022c, \"\\x00\\xd5\\x03\\x04\" },\n+  { 0x022d, \"\\x00\\xf5\\x03\\x04\" },\n+  { 0x022e, \"\\x00\\x4f\\x03\\x07\" },\n+  { 0x022f, \"\\x00\\x6f\\x03\\x07\" },\n+  { 0x0230, \"\\x02\\x2e\\x03\\x04\" },\n+  { 0x0231, \"\\x02\\x2f\\x03\\x04\" },\n+  { 0x0232, \"\\x00\\x59\\x03\\x04\" },\n+  { 0x0233, \"\\x00\\x79\\x03\\x04\" },\n   { 0x0340, \"\\x03\\x00\" },\n   { 0x0341, \"\\x03\\x01\" },\n   { 0x0343, \"\\x03\\x13\" },\n@@ -277,17 +300,21 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x03ce, \"\\x03\\xc9\\x03\\x01\" },\n   { 0x03d3, \"\\x03\\xd2\\x03\\x01\" },\n   { 0x03d4, \"\\x03\\xd2\\x03\\x08\" },\n+  { 0x0400, \"\\x04\\x15\\x03\\x00\" },\n   { 0x0401, \"\\x04\\x15\\x03\\x08\" },\n   { 0x0403, \"\\x04\\x13\\x03\\x01\" },\n   { 0x0407, \"\\x04\\x06\\x03\\x08\" },\n   { 0x040c, \"\\x04\\x1a\\x03\\x01\" },\n+  { 0x040d, \"\\x04\\x18\\x03\\x00\" },\n   { 0x040e, \"\\x04\\x23\\x03\\x06\" },\n   { 0x0419, \"\\x04\\x18\\x03\\x06\" },\n   { 0x0439, \"\\x04\\x38\\x03\\x06\" },\n+  { 0x0450, \"\\x04\\x35\\x03\\x00\" },\n   { 0x0451, \"\\x04\\x35\\x03\\x08\" },\n   { 0x0453, \"\\x04\\x33\\x03\\x01\" },\n   { 0x0457, \"\\x04\\x56\\x03\\x08\" },\n   { 0x045c, \"\\x04\\x3a\\x03\\x01\" },\n+  { 0x045d, \"\\x04\\x38\\x03\\x00\" },\n   { 0x045e, \"\\x04\\x43\\x03\\x06\" },\n   { 0x0476, \"\\x04\\x74\\x03\\x0f\" },\n   { 0x0477, \"\\x04\\x75\\x03\\x0f\" },\n@@ -313,6 +340,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x04e7, \"\\x04\\x3e\\x03\\x08\" },\n   { 0x04ea, \"\\x04\\xe8\\x03\\x08\" },\n   { 0x04eb, \"\\x04\\xe9\\x03\\x08\" },\n+  { 0x04ec, \"\\x04\\x2d\\x03\\x08\" },\n+  { 0x04ed, \"\\x04\\x4d\\x03\\x08\" },\n   { 0x04ee, \"\\x04\\x23\\x03\\x04\" },\n   { 0x04ef, \"\\x04\\x43\\x03\\x04\" },\n   { 0x04f0, \"\\x04\\x23\\x03\\x08\" },\n@@ -323,6 +352,14 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x04f5, \"\\x04\\x47\\x03\\x08\" },\n   { 0x04f8, \"\\x04\\x2b\\x03\\x08\" },\n   { 0x04f9, \"\\x04\\x4b\\x03\\x08\" },\n+  { 0x0622, \"\\x06\\x27\\x06\\x53\" },\n+  { 0x0623, \"\\x06\\x27\\x06\\x54\" },\n+  { 0x0624, \"\\x06\\x48\\x06\\x54\" },\n+  { 0x0625, \"\\x06\\x27\\x06\\x55\" },\n+  { 0x0626, \"\\x06\\x4a\\x06\\x54\" },\n+  { 0x06c0, \"\\x06\\xd5\\x06\\x54\" },\n+  { 0x06c2, \"\\x06\\xc1\\x06\\x54\" },\n+  { 0x06d3, \"\\x06\\xd2\\x06\\x54\" },\n   { 0x0929, \"\\x09\\x28\\x09\\x3c\" },\n   { 0x0931, \"\\x09\\x30\\x09\\x3c\" },\n   { 0x0934, \"\\x09\\x33\\x09\\x3c\" },\n@@ -334,23 +371,22 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x095d, \"\\x09\\x22\\x09\\x3c\" },\n   { 0x095e, \"\\x09\\x2b\\x09\\x3c\" },\n   { 0x095f, \"\\x09\\x2f\\x09\\x3c\" },\n-  { 0x09b0, \"\\x09\\xac\\x09\\xbc\" },\n   { 0x09cb, \"\\x09\\xc7\\x09\\xbe\" },\n   { 0x09cc, \"\\x09\\xc7\\x09\\xd7\" },\n   { 0x09dc, \"\\x09\\xa1\\x09\\xbc\" },\n   { 0x09dd, \"\\x09\\xa2\\x09\\xbc\" },\n   { 0x09df, \"\\x09\\xaf\\x09\\xbc\" },\n+  { 0x0a33, \"\\x0a\\x32\\x0a\\x3c\" },\n+  { 0x0a36, \"\\x0a\\x38\\x0a\\x3c\" },\n   { 0x0a59, \"\\x0a\\x16\\x0a\\x3c\" },\n   { 0x0a5a, \"\\x0a\\x17\\x0a\\x3c\" },\n   { 0x0a5b, \"\\x0a\\x1c\\x0a\\x3c\" },\n-  { 0x0a5c, \"\\x0a\\x21\\x0a\\x3c\" },\n   { 0x0a5e, \"\\x0a\\x2b\\x0a\\x3c\" },\n   { 0x0b48, \"\\x0b\\x47\\x0b\\x56\" },\n   { 0x0b4b, \"\\x0b\\x47\\x0b\\x3e\" },\n   { 0x0b4c, \"\\x0b\\x47\\x0b\\x57\" },\n   { 0x0b5c, \"\\x0b\\x21\\x0b\\x3c\" },\n   { 0x0b5d, \"\\x0b\\x22\\x0b\\x3c\" },\n-  { 0x0b5f, \"\\x0b\\x2f\\x0b\\x3c\" },\n   { 0x0b94, \"\\x0b\\x92\\x0b\\xd7\" },\n   { 0x0bca, \"\\x0b\\xc6\\x0b\\xbe\" },\n   { 0x0bcb, \"\\x0b\\xc7\\x0b\\xbe\" },\n@@ -364,27 +400,28 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x0d4a, \"\\x0d\\x46\\x0d\\x3e\" },\n   { 0x0d4b, \"\\x0d\\x47\\x0d\\x3e\" },\n   { 0x0d4c, \"\\x0d\\x46\\x0d\\x57\" },\n-  { 0x0e33, \"\\x0e\\x4d\\x0e\\x32\" },\n-  { 0x0eb3, \"\\x0e\\xcd\\x0e\\xb2\" },\n+  { 0x0dda, \"\\x0d\\xd9\\x0d\\xca\" },\n+  { 0x0ddc, \"\\x0d\\xd9\\x0d\\xcf\" },\n+  { 0x0ddd, \"\\x0d\\xdc\\x0d\\xca\" },\n+  { 0x0dde, \"\\x0d\\xd9\\x0d\\xdf\" },\n   { 0x0f43, \"\\x0f\\x42\\x0f\\xb7\" },\n   { 0x0f4d, \"\\x0f\\x4c\\x0f\\xb7\" },\n   { 0x0f52, \"\\x0f\\x51\\x0f\\xb7\" },\n   { 0x0f57, \"\\x0f\\x56\\x0f\\xb7\" },\n   { 0x0f5c, \"\\x0f\\x5b\\x0f\\xb7\" },\n   { 0x0f69, \"\\x0f\\x40\\x0f\\xb5\" },\n-  { 0x0f73, \"\\x0f\\x72\\x0f\\x71\" },\n+  { 0x0f73, \"\\x0f\\x71\\x0f\\x72\" },\n   { 0x0f75, \"\\x0f\\x71\\x0f\\x74\" },\n   { 0x0f76, \"\\x0f\\xb2\\x0f\\x80\" },\n-  { 0x0f77, \"\\x0f\\x76\\x0f\\x71\" },\n   { 0x0f78, \"\\x0f\\xb3\\x0f\\x80\" },\n-  { 0x0f79, \"\\x0f\\x78\\x0f\\x71\" },\n-  { 0x0f81, \"\\x0f\\x80\\x0f\\x71\" },\n+  { 0x0f81, \"\\x0f\\x71\\x0f\\x80\" },\n   { 0x0f93, \"\\x0f\\x92\\x0f\\xb7\" },\n   { 0x0f9d, \"\\x0f\\x9c\\x0f\\xb7\" },\n   { 0x0fa2, \"\\x0f\\xa1\\x0f\\xb7\" },\n   { 0x0fa7, \"\\x0f\\xa6\\x0f\\xb7\" },\n   { 0x0fac, \"\\x0f\\xab\\x0f\\xb7\" },\n   { 0x0fb9, \"\\x0f\\x90\\x0f\\xb5\" },\n+  { 0x1026, \"\\x10\\x25\\x10\\x2e\" },\n   { 0x1e00, \"\\x00\\x41\\x03\\x25\" },\n   { 0x1e01, \"\\x00\\x61\\x03\\x25\" },\n   { 0x1e02, \"\\x00\\x42\\x03\\x07\" },\n@@ -413,8 +450,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x1e19, \"\\x00\\x65\\x03\\x2d\" },\n   { 0x1e1a, \"\\x00\\x45\\x03\\x30\" },\n   { 0x1e1b, \"\\x00\\x65\\x03\\x30\" },\n-  { 0x1e1c, \"\\x01\\x14\\x03\\x27\" },\n-  { 0x1e1d, \"\\x01\\x15\\x03\\x27\" },\n+  { 0x1e1c, \"\\x02\\x28\\x03\\x06\" },\n+  { 0x1e1d, \"\\x02\\x29\\x03\\x06\" },\n   { 0x1e1e, \"\\x00\\x46\\x03\\x07\" },\n   { 0x1e1f, \"\\x00\\x66\\x03\\x07\" },\n   { 0x1e20, \"\\x00\\x47\\x03\\x04\" },\n@@ -552,8 +589,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x1ea9, \"\\x00\\xe2\\x03\\x09\" },\n   { 0x1eaa, \"\\x00\\xc2\\x03\\x03\" },\n   { 0x1eab, \"\\x00\\xe2\\x03\\x03\" },\n-  { 0x1eac, \"\\x00\\xc2\\x03\\x23\" },\n-  { 0x1ead, \"\\x00\\xe2\\x03\\x23\" },\n+  { 0x1eac, \"\\x1e\\xa0\\x03\\x02\" },\n+  { 0x1ead, \"\\x1e\\xa1\\x03\\x02\" },\n   { 0x1eae, \"\\x01\\x02\\x03\\x01\" },\n   { 0x1eaf, \"\\x01\\x03\\x03\\x01\" },\n   { 0x1eb0, \"\\x01\\x02\\x03\\x00\" },\n@@ -562,8 +599,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x1eb3, \"\\x01\\x03\\x03\\x09\" },\n   { 0x1eb4, \"\\x01\\x02\\x03\\x03\" },\n   { 0x1eb5, \"\\x01\\x03\\x03\\x03\" },\n-  { 0x1eb6, \"\\x01\\x02\\x03\\x23\" },\n-  { 0x1eb7, \"\\x01\\x03\\x03\\x23\" },\n+  { 0x1eb6, \"\\x1e\\xa0\\x03\\x06\" },\n+  { 0x1eb7, \"\\x1e\\xa1\\x03\\x06\" },\n   { 0x1eb8, \"\\x00\\x45\\x03\\x23\" },\n   { 0x1eb9, \"\\x00\\x65\\x03\\x23\" },\n   { 0x1eba, \"\\x00\\x45\\x03\\x09\" },\n@@ -578,8 +615,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x1ec3, \"\\x00\\xea\\x03\\x09\" },\n   { 0x1ec4, \"\\x00\\xca\\x03\\x03\" },\n   { 0x1ec5, \"\\x00\\xea\\x03\\x03\" },\n-  { 0x1ec6, \"\\x00\\xca\\x03\\x23\" },\n-  { 0x1ec7, \"\\x00\\xea\\x03\\x23\" },\n+  { 0x1ec6, \"\\x1e\\xb8\\x03\\x02\" },\n+  { 0x1ec7, \"\\x1e\\xb9\\x03\\x02\" },\n   { 0x1ec8, \"\\x00\\x49\\x03\\x09\" },\n   { 0x1ec9, \"\\x00\\x69\\x03\\x09\" },\n   { 0x1eca, \"\\x00\\x49\\x03\\x23\" },\n@@ -596,8 +633,8 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x1ed5, \"\\x00\\xf4\\x03\\x09\" },\n   { 0x1ed6, \"\\x00\\xd4\\x03\\x03\" },\n   { 0x1ed7, \"\\x00\\xf4\\x03\\x03\" },\n-  { 0x1ed8, \"\\x00\\xd4\\x03\\x23\" },\n-  { 0x1ed9, \"\\x00\\xf4\\x03\\x23\" },\n+  { 0x1ed8, \"\\x1e\\xcc\\x03\\x02\" },\n+  { 0x1ed9, \"\\x1e\\xcd\\x03\\x02\" },\n   { 0x1eda, \"\\x01\\xa0\\x03\\x01\" },\n   { 0x1edb, \"\\x01\\xa1\\x03\\x01\" },\n   { 0x1edc, \"\\x01\\xa0\\x03\\x00\" },\n@@ -864,12 +901,18 @@ static const decomp_entry canonical_decomposition[] =\n   { 0x2126, \"\\x03\\xa9\" },\n   { 0x212a, \"\\x00\\x4b\" },\n   { 0x212b, \"\\x00\\xc5\" },\n+  { 0x219a, \"\\x21\\x90\\x03\\x38\" },\n+  { 0x219b, \"\\x21\\x92\\x03\\x38\" },\n+  { 0x21ae, \"\\x21\\x94\\x03\\x38\" },\n+  { 0x21cd, \"\\x21\\xd0\\x03\\x38\" },\n+  { 0x21ce, \"\\x21\\xd4\\x03\\x38\" },\n+  { 0x21cf, \"\\x21\\xd2\\x03\\x38\" },\n   { 0x2204, \"\\x22\\x03\\x03\\x38\" },\n   { 0x2209, \"\\x22\\x08\\x03\\x38\" },\n   { 0x220c, \"\\x22\\x0b\\x03\\x38\" },\n   { 0x2224, \"\\x22\\x23\\x03\\x38\" },\n   { 0x2226, \"\\x22\\x25\\x03\\x38\" },\n-  { 0x2241, \"\\x00\\x7e\\x03\\x38\" },\n+  { 0x2241, \"\\x22\\x3c\\x03\\x38\" },\n   { 0x2244, \"\\x22\\x43\\x03\\x38\" },\n   { 0x2247, \"\\x22\\x45\\x03\\x38\" },\n   { 0x2249, \"\\x22\\x48\\x03\\x38\" },\n@@ -1252,6 +1295,7 @@ static const decomp_entry canonical_decomposition[] =\n   { 0xfa2b, \"\\x98\\xfc\" },\n   { 0xfa2c, \"\\x99\\x28\" },\n   { 0xfa2d, \"\\x9d\\xb4\" },\n+  { 0xfb1d, \"\\x05\\xd9\\x05\\xb4\" },\n   { 0xfb1f, \"\\x05\\xf2\\x05\\xb7\" },\n   { 0xfb2a, \"\\x05\\xe9\\x05\\xc1\" },\n   { 0xfb2b, \"\\x05\\xe9\\x05\\xc2\" },\n@@ -1289,9 +1333,6 @@ static const decomp_entry canonical_decomposition[] =\n \n static const decomp_entry full_decomposition[] =\n {\n-  { 0x005e, \"\\x00\\x20\\x03\\x02\" },\n-  { 0x005f, \"\\x00\\x20\\x03\\x32\" },\n-  { 0x0060, \"\\x00\\x20\\x03\\x00\" },\n   { 0x00a0, \"\\x00\\x20\" },\n   { 0x00a8, \"\\x00\\x20\\x03\\x08\" },\n   { 0x00aa, \"\\x00\\x61\" },\n@@ -1346,196 +1387,26 @@ static const decomp_entry full_decomposition[] =\n   { 0x02e4, \"\\x02\\x95\" },\n   { 0x037a, \"\\x00\\x20\\x03\\x45\" },\n   { 0x0384, \"\\x00\\x20\\x03\\x01\" },\n+  { 0x03d0, \"\\x03\\xb2\" },\n+  { 0x03d1, \"\\x03\\xb8\" },\n+  { 0x03d2, \"\\x03\\xa5\" },\n+  { 0x03d5, \"\\x03\\xc6\" },\n+  { 0x03d6, \"\\x03\\xc0\" },\n+  { 0x03f0, \"\\x03\\xba\" },\n+  { 0x03f1, \"\\x03\\xc1\" },\n+  { 0x03f2, \"\\x03\\xc2\" },\n   { 0x0587, \"\\x05\\x65\\x05\\x82\" },\n+  { 0x0675, \"\\x06\\x27\\x06\\x74\" },\n+  { 0x0676, \"\\x06\\x48\\x06\\x74\" },\n+  { 0x0677, \"\\x06\\xc7\\x06\\x74\" },\n+  { 0x0678, \"\\x06\\x4a\\x06\\x74\" },\n+  { 0x0e33, \"\\x0e\\x4d\\x0e\\x32\" },\n+  { 0x0eb3, \"\\x0e\\xcd\\x0e\\xb2\" },\n   { 0x0edc, \"\\x0e\\xab\\x0e\\x99\" },\n   { 0x0edd, \"\\x0e\\xab\\x0e\\xa1\" },\n-  { 0x1101, \"\\x11\\x00\\x11\\x00\" },\n-  { 0x1104, \"\\x11\\x03\\x11\\x03\" },\n-  { 0x1108, \"\\x11\\x07\\x11\\x07\" },\n-  { 0x110a, \"\\x11\\x09\\x11\\x09\" },\n-  { 0x110d, \"\\x11\\x0c\\x11\\x0c\" },\n-  { 0x1113, \"\\x11\\x02\\x11\\x00\" },\n-  { 0x1114, \"\\x11\\x02\\x11\\x02\" },\n-  { 0x1115, \"\\x11\\x02\\x11\\x03\" },\n-  { 0x1116, \"\\x11\\x02\\x11\\x07\" },\n-  { 0x1117, \"\\x11\\x03\\x11\\x00\" },\n-  { 0x1118, \"\\x11\\x05\\x11\\x02\" },\n-  { 0x1119, \"\\x11\\x05\\x11\\x05\" },\n-  { 0x111a, \"\\x11\\x05\\x11\\x12\" },\n-  { 0x111b, \"\\x11\\x05\\x11\\x0b\" },\n-  { 0x111c, \"\\x11\\x06\\x11\\x07\" },\n-  { 0x111d, \"\\x11\\x06\\x11\\x0b\" },\n-  { 0x111e, \"\\x11\\x07\\x11\\x00\" },\n-  { 0x111f, \"\\x11\\x07\\x11\\x02\" },\n-  { 0x1120, \"\\x11\\x07\\x11\\x03\" },\n-  { 0x1121, \"\\x11\\x07\\x11\\x09\" },\n-  { 0x1122, \"\\x11\\x07\\x11\\x09\\x11\\x00\" },\n-  { 0x1123, \"\\x11\\x07\\x11\\x09\\x11\\x03\" },\n-  { 0x1124, \"\\x11\\x07\\x11\\x09\\x11\\x07\" },\n-  { 0x1125, \"\\x11\\x07\\x11\\x09\\x11\\x09\" },\n-  { 0x1126, \"\\x11\\x07\\x11\\x09\\x11\\x0c\" },\n-  { 0x1127, \"\\x11\\x07\\x11\\x0c\" },\n-  { 0x1128, \"\\x11\\x07\\x11\\x0e\" },\n-  { 0x1129, \"\\x11\\x07\\x11\\x10\" },\n-  { 0x112a, \"\\x11\\x07\\x11\\x11\" },\n-  { 0x112b, \"\\x11\\x07\\x11\\x0b\" },\n-  { 0x112c, \"\\x11\\x07\\x11\\x07\\x11\\x0b\" },\n-  { 0x112d, \"\\x11\\x09\\x11\\x00\" },\n-  { 0x112e, \"\\x11\\x09\\x11\\x02\" },\n-  { 0x112f, \"\\x11\\x09\\x11\\x03\" },\n-  { 0x1130, \"\\x11\\x09\\x11\\x05\" },\n-  { 0x1131, \"\\x11\\x09\\x11\\x06\" },\n-  { 0x1132, \"\\x11\\x09\\x11\\x07\" },\n-  { 0x1133, \"\\x11\\x09\\x11\\x07\\x11\\x00\" },\n-  { 0x1134, \"\\x11\\x09\\x11\\x09\\x11\\x09\" },\n-  { 0x1135, \"\\x11\\x09\\x11\\x0b\" },\n-  { 0x1136, \"\\x11\\x09\\x11\\x0c\" },\n-  { 0x1137, \"\\x11\\x09\\x11\\x0e\" },\n-  { 0x1138, \"\\x11\\x09\\x11\\x0f\" },\n-  { 0x1139, \"\\x11\\x09\\x11\\x10\" },\n-  { 0x113a, \"\\x11\\x09\\x11\\x11\" },\n-  { 0x113b, \"\\x11\\x09\\x11\\x12\" },\n-  { 0x113d, \"\\x11\\x3c\\x11\\x3c\" },\n-  { 0x113f, \"\\x11\\x3e\\x11\\x3e\" },\n-  { 0x1141, \"\\x11\\x0b\\x11\\x00\" },\n-  { 0x1142, \"\\x11\\x0b\\x11\\x03\" },\n-  { 0x1143, \"\\x11\\x0b\\x11\\x06\" },\n-  { 0x1144, \"\\x11\\x0b\\x11\\x07\" },\n-  { 0x1145, \"\\x11\\x0b\\x11\\x09\" },\n-  { 0x1146, \"\\x11\\x0b\\x11\\x40\" },\n-  { 0x1147, \"\\x11\\x0b\\x11\\x0b\" },\n-  { 0x1148, \"\\x11\\x0b\\x11\\x0c\" },\n-  { 0x1149, \"\\x11\\x0b\\x11\\x0e\" },\n-  { 0x114a, \"\\x11\\x0b\\x11\\x10\" },\n-  { 0x114b, \"\\x11\\x0b\\x11\\x11\" },\n-  { 0x114d, \"\\x11\\x0c\\x11\\x0b\" },\n-  { 0x114f, \"\\x11\\x4e\\x11\\x4e\" },\n-  { 0x1151, \"\\x11\\x50\\x11\\x50\" },\n-  { 0x1152, \"\\x11\\x0e\\x11\\x0f\" },\n-  { 0x1153, \"\\x11\\x0e\\x11\\x12\" },\n-  { 0x1156, \"\\x11\\x11\\x11\\x07\" },\n-  { 0x1157, \"\\x11\\x11\\x11\\x0b\" },\n-  { 0x1158, \"\\x11\\x12\\x11\\x12\" },\n-  { 0x1162, \"\\x11\\x61\\x11\\x75\" },\n-  { 0x1164, \"\\x11\\x63\\x11\\x75\" },\n-  { 0x1166, \"\\x11\\x65\\x11\\x75\" },\n-  { 0x1168, \"\\x11\\x67\\x11\\x75\" },\n-  { 0x116a, \"\\x11\\x69\\x11\\x61\" },\n-  { 0x116b, \"\\x11\\x69\\x11\\x61\\x11\\x75\" },\n-  { 0x116c, \"\\x11\\x69\\x11\\x75\" },\n-  { 0x116f, \"\\x11\\x6e\\x11\\x65\" },\n-  { 0x1170, \"\\x11\\x6e\\x11\\x65\\x11\\x75\" },\n-  { 0x1171, \"\\x11\\x6e\\x11\\x75\" },\n-  { 0x1174, \"\\x11\\x73\\x11\\x75\" },\n-  { 0x1176, \"\\x11\\x61\\x11\\x69\" },\n-  { 0x1177, \"\\x11\\x61\\x11\\x6e\" },\n-  { 0x1178, \"\\x11\\x63\\x11\\x69\" },\n-  { 0x1179, \"\\x11\\x63\\x11\\x6d\" },\n-  { 0x117a, \"\\x11\\x65\\x11\\x69\" },\n-  { 0x117b, \"\\x11\\x65\\x11\\x6e\" },\n-  { 0x117c, \"\\x11\\x65\\x11\\x73\" },\n-  { 0x117d, \"\\x11\\x67\\x11\\x69\" },\n-  { 0x117e, \"\\x11\\x67\\x11\\x6e\" },\n-  { 0x117f, \"\\x11\\x69\\x11\\x65\" },\n-  { 0x1180, \"\\x11\\x69\\x11\\x66\" },\n-  { 0x1181, \"\\x11\\x69\\x11\\x68\" },\n-  { 0x1182, \"\\x11\\x69\\x11\\x69\" },\n-  { 0x1183, \"\\x11\\x69\\x11\\x6e\" },\n-  { 0x1184, \"\\x11\\x6d\\x11\\x63\" },\n-  { 0x1185, \"\\x11\\x6d\\x11\\x64\" },\n-  { 0x1186, \"\\x11\\x6d\\x11\\x67\" },\n-  { 0x1187, \"\\x11\\x6d\\x11\\x69\" },\n-  { 0x1188, \"\\x11\\x6d\\x11\\x75\" },\n-  { 0x1189, \"\\x11\\x6e\\x11\\x61\" },\n-  { 0x118a, \"\\x11\\x6e\\x11\\x62\" },\n-  { 0x118b, \"\\x11\\x6e\\x11\\x65\\x11\\x73\" },\n-  { 0x118c, \"\\x11\\x6e\\x11\\x68\" },\n-  { 0x118d, \"\\x11\\x6e\\x11\\x6e\" },\n-  { 0x118e, \"\\x11\\x72\\x11\\x61\" },\n-  { 0x118f, \"\\x11\\x72\\x11\\x65\" },\n-  { 0x1190, \"\\x11\\x72\\x11\\x66\" },\n-  { 0x1191, \"\\x11\\x72\\x11\\x67\" },\n-  { 0x1192, \"\\x11\\x72\\x11\\x68\" },\n-  { 0x1193, \"\\x11\\x72\\x11\\x6e\" },\n-  { 0x1194, \"\\x11\\x72\\x11\\x75\" },\n-  { 0x1195, \"\\x11\\x73\\x11\\x6e\" },\n-  { 0x1196, \"\\x11\\x73\\x11\\x73\" },\n-  { 0x1197, \"\\x11\\x74\\x11\\x6e\" },\n-  { 0x1198, \"\\x11\\x75\\x11\\x61\" },\n-  { 0x1199, \"\\x11\\x75\\x11\\x63\" },\n-  { 0x119a, \"\\x11\\x75\\x11\\x69\" },\n-  { 0x119b, \"\\x11\\x75\\x11\\x6e\" },\n-  { 0x119c, \"\\x11\\x75\\x11\\x73\" },\n-  { 0x119d, \"\\x11\\x75\\x11\\x9e\" },\n-  { 0x119f, \"\\x11\\x9e\\x11\\x65\" },\n-  { 0x11a0, \"\\x11\\x9e\\x11\\x6e\" },\n-  { 0x11a1, \"\\x11\\x9e\\x11\\x75\" },\n-  { 0x11a2, \"\\x11\\x9e\\x11\\x9e\" },\n-  { 0x11a9, \"\\x11\\xa8\\x11\\xa8\" },\n-  { 0x11aa, \"\\x11\\xa8\\x11\\xba\" },\n-  { 0x11ac, \"\\x11\\xab\\x11\\xbd\" },\n-  { 0x11ad, \"\\x11\\xab\\x11\\xc2\" },\n-  { 0x11b0, \"\\x11\\xaf\\x11\\xa8\" },\n-  { 0x11b1, \"\\x11\\xaf\\x11\\xb7\" },\n-  { 0x11b2, \"\\x11\\xaf\\x11\\xb8\" },\n-  { 0x11b3, \"\\x11\\xaf\\x11\\xba\" },\n-  { 0x11b4, \"\\x11\\xaf\\x11\\xc0\" },\n-  { 0x11b5, \"\\x11\\xaf\\x11\\xc1\" },\n-  { 0x11b6, \"\\x11\\xaf\\x11\\xc2\" },\n-  { 0x11b9, \"\\x11\\xb8\\x11\\xba\" },\n-  { 0x11bb, \"\\x11\\xba\\x11\\xba\" },\n-  { 0x11c3, \"\\x11\\xa8\\x11\\xaf\" },\n-  { 0x11c4, \"\\x11\\xa8\\x11\\xba\\x11\\xa8\" },\n-  { 0x11c5, \"\\x11\\xab\\x11\\xa8\" },\n-  { 0x11c6, \"\\x11\\xab\\x11\\xae\" },\n-  { 0x11c7, \"\\x11\\xab\\x11\\xba\" },\n-  { 0x11c8, \"\\x11\\xab\\x11\\xeb\" },\n-  { 0x11c9, \"\\x11\\xab\\x11\\xc0\" },\n-  { 0x11ca, \"\\x11\\xae\\x11\\xa8\" },\n-  { 0x11cb, \"\\x11\\xae\\x11\\xaf\" },\n-  { 0x11cc, \"\\x11\\xaf\\x11\\xa8\\x11\\xba\" },\n-  { 0x11cd, \"\\x11\\xaf\\x11\\xab\" },\n-  { 0x11ce, \"\\x11\\xaf\\x11\\xae\" },\n-  { 0x11cf, \"\\x11\\xaf\\x11\\xae\\x11\\xc2\" },\n-  { 0x11d0, \"\\x11\\xaf\\x11\\xaf\" },\n-  { 0x11d1, \"\\x11\\xaf\\x11\\xb7\\x11\\xa8\" },\n-  { 0x11d2, \"\\x11\\xaf\\x11\\xb7\\x11\\xba\" },\n-  { 0x11d3, \"\\x11\\xaf\\x11\\xb8\\x11\\xba\" },\n-  { 0x11d4, \"\\x11\\xaf\\x11\\xb8\\x11\\xc2\" },\n-  { 0x11d5, \"\\x11\\xaf\\x11\\xb8\\x11\\xbc\" },\n-  { 0x11d6, \"\\x11\\xaf\\x11\\xba\\x11\\xba\" },\n-  { 0x11d7, \"\\x11\\xaf\\x11\\xeb\" },\n-  { 0x11d8, \"\\x11\\xaf\\x11\\xbf\" },\n-  { 0x11d9, \"\\x11\\xaf\\x11\\xf9\" },\n-  { 0x11da, \"\\x11\\xb7\\x11\\xa8\" },\n-  { 0x11db, \"\\x11\\xb7\\x11\\xaf\" },\n-  { 0x11dc, \"\\x11\\xb7\\x11\\xb8\" },\n-  { 0x11dd, \"\\x11\\xb7\\x11\\xba\" },\n-  { 0x11de, \"\\x11\\xb7\\x11\\xba\\x11\\xba\" },\n-  { 0x11df, \"\\x11\\xb7\\x11\\xeb\" },\n-  { 0x11e0, \"\\x11\\xb7\\x11\\xbe\" },\n-  { 0x11e1, \"\\x11\\xb7\\x11\\xc2\" },\n-  { 0x11e2, \"\\x11\\xb7\\x11\\xbc\" },\n-  { 0x11e3, \"\\x11\\xb8\\x11\\xaf\" },\n-  { 0x11e4, \"\\x11\\xb8\\x11\\xc1\" },\n-  { 0x11e5, \"\\x11\\xb8\\x11\\xc2\" },\n-  { 0x11e6, \"\\x11\\xb8\\x11\\xbc\" },\n-  { 0x11e7, \"\\x11\\xba\\x11\\xa8\" },\n-  { 0x11e8, \"\\x11\\xba\\x11\\xae\" },\n-  { 0x11e9, \"\\x11\\xba\\x11\\xaf\" },\n-  { 0x11ea, \"\\x11\\xba\\x11\\xb8\" },\n-  { 0x11ec, \"\\x11\\xbc\\x11\\xa8\" },\n-  { 0x11ed, \"\\x11\\xbc\\x11\\xa8\\x11\\xa8\" },\n-  { 0x11ee, \"\\x11\\xbc\\x11\\xbc\" },\n-  { 0x11ef, \"\\x11\\xbc\\x11\\xbf\" },\n-  { 0x11f1, \"\\x11\\xf0\\x11\\xba\" },\n-  { 0x11f2, \"\\x11\\xf0\\x11\\xeb\" },\n-  { 0x11f3, \"\\x11\\xc1\\x11\\xb8\" },\n-  { 0x11f4, \"\\x11\\xc1\\x11\\xbc\" },\n-  { 0x11f5, \"\\x11\\xc2\\x11\\xab\" },\n-  { 0x11f6, \"\\x11\\xc2\\x11\\xaf\" },\n-  { 0x11f7, \"\\x11\\xc2\\x11\\xb7\" },\n-  { 0x11f8, \"\\x11\\xc2\\x11\\xb8\" },\n+  { 0x0f0c, \"\\x0f\\x0b\" },\n+  { 0x0f77, \"\\x0f\\xb2\\x0f\\x81\" },\n+  { 0x0f79, \"\\x0f\\xb3\\x0f\\x81\" },\n   { 0x1e9a, \"\\x00\\x61\\x02\\xbe\" },\n   { 0x1fbd, \"\\x00\\x20\\x03\\x13\" },\n   { 0x1fbf, \"\\x00\\x20\\x03\\x13\" },\n@@ -1555,12 +1426,15 @@ static const decomp_entry full_decomposition[] =\n   { 0x2024, \"\\x00\\x2e\" },\n   { 0x2025, \"\\x00\\x2e\\x00\\x2e\" },\n   { 0x2026, \"\\x00\\x2e\\x00\\x2e\\x00\\x2e\" },\n+  { 0x202f, \"\\x00\\x20\" },\n   { 0x2033, \"\\x20\\x32\\x20\\x32\" },\n   { 0x2034, \"\\x20\\x32\\x20\\x32\\x20\\x32\" },\n   { 0x2036, \"\\x20\\x35\\x20\\x35\" },\n   { 0x2037, \"\\x20\\x35\\x20\\x35\\x20\\x35\" },\n   { 0x203c, \"\\x00\\x21\\x00\\x21\" },\n   { 0x203e, \"\\x00\\x20\\x03\\x05\" },\n+  { 0x2048, \"\\x00\\x3f\\x00\\x21\" },\n+  { 0x2049, \"\\x00\\x21\\x00\\x3f\" },\n   { 0x2070, \"\\x00\\x30\" },\n   { 0x2074, \"\\x00\\x34\" },\n   { 0x2075, \"\\x00\\x35\" },\n@@ -1631,6 +1505,7 @@ static const decomp_entry full_decomposition[] =\n   { 0x2136, \"\\x05\\xd1\" },\n   { 0x2137, \"\\x05\\xd2\" },\n   { 0x2138, \"\\x05\\xd3\" },\n+  { 0x2139, \"\\x00\\x69\" },\n   { 0x2153, \"\\x00\\x31\\x20\\x44\\x00\\x33\" },\n   { 0x2154, \"\\x00\\x32\\x20\\x44\\x00\\x33\" },\n   { 0x2155, \"\\x00\\x31\\x20\\x44\\x00\\x35\" },\n@@ -1819,8 +1694,227 @@ static const decomp_entry full_decomposition[] =\n   { 0x24e8, \"\\x00\\x79\" },\n   { 0x24e9, \"\\x00\\x7a\" },\n   { 0x24ea, \"\\x00\\x30\" },\n+  { 0x2e9f, \"\\x6b\\xcd\" },\n+  { 0x2ef3, \"\\x9f\\x9f\" },\n+  { 0x2f00, \"\\x4e\\x00\" },\n+  { 0x2f01, \"\\x4e\\x28\" },\n+  { 0x2f02, \"\\x4e\\x36\" },\n+  { 0x2f03, \"\\x4e\\x3f\" },\n+  { 0x2f04, \"\\x4e\\x59\" },\n+  { 0x2f05, \"\\x4e\\x85\" },\n+  { 0x2f06, \"\\x4e\\x8c\" },\n+  { 0x2f07, \"\\x4e\\xa0\" },\n+  { 0x2f08, \"\\x4e\\xba\" },\n+  { 0x2f09, \"\\x51\\x3f\" },\n+  { 0x2f0a, \"\\x51\\x65\" },\n+  { 0x2f0b, \"\\x51\\x6b\" },\n+  { 0x2f0c, \"\\x51\\x82\" },\n+  { 0x2f0d, \"\\x51\\x96\" },\n+  { 0x2f0e, \"\\x51\\xab\" },\n+  { 0x2f0f, \"\\x51\\xe0\" },\n+  { 0x2f10, \"\\x51\\xf5\" },\n+  { 0x2f11, \"\\x52\\x00\" },\n+  { 0x2f12, \"\\x52\\x9b\" },\n+  { 0x2f13, \"\\x52\\xf9\" },\n+  { 0x2f14, \"\\x53\\x15\" },\n+  { 0x2f15, \"\\x53\\x1a\" },\n+  { 0x2f16, \"\\x53\\x38\" },\n+  { 0x2f17, \"\\x53\\x41\" },\n+  { 0x2f18, \"\\x53\\x5c\" },\n+  { 0x2f19, \"\\x53\\x69\" },\n+  { 0x2f1a, \"\\x53\\x82\" },\n+  { 0x2f1b, \"\\x53\\xb6\" },\n+  { 0x2f1c, \"\\x53\\xc8\" },\n+  { 0x2f1d, \"\\x53\\xe3\" },\n+  { 0x2f1e, \"\\x56\\xd7\" },\n+  { 0x2f1f, \"\\x57\\x1f\" },\n+  { 0x2f20, \"\\x58\\xeb\" },\n+  { 0x2f21, \"\\x59\\x02\" },\n+  { 0x2f22, \"\\x59\\x0a\" },\n+  { 0x2f23, \"\\x59\\x15\" },\n+  { 0x2f24, \"\\x59\\x27\" },\n+  { 0x2f25, \"\\x59\\x73\" },\n+  { 0x2f26, \"\\x5b\\x50\" },\n+  { 0x2f27, \"\\x5b\\x80\" },\n+  { 0x2f28, \"\\x5b\\xf8\" },\n+  { 0x2f29, \"\\x5c\\x0f\" },\n+  { 0x2f2a, \"\\x5c\\x22\" },\n+  { 0x2f2b, \"\\x5c\\x38\" },\n+  { 0x2f2c, \"\\x5c\\x6e\" },\n+  { 0x2f2d, \"\\x5c\\x71\" },\n+  { 0x2f2e, \"\\x5d\\xdb\" },\n+  { 0x2f2f, \"\\x5d\\xe5\" },\n+  { 0x2f30, \"\\x5d\\xf1\" },\n+  { 0x2f31, \"\\x5d\\xfe\" },\n+  { 0x2f32, \"\\x5e\\x72\" },\n+  { 0x2f33, \"\\x5e\\x7a\" },\n+  { 0x2f34, \"\\x5e\\x7f\" },\n+  { 0x2f35, \"\\x5e\\xf4\" },\n+  { 0x2f36, \"\\x5e\\xfe\" },\n+  { 0x2f37, \"\\x5f\\x0b\" },\n+  { 0x2f38, \"\\x5f\\x13\" },\n+  { 0x2f39, \"\\x5f\\x50\" },\n+  { 0x2f3a, \"\\x5f\\x61\" },\n+  { 0x2f3b, \"\\x5f\\x73\" },\n+  { 0x2f3c, \"\\x5f\\xc3\" },\n+  { 0x2f3d, \"\\x62\\x08\" },\n+  { 0x2f3e, \"\\x62\\x36\" },\n+  { 0x2f3f, \"\\x62\\x4b\" },\n+  { 0x2f40, \"\\x65\\x2f\" },\n+  { 0x2f41, \"\\x65\\x34\" },\n+  { 0x2f42, \"\\x65\\x87\" },\n+  { 0x2f43, \"\\x65\\x97\" },\n+  { 0x2f44, \"\\x65\\xa4\" },\n+  { 0x2f45, \"\\x65\\xb9\" },\n+  { 0x2f46, \"\\x65\\xe0\" },\n+  { 0x2f47, \"\\x65\\xe5\" },\n+  { 0x2f48, \"\\x66\\xf0\" },\n+  { 0x2f49, \"\\x67\\x08\" },\n+  { 0x2f4a, \"\\x67\\x28\" },\n+  { 0x2f4b, \"\\x6b\\x20\" },\n+  { 0x2f4c, \"\\x6b\\x62\" },\n+  { 0x2f4d, \"\\x6b\\x79\" },\n+  { 0x2f4e, \"\\x6b\\xb3\" },\n+  { 0x2f4f, \"\\x6b\\xcb\" },\n+  { 0x2f50, \"\\x6b\\xd4\" },\n+  { 0x2f51, \"\\x6b\\xdb\" },\n+  { 0x2f52, \"\\x6c\\x0f\" },\n+  { 0x2f53, \"\\x6c\\x14\" },\n+  { 0x2f54, \"\\x6c\\x34\" },\n+  { 0x2f55, \"\\x70\\x6b\" },\n+  { 0x2f56, \"\\x72\\x2a\" },\n+  { 0x2f57, \"\\x72\\x36\" },\n+  { 0x2f58, \"\\x72\\x3b\" },\n+  { 0x2f59, \"\\x72\\x3f\" },\n+  { 0x2f5a, \"\\x72\\x47\" },\n+  { 0x2f5b, \"\\x72\\x59\" },\n+  { 0x2f5c, \"\\x72\\x5b\" },\n+  { 0x2f5d, \"\\x72\\xac\" },\n+  { 0x2f5e, \"\\x73\\x84\" },\n+  { 0x2f5f, \"\\x73\\x89\" },\n+  { 0x2f60, \"\\x74\\xdc\" },\n+  { 0x2f61, \"\\x74\\xe6\" },\n+  { 0x2f62, \"\\x75\\x18\" },\n+  { 0x2f63, \"\\x75\\x1f\" },\n+  { 0x2f64, \"\\x75\\x28\" },\n+  { 0x2f65, \"\\x75\\x30\" },\n+  { 0x2f66, \"\\x75\\x8b\" },\n+  { 0x2f67, \"\\x75\\x92\" },\n+  { 0x2f68, \"\\x76\\x76\" },\n+  { 0x2f69, \"\\x76\\x7d\" },\n+  { 0x2f6a, \"\\x76\\xae\" },\n+  { 0x2f6b, \"\\x76\\xbf\" },\n+  { 0x2f6c, \"\\x76\\xee\" },\n+  { 0x2f6d, \"\\x77\\xdb\" },\n+  { 0x2f6e, \"\\x77\\xe2\" },\n+  { 0x2f6f, \"\\x77\\xf3\" },\n+  { 0x2f70, \"\\x79\\x3a\" },\n+  { 0x2f71, \"\\x79\\xb8\" },\n+  { 0x2f72, \"\\x79\\xbe\" },\n+  { 0x2f73, \"\\x7a\\x74\" },\n+  { 0x2f74, \"\\x7a\\xcb\" },\n+  { 0x2f75, \"\\x7a\\xf9\" },\n+  { 0x2f76, \"\\x7c\\x73\" },\n+  { 0x2f77, \"\\x7c\\xf8\" },\n+  { 0x2f78, \"\\x7f\\x36\" },\n+  { 0x2f79, \"\\x7f\\x51\" },\n+  { 0x2f7a, \"\\x7f\\x8a\" },\n+  { 0x2f7b, \"\\x7f\\xbd\" },\n+  { 0x2f7c, \"\\x80\\x01\" },\n+  { 0x2f7d, \"\\x80\\x0c\" },\n+  { 0x2f7e, \"\\x80\\x12\" },\n+  { 0x2f7f, \"\\x80\\x33\" },\n+  { 0x2f80, \"\\x80\\x7f\" },\n+  { 0x2f81, \"\\x80\\x89\" },\n+  { 0x2f82, \"\\x81\\xe3\" },\n+  { 0x2f83, \"\\x81\\xea\" },\n+  { 0x2f84, \"\\x81\\xf3\" },\n+  { 0x2f85, \"\\x81\\xfc\" },\n+  { 0x2f86, \"\\x82\\x0c\" },\n+  { 0x2f87, \"\\x82\\x1b\" },\n+  { 0x2f88, \"\\x82\\x1f\" },\n+  { 0x2f89, \"\\x82\\x6e\" },\n+  { 0x2f8a, \"\\x82\\x72\" },\n+  { 0x2f8b, \"\\x82\\x78\" },\n+  { 0x2f8c, \"\\x86\\x4d\" },\n+  { 0x2f8d, \"\\x86\\x6b\" },\n+  { 0x2f8e, \"\\x88\\x40\" },\n+  { 0x2f8f, \"\\x88\\x4c\" },\n+  { 0x2f90, \"\\x88\\x63\" },\n+  { 0x2f91, \"\\x89\\x7e\" },\n+  { 0x2f92, \"\\x89\\x8b\" },\n+  { 0x2f93, \"\\x89\\xd2\" },\n+  { 0x2f94, \"\\x8a\\x00\" },\n+  { 0x2f95, \"\\x8c\\x37\" },\n+  { 0x2f96, \"\\x8c\\x46\" },\n+  { 0x2f97, \"\\x8c\\x55\" },\n+  { 0x2f98, \"\\x8c\\x78\" },\n+  { 0x2f99, \"\\x8c\\x9d\" },\n+  { 0x2f9a, \"\\x8d\\x64\" },\n+  { 0x2f9b, \"\\x8d\\x70\" },\n+  { 0x2f9c, \"\\x8d\\xb3\" },\n+  { 0x2f9d, \"\\x8e\\xab\" },\n+  { 0x2f9e, \"\\x8e\\xca\" },\n+  { 0x2f9f, \"\\x8f\\x9b\" },\n+  { 0x2fa0, \"\\x8f\\xb0\" },\n+  { 0x2fa1, \"\\x8f\\xb5\" },\n+  { 0x2fa2, \"\\x90\\x91\" },\n+  { 0x2fa3, \"\\x91\\x49\" },\n+  { 0x2fa4, \"\\x91\\xc6\" },\n+  { 0x2fa5, \"\\x91\\xcc\" },\n+  { 0x2fa6, \"\\x91\\xd1\" },\n+  { 0x2fa7, \"\\x95\\x77\" },\n+  { 0x2fa8, \"\\x95\\x80\" },\n+  { 0x2fa9, \"\\x96\\x1c\" },\n+  { 0x2faa, \"\\x96\\xb6\" },\n+  { 0x2fab, \"\\x96\\xb9\" },\n+  { 0x2fac, \"\\x96\\xe8\" },\n+  { 0x2fad, \"\\x97\\x51\" },\n+  { 0x2fae, \"\\x97\\x5e\" },\n+  { 0x2faf, \"\\x97\\x62\" },\n+  { 0x2fb0, \"\\x97\\x69\" },\n+  { 0x2fb1, \"\\x97\\xcb\" },\n+  { 0x2fb2, \"\\x97\\xed\" },\n+  { 0x2fb3, \"\\x97\\xf3\" },\n+  { 0x2fb4, \"\\x98\\x01\" },\n+  { 0x2fb5, \"\\x98\\xa8\" },\n+  { 0x2fb6, \"\\x98\\xdb\" },\n+  { 0x2fb7, \"\\x98\\xdf\" },\n+  { 0x2fb8, \"\\x99\\x96\" },\n+  { 0x2fb9, \"\\x99\\x99\" },\n+  { 0x2fba, \"\\x99\\xac\" },\n+  { 0x2fbb, \"\\x9a\\xa8\" },\n+  { 0x2fbc, \"\\x9a\\xd8\" },\n+  { 0x2fbd, \"\\x9a\\xdf\" },\n+  { 0x2fbe, \"\\x9b\\x25\" },\n+  { 0x2fbf, \"\\x9b\\x2f\" },\n+  { 0x2fc0, \"\\x9b\\x32\" },\n+  { 0x2fc1, \"\\x9b\\x3c\" },\n+  { 0x2fc2, \"\\x9b\\x5a\" },\n+  { 0x2fc3, \"\\x9c\\xe5\" },\n+  { 0x2fc4, \"\\x9e\\x75\" },\n+  { 0x2fc5, \"\\x9e\\x7f\" },\n+  { 0x2fc6, \"\\x9e\\xa5\" },\n+  { 0x2fc7, \"\\x9e\\xbb\" },\n+  { 0x2fc8, \"\\x9e\\xc3\" },\n+  { 0x2fc9, \"\\x9e\\xcd\" },\n+  { 0x2fca, \"\\x9e\\xd1\" },\n+  { 0x2fcb, \"\\x9e\\xf9\" },\n+  { 0x2fcc, \"\\x9e\\xfd\" },\n+  { 0x2fcd, \"\\x9f\\x0e\" },\n+  { 0x2fce, \"\\x9f\\x13\" },\n+  { 0x2fcf, \"\\x9f\\x20\" },\n+  { 0x2fd0, \"\\x9f\\x3b\" },\n+  { 0x2fd1, \"\\x9f\\x4a\" },\n+  { 0x2fd2, \"\\x9f\\x52\" },\n+  { 0x2fd3, \"\\x9f\\x8d\" },\n+  { 0x2fd4, \"\\x9f\\x9c\" },\n+  { 0x2fd5, \"\\x9f\\xa0\" },\n   { 0x3000, \"\\x00\\x20\" },\n   { 0x3036, \"\\x30\\x12\" },\n+  { 0x3038, \"\\x53\\x41\" },\n+  { 0x3039, \"\\x53\\x44\" },\n+  { 0x303a, \"\\x53\\x45\" },\n   { 0x309b, \"\\x00\\x20\\x30\\x99\" },\n   { 0x309c, \"\\x00\\x20\\x30\\x9a\" },\n   { 0x3131, \"\\x11\\x00\" },\n@@ -2641,11 +2735,11 @@ static const decomp_entry full_decomposition[] =\n   { 0xfc5b, \"\\x06\\x30\\x06\\x70\" },\n   { 0xfc5c, \"\\x06\\x31\\x06\\x70\" },\n   { 0xfc5d, \"\\x06\\x49\\x06\\x70\" },\n-  { 0xfc5e, \"\\x00\\x20\\x06\\x51\\x06\\x4c\" },\n-  { 0xfc5f, \"\\x00\\x20\\x06\\x51\\x06\\x4d\" },\n-  { 0xfc60, \"\\x00\\x20\\x06\\x51\\x06\\x4e\" },\n-  { 0xfc61, \"\\x00\\x20\\x06\\x51\\x06\\x4f\" },\n-  { 0xfc62, \"\\x00\\x20\\x06\\x51\\x06\\x50\" },\n+  { 0xfc5e, \"\\x00\\x20\\x06\\x4c\\x06\\x51\" },\n+  { 0xfc5f, \"\\x00\\x20\\x06\\x4d\\x06\\x51\" },\n+  { 0xfc60, \"\\x00\\x20\\x06\\x4e\\x06\\x51\" },\n+  { 0xfc61, \"\\x00\\x20\\x06\\x4f\\x06\\x51\" },\n+  { 0xfc62, \"\\x00\\x20\\x06\\x50\\x06\\x51\" },\n   { 0xfc63, \"\\x00\\x20\\x06\\x51\\x06\\x70\" },\n   { 0xfc64, \"\\x06\\x26\\x06\\x31\" },\n   { 0xfc65, \"\\x06\\x26\\x06\\x32\" },\n@@ -2789,9 +2883,9 @@ static const decomp_entry full_decomposition[] =\n   { 0xfcef, \"\\x06\\x46\\x06\\x47\" },\n   { 0xfcf0, \"\\x06\\x4a\\x06\\x45\" },\n   { 0xfcf1, \"\\x06\\x4a\\x06\\x47\" },\n-  { 0xfcf2, \"\\x06\\x40\\x06\\x51\\x06\\x4e\" },\n-  { 0xfcf3, \"\\x06\\x40\\x06\\x51\\x06\\x4f\" },\n-  { 0xfcf4, \"\\x06\\x40\\x06\\x51\\x06\\x50\" },\n+  { 0xfcf2, \"\\x06\\x40\\x06\\x4e\\x06\\x51\" },\n+  { 0xfcf3, \"\\x06\\x40\\x06\\x4f\\x06\\x51\" },\n+  { 0xfcf4, \"\\x06\\x40\\x06\\x50\\x06\\x51\" },\n   { 0xfcf5, \"\\x06\\x37\\x06\\x49\" },\n   { 0xfcf6, \"\\x06\\x37\\x06\\x4a\" },\n   { 0xfcf7, \"\\x06\\x39\\x06\\x49\" },"}, {"sha": "3ae8882985c7a263d8a5262b05fb436fb56e46cc", "filename": "libjava/include/java-chartables.h", "status": "modified", "additions": 963, "deletions": 82961, "changes": 83924, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Finclude%2Fjava-chartables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Finclude%2Fjava-chartables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-chartables.h?ref=1fa782725c0a33e23e5f280be091c29e116768bb"}, {"sha": "611700ba7e7850d780fa0fd1781a7d7fbb6112d9", "filename": "libjava/java/lang/Character.java", "status": "modified", "additions": 2016, "deletions": 376, "changes": 2392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fjava%2Flang%2FCharacter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fjava%2Flang%2FCharacter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharacter.java?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -1,438 +1,905 @@\n-// Character.java - Character class.\n+/* java.lang.Character -- Wrapper class for char, and Unicode subsets\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+/*\n+ * Note: This class must not be merged with Classpath.  Gcj uses C-style\n+ * arrays (see include/java-chartables.h) to store the Unicode character\n+ * database, whereas Classpath uses Java objects (char[] extracted from\n+ * String constants) in gnu.java.lang.CharData.  Gcj's approach is more\n+ * efficient, because there is no vtable or data relocation to worry about.\n+ * However, despite the difference in the database interface, the two\n+ * versions share identical algorithms.\n+ */\n \n package java.lang;\n \n import java.io.Serializable;\n \n /**\n+ * Wrapper class for the primitive char data type.  In addition, this class\n+ * allows one to retrieve property information and perform transformations\n+ * on the 57,707 defined characters in the Unicode Standard, Version 3.0.0.\n+ * java.lang.Character is designed to be very dynamic, and as such, it\n+ * retrieves information on the Unicode character set from a separate\n+ * database, gnu.java.lang.CharData, which can be easily upgraded.\n+ *\n+ * <p>For predicates, boundaries are used to describe\n+ * the set of characters for which the method will return true.\n+ * This syntax uses fairly normal regular expression notation.\n+ * See 5.13 of the Unicode Standard, Version 3.0, for the\n+ * boundary specification.\n+ *\n+ * <p>See <a href=\"http://www.unicode.org\">http://www.unicode.org</a>\n+ * for more information on the Unicode Standard.\n+ *\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 10, 1998 \n+ * @author Paul N. Fisher\n+ * @author Jochen Hoenicke\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n-\n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1,\n- * online API docs for JDK 1.2 beta from http://www.javasoft.com,\n- * and The Unicode Standard Version 2.0.\n- * Status: Believed complete and correct for JDK 1.1; 1.2 methods\n- * unimplemented.\n- */\n-\n public final class Character implements Serializable, Comparable\n {\n-  public static final char MIN_VALUE = '\\u0000';\n-  public static final char MAX_VALUE = '\\uffff';\n+  /**\n+   * A subset of Unicode blocks.\n+   *\n+   * @author Paul N. Fisher\n+   * @author Eric Blake <ebb9@email.byu.edu>\n+   * @since 1.2\n+   */\n+  public static class Subset\n+  {\n+    /** The name of the subset. */\n+    private final String name;\n \n-  public static final int MIN_RADIX = 2;\n-  public static final int MAX_RADIX = 36;\n+    /**\n+     * Construct a new subset of characters.\n+     *\n+     * @param name the name of the subset\n+     * @throws NullPointerException if name is null\n+     */\n+    protected Subset(String name)\n+    {\n+      // Note that name.toString() is name, unless name was null.\n+      this.name = name.toString();\n+    }\n \n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass('C');\n+    /**\n+     * Compares two Subsets for equality. This is <code>final</code>, and\n+     * restricts the comparison on the <code>==</code> operator, so it returns\n+     * true only for the same object.\n+     *\n+     * @param o the object to compare\n+     * @return true if o is this\n+     */\n+    public final boolean equals(Object o)\n+    {\n+      return o == this;\n+    }\n \n-  // Space.\n-  public static final byte SPACE_SEPARATOR     = 12;\n-  public static final byte LINE_SEPARATOR      = 13;\n-  public static final byte PARAGRAPH_SEPARATOR = 14;\n+    /**\n+     * Makes the original hashCode of Object final, to be consistent with\n+     * equals.\n+     *\n+     * @return the hash code for this object\n+     */\n+    public final int hashCode()\n+    {\n+      return super.hashCode();\n+    }\n \n-  // Letters.\n-  public static final byte UPPERCASE_LETTER = 1;\n-  public static final byte LOWERCASE_LETTER = 2;\n-  public static final byte TITLECASE_LETTER = 3;\n-  public static final byte MODIFIER_LETTER  = 4;\n-  public static final byte OTHER_LETTER     = 5;\n+    /**\n+     * Returns the name of the subset.\n+     *\n+     * @return the name\n+     */\n+    public final String toString()\n+    {\n+      return name;\n+    }\n+  } // class Subset\n \n-  // Numbers.\n-  public static final byte DECIMAL_DIGIT_NUMBER =  9;\n-  public static final byte LETTER_NUMBER        = 10;\n-  public static final byte OTHER_NUMBER         = 11;\n+  /**\n+   * A family of character subsets in the Unicode specification. A character\n+   * is in at most one of these blocks.\n+   *\n+   * This inner class was generated automatically from\n+   * <code>libjava/gnu/gcj/convert/Blocks-3.txt</code>, by some perl scripts.\n+   * This Unicode definition file can be found on the\n+   * <a href=\"http://www.unicode.org\">http://www.unicode.org</a> website.\n+   * JDK 1.4 uses Unicode version 3.0.0.\n+   *\n+   * @author scripts/unicode-blocks.pl (written by Eric Blake)\n+   * @since 1.2\n+   */\n+  public static final class UnicodeBlock extends Subset\n+  {\n+    /** The start of the subset. */\n+    private final char start;\n \n-  // Marks.\n-  public static final byte NON_SPACING_MARK     = 6;\n-  public static final byte ENCLOSING_MARK       = 7;\n-  public static final byte COMBINING_SPACING_MARK = 8;\n+    /** The end of the subset. */\n+    private final char end;\n \n-  // Punctuation.\n-  public static final byte DASH_PUNCTUATION      = 20;\n-  public static final byte START_PUNCTUATION     = 21;\n-  public static final byte END_PUNCTUATION       = 22;\n-  public static final byte CONNECTOR_PUNCTUATION = 23;\n-  public static final byte OTHER_PUNCTUATION     = 24;\n+    /**\n+     * Constructor for strictly defined blocks.\n+     *\n+     * @param start the start character of the range\n+     * @param end the end character of the range\n+     * @param name the block name\n+     */\n+    private UnicodeBlock(char start, char end, String name)\n+    {\n+      super(name);\n+      this.start = start;\n+      this.end = end;\n+    }\n \n-  // Symbols.\n-  public static final byte MATH_SYMBOL     = 25;\n-  public static final byte CURRENCY_SYMBOL = 26;\n-  public static final byte MODIFIER_SYMBOL = 27;\n-  public static final byte OTHER_SYMBOL    = 28;\n+    /**\n+     * Returns the Unicode character block which a character belongs to.\n+     *\n+     * @param ch the character to look up\n+     * @return the set it belongs to, or null if it is not in one\n+     */\n+    public static UnicodeBlock of(char ch)\n+    {\n+      // Special case, since SPECIALS contains two ranges.\n+      if (ch == '\\uFEFF')\n+        return SPECIALS;\n+      // Simple binary search for the correct block.\n+      int low = 0;\n+      int hi = sets.length - 1;\n+      while (low <= hi)\n+        {\n+          int mid = (low + hi) >> 1;\n+          UnicodeBlock b = sets[mid];\n+          if (ch < b.start)\n+            hi = mid - 1;\n+          else if (ch > b.end)\n+            low = mid + 1;\n+          else\n+            return b;\n+        }\n+      return null;\n+    }\n \n-  // Format controls.\n-  public static final byte CONTROL = 15;\n-  // Note: The JCL book says that both FORMAT and PRIVATE_USE are 18.\n-  // However, FORMAT is actually 16.\n-  public static final byte FORMAT  = 16;\n+    /**\n+     * Basic Latin.\n+     * '\\u0000' - '\\u007F'.\n+     */\n+    public final static UnicodeBlock BASIC_LATIN\n+      = new UnicodeBlock('\\u0000', '\\u007F',\n+                         \"BASIC_LATIN\");\n \n-  // Others.\n-  public static final byte UNASSIGNED  = 0;\n-  public static final byte PRIVATE_USE = 18;\n-  public static final byte SURROGATE   = 19;\n+    /**\n+     * Latin-1 Supplement.\n+     * '\\u0080' - '\\u00FF'.\n+     */\n+    public final static UnicodeBlock LATIN_1_SUPPLEMENT\n+      = new UnicodeBlock('\\u0080', '\\u00FF',\n+                         \"LATIN_1_SUPPLEMENT\");\n \n-  private static final long serialVersionUID = 3786198910865385080L;\n+    /**\n+     * Latin Extended-A.\n+     * '\\u0100' - '\\u017F'.\n+     */\n+    public final static UnicodeBlock LATIN_EXTENDED_A\n+      = new UnicodeBlock('\\u0100', '\\u017F',\n+                         \"LATIN_EXTENDED_A\");\n \n-  public Character (char ch)\n-  {\n-    value = ch;\n-  }\n+    /**\n+     * Latin Extended-B.\n+     * '\\u0180' - '\\u024F'.\n+     */\n+    public final static UnicodeBlock LATIN_EXTENDED_B\n+      = new UnicodeBlock('\\u0180', '\\u024F',\n+                         \"LATIN_EXTENDED_B\");\n \n-  public char charValue ()\n-  {\n-    return value;\n-  }\n+    /**\n+     * IPA Extensions.\n+     * '\\u0250' - '\\u02AF'.\n+     */\n+    public final static UnicodeBlock IPA_EXTENSIONS\n+      = new UnicodeBlock('\\u0250', '\\u02AF',\n+                         \"IPA_EXTENSIONS\");\n \n-  // See if a character is a digit.  If so, return the corresponding\n-  // value.  Otherwise return -1.\n-  private static native int digit_value (char ch);\n+    /**\n+     * Spacing Modifier Letters.\n+     * '\\u02B0' - '\\u02FF'.\n+     */\n+    public final static UnicodeBlock SPACING_MODIFIER_LETTERS\n+      = new UnicodeBlock('\\u02B0', '\\u02FF',\n+                         \"SPACING_MODIFIER_LETTERS\");\n \n-  public static int digit (char ch, int radix)\n-  {\n-    if (radix < MIN_RADIX || radix > MAX_RADIX)\n-      return -1;\n-\n-    int d = digit_value (ch);\n-    if (d == -1)\n-      {\n-\tif (ch >= 'A' && ch <= 'Z')\n-\t  d = ch - 'A' + 10;\n-\telse if (ch >= 'a' && ch <= 'z')\n-\t  d = ch - 'a' + 10;\n-\telse\n-\t  return -1;\n-      }\n-    return d >= radix ? -1 : d;\n-  }\n+    /**\n+     * Combining Diacritical Marks.\n+     * '\\u0300' - '\\u036F'.\n+     */\n+    public final static UnicodeBlock COMBINING_DIACRITICAL_MARKS\n+      = new UnicodeBlock('\\u0300', '\\u036F',\n+                         \"COMBINING_DIACRITICAL_MARKS\");\n \n-  public boolean equals (Object obj)\n-  {\n-    // Don't need to compare OBJ to null as instanceof will do this.\n-    if (obj instanceof Character)\n-      return value == ((Character) obj).value;\n-    return false;\n-  }\n+    /**\n+     * Greek.\n+     * '\\u0370' - '\\u03FF'.\n+     */\n+    public final static UnicodeBlock GREEK\n+      = new UnicodeBlock('\\u0370', '\\u03FF',\n+                         \"GREEK\");\n \n-  public static char forDigit (int d, int rdx)\n-  {\n-    if (d < 0 || d >= rdx || rdx < MIN_RADIX || rdx > MAX_RADIX)\n-      return '\\u0000';\n-    if (d < 10)\n-      return (char) ('0' + d);\n-    // The Java Language Spec says to use lowercase, while the JCL\n-    // says to use uppercase.  We go with the former.\n-    return (char) ('a' + d - 10);\n-  }\n+    /**\n+     * Cyrillic.\n+     * '\\u0400' - '\\u04FF'.\n+     */\n+    public final static UnicodeBlock CYRILLIC\n+      = new UnicodeBlock('\\u0400', '\\u04FF',\n+                         \"CYRILLIC\");\n \n-  public static native int getNumericValue (char ch);\n-  public static native int getType (char ch);\n+    /**\n+     * Armenian.\n+     * '\\u0530' - '\\u058F'.\n+     */\n+    public final static UnicodeBlock ARMENIAN\n+      = new UnicodeBlock('\\u0530', '\\u058F',\n+                         \"ARMENIAN\");\n \n-  public int hashCode ()\n-  {\n-    return value;\n-  }\n+    /**\n+     * Hebrew.\n+     * '\\u0590' - '\\u05FF'.\n+     */\n+    public final static UnicodeBlock HEBREW\n+      = new UnicodeBlock('\\u0590', '\\u05FF',\n+                         \"HEBREW\");\n \n-  public static boolean isDefined (char ch)\n-  {\n-    return getType (ch) != UNASSIGNED;\n-  }\n+    /**\n+     * Arabic.\n+     * '\\u0600' - '\\u06FF'.\n+     */\n+    public final static UnicodeBlock ARABIC\n+      = new UnicodeBlock('\\u0600', '\\u06FF',\n+                         \"ARABIC\");\n \n-  public static boolean isDigit (char ch)\n-  {\n-    return digit_value (ch) != -1;\n-  }\n+    /**\n+     * Syriac.\n+     * '\\u0700' - '\\u074F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock SYRIAC\n+      = new UnicodeBlock('\\u0700', '\\u074F',\n+                         \"SYRIAC\");\n \n-  // The JCL book says that the argument here is a Character.  That is\n-  // wrong.\n-  public static boolean isIdentifierIgnorable (char ch)\n-  {\n-    // This information comes from the Unicode Standard.  It isn't\n-    // auto-generated as it doesn't appear in the unidata table.\n-    return ((ch >= '\\u0000' && ch <= '\\u0008')\n-\t    || (ch >= '\\u000e' && ch <= '\\u001b')\n-\t    // JDK 1.2 docs say that these are ignorable.  The Unicode\n-\t    // Standard is somewhat ambiguous on this issue.\n-\t    || (ch >= '\\u007f' && ch <= '\\u009f')\n-\t    || (ch >= '\\u200c' && ch <= '\\u200f')\n-\t    // JCl says 200a through 200e, but that is a typo.  The\n-\t    // Unicode standard says the bidi controls are 202a\n-\t    // through 202e.\n-\t    || (ch >= '\\u202a' && ch <= '\\u202e')\n-\t    || (ch >= '\\u206a' && ch <= '\\u206f')\n-\t    || ch == '\\ufeff');\n-  }\n+    /**\n+     * Thaana.\n+     * '\\u0780' - '\\u07BF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock THAANA\n+      = new UnicodeBlock('\\u0780', '\\u07BF',\n+                         \"THAANA\");\n \n-  public static boolean isISOControl (char c)\n-  {\n-    return ((c >= '\\u0000' && c <= '\\u001f')\n-\t    || (c >= '\\u007f' && c <= '\\u009f'));\n-  }\n+    /**\n+     * Devanagari.\n+     * '\\u0900' - '\\u097F'.\n+     */\n+    public final static UnicodeBlock DEVANAGARI\n+      = new UnicodeBlock('\\u0900', '\\u097F',\n+                         \"DEVANAGARI\");\n \n-  public static boolean isJavaIdentifierPart (char ch)\n-  {\n-    if (isIdentifierIgnorable (ch) || isDigit (ch))\n-      return true;\n-    int type = getType (ch);\n-    return (type == COMBINING_SPACING_MARK || type == NON_SPACING_MARK\n-\t    || type == CURRENCY_SYMBOL || type == CONNECTOR_PUNCTUATION\n-\t    || type == UPPERCASE_LETTER || type == LOWERCASE_LETTER\n-\t    || type == TITLECASE_LETTER || type == MODIFIER_LETTER\n-\t    || type == OTHER_LETTER || type == LETTER_NUMBER);\n-  }\n+    /**\n+     * Bengali.\n+     * '\\u0980' - '\\u09FF'.\n+     */\n+    public final static UnicodeBlock BENGALI\n+      = new UnicodeBlock('\\u0980', '\\u09FF',\n+                         \"BENGALI\");\n \n-  public static boolean isJavaIdentifierStart (char ch)\n-  {\n-    int type = getType (ch);\n-    return (type == CURRENCY_SYMBOL || type == CONNECTOR_PUNCTUATION\n-\t    || type == UPPERCASE_LETTER || type == LOWERCASE_LETTER\n-\t    || type == TITLECASE_LETTER || type == MODIFIER_LETTER\n-\t    || type == OTHER_LETTER);\n-  }\n+    /**\n+     * Gurmukhi.\n+     * '\\u0A00' - '\\u0A7F'.\n+     */\n+    public final static UnicodeBlock GURMUKHI\n+      = new UnicodeBlock('\\u0A00', '\\u0A7F',\n+                         \"GURMUKHI\");\n \n-  // Deprecated in 1.2.\n-  public static boolean isJavaLetter (char ch)\n-  {\n-    return ch == '$' || ch == '_' || isLetter (ch);\n-  }\n+    /**\n+     * Gujarati.\n+     * '\\u0A80' - '\\u0AFF'.\n+     */\n+    public final static UnicodeBlock GUJARATI\n+      = new UnicodeBlock('\\u0A80', '\\u0AFF',\n+                         \"GUJARATI\");\n \n-  // Deprecated in 1.2.\n-  public static boolean isJavaLetterOrDigit (char ch)\n-  {\n-    return ch == '$' || ch == '_' || isLetterOrDigit (ch);\n-  }\n+    /**\n+     * Oriya.\n+     * '\\u0B00' - '\\u0B7F'.\n+     */\n+    public final static UnicodeBlock ORIYA\n+      = new UnicodeBlock('\\u0B00', '\\u0B7F',\n+                         \"ORIYA\");\n \n-  public static boolean isLetter (char ch)\n-  {\n-    int type = getType (ch);\n-    return (type == UPPERCASE_LETTER || type == LOWERCASE_LETTER\n-\t    || type == TITLECASE_LETTER || type == MODIFIER_LETTER\n-\t    || type == OTHER_LETTER);\n-  }\n+    /**\n+     * Tamil.\n+     * '\\u0B80' - '\\u0BFF'.\n+     */\n+    public final static UnicodeBlock TAMIL\n+      = new UnicodeBlock('\\u0B80', '\\u0BFF',\n+                         \"TAMIL\");\n \n-  public static boolean isLetterOrDigit (char ch)\n-  {\n-    return isDigit (ch) || isLetter (ch);\n-  }\n+    /**\n+     * Telugu.\n+     * '\\u0C00' - '\\u0C7F'.\n+     */\n+    public final static UnicodeBlock TELUGU\n+      = new UnicodeBlock('\\u0C00', '\\u0C7F',\n+                         \"TELUGU\");\n \n-  public static native boolean isLowerCase (char ch);\n+    /**\n+     * Kannada.\n+     * '\\u0C80' - '\\u0CFF'.\n+     */\n+    public final static UnicodeBlock KANNADA\n+      = new UnicodeBlock('\\u0C80', '\\u0CFF',\n+                         \"KANNADA\");\n \n-  // Deprecated in JCL.\n-  public static boolean isSpace (char ch)\n-  {\n-    return ch == '\\n' || ch == '\\t' || ch == '\\f' || ch == '\\r' || ch == ' ';\n-  }\n+    /**\n+     * Malayalam.\n+     * '\\u0D00' - '\\u0D7F'.\n+     */\n+    public final static UnicodeBlock MALAYALAM\n+      = new UnicodeBlock('\\u0D00', '\\u0D7F',\n+                         \"MALAYALAM\");\n \n-  public static native boolean isSpaceChar (char ch);\n-  public static native boolean isTitleCase (char ch);\n+    /**\n+     * Sinhala.\n+     * '\\u0D80' - '\\u0DFF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock SINHALA\n+      = new UnicodeBlock('\\u0D80', '\\u0DFF',\n+                         \"SINHALA\");\n \n-  public static boolean isUnicodeIdentifierPart (char ch)\n-  {\n-    if (isIdentifierIgnorable (ch) || isDigit (ch))\n-      return true;\n-    int type = getType (ch);\n-    return (type == CONNECTOR_PUNCTUATION || type == LETTER_NUMBER\n-\t    || type == COMBINING_SPACING_MARK || type == NON_SPACING_MARK\n-\t    || type == UPPERCASE_LETTER || type == LOWERCASE_LETTER\n-\t    || type == TITLECASE_LETTER || type == MODIFIER_LETTER\n-\t    || type == OTHER_LETTER);\n-  }\n+    /**\n+     * Thai.\n+     * '\\u0E00' - '\\u0E7F'.\n+     */\n+    public final static UnicodeBlock THAI\n+      = new UnicodeBlock('\\u0E00', '\\u0E7F',\n+                         \"THAI\");\n \n-  public static boolean isUnicodeIdentifierStart (char ch)\n-  {\n-    return isLetter (ch);\n-  }\n+    /**\n+     * Lao.\n+     * '\\u0E80' - '\\u0EFF'.\n+     */\n+    public final static UnicodeBlock LAO\n+      = new UnicodeBlock('\\u0E80', '\\u0EFF',\n+                         \"LAO\");\n \n-  public static native boolean isUpperCase (char ch);\n+    /**\n+     * Tibetan.\n+     * '\\u0F00' - '\\u0FFF'.\n+     */\n+    public final static UnicodeBlock TIBETAN\n+      = new UnicodeBlock('\\u0F00', '\\u0FFF',\n+                         \"TIBETAN\");\n \n-  public static boolean isWhitespace (char ch)\n-  {\n-    return ((ch >= '\\u0009' && ch <= '\\r')\n-\t    || (ch >= '\\u001c' && ch <= '\\u001f')\n-\t    || (ch != '\\u00a0' && ch != '\\ufeff' && isSpaceChar (ch)));\n-  }\n+    /**\n+     * Myanmar.\n+     * '\\u1000' - '\\u109F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock MYANMAR\n+      = new UnicodeBlock('\\u1000', '\\u109F',\n+                         \"MYANMAR\");\n \n-  public static native char toLowerCase (char ch);\n-  public static native char toTitleCase (char ch);\n-  public static native char toUpperCase (char ch);\n+    /**\n+     * Georgian.\n+     * '\\u10A0' - '\\u10FF'.\n+     */\n+    public final static UnicodeBlock GEORGIAN\n+      = new UnicodeBlock('\\u10A0', '\\u10FF',\n+                         \"GEORGIAN\");\n \n-  public String toString ()\n-  {\n-    return String.valueOf(value);\n-  }\n+    /**\n+     * Hangul Jamo.\n+     * '\\u1100' - '\\u11FF'.\n+     */\n+    public final static UnicodeBlock HANGUL_JAMO\n+      = new UnicodeBlock('\\u1100', '\\u11FF',\n+                         \"HANGUL_JAMO\");\n \n-  public int compareTo (Character anotherCharacter)\n-  {\n-    return value - anotherCharacter.value;\n-  }\n+    /**\n+     * Ethiopic.\n+     * '\\u1200' - '\\u137F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock ETHIOPIC\n+      = new UnicodeBlock('\\u1200', '\\u137F',\n+                         \"ETHIOPIC\");\n \n-  public int compareTo (Object o)\n-  {\n-    return compareTo ((Character) o);\n-  }\n+    /**\n+     * Cherokee.\n+     * '\\u13A0' - '\\u13FF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock CHEROKEE\n+      = new UnicodeBlock('\\u13A0', '\\u13FF',\n+                         \"CHEROKEE\");\n \n-  // Private data.\n-  private char value;\n+    /**\n+     * Unified Canadian Aboriginal Syllabics.\n+     * '\\u1400' - '\\u167F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\n+      = new UnicodeBlock('\\u1400', '\\u167F',\n+                         \"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\");\n \n-  public static class Subset\n-  {\n-    protected Subset (String name)\n-    {\n-      this.name = name;\n-    }\n+    /**\n+     * Ogham.\n+     * '\\u1680' - '\\u169F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock OGHAM\n+      = new UnicodeBlock('\\u1680', '\\u169F',\n+                         \"OGHAM\");\n \n-    public final boolean equals (Object obj)\n-    {\n-      return obj == this;\n-    }\n+    /**\n+     * Runic.\n+     * '\\u16A0' - '\\u16FF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock RUNIC\n+      = new UnicodeBlock('\\u16A0', '\\u16FF',\n+                         \"RUNIC\");\n \n-    public final int hashCode ()\n-    {\n-      return super.hashCode ();\n-    }\n+    /**\n+     * Khmer.\n+     * '\\u1780' - '\\u17FF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock KHMER\n+      = new UnicodeBlock('\\u1780', '\\u17FF',\n+                         \"KHMER\");\n \n-    public final String toString ()\n-    {\n-      return name;\n-    }\n+    /**\n+     * Mongolian.\n+     * '\\u1800' - '\\u18AF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock MONGOLIAN\n+      = new UnicodeBlock('\\u1800', '\\u18AF',\n+                         \"MONGOLIAN\");\n \n-    // Name of this subset.\n-    private String name;\n-  }\n+    /**\n+     * Latin Extended Additional.\n+     * '\\u1E00' - '\\u1EFF'.\n+     */\n+    public final static UnicodeBlock LATIN_EXTENDED_ADDITIONAL\n+      = new UnicodeBlock('\\u1E00', '\\u1EFF',\n+                         \"LATIN_EXTENDED_ADDITIONAL\");\n \n-  public static final class UnicodeBlock extends Subset\n-  {\n-    private UnicodeBlock (String name, char start, char end)\n-    {\n-      super (name);\n-      this.start = start;\n-      this.end = end;\n-    }\n+    /**\n+     * Greek Extended.\n+     * '\\u1F00' - '\\u1FFF'.\n+     */\n+    public final static UnicodeBlock GREEK_EXTENDED\n+      = new UnicodeBlock('\\u1F00', '\\u1FFF',\n+                         \"GREEK_EXTENDED\");\n \n-    public static UnicodeBlock of (char c)\n-    {\n-      // A special case we need.\n-      if (c == '\\uFEFF')\n-\treturn SPECIALS;\n-\n-      // Do a binary search to find the correct subset.\n-      int hi = blocks.length;\n-      int lo = 0;\n-      while (hi > lo)\n-\t{\n-\t  int mid = (hi + lo) / 2;\n-\t  UnicodeBlock ub = blocks[mid];\n-\t  if (c < ub.start)\n-\t    hi = mid;\n-\t  else if (c > ub.end)\n-\t    lo = mid;\n-\t  else\n-\t    return ub;\n-\t}\n+    /**\n+     * General Punctuation.\n+     * '\\u2000' - '\\u206F'.\n+     */\n+    public final static UnicodeBlock GENERAL_PUNCTUATION\n+      = new UnicodeBlock('\\u2000', '\\u206F',\n+                         \"GENERAL_PUNCTUATION\");\n \n-      return null;\n-    }\n+    /**\n+     * Superscripts and Subscripts.\n+     * '\\u2070' - '\\u209F'.\n+     */\n+    public final static UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS\n+      = new UnicodeBlock('\\u2070', '\\u209F',\n+                         \"SUPERSCRIPTS_AND_SUBSCRIPTS\");\n+\n+    /**\n+     * Currency Symbols.\n+     * '\\u20A0' - '\\u20CF'.\n+     */\n+    public final static UnicodeBlock CURRENCY_SYMBOLS\n+      = new UnicodeBlock('\\u20A0', '\\u20CF',\n+                         \"CURRENCY_SYMBOLS\");\n+\n+    /**\n+     * Combining Marks for Symbols.\n+     * '\\u20D0' - '\\u20FF'.\n+     */\n+    public final static UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS\n+      = new UnicodeBlock('\\u20D0', '\\u20FF',\n+                         \"COMBINING_MARKS_FOR_SYMBOLS\");\n+\n+    /**\n+     * Letterlike Symbols.\n+     * '\\u2100' - '\\u214F'.\n+     */\n+    public final static UnicodeBlock LETTERLIKE_SYMBOLS\n+      = new UnicodeBlock('\\u2100', '\\u214F',\n+                         \"LETTERLIKE_SYMBOLS\");\n+\n+    /**\n+     * Number Forms.\n+     * '\\u2150' - '\\u218F'.\n+     */\n+    public final static UnicodeBlock NUMBER_FORMS\n+      = new UnicodeBlock('\\u2150', '\\u218F',\n+                         \"NUMBER_FORMS\");\n+\n+    /**\n+     * Arrows.\n+     * '\\u2190' - '\\u21FF'.\n+     */\n+    public final static UnicodeBlock ARROWS\n+      = new UnicodeBlock('\\u2190', '\\u21FF',\n+                         \"ARROWS\");\n+\n+    /**\n+     * Mathematical Operators.\n+     * '\\u2200' - '\\u22FF'.\n+     */\n+    public final static UnicodeBlock MATHEMATICAL_OPERATORS\n+      = new UnicodeBlock('\\u2200', '\\u22FF',\n+                         \"MATHEMATICAL_OPERATORS\");\n+\n+    /**\n+     * Miscellaneous Technical.\n+     * '\\u2300' - '\\u23FF'.\n+     */\n+    public final static UnicodeBlock MISCELLANEOUS_TECHNICAL\n+      = new UnicodeBlock('\\u2300', '\\u23FF',\n+                         \"MISCELLANEOUS_TECHNICAL\");\n+\n+    /**\n+     * Control Pictures.\n+     * '\\u2400' - '\\u243F'.\n+     */\n+    public final static UnicodeBlock CONTROL_PICTURES\n+      = new UnicodeBlock('\\u2400', '\\u243F',\n+                         \"CONTROL_PICTURES\");\n+\n+    /**\n+     * Optical Character Recognition.\n+     * '\\u2440' - '\\u245F'.\n+     */\n+    public final static UnicodeBlock OPTICAL_CHARACTER_RECOGNITION\n+      = new UnicodeBlock('\\u2440', '\\u245F',\n+                         \"OPTICAL_CHARACTER_RECOGNITION\");\n \n-    // Start and end characters.\n-    private char start, end;\n-\n-    // Everything from here to the end of UnicodeBlock is\n-    // automatically generated by the blocks.pl script.\n-    public static final UnicodeBlock BASIC_LATIN = new UnicodeBlock (\"Basic Latin\", '\\u0000', '\\u007F');\n-    public static final UnicodeBlock LATIN_1_SUPPLEMENT = new UnicodeBlock (\"Latin-1 Supplement\", '\\u0080', '\\u00FF');\n-    public static final UnicodeBlock LATIN_EXTENDED_A = new UnicodeBlock (\"Latin Extended-A\", '\\u0100', '\\u017F');\n-    public static final UnicodeBlock LATIN_EXTENDED_B = new UnicodeBlock (\"Latin Extended-B\", '\\u0180', '\\u024F');\n-    public static final UnicodeBlock IPA_EXTENSIONS = new UnicodeBlock (\"IPA Extensions\", '\\u0250', '\\u02AF');\n-    public static final UnicodeBlock SPACING_MODIFIER_LETTERS = new UnicodeBlock (\"Spacing Modifier Letters\", '\\u02B0', '\\u02FF');\n-    public static final UnicodeBlock COMBINING_DIACRITICAL_MARKS = new UnicodeBlock (\"Combining Diacritical Marks\", '\\u0300', '\\u036F');\n-    public static final UnicodeBlock GREEK = new UnicodeBlock (\"Greek\", '\\u0370', '\\u03FF');\n-    public static final UnicodeBlock CYRILLIC = new UnicodeBlock (\"Cyrillic\", '\\u0400', '\\u04FF');\n-    public static final UnicodeBlock ARMENIAN = new UnicodeBlock (\"Armenian\", '\\u0530', '\\u058F');\n-    public static final UnicodeBlock HEBREW = new UnicodeBlock (\"Hebrew\", '\\u0590', '\\u05FF');\n-    public static final UnicodeBlock ARABIC = new UnicodeBlock (\"Arabic\", '\\u0600', '\\u06FF');\n-    public static final UnicodeBlock SYRIAC__ = new UnicodeBlock (\"Syriac  \", '\\u0700', '\\u074F');\n-    public static final UnicodeBlock THAANA = new UnicodeBlock (\"Thaana\", '\\u0780', '\\u07BF');\n-    public static final UnicodeBlock DEVANAGARI = new UnicodeBlock (\"Devanagari\", '\\u0900', '\\u097F');\n-    public static final UnicodeBlock BENGALI = new UnicodeBlock (\"Bengali\", '\\u0980', '\\u09FF');\n-    public static final UnicodeBlock GURMUKHI = new UnicodeBlock (\"Gurmukhi\", '\\u0A00', '\\u0A7F');\n-    public static final UnicodeBlock GUJARATI = new UnicodeBlock (\"Gujarati\", '\\u0A80', '\\u0AFF');\n-    public static final UnicodeBlock ORIYA = new UnicodeBlock (\"Oriya\", '\\u0B00', '\\u0B7F');\n-    public static final UnicodeBlock TAMIL = new UnicodeBlock (\"Tamil\", '\\u0B80', '\\u0BFF');\n-    public static final UnicodeBlock TELUGU = new UnicodeBlock (\"Telugu\", '\\u0C00', '\\u0C7F');\n-    public static final UnicodeBlock KANNADA = new UnicodeBlock (\"Kannada\", '\\u0C80', '\\u0CFF');\n-    public static final UnicodeBlock MALAYALAM = new UnicodeBlock (\"Malayalam\", '\\u0D00', '\\u0D7F');\n-    public static final UnicodeBlock SINHALA = new UnicodeBlock (\"Sinhala\", '\\u0D80', '\\u0DFF');\n-    public static final UnicodeBlock THAI = new UnicodeBlock (\"Thai\", '\\u0E00', '\\u0E7F');\n-    public static final UnicodeBlock LAO = new UnicodeBlock (\"Lao\", '\\u0E80', '\\u0EFF');\n-    public static final UnicodeBlock TIBETAN = new UnicodeBlock (\"Tibetan\", '\\u0F00', '\\u0FFF');\n-    public static final UnicodeBlock MYANMAR_ = new UnicodeBlock (\"Myanmar \", '\\u1000', '\\u109F');\n-    public static final UnicodeBlock GEORGIAN = new UnicodeBlock (\"Georgian\", '\\u10A0', '\\u10FF');\n-    public static final UnicodeBlock HANGUL_JAMO = new UnicodeBlock (\"Hangul Jamo\", '\\u1100', '\\u11FF');\n-    public static final UnicodeBlock ETHIOPIC = new UnicodeBlock (\"Ethiopic\", '\\u1200', '\\u137F');\n-    public static final UnicodeBlock CHEROKEE = new UnicodeBlock (\"Cherokee\", '\\u13A0', '\\u13FF');\n-    public static final UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = new UnicodeBlock (\"Unified Canadian Aboriginal Syllabics\", '\\u1400', '\\u167F');\n-    public static final UnicodeBlock OGHAM = new UnicodeBlock (\"Ogham\", '\\u1680', '\\u169F');\n-    public static final UnicodeBlock RUNIC = new UnicodeBlock (\"Runic\", '\\u16A0', '\\u16FF');\n-    public static final UnicodeBlock KHMER = new UnicodeBlock (\"Khmer\", '\\u1780', '\\u17FF');\n-    public static final UnicodeBlock MONGOLIAN = new UnicodeBlock (\"Mongolian\", '\\u1800', '\\u18AF');\n-    public static final UnicodeBlock LATIN_EXTENDED_ADDITIONAL = new UnicodeBlock (\"Latin Extended Additional\", '\\u1E00', '\\u1EFF');\n-    public static final UnicodeBlock GREEK_EXTENDED = new UnicodeBlock (\"Greek Extended\", '\\u1F00', '\\u1FFF');\n-    public static final UnicodeBlock GENERAL_PUNCTUATION = new UnicodeBlock (\"General Punctuation\", '\\u2000', '\\u206F');\n-    public static final UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS = new UnicodeBlock (\"Superscripts and Subscripts\", '\\u2070', '\\u209F');\n-    public static final UnicodeBlock CURRENCY_SYMBOLS = new UnicodeBlock (\"Currency Symbols\", '\\u20A0', '\\u20CF');\n-    public static final UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS = new UnicodeBlock (\"Combining Marks for Symbols\", '\\u20D0', '\\u20FF');\n-    public static final UnicodeBlock LETTERLIKE_SYMBOLS = new UnicodeBlock (\"Letterlike Symbols\", '\\u2100', '\\u214F');\n-    public static final UnicodeBlock NUMBER_FORMS = new UnicodeBlock (\"Number Forms\", '\\u2150', '\\u218F');\n-    public static final UnicodeBlock ARROWS = new UnicodeBlock (\"Arrows\", '\\u2190', '\\u21FF');\n-    public static final UnicodeBlock MATHEMATICAL_OPERATORS = new UnicodeBlock (\"Mathematical Operators\", '\\u2200', '\\u22FF');\n-    public static final UnicodeBlock MISCELLANEOUS_TECHNICAL = new UnicodeBlock (\"Miscellaneous Technical\", '\\u2300', '\\u23FF');\n-    public static final UnicodeBlock CONTROL_PICTURES = new UnicodeBlock (\"Control Pictures\", '\\u2400', '\\u243F');\n-    public static final UnicodeBlock OPTICAL_CHARACTER_RECOGNITION = new UnicodeBlock (\"Optical Character Recognition\", '\\u2440', '\\u245F');\n-    public static final UnicodeBlock ENCLOSED_ALPHANUMERICS = new UnicodeBlock (\"Enclosed Alphanumerics\", '\\u2460', '\\u24FF');\n-    public static final UnicodeBlock BOX_DRAWING = new UnicodeBlock (\"Box Drawing\", '\\u2500', '\\u257F');\n-    public static final UnicodeBlock BLOCK_ELEMENTS = new UnicodeBlock (\"Block Elements\", '\\u2580', '\\u259F');\n-    public static final UnicodeBlock GEOMETRIC_SHAPES = new UnicodeBlock (\"Geometric Shapes\", '\\u25A0', '\\u25FF');\n-    public static final UnicodeBlock MISCELLANEOUS_SYMBOLS = new UnicodeBlock (\"Miscellaneous Symbols\", '\\u2600', '\\u26FF');\n-    public static final UnicodeBlock DINGBATS = new UnicodeBlock (\"Dingbats\", '\\u2700', '\\u27BF');\n-    public static final UnicodeBlock BRAILLE_PATTERNS = new UnicodeBlock (\"Braille Patterns\", '\\u2800', '\\u28FF');\n-    public static final UnicodeBlock CJK_RADICALS_SUPPLEMENT = new UnicodeBlock (\"CJK Radicals Supplement\", '\\u2E80', '\\u2EFF');\n-    public static final UnicodeBlock KANGXI_RADICALS = new UnicodeBlock (\"Kangxi Radicals\", '\\u2F00', '\\u2FDF');\n-    public static final UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS = new UnicodeBlock (\"Ideographic Description Characters\", '\\u2FF0', '\\u2FFF');\n-    public static final UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION = new UnicodeBlock (\"CJK Symbols and Punctuation\", '\\u3000', '\\u303F');\n-    public static final UnicodeBlock HIRAGANA = new UnicodeBlock (\"Hiragana\", '\\u3040', '\\u309F');\n-    public static final UnicodeBlock KATAKANA = new UnicodeBlock (\"Katakana\", '\\u30A0', '\\u30FF');\n-    public static final UnicodeBlock BOPOMOFO = new UnicodeBlock (\"Bopomofo\", '\\u3100', '\\u312F');\n-    public static final UnicodeBlock HANGUL_COMPATIBILITY_JAMO = new UnicodeBlock (\"Hangul Compatibility Jamo\", '\\u3130', '\\u318F');\n-    public static final UnicodeBlock KANBUN = new UnicodeBlock (\"Kanbun\", '\\u3190', '\\u319F');\n-    public static final UnicodeBlock BOPOMOFO_EXTENDED = new UnicodeBlock (\"Bopomofo Extended\", '\\u31A0', '\\u31BF');\n-    public static final UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS = new UnicodeBlock (\"Enclosed CJK Letters and Months\", '\\u3200', '\\u32FF');\n-    public static final UnicodeBlock CJK_COMPATIBILITY = new UnicodeBlock (\"CJK Compatibility\", '\\u3300', '\\u33FF');\n-    public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = new UnicodeBlock (\"CJK Unified Ideographs Extension A\", '\\u3400', '\\u4DB5');\n-    public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS = new UnicodeBlock (\"CJK Unified Ideographs\", '\\u4E00', '\\u9FFF');\n-    public static final UnicodeBlock YI_SYLLABLES = new UnicodeBlock (\"Yi Syllables\", '\\uA000', '\\uA48F');\n-    public static final UnicodeBlock YI_RADICALS = new UnicodeBlock (\"Yi Radicals\", '\\uA490', '\\uA4CF');\n-    public static final UnicodeBlock HANGUL_SYLLABLES = new UnicodeBlock (\"Hangul Syllables\", '\\uAC00', '\\uD7A3');\n-    public static final UnicodeBlock SURROGATES_AREA = new UnicodeBlock (\"Surrogates Area\", '\\uD800', '\\uDFFF');\n-    public static final UnicodeBlock PRIVATE_USE_AREA = new UnicodeBlock (\"Private Use Area\", '\\uE000', '\\uF8FF');\n-    public static final UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS = new UnicodeBlock (\"CJK Compatibility Ideographs\", '\\uF900', '\\uFAFF');\n-    public static final UnicodeBlock ALPHABETIC_PRESENTATION_FORMS = new UnicodeBlock (\"Alphabetic Presentation Forms\", '\\uFB00', '\\uFB4F');\n-    public static final UnicodeBlock ARABIC_PRESENTATION_FORMS_A = new UnicodeBlock (\"Arabic Presentation Forms-A\", '\\uFB50', '\\uFDFF');\n-    public static final UnicodeBlock COMBINING_HALF_MARKS = new UnicodeBlock (\"Combining Half Marks\", '\\uFE20', '\\uFE2F');\n-    public static final UnicodeBlock CJK_COMPATIBILITY_FORMS = new UnicodeBlock (\"CJK Compatibility Forms\", '\\uFE30', '\\uFE4F');\n-    public static final UnicodeBlock SMALL_FORM_VARIANTS = new UnicodeBlock (\"Small Form Variants\", '\\uFE50', '\\uFE6F');\n-    public static final UnicodeBlock ARABIC_PRESENTATION_FORMS_B = new UnicodeBlock (\"Arabic Presentation Forms-B\", '\\uFE70', '\\uFEFE');\n-    public static final UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS = new UnicodeBlock (\"Halfwidth and Fullwidth Forms\", '\\uFF00', '\\uFFEF');\n-    public static final UnicodeBlock SPECIALS = new UnicodeBlock (\"Specials\", '\\uFFF0', '\\uFFFD');\n-    private static final UnicodeBlock[] blocks = {\n+    /**\n+     * Enclosed Alphanumerics.\n+     * '\\u2460' - '\\u24FF'.\n+     */\n+    public final static UnicodeBlock ENCLOSED_ALPHANUMERICS\n+      = new UnicodeBlock('\\u2460', '\\u24FF',\n+                         \"ENCLOSED_ALPHANUMERICS\");\n+\n+    /**\n+     * Box Drawing.\n+     * '\\u2500' - '\\u257F'.\n+     */\n+    public final static UnicodeBlock BOX_DRAWING\n+      = new UnicodeBlock('\\u2500', '\\u257F',\n+                         \"BOX_DRAWING\");\n+\n+    /**\n+     * Block Elements.\n+     * '\\u2580' - '\\u259F'.\n+     */\n+    public final static UnicodeBlock BLOCK_ELEMENTS\n+      = new UnicodeBlock('\\u2580', '\\u259F',\n+                         \"BLOCK_ELEMENTS\");\n+\n+    /**\n+     * Geometric Shapes.\n+     * '\\u25A0' - '\\u25FF'.\n+     */\n+    public final static UnicodeBlock GEOMETRIC_SHAPES\n+      = new UnicodeBlock('\\u25A0', '\\u25FF',\n+                         \"GEOMETRIC_SHAPES\");\n+\n+    /**\n+     * Miscellaneous Symbols.\n+     * '\\u2600' - '\\u26FF'.\n+     */\n+    public final static UnicodeBlock MISCELLANEOUS_SYMBOLS\n+      = new UnicodeBlock('\\u2600', '\\u26FF',\n+                         \"MISCELLANEOUS_SYMBOLS\");\n+\n+    /**\n+     * Dingbats.\n+     * '\\u2700' - '\\u27BF'.\n+     */\n+    public final static UnicodeBlock DINGBATS\n+      = new UnicodeBlock('\\u2700', '\\u27BF',\n+                         \"DINGBATS\");\n+\n+    /**\n+     * Braille Patterns.\n+     * '\\u2800' - '\\u28FF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock BRAILLE_PATTERNS\n+      = new UnicodeBlock('\\u2800', '\\u28FF',\n+                         \"BRAILLE_PATTERNS\");\n+\n+    /**\n+     * CJK Radicals Supplement.\n+     * '\\u2E80' - '\\u2EFF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock CJK_RADICALS_SUPPLEMENT\n+      = new UnicodeBlock('\\u2E80', '\\u2EFF',\n+                         \"CJK_RADICALS_SUPPLEMENT\");\n+\n+    /**\n+     * Kangxi Radicals.\n+     * '\\u2F00' - '\\u2FDF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock KANGXI_RADICALS\n+      = new UnicodeBlock('\\u2F00', '\\u2FDF',\n+                         \"KANGXI_RADICALS\");\n+\n+    /**\n+     * Ideographic Description Characters.\n+     * '\\u2FF0' - '\\u2FFF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS\n+      = new UnicodeBlock('\\u2FF0', '\\u2FFF',\n+                         \"IDEOGRAPHIC_DESCRIPTION_CHARACTERS\");\n+\n+    /**\n+     * CJK Symbols and Punctuation.\n+     * '\\u3000' - '\\u303F'.\n+     */\n+    public final static UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION\n+      = new UnicodeBlock('\\u3000', '\\u303F',\n+                         \"CJK_SYMBOLS_AND_PUNCTUATION\");\n+\n+    /**\n+     * Hiragana.\n+     * '\\u3040' - '\\u309F'.\n+     */\n+    public final static UnicodeBlock HIRAGANA\n+      = new UnicodeBlock('\\u3040', '\\u309F',\n+                         \"HIRAGANA\");\n+\n+    /**\n+     * Katakana.\n+     * '\\u30A0' - '\\u30FF'.\n+     */\n+    public final static UnicodeBlock KATAKANA\n+      = new UnicodeBlock('\\u30A0', '\\u30FF',\n+                         \"KATAKANA\");\n+\n+    /**\n+     * Bopomofo.\n+     * '\\u3100' - '\\u312F'.\n+     */\n+    public final static UnicodeBlock BOPOMOFO\n+      = new UnicodeBlock('\\u3100', '\\u312F',\n+                         \"BOPOMOFO\");\n+\n+    /**\n+     * Hangul Compatibility Jamo.\n+     * '\\u3130' - '\\u318F'.\n+     */\n+    public final static UnicodeBlock HANGUL_COMPATIBILITY_JAMO\n+      = new UnicodeBlock('\\u3130', '\\u318F',\n+                         \"HANGUL_COMPATIBILITY_JAMO\");\n+\n+    /**\n+     * Kanbun.\n+     * '\\u3190' - '\\u319F'.\n+     */\n+    public final static UnicodeBlock KANBUN\n+      = new UnicodeBlock('\\u3190', '\\u319F',\n+                         \"KANBUN\");\n+\n+    /**\n+     * Bopomofo Extended.\n+     * '\\u31A0' - '\\u31BF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock BOPOMOFO_EXTENDED\n+      = new UnicodeBlock('\\u31A0', '\\u31BF',\n+                         \"BOPOMOFO_EXTENDED\");\n+\n+    /**\n+     * Enclosed CJK Letters and Months.\n+     * '\\u3200' - '\\u32FF'.\n+     */\n+    public final static UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS\n+      = new UnicodeBlock('\\u3200', '\\u32FF',\n+                         \"ENCLOSED_CJK_LETTERS_AND_MONTHS\");\n+\n+    /**\n+     * CJK Compatibility.\n+     * '\\u3300' - '\\u33FF'.\n+     */\n+    public final static UnicodeBlock CJK_COMPATIBILITY\n+      = new UnicodeBlock('\\u3300', '\\u33FF',\n+                         \"CJK_COMPATIBILITY\");\n+\n+    /**\n+     * CJK Unified Ideographs Extension A.\n+     * '\\u3400' - '\\u4DB5'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\n+      = new UnicodeBlock('\\u3400', '\\u4DB5',\n+                         \"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\");\n+\n+    /**\n+     * CJK Unified Ideographs.\n+     * '\\u4E00' - '\\u9FFF'.\n+     */\n+    public final static UnicodeBlock CJK_UNIFIED_IDEOGRAPHS\n+      = new UnicodeBlock('\\u4E00', '\\u9FFF',\n+                         \"CJK_UNIFIED_IDEOGRAPHS\");\n+\n+    /**\n+     * Yi Syllables.\n+     * '\\uA000' - '\\uA48F'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock YI_SYLLABLES\n+      = new UnicodeBlock('\\uA000', '\\uA48F',\n+                         \"YI_SYLLABLES\");\n+\n+    /**\n+     * Yi Radicals.\n+     * '\\uA490' - '\\uA4CF'.\n+     * @since 1.4\n+     */\n+    public final static UnicodeBlock YI_RADICALS\n+      = new UnicodeBlock('\\uA490', '\\uA4CF',\n+                         \"YI_RADICALS\");\n+\n+    /**\n+     * Hangul Syllables.\n+     * '\\uAC00' - '\\uD7A3'.\n+     */\n+    public final static UnicodeBlock HANGUL_SYLLABLES\n+      = new UnicodeBlock('\\uAC00', '\\uD7A3',\n+                         \"HANGUL_SYLLABLES\");\n+\n+    /**\n+     * Surrogates Area.\n+     * '\\uD800' - '\\uDFFF'.\n+     */\n+    public final static UnicodeBlock SURROGATES_AREA\n+      = new UnicodeBlock('\\uD800', '\\uDFFF',\n+                         \"SURROGATES_AREA\");\n+\n+    /**\n+     * Private Use Area.\n+     * '\\uE000' - '\\uF8FF'.\n+     */\n+    public final static UnicodeBlock PRIVATE_USE_AREA\n+      = new UnicodeBlock('\\uE000', '\\uF8FF',\n+                         \"PRIVATE_USE_AREA\");\n+\n+    /**\n+     * CJK Compatibility Ideographs.\n+     * '\\uF900' - '\\uFAFF'.\n+     */\n+    public final static UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS\n+      = new UnicodeBlock('\\uF900', '\\uFAFF',\n+                         \"CJK_COMPATIBILITY_IDEOGRAPHS\");\n+\n+    /**\n+     * Alphabetic Presentation Forms.\n+     * '\\uFB00' - '\\uFB4F'.\n+     */\n+    public final static UnicodeBlock ALPHABETIC_PRESENTATION_FORMS\n+      = new UnicodeBlock('\\uFB00', '\\uFB4F',\n+                         \"ALPHABETIC_PRESENTATION_FORMS\");\n+\n+    /**\n+     * Arabic Presentation Forms-A.\n+     * '\\uFB50' - '\\uFDFF'.\n+     */\n+    public final static UnicodeBlock ARABIC_PRESENTATION_FORMS_A\n+      = new UnicodeBlock('\\uFB50', '\\uFDFF',\n+                         \"ARABIC_PRESENTATION_FORMS_A\");\n+\n+    /**\n+     * Combining Half Marks.\n+     * '\\uFE20' - '\\uFE2F'.\n+     */\n+    public final static UnicodeBlock COMBINING_HALF_MARKS\n+      = new UnicodeBlock('\\uFE20', '\\uFE2F',\n+                         \"COMBINING_HALF_MARKS\");\n+\n+    /**\n+     * CJK Compatibility Forms.\n+     * '\\uFE30' - '\\uFE4F'.\n+     */\n+    public final static UnicodeBlock CJK_COMPATIBILITY_FORMS\n+      = new UnicodeBlock('\\uFE30', '\\uFE4F',\n+                         \"CJK_COMPATIBILITY_FORMS\");\n+\n+    /**\n+     * Small Form Variants.\n+     * '\\uFE50' - '\\uFE6F'.\n+     */\n+    public final static UnicodeBlock SMALL_FORM_VARIANTS\n+      = new UnicodeBlock('\\uFE50', '\\uFE6F',\n+                         \"SMALL_FORM_VARIANTS\");\n+\n+    /**\n+     * Arabic Presentation Forms-B.\n+     * '\\uFE70' - '\\uFEFE'.\n+     */\n+    public final static UnicodeBlock ARABIC_PRESENTATION_FORMS_B\n+      = new UnicodeBlock('\\uFE70', '\\uFEFE',\n+                         \"ARABIC_PRESENTATION_FORMS_B\");\n+\n+    /**\n+     * Halfwidth and Fullwidth Forms.\n+     * '\\uFF00' - '\\uFFEF'.\n+     */\n+    public final static UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS\n+      = new UnicodeBlock('\\uFF00', '\\uFFEF',\n+                         \"HALFWIDTH_AND_FULLWIDTH_FORMS\");\n+\n+    /**\n+     * Specials.\n+     * '\\uFEFF', '\\uFFF0' - '\\uFFFD'.\n+     */\n+    public final static UnicodeBlock SPECIALS\n+      = new UnicodeBlock('\\uFFF0', '\\uFFFD',\n+                         \"SPECIALS\");\n+\n+    /**\n+     * The defined subsets.\n+     */\n+    private static final UnicodeBlock sets[] = {\n       BASIC_LATIN,\n       LATIN_1_SUPPLEMENT,\n       LATIN_EXTENDED_A,\n@@ -445,7 +912,7 @@ else if (c > ub.end)\n       ARMENIAN,\n       HEBREW,\n       ARABIC,\n-      SYRIAC__,\n+      SYRIAC,\n       THAANA,\n       DEVANAGARI,\n       BENGALI,\n@@ -460,7 +927,7 @@ else if (c > ub.end)\n       THAI,\n       LAO,\n       TIBETAN,\n-      MYANMAR_,\n+      MYANMAR,\n       GEORGIAN,\n       HANGUL_JAMO,\n       ETHIOPIC,\n@@ -517,7 +984,1180 @@ else if (c > ub.end)\n       SMALL_FORM_VARIANTS,\n       ARABIC_PRESENTATION_FORMS_B,\n       HALFWIDTH_AND_FULLWIDTH_FORMS,\n-      SPECIALS\n+      SPECIALS,\n     };\n+  } // class UnicodeBlock\n+\n+  /**\n+   * The immutable value of this Character.\n+   *\n+   * @serial the value of this Character\n+   */\n+  private final char value;\n+\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 3786198910865385080L;\n+\n+  /**\n+   * Smallest value allowed for radix arguments in Java. This value is 2.\n+   *\n+   * @see #digit(char, int)\n+   * @see #forDigit(int, int)\n+   * @see Integer#toString(int, int)\n+   * @see Integer#valueOf(String)\n+   */\n+  public static final int MIN_RADIX = 2;\n+\n+  /**\n+   * Largest value allowed for radix arguments in Java. This value is 36.\n+   *\n+   * @see #digit(char, int)\n+   * @see #forDigit(int, int)\n+   * @see Integer#toString(int, int)\n+   * @see Integer#valueOf(String)\n+   */\n+  public static final int MAX_RADIX = 36;\n+\n+  /**\n+   * The minimum value the char data type can hold.\n+   * This value is <code>'\\\\u0000'</code>.\n+   */\n+  public static final char MIN_VALUE = '\\u0000';\n+\n+  /**\n+   * The maximum value the char data type can hold.\n+   * This value is <code>'\\\\uFFFF'</code>.\n+   */\n+  public static final char MAX_VALUE = '\\uFFFF';\n+\n+  /**\n+   * Class object representing the primitive char data type.\n+   *\n+   * @since 1.1\n+   */\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('C');\n+\n+  /**\n+   * Lu = Letter, Uppercase (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte UPPERCASE_LETTER = 1;\n+\n+  /**\n+   * Ll = Letter, Lowercase (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte LOWERCASE_LETTER = 2;\n+\n+  /**\n+   * Lt = Letter, Titlecase (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte TITLECASE_LETTER = 3;\n+\n+  /**\n+   * Mn = Mark, Non-Spacing (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte NON_SPACING_MARK = 6;\n+\n+  /**\n+   * Mc = Mark, Spacing Combining (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte COMBINING_SPACING_MARK = 8;\n+\n+  /**\n+   * Me = Mark, Enclosing (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte ENCLOSING_MARK = 7;\n+\n+  /**\n+   * Nd = Number, Decimal Digit (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte DECIMAL_DIGIT_NUMBER = 9;\n+\n+  /**\n+   * Nl = Number, Letter (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte LETTER_NUMBER = 10;\n+\n+  /**\n+   * No = Number, Other (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte OTHER_NUMBER = 11;\n+\n+  /**\n+   * Zs = Separator, Space (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte SPACE_SEPARATOR = 12;\n+\n+  /**\n+   * Zl = Separator, Line (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte LINE_SEPARATOR = 13;\n+\n+  /**\n+   * Zp = Separator, Paragraph (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte PARAGRAPH_SEPARATOR = 14;\n+\n+  /**\n+   * Cc = Other, Control (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte CONTROL = 15;\n+\n+  /**\n+   * Cf = Other, Format (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte FORMAT = 16;\n+\n+  /**\n+   * Cs = Other, Surrogate (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte SURROGATE = 19;\n+\n+  /**\n+   * Co = Other, Private Use (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte PRIVATE_USE = 18;\n+\n+  /**\n+   * Cn = Other, Not Assigned (Normative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte UNASSIGNED = 0;\n+\n+  /**\n+   * Lm = Letter, Modifier (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte MODIFIER_LETTER = 4;\n+\n+  /**\n+   * Lo = Letter, Other (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte OTHER_LETTER = 5;\n+\n+  /**\n+   * Pc = Punctuation, Connector (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte CONNECTOR_PUNCTUATION = 23;\n+\n+  /**\n+   * Pd = Punctuation, Dash (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte DASH_PUNCTUATION = 20;\n+\n+  /**\n+   * Ps = Punctuation, Open (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte START_PUNCTUATION = 21;\n+\n+  /**\n+   * Pe = Punctuation, Close (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte END_PUNCTUATION = 22;\n+\n+  /**\n+   * Pi = Punctuation, Initial Quote (Informative).\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte INITIAL_QUOTE_PUNCTUATION = 29;\n+\n+  /**\n+   * Pf = Punctuation, Final Quote (Informative).\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte FINAL_QUOTE_PUNCTUATION = 30;\n+\n+  /**\n+   * Po = Punctuation, Other (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte OTHER_PUNCTUATION = 24;\n+\n+  /**\n+   * Sm = Symbol, Math (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte MATH_SYMBOL = 25;\n+\n+  /**\n+   * Sc = Symbol, Currency (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte CURRENCY_SYMBOL = 26;\n+\n+  /**\n+   * Sk = Symbol, Modifier (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte MODIFIER_SYMBOL = 27;\n+\n+  /**\n+   * So = Symbol, Other (Informative).\n+   *\n+   * @since 1.1\n+   */\n+  public static final byte OTHER_SYMBOL = 28;\n+\n+  /**\n+   * Undefined bidirectional character type. Undefined char values have\n+   * undefined directionality in the Unicode specification.\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_UNDEFINED = -1;\n+\n+  /**\n+   * Strong bidirectional character type \"L\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT = 0;\n+\n+  /**\n+   * Strong bidirectional character type \"R\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT = 1;\n+\n+  /**\n+   * Strong bidirectional character type \"AL\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = 2;\n+\n+  /**\n+   * Weak bidirectional character type \"EN\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER = 3;\n+\n+  /**\n+   * Weak bidirectional character type \"ES\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = 4;\n+\n+  /**\n+   * Weak bidirectional character type \"ET\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = 5;\n+\n+  /**\n+   * Weak bidirectional character type \"AN\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_ARABIC_NUMBER = 6;\n+\n+  /**\n+   * Weak bidirectional character type \"CS\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = 7;\n+\n+  /**\n+   * Weak bidirectional character type \"NSM\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_NONSPACING_MARK = 8;\n+\n+  /**\n+   * Weak bidirectional character type \"BN\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL = 9;\n+\n+  /**\n+   * Neutral bidirectional character type \"B\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR = 10;\n+\n+  /**\n+   * Neutral bidirectional character type \"S\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR = 11;\n+\n+  /**\n+   * Strong bidirectional character type \"WS\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_WHITESPACE = 12;\n+\n+  /**\n+   * Neutral bidirectional character type \"ON\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_OTHER_NEUTRALS = 13;\n+\n+  /**\n+   * Strong bidirectional character type \"LRE\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = 14;\n+\n+  /**\n+   * Strong bidirectional character type \"LRO\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = 15;\n+\n+  /**\n+   * Strong bidirectional character type \"RLE\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = 16;\n+\n+  /**\n+   * Strong bidirectional character type \"RLO\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = 17;\n+\n+  /**\n+   * Weak bidirectional character type \"PDF\".\n+   *\n+   * @since 1.4\n+   */\n+  public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = 18;\n+\n+  /**\n+   * Mask for grabbing the type out of the result of readChar.\n+   * @see #readChar(char)\n+   */\n+  private static final int TYPE_MASK = 0x1F;\n+\n+  /**\n+   * Mask for grabbing the non-breaking space flag out of the result of\n+   * readChar.\n+   * @see #readChar(char)\n+   */\n+  private static final int NO_BREAK_MASK = 0x20;\n+\n+  /**\n+   * Mask for grabbing the mirrored directionality flag out of the result\n+   * of readChar.\n+   * @see #readChar(char)\n+   */\n+  private static final int MIRROR_MASK = 0x40;\n+\n+  /**\n+   * Grabs an attribute offset from the Unicode attribute database. The lower\n+   * 5 bits are the character type, the next 2 bits are flags, and the top\n+   * 9 bits are the offset into the attribute tables. Note that the top 9\n+   * bits are meaningless in this context; they are useful only in the native\n+   * code.\n+   *\n+   * @param ch the character to look up\n+   * @return the character's attribute offset and type\n+   * @see #TYPE_MASK\n+   * @see #NO_BREAK_MASK\n+   * @see #MIRROR_MASK\n+   */\n+  private static native char readChar(char ch);\n+\n+  /**\n+   * Wraps up a character.\n+   *\n+   * @param value the character to wrap\n+   */\n+  public Character(char value)\n+  {\n+    this.value = value;\n+  }\n+\n+  /**\n+   * Returns the character which has been wrapped by this class.\n+   *\n+   * @return the character wrapped\n+   */\n+  public char charValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns the numerical value (unsigned) of the wrapped character.\n+   * Range of returned values: 0x0000-0xFFFF.\n+   *\n+   * @return the value of the wrapped character\n+   */\n+  public int hashCode()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Determines if an object is equal to this object. This is only true for\n+   * another Character object wrapping the same value.\n+   *\n+   * @param o object to compare\n+   * @return true if o is a Character with the same value\n+   */\n+  public boolean equals(Object o)\n+  {\n+    return o instanceof Character && value == ((Character) o).value;\n+  }\n+\n+  /**\n+   * Converts the wrapped character into a String.\n+   *\n+   * @return a String containing one character -- the wrapped character\n+   *         of this instance\n+   */\n+  public String toString()\n+  {\n+    // This assumes that String.valueOf(char) can create a single-character\n+    // String more efficiently than through the public API.\n+    return String.valueOf(value);\n+  }\n+\n+  /**\n+   * Returns a String of length 1 representing the specified character.\n+   *\n+   * @param ch the character to convert\n+   * @return a String containing the character\n+   * @since 1.4\n+   */\n+  public String toString(char ch)\n+  {\n+    // This assumes that String.valueOf(char) can create a single-character\n+    // String more efficiently than through the public API.\n+    return String.valueOf(ch);\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode lowercase letter. For example,\n+   * <code>'a'</code> is lowercase.\n+   * <br>\n+   * lowercase = [Ll]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode lowercase letter, else false\n+   * @see #isUpperCase(char)\n+   * @see #isTitleCase(char)\n+   * @see #toLowerCase(char)\n+   * @see #getType(char)\n+   */\n+  public static boolean isLowerCase(char ch)\n+  {\n+    return getType(ch) == LOWERCASE_LETTER;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode uppercase letter. For example,\n+   * <code>'A'</code> is uppercase.\n+   * <br>\n+   * uppercase = [Lu]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode uppercase letter, else false\n+   * @see #isLowerCase(char)\n+   * @see #isTitleCase(char)\n+   * @see #toUpperCase(char)\n+   * @see #getType(char)\n+   */\n+  public static boolean isUpperCase(char ch)\n+  {\n+    return getType(ch) == UPPERCASE_LETTER;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode titlecase letter. For example,\n+   * the character \"Lj\" (Latin capital L with small letter j) is titlecase.\n+   * <br>\n+   * titlecase = [Lt]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode titlecase letter, else false\n+   * @see #isLowerCase(char)\n+   * @see #isUpperCase(char)\n+   * @see #toTitleCase(char)\n+   * @see #getType(char)\n+   */\n+  public static boolean isTitleCase(char ch)\n+  {\n+    return getType(ch) == TITLECASE_LETTER;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode decimal digit. For example,\n+   * <code>'0'</code> is a digit.\n+   * <br>\n+   * Unicode decimal digit = [Nd]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode decimal digit, else false\n+   * @see #digit(char, int)\n+   * @see #forDigit(int, int)\n+   * @see #getType(char)\n+   */\n+  public static boolean isDigit(char ch)\n+  {\n+    return getType(ch) == DECIMAL_DIGIT_NUMBER;\n+  }\n+\n+  /**\n+   * Determines if a character is part of the Unicode Standard. This is an\n+   * evolving standard, but covers every character in the data file.\n+   * <br>\n+   * defined = not [Cn]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode character, else false\n+   * @see #isDigit(char)\n+   * @see #isLetter(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isLowerCase(char)\n+   * @see #isTitleCase(char)\n+   * @see #isUpperCase(char)\n+   */\n+  public static boolean isDefined(char ch)\n+  {\n+    return getType(ch) == UNASSIGNED;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode letter. Not all letters have case,\n+   * so this may return true when isLowerCase and isUpperCase return false.\n+   * <br>\n+   * letter = [Lu]|[Ll]|[Lt]|[Lm]|[Lo]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode letter, else false\n+   * @see #isDigit(char)\n+   * @see #isJavaIdentifierStart(char)\n+   * @see #isJavaLetter(char)\n+   * @see #isJavaLetterOrDigit(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isLowerCase(char)\n+   * @see #isTitleCase(char)\n+   * @see #isUnicodeIdentifierStart(char)\n+   * @see #isUpperCase(char)\n+   */\n+  public static boolean isLetter(char ch)\n+  {\n+    return ((1 << getType(ch))\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode letter or a Unicode digit. This\n+   * is the combination of isLetter and isDigit.\n+   * <br>\n+   * letter or digit = [Lu]|[Ll]|[Lt]|[Lm]|[Lo]|[Nd]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode letter or a Unicode digit, else false\n+   * @see #isDigit(char)\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isJavaLetter(char)\n+   * @see #isJavaLetterOrDigit(char)\n+   * @see #isLetter(char)\n+   * @see #isUnicodeIdentifierPart(char)\n+   */\n+  public static boolean isLetterOrDigit(char ch)\n+  {\n+    return ((1 << getType(ch))\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER)\n+               | (1 << DECIMAL_DIGIT_NUMBER))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character can start a Java identifier. This is the\n+   * combination of isLetter, any character where getType returns\n+   * LETTER_NUMBER, currency symbols (like '$'), and connecting punctuation\n+   * (like '_').\n+   *\n+   * @param ch character to test\n+   * @return true if ch can start a Java identifier, else false\n+   * @deprecated Replaced by {@link #isJavaIdentifierStart(char)}\n+   * @see #isJavaLetterOrDigit(char)\n+   * @see #isJavaIdentifierStart(char)\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isLetter(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isUnicodeIdentifierStart(char)\n+   */\n+  public static boolean isJavaLetter(char ch)\n+  {\n+    return isJavaIdentifierStart(ch);\n+  }\n+\n+  /**\n+   * Determines if a character can follow the first letter in\n+   * a Java identifier.  This is the combination of isJavaLetter (isLetter,\n+   * type of LETTER_NUMBER, currency, connecting punctuation) and digit,\n+   * numeric letter (like Roman numerals), combining marks, non-spacing marks,\n+   * or isIdentifierIgnorable.\n+   *\n+   * @param ch character to test\n+   * @return true if ch can follow the first letter in a Java identifier\n+   * @deprecated Replaced by {@link #isJavaIdentifierPart(char)}\n+   * @see #isJavaLetter(char)\n+   * @see #isJavaIdentifierStart(char)\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isLetter(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isUnicodeIdentifierPart(char)\n+   * @see #isIdentifierIgnorable(char)\n+   */\n+  public static boolean isJavaLetterOrDigit(char ch)\n+  {\n+    return isJavaIdentifierPart(ch);\n+  }\n+\n+  /**\n+   * Determines if a character can start a Java identifier. This is the\n+   * combination of isLetter, any character where getType returns\n+   * LETTER_NUMBER, currency symbols (like '$'), and connecting punctuation\n+   * (like '_').\n+   * <br>\n+   * Java identifier start = [Lu]|[Ll]|[Lt]|[Lm]|[Lo]|[Nl]|[Sc]|[Pc]\n+   *\n+   * @param ch character to test\n+   * @return true if ch can start a Java identifier, else false\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isLetter(char)\n+   * @see #isUnicodeIdentifierStart(char)\n+   * @since 1.1\n+   */\n+  public static boolean isJavaIdentifierStart(char ch)\n+  {\n+    return ((1 << getType(ch))\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER)\n+               | (1 << LETTER_NUMBER)\n+               | (1 << CURRENCY_SYMBOL)\n+               | (1 << CONNECTOR_PUNCTUATION))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character can follow the first letter in\n+   * a Java identifier.  This is the combination of isJavaLetter (isLetter,\n+   * type of LETTER_NUMBER, currency, connecting punctuation) and digit,\n+   * numeric letter (like Roman numerals), combining marks, non-spacing marks,\n+   * or isIdentifierIgnorable.\n+   * <br>\n+   * Java identifier extender =\n+   *   [Lu]|[Ll]|[Lt]|[Lm]|[Lo]|[Nl]|[Sc]|[Pc]|[Mn]|[Mc]|[Nd]|[Cf]\n+   *   |U+0000-U+0008|U+000E-U+001B|U+007F-U+009F\n+   *\n+   * @param ch character to test\n+   * @return true if ch can follow the first letter in a Java identifier\n+   * @see #isIdentifierIgnorable(char)\n+   * @see #isJavaIdentifierStart(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isUnicodeIdentifierPart(char)\n+   * @since 1.1\n+   */\n+  public static boolean isJavaIdentifierPart(char ch)\n+  {\n+    int category = getType(ch);\n+    return ((1 << category)\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER)\n+               | (1 << NON_SPACING_MARK)\n+               | (1 << COMBINING_SPACING_MARK)\n+               | (1 << DECIMAL_DIGIT_NUMBER)\n+               | (1 << LETTER_NUMBER)\n+               | (1 << CURRENCY_SYMBOL)\n+               | (1 << CONNECTOR_PUNCTUATION)\n+               | (1 << FORMAT))) != 0\n+      || (category == CONTROL && isIdentifierIgnorable(ch));\n+  }\n+\n+  /**\n+   * Determines if a character can start a Unicode identifier.  Only\n+   * letters can start a Unicode identifier, but this includes characters\n+   * in LETTER_NUMBER.\n+   * <br>\n+   * Unicode identifier start = [Lu]|[Ll]|[Lt]|[Lm]|[Lo]|[Nl]\n+   *\n+   * @param ch character to test\n+   * @return true if ch can start a Unicode identifier, else false\n+   * @see #isJavaIdentifierStart(char)\n+   * @see #isLetter(char)\n+   * @see #isUnicodeIdentifierPart(char)\n+   * @since 1.1\n+   */\n+  public static boolean isUnicodeIdentifierStart(char ch)\n+  {\n+    return ((1 << getType(ch))\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER)\n+               | (1 << LETTER_NUMBER))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character can follow the first letter in\n+   * a Unicode identifier. This includes letters, connecting punctuation,\n+   * digits, numeric letters, combining marks, non-spacing marks, and\n+   * isIdentifierIgnorable.\n+   * <br>\n+   * Unicode identifier extender =\n+   *   [Lu]|[Ll]|[Lt]|[Lm]|[Lo]|[Nl]|[Mn]|[Mc]|[Nd]|[Pc]|[Cf]|\n+   *   |U+0000-U+0008|U+000E-U+001B|U+007F-U+009F\n+   *\n+   * @param ch character to test\n+   * @return true if ch can follow the first letter in a Unicode identifier\n+   * @see #isIdentifierIgnorable(char)\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isLetterOrDigit(char)\n+   * @see #isUnicodeIdentifierStart(char)\n+   * @since 1.1\n+   */\n+  public static boolean isUnicodeIdentifierPart(char ch)\n+  {\n+    int category = getType(ch);\n+    return ((1 << category)\n+            & ((1 << UPPERCASE_LETTER)\n+               | (1 << LOWERCASE_LETTER)\n+               | (1 << TITLECASE_LETTER)\n+               | (1 << MODIFIER_LETTER)\n+               | (1 << OTHER_LETTER)\n+               | (1 << NON_SPACING_MARK)\n+               | (1 << COMBINING_SPACING_MARK)\n+               | (1 << DECIMAL_DIGIT_NUMBER)\n+               | (1 << LETTER_NUMBER)\n+               | (1 << CONNECTOR_PUNCTUATION)\n+               | (1 << FORMAT))) != 0\n+      || (category == CONTROL && isIdentifierIgnorable(ch));\n+  }\n+\n+  /**\n+   * Determines if a character is ignorable in a Unicode identifier. This\n+   * includes the non-whitespace ISO control characters (<code>'\\u0000'</code>\n+   * through <code>'\\u0008'</code>, <code>'\\u000E'</code> through\n+   * <code>'\\u001B'</code>, and <code>'\\u007F'</code> through\n+   * <code>'\\u009F'</code>), and FORMAT characters.\n+   * <br>\n+   * Unicode identifier ignorable = [Cf]|U+0000-U+0008|U+000E-U+001B\n+   *    |U+007F-U+009F\n+   *\n+   * @param ch character to test\n+   * @return true if ch is ignorable in a Unicode or Java identifier\n+   * @see #isJavaIdentifierPart(char)\n+   * @see #isUnicodeIdentifierPart(char)\n+   * @since 1.1\n+   */\n+  public static boolean isIdentifierIgnorable(char ch)\n+  {\n+    return (ch <= '\\u009F' && (ch < '\\t' || ch >= '\\u007F'\n+                               || (ch <= '\\u001B' && ch >= '\\u000E')))\n+      || getType(ch) == FORMAT;\n+  }\n+\n+  /**\n+   * Converts a Unicode character into its lowercase equivalent mapping.\n+   * If a mapping does not exist, then the character passed is returned.\n+   * Note that isLowerCase(toLowerCase(ch)) does not always return true.\n+   *\n+   * @param ch character to convert to lowercase\n+   * @return lowercase mapping of ch, or ch if lowercase mapping does\n+   *         not exist\n+   * @see #isLowerCase(char)\n+   * @see #isUpperCase(char)\n+   * @see #toTitleCase(char)\n+   * @see #toUpperCase(char)\n+   */\n+  public static native char toLowerCase(char ch);\n+\n+  /**\n+   * Converts a Unicode character into its uppercase equivalent mapping.\n+   * If a mapping does not exist, then the character passed is returned.\n+   * Note that isUpperCase(toUpperCase(ch)) does not always return true.\n+   *\n+   * @param ch character to convert to uppercase\n+   * @return uppercase mapping of ch, or ch if uppercase mapping does\n+   *         not exist\n+   * @see #isLowerCase(char)\n+   * @see #isUpperCase(char)\n+   * @see #toLowerCase(char)\n+   * @see #toTitleCase(char)\n+   */\n+  public static native char toUpperCase(char ch);\n+\n+  /**\n+   * Converts a Unicode character into its titlecase equivalent mapping.\n+   * If a mapping does not exist, then the character passed is returned.\n+   * Note that isTitleCase(toTitleCase(ch)) does not always return true.\n+   *\n+   * @param ch character to convert to titlecase\n+   * @return titlecase mapping of ch, or ch if titlecase mapping does\n+   *         not exist\n+   * @see #isTitleCase(char)\n+   * @see #toLowerCase(char)\n+   * @see #toUpperCase(char)\n+   */\n+  public static native char toTitleCase(char ch);\n+\n+  /**\n+   * Converts a character into a digit of the specified radix. If the radix\n+   * exceeds MIN_RADIX or MAX_RADIX, or if the result of getNumericValue(ch)\n+   * exceeds the radix, or if ch is not a decimal digit or in the case\n+   * insensitive set of 'a'-'z', the result is -1.\n+   * <br>\n+   * character argument boundary = [Nd]|U+0041-U+005A|U+0061-U+007A\n+   *    |U+FF21-U+FF3A|U+FF41-U+FF5A\n+   *\n+   * @param ch character to convert into a digit\n+   * @param radix radix in which ch is a digit\n+   * @return digit which ch represents in radix, or -1 not a valid digit\n+   * @see #MIN_RADIX\n+   * @see #MAX_RADIX\n+   * @see #forDigit(int, int)\n+   * @see #isDigit(char)\n+   * @see #getNumericValue(char)\n+   */\n+  public static native int digit(char ch, int radix);\n+\n+  /**\n+   * Returns the Unicode numeric value property of a character. For example,\n+   * <code>'\\\\u216C'</code> (the Roman numeral fifty) returns 50.\n+   *\n+   * <p>This method also returns values for the letters A through Z, (not\n+   * specified by Unicode), in these ranges: <code>'\\u0041'</code>\n+   * through <code>'\\u005A'</code> (uppercase); <code>'\\u0061'</code>\n+   * through <code>'\\u007A'</code> (lowercase); and <code>'\\uFF21'</code>\n+   * through <code>'\\uFF3A'</code>, <code>'\\uFF41'</code> through\n+   * <code>'\\uFF5A'</code> (full width variants).\n+   *\n+   * <p>If the character lacks a numeric value property, -1 is returned.\n+   * If the character has a numeric value property which is not representable\n+   * as a nonnegative integer, such as a fraction, -2 is returned.\n+   *\n+   * character argument boundary = [Nd]|[Nl]|[No]|U+0041-U+005A|U+0061-U+007A\n+   *    |U+FF21-U+FF3A|U+FF41-U+FF5A\n+   *\n+   * @param ch character from which the numeric value property will\n+   *        be retrieved\n+   * @return the numeric value property of ch, or -1 if it does not exist, or\n+   *         -2 if it is not representable as a nonnegative integer\n+   * @see #forDigit(int, int)\n+   * @see #digit(char, int)\n+   * @see #isDigit(char)\n+   * @since 1.1\n+   */\n+  public static native int getNumericValue(char ch);\n+\n+  /**\n+   * Determines if a character is a ISO-LATIN-1 space. This is only the five\n+   * characters <code>'\\t'</code>, <code>'\\n'</code>, <code>'\\f'</code>,\n+   * <code>'\\r'</code>, and <code>' '</code>.\n+   * <br>\n+   * Java space = U+0020|U+0009|U+000A|U+000C|U+000D\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a space, else false\n+   * @deprecated Replaced by {@link #isWhitespace(char)}\n+   * @see #isSpaceChar(char)\n+   * @see #isWhitespace(char)\n+   */\n+  public static boolean isSpace(char ch)\n+  {\n+    // Performing the subtraction up front alleviates need to compare longs.\n+    return ch-- <= ' ' && ((1 << ch)\n+                           & ((1 << (' ' - 1))\n+                              | (1 << ('\\t' - 1))\n+                              | (1 << ('\\n' - 1))\n+                              | (1 << ('\\r' - 1))\n+                              | (1 << ('\\f' - 1)))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character is a Unicode space character. This includes\n+   * SPACE_SEPARATOR, LINE_SEPARATOR, and PARAGRAPH_SEPARATOR.\n+   * <br>\n+   * Unicode space = [Zs]|[Zp]|[Zl]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is a Unicode space, else false\n+   * @see #isWhitespace(char)\n+   * @since 1.1\n+   */\n+  public static boolean isSpaceChar(char ch)\n+  {\n+    return ((1 << getType(ch))\n+            & ((1 << SPACE_SEPARATOR)\n+               | (1 << LINE_SEPARATOR)\n+               | (1 << PARAGRAPH_SEPARATOR))) != 0;\n+  }\n+\n+  /**\n+   * Determines if a character is Java whitespace. This includes Unicode\n+   * space characters (SPACE_SEPARATOR, LINE_SEPARATOR, and\n+   * PARAGRAPH_SEPARATOR) except the non-breaking spaces\n+   * (<code>'\\u00A0'</code>, <code>'\\u2007'</code>, and <code>'\\u202F'</code>);\n+   * and these characters: <code>'\\u0009'</code>, <code>'\\u000A'</code>,\n+   * <code>'\\u000B'</code>, <code>'\\u000C'</code>, <code>'\\u000D'</code>,\n+   * <code>'\\u001C'</code>, <code>'\\u001D'</code>, <code>'\\u001E'</code>,\n+   * and <code>'\\u001F'</code>.\n+   * <br>\n+   * Java whitespace = ([Zs] not Nb)|[Zl]|[Zp]|U+0009-U+000D|U+001C-U+001F\n+   *\n+   * @param ch character to test\n+   * @return true if ch is Java whitespace, else false\n+   * @see #isSpaceChar(char)\n+   * @since 1.1\n+   */\n+  public static boolean isWhitespace(char ch)\n+  {\n+    int attr = readChar(ch);\n+    return ((((1 << (attr & TYPE_MASK))\n+              & ((1 << SPACE_SEPARATOR)\n+                 | (1 << LINE_SEPARATOR)\n+                 | (1 << PARAGRAPH_SEPARATOR))) != 0)\n+            && (attr & NO_BREAK_MASK) == 0)\n+      || (ch <= '\\u001F' && ((1 << ch)\n+                             & ((1 << '\\t')\n+                                | (1 << '\\n')\n+                                | (1 << '\\u000B')\n+                                | (1 << '\\u000C')\n+                                | (1 << '\\r')\n+                                | (1 << '\\u001C')\n+                                | (1 << '\\u001D')\n+                                | (1 << '\\u001E')\n+                                | (1 << '\\u001F'))) != 0);\n+  }\n+\n+  /**\n+   * Determines if a character has the ISO Control property.\n+   * <br>\n+   * ISO Control = [Cc]\n+   *\n+   * @param ch character to test\n+   * @return true if ch is an ISO Control character, else false\n+   * @see #isSpaceChar(char)\n+   * @see #isWhitespace(char)\n+   * @since 1.1\n+   */\n+  public static boolean isISOControl(char ch)\n+  {\n+    return getType(ch) == CONTROL;\n+  }\n+\n+  /**\n+   * Returns the Unicode general category property of a character.\n+   *\n+   * @param ch character from which the general category property will\n+   *        be retrieved\n+   * @return the character category property of ch as an integer\n+   * @see #UNASSIGNED\n+   * @see #UPPERCASE_LETTER\n+   * @see #LOWERCASE_LETTER\n+   * @see #TITLECASE_LETTER\n+   * @see #MODIFIER_LETTER\n+   * @see #OTHER_LETTER\n+   * @see #NON_SPACING_MARK\n+   * @see #ENCLOSING_MARK\n+   * @see #COMBINING_SPACING_MARK\n+   * @see #DECIMAL_DIGIT_NUMBER\n+   * @see #LETTER_NUMBER\n+   * @see #OTHER_NUMBER\n+   * @see #SPACE_SEPARATOR\n+   * @see #LINE_SEPARATOR\n+   * @see #PARAGRAPH_SEPARATOR\n+   * @see #CONTROL\n+   * @see #FORMAT\n+   * @see #PRIVATE_USE\n+   * @see #SURROGATE\n+   * @see #DASH_PUNCTUATION\n+   * @see #START_PUNCTUATION\n+   * @see #END_PUNCTUATION\n+   * @see #CONNECTOR_PUNCTUATION\n+   * @see #OTHER_PUNCTUATION\n+   * @see #MATH_SYMBOL\n+   * @see #CURRENCY_SYMBOL\n+   * @see #MODIFIER_SYMBOL\n+   * @see #INITIAL_QUOTE_PUNCTUATION\n+   * @see #FINAL_QUOTE_PUNCTUATION\n+   * @since 1.1\n+   */\n+  public static native int getType(char ch);\n+\n+  /**\n+   * Converts a digit into a character which represents that digit\n+   * in a specified radix. If the radix exceeds MIN_RADIX or MAX_RADIX,\n+   * or the digit exceeds the radix, then the null character <code>'\\0'</code>\n+   * is returned.  Otherwise the return value is in '0'-'9' and 'a'-'z'.\n+   * <br>\n+   * return value boundary = U+0030-U+0039|U+0061-U+007A\n+   *\n+   * @param digit digit to be converted into a character\n+   * @param radix radix of digit\n+   * @return character representing digit in radix, or '\\0'\n+   * @see #MIN_RADIX\n+   * @see #MAX_RADIX\n+   * @see #digit(char, int)\n+   */\n+  public static char forDigit(int digit, int radix)\n+  {\n+    if (radix < MIN_RADIX || radix > MAX_RADIX ||\n+        digit < 0 || digit >= radix)\n+      return '\\0';\n+    return (char) (digit < 10 ? ('0' + digit) : ('a' - 10 + digit));\n+  }\n+\n+  /**\n+   * Returns the Unicode directionality property of the character. This\n+   * is used in the visual ordering of text.\n+   *\n+   * @param ch the character to look up\n+   * @return the directionality constant, or DIRECTIONALITY_UNDEFINED\n+   * @see #DIRECTIONALITY_UNDEFINED\n+   * @see #DIRECTIONALITY_LEFT_TO_RIGHT\n+   * @see #DIRECTIONALITY_RIGHT_TO_LEFT\n+   * @see #DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\n+   * @see #DIRECTIONALITY_EUROPEAN_NUMBER\n+   * @see #DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\n+   * @see #DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\n+   * @see #DIRECTIONALITY_ARABIC_NUMBER\n+   * @see #DIRECTIONALITY_COMMON_NUMBER_SEPARATOR\n+   * @see #DIRECTIONALITY_NONSPACING_MARK\n+   * @see #DIRECTIONALITY_BOUNDARY_NEUTRAL\n+   * @see #DIRECTIONALITY_PARAGRAPH_SEPARATOR\n+   * @see #DIRECTIONALITY_SEGMENT_SEPARATOR\n+   * @see #DIRECTIONALITY_WHITESPACE\n+   * @see #DIRECTIONALITY_OTHER_NEUTRALS\n+   * @see #DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\n+   * @see #DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\n+   * @see #DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\n+   * @see #DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\n+   * @see #DIRECTIONALITY_POP_DIRECTIONAL_FORMAT\n+   * @since 1.4\n+   */\n+  public static native byte getDirectionality(char ch);\n+\n+  /**\n+   * Determines whether the character is mirrored according to Unicode. For\n+   * example, <code>\\u0028</code> (LEFT PARENTHESIS) appears as '(' in\n+   * left-to-right text, but ')' in right-to-left text.\n+   *\n+   * @param ch the character to look up\n+   * @return true if the character is mirrored\n+   * @since 1.4\n+   */\n+  public static boolean isMirrored(char ch)\n+  {\n+    return (readChar(ch) & MIRROR_MASK) != 0;\n+  }\n+\n+  /**\n+   * Compares another Character to this Character, numerically.\n+   *\n+   * @param anotherCharacter Character to compare with this Character\n+   * @return a negative integer if this Character is less than\n+   *         anotherCharacter, zero if this Character is equal, and\n+   *         a positive integer if this Character is greater\n+   * @throws NullPointerException if anotherCharacter is null\n+   * @since 1.2\n+   */\n+  public int compareTo(Character anotherCharacter)\n+  {\n+    return value - anotherCharacter.value;\n+  }\n+\n+  /**\n+   * Compares an object to this Character.  Assuming the object is a\n+   * Character object, this method performs the same comparison as\n+   * compareTo(Character).\n+   *\n+   * @param o object to compare\n+   * @return the comparison value\n+   * @throws ClassCastException if o is not a Character object\n+   * @throws NullPointerException if o is null\n+   * @see #compareTo(Character)\n+   * @since 1.2\n+   */\n+  public int compareTo(Object o)\n+  {\n+    return compareTo((Character) o);\n   }\n-}\n+} // class Character"}, {"sha": "911253b24596890b81a66eecd658c124a0a563de", "filename": "libjava/java/lang/natCharacter.cc", "status": "modified", "additions": 74, "deletions": 245, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fjava%2Flang%2FnatCharacter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fjava%2Flang%2FnatCharacter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatCharacter.cc?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -1,12 +1,39 @@\n-// natCharacter.cc - Native part of Character class.\n-\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+/* java.lang.Character -- Wrapper class for char, and Unicode subsets\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n #include <config.h>\n \n@@ -18,267 +45,69 @@ details.  */\n \n \f\n \n-#define asize(x)  ((sizeof (x)) / sizeof (x[0]))\n-\n-static jchar\n-to_lower_title (jchar ch)\n-{\n-  for (unsigned int i = 0; i < asize (title_to_upper_table); ++i)\n-    {\n-      // We can assume that the entries in the two tables are\n-      // parallel.  This is checked in the script.\n-      if (title_to_upper_table[i][1] == ch\n-\t  || title_to_upper_table[i][0] == ch)\n-\treturn title_to_lower_table[i][1];\n-    }\n-  return ch;\n-}\n-\n-static jchar\n-to_upper_title (jchar ch)\n-{\n-  for (unsigned int i = 0; i < asize (title_to_lower_table); ++i)\n-    {\n-      // We can assume that the entries in the two tables are\n-      // parallel.  This is checked in the script.\n-      if (title_to_lower_table[i][1] == ch\n-\t  || title_to_lower_table[i][0] == ch)\n-\treturn title_to_upper_table[i][1];\n-    }\n-  return ch;\n-}\n-\n-jboolean\n-java::lang::Character::isTitleCase (jchar ch)\n-{\n-  for (unsigned int i = 0; i < asize (title_to_lower_table); ++i)\n-    {\n-      if (title_to_lower_table[i][0] == ch)\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n jchar\n-java::lang::Character::toTitleCase (jchar ch)\n+java::lang::Character::readChar(jchar ch)\n {\n-  // Both titlecase mapping tables have the same length.  This is\n-  // checked in the chartables script.\n-  for (unsigned int i = 0; i < asize (title_to_lower_table); ++i)\n-    {\n-      if (title_to_lower_table[i][0] == ch)\n-\treturn ch;\n-      if (title_to_lower_table[i][1] == ch)\n-\treturn title_to_lower_table[i][0];\n-      if (title_to_upper_table[i][1] == ch)\n-\treturn title_to_upper_table[i][0];\n-    }\n-  return toUpperCase (ch);\n-}\n-\n-#ifdef COMPACT_CHARACTER\n-\n-static int\n-table_search (const jchar table[][2], int table_len, jchar ch)\n-{\n-  int low, high, i, old;\n-\n-  low = 0;\n-  high = table_len;\n-  i = high / 2;\n-\n-  while (true)\n-    {\n-      if (ch < table[i][0])\n-\thigh = i;\n-      else if (ch > table[i][1])\n-\tlow = i;\n-      else\n-\treturn i;\n-\n-      old = i;\n-      i = (high + low) / 2;\n-      if (i == old)\n-\tbreak;\n-    }\n-\n-  return -1;\n-}\n-\n-jint\n-java::lang::Character::digit_value (jchar ch)\n-{\n-  int index = table_search (digit_table, asize (digit_table), ch);\n-  if (index == -1)\n-    return -1;\n-\n-  jchar base = digit_table[index][0];\n-  // Tamil doesn't have a digit `0'.  So we special-case it here.\n-  if (base == TAMIL_DIGIT_ONE)\n-    return ch - base + 1;\n-  return ch - base;\n-}\n-\n-jint\n-java::lang::Character::getNumericValue (jchar ch)\n-{\n-  jint d = digit (ch, 36);\n-  if (d != -1)\n-    return d;\n-\n-  for (unsigned int i = 0; i < asize (numeric_table); ++i)\n-    {\n-      if (numeric_table[i] == ch)\n-\treturn numeric_value[i];\n-    }\n-\n-  return -1;\n+  // Perform 16-bit addition to find the correct entry in data.\n+  return data[(jchar) (blocks[ch >> SHIFT] + ch)];\n }\n \n jint\n-java::lang::Character::getType (jchar ch)\n+java::lang::Character::getType(jchar ch)\n {\n-  int index = table_search (all_table, asize (all_table), ch);\n-  if (index != -1)\n-    return category_table[index];\n-  return UNASSIGNED;\n-}\n-\n-jboolean\n-java::lang::Character::isLowerCase (jchar ch)\n-{\n-  if (ch >= 0x2000 && ch <= 0x2fff)\n-    return false;\n-  if (table_search (lower_case_table, asize (lower_case_table), ch) != -1)\n-    return true;\n-\n-  int low, high, i, old;\n-\n-  low = 0;\n-  high = asize (lower_anomalous_table);\n-  i = high / 2;\n-\n-  while (true)\n-    {\n-      if (ch < lower_anomalous_table[i])\n-\thigh = i;\n-      else if (ch > lower_anomalous_table[i])\n-\tlow = i;\n-      else\n-\treturn true;\n-\n-      old = i;\n-      i = (high + low) / 2;\n-      if (i == old)\n-\tbreak;\n-    }\n-\n-  return false;\n-}\n-\n-jboolean\n-java::lang::Character::isSpaceChar (jchar ch)\n-{\n-  return table_search (space_table, asize (space_table), ch) != -1;\n-}\n-\n-jboolean\n-java::lang::Character::isUpperCase (jchar ch)\n-{\n-  if (ch >= 0x2000 && ch <= 0x2fff)\n-    return false;\n-  return table_search (upper_case_table, asize (upper_case_table), ch) != -1;\n+  // Perform 16-bit addition to find the correct entry in data.\n+  return (jint) (data[(jchar) (blocks[ch >> SHIFT] + ch)] & TYPE_MASK);\n }\n \n jchar\n-java::lang::Character::toLowerCase (jchar ch)\n+java::lang::Character::toLowerCase(jchar ch)\n {\n-  int index = table_search (upper_case_table, asize (upper_case_table), ch);\n-  if (index == -1)\n-    return to_lower_title (ch);\n-  return (jchar) (ch - upper_case_table[index][0]\n-\t\t  + upper_case_map_table[index]);\n+  return (jchar) (ch + lower[readChar(ch) >> 7]);\n }\n \n jchar\n-java::lang::Character::toUpperCase (jchar ch)\n+java::lang::Character::toUpperCase(jchar ch)\n {\n-  int index = table_search (lower_case_table, asize (lower_case_table), ch);\n-  if (index == -1)\n-    return to_upper_title (ch);\n-  return (jchar) (ch - lower_case_table[index][0]\n-\t\t  + lower_case_map_table[index]);\n+  return (jchar) (ch + upper[readChar(ch) >> 7]);\n }\n \n-#else /* COMPACT_CHARACTER */\n-\n-jint\n-java::lang::Character::digit_value (jchar ch)\n+jchar\n+java::lang::Character::toTitleCase(jchar ch)\n {\n-  if (type_table[ch] == DECIMAL_DIGIT_NUMBER)\n-    return attribute_table[ch];\n-  return -1;\n+  // As title is short, it doesn't hurt to exhaustively iterate over it.\n+  for (int i = title_length - 2; i >= 0; i -= 2)\n+    if (title[i] == ch)\n+      return title[i + 1];\n+  return toUpperCase(ch);\n }\n \n jint\n-java::lang::Character::getNumericValue (jchar ch)\n-{\n-  jint d = digit (ch, 36);\n-  if (d != -1)\n-    return d;\n-\n-  // Some characters require two attributes.  We special-case them here.\n-  if (ch >= ROMAN_START && ch <= ROMAN_END)\n-    return secondary_attribute_table[ch - ROMAN_START];\n-  if (type_table[ch] == LETTER_NUMBER || type_table[ch] == OTHER_NUMBER)\n-    return attribute_table[ch];\n-  return -1;\n+java::lang::Character::digit(jchar ch, jint radix)\n+{\n+  if (radix < MIN_RADIX || radix > MAX_RADIX)\n+    return (jint) -1;\n+  jchar attr = readChar(ch);\n+  if (((1 << (attr & TYPE_MASK))\n+       & ((1 << UPPERCASE_LETTER)\n+          | (1 << LOWERCASE_LETTER)\n+          | (1 << DECIMAL_DIGIT_NUMBER))))\n+    {\n+      // Signedness doesn't matter; 0xffff vs. -1 are both rejected.\n+      jint digit = (jint) numValue[attr >> 7];\n+      return (digit >= 0 && digit < radix) ? digit : (jint) -1;\n+    }\n+  return (jint) -1;\n }\n \n jint\n-java::lang::Character::getType (jchar ch)\n-{\n-  return type_table[ch];\n-}\n-\n-jboolean\n-java::lang::Character::isLowerCase (jchar ch)\n-{\n-  if (ch >= 0x2000 && ch <= 0x2fff)\n-    return false;\n-  return type_table[ch] == LOWERCASE_LETTER;\n-}\n-\n-jboolean\n-java::lang::Character::isSpaceChar (jchar ch)\n-{\n-  return (type_table[ch] == SPACE_SEPARATOR\n-\t  || type_table[ch] == LINE_SEPARATOR\n-\t  || type_table[ch] == PARAGRAPH_SEPARATOR);\n-}\n-\n-jboolean\n-java::lang::Character::isUpperCase (jchar ch)\n-{\n-  if (ch >= 0x2000 && ch <= 0x2fff)\n-    return false;\n-  return type_table[ch] == UPPERCASE_LETTER;\n-}\n-\n-jchar\n-java::lang::Character::toLowerCase (jchar ch)\n+java::lang::Character::getNumericValue(jchar ch)\n {\n-  if (type_table[ch] == UPPERCASE_LETTER)\n-    return attribute_table[ch];\n-  return to_lower_title (ch);\n+  // numValue is stored as an array of jshort, since 10000 is the maximum.\n+  return (jint) numValue[readChar(ch) >> 7];\n }\n \n-jchar\n-java::lang::Character::toUpperCase (jchar ch)\n+jbyte\n+java::lang::Character::getDirectionality(jchar ch)\n {\n-  if (type_table[ch] == LOWERCASE_LETTER)\n-    return attribute_table[ch];\n-  return to_upper_title (ch);\n+  return direction[readChar(ch) >> 7];\n }\n-\n-#endif /* COMPACT_CHARACTER */"}, {"sha": "d69a00db6bd299be16573bae4eacc7886c19d997", "filename": "libjava/scripts/MakeCharTables.java", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2FMakeCharTables.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2FMakeCharTables.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2FMakeCharTables.java?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,212 @@\n+/* MakeCharTables.java - converts gnu.java.lang.CharData into\n+                         include/java-chartables.h\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+import gnu.java.lang.CharData;\n+\n+public class MakeCharTables implements CharData\n+{\n+  public static void main(String[] args)\n+  {\n+    System.out.println(\"/* java-chartables.h -- Character tables for java.lang.Character -*- c++ -*-\\n\"\n+                       + \"   Copyright (C) 2002 Free Software Foundation, Inc.\\n\"\n+                       + \"   *** This file is generated by scripts/MakeCharTables.java ***\\n\"\n+                       + \"\\n\"\n+                       + \"This file is part of GNU Classpath.\\n\"\n+                       + \"\\n\"\n+                       + \"GNU Classpath is free software; you can redistribute it and/or modify\\n\"\n+                       + \"it under the terms of the GNU General Public License as published by\\n\"\n+                       + \"the Free Software Foundation; either version 2, or (at your option)\\n\"\n+                       + \"any later version.\\n\"\n+                       + \"\\n\"\n+                       + \"GNU Classpath is distributed in the hope that it will be useful, but\\n\"\n+                       + \"WITHOUT ANY WARRANTY; without even the implied warranty of\\n\"\n+                       + \"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n\"\n+                       + \"General Public License for more details.\\n\"\n+                       + \"\\n\"\n+                       + \"You should have received a copy of the GNU General Public License\\n\"\n+                       + \"along with GNU Classpath; see the file COPYING.  If not, write to the\\n\"\n+                       + \"Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\\n\"\n+                       + \"02111-1307 USA.\\n\"\n+                       + \"\\n\"\n+                       + \"Linking this library statically or dynamically with other modules is\\n\"\n+                       + \"making a combined work based on this library.  Thus, the terms and\\n\"\n+                       + \"conditions of the GNU General Public License cover the whole\\n\"\n+                       + \"combination.\\n\"\n+                       + \"\\n\"\n+                       + \"As a special exception, the copyright holders of this library give you\\n\"\n+                       + \"permission to link this library with independent modules to produce an\\n\"\n+                       + \"executable, regardless of the license terms of these independent\\n\"\n+                       + \"modules, and to copy and distribute the resulting executable under\\n\"\n+                       + \"terms of your choice, provided that you also meet, for each linked\\n\"\n+                       + \"independent module, the terms and conditions of the license of that\\n\"\n+                       + \"module.  An independent module is a module which is not derived from\\n\"\n+                       + \"or based on this library.  If you modify this library, you may extend\\n\"\n+                       + \"this exception to your version of the library, but you are not\\n\"\n+                       + \"obligated to do so.  If you do not wish to do so, delete this\\n\"\n+                       + \"exception statement from your version. */\\n\"\n+                       + \"\\n\"\n+                       + \"#ifndef __JAVA_CHARTABLES_H__\\n\"\n+                       + \"#define __JAVA_CHARTABLES_H__\\n\"\n+                       + \"\\n\"\n+                       + \"// These tables are automatically generated by scripts/MakeCharTables.java.\\n\"\n+                       + \"// This is in turn parsing gnu.java.lang.CharData, which is generated by\\n\"\n+                       + \"// scripts/unicode-muncher.pl.  The Unicode data comes from\\n\"\n+                       + \"// www.unicode.org; this header is based on\\n\"\n+                       + \"// \" + SOURCE + \". JDK 1.4 uses Unicode version 3.0.0.\\n\"\n+                       + \"// DO NOT EDIT the tables.  Instead, fix the upstream scripts and run\\n\"\n+                       + \"// them again.\\n\"\n+                       + \"\\n\"\n+                       + \"// The data is stored in C style arrays of the appropriate CNI types, to\\n\"\n+                       + \"// guarantee that the data is constant and non-relocatable.  The field\\n\"\n+                       + \"// <code>blocks</code> stores the offset of a block of 2<supSHIFT</sup>\\n\"\n+                       + \"// characters within <code>data</code>. The data field, in turn, stores\\n\"\n+                       + \"// information about each character in the low order bits, and an offset\\n\"\n+                       + \"// into the attribute tables <code>upper</code>, <code>lower</code>,\\n\"\n+                       + \"// <code>numValue</code>, and <code>direction</code>.  Notice that the\\n\"\n+                       + \"// attribute tables are much smaller than 0xffff entries; as many characters\\n\"\n+                       + \"// in Unicode share common attributes.  Finally, there is a listing for\\n\"\n+                       + \"// <code>title</code> exceptions (most characters just have the same title\\n\"\n+                       + \"// case as upper case).\\n\"\n+                       + \"\\n\"\n+                       + \"// This file should only be included by natCharacter.cc\\n\"\n+                       + \"\\n\"\n+                       + \"/**\\n\"\n+                       + \" * The character shift amount to look up the block offset. In other words,\\n\"\n+                       + \" * <code>(char) (blocks[ch >> SHIFT] + ch)</code> is the index where\\n\"\n+                       + \" * <code>ch</code> is described in <code>data</code>.\\n\"\n+                       + \" */\\n\"\n+                       + \"#define SHIFT \" + SHIFT);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * The mapping of character blocks to their location in <code>data</code>.\\n\"\n+                  + \" * Each entry has been adjusted so that a modulo 16 sum with the desired\\n\"\n+                  + \" * character gives the actual index into <code>data</code>.\\n\"\n+                  + \" */\",\n+                  char.class, \"blocks\", BLOCKS);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * Information about each character.  The low order 5 bits form the\\n\"\n+                  + \" * character type, the next bit is a flag for non-breaking spaces, and the\\n\"\n+                  + \" * next bit is a flag for mirrored directionality.  The high order 9 bits\\n\"\n+                  + \" * form the offset into the attribute tables.  Note that this limits the\\n\"\n+                  + \" * number of unique character attributes to 512, which is not a problem\\n\"\n+                  + \" * as of Unicode version 3.2.0, but may soon become one.\\n\"\n+                  + \" */\",\n+                  char.class, \"data\", DATA);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * This is the attribute table for computing the numeric value of a\\n\"\n+                  + \" * character.  The value is -1 if Unicode does not define a value, -2\\n\"\n+                  + \" * if the value is not a positive integer, otherwise it is the value.\\n\"\n+                  + \" */\",\n+                  short.class, \"numValue\", NUM_VALUE);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * This is the attribute table for computing the uppercase representation\\n\"\n+                  + \" * of a character.  The value is the difference between the character and\\n\"\n+                  + \" * its uppercase version.\\n\"\n+                  + \" */\",\n+                  short.class, \"upper\", UPPER);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * This is the attribute table for computing the lowercase representation\\n\"\n+                  + \" * of a character.  The value is the difference between the character and\\n\"\n+                  + \" * its lowercase version.\\n\"\n+                  + \" */\",\n+                  short.class, \"lower\", LOWER);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * This is the attribute table for computing the directionality class\\n\"\n+                  + \" * of a character.  At present, the value is in the range 0 - 18 if the\\n\"\n+                  + \" * character has a direction, otherwise it is -1.\\n\"\n+                  + \" */\",\n+                  byte.class, \"direction\", DIRECTION);\n+\n+    convertString(\"/**\\n\"\n+                  + \" * This is the listing of titlecase special cases (all other character\\n\"\n+                  + \" * can use <code>upper</code> to determine their titlecase).  The listing\\n\"\n+                  + \" * is a sequence of character pairs; converting the first character of the\\n\"\n+                  + \" * pair to titlecase produces the second character.\\n\"\n+                  + \" */\",\n+                  char.class, \"title\", TITLE);\n+\n+    System.out.println();\n+    System.out.println(\"#endif /* __JAVA_CHARTABLES_H__ */\");\n+  }\n+\n+  private static void convertString(String header, Class type,\n+                                    String name, String field)\n+  {\n+    System.out.println();\n+    System.out.println(header);\n+    System.out.println(\"static const j\" + type.getName() + \" \" + name\n+                       + \"[] = {\");\n+    char[] data = field.toCharArray();\n+    int wrap;\n+    if (type == char.class)\n+      wrap = 10;\n+    else if (type == byte.class)\n+      wrap = 21;\n+    else if (type == short.class)\n+      wrap = 13;\n+    else\n+      throw new Error(\"Unexpeced type\");\n+    for (int i = 0; i < data.length; i += wrap)\n+      {\n+        System.out.print(\"   \");\n+        for (int j = 0; j < wrap; j++)\n+          {\n+            if (i + j >= data.length)\n+              break;\n+            System.out.print(\" \");\n+            if (type == char.class)\n+              System.out.print((int) data[i + j]);\n+            else if (type == byte.class)\n+              System.out.print((byte) data[i + j]);\n+            else if (type == short.class)\n+              System.out.print((short) data[i + j]);\n+            System.out.print(\",\");\n+          }\n+        System.out.println();\n+      }\n+    System.out.println(\"  };\\n\"\n+                       + \"/** Length of \" + name + \". */\\n\"\n+                       + \"static const int \" + name + \"_length = \"\n+                       + data.length + \";\");\n+  }\n+}"}, {"sha": "9142a49f87a302439598e9d34a80566d0eccdb6d", "filename": "libjava/scripts/blocks.pl", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87e4a4c6f15f89994f99205995f1664ae0b9950/libjava%2Fscripts%2Fblocks.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87e4a4c6f15f89994f99205995f1664ae0b9950/libjava%2Fscripts%2Fblocks.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fblocks.pl?ref=b87e4a4c6f15f89994f99205995f1664ae0b9950", "patch": "@@ -1,65 +0,0 @@\n-#! /usr/bin/perl\n-\n-if ($ARGV[0] eq '')\n-{\n-    $file = 'Blocks.txt';\n-    if (! -f $file)\n-    {\n-\t# Too painful to figure out how to get Perl to do it.\n-\tsystem 'wget -o .wget-log http://www.unicode.org/Public/UNIDATA/Blocks.txt';\n-    }\n-}\n-else\n-{\n-    $file = $ARGV[0];\n-}\n-\n-open (INPUT, \"< $file\") || die \"couldn't open $file: $!\";\n-\n-@array = ();\n-while (<INPUT>)\n-{\n-    next if /^#/;\n-    chop;\n-    next if /^$/;\n-\n-    ($start, $to, $text) = split (/; /);\n-    ($symbol = $text) =~ tr/a-z/A-Z/;\n-    $symbol =~ s/[- ]/_/g;\n-\n-    # Special case for one of the SPECIALS.\n-    next if $start eq 'FEFF';\n-\n-    # Special case some areas that our heuristic mishandles.\n-    if ($symbol eq 'HIGH_SURROGATES')\n-    {\n-\t$symbol = 'SURROGATES_AREA';\n-\t$text = 'Surrogates Area';\n-\t$to = 'DFFF';\n-    }\n-    elsif ($symbol =~ /SURROGATES/)\n-    {\n-\tnext;\n-    }\n-    elsif ($symbol eq 'PRIVATE_USE')\n-    {\n-\t$symbol .= '_AREA';\n-\t$text = 'Private Use Area';\n-    }\n-\n-    printf \"    public static final UnicodeBlock %s = new UnicodeBlock (\\\"%s\\\", '\\\\u%s', '\\\\u%s');\\n\",\n-           $symbol, $text, $start, $to;\n-\n-    push (@array, $symbol);\n-}\n-\n-printf \"    private static final UnicodeBlock[] blocks = {\\n\";\n-foreach (@array)\n-{\n-    printf \"      %s\", $_;\n-    printf \",\" unless $_ eq 'SPECIALS';\n-    printf \"\\n\";\n-}\n-printf \"    };\\n\";\n-\n-close (INPUT);"}, {"sha": "22e58ec5d521d117e5458cb53e8c02a3421b7e7e", "filename": "libjava/scripts/unicode-blocks.pl", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-blocks.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-blocks.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Funicode-blocks.pl?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,210 @@\n+#!/usr/bin/perl -w\n+# unicode-blocks.pl -- Script to generate java.lang.Character.UnicodeBlock\n+# Copyright (C) 2002 Free Software Foundation, Inc.\n+#\n+# This file is part of GNU Classpath.\n+#\n+# GNU Classpath is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU Classpath is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU Classpath; see the file COPYING.  If not, write to the\n+# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+# 02111-1307 USA.\n+#\n+# Linking this library statically or dynamically with other modules is\n+# making a combined work based on this library.  Thus, the terms and\n+# conditions of the GNU General Public License cover the whole\n+# combination.\n+#\n+# As a special exception, the copyright holders of this library give you\n+# permission to link this library with independent modules to produce an\n+# executable, regardless of the license terms of these independent\n+# modules, and to copy and distribute the resulting executable under\n+# terms of your choice, provided that you also meet, for each linked\n+# independent module, the terms and conditions of the license of that\n+# module.  An independent module is a module which is not derived from\n+# or based on this library.  If you modify this library, you may extend\n+# this exception to your version of the library, but you are not\n+# obligated to do so.  If you do not wish to do so, delete this\n+# exception statement from your version.\n+\n+\n+# Code for reading Blocks.txt and generating (to standard out) the code for\n+# java.lang.Character.UnicodeBlock, for pasting into java/lang/Character.java.\n+# You should probably check that the results are accurate to the\n+# specification, but I made sure it works OOB for Unicode 3.0.0 and JDK 1.4.\n+# As the grammar for the Blocks.txt file is changing in Unicode 3.2.0, you\n+# will have to tweak this some for future use.  For now, the relevant\n+# Unicode definition files are found in libjava/gnu/gcj/convert/.\n+#\n+# author Eric Blake <ebb9@email.byu.edu>\n+#\n+# usage: unicode-blocks.pl <blocks.txt>\n+#    where <blocks.txt> is obtained from www.unicode.org (named Blocks-3.txt\n+#    for Unicode version 3.0.0).\n+\n+\n+die \"Usage: $0 <blocks.txt>\" unless @ARGV == 1;\n+open (BLOCKS, $ARGV[0]) || die \"Can't open Unicode block file: $!\\n\";\n+\n+# A hash of added fields and the JDK they were added in, to automatically\n+# print @since tags.  Maintaining this is optional (and tedious), but nice.\n+my %additions = (\"SYRIAC\" => \"1.4\",\n+                 \"THAANA\" => \"1.4\",\n+                 \"SINHALA\" => \"1.4\",\n+                 \"MYANMAR\" => \"1.4\",\n+                 \"ETHIOPIC\" => \"1.4\",\n+                 \"CHEROKEE\" => \"1.4\",\n+                 \"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\" => \"1.4\",\n+                 \"OGHAM\" => \"1.4\",\n+                 \"RUNIC\" => \"1.4\",\n+                 \"KHMER\" => \"1.4\",\n+                 \"MONGOLIAN\" => \"1.4\",\n+                 \"BRAILLE_PATTERNS\" => \"1.4\",\n+                 \"CJK_RADICALS_SUPPLEMENT\" => \"1.4\",\n+                 \"KANGXI_RADICALS\" => \"1.4\",\n+                 \"IDEOGRAPHIC_DESCRIPTION_CHARACTERS\" => \"1.4\",\n+                 \"BOPOMOFO_EXTENDED\" => \"1.4\",\n+                 \"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\" => \"1.4\",\n+                 \"YI_SYLLABLES\" => \"1.4\",\n+                 \"YI_RADICALS\" => \"1.4\",\n+                 );\n+\n+print <<'EOF';\n+  /**\n+   * A family of character subsets in the Unicode specification. A character\n+   * is in at most one of these blocks.\n+   *\n+   * This inner class was generated automatically from\n+   * <code>$ARGV[0]</code>, by some perl scripts.\n+   * This Unicode definition file can be found on the\n+   * <a href=\"http://www.unicode.org\">http://www.unicode.org</a> website.\n+   * JDK 1.4 uses Unicode version 3.0.0.\n+   *\n+   * @author scripts/unicode-blocks.pl (written by Eric Blake)\n+   * @since 1.2\n+   */\n+  public static final class UnicodeBlock extends Subset\n+  {\n+    /** The start of the subset. */\n+    private final char start;\n+\n+    /** The end of the subset. */\n+    private final char end;\n+\n+    /**\n+     * Constructor for strictly defined blocks.\n+     *\n+     * @param start the start character of the range\n+     * @param end the end character of the range\n+     * @param name the block name\n+     */\n+    private UnicodeBlock(char start, char end, String name)\n+    {\n+      super(name);\n+      this.start = start;\n+      this.end = end;\n+    }\n+\n+    /**\n+     * Returns the Unicode character block which a character belongs to.\n+     *\n+     * @param ch the character to look up\n+     * @return the set it belongs to, or null if it is not in one\n+     */\n+    public static UnicodeBlock of(char ch)\n+    {\n+      // Special case, since SPECIALS contains two ranges.\n+      if (ch == '\\uFEFF')\n+        return SPECIALS;\n+      // Simple binary search for the correct block.\n+      int low = 0;\n+      int hi = sets.length - 1;\n+      while (low <= hi)\n+        {\n+          int mid = (low + hi) >> 1;\n+          UnicodeBlock b = sets[mid];\n+          if (ch < b.start)\n+            hi = mid - 1;\n+          else if (ch > b.end)\n+            low = mid + 1;\n+          else\n+            return b;\n+        }\n+      return null;\n+    }\n+EOF\n+\n+my $seenSpecials = 0;\n+my $seenSurrogates = 0;\n+my $surrogateStart = 0;\n+my @names = ();\n+while (<BLOCKS>) {\n+    next if /^\\#/;\n+    my ($start, $end, $block) = split(/; /);\n+    next unless defined $block;\n+    chomp $block;\n+    $block =~ s/ *$//;\n+    if (! $seenSpecials and $block =~ /Specials/) {\n+        # Special case SPECIALS, since it is two disjoint ranges\n+        $seenSpecials = 1;\n+        next;              \n+    }\n+    if ($block =~ /Surrogates/) {\n+        # Special case SURROGATES_AREA, since it one range, not three\n+        # consecutive, in Java\n+        $seenSurrogates++;\n+        if ($seenSurrogates == 1) {\n+            $surrogateStart = $start;\n+            next;\n+        } elsif ($seenSurrogates == 2) {\n+            next;\n+        } else {\n+            $start = $surrogateStart;\n+            $block = \"Surrogates Area\";\n+        }\n+    }\n+    # Special case the name of PRIVATE_USE_AREA.\n+    $block =~ s/(Private Use)/$1 Area/;\n+\n+    (my $name = $block) =~ tr/a-z -/A-Z__/;\n+    push @names, $name;\n+    my $since = (defined $additions{$name}\n+                 ? \"\\n     * \\@since $additions{$name}\" : \"\");\n+    my $extra = ($block =~ /Specials/ ? \"'\\\\uFEFF', \" : \"\");\n+    print <<EOF;\n+\n+    /**\n+     * $block.\n+     * $extra'\\\\u$start' - '\\\\u$end'.$since\n+     */\n+    public final static UnicodeBlock $name\n+      = new UnicodeBlock('\\\\u$start', '\\\\u$end',\n+                         \"$name\");\n+EOF\n+}\n+\n+print <<EOF;\n+\n+    /**\n+     * The defined subsets.\n+     */\n+    private static final UnicodeBlock sets[] = {\n+EOF\n+\n+foreach (@names) {\n+    print \"      $_,\\n\";\n+}\n+\n+print <<EOF;\n+    };\n+  } // class UnicodeBlock\n+EOF"}, {"sha": "8aeed152adf01c6c034defb74f1a57a4501c382b", "filename": "libjava/scripts/unicode-decomp.pl", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-decomp.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-decomp.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Funicode-decomp.pl?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,146 @@\n+#!/usr/bin/perl -w\n+# unicode-decomp.pl - script to generate database for java.text.Collator\n+# Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+#\n+# This file is part of libjava.\n+# \n+# This software is copyrighted work licensed under the terms of the\n+# Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+# details.\n+\n+# Code for reading UnicodeData.txt and generating the code for\n+# gnu.java.lang.CharData.  For now, the relevant Unicode definition files\n+# are found in libjava/gnu/gcj/convert/.\n+#\n+# Usage: ./unicode-decomp.pl [-n] <UnicodeData.txt> <decomp.h>\n+#   where <UnicodeData.txt> is obtained from www.unicode.org (named\n+#   UnicodeData-3.0.0.txt for Unicode version 3.0.0), and <CharData.java>\n+#   is the final location of include/java-chardecomp.h.\n+#   As of JDK 1.4, use Unicode version 3.0.0 for best results.\n+#\n+# If this exits with nonzero status, then you must investigate the\n+# cause of the problem.\n+# Diagnostics and other information to stderr.\n+# With -n, the files are not created, but all processing still occurs.\n+\n+# These maps characters to their decompositions.\n+my %canonical_decomposition = ();\n+my %full_decomposition = ();\n+\n+# Handle `-n' and open output files.\n+if ($ARGV[0] && $ARGV[0] eq '-n')\n+{\n+    shift @ARGV;\n+    $ARGV[1] = '/dev/null';\n+}\n+die \"Usage: $0 <UnicodeData.txt> <java-chardecomp.h>\" unless @ARGV == 2;\n+open (UNICODE, \"< $ARGV[0]\") || die \"Can't open Unicode attribute file: $!\\n\";\n+\n+# Process the Unicode file.\n+$| = 1;\n+my $count = 0;\n+print STDERR \"Parsing attributes file\";\n+while (<UNICODE>)\n+{\n+    print STDERR \".\" unless $count++ % 1000;\n+    chomp;\n+    s/\\r//g;\n+    my ($ch, undef, undef, undef, undef, $decomp) = split ';';\n+    $ch = hex($ch);\n+\n+    if ($decomp ne '')\n+    {\n+        my $is_full = 0;\n+        my @decomp = ();\n+        foreach (split (' ', $decomp))\n+        {\n+            if (/^\\<.*\\>$/)\n+            {\n+                $is_full = 1;\n+                next;\n+            }\n+\t    push (@decomp, hex ($_));\n+\t}\n+        my $s = pack \"n*\", @decomp;\n+        if ($is_full)\n+        {\n+            $full_decomposition{$ch} = $s;\n+        }\n+        else\n+        {\n+            $canonical_decomposition{$ch} = $s;\n+        }\n+    }\n+}\n+\n+# Now generate decomposition tables.\n+open DECOMP, \"> $ARGV[1]\" or die \"Can't open output file: $!\\n\";\n+print STDERR \"\\nGenerating tables\\n\";\n+print DECOMP <<EOF;\n+// java-chardecomp.h - Decomposition character tables -*- c++ -*-\n+\n+#ifndef __JAVA_CHARDECOMP_H__\n+#define __JAVA_CHARDECOMP_H__\n+\n+\n+// These tables are automatically generated by the $0\n+// script.  DO NOT EDIT the tables.  Instead, fix the script\n+// and run it again.\n+\n+// This file should only be included by natCollator.cc\n+\n+struct decomp_entry\n+{\n+  jchar key;\n+  const char *value;\n+};\n+\n+EOF\n+\n+&write_decompositions;\n+\n+print DECOMP \"#endif /* __JAVA_CHARDECOMP_H__ */\\n\";\n+\n+close(DECOMP);\n+print STDERR \"Done\\n\";\n+exit;\n+\n+\n+# Write a single decomposition table.\n+sub write_single_decomposition($$%)\n+{\n+    my ($name, $is_canon, %table) = @_;\n+    my $first_line = 1;\n+    print DECOMP \"static const decomp_entry ${name}_decomposition[] =\\n{\\n\";\n+\n+    for my $key (0 .. 0xffff)\n+    {\n+\tnext if ! defined $table{$key};\n+        print DECOMP \",\\n\" unless $first_line;\n+\t$first_line = 0;\n+\n+\tprintf DECOMP \"  { 0x%04x, \\\"\", $key;\n+\n+\t# We represent the expansion as a series of bytes, terminated\n+\t# with a double nul.  This is ugly, but relatively\n+\t# space-efficient.  Most expansions are short, but there are a\n+\t# few that are very long (e.g. \\uFDFA).  This means that if we\n+\t# chose a fixed-space representation we would waste a lot of\n+\t# space.\n+\tmy @expansion = unpack \"n*\", $table{$key};\n+\tforeach my $char (@expansion)\n+\t{\n+\t    printf DECOMP \"\\\\x%02x\\\\x%02x\", ($char / 256), ($char % 256);\n+\t}\n+\n+\tprint DECOMP \"\\\" }\";\n+    }\n+\n+    print DECOMP \"\\n};\\n\\n\";\n+}\n+\n+sub write_decompositions()\n+{\n+    &write_single_decomposition ('canonical', 1, %canonical_decomposition);\n+    &write_single_decomposition ('full', 0, %full_decomposition);\n+}"}, {"sha": "073bc69941466819feed892f1733c7746da4c65a", "filename": "libjava/scripts/unicode-muncher.pl", "status": "added", "additions": 545, "deletions": 0, "changes": 545, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-muncher.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa782725c0a33e23e5f280be091c29e116768bb/libjava%2Fscripts%2Funicode-muncher.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Funicode-muncher.pl?ref=1fa782725c0a33e23e5f280be091c29e116768bb", "patch": "@@ -0,0 +1,545 @@\n+#!/usr/bin/perl -w\n+# unicode-muncher.pl -- generate Unicode database for java.lang.Character\n+# Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+#\n+# This file is part of GNU Classpath.\n+#\n+# GNU Classpath is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU Classpath is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU Classpath; see the file COPYING.  If not, write to the\n+# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+# 02111-1307 USA.\n+#\n+# Linking this library statically or dynamically with other modules is\n+# making a combined work based on this library.  Thus, the terms and\n+# conditions of the GNU General Public License cover the whole\n+# combination.\n+#\n+# As a special exception, the copyright holders of this library give you\n+# permission to link this library with independent modules to produce an\n+# executable, regardless of the license terms of these independent\n+# modules, and to copy and distribute the resulting executable under\n+# terms of your choice, provided that you also meet, for each linked\n+# independent module, the terms and conditions of the license of that\n+# module.  An independent module is a module which is not derived from\n+# or based on this library.  If you modify this library, you may extend\n+# this exception to your version of the library, but you are not\n+# obligated to do so.  If you do not wish to do so, delete this\n+# exception statement from your version.\n+\n+# Code for reading UnicodeData.txt and generating the code for\n+# gnu.java.lang.CharData.  For now, the relevant Unicode definition files\n+# are found in libjava/gnu/gcj/convert/.\n+#\n+# Inspired by code from Jochen Hoenicke.\n+# author Eric Blake <ebb9@email.byu.edu>\n+#\n+# Usage: ./unicode-muncher <UnicodeData.txt> <CharData.java>\n+#   where <UnicodeData.txt> is obtained from www.unicode.org (named\n+#   UnicodeData-3.0.0.txt for Unicode version 3.0.0), and <CharData.java>\n+#   is the final location for the Java interface gnu.java.lang.CharData.\n+#   As of JDK 1.4, use Unicode version 3.0.0 for best results.\n+\n+##\n+## Convert a 16-bit integer to a Java source code String literal character\n+##\n+sub javaChar($) {\n+    my ($char) = @_;\n+    die \"Out of range: $char\\n\" if $char < -0x8000 or $char > 0xffff;\n+    $char += 0x10000 if $char < 0;\n+    # Special case characters that must be escaped, or are shorter as ASCII\n+    return sprintf(\"\\\\%03o\", $char) if $char < 0x20;\n+    return \"\\\\\\\"\" if $char == 0x22;\n+    return \"\\\\\\\\\" if $char == 0x5c;\n+    return pack(\"C\", $char) if $char < 0x7f;\n+    return sprintf(\"\\\\u%04x\", $char);\n+}\n+\n+##\n+## Convert the text UnicodeData file from www.unicode.org into a Java\n+## interface with string constants holding the compressed information.\n+##\n+my @TYPECODES = qw(Cn Lu Ll Lt Lm Lo Mn Me Mc Nd Nl No Zs Zl Zp Cc Cf\n+                   SKIPPED Co Cs Pd Ps Pe Pc Po Sm Sc Sk So Pi Pf);\n+my @DIRCODES = qw(L R AL EN ES ET AN CS NSM BN B S WS ON LRE LRO RLE RLO PDF);\n+\n+my $NOBREAK_FLAG  = 32;\n+my $MIRRORED_FLAG = 64;\n+\n+my @info = ();\n+my $titlecase = \"\";\n+my $count = 0;\n+my $range = 0;\n+\n+die \"Usage: $0 <UnicodeData.txt> <CharData.java>\" unless @ARGV == 2;\n+open (UNICODE, \"< $ARGV[0]\") || die \"Can't open Unicode attribute file: $!\\n\";\n+\n+# Stage 1: Parse the attribute file\n+$| = 1;\n+print \"GNU Classpath Unicode Attribute Database Generator 2.0\\n\";\n+print \"Copyright (C) 1998, 2002 Free Software Foundation, Inc.\\n\";\n+print \"Parsing attributes file\";\n+while(<UNICODE>) {\n+    print \".\" unless $count++ % 1000;\n+    chomp;\n+    s/\\r//g;\n+    my ($ch, $name, $category, undef, $bidir, $decomp, undef, undef, $numeric,\n+        $mirrored, undef, undef, $upcase, $lowcase, $title) = split ';';\n+    $ch = hex($ch);\n+    next if $ch > 0xffff; # Ignore surrogate pairs, since Java does\n+\n+    my ($type, $numValue, $upperchar, $lowerchar, $direction);\n+\n+    $type = 0;\n+    while ($category !~ /^$TYPECODES[$type]$/) {\n+        if (++$type == @TYPECODES) {\n+            die \"$ch: Unknown type: $category\";\n+        }\n+    }\n+    $type |= $NOBREAK_FLAG if ($decomp =~ /noBreak/);\n+    $type |= $MIRRORED_FLAG if ($mirrored =~ /Y/);\n+\n+    if ($numeric =~ /^[0-9]+$/) {\n+        $numValue = $numeric;\n+        die \"numValue too big: $ch, $numValue\\n\" if $numValue >= 0x7fff;\n+    } elsif ($numeric eq \"\") {\n+        # Special case sequences of 'a'-'z'\n+        if ($ch >= 0x0041 && $ch <= 0x005a) {\n+            $numValue = $ch - 0x0037;\n+        } elsif ($ch >= 0x0061 && $ch <= 0x007a) {\n+            $numValue = $ch - 0x0057;\n+        } elsif ($ch >= 0xff21 && $ch <= 0xff3a) {\n+            $numValue = $ch - 0xff17;\n+        } elsif ($ch >= 0xff41 && $ch <= 0xff5a) {\n+            $numValue = $ch - 0xff37;\n+        } else {\n+            $numValue = -1;\n+        }\n+    } else {\n+        $numValue = -2;\n+    }\n+\n+    $upperchar = $upcase ? hex($upcase) - $ch : 0;\n+    $lowerchar = $lowcase ? hex($lowcase) - $ch : 0;\n+    if ($title ne $upcase) {\n+        my $titlechar = $title ? hex($title) : $ch;\n+        $titlecase .= pack(\"n2\", $ch, $titlechar);\n+    }\n+\n+    $direction = 0;\n+    while ($bidir !~ /^$DIRCODES[$direction]$/) {\n+        if (++$direction == @DIRCODES) {\n+            $direction = -1;\n+            last;\n+        }\n+    }\n+\n+    if ($range) {\n+        die \"Expecting end of range at $ch\\n\" unless $name =~ /Last>$/;\n+        for ($range + 1 .. $ch - 1) {\n+            $info[$_] = pack(\"n5\", $type, $numValue, $upperchar,\n+                             $lowerchar, $direction);\n+        }\n+        $range = 0;\n+    } elsif ($name =~ /First>$/) {\n+        $range = $ch;\n+    }\n+    $info[$ch] = pack(\"n5\", $type, $numValue, $upperchar, $lowerchar,\n+                      $direction);\n+}\n+close UNICODE;\n+\n+# Stage 2: Compress the data structures\n+printf \"\\nCompressing data structures\";\n+$count = 0;\n+my $info = ();\n+my %charhash = ();\n+my @charinfo = ();\n+\n+for my $ch (0 .. 0xffff) {\n+    print \".\" unless $count++ % 0x1000;\n+    if (! defined $info[$ch]) {\n+        $info[$ch] = pack(\"n5\", 0, -1, 0, 0, -1);\n+    }\n+\n+    my ($type, $numVal, $upper, $lower, $direction) = unpack(\"n5\", $info[$ch]);\n+    if (! exists $charhash{$info[$ch]}) {\n+        push @charinfo, [ $numVal, $upper, $lower, $direction ];\n+        $charhash{$info[$ch]} = $#charinfo;\n+    }\n+    $info .= pack(\"n\", ($charhash{$info[$ch]} << 7) | $type);\n+}\n+\n+my $charlen = @charinfo;\n+my $bestshift;\n+my $bestest = 1000000;\n+my $bestblkstr;\n+die \"Too many unique character entries: $charlen\\n\" if $charlen > 512;\n+print \"\\nUnique character entries: $charlen\\n\";\n+\n+for my $i (3 .. 8) {\n+    my $blksize = 1 << $i;\n+    my %blocks = ();\n+    my @blkarray = ();\n+    my ($j, $k);\n+    print \"shift: $i\";\n+\n+    for ($j = 0; $j < 0x10000; $j += $blksize) {\n+        my $blkkey = substr $info, 2 * $j, 2 * $blksize;\n+        if (! exists $blocks{$blkkey}) {\n+            push @blkarray, $blkkey;\n+            $blocks{$blkkey} = $#blkarray;\n+        }\n+    }\n+    my $blknum = @blkarray;\n+    my $blocklen = $blknum * $blksize;\n+    printf \" before %5d\", $blocklen;\n+\n+    # Now we try to pack the blkarray as tight as possible by finding matching\n+    # heads and tails.\n+    for ($j = $blksize - 1; $j > 0; $j--) {\n+        my %tails = ();\n+        for $k (0 .. $#blkarray) {\n+            next if ! defined $blkarray[$k];\n+            my $len = length $blkarray[$k];\n+            my $tail = substr $blkarray[$k], $len - $j * 2;\n+            if (exists $tails{$tail}) {\n+                push @{$tails{$tail}}, $k;\n+            } else {\n+                $tails{$tail} = [ $k ];\n+            }\n+        }\n+\n+        # tails are calculated, now calculate the heads and merge.\n+      BLOCK:\n+        for $k (0 .. $#blkarray) {\n+            next if ! defined $blkarray[$k];\n+            my $tomerge = $k;\n+            while (1) {\n+                my $head = substr($blkarray[$tomerge], 0, $j * 2);\n+                my $entry = $tails{$head};\n+                next BLOCK if ! defined $entry;\n+\n+                my $other = shift @{$entry};\n+                if ($other == $tomerge) {\n+                    if (@{$entry}) {\n+                        push @{$entry}, $other;\n+                        $other = shift @{$entry};\n+                    } else {\n+                        push @{$entry}, $other;\n+                        next BLOCK;\n+                    }\n+                }\n+                if (@{$entry} == 0) {\n+                    delete $tails{$head};\n+                }\n+\n+                # a match was found\n+                my $merge = $blkarray[$other]\n+                    . substr($blkarray[$tomerge], $j * 2);\n+                $blocklen -= $j;\n+                $blknum--;\n+\n+                if ($other < $tomerge) {\n+                    $blkarray[$tomerge] = undef;\n+                    $blkarray[$other] = $merge;\n+                    my $len = length $merge;\n+                    my $tail = substr $merge, $len - $j * 2;\n+                    $tails{$tail} = [ map { $_ == $tomerge ? $other : $_ }\n+                                      @{$tails{$tail}} ];\n+                    next BLOCK;\n+                }\n+                $blkarray[$tomerge] = $merge;\n+                $blkarray[$other] = undef;\n+            }\n+        }\n+    }\n+    my $blockstr;\n+    for $k (0 .. $#blkarray) {\n+        $blockstr .= $blkarray[$k] if defined $blkarray[$k];\n+    }\n+\n+    die \"Unexpected $blocklen\" if length($blockstr) != 2 * $blocklen;\n+    my $estimate = 2 * $blocklen + (0x20000 >> $i);\n+\n+    printf \" after merge %5d: %6d bytes\\n\", $blocklen, $estimate;\n+    if ($estimate < $bestest) {\n+        $bestest = $estimate;\n+        $bestshift = $i;\n+        $bestblkstr = $blockstr;\n+    }\n+}\n+\n+my @blocks;\n+my $blksize = 1 << $bestshift;\n+for (my $j = 0; $j < 0x10000; $j += $blksize) {\n+    my $blkkey = substr $info, 2 * $j, 2 * $blksize;\n+    my $index = index $bestblkstr, $blkkey;\n+    while ($index & 1) {\n+        die \"not found: $j\" if $index == -1;\n+        $index = index $bestblkstr, $blkkey, $index + 1;\n+    }\n+    push @blocks, ($index / 2 - $j) & 0xffff;\n+}\n+\n+# Phase 3: Generate the file\n+die \"UTF-8 limit of blocks may be exceeded: \" . scalar(@blocks) . \"\\n\"\n+    if @blocks > 0xffff / 3;\n+die \"UTF-8 limit of data may be exceeded: \" . length($bestblkstr) . \"\\n\"\n+    if length($bestblkstr) > 0xffff / 3;\n+{\n+    print \"Generating $ARGV[1] with shift of $bestshift\";\n+    my ($i, $j);\n+\n+    open OUTPUT, \"> $ARGV[1]\" or die \"Failed creating output file: $!\\n\";\n+    print OUTPUT <<EOF;\n+/* gnu/java/lang/CharData -- Database for java.lang.Character Unicode info\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   *** This file is generated by scripts/unicode-muncher.pl ***\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.lang;\n+\n+/**\n+ * This contains the info about the unicode characters, that\n+ * java.lang.Character needs.  It is generated automatically from\n+ * <code>$ARGV[0]</code>, by some\n+ * perl scripts. This Unicode definition file can be found on the\n+ * <a href=\"http://www.unicode.org\">http://www.unicode.org</a> website.\n+ * JDK 1.4 uses Unicode version 3.0.0.\n+ *\n+ * The data is stored as string constants, but Character will convert these\n+ * Strings to their respective <code>char[]</code> components.  The field\n+ * <code>BLOCKS</code> stores the offset of a block of 2<sup>SHIFT</sup>\n+ * characters within <code>DATA</code>.  The DATA field, in turn, stores\n+ * information about each character in the low order bits, and an offset\n+ * into the attribute tables <code>UPPER</code>, <code>LOWER</code>,\n+ * <code>NUM_VALUE</code>, and <code>DIRECTION</code>.  Notice that the\n+ * attribute tables are much smaller than 0xffff entries; as many characters\n+ * in Unicode share common attributes.  Finally, there is a listing for\n+ * <code>TITLE</code> exceptions (most characters just have the same\n+ * title case as upper case).\n+ *\n+ * \\@author scripts/unicode-muncher.pl (written by Jochen Hoenicke,\n+ *         Eric Blake)\n+ * \\@see Character\n+ */\n+public interface CharData\n+{\n+  /**\n+   * The Unicode definition file that was parsed to build this database.\n+   */\n+  String SOURCE = \\\"$ARGV[0]\\\";\n+\n+  /**\n+   * The character shift amount to look up the block offset. In other words,\n+   * <code>(char) (BLOCKS.value[ch >> SHIFT] + ch)</code> is the index where\n+   * <code>ch</code> is described in <code>DATA</code>.\n+   */\n+  int SHIFT = $bestshift;\n+\n+  /**\n+   * The mapping of character blocks to their location in <code>DATA</code>.\n+   * Each entry has been adjusted so that the 16-bit sum with the desired\n+   * character gives the actual index into <code>DATA</code>.\n+   */\n+  String BLOCKS\n+EOF\n+\n+    for ($i = 0; $i < @blocks / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if @blocks <= $i * 11 + $j;\n+            my $val = $blocks[$i * 11 + $j];\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * Information about each character.  The low order 5 bits form the\n+   * character type, the next bit is a flag for non-breaking spaces, and the\n+   * next bit is a flag for mirrored directionality.  The high order 9 bits\n+   * form the offset into the attribute tables.  Note that this limits the\n+   * number of unique character attributes to 512, which is not a problem\n+   * as of Unicode version 3.2.0, but may soon become one.\n+   */\n+  String DATA\n+EOF\n+\n+    my $len = length($bestblkstr) / 2;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = unpack \"n\", substr($bestblkstr, 2 * ($i*11 + $j), 2);\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the attribute table for computing the numeric value of a\n+   * character.  The value is -1 if Unicode does not define a value, -2\n+   * if the value is not a positive integer, otherwise it is the value.\n+   * Note that this is a signed value, but stored as an unsigned char\n+   * since this is a String literal.\n+   */\n+  String NUM_VALUE\n+EOF\n+\n+    $len = @charinfo;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = $charinfo[$i * 11 + $j][0];\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the attribute table for computing the uppercase representation\n+   * of a character.  The value is the signed difference between the\n+   * character and its uppercase version.  Note that this is stored as an\n+   * unsigned char since this is a String literal.\n+   */\n+  String UPPER\n+EOF\n+\n+    $len = @charinfo;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = $charinfo[$i * 11 + $j][1];\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the attribute table for computing the lowercase representation\n+   * of a character.  The value is the signed difference between the\n+   * character and its lowercase version.  Note that this is stored as an\n+   * unsigned char since this is a String literal.\n+   */\n+  String LOWER\n+EOF\n+\n+    $len = @charinfo;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = $charinfo[$i * 11 + $j][2];\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the attribute table for computing the directionality class\n+   * of a character.  At present, the value is in the range 0 - 18 if the\n+   * character has a direction, otherwise it is -1.  Note that this is\n+   * stored as an unsigned char since this is a String literal.\n+   */\n+  String DIRECTION\n+EOF\n+\n+    $len = @charinfo;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = $charinfo[$i * 11 + $j][3];\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT <<EOF;\n+;\n+\n+  /**\n+   * This is the listing of titlecase special cases (all other character\n+   * can use <code>UPPER</code> to determine their titlecase).  The listing\n+   * is a sequence of character pairs; converting the first character of the\n+   * pair to titlecase produces the second character.\n+   */\n+  String TITLE\n+EOF\n+\n+    $len = length($titlecase) / 2;\n+    for ($i = 0; $i < $len / 11; $i++) {\n+        print OUTPUT $i ? \"\\n    + \\\"\" : \"    = \\\"\";\n+        for $j (0 .. 10) {\n+            last if $len <= $i * 11 + $j;\n+            my $val = unpack \"n\", substr($titlecase, 2 * ($i*11 + $j), 2);\n+            print OUTPUT javaChar($val);\n+        }\n+        print OUTPUT \"\\\"\";\n+    }\n+\n+    print OUTPUT \";\\n}\\n\";\n+    close OUTPUT;\n+}\n+print \"\\nDone.\\n\";"}]}