{"sha": "a8db47cb5889a381d0a40c903243a9945299fbb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkYjQ3Y2I1ODg5YTM4MWQwYTQwYzkwMzI0M2E5OTQ1Mjk5ZmJiOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-29T10:49:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-29T10:49:07Z"}, "message": "re PR libstdc++/29520 (tr1: discrete_distributions vs large floating point values)\n\n2006-10-29  Paolo Carlini  <pcarlini@suse.de>\n\t\n\tPR libstdc++/29520\n\t* include/tr1/random (geometric_distribution<>::\n\toperator()(_UniformRandomNumberGenerator&)): Only declare.\n\t* include/tr1/random.tcc (geometric_distribution<>::\n\toperator()(_UniformRandomNumberGenerator&),\n\tpoisson_distribution<>::operator()(_UniformRandomNumberGenerator&),\n\tbinomial_distribution<>::operator()(_UniformRandomNumberGenerator&)):\n\tReject candidate floating point values not convertible to the\n\tresult_type.\n\nFrom-SVN: r118135", "tree": {"sha": "b119b574ab746f5b26e56348069fe2d4875f0d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b119b574ab746f5b26e56348069fe2d4875f0d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8db47cb5889a381d0a40c903243a9945299fbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db47cb5889a381d0a40c903243a9945299fbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8db47cb5889a381d0a40c903243a9945299fbb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db47cb5889a381d0a40c903243a9945299fbb9/comments", "author": null, "committer": null, "parents": [{"sha": "a7a53ca582735ec356bb273b2d17aee0274896d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a53ca582735ec356bb273b2d17aee0274896d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a53ca582735ec356bb273b2d17aee0274896d1"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "a6a05895899848316028d1c251820bafb20f5f9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8db47cb5889a381d0a40c903243a9945299fbb9", "patch": "@@ -1,3 +1,15 @@\n+2006-10-29  Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\tPR libstdc++/29520\n+\t* include/tr1/random (geometric_distribution<>::\n+\toperator()(_UniformRandomNumberGenerator&)): Only declare.\n+\t* include/tr1/random.tcc (geometric_distribution<>::\n+\toperator()(_UniformRandomNumberGenerator&),\n+\tpoisson_distribution<>::operator()(_UniformRandomNumberGenerator&),\n+\tbinomial_distribution<>::operator()(_UniformRandomNumberGenerator&)):\n+\tReject candidate floating point values not convertible to the\n+\tresult_type.\n+\n 2006-10-28  Paolo Carlini  <pcarlini@suse.de>\n \t\n \t* include/tr1/array (array<>::_M_at): New."}, {"sha": "9114d80b6729ad5a1696f3319ace2cb298fd4d31", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=a8db47cb5889a381d0a40c903243a9945299fbb9", "patch": "@@ -1759,8 +1759,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       template<class _UniformRandomNumberGenerator>\n         result_type\n-        operator()(_UniformRandomNumberGenerator& __urng)\n-        { return result_type(std::ceil(std::log(__urng()) / _M_log_p)); }\n+        operator()(_UniformRandomNumberGenerator& __urng);\n \n       /**\n        * Inserts a %geometric_distribution random number distribution"}, {"sha": "67d79edf69a3866c613b290efa322b4a5602eb0f", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8db47cb5889a381d0a40c903243a9945299fbb9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=a8db47cb5889a381d0a40c903243a9945299fbb9", "patch": "@@ -768,6 +768,28 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename geometric_distribution<_IntType, _RealType>::result_type\n+      geometric_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\t// About the epsilon thing see this thread:\n+        // http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00971.html\n+\tconst _RealType __naf =\n+\t  (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t// The largest _RealType convertible to _IntType.\n+\tconst _RealType __thr =\n+\t  std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t_RealType __cand;\n+\tdo\n+\t  __cand = std::ceil(std::log(__urng()) / _M_log_p);\n+\twhile (__cand >= __thr);\n+\n+\treturn result_type(__cand + __naf);\n+      }\n+\n   template<typename _IntType, typename _RealType,\n \t   typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n@@ -841,6 +863,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  {\n \t    _RealType __x;\n \n+\t    // See comments above...\n+\t    const _RealType __naf =\n+\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t    const _RealType __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n \t    const _RealType __m = std::floor(_M_mean);\n \t    // sqrt(pi / 2)\n \t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n@@ -899,9 +927,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t__reject = (__w - __e - __x * _M_lm_thr\n \t\t\t    > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n \n+\t\t__reject |= __x + __m >= __thr;\n+\n \t      } while (__reject);\n \n-\t    return _IntType(__x + __m + 0.5);\n+\t    return result_type(__x + __m + __naf);\n \t  }\n \telse\n #endif\n@@ -1055,6 +1085,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  {\n \t    _RealType __x;\n \n+\t    // See comments above...\n+\t    const _RealType __naf =\n+\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t    const _RealType __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n \t    const _RealType __np = std::floor(_M_t * __p12);\n \t    const _RealType __pa = __np / _M_t;\n \n@@ -1127,10 +1163,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t      + std::tr1::lgamma(_M_t - (__np + __x) + 1);\n \t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n \t\t  }\n+\n+\t\t__reject |= __x + __np >= __thr;\n \t      }\n \t    while (__reject);\n \n-\t    __x += __np + 0.5;\n+\t    __x += __np + __naf;\n \n \t    const _IntType __z = _M_waiting(__urng, _M_t - _IntType(__x)); \n \t    __ret = _IntType(__x) + __z;"}]}