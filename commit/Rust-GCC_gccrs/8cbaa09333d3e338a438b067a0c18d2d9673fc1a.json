{"sha": "8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiYWEwOTMzM2QzZTMzOGE0MzhiMDY3YTBjMThkMmQ5NjczZmMxYQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-17T13:07:19Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-17T14:12:38Z"}, "message": "Fix spacing and typos in comments.\n\n\t* gimple-range-cache.cc: Comment cleanups.\n\t* gimple-range-gori.cc: Comment cleanups.\n\t* gimple-range.cc: Comment/spacing cleanups\n\t* value-range.h: Comment cleanups.", "tree": {"sha": "b2c28e870afb6f127bbe0701ec5ac504a53ef920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c28e870afb6f127bbe0701ec5ac504a53ef920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/comments", "author": null, "committer": null, "parents": [{"sha": "2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b87f3318cf6334a3a42dcf27f2fdec0fce04665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b87f3318cf6334a3a42dcf27f2fdec0fce04665"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "2c6e5bb2d38201090619c31c38233fe67606468c", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "patch": "@@ -385,7 +385,7 @@ block_range_cache::~block_range_cache ()\n }\n \n // Set the range for NAME on entry to block BB to R.\n-// If it has not been // accessed yet, allocate it first.\n+// If it has not been accessed yet, allocate it first.\n \n void\n block_range_cache::set_bb_range (tree name, const basic_block bb,"}, {"sha": "b58f2493b111d00a3b85ddda8eb43c181e891930", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "patch": "@@ -1065,7 +1065,7 @@ gori_compute::outgoing_edge_range_p (irange &r, edge e, tree name,\n \t\t   e->src->index, e->dest->index);\n \t  print_generic_expr (dump_file, name, TDF_SLIM);\n \t}\n-      // Simply calculate DEF_STMT on edge E usng the range query Q.\n+      // Simply calculate DEF_STMT on edge E using the range query Q.\n       fold_range (r, def_stmt, e, &q);\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}, {"sha": "624cfb12562a9528c34d53ae395264d908704459", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "patch": "@@ -135,20 +135,18 @@ fur_edge::query ()\n   return m_query;\n }\n \n-\n // Instantiate a stmt based fur_source.\n \n-\n fur_stmt::fur_stmt (gimple *s, range_query *q)\n {\n-  m_stmt= s;\n+  m_stmt = s;\n   if (q)\n     m_query = q;\n   else\n     m_query = get_global_range_query ();\n }\n \n-// Retirenve range of EXPR as it occurs as a use on stmt M_STMT.\n+// Retrieve range of EXPR as it occurs as a use on stmt M_STMT.\n \n bool\n fur_stmt::get_operand (irange &r, tree expr)\n@@ -175,8 +173,8 @@ fur_stmt::query ()\n   return m_query;\n }\n \n-// This version of fur_source will pick a range from a stmt, and register\n-// also dependencies via a gori_compute object.  This is mostly an internal API.\n+// This version of fur_source will pick a range from a stmt, and also register\n+// dependencies via a gori_compute object.  This is mostly an internal API.\n \n class fur_depend : public fur_stmt\n {\n@@ -187,16 +185,16 @@ class fur_depend : public fur_stmt\n   gori_compute *m_gori;\n };\n \n-// Instantiate a stmt based fur_source witrh a GORI object\n+// Instantiate a stmt based fur_source with a GORI object\n+\n inline\n fur_depend::fur_depend (gimple *s, gori_compute *gori, range_query *q)\n-\t\t\t\t\t\t\t      : fur_stmt (s, q)\n+  : fur_stmt (s, q)\n {\n   gcc_checking_assert (gori);\n   m_gori = gori;\n }\n \n-\n // find and add any dependnecy between LHS and RHS\n \n void\n@@ -205,7 +203,6 @@ fur_depend::register_dependency (tree lhs, tree rhs)\n   m_gori->register_dependency (lhs, rhs);\n }\n \n-\n // This version of fur_source will pick a range up from a list of ranges\n // supplied by the caller.\n \n@@ -254,7 +251,7 @@ fur_list::fur_list (unsigned num, irange *list)\n   m_limit = num;\n }\n \n-// Get the next operand from the vector, ensure types are compatible,\n+// Get the next operand from the vector, ensure types are compatible.\n \n bool\n fur_list::get_operand (irange &r, tree expr)\n@@ -305,7 +302,6 @@ fold_range (irange &r, gimple *s, unsigned num_elements, irange *vector)\n   return f.fold_stmt (r, s, src);\n }\n \n-\n // Fold stmt S into range R using range query Q.\n \n bool"}, {"sha": "a8adc50b98ef836d47b4bbc46547529cc9bf3caa", "filename": "gcc/value-range.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbaa09333d3e338a438b067a0c18d2d9673fc1a/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=8cbaa09333d3e338a438b067a0c18d2d9673fc1a", "patch": "@@ -657,7 +657,7 @@ irange_allocator::~irange_allocator ()\n   obstack_free (&m_obstack, NULL);\n }\n \n-// Provide a hunk of memory from the obstack\n+// Provide a hunk of memory from the obstack.\n inline void *\n irange_allocator::get_memory (unsigned num_bytes)\n {"}]}