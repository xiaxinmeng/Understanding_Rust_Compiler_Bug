{"sha": "0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5ZGM0YWU1OTYzYzFlNzUyYTA0YzhmYjlkMWJiM2YzN2RmNzI5MA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-03-11T18:51:09Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-03-11T18:51:09Z"}, "message": "re PR target/65296 ([avr] fix various issues with specs file generation)\n\ngcc/\n\tPR target/65296\n\t* configure.ac [avr]: Check as for options -mrmw, --mlink-relax.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* doc/invoke.texi (AVR Options) [-mrmw]: Document it.\n\t[-mn-flash]: Document it.\n\t[__AVR_ARCH__]: Document avrtiny.\n\t* config/avr/gen-avr-mmcu-specs.c (config.h): Include it.\n\t(*asm_relax): Only define spec if HAVE_AS_AVR_MLINK_RELAX_OPTION.\n\t(*asm_rmw): Only define spec if HAVE_AS_AVR_MRMW_OPTION.\ngcc/testsuite/\n\tPR target/65296\n\t* gcc.target/avr/tiny-memx: Use -mmcu instead of -march.\n\t* gcc.target/avr/tiny-caller-save.c: Same.\n\nFrom-SVN: r221355", "tree": {"sha": "95b394f108bb3e03f402c8a07d6d935829eca8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b394f108bb3e03f402c8a07d6d935829eca8e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d4a5ea68ad2fa2ef251a5dd38a7eb7fdfb6bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d4a5ea68ad2fa2ef251a5dd38a7eb7fdfb6bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d4a5ea68ad2fa2ef251a5dd38a7eb7fdfb6bf8"}], "stats": {"total": 156, "additions": 143, "deletions": 13}, "files": [{"sha": "6512b30fa444a8816d2bd865df6f6a90a95b8f11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -1,3 +1,17 @@\n+2015-03-10  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/65296\n+\t* configure.ac [avr]: Check as for options -mrmw, --mlink-relax.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* doc/invoke.texi (AVR Options) [-mrmw]: Document it.\n+\t[-mn-flash]: Document it.\n+\t[__AVR_ARCH__]: Document avrtiny.\n+\n+\t* config/avr/gen-avr-mmcu-specs.c (config.h): Include it.\n+\t(*asm_relax): Only define spec if HAVE_AS_AVR_MLINK_RELAX_OPTION.\n+\t(*asm_rmw): Only define spec if HAVE_AS_AVR_MRMW_OPTION.\n+\n 2015-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* doc/invoke.texi: Add missing cpu values (z196, zEC12)."}, {"sha": "f2ed301a48023c34378998c3ee8fc205d1212aa6", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -247,6 +247,18 @@\n #endif\n \n \n+/* Define if your avr assembler supports --mlink-relax option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_AVR_MLINK_RELAX_OPTION\n+#endif\n+\n+\n+/* Define if your avr assembler supports -mrmw option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_AVR_MRMW_OPTION\n+#endif\n+\n+\n /* Define if your assembler supports cmpb. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_CMPB"}, {"sha": "29f865e1b9aae78188454ea0773e9af7ada136a9", "filename": "gcc/config/avr/gen-avr-mmcu-specs.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -21,6 +21,8 @@\n #include <stdio.h>\n #include <string.h>\n \n+#include \"config.h\"\n+\n #define IN_GEN_AVR_MMCU_TEXI\n \n #include \"avr-devices.c\"\n@@ -155,11 +157,15 @@ print_mcu (const avr_mcu_t *mcu)\n \n   fprintf (f, \"*asm_arch:\\n\\t-mmcu=%s\\n\\n\", arch->name);\n \n+#ifdef HAVE_AS_AVR_MLINK_RELAX_OPTION\n   fprintf (f, \"*asm_relax:\\n\\t%s\\n\\n\", ASM_RELAX_SPEC);\n+#endif // have as --mlink-relax\n \n+#ifdef HAVE_AS_AVR_MRMW_OPTION\n   fprintf (f, \"*asm_rmw:\\n%s\\n\\n\", rmw\n            ? \"\\t%{!mno-rmw: -mrmw}\"\n            : \"\\t%{mrmw}\");\n+#endif // have as -mrmw\n \n   fprintf (f, \"*asm_errata_skip:\\n%s\\n\\n\", errata_skip\n            ? \"\\t%{mno-skip-bug}\""}, {"sha": "20dbce6973671493e0ceb3cd7ba0c07a62a07bce", "filename": "gcc/configure", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -24182,6 +24182,70 @@ if test $gcc_cv_as_alpha_jsrdirect_relocs = yes; then\n \n $as_echo \"#define HAVE_AS_JSRDIRECT_RELOCS 1\" >>confdefs.h\n \n+fi\n+    ;;\n+\n+  avr-*-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --mlink-relax option\" >&5\n+$as_echo_n \"checking assembler for --mlink-relax option... \" >&6; }\n+if test \"${gcc_cv_as_avr_mlink_relax+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_avr_mlink_relax=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --mlink-relax -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_avr_mlink_relax=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_avr_mlink_relax\" >&5\n+$as_echo \"$gcc_cv_as_avr_mlink_relax\" >&6; }\n+if test $gcc_cv_as_avr_mlink_relax = yes; then\n+\n+$as_echo \"#define HAVE_AS_AVR_MLINK_RELAX_OPTION 1\" >>confdefs.h\n+\n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -mrmw option\" >&5\n+$as_echo_n \"checking assembler for -mrmw option... \" >&6; }\n+if test \"${gcc_cv_as_avr_mrmw+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_avr_mrmw=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -mrmw -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_avr_mrmw=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_avr_mrmw\" >&5\n+$as_echo \"$gcc_cv_as_avr_mrmw\" >&6; }\n+if test $gcc_cv_as_avr_mrmw = yes; then\n+\n+$as_echo \"#define HAVE_AS_AVR_MRMW_OPTION 1\" >>confdefs.h\n+\n fi\n     ;;\n "}, {"sha": "68b0ee83fac8be32fcc4618003f489c211eeae5a", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -3623,6 +3623,18 @@ AS_HELP_STRING([--disable-fix-cortex-a53-835769],\n   [Define if your assembler supports the lituse_jsrdirect relocation.])])\n     ;;\n \n+  avr-*-*)\n+    gcc_GAS_CHECK_FEATURE([--mlink-relax option], gcc_cv_as_avr_mlink_relax,,\n+      [--mlink-relax], [.text],,\n+      [AC_DEFINE(HAVE_AS_AVR_MLINK_RELAX_OPTION, 1,\n+\t\t[Define if your avr assembler supports --mlink-relax option.])])\n+\n+    gcc_GAS_CHECK_FEATURE([-mrmw option], gcc_cv_as_avr_mrmw,,\n+      [-mrmw], [.text],,\n+      [AC_DEFINE(HAVE_AS_AVR_MRMW_OPTION, 1,\n+\t\t[Define if your avr assembler supports -mrmw option.])])\n+    ;;\n+\n   cris-*-*)\n     gcc_GAS_CHECK_FEATURE([-no-mul-bug-abort option],\n       gcc_cv_as_cris_no_mul_bug,[2,15,91],"}, {"sha": "bc0525720ab7fdc7a7700484b7b506030f704c3d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -571,8 +571,8 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n--mcall-prologues -mint8 -mno-interrupts -mrelax @gol\n--mstrict-X -mtiny-stack -Waddr-space-convert}\n+-mcall-prologues -mint8 -mn_flash=@var{size} -mno-interrupts @gol\n+-mrelax -mrmw -mstrict-X -mtiny-stack -Waddr-space-convert}\n \n @emph{Blackfin Options}\n @gccoptlist{-mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]} @gol\n@@ -13509,6 +13509,11 @@ and @code{long long} is 4 bytes.  Please note that this option does not\n conform to the C standards, but it results in smaller code\n size.\n \n+@item -mn-flash=@var{num}\n+@opindex mn-flash\n+Assume that the flash memory has a size of \n+@var{num} times 64@tie{}KiB.\n+\n @item -mno-interrupts\n @opindex mno-interrupts\n Generated code is not compatible with hardware interrupts.\n@@ -13518,8 +13523,9 @@ Code size is smaller.\n @opindex mrelax\n Try to replace @code{CALL} resp.@: @code{JMP} instruction by the shorter\n @code{RCALL} resp.@: @code{RJMP} instruction if applicable.\n-Setting @option{-mrelax} just adds the @option{--relax} option to the\n-linker command line when the linker is called.\n+Setting @option{-mrelax} just adds the @option{--mlink-relax} option to\n+the assembler's command line and the @option{--relax} option to the\n+linker's command line.\n \n Jump relaxing is performed by the linker because jump offsets are not\n known before code is located. Therefore, the assembler code generated by the\n@@ -13529,6 +13535,11 @@ differ from instructions in the assembler code.\n Relaxing must be turned on if linker stubs are needed, see the\n section on @code{EIND} and linker stubs below.\n \n+@item -mrmw\n+@opindex mrmw\n+Assume that the device supports the Read-Modify-Write\n+instructions @code{XCH}, @code{LAC}, @code{LAS} and @code{LAT}.\n+\n @item -msp8\n @opindex msp8\n Treat the stack pointer register as an 8-bit register,\n@@ -13769,13 +13780,18 @@ architecture and depends on the @option{-mmcu=@var{mcu}} option.\n Possible values are:\n \n @code{2}, @code{25}, @code{3}, @code{31}, @code{35},\n-@code{4}, @code{5}, @code{51}, @code{6}, @code{102}, @code{104},\n+@code{4}, @code{5}, @code{51}, @code{6}\n+\n+for @var{mcu}=@code{avr2}, @code{avr25}, @code{avr3}, @code{avr31},\n+@code{avr35}, @code{avr4}, @code{avr5}, @code{avr51}, @code{avr6},\n+\n+respectively and\n+\n+@code{100}, @code{102}, @code{104},\n @code{105}, @code{106}, @code{107}\n \n-for @var{mcu}=@code{avr2}, @code{avr25}, @code{avr3},\n-@code{avr31}, @code{avr35}, @code{avr4}, @code{avr5}, @code{avr51},\n-@code{avr6}, @code{avrxmega2}, @code{avrxmega4}, @code{avrxmega5},\n-@code{avrxmega6}, @code{avrxmega7}, respectively.\n+for @var{mcu}=@code{avrtiny}, @code{avrxmega2}, @code{avrxmega4},\n+@code{avrxmega5}, @code{avrxmega6}, @code{avrxmega7}, respectively.\n If @var{mcu} specifies a device, this built-in macro is set\n accordingly. For example, with @option{-mmcu=atmega8} the macro is\n defined to @code{4}.\n@@ -13795,7 +13811,7 @@ the device name as from the AVR user manual. The difference between\n If @var{device} is not a device but only a core architecture like\n @samp{avr51}, this macro is not defined.\n \n-@item   __AVR_DEVICE_NAME__\n+@item __AVR_DEVICE_NAME__\n Setting @option{-mmcu=@var{device}} defines this built-in macro to\n the device's name. For example, with @option{-mmcu=atmega8} the macro\n is defined to @code{atmega8}."}, {"sha": "e69d5051883cbf28c7dda6080a653ce910c8f03c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -1,3 +1,9 @@\n+2015-03-11  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/65296\n+\t* gcc.target/avr/tiny-memx: Use -mmcu instead of -march.\n+\t* gcc.target/avr/tiny-caller-save.c: Same.\n+\n 2015-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/65242"}, {"sha": "63fad3a1205d50787d09d9cb5d9412b08d13a697", "filename": "gcc/testsuite/gcc.target/avr/tiny-caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-caller-save.c?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=avrtiny -gdwarf -Os\" } */\n+/* { dg-options \"-mmcu=avrtiny -gdwarf -Os\" } */\n \n /* This is a stripped down piece of libgcc2.c that triggerd an ICE for avr with\n-   \"-march=avrtiny -g -Os\"; replace_reg_with_saved_mem would generate:\n+   \"-mmcu=avrtiny -g -Os\"; replace_reg_with_saved_mem would generate:\n    (concatn:SI [\n                     (reg:SI 18 r18)\n                     (reg:SI 19 r19)"}, {"sha": "cdda86b14bfbfb3604dd9e5d9b26cbd635587538", "filename": "gcc/testsuite/gcc.target/avr/tiny-memx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-memx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-memx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftiny-memx.c?ref=0c9dc4ae5963c1e752a04c8fb9d1bb3f37df7290", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=avrtiny\" } */\n+/* { dg-options \"-mmcu=avrtiny\" } */\n \n const __memx char ascmonth[] = \"Jan\"; /* { dg-error \"not supported\" } */"}]}