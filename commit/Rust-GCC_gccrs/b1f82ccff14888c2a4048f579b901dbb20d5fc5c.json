{"sha": "b1f82ccff14888c2a4048f579b901dbb20d5fc5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmODJjY2ZmMTQ4ODhjMmE0MDQ4ZjU3OWI5MDFkYmIyMGQ1ZmM1Yw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-12-13T15:04:05Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-12-13T15:04:05Z"}, "message": "(instantiate_virtual_regs_1, case PLUS): If offset is\nzero, make sure register replacement is still validated.\n\nFrom-SVN: r8649", "tree": {"sha": "5a3fb538d6c7c0544fff0b4643163aae18ffeac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3fb538d6c7c0544fff0b4643163aae18ffeac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f82ccff14888c2a4048f579b901dbb20d5fc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f82ccff14888c2a4048f579b901dbb20d5fc5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f82ccff14888c2a4048f579b901dbb20d5fc5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f82ccff14888c2a4048f579b901dbb20d5fc5c/comments", "author": null, "committer": null, "parents": [{"sha": "ae4311830e2a3915fe7c05227ac4a49d960420b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4311830e2a3915fe7c05227ac4a49d960420b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4311830e2a3915fe7c05227ac4a49d960420b7"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "6dfc17cac1df5fdb466e229c4b2ee98f38fbc067", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f82ccff14888c2a4048f579b901dbb20d5fc5c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f82ccff14888c2a4048f579b901dbb20d5fc5c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b1f82ccff14888c2a4048f579b901dbb20d5fc5c", "patch": "@@ -2675,7 +2675,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n       /* Handle special case of virtual register plus constant.  */\n       if (CONSTANT_P (XEXP (x, 1)))\n \t{\n-\t  rtx old;\n+\t  rtx old, new_offset;\n \n \t  /* Check for (plus (plus VIRT foo) (const_int)) first.  */\n \t  if (GET_CODE (XEXP (x, 0)) == PLUS)\n@@ -2722,18 +2722,26 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t      return 1;\n \t    }\n \n-\t  old = XEXP (x, 0);\n-\t  XEXP (x, 0) = new;\n-\t  new = plus_constant (XEXP (x, 1), offset);\n+\t  new_offset = plus_constant (XEXP (x, 1), offset);\n \n-\t  /* If the new constant is zero, try to replace the sum with its\n-\t     first operand.  */\n-\t  if (new == const0_rtx\n-\t      && validate_change (object, loc, XEXP (x, 0), 0))\n+\t  /* If the new constant is zero, try to replace the sum with just\n+\t     the register.  */\n+\t  if (new_offset == const0_rtx\n+\t      && validate_change (object, loc, new, 0))\n \t    return 1;\n \n-\t  /* Next try to replace constant with new one.  */\n-\t  if (!validate_change (object, &XEXP (x, 1), new, 0))\n+\t  /* Next try to replace the register and new offset.\n+\t     There are two changes to validate here and we can't assume that\n+\t     in the case of old offset equals new just changing the register\n+\t     will yield a valid insn.  In the interests of a little efficiency,\n+\t     however, we only call validate change once (we don't queue up the\n+\t     changes and then call apply_change_group). */\n+\n+\t  old = XEXP (x, 0);\n+\t  if (offset == 0\n+\t      ? ! validate_change (object, &XEXP (x, 0), new, 0)\n+\t      : (XEXP (x, 0) = new,\n+\t\t ! validate_change (object, &XEXP (x, 1), new_offset, 0)))\n \t    {\n \t      if (! extra_insns)\n \t\t{\n@@ -2744,15 +2752,16 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t      /* Otherwise copy the new constant into a register and replace\n \t\t constant with that register.  */\n \t      temp = gen_reg_rtx (Pmode);\n+\t      XEXP (x, 0) = new;\n \t      if (validate_change (object, &XEXP (x, 1), temp, 0))\n-\t\temit_insn_before (gen_move_insn (temp, new), object);\n+\t\temit_insn_before (gen_move_insn (temp, new_offset), object);\n \t      else\n \t\t{\n \t\t  /* If that didn't work, replace this expression with a\n \t\t     register containing the sum.  */\n \n-\t\t  new = gen_rtx (PLUS, Pmode, XEXP (x, 0), new);\n \t\t  XEXP (x, 0) = old;\n+\t\t  new = gen_rtx (PLUS, Pmode, new, new_offset);\n \n \t\t  start_sequence ();\n \t\t  temp = force_operand (new, NULL_RTX);"}]}