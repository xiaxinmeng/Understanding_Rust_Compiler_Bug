{"sha": "5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5YWVkMTRkY2I1Yzk4NDE4NmY4YjFlMDQyYmRlOWYzYWFhZmE1ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-11T23:41:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-11T23:41:05Z"}, "message": "P0972R0 <chrono> zero(), min(), and max() should be noexcept\n\nThis paper has been included in the C++20 draft, but the changes to add\nnoexcept can be made unconditionally, to apply for C++11 too.\n\n\t* include/std/chrono (duration_values::zero(), duration_values::min())\n\t(duration_values::max()): Add noexcept.\n\t(duration::zero(), duration::min(), duration::max()): Likewise.\n\t(time_point::zero(), time_point::min(), time_point::max()): Likewise.\n\t* testsuite/20_util/duration/requirements/noexcept.cc: New test.\n\t* testsuite/20_util/time_point/requirements/noexcept.cc: New test.\n\nFrom-SVN: r267865", "tree": {"sha": "61967e9e3bcec9ac2316154f7963b57bd7093a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61967e9e3bcec9ac2316154f7963b57bd7093a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89508a3fc645ef37340e31c74995c3078e1b1b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89508a3fc645ef37340e31c74995c3078e1b1b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89508a3fc645ef37340e31c74995c3078e1b1b9b"}], "stats": {"total": 107, "additions": 99, "deletions": 8}, "files": [{"sha": "1a0211336b31bd8319ebf8ba93733c75a44c2d3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "patch": "@@ -1,5 +1,12 @@\n 2019-01-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/chrono (duration_values::zero(), duration_values::min())\n+\t(duration_values::max()): Add noexcept.\n+\t(duration::zero(), duration::min(), duration::max()): Likewise.\n+\t(time_point::zero(), time_point::min(), time_point::max()): Likewise.\n+\t* testsuite/20_util/duration/requirements/noexcept.cc: New test.\n+\t* testsuite/20_util/time_point/requirements/noexcept.cc: New test.\n+\n \t* include/std/version (__cpp_lib_erase_if): Move to C++20 group.\n \n 2019-01-11  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "9e63fa9c6984b45d79c0c674742a92804e006c47", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "patch": "@@ -273,15 +273,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct duration_values\n       {\n \tstatic constexpr _Rep\n-\tzero()\n+\tzero() noexcept\n \t{ return _Rep(0); }\n \n \tstatic constexpr _Rep\n-\tmax()\n+\tmax() noexcept\n \t{ return numeric_limits<_Rep>::max(); }\n \n \tstatic constexpr _Rep\n-\tmin()\n+\tmin() noexcept\n \t{ return numeric_limits<_Rep>::lowest(); }\n       };\n \n@@ -428,15 +428,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t// 20.11.5.4 special values\n \tstatic constexpr duration\n-\tzero()\n+\tzero() noexcept\n \t{ return duration(duration_values<rep>::zero()); }\n \n \tstatic constexpr duration\n-\tmin()\n+\tmin() noexcept\n \t{ return duration(duration_values<rep>::min()); }\n \n \tstatic constexpr duration\n-\tmax()\n+\tmax() noexcept\n \t{ return duration(duration_values<rep>::max()); }\n \n       private:\n@@ -666,11 +666,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t// special values\n \tstatic constexpr time_point\n-\tmin()\n+\tmin() noexcept\n \t{ return time_point(duration::min()); }\n \n \tstatic constexpr time_point\n-\tmax()\n+\tmax() noexcept\n \t{ return time_point(duration::max()); }\n \n       private:"}, {"sha": "03bad272ff4d374673197424327874743d233e51", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/noexcept.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fnoexcept.cc?ref=5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// P0972R0 <chrono> zero(), min(), and max() should be noexcept\n+\n+#include <chrono>\n+\n+using namespace std;\n+\n+using vals = chrono::duration_values<short>;\n+static_assert( noexcept(vals::zero()), \"duration_values::zero()\" );\n+static_assert( noexcept(vals::min()), \"duration_values::min()\" );\n+static_assert( noexcept(vals::max()), \"duration_values::max()\" );\n+\n+using dur1 = chrono::system_clock::duration;\n+static_assert( noexcept(dur1::zero()), \"duration::zero()\" );\n+static_assert( noexcept(dur1::min()), \"duration::min()\" );\n+static_assert( noexcept(dur1::max()), \"duration::max()\" );\n+\n+using dur2 = chrono::duration<short, ratio<10>>;\n+static_assert( noexcept(dur2::zero()), \"duration::zero()\" );\n+static_assert( noexcept(dur2::min()), \"duration::min()\" );\n+static_assert( noexcept(dur2::max()), \"duration::max()\" );"}, {"sha": "075cbbc6feef2e9705348662f54068cd34c4ff86", "filename": "libstdc++-v3/testsuite/20_util/time_point/requirements/noexcept.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Frequirements%2Fnoexcept.cc?ref=5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// P0972R0 <chrono> zero(), min(), and max() should be noexcept\n+\n+#include <chrono>\n+\n+using namespace std;\n+\n+using tp1 = chrono::system_clock::time_point;\n+static_assert( noexcept(tp1::min()), \"time_point::min()\" );\n+static_assert( noexcept(tp1::max()), \"time_point::max()\" );\n+\n+struct Clock {\n+  using rep = int;\n+  using period = ratio<1, 24>;\n+  using duration = chrono::duration<rep, period>;\n+  using time_point = chrono::time_point<Clock>;\n+  static constexpr bool is_steady = false;\n+  static time_point now() noexcept;\n+};\n+\n+using tp2 = Clock::time_point;\n+static_assert( noexcept(tp2::min()), \"time_point::min()\" );\n+static_assert( noexcept(tp2::max()), \"time_point::max()\" );\n+\n+using tp3 = chrono::time_point<Clock, chrono::duration<long, ratio<10>>>;\n+static_assert( noexcept(tp3::min()), \"time_point::min()\" );\n+static_assert( noexcept(tp3::max()), \"time_point::max()\" );"}]}