{"sha": "975672f3573329b6ef9f687b706c566944a5887f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1NjcyZjM1NzMzMjliNmVmOWY2ODdiNzA2YzU2Njk0NGE1ODg3Zg==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2016-11-13T19:38:36Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-11-13T19:38:36Z"}, "message": "re PR tree-optimization/35503 (Warning about restricted pointers?)\n\n2016-11-13  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR c/35503\n\t* doc/invoke.texi: Document Wrestrict.\n\t* pretty-print.c (pp_format): Add case for \"Z\" specifier.\n\t(test_pp_format): Test \"Z\" specifier.\nc-family/\n\t* c-common.h (warn_for_restrict): Declare.\n\t* c-warn.c: Include gcc-rich-location.h.\n\t(warn_for_restrict): New function.\n\t* c-format.c (gcc_tdiag_char_table): Add entry for \"Z\" specifier.\n\t(gcc_cdiag_char_table): Likewise.\n\t(gcc_cxxdiag_char_table): Likewise.\n\t* c.opt (Wrestrict): New option.\nc/\n\t* c-parser.c (c_parser_postfix_expression_after_primary): Call\n\twarn_for_restrict.\ncp/\n\t* parser.c (cp_parser_postfix_pexpression): Call warn_for_restrict.\ntestsuite/\n\t* c-c++-common/pr35503-1.c: New test.\n\t* c-c++-common/pr35503-2.c: Likewise.\n\t* c-c++-common/pr35503-3.c: Likewise.\n\t* gcc.dg/format/gcc_diag-1.c: Add tests for \"Z\" specifier.\n\nFrom-SVN: r242366", "tree": {"sha": "9aad4b4532ab8376d649d4e85993c1dd06279056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aad4b4532ab8376d649d4e85993c1dd06279056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975672f3573329b6ef9f687b706c566944a5887f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975672f3573329b6ef9f687b706c566944a5887f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975672f3573329b6ef9f687b706c566944a5887f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975672f3573329b6ef9f687b706c566944a5887f/comments", "author": null, "committer": null, "parents": [{"sha": "8d5a1b4f64ed7e4c3712ec1a27c59441e89e5ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5a1b4f64ed7e4c3712ec1a27c59441e89e5ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5a1b4f64ed7e4c3712ec1a27c59441e89e5ea9"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "b9de75bd9e20795a779e73b6591d41f878903cc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -1,3 +1,23 @@\n+2016-11-13  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/35503\n+\t* doc/invoke.texi: Document Wrestrict.\n+\t* pretty-print.c (pp_format): Add case for \"Z\" specifier.\n+\t(test_pp_format): Test \"Z\" specifier.\n+c-family/\n+\t* c-common.h (warn_for_restrict): Declare.\n+\t* c-warn.c: Include gcc-rich-location.h.\n+\t(warn_for_restrict): New function.\n+\t* c-format.c (gcc_tdiag_char_table): Add entry for \"Z\" specifier.\n+\t(gcc_cdiag_char_table): Likewise.\n+\t(gcc_cxxdiag_char_table): Likewise.\n+\t* c.opt (Wrestrict): New option.\n+c/\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Call\n+\twarn_for_restrict.\n+cp/\n+\t* parser.c (cp_parser_postfix_pexpression): Call warn_for_restrict.\n+\n 2016-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ipa-icf.c (sem_function::merge): Do not create a wrapper also if the"}, {"sha": "4f27f81b5b3a6adfa31220bfd22fbbd92d62f73b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -1492,6 +1492,7 @@ extern void warnings_for_convert_and_check (location_t, tree, tree, tree);\n extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n \t\t\t\t  bool);\n extern void warn_for_omitted_condop (location_t, tree);\n+extern void warn_for_restrict (unsigned, vec<tree, va_gc> *);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "8a4bf6f0d29a6f9d3619024a1963a4135da7c93b", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -713,6 +713,7 @@ static const format_char_info gcc_tdiag_char_table[] =\n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n   { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n+  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -736,6 +737,7 @@ static const format_char_info gcc_cdiag_char_table[] =\n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n   { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n+  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -762,6 +764,7 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"cR\",   NULL },\n   { \"<>'R\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n+  { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_tdiag_char_table[0] },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n "}, {"sha": "7197fe3d75024ffb0aa3466e2e8a7e0e44bba40e", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"intl.h\"\n #include \"asan.h\"\n+#include \"gcc-rich-location.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -2161,3 +2162,58 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n \t\t    \"with boolean expression is always false\", cst);\n     }\n }\n+\n+/* Warn if an argument at position param_pos is passed to a\n+   restrict-qualified param, and it aliases with another argument.  */\n+\n+void\n+warn_for_restrict (unsigned param_pos, vec<tree, va_gc> *args)\n+{\n+  tree arg = (*args)[param_pos];\n+  if (TREE_VISITED (arg) || operand_equal_p (arg, null_pointer_node, 0))\n+    return;\n+\n+  location_t loc = EXPR_LOC_OR_LOC (arg, input_location);\n+  gcc_rich_location richloc (loc);\n+\n+  unsigned i;\n+  tree current_arg;\n+  int *arg_positions = XNEWVEC (int, args->length ());\n+  unsigned arg_positions_len = 0;\n+\n+  FOR_EACH_VEC_ELT (*args, i, current_arg) \n+    {\n+      if (i == param_pos)\n+\tcontinue;\n+\n+      tree current_arg = (*args)[i];\n+      if (operand_equal_p (arg, current_arg, 0))\n+\t{\n+\t  TREE_VISITED (current_arg) = 1; \n+\t  arg_positions[arg_positions_len++] = (i + 1);\n+\t}\n+    }\n+\n+  if (arg_positions_len == 0)\n+    {\n+      free (arg_positions);\n+      return;\n+    }\n+\n+  for (unsigned i = 0; i < arg_positions_len; i++)\n+    {\n+      unsigned pos = arg_positions[i];\n+      tree arg = (*args)[pos - 1];\n+      if (EXPR_HAS_LOCATION (arg))\n+\trichloc.add_range (EXPR_LOCATION (arg), false);\n+    }\n+\n+  warning_at_rich_loc_n (&richloc, OPT_Wrestrict, arg_positions_len,\n+\t\t\t \"passing argument %i to restrict-qualified parameter\"\n+\t\t\t \" aliases with argument %Z\",\n+\t\t\t \"passing argument %i to restrict-qualified parameter\"\n+\t\t\t \" aliases with arguments %Z\",\n+\t\t\t param_pos + 1, arg_positions, arg_positions_len);\n+\n+  free (arg_positions);\n+}"}, {"sha": "cf946e7b86ea28255104af51a85f2bf3a6709402", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -1085,6 +1085,11 @@ Wduplicate-decl-specifier\n C ObjC Var(warn_duplicate_decl_specifier) Warning LangEnabledBy(C ObjC,Wall)\n Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.\n \n+Wrestrict\n+C ObjC C++ ObjC++ Var(warn_restrict) Warning LangEnabledBy(C ObjC C++ ObjC++)\n+Warn when an argument passed to a restrict-qualified parameter aliases with\n+another argument.\n+\n ansi\n C ObjC C++ ObjC++\n A synonym for -std=c89 (for C) or -std=c++98 (for C++)."}, {"sha": "52a5eddff7b46acdc1061629bb8ba7541873c683", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -8451,6 +8451,28 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t      warn_for_memset (expr_loc, arg0, arg2, literal_zero_mask);\n \t    }\n \n+\t  if (TREE_CODE (expr.value) == FUNCTION_DECL && warn_restrict)\n+\t    {\n+\t      unsigned i;\n+\t      tree arg;\n+\t      FOR_EACH_VEC_SAFE_ELT (exprlist, i, arg)\n+\t\tTREE_VISITED (arg) = 0;\n+\n+\t      unsigned param_pos = 0;\n+\t      function_args_iterator iter;\n+\t      tree t;\n+\t      FOREACH_FUNCTION_ARGS (TREE_TYPE (expr.value), t, iter)\n+\t\t{\n+\t\t  if (POINTER_TYPE_P (t) && TYPE_RESTRICT (t)\n+\t\t      && !TYPE_READONLY (TREE_TYPE (t)))\n+\t\t    warn_for_restrict (param_pos, exprlist);\n+\t\t  param_pos++;\n+\t\t}\n+\n+\t      FOR_EACH_VEC_SAFE_ELT (exprlist, i, arg)\n+\t\tTREE_VISITED (arg) = 0;\n+\t    }\n+\n \t  start = expr.get_start ();\n \t  finish = parser->tokens_buf[0].get_finish ();\n \t  expr.value"}, {"sha": "1efe4eaf7d72afe75564f2654cc0b22c96ab3efc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -6925,6 +6925,29 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\twarn_for_memset (input_location, arg0, arg2, literal_mask);\n \t      }\n \n+\t    if (TREE_CODE (postfix_expression) == FUNCTION_DECL\n+\t\t&& warn_restrict)\n+\t      {\n+\t\tunsigned i;\n+\t\ttree arg;\n+\t\tFOR_EACH_VEC_SAFE_ELT (args, i, arg)\n+\t\t  TREE_VISITED (arg) = 0;\n+\n+\t\tunsigned param_pos = 0;\n+\t\tfor (tree decl = DECL_ARGUMENTS (postfix_expression);\n+\t\t     decl != NULL_TREE;\n+\t\t     decl = DECL_CHAIN (decl), param_pos++)\n+\t\t  {\n+\t\t    tree type = TREE_TYPE (decl);\n+\t\t    if (POINTER_TYPE_P (type) && TYPE_RESTRICT (type)\n+\t\t\t&& !TYPE_READONLY (TREE_TYPE (type)))\n+\t\t      warn_for_restrict (param_pos, args);\n+\t\t  }\n+\n+\t\tFOR_EACH_VEC_SAFE_ELT (args, i, arg)\n+\t\t  TREE_VISITED (arg) = 0;\n+\t      }\n+\n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)\n \t      {\n \t\ttree instance = TREE_OPERAND (postfix_expression, 0);"}, {"sha": "eb89804a8b7be6a5ef0468a7556151d901e8b8b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -292,7 +292,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wparentheses -Wno-pedantic-ms-format @gol\n -Wplacement-new -Wplacement-new=@var{n} @gol\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n--Wno-pragmas -Wredundant-decls  -Wno-return-local-addr @gol\n+-Wno-pragmas -Wredundant-decls -Wrestrict  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n -Wshadow=global, -Wshadow=local, -Wshadow=compatible-local @gol\n -Wshift-overflow -Wshift-overflow=@var{n} @gol\n@@ -6187,6 +6187,12 @@ reduce the padding and so make the structure smaller.\n Warn if anything is declared more than once in the same scope, even in\n cases where multiple declaration is valid and changes nothing.\n \n+@item -Wrestrict\n+@opindex Wrestrict\n+@opindex Wno-restrict\n+Warn when an argument passed to a restrict-qualified parameter\n+aliases with another argument.\n+\n @item -Wnested-externs @r{(C and Objective-C only)}\n @opindex Wnested-externs\n @opindex Wno-nested-externs"}, {"sha": "e58619dcda70a3220d19ab171e8a1aa261d128b2", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -294,6 +294,8 @@ pp_indent (pretty_printer *pp)\n \t integer.\n    %Ns: likewise, but length specified as constant in the format string.\n    Flag 'q': quote formatted text (must come immediately after '%').\n+   %Z: Requires two arguments - array of int, and len. Prints elements\n+   of the array.\n \n    Arguments can be used sequentially, or through %N$ resp. *N$\n    notation Nth argument after the format string.  If %N$ / *N$\n@@ -610,6 +612,23 @@ pp_format (pretty_printer *pp, text_info *text)\n \t      (pp, *text->args_ptr, precision, unsigned, \"u\");\n \t  break;\n \n+\tcase 'Z':\n+\t  {\n+\t    int *v = va_arg (*text->args_ptr, int *);\n+\t    unsigned len = va_arg (*text->args_ptr, unsigned); \n+\n+\t    for (unsigned i = 0; i < len; ++i)\n+\t      {\n+\t\tpp_scalar (pp, \"%i\", v[i]);\n+\t\tif (i < len - 1)\n+\t\t  {\n+\t\t    pp_comma (pp);\n+\t\t    pp_space (pp);\n+\t\t  }\n+\t      }\n+\t    break;\n+\t }\n+\n \tcase 'x':\n \t  if (wide)\n \t    pp_scalar (pp, HOST_WIDE_INT_PRINT_HEX,\n@@ -1424,6 +1443,13 @@ test_pp_format ()\n \t\t\t    \"`\\33[01m\\33[Kfoo\\33[m\\33[K' 12345678\", \"%qs %x\",\n \t\t\t    \"foo\", 0x12345678);\n \n+  /* Verify %Z.  */\n+  int v[] = { 1, 2, 3 }; \n+  ASSERT_PP_FORMAT_3 (\"1, 2, 3 12345678\", \"%Z %x\", v, 3, 0x12345678);\n+\n+  int v2[] = { 0 }; \n+  ASSERT_PP_FORMAT_3 (\"0 12345678\", \"%Z %x\", v2, 1, 0x12345678);\n+\n   /* Verify that combinations work, along with unformatted text.  */\n   assert_pp_format (SELFTEST_LOCATION,\n \t\t    \"the quick brown fox jumps over the lazy dog\","}, {"sha": "a83c6e7a84b74492402bc9f1b80b801a540b4e64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -1,3 +1,11 @@\n+2016-11-13  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR c/35503\n+\t* c-c++-common/pr35503-1.c: New test.\n+\t* c-c++-common/pr35503-2.c: Likewise.\n+\t* c-c++-common/pr35503-3.c: Likewise.\n+\t* gcc.dg/format/gcc_diag-1.c: Add tests for \"Z\" specifier.\n+\n 2016-11-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/78232"}, {"sha": "25e3721df939009262c7cb757e7f9c71bfe441f3", "filename": "gcc/testsuite/c-c++-common/pr35503-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wrestrict\" } */\n+\n+int foo (char *__restrict buf, const char *__restrict fmt, ...);\n+\n+void f(void)\n+{\n+  char buf[100] = \"hello\";\n+  foo (buf, \"%s-%s\", buf, \"world\"); /*  { dg-warning \"passing argument 1 to restrict-qualified parameter aliases with argument 3\" } */\n+}"}, {"sha": "bfcd9448e03e7e59bb1162e272e56d98400db359", "filename": "gcc/testsuite/c-c++-common/pr35503-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-show-caret -Wrestrict\" } */\n+\n+void f(int *__restrict x, int *y, int *__restrict z, int *w);\n+\n+void foo(int alpha, int beta)\n+{\n+  f (&alpha, &beta, &alpha, &alpha); /* { dg-warning \"passing argument 1 to restrict-qualified parameter aliases with arguments 3, 4\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   f (&alpha, &beta, &alpha, &alpha);\n+      ^~~~~~         ~~~~~~  ~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "8cbacabba62466e63d47bac4b7d45f1c23c586c1", "filename": "gcc/testsuite/c-c++-common/pr35503-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wrestrict\" } */\n+\n+void f(int *x, int *__restrict y);\n+\n+void foo(int a)\n+{\n+  f (&a, &a); /* { dg-warning \"passing argument 2 to restrict-qualified parameter aliases with argument 1\" } */\n+}"}, {"sha": "f4922cd4966a62fc8d7c088bd4864ce0d0b2f789", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975672f3573329b6ef9f687b706c566944a5887f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=975672f3573329b6ef9f687b706c566944a5887f", "patch": "@@ -32,7 +32,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n      ullong ull, unsigned int *un, const int *cn, signed char *ss,\n      unsigned char *us, const signed char *css, unsigned int u1,\n      unsigned int u2, location_t *loc, tree t1, union tree_node *t2,\n-     tree *t3, tree t4[])\n+     tree *t3, tree t4[], int *v, unsigned v_len)\n {\n   /* Acceptable C90 specifiers, flags and modifiers.  */\n   diag (\"%%\");\n@@ -90,6 +90,10 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cdiag (\"%v%qv%#v\", i, i, i);\n   cxxdiag (\"%v%qv%#v\", i, i, i);\n \n+  tdiag (\"%Z\", v, v_len);\n+  cdiag (\"%Z\", v, v_len);\n+  cxxdiag (\"%Z\", v, v_len);\n+\n   /* Bad stuff with extensions.  */\n   diag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n   tdiag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n@@ -133,6 +137,9 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cdiag (\"%v\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%v\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n \n+  tdiag (\"%Z\"); /* { dg-warning \"format\" \"missing arg\" } */\n+  tdiag (\"%Z\", t1); /* { dg-warning \"format\" \"wrong arg\" } */\n+\n   /* Standard specifiers not accepted in the diagnostic framework.  */\n   diag (\"%X\\n\", u); /* { dg-warning \"format\" \"HEX\" } */\n   diag (\"%f\\n\", d); /* { dg-warning \"format\" \"float\" } */"}]}