{"sha": "bc1146e5e0979421b5dc2c9c005c355443c2fe24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxMTQ2ZTVlMDk3OTQyMWI1ZGMyYzljMDA1YzM1NTQ0M2MyZmUyNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-04T08:05:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:05:40Z"}, "message": "[Ada] Minor reformatting\n\n2019-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* erroutc.adb, exp_aggr.adb, inline.adb, opt.adb, sem_ch3.adb:\n\tMinor reformatting.\n\nFrom-SVN: r273051", "tree": {"sha": "f607c1e02938184f1acd0bb9d4370de81f77930e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f607c1e02938184f1acd0bb9d4370de81f77930e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc1146e5e0979421b5dc2c9c005c355443c2fe24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1146e5e0979421b5dc2c9c005c355443c2fe24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1146e5e0979421b5dc2c9c005c355443c2fe24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1146e5e0979421b5dc2c9c005c355443c2fe24/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b04fe972e31570bfb09ae398576c1c79847a9f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fe972e31570bfb09ae398576c1c79847a9f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04fe972e31570bfb09ae398576c1c79847a9f28"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "6f300dceb816be1ac718f46c168c834ddca82f90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -1,3 +1,8 @@\n+2019-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* erroutc.adb, exp_aggr.adb, inline.adb, opt.adb, sem_ch3.adb:\n+\tMinor reformatting.\n+\n 2019-07-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_spark.adb (Explanation, Get_Expl): New functions to get"}, {"sha": "2ea0c2d2809158c38e7757133cd8b794c69f0d90", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -1606,6 +1606,7 @@ package body Erroutc is\n          if Start <= Cur_Loc and then Cur_Loc <= Stop then\n             return True;\n          end if;\n+\n          Cur_Loc := Instantiation_Location (Cur_Loc);\n       end loop;\n "}, {"sha": "7c41477e32d54b30b3da88ad7aa718b9a7baa3b7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -1343,11 +1343,11 @@ package body Exp_Aggr is\n             --  transient scope, which leads to premature finalization.\n \n             --  This in-place expansion is not performed for limited transient\n-            --  objects because the initialization is already done in-place.\n+            --  objects, because the initialization is already done in place.\n \n             if In_Place_Expansion then\n \n-               --  Suppress the removal of side effects by general analysis\n+               --  Suppress the removal of side effects by general analysis,\n                --  because this behavior is emulated here. This avoids the\n                --  generation of a transient scope, which leads to out-of-order\n                --  adjustment and finalization.\n@@ -4181,8 +4181,8 @@ package body Exp_Aggr is\n                      return False;\n                   end if;\n \n-               --  If association has a box, no way to determine yet\n-               --  whether default can be assigned in place.\n+               --  If association has a box, no way to determine yet whether\n+               --  default can be assigned in place.\n \n                elsif Box_Present (Expr) then\n                   return False;\n@@ -4239,8 +4239,8 @@ package body Exp_Aggr is\n                         and then Is_Array\n                         and then Check_Component (Prefix (Comp)))\n \n-              or else (Nkind_In (Comp, N_Unchecked_Type_Conversion,\n-                                 N_Type_Conversion)\n+              or else (Nkind_In (Comp, N_Type_Conversion,\n+                                       N_Unchecked_Type_Conversion)\n                         and then Check_Component (Expression (Comp)));\n          end Check_Component;\n \n@@ -4269,12 +4269,10 @@ package body Exp_Aggr is\n \n                return False;\n \n-            elsif Nkind (Parent (Expr)) =\n-                    N_Iterated_Component_Association\n-            then\n-               --  Ditto for iterated component associations, which in\n-               --  general require an enclosing loop and involve nonstatic\n-               --  expressions.\n+            elsif Nkind (Parent (Expr)) = N_Iterated_Component_Association then\n+\n+               --  Ditto for iterated component associations, which in general\n+               --  require an enclosing loop and involve nonstatic expressions.\n \n                return False;\n             end if;\n@@ -4469,8 +4467,8 @@ package body Exp_Aggr is\n          Establish_Transient_Scope (N, Manage_Sec_Stack => False);\n       end if;\n \n-      --  If the aggregate is nonlimited, create a temporary since aggregates\n-      --  have \"by copy\" semantic. If it is limited and context is an\n+      --  If the aggregate is nonlimited, create a temporary, since aggregates\n+      --  have \"by copy\" semantics. If it is limited and context is an\n       --  assignment, this is a subaggregate for an enclosing aggregate being\n       --  expanded. It must be built in place, so use target of the current\n       --  assignment.\n@@ -4484,7 +4482,7 @@ package body Exp_Aggr is\n          Rewrite (Parent (N), Make_Null_Statement (Loc));\n \n       --  Do not declare a temporary to initialize an aggregate assigned to an\n-      --  identifier when in place assignment is possible preserving the\n+      --  identifier when in-place assignment is possible, preserving the\n       --  by-copy semantic of aggregates. This avoids large stack usage and\n       --  generates more efficient code.\n \n@@ -5122,7 +5120,7 @@ package body Exp_Aggr is\n    --     case pass it as is to Gigi. Note that a necessary condition for\n    --     static processing is that the aggregate be fully positional.\n \n-   --  5. If in place aggregate expansion is possible (i.e. no need to create\n+   --  5. If in-place aggregate expansion is possible (i.e. no need to create\n    --     a temporary) then mark the aggregate as such and return. Otherwise\n    --     create a new temporary and generate the appropriate initialization\n    --     code.\n@@ -5146,7 +5144,7 @@ package body Exp_Aggr is\n       --  The type of each index\n \n       In_Place_Assign_OK_For_Declaration : Boolean := False;\n-      --  True if we are to generate an in place assignment for a declaration\n+      --  True if we are to generate an in-place assignment for a declaration\n \n       Maybe_In_Place_OK : Boolean;\n       --  If the type is neither controlled nor packed and the aggregate\n@@ -6214,7 +6212,7 @@ package body Exp_Aggr is\n \n       --  STEP 4\n \n-      --  Look if in place aggregate expansion is possible\n+      --  Check whether in-place aggregate expansion is possible\n \n       --  For object declarations we build the aggregate in place, unless\n       --  the array is bit-packed.\n@@ -6366,7 +6364,7 @@ package body Exp_Aggr is\n \n       --  Step 5\n \n-      --  In place aggregate expansion is not possible\n+      --  In-place aggregate expansion is not possible\n \n       else\n          Maybe_In_Place_OK := False;\n@@ -6418,11 +6416,11 @@ package body Exp_Aggr is\n             Target := New_Copy (Tmp);\n          end if;\n \n-         --  If we are to generate an in place assignment for a declaration or\n+         --  If we are to generate an in-place assignment for a declaration or\n          --  an assignment statement, and the assignment can be done directly\n          --  by the back end, then do not expand further.\n \n-         --  ??? We can also do that if in place expansion is not possible but\n+         --  ??? We can also do that if in-place expansion is not possible but\n          --  then we could go into an infinite recursion.\n \n          if (In_Place_Assign_OK_For_Declaration or else Maybe_In_Place_OK)\n@@ -7683,8 +7681,8 @@ package body Exp_Aggr is\n       P : Node_Id := Parent (N);\n \n    begin\n-      --  Aggregates are not supported for non standard rep clauses since\n-      --  they may lead to extra padding fields in CCG.\n+      --  Aggregates are not supported for nonstandard rep clauses, since they\n+      --  may lead to extra padding fields in CCG.\n \n       if Ekind (Etype (N)) in Record_Kind\n         and then Has_Non_Standard_Rep (Etype (N))"}, {"sha": "907975e8e5126b619aa70b560dfc3ce0b44dc45d", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -2481,8 +2481,7 @@ package body Inline is\n       --  thunk generated for it. Replace a return statement with an assignment\n       --  to the target of the call, with appropriate conversions if needed.\n \n-      function Process_Formals_In_Aspects (N : Node_Id)\n-        return Traverse_Result;\n+      function Process_Formals_In_Aspects (N : Node_Id) return Traverse_Result;\n       --  Because aspects are linked indirectly to the rest of the tree,\n       --  replacement of formals appearing in aspect specifications must\n       --  be performed in a separate pass, using an instantiation of the\n@@ -2832,10 +2831,11 @@ package body Inline is\n       -- Process_Formals_In_Aspects --\n       --------------------------------\n \n-      function Process_Formals_In_Aspects (N : Node_Id)\n-        return Traverse_Result\n+      function Process_Formals_In_Aspects\n+        (N : Node_Id) return Traverse_Result\n       is\n          A : Node_Id;\n+\n       begin\n          if Has_Aspects (N) then\n             A := First (Aspect_Specifications (N));\n@@ -2849,7 +2849,7 @@ package body Inline is\n       end Process_Formals_In_Aspects;\n \n       procedure Replace_Formals_In_Aspects is\n-         new Traverse_Proc (Process_Formals_In_Aspects);\n+        new Traverse_Proc (Process_Formals_In_Aspects);\n \n       ------------------\n       -- Process_Sloc --"}, {"sha": "4ceffb02c367f74789a8e6f71315a3e552143043", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -254,6 +254,7 @@ package body Opt is\n             if GNATprove_Mode then\n                pragma Assert (Assertions_Enabled);\n                null;\n+\n             elsif GNAT_Mode_Config then\n                Assertions_Enabled    := Assertions_Enabled_Config;\n             else"}, {"sha": "a82c2bca23d165b3defab0b276af527f82c7e59a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1146e5e0979421b5dc2c9c005c355443c2fe24/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bc1146e5e0979421b5dc2c9c005c355443c2fe24", "patch": "@@ -930,7 +930,8 @@ package body Sem_Ch3 is\n       --  declaration may include an expression that is an allocator, whose\n       --  expansion needs the proper Master for the created tasks.\n \n-      if Nkind (Related_Nod) = N_Object_Declaration and then Expander_Active\n+      if Expander_Active\n+        and then Nkind (Related_Nod) = N_Object_Declaration\n       then\n          if Is_Limited_Record (Desig_Type)\n            and then Is_Class_Wide_Type (Desig_Type)\n@@ -940,7 +941,8 @@ package body Sem_Ch3 is\n          --  Similarly, if the type is an anonymous access that designates\n          --  tasks, create a master entity for it in the current context.\n \n-         elsif Has_Task (Desig_Type) and then Comes_From_Source (Related_Nod)\n+         elsif Has_Task (Desig_Type)\n+           and then Comes_From_Source (Related_Nod)\n          then\n             Build_Master_Entity (Defining_Identifier (Related_Nod));\n             Build_Master_Renaming (Anon_Type);"}]}