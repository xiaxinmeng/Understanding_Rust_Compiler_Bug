{"sha": "1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzZTMyZGNiZmU3YmVmNTVmM2NjNzFiYjEyYWE2MTkwMWQ3MDE1NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-15T16:47:17Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-15T16:47:17Z"}, "message": "basic-block.h (PROP_EQUAL_NOTES): Remove.\n\n\t* basic-block.h (PROP_EQUAL_NOTES): Remove.\n\t* flow.c (propagate_one_insn): Don't use PROP_EQUAL_NOTES.\n\nFrom-SVN: r98193", "tree": {"sha": "2e7c90efad5f8873e504fc43ad412da106c317d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7c90efad5f8873e504fc43ad412da106c317d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/comments", "author": null, "committer": null, "parents": [{"sha": "b0f8196667a9200696f787820178cf7cf2ab5abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f8196667a9200696f787820178cf7cf2ab5abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f8196667a9200696f787820178cf7cf2ab5abe"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "e0784ef5145e4c017e1551344261cd4b37063e9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "patch": "@@ -1,3 +1,8 @@\n+2005-04-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* basic-block.h (PROP_EQUAL_NOTES): Remove.\n+\t* flow.c (propagate_one_insn): Don't use PROP_EQUAL_NOTES.\n+\n 2005-04-15  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-vect-analyze.c (vect_stmt_relevant_p): Process immediate uses "}, {"sha": "447438cc2d1eaf7574912b565723ac528a3f5afd", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "patch": "@@ -780,7 +780,6 @@ enum update_life_extent\n #define PROP_ALLOW_CFG_CHANGES\t32\t/* Allow the CFG to be changed\n \t\t\t\t\t   by dead code removal.  */\n #define PROP_AUTOINC\t\t64\t/* Create autoinc mem references.  */\n-#define PROP_EQUAL_NOTES\t128\t/* Take into account REG_EQUAL notes.  */\n #define PROP_SCAN_DEAD_STORES\t256\t/* Scan for dead code.  */\n #define PROP_ASM_SCAN\t\t512\t/* Internal flag used within flow.c\n \t\t\t\t\t   to flag analysis of asms.  */"}, {"sha": "3251dd699abd0fb778e4eb42d05b73729fc79531", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3e32dcbfe7bef55f3cc71bb12aa61901d70154/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=1b3e32dcbfe7bef55f3cc71bb12aa61901d70154", "patch": "@@ -1798,7 +1798,6 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n     }\n   else\n     {\n-      rtx note;\n       /* Any regs live at the time of a call instruction must not go\n \t in a register clobbered by calls.  Find all regs now live and\n \t record this for them.  */\n@@ -1873,10 +1872,6 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n       /* Record uses.  */\n       if (! insn_is_dead)\n \tmark_used_regs (pbi, PATTERN (insn), NULL_RTX, insn);\n-      if ((flags & PROP_EQUAL_NOTES)\n-\t  && ((note = find_reg_note (insn, REG_EQUAL, NULL_RTX))\n-\t      || (note = find_reg_note (insn, REG_EQUIV, NULL_RTX))))\n-\tmark_used_regs (pbi, XEXP (note, 0), NULL_RTX, insn);\n \n       /* Sometimes we may have inserted something before INSN (such as a move)\n \t when we make an auto-inc.  So ensure we will scan those insns.  */"}]}