{"sha": "2953b72fdd6c7d812028a636dfadf1c0e89ca314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1M2I3MmZkZDZjN2Q4MTIwMjhhNjM2ZGZhZGYxYzBlODljYTMxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-20T16:36:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-20T16:36:18Z"}, "message": "re PR target/80846 (auto-vectorized AVX2 horizontal sum should narrow to 128b right away, to be more efficient for Ryzen and Intel)\n\n\tPR target/80846\n\t* config/i386/i386.c (ix86_expand_vector_init_general): Handle\n\tV2TImode and V4TImode.\n\t(ix86_expand_vector_extract): Likewise.\n\t* config/i386/sse.md (VMOVE): Enable V4TImode even for just\n\tTARGET_AVX512F, instead of only for TARGET_AVX512BW.\n\t(ssescalarmode): Handle V4TImode and V2TImode.\n\t(VEC_EXTRACT_MODE): Add V4TImode and V2TImode.\n\t(*vec_extractv2ti, *vec_extractv4ti): New insns.\n\t(VEXTRACTI128_MODE): New mode iterator.\n\t(splitter for *vec_extractv?ti first element): New.\n\t(VEC_INIT_MODE): New mode iterator.\n\t(vec_init<mode>): Consolidate 3 expanders into one using\n\tVEC_INIT_MODE mode iterator.\n\n\t* gcc.target/i386/avx-pr80846.c: New test.\n\t* gcc.target/i386/avx2-pr80846.c: New test.\n\t* gcc.target/i386/avx512f-pr80846.c: New test.\n\nFrom-SVN: r250397", "tree": {"sha": "9740f0c35cbe98159b4b9080aece0a6577c130a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9740f0c35cbe98159b4b9080aece0a6577c130a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2953b72fdd6c7d812028a636dfadf1c0e89ca314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2953b72fdd6c7d812028a636dfadf1c0e89ca314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2953b72fdd6c7d812028a636dfadf1c0e89ca314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2953b72fdd6c7d812028a636dfadf1c0e89ca314/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0a404561c4abc2fcb6015cc96ca779b8eecc411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a404561c4abc2fcb6015cc96ca779b8eecc411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a404561c4abc2fcb6015cc96ca779b8eecc411"}], "stats": {"total": 177, "additions": 155, "deletions": 22}, "files": [{"sha": "9bc43b4dc882902155fc1bb16efa53d3fc5dcdb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -1,3 +1,20 @@\n+2017-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80846\n+\t* config/i386/i386.c (ix86_expand_vector_init_general): Handle\n+\tV2TImode and V4TImode.\n+\t(ix86_expand_vector_extract): Likewise.\n+\t* config/i386/sse.md (VMOVE): Enable V4TImode even for just\n+\tTARGET_AVX512F, instead of only for TARGET_AVX512BW.\n+\t(ssescalarmode): Handle V4TImode and V2TImode.\n+\t(VEC_EXTRACT_MODE): Add V4TImode and V2TImode.\n+\t(*vec_extractv2ti, *vec_extractv4ti): New insns.\n+\t(VEXTRACTI128_MODE): New mode iterator.\n+\t(splitter for *vec_extractv?ti first element): New.\n+\t(VEC_INIT_MODE): New mode iterator.\n+\t(vec_init<mode>): Consolidate 3 expanders into one using\n+\tVEC_INIT_MODE mode iterator.\n+\n 2017-07-20  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* lra-assigns.c (pseudo_compare_func): Fix comparison step based on"}, {"sha": "ca29135d39f8a2c5a686cbe17a6c9044095c49c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -44118,6 +44118,26 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n       ix86_expand_vector_init_concat (mode, target, ops, n);\n       return;\n \n+    case V2TImode:\n+      for (i = 0; i < 2; i++)\n+\tops[i] = gen_lowpart (V2DImode, XVECEXP (vals, 0, i));\n+      op0 = gen_reg_rtx (V4DImode);\n+      ix86_expand_vector_init_concat (V4DImode, op0, ops, 2);\n+      emit_move_insn (target, gen_lowpart (GET_MODE (target), op0));\n+      return;\n+\n+    case V4TImode:\n+      for (i = 0; i < 4; i++)\n+\tops[i] = gen_lowpart (V2DImode, XVECEXP (vals, 0, i));\n+      ops[4] = gen_reg_rtx (V4DImode);\n+      ix86_expand_vector_init_concat (V4DImode, ops[4], ops, 2);\n+      ops[5] = gen_reg_rtx (V4DImode);\n+      ix86_expand_vector_init_concat (V4DImode, ops[5], ops + 2, 2);\n+      op0 = gen_reg_rtx (V8DImode);\n+      ix86_expand_vector_init_concat (V8DImode, op0, ops + 4, 2);\n+      emit_move_insn (target, gen_lowpart (GET_MODE (target), op0));\n+      return;\n+\n     case V32QImode:\n       half_mode = V16QImode;\n       goto half;\n@@ -44659,6 +44679,8 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \n     case V2DFmode:\n     case V2DImode:\n+    case V2TImode:\n+    case V4TImode:\n       use_vec_extr = true;\n       break;\n "}, {"sha": "56b7f436d5db7b028542e4b6219a95cc978b3c8f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 60, "deletions": 22, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -175,7 +175,7 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n-   (V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX\") V1TI\n+   (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\") V1TI\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n@@ -687,7 +687,8 @@\n    (V16SI \"SI\") (V8SI \"SI\")  (V4SI \"SI\")\n    (V8DI \"DI\")  (V4DI \"DI\")  (V2DI \"DI\")\n    (V16SF \"SF\") (V8SF \"SF\")  (V4SF \"SF\")\n-   (V8DF \"DF\")  (V4DF \"DF\")  (V2DF \"DF\")])\n+   (V8DF \"DF\")  (V4DF \"DF\")  (V2DF \"DF\")\n+   (V4TI \"TI\")  (V2TI \"TI\")])\n \n ;; Mapping of vector modes to the 128bit modes\n (define_mode_attr ssexmmmode\n@@ -6920,15 +6921,6 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,orig,maybe_evex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF\")])\n \n-(define_expand \"vec_init<mode>\"\n-  [(match_operand:V_128 0 \"register_operand\")\n-   (match_operand 1)]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n-  DONE;\n-})\n-\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n@@ -7886,7 +7878,8 @@\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n-   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n+   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF\n+   (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n \n (define_expand \"vec_extract<mode>\"\n   [(match_operand:<ssescalarmode> 0 \"register_operand\")\n@@ -13734,6 +13727,50 @@\n   operands[1] = adjust_address (operands[1], <ssescalarmode>mode, offs);\n })\n \n+(define_insn \"*vec_extractv2ti\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=xm,vm\")\n+\t(vec_select:TI\n+\t  (match_operand:V2TI 1 \"register_operand\" \"x,v\")\n+\t  (parallel\n+\t    [(match_operand:SI 2 \"const_0_to_1_operand\")])))]\n+  \"TARGET_AVX\"\n+  \"@\n+   vextract%~128\\t{%2, %1, %0|%0, %1, %2}\n+   vextracti32x4\\t{%2, %g1, %0|%0, %g1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"vex,evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n+(define_insn \"*vec_extractv4ti\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=vm\")\n+\t(vec_select:TI\n+\t  (match_operand:V4TI 1 \"register_operand\" \"v\")\n+\t  (parallel\n+\t    [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n+  \"TARGET_AVX512F\"\n+  \"vextracti32x4\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_mode_iterator VEXTRACTI128_MODE\n+  [(V4TI \"TARGET_AVX512F\") V2TI])\n+\n+(define_split\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\")\n+\t(vec_select:TI\n+\t  (match_operand:VEXTRACTI128_MODE 1 \"register_operand\")\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_AVX\n+   && reload_completed\n+   && (TARGET_AVX512VL || !EXT_REX_SSE_REG_P (operands[1]))\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = gen_lowpart (TImode, operands[1]);\")\n+\n ;; Turn SImode or DImode extraction from arbitrary SSE/AVX/AVX512F\n ;; vector modes into vec_extract*.\n (define_split\n@@ -18738,19 +18775,20 @@\n \t\t\t\t  <ssehalfvecmode>mode);\n })\n \n-(define_expand \"vec_init<mode>\"\n-  [(match_operand:V_256 0 \"register_operand\")\n-   (match_operand 1)]\n-  \"TARGET_AVX\"\n-{\n-  ix86_expand_vector_init (false, operands[0], operands[1]);\n-  DONE;\n-})\n+;; Modes handled by vec_init patterns.\n+(define_mode_iterator VEC_INIT_MODE\n+  [(V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI\n+   (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n+   (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n+   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n+   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")\n+   (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n \n (define_expand \"vec_init<mode>\"\n-  [(match_operand:VF48_I1248 0 \"register_operand\")\n+  [(match_operand:VEC_INIT_MODE 0 \"register_operand\")\n    (match_operand 1)]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_SSE\"\n {\n   ix86_expand_vector_init (false, operands[0], operands[1]);\n   DONE;"}, {"sha": "bafcb2c6382e0291439ad73b49de3f0da39a0b30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -1,3 +1,10 @@\n+2017-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80846\n+\t* gcc.target/i386/avx-pr80846.c: New test.\n+\t* gcc.target/i386/avx2-pr80846.c: New test.\n+\t* gcc.target/i386/avx512f-pr80846.c: New test.\n+\n 2017-07-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/81388"}, {"sha": "338f01039f23051abe0d4d81ac0931ef268ae458", "filename": "gcc/testsuite/gcc.target/i386/avx-pr80846.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80846.c?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/80846 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx -mno-avx2\" } */\n+\n+typedef __int128 V __attribute__((vector_size (32)));\n+typedef long long W __attribute__((vector_size (32)));\n+typedef int X __attribute__((vector_size (16)));\n+typedef __int128 Y __attribute__((vector_size (64)));\n+typedef long long Z __attribute__((vector_size (64)));\n+\n+W f1 (__int128 x, __int128 y) { return (W) ((V) { x, y }); }\n+__int128 f2 (W x) { return ((V)x)[0]; }\n+__int128 f3 (W x) { return ((V)x)[1]; }\n+W f4 (X x, X y) { union { X x; __int128 i; } u = { .x = x }, v = { .x = y }; return (W) ((V) { u.i, v.i }); }\n+X f5 (W x) { return (X)(((V)x)[0]); }\n+X f6 (W x) { return (X)(((V)x)[1]); }\n+W f7 (void) { return (W) ((V) { 2, 3 }); }\n+W f8 (X x) { union { X x; __int128 i; } u = { .x = x }; return (W) ((V) { u.i, 3 }); }\n+W f9 (X x) { union { X x; __int128 i; } u = { .x = x }; return (W) ((V) { 2, u.i }); }\n+W f10 (X x) { union { X x; __int128 i; } u = { .x = x }; return (W) ((V) { u.i, u.i }); }\n+#ifdef __AVX512F__\n+Z f11 (__int128 x, __int128 y, __int128 z, __int128 a) { return (Z) ((Y) { x, y, z, a }); }\n+__int128 f12 (Z x) { return ((Y)x)[0]; }\n+__int128 f13 (Z x) { return ((Y)x)[1]; }\n+__int128 f14 (Z x) { return ((Y)x)[2]; }\n+__int128 f15 (Z x) { return ((Y)x)[3]; }\n+Z f16 (X x, X y, X z, X a) { union { X x; __int128 i; } u = { .x = x }, v = { .x = y }, w = { .x = z }, t = { .x = a };\n+  return (Z) ((Y) { u.i, v.i, w.i, t.i }); }\n+X f17 (Z x) { return (X)(((Y)x)[0]); }\n+X f18 (Z x) { return (X)(((Y)x)[1]); }\n+X f19 (Z x) { return (X)(((Y)x)[2]); }\n+X f20 (Z x) { return (X)(((Y)x)[3]); }\n+Z f21 (void) { return (Z) ((Y) { 2, 3, 4, 5 }); }\n+Z f22 (X x) { union { X x; __int128 i; } u = { .x = x }; return (Z) ((Y) { u.i, 3, 4, 5 }); }\n+Z f23 (X x) { union { X x; __int128 i; } u = { .x = x }; return (Z) ((Y) { 2, u.i, 4, 5 }); }\n+Z f24 (X x) { union { X x; __int128 i; } u = { .x = x }; return (Z) ((Y) { 2, 3, u.i, 5 }); }\n+Z f25 (X x) { union { X x; __int128 i; } u = { .x = x }; return (Z) ((Y) { 2, 3, 4, u.i }); }\n+Z f26 (X x) { union { X x; __int128 i; } u = { .x = x }; return (Z) ((Y) { u.i, u.i, u.i, u.i }); }\n+#endif"}, {"sha": "907fd4f7b628efac704c486109ae3dcb5b13e1df", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr80846.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr80846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr80846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr80846.c?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/80846 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx2 -mno-avx512f\" } */\n+\n+#include \"avx-pr80846.c\""}, {"sha": "c32c9762cf949bce041197ff7aac8d2e5d6dedd2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr80846.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2953b72fdd6c7d812028a636dfadf1c0e89ca314/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80846.c?ref=2953b72fdd6c7d812028a636dfadf1c0e89ca314", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/80846 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include \"avx-pr80846.c\""}]}