{"sha": "abe8787a8492013145b275b858f70943522d7226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlODc4N2E4NDkyMDEzMTQ1YjI3NWI4NThmNzA5NDM1MjJkNzIyNg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-26T20:02:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-26T20:02:33Z"}, "message": "c++: access for hidden friend of nested class template [PR100502]\n\nHere, during ahead of time access checking for the private member\nEnumeratorRange<T>::end_reached_ in the hidden friend f, we're triggering\nthe assert in enforce_access that verifies we're not trying to add a\naccess check for a dependent decl onto TI_DEFERRED_ACCESS_CHECKS.\n\nThe special thing about this class member access expression is that\nthe overall expression is non-dependent (so finish_class_member_access_expr\ndoesn't exit early at parse time), and then accessible_p rejects the\naccess (so we don't exit early from enforce access either, and end up\ntriggering the assert b/c the member itself is dependent).  I think\nwe're correct to reject the access because a hidden friend is not a\nmember function, so [class.access.nest] doesn't apply, and also a hidden\nfriend of a nested class is not a friend of the enclosing class.\n\nTo fix this ICE, this patch disables ahead of time access checking\nduring the member lookup in finish_class_member_access_expr.  This\navoids potentially pushing an access check for a dependent member onto\nTI_DEFERRED_ACCESS_CHECKS, and it's safe because we're going to redo the\nsame lookup at instantiation time anyway.\n\n\tPR c++/100502\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (finish_class_member_access_expr): Disable ahead\n\tof time access checking during the member lookup.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/access37.C: New test.\n\t* g++.dg/template/access37a.C: New test.", "tree": {"sha": "80d38eeb8404bab663d93960aff4c75be5711640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d38eeb8404bab663d93960aff4c75be5711640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abe8787a8492013145b275b858f70943522d7226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe8787a8492013145b275b858f70943522d7226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe8787a8492013145b275b858f70943522d7226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe8787a8492013145b275b858f70943522d7226/comments", "author": null, "committer": null, "parents": [{"sha": "a42220f0164eeb11b5e1ab87ce5b8f448141ba60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42220f0164eeb11b5e1ab87ce5b8f448141ba60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42220f0164eeb11b5e1ab87ce5b8f448141ba60"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "3df4117e4e70f31c6e27f9d36fbe305ca3249c43", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe8787a8492013145b275b858f70943522d7226/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe8787a8492013145b275b858f70943522d7226/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=abe8787a8492013145b275b858f70943522d7226", "patch": "@@ -3201,9 +3201,19 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t{\n \t  /* Look up the member.  */\n \t  access_failure_info afi;\n+\t  if (processing_template_decl)\n+\t    /* Even though this class member access expression is at this\n+\t       point not dependent, the member itself may be dependent, and\n+\t       we must not potentially push a access check for a dependent\n+\t       member onto TI_DEFERRED_ACCESS_CHECKS.  So don't check access\n+\t       ahead of time here; we're going to redo this member lookup at\n+\t       instantiation time anyway.  */\n+\t    push_deferring_access_checks (dk_no_check);\n \t  member = lookup_member (access_path, name, /*protect=*/1,\n \t\t\t\t  /*want_type=*/false, complain,\n \t\t\t\t  &afi);\n+\t  if (processing_template_decl)\n+\t    pop_deferring_access_checks ();\n \t  afi.maybe_suggest_accessor (TYPE_READONLY (object_type));\n \t  if (member == NULL_TREE)\n \t    {"}, {"sha": "5be532c75b09c6567533959e75e1cdf26ebbc5ff", "filename": "gcc/testsuite/g++.dg/template/access37.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe8787a8492013145b275b858f70943522d7226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe8787a8492013145b275b858f70943522d7226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37.C?ref=abe8787a8492013145b275b858f70943522d7226", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/100502\n+\n+template <class T>\n+struct EnumeratorRange {\n+  struct Iterator {\n+    EnumeratorRange range_;\n+\n+    friend void f(Iterator i) {\n+      i.range_.end_reached_; // { dg-error \"private\" }\n+      i.range_.EnumeratorRange::end_reached_; // { dg-error \"private\" }\n+      &i.range_.end_reached_; // { dg-error \"private\" }\n+      &i.range_.EnumeratorRange::end_reached_; // { dg-error \"private\" }\n+    }\n+  };\n+\n+ private:\n+  bool end_reached_;\n+#if DECLARE_FRIEND\n+  friend void f(Iterator);\n+#endif\n+};\n+\n+int main() {\n+  EnumeratorRange<int>::Iterator i;\n+  f(i);\n+}"}, {"sha": "4ce1b2718a0fedde147859c12dd07227ea46c7a3", "filename": "gcc/testsuite/g++.dg/template/access37a.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe8787a8492013145b275b858f70943522d7226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe8787a8492013145b275b858f70943522d7226/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess37a.C?ref=abe8787a8492013145b275b858f70943522d7226", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/100502\n+// { dg-additional-options \"-DDECLARE_FRIEND -Wno-non-template-friend\" }\n+\n+// Verify that access37.C is accepted if the appropriate friend relation\n+// is declared (controlled by the macro DECLARE_FRIEND).\n+#include \"access37.C\""}]}