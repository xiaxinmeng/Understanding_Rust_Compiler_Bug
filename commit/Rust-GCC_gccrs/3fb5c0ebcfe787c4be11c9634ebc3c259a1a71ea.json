{"sha": "3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiNWMwZWJjZmU3ODdjNGJlMTFjOTYzNGViYzNjMjU5YTFhNzFlYQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-10-09T22:55:35Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-10-09T22:55:35Z"}, "message": "[multiple changes]\n\n2001-10-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (patch_cast): Call patch_string on the first operand of\n\tthe incoming node, update it if necessary. Fixes java/4510.\n\n2001-10-05  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (register_incomplete_type): Set JDEP_SUPER to be given\n\ta NULL enclosing context if appropriate. Fixes java/4466.\n\n2001-09-17  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (patch_method_invocation): Inner class creation context\n\tcheck not enforced within constructors. Fixes PR java/1873.\n\n( http://gcc.gnu.org/ml/gcc-patches/2001-10/msg00397.html )\n\nFrom-SVN: r46133", "tree": {"sha": "1750dcb78359a25c290d286c1824cb177883c742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1750dcb78359a25c290d286c1824cb177883c742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea/comments", "author": null, "committer": null, "parents": [{"sha": "d1d8ed98776760cc06c71affb80693fb68e80460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d8ed98776760cc06c71affb80693fb68e80460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d8ed98776760cc06c71affb80693fb68e80460"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "0c9c0779dd97a4996c9288ec6c11e2c71746c1f7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "patch": "@@ -1,3 +1,8 @@\n+2001-10-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (patch_cast): Call patch_string on the first operand of\n+\tthe incoming node, update it if necessary. Fixes java/4510.\n+\n 2001-10-09  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* parse.y (find_as_inner_class): Don't disregard the enclosing scope\n@@ -16,6 +21,11 @@\n \t* lex.c (java_get_line_col): Likewise.\n \t* parse.y (build_incdec): Likewise.\n \n+2001-10-05  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (register_incomplete_type): Set JDEP_SUPER to be given\n+\ta NULL enclosing context if appropriate. Fixes java/4466.\n+\n 2001-10-03  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (patch_assignment): Use lvalue's original TYPE when\n@@ -72,6 +82,11 @@\n \t* parse.y: Use VA_OPEN/VA_CLOSE/VA_FIXEDARG throughout.\n \t* jv-scan.c: Likewise.\n \n+2001-09-17  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (patch_method_invocation): Inner class creation context\n+\tcheck not enforced within constructors. Fixes PR java/1873.\n+\n 2001-09-16  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-write.c (generate_bytecode_insns) [SWITCH_EXPR]: Call"}, {"sha": "d007b71d2e2546dc14667f59d54c40aaec1a4ab7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3fb5c0ebcfe787c4be11c9634ebc3c259a1a71ea", "patch": "@@ -5200,10 +5200,12 @@ register_incomplete_type (kind, wfl, decl, ptr)\n   JDEP_MISC (new) = NULL_TREE;\n   /* For some dependencies, set the enclosing class of the current\n      class to be the enclosing context */\n-  if ((kind == JDEP_SUPER || kind == JDEP_INTERFACE \n-       || kind == JDEP_ANONYMOUS)\n+  if ((kind == JDEP_INTERFACE  || kind == JDEP_ANONYMOUS)\n       && GET_ENCLOSING_CPC ())\n     JDEP_ENCLOSING (new) = TREE_VALUE (GET_ENCLOSING_CPC ());\n+  else if (kind == JDEP_SUPER)\n+    JDEP_ENCLOSING (new) = (GET_ENCLOSING_CPC () ? \n+\t\t\t    TREE_VALUE (GET_ENCLOSING_CPC ()) : NULL_TREE);\n   else\n     JDEP_ENCLOSING (new) = GET_CPC ();\n   JDEP_GET_PATCH (new) = (tree *)NULL;\n@@ -10255,7 +10257,8 @@ patch_method_invocation (patch, primary, where, from_super,\n       /* Check for inner classes creation from illegal contexts */\n       if (lc && (INNER_CLASS_TYPE_P (class_to_search)\n \t\t && !CLASS_STATIC (TYPE_NAME (class_to_search)))\n-\t  && INNER_ENCLOSING_SCOPE_CHECK (class_to_search))\n+\t  && INNER_ENCLOSING_SCOPE_CHECK (class_to_search)\n+\t  && !DECL_INIT_P (current_function_decl))\n \t{\n \t  parse_error_context \n \t    (wfl, \"No enclosing instance for inner class `%s' is in scope%s\",\n@@ -14437,10 +14440,15 @@ patch_cast (node, wfl_op)\n      tree wfl_op;\n {\n   tree op = TREE_OPERAND (node, 0);\n-  tree op_type = TREE_TYPE (op);\n   tree cast_type = TREE_TYPE (node);\n+  tree patched, op_type;\n   char *t1;\n \n+  /* Some string patching might be necessary at this stage */\n+  if ((patched = patch_string (op)))\n+    TREE_OPERAND (node, 0) = op = patched;\n+  op_type = TREE_TYPE (op);\n+\n   /* First resolve OP_TYPE if unresolved */\n   if (!(cast_type = resolve_type_during_patch (cast_type)))\n     return error_mark_node;"}]}