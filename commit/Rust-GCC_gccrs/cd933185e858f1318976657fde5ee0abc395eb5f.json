{"sha": "cd933185e858f1318976657fde5ee0abc395eb5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5MzMxODVlODU4ZjEzMTg5NzY2NTdmZGU1ZWUwYWJjMzk1ZWI1Zg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-11-08T03:26:49Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2012-11-08T03:26:49Z"}, "message": "Add extensive commentary to sparc's \"U\" constraint.\n\n\t* config/sparc/constraints.md (\"U\"): Document, in detail,\n\twhich this constraint is necessary.\n\nFrom-SVN: r193322", "tree": {"sha": "3e3687e37f5fa4fc9dfa1bff3ce6a1eacaa688d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e3687e37f5fa4fc9dfa1bff3ce6a1eacaa688d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd933185e858f1318976657fde5ee0abc395eb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd933185e858f1318976657fde5ee0abc395eb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd933185e858f1318976657fde5ee0abc395eb5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd933185e858f1318976657fde5ee0abc395eb5f/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dfd4c50890552cf276132c4d89fbae1e4cf8173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfd4c50890552cf276132c4d89fbae1e4cf8173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfd4c50890552cf276132c4d89fbae1e4cf8173"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "9f9e874794263d0df85390e1f89a840da6a43c04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd933185e858f1318976657fde5ee0abc395eb5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd933185e858f1318976657fde5ee0abc395eb5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd933185e858f1318976657fde5ee0abc395eb5f", "patch": "@@ -1,3 +1,8 @@\n+2012-11-07  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/constraints.md (\"U\"): Document, in detail,\n+\twhich this constraint is necessary.\n+\n 2012-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/55235"}, {"sha": "8963a3121a5194802231d4ac301a9e6146ad5c6b", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd933185e858f1318976657fde5ee0abc395eb5f/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd933185e858f1318976657fde5ee0abc395eb5f/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=cd933185e858f1318976657fde5ee0abc395eb5f", "patch": "@@ -130,7 +130,43 @@\n       (match_code \"mem\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n-;; Not needed in 64-bit mode\n+;; This awkward register constraint is necessary because it is not\n+;; possible to express the \"must be even numbered register\" condition\n+;; using register classes.  The problem is that membership in a\n+;; register class requires that all registers of a multi-regno\n+;; register be included in the set.  It is add_to_hard_reg_set\n+;; and in_hard_reg_set_p which populate and test regsets with these\n+;; semantics.\n+;;\n+;; So this means that we would have to put both the even and odd\n+;; register into the register class, which would not restrict things\n+;; at all.\n+;;\n+;; Using a combination of GENERAL_REGS and HARD_REGNO_MODE_OK is not a\n+;; full solution either.  In fact, even though IRA uses the macro\n+;; HARD_REGNO_MODE_OK to calculate which registers are prohibited from\n+;; use in certain modes, it still can allocate an odd hard register\n+;; for DImode values.  This is due to how IRA populates the table\n+;; ira_useful_class_mode_regs[][].  It suffers from the same problem\n+;; as using a register class to describe this restriction.  Namely, it\n+;; sets both the odd and even part of an even register pair in the\n+;; regset.  Therefore IRA can and will allocate odd registers for\n+;; DImode values on 32-bit.\n+;;\n+;; There are legitimate cases where DImode values can end up in odd\n+;; hard registers, the most notable example is argument passing.\n+;;\n+;; What saves us is reload and the DImode splitters.  Both are\n+;; necessary.  The odd register splitters cannot match if, for\n+;; example, we have a non-offsetable MEM.  Reload will notice this\n+;; case and reload the address into a single hard register.\n+;;\n+;; The real downfall of this awkward register constraint is that it does\n+;; not evaluate to a true register class like a bonafide use of\n+;; define_register_constraint would.  This currently means that we cannot\n+;; use LRA on Sparc, since the constraint processing of LRA really depends\n+;; upon whether an extra constraint is for registers or not.  It uses\n+;; REG_CLASS_FROM_CONSTRAINT, and checks it against NO_REGS.\n (define_constraint \"U\"\n  \"Pseudo-register or hard even-numbered integer register\"\n  (and (match_test \"TARGET_ARCH32\")"}]}