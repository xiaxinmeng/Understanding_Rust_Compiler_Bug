{"sha": "488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4YjNlNjU3Mzg5NWI2YzIwNWUzMTJlNmNlMzk1NWVlOWM4YmQzYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-02-01T00:20:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-02-01T00:20:08Z"}, "message": "re PR libstdc++/49204 ([C++0x] remaining issues in <future>)\n\n\tPR libstdc++/49204\n\t* include/std/future (__future_base::_State_base::wait()): Use lambda\n\texpression for predicate and remove redundant test.\n\t(__future_base::_State_base::wait_for()): Return future_status and\n\tuse lambda expression for predicate.\n\t(__future_base::_State_base::wait_until()): Likewise.\n\t(__basic_future::wait_for(), __basic_future::wait_until()): Likewise.\n\t(__future_base::_Async_state): Replace with _Async_state_common\n\tclass for non-dependent functionality and _Async_state_impl class\n\ttemplate for dependent functionality.\n\t(__future_base::_Async_state_common::_M_join): Serialize attempts to\n\tjoin thread.\n\t(__future_base::_Async_state_common::_M_run_deferred): Join.\n\t(__future_base::_Async_state::_M_do_run): Replace with lambda.\n\t* src/c++11/future.cc (__future_base::_Async_state_common): Define\n\tdestructor, so key function is in the library.\n\t* config/abi/pre/gnu.ver: Add exports for ~_Async_state_common.\n\t* testsuite/30_threads/packaged_task/members/get_future.cc: Expect\n\tfuture_status return instead of bool.\n\t* testsuite/30_threads/shared_future/members/wait_until.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/wait_for.cc: Likewise.\n\t* testsuite/30_threads/future/members/wait_until.cc: Likewise.\n\t* testsuite/30_threads/future/members/wait_for.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_value2.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_value3.cc: Likewise.\n\t* testsuite/30_threads/promise/members/swap.cc: Likewise.\n\nFrom-SVN: r183788", "tree": {"sha": "d40e1df5bc03aec565b5d676beb1c5e33137a6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40e1df5bc03aec565b5d676beb1c5e33137a6d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3627585bcfd7d465755b9281e81e50e1867fe2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3627585bcfd7d465755b9281e81e50e1867fe2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3627585bcfd7d465755b9281e81e50e1867fe2a1"}], "stats": {"total": 158, "additions": 110, "deletions": 48}, "files": [{"sha": "038bf3ea69aa6afe0cfa2e74f17b4aa95bd22e21", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -1,3 +1,32 @@\n+2012-02-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/49204\n+\t* include/std/future (__future_base::_State_base::wait()): Use lambda\n+\texpression for predicate and remove redundant test.\n+\t(__future_base::_State_base::wait_for()): Return future_status and\n+\tuse lambda expression for predicate.\n+\t(__future_base::_State_base::wait_until()): Likewise.\n+\t(__basic_future::wait_for(), __basic_future::wait_until()): Likewise.\n+\t(__future_base::_Async_state): Replace with _Async_state_common\n+\tclass for non-dependent functionality and _Async_state_impl class\n+\ttemplate for dependent functionality.\n+\t(__future_base::_Async_state_common::_M_join): Serialize attempts to\n+\tjoin thread.\n+\t(__future_base::_Async_state_common::_M_run_deferred): Join.\n+\t(__future_base::_Async_state::_M_do_run): Replace with lambda.\n+\t* src/c++11/future.cc (__future_base::_Async_state_common): Define\n+\tdestructor, so key function is in the library.\n+\t* config/abi/pre/gnu.ver: Add exports for ~_Async_state_common.\n+\t* testsuite/30_threads/packaged_task/members/get_future.cc: Expect\n+\tfuture_status return instead of bool.\n+\t* testsuite/30_threads/shared_future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value3.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/swap.cc: Likewise.\n+\n 2012-01-30  Tom Tromey  <tromey@redhat.com>\n \n \tPR libstdc++/51649:"}, {"sha": "41d38a7a3763a2179d107db9a80512d73c9da168", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -1307,6 +1307,14 @@ GLIBCXX_3.4.17 {\n     # std::wstring::pop_back()\n     _ZNSbIwSt11char_traitsIwESaIwEE8pop_backEv;\n \n+    # std::_Async_state_common::~_Async_state_common\n+    _ZTINSt13__future_base19_Async_state_commonE;\n+    _ZTSNSt13__future_base19_Async_state_commonE;\n+    _ZTVNSt13__future_base19_Async_state_commonE;\n+    _ZNSt13__future_base19_Async_state_commonD0Ev;\n+    _ZNSt13__future_base19_Async_state_commonD1Ev;\n+    _ZNSt13__future_base19_Async_state_commonD2Ev;\n+\n } GLIBCXX_3.4.16;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "1093e3f1bb4948dcf65feae1c5bfbfcf45904fa8", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -1,6 +1,6 @@\n // <future> -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -328,27 +328,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t_M_run_deferred();\n \tunique_lock<mutex> __lock(_M_mutex);\n-\tif (!_M_ready())\n-\t  _M_cond.wait(__lock, std::bind<bool>(&_State_base::_M_ready, this));\n+\t_M_cond.wait(__lock, [&] { return _M_ready(); });\n \treturn *_M_result;\n       }\n \n       template<typename _Rep, typename _Period>\n-        bool\n+        future_status\n         wait_for(const chrono::duration<_Rep, _Period>& __rel)\n         {\n \t  unique_lock<mutex> __lock(_M_mutex);\n-\t  auto __bound = std::bind<bool>(&_State_base::_M_ready, this);\n-\t  return _M_ready() || _M_cond.wait_for(__lock, __rel, __bound);\n+\t  if (_M_cond.wait_for(__lock, __rel, [&] { return _M_ready(); }))\n+\t    return future_status::ready;\n+\t  return future_status::timeout;\n \t}\n \n       template<typename _Clock, typename _Duration>\n-        bool\n+        future_status\n         wait_until(const chrono::time_point<_Clock, _Duration>& __abs)\n         {\n \t  unique_lock<mutex> __lock(_M_mutex);\n-\t  auto __bound = std::bind<bool>(&_State_base::_M_ready, this);\n-\t  return _M_ready() || _M_cond.wait_until(__lock, __abs, __bound);\n+\t  if (_M_cond.wait_until(__lock, __abs, [&] { return _M_ready(); }))\n+\t    return future_status::ready;\n+\t  return future_status::timeout;\n \t}\n \n       void\n@@ -480,14 +481,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool _M_ready() const noexcept { return static_cast<bool>(_M_result); }\n \n+      // Misnamed: waits for completion of async function.\n       virtual void _M_run_deferred() { }\n     };\n \n     template<typename _BoundFn, typename = typename _BoundFn::result_type>\n       class _Deferred_state;\n \n+    class _Async_state_common;\n+\n     template<typename _BoundFn, typename = typename _BoundFn::result_type>\n-      class _Async_state;\n+      class _Async_state_impl;\n \n     template<typename _Signature>\n       class _Task_state;\n@@ -573,15 +577,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Rep, typename _Period>\n-        bool\n+        future_status\n         wait_for(const chrono::duration<_Rep, _Period>& __rel) const\n         {\n           _State_base::_S_check(_M_state);\n           return _M_state->wait_for(__rel);\n         }\n \n       template<typename _Clock, typename _Duration>\n-        bool\n+        future_status\n         wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const\n         {\n           _State_base::_S_check(_M_state);\n@@ -1418,29 +1422,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  class __future_base::_Async_state_common : public __future_base::_State_base\n+  {\n+  protected:\n+    ~_Async_state_common();\n+\n+    // Allow non-timed waiting functions to block until the thread completes,\n+    // as if joined.\n+    virtual void _M_run_deferred() { _M_join(); }\n+\n+    void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }\n+\n+    thread _M_thread;\n+    once_flag _M_once;\n+  };\n+\n   template<typename _BoundFn, typename _Res>\n-    class __future_base::_Async_state final\n-    : public __future_base::_State_base\n+    class __future_base::_Async_state_impl final\n+    : public __future_base::_Async_state_common\n     {\n     public:\n       explicit\n-      _Async_state(_BoundFn&& __fn)\n-      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn)),\n-\t_M_thread(mem_fn(&_Async_state::_M_do_run), this)\n-      { }\n-\n-      ~_Async_state() { _M_thread.join(); }\n-\n-    private:\n-      void _M_do_run()\n+      _Async_state_impl(_BoundFn&& __fn)\n+      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))\n       {\n-        _M_set_result(_S_task_setter(_M_result, _M_fn));\n+\t_M_thread = std::thread{ [this] {\n+\t  _M_set_result(_S_task_setter(_M_result, _M_fn));\n+        } };\n       }\n \n+    private:\n       typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n-      thread _M_thread;\n     };\n \n   template<typename _BoundFn>\n@@ -1457,7 +1471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __future_base::_S_make_async_state(_BoundFn&& __fn)\n     {\n       typedef typename remove_reference<_BoundFn>::type __fn_type;\n-      typedef _Async_state<__fn_type> __state_type;\n+      typedef _Async_state_impl<__fn_type> __state_type;\n       return std::make_shared<__state_type>(std::move(__fn));\n     }\n "}, {"sha": "dab0774ad0a1001e3146362b7d9ef1ba2dfc2981", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -1,6 +1,6 @@\n // future -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -84,6 +84,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __future_base::_Result_base::~_Result_base() = default;\n \n   __future_base::_State_base::~_State_base() = default;\n+\n+  __future_base::_Async_state_common::~_Async_state_common() { _M_join(); }\n+\n+  // Explicit instantiation due to -fno-implicit-instantiation.\n+  template void call_once(once_flag&, void (thread::*&&)(), reference_wrapper<thread>&&);\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "476bfd95412b7e29f5f84d3d22adbf2a5cf25711", "filename": "libstdc++-v3/testsuite/30_threads/future/members/wait_for.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -37,12 +37,12 @@ void test01()\n \n   std::chrono::milliseconds delay(100);\n \n-  VERIFY( !f1.wait_for(delay) );\n+  VERIFY( f1.wait_for(delay) == std::future_status::timeout );\n \n   p1.set_value(1);\n \n   auto before = std::chrono::system_clock::now();\n-  VERIFY( f1.wait_for(delay) );\n+  VERIFY( f1.wait_for(delay) == std::future_status::ready );\n   VERIFY( std::chrono::system_clock::now() < (before + delay) );\n }\n "}, {"sha": "c588be8b6cd8408ccd3992cf6a7ed3afc5d0d6c6", "filename": "libstdc++-v3/testsuite/30_threads/future/members/wait_until.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -41,13 +41,13 @@ void test01()\n   std::future<int> f1(p1.get_future());\n \n   auto when = make_time(10);\n-  VERIFY( !f1.wait_until(when) );\n+  VERIFY( f1.wait_until(when) == std::future_status::timeout );\n   VERIFY( std::chrono::system_clock::now() >= when );\n \n   p1.set_value(1);\n \n   when = make_time(100);\n-  VERIFY( f1.wait_until(when) );\n+  VERIFY( f1.wait_until(when) == std::future_status::ready );\n   VERIFY( std::chrono::system_clock::now() < when );\n }\n "}, {"sha": "79d4c1f641722a9514cb1d59ed664a43c606e3fe", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/get_future.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -36,8 +36,9 @@ void test01()\n   std::packaged_task<int&(int&)> p1(inc);\n   std::future<int&> f1 = p1.get_future();\n \n+  std::chrono::milliseconds delay(1);\n   VERIFY( f1.valid() );\n-  VERIFY( !f1.wait_for(std::chrono::milliseconds(1)) );\n+  VERIFY( f1.wait_for(delay) == std::future_status::timeout );\n \n   int i1 = 0;\n "}, {"sha": "7dbf079d95a44af1e145174931801b601cd39d76", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value2.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -48,7 +48,8 @@ void test01()\n     test = true;\n   }\n \n-  VERIFY( f1.wait_for(std::chrono::milliseconds(1)) );\n+  std::chrono::milliseconds delay(1);\n+  VERIFY( f1.wait_for(delay) == std::future_status::ready );\n   VERIFY( f1.get() == 1 );\n   VERIFY( test );\n }\n@@ -74,7 +75,8 @@ void test02()\n     test = true;\n   }\n \n-  VERIFY( f1.wait_for(std::chrono::milliseconds(1)) );\n+  std::chrono::milliseconds delay(1);\n+  VERIFY( f1.wait_for(delay) == std::future_status::ready );\n   VERIFY( f1.get() == 3 );\n   VERIFY( test );\n }"}, {"sha": "268d162b3ac71a9f634c607e9295b50d2dc04769", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value3.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -41,24 +41,26 @@ struct tester\n std::promise<tester> pglobal;\n std::future<tester> fglobal = pglobal.get_future();\n \n+auto delay = std::chrono::milliseconds(1);\n+\n tester::tester(int)\n {\n   bool test __attribute__((unused)) = true;\n-  VERIFY (!fglobal.wait_for(std::chrono::milliseconds(1)));\n+  VERIFY (fglobal.wait_for(delay) == std::future_status::timeout);\n }\n \n tester::tester(const tester&)\n {\n   bool test __attribute__((unused)) = true;\n   // if this copy happens while a mutex is locked next line could deadlock:\n-  VERIFY (!fglobal.wait_for(std::chrono::milliseconds(1)));\n+  VERIFY (fglobal.wait_for(delay) == std::future_status::timeout);\n }\n \n tester& tester::operator=(const tester&)\n {\n   bool test __attribute__((unused)) = true;\n   // if this copy happens while a mutex is locked next line could deadlock:\n-  VERIFY (!fglobal.wait_for(std::chrono::milliseconds(1)));\n+  VERIFY (fglobal.wait_for(delay) == std::future_status::timeout);\n   return *this;\n }\n \n@@ -68,7 +70,7 @@ void test01()\n \n   pglobal.set_value( tester(1) );\n \n-  VERIFY( fglobal.wait_for(std::chrono::milliseconds(1)) );\n+  VERIFY (fglobal.wait_for(delay) == std::future_status::ready);\n }\n \n int main()"}, {"sha": "93a0026643fd20a2d0e523a7c63e03e7f0b7e455", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/swap.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -35,8 +35,9 @@ void test01()\n   std::promise<int> p2;\n   p1.set_value(1);\n   p1.swap(p2);\n-  VERIFY( !p1.get_future().wait_for(std::chrono::milliseconds(1)) );\n-  VERIFY( p2.get_future().wait_for(std::chrono::milliseconds(1)) );\n+  auto delay = std::chrono::milliseconds(1);\n+  VERIFY( p1.get_future().wait_for(delay) == std::future_status::timeout );\n+  VERIFY( p2.get_future().wait_for(delay) == std::future_status::ready );\n }\n \n int main()"}, {"sha": "2c4ec1d00951c8203f6fecc64b37983d850f651e", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_for.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -38,14 +38,14 @@ void test01()\n \n   std::chrono::milliseconds delay(100);\n \n-  VERIFY( !f1.wait_for(delay) );\n-  VERIFY( !f2.wait_for(delay) );\n+  VERIFY( f1.wait_for(delay) == std::future_status::timeout );\n+  VERIFY( f2.wait_for(delay) == std::future_status::timeout );\n \n   p1.set_value(1);\n \n   auto before = std::chrono::system_clock::now();\n-  VERIFY( f1.wait_for(delay) );\n-  VERIFY( f2.wait_for(delay) );\n+  VERIFY( f1.wait_for(delay) == std::future_status::ready );\n+  VERIFY( f2.wait_for(delay) == std::future_status::ready );\n   VERIFY( std::chrono::system_clock::now() < (before + 2*delay) );\n }\n "}, {"sha": "c6fcb931508a7b460cfe4be9150b5a232d23b336", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_until.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488b3e6573895b6c205e312e6ce3955ee9c8bd3c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc?ref=488b3e6573895b6c205e312e6ce3955ee9c8bd3c", "patch": "@@ -42,18 +42,18 @@ void test01()\n   std::shared_future<int> f2(f1);\n \n   auto when = make_time(10);\n-  VERIFY( !f1.wait_until(make_time(10)) );\n+  VERIFY( f1.wait_until(make_time(10)) == std::future_status::timeout );\n   VERIFY( std::chrono::system_clock::now() >= when );\n \n   when = make_time(10);\n-  VERIFY( !f2.wait_until(make_time(10)) );\n+  VERIFY( f2.wait_until(make_time(10)) == std::future_status::timeout );\n   VERIFY( std::chrono::system_clock::now() >= when );\n \n   p1.set_value(1);\n \n   when = make_time(100);\n-  VERIFY( f1.wait_until(when) );\n-  VERIFY( f2.wait_until(when) );\n+  VERIFY( f1.wait_until(when) == std::future_status::ready );\n+  VERIFY( f2.wait_until(when) == std::future_status::ready );\n   VERIFY( std::chrono::system_clock::now() < when );\n }\n "}]}