{"sha": "a473029f5c7a80c2d328d594352ec13dcbeeb649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3MzAyOWY1YzdhODBjMmQzMjhkNTk0MzUyZWMxM2RjYmVlYjY0OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-02T21:47:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-02T21:47:39Z"}, "message": "(define_function_unit): Remove ppc604 from sqrt list.\n\n(divsi3, udivsi3): Remove spaces from PowerPC output templates.\n(sqrtsf2, maxsf3, minsf3, sqrtdf2, maxdf3, mindf3): Use new macros.\n(floatdidf2, fix_truncdfdi2, ffsdi2, muldi3, smuldi3_highpart,\numuldi3_highpart, divdi3, udivdi3, rotldi3): New patterns.\n(movdi): Handle moves between FPRs and GPRs.\n(scc insn): Correct swapped compare and delayed_compare attributes.\n\nFrom-SVN: r7430", "tree": {"sha": "6505b05ce8c5f04fe7d28044ae8ba1b0f202f92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6505b05ce8c5f04fe7d28044ae8ba1b0f202f92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a473029f5c7a80c2d328d594352ec13dcbeeb649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a473029f5c7a80c2d328d594352ec13dcbeeb649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a473029f5c7a80c2d328d594352ec13dcbeeb649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a473029f5c7a80c2d328d594352ec13dcbeeb649/comments", "author": null, "committer": null, "parents": [{"sha": "68c49ffa40d859d1114b2aea5c8e960877670b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c49ffa40d859d1114b2aea5c8e960877670b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c49ffa40d859d1114b2aea5c8e960877670b19"}], "stats": {"total": 158, "additions": 139, "deletions": 19}, "files": [{"sha": "c4f48d13c8126e16970c53ebb4e03b52f2e92913", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 139, "deletions": 19, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a473029f5c7a80c2d328d594352ec13dcbeeb649/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a473029f5c7a80c2d328d594352ec13dcbeeb649/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a473029f5c7a80c2d328d594352ec13dcbeeb649", "patch": "@@ -221,12 +221,12 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ssqrt\")\n-       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc620\"))\n   31 31)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc620\"))\n   31 31)\n \n ; RIOS2 has two symmetric FPUs.\n@@ -1164,7 +1164,7 @@\n         (div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                 (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"divw %0, %1, %2\"\n+  \"divw %0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")])\n \n (define_expand \"udivsi3\"\n@@ -1189,7 +1189,7 @@\n         (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"divwu %0, %1, %2\"\n+  \"divwu %0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")])\n \n ;; For powers of two we can do srai/aze for divide and then adjust for\n@@ -2713,13 +2713,13 @@\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPCFPX || TARGET_POWER2\"\n+  \"TARGET_PPC_GPOPT || TARGET_POWER2\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GPOPT\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n@@ -2743,7 +2743,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"\n { operands[3] = gen_reg_rtx (SFmode); }\")\n \n@@ -2752,7 +2752,7 @@\n \t(smax:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"reg_or_short_operand\" \"\")))\n    (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   [(set (match_dup 3)\n \t(minus:SF (match_dup 1) (match_dup 2)))\n    (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -2771,7 +2771,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"\n { operands[3] = gen_reg_rtx (SFmode); }\")\n \n@@ -2780,7 +2780,7 @@\n \t(smin:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"reg_or_short_operand\" \"\")))\n    (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   [(set (match_dup 3)\n \t(minus:SF (match_dup 2) (match_dup 1)))\n    (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -2796,7 +2796,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2892,7 +2892,7 @@\n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPCFPX || TARGET_POWER2\"\n+  \"TARGET_PPC_GPOPT || TARGET_POWER2\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -2910,7 +2910,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"\n { operands[3] = gen_reg_rtx (DFmode); }\")\n \n@@ -2919,7 +2919,7 @@\n \t(smax:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"reg_or_short_operand\" \"\")))\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   [(set (match_dup 3)\n \t(minus:DF (match_dup 1) (match_dup 2)))\n    (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -2938,7 +2938,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"\n { operands[3] = gen_reg_rtx (DFmode); }\")\n \n@@ -2947,7 +2947,7 @@\n \t(smin:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"reg_or_short_operand\" \"\")))\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   [(set (match_dup 3)\n \t(minus:DF (match_dup 2) (match_dup 1)))\n    (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -2963,7 +2963,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPCFPX\"\n+  \"TARGET_PPC_GFXOPT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -3159,6 +3159,20 @@\n { \n   rs6000_trunc_used = 1;\n }\")\n+\n+(define_insn \"floatdidf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_POWERPC64\"\n+  \"fcfid %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fix_truncdfdi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n+\t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_POWERPC64\"\n+  \"fctidz %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n \f\n ;; Define the DImode operations that can be done in a small number\n ;; of instructions.\n@@ -3375,7 +3389,7 @@\n ;; just handle shifts by constants.\n \n (define_expand \"ashrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=\")\n+  [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t\t   (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"general_operand\" \"\")))\n \t      (clobber (match_scratch:SI 3 \"\"))])]\n@@ -3396,6 +3410,91 @@\n    sraiq %0,%1,%h2\\;srliq %L0,%L1,%h2\"\n   [(set_attr \"length\" \"8\")])\n \f\n+;; PowerPC64 DImode operations.\n+\n+(define_insn \"ffsdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(ffs:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"neg %0,%1\\;and %0,%0,%1\\;cntlzd %0,%0\\;subfic %0,%0,64\"\n+  [(set_attr \"length\" \"16\")])\n+\n+(define_insn \"muldi3\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(mult:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r\")\n+\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"mulld %0,%1,%2\"\n+   [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"smuldi3_highpart\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(truncate:DI\n+\t (lshiftrt:TI (mult:TI (sign_extend:TI\n+\t\t\t\t(match_operand:DI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (sign_extend:TI\n+\t\t\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+\t\t      (const_int 64))))]\n+  \"TARGET_POWERPC64\"\n+  \"mulhd %0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"umuldi3_highpart\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(truncate:DI\n+\t (lshiftrt:TI (mult:TI (zero_extend:TI\n+\t\t\t\t(match_operand:DI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (zero_extend:TI\n+\t\t\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+\t\t      (const_int 64))))]\n+  \"TARGET_POWERPC64\"\n+  \"mulhdu %0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"divdi3\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+        (div:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+                 (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"divd %0,%1,%2\"\n+  [(set_attr \"type\" \"idiv\")])\n+\n+(define_insn \"udivdi3\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+        (udiv:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+                 (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_POWERPC64\"\n+  \"divdu %0,%1,%2\"\n+  [(set_attr \"type\" \"idiv\")])\n+\n+(define_insn \"rotldi3\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t   (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\")))]\n+  \"TARGET_POWERPC64\"\n+  \"rld%I2cl %0,%1,%h2,0\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 3 \"=r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"rld%I2cl. %3,%1,%h2,0\"\n+  [(set_attr \"type\" \"delayed_compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"ri\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(rotate:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"rld%I2cl. %0,%1,%h2,0\"\n+  [(set_attr \"type\" \"delayed_compare\")])\n+\f\n ;; Now define ways of moving data around.\n ;;\n ;; For SI, we special-case integers that can't be loaded in one insn.  We\n@@ -3869,6 +3968,27 @@\n \n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (DImode, operands[1]);\n+\n+      /* Stores between FPR and any non-FPR registers must go through a\n+         temporary stack slot.  */\n+\n+  if (GET_CODE (operands[0]) == REG && GET_CODE (operands[1]) == REG\n+      && ((FP_REGNO_P (REGNO (operands[0]))\n+\t   && ! FP_REGNO_P (REGNO (operands[1])))\n+\t  || (FP_REGNO_P (REGNO (operands[1]))\n+\t      && ! FP_REGNO_P (REGNO (operands[0])))))\n+    {\n+      rtx stack_slot;\n+\n+      if (reload_in_progress)\n+\tstack_slot = gen_rtx (MEM, DImode,\n+\t\t\t      plus_constant (stack_pointer_rtx, 8));\n+      else\n+\tstack_slot = assign_stack_temp (DImode, 8, 0);\n+      emit_move_insn (stack_slot, operands[1]);\n+      emit_move_insn (operands[0], stack_slot);\n+      DONE;\n+    }\n }\")\n \n (define_insn \"\"\n@@ -5339,7 +5459,7 @@\n   \"@\n    doz %3,%2,%1\\;{sfi|subfic} %0,%3,0\\;{ae.|adde.} %0,%0,%3\n    {ai|addic} %0,%1,-1\\;{aze|addze} %0,%0\\;{sri.|srwi.} %0,%0,31\"\n-  [(set_attr \"type\" \"delayed_compare,compare\")\n+  [(set_attr \"type\" \"compare,delayed_compare\")\n    (set_attr \"length\" \"12\")])\n \n (define_insn \"\""}]}