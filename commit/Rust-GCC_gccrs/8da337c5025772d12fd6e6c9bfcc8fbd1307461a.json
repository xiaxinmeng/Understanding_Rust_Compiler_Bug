{"sha": "8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhMzM3YzUwMjU3NzJkMTJmZDZlNmM5YmZjYzhmYmQxMzA3NDYxYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T13:06:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T13:06:22Z"}, "message": "[multiple changes]\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads (No_Pool_Assigned): Update documentation.\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n\tStorage_Size): We only set No_Pool_Assigned if the expression is a\n\tstatic constant and zero.\n\t* sem_res.adb (Resolve_Allocator): Allocation from empty storage pool\n\tshould be an error not a warning.\n\n2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): Recognize additional cases\n\twhere an aggregate in an assignment can be built directly into the\n\ttarget, and does not require the creation of a temporary that may\n\toverflow the stack.\n\n2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Analyze_Record_Aggregate): In Ada2012, a choice list\n\tin a record aggregate can correspond to several components of\n\tanonymous access types, as long as the designated subtypes match.\n\nFrom-SVN: r165104", "tree": {"sha": "4f4a5f0b697a0462eb05ecd4890bfa273f445573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4a5f0b697a0462eb05ecd4890bfa273f445573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/comments", "author": null, "committer": null, "parents": [{"sha": "dcffd51576e6d3c1f8059656b5853608534fa63d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcffd51576e6d3c1f8059656b5853608534fa63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcffd51576e6d3c1f8059656b5853608534fa63d"}], "stats": {"total": 117, "additions": 84, "deletions": 33}, "files": [{"sha": "070e8e50193e8bc8f69632c258be6c0ce7ece32a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -1,3 +1,25 @@\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads (No_Pool_Assigned): Update documentation.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n+\tStorage_Size): We only set No_Pool_Assigned if the expression is a\n+\tstatic constant and zero.\n+\t* sem_res.adb (Resolve_Allocator): Allocation from empty storage pool\n+\tshould be an error not a warning.\n+\n+2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Recognize additional cases\n+\twhere an aggregate in an assignment can be built directly into the\n+\ttarget, and does not require the creation of a temporary that may\n+\toverflow the stack.\n+\n+2010-10-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Analyze_Record_Aggregate): In Ada2012, a choice list\n+\tin a record aggregate can correspond to several components of\n+\tanonymous access types, as long as the designated subtypes match.\n+\n 2010-10-07  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi, exp_util.adb, sinfo.adb, sinfo.ads, sem_ch12.adb,"}, {"sha": "6c1aa2f78b4f186a3b723be9ef8434ca3acd3033", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -3035,12 +3035,12 @@ package Einfo is\n --       interpreted as true. Currently this is set true for derived Boolean\n --       types which have a convention of C, C++ or Fortran.\n \n---    No_Pool_Assigned (Flag131) [root type only]\n---       Present in access types. Set if a storage size clause applies to\n---       the variable with a compile time known value of zero. This flag is\n---       used to generate warnings if any attempt is made to allocate or free\n---       an instance of such an access type. This is set only in the root\n---       type, since derived types must have the same pool.\n+--    No_Pool_Assigned (Flag131) [root type only] Present in access types.\n+--       Set if a storage size clause applies to the variable with a static\n+--       expression value of zero. This flag is used to generate errors if any\n+--       attempt is made to allocate or free an instance of such an access\n+--       type. This is set only in the root type, since derived types must\n+--       have the same pool.\n \n --    No_Return (Flag113)\n --       Present in all entities. Always false except in the case of procedures"}, {"sha": "3a7e46f1d559f4b5e38caf9ae011f809f4754eb8", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -3768,12 +3768,13 @@ package body Exp_Aggr is\n          then\n             Expr := First (Component_Associations (N));\n             while Present (Expr) loop\n-               if Nkind (Expression (Expr)) = N_Integer_Literal then\n+               if Nkind_In (Expression (Expr), N_Integer_Literal,\n+                                               N_Real_Literal)\n+               then\n                   null;\n \n                elsif Nkind (Expression (Expr)) /= N_Aggregate\n-                 or else\n-                   not Compile_Time_Known_Aggregate (Expression (Expr))\n+                 or else not Compile_Time_Known_Aggregate (Expression (Expr))\n                  or else Expansion_Delayed (Expression (Expr))\n                then\n                   Static_Components := False;\n@@ -4194,6 +4195,11 @@ package body Exp_Aggr is\n       --  Sub_Aggr is an array sub-aggregate. Dim is the dimension\n       --  corresponding to the sub-aggregate.\n \n+      function Safe_Left_Hand_Side (N : Node_Id) return Boolean;\n+      --  In addition to Maybe_In_Place_OK, in order for an aggregate to be\n+      --  built directly into the target of the assignment it must be free\n+      --  of side-effects.\n+\n       ----------------------------\n       -- Build_Constrained_Type --\n       ----------------------------\n@@ -4922,7 +4928,33 @@ package body Exp_Aggr is\n          end if;\n       end Others_Check;\n \n-      --  Remaining Expand_Array_Aggregate variables\n+      -------------------------\n+      -- Safe_Left_Hand_Side --\n+      -------------------------\n+\n+      function Safe_Left_Hand_Side (N : Node_Id) return Boolean is\n+      begin\n+         if Is_Entity_Name (N) then\n+            return True;\n+\n+         elsif Nkind_In (N, N_Explicit_Dereference, N_Selected_Component)\n+           and then Safe_Left_Hand_Side (Prefix (N))\n+         then\n+            return True;\n+\n+         elsif Nkind (N) = N_Indexed_Component\n+           and then Safe_Left_Hand_Side (Prefix (N))\n+           and then\n+             (Is_Entity_Name (First (Expressions (N)))\n+               or else Nkind (First (Expressions (N))) = N_Integer_Literal)\n+         then\n+            return True;\n+         else\n+            return False;\n+         end if;\n+      end Safe_Left_Hand_Side;\n+\n+      --  Local variables\n \n       Tmp : Entity_Id;\n       --  Holds the temporary aggregate value\n@@ -5230,9 +5262,9 @@ package body Exp_Aggr is\n       --  In the remaining cases the aggregate is the RHS of an assignment\n \n       elsif Maybe_In_Place_OK\n-        and then Is_Entity_Name (Name (Parent (N)))\n+        and then Safe_Left_Hand_Side (Name (Parent (N)))\n       then\n-         Tmp := Entity (Name (Parent (N)));\n+         Tmp := Name (Parent (N));\n \n          if Etype (Tmp) /= Etype (N) then\n             Apply_Length_Check (N, Etype (Tmp));\n@@ -5245,16 +5277,6 @@ package body Exp_Aggr is\n             end if;\n          end if;\n \n-      elsif Maybe_In_Place_OK\n-        and then Nkind (Name (Parent (N))) = N_Explicit_Dereference\n-        and then Is_Entity_Name (Prefix (Name (Parent (N))))\n-      then\n-         Tmp := Name (Parent (N));\n-\n-         if Etype (Tmp) /= Etype (N) then\n-            Apply_Length_Check (N, Etype (Tmp));\n-         end if;\n-\n       elsif Maybe_In_Place_OK\n         and then Nkind (Name (Parent (N))) = N_Slice\n         and then Safe_Slice_Assignment (N)"}, {"sha": "6ef11bb8504365c0de6d231be81ff7b9e0ca1f3e", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -3890,8 +3890,23 @@ package body Sem_Aggr is\n                elsif No (Typech) then\n                   Typech := Base_Type (Etype (Component));\n \n+               --  AI05-0199: In Ada2012, several components of anonymous\n+               --  access types can appear in a choice list, as long as the\n+               --  designated types match.\n+\n                elsif Typech /= Base_Type (Etype (Component)) then\n-                  if not Box_Present (Parent (Selectr)) then\n+                  if Ada_Version >= Ada_12\n+                    and then Ekind (Typech) = E_Anonymous_Access_Type\n+                    and then\n+                       Ekind (Etype (Component)) = E_Anonymous_Access_Type\n+                    and then Base_Type (Designated_Type (Typech)) =\n+                             Base_Type (Designated_Type (Etype (Component)))\n+                    and then\n+                      Subtypes_Statically_Match (Typech, (Etype (Component)))\n+                  then\n+                     null;\n+\n+                  elsif not Box_Present (Parent (Selectr)) then\n                      Error_Msg_N\n                        (\"components in choice list must have same type\",\n                         Selectr);"}, {"sha": "bfa1373b1b5659d05c5a3a109b8db31c1f623018", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -1859,7 +1859,7 @@ package body Sem_Ch13 is\n                      return;\n                   end if;\n \n-                  if Compile_Time_Known_Value (Expr)\n+                  if Is_OK_Static_Expression (Expr)\n                     and then Expr_Value (Expr) = 0\n                   then\n                      Set_No_Pool_Assigned (Btype);"}, {"sha": "56a53be1f031d91f740abd15c64c60b419fe7050", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da337c5025772d12fd6e6c9bfcc8fbd1307461a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=8da337c5025772d12fd6e6c9bfcc8fbd1307461a", "patch": "@@ -4296,15 +4296,7 @@ package body Sem_Res is\n       --  Check for allocation from an empty storage pool\n \n       if No_Pool_Assigned (Typ) then\n-         declare\n-            Loc : constant Source_Ptr := Sloc (N);\n-         begin\n-            Error_Msg_N (\"?allocation from empty storage pool!\", N);\n-            Error_Msg_N (\"\\?Storage_Error will be raised at run time!\", N);\n-            Insert_Action (N,\n-              Make_Raise_Storage_Error (Loc,\n-                Reason => SE_Empty_Storage_Pool));\n-         end;\n+         Error_Msg_N (\"allocation from empty storage pool!\", N);\n \n       --  If the context is an unchecked conversion, as may happen within\n       --  an inlined subprogram, the allocator is being resolved with its"}]}