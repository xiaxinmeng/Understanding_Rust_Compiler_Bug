{"sha": "3335c9f954f8939403eabb5ad3d8739be9984f81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzNWM5Zjk1NGY4OTM5NDAzZWFiYjVhZDNkODczOWJlOTk4NGY4MQ==", "commit": {"author": {"name": "Mike Frysinger", "email": "vapier@gentoo.org", "date": "2012-12-24T02:12:26Z"}, "committer": {"name": "Mike Frysinger", "email": "vapier@gentoo.org", "date": "2021-01-03T02:53:56Z"}, "message": "config: import pkg.m4 from pkg-config\n\nWe use this in the sim tree currently.  Rather than require people to\nhave pkg-config installed, include it in the config/ dir.\n\nconfig/ChangeLog:\n\n\t* pkg.m4: New file from pkg-config-0.29.2.", "tree": {"sha": "d78f978936b9127ef58bbf5dc92373a78f1631d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78f978936b9127ef58bbf5dc92373a78f1631d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3335c9f954f8939403eabb5ad3d8739be9984f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335c9f954f8939403eabb5ad3d8739be9984f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3335c9f954f8939403eabb5ad3d8739be9984f81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3335c9f954f8939403eabb5ad3d8739be9984f81/comments", "author": {"login": "vapier", "id": 176950, "node_id": "MDQ6VXNlcjE3Njk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vapier", "html_url": "https://github.com/vapier", "followers_url": "https://api.github.com/users/vapier/followers", "following_url": "https://api.github.com/users/vapier/following{/other_user}", "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vapier/subscriptions", "organizations_url": "https://api.github.com/users/vapier/orgs", "repos_url": "https://api.github.com/users/vapier/repos", "events_url": "https://api.github.com/users/vapier/events{/privacy}", "received_events_url": "https://api.github.com/users/vapier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vapier", "id": 176950, "node_id": "MDQ6VXNlcjE3Njk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vapier", "html_url": "https://github.com/vapier", "followers_url": "https://api.github.com/users/vapier/followers", "following_url": "https://api.github.com/users/vapier/following{/other_user}", "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vapier/subscriptions", "organizations_url": "https://api.github.com/users/vapier/orgs", "repos_url": "https://api.github.com/users/vapier/repos", "events_url": "https://api.github.com/users/vapier/events{/privacy}", "received_events_url": "https://api.github.com/users/vapier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d0bb1f5b53aadfcce98829c463349ef5e30e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d0bb1f5b53aadfcce98829c463349ef5e30e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d0bb1f5b53aadfcce98829c463349ef5e30e98"}], "stats": {"total": 275, "additions": 275, "deletions": 0}, "files": [{"sha": "13a889017866a112bbf088864210d7ada61b5682", "filename": "config/pkg.m4", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3335c9f954f8939403eabb5ad3d8739be9984f81/config%2Fpkg.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3335c9f954f8939403eabb5ad3d8739be9984f81/config%2Fpkg.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fpkg.m4?ref=3335c9f954f8939403eabb5ad3d8739be9984f81", "patch": "@@ -0,0 +1,275 @@\n+# pkg.m4 - Macros to locate and utilise pkg-config.   -*- Autoconf -*-\n+# serial 12 (pkg-config-0.29.2)\n+\n+dnl Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n+dnl Copyright \u00a9 2012-2015 Dan Nicholson <dbn.lists@gmail.com>\n+dnl\n+dnl This program is free software; you can redistribute it and/or modify\n+dnl it under the terms of the GNU General Public License as published by\n+dnl the Free Software Foundation; either version 2 of the License, or\n+dnl (at your option) any later version.\n+dnl\n+dnl This program is distributed in the hope that it will be useful, but\n+dnl WITHOUT ANY WARRANTY; without even the implied warranty of\n+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+dnl General Public License for more details.\n+dnl\n+dnl You should have received a copy of the GNU General Public License\n+dnl along with this program; if not, write to the Free Software\n+dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+dnl 02111-1307, USA.\n+dnl\n+dnl As a special exception to the GNU General Public License, if you\n+dnl distribute this file as part of a program that contains a\n+dnl configuration script generated by Autoconf, you may include it under\n+dnl the same distribution terms that you use for the rest of that\n+dnl program.\n+\n+dnl PKG_PREREQ(MIN-VERSION)\n+dnl -----------------------\n+dnl Since: 0.29\n+dnl\n+dnl Verify that the version of the pkg-config macros are at least\n+dnl MIN-VERSION. Unlike PKG_PROG_PKG_CONFIG, which checks the user's\n+dnl installed version of pkg-config, this checks the developer's version\n+dnl of pkg.m4 when generating configure.\n+dnl\n+dnl To ensure that this macro is defined, also add:\n+dnl m4_ifndef([PKG_PREREQ],\n+dnl     [m4_fatal([must install pkg-config 0.29 or later before running autoconf/autogen])])\n+dnl\n+dnl See the \"Since\" comment for each macro you use to see what version\n+dnl of the macros you require.\n+m4_defun([PKG_PREREQ],\n+[m4_define([PKG_MACROS_VERSION], [0.29.2])\n+m4_if(m4_version_compare(PKG_MACROS_VERSION, [$1]), -1,\n+    [m4_fatal([pkg.m4 version $1 or higher is required but ]PKG_MACROS_VERSION[ found])])\n+])dnl PKG_PREREQ\n+\n+dnl PKG_PROG_PKG_CONFIG([MIN-VERSION])\n+dnl ----------------------------------\n+dnl Since: 0.16\n+dnl\n+dnl Search for the pkg-config tool and set the PKG_CONFIG variable to\n+dnl first found in the path. Checks that the version of pkg-config found\n+dnl is at least MIN-VERSION. If MIN-VERSION is not specified, 0.9.0 is\n+dnl used since that's the first version where most current features of\n+dnl pkg-config existed.\n+AC_DEFUN([PKG_PROG_PKG_CONFIG],\n+[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n+m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n+m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n+AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n+AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n+AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n+\n+if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n+\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n+fi\n+if test -n \"$PKG_CONFIG\"; then\n+\t_pkg_min_version=m4_default([$1], [0.9.0])\n+\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n+\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n+\t\tAC_MSG_RESULT([yes])\n+\telse\n+\t\tAC_MSG_RESULT([no])\n+\t\tPKG_CONFIG=\"\"\n+\tfi\n+fi[]dnl\n+])dnl PKG_PROG_PKG_CONFIG\n+\n+dnl PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n+dnl -------------------------------------------------------------------\n+dnl Since: 0.18\n+dnl\n+dnl Check to see whether a particular set of modules exists. Similar to\n+dnl PKG_CHECK_MODULES(), but does not set variables or print errors.\n+dnl\n+dnl Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n+dnl only at the first occurence in configure.ac, so if the first place\n+dnl it's called might be skipped (such as if it is within an \"if\", you\n+dnl have to call PKG_CHECK_EXISTS manually\n+AC_DEFUN([PKG_CHECK_EXISTS],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+if test -n \"$PKG_CONFIG\" && \\\n+    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n+  m4_default([$2], [:])\n+m4_ifvaln([$3], [else\n+  $3])dnl\n+fi])\n+\n+dnl _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n+dnl ---------------------------------------------\n+dnl Internal wrapper calling pkg-config via PKG_CONFIG and setting\n+dnl pkg_failed based on the result.\n+m4_define([_PKG_CONFIG],\n+[if test -n \"$$1\"; then\n+    pkg_cv_[]$1=\"$$1\"\n+ elif test -n \"$PKG_CONFIG\"; then\n+    PKG_CHECK_EXISTS([$3],\n+                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n+\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n+\t\t     [pkg_failed=yes])\n+ else\n+    pkg_failed=untried\n+fi[]dnl\n+])dnl _PKG_CONFIG\n+\n+dnl _PKG_SHORT_ERRORS_SUPPORTED\n+dnl ---------------------------\n+dnl Internal check to see if pkg-config supports short errors.\n+AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n+        _pkg_short_errors_supported=yes\n+else\n+        _pkg_short_errors_supported=no\n+fi[]dnl\n+])dnl _PKG_SHORT_ERRORS_SUPPORTED\n+\n+\n+dnl PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n+dnl   [ACTION-IF-NOT-FOUND])\n+dnl --------------------------------------------------------------\n+dnl Since: 0.4.0\n+dnl\n+dnl Note that if there is a possibility the first call to\n+dnl PKG_CHECK_MODULES might not happen, you should be sure to include an\n+dnl explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n+AC_DEFUN([PKG_CHECK_MODULES],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n+AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n+\n+pkg_failed=no\n+AC_MSG_CHECKING([for $2])\n+\n+_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n+_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n+\n+m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n+and $1[]_LIBS to avoid the need to call pkg-config.\n+See the pkg-config man page for more details.])\n+\n+if test $pkg_failed = yes; then\n+        AC_MSG_RESULT([no])\n+        _PKG_SHORT_ERRORS_SUPPORTED\n+        if test $_pkg_short_errors_supported = yes; then\n+\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n+        else\n+\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n+        fi\n+\t# Put the nasty error message in config.log where it belongs\n+\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n+\n+\tm4_default([$4], [AC_MSG_ERROR(\n+[Package requirements ($2) were not met:\n+\n+$$1_PKG_ERRORS\n+\n+Consider adjusting the PKG_CONFIG_PATH environment variable if you\n+installed software in a non-standard prefix.\n+\n+_PKG_TEXT])[]dnl\n+        ])\n+elif test $pkg_failed = untried; then\n+        AC_MSG_RESULT([no])\n+\tm4_default([$4], [AC_MSG_FAILURE(\n+[The pkg-config script could not be found or is too old.  Make sure it\n+is in your PATH or set the PKG_CONFIG environment variable to the full\n+path to pkg-config.\n+\n+_PKG_TEXT\n+\n+To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n+        ])\n+else\n+\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n+\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n+        AC_MSG_RESULT([yes])\n+\t$3\n+fi[]dnl\n+])dnl PKG_CHECK_MODULES\n+\n+\n+dnl PKG_CHECK_MODULES_STATIC(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n+dnl   [ACTION-IF-NOT-FOUND])\n+dnl ---------------------------------------------------------------------\n+dnl Since: 0.29\n+dnl\n+dnl Checks for existence of MODULES and gathers its build flags with\n+dnl static libraries enabled. Sets VARIABLE-PREFIX_CFLAGS from --cflags\n+dnl and VARIABLE-PREFIX_LIBS from --libs.\n+dnl\n+dnl Note that if there is a possibility the first call to\n+dnl PKG_CHECK_MODULES_STATIC might not happen, you should be sure to\n+dnl include an explicit call to PKG_PROG_PKG_CONFIG in your\n+dnl configure.ac.\n+AC_DEFUN([PKG_CHECK_MODULES_STATIC],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+_save_PKG_CONFIG=$PKG_CONFIG\n+PKG_CONFIG=\"$PKG_CONFIG --static\"\n+PKG_CHECK_MODULES($@)\n+PKG_CONFIG=$_save_PKG_CONFIG[]dnl\n+])dnl PKG_CHECK_MODULES_STATIC\n+\n+\n+dnl PKG_INSTALLDIR([DIRECTORY])\n+dnl -------------------------\n+dnl Since: 0.27\n+dnl\n+dnl Substitutes the variable pkgconfigdir as the location where a module\n+dnl should install pkg-config .pc files. By default the directory is\n+dnl $libdir/pkgconfig, but the default can be changed by passing\n+dnl DIRECTORY. The user can override through the --with-pkgconfigdir\n+dnl parameter.\n+AC_DEFUN([PKG_INSTALLDIR],\n+[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n+m4_pushdef([pkg_description],\n+    [pkg-config installation directory @<:@]pkg_default[@:>@])\n+AC_ARG_WITH([pkgconfigdir],\n+    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n+    [with_pkgconfigdir=]pkg_default)\n+AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n+m4_popdef([pkg_default])\n+m4_popdef([pkg_description])\n+])dnl PKG_INSTALLDIR\n+\n+\n+dnl PKG_NOARCH_INSTALLDIR([DIRECTORY])\n+dnl --------------------------------\n+dnl Since: 0.27\n+dnl\n+dnl Substitutes the variable noarch_pkgconfigdir as the location where a\n+dnl module should install arch-independent pkg-config .pc files. By\n+dnl default the directory is $datadir/pkgconfig, but the default can be\n+dnl changed by passing DIRECTORY. The user can override through the\n+dnl --with-noarch-pkgconfigdir parameter.\n+AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n+[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n+m4_pushdef([pkg_description],\n+    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n+AC_ARG_WITH([noarch-pkgconfigdir],\n+    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n+    [with_noarch_pkgconfigdir=]pkg_default)\n+AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n+m4_popdef([pkg_default])\n+m4_popdef([pkg_description])\n+])dnl PKG_NOARCH_INSTALLDIR\n+\n+\n+dnl PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n+dnl [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n+dnl -------------------------------------------\n+dnl Since: 0.28\n+dnl\n+dnl Retrieves the value of the pkg-config variable for the given module.\n+AC_DEFUN([PKG_CHECK_VAR],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n+\n+_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n+AS_VAR_COPY([$1], [pkg_cv_][$1])\n+\n+AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n+])dnl PKG_CHECK_VAR"}]}