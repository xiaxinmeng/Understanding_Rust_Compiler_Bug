{"sha": "e656f08b6f7794c0c04a808fec50ea9a079577c7", "node_id": "C_kwDOANBUbNoAKGU2NTZmMDhiNmY3Nzk0YzBjMDRhODA4ZmVjNTBlYTlhMDc5NTc3Yzc", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-23T13:35:17Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-26T16:28:04Z"}, "message": "gccrs: refactor resolve_method_address to be more generic\n\nWe can reuse the DefId to lookup the mappings to Items or Trait Items\ninstead of the HirId this is more generic and can then be reused for the\nderef operator overload during autoderef cycles.\n\nAddresses #2190\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-base.cc (HIRCompileBase::resolve_method_address): refactor\n\t* backend/rust-compile-base.h: likewise\n\t* backend/rust-compile-expr.cc (CompileExpr::visit): likewise\n\t* backend/rust-compile-resolve-path.cc (HIRCompileBase::query_compile): likewise\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "fc2cc85773dabf7b4e9b4184bc7980f09b15280a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2cc85773dabf7b4e9b4184bc7980f09b15280a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e656f08b6f7794c0c04a808fec50ea9a079577c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e656f08b6f7794c0c04a808fec50ea9a079577c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e656f08b6f7794c0c04a808fec50ea9a079577c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e656f08b6f7794c0c04a808fec50ea9a079577c7/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2ecdf3b9d4c4216d67c24ab6e65a48290c08df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2ecdf3b9d4c4216d67c24ab6e65a48290c08df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2ecdf3b9d4c4216d67c24ab6e65a48290c08df"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "caa10ed452d3afcc17717f840782d01446c4ea77", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=e656f08b6f7794c0c04a808fec50ea9a079577c7", "patch": "@@ -766,27 +766,28 @@ HIRCompileBase::named_constant_expression (tree type_tree,\n }\n \n tree\n-HIRCompileBase::resolve_method_address (\n-  TyTy::FnType *fntype, HirId ref, TyTy::BaseType *receiver,\n-  const HIR::PathIdentSegment &segment,\n-  const Analysis::NodeMapping &expr_mappings, Location expr_locus)\n+HIRCompileBase::resolve_method_address (TyTy::FnType *fntype,\n+\t\t\t\t\tTyTy::BaseType *receiver,\n+\t\t\t\t\tLocation expr_locus)\n {\n+  DefId id = fntype->get_id ();\n+  rust_assert (id != UNKNOWN_DEFID);\n+\n   // Now we can try and resolve the address since this might be a forward\n   // declared function, generic function which has not be compiled yet or\n   // its an not yet trait bound function\n-  HIR::ImplItem *resolved_item\n-    = ctx->get_mappings ()->lookup_hir_implitem (ref, nullptr);\n+  HIR::Item *resolved_item = ctx->get_mappings ()->lookup_defid (id);\n   if (resolved_item != nullptr)\n     {\n       if (!fntype->has_subsititions_defined ())\n-\treturn CompileInherentImplItem::Compile (resolved_item, ctx);\n+\treturn CompileItem::compile (resolved_item, ctx);\n \n-      return CompileInherentImplItem::Compile (resolved_item, ctx, fntype);\n+      return CompileItem::compile (resolved_item, ctx, fntype);\n     }\n \n   // it might be resolved to a trait item\n   HIR::TraitItem *trait_item\n-    = ctx->get_mappings ()->lookup_hir_trait_item (ref);\n+    = ctx->get_mappings ()->lookup_trait_item_defid (id);\n   HIR::Trait *trait = ctx->get_mappings ()->lookup_trait_item_mapping (\n     trait_item->get_mappings ().get_hirid ());\n \n@@ -800,7 +801,7 @@ HIRCompileBase::resolve_method_address (\n   // item so its up to us to figure out if this path should resolve\n   // to an trait-impl-block-item or if it can be defaulted to the\n   // trait-impl-item's definition\n-\n+  const HIR::PathIdentSegment segment (trait_item->trait_identifier ());\n   auto root = receiver->get_root ();\n   auto candidates\n     = Resolver::PathProbeImplTrait::Probe (root, segment, trait_ref);\n@@ -840,7 +841,8 @@ HIRCompileBase::resolve_method_address (\n       TyTy::BaseType *infer_impl_call\n \t= candidate_call->infer_substitions (expr_locus);\n       monomorphized\n-\t= Resolver::unify_site (ref, TyTy::TyWithLocation (infer_impl_call),\n+\t= Resolver::unify_site (fntype->get_ref (),\n+\t\t\t\tTyTy::TyWithLocation (infer_impl_call),\n \t\t\t\tTyTy::TyWithLocation (fntype), expr_locus);\n     }\n "}, {"sha": "957aba18462d6ad47c17300df69a72c7ba101baf", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=e656f08b6f7794c0c04a808fec50ea9a079577c7", "patch": "@@ -80,10 +80,7 @@ class HIRCompileBase\n   tree resolve_unsized_dyn_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t       tree expression, Location locus);\n \n-  tree resolve_method_address (TyTy::FnType *fntype, HirId ref,\n-\t\t\t       TyTy::BaseType *receiver,\n-\t\t\t       const HIR::PathIdentSegment &segment,\n-\t\t\t       const Analysis::NodeMapping &expr_mappings,\n+  tree resolve_method_address (TyTy::FnType *fntype, TyTy::BaseType *receiver,\n \t\t\t       Location expr_locus);\n \n   void compile_function_body (tree fndecl, HIR::BlockExpr &function_body,"}, {"sha": "8db52d42fc6386ef29fde2b9f566c5d0f0dd1aae", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=e656f08b6f7794c0c04a808fec50ea9a079577c7", "patch": "@@ -1757,9 +1757,7 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n       // lookup compiled functions since it may have already been compiled\n       HIR::PathExprSegment method_name = expr.get_method_name ();\n       HIR::PathIdentSegment segment_name = method_name.get_segment ();\n-      fn_expr\n-\t= resolve_method_address (fntype, ref, receiver, segment_name,\n-\t\t\t\t  expr.get_mappings (), expr.get_locus ());\n+      fn_expr = resolve_method_address (fntype, receiver, expr.get_locus ());\n     }\n \n   // lookup the autoderef mappings\n@@ -1899,9 +1897,7 @@ CompileExpr::resolve_operator_overload (\n   // lookup compiled functions since it may have already been compiled\n   HIR::PathIdentSegment segment_name (\n     Analysis::RustLangItem::ToString (lang_item_type));\n-  tree fn_expr\n-    = resolve_method_address (fntype, ref, receiver, segment_name,\n-\t\t\t      expr.get_mappings (), expr.get_locus ());\n+  tree fn_expr = resolve_method_address (fntype, receiver, expr.get_locus ());\n \n   // lookup the autoderef mappings\n   std::vector<Resolver::Adjustment> *adjustments = nullptr;"}, {"sha": "59894998ddade78471031c0fdf61c217d0dd8326", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656f08b6f7794c0c04a808fec50ea9a079577c7/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=e656f08b6f7794c0c04a808fec50ea9a079577c7", "patch": "@@ -213,8 +213,7 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t      receiver = fn->get_self_type ();\n \t      receiver = receiver->destructure ();\n \n-\t      return resolve_method_address (fn, ref, receiver, final_segment,\n-\t\t\t\t\t     mappings, expr_locus);\n+\t      return resolve_method_address (fn, receiver, expr_locus);\n \t    }\n \t}\n "}]}