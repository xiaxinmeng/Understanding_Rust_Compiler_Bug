{"sha": "c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjMGNlNjhhNGE3ZjY5ZWMyNGQzNTFhZTgyZTVhNjc1YzE0NzBlZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2013-10-14T13:23:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:23:50Z"}, "message": "einfo.adb: Flag 263 is now known as Has_Visible_Refinement.\n\n2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb: Flag 263 is now known as Has_Visible_Refinement.\n\t(Has_Non_Null_Refinement): New routine.\n\t(Has_Null_Refinement): The routine is now synthesized.\n\t(Has_Visible_Refinement): New routine.\n\t(Set_Has_Visible_Refinement): New routine.\n\t(Write_Entity_Flags): Remove the output for\n\tHas_Null_Refinement. Add output for Has_Visible_Refinement.\n\t* einfo.ads: Update the occurrences of Has_Non_Null_Refinement,\n\tHas_Null_Refinement and Has_Visible_Refinement in entities.\n\t(Has_Non_Null_Refinement): New synthesized attribute.\n\t(Has_Null_Refinement): This attribute is now synthesized.\n\t(Has_Visible_Refinement): New routine with corresponding\n\tpragma Inline.\n\t(Set_Has_Visible_Refinement): New routine with corresponding pragma\n\tInline.\n\t* sem_ch3.adb (Analyze_Declarations): Add new local\n\tvariable In_Package_Body. Remove state refinements from\n\tvisibility at the end of the package body declarations.\n\t(Remove_Visible_Refinements): New routine.\n\t* sem_prag.adb (Analyze_Constituent): Collect a null\n\tconstituent and mark the state as having visible refinement.\n\t(Analyze_Global_Item): Use attribute Has_Visible_Refinement to\n\tdetect a state with visible refinement.\n\t(Analyze_Input_Output): Use attribute Has_Visible_Refinement to detect\n\ta state with visible refinement.\n\t(Check_Dependency_Clause): Use attribute Has_Non_Null_Refinement rather\n\tthan checking the contents of list Refinement_Constituents.\n\t(Check_In_Out_States): Use attribute Has_Non_Null_Refinement rather\n\tthan checking the contents of list Refinement_Constituents.\n\t(Check_Input_States): Use attribute Has_Non_Null_Refinement rather\n\tthan checking the contents of list Refinement_Constituents.\n\t(Check_Matching_Constituent): Mark a state as having visible refinement.\n\t(Check_Output_States): Use attribute Has_Non_Null_Refinement rather than\n\tchecking the contents of list Refinement_Constituents.\n\t(Check_Refined_Global_Item): Use attribute Has_Visible_Refinement\n\tto detect a state with visible refinement.\n\t(Is_Matching_Input): Use attribute Has_Non_Null_Refinement rather than\n\tchecking the contents of list Refinement_Constituents.\n\t* sem_util.adb (Is_Refined_State): Use attribute\n\tHas_Visible_Refinement to detect a state with visible refinement.\n\nFrom-SVN: r203546", "tree": {"sha": "48708031701b399bc07a31115cd36a3a44964280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48708031701b399bc07a31115cd36a3a44964280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26168a32da1ef7e75c8f2f6b557d8ecce17e43b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26168a32da1ef7e75c8f2f6b557d8ecce17e43b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26168a32da1ef7e75c8f2f6b557d8ecce17e43b9"}], "stats": {"total": 250, "additions": 196, "deletions": 54}, "files": [{"sha": "81458adc9141738ea0bdc4b69b358525388ae51a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -1,3 +1,46 @@\n+2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb: Flag 263 is now known as Has_Visible_Refinement.\n+\t(Has_Non_Null_Refinement): New routine.\n+\t(Has_Null_Refinement): The routine is now synthesized.\n+\t(Has_Visible_Refinement): New routine.\n+\t(Set_Has_Visible_Refinement): New routine.\n+\t(Write_Entity_Flags): Remove the output for\n+\tHas_Null_Refinement. Add output for Has_Visible_Refinement.\n+\t* einfo.ads: Update the occurrences of Has_Non_Null_Refinement,\n+\tHas_Null_Refinement and Has_Visible_Refinement in entities.\n+\t(Has_Non_Null_Refinement): New synthesized attribute.\n+\t(Has_Null_Refinement): This attribute is now synthesized.\n+\t(Has_Visible_Refinement): New routine with corresponding\n+\tpragma Inline.\n+\t(Set_Has_Visible_Refinement): New routine with corresponding pragma\n+\tInline.\n+\t* sem_ch3.adb (Analyze_Declarations): Add new local\n+\tvariable In_Package_Body. Remove state refinements from\n+\tvisibility at the end of the package body declarations.\n+\t(Remove_Visible_Refinements): New routine.\n+\t* sem_prag.adb (Analyze_Constituent): Collect a null\n+\tconstituent and mark the state as having visible refinement.\n+\t(Analyze_Global_Item): Use attribute Has_Visible_Refinement to\n+\tdetect a state with visible refinement.\n+\t(Analyze_Input_Output): Use attribute Has_Visible_Refinement to detect\n+\ta state with visible refinement.\n+\t(Check_Dependency_Clause): Use attribute Has_Non_Null_Refinement rather\n+\tthan checking the contents of list Refinement_Constituents.\n+\t(Check_In_Out_States): Use attribute Has_Non_Null_Refinement rather\n+\tthan checking the contents of list Refinement_Constituents.\n+\t(Check_Input_States): Use attribute Has_Non_Null_Refinement rather\n+\tthan checking the contents of list Refinement_Constituents.\n+\t(Check_Matching_Constituent): Mark a state as having visible refinement.\n+\t(Check_Output_States): Use attribute Has_Non_Null_Refinement rather than\n+\tchecking the contents of list Refinement_Constituents.\n+\t(Check_Refined_Global_Item): Use attribute Has_Visible_Refinement\n+\tto detect a state with visible refinement.\n+\t(Is_Matching_Input): Use attribute Has_Non_Null_Refinement rather than\n+\tchecking the contents of list Refinement_Constituents.\n+\t* sem_util.adb (Is_Refined_State): Use attribute\n+\tHas_Visible_Refinement to detect a state with visible refinement.\n+\n 2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Check_Mode): Do not emit an"}, {"sha": "176a81fbc5d48591ca5dac631ebaf9f966f2e9b7", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -551,7 +551,7 @@ package body Einfo is\n \n    --    Has_Delayed_Rep_Aspects         Flag261\n    --    May_Inherit_Delayed_Rep_Aspects Flag262\n-   --    Has_Null_Refinement             Flag263\n+   --    Has_Visible_Refinement          Flag263\n \n    --    (unused)                        Flag264\n    --    (unused)                        Flag265\n@@ -1483,12 +1483,6 @@ package body Einfo is\n       return Flag75 (Implementation_Base_Type (Id));\n    end Has_Non_Standard_Rep;\n \n-   function Has_Null_Refinement (Id : E) return B is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      return Flag263 (Id);\n-   end Has_Null_Refinement;\n-\n    function Has_Object_Size_Clause (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -1716,6 +1710,12 @@ package body Einfo is\n       return Flag215 (Id);\n    end Has_Up_Level_Access;\n \n+   function Has_Visible_Refinement (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      return Flag263 (Id);\n+   end Has_Visible_Refinement;\n+\n    function Has_Volatile_Components (Id : E) return B is\n    begin\n       return Flag87 (Implementation_Base_Type (Id));\n@@ -4110,12 +4110,6 @@ package body Einfo is\n       Set_Flag75 (Id, V);\n    end Set_Has_Non_Standard_Rep;\n \n-   procedure Set_Has_Null_Refinement (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Abstract_State);\n-      Set_Flag263 (Id, V);\n-   end Set_Has_Null_Refinement;\n-\n    procedure Set_Has_Object_Size_Clause (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -4343,6 +4337,12 @@ package body Einfo is\n       Set_Flag72 (Id, V);\n    end Set_Has_Unknown_Discriminants;\n \n+   procedure Set_Has_Visible_Refinement (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      Set_Flag263 (Id, V);\n+   end Set_Has_Visible_Refinement;\n+\n    procedure Set_Has_Volatile_Components (Id : E; V : B := True) is\n    begin\n       pragma Assert (not Is_Type (Id) or else Is_Base_Type (Id));\n@@ -6471,6 +6471,29 @@ package body Einfo is\n       return False;\n    end Has_Interrupt_Handler;\n \n+   -----------------------------\n+   -- Has_Non_Null_Refinement --\n+   -----------------------------\n+\n+   function Has_Non_Null_Refinement (Id : E) return B is\n+   begin\n+      --  \"Refinement\" is a concept applicable only to abstract states\n+\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+\n+      if Has_Visible_Refinement (Id) then\n+         pragma Assert (Present (Refinement_Constituents (Id)));\n+\n+         --  For a refinement to be non-null, the first constituent must be\n+         --  anything other than null.\n+\n+         return\n+           Nkind (Node (First_Elmt (Refinement_Constituents (Id)))) /= N_Null;\n+      end if;\n+\n+      return False;\n+   end Has_Non_Null_Refinement;\n+\n    -----------------------------\n    -- Has_Null_Abstract_State --\n    -----------------------------\n@@ -6484,6 +6507,29 @@ package body Einfo is\n           and then Is_Null_State (Node (First_Elmt (Abstract_States (Id))));\n    end Has_Null_Abstract_State;\n \n+   -------------------------\n+   -- Has_Null_Refinement --\n+   -------------------------\n+\n+   function Has_Null_Refinement (Id : E) return B is\n+   begin\n+      --  \"Refinement\" is a concept applicable only to abstract states\n+\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+\n+      if Has_Visible_Refinement (Id) then\n+         pragma Assert (Present (Refinement_Constituents (Id)));\n+\n+         --  For a refinement to be null, the state's sole constituent must be\n+         --  a null.\n+\n+         return\n+           Nkind (Node (First_Elmt (Refinement_Constituents (Id)))) = N_Null;\n+      end if;\n+\n+      return False;\n+   end Has_Null_Refinement;\n+\n    --------------------\n    -- Has_Unmodified --\n    --------------------\n@@ -7969,7 +8015,6 @@ package body Einfo is\n       W (\"Has_Missing_Return\",              Flag142 (Id));\n       W (\"Has_Nested_Block_With_Handler\",   Flag101 (Id));\n       W (\"Has_Non_Standard_Rep\",            Flag75  (Id));\n-      W (\"Has_Null_Refinement\",             Flag263 (Id));\n       W (\"Has_Object_Size_Clause\",          Flag172 (Id));\n       W (\"Has_Per_Object_Constraint\",       Flag154 (Id));\n       W (\"Has_Postconditions\",              Flag240 (Id));\n@@ -8011,6 +8056,7 @@ package body Einfo is\n       W (\"Has_Unchecked_Union\",             Flag123 (Id));\n       W (\"Has_Unknown_Discriminants\",       Flag72  (Id));\n       W (\"Has_Up_Level_Access\",             Flag215 (Id));\n+      W (\"Has_Visible_Refinement\",          Flag263 (Id));\n       W (\"Has_Volatile_Components\",         Flag87  (Id));\n       W (\"Has_Xref_Entry\",                  Flag182 (Id));\n       W (\"In_Package_Body\",                 Flag48  (Id));"}, {"sha": "8bc4b79007f88369a4050c4f357981e97b15b3f8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -1636,6 +1636,10 @@ package Einfo is\n --       optimizations to ensure that they are consistent with exceptions.\n --       See documentation in Gigi for further details.\n \n+--    Has_Non_Null_Refinement (synth)\n+--       Defined in E_Abstract_State entities. True if the state has at least\n+--       one variable or state constituent in aspect/pragma Refined_State.\n+\n --    Has_Non_Standard_Rep (Flag75) [implementation base type only]\n --       Defined in all type entities. Set when some representation clause\n --       or pragma causes the representation of the item to be significantly\n@@ -1650,8 +1654,8 @@ package Einfo is\n --       Defined in package entities. True if the package is subject to a null\n --       Abstract_State aspect/pragma.\n \n---    Has_Null_Refinement (Flag263)\n---       Defined in E_Abstract_State entities. Set if the state has a null\n+--    Has_Null_Refinement (synth)\n+--       Defined in E_Abstract_State entities. True if the state has a null\n --       refinement in aspect/pragma Refined_State.\n \n --    Has_Object_Size_Clause (Flag172)\n@@ -1913,6 +1917,11 @@ package Einfo is\n --       VM_Target /= No_VM, for efficiency, since only the .NET back-end\n --       makes use of it to generate proper code for up-level references.\n \n+--    Has_Visible_Refinement (Flag263)\n+--       Defined in E_Abstract_State entities. Set when a state has at least\n+--       one refinement constituent and analysis is in the region between\n+--       pragma Refined_State and the end of the package body declarations.\n+\n --    Has_Volatile_Components (Flag87) [implementation base type only]\n --       Defined in all types and objects. Set only for an array type or array\n --       object if a valid pragma Volatile_Components or a valid pragma\n@@ -5108,7 +5117,9 @@ package Einfo is\n    --  E_Abstract_State\n    --    Refinement_Constituents             (Elist8)\n    --    Refined_State                       (Node10)\n-   --    Has_Null_Refinement                 (Flag263)\n+   --    Has_Visible_Refinement              (Flag263)\n+   --    Has_Non_Null_Refinement             (synth)\n+   --    Has_Null_Refinement                 (synth)\n    --    Is_External_State                   (synth)\n    --    Is_Input_Only_State                 (synth)\n    --    Is_Null_State                       (synth)\n@@ -6349,7 +6360,6 @@ package Einfo is\n    function Has_Missing_Return                  (Id : E) return B;\n    function Has_Nested_Block_With_Handler       (Id : E) return B;\n    function Has_Non_Standard_Rep                (Id : E) return B;\n-   function Has_Null_Refinement                 (Id : E) return B;\n    function Has_Object_Size_Clause              (Id : E) return B;\n    function Has_Per_Object_Constraint           (Id : E) return B;\n    function Has_Postconditions                  (Id : E) return B;\n@@ -6391,6 +6401,7 @@ package Einfo is\n    function Has_Unchecked_Union                 (Id : E) return B;\n    function Has_Unknown_Discriminants           (Id : E) return B;\n    function Has_Up_Level_Access                 (Id : E) return B;\n+   function Has_Visible_Refinement              (Id : E) return B;\n    function Has_Volatile_Components             (Id : E) return B;\n    function Has_Xref_Entry                      (Id : E) return B;\n    function Hiding_Loop_Variable                (Id : E) return E;\n@@ -6696,7 +6707,9 @@ package Einfo is\n    function Has_Attach_Handler                  (Id : E) return B;\n    function Has_Entries                         (Id : E) return B;\n    function Has_Foreign_Convention              (Id : E) return B;\n+   function Has_Non_Null_Refinement             (Id : E) return B;\n    function Has_Null_Abstract_State             (Id : E) return B;\n+   function Has_Null_Refinement                 (Id : E) return B;\n    function Implementation_Base_Type            (Id : E) return E;\n    function Is_Base_Type                        (Id : E) return B;\n    function Is_Boolean_Type                     (Id : E) return B;\n@@ -6963,7 +6976,6 @@ package Einfo is\n    procedure Set_Has_Missing_Return              (Id : E; V : B := True);\n    procedure Set_Has_Nested_Block_With_Handler   (Id : E; V : B := True);\n    procedure Set_Has_Non_Standard_Rep            (Id : E; V : B := True);\n-   procedure Set_Has_Null_Refinement             (Id : E; V : B := True);\n    procedure Set_Has_Object_Size_Clause          (Id : E; V : B := True);\n    procedure Set_Has_Per_Object_Constraint       (Id : E; V : B := True);\n    procedure Set_Has_Postconditions              (Id : E; V : B := True);\n@@ -7005,6 +7017,7 @@ package Einfo is\n    procedure Set_Has_Unchecked_Union             (Id : E; V : B := True);\n    procedure Set_Has_Unknown_Discriminants       (Id : E; V : B := True);\n    procedure Set_Has_Up_Level_Access             (Id : E; V : B := True);\n+   procedure Set_Has_Visible_Refinement          (Id : E; V : B := True);\n    procedure Set_Has_Volatile_Components         (Id : E; V : B := True);\n    procedure Set_Has_Xref_Entry                  (Id : E; V : B := True);\n    procedure Set_Hiding_Loop_Variable            (Id : E; V : E);\n@@ -7679,7 +7692,6 @@ package Einfo is\n    pragma Inline (Has_Missing_Return);\n    pragma Inline (Has_Nested_Block_With_Handler);\n    pragma Inline (Has_Non_Standard_Rep);\n-   pragma Inline (Has_Null_Refinement);\n    pragma Inline (Has_Object_Size_Clause);\n    pragma Inline (Has_Per_Object_Constraint);\n    pragma Inline (Has_Postconditions);\n@@ -7721,6 +7733,7 @@ package Einfo is\n    pragma Inline (Has_Unchecked_Union);\n    pragma Inline (Has_Unknown_Discriminants);\n    pragma Inline (Has_Up_Level_Access);\n+   pragma Inline (Has_Visible_Refinement);\n    pragma Inline (Has_Volatile_Components);\n    pragma Inline (Has_Xref_Entry);\n    pragma Inline (Hiding_Loop_Variable);\n@@ -8140,7 +8153,6 @@ package Einfo is\n    pragma Inline (Set_Has_Missing_Return);\n    pragma Inline (Set_Has_Nested_Block_With_Handler);\n    pragma Inline (Set_Has_Non_Standard_Rep);\n-   pragma Inline (Set_Has_Null_Refinement);\n    pragma Inline (Set_Has_Object_Size_Clause);\n    pragma Inline (Set_Has_Per_Object_Constraint);\n    pragma Inline (Set_Has_Postconditions);\n@@ -8182,6 +8194,7 @@ package Einfo is\n    pragma Inline (Set_Has_Unchecked_Union);\n    pragma Inline (Set_Has_Unknown_Discriminants);\n    pragma Inline (Set_Has_Up_Level_Access);\n+   pragma Inline (Set_Has_Visible_Refinement);\n    pragma Inline (Set_Has_Volatile_Components);\n    pragma Inline (Set_Has_Xref_Entry);\n    pragma Inline (Set_Hiding_Loop_Variable);"}, {"sha": "037527c110c9fe883126fa43703ca8c39d34df2d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -2067,6 +2067,11 @@ package body Sem_Ch3 is\n       --  (They have the sloc of the label as found in the source, and that\n       --  is ahead of the current declarative part).\n \n+      procedure Remove_Visible_Refinements (Spec_Id : Entity_Id);\n+      --  Spec_Id is the entity of a package that may define abstract states.\n+      --  If the states have visible refinement, remove the visibility of each\n+      --  constituent at the end of the package body declarations.\n+\n       -----------------\n       -- Adjust_Decl --\n       -----------------\n@@ -2080,6 +2085,24 @@ package body Sem_Ch3 is\n          end loop;\n       end Adjust_Decl;\n \n+      --------------------------------\n+      -- Remove_Visible_Refinements --\n+      --------------------------------\n+\n+      procedure Remove_Visible_Refinements (Spec_Id : Entity_Id) is\n+         State_Elmt : Elmt_Id;\n+\n+      begin\n+         if Present (Abstract_States (Spec_Id)) then\n+            State_Elmt := First_Elmt (Abstract_States (Spec_Id));\n+            while Present (State_Elmt) loop\n+               Set_Has_Visible_Refinement (Node (State_Elmt), False);\n+\n+               Next_Elmt (State_Elmt);\n+            end loop;\n+         end if;\n+      end Remove_Visible_Refinements;\n+\n       --  Local variables\n \n       Body_Id     : Entity_Id;\n@@ -2089,6 +2112,9 @@ package body Sem_Ch3 is\n       Prag        : Node_Id;\n       Spec_Id     : Entity_Id;\n \n+      In_Package_Body : Boolean := False;\n+      --  Flag set when the current declaration list belongs to a package body\n+\n    --  Start of processing for Analyze_Declarations\n \n    begin\n@@ -2220,6 +2246,8 @@ package body Sem_Ch3 is\n          --  Refined_Global because the last two may mention constituents.\n \n          elsif Nkind (Context) = N_Package_Body then\n+            In_Package_Body := True;\n+\n             Body_Id := Defining_Entity (Context);\n             Spec_Id := Corresponding_Spec (Context);\n             Prag    := Get_Pragma (Body_Id, Pragma_Refined_State);\n@@ -2256,6 +2284,14 @@ package body Sem_Ch3 is\n \n          Next (Decl);\n       end loop;\n+\n+      --  State refinements are visible upto the end the of the package body\n+      --  declarations. Hide the refinements from visibility to restore the\n+      --  original state conditions.\n+\n+      if In_Package_Body then\n+         Remove_Visible_Refinements (Spec_Id);\n+      end if;\n    end Analyze_Declarations;\n \n    -----------------------------------"}, {"sha": "bfd895cc2bbf7e400cce618c8bbc60d07c1a7f1b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -798,9 +798,7 @@ package body Sem_Prag is\n                         --  appear in pragma [Refined_]Global as its place must\n                         --  be taken by some of its constituents.\n \n-                        elsif not Is_Empty_Elmt_List\n-                                    (Refinement_Constituents (Item_Id))\n-                        then\n+                        elsif Has_Visible_Refinement (Item_Id) then\n                            Error_Msg_NE\n                              (\"cannot mention state & in global refinement, \"\n                               & \"use its constituents instead\", Item, Item_Id);\n@@ -1625,9 +1623,7 @@ package body Sem_Prag is\n                   --  in pragma [Refined_]Global as its place must be taken by\n                   --  some of its constituents.\n \n-                  elsif not Is_Empty_Elmt_List\n-                              (Refinement_Constituents (Item_Id))\n-                  then\n+                  elsif Has_Visible_Refinement (Item_Id) then\n                      Error_Msg_NE\n                        (\"cannot mention state & in global refinement, use its \"\n                         & \"constituents instead\", Item, Item_Id);\n@@ -19677,9 +19673,7 @@ package body Sem_Prag is\n                         --    Depends         => (<output> =>  State)\n                         --    Refined_Depends => (<output> => (C1, C2))\n \n-                        elsif not Is_Empty_Elmt_List\n-                                    (Refinement_Constituents (Dep_Id))\n-                        then\n+                        elsif Has_Non_Null_Refinement (Dep_Id) then\n                            Has_Refined_State := True;\n \n                            if Is_Entity_Name (Ref_Input) then\n@@ -20033,9 +20027,7 @@ package body Sem_Prag is\n                   --    Refined_Depends => (C1 => <input>,\n                   --                        C2 => <input>)\n \n-                  elsif not Is_Empty_Elmt_List\n-                              (Refinement_Constituents (Dep_Id))\n-                  then\n+                  elsif Has_Non_Null_Refinement (Dep_Id) then\n                      Has_Refined_State := True;\n \n                      --  Store the entities of all output constituents of an\n@@ -20452,8 +20444,7 @@ package body Sem_Prag is\n                --  Ensure that one of the three coverage variants is satisfied\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then not Is_Empty_Elmt_List\n-                                (Refinement_Constituents (Item_Id))\n+                 and then Has_Non_Null_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -20536,8 +20527,7 @@ package body Sem_Prag is\n                --  is of mode Input.\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then not Is_Empty_Elmt_List\n-                                (Refinement_Constituents (Item_Id))\n+                 and then Has_Non_Null_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -20607,8 +20597,7 @@ package body Sem_Prag is\n                --  have mode Output.\n \n                if Ekind (Item_Id) = E_Abstract_State\n-                 and then not Is_Empty_Elmt_List\n-                                (Refinement_Constituents (Item_Id))\n+                 and then Has_Non_Null_Refinement (Item_Id)\n                then\n                   Check_Constituent_Usage (Item_Id);\n                end if;\n@@ -20730,8 +20719,7 @@ package body Sem_Prag is\n                --  occurrences in Global and Refined_Global match.\n \n                if No (Refined_State (Item_Id))\n-                 and then Is_Empty_Elmt_List\n-                            (Refinement_Constituents (Item_Id))\n+                 and then not Has_Visible_Refinement (Item_Id)\n                then\n                   Check_Matching_Modes (Item_Id);\n                end if;\n@@ -21088,13 +21076,20 @@ package body Sem_Prag is\n                      Add_Item (Constit_Id, Constituents_Seen);\n                      Remove_Elmt (Hidden_States, State_Elmt);\n \n-                     --  Establish a relation between the refined state and its\n-                     --  constituent.\n+                     --  Collect the constituent in the list of refinement\n+                     --  items. Establish a relation between the refined state\n+                     --  and its constituent.\n \n                      Append_Elmt\n                        (Constit_Id, Refinement_Constituents (State_Id));\n                      Set_Refined_State (Constit_Id, State_Id);\n \n+                     --  The state has at least one legal constituent, mark the\n+                     --  start of the refinement region. The region ends when\n+                     --  the body declarations end (see Analyze_Declarations).\n+\n+                     Set_Has_Visible_Refinement (State_Id);\n+\n                      return;\n                   end if;\n \n@@ -21129,11 +21124,18 @@ package body Sem_Prag is\n                   Error_Msg_N\n                     (\"cannot mix null and non-null constituents\", Constit);\n \n-               --  Mark the related state as having a null refinement\n-\n                else\n                   Null_Seen := True;\n-                  Set_Has_Null_Refinement (State_Id);\n+\n+                  --  Collect the constituent in the list of refinement items\n+\n+                  Append_Elmt (Constit, Refinement_Constituents (State_Id));\n+\n+                  --  The state has at least one legal constituent, mark the\n+                  --  start of the refinement region. The region ends when the\n+                  --  body declarations end (see Analyze_Declarations).\n+\n+                  Set_Has_Visible_Refinement (State_Id);\n                end if;\n \n             --  Non-null constituents\n@@ -21717,12 +21719,15 @@ package body Sem_Prag is\n             if Ekind (Item_Id) = E_Abstract_State then\n                if Has_Null_Refinement (Item_Id) then\n                   Has_Null_State := True;\n-               elsif Mode = Name_Input then\n-                  Has_In_State := True;\n-               elsif Mode = Name_In_Out then\n-                  Has_In_Out_State := True;\n-               elsif Mode = Name_Output then\n-                  Has_Out_State := True;\n+\n+               elsif Has_Non_Null_Refinement (Item_Id) then\n+                  if Mode = Name_Input then\n+                     Has_In_State := True;\n+                  elsif Mode = Name_In_Out then\n+                     Has_In_Out_State := True;\n+                  elsif Mode = Name_Output then\n+                     Has_Out_State := True;\n+                  end if;\n                end if;\n             end if;\n "}, {"sha": "df7e9532d207a99d237a7f2d53e5f17d2c07f4f5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c5c0ce68a4a7f69ec24d351ae82e5a675c1470ee", "patch": "@@ -3418,8 +3418,7 @@ package body Sem_Util is\n \n             return\n               Ekind (Item_Id) = E_Abstract_State\n-                and then not Is_Empty_Elmt_List\n-                               (Refinement_Constituents (Item_Id));\n+                and then Has_Visible_Refinement (Item_Id);\n          end if;\n       end Is_Refined_State;\n "}]}