{"sha": "e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmZjRmZmI0M2QzZDg1MjBmMWMxMDZlMDQ0MjFmMmU2YTAyMWMzOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-29T00:17:01Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-29T00:17:01Z"}, "message": "Daily bump.", "tree": {"sha": "b286a1e29dbab4d1893f90cd06d7de8ce721011d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b286a1e29dbab4d1893f90cd06d7de8ce721011d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/comments", "author": null, "committer": null, "parents": [{"sha": "e4aefface2a0e34d84b85844b11652eb28f2cf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4aefface2a0e34d84b85844b11652eb28f2cf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4aefface2a0e34d84b85844b11652eb28f2cf0c"}], "stats": {"total": 713, "additions": 712, "deletions": 1}, "files": [{"sha": "5d94c140e31e11ceaa424fd423d9a5ec97797c14", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,9 @@\n+2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* configure.ac (--enable-offload-defaulted): New.\n+\t* configure: Regenerate.\n+\n 2021-04-23  David Faust  <david.faust@oracle.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "5ee24583d91394a8d929e1034193cad9795afb08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,251 @@\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Modify comment to\n+\tmake consistent with updated RTL pattern.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>qmovn<mode>):\n+\tImplement using ss_truncate and us_truncate rather than\n+\tunspecs.\n+\t* config/aarch64/iterators.md: Remove redundant unspecs and\n+\titerator: UNSPEC_[SU]QXTN and SUQMOVN respectively.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_acle.h (__attribute__): Make intrinsic\n+\tattributes consistent with those defined in arm_neon.h.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_fp16.h (__attribute__): Make intrinsic\n+\tattributes consistent with those defined in arm_neon.h.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add\n+\tfloat_trunc_rodd builtin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_float_trunc_rodd_df):\n+\tDefine.\n+\t(aarch64_float_trunc_rodd_lo_v2sf): Define.\n+\t(aarch64_float_trunc_rodd_hi_v4sf_le): Define.\n+\t(aarch64_float_trunc_rodd_hi_v4sf_be): Define.\n+\t(aarch64_float_trunc_rodd_hi_v4sf): Define.\n+\t* config/aarch64/arm_neon.h (vcvtx_f32_f64): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vcvtx_high_f32_f64): Likewise.\n+\t(vcvtxd_f32_f64): Likewise.\n+\t* config/aarch64/iterators.md: Add FCVTXN unspec.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add tbx1 builtin\n+\tgenerator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_tbx1<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vqtbx1_s8): USE RTL builtin\n+\tinstead of inline asm.\n+\t(vqtbx1_u8): Likewise.\n+\t(vqtbx1_p8): Likewise.\n+\t(vqtbx1q_s8): Likewise.\n+\t(vqtbx1q_u8): Likewise.\n+\t(vqtbx1q_p8): Likewise.\n+\t(vtbx2_s8): Likewise.\n+\t(vtbx2_u8): Likewise.\n+\t(vtbx2_p8): Likewise.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add tbl1 builtin\n+\tgenerator macros.\n+\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vqtbl1_s8): Likewise.\n+\t(vqtbl1_u8): Likewise.\n+\t(vqtbl1q_p8): Likewise.\n+\t(vqtbl1q_s8): Likewise.\n+\t(vqtbl1q_u8): Likewise.\n+\t(vtbl1_s8): Likewise.\n+\t(vtbl1_u8): Likewise.\n+\t(vtbl1_p8): Likewise.\n+\t(vtbl2_s8): Likewise.\n+\t(vtbl2_u8): Likewise.\n+\t(vtbl2_p8): Likewise.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add polynomial\n+\tssri_n buitin generator macro.\n+\t* config/aarch64/arm_neon.h (vsri_n_p8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vsri_n_p16): Likewise.\n+\t(vsri_n_p64): Likewise.\n+\t(vsriq_n_p8): Likewise.\n+\t(vsriq_n_p16): Likewise.\n+\t(vsriq_n_p64): Likewise.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use VALLP mode\n+\titerator for polynomial ssli_n builtin generator macro.\n+\t* config/aarch64/arm_neon.h (vsli_n_p8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vsli_n_p16): Likewise.\n+\t(vsliq_n_p8): Likewise.\n+\t(vsliq_n_p16): Likewise.\n+\t* config/aarch64/iterators.md: Define VALLP mode iterator.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use VDQV_L\n+\titerator to generate [su]adalp RTL builtins.\n+\t* config/aarch64/aarch64-simd.md: Use VDQV_L iterator in\n+\t[su]adalp RTL pattern.\n+\t* config/aarch64/arm_neon.h (vpadal_s32): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vpadal_u32): Likewise.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]addlp\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>addlp<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vpaddl_s8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vpaddl_s16): Likewise.\n+\t(vpaddl_s32): Likewise.\n+\t(vpaddl_u8): Likewise.\n+\t(vpaddl_u16): Likewise.\n+\t(vpaddl_u32): Likewise.\n+\t(vpaddlq_s8): Likewise.\n+\t(vpaddlq_s16): Likewise.\n+\t(vpaddlq_s32): Likewise.\n+\t(vpaddlq_u8): Likewise.\n+\t(vpaddlq_u16): Likewise.\n+\t(vpaddlq_u32): Liwewise.\n+\t* config/aarch64/iterators.md: Define [SU]ADDLP unspecs with\n+\tappropriate attributes.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use VDQ_I iterator\n+\tfor aarch64_addp<mode> builtin macro generator.\n+\t* config/aarch64/aarch64-simd.md: Use VDQ_I iterator in\n+\taarch64_addp<mode> RTL pattern.\n+\t* config/aarch64/arm_neon.h (vpaddq_s8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vpaddq_s16): Likewise.\n+\t(vpaddq_s32): Likewise.\n+\t(vpaddq_s64): Likewise.\n+\t(vpaddq_u8): Likewise.\n+\t(vpaddq_u16): Likewise.\n+\t(vpaddq_u32): Likewise.\n+\t(vpaddq_u64): Likewise.\n+\n+2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add sq[r]dmulh_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_n<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vqdmulh_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vqdmulh_n_s32): Likewise.\n+\t(vqdmulhq_n_s16): Likewise.\n+\t(vqdmulhq_n_s32): Likewise.\n+\t(vqrdmulh_n_s16): Likewise.\n+\t(vqrdmulh_n_s32): Likewise.\n+\t(vqrdmulhq_n_s16): Likewise.\n+\t(vqrdmulhq_n_s32): Likewise.\n+\n+2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/install.texi (--enable-offload-defaulted): Document.\n+\n+2021-04-28  Senthil Kumar Selvaraj  <saaadhu@gcc.gnu.org>\n+\n+\t* config/avr/avr-dimode.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add new patterns to match output of\n+\tthe splitters.\n+\t* config/avr/avr-fixed.md: Likewise.\n+\t* config/avr/avr.c (cc_reg_rtx): New.\n+\t(avr_parallel_insn_from_insns): Adjust insn count\n+\tfor removal of set of cc0.\n+\t(avr_is_casesi_sequence): Likewise.\n+\t(avr_casei_sequence_check_operands): Likewise.\n+\t(avr_optimize_casesi): Likewise. Also insert\n+\tnew insns after jump_insn.\n+\t(avr_pass_casesi::avr_rest_of_handle_casesi): Adjust\n+\tfor removal of set of cc0.\n+\t(avr_init_expanders): Initialize cc_reg_rtx.\n+\t(avr_regno_reg_class): Handle REG_CC.\n+\t(cond_string): Remove usage of CC_OVERFLOW_UNUSABLE.\n+\t(avr_notice_update_cc): Remove function.\n+\t(ret_cond_branch): Remove usage of CC_OVERFLOW_UNUSABLE.\n+\t(compare_condition): Adjust for PARALLEL with\n+\tREG_CC clobber.\n+\t(out_shift_with_cnt): Likewise.\n+\t(ashlhi3_out): Likewise.\n+\t(ashrhi3_out): Likewise.\n+\t(lshrhi3_out): Likewise.\n+\t(avr_class_max_nregs): Return single reg for REG_CC.\n+\t(avr_compare_pattern): Check for REG_CC instead\n+\tof cc0_rtx.\n+\t(avr_reorg_remove_redundant_compare): Likewise.\n+\t(avr_reorg):Adjust for PARALLEL with REG_CC clobber.\n+\t(avr_hard_regno_nregs): Return single reg for REG_CC.\n+\t(avr_hard_regno_mode_ok): Allow only CCmode for REG_CC.\n+\t(avr_md_asm_adjust): Clobber REG_CC.\n+\t(TARGET_HARD_REGNO_NREGS): Define.\n+\t(TARGET_CLASS_MAX_NREGS): Define.\n+\t(TARGET_MD_ASM_ADJUST): Define.\n+\t* config/avr/avr.h (FIRST_PSEUDO_REGISTER): Adjust\n+\tfor REG_CC.\n+\t(enum reg_class): Add CC_REG class.\n+\t(NOTICE_UPDATE_CC): Remove.\n+\t(CC_OVERFLOW_UNUSABLE): Remove.\n+\t(CC_NO_CARRY): Remove.\n+\t* config/avr/avr.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add new patterns to match output of\n+\tthe splitters.\n+\t(sez): Remove unused pattern.\n+\n+2021-04-28  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/100311\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Only allow VPR to be\n+\tused in HImode.\n+\n+2021-04-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100305\n+\t* config/aarch64/constraints.md (Utq): Require the address to\n+\tbe valid for both the element mode and for V2DImode.\n+\n+2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* configure.ac (OFFLOAD_DEFAULTED): AC_DEFINE if offload-defaulted.\n+\t* gcc.c (process_command): New variable.\n+\t(driver::maybe_putenv_OFFLOAD_TARGETS): If OFFLOAD_DEFAULTED,\n+\tset it if -foffload is defaulted.\n+\t* lto-wrapper.c (OFFLOAD_TARGET_DEFAULT_ENV): Define.\n+\t(compile_offload_image): If OFFLOAD_DEFAULTED and\n+\tOFFLOAD_TARGET_DEFAULT is in the environment, don't fail\n+\tif corresponding mkoffload can't be found.\n+\t(compile_images_for_offload_targets): Likewise.  Free and clear\n+\toffload_names if no valid offload is found.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2021-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100292\n+\t* tree-vect-generic.c (expand_vector_condition): Do not fold\n+\tthe comparisons.\n+\n 2021-04-27  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix.h (SUBTARGET_DRIVER_SELF_SPECS): New."}, {"sha": "d04d9806e5b7e6c5c77556aba26922fa1f8e0cb9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1 +1 @@\n-20210428\n+20210429"}, {"sha": "f3ad896612092036f7a8269d198917ddb581478f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,301 @@\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb, sem_util.adb: Fix style.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* nlists.ads (List_Length): Adapt comment to match the\n+\tbehaviour.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Selected_Component): Only consider compile\n+\ttime known aggregates.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb: Add use clause for Interfaces.Unsigned_16\n+\tand Interfaces.Unsigned_32.\n+\t(Small16): New constant.\n+\t(Small32): Likewise.\n+\t(Small64): Likewise.\n+\t(Small80): Likewise.\n+\t(Pred): Declare a local overlay for Small and return it negated\n+\tfor zero if the type does not support denormalized numbers.\n+\t(Succ): Likewise, but return it directly.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Formal_Is_Used_Once): Refine type of the counter\n+\tvariable; remove redundant assignment.\n+\n+2021-04-28  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-interr.adb (Install_Restricted_Handlers): Change\n+\tPrio parameter to type Interrupt_Priority.\n+\t* libgnarl/s-interr.ads (Install_Restricted_Handlers): Likewise.\n+\t* libgnarl/s-interr__dummy.adb (Install_Restricted_Handlers):\n+\tLikewise.\n+\t* libgnarl/s-interr__hwint.adb (Install_Restricted_Handlers):\n+\tLikewise.\n+\t* libgnarl/s-interr__sigaction.adb (Install_Restricted_Handlers):\n+\tLikewise.\n+\t* libgnarl/s-interr__vxworks.adb (Install_Restricted_Handlers):\n+\tLikewise.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_type.ads (Write_Interp_Ref): Removed; no longer needed.\n+\t* sem_type.adb (Headers): Removed; now the hash table is\n+\tdirectly in the Interp_Map alone.\n+\t(Interp_Map): Now an instance of the GNAT.HTable.Simple_HTable.\n+\t(Last_Overloaded): New variable to emulate Interp_Map.Last.\n+\t(Add_One_Interp): Adapt to new data structure.\n+\t(Get_First_Interp): Likewise.\n+\t(Hash): Likewise.\n+\t(Init_Interp_Tables): Likewise.\n+\t(New_Interps): Likewise.\n+\t(Save_Interps): Likewise; handle O_N variable like in\n+\tGet_First_Interp.\n+\t(Write_Interp_Ref): Removed; no longer needed.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Do_Reset_Calls): Now an instance of Traverse_Proc.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Static): Reuse\n+\tError_Msg_Ada_2020_Feature for aspect Static.\n+\t(Analyze_One_Aspect): Likewise for aspect Full_Access.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Static): Refactor to have a\n+\tsingle check for the expression being present; adapt comments.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Static): Use aspect name in the\n+\terror message.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Selected_Component): Simplify with\n+\tUnqualify.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valrea.adb (Fast2Sum): New function.\n+\t(Integer_to_Real): Use it in an iterated addition with exact\n+\terror handling for the case where an extra digit is needed.\n+\tMove local variable now only used in the exponentiation case.\n+\n+2021-04-28  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb: (Error_Msg_Internal): Use span instead of\n+\tlocation.\n+\t(Error_Msg, Error_Msg_NEL): Add versions with span parameter.\n+\t(Error_Msg_F, Error_Msg_FE, Error_Msg_N, Error_Msg_NE,\n+\tError_Msg_NW): Retrieve span from node.\n+\t(First_Node): Use the new First_And_Last_Nodes.\n+\t(First_And_Last_Nodes): Expand on previous First_Node. Apply to\n+\tother nodes than expressions.\n+\t(First_Sloc): Protect against inconsistent locations.\n+\t(Last_Node): New function based on First_And_Last_Nodes.\n+\t(Last_Sloc): New function similar to First_Sloc.\n+\t(Output_Messages): Update output when -gnatdF is used. Use\n+\tcharacter ~ for making the span visible, similar to what is done\n+\tin GCC and Clang.\n+\t* errout.ads (Error_Msg, Error_Msg_NEL): Add versions with span\n+\tparameter.\n+\t(First_And_Last_Nodes, Last_Node, Last_Sloc): New subprograms.\n+\t* erroutc.adb: Adapt to Sptr field being a span.\n+\t* erroutc.ads (Error_Msg_Object): Change field Sptr from\n+\tlocation to span.\n+\t* errutil.adb: Adapt to Sptr field being a span.\n+\t* freeze.adb: Use Errout reporting procedures for nodes to get\n+\tspans.\n+\t* par-ch3.adb: Likewise.\n+\t* par-prag.adb: Likewise.\n+\t* par-util.adb: Likewise.\n+\t* sem_case.adb: Likewise.\n+\t* sem_ch13.adb: Likewise.\n+\t* sem_ch3.adb: Likewise.\n+\t* sem_prag.adb: Likewise.\n+\t* types.ads: (Source_Span): New type for spans.\n+\t(To_Span): Basic constructors for spans.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.adb (Discriminant_Constraint): Refine assertion.\n+\n+2021-04-28  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Add_Own_DIC): Suppress expansion of a DIC pragma\n+\twhen the pragma occurs for an abstract type, since that could\n+\tlead to a call to an abstract function, and such DIC checks can\n+\tnever be performed for abstract types in any case.\n+\t* sem_disp.adb (Check_Dispatching_Context): Suppress the check\n+\tfor illegal calls to abstract subprograms when the call occurs\n+\twithin a Default_Initial_Condition aspect and the call is passed\n+\tthe current instance as an actual.\n+\t(Has_Controlling_Current_Instance_Actual): New function to test\n+\ta call to see if it has any actuals given by direct references\n+\tto a current instance of a type\n+\t* sem_res.adb (Resolve_Actuals): Issue an error for a call\n+\twithin a DIC aspect to a nonprimitive subprogram with an actual\n+\tgiven by the name of the DIC type's current instance (which will\n+\tshow up as a reference to the formal parameter of a DIC\n+\tprocedure).\n+\n+2021-04-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Record_Extension): Set Parent_Subtype on\n+\tthe type extension when within a generic unit, even though\n+\texpansion is disabled, to allow for proper resolution of\n+\tselected components inherited from an ancestor.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aux.adb (Is_Limited_Type): Fix logic to check Is_Type\n+\tbefore assuming Ent is a typo.\n+\t* sem_ch4.adb (Analyze_Expression_With_Actions): Update\n+\tcomments, minor reformatting.\n+\t* sem_res.adb (Resolve_Declare_Expression): Add protection\n+\tagainst no type.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb: Fix typo in comment.\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): Add missing call\n+\tto Create_Extra_Formals. Remove obsolete bootstrap check.\n+\t* sem_eval.adb (Eval_Selected_Component): Simplify a\n+\tselected_component on an aggregate.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* fmap.ads (Reset_Tables): Remove outdated references to\n+\tGNSA/ASIS.\n+\t* sem_eval.ads (Initialize): Likewise.\n+\t* sem_type.adb (Headers): Remove initialization at elaboration.\n+\t* sem_type.ads (Init_Interp_Tables): Remove outdated reference\n+\tto gnatf.\n+\t* stringt.ads (Initialize): Fix style in comment.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.ads: Update reference in comment.\n+\t* sem_type.ads: Fix casing in a name of a unit.\n+\n+2021-04-28  Yannick Moy  <moy@adacore.com>\n+\n+\t* ghost.adb (Check_Ghost_Context): Add continuation message when\n+\tin predicate.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valrea.adb (Integer_to_Real): Use a subtype of Num\n+\tfor the component type of the table of powers of ten.\n+\t* libgnat/s-valuer.adb (Round_Extra): Add assertion on Base.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Case_Statement): Extend optimization to\n+\tall objects; fix typo in comment.\n+\n+2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Barrier_Function): Refine type of a\n+\tprotected type entity.\n+\t(Is_Pure_Barrier): Fix style.\n+\n+2021-04-28  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb (Simple_Init_Defaulted_Type): Simplify the code,\n+\tand always use OK_Convert_To, rather than Unchecked_Convert_To\n+\tand Convert_To.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Remove dead code.\n+\t* ali.ads, ali.adb (Scan_ALI): Remove unused parameters.\n+\tRemove unused code related to Xref lines.\n+\t(Get_Typeref): Removed, no longer used.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Build_Array_VS_Func, Build_Record_VS_Func,\n+\tExpand_N_Attribute_Reference): Use Get_Fullest_View instead of\n+\tValidated_View.\n+\t(Build_Record_VS_Func): Adjust to keep using Validated_View.\n+\t(Expand_N_Attribute_Reference) [Valid]: Use\n+\tSmall_Integer_Type_For to allow for more compile time\n+\tevaluations.\n+\t* sem_util.adb (Cannot_Raise_Constraint_Error): Add more precise\n+\tsupport for N_Indexed_Component and fix support for\n+\tN_Selected_Component which wasn't completely safe.\n+\t(List_Cannot_Raise_CE): New.\n+\t* libgnat/i-cobol.adb (Valid_Packed): Simplify test to address\n+\tnew GNAT warning.\n+\n+2021-04-28  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* .gitignore: New.\n+\t* doc/share/conf.py: Add Python 3 compatibility.\n+\t* doc/share/gnat.sty: Add missing file.\n+\n+2021-04-28  Richard Wai  <richard@annexi-strayline.com>\n+\n+\t* libgnat/a-cohase.ads (Cursor): Synchronize comments for the Cursor\n+\ttype definition to be consistent with identical definitions in other\n+\tcontainer packages. Add additional comments regarding the importance of\n+\tmaintaining the \"Position\" component for predefined equality.\n+\t* libgnat/a-cohama.ads (Cursor): Likewise.\n+\t* libgnat/a-cihama.ads (Cursor): Likewise.\n+\t* libgnat/a-cohase.adb (Find, Insert): Ensure that Cursor objects\n+\talways have their \"Position\" component set to ensure predefined\n+\tequality works as required.\n+\t* libgnat/a-cohama.adb (Find, Insert): Likewise.\n+\t* libgnat/a-cihama.adb (Find, Insert): Likewise.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_subprog_type): Do not demote a\n+\tconst or pure function because of a parameter whose type is pointer\n+\tto function.\n+\t* gcc-interface/trans.c (Call_to_gnu): Do not put back a conversion\n+\tbetween an actual and a formal that are unconstrained array types.\n+\t(gnat_gimplify_expr) <CALL_EXPR>: New case.\n+\t* gcc-interface/utils2.c (build_binary_op): Do not use |= operator.\n+\t(gnat_stabilize_reference_1): Likewise.\n+\t(gnat_rewrite_reference): Likewise.\n+\t(build_unary_op): Do not clear existing TREE_CONSTANT on the result.\n+\t(gnat_build_constructor): Also accept the address of a constant\n+\tCONSTRUCTOR as constant element.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (is_array_of_scalar_type): New predicate.\n+\t(find_decls_r): New function.\n+\t(return_slot_opt_for_pure_call_p): New predicate.\n+\t(Call_to_gnu): Do not create a temporary for the return value if the\n+\tparent node is an aggregate.  If there is a target, try to apply the\n+\treturn slot optimization to regular calls to pure functions returning\n+\tan array of scalar type.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (language_function): Add comment.\n+\t(loop_info_d): Add fndecl and invariants fields.\n+\t(find_loop_for): Test fndecl instead of the context of var.\n+\t(find_loop): New function.\n+\t(Regular_Loop_to_gnu): Fold back into...\n+\t(Loop_Statement_to_gnu): ...this.  Emit invariants on entry, if any.\n+\t(gnat_to_gnu) <N_Selected_Component>: Record nonconstant invariant\n+\toffset computations in loops when optimization is enabled.\n+\t* gcc-interface/utils2.c (gnat_invariant_expr): Handle BIT_AND_EXPR.\n+\n 2021-04-20  Martin Liska  <mliska@suse.cz>\n \n \t* gnatvsn.ads: Bump Library_Version to 12."}, {"sha": "b31a7ba8098b754d8186cc395c6ed95416cbf62d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,8 @@\n+2021-04-28  Patrick McGehearty  <patrick.mcgehearty@oracle.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Add supporting macros for new\n+\tcomplex divide\n+\n 2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \t    Tom de Vries  <vries@codesourcery.com>"}, {"sha": "a0936575cc2f08bcf81a667e27f58a09a76525e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,7 @@\n+2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* module.cc: Remove #error that triggers if DEV-PHASE is empty.\n+\n 2021-04-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92145"}, {"sha": "226fd84c2506f40b1466f03a24f42bfd01939df5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,14 @@\n+2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_variable_list): Gobble whitespace before\n+\tchecking whether a '%' or parenthesis-open follows as next character.\n+\n+2021-04-28  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/82376\n+\t* trans-expr.c (gfc_conv_procedure_call): Evaluate function result\n+\tand then pass a pointer.\n+\n 2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \t    Tom de Vries  <vries@codesourcery.com>"}, {"sha": "94bc018de140253e0dfc591f6aafa19cee19d7f1", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,9 @@\n+2021-04-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n 2021-04-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "69f8f0a1be4dccb1e2c897fba1956f7d35be7067", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,45 @@\n+2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/map-5.f90: New test.\n+\n+2021-04-28  Patrick McGehearty  <patrick.mcgehearty@oracle.com>\n+\n+\t* gcc.c-torture/execute/ieee/cdivchkd.c: New test.\n+\t* gcc.c-torture/execute/ieee/cdivchkf.c: Likewise.\n+\t* gcc.c-torture/execute/ieee/cdivchkld.c: Likewise.\n+\n+2021-04-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/i386/pr89676.c: Add -fomit-frame-pointer.\n+\n+2021-04-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/debug/dwarf2/inline5.c: Adjust pattern to avoid\n+\tmismatch when asm comments start with \"/ \".\n+\n+2021-04-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100305\n+\t* gcc.c-torture/compile/pr100305.c: New test.\n+\n+2021-04-28  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/82376\n+\t* gfortran.dg/PR82376.f90: New test.\n+\n+2021-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100292\n+\t* gcc.dg/pr100292.c: New testcase.\n+\n+2021-04-28  Richard Wai  <richard@annexi-strayline.com>\n+\n+\t* gnat.dg/containers2.adb: New test.\n+\n+2021-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt93.ads, gnat.dg/opt93.adb: New test.\n+\n 2021-04-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92145"}, {"sha": "882fecb4b0b3261770b3bb0d0a55f760eeee1b77", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,12 @@\n+2021-04-28  Patrick McGehearty  <patrick.mcgehearty@oracle.com>\n+\n+\t* libgcc2.c (XMTYPE, XCTYPE, RBIG, RMIN, RMIN2, RMINSCAL, RMAX2):\n+\tDefine.\n+\t(__divsc3, __divdc3, __divxc3, __divtc3): Improve complex divide.\n+\t* config/rs6000/_divkc3.c (RBIG, RMIN, RMIN2, RMINSCAL, RMAX2):\n+\tDefine.\n+\t(__divkc3): Improve complex divide.\n+\n 2021-04-23  Michael Meissner  <meissner@linux.ibm.com>\n \n \tPR target/98952"}, {"sha": "08583f99a3eeb5d3f19f6c6cb1bdb95caaa0193d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,13 @@\n+2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* configure.ac (OFFLOAD_DEFAULTED): AC_DEFINE if offload-defaulted.\n+\t* target.c (gomp_load_plugin_for_device): If set and if a plugin\n+\tcan't be dlopened, silently assume it has no devices.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2021-04-26  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f:"}, {"sha": "dbfbb3ea65d150d1a774c8eebfee2ee3eb1d632c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ff4ffb43d3d8520f1c106e04421f2e6a021c39/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4ff4ffb43d3d8520f1c106e04421f2e6a021c39", "patch": "@@ -1,3 +1,75 @@\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97930\n+\t* testsuite/20_util/pair/requirements/structural.cc: New test.\n+\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_pair.h (pair) [__cplusplus > 202002]: Add\n+\tnew definitions for constructors and assignment operators using\n+\tconcepts for constraints.\n+\t* testsuite/20_util/pair/cons/99957.cc: Disable for C++20 and\n+\tlater.\n+\t* testsuite/20_util/pair/cons/explicit_construct.cc: Adjust\n+\texpected error messages to also match C++20 errors.\n+\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99957\n+\t* include/bits/stl_pair.h (_PCC::_MoveCopyPair, _PCC::_CopyMovePair):\n+\tCombine and replace with ...\n+\t(_PCC::_DeprConsPair): New SFINAE helper function.\n+\t(pair): Merge preprocessor blocks so that all C++03 members\n+\tare defined together at the end.\n+\t(pair::pair(const _T1&, _U2&&), pair::pair(_U1&&, const _T2&)):\n+\tReplace _T1 and _T2 parameters with __null_ptr_constant and\n+\tadjust constraints.\n+\t* testsuite/20_util/pair/40925.cc: Use nullptr instead of 0.\n+\t* testsuite/20_util/pair/cons/explicit_construct.cc: Likewise.\n+\t* testsuite/20_util/pair/cons/99957.cc: New test.\n+\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (__cpp_lib_constexpr_string): Define.\n+\t* include/std/version (__cpp_lib_constexpr_string): Define.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc:\n+\tCheck for __cpp_lib_constexpr_string.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/char_traits/requirements/version.cc: New test.\n+\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/Makefile.am (stamp-pdf-doxygen): Improve comment about\n+\tdealing with errors. Use '@' to prevent shell command being\n+\techoed.\n+\t* doc/Makefile.in: Regenerate.\n+\n+2021-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100298\n+\t* include/bits/std_thread.h (thread::hardware_concurrency): Add\n+\tmissing noexcept to inline definition for non-gthreads targets.\n+\n+2021-04-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100187\n+\tPR libstdc++/100237\n+\tPR libstdc++/100249\n+\tPR libstdc++/100287\n+\t* include/bits/ranges_algo.h (__search_n_fn::operator()): Give\n+\tthe __value_comp lambda an explicit bool return type.\n+\t(__is_permutation_fn::operator()): Give the __proj_scan local\n+\tvariable auto&& return type.  Give the __comp_scan lambda an\n+\texplicit bool return type.\n+\t(__remove_fn::operator()): Give the __pred lambda an explicit\n+\tbool return type.\n+\t(__partition_fn::operator()): Don't std::move __first twice\n+\twhen returning an empty subrange.\n+\t(__min_fn::operator()): Don't std::move __comp.\n+\t(__max_fn::operator()): Likewise.\n+\t(__minmax_fn::operator()): Likewise.\n+\n 2021-04-27  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/100290"}]}