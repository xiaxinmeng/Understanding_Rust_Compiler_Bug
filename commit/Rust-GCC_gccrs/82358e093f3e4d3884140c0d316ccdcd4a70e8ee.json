{"sha": "82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIzNThlMDkzZjNlNGQzODg0MTQwYzBkMzE2Y2NkY2Q0YTcwZThlZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-21T19:23:34Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-21T19:23:34Z"}, "message": "re PR fortran/48405 (Handle expressions in DO loops for front-end optimization)\n\n2011-04-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/48405\n\t* frontend_passes (cfe_register_funcs): Remove workaround for DO\n\tloops.\n\t(gfc_code_walker):  Make sure the pointer to the current\n\tstatement doen't change when other statements are inserted.\n\n2011-04-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/48405\n\t* gfortran.dg/function_optimize_6.f90:  New test.\n\nFrom-SVN: r172838", "tree": {"sha": "e461eb8d050e730b39adc8c48aed01df02c7687d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e461eb8d050e730b39adc8c48aed01df02c7687d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/comments", "author": null, "committer": null, "parents": [{"sha": "6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddfda8a98c084192e8fd16c56b722fddf53dc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddfda8a98c084192e8fd16c56b722fddf53dc5a"}], "stats": {"total": 251, "additions": 140, "deletions": 111}, "files": [{"sha": "bbe8624a9ab51b869e52d99a72c6853a3e041f28", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "patch": "@@ -1,3 +1,11 @@\n+2011-04-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/48405\n+\t* frontend_passes (cfe_register_funcs): Remove workaround for DO\n+\tloops.\n+\t(gfc_code_walker):  Make sure the pointer to the current\n+\tstatement doen't change when other statements are inserted.\n+\n 2011-04-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "fbe5d1c0fee1471ed951f37cf455b3e7b388a7e1", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 111, "deletions": 111, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "patch": "@@ -140,12 +140,6 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  void *data ATTRIBUTE_UNUSED)\n {\n \n-  /* FIXME - there is a bug in the insertion code for DO loops.  Bail\n-     out here.  */\n-\n-  if ((*current_code)->op == EXEC_DO)\n-    return 0;\n-\n   if ((*e)->expr_type != EXPR_FUNCTION)\n     return 0;\n \n@@ -956,31 +950,37 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t{\n \t  gfc_code *b;\n \t  gfc_actual_arglist *a;\n+\t  gfc_code *co;\n+\n+\t  /* There might be statement insertions before the current code,\n+\t     which must not affect the expression walker.  */\n+\n+\t  co = *c;\n \n-\t  switch ((*c)->op)\n+\t  switch (co->op)\n \t    {\n \t    case EXEC_DO:\n-\t      WALK_SUBEXPR ((*c)->ext.iterator->var);\n-\t      WALK_SUBEXPR ((*c)->ext.iterator->start);\n-\t      WALK_SUBEXPR ((*c)->ext.iterator->end);\n-\t      WALK_SUBEXPR ((*c)->ext.iterator->step);\n+\t      WALK_SUBEXPR (co->ext.iterator->var);\n+\t      WALK_SUBEXPR (co->ext.iterator->start);\n+\t      WALK_SUBEXPR (co->ext.iterator->end);\n+\t      WALK_SUBEXPR (co->ext.iterator->step);\n \t      break;\n \n \t    case EXEC_CALL:\n \t    case EXEC_ASSIGN_CALL:\n-\t      for (a = (*c)->ext.actual; a; a = a->next)\n+\t      for (a = co->ext.actual; a; a = a->next)\n \t\tWALK_SUBEXPR (a->expr);\n \t      break;\n \n \t    case EXEC_CALL_PPC:\n-\t      WALK_SUBEXPR ((*c)->expr1);\n-\t      for (a = (*c)->ext.actual; a; a = a->next)\n+\t      WALK_SUBEXPR (co->expr1);\n+\t      for (a = co->ext.actual; a; a = a->next)\n \t\tWALK_SUBEXPR (a->expr);\n \t      break;\n \n \t    case EXEC_SELECT:\n-\t      WALK_SUBEXPR ((*c)->expr1);\n-\t      for (b = (*c)->block; b; b = b->block)\n+\t      WALK_SUBEXPR (co->expr1);\n+\t      for (b = co->block; b; b = b->block)\n \t\t{\n \t\t  gfc_case *cp;\n \t\t  for (cp = b->ext.block.case_list; cp; cp = cp->next)\n@@ -996,15 +996,15 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_DEALLOCATE:\n \t      {\n \t\tgfc_alloc *a;\n-\t\tfor (a = (*c)->ext.alloc.list; a; a = a->next)\n+\t\tfor (a = co->ext.alloc.list; a; a = a->next)\n \t\t  WALK_SUBEXPR (a->expr);\n \t\tbreak;\n \t      }\n \n \t    case EXEC_FORALL:\n \t      {\n \t\tgfc_forall_iterator *fa;\n-\t\tfor (fa = (*c)->ext.forall_iterator; fa; fa = fa->next)\n+\t\tfor (fa = co->ext.forall_iterator; fa; fa = fa->next)\n \t\t  {\n \t\t    WALK_SUBEXPR (fa->var);\n \t\t    WALK_SUBEXPR (fa->start);\n@@ -1015,110 +1015,110 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      }\n \n \t    case EXEC_OPEN:\n-\t      WALK_SUBEXPR ((*c)->ext.open->unit);\n-\t      WALK_SUBEXPR ((*c)->ext.open->file);\n-\t      WALK_SUBEXPR ((*c)->ext.open->status);\n-\t      WALK_SUBEXPR ((*c)->ext.open->access);\n-\t      WALK_SUBEXPR ((*c)->ext.open->form);\n-\t      WALK_SUBEXPR ((*c)->ext.open->recl);\n-\t      WALK_SUBEXPR ((*c)->ext.open->blank);\n-\t      WALK_SUBEXPR ((*c)->ext.open->position);\n-\t      WALK_SUBEXPR ((*c)->ext.open->action);\n-\t      WALK_SUBEXPR ((*c)->ext.open->delim);\n-\t      WALK_SUBEXPR ((*c)->ext.open->pad);\n-\t      WALK_SUBEXPR ((*c)->ext.open->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.open->iomsg);\n-\t      WALK_SUBEXPR ((*c)->ext.open->convert);\n-\t      WALK_SUBEXPR ((*c)->ext.open->decimal);\n-\t      WALK_SUBEXPR ((*c)->ext.open->encoding);\n-\t      WALK_SUBEXPR ((*c)->ext.open->round);\n-\t      WALK_SUBEXPR ((*c)->ext.open->sign);\n-\t      WALK_SUBEXPR ((*c)->ext.open->asynchronous);\n-\t      WALK_SUBEXPR ((*c)->ext.open->id);\n-\t      WALK_SUBEXPR ((*c)->ext.open->newunit);\n+\t      WALK_SUBEXPR (co->ext.open->unit);\n+\t      WALK_SUBEXPR (co->ext.open->file);\n+\t      WALK_SUBEXPR (co->ext.open->status);\n+\t      WALK_SUBEXPR (co->ext.open->access);\n+\t      WALK_SUBEXPR (co->ext.open->form);\n+\t      WALK_SUBEXPR (co->ext.open->recl);\n+\t      WALK_SUBEXPR (co->ext.open->blank);\n+\t      WALK_SUBEXPR (co->ext.open->position);\n+\t      WALK_SUBEXPR (co->ext.open->action);\n+\t      WALK_SUBEXPR (co->ext.open->delim);\n+\t      WALK_SUBEXPR (co->ext.open->pad);\n+\t      WALK_SUBEXPR (co->ext.open->iostat);\n+\t      WALK_SUBEXPR (co->ext.open->iomsg);\n+\t      WALK_SUBEXPR (co->ext.open->convert);\n+\t      WALK_SUBEXPR (co->ext.open->decimal);\n+\t      WALK_SUBEXPR (co->ext.open->encoding);\n+\t      WALK_SUBEXPR (co->ext.open->round);\n+\t      WALK_SUBEXPR (co->ext.open->sign);\n+\t      WALK_SUBEXPR (co->ext.open->asynchronous);\n+\t      WALK_SUBEXPR (co->ext.open->id);\n+\t      WALK_SUBEXPR (co->ext.open->newunit);\n \t      break;\n \n \t    case EXEC_CLOSE:\n-\t      WALK_SUBEXPR ((*c)->ext.close->unit);\n-\t      WALK_SUBEXPR ((*c)->ext.close->status);\n-\t      WALK_SUBEXPR ((*c)->ext.close->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.close->iomsg);\n+\t      WALK_SUBEXPR (co->ext.close->unit);\n+\t      WALK_SUBEXPR (co->ext.close->status);\n+\t      WALK_SUBEXPR (co->ext.close->iostat);\n+\t      WALK_SUBEXPR (co->ext.close->iomsg);\n \t      break;\n \n \t    case EXEC_BACKSPACE:\n \t    case EXEC_ENDFILE:\n \t    case EXEC_REWIND:\n \t    case EXEC_FLUSH:\n-\t      WALK_SUBEXPR ((*c)->ext.filepos->unit);\n-\t      WALK_SUBEXPR ((*c)->ext.filepos->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.filepos->iomsg);\n+\t      WALK_SUBEXPR (co->ext.filepos->unit);\n+\t      WALK_SUBEXPR (co->ext.filepos->iostat);\n+\t      WALK_SUBEXPR (co->ext.filepos->iomsg);\n \t      break;\n \n \t    case EXEC_INQUIRE:\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->unit);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->file);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->iomsg);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->exist);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->opened);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->number);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->named);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->name);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->access);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->sequential);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->direct);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->form);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->formatted);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->unformatted);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->recl);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->nextrec);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->blank);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->position);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->action);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->read);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->write);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->readwrite);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->delim);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->encoding);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->pad);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->iolength);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->convert);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->strm_pos);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->asynchronous);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->decimal);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->pending);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->id);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->sign);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->size);\n-\t      WALK_SUBEXPR ((*c)->ext.inquire->round);\n+\t      WALK_SUBEXPR (co->ext.inquire->unit);\n+\t      WALK_SUBEXPR (co->ext.inquire->file);\n+\t      WALK_SUBEXPR (co->ext.inquire->iomsg);\n+\t      WALK_SUBEXPR (co->ext.inquire->iostat);\n+\t      WALK_SUBEXPR (co->ext.inquire->exist);\n+\t      WALK_SUBEXPR (co->ext.inquire->opened);\n+\t      WALK_SUBEXPR (co->ext.inquire->number);\n+\t      WALK_SUBEXPR (co->ext.inquire->named);\n+\t      WALK_SUBEXPR (co->ext.inquire->name);\n+\t      WALK_SUBEXPR (co->ext.inquire->access);\n+\t      WALK_SUBEXPR (co->ext.inquire->sequential);\n+\t      WALK_SUBEXPR (co->ext.inquire->direct);\n+\t      WALK_SUBEXPR (co->ext.inquire->form);\n+\t      WALK_SUBEXPR (co->ext.inquire->formatted);\n+\t      WALK_SUBEXPR (co->ext.inquire->unformatted);\n+\t      WALK_SUBEXPR (co->ext.inquire->recl);\n+\t      WALK_SUBEXPR (co->ext.inquire->nextrec);\n+\t      WALK_SUBEXPR (co->ext.inquire->blank);\n+\t      WALK_SUBEXPR (co->ext.inquire->position);\n+\t      WALK_SUBEXPR (co->ext.inquire->action);\n+\t      WALK_SUBEXPR (co->ext.inquire->read);\n+\t      WALK_SUBEXPR (co->ext.inquire->write);\n+\t      WALK_SUBEXPR (co->ext.inquire->readwrite);\n+\t      WALK_SUBEXPR (co->ext.inquire->delim);\n+\t      WALK_SUBEXPR (co->ext.inquire->encoding);\n+\t      WALK_SUBEXPR (co->ext.inquire->pad);\n+\t      WALK_SUBEXPR (co->ext.inquire->iolength);\n+\t      WALK_SUBEXPR (co->ext.inquire->convert);\n+\t      WALK_SUBEXPR (co->ext.inquire->strm_pos);\n+\t      WALK_SUBEXPR (co->ext.inquire->asynchronous);\n+\t      WALK_SUBEXPR (co->ext.inquire->decimal);\n+\t      WALK_SUBEXPR (co->ext.inquire->pending);\n+\t      WALK_SUBEXPR (co->ext.inquire->id);\n+\t      WALK_SUBEXPR (co->ext.inquire->sign);\n+\t      WALK_SUBEXPR (co->ext.inquire->size);\n+\t      WALK_SUBEXPR (co->ext.inquire->round);\n \t      break;\n \n \t    case EXEC_WAIT:\n-\t      WALK_SUBEXPR ((*c)->ext.wait->unit);\n-\t      WALK_SUBEXPR ((*c)->ext.wait->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.wait->iomsg);\n-\t      WALK_SUBEXPR ((*c)->ext.wait->id);\n+\t      WALK_SUBEXPR (co->ext.wait->unit);\n+\t      WALK_SUBEXPR (co->ext.wait->iostat);\n+\t      WALK_SUBEXPR (co->ext.wait->iomsg);\n+\t      WALK_SUBEXPR (co->ext.wait->id);\n \t      break;\n \n \t    case EXEC_READ:\n \t    case EXEC_WRITE:\n-\t      WALK_SUBEXPR ((*c)->ext.dt->io_unit);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->format_expr);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->rec);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->advance);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->iostat);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->size);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->iomsg);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->id);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->pos);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->asynchronous);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->blank);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->decimal);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->delim);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->pad);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->round);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->sign);\n-\t      WALK_SUBEXPR ((*c)->ext.dt->extra_comma);\n+\t      WALK_SUBEXPR (co->ext.dt->io_unit);\n+\t      WALK_SUBEXPR (co->ext.dt->format_expr);\n+\t      WALK_SUBEXPR (co->ext.dt->rec);\n+\t      WALK_SUBEXPR (co->ext.dt->advance);\n+\t      WALK_SUBEXPR (co->ext.dt->iostat);\n+\t      WALK_SUBEXPR (co->ext.dt->size);\n+\t      WALK_SUBEXPR (co->ext.dt->iomsg);\n+\t      WALK_SUBEXPR (co->ext.dt->id);\n+\t      WALK_SUBEXPR (co->ext.dt->pos);\n+\t      WALK_SUBEXPR (co->ext.dt->asynchronous);\n+\t      WALK_SUBEXPR (co->ext.dt->blank);\n+\t      WALK_SUBEXPR (co->ext.dt->decimal);\n+\t      WALK_SUBEXPR (co->ext.dt->delim);\n+\t      WALK_SUBEXPR (co->ext.dt->pad);\n+\t      WALK_SUBEXPR (co->ext.dt->round);\n+\t      WALK_SUBEXPR (co->ext.dt->sign);\n+\t      WALK_SUBEXPR (co->ext.dt->extra_comma);\n \t      break;\n \n \t    case EXEC_OMP_DO:\n@@ -1131,21 +1131,21 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_WORKSHARE:\n \t    case EXEC_OMP_END_SINGLE:\n \t    case EXEC_OMP_TASK:\n-\t      if ((*c)->ext.omp_clauses)\n+\t      if (co->ext.omp_clauses)\n \t\t{\n-\t\t  WALK_SUBEXPR ((*c)->ext.omp_clauses->if_expr);\n-\t\t  WALK_SUBEXPR ((*c)->ext.omp_clauses->num_threads);\n-\t\t  WALK_SUBEXPR ((*c)->ext.omp_clauses->chunk_size);\n+\t\t  WALK_SUBEXPR (co->ext.omp_clauses->if_expr);\n+\t\t  WALK_SUBEXPR (co->ext.omp_clauses->num_threads);\n+\t\t  WALK_SUBEXPR (co->ext.omp_clauses->chunk_size);\n \t\t}\n \t      break;\n \t    default:\n \t      break;\n \t    }\n \n-\t  WALK_SUBEXPR ((*c)->expr1);\n-\t  WALK_SUBEXPR ((*c)->expr2);\n-\t  WALK_SUBEXPR ((*c)->expr3);\n-\t  for (b = (*c)->block; b; b = b->block)\n+\t  WALK_SUBEXPR (co->expr1);\n+\t  WALK_SUBEXPR (co->expr2);\n+\t  WALK_SUBEXPR (co->expr3);\n+\t  for (b = co->block; b; b = b->block)\n \t    {\n \t      WALK_SUBEXPR (b->expr1);\n \t      WALK_SUBEXPR (b->expr2);"}, {"sha": "304ecb695ca4e0e94da8c3fdfb6344dc140f6393", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "patch": "@@ -1,3 +1,8 @@\n+2011-04-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/48405\n+\t* gfortran.dg/function_optimize_6.f90:  New test.\n+\n 2011-04-21  Easwaran Raman  <eraman@google.com>\n \n \t* gcc.dg/stack-layout-2.c: New test."}, {"sha": "cda7ab062838796fa39946dfe5c4c76826841f01", "filename": "gcc/testsuite/gfortran.dg/function_optimize_6.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82358e093f3e4d3884140c0d316ccdcd4a70e8ee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_6.f90?ref=82358e093f3e4d3884140c0d316ccdcd4a70e8ee", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-original\" }\n+! PR 48405 - function elimnination in a DO loop should work.\n+program main\n+  interface\n+     pure function mypure()\n+       integer :: mypure\n+     end function mypure\n+  end interface\n+  DO I=1,mypure() + mypure()\n+  ENDDO\n+END program main\n+! { dg-final { scan-tree-dump-times \"mypure\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+\n+"}]}