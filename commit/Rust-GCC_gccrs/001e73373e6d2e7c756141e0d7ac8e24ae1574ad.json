{"sha": "001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxZTczMzczZTZkMmU3Yzc1NjE0MWUwZDdhYzhlMjRhZTE1NzRhZA==", "commit": {"author": {"name": "Sergey Shalnov", "email": "Sergey.Shalnov@intel.com", "date": "2018-02-08T22:31:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-02-08T22:31:15Z"}, "message": "re PR target/83008 ([performance] Is it better to avoid extra instructions in data passing between loops?)\n\n\tPR target/83008\n\t* config/i386/x86-tune-costs.h (skylake_cost): Fix cost of\n\tstoring integer register in SImode.  Fix cost of 256 and 512\n\tbyte aligned SSE register store.\n\n\t* config/i386/i386.c (ix86_multiplication_cost): Fix\n\tmultiplication cost for TARGET_AVX512DQ.\n\ntestsuite/ChangeLog:\t\n\n\tPR target/83008\n\t* gcc.target/i386/pr83008.c: New test.\n\nFrom-SVN: r257505", "tree": {"sha": "9309b5c9e55c0ac73b256026a8e60660f2741c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9309b5c9e55c0ac73b256026a8e60660f2741c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/comments", "author": {"login": "shssf", "id": 19515906, "node_id": "MDQ6VXNlcjE5NTE1OTA2", "avatar_url": "https://avatars.githubusercontent.com/u/19515906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shssf", "html_url": "https://github.com/shssf", "followers_url": "https://api.github.com/users/shssf/followers", "following_url": "https://api.github.com/users/shssf/following{/other_user}", "gists_url": "https://api.github.com/users/shssf/gists{/gist_id}", "starred_url": "https://api.github.com/users/shssf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shssf/subscriptions", "organizations_url": "https://api.github.com/users/shssf/orgs", "repos_url": "https://api.github.com/users/shssf/repos", "events_url": "https://api.github.com/users/shssf/events{/privacy}", "received_events_url": "https://api.github.com/users/shssf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2318f3b46ed94cde0bd04d82dd1eccd483c23e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2318f3b46ed94cde0bd04d82dd1eccd483c23e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2318f3b46ed94cde0bd04d82dd1eccd483c23e5d"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "dd78a342cdf218b8cb18734389c63d7f586cf1e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "patch": "@@ -1,3 +1,15 @@\n+2018-02-08  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+\tPR target/83008\n+\t* config/i386/x86-tune-costs.h (skylake_cost): Fix cost of\n+\tstoring integer register in SImode.  Fix cost of 256 and 512\n+\tbyte aligned SSE register store.\n+\n+2018-02-08  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+\t* config/i386/i386.c (ix86_multiplication_cost): Fix\n+\tmultiplication cost for TARGET_AVX512DQ.\n+\n 2018-02-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/84238"}, {"sha": "a8709972e9c1a135e437b862fa008427ad760d92", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "patch": "@@ -40402,6 +40402,10 @@ ix86_multiplication_cost (const struct processor_costs *cost,\n \t\t\t   ? cost->mulsd : cost->mulss, true);\n   else if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n     {\n+      /* vpmullq is used in this case. No emulation is needed.  */\n+      if (TARGET_AVX512DQ)\n+\treturn ix86_vec_cost (mode, cost->mulss, true);\n+\n       /* V*QImode is emulated with 7-13 insns.  */\n       if (mode == V16QImode || mode == V32QImode)\n \t{"}, {"sha": "8409a5f166ca24f386c9a040c4ea1c4808aebd18", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "patch": "@@ -1557,7 +1557,7 @@ struct processor_costs skylake_cost = {\n   {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  {6, 6, 3},\t\t\t\t/* cost of storing integer registers */\n   2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n   {6, 6, 8},\t\t\t\t/* cost of loading fp registers\n \t\t\t\t\t   in SFmode, DFmode and XFmode */\n@@ -1572,7 +1572,7 @@ struct processor_costs skylake_cost = {\n   {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n-  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE registers\n+  {8, 8, 8, 12, 24},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2,\t\t\t\t\t/* SSE->integer and integer->SSE moves */"}, {"sha": "d9ed50cd3229316ccf6a53d3980640231c9245fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "patch": "@@ -1,3 +1,8 @@\n+2018-02-08  Sergey Shalnov  <sergey.shalnov@intel.com>\n+\n+\tPR target/83008\n+\t* gcc.target/i386/pr83008.c: New test.\n+\n 2018-02-08  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/81143"}, {"sha": "87a4beae197120c26aaca6788c6fb8dc6448d550", "filename": "gcc/testsuite/gcc.target/i386/pr83008.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83008.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001e73373e6d2e7c756141e0d7ac8e24ae1574ad/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83008.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83008.c?ref=001e73373e6d2e7c756141e0d7ac8e24ae1574ad", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/83008 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -funroll-loops -march=skylake-avx512 -mfpmath=sse\" } */\n+/* { dg-final { scan-assembler-not \"vmovdq(a|u)(32|64)\" } } */\n+\n+int\n+pr83008 (unsigned char *pix1, int i_pix1, unsigned char *pix2, int i_pix2)\n+{\n+  unsigned int tmp[4][4];\n+  unsigned int a0, a1, a2, a3;\n+  int sum = 0;\n+  for (int i = 0; i < 4; i++, pix1 += i_pix1, pix2 += i_pix2)\n+    {\n+      a0 = (pix1[0] - pix2[0]) + ((pix1[4] - pix2[4]) << 16);\n+      a1 = (pix1[1] - pix2[1]) + ((pix1[5] - pix2[5]) << 16);\n+      a2 = (pix1[2] - pix2[2]) + ((pix1[6] - pix2[6]) << 16);\n+      a3 = (pix1[3] - pix2[3]) + ((pix1[7] - pix2[7]) << 16);\n+      int t0 = a0 + a1;\n+      int t1 = a0 - a1;\n+      int t2 = a2 + a3;\n+      int t3 = a2 - a3;\n+      tmp[i][0] = t0 + t2;\n+      tmp[i][2] = t0 - t2;\n+      tmp[i][1] = t1 + t3;\n+      tmp[i][3] = t1 - t3;\n+    }\n+  for (int i = 0; i < 4; i++)\n+    {\n+      int t0 = tmp[0][i] + tmp[1][i];\n+      int t1 = tmp[0][i] - tmp[1][i];\n+      int t2 = tmp[2][i] + tmp[3][i];\n+      int t3 = tmp[2][i] - tmp[3][i];\n+      a0 = t0 + t2;\n+      a2 = t0 - t2;\n+      a1 = t1 + t3;\n+      a3 = t1 - t3;\n+      sum += (a0) + (a1) + (a2) + (a3);\n+    }\n+  return (sum + ((unsigned int) sum >> 16)) >> 1;\n+}"}]}