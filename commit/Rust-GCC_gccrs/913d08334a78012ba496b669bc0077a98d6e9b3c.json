{"sha": "913d08334a78012ba496b669bc0077a98d6e9b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzZDA4MzM0YTc4MDEyYmE0OTZiNjY5YmMwMDc3YTk4ZDZlOWIzYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-25T16:58:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-25T16:58:32Z"}, "message": "c-common.c (check_format_info): Don't call a variadic function with a non-literal format string.\n\n\t* c-common.c (check_format_info): Don't call a variadic function\n\twith a non-literal format string.\n\n\t* c-decl.c (grokdeclarator, start_struct, finish_struct): Likewise.\n\n\t* c-typeck.c (build_component_ref, build_unary_op, lvalue_or_else,\n\tpedantic_lvalue_warning, error_init, pedwarn_init, warning_init):\n\tLikewise.\n\n\t* cccp.c (check_macro_name, do_xifdef, vwarning_with_line):\n\tLikewise.\n\n\t* collect2.c (collect_wait): Likewise.\n\n\t* dbxout.c (dbxout_type): Likewise.\n\n\t* gcc.c (do_spec_1): Likewise.\n\n\t* genemit.c (gen_insn, gen_expand): Likewise.\n\n\t* genrecog.c (write_switch, write_subroutine): Likewise.\n\n\t* mips-tfile.c (catch_signal, botch): Likewise.\n\n\t* print-rtl.c (print_rtx): Likewise.\n\n\t* toplev.c (default_print_error_function, report_error_function,\n\t_fatal_insn): Likewise.\n\nFrom-SVN: r30666", "tree": {"sha": "255cdd5d37dc128a7ad564ade1d1db3d7b9f9af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255cdd5d37dc128a7ad564ade1d1db3d7b9f9af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/913d08334a78012ba496b669bc0077a98d6e9b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913d08334a78012ba496b669bc0077a98d6e9b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913d08334a78012ba496b669bc0077a98d6e9b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913d08334a78012ba496b669bc0077a98d6e9b3c/comments", "author": null, "committer": null, "parents": [{"sha": "7a12ace5bc2c9be0cbcd4b13bcd89f2e79a16318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a12ace5bc2c9be0cbcd4b13bcd89f2e79a16318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a12ace5bc2c9be0cbcd4b13bcd89f2e79a16318"}], "stats": {"total": 291, "additions": 179, "deletions": 112}, "files": [{"sha": "0576a018a01c71ee11ef5a96ee31888d2a73f2a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1,3 +1,34 @@\n+1999-11-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (check_format_info): Don't call a variadic function\n+\twith a non-literal format string.\n+\n+\t* c-decl.c (grokdeclarator, start_struct, finish_struct): Likewise.\n+\n+\t* c-typeck.c (build_component_ref, build_unary_op, lvalue_or_else,\n+\tpedantic_lvalue_warning, error_init, pedwarn_init, warning_init):\n+\tLikewise.\n+\n+\t* cccp.c (check_macro_name, do_xifdef, vwarning_with_line):\n+\tLikewise.\n+\n+\t* collect2.c (collect_wait): Likewise.\n+\n+\t* dbxout.c (dbxout_type): Likewise.\n+\n+\t* gcc.c (do_spec_1): Likewise.\n+\n+\t* genemit.c (gen_insn, gen_expand): Likewise.\n+\n+\t* genrecog.c (write_switch, write_subroutine): Likewise.\n+\n+\t* mips-tfile.c (catch_signal, botch): Likewise.\n+\n+\t* print-rtl.c (print_rtx): Likewise.\n+\n+\t* toplev.c (default_print_error_function, report_error_function,\n+\t_fatal_insn): Likewise.\n+\n 1999-11-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.c (unsave_expr_now): Handle NULL_TREE as input."}, {"sha": "742eba0bfbf5f3f1d249684ac8b8aa2ee0f180bb", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1925,10 +1925,12 @@ check_format_info (info, params)\n \t      continue;\n \t    }\n \t  if (TREE_CODE (cur_type) != ERROR_MARK)\n-\t    warning ((fci->pointer_count + aflag == 1\n-\t\t      ? \"format argument is not a pointer (arg %d)\"\n-\t\t      : \"format argument is not a pointer to a pointer (arg %d)\"),\n-\t\t     arg_num);\n+\t    {\n+\t      if (fci->pointer_count + aflag == 1)\n+\t\twarning (\"format argument is not a pointer (arg %d)\", arg_num);\n+\t      else\n+\t\twarning (\"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n+\t    }\n \t  break;\n \t}\n "}, {"sha": "39ec85666e6ce2c11047cb5b690e37bb3b8e5621", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -4262,12 +4262,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  ;\n \telse\n \t  {\n-\t    error ((decl_context == FIELD\n-\t\t    ? \"storage class specified for structure field `%s'\"\n-\t\t    : (decl_context == PARM\n-\t\t       ? \"storage class specified for parameter `%s'\"\n-\t\t       : \"storage class specified for typename\")),\n-\t\t   name);\n+\t    switch (decl_context)\n+\t      {\n+\t      case FIELD:\n+\t\terror (\"storage class specified for structure field `%s'\", name);\n+\t\tbreak;\n+\t      case PARM:\n+\t\terror (\"storage class specified for parameter `%s'\", name);\n+\t\tbreak;\n+\t      default:\n+\t\terror (\"storage class specified for typename\");\n+\t\tbreak;\n+\t      }\n \t    specbits &= ~ ((1 << (int) RID_TYPEDEF) | (1 << (int) RID_REGISTER)\n \t\t\t   | (1 << (int) RID_AUTO) | (1 << (int) RID_STATIC)\n \t\t\t   | (1 << (int) RID_EXTERN));\n@@ -5243,8 +5249,8 @@ start_struct (code, name)\n       C_TYPE_BEING_DEFINED (ref) = 1;\n       TYPE_PACKED (ref) = flag_pack_struct;\n       if (TYPE_FIELDS (ref))\n-\terror ((code == UNION_TYPE ? \"redefinition of `union %s'\"\n-\t\t: \"redefinition of `struct %s'\"),\n+\terror (\"redefinition of `%s %s'\",\n+\t       code == UNION_TYPE ? \"union\" : \"struct\",\n \t       IDENTIFIER_POINTER (name));\n \n       return ref;\n@@ -5316,11 +5322,11 @@ finish_struct (t, fieldlist, attributes)\n     if (in_parm_level_p ())\n       {\n \tif (pedantic)\n-\t  pedwarn ((TREE_CODE (t) == UNION_TYPE ? \"union defined inside parms\"\n-\t\t    : \"structure defined inside parms\"));\n+\t  pedwarn (\"%s defined inside parms\",\n+\t\t   TREE_CODE (t) == UNION_TYPE ? \"union\" : \"structure\");\n \telse if (! flag_traditional)\n-\t  warning ((TREE_CODE (t) == UNION_TYPE ? \"union defined inside parms\"\n-\t\t    : \"structure defined inside parms\"));\n+\t  warning (\"%s defined inside parms\",\n+\t\t   TREE_CODE (t) == UNION_TYPE ? \"union\" : \"structure\");\n       }\n \n   old_momentary = suspend_momentary ();\n@@ -5332,10 +5338,9 @@ finish_struct (t, fieldlist, attributes)\n \t  break;\n \n       if (x == 0)\n-\tpedwarn ((fieldlist\n-\t\t  ? \"%s has no named members\"\n-\t\t  : \"%s has no members\"),\n-\t\t TREE_CODE (t) == UNION_TYPE ? \"union\" : \"struct\");\n+\tpedwarn (\"%s has no %smembers\",\n+\t\t TREE_CODE (t) == UNION_TYPE ? \"union\" : \"struct\",\n+\t\t fieldlist ? \"named \" : \"\");\n     }\n \n   /* Install struct as DECL_CONTEXT of each field decl."}, {"sha": "d6e0b8f9f072152b2c51aebc8ead2bdefafdcf03", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1157,9 +1157,8 @@ build_component_ref (datum, component)\n \n       if (!field)\n \t{\n-\t  error (code == RECORD_TYPE\n-\t\t ? \"structure has no member named `%s'\"\n-\t\t : \"union has no member named `%s'\",\n+\t  error (\"%s has no member named `%s'\",\n+\t\t code == RECORD_TYPE ? \"structure\" : \"union\",\n \t\t IDENTIFIER_POINTER (component));\n \t  return error_mark_node;\n \t}\n@@ -2807,9 +2806,9 @@ build_unary_op (code, xarg, noconvert)\n       if (typecode != POINTER_TYPE\n \t  && typecode != INTEGER_TYPE && typecode != REAL_TYPE)\n \t{\n-\t  error (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t ? \"wrong type argument to increment\"\n-\t\t : \"wrong type argument to decrement\");\n+\t  error (\"wrong type argument to %s\",\n+\t\t code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n+\t\t ? \"increment\" : \"decrement\");\n \t  return error_mark_node;\n \t}\n \n@@ -2827,15 +2826,15 @@ build_unary_op (code, xarg, noconvert)\n \t    /* If pointer target is an undefined struct,\n \t       we just cannot know how to do the arithmetic.  */\n \t    if (TYPE_SIZE (TREE_TYPE (result_type)) == 0)\n-\t      error (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t     ? \"increment of pointer to unknown structure\"\n-\t\t     : \"decrement of pointer to unknown structure\");\n+\t      error (\"%s of pointer to unknown structure\",\n+\t\t     code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n+\t\t     ? \"increment\" : \"decrement\");\n \t    else if ((pedantic || warn_pointer_arith)\n \t\t     && (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE\n \t\t\t || TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE))\n-\t      pedwarn (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t       ? \"wrong type argument to increment\"\n-\t\t       : \"wrong type argument to decrement\");\n+\t      pedwarn (\"wrong type argument to %s\",\n+\t\t       code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n+\t\t       ? \"increment\" : \"decrement\");\n \t    inc = c_size_in_bytes (TREE_TYPE (result_type));\n \t  }\n \telse\n@@ -3119,7 +3118,7 @@ lvalue_or_else (ref, msgid)\n   int win = lvalue_p (ref);\n \n   if (! win)\n-    error (msgid);\n+    error (\"%s\", msgid);\n \n   return win;\n }\n@@ -3173,11 +3172,18 @@ pedantic_lvalue_warning (code)\n      enum tree_code code;\n {\n   if (pedantic)\n-    pedwarn (code == COND_EXPR\n-\t     ? \"ANSI C forbids use of conditional expressions as lvalues\"\n-\t     : code == COMPOUND_EXPR\n-\t     ? \"ANSI C forbids use of compound expressions as lvalues\"\n-\t     : \"ANSI C forbids use of cast expressions as lvalues\");\n+    switch (code)\n+      {\n+      case COND_EXPR:\n+\tpedwarn (\"ANSI C forbids use of conditional expressions as lvalues\");\n+\tbreak;\n+      case COMPOUND_EXPR:\n+\tpedwarn (\"ANSI C forbids use of compound expressions as lvalues\");\n+\tbreak;\n+      default:\n+\tpedwarn (\"ANSI C forbids use of cast expressions as lvalues\");\n+\tbreak;\n+      }\n }\n \f\n /* Warn about storing in something that is `const'.  */\n@@ -4444,7 +4450,7 @@ error_init (msgid)\n {\n   char *ofwhat;\n \n-  error (msgid);\n+  error (\"%s\", msgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     error (\"(near initialization for `%s')\", ofwhat);\n@@ -4460,7 +4466,7 @@ pedwarn_init (msgid)\n {\n   char *ofwhat;\n \n-  pedwarn (msgid);\n+  pedwarn (\"%s\", msgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     pedwarn (\"(near initialization for `%s')\", ofwhat);\n@@ -4476,7 +4482,7 @@ warning_init (msgid)\n {\n   char *ofwhat;\n \n-  warning (msgid);\n+  warning (\"%s\", msgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     warning (\"(near initialization for `%s')\", ofwhat);"}, {"sha": "ebdbd4ca970274d8f5d7fb8c6e8aee64d1c5413e", "filename": "gcc/cccp.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -6064,13 +6064,20 @@ check_macro_name (symname, assertion)\n   sym_length = p - symname;\n   if (sym_length == 0\n       || (sym_length == 1 && *symname == 'L' && (*p == '\\'' || *p == '\"')))\n-    error (assertion ? \"invalid assertion name\" : \"invalid macro name\");\n+    {\n+      if (assertion)\n+\terror (\"invalid assertion name\");\n+      else\n+\terror (\"invalid macro name\");\n+    }\n   else if (!is_idstart[*symname]\n \t   || (sym_length == 7 && ! bcmp (symname, \"defined\", 7)))\n-    error ((assertion\n-\t    ? \"invalid assertion name `%.*s'\"\n-\t    : \"invalid macro name `%.*s'\"),\n-\t   sym_length, symname);\n+    {\n+      if (assertion)\n+\terror (\"invalid assertion name `%.*s'\", sym_length, symname);\n+      else\n+\terror (\"invalid macro name `%.*s'\", sym_length, symname);\n+    }\n   return sym_length;\n }\n \n@@ -7419,9 +7426,12 @@ do_xifdef (buf, limit, op, keyword)\n   if (end == buf) {\n     skip = (keyword->type == T_IFDEF);\n     if (! traditional)\n-      pedwarn (end == limit ? \"`#%s' with no argument\"\n-\t       : \"`#%s' argument starts with punctuation\",\n-\t       keyword->name);\n+      {\n+\tif (end == limit)\n+\t  pedwarn (\"`#%s' with no argument\", keyword->name);\n+\telse\n+\t  pedwarn (\"`#%s' argument starts with punctuation\", keyword->name);\n+      }\n   } else {\n     HASHNODE *hp;\n \n@@ -9627,7 +9637,10 @@ vwarning_with_line (line, msgid, args)\n   if (ip != NULL) {\n     fwrite (ip->nominal_fname, sizeof ip->nominal_fname[0],\n \t    ip->nominal_fname_len, stderr);\n-    fprintf (stderr, line ? \":%d: \" : \": \", line);\n+    if (line)\n+      fprintf (stderr, \":%d: \", line);\n+    else\n+      fputs (\": \", stderr);\n   }\n   notice (\"warning: \");\n   vnotice (msgid, args);"}, {"sha": "18d7fb85a1ef458ae85e95f39d1732b8666daac8", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1569,12 +1569,9 @@ collect_wait (prog)\n       if (WIFSIGNALED (status))\n \t{\n \t  int sig = WTERMSIG (status);\n-\t  error ((status & 0200\n-\t\t  ? \"%s terminated with signal %d [%s]\"\n-\t\t  : \"%s terminated with signal %d [%s], core dumped\"),\n-\t\t prog,\n-\t\t sig,\n-\t\t strsignal(sig));\n+\t  error (\"%s terminated with signal %d [%s]%s\",\n+\t\t prog, sig, strsignal(sig),\n+\t\t status & 0200 ? \"\" : \", core dumped\");\n \t  collect_exit (FATAL_EXIT_CODE);\n \t}\n "}, {"sha": "c54912db5e4688f2f5e38ab4929cfab39afd7fea", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1382,7 +1382,7 @@ dbxout_type (type, full, show_arg_types)\n \t       If the type has a name, don't nest its definition within\n \t       another type's definition; instead, output an xref\n \t       and let the definition come when the name is defined.  */\n-\t    fprintf (asmfile, (TREE_CODE (type) == RECORD_TYPE) ? \"xs\" : \"xu\");\n+\t    fputs ((TREE_CODE (type) == RECORD_TYPE) ? \"xs\" : \"xu\", asmfile);\n \t    CHARS (3);\n #if 0 /* This assertion is legitimately false in C++.  */\n \t    /* We shouldn't be outputting a reference to a type before its"}, {"sha": "e6ae802f40c2c2035e7e30e62729dff71f295f4b", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -3958,7 +3958,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      buf = (char *) alloca (p - q + 1);\n \t      strncpy (buf, q, p - q);\n \t      buf[p - q] = 0;\n-\t      error (buf);\n+\t      error (\"%s\", buf);\n \t      return -1;\n \t    }\n \t    break;"}, {"sha": "1f8c6b635a6560921101c1edb45c72f35b072cfa", "filename": "gcc/genemit.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -377,7 +377,10 @@ gen_insn (insn)\n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (insn, 0));\n   for (i = 0; i < operands; i++)\n-    printf (i ? \", operand%d\" : \"operand%d\", i);\n+    if (i)\n+      printf (\", operand%d\", i);\n+    else\n+      printf (\"operand%d\", i);\n   printf (\")\\n\");\n   for (i = 0; i < operands; i++)\n     printf (\"     rtx operand%d;\\n\", i);\n@@ -428,7 +431,10 @@ gen_expand (expand)\n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (expand, 0));\n   for (i = 0; i < operands; i++)\n-    printf (i ? \", operand%d\" : \"operand%d\", i);\n+    if (i)\n+      printf (\", operand%d\", i);\n+    else\n+      printf (\"operand%d\", i);\n   printf (\")\\n\");\n   for (i = 0; i < operands; i++)\n     printf (\"     rtx operand%d;\\n\", i);"}, {"sha": "d428aff6f06c25ac989bac2fe39b9fe0fd596221", "filename": "gcc/genrecog.c", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1776,30 +1776,27 @@ write_switch (start, depth)\n \t   || type == DT_elt_one_int\n \t   || type == DT_elt_zero_wide)\n     {\n-      const char *str;\n-\n       printf (\"  switch (\");\n       switch (type)\n \t{\n \tcase DT_mode:\n-\t  str = \"GET_MODE (x%d)\";\n+\t  printf(\"GET_MODE (x%d)\", depth);\n \t  break;\n \tcase DT_veclen:\n-\t  str = \"XVECLEN (x%d, 0)\";\n+\t  printf(\"XVECLEN (x%d, 0)\", depth);\n \t  break;\n \tcase DT_elt_zero_int:\n-\t  str = \"XINT (x%d, 0)\";\n+\t  printf(\"XINT (x%d, 0)\", depth);\n \t  break;\n \tcase DT_elt_one_int:\n-\t  str = \"XINT (x%d, 1)\";\n+\t  printf(\"XINT (x%d, 1)\", depth);\n \t  break;\n \tcase DT_elt_zero_wide:\n-\t  str = \"XWINT (x%d, 0)\";\n+\t  printf(\"XWINT (x%d, 0)\", depth);\n \t  break;\n \tdefault:\n \t  abort ();\n \t}\n-      printf (str, depth);\n       printf (\")\\n    {\\n\");\n \n       do\n@@ -2159,31 +2156,6 @@ write_subroutine (head, type)\n      struct decision_head *head;\n      enum routine_type type;\n {\n-  static const char * const proto_pattern[] = {\n-    \"%sint recog%s PROTO ((rtx, rtx, int *));\\n\",\n-    \"%srtx split%s PROTO ((rtx, rtx));\\n\",\n-    \"%srtx peephole2%s PROTO ((rtx, rtx, rtx *));\\n\"\n-  };\n-\n-  static const char * const decl_pattern[] = {\n-\"%sint\\n\\\n-recog%s (x0, insn, pnum_clobbers)\\n\\\n-     register rtx x0;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\\\n-     int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\",\n-\n-\"%srtx\\n\\\n-split%s (x0, insn)\\n\\\n-     register rtx x0;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\",\n-\n-\"%srtx\\n\\\n-peephole2%s (x0, insn, _plast_insn)\\n\\\n-     register rtx x0;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\\\n-     rtx *_plast_insn ATTRIBUTE_UNUSED;\\n\"\n-  };\n-     \n   int subfunction = head->first ? head->first->subroutine_number : 0;\n   const char *s_or_e;\n   char extension[32];\n@@ -2198,8 +2170,32 @@ peephole2%s (x0, insn, _plast_insn)\\n\\\n   else\n     strcpy (extension, \"_insns\");\n \n-  printf (proto_pattern[type], s_or_e, extension);\n-  printf (decl_pattern[type], s_or_e, extension);\n+  switch (type)\n+    {\n+    case RECOG:\n+      printf (\"%sint recog%s PROTO ((rtx, rtx, int *));\\n\", s_or_e, extension);\n+      printf (\"%sint\\n\\\n+recog%s (x0, insn, pnum_clobbers)\\n\\\n+     register rtx x0;\\n\\\n+     rtx insn ATTRIBUTE_UNUSED;\\n\\\n+     int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+      break;\n+    case SPLIT:\n+      printf (\"%srtx split%s PROTO ((rtx, rtx));\\n\", s_or_e, extension);\n+      printf (\"%srtx\\n\\\n+split%s (x0, insn)\\n\\\n+     register rtx x0;\\n\\\n+     rtx insn ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+      break;\n+    case PEEPHOLE2:\n+      printf (\"%srtx peephole2%s PROTO ((rtx, rtx, rtx *));\\n\", s_or_e, extension);\n+      printf (\"%srtx\\n\\\n+peephole2%s (x0, insn, _plast_insn)\\n\\\n+     register rtx x0;\\n\\\n+     rtx insn ATTRIBUTE_UNUSED;\\n\\\n+     rtx *_plast_insn ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+      break;\n+    }\n \n   printf (\"{\\n  register rtx * const operands = &recog_data.operand[0];\\n\");\n   for (i = 1; i <= max_depth; i++)"}, {"sha": "b83dc5286ce9665d8f2eb3d5bc815f774e830a94", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -5027,7 +5027,7 @@ catch_signal (signum)\n      int signum;\n {\n   (void) signal (signum, SIG_DFL);\t/* just in case...  */\n-  fatal (strsignal(signum));\n+  fatal (\"%s\", strsignal(signum));\n }\n \n /* Print a fatal error message.  NAME is the text.\n@@ -5630,7 +5630,7 @@ void\n botch (s)\n      const char *s;\n {\n-  fatal (s);\n+  fatal (\"%s\", s);\n }\n \n \f"}, {"sha": "e54b2b49deb06af510e8c49d7dd6793818374cbf", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -146,8 +146,12 @@ print_rtx (in_rtx)\n \tif (XSTR (in_rtx, i) == 0)\n \t  fputs (dump_for_graph ? \" \\\\\\\"\\\\\\\"\" : \" \\\"\\\"\", outfile);\n \telse\n-\t  fprintf (outfile, dump_for_graph ? \" (\\\\\\\"%s\\\\\\\")\" : \" (\\\"%s\\\")\",\n-\t\t   XSTR (in_rtx, i));\n+\t  {\n+\t    if (dump_for_graph)\n+\t      fprintf (outfile, \" (\\\\\\\"%s\\\\\\\")\", XSTR (in_rtx, i));\n+\t    else\n+\t      fprintf (outfile, \" (\\\"%s\\\")\", XSTR (in_rtx, i));\n+\t  }\n \tsawclose = 1;\n \tbreak;\n \n@@ -188,13 +192,16 @@ print_rtx (in_rtx)\n \t      }\n \t    else\n \t      {\n-\t\tchar *str = X0STR (in_rtx, i);\n+\t\tconst char * const str = X0STR (in_rtx, i);\n \t\tif (str == 0)\n \t\t  fputs (dump_for_graph ? \" \\\\\\\"\\\\\\\"\" : \" \\\"\\\"\", outfile);\n \t\telse\n-\t\t  fprintf (outfile,\n-\t\t\t   dump_for_graph ? \" (\\\\\\\"%s\\\\\\\")\" : \" (\\\"%s\\\")\",\n-\t\t\t   str);\n+\t\t  {\n+\t\t    if (dump_for_graph)\n+\t\t      fprintf (outfile, \" (\\\\\\\"%s\\\\\\\")\", str);\n+\t\t    else\n+\t\t      fprintf (outfile, \" (\\\"%s\\\")\", str);\n+\t\t  }\n \t      }\n \t  }\n \tbreak;"}, {"sha": "06789158d9e66d7fabf83cbda571700e6300199c", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913d08334a78012ba496b669bc0077a98d6e9b3c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=913d08334a78012ba496b669bc0077a98d6e9b3c", "patch": "@@ -1549,10 +1549,14 @@ default_print_error_function (file)\n       if (current_function_decl == NULL)\n \tnotice (\"At top level:\\n\");\n       else\n-\tnotice ((TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE\n-\t\t ? \"In method `%s':\\n\"\n-\t\t : \"In function `%s':\\n\"),\n-\t\t(*decl_printable_name) (current_function_decl, 2));\n+\t{\n+\t  if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n+\t    notice (\"In method `%s':\\n\",\n+\t\t    (*decl_printable_name) (current_function_decl, 2));\n+\t  else\n+\t    notice (\"In function `%s':\\n\",\n+\t\t    (*decl_printable_name) (current_function_decl, 2));\n+\t}\n \n       last_error_function = current_function_decl;\n     }\n@@ -1584,10 +1588,10 @@ report_error_function (file)\n       && input_file_stack_tick != last_error_tick)\n     {\n       for (p = input_file_stack->next; p; p = p->next)\n-\tnotice ((p == input_file_stack->next\n-\t\t ?    \"In file included from %s:%d\"\n-\t\t : \",\\n                 from %s:%d\"),\n-\t\tp->name, p->line);\n+\tif (p == input_file_stack->next)\n+\t  notice (\"In file included from %s:%d\", p->name, p->line);\n+\telse\n+\t  notice (\",\\n                 from %s:%d\", p->name, p->line);\n       fprintf (stderr, \":\\n\");\n       last_error_tick = input_file_stack_tick;\n     }\n@@ -1979,7 +1983,7 @@ _fatal_insn (msgid, insn, file, line, function)\n      int line;\n      const char *function;\n {\n-  error (msgid);\n+  error (\"%s\", msgid);\n   debug_rtx (insn);\n   fancy_abort (file, line, function);\n }"}]}