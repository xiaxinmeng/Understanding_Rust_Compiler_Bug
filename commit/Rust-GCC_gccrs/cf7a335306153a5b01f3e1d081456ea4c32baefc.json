{"sha": "cf7a335306153a5b01f3e1d081456ea4c32baefc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3YTMzNTMwNjE1M2E1YjAxZjNlMWQwODE0NTZlYTRjMzJiYWVmYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-13T13:00:12Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-13T13:00:12Z"}, "message": "aarch64: Add support for unpacked SVE MLA and MAD\n\nThis patch extends the MLA/MAD patterns to support unpacked\ninteger vectors.  The type suffix could be either the element\nsize or the container size, but using the element size should\nbe more efficient.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (fma<mode>4): Extend from SVE_FULL_I\n\tto SVE_I.\n\t(@aarch64_pred_fma<mode>, cond_fma<mode>, *cond_fma<mode>_2)\n\t(*cond_fma<mode>_4, *cond_fma<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mla_2.c: New test.\n\t* g++.target/aarch64/sve/cond_mla_1.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mla_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mla_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mla_4.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mla_5.C: Likewise.", "tree": {"sha": "dafeceb9f44947bf039500cb3e15897cc985ed57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dafeceb9f44947bf039500cb3e15897cc985ed57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7a335306153a5b01f3e1d081456ea4c32baefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7a335306153a5b01f3e1d081456ea4c32baefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7a335306153a5b01f3e1d081456ea4c32baefc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7a335306153a5b01f3e1d081456ea4c32baefc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddc18251a821fe69d6229abbf83d77284d2340a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddc18251a821fe69d6229abbf83d77284d2340a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddc18251a821fe69d6229abbf83d77284d2340a"}], "stats": {"total": 290, "additions": 246, "deletions": 44}, "files": [{"sha": "ac8a9b4b1675a73a85804cb4bf1a424b2e126660", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -6554,15 +6554,15 @@\n \n ;; Unpredicated integer addition of product.\n (define_expand \"fma<mode>4\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(plus:SVE_FULL_I\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(plus:SVE_I\n+\t  (unspec:SVE_I\n \t    [(match_dup 4)\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 1 \"register_operand\")\n-\t       (match_operand:SVE_FULL_I 2 \"nonmemory_operand\"))]\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 1 \"register_operand\")\n+\t       (match_operand:SVE_I 2 \"nonmemory_operand\"))]\n \t    UNSPEC_PRED_X)\n-\t  (match_operand:SVE_FULL_I 3 \"register_operand\")))]\n+\t  (match_operand:SVE_I 3 \"register_operand\")))]\n   \"TARGET_SVE\"\n   {\n     if (aarch64_prepare_sve_int_fma (operands, PLUS))\n@@ -6573,15 +6573,15 @@\n \n ;; Predicated integer addition of product.\n (define_insn \"@aarch64_pred_fma<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(plus:SVE_FULL_I\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n+\t(plus:SVE_I\n+\t  (unspec:SVE_I\n \t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, w\"))]\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"%0, w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w, w\"))]\n \t    UNSPEC_PRED_X)\n-\t  (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, 0, w\")))]\n+\t  (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w\")))]\n   \"TARGET_SVE\"\n   \"@\n    mad\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n@@ -6592,15 +6592,15 @@\n \n ;; Predicated integer addition of product with merging.\n (define_expand \"cond_fma<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n-\t   (plus:SVE_FULL_I\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t       (match_operand:SVE_FULL_I 3 \"general_operand\"))\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\"))\n-\t   (match_operand:SVE_FULL_I 5 \"aarch64_simd_reg_or_zero\")]\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\")\n+\t       (match_operand:SVE_I 3 \"general_operand\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\"))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n   {\n@@ -6615,14 +6615,14 @@\n \n ;; Predicated integer addition of product, merging with the first input.\n (define_insn \"*cond_fma<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (plus:SVE_FULL_I\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, w\"))\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, w\"))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -6634,14 +6634,14 @@\n \n ;; Predicated integer addition of product, merging with the third input.\n (define_insn \"*cond_fma<mode>_4\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (plus:SVE_FULL_I\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"0, w\"))\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"0, w\"))\n \t   (match_dup 4)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -6653,15 +6653,15 @@\n \n ;; Predicated integer addition of product, merging with an independent value.\n (define_insn_and_rewrite \"*cond_fma<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t   (plus:SVE_FULL_I\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, w, 0, w, w\"))\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, 0, w, w, w, w\"))\n-\t   (match_operand:SVE_FULL_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, 0, w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w, w, w, w\"))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && !rtx_equal_p (operands[2], operands[5])"}, {"sha": "d5168b7a841c1818d8829bb0563c70d429bac7c4", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mla_1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_1.C?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a + b * c : a; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmla\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "8ff0a69c7ab1bfa45e4e859022e6414314a8f146", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mla_2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_2.C?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a + b * c : b; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmad\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b2f2942a23c5e4d3546a9ec76eb643f5fc632d98", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mla_3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_3.C?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a + b * c : c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmad\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "6edc96b6f68bdcca38d44da550af07391bc78ebe", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mla_4.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_4.C?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a + b * c : d; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmla\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "6c169a805d0ba60a210b20f08bdecb377f8b2be2", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mla_5.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mla_5.C?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a + b * c : 0; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.b,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.s,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "2fafd4b73cdb70f07352d5dd58bc56e43154f6a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mla_2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7a335306153a5b01f3e1d081456ea4c32baefc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_2.c?ref=cf7a335306153a5b01f3e1d081456ea4c32baefc", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_##AMT (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a + b * c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.b,} 6 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.h,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.s,} 2 } } */"}]}