{"sha": "67aeddb785ddcc8688ee5736ecab3c81de34a214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhZWRkYjc4NWRkY2M4Njg4ZWU1NzM2ZWNhYjNjODFkZTM0YTIxNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-23T21:19:13Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-23T21:19:13Z"}, "message": "Build a zero element array type that reliably renders as T[0] in diagnostcs.\n\ngcc/ChangeLog:\n\n\t* gimple-array-bounds.cc (build_zero_elt_array_type): New function.\n\t(array_bounds_checker::check_mem_ref): Call it.", "tree": {"sha": "39438e9b376232c2094abbfcac4b9452c7c88e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39438e9b376232c2094abbfcac4b9452c7c88e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67aeddb785ddcc8688ee5736ecab3c81de34a214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeddb785ddcc8688ee5736ecab3c81de34a214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67aeddb785ddcc8688ee5736ecab3c81de34a214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aeddb785ddcc8688ee5736ecab3c81de34a214/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6edc8f5bfe7d9db8fb8bd37bb8086a69850c6c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edc8f5bfe7d9db8fb8bd37bb8086a69850c6c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edc8f5bfe7d9db8fb8bd37bb8086a69850c6c6d"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "ab638ba249f3748cc41e91e9c1caec870430ecb3", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67aeddb785ddcc8688ee5736ecab3c81de34a214/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67aeddb785ddcc8688ee5736ecab3c81de34a214/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=67aeddb785ddcc8688ee5736ecab3c81de34a214", "patch": "@@ -372,6 +372,20 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n   return warned;\n }\n \n+/* Hack around the internal representation constraints and build a zero\n+   element array type that actually renders as T[0] in diagnostcs.  */\n+\n+static tree\n+build_zero_elt_array_type (tree eltype)\n+{\n+  tree idxtype = build_range_type (sizetype, size_zero_node, NULL_TREE);\n+  tree arrtype = build_array_type (eltype, idxtype);\n+  arrtype = build_distinct_type_copy (TYPE_MAIN_VARIANT (arrtype));\n+  TYPE_SIZE (arrtype) = bitsize_zero_node;\n+  TYPE_SIZE_UNIT (arrtype) = size_zero_node;\n+  return arrtype;\n+}\n+\n /* Checks one MEM_REF in REF, located at LOCATION, for out-of-bounds\n    references to string constants.  If VRP can determine that the array\n    subscript is a constant, check if it is outside valid range.\n@@ -547,7 +561,10 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n \treturn false;\n \n       offset_int nelts = arrbounds[1] / eltsize;\n-      reftype = build_array_type_nelts (reftype, nelts.to_uhwi ());\n+      if (nelts == 0)\n+\treftype = build_zero_elt_array_type (reftype);\n+      else\n+\treftype = build_array_type_nelts (reftype, nelts.to_uhwi ());\n     }\n   else if (TREE_CODE (arg) == ADDR_EXPR)\n     {"}]}