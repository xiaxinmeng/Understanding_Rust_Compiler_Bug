{"sha": "88dd71504e89d86f723861404153b071d3113b39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkZDcxNTA0ZTg5ZDg2ZjcyMzg2MTQwNDE1M2IwNzFkMzExM2IzOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-09T13:21:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-09T13:21:43Z"}, "message": "target.h (builtin_conversion): Pass in input and output types.\n\n2010-04-09  Richard Guenther  <rguenther@suse.de>\n\n\t* target.h (builtin_conversion): Pass in input and output types.\n\t* targhooks.c (default_builtin_vectorized_conversion): Adjust.\n\t* targhooks.h (default_builtin_vectorized_conversion): Likewise.\n\t* tree-vect-stmts.c (vectorizable_conversion): Adjust.\n\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_CONVERSION): Adjust.\n\n\t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Adjust.\n\tHandle AVX modes.\n\t* config/rs6000/rs6000.c (rs6000_builtin_conversion): Adjust.\n\nFrom-SVN: r158162", "tree": {"sha": "25782c93a9adf744980ea7689e440093b39185ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25782c93a9adf744980ea7689e440093b39185ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88dd71504e89d86f723861404153b071d3113b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88dd71504e89d86f723861404153b071d3113b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88dd71504e89d86f723861404153b071d3113b39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88dd71504e89d86f723861404153b071d3113b39/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d7a1fe85989e4f3998060ed9f2d4d6973e39eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7a1fe85989e4f3998060ed9f2d4d6973e39eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7a1fe85989e4f3998060ed9f2d4d6973e39eed"}], "stats": {"total": 134, "additions": 95, "deletions": 39}, "files": [{"sha": "ce2a4955295a0d74f46163517c673c3c321ad45d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -1,3 +1,15 @@\n+2010-04-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* target.h (builtin_conversion): Pass in input and output types.\n+\t* targhooks.c (default_builtin_vectorized_conversion): Adjust.\n+\t* targhooks.h (default_builtin_vectorized_conversion): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Adjust.\n+\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_CONVERSION): Adjust.\n+\n+\t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Adjust.\n+\tHandle AVX modes.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_conversion): Adjust.\n+\n 2010-04-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/43152"}, {"sha": "407e37c7067f11382461f03b703282ccc7a9d800", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -24691,43 +24691,92 @@ ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n \n \n /* Returns a decl of a function that implements conversion of an integer vector\n-   into a floating-point vector, or vice-versa. TYPE is the type of the integer\n-   side of the conversion.\n+   into a floating-point vector, or vice-versa.  DEST_TYPE and SRC_TYPE\n+   are the types involved when converting according to CODE.\n    Return NULL_TREE if it is not available.  */\n \n static tree\n-ix86_vectorize_builtin_conversion (unsigned int code, tree type)\n+ix86_vectorize_builtin_conversion (unsigned int code,\n+\t\t\t\t   tree dest_type, tree src_type)\n {\n-  if (! (TARGET_SSE2 && TREE_CODE (type) == VECTOR_TYPE))\n+  if (! TARGET_SSE2)\n     return NULL_TREE;\n \n   switch (code)\n     {\n     case FLOAT_EXPR:\n-      switch (TYPE_MODE (type))\n+      switch (TYPE_MODE (src_type))\n \t{\n \tcase V4SImode:\n-\t  return TYPE_UNSIGNED (type)\n-\t    ? ix86_builtins[IX86_BUILTIN_CVTUDQ2PS]\n-\t    : ix86_builtins[IX86_BUILTIN_CVTDQ2PS];\n+\t  switch (TYPE_MODE (dest_type))\n+\t    {\n+\t    case V4SFmode:\n+\t      return (TYPE_UNSIGNED (src_type)\n+\t\t      ? ix86_builtins[IX86_BUILTIN_CVTUDQ2PS]\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PS]);\n+\t    case V4DFmode:\n+\t      return (TYPE_UNSIGNED (src_type)\n+\t\t      ? NULL_TREE\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PD256]);\n+\t    default:\n+\t      return NULL_TREE;\n+\t    }\n+\t  break;\n+\tcase V8SImode:\n+\t  switch (TYPE_MODE (dest_type))\n+\t    {\n+\t    case V8SFmode:\n+\t      return (TYPE_UNSIGNED (src_type)\n+\t\t      ? NULL_TREE\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTDQ2PS]);\n+\t    default:\n+\t      return NULL_TREE;\n+\t    }\n+\t  break;\n \tdefault:\n \t  return NULL_TREE;\n \t}\n \n     case FIX_TRUNC_EXPR:\n-      switch (TYPE_MODE (type))\n+      switch (TYPE_MODE (dest_type))\n \t{\n \tcase V4SImode:\n-\t  return TYPE_UNSIGNED (type)\n-\t    ? NULL_TREE\n-\t    : ix86_builtins[IX86_BUILTIN_CVTTPS2DQ];\n+\t  switch (TYPE_MODE (src_type))\n+\t    {\n+\t    case V4SFmode:\n+\t      return (TYPE_UNSIGNED (dest_type)\n+\t\t      ? NULL_TREE\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPS2DQ]);\n+\t    case V4DFmode:\n+\t      return (TYPE_UNSIGNED (dest_type)\n+\t\t      ? NULL_TREE\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPD2DQ256]);\n+\t    default:\n+\t      return NULL_TREE;\n+\t    }\n+\t  break;\n+\n+\tcase V8SImode:\n+\t  switch (TYPE_MODE (src_type))\n+\t    {\n+\t    case V8SFmode:\n+\t      return (TYPE_UNSIGNED (dest_type)\n+\t\t      ? NULL_TREE\n+\t\t      : ix86_builtins[IX86_BUILTIN_CVTTPS2DQ256]);\n+\t    default:\n+\t      return NULL_TREE;\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  return NULL_TREE;\n \t}\n+\n     default:\n       return NULL_TREE;\n-\n     }\n+\n+  return NULL_TREE;\n }\n \n /* Returns a code for a target-specific builtin that implements"}, {"sha": "2817706e9268c051a81fbba242c9ea62718f8800", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -990,7 +990,7 @@ static tree rs6000_builtin_reciprocal (unsigned int, bool, bool);\n static tree rs6000_builtin_mask_for_load (void);\n static tree rs6000_builtin_mul_widen_even (tree);\n static tree rs6000_builtin_mul_widen_odd (tree);\n-static tree rs6000_builtin_conversion (unsigned int, tree);\n+static tree rs6000_builtin_conversion (unsigned int, tree, tree);\n static tree rs6000_builtin_vec_perm (tree, tree *);\n static bool rs6000_builtin_support_vector_misalignment (enum\n \t\t\t\t\t\t\tmachine_mode,\n@@ -2883,32 +2883,32 @@ rs6000_builtin_mask_for_load (void)\n \n /* Implement targetm.vectorize.builtin_conversion.\n    Returns a decl of a function that implements conversion of an integer vector\n-   into a floating-point vector, or vice-versa. TYPE is the type of the integer\n-   side of the conversion.\n+   into a floating-point vector, or vice-versa.  DEST_TYPE is the\n+   destination type and SRC_TYPE the source type of the conversion.\n    Return NULL_TREE if it is not available.  */\n static tree\n-rs6000_builtin_conversion (unsigned int tcode, tree type)\n+rs6000_builtin_conversion (unsigned int tcode, tree dest_type, tree src_type)\n {\n   enum tree_code code = (enum tree_code) tcode;\n \n   switch (code)\n     {\n     case FIX_TRUNC_EXPR:\n-      switch (TYPE_MODE (type))\n+      switch (TYPE_MODE (dest_type))\n \t{\n \tcase V2DImode:\n \t  if (!VECTOR_UNIT_VSX_P (V2DFmode))\n \t    return NULL_TREE;\n \n-\t  return TYPE_UNSIGNED (type)\n+\t  return TYPE_UNSIGNED (dest_type)\n \t    ? rs6000_builtin_decls[VSX_BUILTIN_XVCVDPUXDS_UNS]\n \t    : rs6000_builtin_decls[VSX_BUILTIN_XVCVDPSXDS];\n \n \tcase V4SImode:\n \t  if (VECTOR_UNIT_NONE_P (V4SImode) || VECTOR_UNIT_NONE_P (V4SFmode))\n \t    return NULL_TREE;\n \n-\t  return TYPE_UNSIGNED (type)\n+\t  return TYPE_UNSIGNED (dest_type)\n \t    ? rs6000_builtin_decls[VECTOR_BUILTIN_FIXUNS_V4SF_V4SI]\n \t    : rs6000_builtin_decls[VECTOR_BUILTIN_FIX_V4SF_V4SI];\n \n@@ -2917,21 +2917,21 @@ rs6000_builtin_conversion (unsigned int tcode, tree type)\n \t}\n \n     case FLOAT_EXPR:\n-      switch (TYPE_MODE (type))\n+      switch (TYPE_MODE (src_type))\n \t{\n \tcase V2DImode:\n \t  if (!VECTOR_UNIT_VSX_P (V2DFmode))\n \t    return NULL_TREE;\n \n-\t  return TYPE_UNSIGNED (type)\n+\t  return TYPE_UNSIGNED (src_type)\n \t    ? rs6000_builtin_decls[VSX_BUILTIN_XVCVUXDDP]\n \t    : rs6000_builtin_decls[VSX_BUILTIN_XVCVSXDDP];\n \n \tcase V4SImode:\n \t  if (VECTOR_UNIT_NONE_P (V4SImode) || VECTOR_UNIT_NONE_P (V4SFmode))\n \t    return NULL_TREE;\n \n-\t  return TYPE_UNSIGNED (type)\n+\t  return TYPE_UNSIGNED (src_type)\n \t    ? rs6000_builtin_decls[VECTOR_BUILTIN_UNSFLOAT_V4SI_V4SF]\n \t    : rs6000_builtin_decls[VECTOR_BUILTIN_FLOAT_V4SI_V4SF];\n "}, {"sha": "51172e4f491b1ae643bff503ac8d10cf53852c84", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -5700,13 +5700,9 @@ Target builtin that implements vector permute.\n Return true if a vector created for @code{builtin_vec_perm} is valid.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_CONVERSION (unsigned @var{code}, tree @var{type})\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_CONVERSION (unsigned @var{code}, tree @var{dest_type}, tree @var{src_type})\n This hook should return the DECL of a function that implements conversion of the\n-input vector of type @var{type}.\n-If @var{type} is an integral type, the result of the conversion is a vector of\n-floating-point type of the same size.\n-If @var{type} is a floating-point type, the result of the conversion is a vector\n-of integral type of the same size.\n+input vector of type @var{src_type} to type @var{dest_type}.\n The value of @var{code} is one of the enumerators in @code{enum tree_code} and\n specifies how the conversion is to be applied\n (truncation, rounding, etc.)."}, {"sha": "7729525512df890dc428ea56e1bef650a5423f68", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -476,9 +476,9 @@ struct gcc_target\n        function, or NULL_TREE if not available.  */\n     tree (* builtin_vectorized_function) (tree, tree, tree);\n \n-    /* Returns a code for builtin that realizes vectorized version of\n-       conversion, or NULL_TREE if not available.  */\n-    tree (* builtin_conversion) (unsigned, tree);\n+    /* Returns a function declaration for a builtin that realizes the\n+       vector conversion, or NULL_TREE if not available.  */\n+    tree (* builtin_conversion) (unsigned, tree, tree);\n \n     /* Target builtin that implements vector widening multiplication.\n        builtin_mul_widen_eve computes the element-by-element products"}, {"sha": "00fa5024fa1a58f9ac5805765c962292ed9f817a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -430,7 +430,8 @@ default_builtin_vectorized_function (tree fndecl ATTRIBUTE_UNUSED,\n \n tree\n default_builtin_vectorized_conversion (unsigned int code ATTRIBUTE_UNUSED,\n-\t\t\t\t       tree type ATTRIBUTE_UNUSED)\n+\t\t\t\t       tree dest_type ATTRIBUTE_UNUSED,\n+\t\t\t\t       tree src_type ATTRIBUTE_UNUSED)\n {\n   return NULL_TREE;\n }"}, {"sha": "209ed79b0c8af1ac4cf6f528ab76675237a0839d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -72,7 +72,7 @@ extern const char * default_invalid_within_doloop (const_rtx);\n \n extern tree default_builtin_vectorized_function (tree, tree, tree);\n \n-extern tree default_builtin_vectorized_conversion (unsigned int, tree);\n+extern tree default_builtin_vectorized_conversion (unsigned int, tree, tree);\n \n extern tree default_builtin_reciprocal (unsigned int, bool, bool);\n "}, {"sha": "4868f73e684a33f5a7f160c13e58ee80c48b5fb3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88dd71504e89d86f723861404153b071d3113b39/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=88dd71504e89d86f723861404153b071d3113b39", "patch": "@@ -1564,7 +1564,6 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n   int i;\n   VEC(tree,heap) *vec_oprnds0 = NULL;\n   tree vop0;\n-  tree integral_type;\n   VEC(tree,heap) *dummy = NULL;\n   int dummy_int;\n \n@@ -1620,8 +1619,6 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n   else\n     return false;\n \n-  integral_type = INTEGRAL_TYPE_P (rhs_type) ? vectype_in : vectype_out;\n-\n   if (modifier == NARROW)\n     ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits_out;\n   else\n@@ -1638,7 +1635,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \n   /* Supportable by target?  */\n   if ((modifier == NONE\n-       && !targetm.vectorize.builtin_conversion (code, integral_type))\n+       && !targetm.vectorize.builtin_conversion (code, vectype_out, vectype_in))\n       || (modifier == WIDEN\n \t  && !supportable_widening_operation (code, stmt,\n \t\t\t\t\t      vectype_out, vectype_in,\n@@ -1689,7 +1686,8 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t    vect_get_vec_defs_for_stmt_copy (dt, &vec_oprnds0, NULL);\n \n \t  builtin_decl =\n-\t    targetm.vectorize.builtin_conversion (code, integral_type);\n+\t    targetm.vectorize.builtin_conversion (code,\n+\t\t\t\t\t\t  vectype_out, vectype_in);\n \t  for (i = 0; VEC_iterate (tree, vec_oprnds0, i, vop0); i++)\n \t    {\n \t      /* Arguments are ready. create the new vector stmt.  */"}]}