{"sha": "afae02072cf05ccf15d840f8194490902b97ab32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZhZTAyMDcyY2YwNWNjZjE1ZDg0MGY4MTk0NDkwOTAyYjk3YWIzMg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-28T20:31:28Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-28T20:31:28Z"}, "message": "graphite-dependences.c (pddr_original_scattering): New.\n\n2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-dependences.c (pddr_original_scattering): New.\n\t(graphite_legal_transform_dr): Call pddr_original_scattering.\n\t(dot_deps_1): New.\n\t(dot_deps): New.\n\t* graphite-dependences.h (dot_deps): Declared.\n\t* graphite-poly.c (new_poly_dr): Initialize PDR_ID.\n\t(print_pdr): Print PDR_ID.\n\t* graphite-poly.h (struct poly_dr): Add field id.\n\t(PDR_ID): New.\n\t(pbb_index): New.\n\t* graphite-scop-detection.c (dot_all_scops_1): Cleanup comment.\n\nFrom-SVN: r151183", "tree": {"sha": "d5b5c0e5c80098df1a55201158a95a09303e4c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b5c0e5c80098df1a55201158a95a09303e4c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afae02072cf05ccf15d840f8194490902b97ab32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afae02072cf05ccf15d840f8194490902b97ab32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afae02072cf05ccf15d840f8194490902b97ab32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afae02072cf05ccf15d840f8194490902b97ab32/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e0bb8b3732047d6532f8c09be6bc6c7d506d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e0bb8b3732047d6532f8c09be6bc6c7d506d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e0bb8b3732047d6532f8c09be6bc6c7d506d1b"}], "stats": {"total": 150, "additions": 128, "deletions": 22}, "files": [{"sha": "d7b4369d3c6e60f9d190c80ef8e918adaed3234d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -1,3 +1,17 @@\n+2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (pddr_original_scattering): New.\n+\t(graphite_legal_transform_dr): Call pddr_original_scattering.\n+\t(dot_deps_1): New.\n+\t(dot_deps): New.\n+\t* graphite-dependences.h (dot_deps): Declared.\n+\t* graphite-poly.c (new_poly_dr): Initialize PDR_ID.\n+\t(print_pdr): Print PDR_ID.\n+\t* graphite-poly.h (struct poly_dr): Add field id.\n+\t(PDR_ID): New.\n+\t(pbb_index): New.\n+\t* graphite-scop-detection.c (dot_all_scops_1): Cleanup comment.\n+\n 2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (graphite_carried_dependence_level_k): Do"}, {"sha": "495e9d50485478a2cdc53bd0adb2cff5e5cc6bba", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -1,3 +1,17 @@\n+2009-08-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-dependences.c (pddr_original_scattering): New.\n+\t(graphite_legal_transform_dr): Call pddr_original_scattering.\n+\t(dot_deps_1): New.\n+\t(dot_deps): New.\n+\t* graphite-dependences.h (dot_deps): Declared.\n+\t* graphite-poly.c (new_poly_dr): Initialize PDR_ID.\n+\t(print_pdr): Print PDR_ID.\n+\t* graphite-poly.h (struct poly_dr): Add field id.\n+\t(PDR_ID): New.\n+\t(pbb_index): New.\n+\t* graphite-scop-detection.c (dot_all_scops_1): Cleanup comment.\n+\n 2009-08-22  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (graphite_carried_dependence_level_k): Do"}, {"sha": "b68ccee7a9690e88279788dc4e0fcc0ee9362448", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -494,6 +494,30 @@ dependence_polyhedron (poly_bb_p pbb1, poly_bb_p pbb2,\n   return res;\n }\n \n+/* Returns the PDDR corresponding to the original schedule, or NULL if\n+   the dependence relation is empty.  */\n+\n+static poly_ddr_p\n+pddr_original_scattering (poly_bb_p pbb1, poly_bb_p pbb2,\n+\t\t\t  poly_dr_p pdr1, poly_dr_p pdr2)\n+{\n+  poly_ddr_p pddr;\n+  ppl_Pointset_Powerset_C_Polyhedron_t d1 = PBB_DOMAIN (pbb1);\n+  ppl_Pointset_Powerset_C_Polyhedron_t d2 = PBB_DOMAIN (pbb2);\n+  ppl_Polyhedron_t so1 = PBB_ORIGINAL_SCATTERING (pbb1);\n+  ppl_Polyhedron_t so2 = PBB_ORIGINAL_SCATTERING (pbb2);\n+\n+  if (PDR_NB_SUBSCRIPTS (pdr1) != PDR_NB_SUBSCRIPTS (pdr2))\n+    return NULL;\n+\n+  pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n+\t\t\t\ttrue, true);\n+  if (pddr_is_empty (pddr))\n+    return NULL;\n+\n+  return pddr;\n+}\n+\n /* Returns true when the PBB_TRANSFORMED_SCATTERING functions of PBB1\n    and PBB2 respect the data dependences of PBB_ORIGINAL_SCATTERING\n    functions.  */\n@@ -509,20 +533,11 @@ graphite_legal_transform_dr (poly_bb_p pbb1, poly_bb_p pbb2,\n   ppl_dimension_type pdim;\n   bool is_empty_p;\n   poly_ddr_p pddr;\n-\n   ppl_Pointset_Powerset_C_Polyhedron_t d1 = PBB_DOMAIN (pbb1);\n   ppl_Pointset_Powerset_C_Polyhedron_t d2 = PBB_DOMAIN (pbb2);\n-  ppl_Polyhedron_t so1 = PBB_ORIGINAL_SCATTERING (pbb1);\n-  ppl_Polyhedron_t so2 = PBB_ORIGINAL_SCATTERING (pbb2);\n-  graphite_dim_t sdim1 = PDR_NB_SUBSCRIPTS (pdr1) + 1;\n-  graphite_dim_t sdim2 = PDR_NB_SUBSCRIPTS (pdr2) + 1;\n \n-  if (sdim1 != sdim2)\n-    return true;\n-\n-  pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n-\t\t\t\ttrue, true);\n-  if (pddr_is_empty (pddr))\n+  pddr = pddr_original_scattering (pbb1, pbb2, pdr1, pdr2);\n+  if (!pddr)\n     return true;\n \n   po = PDDR_DDP (pddr);\n@@ -679,8 +694,6 @@ graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n   ppl_Polyhedron_t so2 = PBB_TRANSFORMED_SCATTERING (pbb2);\n   ppl_Pointset_Powerset_C_Polyhedron_t po;\n   ppl_Pointset_Powerset_C_Polyhedron_t eqpp;\n-  graphite_dim_t sdim1 = PDR_NB_SUBSCRIPTS (pdr1) + 1;\n-  graphite_dim_t sdim2 = PDR_NB_SUBSCRIPTS (pdr2) + 1;\n   graphite_dim_t tdim1 = pbb_nb_scattering_transform (pbb1);\n   graphite_dim_t ddim1 = pbb_dim_iter_domain (pbb1);\n   ppl_dimension_type dim;\n@@ -691,7 +704,7 @@ graphite_carried_dependence_level_k (poly_dr_p pdr1, poly_dr_p pdr2,\n       || !poly_drs_may_alias_p (pdr1, pdr2))\n     return false;\n \n-  if (sdim1 != sdim2)\n+  if (PDR_NB_SUBSCRIPTS (pdr1) != PDR_NB_SUBSCRIPTS (pdr2))\n     return true;\n \n   pddr = dependence_polyhedron (pbb1, pbb2, d1, d2, pdr1, pdr2, so1, so2,\n@@ -733,4 +746,50 @@ dependency_between_pbbs_p (poly_bb_p pbb1, poly_bb_p pbb2, int level)\n   return false;\n }\n \n+/* Pretty print to FILE all the data dependences of SCoP in DOT\n+   format.  */\n+\n+static void\n+dot_deps_1 (FILE *file, scop_p scop)\n+{\n+  int i, j, k, l;\n+  poly_bb_p pbb1, pbb2;\n+  poly_dr_p pdr1, pdr2;\n+\n+  fputs (\"digraph all {\\n\", file);\n+\n+  for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb1); i++)\n+    for (j = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), j, pbb2); j++)\n+      for (k = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb1), k, pdr1); k++)\n+\tfor (l = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb2), l, pdr2); l++)\n+\t  if (pddr_original_scattering (pbb1, pbb2, pdr1, pdr2))\n+\t    fprintf (file, \"S%d_D%d -> S%d_D%d\\n\",\n+\t\t     pbb_index (pbb1), PDR_ID (pdr1),\n+\t\t     pbb_index (pbb2), PDR_ID (pdr2));\n+\n+  fputs (\"}\\n\\n\", file);\n+}\n+\n+/* Display all the data dependences in SCoP using dotty.  */\n+\n+void\n+dot_deps (scop_p scop)\n+{\n+  /* When debugging, enable the following code.  This cannot be used\n+     in production compilers because it calls \"system\".  */\n+#if 1\n+  int x;\n+  FILE *stream = fopen (\"/tmp/scopdeps.dot\", \"w\");\n+  gcc_assert (stream);\n+\n+  dot_deps_1 (stream, scop);\n+  fclose (stream);\n+\n+  x = system (\"dotty /tmp/scopdeps.dot\");\n+#else\n+  dot_deps_1 (stderr, scop);\n+#endif\n+}\n+\n+\n #endif"}, {"sha": "a668d1c1565916e6ba2f70d438ad33702cfd8ed5", "filename": "gcc/graphite-dependences.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-dependences.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-dependences.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.h?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -50,5 +50,6 @@ typedef struct poly_ddr\n extern int eq_poly_ddr_p (const void *, const void *);\n extern hashval_t hash_poly_ddr_p (const void *);\n extern void free_poly_ddr (void *);\n+extern void dot_deps (scop_p);\n \n #endif"}, {"sha": "835d6a87104b16ac380d060bd59c918ec11c2654", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -273,7 +273,9 @@ new_poly_dr (poly_bb_p pbb,\n \t     enum POLY_DR_TYPE type, void *cdr, int nb_subscripts)\n {\n   poly_dr_p pdr = XNEW (struct poly_dr);\n+  static int id = 0;\n \n+  PDR_ID (pdr) = id++;\n   PDR_PBB (pdr) = pbb;\n   PDR_ACCESSES (pdr) = accesses;\n   PDR_TYPE (pdr) = type;\n@@ -361,7 +363,7 @@ print_pdr_access_layout (FILE *file, poly_dr_p pdr)\n void\n print_pdr (FILE *file, poly_dr_p pdr)\n {\n-  fprintf (file, \"pdr (\");\n+  fprintf (file, \"pdr_%d (\", PDR_ID (pdr));\n \n   switch (PDR_TYPE (pdr))\n     {"}, {"sha": "a42e2429e0efdf1565426cfba5ae1665485afefd", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -53,6 +53,9 @@ enum POLY_DR_TYPE\n \n struct poly_dr\n {\n+  /* An identifier for this PDR.  */\n+  int id;\n+\n   /* A pointer to compiler's data reference description.  */\n   void *compiler_dr;\n \n@@ -130,9 +133,10 @@ struct poly_dr\n   ppl_Pointset_Powerset_C_Polyhedron_t accesses;\n \n   /* The number of subscripts.  */\n-  graphite_dim_t nb_subscripts; \n+  graphite_dim_t nb_subscripts;\n };\n \n+#define PDR_ID(PDR) (PDR->id)\n #define PDR_CDR(PDR) (PDR->compiler_dr)\n #define PDR_PBB(PDR) (PDR->pbb)\n #define PDR_TYPE(PDR) (PDR->type)\n@@ -304,9 +308,18 @@ extern bool scop_do_interchange (scop_p);\n extern bool scop_do_strip_mine (scop_p);\n extern void pbb_number_of_iterations (poly_bb_p, graphite_dim_t, Value);\n \n+/* The index of the PBB.  */\n+\n+static inline int\n+pbb_index (poly_bb_p pbb)\n+{\n+  return GBB_BB (PBB_BLACK_BOX (pbb))->index;\n+}\n+\n /* The scop that contains the PDR.  */\n \n-static inline scop_p pdr_scop (poly_dr_p pdr)\n+static inline scop_p\n+pdr_scop (poly_dr_p pdr)\n {\n   return PBB_SCOP (PDR_PBB (pdr));\n }"}, {"sha": "9fdf6b373e53a787f1204a73062558e7bf064d3b", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afae02072cf05ccf15d840f8194490902b97ab32/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=afae02072cf05ccf15d840f8194490902b97ab32", "patch": "@@ -1445,12 +1445,15 @@ build_scops (VEC (scop_p, heap) **scops)\n \t     VEC_length (scop_p, *scops));\n }\n \n-/* Pretty print all SCoPs in DOT format and mark them with different colors.\n-   If there are not enough colors, paint later SCoPs gray.\n+/* Pretty print to FILE all the SCoPs in DOT format and mark them with\n+   different colors.  If there are not enough colors, paint the\n+   remaining SCoPs in gray.\n+\n    Special nodes:\n-   - \"*\" after the node number: entry of a SCoP,\n-   - \"#\" after the node number: exit of a SCoP,\n-   - \"()\" entry or exit not part of SCoP.  */\n+   - \"*\" after the node number denotes the entry of a SCoP,\n+   - \"#\" after the node number denotes the exit of a SCoP,\n+   - \"()\" around the node number denotes the entry or the\n+     exit nodes of the SCOP.  These are not part of SCoP.  */\n \n static void\n dot_all_scops_1 (FILE *file, VEC (scop_p, heap) *scops)"}]}