{"sha": "2d33065aaeeaec02734e2af8c4c61300446d6e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzMzA2NWFhZWVhZWMwMjczNGUyYWY4YzRjNjEzMDA0NDZkNmU4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-23T22:21:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-23T22:21:54Z"}, "message": "Add -mhimem to support linking above 0x20000000 boundary.\n\n(CONST_COSTS): Correct range is -0x1fff to 0x2000.\n\nFrom-SVN: r8559", "tree": {"sha": "1d8f01db9841df3a0727459d6a89687bd8b9fe5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d8f01db9841df3a0727459d6a89687bd8b9fe5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d33065aaeeaec02734e2af8c4c61300446d6e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33065aaeeaec02734e2af8c4c61300446d6e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d33065aaeeaec02734e2af8c4c61300446d6e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33065aaeeaec02734e2af8c4c61300446d6e84/comments", "author": null, "committer": null, "parents": [{"sha": "6ad2f71a2236d906a70814b3f42977a2dd0b2bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad2f71a2236d906a70814b3f42977a2dd0b2bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad2f71a2236d906a70814b3f42977a2dd0b2bae"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "fe80c7244462b3a41002d1b032dce6a65abb6ae5", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33065aaeeaec02734e2af8c4c61300446d6e84/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33065aaeeaec02734e2af8c4c61300446d6e84/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=2d33065aaeeaec02734e2af8c4c61300446d6e84", "patch": "@@ -81,6 +81,7 @@ extern int target_flags;\n \n /* Ok to use the static base register (and presume it's 0) */\n #define TARGET_SB    ((target_flags & 32) == 0)\n+#define TARGET_HIMEM (target_flags & 128)\n \n /* Compile using bitfield insns.  */\n #define TARGET_BITFIELD ((target_flags & 64) == 0)\n@@ -106,6 +107,8 @@ extern int target_flags;\n     { \"nosb\", 32},\t\t\t\t\\\n     { \"bitfield\", -64},\t\t\t\t\\\n     { \"nobitfield\", 64},\t\t\t\\\n+    { \"himem\", 128},\t\t\t\t\\\n+    { \"nohimem\", -128},\t\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n /* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */\n \n@@ -114,7 +117,7 @@ extern int target_flags;\n \n #define OVERRIDE_OPTIONS\t\t\\\n {\t\t\t\t\t\\\n-  if (flag_pic) target_flags |= 32;\t\\\n+  if (flag_pic || TARGET_HIMEM) target_flags |= 32;\t\\\n }\n \n \f\n@@ -910,7 +913,7 @@ __transfer_from_trampoline ()\t\t\\\n    || (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n        && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\t\\\n        && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\t\t\\\n-       && (flag_pic ? \t\t\t\t\t\t\t\\\n+       && ((flag_pic || TARGET_HIMEM) ? \t\t\t\t\\\n \t     CONSTANT_ADDRESS_NO_LABEL_P (XEXP (X, 1))\t \t\t\\\n \t   :\t\t\t\t\t\t\t\t\\\n \t     CONSTANT_ADDRESS_P (XEXP (X, 1))) \t\t\t\t\\\n@@ -1142,7 +1145,7 @@ while (0)\n #define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     if (INTVAL (RTX) <= 7 && INTVAL (RTX) >= -8) return 0;\t\\\n-    if (INTVAL (RTX) < 0x4000 && INTVAL (RTX) >= -0x4000)\t\\\n+    if (INTVAL (RTX) < 0x2000 && INTVAL (RTX) >= -0x2000)\t\\\n       return 1;\t\t\t\t\t\t\t\\\n   case CONST:\t\t\t\t\t\t\t\\\n   case LABEL_REF:\t\t\t\t\t\t\\"}]}