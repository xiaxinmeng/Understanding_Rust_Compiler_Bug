{"sha": "ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiNjZlYjVmYTE2YjA0ZWUwYTFkNjI5MTgxNWY0ODlmZDdkN2FjZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-11-23T05:18:41Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-11-23T05:18:41Z"}, "message": "Vector.java: Improve exception messages.\n\n2000-11-23  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/util/Vector.java: Improve exception messages.\n\t(Vector): Check initialCapacity for IllegalArgumentException.\n\t(tromToSize): Don't check for elementCount == elementData.length\n\tcase.\n\t(toArray): Don't try to set null marker if target array is the same\n\tlength as the vector.\n\nFrom-SVN: r37685", "tree": {"sha": "73e4a82a9cc687f315290bec934f92742ce7c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e4a82a9cc687f315290bec934f92742ce7c2ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace/comments", "author": null, "committer": null, "parents": [{"sha": "23a5b4448cdfa6917d1ff34342bb7b7c0c83c113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a5b4448cdfa6917d1ff34342bb7b7c0c83c113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a5b4448cdfa6917d1ff34342bb7b7c0c83c113"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "c5cd9cdd49a468a682d6f6f9c09aa7a8cf35b956", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "patch": "@@ -1,3 +1,12 @@\n+2000-11-23  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/util/Vector.java: Improve exception messages.\n+\t(Vector): Check initialCapacity for IllegalArgumentException.\n+\t(tromToSize): Don't check for elementCount == elementData.length\n+\tcase.\n+\t(toArray): Don't try to set null marker if target array is the same\n+\tlength as the vector.\n+\n 2000-11-22  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "cd0a763a3aa7bb72591d56d43d1581f8c825a0f9", "filename": "libjava/java/util/Vector.java", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace/libjava%2Fjava%2Futil%2FVector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace/libjava%2Fjava%2Futil%2FVector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FVector.java?ref=ebb66eb5fa16b04ee0a1d6291815f489fd7d7ace", "patch": "@@ -115,6 +115,8 @@ public Vector(Collection c)\n    */\n   public Vector(int initialCapacity, int capacityIncrement)\n   {\n+    if (initialCapacity < 0)\n+      throw new IllegalArgumentException();\n     elementData = new Object[initialCapacity];\n     this.capacityIncrement = capacityIncrement;\n   }\n@@ -126,6 +128,8 @@ public Vector(int initialCapacity, int capacityIncrement)\n    */\n   public Vector(int initialCapacity)\n   {\n+    if (initialCapacity < 0)\n+      throw new IllegalArgumentException();\n     elementData = new Object[initialCapacity];\n   }\n \n@@ -152,12 +156,11 @@ public synchronized void copyInto(Object[] anArray)\n    */\n   public synchronized void trimToSize()\n   {\n-    // Check if the Vector is already trimmed, to save execution time\n-    if (elementCount == elementData.length)\n-      return;\n-    // Guess not\n+    // Don't bother checking for the case where size() == the capacity of the\n+    // vector since that is a much less likely case; it's more efficient to\n+    // not do the check and lose a bit of performance in that infrequent case\n \n-    Object[]newArray = new Object[elementCount];\n+    Object[] newArray = new Object[elementCount];\n     System.arraycopy(elementData, 0, newArray, 0, elementCount);\n     elementData = newArray;\n   }\n@@ -296,7 +299,7 @@ public boolean contains(Object elem)\n   public synchronized int lastIndexOf(Object e, int index)\n   {\n     if (index >= elementCount)\n-      throw new ArrayIndexOutOfBoundsException(index);\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n \n     for (int i = index; i >= 0; i--)\n       {\n@@ -332,7 +335,7 @@ public synchronized Object elementAt(int index)\n     //Within the bounds of this Vector does not necessarily mean within \n     //the bounds of the internal array\n     if (index >= elementCount)\n-      throw new ArrayIndexOutOfBoundsException(index);\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n \n     return elementData[index];\n   }\n@@ -378,8 +381,8 @@ public synchronized Object lastElement()\n    */\n   public synchronized void setElementAt(Object obj, int index)\n   {\n-    if ((index < 0) || (index >= elementCount))\n-      throw new ArrayIndexOutOfBoundsException(index);\n+    if (index >= elementCount)\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n \n     elementData[index] = obj;\n   }\n@@ -397,7 +400,7 @@ public synchronized void setElementAt(Object obj, int index)\n   public synchronized Object set(int index, Object element)\n   {\n     if (index >= elementCount)\n-      throw new ArrayIndexOutOfBoundsException(index);\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n \n     Object temp = elementData[index];\n     elementData[index] = element;\n@@ -413,7 +416,7 @@ public synchronized Object set(int index, Object element)\n   public synchronized void removeElementAt(int index)\n   {\n     if (index >= elementCount)\n-      throw new ArrayIndexOutOfBoundsException(index);\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n \n     modCount++;\n     elementCount--;\n@@ -434,10 +437,11 @@ public synchronized void removeElementAt(int index)\n    */\n   public void insertElementAt(Object obj, int index)\n   {\n-    if ((index < 0) || (index > elementCount))\n-      throw new ArrayIndexOutOfBoundsException(index);\n+    if (index > elementCount)\n+      throw new ArrayIndexOutOfBoundsException(index + \" > \" + elementCount);\n \n-    ensureCapacity(++elementCount);\n+    if (elementCount == elementData.length)\n+      ensureCapacity(++elementCount);\n     modCount++;\n     System.arraycopy(elementData, index, elementData, index + 1,\n \t\t     elementCount - 1 - index);\n@@ -454,7 +458,8 @@ public void insertElementAt(Object obj, int index)\n    */\n   public synchronized void addElement(Object obj)\n   {\n-    ensureCapacity(elementCount + 1);\n+    if (elementCount == elementData.length)\n+      ensureCapacity(++elementCount);\n     modCount++;\n     elementData[elementCount++] = obj;\n   }\n@@ -488,7 +493,7 @@ public synchronized void removeAllElements()\n     if (elementCount == 0)\n       return;\n \n-    for (int i = 0; i < elementCount; i++)\n+    for (int i = elementCount - 1; i >= 0; --i)\n       {\n \telementData[i] = null;\n       }\n@@ -553,7 +558,7 @@ public synchronized Object[] toArray(Object[] array)\n     if (array.length < elementCount)\n       array = (Object[]) Array.newInstance(array.getClass().getComponentType(), \n         \t\t\t\t   elementCount);\n-    else\n+    else if (array.length > elementCount)\n       array[elementCount] = null;\n     System.arraycopy(elementData, 0, array, 0, elementCount);\n     return array;\n@@ -617,7 +622,7 @@ public void add(int index, Object element)\n   public synchronized Object remove(int index)\n   {\n     if (index >= elementCount)\n-      throw new ArrayIndexOutOfBoundsException(index);\n+      throw new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n   \n     Object temp = elementData[index];\n     removeElementAt(index);"}]}