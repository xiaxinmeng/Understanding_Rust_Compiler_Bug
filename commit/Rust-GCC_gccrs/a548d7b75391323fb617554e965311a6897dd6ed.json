{"sha": "a548d7b75391323fb617554e965311a6897dd6ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0OGQ3Yjc1MzkxMzIzZmI2MTc1NTRlOTY1MzExYTY4OTdkZDZlZA==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2006-11-06T18:02:13Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2006-11-06T18:02:13Z"}, "message": "configure.ac (__libc_freeres): Look for it.\n\n2006-11-06  Frank Ch. Eigler  <fche@redhat.com>\n\n\t* configure.ac (__libc_freeres): Look for it.\n\t* mf-impl.h (call_libc_freeres): New configuration flag.\n\t* mf-runtime.c (__mf_set_default_options): Set it by default.\n\t(__mfu_report): Call it if needed.\n\t(__mfu_unregister): Remove \"unaccessed registered object\" warning.\n\t* configure, config.h.in: Regenerated.\n\nFrom-SVN: r118523", "tree": {"sha": "56b8c0aa4258be292832ad52f6e3be9089c63077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56b8c0aa4258be292832ad52f6e3be9089c63077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a548d7b75391323fb617554e965311a6897dd6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a548d7b75391323fb617554e965311a6897dd6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a548d7b75391323fb617554e965311a6897dd6ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a548d7b75391323fb617554e965311a6897dd6ed/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f75f38989e10491c8a5fcf0f7ae855b4763afc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f75f38989e10491c8a5fcf0f7ae855b4763afc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f75f38989e10491c8a5fcf0f7ae855b4763afc2"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "6b2a8e2bd9cbf1d3a63f5540d6f1f4da2b0af4dd", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -1,3 +1,12 @@\n+2006-11-06  Frank Ch. Eigler  <fche@redhat.com>\n+\n+\t* configure.ac (__libc_freeres): Look for it.\n+\t* mf-impl.h (call_libc_freeres): New configuration flag.\n+\t* mf-runtime.c (__mf_set_default_options): Set it by default.\n+\t(__mfu_report): Call it if needed.\n+\t(__mfu_unregister): Remove \"unaccessed registered object\" warning.\n+\t* configure, config.h.in: Regenerated.\n+\n 2006-09-18  Tom Tromey  <tromey@redhat.com>\n \n \t* configure: Rebuilt."}, {"sha": "e280b7897139b4d2b7b042dd02c49d9cbc508219", "filename": "libmudflap/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfig.h.in?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -243,6 +243,9 @@\n /* Define to 1 if you have the `__ctype_toupper_loc' function. */\n #undef HAVE___CTYPE_TOUPPER_LOC\n \n+/* Define to 1 if you have the `__libc_freeres' function. */\n+#undef HAVE___LIBC_FREERES\n+\n /* Name of package */\n #undef PACKAGE\n "}, {"sha": "7f7dd06e32073ead6d0fc17157f80f3451ff07e7", "filename": "libmudflap/configure", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -4940,6 +4940,108 @@ fi\n done\n \n \n+for ac_func in __libc_freeres\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n@@ -5849,7 +5951,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 5852 \"configure\"' > conftest.$ac_ext\n+  echo '#line 5954 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "a22be278d32c8b1193bbf4067a45585191428158", "filename": "libmudflap/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure.ac?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -75,6 +75,7 @@ AC_CHECK_FUNCS(getservent getservbyname getservbyport getaddrinfo gai_strerror)\n AC_CHECK_FUNCS(getprotoent getprotobyname getprotobynumber)\n AC_CHECK_FUNCS(getmntent setmntent addmntent)\n AC_CHECK_FUNCS(inet_ntoa mmap munmap)\n+AC_CHECK_FUNCS(__libc_freeres)\n \n AC_TRY_COMPILE([#include <sys/types.h>\n #include <sys/ipc.h>"}, {"sha": "728a58bc05dd56ce1c4e02c1eec1b3b1c3fd29bc", "filename": "libmudflap/mf-impl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fmf-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fmf-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-impl.h?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -134,6 +134,11 @@ struct __mf_options\n   /* Print list of leaked heap objects on shutdown. */\n   unsigned print_leaks;\n \n+#ifdef HAVE___LIBC_FREERES\n+  /* Call __libc_freeres before leak analysis. */\n+  unsigned call_libc_freeres;\n+#endif\n+\n   /* Detect reads of uninitialized objects. */\n   unsigned check_initialization;\n "}, {"sha": "d6e32262e0672159c0d27d17ca7dd9b72eae6092", "filename": "libmudflap/mf-runtime.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fmf-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a548d7b75391323fb617554e965311a6897dd6ed/libmudflap%2Fmf-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.c?ref=a548d7b75391323fb617554e965311a6897dd6ed", "patch": "@@ -1,5 +1,5 @@\n /* Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n    Splay Tree code originally by Mark Mitchell <mark@markmitchell.com>,\n@@ -300,6 +300,9 @@ __mf_set_default_options ()\n   __mf_opts.timestamps = 1;\n   __mf_opts.mudflap_mode = mode_check;\n   __mf_opts.violation_mode = viol_nop;\n+#ifdef HAVE___LIBC_FREERES\n+  __mf_opts.call_libc_freeres = 1;\n+#endif\n   __mf_opts.heur_std_data = 1;\n #ifdef LIBMUDFLAPTH\n   __mf_opts.thread_stack = 0;\n@@ -365,6 +368,11 @@ options [] =\n     {\"print-leaks\",\n      \"print any memory leaks at program shutdown\",\n      set_option, 1, &__mf_opts.print_leaks},\n+#ifdef HAVE___LIBC_FREERES\n+    {\"libc-freeres\",\n+     \"call glibc __libc_freeres at shutdown for better leak data\",\n+     set_option, 1, &__mf_opts.call_libc_freeres},\n+#endif\n     {\"check-initialization\",\n      \"detect uninitialized object reads\",\n      set_option, 1, &__mf_opts.check_initialization},\n@@ -1323,10 +1331,15 @@ __mfu_unregister (void *ptr, size_t sz, int type)\n                 (old_obj->type == __MF_TYPE_HEAP\n                  || old_obj->type == __MF_TYPE_HEAP_I))\n               {\n+\t\t/* The problem with a warning message here is that we may not\n+\t\t   be privy to accesses to such objects that occur within\n+\t\t   uninstrumented libraries.  */\n+#if 0\n                 fprintf (stderr,\n                          \"*******\\n\"\n                          \"mudflap warning: unaccessed registered object:\\n\");\n                 __mf_describe_object (old_obj);\n+#endif\n               }\n           }\n \n@@ -1855,6 +1868,14 @@ __mfu_report ()\n \n       /* Free up any remaining alloca()'d blocks.  */\n       __mf_wrap_alloca_indirect (0);\n+#ifdef HAVE___LIBC_FREERES\n+      if (__mf_opts.call_libc_freeres)\n+        {\n+          extern void __libc_freeres (void);\n+          __libc_freeres ();\n+        }\n+#endif\n+\n       __mf_describe_object (NULL); /* Reset description epoch.  */\n       l = __mf_report_leaks ();\n       fprintf (stderr, \"number of leaked objects: %u\\n\", l);"}]}