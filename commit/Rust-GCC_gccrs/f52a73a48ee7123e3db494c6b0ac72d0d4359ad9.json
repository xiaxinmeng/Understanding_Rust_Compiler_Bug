{"sha": "f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyYTczYTQ4ZWU3MTIzZTNkYjQ5NGM2YjBhYzcyZDBkNDM1OWFkOQ==", "commit": {"author": {"name": "Simon Dardis", "email": "simon.dardis@imgtec.com", "date": "2015-10-26T16:29:31Z"}, "committer": {"name": "Simon Dardis", "email": "dardiss@gcc.gnu.org", "date": "2015-10-26T16:29:31Z"}, "message": "target.def (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): New hook.\n\ngcc/\n\t* target.def (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): New hook.\n\t* doc/tm.texi.in (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): Document.\n\t* doc/tm.texi: Regenerated.\n\t* reorg.c (dbr_schedule): Use new hook.\n\t* config/mips/mips.c (mips_no_speculation_in_delay_slots_p): New.\n\ntestsuite/\n\t* gcc.target/mips/ds-schedule-1.c: New.\n\t* gcc.target/mips/ds-schedule-2.c: New.\n\nFrom-SVN: r229383", "tree": {"sha": "9552e1a0126429b27a97fae3c461dbb105d3be55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9552e1a0126429b27a97fae3c461dbb105d3be55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/comments", "author": null, "committer": null, "parents": [{"sha": "bdeb752cf843f95086d96ca7f8908c99a6c81750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdeb752cf843f95086d96ca7f8908c99a6c81750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdeb752cf843f95086d96ca7f8908c99a6c81750"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "b2be8cf74113eb2a9027092a63725f993b783fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -1,3 +1,11 @@\n+2015-10-26  Simon Dardis <simon.dardis@imgtec.com>\n+\n+\t* target.def (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): New hook.\n+\t* doc/tm.texi.in (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): Document.\n+\t* doc/tm.texi: Regenerated.\n+\t* reorg.c (dbr_schedule): Use new hook.\n+\t* config/mips/mips.c (mips_no_speculation_in_delay_slots_p): New.\n+\n 2015-10-26  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/68013"}, {"sha": "95d5ca34befaf3260a5715f5ff39040d61df559b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -4312,6 +4312,14 @@ mips_address_cost (rtx addr, machine_mode mode,\n {\n   return mips_address_insns (addr, mode, false);\n }\n+\n+/* Implement TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P.  */\n+\n+static bool\n+mips_no_speculation_in_delay_slots_p ()\n+{\n+  return TARGET_CB_MAYBE;\n+}\n \f\n /* Information about a single instruction in a multi-instruction\n    asm sequence.  */\n@@ -19823,6 +19831,9 @@ mips_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class)\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST mips_address_cost\n \n+#undef TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P\n+#define TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P mips_no_speculation_in_delay_slots_p\n+\n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P mips_in_small_data_p\n "}, {"sha": "a8666b1a8b45e946eb928c7631fd120b5841dc8c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -6450,6 +6450,16 @@ should probably only be given to addresses with different numbers of\n registers on machines with lots of registers.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P (void)\n+This predicate controls the use of the eager delay slot filler to disallow\n+speculatively executed instructions being placed in delay slots.  Targets\n+such as certain MIPS architectures possess both branches with and without\n+delay slots.  As the eager delay slot filler can decrease performance,\n+disabling it is beneficial when ordinary branches are available.  Use of\n+delay slot branches filled using the basic filler is often still desirable\n+as the delay slot can hide a pipeline bubble.\n+@end deftypefn\n+\n @node Scheduling\n @section Adjusting the Instruction Scheduler\n "}, {"sha": "69b6cf90e21f1f170d961ce237b8ae68a6f6e8bf", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -4726,6 +4726,8 @@ Define this macro if a non-short-circuit operation produced by\n \n @hook TARGET_ADDRESS_COST\n \n+@hook TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P\n+\n @node Scheduling\n @section Adjusting the Instruction Scheduler\n "}, {"sha": "ccd0d71d1f705f2413ca12d3f536b25ac879ceb6", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -3726,7 +3726,8 @@ dbr_schedule (rtx_insn *first)\n     {\n       fill_simple_delay_slots (1);\n       fill_simple_delay_slots (0);\n-      fill_eager_delay_slots ();\n+      if (!targetm.no_speculation_in_delay_slots_p ())\n+\tfill_eager_delay_slots ();\n       relax_delay_slots (first);\n     }\n "}, {"sha": "b74887d733179ffd9a8bf75ad26d4885e0039e53", "filename": "gcc/target.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -3506,6 +3506,19 @@ registers on machines with lots of registers.\",\n  int, (rtx address, machine_mode mode, addr_space_t as, bool speed),\n  default_address_cost)\n \n+/* Permit speculative instructions in delay slots during delayed-branch \n+   scheduling.  */\n+DEFHOOK\n+(no_speculation_in_delay_slots_p,\n+ \"This predicate controls the use of the eager delay slot filler to disallow\\n\\\n+speculatively executed instructions being placed in delay slots.  Targets\\n\\\n+such as certain MIPS architectures possess both branches with and without\\n\\\n+delay slots.  As the eager delay slot filler can decrease performance,\\n\\\n+disabling it is beneficial when ordinary branches are available.  Use of\\n\\\n+delay slot branches filled using the basic filler is often still desirable\\n\\\n+as the delay slot can hide a pipeline bubble.\", bool, (void),\n+  hook_bool_void_false)\n+\n /* Return where to allocate pseudo for a given hard register initial value.  */\n DEFHOOK\n (allocate_initial_value,"}, {"sha": "04700fbf8421bfc80dd94604b924994146e99a84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -1,3 +1,8 @@\n+2015-10-26  Simon Dardis  <simon.dardis@imgtec.com>\n+\n+\t* gcc.target/mips/ds-schedule-1.c: New.\n+\t* gcc.target/mips/ds-schedule-2.c: New.\n+\n 2015-10-26  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/68013"}, {"sha": "9cc5daa831c7c448fb4c6f4f87482b7c7abd0507", "filename": "gcc/testsuite/gcc.target/mips/ds-schedule-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-1.c?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"isa_rev>=6 -mcompact-branches=optimal -mno-abicalls -G4\" } */\n+/* { dg-final { scan-assembler-not \"bne\\t\" } } */\n+/* { dg-final { scan-assembler-not \"beq\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\\\(foo\\\\)\" 1 } } */\n+\n+/* Test that when compact branches are used, that a compact branch is\n+   produced in the case where code expansion would have occurred if a\n+   delay slot branch would have be used.  'foo' should only be\n+   referenced once in the program text.  */\n+\n+struct list\n+{\n+  struct list *next;\n+  int element;\n+};\n+\n+struct list *gr;\n+\n+int foo;\n+\n+extern void t (int, int, int*);\n+\n+void\n+f (struct list **ptr)\n+{\n+  if (gr)\n+    *ptr = gr->next;\n+  t (1, foo, &gr->element);\n+}"}, {"sha": "6c5de5dac9276c6126e272deaa84ec212f8c555d", "filename": "gcc/testsuite/gcc.target/mips/ds-schedule-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fds-schedule-2.c?ref=f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-mcompact-branches=never -mno-abicalls -G4\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" \"-Os\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"beq.*\\n\\tlw\" } } */\n+/* { dg-final { scan-assembler-times \"\\\\(foo\\\\)\" 2 } } */\n+\n+/* Test that when compact branches are explicitly disabled, that a non-compact\n+   branch is produced. 'foo' should be referenced twice in the program text as the\n+   eager delay slot filler will duplicate the load of foo. */\n+\n+struct list\n+{\n+  struct list *next;\n+  int element;\n+};\n+\n+struct list *gr;\n+\n+int foo;\n+\n+extern void t (int, int, int*);\n+\n+void\n+f (struct list **ptr)\n+{\n+  if (gr)\n+    *ptr = gr->next;\n+  t (1, foo, &gr->element);\n+}"}]}