{"sha": "a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "node_id": "C_kwDOANBUbNoAKGE0NmJjYTM2YjdiM2E4YTdlMTViMDQyMjVmYjJiNGY5YjFiZWQ2MmM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-07T07:49:48Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-07T07:49:48Z"}, "message": "Allow any immediate constant in *cmp<dwi>_doubleword splitter on x86_64.\n\nThis patch tweaks i386.md's *cmp<dwi>_doubleword splitter's predicate to\nallow general_operand, not just x86_64_hilo_general_operand, to improve\ncode generation.  As a general rule, i386.md's _doubleword splitters should\nbe post-reload splitters that require integer immediate operands to be\nx86_64_hilo_int_operand, so that each part is a valid word mode immediate\nconstant.  As an exception to this rule, doubleword patterns that must be\nsplit before reload, because they require additional scratch registers,\ncan use take advantage of this ability to create new pseudos, to accept\nany immediate constant, and call force_reg on the high and/or low parts\nif they are not suitable immediate operands in word mode.\n\nThe benefit is shown in the new cmpti3.c test case below.\n\n__int128 x;\nint foo()\n{\n    __int128 t = 0x1234567890abcdefLL;\n    return x == t;\n}\n\nwhere GCC with -O2 currently generates:\n\n        movabsq $1311768467294899695, %rax\n        xorl    %edx, %edx\n        xorq    x(%rip), %rax\n        xorq    x+8(%rip), %rdx\n        orq     %rdx, %rax\n        sete    %al\n        movzbl  %al, %eax\n        ret\n\nbut with this patch now generates:\n\n        movabsq $1311768467294899695, %rax\n        xorq    x(%rip), %rax\n        orq     x+8(%rip), %rax\n        sete    %al\n        movzbl  %al, %eax\n        ret\n\n2022-08-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (*cmp<dwi>_doubleword): Change predicate\n\tfor x86_64_hilo_general_operand to general operand.  Call\n\tforce_reg on parts that are not x86_64_immediate_operand.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/cmpti1.c: New test case.\n\t* gcc.target/i386/cmpti2.c: Likewise.\n\t* gcc.target/i386/cmpti3.c: Likewise.", "tree": {"sha": "467c0d9bfeb4b8ffeeff33f21a27db0eddb19532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467c0d9bfeb4b8ffeeff33f21a27db0eddb19532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019a41a7cea5e9855c60b6825b6f2b7378c98eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019a41a7cea5e9855c60b6825b6f2b7378c98eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019a41a7cea5e9855c60b6825b6f2b7378c98eab"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "fd30c573c270f147c944061d56bfa390f4bf0a95", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "patch": "@@ -1510,7 +1510,7 @@\n (define_insn_and_split \"*cmp<dwi>_doubleword\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:<DWI> 0 \"nonimmediate_operand\")\n-\t\t     (match_operand:<DWI> 1 \"x86_64_hilo_general_operand\")))]\n+\t\t     (match_operand:<DWI> 1 \"general_operand\")))]\n   \"ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -1544,7 +1544,12 @@\n   else if (operands[0] == constm1_rtx)\n     emit_insn (gen_one_cmpl<mode>2 (operands[4], operands[1]));\n   else\n-    emit_insn (gen_xor<mode>3 (operands[4], operands[0], operands[1]));\n+    {\n+      if (CONST_SCALAR_INT_P (operands[1])\n+\t  && !x86_64_immediate_operand (operands[1], <MODE>mode))\n+\toperands[1] = force_reg (<MODE>mode, operands[1]);\n+      emit_insn (gen_xor<mode>3 (operands[4], operands[0], operands[1]));\n+    }\n \n   if (operands[3] == const0_rtx)\n     operands[5] = operands[2];\n@@ -1558,7 +1563,12 @@\n       else if (operands[2] == constm1_rtx)\n \temit_insn (gen_one_cmpl<mode>2 (operands[5], operands[3]));\n       else\n-\temit_insn (gen_xor<mode>3 (operands[5], operands[2], operands[3]));\n+\t{\n+\t  if (CONST_SCALAR_INT_P (operands[3])\n+\t      && !x86_64_immediate_operand (operands[3], <MODE>mode))\n+\t    operands[3] = force_reg (<MODE>mode, operands[3]);\n+\t  emit_insn (gen_xor<mode>3 (operands[5], operands[2], operands[3]));\n+\t}\n     }\n })\n "}, {"sha": "1c5f121e54437ec3eeb03468627a5dc6739852bb", "filename": "gcc/testsuite/gcc.target/i386/cmpti1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti1.c?ref=a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+int eq(__int128 x, __int128 y) { return x == y; }\n+int ne(__int128 x, __int128 y) { return x != y; }\n+/* { dg-final { scan-assembler-times \"xorq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"setne\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sete\" 1 } } */\n+"}, {"sha": "ad9572901ce5ab997794b4ba38704808728b15a2", "filename": "gcc/testsuite/gcc.target/i386/cmpti2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti2.c?ref=a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__int128 x;\n+__int128 y;\n+\n+int eq() { return x == y; }\n+int ne() { return x != y; }\n+\n+/* { dg-final { scan-assembler-times \"xorq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"setne\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sete\" 1 } } */"}, {"sha": "302efd2ad59eb582c436784d97874f7150da2d51", "filename": "gcc/testsuite/gcc.target/i386/cmpti3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmpti3.c?ref=a46bca36b7b3a8a7e15b04225fb2b4f9b1bed62c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__int128 x;\n+int foo()\n+{\n+    __int128 t = 0x1234567890abcdefLL;\n+    return x == t;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movabsq\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xorq\" 1 } } */\n+/* { dg-final { scan-assembler-not \"xorl\" } } */"}]}