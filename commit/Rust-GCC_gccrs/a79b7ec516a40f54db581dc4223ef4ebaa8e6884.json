{"sha": "a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5YjdlYzUxNmE0MGY1NGRiNTgxZGM0MjIzZWY0ZWJhYThlNjg4NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-03-21T10:14:10Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-03-21T10:14:10Z"}, "message": "Mark omp thread functions as parallelized\n\n2015-03-21  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/65458\n\t* cgraph.c (cgraph_node::dump): Handle parallelized_function field.\n\t* cgraph.h (cgraph_node): Add parallelized_function field.\n\t* lto-cgraph.c (lto_output_node): Write parallelized_function field.\n\t(input_overwrite_node): Read parallelized_function field.\n\t* omp-low.c (expand_omp_taskreg, finalize_task_copyfn): Set\n\tparallelized_function on cgraph_node for child_fn.\n\t* tree-parloops.c: Add include of plugin-api.h, ipa-ref.h and cgraph.h.\n\tRemove include of gt-tree-parloops.h.\n\t(parallelized_functions): Remove static variable.\n\t(parallelized_function_p): Rewrite using parallelized_function field of\n\tcgraph_node.\n\t(create_loop_fn): Remove adding to parallelized_functions.\n\t* Makefile.in (GTFILES): Remove tree-parloops.c\n\nFrom-SVN: r221551", "tree": {"sha": "3e31088bf1f5cd99f298747e11fb859e37c8927f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e31088bf1f5cd99f298747e11fb859e37c8927f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/comments", "author": null, "committer": null, "parents": [{"sha": "2691415b63b472998f128ef2299146e7950918fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2691415b63b472998f128ef2299146e7950918fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2691415b63b472998f128ef2299146e7950918fc"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "c9737faebc7b9663d55787433966e6e1e6567e23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -1,3 +1,20 @@\n+2015-03-21  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/65458\n+\t* cgraph.c (cgraph_node::dump): Handle parallelized_function field.\n+\t* cgraph.h (cgraph_node): Add parallelized_function field.\n+\t* lto-cgraph.c (lto_output_node): Write parallelized_function field.\n+\t(input_overwrite_node): Read parallelized_function field.\n+\t* omp-low.c (expand_omp_taskreg, finalize_task_copyfn): Set\n+\tparallelized_function on cgraph_node for child_fn.\n+\t* tree-parloops.c: Add include of plugin-api.h, ipa-ref.h and cgraph.h.\n+\tRemove include of gt-tree-parloops.h.\n+\t(parallelized_functions): Remove static variable.\n+\t(parallelized_function_p): Rewrite using parallelized_function field of\n+\tcgraph_node.\n+\t(create_loop_fn): Remove adding to parallelized_functions.\n+\t* Makefile.in (GTFILES): Remove tree-parloops.c\n+\n 2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/64366"}, {"sha": "8af45a67025f30f86ed0fac45e20d59895e5f3cd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -2321,7 +2321,6 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-scalar-evolution.c \\\n   $(srcdir)/tree-ssa-operands.h \\\n   $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \\\n-  $(srcdir)/tree-parloops.c \\\n   $(srcdir)/omp-low.c \\\n   $(srcdir)/omp-low.h \\\n   $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \\"}, {"sha": "35164f9f406da3546489f51a05d2771e4011e5f9", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -2008,6 +2008,8 @@ cgraph_node::dump (FILE *f)\n     fprintf (f, \" only_called_at_exit\");\n   if (opt_for_fn (decl, optimize_size))\n     fprintf (f, \" optimize_size\");\n+  if (parallelized_function)\n+    fprintf (f, \" parallelized_function\");\n \n   fprintf (f, \"\\n\");\n "}, {"sha": "650e68921f39b2a37bf4c65a6646e12f4ac244a0", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -1317,6 +1317,8 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n   unsigned nonfreeing_fn : 1;\n   /* True if there was multiple COMDAT bodies merged by lto-symtab.  */\n   unsigned merged : 1;\n+  /* True if function was created to be executed in parallel.  */\n+  unsigned parallelized_function : 1;\n \n private:\n   /* Worker for call_for_symbol_and_aliases.  */"}, {"sha": "088de8606464c35d4f50d0452fecdc5d77a94ee1", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -574,6 +574,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   bp_pack_value (&bp, node->icf_merged, 1);\n   bp_pack_value (&bp, node->nonfreeing_fn, 1);\n   bp_pack_value (&bp, node->thunk.thunk_p, 1);\n+  bp_pack_value (&bp, node->parallelized_function, 1);\n   bp_pack_enum (&bp, ld_plugin_symbol_resolution,\n \t        LDPR_NUM_KNOWN, node->resolution);\n   bp_pack_value (&bp, node->instrumentation_clone, 1);\n@@ -1209,6 +1210,7 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->icf_merged = bp_unpack_value (bp, 1);\n   node->nonfreeing_fn = bp_unpack_value (bp, 1);\n   node->thunk.thunk_p = bp_unpack_value (bp, 1);\n+  node->parallelized_function = bp_unpack_value (bp, 1);\n   node->resolution = bp_unpack_enum (bp, ld_plugin_symbol_resolution,\n \t\t\t\t     LDPR_NUM_KNOWN);\n   node->instrumentation_clone = bp_unpack_value (bp, 1);"}, {"sha": "80bddf059b1987df95f15e445a5286ff09af7180", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -1564,6 +1564,7 @@ finalize_task_copyfn (gomp_task *task_stmt)\n \n   /* Inform the callgraph about the new function.  */\n   cgraph_node::add_new_function (child_fn, false);\n+  cgraph_node::get (child_fn)->parallelized_function = 1;\n }\n \n /* Destroy a omp_context data structures.  Called through the splay tree\n@@ -5569,6 +5570,7 @@ expand_omp_taskreg (struct omp_region *region)\n       /* Inform the callgraph about the new function.  */\n       DECL_STRUCT_FUNCTION (child_fn)->curr_properties = cfun->curr_properties;\n       cgraph_node::add_new_function (child_fn, true);\n+      cgraph_node::get (child_fn)->parallelized_function = 1;\n \n       /* Fix the callgraph edges for child_cfun.  Those for cfun will be\n \t fixed in a following pass.  */"}, {"sha": "62a6444e66bd948e4297ce97e086e0de4cf8a89f", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79b7ec516a40f54db581dc4223ef4ebaa8e6884/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=a79b7ec516a40f54db581dc4223ef4ebaa8e6884", "patch": "@@ -75,6 +75,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-parloops.h\"\n #include \"omp-low.h\"\n #include \"tree-nested.h\"\n+#include \"plugin-api.h\"\n+#include \"ipa-ref.h\"\n+#include \"cgraph.h\"\n \n /* This pass tries to distribute iterations of loops into several threads.\n    The implementation is straightforward -- for each loop we test whether its\n@@ -1422,21 +1425,14 @@ separate_decls_in_region (edge entry, edge exit,\n     }\n }\n \n-/* Bitmap containing uids of functions created by parallelization.  We cannot\n-   allocate it from the default obstack, as it must live across compilation\n-   of several functions; we make it gc allocated instead.  */\n-\n-static GTY(()) bitmap parallelized_functions;\n-\n-/* Returns true if FN was created by create_loop_fn.  */\n+/* Returns true if FN was created to run in parallel.  */\n \n bool\n-parallelized_function_p (tree fn)\n+parallelized_function_p (tree fndecl)\n {\n-  if (!parallelized_functions || !DECL_ARTIFICIAL (fn))\n-    return false;\n-\n-  return bitmap_bit_p (parallelized_functions, DECL_UID (fn));\n+  cgraph_node *node = cgraph_node::get (fndecl);\n+  gcc_assert (node != NULL);\n+  return node->parallelized_function;\n }\n \n /* Creates and returns an empty function that will receive the body of\n@@ -1459,10 +1455,6 @@ create_loop_fn (location_t loc)\n   type = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n \n   decl = build_decl (loc, FUNCTION_DECL, name, type);\n-  if (!parallelized_functions)\n-    parallelized_functions = BITMAP_GGC_ALLOC ();\n-  bitmap_set_bit (parallelized_functions, DECL_UID (decl));\n-\n   TREE_STATIC (decl) = 1;\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n@@ -2314,6 +2306,3 @@ make_pass_parallelize_loops (gcc::context *ctxt)\n {\n   return new pass_parallelize_loops (ctxt);\n }\n-\n-\n-#include \"gt-tree-parloops.h\""}]}