{"sha": "0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0OGU4Nzc5YzZhOWFjODhmNWVmZDFiNGEyZDQwZjQzZWY3NWZhZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-05T19:02:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-05T19:02:17Z"}, "message": "Support string locations for C++ in -Wformat (PR c++/56856)\n\n-Wformat in the C++ FE doesn't work as well as it could:\n(a) it doesn't report precise locations within the string literal, and\n(b) it doesn't underline arguments for those arguments !CAN_HAVE_LOCATION_P,\ndespite having location wrapper nodes.\n\nFor example:\n\n  Wformat-ranges.C:32:10: warning: format '%s' expects argument of type 'char*', but argument 2 has type 'int' [-Wformat=]\n  32 |   printf(\"hello %s\", 42);\n     |          ^~~~~~~~~~\n\n(a) is due to not wiring up the langhook for extracting substring\n    locations.\n\n    This patch uses the one in c-family; it also fixes string literal\n    parsing so that it records string concatenations (needed for\n    extracting substring locations from concatenated strings).\n\n(b) is due to the call to maybe_constant_value here:\n       fargs[j] = maybe_constant_value (argarray[j]);\n    within build_over_call.\n\n    The patch fixes this by building a vec of location_t values when\n    calling check_function_arguments.\n    I attempted to eliminate the maybe_constant_value call here, but\n    it's needed by e.g. check_function_sentinel for detecting NULL,\n    and that code is in \"c-family\", so it can't simply call into\n    maybe_constant_value (which is in \"cp\").\n\nWith this patch, the output for the above example is improved to:\n\n  Wformat-ranges.C:32:18: warning: format '%s' expects argument of type 'char*', but argument 2 has type 'int' [-Wformat=]\n  32 |   printf(\"hello %s\", 42);\n     |                 ~^   ~~\n     |                  |   |\n     |                  |   int\n     |                  char*\n     |                 %d\n\ngcc/cp/ChangeLog:\n\tPR c++/56856\n\t* call.c (build_over_call): Build a vec of locations of the\n\targuments before the call to maybe_constant_value, and pass to\n\tcheck_function_arguments.\n\t* cp-lang.c (LANG_HOOKS_GET_SUBSTRING_LOCATION): Define as\n\tc_get_substring_location.\n\t* parser.c (cp_parser_string_literal): Capture string\n\tconcatenation locations.\n\ngcc/ChangeLog:\n\tPR c++/56856\n\t* input.c (expand_location_to_spelling_point): Add param \"aspect\"\n\tand use rather than hardcoding LOCATION_ASPECT_CARET.\n\t(get_substring_ranges_for_loc): Handle the case of a single token\n\twithin a macro expansion.\n\t* input.h (expand_location_to_spelling_point): Add \"aspect\" param,\n\tdefaulting to LOCATION_ASPECT_CARET.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/56856\n\t* g++.dg/ext/builtin4.C: Set expected location for warning to the\n\tcorrect location within the format string.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add the plugin and\n\tfiles for testing locations within string literal locations from\n\tthe C frontend.\n\t* g++.dg/warn/Wformat-method.C: New test.\n\t* g++.dg/warn/Wformat-pr71863.C: New test.\n\t* g++.dg/warn/Wformat-ranges-c++11.C: New test.\n\t* g++.dg/warn/Wformat-ranges.C: New test, based on\n\tgcc.dg/format/diagnostic-ranges.c.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_multitoken_macro): Generalize expected output to work with\n\tboth C and C++.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c\n\t(test_stringified_token_1): Likewise.\n\t(test_stringified_token_3): Likewise.\n\nFrom-SVN: r264887", "tree": {"sha": "153fa1d9d2a0ab481ba54a9f2f4ed6e311e2a5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/153fa1d9d2a0ab481ba54a9f2f4ed6e311e2a5bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f58c814c0ade165b1691d79a79843ea31d6428b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f58c814c0ade165b1691d79a79843ea31d6428b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f58c814c0ade165b1691d79a79843ea31d6428b"}], "stats": {"total": 604, "additions": 578, "deletions": 26}, "files": [{"sha": "53c9c89ce9a4f9c072afbde331f127798965dafb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -1,3 +1,13 @@\n+2018-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/56856\n+\t* input.c (expand_location_to_spelling_point): Add param \"aspect\"\n+\tand use rather than hardcoding LOCATION_ASPECT_CARET.\n+\t(get_substring_ranges_for_loc): Handle the case of a single token\n+\twithin a macro expansion.\n+\t* input.h (expand_location_to_spelling_point): Add \"aspect\" param,\n+\tdefaulting to LOCATION_ASPECT_CARET.\n+\n 2018-10-05  Paul Koning  <ni1d@arrl.net>\n \n \t* config/pdp11/pdp11.c (TARGET_CXX_GUARD_TYPE): Define."}, {"sha": "97d7e8d83c33677b7792dd2369eca235e1708f11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -1,3 +1,14 @@\n+2018-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/56856\n+\t* call.c (build_over_call): Build a vec of locations of the\n+\targuments before the call to maybe_constant_value, and pass to\n+\tcheck_function_arguments.\n+\t* cp-lang.c (LANG_HOOKS_GET_SUBSTRING_LOCATION): Define as\n+\tc_get_substring_location.\n+\t* parser.c (cp_parser_string_literal): Capture string\n+\tconcatenation locations.\n+\n 2018-10-04  Nathan Sidwell  <nathan@acm.org>\n \n \t* lang-specs.h: Use string contatenation, not line splicing."}, {"sha": "747f837019dc550f58d4cf00c54007c6ce524db9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -8188,6 +8188,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     {\n       tree *fargs = (!nargs ? argarray\n \t\t\t    : (tree *) alloca (nargs * sizeof (tree)));\n+      auto_vec<location_t> arglocs (nargs);\n       for (j = 0; j < nargs; j++)\n \t{\n \t  /* For -Wformat undo the implicit passing by hidden reference\n@@ -8197,10 +8198,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t    fargs[j] = TREE_OPERAND (argarray[j], 0);\n \t  else\n \t    fargs[j] = maybe_constant_value (argarray[j]);\n+\t  arglocs.quick_push (EXPR_LOC_OR_LOC (argarray[j], input_location));\n \t}\n \n       warned_p = check_function_arguments (input_location, fn, TREE_TYPE (fn),\n-\t\t\t\t\t   nargs, fargs, NULL);\n+\t\t\t\t\t   nargs, fargs, &arglocs);\n     }\n \n   if (DECL_INHERITED_CTOR (fn))"}, {"sha": "a0b0102f798f26907f1682626fe6d69939053fe0", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -83,6 +83,9 @@ static tree cxx_enum_underlying_base_type (const_tree);\n #define LANG_HOOKS_RUN_LANG_SELFTESTS selftest::run_cp_tests\n #endif /* #if CHECKING_P */\n \n+#undef LANG_HOOKS_GET_SUBSTRING_LOCATION\n+#define LANG_HOOKS_GET_SUBSTRING_LOCATION c_get_substring_location\n+\n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "032108abfd30bc9bbb0baaefed74285147b16f5e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -4034,6 +4034,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n   tree value;\n   size_t count;\n   struct obstack str_ob;\n+  struct obstack loc_ob;\n   cpp_string str, istr, *strs;\n   cp_token *tok;\n   enum cpp_ttype type, curr_type;\n@@ -4090,6 +4091,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n     {\n       location_t last_tok_loc = tok->location;\n       gcc_obstack_init (&str_ob);\n+      gcc_obstack_init (&loc_ob);\n       count = 0;\n \n       do\n@@ -4135,6 +4137,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n \t    }\n \n \t  obstack_grow (&str_ob, &str, sizeof (cpp_string));\n+\t  obstack_grow (&loc_ob, &tok->location, sizeof (location_t));\n \n \t  last_tok_loc = tok->location;\n \n@@ -4173,6 +4176,12 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n     {\n       value = build_string (istr.len, (const char *)istr.text);\n       free (CONST_CAST (unsigned char *, istr.text));\n+      if (count > 1)\n+\t{\n+\t  location_t *locs = (location_t *)obstack_finish (&loc_ob);\n+\t  gcc_assert (g_string_concat_db);\n+\t  g_string_concat_db->record_string_concatenation (count, locs);\n+\t}\n \n       switch (type)\n \t{\n@@ -4209,7 +4218,10 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n     value = error_mark_node;\n \n   if (count > 1)\n-    obstack_free (&str_ob, 0);\n+    {\n+      obstack_free (&str_ob, 0);\n+      obstack_free (&loc_ob, 0);\n+    }\n \n   return cp_expr (value, loc);\n }"}, {"sha": "b4b7136701880c2d1f6d9e2d3be309e3171b4977", "filename": "gcc/input.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -813,10 +813,10 @@ expand_location (source_location loc)\n    \"<built-in>\".  */\n \n expanded_location\n-expand_location_to_spelling_point (source_location loc)\n+expand_location_to_spelling_point (source_location loc,\n+\t\t\t\t   enum location_aspect aspect)\n {\n-  return expand_location_1 (loc, /*expansion_point_p=*/false,\n-\t\t\t    LOCATION_ASPECT_CARET);\n+  return expand_location_1 (loc, /*expansion_point_p=*/false, aspect);\n }\n \n /* The rich_location class within libcpp requires a way to expand\n@@ -1397,24 +1397,32 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n       source_range src_range = get_range_from_loc (line_table, strlocs[i]);\n \n       if (src_range.m_start >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n-\t/* If the string is within a macro expansion, we can't get at the\n-\t   end location.  */\n-\treturn \"macro expansion\";\n-\n-      if (src_range.m_start >= LINE_MAP_MAX_LOCATION_WITH_COLS)\n-\t/* If so, we can't reliably determine where the token started within\n-\t   its line.  */\n-\treturn \"range starts after LINE_MAP_MAX_LOCATION_WITH_COLS\";\n-\n-      if (src_range.m_finish >= LINE_MAP_MAX_LOCATION_WITH_COLS)\n-\t/* If so, we can't reliably determine where the token finished within\n-\t   its line.  */\n-\treturn \"range ends after LINE_MAP_MAX_LOCATION_WITH_COLS\";\n+\t{\n+\t  /* If the string token was within a macro expansion, then we can\n+\t     cope with it for the simple case where we have a single token.\n+\t     Otherwise, bail out.  */\n+\t  if (src_range.m_start != src_range.m_finish)\n+\t    return \"macro expansion\";\n+\t}\n+      else\n+\t{\n+\t  if (src_range.m_start >= LINE_MAP_MAX_LOCATION_WITH_COLS)\n+\t    /* If so, we can't reliably determine where the token started within\n+\t       its line.  */\n+\t    return \"range starts after LINE_MAP_MAX_LOCATION_WITH_COLS\";\n+\n+\t  if (src_range.m_finish >= LINE_MAP_MAX_LOCATION_WITH_COLS)\n+\t    /* If so, we can't reliably determine where the token finished\n+\t       within its line.  */\n+\t    return \"range ends after LINE_MAP_MAX_LOCATION_WITH_COLS\";\n+\t}\n \n       expanded_location start\n-\t= expand_location_to_spelling_point (src_range.m_start);\n+\t= expand_location_to_spelling_point (src_range.m_start,\n+\t\t\t\t\t     LOCATION_ASPECT_START);\n       expanded_location finish\n-\t= expand_location_to_spelling_point (src_range.m_finish);\n+\t= expand_location_to_spelling_point (src_range.m_finish,\n+\t\t\t\t\t     LOCATION_ASPECT_FINISH);\n       if (start.file != finish.file)\n \treturn \"range endpoints are in different files\";\n       if (start.line != finish.line)"}, {"sha": "e5d5a0932b8c8bb095f712699dc54e52e9952544", "filename": "gcc/input.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -85,7 +85,10 @@ class char_span\n extern char_span location_get_source_line (const char *file_path, int line);\n \n extern bool location_missing_trailing_newline (const char *file_path);\n-extern expanded_location expand_location_to_spelling_point (source_location);\n+extern expanded_location\n+expand_location_to_spelling_point (source_location,\n+\t\t\t\t   enum location_aspect aspect\n+\t\t\t\t     = LOCATION_ASPECT_CARET);\n extern source_location expansion_point_location_if_in_system_header (source_location);\n extern source_location expansion_point_location (source_location);\n "}, {"sha": "37a035a9ed8e0d73a80475aca0aeca351c757aad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -1,3 +1,23 @@\n+2018-10-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/56856\n+\t* g++.dg/ext/builtin4.C: Set expected location for warning to the\n+\tcorrect location within the format string.\n+\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add the plugin and\n+\tfiles for testing locations within string literal locations from\n+\tthe C frontend.\n+\t* g++.dg/warn/Wformat-method.C: New test.\n+\t* g++.dg/warn/Wformat-pr71863.C: New test.\n+\t* g++.dg/warn/Wformat-ranges-c++11.C: New test.\n+\t* g++.dg/warn/Wformat-ranges.C: New test, based on\n+\tgcc.dg/format/diagnostic-ranges.c.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_multitoken_macro): Generalize expected output to work with\n+\tboth C and C++.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c\n+\t(test_stringified_token_1): Likewise.\n+\t(test_stringified_token_3): Likewise.\n+\n 2018-10-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* lib/multiline.exp (proc dg-end-multiline-output): Check argument"}, {"sha": "6691434c7c98f4d78c620c74912f85011b472ee8", "filename": "gcc/testsuite/g++.dg/ext/builtin4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin4.C?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -6,5 +6,5 @@\n extern \"C\" int printf(const char*,...);\n \n void foo() {\n-  printf(\"%d\"); \t\t// { dg-warning \"expects a matching\" }\n+  printf(\"%d\"); \t\t// { dg-warning \"12: expects a matching\" }\n }"}, {"sha": "e7c3b692625442ca4af9c07a0e4945f3ac1f342c", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -67,6 +67,11 @@ set plugin_test_list [list \\\n \t  diagnostic-test-expressions-1.C } \\\n     { ../../gcc.dg/plugin/diagnostic_plugin_test_inlining.c \\\n \t  diagnostic-test-inlining-1.C } \\\n+    { ../../gcc.dg/plugin/diagnostic_plugin_test_string_literals.c \\\n+\t  ../../gcc.dg/plugin/diagnostic-test-string-literals-1.c \\\n+\t  ../../gcc.dg/plugin/diagnostic-test-string-literals-2.c \\\n+\t  ../../gcc.dg/plugin/diagnostic-test-string-literals-3.c \\\n+\t  ../../gcc.dg/plugin/diagnostic-test-string-literals-4.c } \\\n     { show_template_tree_color_plugin.c \\\n     \t  show-template-tree-color.C \\\n     \t  show-template-tree-color-labels.C \\"}, {"sha": "8494bf10df6c29f55b309edbcfb3abbafff7d5e7", "filename": "gcc/testsuite/g++.dg/warn/Wformat-method.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-method.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-method.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-method.C?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-Wformat -fdiagnostics-show-caret\" }\n+\n+class logger\n+{\n+public:\n+  void log (const char *fmt, ...) __attribute__((format (printf, 2, 3)));\n+};\n+\n+void test ()\n+{\n+  logger out;\n+  out.log (\"before %s after\", 42); // { dg-warning \"argument 3 has type 'int'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   out.log (\"before %s after\", 42);\n+                    ~^         ~~\n+                     |         |\n+                     char*     int\n+                    %d\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+template <typename T>\n+class logger_2\n+{\n+public:\n+  void log (const char *fmt, ...) __attribute__((format (printf, 2, 3)));\n+};\n+\n+void test_2 ()\n+{\n+  logger_2<int> out;\n+  out.log (\"before %s after\", 42); // { dg-warning \"argument 3 has type 'int'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   out.log (\"before %s after\", 42);\n+                    ~^         ~~\n+                     |         |\n+                     char*     int\n+                    %d\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "537274c7fe79833c9c087afda485e1c3f19cf230", "filename": "gcc/testsuite/g++.dg/warn/Wformat-pr71863.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-pr71863.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-pr71863.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-pr71863.C?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-Wformat -fdiagnostics-show-caret\" }\n+\n+void test_1 (void)\n+{\n+  __builtin_printf (\"%s%s\", 42, 43); // { dg-warning \"argument 2 has type 'int'\" }\n+  // { dg-warning \"argument 3 has type 'int'\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_printf (\"%s%s\", 42, 43);\n+                      ~^     ~~\n+                       |     |\n+                       char* int\n+                      %d\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_printf (\"%s%s\", 42, 43);\n+                        ~^       ~~\n+                         |       |\n+                         char*   int\n+                        %d\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_2 (void)\n+{\n+  __builtin_printf (\"before %s after\", 6 * 7); // { dg-warning \"argument 2 has type 'int'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_printf (\"before %s after\", 6 * 7);\n+                             ~^         ~~~~~\n+                              |           |\n+                              char*       int\n+                             %d\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "a4d3fff2967806ab2bf9e89af80a0e302031595e", "filename": "gcc/testsuite/g++.dg/warn/Wformat-ranges-c++11.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges-c%2B%2B11.C?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++11 } }\n+/* { dg-options \"-Wformat -fdiagnostics-show-caret\" } */\n+\n+/* C++11-specific format tests. */\n+\n+#define printf __builtin_printf\n+\n+void test_u8 (const char *msg)\n+{\n+  printf(u8\"hello %i\", msg);/* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(u8\"hello %i\", msg);\n+                   ~^   ~~~\n+                    |   |\n+                    int const char*\n+                   %s\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "96dfa97055cf0e8edced21557418ffba9c85c9c4", "filename": "gcc/testsuite/g++.dg/warn/Wformat-ranges.C", "status": "added", "additions": 374, "deletions": 0, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWformat-ranges.C?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -0,0 +1,374 @@\n+/* { dg-options \"-Wformat -fdiagnostics-show-caret\" } */\n+\n+/* This is a copy of gcc.dg/format/diagnostic-ranges.c\n+   with the following changes:\n+   - removal of \"format.h\"\n+   - \"char \\\\*\" -> \"char\\\\*\" (space removal)\n+   - move of test_u8 to Wformat-ranges-c++11.C.  */\n+\n+#define printf __builtin_printf\n+typedef __SIZE_TYPE__ size_t;\n+typedef __SIZE_TYPE__ ssize_t;\n+\n+extern ssize_t strfmon (char *__restrict __s, size_t __maxsize,\n+\t\t\tconst char *__restrict, ...)\n+  __attribute__ ((__format__ (__strfmon__, 3, 4)));\n+\n+/* See PR 52952. */\n+\n+void test_mismatching_types (const char *msg)\n+{\n+  printf(\"hello %i\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %i\", msg);\n+                 ~^   ~~~\n+                  |   |\n+                  int const char*\n+                 %s\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+  printf(\"hello %s\", 42);  /* { dg-warning \"format '%s' expects argument of type 'char\\\\*', but argument 2 has type 'int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %s\", 42);\n+                 ~^   ~~\n+                  |   |\n+                  |   int\n+                  char*\n+                 %d\n+   { dg-end-multiline-output \"\" } */\n+\n+  printf(\"hello %i\", (long)0);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'long int' \" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %i\", (long)0);\n+                 ~^   ~~~~~~~\n+                  |   |\n+                  int long int\n+                 %li\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_multiple_arguments (void)\n+{\n+  printf (\"arg0: %i  arg1: %s arg 2: %i\", /* { dg-warning \"29: format '%s'\" } */\n+          100, 101, 102);\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\"arg0: %i  arg1: %s arg 2: %i\",\n+                            ~^\n+                             |\n+                             char*\n+                            %d\n+           100, 101, 102);\n+                ~~~           \n+                |\n+                int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_multiple_arguments_2 (int i, int j)\n+{\n+  printf (\"arg0: %i  arg1: %s arg 2: %i\", /* { dg-warning \"29: format '%s'\" } */\n+          100, i + j, 102);\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\"arg0: %i  arg1: %s arg 2: %i\",\n+                            ~^\n+                             |\n+                             char*\n+                            %d\n+           100, i + j, 102);\n+                ~~~~~         \n+                  |\n+                  int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void multiline_format_string (void) {\n+  printf (\"before the fmt specifier\" \n+          \"%\"\n+          \"d\" /* { dg-warning \"12: format '%d' expects a matching 'int' argument\" } */\n+          \"after the fmt specifier\");\n+/* { dg-begin-multiline-output \"\" }\n+           \"%\"\n+            ~~\n+           \"d\"\n+           ~^\n+            |\n+            int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_hex (const char *msg)\n+{\n+  /* \"%\" is \\x25\n+     \"i\" is \\x69 */\n+  printf(\"hello \\x25\\x69\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello \\x25\\x69\", msg);\n+                 ~~~~^~~~   ~~~\n+                     |      |\n+                     int    const char*\n+                 \\x25s\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_oct (const char *msg)\n+{\n+  /* \"%\" is octal 045\n+     \"i\" is octal 151.  */\n+  printf(\"hello \\045\\151\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello \\045\\151\", msg);\n+                 ~~~~^~~~   ~~~\n+                     |      |\n+                     int    const char*\n+                 \\045s\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_multiple (const char *msg)\n+{\n+  /* \"%\" is \\x25 in hex\n+     \"i\" is \\151 in octal.  */\n+  printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",  /* { dg-warning \"format '%i'\" } */\n+         msg);\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n+                     ~~~~~~~~^~~~\n+                             |\n+                             int\n+                     \\x25\"  \"s\n+          msg);\n+          ~~~                 \n+          |\n+          const char*\n+  { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_param (long long_i, long long_j)\n+{\n+  printf (\"foo %s bar\", long_i + long_j); /* { dg-warning \"17: format '%s' expects argument of type 'char\\\\*', but argument 2 has type 'long int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\"foo %s bar\", long_i + long_j);\n+                ~^       ~~~~~~~~~~~~~~~\n+                 |              |\n+                 char*          long int\n+                %ld\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_field_width_specifier (long l, int i1, int i2)\n+{\n+  printf (\" %*.*d \", l, i1, i2); /* { dg-warning \"14: field width specifier '\\\\*' expects argument of type 'int', but argument 2 has type 'long int'\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\" %*.*d \", l, i1, i2);\n+             ~^~~~    ~\n+              |       |\n+              int     long int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+/* PR c/72857.  */\n+\n+void test_field_width_specifier_2 (char *d, long foo, long bar)\n+{\n+  __builtin_sprintf (d, \" %*ld \", foo, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %*ld \", foo, foo);\n+                           ~^~~    ~~~\n+                            |      |\n+                            int    long int\n+   { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (d, \" %*ld \", foo + bar, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %*ld \", foo + bar, foo);\n+                           ~^~~    ~~~~~~~~~\n+                            |          |\n+                            int        long int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_field_precision_specifier (char *d, long foo, long bar)\n+{\n+  __builtin_sprintf (d, \" %.*ld \", foo, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %.*ld \", foo, foo);\n+                           ~~^~~    ~~~\n+                             |      |\n+                             int    long int\n+   { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (d, \" %.*ld \", foo + bar, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %.*ld \", foo + bar, foo);\n+                           ~~^~~    ~~~~~~~~~\n+                             |          |\n+                             int        long int\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_spurious_percent (void)\n+{\n+  printf(\"hello world %\"); /* { dg-warning \"23: spurious trailing\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello world %\");\n+                       ^\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_empty_precision (char *s, size_t m, double d)\n+{\n+  strfmon (s, m, \"%#.5n\", d); /* { dg-warning \"20: empty left precision in gnu_strfmon format\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   strfmon (s, m, \"%#.5n\", d);\n+                    ^\n+   { dg-end-multiline-output \"\" } */\n+\n+  strfmon (s, m, \"%#5.n\", d); /* { dg-warning \"22: empty precision in gnu_strfmon format\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   strfmon (s, m, \"%#5.n\", d);\n+                      ^\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_repeated (int i)\n+{\n+  printf (\"%++d\", i); /* { dg-warning \"14: repeated '\\\\+' flag in format\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\"%++d\", i);\n+              ^\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_conversion_lacks_type (void)\n+{\n+  printf (\" %h\"); /* { dg-warning \"14:conversion lacks type at end of format\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\" %h\");\n+              ^\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_embedded_nul (void)\n+{\n+  printf (\" \\0 \"); /* { dg-warning \"13:embedded\" \"warning for embedded NUL\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf (\" \\0 \");\n+             ^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_macro (const char *msg)\n+{\n+#define INT_FMT \"%i\" /* { dg-message \"19: format string is defined here\" } */\n+  printf(\"hello \" INT_FMT \" world\", msg);  /* { dg-warning \"10: format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello \" INT_FMT \" world\", msg);\n+          ^~~~~~~~~~~~~~~~~~~~~~~~~  ~~~\n+                                     |\n+                                     const char*\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define INT_FMT \"%i\"\n+                  ~^\n+                   |\n+                   int\n+                  %s\n+   { dg-end-multiline-output \"\" } */\n+#undef INT_FMT\n+}\n+\n+void test_macro_2 (const char *msg)\n+{\n+#define PRIu32 \"u\" /* { dg-message \"17: format string is defined here\" } */\n+  printf(\"hello %\" PRIu32 \" world\", msg);  /* { dg-warning \"10: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'const char\\\\*' \" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(\"hello %\" PRIu32 \" world\", msg);\n+          ^~~~~~~~~~~~~~~~~~~~~~~~~  ~~~\n+                                     |\n+                                     const char*\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define PRIu32 \"u\"\n+                 ^\n+                 |\n+                 unsigned int\n+   { dg-end-multiline-output \"\" } */\n+#undef PRIu32\n+}\n+\n+void test_macro_3 (const char *msg)\n+{\n+#define FMT_STRING \"hello %i world\" // { dg-line test_macro_3_macro_line }\n+/* { dg-warning \"20: format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*'\" \"\" { target *-*-* } .-1 } */\n+  printf(FMT_STRING, msg);  /* { dg-message \"10: in expansion of macro 'FMT_STRING\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define FMT_STRING \"hello %i world\"\n+                    ^~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(FMT_STRING, msg);\n+          ^~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-message \"28: format string is defined here\" \"\" { target *-*-* } test_macro_3_macro_line } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define FMT_STRING \"hello %i world\"\n+                           ~^\n+                            |\n+                            int\n+                           %s\n+   { dg-end-multiline-output \"\" } */\n+#undef FMT_STRING\n+}\n+\n+void test_macro_4 (const char *msg)\n+{\n+#define FMT_STRING \"hello %i world\" /* { dg-warning \"20: format '%i' expects argument of type 'int', but argument 2 has type 'const char\\\\*' \" } */\n+  printf(FMT_STRING \"\\n\", msg);  /* { dg-message \"10: in expansion of macro 'FMT_STRING\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define FMT_STRING \"hello %i world\"\n+                    ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   printf(FMT_STRING \"\\n\", msg);\n+          ^~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define FMT_STRING \"hello %i world\"\n+                           ~^\n+                            |\n+                            int\n+                           %s\n+   { dg-end-multiline-output \"\" } */\n+#undef FMT_STRING\n+}\n+\n+void test_non_contiguous_strings (void)\n+{\n+  __builtin_printf(\" %\" \"d \", 0.5); /* { dg-warning \"26: format .%d. expects argument of type .int., but argument 2 has type .double.\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_printf(\" %\" \"d \", 0.5);\n+                      ~~~~^    ~~~\n+                          |    |\n+                          int  double\n+                      %\" \"f\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_const_arrays (void)\n+{\n+  /* TODO: ideally we'd highlight both the format string *and* the use of\n+     it here.  For now, just verify that we gracefully handle this case.  */\n+  const char a[] = \" %d \";\n+  __builtin_printf(a, 0.5); /* { dg-warning \"20: format .%d. expects argument of type .int., but argument 2 has type .double.\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_printf(a, 0.5);\n+                    ^  ~~~\n+                       |\n+                       double\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "2c33ce2c0d569b7d86cfd4ef9490250da4eef05c", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -314,7 +314,8 @@ void test_macro_2 (const char *msg)\n \n void test_macro_3 (const char *msg)\n {\n-#define FMT_STRING \"hello %i world\" /* { dg-warning \"20: format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n+#define FMT_STRING \"hello %i world\" /* { dg-line test_macro_3_macro_line } */\n+  /* { dg-warning \"20: format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*'\" \"\" { target *-*-*} .-1 } */\n   printf(FMT_STRING, msg);  /* { dg-message \"10: in expansion of macro 'FMT_STRING\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define FMT_STRING \"hello %i world\"\n@@ -324,6 +325,14 @@ void test_macro_3 (const char *msg)\n    printf(FMT_STRING, msg);\n           ^~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n+/* { dg-message \"28: format string is defined here\" \"\" { target *-*-* } test_macro_3_macro_line } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define FMT_STRING \"hello %i world\"\n+                           ~^\n+                            |\n+                            int\n+                           %s\n+   { dg-end-multiline-output \"\" } */\n #undef FMT_STRING\n }\n "}, {"sha": "73770aa1bee1b5fbff97eab500008f2f8117c910", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -251,7 +251,11 @@ test_multitoken_macro (void)\n /* { dg-begin-multiline-output \"\" }\n  #define RANGE (\"0123456789\")\n                ^~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n+   { dg-end-multiline-output \"\" { target c } } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define RANGE (\"0123456789\")\n+               ~^~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" { target c++ } } */\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (RANGE, 4, 3, 6);\n                                 ^~~~~"}, {"sha": "260c47d34018eed0fe248f6ab21f748274bca225", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c?ref=0d48e8779c6a9ac88f5efd1b4a2d40f43ef75faf", "patch": "@@ -12,7 +12,7 @@ test_stringified_token_1 (int x)\n {\n #define STRINGIFY(EXPR) #EXPR\n \n-  __emit_string_literal_range (STRINGIFY(x > 0), /* { dg-error \"unable to read substring location: macro expansion\" } */\n+  __emit_string_literal_range (STRINGIFY(x > 0), /* { dg-error \"macro expansion|cpp_interpret_string_1 failed\" } */\n                                0, 0, 4);\n \n #undef STRINGIFY\n@@ -43,7 +43,7 @@ test_stringified_token_3 (int x)\n #define XSTR(s) STR(s)\n #define STR(s) #s\n #define FOO 123456789\n-  __emit_string_literal_range (XSTR (FOO), /* { dg-error \"unable to read substring location: macro expansion\" } */\n+  __emit_string_literal_range (XSTR (FOO), /* { dg-error \"macro expansion|cpp_interpret_string_1 failed\" } */\n                                2, 2, 3);\n \n #undef XSTR"}]}