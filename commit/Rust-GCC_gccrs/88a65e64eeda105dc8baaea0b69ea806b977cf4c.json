{"sha": "88a65e64eeda105dc8baaea0b69ea806b977cf4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhNjVlNjRlZWRhMTA1ZGM4YmFhZWEwYjY5ZWE4MDZiOTc3Y2Y0Yw==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2006-09-23T16:45:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-09-23T16:45:25Z"}, "message": "flags.h (HONOR_NANS): Fix typo in comment.\n\ngcc/\n2001-01-01  Revital1 Eres  <ERES@il.ibm.com>\n\n\t* flags.h (HONOR_NANS): Fix typo in comment.\n\nFrom-SVN: r117172", "tree": {"sha": "22d0a85bc54e130c1737a130daa7039dae9af554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22d0a85bc54e130c1737a130daa7039dae9af554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a65e64eeda105dc8baaea0b69ea806b977cf4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a65e64eeda105dc8baaea0b69ea806b977cf4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a65e64eeda105dc8baaea0b69ea806b977cf4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a65e64eeda105dc8baaea0b69ea806b977cf4c/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4d7a132ab59631092fc0114f1518338e7b85ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d7a132ab59631092fc0114f1518338e7b85ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d7a132ab59631092fc0114f1518338e7b85ef4"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "e816362cea0272bc2d4adf0ca79e0fb6d8d4132a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a65e64eeda105dc8baaea0b69ea806b977cf4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a65e64eeda105dc8baaea0b69ea806b977cf4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a65e64eeda105dc8baaea0b69ea806b977cf4c", "patch": "@@ -1,3 +1,7 @@\n+2006-09-23  Revital1 Eres  <ERES@il.ibm.com>\n+\n+\t* flags.h (HONOR_NANS): Fix typo in comment.\n+\n 2006-09-23  Uros Bizjak <uros@kss-loka.si>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Add prototype."}, {"sha": "f5fdd6b2bf61ab164feebfb98028a23c4dc29c14", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a65e64eeda105dc8baaea0b69ea806b977cf4c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a65e64eeda105dc8baaea0b69ea806b977cf4c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=88a65e64eeda105dc8baaea0b69ea806b977cf4c", "patch": "@@ -264,7 +264,7 @@ extern const char *flag_random_seed;\n \n /* True if the given mode has a NaN representation and the treatment of\n    NaN operands is important.  Certain optimizations, such as folding\n-   x * 0 into x, are not correct for NaN operands, and are normally\n+   x * 0 into 0, are not correct for NaN operands, and are normally\n    disabled for modes with NaNs.  The user can ask for them to be\n    done anyway using the -funsafe-math-optimizations switch.  */\n #define HONOR_NANS(MODE) \\"}]}