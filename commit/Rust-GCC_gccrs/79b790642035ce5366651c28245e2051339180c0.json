{"sha": "79b790642035ce5366651c28245e2051339180c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliNzkwNjQyMDM1Y2U1MzY2NjUxYzI4MjQ1ZTIwNTEzMzkxODBjMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-20T19:54:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-20T19:54:04Z"}, "message": "att.h (ASM_SHORT, ASM_LONG): Add trailing \\t.\n\n        * config/i386/att.h (ASM_SHORT, ASM_LONG): Add trailing \\t.\n        (ASM_DOUBLE): Remove.\n        * config/i386/bsd.h, config/i386/sco5.h: Likewise.\n        * config/i386/sun386.h: Likewise.\n\n        * config/i386/i386.h (UNALIGNED_SHORT_ASM_OP): New.\n        (UNALIGNED_INT_ASM_OP, INT_ASM_OP): New.\n\n        * config/i386/cygwin.h (INT_ASM_OP): Remove.\n        * config/i386/freebsd-aout.h, config/i386/i386-aout.h: Likewise.\n        * config/i386/i386-coff.h, config/i386/i386-interix.h: Likewise.\n        * config/i386/netbsd.h, config/i386/openbsd.h: Likewise.\n\n        * config/i386/cygwin.h: Adjust uses of ASM_LONG for trailing \\t.\n        * config/i386/djgpp.h, config/i386/i386.h: Likewise.\n        * config/i386/i386elf.h, config/i386/ptx4-i.h: Likewise.\n        * config/i386/sco5.h, config/i386/svr3gas.h: Likewise.\n        * config/i386/sysv4.h, config/i386/vsta.h: Likewise.\n        * config/i386/win32.h: Likewise.\n\nFrom-SVN: r42355", "tree": {"sha": "7a361719df3249fd188a83c4ba35e80b285c0b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a361719df3249fd188a83c4ba35e80b285c0b0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79b790642035ce5366651c28245e2051339180c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b790642035ce5366651c28245e2051339180c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b790642035ce5366651c28245e2051339180c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b790642035ce5366651c28245e2051339180c0/comments", "author": null, "committer": null, "parents": [{"sha": "334564454e0f95111edb9164bd2c86813fb26f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334564454e0f95111edb9164bd2c86813fb26f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334564454e0f95111edb9164bd2c86813fb26f1f"}], "stats": {"total": 203, "additions": 100, "deletions": 103}, "files": [{"sha": "f63d9e3af0b21a559f88753dcdef46905aae1e05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -1,3 +1,25 @@\n+2001-05-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/att.h (ASM_SHORT, ASM_LONG): Add trailing \\t.\n+\t(ASM_DOUBLE): Remove.\n+\t* config/i386/bsd.h, config/i386/sco5.h: Likewise.\n+\t* config/i386/sun386.h: Likewise.\n+\n+\t* config/i386/i386.h (UNALIGNED_SHORT_ASM_OP): New.\n+\t(UNALIGNED_INT_ASM_OP, INT_ASM_OP): New.\n+\t\n+\t* config/i386/cygwin.h (INT_ASM_OP): Remove.\n+\t* config/i386/freebsd-aout.h, config/i386/i386-aout.h: Likewise.\n+\t* config/i386/i386-coff.h, config/i386/i386-interix.h: Likewise.\n+\t* config/i386/netbsd.h, config/i386/openbsd.h: Likewise.\n+\t\n+\t* config/i386/cygwin.h: Adjust uses of ASM_LONG for trailing \\t.\n+\t* config/i386/djgpp.h, config/i386/i386.h: Likewise.\n+\t* config/i386/i386elf.h, config/i386/ptx4-i.h: Likewise.\n+\t* config/i386/sco5.h, config/i386/svr3gas.h: Likewise.\n+\t* config/i386/sysv4.h, config/i386/vsta.h: Likewise.\n+\t* config/i386/win32.h: Likewise.\n+\n 2001-05-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* invoke.texi: Add more options to summary list.\n@@ -181,9 +203,9 @@ Fri May 18 07:26:34 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-05-18  Per Bothner  <per@bothner.com>\n \n-        Changes needed for java/jvspec.c\n-        * gcc.h (n_infiles, outfiles):  Add declarations.\n-        * gcc.c (n_infiles, outfiles):  Mske no longer static.\n+\tChanges needed for java/jvspec.c\n+\t* gcc.h (n_infiles, outfiles):  Add declarations.\n+\t* gcc.c (n_infiles, outfiles):  Mske no longer static.\n \n Fri May 18 10:14:42 2001  Jeffrey A Law  (law@cygnus.com)\n \n@@ -598,7 +620,7 @@ Wed May 16 18:53:23 CEST 2001  Jan Hubicka  <jh@suse.cz>\n 2001-05-16  Jakub Jelinek  <jakub@redhat.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n \n-        * gcc.c (give_switch): Don't write before start of string.\n+\t* gcc.c (give_switch): Don't write before start of string.\n \tAlways append suffix.\n \n 2001-05-16  Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "b41218e387f9a434a04f27ce43fd1a33d841a75d", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -30,10 +30,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Assembler pseudos to introduce constants of various size.  */\n \n-/* #define ASM_BYTE_OP \"\\t.byte\"  Now in svr3.h or svr4.h.  */\n-#define ASM_SHORT \"\\t.value\"\n-#define ASM_LONG \"\\t.long\"\n-#define ASM_DOUBLE \"\\t.double\"\n+#define ASM_SHORT \"\\t.value\\t\"\n+#define ASM_LONG \"\\t.long\\t\"\n \n /* How to output an ASCII string constant.  */\n "}, {"sha": "82b141130f97d04c51870fd05888a18669386423", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -41,9 +41,8 @@ Boston, MA 02111-1307, USA.  */\n /* Assembler pseudos to introduce constants of various size.  */\n \n #define ASM_BYTE_OP \"\\t.byte\\t\"\n-#define ASM_SHORT \"\\t.word\"\n-#define ASM_LONG \"\\t.long\"\n-#define ASM_DOUBLE \"\\t.double\"\n+#define ASM_SHORT \"\\t.word\\t\"\n+#define ASM_LONG \"\\t.long\\t\"\n \n /* Output at beginning of assembler file.\n    ??? I am skeptical of this -- RMS.  */"}, {"sha": "a3d587fe600a59bb6640f3793020b8bb616e1d87", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -291,15 +291,15 @@ switch_to_section (section, decl) \t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     ctor_section ();\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n   do {\t\t\t\t\t\t\\\n     dtor_section ();                   \t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n@@ -573,10 +573,6 @@ extern int i386_pe_dllimport_name_p PARAMS ((const char *));\n #define SET_ASM_OP \"\\t.set\\t\"\n #endif\n \n-#ifndef INT_ASM_OP\n-#define INT_ASM_OP \"\\t.long\\t\"\n-#endif\n-\n #undef MD_STARTFILE_PREFIX\n #define MD_STARTFILE_PREFIX     \"/usr/lib/\"\n "}, {"sha": "14a43570e75714b7f81222fd996e5fb68ba863d3", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -184,7 +184,7 @@ dtor_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     ctor_section ();\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n@@ -201,7 +201,7 @@ dtor_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     dtor_section ();                   \t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);              \t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)"}, {"sha": "7937c54f54f8b2ef9ff63cc89c802e266d4aacdf", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -245,8 +245,3 @@ do {                                                                    \\\n \n /* Define this so we can compile MS code for use with WINE.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n-/* This is the pseudo-op used to generate a 32-bit word of data with a\n-   specific value in some section.  */\n-\n-#define INT_ASM_OP \"\\t.long\\t\""}, {"sha": "7385bec6d7c86d6a36d5981c495cbd16a69a174f", "filename": "gcc/config/i386/i386-aout.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-aout.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -31,6 +31,4 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"\"\n \n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n /* end of i386-aout.h */"}, {"sha": "69839e17276bb7b46d7ea3bd895b5152816bca7a", "filename": "gcc/config/i386/i386-coff.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-coff.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -77,8 +77,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP \"\\t.long\\t\"\n-\n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\"}, {"sha": "0460b64b07bc5b6147dd94bb8e916f896c8ccc84", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -361,8 +361,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n #endif\n \n-#define INT_ASM_OP\t\t\"\\t.long\\t\"\n-\n /* The MS compilers take alignment as a number of bytes, so we do as well */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\"}, {"sha": "0fb1e4c189e8be961bd513703bac14739214aad5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -2853,7 +2853,7 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n do { long l[2];\t\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-     fprintf (FILE, \"%s\\t0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n+     fprintf (FILE, \"%s0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n    } while (0)\n \n /* This is how to output a `long double' extended real constant. */\n@@ -2863,17 +2863,17 @@ do { long l[2];\t\t\t\t\t\t\t\t\\\n do { long l[4];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\\\n      if (TARGET_128BIT_LONG_DOUBLE)\t\t\t\\\n-       fprintf (FILE, \"%s\\t0x%lx,0x%lx,0x%lx,0x0\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n+       fprintf (FILE, \"%s0x%lx,0x%lx,0x%lx,0x0\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n      else \\\n-       fprintf (FILE, \"%s\\t0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n+       fprintf (FILE, \"%s0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n    } while (0)\n \n /* This is how to output an assembler line defining a `float' constant.  */\n \n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n do { long l;\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, l);\t\\\n+     fprintf ((FILE), \"%s0x%lx\\n\", ASM_LONG, l);\t\\\n    } while (0)\n \n /* Store in OUTPUT a string (made with alloca) containing\n@@ -2887,23 +2887,30 @@ do { long l;\t\t\t\t\t\t\\\n /* This is how to output an assembler line defining an `int' constant.  */\n \n #define ASM_OUTPUT_INT(FILE,VALUE)  \\\n-( fprintf (FILE, \"%s\\t\", ASM_LONG),\t\t\\\n+( fputs (ASM_LONG, FILE),\t\t\t\\\n   output_addr_const (FILE,(VALUE)),\t\t\\\n   putc('\\n',FILE))\n \n /* Likewise for `char' and `short' constants.  */\n-/* is this supposed to do align too?? */\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n-( fprintf (FILE, \"%s\\t\", ASM_SHORT),\t\t\\\n+( fputs (ASM_SHORT, FILE),\t\t\t\\\n   output_addr_const (FILE,(VALUE)),\t\t\\\n   putc('\\n',FILE))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n-( fprintf (FILE, \"%s\", ASM_BYTE_OP),\t\t\\\n+( fputs (ASM_BYTE_OP, FILE),\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   putc ('\\n', FILE))\n \n+/* Given that x86 natively supports unaligned data, it's reasonable to\n+   assume that all x86 assemblers don't auto-align data.  Thus the \n+   unaligned output macros required by dwarf2 frame unwind information\n+   degenerate to the macros used above.  */\n+#define UNALIGNED_SHORT_ASM_OP\t\tASM_SHORT\n+#define UNALIGNED_INT_ASM_OP\t\tASM_LONG\n+#define INT_ASM_OP\t\t\tASM_LONG\n+\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n@@ -2925,15 +2932,15 @@ do { long l;\t\t\t\t\t\t\\\n      */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  fprintf (FILE, \"%s %s%d\\n\", ASM_LONG, LPREFIX, VALUE)\n+  fprintf (FILE, \"%s%s%d\\n\", ASM_LONG, LPREFIX, VALUE)\n \n /* This is how to output an element of a case-vector that is relative.\n    We don't use these on the 386 yet, because the ATT assembler can't do\n    forward reference the differences.  \n  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t%s\\t%s%d-%s%d\\n\",ASM_LONG, LPREFIX, VALUE, LPREFIX, REL)\n+  fprintf (FILE, \"%s%s%d-%s%d\\n\",ASM_LONG, LPREFIX, VALUE, LPREFIX, REL)\n \n /* A C statement that outputs an address constant appropriate to \n    for DWARF debugging.  */"}, {"sha": "1d7d4b7e6500fa0fb321ae276c13a93b10e30509", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -56,9 +56,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value);\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n    } while (0)\n \n /* This is how to output assembly code to define a `double' constant.\n@@ -72,13 +72,13 @@ do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n@@ -89,15 +89,15 @@ do { long value[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n "}, {"sha": "8ff61bce0d0841104a48f8df50eb28f85c720e38", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -82,8 +82,3 @@\n /* Until they use ELF or something that handles dwarf2 unwinds\n    and initialization stuff better.  */\n #define DWARF2_UNWIND_INFO 0\n-\n-/* This is the pseudo-op used to generate a 32-bit word of data with a\n-   specific value in some section.  */\n-\n-#define INT_ASM_OP \"\\t.long\\t\""}, {"sha": "18b20e9915d3c34976a1c24e27d8eb2915b5660d", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -130,8 +130,3 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */\n-\n-/* This is the pseudo-op used to generate a 32-bit word of data with a\n-   specific value in some section.  */\n-\n-#define INT_ASM_OP \"\\t.long\\t\""}, {"sha": "735408ebf8f56e3e79eb59f2902e9be3d47a6ca2", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -53,9 +53,9 @@ Boston, MA 02111-1307, USA.  */\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value);\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n    } while (0)\n \n /* This is how to output assembly code to define a `double' constant.\n@@ -69,13 +69,13 @@ do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n@@ -86,15 +86,15 @@ do { long value[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n "}, {"sha": "33a512d81376c3902c76f38014d62770f292e3ec", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -54,13 +54,10 @@ Boston, MA 02111-1307, USA.  */\n #define INT_ASM_OP\t\t\t\"\\t.long\\t\"\n \n #undef ASM_SHORT\n-#define ASM_SHORT\t\t\t\"\\t.value\"\n+#define ASM_SHORT\t\t\t\"\\t.value\\t\"\n \n #undef ASM_LONG\n-#define ASM_LONG\t\t\t\"\\t.long\"\n-\n-#undef ASM_DOUBLE\n-#define ASM_DOUBLE\t\t\t\"\\t.double\"\n+#define ASM_LONG\t\t\t\"\\t.long\\t\"\n \n #undef TYPE_ASM_OP\n #define TYPE_ASM_OP\t\t\t\"\\t.type\\t\"\n@@ -241,9 +238,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", ASM_LONG, LPREFIX, VALUE); \\\n+    fprintf (FILE, \"%s_GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", ASM_LONG, LPREFIX, VALUE); \\\n   else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word %s%d-%s%d\\n\", LPREFIX,VALUE,LPREFIX,REL);\t\\\n+    fprintf (FILE, \"%s%s%d-%s%d\\n\", ASM_LONG, LPREFIX,VALUE,LPREFIX,REL); \\\n } while (0)\n \n #undef ASM_OUTPUT_ALIGNED_COMMON\n@@ -419,7 +416,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } else {\t\t\t\t\t\t\t\t\\\n     fini_section ();                   \t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", ASM_LONG);\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\"); }\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "b28f20fd01a69078710081d170d385a969a9e5dc", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -34,9 +34,8 @@ Boston, MA 02111-1307, USA.  */\n /* Assembler pseudos to introduce constants of various size.  */\n \n #define ASM_BYTE_OP \"\\t.byte\\t\"\n-#define ASM_SHORT \"\\t.value\"\n-#define ASM_LONG \"\\t.long\"\n-#define ASM_DOUBLE \"\\t.double\"\n+#define ASM_SHORT \"\\t.value\\t\"\n+#define ASM_LONG \"\\t.long\\t\"\n \n /* How to output an ASCII string constant.  */\n "}, {"sha": "db4be5da68f705d281c10f50fbf93ebae88c15c2", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -220,8 +220,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    global destructors.  */\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fini_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", ASM_LONG);\t\t\t\t\t\\\n+    fini_section ();                   \t\t\t\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "a61018828c2da54c03e8cc93504b831050bb88dc", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -51,9 +51,9 @@ Boston, MA 02111-1307, USA.  */\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value);\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n    } while (0)\n \n /* This is how to output assembly code to define a `double' constant.\n@@ -67,13 +67,13 @@ do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n \n@@ -84,15 +84,15 @@ do { long value[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n "}, {"sha": "e9479ef103a04cb2b1f2c03fdf45681538bda00f", "filename": "gcc/config/i386/vsta.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fvsta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fvsta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvsta.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -61,15 +61,15 @@ dtor_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     ctor_section ();\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n   do {\t\t\t\t\t\t\\\n     dtor_section ();                   \t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);              \t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)"}, {"sha": "24d8e2d278d23969d8060971527dd5e80bf53b36", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b790642035ce5366651c28245e2051339180c0/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=79b790642035ce5366651c28245e2051339180c0", "patch": "@@ -136,15 +136,15 @@ dtor_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     ctor_section ();\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n   do {\t\t\t\t\t\t\\\n     dtor_section ();                   \t\t\\\n-    fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n+    fputs (ASM_LONG, FILE);\t\t\t\\\n     assemble_name (FILE, NAME);              \t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)"}]}