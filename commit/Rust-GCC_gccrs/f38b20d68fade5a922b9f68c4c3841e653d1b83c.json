{"sha": "f38b20d68fade5a922b9f68c4c3841e653d1b83c", "node_id": "C_kwDOANBUbNoAKGYzOGIyMGQ2OGZhZGU1YTkyMmI5ZjY4YzRjMzg0MWU2NTNkMWI4M2M", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-31T09:41:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-31T09:41:52Z"}, "message": "openmp: Add support for firstprivate and allocate clauses on scope construct\n\nOpenMP 5.2 adds support for firstprivate and allocate clauses on the scope\nconstruct and this patch adds that support to GCC.\n5.2 unfortunately (IMNSHO mistakenly) marked scope construct as worksharing,\nwhich implies that it isn't possible to nest inside of it other scope,\nworksharing loop, sections, explicit barriers, single etc. which would\nmake scope far less useful.  I'm not implementing that part, keeping the\n5.1 behavior here, and will file an issue to revert that for OpenMP 6.0.\nBut, for firstprivate it keeps the restriction that is now implied from\nworksharing construct that listed var can't be private in outer context,\nwhere for reduction 5.1 had similar restriction explicit even for scope\nand 5.2 has it implicitly through worksharing construct.\n\n2022-05-31  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* omp-low.cc (build_outer_var_ref): For code == OMP_CLAUSE_ALLOCATE\n\tallow var to be private in the outer context.\n\t(lower_private_allocate): Pass OMP_CLAUSE_ALLOCATE as last argument\n\tto build_outer_var_ref.\ngcc/c/\n\t* c-parser.cc (OMP_SCOPE_CLAUSE_MASK): Add firstprivate and allocate\n\tclauses.\ngcc/cp/\n\t* parser.cc (OMP_SCOPE_CLAUSE_MASK): Add firstprivate and allocate\n\tclauses.\ngcc/testsuite/\n\t* c-c++-common/gomp/scope-5.c: New test.\n\t* c-c++-common/gomp/scope-6.c: New test.\n\t* g++.dg/gomp/attrs-1.C (bar): Add firstprivate and allocate clauses\n\tto scope construct.\n\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/allocate-1.c (foo): Add testcase for\n\tscope construct with allocate clause.\n\t* testsuite/libgomp.c-c++-common/allocate-3.c (foo): Likewise.\n\t* testsuite/libgomp.c-c++-common/scope-2.c: New test.", "tree": {"sha": "1ca92757665a30a92421a2c3d095e5b6ecd8a25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca92757665a30a92421a2c3d095e5b6ecd8a25e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38b20d68fade5a922b9f68c4c3841e653d1b83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38b20d68fade5a922b9f68c4c3841e653d1b83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38b20d68fade5a922b9f68c4c3841e653d1b83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38b20d68fade5a922b9f68c4c3841e653d1b83c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4df800b15437df1e00f198f86edc7163f1fc94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4df800b15437df1e00f198f86edc7163f1fc94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4df800b15437df1e00f198f86edc7163f1fc94"}], "stats": {"total": 178, "additions": 171, "deletions": 7}, "files": [{"sha": "c9a8d145ff9ec42c476497f2f69a8569e43b9416", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -20413,7 +20413,9 @@ c_parser_omp_single (location_t loc, c_parser *parser, bool *if_p)\n \n #define OMP_SCOPE_CLAUSE_MASK\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_PRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n \n static tree"}, {"sha": "21066421a0290fe78b3f160bb27e7d58c68a7b96", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -43747,7 +43747,9 @@ cp_parser_omp_single (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n \n #define OMP_SCOPE_CLAUSE_MASK\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_PRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n \n static tree"}, {"sha": "f976e3a1549c2f2057bd1c4ca719afbf8628eb0b", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -683,6 +683,7 @@ build_outer_var_ref (tree var, omp_context *ctx,\n   else if ((gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n \t    && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD)\n \t   || ctx->loop_p\n+\t   || code == OMP_CLAUSE_ALLOCATE\n \t   || (code == OMP_CLAUSE_PRIVATE\n \t       && (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n \t\t   || gimple_code (ctx->stmt) == GIMPLE_OMP_SECTIONS\n@@ -4849,7 +4850,7 @@ lower_private_allocate (tree var, tree new_var, tree &allocator,\n       allocator = TREE_PURPOSE (allocator);\n     }\n   if (TREE_CODE (allocator) != INTEGER_CST)\n-    allocator = build_outer_var_ref (allocator, ctx);\n+    allocator = build_outer_var_ref (allocator, ctx, OMP_CLAUSE_ALLOCATE);\n   allocator = fold_convert (pointer_sized_int_node, allocator);\n   if (TREE_CODE (allocator) != INTEGER_CST)\n     {"}, {"sha": "6cd4a80a50cbd438250a02b811c3ac59dde07ea6", "filename": "gcc/testsuite/c-c++-common/gomp/scope-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-5.c?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void\n+foo ()\n+{\n+  int f = 0;\n+  #pragma omp scope firstprivate(f)\t/* { dg-error \"firstprivate variable 'f' is private in outer context\" } */\n+  f++;\n+}"}, {"sha": "760dd7159b5bcdb85feba3e469c95eb07a3de81d", "filename": "gcc/testsuite/c-c++-common/gomp/scope-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-6.c?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -0,0 +1,31 @@\n+typedef enum omp_allocator_handle_t\n+#if __cplusplus >= 201103L\n+: __UINTPTR_TYPE__\n+#endif\n+{\n+  omp_null_allocator = 0,\n+  omp_default_mem_alloc = 1,\n+  omp_large_cap_mem_alloc = 2,\n+  omp_const_mem_alloc = 3,\n+  omp_high_bw_mem_alloc = 4,\n+  omp_low_lat_mem_alloc = 5,\n+  omp_cgroup_mem_alloc = 6,\n+  omp_pteam_mem_alloc = 7,\n+  omp_thread_mem_alloc = 8,\n+  __omp_allocator_handle_t_max__ = __UINTPTR_MAX__\n+} omp_allocator_handle_t;\n+\n+int a = 0, b = 42, c = 0;\n+\n+void\n+foo (omp_allocator_handle_t h)\n+{\n+  #pragma omp scope private (a) private (b) reduction (+: c) allocate (allocator (h): a, b, c)\n+  {\n+    if (b != 42)\n+      __builtin_abort ();\n+    a = 36;\n+    b = 15;\n+    c++;\n+  }\n+}"}, {"sha": "3f366aee58101cf8a371f3f6e587b0ccbe90280e", "filename": "gcc/testsuite/g++.dg/gomp/attrs-1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -593,9 +593,11 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int hda, int s,\n       [[omp::directive (cancellation point parallel)]];\n     }\n   }\n-  [[omp::directive (scope private (p) reduction(+:r) nowait)]]\n+  [[omp::directive (scope private (p) firstprivate (f) reduction(+:r) nowait\n+    allocate (omp_default_mem_alloc: r))]]\n     ;\n-  [[omp::directive (scope private (p) reduction(task, +:r))]]\n+  [[omp::directive (scope private (p) firstprivate (f) reduction(task, +:r)\n+    allocate (omp_default_mem_alloc: f))]]\n     ;\n   extern int t2;\n   [[omp::directive (threadprivate (t2))]];"}, {"sha": "cb80415a4f8a6c00e50ea0a5691d568eb063dfac", "filename": "gcc/testsuite/g++.dg/gomp/attrs-2.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -593,9 +593,11 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int hda, int s,\n       [[omp::directive (cancellation point, parallel)]];\n     }\n   }\n-  [[omp::directive (scope, private (p), reduction(+:r), nowait)]]\n+  [[omp::directive (scope, private (p), firstprivate (f), reduction(+:r), nowait,\n+    allocate(omp_default_mem_alloc: r))]]\n     ;\n-  [[using omp:directive (scope, private (p), reduction(task, +:r))]]\n+  [[using omp:directive (scope, private (p), firstprivate (f), reduction(task, +:r),\n+    allocate (omp_default_mem_alloc: f))]]\n     ;\n   extern int t2;\n   [[omp::directive (threadprivate (t2))]];"}, {"sha": "d3af3b8170e4864e20542648a410cceb87df7189", "filename": "libgomp/testsuite/libgomp.c-c++-common/allocate-1.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-1.c?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -11,7 +11,7 @@ foo (int x, int *p, int *q, int px, omp_allocator_handle_t h, int fl)\n   int i2, j2, n2 = 9, l4;\n   int i3, j3, n3 = 10, l5;\n   int i4, j4, n4 = 11, l6;\n-  int i5;\n+  int i5, n5;\n   int v[x], w[x];\n   int r2[4] = { 0, 0, 0, 0 };\n   int xo = x;\n@@ -214,6 +214,34 @@ foo (int x, int *p, int *q, int px, omp_allocator_handle_t h, int fl)\n       || q[0] != 3 * (32 * 31) / 2 || q[2] != 4 * (32 * 31) / 2\n       || r2[0] != 5 * (32 * 31) / 2 || r2[3] != 6 * (32 * 31) / 2)\n     abort ();\n+  r = 0;\n+  x = xo;\n+  #pragma omp parallel shared (x, y, r, n5) firstprivate (h)\n+  {\n+    #pragma omp masked\n+    n5 = omp_get_num_threads ();\n+    #pragma omp scope private (y) firstprivate (x) reduction(+:r) \\\n+\t\t      allocate (h: x, y, r)\n+    {\n+      int *volatile p1 = &x;\n+      int *volatile p2 = &y;\n+      int *volatile p3 = &r;\n+      if (x != 42)\n+\tabort ();\n+      #pragma omp barrier\n+      *p2 = 1;\n+      p1[0]++;\n+      p3[0]++;\n+      #pragma omp barrier\n+      if (x != 43 || y != 1 || r != 1)\n+\tabort ();\n+      if ((fl & 1) && (((uintptr_t) p1 | (uintptr_t) p2\n+\t\t\t| (uintptr_t) p3) & 63) != 0)\n+\tabort ();\n+    }\n+  }\n+  if (x != 42 || r != n5)\n+    abort ();\n }\n \n void"}, {"sha": "0b507448e2926e67749d8454d280aa2174aceb6b", "filename": "libgomp/testsuite/libgomp.c-c++-common/allocate-3.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fallocate-3.c?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -11,7 +11,7 @@ foo (int x, int *p, int *q, int px, omp_allocator_handle_t h, int fl)\n   int i2, j2, n2 = 9, l4;\n   int i3, j3, n3 = 10, l5;\n   int i4, j4, n4 = 11, l6;\n-  int i5;\n+  int i5, n5;\n   int v[x], w[x];\n   int r2[4] = { 0, 0, 0, 0 };\n   int xo = x;\n@@ -244,6 +244,39 @@ foo (int x, int *p, int *q, int px, omp_allocator_handle_t h, int fl)\n       || q[0] != 3 * (32 * 31) / 2 || q[2] != 4 * (32 * 31) / 2\n       || r2[0] != 5 * (32 * 31) / 2 || r2[3] != 6 * (32 * 31) / 2)\n     abort ();\n+  r = 0;\n+  x = xo;\n+  #pragma omp parallel shared (x, y, r, n5) firstprivate (h)\n+  {\n+    #pragma omp masked\n+    n5 = omp_get_num_threads ();\n+    #pragma omp scope private (y) firstprivate (x) reduction(+:r) \\\n+\t\t      allocate (allocator (h), align (32): x) \\\n+\t\t      allocate (align (128), allocator (h): y) \\\n+\t\t      allocate (align (32), allocator (h): r)\n+    {\n+      int *volatile p1 = &x;\n+      int *volatile p2 = &y;\n+      if (x != 42)\n+\tabort ();\n+      #pragma omp barrier\n+      *p2 = 1;\n+      p1[0]++;\n+      r++;\n+      #pragma omp barrier\n+      if (x != 43 || y != 1 || r != 1)\n+\tabort ();\n+      if ((fl & 1) && (((uintptr_t) p1 | (uintptr_t) p2\n+\t\t\t| (uintptr_t) &r) & 63) != 0)\n+\tabort ();\n+      if ((((uintptr_t) p1 | (uintptr_t) &r) & 31) != 0)\n+\tabort ();\n+      if ((((uintptr_t) p2) & 127) != 0)\n+\tabort ();\n+    }\n+  }\n+  if (x != 42 || r != n5)\n+    abort ();\n }\n \n void"}, {"sha": "2d671026a0a7d0d3358c3c013fd3cb9b93234213", "filename": "libgomp/testsuite/libgomp.c-c++-common/scope-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b20d68fade5a922b9f68c4c3841e653d1b83c/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-2.c?ref=f38b20d68fade5a922b9f68c4c3841e653d1b83c", "patch": "@@ -0,0 +1,54 @@\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+void abort ();\n+\n+int\n+main ()\n+{\n+  int a[64] = {};\n+  int r = 0, r2 = 0, i, n = 64;\n+  #pragma omp parallel\n+  {\n+    #pragma omp scope nowait\n+    #pragma omp scope nowait firstprivate (n)\n+    #pragma omp for\n+    for (i = 0; i < 64; i++)\n+      a[i] += 1;\n+    #pragma omp scope reduction(+: r) nowait firstprivate (n)\n+    {\n+      #pragma omp for nowait\n+      for (i = 0; i < 64; i++)\n+\t{\n+\t  r += i;\n+\t  if (a[i] != 1)\n+\t    abort ();\n+\t}\n+      #pragma omp barrier\n+      if (n != 64)\n+\tabort ();\n+      else\n+\tn = 128;\n+    }\n+    #pragma omp barrier\n+    if (r != 64 * 63 / 2)\n+      abort ();\n+    #pragma omp scope nowait private (i)\n+    #pragma omp scope reduction(+: r2)\n+    {\n+      #pragma omp for nowait\n+      for (i = 0; i < 64; i++)\n+\t{\n+\t  r2 += 2 * i;\n+\t  a[i] += i;\n+\t}\n+    }\n+    if (r2 != 64 * 63)\n+      abort ();\n+    #pragma omp for nowait\n+    for (i = 0; i < 64; i++)\n+      if (a[i] != i + 1)\n+\tabort ();\n+  }\n+  return 0;\n+}"}]}