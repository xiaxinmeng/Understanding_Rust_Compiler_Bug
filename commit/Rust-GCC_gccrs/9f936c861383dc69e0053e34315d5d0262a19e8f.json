{"sha": "9f936c861383dc69e0053e34315d5d0262a19e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5MzZjODYxMzgzZGM2OWUwMDUzZTM0MzE1ZDVkMDI2MmExOWU4Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-10-17T23:58:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-10-17T23:58:54Z"}, "message": "Add -std=c2x, -std=gnu2x, -Wc11-c2x-compat, C2X _Static_assert support.\n\nNow new features are starting to be added to a C2X draft (in the C2x\nbranch of the C standard git repository, no public WG14 document yet),\nit's time to add -std=c2x and associated options to GCC for use in\nenabling C2X features.\n\nThis patch adds the expected set of options: -std=c2x, -std=gnu2x,\n-Wc11-c2x-compat.  A first C2X feature is added (the only one so far\nin the repository that's obviously relevant to GCC): support (as in\nC++) for the string constant to be omitted in _Static_assert.  This\nfeature is duly also supported as an extension in earlier standard\nmodes (diagnosed with -pedantic, unless -Wno-c11-c2x-compat is given,\nor with -Wc11-c2x-compat even in C2X mode).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/\n\t* doc/cpp.texi (__STDC_VERSION__): Document C2X handling.\n\t* doc/invoke.texi (-std=c2x, -std=gnu2x): Document new options.\n\t* doc/standards.texi (C Language): Document C2X.\n\t* dwarf2out.c (highest_c_language), config/rl78/rl78.c\n\t(rl78_option_override): Handle \"GNU C2X\" language name.\n\ngcc/c/\n\t* c-errors.c (pedwarn_c11): New function.\n\t* c-parser.c (disable_extension_diagnostics): Save\n\twarn_c11_c2x_compat and set it to 0.\n\t(restore_extension_diagnostics): Restore warn_c11_c2x_compat.\n\t(c_parser_static_assert_declaration_no_semi): Handle\n\t_Static_assert without string constant.\n\t* c-tree.h (pedwarn_c11): New prototype.\n\ngcc/c-family/\n\t* c-common.c (flag_isoc2x): New variable.\n\t* c-common.h (clk_c): Update comment to reference C2X.\n\t(flag_isoc99, flag_isoc11): Update comments to reference future\n\tstandard versions in general.\n\t(flag_isoc2x): Declare.\n\t* c-opts.c (set_std_c2x): New function.\n\t(c_common_handle_option): Handle -std=c2x and -std=gnu2x.\n\t(set_std_c89, set_std_c99, set_std_c11, set_std_c17): Set\n\tflag_isoc2x to 0.\n\t* c.opt (Wc11-c2x-compat, std=c2x, std=gnu2x): New options.\n\ngcc/testsuite/\n\t* gcc.dg/c11-static-assert-7.c, gcc.dg/c11-static-assert-8.c,\n\tgcc.dg/c11-static-assert-9.c, gcc.dg/c2x-static-assert-1.c,\n\tgcc.dg/c2x-static-assert-2.c, gcc.dg/c99-static-assert-2.c,\n\tgcc.dg/gnu2x-static-assert-1.c: New tests.\n\t* gcc.dg/missing-symbol-3.c: Update expected fix-it text.\n\nlibcpp/\n\t* include/cpplib.h (enum c_lang): Add CLK_GNUC2X and CLK_STDC2X.\n\t* init.c (lang_defaults): Add GNUC2X and STDC2X entries.\n\t(cpp_init_builtins): Define __STDC_VERSION__ to 202000L for C2X.\n\nFrom-SVN: r265251", "tree": {"sha": "f23e8dc38949667312676b0c8bf7e5b1dfaacb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f23e8dc38949667312676b0c8bf7e5b1dfaacb6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f936c861383dc69e0053e34315d5d0262a19e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f936c861383dc69e0053e34315d5d0262a19e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f936c861383dc69e0053e34315d5d0262a19e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f936c861383dc69e0053e34315d5d0262a19e8f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8a92c448bf7d9ceeef1879f741901cf337d921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8a92c448bf7d9ceeef1879f741901cf337d921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8a92c448bf7d9ceeef1879f741901cf337d921"}], "stats": {"total": 279, "additions": 250, "deletions": 29}, "files": [{"sha": "f4e147c26ee2b53f72d19449da2e511a0b2535f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1,3 +1,11 @@\n+2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/cpp.texi (__STDC_VERSION__): Document C2X handling.\n+\t* doc/invoke.texi (-std=c2x, -std=gnu2x): Document new options.\n+\t* doc/standards.texi (C Language): Document C2X.\n+\t* dwarf2out.c (highest_c_language), config/rl78/rl78.c\n+\t(rl78_option_override): Handle \"GNU C2X\" language name.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/invoke.texi (-std=c17), doc/standards.texi (C Language):"}, {"sha": "5b334f37360f6920fac980fdf70f853b862c0646", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1,3 +1,16 @@\n+2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (flag_isoc2x): New variable.\n+\t* c-common.h (clk_c): Update comment to reference C2X.\n+\t(flag_isoc99, flag_isoc11): Update comments to reference future\n+\tstandard versions in general.\n+\t(flag_isoc2x): Declare.\n+\t* c-opts.c (set_std_c2x): New function.\n+\t(c_common_handle_option): Handle -std=c2x and -std=gnu2x.\n+\t(set_std_c89, set_std_c99, set_std_c11, set_std_c17): Set\n+\tflag_isoc2x to 0.\n+\t* c.opt (Wc11-c2x-compat, std=c2x, std=gnu2x): New options.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (std=c17, std=c18, std=gnu17, std=gnu18, std=iso9899:2017)"}, {"sha": "f10cf89c3a782b739f866fa5fda79358d8fd9909", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -214,6 +214,10 @@ int flag_isoc99;\n \n int flag_isoc11;\n \n+/* Nonzero means use the ISO C2X dialect of C.  */\n+\n+int flag_isoc2x;\n+\n /* Nonzero means that we have builtin functions, and main is an int.  */\n \n int flag_hosted = 1;"}, {"sha": "641fe57d671d45fb2e8fdbd2737a13845810713a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -498,7 +498,7 @@ extern GTY(()) tree c_global_trees[CTI_MAX];\n \n enum c_language_kind\n {\n-  clk_c\t\t= 0,\t\t/* C90, C94, C99 or C11 */\n+  clk_c\t\t= 0,\t\t/* C90, C94, C99, C11 or C2X */\n   clk_objc\t= 1,\t\t/* clk_c with ObjC features.  */\n   clk_cxx\t= 2,\t\t/* ANSI/ISO C++ */\n   clk_objcxx\t= 3\t\t/* clk_cxx with ObjC features.  */\n@@ -635,14 +635,18 @@ extern int flag_cond_mismatch;\n \n extern int flag_isoc94;\n \n-/* Nonzero means use the ISO C99 (or C11) dialect of C.  */\n+/* Nonzero means use the ISO C99 (or later) dialect of C.  */\n \n extern int flag_isoc99;\n \n-/* Nonzero means use the ISO C11 dialect of C.  */\n+/* Nonzero means use the ISO C11 (or later) dialect of C.  */\n \n extern int flag_isoc11;\n \n+/* Nonzero means use the ISO C2X dialect of C.  */\n+\n+extern int flag_isoc2x;\n+\n /* Nonzero means that we have builtin functions, and main is an int.  */\n \n extern int flag_hosted;"}, {"sha": "9cf1900fb9ab94540e2c03c39a44413ac79b6d54", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -117,6 +117,7 @@ static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n static void set_std_c17 (int);\n+static void set_std_c2x (int);\n static void check_deps_environment_vars (void);\n static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n@@ -679,6 +680,16 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n \tset_std_c17 (false /* ISO */);\n       break;\n \n+    case OPT_std_c2x:\n+      if (!preprocessing_asm_p)\n+\tset_std_c2x (true /* ISO */);\n+      break;\n+\n+    case OPT_std_gnu2x:\n+      if (!preprocessing_asm_p)\n+\tset_std_c2x (false /* ISO */);\n+      break;\n+\n     case OPT_trigraphs:\n       cpp_opts->trigraphs = 1;\n       break;\n@@ -1554,6 +1565,7 @@ set_std_c89 (int c94, int iso)\n   flag_isoc94 = c94;\n   flag_isoc99 = 0;\n   flag_isoc11 = 0;\n+  flag_isoc2x = 0;\n   lang_hooks.name = \"GNU C89\";\n }\n \n@@ -1565,6 +1577,7 @@ set_std_c99 (int iso)\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  flag_isoc2x = 0;\n   flag_isoc11 = 0;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n@@ -1579,6 +1592,7 @@ set_std_c11 (int iso)\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  flag_isoc2x = 0;\n   flag_isoc11 = 1;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n@@ -1593,12 +1607,28 @@ set_std_c17 (int iso)\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  flag_isoc2x = 0;\n   flag_isoc11 = 1;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n   lang_hooks.name = \"GNU C17\";\n }\n \n+/* Set the C 2X standard (without GNU extensions if ISO).  */\n+static void\n+set_std_c2x (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_STDC2X: CLK_GNUC2X);\n+  flag_no_asm = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  flag_isoc2x = 1;\n+  flag_isoc11 = 1;\n+  flag_isoc99 = 1;\n+  flag_isoc94 = 1;\n+  lang_hooks.name = \"GNU C2X\";\n+}\n+\n \n /* Set the C++ 98 standard (without GNU extensions if ISO).  */\n static void"}, {"sha": "6f88a1013d6f67b6d709896cd87c7760cdecc04e", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -366,6 +366,10 @@ Wbuiltin-macro-redefined\n C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACRO_REDEFINED) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n Warn when a built-in preprocessor macro is undefined or redefined.\n \n+Wc11-c2x-compat\n+C ObjC Var(warn_c11_c2x_compat) Init(-1) Warning\n+Warn about features not present in ISO C11, but present in ISO C2X.\n+\n Wc90-c99-compat\n C ObjC CPP(cpp_warn_c90_c99_compat) CppReason(CPP_W_C90_C99_COMPAT) Var(warn_c90_c99_compat) Init(-1) Warning\n Warn about features not present in ISO C90, but present in ISO C99.\n@@ -1998,6 +2002,10 @@ std=c18\n C ObjC Alias(std=c17)\n Conform to the ISO 2017 C standard (published in 2018).\n \n+std=c2x\n+C ObjC\n+Conform to the ISO 202X C standard draft (experimental and incomplete support).\n+\n std=c89\n C ObjC Alias(std=c90)\n Conform to the ISO 1990 C standard.\n@@ -2068,6 +2076,10 @@ std=gnu18\n C ObjC Alias(std=gnu17)\n Conform to the ISO 2017 C standard (published in 2018) with GNU extensions.\n \n+std=gnu2x\n+C ObjC\n+Conform to the ISO 202X C standard draft with GNU extensions (experimental and incomplete support).\n+\n std=gnu89\n C ObjC Alias(std=gnu90)\n Conform to the ISO 1990 C standard with GNU extensions."}, {"sha": "2c07f2f612599e1598b5d293c6cdfb40a52c79a0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1,3 +1,13 @@\n+2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-errors.c (pedwarn_c11): New function.\n+\t* c-parser.c (disable_extension_diagnostics): Save\n+\twarn_c11_c2x_compat and set it to 0.\n+\t(restore_extension_diagnostics): Restore warn_c11_c2x_compat.\n+\t(c_parser_static_assert_declaration_no_semi): Handle\n+\t_Static_assert without string constant.\n+\t* c-tree.h (pedwarn_c11): New prototype.\n+\n 2018-10-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Make-lang.in (selftest-c): New."}, {"sha": "4ff2080e94a08a119679880e4af509cc368493d4", "filename": "gcc/c/c-errors.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-errors.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -25,6 +25,45 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-tree.h\"\n #include \"opts.h\"\n \n+/* Issue an ISO C11 pedantic warning MSGID if -pedantic outside C2X mode,\n+   otherwise issue warning MSGID if -Wc11-c2X-compat is specified.\n+   This function is supposed to be used for matters that are allowed in\n+   ISO C2X but not supported in ISO C11, thus we explicitly don't pedwarn\n+   when C2X is specified.  */\n+\n+bool\n+pedwarn_c11 (location_t location, int opt, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+  bool warned = false;\n+  rich_location richloc (line_table, location);\n+\n+  va_start (ap, gmsgid);\n+  /* If desired, issue the C11/C2X compat warning, which is more specific\n+     than -pedantic.  */\n+  if (warn_c11_c2x_compat > 0)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, &richloc,\n+\t\t\t   (pedantic && !flag_isoc2x)\n+\t\t\t   ? DK_PEDWARN : DK_WARNING);\n+      diagnostic.option_index = OPT_Wc11_c2x_compat;\n+      warned = diagnostic_report_diagnostic (global_dc, &diagnostic);\n+    }\n+  /* -Wno-c11-c2x-compat suppresses even the pedwarns.  */\n+  else if (warn_c11_c2x_compat == 0)\n+    ;\n+  /* For -pedantic outside C2X, issue a pedwarn.  */\n+  else if (pedantic && !flag_isoc2x)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, &richloc, DK_PEDWARN);\n+      diagnostic.option_index = opt;\n+      warned = diagnostic_report_diagnostic (global_dc, &diagnostic);\n+    }\n+  va_end (ap);\n+  return warned;\n+}\n+\n /* Issue an ISO C99 pedantic warning MSGID if -pedantic outside C11 mode,\n    otherwise issue warning MSGID if -Wc99-c11-compat is specified.\n    This function is supposed to be used for matters that are allowed in"}, {"sha": "ee66ce89b5dea3f56956c74a1d223a3e6d271483", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1327,6 +1327,9 @@ disable_extension_diagnostics (void)\n \t     /* Similarly for warn_c99_c11_compat.  */\n \t     | ((warn_c99_c11_compat == 1) << 9)\n \t     | ((warn_c99_c11_compat == -1) << 10)\n+\t     /* Similarly for warn_c11_c2x_compat.  */\n+\t     | ((warn_c11_c2x_compat == 1) << 11)\n+\t     | ((warn_c11_c2x_compat == -1) << 12)\n \t     );\n   cpp_opts->cpp_pedantic = pedantic = 0;\n   warn_pointer_arith = 0;\n@@ -1337,6 +1340,7 @@ disable_extension_diagnostics (void)\n   warn_overlength_strings = 0;\n   warn_c90_c99_compat = 0;\n   warn_c99_c11_compat = 0;\n+  warn_c11_c2x_compat = 0;\n   return ret;\n }\n \n@@ -1356,6 +1360,7 @@ restore_extension_diagnostics (int flags)\n   /* See above for why is this needed.  */\n   warn_c90_c99_compat = (flags >> 7) & 1 ? 1 : ((flags >> 8) & 1 ? -1 : 0);\n   warn_c99_c11_compat = (flags >> 9) & 1 ? 1 : ((flags >> 10) & 1 ? -1 : 0);\n+  warn_c11_c2x_compat = (flags >> 11) & 1 ? 1 : ((flags >> 12) & 1 ? -1 : 0);\n }\n \n /* Helper data structure for parsing #pragma acc routine.  */\n@@ -2404,14 +2409,18 @@ c_parser_static_assert_declaration (c_parser *parser)\n \n    static_assert-declaration-no-semi:\n      _Static_assert ( constant-expression , string-literal )\n+\n+   C2X:\n+   static_assert-declaration-no-semi:\n+     _Static_assert ( constant-expression )\n */\n \n static void\n c_parser_static_assert_declaration_no_semi (c_parser *parser)\n {\n   location_t assert_loc, value_loc;\n   tree value;\n-  tree string;\n+  tree string = NULL_TREE;\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT));\n   assert_loc = c_parser_peek_token (parser)->location;\n@@ -2429,27 +2438,33 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n   value = c_parser_expr_no_commas (parser, NULL).value;\n   value_loc = EXPR_LOC_OR_LOC (value, value_tok_loc);\n   parser->lex_untranslated_string = true;\n-  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n-    {\n-      parser->lex_untranslated_string = false;\n-      return;\n-    }\n-  switch (c_parser_peek_token (parser)->type)\n+  if (c_parser_next_token_is (parser, CPP_COMMA))\n     {\n-    case CPP_STRING:\n-    case CPP_STRING16:\n-    case CPP_STRING32:\n-    case CPP_WSTRING:\n-    case CPP_UTF8STRING:\n-      string = c_parser_peek_token (parser)->value;\n       c_parser_consume_token (parser);\n-      parser->lex_untranslated_string = false;\n-      break;\n-    default:\n-      c_parser_error (parser, \"expected string literal\");\n-      parser->lex_untranslated_string = false;\n-      return;\n+      switch (c_parser_peek_token (parser)->type)\n+\t{\n+\tcase CPP_STRING:\n+\tcase CPP_STRING16:\n+\tcase CPP_STRING32:\n+\tcase CPP_WSTRING:\n+\tcase CPP_UTF8STRING:\n+\t  string = c_parser_peek_token (parser)->value;\n+\t  c_parser_consume_token (parser);\n+\t  parser->lex_untranslated_string = false;\n+\t  break;\n+\tdefault:\n+\t  c_parser_error (parser, \"expected string literal\");\n+\t  parser->lex_untranslated_string = false;\n+\t  return;\n+\t}\n     }\n+  else if (flag_isoc11)\n+    /* If pedantic for pre-C11, the use of _Static_assert itself will\n+       have been diagnosed, so do not also diagnose the use of this\n+       new C2X feature of _Static_assert.  */\n+    pedwarn_c11 (assert_loc, OPT_Wpedantic,\n+\t\t \"ISO C11 does not support omitting the string in \"\n+\t\t \"%<_Static_assert%>\");\n   parens.require_close (parser);\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (value)))\n@@ -2473,7 +2488,12 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n     }\n   constant_expression_warning (value);\n   if (integer_zerop (value))\n-    error_at (assert_loc, \"static assertion failed: %E\", string);\n+    {\n+      if (string)\n+\terror_at (assert_loc, \"static assertion failed: %E\", string);\n+      else\n+\terror_at (assert_loc, \"static assertion failed\");\n+    }\n }\n \n /* Parse some declaration specifiers (possibly none) (C90 6.5, C99"}, {"sha": "be63feec7bd5dd8a3728687005b15d507b7f178c", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -762,6 +762,8 @@ extern bool pedwarn_c90 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern bool pedwarn_c99 (location_t, int opt, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n+extern bool pedwarn_c11 (location_t, int opt, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,4);\n \n extern void\n set_c_expr_source_range (c_expr *expr,"}, {"sha": "6663e3558345fa85658f09737f10d05c48604599", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -366,6 +366,7 @@ rl78_option_override (void)\n       && strcmp (lang_hooks.name, \"GNU C\")\n       && strcmp (lang_hooks.name, \"GNU C11\")\n       && strcmp (lang_hooks.name, \"GNU C17\")\n+      && strcmp (lang_hooks.name, \"GNU C2X\")\n       && strcmp (lang_hooks.name, \"GNU C89\")\n       && strcmp (lang_hooks.name, \"GNU C99\")\n       /* Compiling with -flto results in a language of GNU GIMPLE being used... */"}, {"sha": "cb5d5bd77759d1bebdadf898a32f09a2e5c22cd0", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1887,7 +1887,8 @@ the 1999 revision of the C standard; the value @code{201112L}\n signifies the 2011 revision of the C standard; the value\n @code{201710L} signifies the 2017 revision of the C standard (which is\n otherwise identical to the 2011 version apart from correction of\n-defects).\n+defects).  An unspecified value larger than @code{201710L} is used for\n+the experimental @option{-std=c2x} and @option{-std=gnu2x} modes.\n \n This macro is not defined if the @option{-traditional-cpp} option is\n used, nor when compiling C++ or Objective-C@."}, {"sha": "bf8bcfb290703bc5efa04db0b958d970a3f568fa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1933,6 +1933,10 @@ same as C11 except for corrections of defects (all of which are also\n applied with @option{-std=c11}) and a new value of\n @code{__STDC_VERSION__}, and so is supported to the same extent as C11.\n \n+@item c2x\n+The next version of the ISO C standard, still under development.  The\n+support for this version is experimental and incomplete.\n+\n @item gnu90\n @itemx gnu89\n GNU dialect of ISO C90 (including some C99 features).\n@@ -1950,6 +1954,11 @@ The name @samp{gnu1x} is deprecated.\n @itemx gnu18\n GNU dialect of ISO C17.  This is the default for C code.\n \n+@item gnu2x\n+The next version of the ISO C standard, still under development, plus\n+GNU extensions.  The support for this version is experimental and\n+incomplete.\n+\n @item c++98\n @itemx c++03\n The 1998 ISO C++ standard plus the 2003 technical corrigendum and some"}, {"sha": "26350cc926551870b9c4b74ed2c4630423606a0c", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -38,6 +38,8 @@ with some exceptions, and possibly with some extensions.\n @cindex C1X\n @cindex ISO C17\n @cindex C17\n+@cindex ISO C2X\n+@cindex C2X\n @cindex Technical Corrigenda\n @cindex TC1\n @cindex Technical Corrigendum 1\n@@ -109,6 +111,10 @@ known as @dfn{C17} and is supported with @option{-std=c17} or\n @option{-std=c11}, and the only difference between the options is the\n value of @code{__STDC_VERSION__}.\n \n+A further version of the C standard, known as @dfn{C2X}, is under\n+development; experimental and incomplete support for this is enabled\n+with @option{-std=c2x}.\n+\n By default, GCC provides some extensions to the C language that, on\n rare occasions conflict with the C standard.  @xref{C\n Extensions,,Extensions to the C Language Family}.  "}, {"sha": "42eab9e0f660c1df8baad37622a33b458e0007c0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -24329,6 +24329,8 @@ highest_c_language (const char *lang1, const char *lang2)\n   if (strcmp (\"GNU C++98\", lang1) == 0 || strcmp (\"GNU C++98\", lang2) == 0)\n     return \"GNU C++98\";\n \n+  if (strcmp (\"GNU C2X\", lang1) == 0 || strcmp (\"GNU C2X\", lang2) == 0)\n+    return \"GNU C2X\";\n   if (strcmp (\"GNU C17\", lang1) == 0 || strcmp (\"GNU C17\", lang2) == 0)\n     return \"GNU C17\";\n   if (strcmp (\"GNU C11\", lang1) == 0 || strcmp (\"GNU C11\", lang2) == 0)\n@@ -24408,7 +24410,8 @@ gen_compile_unit_die (const char *filename)\n \n \t  if (dwarf_version >= 5 /* || !dwarf_strict */)\n \t    if (strcmp (language_string, \"GNU C11\") == 0\n-\t\t|| strcmp (language_string, \"GNU C17\") == 0)\n+\t\t|| strcmp (language_string, \"GNU C17\") == 0\n+\t\t|| strcmp (language_string, \"GNU C2X\"))\n \t      language = DW_LANG_C11;\n \t}\n     }"}, {"sha": "f6dbcf731c2d2d8f98878b5bba267d1d18fddb6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1,3 +1,11 @@\n+2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-static-assert-7.c, gcc.dg/c11-static-assert-8.c,\n+\tgcc.dg/c11-static-assert-9.c, gcc.dg/c2x-static-assert-1.c,\n+\tgcc.dg/c2x-static-assert-2.c, gcc.dg/c99-static-assert-2.c,\n+\tgcc.dg/gnu2x-static-assert-1.c: New tests.\n+\t* gcc.dg/missing-symbol-3.c: Update expected fix-it text.\n+\n 2018-10-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/87632"}, {"sha": "8cea923b67b911956bc2e5a7c6cfebe4cfa51dea", "filename": "gcc/testsuite/gcc.dg/c11-static-assert-7.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-7.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,5 @@\n+/* Test C11 static assertions.  Omitting the string not supported.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic\" } */\n+\n+_Static_assert (1); /* { dg-warning \"does not support omitting the string\" } */"}, {"sha": "20e5a6d1076f551bbe870b143f40bdc1b3977e27", "filename": "gcc/testsuite/gcc.dg/c11-static-assert-8.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-8.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,5 @@\n+/* Test C11 static assertions.  Omitting the string not supported.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+_Static_assert (1); /* { dg-error \"does not support omitting the string\" } */"}, {"sha": "93696ab1b23dd3e1aa81ee030905b994e5066cfe", "filename": "gcc/testsuite/gcc.dg/c11-static-assert-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-9.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,6 @@\n+/* Test C11 static assertions.  Omitting the string not supported, but\n+   -Wno-c11-c2x-compat disables the -pedantic diagnostic for that.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic -Wno-c11-c2x-compat\" } */\n+\n+_Static_assert (1);"}, {"sha": "1b771a1c0ccb28c7cc344bc8ccc7cf8fee387445", "filename": "gcc/testsuite/gcc.dg/c2x-static-assert-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-1.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,5 @@\n+/* Test C2x static assertions.  Omitting the string supported.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic\" } */\n+\n+_Static_assert (1);"}, {"sha": "c3474676e023197763dfdd64c8961eb6a2c080a6", "filename": "gcc/testsuite/gcc.dg/c2x-static-assert-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-static-assert-2.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2x static assertions.  Omitting the string supported.  Failed\n+   assertions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic\" } */\n+\n+_Static_assert (0); /* { dg-error \"static assertion failed\" } */"}, {"sha": "dffa77c64f19ad1ca3895786a0d2eb839e61740e", "filename": "gcc/testsuite/gcc.dg/c99-static-assert-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-static-assert-2.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,6 @@\n+/* Test static assertions.  Omitting the string should not result in a\n+   duplicate diagnostic in pre-C11 modes.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+_Static_assert (1); /* { dg-warning \"ISO C99 does not support '_Static_assert'\" } */"}, {"sha": "4ed095cb3cdc596733fae40827c1a68e13ba34e1", "filename": "gcc/testsuite/gcc.dg/gnu2x-static-assert-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-static-assert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-static-assert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-static-assert-1.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -0,0 +1,6 @@\n+/* Test C11 static assertions.  Omitting the string diagnosed with\n+   -Wc11-c2x-compat.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x -Wc11-c2x-compat\" } */\n+\n+_Static_assert (1); /* { dg-warning \"does not support omitting the string\" } */"}, {"sha": "5c7aaed6a2735567d52936b11ba961d2160d3ea8", "filename": "gcc/testsuite/gcc.dg/missing-symbol-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-symbol-3.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -15,11 +15,11 @@ void test_static_assert_1 (void)\n \n void test_static_assert_2 (void)\n {\n-  _Static_assert(sizeof(int) >= sizeof(char); /* { dg-error \"expected ',' before ';' token\" } */\n+  _Static_assert(sizeof(int) >= sizeof(char); /* { dg-error \"expected '\\\\)' before ';' token\" } */\n   /* { dg-begin-multiline-output \"\" }\n    _Static_assert(sizeof(int) >= sizeof(char);\n-                                             ^\n-                                             ,\n+                 ~                           ^\n+                                             )\n      { dg-end-multiline-output \"\" } */\n }\n "}, {"sha": "fd08a330ccaa24e40bc66e82d1cecb5396a0b2ee", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -1,3 +1,9 @@\n+2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (enum c_lang): Add CLK_GNUC2X and CLK_STDC2X.\n+\t* init.c (lang_defaults): Add GNUC2X and STDC2X entries.\n+\t(cpp_init_builtins): Define __STDC_VERSION__ to 202000L for C2X.\n+\n 2018-10-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* macro.c (_cpp_arguments_ok): If the argument count is wrong, add"}, {"sha": "a9b4fb3973cf9a255f259236417106a9103ace07", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -167,8 +167,9 @@ enum cpp_ttype\n #undef TK\n \n /* C language kind, used when calling cpp_create_reader.  */\n-enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17,\n+enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,\n \t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11, CLK_STDC17,\n+\t     CLK_STDC2X,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n \t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,\n \t     CLK_GNUCXX2A, CLK_CXX2A, CLK_ASM};"}, {"sha": "9b7490b0d8a8d71675232c3fb92b65c1cced9662", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f936c861383dc69e0053e34315d5d0262a19e8f/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=9f936c861383dc69e0053e34315d5d0262a19e8f", "patch": "@@ -100,11 +100,13 @@ static const struct lang_flags lang_defaults[] =\n   /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n   /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n   /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1 },\n   /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0 },\n   /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n   /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n   /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n   /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0 },\n   /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1 },\n   /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0 },\n   /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1 },\n@@ -521,6 +523,9 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_STDC2X\n+\t   || CPP_OPTION (pfile, lang) == CLK_GNUC2X)\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 202000L\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC17\n \t   || CPP_OPTION (pfile, lang) == CLK_GNUC17)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201710L\");"}]}