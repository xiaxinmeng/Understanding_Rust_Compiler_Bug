{"sha": "ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyYzRlYzhkY2JlNWQwYjkzZDAyNTBhYmQ0MmZmOWZiNzkxZTBiNg==", "commit": {"author": {"name": "Sergey Shalnov", "email": "Sergey.Shalnov@intel.com", "date": "2017-11-21T19:52:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-11-21T19:52:01Z"}, "message": "i386-opts.h (enum prefer_vector_width): Added new enum for the new option -mprefer-vector-width=[none|128|256|512].\n\n\t* config/i386/i386-opts.h (enum prefer_vector_width): Added new enum\n\tfor the new option -mprefer-vector-width=[none|128|256|512].\n\t* config/i386/i386.c (ix86_target_string): remove old style options\n\t-mprefer-avx256 and make -mprefer-avx128 as alias.\n\t(ix86_option_override_internal):  Apply defaults for the\n\t-mprefer-vector-width=[128|256] option.\n\t* config/i386/i386.h (TARGET_PREFER_AVX128, TARGET_PREFER_AVX256):\n\tImplement macros to work with -mprefer-vector-width=.\n\t* config/i386/i386.opt: Implemented option\n\t-mprefer-vector-width=[none|128|256|512].\n\t* doc/invoke.texi: Documentation for\n\t-mprefer-vector-width=[none|128|256|512].\n\ngcc/testsuite/\n\n\t* g++.dg/ext/pr57362.C (__attribute__): Test\n\tprefer-vector-width=[128|256] target attribute.\n\t* gcc.target/i386/avx512f-constant-float-return.c (dg-optioins):\n\tUse -mprefer-vector-width=256 instead of -mprefer-avx256.\n\t* gcc.target/i386/avx512f-prefer.c: Ditto.\n\t* gcc.target/i386/pr82460-2.c: Ditto.\n\nFrom-SVN: r255030", "tree": {"sha": "fe72a5134596e9817e96ad4798a31e9c87e5ae4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe72a5134596e9817e96ad4798a31e9c87e5ae4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/comments", "author": {"login": "shssf", "id": 19515906, "node_id": "MDQ6VXNlcjE5NTE1OTA2", "avatar_url": "https://avatars.githubusercontent.com/u/19515906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shssf", "html_url": "https://github.com/shssf", "followers_url": "https://api.github.com/users/shssf/followers", "following_url": "https://api.github.com/users/shssf/following{/other_user}", "gists_url": "https://api.github.com/users/shssf/gists{/gist_id}", "starred_url": "https://api.github.com/users/shssf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shssf/subscriptions", "organizations_url": "https://api.github.com/users/shssf/orgs", "repos_url": "https://api.github.com/users/shssf/repos", "events_url": "https://api.github.com/users/shssf/events{/privacy}", "received_events_url": "https://api.github.com/users/shssf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84fa214dea091e289950a41b70964de73a3c1172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fa214dea091e289950a41b70964de73a3c1172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fa214dea091e289950a41b70964de73a3c1172"}], "stats": {"total": 114, "additions": 93, "deletions": 21}, "files": [{"sha": "86b538479ecc82971d1f3e33307b147ceb14a346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1,3 +1,18 @@\n+2017-11-21  Sergey Shalnov  <Sergey.Shalnov@intel.com>\n+\n+\t* config/i386/i386-opts.h (enum prefer_vector_width): Added new enum\n+\tfor the new option -mprefer-vector-width=[none|128|256|512].\n+\t* config/i386/i386.c (ix86_target_string): remove old style options\n+\t-mprefer-avx256 and make -mprefer-avx128 as alias.\n+\t(ix86_option_override_internal):  Apply defaults for the\n+\t-mprefer-vector-width=[128|256] option.\n+\t* config/i386/i386.h (TARGET_PREFER_AVX128, TARGET_PREFER_AVX256):\n+\tImplement macros to work with -mprefer-vector-width=.\n+\t* config/i386/i386.opt: Implemented option\n+\t-mprefer-vector-width=[none|128|256|512].\n+\t* doc/invoke.texi: Documentation for\n+\t-mprefer-vector-width=[none|128|256|512].\n+\n 2017-11-21  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/ppc-asm.h (f50, vs50): Fix values."}, {"sha": "8c37a7489e00418133175cebf5860d840f4e61a0", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -99,4 +99,11 @@ enum stack_protector_guard {\n   SSP_GLOBAL    /* global canary */\n };\n \n+enum prefer_vector_width {\n+    PVW_NONE,\n+    PVW_AVX128,\n+    PVW_AVX256,\n+    PVW_AVX512\n+};\n+\n #endif"}, {"sha": "b1ce630753fc08248d5c61ef71bc6db57555dc0d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -2847,15 +2847,13 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mstv\",\t\t\t\tMASK_STV },\n     { \"-mavx256-split-unaligned-load\",\tMASK_AVX256_SPLIT_UNALIGNED_LOAD },\n     { \"-mavx256-split-unaligned-store\",\tMASK_AVX256_SPLIT_UNALIGNED_STORE },\n-    { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128 },\n     { \"-mcall-ms2sysv-xlogues\",\t\tMASK_CALL_MS2SYSV_XLOGUES }\n   };\n \n   /* Additional flag options.  */\n   static struct ix86_target_opts flag2_opts[] =\n   {\n-    { \"-mgeneral-regs-only\",\t\tOPTION_MASK_GENERAL_REGS_ONLY },\n-    { \"-mprefer-avx256\",\t\tOPTION_MASK_PREFER_AVX256 },\n+    { \"-mgeneral-regs-only\",\t\tOPTION_MASK_GENERAL_REGS_ONLY }\n   };\n \n   const char *opts[ARRAY_SIZE (isa_opts) + ARRAY_SIZE (isa2_opts)\n@@ -4686,16 +4684,18 @@ ix86_option_override_internal (bool main_args_p,\n   if (!ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL]\n       && !(opts_set->x_target_flags & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n     opts->x_target_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n+\n   /* Enable 128-bit AVX instruction generation\n      for the auto-vectorizer.  */\n   if (TARGET_AVX128_OPTIMAL\n-      && !(opts_set->x_target_flags & MASK_PREFER_AVX128))\n-    opts->x_target_flags |= MASK_PREFER_AVX128;\n-  /* Use 256-bit AVX instructions instead of 512-bit AVX instructions\n+      && (opts_set->x_prefer_vector_width_type == PVW_NONE))\n+    opts->x_prefer_vector_width_type = PVW_AVX128;\n+\n+  /* Use 256-bit AVX instruction generation\n      in the auto-vectorizer.  */\n   if (ix86_tune_features[X86_TUNE_AVX256_OPTIMAL]\n-      && !(opts_set->x_ix86_target_flags & OPTION_MASK_PREFER_AVX256))\n-    opts->x_ix86_target_flags |= OPTION_MASK_PREFER_AVX256;\n+      && (opts_set->x_prefer_vector_width_type == PVW_NONE))\n+    opts->x_prefer_vector_width_type = PVW_AVX256;\n \n   if (opts->x_ix86_recip_name)\n     {"}, {"sha": "6eadc0300001c7bbe4c4cdac96ee432aa6e2f691", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -2678,6 +2678,11 @@ extern void debug_dispatch_window (int);\n #define TARGET_RECIP_VEC_DIV\t((recip_mask & RECIP_MASK_VEC_DIV) != 0)\n #define TARGET_RECIP_VEC_SQRT\t((recip_mask & RECIP_MASK_VEC_SQRT) != 0)\n \n+/* Use 128-bit AVX instructions in the auto-vectorizer.  */\n+#define TARGET_PREFER_AVX128\t(prefer_vector_width_type == PVW_AVX128)\n+/* Use 256-bit AVX instructions in the auto-vectorizer.  */\n+#define TARGET_PREFER_AVX256\t(prefer_vector_width_type == PVW_AVX256)\n+\n #define IX86_HLE_ACQUIRE (1 << 16)\n #define IX86_HLE_RELEASE (1 << 17)\n "}, {"sha": "ce4ec7e8ecf261edc65239d856b8c119cfee1313", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -182,6 +182,10 @@ int x_ix86_tune_no_default\n TargetSave\n enum ix86_veclibabi x_ix86_veclibabi_type\n \n+;; -mprefer-vector-width=\n+TargetSave\n+enum prefer_vector_width x_prefer_vector_width_type\n+\n ;; x86 options\n m128bit-long-double\n Target RejectNegative Report Mask(128BIT_LONG_DOUBLE) Save\n@@ -588,12 +592,28 @@ Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4\n or znver1 and Haifa scheduling is selected.\n \n mprefer-avx128\n-Target Report Mask(PREFER_AVX128) Save\n+Target Alias(mprefer-vector-width=, 128, 256)\n Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.\n \n-mprefer-avx256\n-Target Report Mask(PREFER_AVX256) Var(ix86_target_flags) Save\n-Use 256-bit AVX instructions instead of 512-bit AVX instructions in the auto-vectorizer.\n+mprefer-vector-width=\n+Target Report RejectNegative Joined Var(prefer_vector_width_type) Enum(prefer_vector_width) Init(PVW_NONE)\n+Use given register vector width instructions instead of maximum register width in the auto-vectorizer.\n+\n+Enum\n+Name(prefer_vector_width) Type(enum prefer_vector_width)\n+Known preferred register vector length (to use with the -mprefer-vector-width= option)\n+\n+EnumValue\n+Enum(prefer_vector_width) String(none) Value(PVW_NONE)\n+\n+EnumValue\n+Enum(prefer_vector_width) String(128) Value(PVW_AVX128)\n+\n+EnumValue\n+Enum(prefer_vector_width) String(256) Value(PVW_AVX256)\n+\n+EnumValue\n+Enum(prefer_vector_width) String(512) Value(PVW_AVX512)\n \n ;; ISA support\n "}, {"sha": "eeb87563dc8d7b32ad8dd225eca3045995a48007", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1196,7 +1196,7 @@ See RS/6000 and PowerPC Options.\n -mincoming-stack-boundary=@var{num} @gol\n -mcld  -mcx16  -msahf  -mmovbe  -mcrc32 @gol\n -mrecip  -mrecip=@var{opt} @gol\n--mvzeroupper  -mprefer-avx128 -mprefer-avx256 @gol\n+-mvzeroupper  -mprefer-avx128 -mprefer-vector-width=@var{opt} @gol\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl @gol\n -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes @gol\n@@ -26095,10 +26095,24 @@ intrinsics.\n This option instructs GCC to use 128-bit AVX instructions instead of\n 256-bit AVX instructions in the auto-vectorizer.\n \n-@item -mprefer-avx256\n-@opindex mprefer-avx256\n-This option instructs GCC to use 256-bit AVX instructions instead of\n-512-bit AVX instructions in the auto-vectorizer.\n+@item -mprefer-vector-width=@var{opt}\n+@opindex mprefer-vector-width\n+This option instructs GCC to use @var{opt}-bit vector width in instructions\n+instead of default on the selected platform.\n+\n+@table @samp\n+@item none\n+No extra limitations applied to GCC other than defined by the selected platform.\n+\n+@item 128\n+Prefer 128-bit vector width for instructions.\n+\n+@item 256\n+Prefer 256-bit vector width for instructions.\n+\n+@item 512\n+Prefer 512-bit vector width for instructions.\n+@end table\n \n @item -mcx16\n @opindex mcx16"}, {"sha": "a793d57ff71a53e85d940cf3eeeecd6666b177f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1,3 +1,12 @@\n+2017-11-21  Sergey Shalnov  <Sergey.Shalnov@intel.com>\n+\n+\t* g++.dg/ext/pr57362.C (__attribute__): Test\n+\tprefer-vector-width=[128|256] target attribute.\n+\t* gcc.target/i386/avx512f-constant-float-return.c (dg-optioins):\n+\tUse -mprefer-vector-width=256 instead of -mprefer-avx256.\n+\t* gcc.target/i386/avx512f-prefer.c: Ditto.\n+\t* gcc.target/i386/pr82460-2.c: Ditto.\n+\n 2017-11-21  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/cpp0x/constexpr-48089.C: Add quotes for constexpr"}, {"sha": "07270946d558ad4e43f1ce4749c12eeedebfb9a4", "filename": "gcc/testsuite/g++.dg/ext/pr57362.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57362.C?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -81,7 +81,9 @@ __attribute__((target(\"dispatch-scheduler\")))\n int foo(void) { return 1; }\n __attribute__((target(\"prefer-avx128\")))\n int foo(void) { return 1; }\n-__attribute__((target(\"prefer-avx256\")))\n+__attribute__((target(\"prefer-vector-width=128\")))\n+int foo(void) { return 1; }\n+__attribute__((target(\"prefer-vector-width=256\")))\n int foo(void) { return 1; }\n __attribute__((target(\"32\")))\n int foo(void) { return 1; }"}, {"sha": "ed0becce61aab1c13720bdad007132b5a1c2a8eb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-constant-float-return.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-float-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-float-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-constant-float-return.c?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -march=skylake-avx512 -mprefer-avx256\" } */\n+/* { dg-options \"-O3 -march=skylake-avx512 -mprefer-vector-width=256\" } */\n /* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n \n float"}, {"sha": "a74ce0754be337b1eddfc15ea3a71511e61b789f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-prefer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-prefer.c?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -march=skylake-avx512 -mprefer-avx256\" } */\n+/* { dg-options \"-O3 -march=skylake-avx512 -mprefer-vector-width=256\" } */\n /* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n /* { dg-final { scan-assembler \"vmulpd\" } } */\n "}, {"sha": "4a45beed715e2cb4efa63386bc525545b71c1e37", "filename": "gcc/testsuite/gcc.target/i386/pr82460-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c?ref=ab2c4ec8dcbe5d0b93d0250abd42ff9fb791e0b6", "patch": "@@ -1,6 +1,6 @@\n /* PR target/82460 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -mavx512vbmi -mno-prefer-avx256\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512vbmi -mprefer-vector-width=none\" } */\n /* We want to reuse the permutation mask in the loop, so use vpermt2b rather\n    than vpermi2b.  */\n /* { dg-final { scan-assembler-not {\\mvpermi2b\\M} } } */"}]}