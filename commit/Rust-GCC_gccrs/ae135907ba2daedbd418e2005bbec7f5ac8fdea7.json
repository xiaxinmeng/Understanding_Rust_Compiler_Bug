{"sha": "ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxMzU5MDdiYTJkYWVkYmQ0MThlMjAwNWJiZWM3ZjVhYzhmZGVhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-11T19:03:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-11T19:03:04Z"}, "message": "re PR go/56171 (syscall FAILs on Solaris)\n\n\tPR go/56171\nlibgo: Solaris portability for syscall package.\n\nFrom Rainer Orth.\n\nFrom-SVN: r195950", "tree": {"sha": "8442409122a3f268afaf51bfa543154af6dbc04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8442409122a3f268afaf51bfa543154af6dbc04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/comments", "author": null, "committer": null, "parents": [{"sha": "cc999d030035b7ad8cda2a1743f3cc4f76fede00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc999d030035b7ad8cda2a1743f3cc4f76fede00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc999d030035b7ad8cda2a1743f3cc4f76fede00"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "c153ae22227d75ee2b269743112965ccc9e5bed4", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "patch": "@@ -1997,7 +1997,7 @@ GOTESTFLAGS =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(MATH_LIBS) $(NET_LIBS)\"; \\\n+\tGOLIBS=\"$(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\"}, {"sha": "c74c4f624030fc6c9932377f9c6b59f9c04b0ffb", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "patch": "@@ -2114,7 +2114,7 @@ GOTESTFLAGS =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(MATH_LIBS) $(NET_LIBS)\"; \\\n+\tGOLIBS=\"$(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\"}, {"sha": "e1d37dc2d7b2f6b02594b7a0f08d4e65070e279b", "filename": "libgo/configure", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "patch": "@@ -14211,6 +14211,62 @@ ac_res=$ac_cv_search_sched_yield\n if test \"$ac_res\" != no; then :\n   test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n \n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing nanosleep\" >&5\n+$as_echo_n \"checking for library containing nanosleep... \" >&6; }\n+if test \"${ac_cv_search_nanosleep+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char nanosleep ();\n+int\n+main ()\n+{\n+return nanosleep ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' rt; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_nanosleep=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if test \"${ac_cv_search_nanosleep+set}\" = set; then :\n+  break\n+fi\n+done\n+if test \"${ac_cv_search_nanosleep+set}\" = set; then :\n+\n+else\n+  ac_cv_search_nanosleep=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_nanosleep\" >&5\n+$as_echo \"$ac_cv_search_nanosleep\" >&6; }\n+ac_res=$ac_cv_search_nanosleep\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n fi\n \n "}, {"sha": "58cc045734cd69193a4bd5c125296694e781085f", "filename": "libgo/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "patch": "@@ -413,8 +413,9 @@ PTHREAD_LIBS=\n AC_CHECK_LIB([pthread], [pthread_create], PTHREAD_LIBS=-lpthread)\n AC_SUBST(PTHREAD_LIBS)\n \n-dnl Test if -lrt is required for sched_yield.\n+dnl Test if -lrt is required for sched_yield and/or nanosleep.\n AC_SEARCH_LIBS([sched_yield], [rt])\n+AC_SEARCH_LIBS([nanosleep], [rt])\n \n AC_C_BIGENDIAN\n "}, {"sha": "11bcb257a94a6118d7e1c52d9f5b84a957edcc68", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae135907ba2daedbd418e2005bbec7f5ac8fdea7/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=ae135907ba2daedbd418e2005bbec7f5ac8fdea7", "patch": "@@ -309,6 +309,13 @@ for m in SOCK_CLOEXEC SOCK_NONBLOCK; do\n   fi\n done\n \n+# The syscall package requires AF_LOCAL.\n+if ! grep '^const AF_LOCAL ' ${OUT} >/dev/null 2>&1; then\n+  if grep '^const AF_UNIX ' ${OUT} >/dev/null 2>&1; then\n+    echo \"const AF_LOCAL = AF_UNIX\" >> ${OUT}\n+  fi\n+fi\n+\n # pathconf constants.\n grep '^const __PC' gen-sysinfo.go |\n   sed -e 's/^\\(const \\)__\\(PC[^= ]*\\)\\(.*\\)$/\\1\\2 = __\\2/' >> ${OUT}"}]}