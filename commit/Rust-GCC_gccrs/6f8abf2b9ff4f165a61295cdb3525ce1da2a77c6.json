{"sha": "6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "node_id": "C_kwDOANBUbNoAKDZmOGFiZjJiOWZmNGYxNjVhNjEyOTVjZGIzNTI1Y2UxZGEyYTc3YzY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-10T09:22:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-10T09:22:27Z"}, "message": "rs6000: Fix up __SIZEOF_{FLOAT,IBM}128__ defines [PR99708]\n\nAs mentioned in the PR, right now on powerpc* __SIZEOF_{FLOAT,IBM}128__\nmacros are predefined unconditionally, because {ieee,ibm}128_float_type_node\nis always non-NULL, doesn't reflect whether __ieee128 or __ibm128 are\nactually supported or not.\n\nBased on patch review discussions, the following patch:\n1) allows __ibm128 to be used in the sources even when !TARGET_FLOAT128_TYPE,\n   as long as long double is double double\n2) ensures ibm128_float_type_node is non-NULL only if __ibm128 is supported\n3) ensures ieee128_float_type_node is non-NULL only if __ieee128 is supported\n   (aka when TARGET_FLOAT128_TYPE)\n4) predefines __SIZEOF_IBM128__ only when ibm128_float_type_node != NULL\n5) newly predefines __SIZEOF_IEEE128__ if ieee128_float_type_node != NULL\n6) predefines __SIZEOF_FLOAT128__ whenever ieee128_float_type_node != NULL\n   and __float128 macro is predefined to __ieee128\n7) removes ptr_*128_float_type_node which nothing uses\n8) in order not to ICE during builtin initialization when\n   ibm128_float_type_node == NULL, uses long_double_type_node as fallback\n   for the __builtin_{,un}pack_ibm128 builtins\n9) errors when those builtins are called used when\n   ibm128_float_type_node == NULL (during their expansion)\n10) moves the {,un}packif -> {,un}packtf remapping for these builtins in\n    expansion earlier, so that we don't ICE on them if not -mabi=ieeelongdouble\n\n2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99708\n\t* config/rs6000/rs6000.h (enum rs6000_builtin_type_index): Remove\n\tRS6000_BTI_ptr_ieee128_float and RS6000_BTI_ptr_ibm128_float.\n\t(ptr_ieee128_float_type_node, ptr_ibm128_float_type_node): Remove.\n\t* config/rs6000/rs6000-builtin.cc (rs6000_type_string): Return\n\t\"**NULL**\" if type_node is NULL first.  Handle\n\tieee128_float_type_node.\n\t(rs6000_init_builtins): Don't initialize ptr_ieee128_float_type_node\n\tand ptr_ibm128_float_type_node.  Set ibm128_float_type_node and\n\tieee128_float_type_node to NULL rather than long_double_type_node if\n\tthey aren't supported.  Do support __ibm128 even if\n\t!TARGET_FLOAT128_TYPE when long double is double double.\n\t(rs6000_expand_builtin): Error if bif_is_ibm128 and\n\t!ibm128_float_type_node.  Remap RS6000_BIF_{,UN}PACK_IF to\n\tRS6000_BIF_{,UN}PACK_TF much earlier and only use bif_is_ibm128 check\n\tfor it.\n\t* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros): Define\n\t__SIZEOF_FLOAT128__ here and only iff __float128 macro is defined.\n\t(rs6000_cpu_cpp_builtins): Don't define __SIZEOF_FLOAT128__ here.\n\tDefine __SIZEOF_IBM128__=16 if ieee128_float_type_node is non-NULL.\n\tFormatting fix.\n\t* config/rs6000/rs6000-gen-builtins.cc: Document ibm128 attribute.\n\t(struct attrinfo): Add isibm128 member.\n\t(TYPE_MAP_SIZE): Remove.\n\t(type_map): Use [] instead of [TYPE_MAP_SIZE].  For \"if\" use\n\tibm128_float_type_node only if it is non-NULL, otherwise fall back\n\tto long_double_type_node.  Remove \"pif\" entry.\n\t(parse_bif_attrs): Handle ibm128 attribute and print it for debugging.\n\t(write_decls): Output bif_ibm128_bit and bif_is_ibm128.\n\t(write_type_node): Use sizeof type_map / sizeof type_map[0]\n\tinstead of TYPE_MAP_SIZE.\n\t(write_bif_static_init): Handle isibm128.\n\t* config/rs6000/rs6000-builtins.def: Document ibm128 attribute.\n\t(__builtin_pack_ibm128, __builtin_unpack_ibm128): Add ibm128\n\tattribute.\n\n\t* gcc.dg/pr99708.c: New test.\n\t* gcc.target/powerpc/pr99708-2.c: New test.\n\t* gcc.target/powerpc/convert-fp-128.c (mode_kf): Define only if\n\t__FLOAT128_TYPE__ is defined.", "tree": {"sha": "0358a181a3cc5f644433d25ba05c8d3560d8e81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0358a181a3cc5f644433d25ba05c8d3560d8e81e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff060ef08cfc3e48e70071cb63449b62a86f9d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff060ef08cfc3e48e70071cb63449b62a86f9d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff060ef08cfc3e48e70071cb63449b62a86f9d6f"}], "stats": {"total": 136, "additions": 96, "deletions": 40}, "files": [{"sha": "e925ba9fad9cce1c8cfafc91a0773251fa7bc73a", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -402,7 +402,9 @@ rs6000_vector_type (const char *name, tree elt_type, unsigned num_elts)\n static\n const char *rs6000_type_string (tree type_node)\n {\n-  if (type_node == void_type_node)\n+  if (type_node == NULL_TREE)\n+    return \"**NULL**\";\n+  else if (type_node == void_type_node)\n     return \"void\";\n   else if (type_node == long_integer_type_node)\n     return \"long\";\n@@ -432,6 +434,8 @@ const char *rs6000_type_string (tree type_node)\n     return \"ss\";\n   else if (type_node == ibm128_float_type_node)\n     return \"__ibm128\";\n+  else if (type_node == ieee128_float_type_node)\n+    return \"__ieee128\";\n   else if (type_node == opaque_V4SI_type_node)\n     return \"opaque\";\n   else if (POINTER_TYPE_P (type_node))\n@@ -709,9 +713,9 @@ rs6000_init_builtins (void)\n      For IEEE 128-bit floating point, always create the type __ieee128.  If the\n      user used -mfloat128, rs6000-c.cc will create a define from __float128 to\n      __ieee128.  */\n-  if (TARGET_FLOAT128_TYPE)\n+  if (TARGET_LONG_DOUBLE_128 && (!TARGET_IEEEQUAD || TARGET_FLOAT128_TYPE))\n     {\n-      if (!TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128)\n+      if (!TARGET_IEEEQUAD)\n \tibm128_float_type_node = long_double_type_node;\n       else\n \t{\n@@ -721,22 +725,24 @@ rs6000_init_builtins (void)\n \t  layout_type (ibm128_float_type_node);\n \t}\n       t = build_qualified_type (ibm128_float_type_node, TYPE_QUAL_CONST);\n-      ptr_ibm128_float_type_node = build_pointer_type (t);\n       lang_hooks.types.register_builtin_type (ibm128_float_type_node,\n \t\t\t\t\t      \"__ibm128\");\n+    }\n+  else\n+    ibm128_float_type_node = NULL_TREE;\n \n+  if (TARGET_FLOAT128_TYPE)\n+    {\n       if (TARGET_IEEEQUAD && TARGET_LONG_DOUBLE_128)\n \tieee128_float_type_node = long_double_type_node;\n       else\n \tieee128_float_type_node = float128_type_node;\n       t = build_qualified_type (ieee128_float_type_node, TYPE_QUAL_CONST);\n-      ptr_ieee128_float_type_node = build_pointer_type (t);\n       lang_hooks.types.register_builtin_type (ieee128_float_type_node,\n \t\t\t\t\t      \"__ieee128\");\n     }\n-\n   else\n-    ieee128_float_type_node = ibm128_float_type_node = long_double_type_node;\n+    ieee128_float_type_node = NULL_TREE;\n \n   /* Vector pair and vector quad support.  */\n   vector_pair_type_node = make_node (OPAQUE_TYPE);\n@@ -3418,6 +3424,13 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n       return const0_rtx;\n     }\n \n+  if (bif_is_ibm128 (*bifaddr) && !ibm128_float_type_node)\n+    {\n+      error (\"%qs requires %<__ibm128%> type support\",\n+\t     bifaddr->bifname);\n+      return const0_rtx;\n+    }\n+\n   if (bif_is_cpu (*bifaddr))\n     return cpu_expand_builtin (fcode, exp, target);\n \n@@ -3498,6 +3511,21 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n \tgcc_unreachable ();\n     }\n \n+  if (bif_is_ibm128 (*bifaddr) && TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD)\n+    {\n+      if (fcode == RS6000_BIF_PACK_IF)\n+\t{\n+\t  icode = CODE_FOR_packtf;\n+\t  fcode = RS6000_BIF_PACK_TF;\n+\t  uns_fcode = (size_t) fcode;\n+\t}\n+      else if (fcode == RS6000_BIF_UNPACK_IF)\n+\t{\n+\t  icode = CODE_FOR_unpacktf;\n+\t  fcode = RS6000_BIF_UNPACK_TF;\n+\t  uns_fcode = (size_t) fcode;\n+\t}\n+    }\n \n   /* TRUE iff the built-in function returns void.  */\n   bool void_func = TREE_TYPE (TREE_TYPE (fndecl)) == void_type_node;\n@@ -3642,23 +3670,6 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n   if (bif_is_mma (*bifaddr))\n     return mma_expand_builtin (exp, target, icode, fcode);\n \n-  if (fcode == RS6000_BIF_PACK_IF\n-      && TARGET_LONG_DOUBLE_128\n-      && !TARGET_IEEEQUAD)\n-    {\n-      icode = CODE_FOR_packtf;\n-      fcode = RS6000_BIF_PACK_TF;\n-      uns_fcode = (size_t) fcode;\n-    }\n-  else if (fcode == RS6000_BIF_UNPACK_IF\n-\t   && TARGET_LONG_DOUBLE_128\n-\t   && !TARGET_IEEEQUAD)\n-    {\n-      icode = CODE_FOR_unpacktf;\n-      fcode = RS6000_BIF_UNPACK_TF;\n-      uns_fcode = (size_t) fcode;\n-    }\n-\n   if (TREE_TYPE (TREE_TYPE (fndecl)) == void_type_node)\n     target = NULL_RTX;\n   else if (target == 0"}, {"sha": "221bbc7ee6afea07498fd38468c895b062977c0d", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -138,6 +138,7 @@\n ;   lxvrze   Needs special handling for load-rightmost, zero-extended\n ;   endian   Needs special handling for endianness\n ;   ibmld    Restrict usage to the case when TFmode is IBM-128\n+;   ibm128   Restrict usage to the case where __ibm128 is supported or if ibmld\n ;\n ; Each attribute corresponds to extra processing required when\n ; the built-in is expanded.  All such special processing should\n@@ -234,13 +235,13 @@\n     MTFSF rs6000_mtfsf {}\n \n   const __ibm128 __builtin_pack_ibm128 (double, double);\n-    PACK_IF packif {}\n+    PACK_IF packif {ibm128}\n \n   void __builtin_set_fpscr_rn (const int[0,3]);\n     SET_FPSCR_RN rs6000_set_fpscr_rn {}\n \n   const double __builtin_unpack_ibm128 (__ibm128, const int<1>);\n-    UNPACK_IF unpackif {}\n+    UNPACK_IF unpackif {ibm128}\n \n ; This is redundant with __builtin_unpack_ibm128, as it requires long\n ; double to be __ibm128.  Should probably be deprecated."}, {"sha": "3b62b499df2d441d11556306143a83d8699ab194", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -584,6 +584,10 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n \trs6000_define_or_undefine_macro (true, \"__float128=__ieee128\");\n       else\n \trs6000_define_or_undefine_macro (false, \"__float128\");\n+      if (ieee128_float_type_node && define_p)\n+\trs6000_define_or_undefine_macro (true, \"__SIZEOF_FLOAT128__=16\");\n+      else\n+\trs6000_define_or_undefine_macro (false, \"__SIZEOF_FLOAT128__\");\n     }\n   /* OPTION_MASK_FLOAT128_HARDWARE can be turned on if -mcpu=power9 is used or\n      via the target attribute/pragma.  */\n@@ -623,11 +627,11 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   if (TARGET_FRSQRTES)\n     builtin_define (\"__RSQRTEF__\");\n   if (TARGET_FLOAT128_TYPE)\n-      builtin_define (\"__FLOAT128_TYPE__\");\n+    builtin_define (\"__FLOAT128_TYPE__\");\n   if (ibm128_float_type_node)\n     builtin_define (\"__SIZEOF_IBM128__=16\");\n   if (ieee128_float_type_node)\n-    builtin_define (\"__SIZEOF_FLOAT128__=16\");\n+    builtin_define (\"__SIZEOF_IEEE128__=16\");\n #ifdef TARGET_LIBC_PROVIDES_HWCAP_IN_TCB\n   builtin_define (\"__BUILTIN_CPU_SUPPORTS__\");\n #endif"}, {"sha": "0bd7a535e5f529f976b65e49f3d2982a8774277b", "filename": "gcc/config/rs6000/rs6000-gen-builtins.cc", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -93,6 +93,8 @@ along with GCC; see the file COPYING3.  If not see\n      lxvrze   Needs special handling for load-rightmost, zero-extended\n      endian   Needs special handling for endianness\n      ibmld    Restrict usage to the case when TFmode is IBM-128\n+     ibm128   Restrict usage to the case where __ibm128 is supported or\n+              if ibmld\n \n    An example stanza might look like this:\n \n@@ -392,6 +394,7 @@ struct attrinfo\n   bool islxvrze;\n   bool isendian;\n   bool isibmld;\n+  bool isibm128;\n };\n \n /* Fields associated with a function prototype (bif or overload).  */\n@@ -492,8 +495,7 @@ struct typemap\n    maps tokens from a fntype string to a tree type.  For example,\n    in \"si_ftype_hi\" we would map \"si\" to \"intSI_type_node\" and\n    map \"hi\" to \"intHI_type_node\".  */\n-#define TYPE_MAP_SIZE 86\n-static typemap type_map[TYPE_MAP_SIZE] =\n+static typemap type_map[] =\n   {\n     { \"bi\",\t\t\"bool_int\" },\n     { \"bv16qi\",\t\t\"bool_V16QI\" },\n@@ -506,7 +508,9 @@ static typemap type_map[TYPE_MAP_SIZE] =\n     { \"df\",\t\t\"double\" },\n     { \"di\",\t\t\"long_long_integer\" },\n     { \"hi\",\t\t\"intHI\" },\n-    { \"if\",\t\t\"ibm128_float\" },\n+    { \"if\",\t\t\"ibm128_float_type_node \"\n+\t\t\t\"? ibm128_float_type_node \"\n+\t\t\t\": long_double\" },\n     { \"ld\",\t\t\"long_double\" },\n     { \"lg\",\t\t\"long_integer\" },\n     { \"pbv16qi\",\t\"ptr_bool_V16QI\" },\n@@ -519,7 +523,6 @@ static typemap type_map[TYPE_MAP_SIZE] =\n     { \"pdf\",\t\t\"ptr_double\" },\n     { \"pdi\",\t\t\"ptr_long_long_integer\" },\n     { \"phi\",\t\t\"ptr_intHI\" },\n-    { \"pif\",\t\t\"ptr_ibm128_float\" },\n     { \"pld\",\t\t\"ptr_long_double\" },\n     { \"plg\",\t\t\"ptr_long_integer\" },\n     { \"pqi\",\t\t\"ptr_intQI\" },\n@@ -1439,6 +1442,8 @@ parse_bif_attrs (attrinfo *attrptr)\n \t  attrptr->isendian = 1;\n \telse if (!strcmp (attrname, \"ibmld\"))\n \t  attrptr->isibmld = 1;\n+\telse if (!strcmp (attrname, \"ibm128\"))\n+\t  attrptr->isibm128 = 1;\n \telse\n \t  {\n \t    diag (oldpos, \"unknown attribute.\\n\");\n@@ -1472,14 +1477,15 @@ parse_bif_attrs (attrinfo *attrptr)\n \t\"ldvec = %d, stvec = %d, reve = %d, pred = %d, htm = %d, \"\n \t\"htmspr = %d, htmcr = %d, mma = %d, quad = %d, pair = %d, \"\n \t\"mmaint = %d, no32bit = %d, 32bit = %d, cpu = %d, ldstmask = %d, \"\n-\t\"lxvrse = %d, lxvrze = %d, endian = %d, ibmdld= %d.\\n\",\n+\t\"lxvrse = %d, lxvrze = %d, endian = %d, ibmdld = %d, ibm128 = %d.\\n\",\n \tattrptr->isinit, attrptr->isset, attrptr->isextract,\n \tattrptr->isnosoft, attrptr->isldvec, attrptr->isstvec,\n \tattrptr->isreve, attrptr->ispred, attrptr->ishtm, attrptr->ishtmspr,\n \tattrptr->ishtmcr, attrptr->ismma, attrptr->isquad, attrptr->ispair,\n \tattrptr->ismmaint, attrptr->isno32bit, attrptr->is32bit,\n \tattrptr->iscpu, attrptr->isldstmask, attrptr->islxvrse,\n-\tattrptr->islxvrze, attrptr->isendian, attrptr->isibmld);\n+\tattrptr->islxvrze, attrptr->isendian, attrptr->isibmld,\n+\tattrptr->isibm128);\n #endif\n \n   return PC_OK;\n@@ -2294,6 +2300,7 @@ write_decls (void)\n   fprintf (header_file, \"#define bif_lxvrze_bit\\t\\t(0x00100000)\\n\");\n   fprintf (header_file, \"#define bif_endian_bit\\t\\t(0x00200000)\\n\");\n   fprintf (header_file, \"#define bif_ibmld_bit\\t\\t(0x00400000)\\n\");\n+  fprintf (header_file, \"#define bif_ibm128_bit\\t\\t(0x00800000)\\n\");\n   fprintf (header_file, \"\\n\");\n   fprintf (header_file,\n \t   \"#define bif_is_init(x)\\t\\t((x).bifattrs & bif_init_bit)\\n\");\n@@ -2341,6 +2348,8 @@ write_decls (void)\n \t   \"#define bif_is_endian(x)\\t((x).bifattrs & bif_endian_bit)\\n\");\n   fprintf (header_file,\n \t   \"#define bif_is_ibmld(x)\\t((x).bifattrs & bif_ibmld_bit)\\n\");\n+  fprintf (header_file,\n+\t   \"#define bif_is_ibm128(x)\\t((x).bifattrs & bif_ibm128_bit)\\n\");\n   fprintf (header_file, \"\\n\");\n \n   fprintf (header_file,\n@@ -2385,8 +2394,10 @@ write_type_node (char *tok, bool indent)\n {\n   if (indent)\n     fprintf (init_file, \"  \");\n-  typemap *entry = (typemap *) bsearch (tok, type_map, TYPE_MAP_SIZE,\n-\t\t\t\t\tsizeof (typemap), typemap_cmp);\n+  typemap *entry\n+    = (typemap *) bsearch (tok, type_map,\n+\t\t\t   sizeof type_map / sizeof type_map[0],\n+\t\t\t   sizeof (typemap), typemap_cmp);\n   if (!entry)\n     fatal (\"Type map is inconsistent.\");\n   fprintf (init_file, \"%s_type_node\", entry->value);\n@@ -2535,6 +2546,8 @@ write_bif_static_init (void)\n \tfprintf (init_file, \" | bif_endian_bit\");\n       if (bifp->attrs.isibmld)\n \tfprintf (init_file, \" | bif_ibmld_bit\");\n+      if (bifp->attrs.isibm128)\n+\tfprintf (init_file, \" | bif_ibm128_bit\");\n       fprintf (init_file, \",\\n\");\n       fprintf (init_file, \"      /* restr_opnd */\\t{%d, %d, %d},\\n\",\n \t       bifp->proto.restr_opnd[0], bifp->proto.restr_opnd[1],"}, {"sha": "523256a5c9d5c47f5f76f148fd2cf80aa6913cf6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -2444,8 +2444,6 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_ptr_long_double,\n   RS6000_BTI_ptr_dfloat64,\n   RS6000_BTI_ptr_dfloat128,\n-  RS6000_BTI_ptr_ieee128_float,\n-  RS6000_BTI_ptr_ibm128_float,\n   RS6000_BTI_ptr_vector_pair,\n   RS6000_BTI_ptr_vector_quad,\n   RS6000_BTI_ptr_long_long,\n@@ -2541,8 +2539,6 @@ enum rs6000_builtin_type_index\n #define ptr_long_double_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_double])\n #define ptr_dfloat64_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_dfloat64])\n #define ptr_dfloat128_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ptr_dfloat128])\n-#define ptr_ieee128_float_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_ieee128_float])\n-#define ptr_ibm128_float_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_ibm128_float])\n #define ptr_vector_pair_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_vector_pair])\n #define ptr_vector_quad_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_vector_quad])\n #define ptr_long_long_integer_type_node\t (rs6000_builtin_types[RS6000_BTI_ptr_long_long])"}, {"sha": "b1eaf13308988c6be5928a6fd9841a8a845d220b", "filename": "gcc/testsuite/gcc.dg/pr99708.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99708.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99708.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99708.c?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/99708 */\n+/* { dg-do compile } */\n+\n+#ifdef __SIZEOF_FLOAT128__\n+__float128 f = 1.0;\n+#endif\n+long double l = 1.0;"}, {"sha": "3e473342a2cf0ced8203bc3da5f625a38605a52a", "filename": "gcc/testsuite/gcc.target/powerpc/convert-fp-128.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -7,7 +7,9 @@\n #define mode_sf float\n #define mode_df double\n typedef float __attribute__((mode(IF))) mode_if;\n+#ifdef __FLOAT128_TYPE__\n typedef float __attribute__((mode(KF))) mode_kf;\n+#endif\n #define mode_sd _Decimal32\n #define mode_dd _Decimal64\n #define mode_td _Decimal128"}, {"sha": "e6f9358e313a97639f66e8e241cbd1319c40044a", "filename": "gcc/testsuite/gcc.target/powerpc/pr99708-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708-2.c?ref=6f8abf2b9ff4f165a61295cdb3525ce1da2a77c6", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/99708 */\n+/* { dg-do compile } */\n+\n+#ifdef __SIZEOF_IBM128__\n+__ibm128 f = 1.0;\n+#endif\n+#ifdef __SIZEOF_IEEE128__\n+__ieee128 g = 1.0;\n+#endif\n+long double h = 1.0;\n+\n+void\n+foo (void)\n+{\n+#ifdef __SIZEOF_IBM128__\n+  f += 2.0;\n+#endif\n+#ifdef __SIZEOF_IEEE128__\n+  g += 2.0;\n+#endif\n+  h += 2.0;\n+}"}]}