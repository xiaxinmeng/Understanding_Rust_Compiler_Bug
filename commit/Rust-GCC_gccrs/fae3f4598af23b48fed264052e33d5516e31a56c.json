{"sha": "fae3f4598af23b48fed264052e33d5516e31a56c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlM2Y0NTk4YWYyM2I0OGZlZDI2NDA1MmUzM2Q1NTE2ZTMxYTU2Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-16T00:41:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-16T00:41:33Z"}, "message": "tuple (make_tuple, [...]): Declare constexpr.\n\n2011-09-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (make_tuple, forward_as_tuple): Declare constexpr.\n\t(_Tuple_impl<>::_Tuple_impl(_Tuple_impl<>&&)): Likewise.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Enable\n\tmake_tuple test.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n\tline number.\n\nFrom-SVN: r178904", "tree": {"sha": "bab2ad9f8a527f32cd95ea64e678e5970b52e1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab2ad9f8a527f32cd95ea64e678e5970b52e1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae3f4598af23b48fed264052e33d5516e31a56c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae3f4598af23b48fed264052e33d5516e31a56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae3f4598af23b48fed264052e33d5516e31a56c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae3f4598af23b48fed264052e33d5516e31a56c/comments", "author": null, "committer": null, "parents": [{"sha": "867e710a8da6a9752dc3561bb890b589fc8655dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867e710a8da6a9752dc3561bb890b589fc8655dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867e710a8da6a9752dc3561bb890b589fc8655dc"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "9b334570b975b1f50da889eecce84d810483e614", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fae3f4598af23b48fed264052e33d5516e31a56c", "patch": "@@ -1,3 +1,12 @@\n+2011-09-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (make_tuple, forward_as_tuple): Declare constexpr.\n+\t(_Tuple_impl<>::_Tuple_impl(_Tuple_impl<>&&)): Likewise.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Enable\n+\tmake_tuple test.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n+\tline number.\n+\n 2011-09-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -13,7 +22,7 @@\n \tLikewise.\n \n 2011-09-13  Paul Brook  <paul@codesourcery.com>\n- \n+\n \t* libsupc++/eh_arm.cc (__cxa_end_cleanup): Add C6X implementation.\n \t* libsupc++/eh_call.cc (__cxa_call_unexpected): Set rtti_base.\n \t* libsupc++/eh_personality.cc (NO_SIZE_OF_ENCODED_VALUE): Remove"}, {"sha": "51be289d506d1bc970d2dfa72f09841b2445aaa3", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=fae3f4598af23b48fed264052e33d5516e31a56c", "patch": "@@ -273,6 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n+      constexpr\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(__and_<is_nothrow_move_constructible<_Head>,\n \t              is_nothrow_move_constructible<_Inherited>>::value)\n@@ -285,9 +286,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n \n       template<typename _UHead, typename... _UTails>\n-        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n-\t  : _Inherited(std::move\n-\t\t       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n+        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n+\t: _Inherited(std::move\n+\t\t     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n \t  _Base(std::forward<_UHead>\n \t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n@@ -580,7 +581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _U1, typename _U2, typename = typename\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n-         constexpr tuple(pair<_U1, _U2>&& __in)\n+        constexpr tuple(pair<_U1, _U2>&& __in)\n \t: _Inherited(std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n@@ -872,7 +873,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // NB: DR 705.\n   template<typename... _Elements>\n-    inline tuple<typename __decay_and_strip<_Elements>::__type...>\n+    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>\n     make_tuple(_Elements&&... __args)\n     {\n       typedef tuple<typename __decay_and_strip<_Elements>::__type...>\n@@ -881,7 +882,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename... _Elements>\n-    inline tuple<_Elements&&...>\n+    constexpr tuple<_Elements&&...>\n     forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n "}, {"sha": "dcf6fe7d41046d5099ce903cd9cf3269b339f00f", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=fae3f4598af23b48fed264052e33d5516e31a56c", "patch": "@@ -29,7 +29,6 @@ bool test __attribute__((unused)) = true;\n \n \n // make_tuple\n-#if 0\n void\n test_make_tuple()\n {\n@@ -43,7 +42,6 @@ test_make_tuple()\n     constexpr tuple_type p1 = std::make_tuple(22, 22.222, 77799);\n   }\n }\n-#endif\n \n // get\n void\n@@ -77,10 +75,7 @@ test_tuple_cat()\n int\n main()\n {\n-#if 0\n   test_make_tuple();\n-#endif\n-\n   test_get();\n   test_tuple_cat();\n "}, {"sha": "a3abadf4622fcf098cd1514f00c0bd9cff32ba4c", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae3f4598af23b48fed264052e33d5516e31a56c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=fae3f4598af23b48fed264052e33d5516e31a56c", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 468 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 840 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 841 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}]}