{"sha": "5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzNGU5Y2QwNzIzYzE1MDViNGY4ZmI0Y2U2ODVkZjA4MmQ2ZDI4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T07:52:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T07:52:00Z"}, "message": "[multiple changes]\n\n2011-08-03  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads, exp_aggr.adb, exp_ch3.adb: Minor reformatting.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): if a constant object of an\n\tunconstrained type with discriminants is initialized with an aggregate,\n\tuse the constrained subtype of the aggregate as the type of the object,\n\tbecause it is immutable, and this allows the back-end to generate no\n\tcode for the object declaration.\n\nFrom-SVN: r177234", "tree": {"sha": "f96a1d18e1787933e4a5ad3945c90de04682aaa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96a1d18e1787933e4a5ad3945c90de04682aaa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/comments", "author": null, "committer": null, "parents": [{"sha": "abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcd9db2c8326a00f5d08d7ce08a382eb9b17120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcd9db2c8326a00f5d08d7ce08a382eb9b17120"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "47ec9bf44f76003e6748b10d6b39af5e7227024b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "patch": "@@ -1,3 +1,15 @@\n+2011-08-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads, exp_aggr.adb, exp_ch3.adb: Minor reformatting.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): if a constant object of an\n+\tunconstrained type with discriminants is initialized with an aggregate,\n+\tuse the constrained subtype of the aggregate as the type of the object,\n+\tbecause it is immutable, and this allows the back-end to generate no\n+\tcode for the object declaration.\n+\n 2011-08-03  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb (Optimize_Length_Check): Fix bad handling of case where"}, {"sha": "7ff4b7a49b1dca6d37c1670a48267f96f6383423", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "patch": "@@ -308,23 +308,21 @@ package body Exp_Aggr is\n       Lov  : Uint;\n       Hiv  : Uint;\n \n-      --  The following constant determines the maximum size of an\n-      --  array aggregate produced by converting named to positional\n-      --  notation (e.g. from others clauses). This avoids running\n-      --  away with attempts to convert huge aggregates, which hit\n-      --  memory limits in the backend.\n-\n-      --  The normal limit is 5000, but we increase this limit to\n-      --  2**24 (about 16 million) if Restrictions (No_Elaboration_Code)\n-      --  or Restrictions (No_Implicit_Loops) is specified, since in\n-      --  either case, we are at risk of declaring the program illegal\n-      --  because of this limit.\n+      --  The following constant determines the maximum size of an array\n+      --  aggregate produced by converting named to positional notation (e.g.\n+      --  from others clauses). This avoids running away with attempts to\n+      --  convert huge aggregates, which hit memory limits in the backend.\n+\n+      --  The normal limit is 5000, but we increase this limit to 2**24 (about\n+      --  16 million) if Restrictions (No_Elaboration_Code) or Restrictions\n+      --  (No_Implicit_Loops) is specified, since in either case, we are at\n+      --  risk of declaring the program illegal because of this limit.\n \n       Max_Aggr_Size : constant Nat :=\n                         5000 + (2 ** 24 - 5000) *\n                           Boolean'Pos\n                             (Restriction_Active (No_Elaboration_Code)\n-                               or else\n+                              or else\n                              Restriction_Active (No_Implicit_Loops));\n \n       function Component_Count (T : Entity_Id) return Int;\n@@ -5458,10 +5456,11 @@ package body Exp_Aggr is\n                 New_Occurrence_Of\n                   (Node (First_Elmt (Access_Disp_Table (Typ))), Loc),\n               Parent_Expr => A);\n+\n+         --  No tag is needed in the case of a VM\n+\n          else\n-            --  No tag is needed in the case of a VM\n-            Expand_Record_Aggregate (N,\n-              Parent_Expr => A);\n+            Expand_Record_Aggregate (N, Parent_Expr => A);\n          end if;\n       end if;\n \n@@ -5646,17 +5645,17 @@ package body Exp_Aggr is\n             Set_Expansion_Delayed (N, False);\n          end if;\n \n-      --  Gigi doesn't handle properly temporaries of variable size\n-      --  so we generate it in the front-end\n+      --  Gigi doesn't properly handle temporaries of variable size so we\n+      --  generate it in the front-end\n \n       elsif not Size_Known_At_Compile_Time (Typ)\n         and then Tagged_Type_Expansion\n       then\n          Convert_To_Assignments (N, Typ);\n \n-      --  Temporaries for controlled aggregates need to be attached to a\n-      --  final chain in order to be properly finalized, so it has to\n-      --  be created in the front-end\n+      --  Temporaries for controlled aggregates need to be attached to a final\n+      --  chain in order to be properly finalized, so it has to be created in\n+      --  the front-end\n \n       elsif Is_Controlled (Typ)\n         or else Has_Controlled_Component (Base_Type (Typ))\n@@ -5695,9 +5694,14 @@ package body Exp_Aggr is\n       --  If some components are mutable, the size of the aggregate component\n       --  may be distinct from the default size of the type component, so\n       --  we need to expand to insure that the back-end copies the proper\n-      --  size of the data.\n+      --  size of the data. However, if the aggregate is the initial value of\n+      --  a constant, the target is immutable and may be built statically.\n \n-      elsif Has_Mutable_Components (Typ) then\n+      elsif Has_Mutable_Components (Typ)\n+        and then\n+          (Nkind (Parent (N)) /= N_Object_Declaration\n+             or else not Constant_Present (Parent (N)))\n+      then\n          Convert_To_Assignments (N, Typ);\n \n       --  If the type involved has any non-bit aligned components, then we are"}, {"sha": "f4e103facc593fa52133417f9b224c8c38eeb7a8", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "patch": "@@ -5011,8 +5011,7 @@ package body Exp_Ch3 is\n                Insert_Action (N,\n                  Make_Assignment_Statement (Loc,\n                    Name       => New_Reference_To (Def_Id, Loc),\n-                   Expression => Convert_To (Typ,\n-                                   Relocate_Node (Expr))));\n+                   Expression => Convert_To (Typ, Relocate_Node (Expr))));\n             end if;\n \n             return;"}, {"sha": "6a1e3e940ea8fb4efdd65104a1779abb9229bd71", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "patch": "@@ -3401,6 +3401,18 @@ package body Sem_Ch3 is\n          --  It is unclear why this should make it acceptable to gcc. ???\n \n          Remove_Side_Effects (E);\n+\n+      elsif not Is_Constrained (T)\n+        and then Has_Discriminants (T)\n+        and then Constant_Present (N)\n+        and then not Has_Unchecked_Union (T)\n+        and then Nkind (E) = N_Aggregate\n+      then\n+         --  If this is a constant declaration of an unconstrained type and\n+         --  the initialization is an aggregate, we can use the subtype of the\n+         --  aggregate for the declared entity because it is immutable.\n+\n+         Act_T := Etype (E);\n       end if;\n \n       --  Check No_Wide_Characters restriction"}, {"sha": "3d11069f476808c86ca27583e0904d3c50f536f2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c34e9cd0723c1505b4f8fb4ce685df082d6d286/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=5c34e9cd0723c1505b4f8fb4ce685df082d6d286", "patch": "@@ -279,15 +279,15 @@ package Sem_Util is\n \n    procedure Mark_Non_ALFA_Subprogram;\n    --  If Current_Subprogram is not Empty, mark either its specification or its\n-   --  body as not being in ALFA. This procedure may be called either during\n-   --  the analysis of a precondition or postcondition, as indicated by the\n-   --  flag In_Pre_Post_Expression, or during the analysis of a subprogram's\n-   --  body. In the first case, the specification of Current_Subprogram must be\n+   --  body as not being in ALFA. This procedure may be called during the\n+   --  analysis of a precondition or postcondition, as indicated by the flag\n+   --  In_Pre_Post_Expression, or during the analysis of a subprogram's body.\n+   --  In the first case, the specification of Current_Subprogram must be\n    --  marked as not being in ALFA, as the contract is considered to be part of\n    --  the specification, so that calls to this subprogram are not in ALFA. In\n    --  the second case, mark the body as not being in ALFA, which does not\n-   --  prevent the subprogram's specification, and calls to the subprogram, to\n-   --  be in ALFA.\n+   --  prevent the subprogram's specification, and calls to the subprogram,\n+   --  from being in ALFA.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the"}]}