{"sha": "6bc82793404b62c93b1544135e013db3e65c65cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjODI3OTM0MDRiNjJjOTNiMTU0NDEzNWUwMTNkYjNlNjVjNjVjZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-31T02:20:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-31T02:20:48Z"}, "message": "arm.c: Fix comment typos.\n\n\t* config/arm/arm.c: Fix comment typos.\n\t* config/arm/arm.h: Likewise.\n\t* config/arm/netbsd-elf.h: Likewise.\n\t* config/arm/netbsd.h: Likewise.\n\nFrom-SVN: r62171", "tree": {"sha": "f1c716d17675972f12c6155e590507e62e6ac5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c716d17675972f12c6155e590507e62e6ac5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc82793404b62c93b1544135e013db3e65c65cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc82793404b62c93b1544135e013db3e65c65cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc82793404b62c93b1544135e013db3e65c65cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc82793404b62c93b1544135e013db3e65c65cd/comments", "author": null, "committer": null, "parents": [{"sha": "f099d36039a910d1f796be9fe0bdd2edf626f759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f099d36039a910d1f796be9fe0bdd2edf626f759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f099d36039a910d1f796be9fe0bdd2edf626f759"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "ef3fed8e049c163d220d5ac8eb562fbb87e85e80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc82793404b62c93b1544135e013db3e65c65cd", "patch": "@@ -1,3 +1,10 @@\n+2003-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arm/arm.c: Fix comment typos.\n+\t* config/arm/arm.h: Likewise.\n+\t* config/arm/netbsd-elf.h: Likewise.\n+\t* config/arm/netbsd.h: Likewise.\n+\n 2003-01-30  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gengtype.c (struct walk_type_data): Add needs_cast_p."}, {"sha": "f9045993a8665d5b4a44ccb3b381bf969c4a56ca", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6bc82793404b62c93b1544135e013db3e65c65cd", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for ARM.\n-   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n@@ -267,7 +267,7 @@ int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n #define FL_THUMB      (1 << 6)        /* Thumb aware */\n #define FL_LDSCHED    (1 << 7)\t      /* Load scheduling necessary */\n #define FL_STRONG     (1 << 8)\t      /* StrongARM */\n-#define FL_ARCH5E     (1 << 9)        /* DSP extenstions to v5 */\n+#define FL_ARCH5E     (1 << 9)        /* DSP extensions to v5 */\n #define FL_XSCALE     (1 << 10)\t      /* XScale */\n \n /* The bits in this mask specify which\n@@ -1818,12 +1818,12 @@ arm_return_in_memory (type)\n       return (size < 0 || size > UNITS_PER_WORD);\n     }\n   \n-  /* For the arm-wince targets we choose to be compitable with Microsoft's\n+  /* For the arm-wince targets we choose to be compatible with Microsoft's\n      ARM and Thumb compilers, which always return aggregates in memory.  */\n #ifndef ARM_WINCE\n   /* All structures/unions bigger than one word are returned in memory.\n      Also catch the case where int_size_in_bytes returns -1.  In this case\n-     the aggregate is either huge or of varaible size, and in either case\n+     the aggregate is either huge or of variable size, and in either case\n      we will want to return it via memory and not in a register.  */\n   if (size < 0 || size > UNITS_PER_WORD)\n     return 1;\n@@ -2259,7 +2259,7 @@ arm_set_default_type_attributes (type)\n }\n \f\n /* Return 1 if the operand is a SYMBOL_REF for a function known to be\n-   defined within the current compilation unit.  If this caanot be\n+   defined within the current compilation unit.  If this cannot be\n    determined, then 0 is returned.  */\n \n static int\n@@ -3672,7 +3672,7 @@ arm_reload_memory_operand (op, mode)\n    memory access (architecture V4).\n    MODE is QImode if called when computing constraints, or VOIDmode when\n    emitting patterns.  In this latter case we cannot use memory_operand()\n-   because it will fail on badly formed MEMs, which is precisly what we are\n+   because it will fail on badly formed MEMs, which is precisely what we are\n    trying to catch.  */\n \n int\n@@ -5214,7 +5214,7 @@ arm_gen_rotated_half_load (memref)\n    COND_OR == 0 => (X && Y) \n    COND_OR == 1 => ((! X( || Y)\n    COND_OR == 2 => (X || Y) \n-   If we are unable to support a dominance comparsison we return CC mode.  \n+   If we are unable to support a dominance comparison we return CC mode.  \n    This will then fail to match for the RTL expressions that generate this\n    call.  */\n \n@@ -6070,7 +6070,7 @@ add_minipool_forward_ref (fix)\n      a new entry for it.  If MAX_MP is NULL, the entry will be put on\n      the end of the list since the placement is less constrained than\n      any existing entry.  Otherwise, we insert the new fix before\n-     MAX_MP and, if neceesary, adjust the constraints on the other\n+     MAX_MP and, if necessary, adjust the constraints on the other\n      entries.  */\n   mp = xmalloc (sizeof (* mp));\n   mp->fix_size = fix->fix_size;\n@@ -8340,7 +8340,7 @@ arm_output_epilogue (really_return)\n \n     default:\n       if (frame_pointer_needed)\n-\t/* If we used the frame pointer then the return adddress\n+\t/* If we used the frame pointer then the return address\n \t   will have been loaded off the stack directly into the\n \t   PC, so there is no need to issue a MOV instruction\n \t   here.  */\n@@ -10287,7 +10287,7 @@ thumb_exit (f, reg_containing_return_addr, eh_ofs)\n \tnumber_of_first_bit_set (regs_available_for_popping);\n \n       /* Remove this register for the mask of available registers, so that\n-         the return address will not be corrupted by futher pops.  */\n+         the return address will not be corrupted by further pops.  */\n       regs_available_for_popping &= ~(1 << reg_containing_return_addr);\n     }\n \n@@ -10948,7 +10948,7 @@ thumb_expand_prologue ()\n \t    {\n \t      rtx spare = gen_rtx (REG, SImode, IP_REGNUM);\n \n-\t      /* Choose an arbitary, non-argument low register.  */\n+\t      /* Choose an arbitrary, non-argument low register.  */\n \t      reg = gen_rtx (REG, SImode, LAST_LO_REGNUM);\n \n \t      /* Save it by copying it into a high, scratch register.  */"}, {"sha": "d389eb027def55536bcf0f899a655eeaf8111a02", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6bc82793404b62c93b1544135e013db3e65c65cd", "patch": "@@ -707,7 +707,7 @@ extern int arm_structure_size_boundary;\n \n /* This is the value used to initialize arm_structure_size_boundary.  If a\n    particular arm target wants to change the default value it should change\n-   the definition of this macro, not STRUCTRUE_SIZE_BOUNDARY.  See netbsd.h\n+   the definition of this macro, not STRUCTURE_SIZE_BOUNDARY.  See netbsd.h\n    for an example of this.  */\n #ifndef DEFAULT_STRUCTURE_SIZE_BOUNDARY\n #define DEFAULT_STRUCTURE_SIZE_BOUNDARY 32\n@@ -836,7 +836,7 @@ extern const char * structure_size_string;\n   SUBTARGET_CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n }\n     \n-/* These are a couple of extensions to the formats accecpted\n+/* These are a couple of extensions to the formats accepted\n    by asm_fprintf:\n      %@ prints out ASM_COMMENT_START\n      %r prints out REGISTER_PREFIX reg_names[arg]  */\n@@ -908,15 +908,15 @@ extern const char * structure_size_string;\n    should point to a special register that we will make sure is eliminated.\n \n    For the Thumb we have another problem.  The TPCS defines the frame pointer\n-   as r11, and GCC belives that it is always possible to use the frame pointer\n+   as r11, and GCC believes that it is always possible to use the frame pointer\n    as base register for addressing purposes.  (See comments in\n    find_reloads_address()).  But - the Thumb does not allow high registers,\n    including r11, to be used as base address registers.  Hence our problem.\n \n    The solution used here, and in the old thumb port is to use r7 instead of\n    r11 as the hard frame pointer and to have special code to generate\n    backtrace structures on the stack (if required to do so via a command line\n-   option) using r11.  This is the only 'user visable' use of r11 as a frame\n+   option) using r11.  This is the only 'user visible' use of r11 as a frame\n    pointer.  */\n #define ARM_HARD_FRAME_POINTER_REGNUM\t11\n #define THUMB_HARD_FRAME_POINTER_REGNUM\t 7\n@@ -1061,7 +1061,7 @@ enum reg_class\n #define BASE_REG_CLASS   (TARGET_THUMB ? LO_REGS : GENERAL_REGS)\n \n /* For the Thumb the high registers cannot be used as base registers\n-   when addressing quanitities in QI or HI mode; if we don't know the\n+   when addressing quantities in QI or HI mode; if we don't know the\n    mode, then we must be conservative.  After reload we must also be\n    conservative, since we can't support SP+reg addressing, and we\n    can't fix up any bad substitutions.  */\n@@ -1416,7 +1416,7 @@ enum reg_class\n    This is added to the cfun structure.  */\n typedef struct machine_function GTY(())\n {\n-  /* Additionsl stack adjustment in __builtin_eh_throw.  */\n+  /* Additional stack adjustment in __builtin_eh_throw.  */\n   rtx eh_epilogue_sp_ofs;\n   /* Records if LR has to be saved for far jumps.  */\n   int far_jump_used;\n@@ -1856,7 +1856,7 @@ typedef struct\n #define SUBTARGET_NAME_ENCODING_LENGTHS\n #endif\n \n-/* This is a C fragement for the inside of a switch statement.\n+/* This is a C fragment for the inside of a switch statement.\n    Each case label should return the number of characters to\n    be stripped from the start of a function's name, if that\n    name starts with the indicated character.  */"}, {"sha": "e9494ad776e9e595e621bce56328ec2e828b24fc", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=6bc82793404b62c93b1544135e013db3e65c65cd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, NetBSD/arm ELF version.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Wasabi Systems, Inc.\n \n This file is part of GNU CC.\n@@ -127,7 +127,7 @@ Boston, MA 02111-1307, USA.  */\n    This has several side effects that should be considered.\n    1. Structures will only be aligned to the size of the largest member.\n       i.e. structures containing only bytes will be byte aligned.\n-           structures containing shorts will be half word alinged.          \n+           structures containing shorts will be half word aligned.          \n            structures containing ints will be word aligned.                 \n   \n       This means structures should be padded to a word boundary if"}, {"sha": "ad26d0934662ea8390ab258d9c6782875c30e0ec", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc82793404b62c93b1544135e013db3e65c65cd/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=6bc82793404b62c93b1544135e013db3e65c65cd", "patch": "@@ -1,5 +1,5 @@\n /* NetBSD/arm a.out version.\n-   Copyright (C) 1993, 1994, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1997, 1998, 2003 Free Software Foundation, Inc.\n    Contributed by Mark Brinicombe (amb@physig.ph.kcl.ac.uk)\n \n This file is part of GNU CC.\n@@ -130,7 +130,7 @@ Boston, MA 02111-1307, USA.  */\n    This has several side effects that should be considered.\n    1. Structures will only be aligned to the size of the largest member.\n       i.e. structures containing only bytes will be byte aligned.\n-           structures containing shorts will be half word alinged.\n+           structures containing shorts will be half word aligned.\n            structures containing ints will be word aligned.\n \n       This means structures should be padded to a word boundary if"}]}