{"sha": "e750295b6078c2c638822a4c32339301579bb05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1MDI5NWI2MDc4YzJjNjM4ODIyYTRjMzIzMzkzMDE1NzliYjA1ZQ==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-07T07:07:13Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-07T07:07:19Z"}, "message": "rust_assert to check return value", "tree": {"sha": "576ccb380847380abc796ba4aa0627113ba4062e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576ccb380847380abc796ba4aa0627113ba4062e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e750295b6078c2c638822a4c32339301579bb05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e750295b6078c2c638822a4c32339301579bb05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e750295b6078c2c638822a4c32339301579bb05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e750295b6078c2c638822a4c32339301579bb05e/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "3d90a6b3f25b3698d6efc1d6538a8970a04a0925", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e750295b6078c2c638822a4c32339301579bb05e/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e750295b6078c2c638822a4c32339301579bb05e/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=e750295b6078c2c638822a4c32339301579bb05e", "patch": "@@ -114,9 +114,10 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  rust_assert (\n-    mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t  ref_node_id, &ref));\n+  bool ret\n+    = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t    ref_node_id, &ref);\n+  rust_assert (ret);\n   mark_hir_id (ref);\n }\n \n@@ -129,17 +130,18 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n       Resolver::Definition def;\n-      rust_assert (resolver->lookup_definition (ref_node_id, &def));\n+      bool ret = resolver->lookup_definition (ref_node_id, &def);\n+      rust_assert (ret);\n       ref_node_id = def.parent;\n     }\n   else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n     {\n       return;\n     }\n   HirId ref;\n-  rust_assert (\n-    mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n-\t\t\t\t  ref_node_id, &ref));\n+  bool ret = mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n+\t\t\t\t\t   ref_node_id, &ref);\n+  rust_assert (ret);\n   mark_hir_id (ref);\n }\n \n@@ -157,7 +159,8 @@ MarkLive::visit (HIR::FieldAccessExpr &expr)\n       rust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n \t\t     \"unresolved type for receiver\");\n     }\n-  rust_assert (receiver->get_kind () == TyTy::TypeKind::ADT);\n+  bool ret = receiver->get_kind () == TyTy::TypeKind::ADT;\n+  rust_assert (ret);\n   TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (receiver);\n \n   // get the field index\n@@ -192,9 +195,10 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  rust_assert (\n-    mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t  ref_node_id, &ref));\n+  bool ret\n+    = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t    ref_node_id, &ref);\n+  rust_assert (ret);\n   mark_hir_id (ref);\n }\n \n@@ -205,9 +209,10 @@ MarkLive::visit (HIR::TypeAlias &alias)\n   resolver->lookup_resolved_type (\n     alias.get_type_aliased ()->get_mappings ().get_nodeid (), &ast_node_id);\n   HirId hir_id;\n-  rust_assert (\n-    mappings->lookup_node_to_hir (alias.get_mappings ().get_crate_num (),\n-\t\t\t\t  ast_node_id, &hir_id));\n+  bool ret\n+    = mappings->lookup_node_to_hir (alias.get_mappings ().get_crate_num (),\n+\t\t\t\t    ast_node_id, &hir_id);\n+  rust_assert (ret);\n   mark_hir_id (hir_id);\n }\n \n@@ -230,12 +235,14 @@ MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n       // these ref_node_ids will resolve to a pattern declaration but we are\n       // interested in the definition that this refers to get the parent id\n       Resolver::Definition def;\n-      rust_assert (resolver->lookup_definition (ref_node_id, &def));\n+      bool ret = resolver->lookup_definition (ref_node_id, &def);\n+      rust_assert (ret);\n       ref_node_id = def.parent;\n     }\n   else\n     {\n-      rust_assert (resolver->lookup_resolved_type (ast_node_id, &ref_node_id));\n+      bool ret = resolver->lookup_resolved_type (ast_node_id, &ref_node_id);\n+      rust_assert (ret);\n     }\n }\n "}]}