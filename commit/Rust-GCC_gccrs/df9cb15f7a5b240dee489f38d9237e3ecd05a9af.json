{"sha": "df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5Y2IxNWY3YTViMjQwZGVlNDg5ZjM4ZDkyMzdlM2VjZDA1YTlhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-28T10:55:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-28T10:55:56Z"}, "message": "2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert unintended changes to include/parallel files.\n\nFrom-SVN: r173066", "tree": {"sha": "ec2fc988560f41f87096e2641c809ff51b5e2ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2fc988560f41f87096e2641c809ff51b5e2ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/comments", "author": null, "committer": null, "parents": [{"sha": "9f1163b171df2a6f9faec0af92c7e651bf69db72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1163b171df2a6f9faec0af92c7e651bf69db72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1163b171df2a6f9faec0af92c7e651bf69db72"}], "stats": {"total": 95, "additions": 29, "deletions": 66}, "files": [{"sha": "8d7b137aaf56d22f411113650d3e94dd0d732820", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -116,11 +116,7 @@ namespace __gnu_parallel\n        * @brief The destructor.\n        */\n       ~_LoserTreeBase()\n-      {\n-\tfor (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n-\t  _M_losers[__i].~_Loser();\n-\t::operator delete(_M_losers);\n-      }\n+      { ::operator delete(_M_losers); }\n \n       /**\n        * @brief Initializes the sequence \"_M_source\" with the element \"__key\".\n@@ -135,15 +131,15 @@ namespace __gnu_parallel\n       {\n \tunsigned int __pos = _M_k + __source;\n \n-\tif (_M_first_insert)\n+\tif(_M_first_insert)\n \t  {\n-\t    // Construct all keys, so we can easily destruct them.\n+\t    // Construct all keys, so we can easily deconstruct them.\n \t    for (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n \t      new(&(_M_losers[__i]._M_key)) _Tp(__key);\n \t    _M_first_insert = false;\n \t  }\n \telse\n-\t  _M_losers[__pos]._M_key = __key;\n+\t  new(&(_M_losers[__pos]._M_key)) _Tp(__key);\n \n \t_M_losers[__pos]._M_sup = __sup;\n \t_M_losers[__pos]._M_source = __source;\n@@ -383,7 +379,7 @@ namespace __gnu_parallel\n       }\n \n       ~_LoserTreePointerBase()\n-      { delete[] _M_losers; }\n+      { ::operator delete[](_M_losers); }\n \n       int __get_min_source()\n       { return _M_losers[0]._M_source; }\n@@ -596,17 +592,13 @@ namespace __gnu_parallel\n \n \tfor (unsigned int __i = _M_k + _M_ik - 1; __i < (2 * _M_k); ++__i)\n \t  {\n-\t    ::new(&(_M_losers[__i]._M_key)) _Tp(__sentinel);\n+\t    _M_losers[__i]._M_key = __sentinel;\n \t    _M_losers[__i]._M_source = -1;\n \t  }\n       }\n \n       ~_LoserTreeUnguardedBase()\n-      {\n-\tfor (unsigned int __i = 0; __i < (2 * _M_k); ++__i)\n-\t  _M_losers[__i].~_Loser();\n-\t::operator delete(_M_losers);\n-      }\n+      { ::operator delete(_M_losers); }\n \n       int\n       __get_min_source()\n@@ -623,7 +615,7 @@ namespace __gnu_parallel\n       {\n \tunsigned int __pos = _M_k + __source;\n \n-\t::new(&(_M_losers[__pos]._M_key)) _Tp(__key);\n+\tnew(&(_M_losers[__pos]._M_key)) _Tp(__key);\n \t_M_losers[__pos]._M_source = __source;\n       }\n     };"}, {"sha": "a5fd3be1bd08e859ab9ea0636e6b9102277f96d4", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -1045,12 +1045,11 @@ namespace __gnu_parallel\n \t_ValueType;\n \n       // __k sequences.\n-      const _SeqNumber __k\n-\t= static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n+      _SeqNumber __k = static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n \n-      const _ThreadIndex __num_threads = omp_get_num_threads();\n+      _ThreadIndex __num_threads = omp_get_num_threads();\n \n-      const _DifferenceType __num_samples =\n+      _DifferenceType __num_samples =\n \t__gnu_parallel::_Settings::get().merge_oversampling * __num_threads;\n \n       _ValueType* __samples = static_cast<_ValueType*>\n@@ -1097,10 +1096,6 @@ namespace __gnu_parallel\n \t      __pieces[__slab][__seq].second =\n \t\t_GLIBCXX_PARALLEL_LENGTH(__seqs_begin[__seq]);\n \t  }\n-\n-      for (_SeqNumber __s = 0; __s < __k; ++__s)\n-\tfor (_DifferenceType __i = 0; __i < __num_samples; ++__i)\n-\t  __samples[__s * __num_samples + __i].~_ValueType();\n       ::operator delete(__samples);\n     }\n \n@@ -1263,10 +1258,10 @@ namespace __gnu_parallel\n \t__length = std::min<_DifferenceTp>(__length, __total_length);\n \n \tif (__total_length == 0 || __k == 0)\n-\t  {\n-\t    delete[] __ne_seqs;\n-\t    return __target;\n-\t  }\n+\t{\n+          delete[] __ne_seqs;\n+          return __target;\n+\t}\n \n \tstd::vector<std::pair<_DifferenceType, _DifferenceType> >* __pieces;\n "}, {"sha": "2cb8013876699d06f787dbab162ca79a4919e600", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -378,8 +378,6 @@ namespace __gnu_parallel\n \n #     pragma omp barrier\n \n-      for (_DifferenceType __i = 0; __i < __length_local; ++__i)\n-\t__sd->_M_temporary[__iam][__i].~_ValueType();\n       ::operator delete(__sd->_M_temporary[__iam]);\n     }\n \n@@ -415,7 +413,6 @@ namespace __gnu_parallel\n       // shared variables\n       _PMWMSSortingData<_RAIter> __sd;\n       _DifferenceType* __starts;\n-      _DifferenceType __size;\n \n #     pragma omp parallel num_threads(__num_threads)\n       {\n@@ -430,7 +427,7 @@ namespace __gnu_parallel\n \n \t  if (!__exact)\n \t    {\n-\t      __size =\n+\t      _DifferenceType __size =\n \t\t(_Settings::get().sort_mwms_oversampling * __num_threads - 1)\n \t\t* __num_threads;\n \t      __sd._M_samples = static_cast<_ValueType*>\n@@ -466,11 +463,7 @@ namespace __gnu_parallel\n       delete[] __sd._M_temporary;\n \n       if (!__exact)\n-\t{\n-\t  for (_DifferenceType __i = 0; __i < __size; ++__i)\n-\t    __sd._M_samples[__i].~_ValueType();\n-\t  ::operator delete(__sd._M_samples);\n-\t}\n+\t::operator delete(__sd._M_samples);\n \n       delete[] __sd._M_offsets;\n       delete[] __sd._M_pieces;"}, {"sha": "9671c1dd398a5de012f4ee99ea39ffb04d4ff577", "filename": "libstdc++-v3/include/parallel/par_loop.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -91,15 +91,16 @@ namespace __gnu_parallel\n \t_ThreadIndex __iam = omp_get_thread_num();\n \n \t// Neutral element.\n-\t_Result* __reduct;\n+\t_Result* __reduct = static_cast<_Result*>\n+\t  (::operator new(sizeof(_Result)));\n \n \t_DifferenceType\n \t  __start = __equally_split_point(__length, __num_threads, __iam),\n \t  __stop = __equally_split_point(__length, __num_threads, __iam + 1);\n \n \tif (__start < __stop)\n \t  {\n-\t    __reduct = new _Result(__f(__o, __begin + __start));\n+\t    new(__reduct) _Result(__f(__o, __begin + __start));\n \t    ++__start;\n \t    __constructed[__iam] = true;\n \t  }\n@@ -109,26 +110,18 @@ namespace __gnu_parallel\n \tfor (; __start < __stop; ++__start)\n \t  *__reduct = __r(*__reduct, __f(__o, __begin + __start));\n \n-\tif (__constructed[__iam])\n-\t  {\n-\t    ::new(&__thread_results[__iam]) _Result(*__reduct);\n-\t    delete __reduct;\n-\t  }\n+\t__thread_results[__iam] = *__reduct;\n       } //parallel\n \n       for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \tif (__constructed[__i])\n-\t  {\n-\t    __output = __r(__output, __thread_results[__i]);\n-\t    __thread_results[__i].~_Result();\n-\t  }\n+\t  __output = __r(__output, __thread_results[__i]);\n \n       // Points to last element processed (needed as return value for\n       // some algorithms like transform).\n       __f._M_finish_iterator = __begin + __length;\n \n-      ::operator delete(__thread_results);\n-\n+      delete[] __thread_results;\n       delete[] __constructed;\n \n       return __o;"}, {"sha": "425e868fe6bb699f2e41be80f8b24543f11b3312", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -184,10 +184,7 @@ namespace __gnu_parallel\n \t\t\t\t\t__bin_op, __sums[__iam]);\n       } //parallel\n \n-      for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n-\t__sums[__i].~_ValueType();\n       ::operator delete(__sums);\n-\n       delete[] __borders;\n \n       return __result + __n;"}, {"sha": "1884eb867fada377915235ce1b883fefedc99eb1", "filename": "libstdc++-v3/include/parallel/quicksort.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -82,8 +82,6 @@ namespace __gnu_parallel\n       _DifferenceType __split = __parallel_partition(__begin, __end,\n \t\t\t\t\t\t     __pred, __num_threads);\n \n-      for (_DifferenceType __s = 0; __s < __num_samples; ++__s)\n-\t__samples[__s].~_ValueType();\n       ::operator delete(__samples);\n \n       return __split;"}, {"sha": "bae95724966b8462fd924f366062e1cd8c4a155b", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9cb15f7a5b240dee489f38d9237e3ecd05a9af/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=df9cb15f7a5b240dee489f38d9237e3ecd05a9af", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -209,7 +209,7 @@ namespace __gnu_parallel\n           _ThreadIndex __target_p = __bin_proc[__target_bin];\n \n           // Last column [__d->_M_num_threads] stays unchanged.\n-\t  ::new(&(__temporaries[__target_p][__dist[__target_bin + 1]++]))\n+          ::new(&(__temporaries[__target_p][__dist[__target_bin + 1]++]))\n               _ValueType(*(__source + __i + __start));\n \t}\n \n@@ -227,17 +227,15 @@ namespace __gnu_parallel\n \t    (__sd->_M_temporaries[__iam]\n \t     + (__b == __d->_M_bins_begin\n \t\t? 0 : __sd->_M_dist[__b][__d->_M_num_threads])),\n-\t    *__end = (__sd->_M_temporaries[__iam]\n-\t\t      + __sd->_M_dist[__b + 1][__d->_M_num_threads]);\n+\t  * __end = (__sd->_M_temporaries[__iam]\n+\t\t     + __sd->_M_dist[__b + 1][__d->_M_num_threads]);\n \n           __sequential_random_shuffle(__begin, __end, __rng);\n           std::copy(__begin, __end, __sd->_M_source + __global_offset\n \t\t    + (__b == __d->_M_bins_begin\n \t\t       ? 0 : __sd->_M_dist[__b][__d->_M_num_threads]));\n \t}\n \n-      for (_SequenceIndex __i = 0; __i < __offset; ++__i)\n-\t__sd->_M_temporaries[__iam][__i].~_ValueType();\n       ::operator delete(__sd->_M_temporaries[__iam]);\n     }\n \n@@ -503,9 +501,6 @@ namespace __gnu_parallel\n           delete[] __dist0;\n           delete[] __dist1;\n           delete[] __oracles;\n-\t  \n-\t  for (_DifferenceType __i = 0; __i < __n; ++__i)\n-\t    __target[__i].~_ValueType();\n           ::operator delete(__target);\n \t}\n       else"}]}