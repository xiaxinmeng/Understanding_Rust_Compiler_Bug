{"sha": "2e7e71216fe7f37c93ca86f84df21216adbbb904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3ZTcxMjE2ZmU3ZjM3YzkzY2E4NmY4NGRmMjEyMTZhZGJiYjkwNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-06-17T05:43:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-06-17T05:43:06Z"}, "message": "pa.h (DEBUGGER_AUTO_OFFSET): Define.\n\n\t* pa.h (DEBUGGER_AUTO_OFFSET): Define.  If no frame pointer\n\tis available, then adjust the offset by the size of the current\n\tframe.\n\nFrom-SVN: r7509", "tree": {"sha": "b0ba88324b64ac661ef07c171182e5d202dae666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0ba88324b64ac661ef07c171182e5d202dae666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e7e71216fe7f37c93ca86f84df21216adbbb904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7e71216fe7f37c93ca86f84df21216adbbb904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e7e71216fe7f37c93ca86f84df21216adbbb904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7e71216fe7f37c93ca86f84df21216adbbb904/comments", "author": null, "committer": null, "parents": [{"sha": "51783c14289f94b543b39eedf47d99916dbf3f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51783c14289f94b543b39eedf47d99916dbf3f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51783c14289f94b543b39eedf47d99916dbf3f91"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "f3280771b62a970058d711d1ecee026234db64b2", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7e71216fe7f37c93ca86f84df21216adbbb904/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7e71216fe7f37c93ca86f84df21216adbbb904/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=2e7e71216fe7f37c93ca86f84df21216adbbb904", "patch": "@@ -138,6 +138,23 @@ extern int target_flags;\n #define ASM_STABS_OP \"\\t.stabs\"\n #define ASM_STABN_OP \"\\t.stabn\"\n \n+/* GDB always assumes the current function's frame begins at the value\n+   of the stack pointer upon entry to the current function.  Accessing\n+   local variables is done using the base of the frame + an offset\n+   provided by GCC.\n+\n+   For functions which have frame pointers this method works fine;\n+   the (frame pointer) == (stack pointer at function entry) and GCC provides\n+   an offset relative to the frame pointer.\n+\n+   This loses for functions without a frame pointer; GCC provides an offset\n+   which is relative to the stack pointer after adjusting for the function's\n+   frame size.  GDB would prefer the offset to be relative to the value of\n+   the stack pointer at the function's entry.  Yuk!  */\n+#define DEBUGGER_AUTO_OFFSET(X) \\\n+  ((GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0) \\\n+    + (frame_pointer_needed ? 0 : compute_frame_size (get_frame_size (), 0)))\n+\n #if (TARGET_DEFAULT & 1) == 0\n #define CPP_SPEC \"%{msnake:-D__hp9000s700 -D_PA_RISC1_1}\\\n  %{mpa-risc-1-1:-D__hp9000s700 -D_PA_RISC1_1}\""}]}