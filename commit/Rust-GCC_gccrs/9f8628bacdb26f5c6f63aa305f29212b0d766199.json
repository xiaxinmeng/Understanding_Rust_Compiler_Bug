{"sha": "9f8628bacdb26f5c6f63aa305f29212b0d766199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4NjI4YmFjZGIyNmY1YzZmNjNhYTMwNWYyOTIxMmIwZDc2NjE5OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-09-06T10:08:17Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-09-06T10:08:17Z"}, "message": "Unify the management of RTL and tree-level dump files.\n\n2004-09-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\tUnify the management of RTL and tree-level dump files.\n\n\t* cfgexpand.c (tree_expand_cfg): Fix incorrect comment.\n\tDon't print function name to the dump file, the pass manager\n\twould do this for us. Add code from the top of\n\trest_of_compilation, up to the initial RTL dump.\n\t* passes.c (rest_of_handle_jump): Call fixup_tail_calls and\n\tclose the DFI_sibling dump file.\n\t(rest_of_compilation): Don't do that here.  Remove code up to the\n\tinitial RTL dump.\n\t(init_optimization_passes): Remove.\n\t(pass_rest_of_compilation): Change pass name to NULL.\n\t* toplev.c (lang_dependent_init): Do not use an empty dump file prefix.\n\tDo not call init_optimization_passes.\n\t* toplev.h (init_optimization_passes): Remove.\n\n\t* graph.c (print_rtl_graph_with_bb, clean_graph_dump_file,\n\tfinish_graph_dump_file): Remove SUFFIX parameter.\n\t* graph.h (print_rtl_graph_with_bb, clean_graph_dump_file,\n\tfinish_graph_dump_file): Likewise.\n\n\t* tree-pass.h (struct tree_opt_pass): Add `letter' field.\n\t* cfgexpand.c (pass_expand): Adjust.\n\t* gimple-low.c (pass_lower_cf, pass_remove_useless_vars): Adjust.\n\t* passes.c (pass_rest_of_compilation): Adjust.\n\t* predict.c (pass_profile): Adjust.\n\t* tree-alias-common.c (pass_build_pta, pass_del_pta): Adjust.\n\t* tree-cfg.c (pass_build_cfg, pass_remove_useless_stmts,\n\tpass_split_crit_edges, pass_warn_function_return): Adjust.\n\t* tree-complex.c (pass_lower_vector_ssa, pass_pre_expand): Adjust.\n\t* tree-dfa.c (pass_referenced_vars): Adjust.\n\t* tree-eh.c (pass_lower_eh): Adjust.\n\t* tree-if-conv.c (pass_build_ssa): Adjust.\n\t* tree-into-ssa.c (pass_build_ssa): Adjust.\n\t* tree-mudflap.c (pass_mudflap_1, pass_mudflap_2): Adjust.\n\t* tree-nomudflap.c (pass_mudflap_1, pass_mudflap_2): Adjust.\n\t* tree-nrv.c (pass_nrv): Adjust.\n\t* tree-optimize.c (pass_gimple, pass_all_optimizations,\n\tpass_cleanup_cfg_post_optimizing, pass_free_datastructures,\n\tpass_init_datastructures): Adjust.\n\t* tree-outof-ssa.c (pass_del_ssa): Adjust.\n\t* tree-profile.c (pass_tree_profile): Adjust.\n\t* tree-sra.c (pass_sra): Adjust.\n\t* tree-ssa-alias.c (pass_may_alias): Adjust.\n\t* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Adjust.\n\t* tree-ssa-copyrename.c (pass_rename_ssa_copies): Adjust.\n\t* tree-ssa-dce.c (pass_dce, pass_cd_dce): Adjust.\n\t* tree-ssa-dom.c (pass_dominator): Adjust.\n\t* tree-ssa-dse.c (pass_dse): Adjust.\n\t* tree-ssa-forwprop.c (pass_forwprop): Adjust.\n\t* tree-ssa-if-conv.c (pass_if_conversion): Adjust.\n\t* tree-ssa-loop-ch.c (pass_ch): Adjust.\n\t* tree-ssa-loop.c (pass_loop, pass_loop_init, pass_lim,\n\tpass_loop_done, pass_complete_unroll, pass_iv_canon,\n\tpass_iv_optimize, pass_vectorize): Adjust.\n\t* tree-ssa-phiopt.c (pass_phiopt): Adjust.\n\t* tree-ssa-pre.c (pass_pre, pass_fre): Adjust.\n\t* tree-ssa.c (pass_redundant_phi, pass_early_warn_uninitialized,\n\tpass_late_warn_uninnitialized): Adjust.\n\t* tree-tailcall.c (pass_tail_recursion, pass_tail_calls): Adjust.\n\n\t* Makefile.in (tree-dump.o): Add new dependencies.\n\t* cgraph.c (cgraph_remove_node): TDF_all -> TDF_tree_all.\n\t* cgraphunit.c (cgraph_preserve_function_body_p, cgraph_optimize):\n\tLikewise.\n\t* toplev.c (dump_file_name): New.\n\t* tree-dump.c (dump_enable_all): Add LETTER parameter.\n\t(struct dump_file_info): Add NUM and LETTER fields.\n\t(dump_files): Adjust and add RTL dump files.\n\t(dump_register): Add NUM and LETTER fields.\n\t(get_dump_file_name, dump_initialized_p, enable_rtl_dump_file): New.\n\t(dump_begin): Use get_dump_file_name.\n\t(dump_switch_p_1): Adjust call to dump_enable_all.\n\t* tree-dump.h (dump_register): Adjust prototype.\n\t* tree-optimize.c (register_one_dump_file): Take dump file index.\n\tSupport flags for RTL dumps.\n\t(register_dump_files): Fill in NUM field of struct dump_file_info.\n\tTrack properties both when the gate is executed and when it is not.\n\t(execute_todo): Dump RTL.  Add PROPERTIES parameter.\n\t(execute_one_pass): Pass properties to execute_todo.  Handle VCG\n\tdumps of RTL.\n\t* tree-pass.h (dump_file_name): New.\n\t* tree.h (TDF_TREE, TDF_RTL, get_dump_file_name, dump_initialized_p):\n\tNew.\n\n\t* Makefile.in (passes.o): Add new dependencies.\n\t* passes.c (struct dump_file_info, enum dump_file_index,\n\tdump_file_tbl, init_optimization_passes): Remove.\n\t(open_dump_file, close_dump_file): Use tree-dumping infrastructure.\n\t(rest_of_handle_new_regalloc, rest_of_handle_old_regalloc): Use\n\tdump_enabled_p.\n\t(finish_optimization_passes): Update finish_graph_dump_file loop.\n\t(enable_rtl_dump_file): Remove.\n\t* tree-dump.c (dump_files): Adjust and add RTL dump files.\n\t(enable_rtl_dump_file): Add here.\n\t* tree.h (enum tree_dump_index): Add RTL dump file indices.\n\t* doc/invoke.texi (Debugging options): Document new RTL debugging\n\toptions.  Update.\n\nFrom-SVN: r87113", "tree": {"sha": "97abeef925c810d92e8f8fe91a694ecb3c7ca58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97abeef925c810d92e8f8fe91a694ecb3c7ca58b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8628bacdb26f5c6f63aa305f29212b0d766199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8628bacdb26f5c6f63aa305f29212b0d766199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8628bacdb26f5c6f63aa305f29212b0d766199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8628bacdb26f5c6f63aa305f29212b0d766199/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc4d0e828dfb1126ad2a7803cd68d655915c8bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4d0e828dfb1126ad2a7803cd68d655915c8bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4d0e828dfb1126ad2a7803cd68d655915c8bfa"}], "stats": {"total": 1276, "additions": 771, "deletions": 505}, "files": [{"sha": "0852f2980b6b032885d4c230aed50f605c8360b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1,3 +1,104 @@\n+2004-09-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tUnify the management of RTL and tree-level dump files.\n+\n+\t* cfgexpand.c (tree_expand_cfg): Fix incorrect comment.\n+\tDon't print function name to the dump file, the pass manager\n+\twould do this for us. Add code from the top of\n+\trest_of_compilation, up to the initial RTL dump.\n+\t* passes.c (rest_of_handle_jump): Call fixup_tail_calls and\n+\tclose the DFI_sibling dump file.\n+\t(rest_of_compilation): Don't do that here.  Remove code up to the\n+\tinitial RTL dump.\n+\t(init_optimization_passes): Remove.\n+\t(pass_rest_of_compilation): Change pass name to NULL.\n+\t* toplev.c (lang_dependent_init): Do not use an empty dump file prefix.\n+\tDo not call init_optimization_passes.\n+\t* toplev.h (init_optimization_passes): Remove.\n+\n+\t* graph.c (print_rtl_graph_with_bb, clean_graph_dump_file,\n+\tfinish_graph_dump_file): Remove SUFFIX parameter.\n+\t* graph.h (print_rtl_graph_with_bb, clean_graph_dump_file,\n+\tfinish_graph_dump_file): Likewise.\n+\n+\t* tree-pass.h (struct tree_opt_pass): Add `letter' field.\n+\t* cfgexpand.c (pass_expand): Adjust.\n+\t* gimple-low.c (pass_lower_cf, pass_remove_useless_vars): Adjust.\n+\t* passes.c (pass_rest_of_compilation): Adjust.\n+\t* predict.c (pass_profile): Adjust.\n+\t* tree-alias-common.c (pass_build_pta, pass_del_pta): Adjust.\n+\t* tree-cfg.c (pass_build_cfg, pass_remove_useless_stmts,\n+\tpass_split_crit_edges, pass_warn_function_return): Adjust.\n+\t* tree-complex.c (pass_lower_vector_ssa, pass_pre_expand): Adjust.\n+\t* tree-dfa.c (pass_referenced_vars): Adjust.\n+\t* tree-eh.c (pass_lower_eh): Adjust.\n+\t* tree-if-conv.c (pass_build_ssa): Adjust.\n+\t* tree-into-ssa.c (pass_build_ssa): Adjust.\n+\t* tree-mudflap.c (pass_mudflap_1, pass_mudflap_2): Adjust.\n+\t* tree-nomudflap.c (pass_mudflap_1, pass_mudflap_2): Adjust.\n+\t* tree-nrv.c (pass_nrv): Adjust.\n+\t* tree-optimize.c (pass_gimple, pass_all_optimizations,\n+\tpass_cleanup_cfg_post_optimizing, pass_free_datastructures,\n+\tpass_init_datastructures): Adjust.\n+\t* tree-outof-ssa.c (pass_del_ssa): Adjust.\n+\t* tree-profile.c (pass_tree_profile): Adjust.\n+\t* tree-sra.c (pass_sra): Adjust.\n+\t* tree-ssa-alias.c (pass_may_alias): Adjust.\n+\t* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Adjust.\n+\t* tree-ssa-copyrename.c (pass_rename_ssa_copies): Adjust.\n+\t* tree-ssa-dce.c (pass_dce, pass_cd_dce): Adjust.\n+\t* tree-ssa-dom.c (pass_dominator): Adjust.\n+\t* tree-ssa-dse.c (pass_dse): Adjust.\n+\t* tree-ssa-forwprop.c (pass_forwprop): Adjust.\n+\t* tree-ssa-if-conv.c (pass_if_conversion): Adjust.\n+\t* tree-ssa-loop-ch.c (pass_ch): Adjust.\n+\t* tree-ssa-loop.c (pass_loop, pass_loop_init, pass_lim,\n+\tpass_loop_done, pass_complete_unroll, pass_iv_canon,\n+\tpass_iv_optimize, pass_vectorize): Adjust.\n+\t* tree-ssa-phiopt.c (pass_phiopt): Adjust.\n+\t* tree-ssa-pre.c (pass_pre, pass_fre): Adjust.\n+\t* tree-ssa.c (pass_redundant_phi, pass_early_warn_uninitialized,\n+\tpass_late_warn_uninnitialized): Adjust.\n+\t* tree-tailcall.c (pass_tail_recursion, pass_tail_calls): Adjust.\n+\n+\t* Makefile.in (tree-dump.o): Add new dependencies.\n+\t* cgraph.c (cgraph_remove_node): TDF_all -> TDF_tree_all.\n+\t* cgraphunit.c (cgraph_preserve_function_body_p, cgraph_optimize):\n+\tLikewise.\n+\t* toplev.c (dump_file_name): New.\n+\t* tree-dump.c (dump_enable_all): Add LETTER parameter.\n+\t(struct dump_file_info): Add NUM and LETTER fields.\n+\t(dump_files): Adjust and add RTL dump files.\n+\t(dump_register): Add NUM and LETTER fields.\n+\t(get_dump_file_name, dump_initialized_p, enable_rtl_dump_file): New.\n+\t(dump_begin): Use get_dump_file_name.\n+\t(dump_switch_p_1): Adjust call to dump_enable_all.\n+\t* tree-dump.h (dump_register): Adjust prototype.\n+\t* tree-optimize.c (register_one_dump_file): Take dump file index.\n+\tSupport flags for RTL dumps.\n+\t(register_dump_files): Fill in NUM field of struct dump_file_info.\n+\tTrack properties both when the gate is executed and when it is not.\n+\t(execute_todo): Dump RTL.  Add PROPERTIES parameter.\n+\t(execute_one_pass): Pass properties to execute_todo.  Handle VCG\n+\tdumps of RTL.\n+\t* tree-pass.h (dump_file_name): New.\n+\t* tree.h (TDF_TREE, TDF_RTL, get_dump_file_name, dump_initialized_p):\n+\tNew.\n+\n+\t* Makefile.in (passes.o): Add new dependencies.\n+\t* passes.c (struct dump_file_info, enum dump_file_index,\n+\tdump_file_tbl, init_optimization_passes): Remove.\n+\t(open_dump_file, close_dump_file): Use tree-dumping infrastructure.\n+\t(rest_of_handle_new_regalloc, rest_of_handle_old_regalloc): Use\n+\tdump_enabled_p.\n+\t(finish_optimization_passes): Update finish_graph_dump_file loop.\n+\t(enable_rtl_dump_file): Remove.\n+\t* tree-dump.c (dump_files): Adjust and add RTL dump files.\n+\t(enable_rtl_dump_file): Add here.\n+\t* tree.h (enum tree_dump_index): Add RTL dump file indices.\n+\t* doc/invoke.texi (Debugging options): Document new RTL debugging\n+\toptions.  Update.\n+\n 2004-09-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-common.c, c-decl.c, combine.c, defaults.h, fold-const.c,"}, {"sha": "efaa7a311ac31f4469627d2f50ccd0ef030dfd03", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1587,7 +1587,7 @@ tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h $(C_PRAGMA_H) $(RTL_H) \\\n-   $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h\n+   $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h tree-pass.h\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h insn-config.h \\\n    $(INTEGRATE_H) $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n@@ -1818,7 +1818,8 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) real.h $(CFGLOOP_H) \\\n-   hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h $(COVERAGE_H) alloc-pool.h\n+   hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h $(COVERAGE_H) alloc-pool.h \\\n+   tree-pass.h tree-dump.h\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h\n "}, {"sha": "122c11b37b83a3d171526f490e1ea55247a55534", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1188,14 +1188,6 @@ tree_expand_cfg (void)\n   basic_block bb, init_block;\n   sbitmap blocks;\n \n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"\\n;; Function %s\",\n-\t       (*lang_hooks.decl_printable_name) (current_function_decl, 2));\n-      fprintf (dump_file, \" (%s)\\n\",\n-\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n-    }\n-\n   profile_status = PROFILE_ABSENT;\n \n   /* Some backends want to know that we are expanding to RTL.  */\n@@ -1231,8 +1223,7 @@ tree_expand_cfg (void)\n   currently_expanding_to_rtl = 0;\n \n   /* Convert from NOTE_INSN_EH_REGION style notes, and do other\n-     sorts of eh initialization.  Delay this until after the\n-     initial rtl dump so that we can see the original nesting.  */\n+     sorts of eh initialization.  */\n   convert_from_eh_region_ranges ();\n \n   rebuild_jump_labels (get_insns ());\n@@ -1248,6 +1239,16 @@ tree_expand_cfg (void)\n #ifdef ENABLE_CHECKING\n   verify_flow_info();\n #endif\n+\n+  /* There's no need to defer outputting this function any more; we\n+     know we want to output it.  */\n+  DECL_DEFER_OUTPUT (current_function_decl) = 0;\n+\n+  /* Now that we're done expanding trees to RTL, we shouldn't have any\n+     more CONCATs anywhere.  */\n+  generating_concat_p = 0;\n+\n+  finalize_block_changes ();\n }\n \n struct tree_opt_pass pass_expand =\n@@ -1264,5 +1265,6 @@ struct tree_opt_pass pass_expand =\n   PROP_rtl,                             /* properties_provided */\n   PROP_gimple_leh,\t\t\t/* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  'r'\t\t\t\t\t/* letter */\n };"}, {"sha": "84cd4b1b607f04f44700f575523b4da6d4f87c54", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -328,7 +328,7 @@ cgraph_remove_node (struct cgraph_node *node)\n       else\n \t{\n           htab_clear_slot (cgraph_hash, slot);\n-\t  if (!dump_enabled_p (TDI_all))\n+\t  if (!dump_enabled_p (TDI_tree_all))\n \t    {\n               DECL_SAVED_TREE (node->decl) = NULL;\n \t      DECL_STRUCT_FUNCTION (node->decl) = NULL;\n@@ -356,7 +356,7 @@ cgraph_remove_node (struct cgraph_node *node)\n \t    || (!n->global.inlined_to\n \t\t&& !TREE_ASM_WRITTEN (n->decl) && !DECL_EXTERNAL (n->decl)))\n \t  break;\n-      if (!n && !dump_enabled_p (TDI_all))\n+      if (!n && !dump_enabled_p (TDI_tree_all))\n \t{\n \t  DECL_SAVED_TREE (node->decl) = NULL;\n \t  DECL_STRUCT_FUNCTION (node->decl) = NULL;"}, {"sha": "66a97a92b5d6fee60050d16979402a7aacc4db25", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1712,7 +1712,7 @@ cgraph_preserve_function_body_p (tree decl)\n {\n   struct cgraph_node *node;\n   /* Keep the body; we're going to dump it.  */\n-  if (dump_enabled_p (TDI_all))\n+  if (dump_enabled_p (TDI_tree_all))\n     return true;\n   if (!cgraph_global_info_ready)\n     return (DECL_INLINE (decl) && !flag_really_no_inline);\n@@ -1771,7 +1771,7 @@ cgraph_optimize (void)\n   /* Double check that all inline clones are gone and that all\n      function bodies have been released from memory.  */\n   if (flag_unit_at_a_time\n-      && !dump_enabled_p (TDI_all)\n+      && !dump_enabled_p (TDI_tree_all)\n       && !(sorrycount || errorcount))\n     {\n       struct cgraph_node *node;"}, {"sha": "ea5f983a7687b310c074f384ef2de05601510899", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 216, "deletions": 96, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -3349,160 +3349,280 @@ generate test coverage data. Coverage data will match the source files\n more closely, if you do not optimize.\n \n @item -d@var{letters}\n+@item -fdump-rtl-@var{pass}\n @opindex d\n Says to make debugging dumps during compilation at times specified by\n-@var{letters}.  This is used for debugging the compiler.  The file names\n-for most of the dumps are made by appending a pass number and a word to\n-the @var{dumpname}. @var{dumpname} is generated from the name of the\n-output file, if explicitly specified and it is not an executable,\n-otherwise it is the basename of the source file. In both cases any\n-suffix is removed (e.g.  @file{foo.01.rtl} or @file{foo.02.sibling}).\n-Here are the possible letters for use in @var{letters}, and their\n-meanings:\n+@var{letters}.    This is used for debugging the RTL-based passes of the\n+compiler.  The file names for most of the dumps are made by appending a\n+pass number and a word to the @var{dumpname}.  @var{dumpname} is generated\n+from the name of the output file, if explicitly specified and it is not\n+an executable, otherwise it is the basename of the source file.\n \n-@table @samp\n-@item A\n+Most debug dumps can be enabled either passing a letter to the @option{-d}\n+option, or with a long @option{-fdump-rtl} switch; here are the possible\n+letters for use in @var{letters} and @var{pass}, and their meanings:\n+\n+@table @gcctabopt\n+@item -dA\n @opindex dA\n Annotate the assembler output with miscellaneous debugging information.\n-@item b\n+\n+@item -db\n+@itemx -fdump-rtl-bp\n @opindex db\n-Dump after computing branch probabilities, to @file{@var{file}.12.bp}.\n-@item B\n+@opindex fdump-rtl-bp\n+Dump after computing branch probabilities, to @file{@var{file}.09.bp}.\n+\n+@item -dB\n+@itemx -fdump-rtl-bbro\n @opindex dB\n-Dump after block reordering, to @file{@var{file}.32.bbro}.\n-@item c\n+@opindex fdump-rtl-bbro\n+Dump after block reordering, to @file{@var{file}.30.bbro}.\n+\n+@item -dc\n+@itemx -fdump-rtl-combine\n @opindex dc\n-Dump after instruction combination, to the file @file{@var{file}.20.combine}.\n-@item C\n+@opindex fdump-rtl-combine\n+Dump after instruction combination, to the file @file{@var{file}.17.combine}.\n+\n+@item -dC\n+@itemx -fdump-rtl-ce1\n+@itemx -fdump-rtl-ce2\n @opindex dC\n-Dump after the first if conversion, to the file @file{@var{file}.14.ce1}.\n-Also dump after the second if conversion, to the file @file{@var{file}.21.ce2}.\n-@item d\n+@opindex fdump-rtl-ce1\n+@opindex fdump-rtl-ce2\n+@option{-dC} and @option{-fdump-rtl-ce1} enable dumping after the\n+first if conversion, to the file @file{@var{file}.11.ce1}.  @option{-dC}\n+and @option{-fdump-rtl-ce2} enable dumping after the second if\n+conversion, to the file @file{@var{file}.18.ce2}.\n+\n+@item -dd\n+@itemx -fdump-rtl-btl\n+@itemx -fdump-rtl-dbr\n @opindex dd\n-Dump after branch target load optimization, to to @file{@var{file}.33.btl}.\n-Also dump after delayed branch scheduling, to @file{@var{file}.37.dbr}.\n-@item D\n+@opindex fdump-rtl-btl\n+@opindex fdump-rtl-dbr\n+@option{-dd} and @option{-fdump-rtl-btl} enable dumping after branch\n+target load optimization, to to @file{@var{file}.31.btl}.  @option{-dd}\n+and @option{-fdump-rtl-dbr} enable dumping after delayed branch\n+scheduling, to @file{@var{file}.36.dbr}.\n+\n+@item -dD\n @opindex dD\n Dump all macro definitions, at the end of preprocessing, in addition to\n normal output.\n-@item E\n+\n+@item -dE\n+@itemx -fdump-rtl-ce3\n @opindex dE\n-Dump after the third if conversion, to @file{@var{file}.31.ce3}.\n-@item f\n+@opindex fdump-rtl-ce3\n+Dump after the third if conversion, to @file{@var{file}.28.ce3}.\n+\n+@item -df\n+@itemx -fdump-rtl-cfg\n+@itemx -fdump-rtl-life\n @opindex df\n-Dump after control and data flow analysis, to @file{@var{file}.11.cfg}.\n-Also dump after life analysis, to @file{@var{file}.19.life}.\n-@item g\n+@opindex fdump-rtl-cfg\n+@opindex fdump-rtl-life\n+@option{-df} and @option{-fdump-rtl-cfg} enable dumping after control\n+and data flow analysis, to @file{@var{file}.08.cfg}.  @option{-df}\n+and @option{-fdump-rtl-cfg} enable dumping dump after life analysis,\n+to @file{@var{file}.16.life}.\n+\n+@item -dg\n+@itemx -fdump-rtl-greg\n @opindex dg\n-Dump after global register allocation, to @file{@var{file}.26.greg}.\n-@item G\n+@opindex fdump-rtl-greg\n+Dump after global register allocation, to @file{@var{file}.23.greg}.\n+\n+@item -dG\n+@itemx -fdump-rtl-gcse\n+@itemx -fdump-rtl-bypass\n @opindex dG\n-Dump after GCSE, to @file{@var{file}.08.gcse}.\n-Also dump after jump bypassing and control flow optimizations, to\n-@file{@var{file}.10.bypass}.\n-@item h\n+@opindex fdump-rtl-gcse\n+@opindex fdump-rtl-bypass\n+@option{-dG} and @option{-fdump-rtl-gcse} enable dumping after GCSE, to\n+@file{@var{file}.05.gcse}.  @option{-dG} and @option{-fdump-rtl-bypass}\n+enable dumping after jump bypassing and control flow optimizations, to\n+@file{@var{file}.07.bypass}.\n+\n+@item -dh\n+@itemx -fdump-rtl-eh\n @opindex dh\n-Dump after finalization of EH handling code, to @file{@var{file}.03.eh}.\n-@item i\n+@opindex fdump-rtl-eh\n+Dump after finalization of EH handling code, to @file{@var{file}.02.eh}.\n+\n+@item -di\n+@itemx -fdump-rtl-sibling\n @opindex di\n-Dump after sibling call optimizations, to @file{@var{file}.02.sibling}.\n-@item j\n+@opindex fdump-rtl-sibling\n+Dump after sibling call optimizations, to @file{@var{file}.01.sibling}.\n+\n+@item -dj\n+@itemx -fdump-rtl-jump\n @opindex dj\n-Dump after the first jump optimization, to @file{@var{file}.04.jump}.\n-@item k\n+@opindex fdump-rtl-jump\n+Dump after the first jump optimization, to @file{@var{file}.03.jump}.\n+\n+@item -dk\n+@itemx -fdump-rtl-stack\n @opindex dk\n-Dump after conversion from registers to stack, to @file{@var{file}.35.stack}.\n-@item l\n+@opindex fdump-rtl-stack\n+Dump after conversion from registers to stack, to @file{@var{file}.33.stack}.\n+\n+@item -dl\n+@itemx -fdump-rtl-lreg\n @opindex dl\n-Dump after local register allocation, to @file{@var{file}.25.lreg}.\n-@item L\n+@opindex fdump-rtl-lreg\n+Dump after local register allocation, to @file{@var{file}.22.lreg}.\n+\n+@item -dL\n+@itemx -fdump-rtl-loop\n+@itemx -fdump-rtl-loop2\n @opindex dL\n-Dump after loop optimization passes, to @file{@var{file}.09.loop} and\n-@file{@var{file}.16.loop2}.\n-@item m\n+@opindex fdump-rtl-loop\n+@opindex fdump-rtl-loop2\n+@option{-dL} and @option{-fdump-rtl-loop} enable dumping after the first\n+loop optimization pass, to @file{@var{file}.06.loop}.  @option{-dL} and\n+@option{-fdump-rtl-loop2} enable dumping after the second pass, to\n+@file{@var{file}.13.loop2}.\n+\n+@item -dm\n+@itemx -fdump-rtl-sms\n @opindex dm\n-Dump after modulo scheduling, to @file{@var{file}.23.sms}.\n-@item M\n+@opindex fdump-rtl-sms\n+Dump after modulo scheduling, to @file{@var{file}.20.sms}. \n+\n+@item -dM\n+@itemx -fdump-rtl-mach\n @opindex dM\n+@opindex fdump-rtl-mach\n Dump after performing the machine dependent reorganization pass, to\n-@file{@var{file}.36.mach}.\n-@item n\n+@file{@var{file}.35.mach}.\n+\n+@item -dn\n+@itemx -fdump-rtl-rnreg\n @opindex dn\n-Dump after register renumbering, to @file{@var{file}.30.rnreg}.\n-@item N\n+@opindex fdump-rtl-rnreg\n+Dump after register renumbering, to @file{@var{file}.29.rnreg}.\n+\n+@item -dN\n+@itemx -fdump-rtl-regmove\n @opindex dN\n-Dump after the register move pass, to @file{@var{file}.22.regmove}.\n-@item o\n+@opindex fdump-rtl-regmove\n+Dump after the register move pass, to @file{@var{file}.19.regmove}.\n+\n+@item -do\n+@itemx -fdump-rtl-postreload\n @opindex do\n-Dump after post-reload optimizations, to @file{@var{file}.27.postreload}.\n-@item r\n+@opindex fdump-rtl-postreload\n+Dump after post-reload optimizations, to @file{@var{file}.24.postreload}.\n+\n+@item -dr\n+@itemx -fdump-rtl-expand\n @opindex dr\n-Dump after RTL generation, to @file{@var{file}.01.rtl}.\n-@item R\n+@opindex fdump-rtl-expand\n+Dump after RTL generation, to @file{@var{file}.00.expand}.\n+\n+@item -dR\n+@itemx -fdump-rtl-sched2\n @opindex dR\n-Dump after the second scheduling pass, to @file{@var{file}.34.sched2}.\n-@item s\n+@opindex fdump-rtl-sched2\n+Dump after the second scheduling pass, to @file{@var{file}.32.sched2}.\n+\n+@item -ds\n+@itemx -fdump-rtl-cse\n @opindex ds\n+@opindex fdump-rtl-cse\n Dump after CSE (including the jump optimization that sometimes follows\n-CSE), to @file{@var{file}.06.cse}.\n-@item S\n+CSE), to @file{@var{file}.04.cse}.\n+\n+@item -dS\n+@itemx -fdump-rtl-sched\n @opindex dS\n-Dump after the first scheduling pass, to @file{@var{file}.24.sched}.\n-@item t\n+@opindex fdump-rtl-sched\n+Dump after the first scheduling pass, to @file{@var{file}.21.sched}.\n+\n+@item -dt\n+@itemx -fdump-rtl-cse2\n @opindex dt\n+@opindex fdump-rtl-cse2\n Dump after the second CSE pass (including the jump optimization that\n-sometimes follows CSE), to @file{@var{file}.18.cse2}.\n-@item T\n+sometimes follows CSE), to @file{@var{file}.15.cse2}.\n+\n+@item -dT\n+@itemx -fdump-rtl-tracer\n @opindex dT\n-Dump after running tracer, to @file{@var{file}.15.tracer}.\n-@item u\n-@opindex du\n-Dump after null pointer elimination pass to @file{@var{file}.05.null}.\n-@item U\n-@opindex dU\n-Dump callgraph and unit-at-a-time optimization @file{@var{file}.00.unit}.\n-@item V\n+@opindex fdump-rtl-tracer\n+Dump after running tracer, to @file{@var{file}.12.tracer}.\n+\n+@item -dV\n+@itemx -fdump-rtl-vpt\n+@itemx -fdump-rtl-vartrack\n @opindex dV\n-Dump after the value profile transformations, to @file{@var{file}.13.vpt}.\n-Also dump after variable tracking, to @file{@var{file}.35.vartrack}.\n-@item w\n+@opindex fdump-rtl-vpt\n+@opindex fdump-rtl-vartrack\n+@option{-dV} and @option{-fdump-rtl-vpt} enable dumping after the value\n+profile transformations, to @file{@var{file}.10.vpt}.  @option{-dV}\n+and @option{-fdump-rtl-vartrack} enable dumping after variable tracking,\n+to @file{@var{file}.34.vartrack}.\n+\n+@item -dw\n+@itemx -fdump-rtl-flow2\n @opindex dw\n-Dump after the second flow pass, to @file{@var{file}.28.flow2}.\n-@item z\n+@opindex fdump-rtl-flow2\n+Dump after the second flow pass, to @file{@var{file}.26.flow2}.\n+\n+@item -dz\n+@itemx -fdump-rtl-peephole2\n @opindex dz\n-Dump after the peephole pass, to @file{@var{file}.29.peephole2}.\n-@item Z\n+@opindex fdump-rtl-peephole2\n+Dump after the peephole pass, to @file{@var{file}.27.peephole2}.\n+\n+@item -dZ\n+@itemx -fdump-rtl-web\n @opindex dZ\n-Dump after constructing the web, to @file{@var{file}.17.web}.\n-@item a\n+@opindex fdump-rtl-web\n+Dump after live range splitting, to @file{@var{file}.14.web}.\n+\n+@item -da\n+@itemx -fdump-rtl-all\n @opindex da\n+@opindex fdump-rtl-all\n Produce all the dumps listed above.\n-@item H\n+\n+@item -dH\n @opindex dH\n Produce a core dump whenever an error occurs.\n-@item m\n+\n+@item -dm\n @opindex dm\n Print statistics on memory usage, at the end of the run, to\n standard error.\n-@item p\n+\n+@item -dp\n @opindex dp\n Annotate the assembler output with a comment indicating which\n pattern and alternative was used.  The length of each instruction is\n also printed.\n-@item P\n+\n+@item -dP\n @opindex dP\n Dump the RTL in the assembler output as a comment before each instruction.\n Also turns on @option{-dp} annotation.\n-@item v\n+\n+@item -dv\n @opindex dv\n-For each of the other indicated dump files (except for\n-@file{@var{file}.01.rtl}), dump a representation of the control flow graph\n-suitable for viewing with VCG to @file{@var{file}.@var{pass}.vcg}.\n-@item x\n+For each of the other indicated dump files (either with @option{-d} or\n+@option{-fdump-rtl-@var{pass}}), dump a representation of the control flow\n+graph suitable for viewing with VCG to @file{@var{file}.@var{pass}.vcg}.\n+\n+@item -dx\n @opindex dx\n Just generate RTL for a function instead of compiling it.  Usually used\n-with @samp{r}.\n-@item y\n+with @samp{r} (@option{-fdump-rtl-expand}).\n+\n+@item -dy\n @opindex dy\n Dump debugging information during parsing, to standard error.\n @end table"}, {"sha": "5544a18468dff65ebdd5c12a985bbde31c7601cc", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -138,7 +138,8 @@ struct tree_opt_pass pass_lower_cf =\n   PROP_gimple_lcf,\t\t\t/* properties_provided */\n   PROP_gimple_any,\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \n@@ -538,5 +539,6 @@ struct tree_opt_pass pass_remove_useless_vars =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "62c35d71c679baf360dd463be396e6f35f92864d", "filename": "gcc/graph.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -220,21 +220,19 @@ end_fct (FILE *fp)\n /* Like print_rtl, but also print out live information for the start of each\n    basic block.  */\n void\n-print_rtl_graph_with_bb (const char *base, const char *suffix, rtx rtx_first)\n+print_rtl_graph_with_bb (const char *base, rtx rtx_first)\n {\n   rtx tmp_rtx;\n   size_t namelen = strlen (base);\n-  size_t suffixlen = strlen (suffix);\n   size_t extlen = strlen (graph_ext[graph_dump_format]) + 1;\n-  char *buf = alloca (namelen + suffixlen + extlen);\n+  char *buf = alloca (namelen + extlen);\n   FILE *fp;\n \n   if (basic_block_info == NULL)\n     return;\n \n   memcpy (buf, base, namelen);\n-  memcpy (buf + namelen, suffix, suffixlen);\n-  memcpy (buf + namelen + suffixlen, graph_ext[graph_dump_format], extlen);\n+  memcpy (buf + namelen, graph_ext[graph_dump_format], extlen);\n \n   fp = fopen (buf, \"a\");\n   if (fp == NULL)\n@@ -385,17 +383,15 @@ print_rtl_graph_with_bb (const char *base, const char *suffix, rtx rtx_first)\n /* Similar as clean_dump_file, but this time for graph output files.  */\n \n void\n-clean_graph_dump_file (const char *base, const char *suffix)\n+clean_graph_dump_file (const char *base)\n {\n   size_t namelen = strlen (base);\n-  size_t suffixlen = strlen (suffix);\n   size_t extlen = strlen (graph_ext[graph_dump_format]) + 1;\n-  char *buf = alloca (namelen + extlen + suffixlen);\n+  char *buf = alloca (namelen + extlen);\n   FILE *fp;\n \n   memcpy (buf, base, namelen);\n-  memcpy (buf + namelen, suffix, suffixlen);\n-  memcpy (buf + namelen + suffixlen, graph_ext[graph_dump_format], extlen);\n+  memcpy (buf + namelen, graph_ext[graph_dump_format], extlen);\n \n   fp = fopen (buf, \"w\");\n \n@@ -417,17 +413,15 @@ clean_graph_dump_file (const char *base, const char *suffix)\n \n /* Do final work on the graph output file.  */\n void\n-finish_graph_dump_file (const char *base, const char *suffix)\n+finish_graph_dump_file (const char *base)\n {\n   size_t namelen = strlen (base);\n-  size_t suffixlen = strlen (suffix);\n   size_t extlen = strlen (graph_ext[graph_dump_format]) + 1;\n-  char *buf = alloca (namelen + suffixlen + extlen);\n+  char *buf = alloca (namelen + extlen);\n   FILE *fp;\n \n   memcpy (buf, base, namelen);\n-  memcpy (buf + namelen, suffix, suffixlen);\n-  memcpy (buf + namelen + suffixlen, graph_ext[graph_dump_format], extlen);\n+  memcpy (buf + namelen, graph_ext[graph_dump_format], extlen);\n \n   fp = fopen (buf, \"a\");\n   if (fp != NULL)"}, {"sha": "b96188c33814a18c4de4b10874b6cea806632ae6", "filename": "gcc/graph.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.h?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -21,8 +21,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_GRAPH_H\n #define GCC_GRAPH_H\n \n-extern void print_rtl_graph_with_bb (const char *, const char *, rtx);\n-extern void clean_graph_dump_file (const char *, const char *);\n-extern void finish_graph_dump_file (const char *, const char *);\n+extern void print_rtl_graph_with_bb (const char *, rtx);\n+extern void clean_graph_dump_file (const char *);\n+extern void finish_graph_dump_file (const char *);\n \n #endif /* ! GCC_GRAPH_H */"}, {"sha": "0beac3206f6a2417b68577090d40745d957cc473", "filename": "gcc/passes.c", "status": "modified", "additions": 43, "deletions": 239, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -81,6 +81,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"value-prof.h\"\n #include \"alloc-pool.h\"\n #include \"tree-pass.h\"\n+#include \"tree-dump.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n@@ -108,166 +109,27 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define DUMPFILE_FORMAT \".%02d.\"\n #endif\n \n-/* Describes a dump file.  */\n-\n-struct dump_file_info\n-{\n-  /* The unique extension to apply, e.g. \".jump\".  */\n-  const char *const extension;\n-\n-  /* The -d<c> character that enables this dump file.  */\n-  char const debug_switch;\n-\n-  /* True if there is a corresponding graph dump file.  */\n-  char const graph_dump_p;\n-\n-  /* True if the user selected this dump.  */\n-  char enabled;\n-\n-  /* True if the files have been initialized (ie truncated).  */\n-  char initialized;\n-};\n-\n-/* Enumerate the extant dump files.  */\n-\n-enum dump_file_index\n-{\n-  DFI_cgraph,\n-  DFI_rtl,\n-  DFI_sibling,\n-  DFI_eh,\n-  DFI_jump,\n-  DFI_null,\n-  DFI_cse,\n-  DFI_gcse,\n-  DFI_loop,\n-  DFI_bypass,\n-  DFI_cfg,\n-  DFI_bp,\n-  DFI_vpt,\n-  DFI_ce1,\n-  DFI_tracer,\n-  DFI_loop2,\n-  DFI_web,\n-  DFI_cse2,\n-  DFI_life,\n-  DFI_combine,\n-  DFI_ce2,\n-  DFI_regmove,\n-  DFI_sms,\n-  DFI_sched,\n-  DFI_lreg,\n-  DFI_greg,\n-  DFI_postreload,\n-  DFI_gcse2,\n-  DFI_flow2,\n-  DFI_peephole2,\n-  DFI_ce3,\n-  DFI_rnreg,\n-  DFI_bbro,\n-  DFI_branch_target_load,\n-  DFI_sched2,\n-  DFI_stack,\n-  DFI_vartrack,\n-  DFI_mach,\n-  DFI_dbr,\n-  DFI_MAX\n-};\n-\n-/* Describes all the dump files.  Should be kept in order of the\n-   pass and in sync with dump_file_index above.\n-\n-   Remaining -d letters:\n-\n-\t\"   e            q         \"\n-\t\"    F     K   O Q     WXY \"\n-*/\n-\n-static struct dump_file_info dump_file_tbl[DFI_MAX] =\n-{\n-  { \"cgraph\",\t'U', 0, 0, 0 },\n-  { \"rtl\",\t'r', 0, 0, 0 },\n-  { \"sibling\",  'i', 0, 0, 0 },\n-  { \"eh\",\t'h', 0, 0, 0 },\n-  { \"jump\",\t'j', 0, 0, 0 },\n-  { \"null\",\t'u', 0, 0, 0 },\n-  { \"cse\",\t's', 0, 0, 0 },\n-  { \"gcse\",\t'G', 1, 0, 0 },\n-  { \"loop\",\t'L', 1, 0, 0 },\n-  { \"bypass\",   'G', 1, 0, 0 }, /* Yes, duplicate enable switch.  */\n-  { \"cfg\",\t'f', 1, 0, 0 },\n-  { \"bp\",\t'b', 1, 0, 0 },\n-  { \"vpt\",\t'V', 1, 0, 0 },\n-  { \"ce1\",\t'C', 1, 0, 0 },\n-  { \"tracer\",\t'T', 1, 0, 0 },\n-  { \"loop2\",\t'L', 1, 0, 0 },\n-  { \"web\",      'Z', 0, 0, 0 },\n-  { \"cse2\",\t't', 1, 0, 0 },\n-  { \"life\",\t'f', 1, 0, 0 },\t/* Yes, duplicate enable switch.  */\n-  { \"combine\",\t'c', 1, 0, 0 },\n-  { \"ce2\",\t'C', 1, 0, 0 },\n-  { \"regmove\",\t'N', 1, 0, 0 },\n-  { \"sms\",      'm', 0, 0, 0 },\n-  { \"sched\",\t'S', 1, 0, 0 },\n-  { \"lreg\",\t'l', 1, 0, 0 },\n-  { \"greg\",\t'g', 1, 0, 0 },\n-  { \"postreload\", 'o', 1, 0, 0 },\n-  { \"gcse2\",    'J', 0, 0, 0 },\n-  { \"flow2\",\t'w', 1, 0, 0 },\n-  { \"peephole2\", 'z', 1, 0, 0 },\n-  { \"ce3\",\t'E', 1, 0, 0 },\n-  { \"rnreg\",\t'n', 1, 0, 0 },\n-  { \"bbro\",\t'B', 1, 0, 0 },\n-  { \"btl\",\t'd', 1, 0, 0 }, /* Yes, duplicate enable switch.  */\n-  { \"sched2\",\t'R', 1, 0, 0 },\n-  { \"stack\",\t'k', 1, 0, 0 },\n-  { \"vartrack\",\t'V', 1, 0, 0 }, /* Yes, duplicate enable switch.  */\n-  { \"mach\",\t'M', 1, 0, 0 },\n-  { \"dbr\",\t'd', 0, 0, 0 },\n-};\n+static int initializing_dump = 0;\n \n /* Routine to open a dump file.  Return true if the dump file is enabled.  */\n \n static int\n-open_dump_file (enum dump_file_index index, tree decl)\n+open_dump_file (enum tree_dump_index index, tree decl)\n {\n-  char *dump_name;\n-  const char *open_arg;\n-  char seq[16];\n-\n-  if (! dump_file_tbl[index].enabled)\n+  if (! dump_enabled_p (index))\n     return 0;\n \n   timevar_push (TV_DUMP);\n-  if (dump_file != NULL)\n-    fclose (dump_file);\n-\n-  sprintf (seq, DUMPFILE_FORMAT, index);\n \n-  if (! dump_file_tbl[index].initialized)\n-    {\n-      /* If we've not initialized the files, do so now.  */\n-      if (graph_dump_format != no_graph\n-\t  && dump_file_tbl[index].graph_dump_p)\n-\t{\n-\t  dump_name = concat (seq, dump_file_tbl[index].extension, NULL);\n-\t  clean_graph_dump_file (dump_base_name, dump_name);\n-\t  free (dump_name);\n-\t}\n-      dump_file_tbl[index].initialized = 1;\n-      open_arg = \"w\";\n-    }\n-  else\n-    open_arg = \"a\";\n+  if (dump_file != NULL || dump_file_name != NULL)\n+    abort ();\n \n-  dump_name = concat (dump_base_name, seq,\n-\t\t      dump_file_tbl[index].extension, NULL);\n+  dump_file_name = get_dump_file_name (index);\n+  initializing_dump = !dump_initialized_p (index);\n+  dump_file = dump_begin (index, NULL);\n \n-  dump_file = fopen (dump_name, open_arg);\n   if (dump_file == NULL)\n-    fatal_error (\"can't open %s: %m\", dump_name);\n-\n-  free (dump_name);\n+    fatal_error (\"can't open %s: %m\", dump_file_name);\n \n   if (decl)\n     fprintf (dump_file, \"\\n;; Function %s%s\\n\\n\",\n@@ -285,7 +147,7 @@ open_dump_file (enum dump_file_index index, tree decl)\n /* Routine to close a dump file.  */\n \n static void\n-close_dump_file (enum dump_file_index index,\n+close_dump_file (enum tree_dump_index index,\n \t\t void (*func) (FILE *, rtx),\n \t\t rtx insns)\n {\n@@ -294,25 +156,23 @@ close_dump_file (enum dump_file_index index,\n \n   timevar_push (TV_DUMP);\n   if (insns\n-      && graph_dump_format != no_graph\n-      && dump_file_tbl[index].graph_dump_p)\n+      && graph_dump_format != no_graph)\n     {\n-      char seq[16];\n-      char *suffix;\n+      /* If we've not initialized the files, do so now.  */\n+      if (initializing_dump)\n+\tclean_graph_dump_file (dump_file_name);\n \n-      sprintf (seq, DUMPFILE_FORMAT, index);\n-      suffix = concat (seq, dump_file_tbl[index].extension, NULL);\n-      print_rtl_graph_with_bb (dump_base_name, suffix, insns);\n-      free (suffix);\n+      print_rtl_graph_with_bb (dump_file_name, insns);\n     }\n \n   if (func && insns)\n     func (dump_file, insns);\n \n-  fflush (dump_file);\n-  fclose (dump_file);\n+  dump_end (index, dump_file);\n+  free ((char *) dump_file_name);\n \n   dump_file = NULL;\n+  dump_file_name = NULL;\n   timevar_pop (TV_DUMP);\n }\n \n@@ -603,7 +463,7 @@ rest_of_handle_new_regalloc (void)\n \n   ggc_collect ();\n \n-  if (dump_file_tbl[DFI_greg].enabled)\n+  if (dump_enabled_p (DFI_greg))\n     {\n       timevar_push (TV_DUMP);\n       dump_global_regs (dump_file);\n@@ -657,7 +517,7 @@ rest_of_handle_old_regalloc (void)\n       timevar_pop (TV_JUMP);\n     }\n \n-  if (dump_file_tbl[DFI_lreg].enabled)\n+  if (dump_enabled_p (DFI_lreg))\n     {\n       timevar_push (TV_DUMP);\n       dump_flow_info (dump_file);\n@@ -683,7 +543,7 @@ rest_of_handle_old_regalloc (void)\n       failure = reload (get_insns (), 0);\n     }\n \n-  if (dump_file_tbl[DFI_greg].enabled)\n+  if (dump_enabled_p (DFI_greg))\n     {\n       timevar_push (TV_DUMP);\n       dump_global_regs (dump_file);\n@@ -1454,6 +1314,11 @@ rest_of_handle_jump (void)\n #ifdef ENABLE_CHECKING\n   verify_flow_info ();\n #endif\n+\n+  if (cfun->tail_call_emit)\n+    fixup_tail_calls ();\n+\n+  close_dump_file (DFI_sibling, print_rtl, get_insns ());\n   timevar_pop (TV_JUMP);\n }\n \n@@ -1713,27 +1578,8 @@ rest_of_clean_state (void)\n void\n rest_of_compilation (void)\n {\n-  /* There's no need to defer outputting this function any more; we\n-     know we want to output it.  */\n-  DECL_DEFER_OUTPUT (current_function_decl) = 0;\n-\n-  /* Now that we're done expanding trees to RTL, we shouldn't have any\n-     more CONCATs anywhere.  */\n-  generating_concat_p = 0;\n-\n-  /* When processing delayed functions, prepare_function_start () won't\n-     have been run to re-initialize it.  */\n-  cse_not_expected = ! optimize;\n-\n-  finalize_block_changes ();\n-\n-  /* Dump the rtl code if we are dumping rtl.  */\n-  if (open_dump_file (DFI_rtl, current_function_decl))\n-    close_dump_file (DFI_rtl, print_rtl, get_insns ());\n-\n   /* Convert from NOTE_INSN_EH_REGION style notes, and do other\n-     sorts of eh initialization.  Delay this until after the\n-     initial rtl dump so that we can see the original nesting.  */\n+     sorts of eh initialization.  */\n   convert_from_eh_region_ranges ();\n \n   /* If we're emitting a nested function, make sure its parent gets\n@@ -1770,9 +1616,6 @@ rest_of_compilation (void)\n \n   rest_of_handle_jump ();\n \n-  if (cfun->tail_call_emit)\n-    fixup_tail_calls ();\n-\n   rest_of_handle_eh ();\n \n   /* Delay emitting hard_reg_initial_value sets until after EH landing pad\n@@ -2001,17 +1844,13 @@ rest_of_compilation (void)\n   rest_of_clean_state ();\n }\n \n-void\n-init_optimization_passes (void)\n-{\n-  open_dump_file (DFI_cgraph, NULL);\n-  cgraph_dump_file = dump_file;\n-  dump_file = NULL;\n-}\n-\n void\n finish_optimization_passes (void)\n {\n+  enum tree_dump_index i;\n+  struct dump_file_info *dfi;\n+  char *name;\n+\n   timevar_push (TV_DUMP);\n   if (profile_arc_flag || flag_test_coverage || flag_branch_probabilities)\n     {\n@@ -2026,59 +1865,23 @@ finish_optimization_passes (void)\n       close_dump_file (DFI_combine, NULL, NULL_RTX);\n     }\n \n-  dump_file = cgraph_dump_file;\n-  cgraph_dump_file = NULL;\n-  close_dump_file (DFI_cgraph, NULL, NULL_RTX);\n-\n   /* Do whatever is necessary to finish printing the graphs.  */\n   if (graph_dump_format != no_graph)\n-    {\n-      int i;\n-\n-      for (i = 0; i < (int) DFI_MAX; ++i)\n-\tif (dump_file_tbl[i].initialized && dump_file_tbl[i].graph_dump_p)\n-\t  {\n-\t    char seq[16];\n-\t    char *suffix;\n-\n-\t    sprintf (seq, DUMPFILE_FORMAT, i);\n-\t    suffix = concat (seq, dump_file_tbl[i].extension, NULL);\n-\t    finish_graph_dump_file (dump_base_name, suffix);\n-\t    free (suffix);\n-\t  }\n-    }\n+    for (i = DFI_MIN; (dfi = get_dump_file_info (i)) != NULL; ++i)\n+      if (dump_initialized_p (i)\n+\t  && (dfi->flags & TDF_RTL) != 0\n+\t  && (name = get_dump_file_name (i)) != NULL)\n+        {\n+          finish_graph_dump_file (name);\n+          free (name);\n+        }\n \n   timevar_pop (TV_DUMP);\n }\n \n-bool\n-enable_rtl_dump_file (int letter)\n-{\n-  bool matched = false;\n-  int i;\n-\n-  if (letter == 'a')\n-    {\n-      for (i = 0; i < (int) DFI_MAX; ++i)\n-\tdump_file_tbl[i].enabled = 1;\n-      matched = true;\n-    }\n-  else\n-    {\n-      for (i = 0; i < (int) DFI_MAX; ++i)\n-\tif (letter == dump_file_tbl[i].debug_switch)\n-\t  {\n-\t    dump_file_tbl[i].enabled = 1;\n-\t    matched = true;\n-\t  }\n-    }\n-\n-  return matched;\n-}\n-\n struct tree_opt_pass pass_rest_of_compilation =\n {\n-  \"rest of compilation\",                /* name */\n+  NULL,\t\t\t                /* name */\n   NULL,\t\t                        /* gate */\n   rest_of_compilation,                  /* execute */\n   NULL,                                 /* sub */\n@@ -2089,7 +1892,8 @@ struct tree_opt_pass pass_rest_of_compilation =\n   0,                                    /* properties_provided */\n   PROP_rtl,                             /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+  TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n "}, {"sha": "e4e077658c9adbb30ada1f170f5b7e7b140be45f", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1471,5 +1471,6 @@ struct tree_opt_pass pass_profile =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_ggc_collect | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_ggc_collect | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "eb4a0c69027481ad4b8641b4466661869f2ca573", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -423,6 +423,7 @@ FILE *asm_out_file;\n FILE *aux_info_file;\n FILE *dump_file = NULL;\n FILE *cgraph_dump_file = NULL;\n+char *dump_file_name;\n \n /* The current working directory of a translation.  It's generally the\n    directory from which compilation was initiated, but a preprocessed\n@@ -1984,7 +1985,7 @@ lang_dependent_init (const char *name)\n {\n   location_t save_loc = input_location;\n   if (dump_base_name == 0)\n-    dump_base_name = name ? name : \"gccdump\";\n+    dump_base_name = name && name[0] ? name : \"gccdump\";\n \n   /* Other front-end initialization.  */\n #ifdef USE_MAPPED_LOCATION\n@@ -2003,7 +2004,6 @@ lang_dependent_init (const char *name)\n      front end is initialized.  */\n   init_eh ();\n   init_optabs ();\n-  init_optimization_passes ();\n \n   /* The following initialization functions need to generate rtl, so\n      provide a dummy function context for them.  */"}, {"sha": "a657036548e3ebc27d0ef18c57a4544056e5aaad", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -78,7 +78,6 @@ extern void rest_of_type_compilation (tree, int);\n extern void rest_of_compilation (void);\n extern void tree_rest_of_compilation (tree, bool);\n extern void init_tree_optimization_passes (void);\n-extern void init_optimization_passes (void);\n extern void finish_optimization_passes (void);\n extern bool enable_rtl_dump_file (int);\n "}, {"sha": "fa47ce6cda0c4befcaf7e3cdea86dbcb9d56e8ea", "filename": "gcc/tree-alias-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-alias-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-alias-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-alias-common.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1052,7 +1052,8 @@ struct tree_opt_pass pass_build_pta =\n   PROP_pta,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n  \n \n@@ -1097,7 +1098,8 @@ struct tree_opt_pass pass_del_pta =\n   0,\t\t\t\t\t/* properties_provided */\n   PROP_pta,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n  \n "}, {"sha": "ce0be966592ec4d7cb78a0408b2007025076a91d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -207,7 +207,8 @@ struct tree_opt_pass pass_build_cfg =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+  TODO_verify_stmts,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Search the CFG for any computed gotos.  If found, factor them to a \n@@ -1647,7 +1648,8 @@ struct tree_opt_pass pass_remove_useless_stmts =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \n@@ -4765,7 +4767,8 @@ struct tree_opt_pass pass_split_crit_edges =\n   PROP_no_crit_edges,            /* properties_provided */\n   0,                             /* properties_destroyed */\n   0,                             /* todo_flags_start */\n-  TODO_dump_func,                             /* todo_flags_finish */\n+  TODO_dump_func,                /* todo_flags_finish */\n+  0                              /* letter */\n };\n \n \f\n@@ -4959,7 +4962,8 @@ struct tree_opt_pass pass_warn_function_return =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n #include \"gt-tree-cfg.h\""}, {"sha": "d0c6c637384e56671821d3c2ea66e5069d9602a3", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -935,7 +935,8 @@ struct tree_opt_pass pass_lower_vector_ssa =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\t/* todo_flags_finish */\n     | TODO_ggc_collect | TODO_verify_ssa\n-    | TODO_verify_stmts | TODO_verify_flow\n+    | TODO_verify_stmts | TODO_verify_flow,\n+  0\t\t\t\t\t/* letter */\n };\n \n struct tree_opt_pass pass_pre_expand = \n@@ -952,5 +953,6 @@ struct tree_opt_pass pass_pre_expand =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\n-    | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "87e0ac865f61c62b4ee9590dd57090f6e5e5d026", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -135,7 +135,8 @@ struct tree_opt_pass pass_referenced_vars =\n   PROP_referenced_vars,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n };\n \n "}, {"sha": "dfe2ebbae6e6713f2c8ace553d375dd57b3337f9", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 130, "deletions": 50, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -28,6 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"toplev.h\"\n #include \"tree-dump.h\"\n+#include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n \n@@ -37,7 +38,7 @@ static void dequeue_and_dump (dump_info_p);\n static void dump_new_line (dump_info_p);\n static void dump_maybe_newline (dump_info_p);\n static void dump_string_field (dump_info_p, const char *, const char *);\n-static void dump_enable_all (int);\n+static int dump_enable_all (int, int);\n \n /* Add T to the end of the queue of nodes to dump.  Returns the index\n    assigned to T.  */\n@@ -658,30 +659,61 @@ dump_node (tree t, int flags, FILE *stream)\n     }\n   splay_tree_delete (di.nodes);\n }\n-\n-/* Define a tree dump switch.  */\n-struct dump_file_info\n-{\n-  const char *suffix;\t\t/* suffix to give output file.  */\n-  const char *swtch;\t\t/* command line switch */\n-  int flags;\t\t\t/* user flags */\n-  int state;\t\t\t/* state of play */\n-};\n+\f\n \n /* Table of tree dump switches. This must be consistent with the\n    TREE_DUMP_INDEX enumeration in tree.h */\n static struct dump_file_info dump_files[TDI_end] =\n {\n-  {NULL, NULL, 0, 0},\n-  {\".tu\", \"translation-unit\", 0, 0},\n-  {\".class\", \"class-hierarchy\", 0, 0},\n-  {\".original\", \"tree-original\", 0, 0},\n-  {\".generic\", \"tree-generic\", 0, 0},\n-  {\".nested\", \"tree-nested\", 0, 0},\n-  {\".inlined\", \"tree-inlined\", 0, 0},\n-  {\".vcg\", \"tree-vcg\", 0, 0},\n-  {\".xml\", \"call-graph\", 0, 0},\n-  {NULL, \"tree-all\", 0, 0},\n+  {NULL, NULL, 0, 0, 0, 0},\n+  {\".tu\", \"translation-unit\", TDF_TREE, 0, 0, 0},\n+  {\".class\", \"class-hierarchy\", TDF_TREE, 0, 1, 0},\n+  {\".original\", \"tree-original\", TDF_TREE, 0, 2, 0},\n+  {\".generic\", \"tree-generic\", TDF_TREE, 0, 3, 0},\n+  {\".nested\", \"tree-nested\", TDF_TREE, 0, 4, 0},\n+  {\".inlined\", \"tree-inlined\", TDF_TREE, 0, 5, 0},\n+  {\".vcg\", \"tree-vcg\", TDF_TREE, 0, 6, 0},\n+  /* FIXME  -fdump-call-graph is broken.  Set TDF_TREE when it is fixed.  */\n+  {\".xml\", \"call-graph\", 0, 0, 7, 0},\n+  {NULL, \"tree-all\", TDF_TREE, 0, 0, 0},\n+  {NULL, \"rtl-all\", TDF_RTL, 0, 0, 0},\n+\n+  { \".sibling\", \"rtl-sibling\",\t\tTDF_RTL, 0,  1, 'i'},\n+  { \".eh\", \"rtl-eh\",\t\t\tTDF_RTL, 0,  2, 'h'},\n+  { \".jump\", \"rtl-jump\",\t\tTDF_RTL, 0,  3, 'j'},\n+  { \".cse\", \"rtl-cse\",\t\t\tTDF_RTL, 0,  4, 's'},\n+  { \".gcse\", \"rtl-gcse\",\t\tTDF_RTL, 0,  5, 'G'},\n+  { \".loop\", \"rtl-loop\",\t\tTDF_RTL, 0,  6, 'L'},\n+  { \".bypass\", \"rtl-bypass\",\t\tTDF_RTL, 0,  7, 'G'},\n+  { \".cfg\", \"rtl-cfg\",\t\t\tTDF_RTL, 0,  8, 'f'},\n+  { \".bp\", \"rtl-bp\",\t\t\tTDF_RTL, 0,  9, 'b'},\n+  { \".vpt\", \"rtl-vpt\",\t\t\tTDF_RTL, 0, 10, 'V'},\n+  { \".ce1\", \"rtl-ce1\",\t\t\tTDF_RTL, 0, 11, 'C'},\n+  { \".tracer\", \"rtl-tracer\",\t\tTDF_RTL, 0, 12, 'T'},\n+  { \".loop2\", \"rtl-loop2\",\t\tTDF_RTL, 0, 13, 'L'},\n+  { \".web\", \"rtl-web\",\t\t\tTDF_RTL, 0, 14, 'Z'},\n+  { \".cse2\", \"rtl-cse2\",\t\tTDF_RTL, 0, 15, 't'},\n+  { \".life\", \"rtl-life\",\t\tTDF_RTL, 0, 16, 'f'},\n+  { \".combine\", \"rtl-combine\",\t\tTDF_RTL, 0, 17, 'c'},\n+  { \".ce2\", \"rtl-ce2\",\t\t\tTDF_RTL, 0, 18, 'C'},\n+  { \".regmove\", \"rtl-regmove\",\t\tTDF_RTL, 0, 19, 'N'},\n+  { \".sms\", \"rtl-sms\",\t\t\tTDF_RTL, 0, 20, 'm'},\n+  { \".sched\", \"rtl-sched\",\t\tTDF_RTL, 0, 21, 'S'},\n+  { \".lreg\", \"rtl-lreg\",\t\tTDF_RTL, 0, 22, 'l'},\n+  { \".greg\", \"rtl-greg\",\t\tTDF_RTL, 0, 23, 'g'},\n+  { \".postreload\", \"rtl-postreload\",\tTDF_RTL, 0, 24, 'o'},\n+  { \".gcse2\", \"rtl-gcse2\",\t\tTDF_RTL, 0, 25, 'J'},\n+  { \".flow2\", \"rtl-flow2\",\t\tTDF_RTL, 0, 26, 'w'},\n+  { \".peephole2\", \"rtl-peephole2\",\tTDF_RTL, 0, 27, 'z'},\n+  { \".ce3\", \"rtl-ce3\",\t\t\tTDF_RTL, 0, 28, 'E'},\n+  { \".rnreg\", \"rtl-rnreg\",\t\tTDF_RTL, 0, 29, 'n'},\n+  { \".bbro\", \"rtl-bbro\",\t\tTDF_RTL, 0, 30, 'B'},\n+  { \".btl\", \"rtl-btl\",\t\t\tTDF_RTL, 0, 31, 'd'},\n+  { \".sched2\", \"rtl-sched2\",\t\tTDF_RTL, 0, 32, 'R'},\n+  { \".stack\", \"rtl-stack\",\t\tTDF_RTL, 0, 33, 'k'},\n+  { \".vartrack\", \"rtl-vartrack\",\tTDF_RTL, 0, 34, 'V'},\n+  { \".mach\", \"rtl-mach\",\t\tTDF_RTL, 0, 35, 'M'},\n+  { \".dbr\", \"rtl-dbr\",\t\t\tTDF_RTL, 0, 36, 'd'}\n };\n \n /* Dynamically registered tree dump files and switches.  */\n@@ -714,7 +746,8 @@ static const struct dump_option_value_info dump_options[] =\n };\n \n unsigned int\n-dump_register (const char *suffix, const char *swtch)\n+dump_register (const char *suffix, const char *swtch, int flags,\n+\t       unsigned int num, int letter)\n {\n   size_t this = extra_dump_files_in_use++;\n \n@@ -732,24 +765,52 @@ dump_register (const char *suffix, const char *swtch)\n   memset (&extra_dump_files[this], 0, sizeof (struct dump_file_info));\n   extra_dump_files[this].suffix = suffix;\n   extra_dump_files[this].swtch = swtch;\n+  extra_dump_files[this].flags = flags;\n+  extra_dump_files[this].num = num;\n+  extra_dump_files[this].letter = letter;\n \n   return this + TDI_end;\n }\n \n+\n /* Return the dump_file_info for the given phase.  */\n \n-static struct dump_file_info *\n+struct dump_file_info *\n get_dump_file_info (enum tree_dump_index phase)\n {\n   if (phase < TDI_end)\n     return &dump_files[phase];\n   else if (phase - TDI_end >= extra_dump_files_in_use)\n-    abort ();\n+    return NULL;\n   else\n     return extra_dump_files + (phase - TDI_end);\n }\n \n \n+/* Return the name of the dump file for the given phase.\n+   If the dump is not enabled, returns NULL.  */\n+\n+char *\n+get_dump_file_name (enum tree_dump_index phase)\n+{\n+  char dump_id[7];\n+  struct dump_file_info *dfi;\n+\n+  if (phase == TDI_none)\n+    return NULL;\n+\n+  dfi = get_dump_file_info (phase);\n+  if (dfi->state == 0)\n+    return NULL;\n+\n+  if (dfi->num < 0\n+      || snprintf (dump_id, sizeof (dump_id), \".%s%02d\",\n+\t\t   (dfi->flags & TDF_TREE) ? \"t\" : \"\", dfi->num) < 0)\n+    dump_id[0] = '\\0';\n+\n+  return concat (dump_base_name, dump_id, dfi->suffix, NULL);\n+}\n+\n /* Begin a tree dump for PHASE. Stores any user supplied flag in\n    *FLAG_PTR and returns a stream to write to. If the dump is not\n    enabled, returns NULL.\n@@ -758,22 +819,15 @@ get_dump_file_info (enum tree_dump_index phase)\n FILE *\n dump_begin (enum tree_dump_index phase, int *flag_ptr)\n {\n-  FILE *stream;\n   char *name;\n-  char dump_id[10];\n   struct dump_file_info *dfi;\n+  FILE *stream;\n \n-  if (phase == TDI_none)\n+  if (phase == TDI_none || !dump_enabled_p (phase))\n     return NULL;\n \n+  name = get_dump_file_name (phase);\n   dfi = get_dump_file_info (phase);\n-  if (dfi->state == 0)\n-    return NULL;\n-\n-  if (snprintf (dump_id, sizeof (dump_id), \".t%02d\", phase) < 0)\n-    dump_id[0] = '\\0';\n-\n-  name = concat (dump_base_name, dump_id, dfi->suffix, NULL);\n   stream = fopen (name, dfi->state < 0 ? \"w\" : \"a\");\n   if (!stream)\n     error (\"could not open dump file `%s': %s\", name, strerror (errno));\n@@ -796,6 +850,15 @@ dump_enabled_p (enum tree_dump_index phase)\n   return dfi->state;\n }\n \n+/* Returns nonzero if tree dump PHASE has been initialized.  */\n+\n+int\n+dump_initialized_p (enum tree_dump_index phase)\n+{\n+  struct dump_file_info *dfi = get_dump_file_info (phase);\n+  return dfi->state > 0;\n+}\n+\n /* Returns the switch name of PHASE.  */\n \n const char *\n@@ -814,28 +877,33 @@ dump_end (enum tree_dump_index phase ATTRIBUTE_UNUSED, FILE *stream)\n   fclose (stream);\n }\n \n-/* Enable all tree dumps.  */\n+/* Enable all tree dumps.  Return number of enabled tree dumps.  */\n \n-static void\n-dump_enable_all (int flags)\n+static int\n+dump_enable_all (int flags, int letter)\n {\n+  int n = 0;\n   size_t i;\n \n   for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n-    {\n-      dump_files[i].state = -1;\n-      dump_files[i].flags = flags;\n-    }\n+    if ((dump_files[i].flags & flags)\n+\t&& (letter == 0 || letter == dump_files[i].letter))\n+      {\n+        dump_files[i].state = -1;\n+        dump_files[i].flags = flags;\n+        n++;\n+      }\n \n   for (i = 0; i < extra_dump_files_in_use; i++)\n-    {\n-      extra_dump_files[i].state = -1;\n-      extra_dump_files[i].flags = flags;\n-    }\n+    if ((extra_dump_files[i].flags & flags)\n+\t&& (letter == 0 || letter == extra_dump_files[i].letter))\n+      {\n+        extra_dump_files[i].state = -1;\n+        extra_dump_files[i].flags = flags;\n+\tn++;\n+      }\n \n-  /* FIXME  -fdump-call-graph is broken.  */\n-  dump_files[TDI_xml].state = 0;\n-  dump_files[TDI_xml].flags = 0;\n+  return n;\n }\n \n /* Parse ARG as a dump switch. Return nonzero if it is, and store the\n@@ -882,11 +950,12 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi)\n     }\n \n   dfi->state = -1;\n-  dfi->flags = flags;\n+  dfi->flags |= flags;\n \n-  /* Process -fdump-tree-all by enabling all the known dumps.  */\n+  /* Process -fdump-tree-all and -fdump-rtl-all, by enabling all the\n+     known dumps.  */\n   if (dfi->suffix == NULL)\n-    dump_enable_all (flags);\n+    dump_enable_all (dfi->flags, 0);\n \n   return 1;\n }\n@@ -921,3 +990,14 @@ dump_function (enum tree_dump_index phase, tree fn)\n       dump_end (phase, stream);\n     }\n }\n+\n+bool\n+enable_rtl_dump_file (int letter)\n+{\n+  if (letter == 'a')\n+    letter = 0;\n+\n+  return dump_enable_all (TDF_RTL, letter) > 0;\n+}\n+\n+"}, {"sha": "8c05f1c87c5d8c225e484a6ad374a99667ec5f2a", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -88,6 +88,6 @@ extern void queue_and_dump_type (dump_info_p, tree);\n extern void dump_function (enum tree_dump_index, tree);\n extern void dump_function_to_file (tree, FILE *, int);\n \n-extern unsigned int dump_register (const char *, const char *);\n+extern unsigned int dump_register (const char *, const char *, int, unsigned int, int);\n \n #endif /* ! GCC_TREE_DUMP_H */"}, {"sha": "212604768a5ffb587f0b6f5ff65d2926af03616c", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1660,7 +1660,8 @@ struct tree_opt_pass pass_lower_eh =\n   PROP_gimple_leh,\t\t\t/* properties_provided */\n   PROP_gimple_lcf,\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \f"}, {"sha": "daca885f64abfe36de840e4133b45cb73821bf67", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1097,5 +1097,6 @@ struct tree_opt_pass pass_if_conversion =\n   TODO_dump_func\n     | TODO_verify_ssa\n     | TODO_verify_stmts\n-    | TODO_verify_flow               /* todo_flags_finish */\n+    | TODO_verify_flow,              /* todo_flags_finish */\n+  0\t\t\t\t     /* letter */\n };"}, {"sha": "735d71fe0c467a376bb3aa7312e5cd005a88b11f", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1723,5 +1723,6 @@ struct tree_opt_pass pass_build_ssa =\n   PROP_ssa,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "a03ae879d28a0a215df0b48cf05c645ab0fec980", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1253,7 +1253,8 @@ struct tree_opt_pass pass_mudflap_1 =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func                        /* todo_flags_finish */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n struct tree_opt_pass pass_mudflap_2 = \n@@ -1270,7 +1271,8 @@ struct tree_opt_pass pass_mudflap_2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_verify_flow | TODO_verify_stmts\n-  | TODO_dump_func                      /* todo_flags_finish */\n+  | TODO_dump_func,                     /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n #include \"gt-tree-mudflap.h\""}, {"sha": "e47ebaca9470e39a1c03838fd8402f0a8dcd6aa6", "filename": "gcc/tree-nomudflap.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-nomudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-nomudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nomudflap.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -98,7 +98,8 @@ struct tree_opt_pass pass_mudflap_1 =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n };\n \n struct tree_opt_pass pass_mudflap_2 = \n@@ -114,7 +115,8 @@ struct tree_opt_pass pass_mudflap_2 =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n };\n \n /* Instead of:"}, {"sha": "0df0712d19c301bf8795fc26926afcb01f86715c", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -214,5 +214,6 @@ struct tree_opt_pass pass_nrv =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "701b1043087b2f1da271d01f0c37dcf7d740cfbd", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 83, "deletions": 28, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-alias-common.h\"\n #include \"ggc.h\"\n #include \"cgraph.h\"\n+#include \"graph.h\"\n \n \n /* Global variables used to communicate with passes.  */\n@@ -72,7 +73,8 @@ static struct tree_opt_pass pass_gimple =\n   PROP_gimple_any,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n@@ -98,7 +100,8 @@ static struct tree_opt_pass pass_all_optimizations =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Pass: cleanup the CFG just before expanding trees to RTL.\n@@ -127,7 +130,8 @@ static struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Pass: do the actions required to finish with tree-ssa optimization\n@@ -170,7 +174,8 @@ static struct tree_opt_pass pass_free_datastructures =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \n@@ -197,54 +202,76 @@ static struct tree_opt_pass pass_init_datastructures =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Iterate over the pass tree allocating dump file numbers.  We want\n    to do this depth first, and independent of whether the pass is\n    enabled or not.  */\n \n static void\n-register_one_dump_file (struct tree_opt_pass *pass)\n+register_one_dump_file (struct tree_opt_pass *pass, int n)\n {\n   char *dot_name, *flag_name;\n   char num[10];\n \n-  if (!pass->name)\n-    return;\n-\n   /* See below in next_pass_1.  */\n   num[0] = '\\0';\n   if (pass->static_pass_number != -1)\n     sprintf (num, \"%d\", ((int) pass->static_pass_number < 0\n \t\t\t ? 1 : pass->static_pass_number));\n \n   dot_name = concat (\".\", pass->name, num, NULL);\n-  flag_name = concat (\"tree-\", pass->name, num, NULL);\n-\n-  pass->static_pass_number = dump_register (dot_name, flag_name);\n+  if (pass->properties_provided & PROP_trees)\n+    {\n+      flag_name = concat (\"tree-\", pass->name, num, NULL);\n+      pass->static_pass_number = dump_register (dot_name, flag_name,\n+                                                TDF_TREE, n + TDI_tree_all, 0);\n+    }\n+  else\n+    {\n+      flag_name = concat (\"rtl-\", pass->name, num, NULL);\n+      pass->static_pass_number = dump_register (dot_name, flag_name,\n+                                                TDF_RTL, n, pass->letter);\n+    }\n }\n \n static int \n register_dump_files (struct tree_opt_pass *pass, int properties)\n {\n+  static int n = 0;\n   do\n     {\n-      /* Verify that all required properties are present.  */\n-      if (pass->properties_required & ~properties)\n-        abort ();\n-\n-      if (pass->properties_destroyed & pass->properties_provided)\n-        abort ();\n+      int new_properties;\n+      int pass_number;\n \n       pass->properties_required = properties;\n-      pass->properties_provided = properties =\n+      new_properties =\n         (properties | pass->properties_provided) & ~pass->properties_destroyed;\n \n-      if (properties & PROP_trees)\n-        register_one_dump_file (pass);\n+      /* Reset the counter when we reach RTL-based passes.  */\n+      if ((pass->properties_provided ^ pass->properties_required) & PROP_rtl)\n+        n = 0;\n+\n+      pass_number = n;\n+      if (pass->name)\n+        n++;\n+\n       if (pass->sub)\n-\tproperties = register_dump_files (pass->sub, properties);\n+        new_properties = register_dump_files (pass->sub, new_properties);\n+\n+      /* If we have a gate, combine the properties that we could have with\n+         and without the pass being examined.  */\n+      if (pass->gate)\n+        properties &= new_properties;\n+      else\n+        properties = new_properties;\n+\n+      pass->properties_provided = properties;\n+      if (pass->name)\n+        register_one_dump_file (pass, pass_number);\n+\n       pass = pass->next;\n     }\n   while (pass);\n@@ -386,7 +413,7 @@ static void execute_pass_list (struct tree_opt_pass *);\n static unsigned int last_verified;\n \n static void\n-execute_todo (unsigned int flags)\n+execute_todo (int properties, unsigned int flags)\n {\n   if (flags & TODO_rename_vars)\n     {\n@@ -396,8 +423,13 @@ execute_todo (unsigned int flags)\n \n   if ((flags & TODO_dump_func) && dump_file)\n     {\n-      dump_function_to_file (current_function_decl,\n-\t\t\t     dump_file, dump_flags);\n+      if (properties & PROP_trees)\n+        dump_function_to_file (current_function_decl,\n+                               dump_file, dump_flags);\n+      else if (properties & PROP_cfg)\n+        print_rtl_with_bb (dump_file, get_insns ());\n+      else\n+        print_rtl (dump_file, get_insns ());\n \n       /* Flush the file.  If verification fails, we won't be able to\n \t close the file before aborting.  */\n@@ -433,20 +465,33 @@ execute_one_pass (struct tree_opt_pass *pass)\n   /* Run pre-pass verification.  */\n   todo = pass->todo_flags_start & ~last_verified;\n   if (todo)\n-    execute_todo (todo);\n+    execute_todo (pass->properties_required, todo);\n \n   /* If a dump file name is present, open it if enabled.  */\n   if (pass->static_pass_number != -1)\n     {\n+      bool initializing_dump = !dump_initialized_p (pass->static_pass_number);\n+      dump_file_name = get_dump_file_name (pass->static_pass_number);\n       dump_file = dump_begin (pass->static_pass_number, &dump_flags);\n       if (dump_file)\n \t{\n \t  const char *dname, *aname;\n \t  dname = lang_hooks.decl_printable_name (current_function_decl, 2);\n \t  aname = (IDENTIFIER_POINTER\n \t\t   (DECL_ASSEMBLER_NAME (current_function_decl)));\n-\t  fprintf (dump_file, \"\\n;; Function %s (%s)\\n\\n\", dname, aname);\n+          fprintf (dump_file, \"\\n;; Function %s (%s)%s\\n\\n\", dname, aname,\n+             cfun->function_frequency == FUNCTION_FREQUENCY_HOT\n+             ? \" (hot)\"\n+             : cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED\n+             ? \" (unlikely executed)\"\n+             : \"\");\n \t}\n+\n+      if (initializing_dump\n+          && graph_dump_format != no_graph\n+\t  && (pass->properties_provided & (PROP_cfg | PROP_rtl))\n+\t      == (PROP_cfg | PROP_rtl))\n+        clean_graph_dump_file (dump_file_name);\n     }\n \n   /* If a timevar is present, start it.  */\n@@ -457,15 +502,25 @@ execute_one_pass (struct tree_opt_pass *pass)\n   if (pass->execute)\n     pass->execute ();\n \n+  if (dump_file\n+      && (pass->properties_provided & (PROP_cfg | PROP_rtl))\n+\t  == (PROP_cfg | PROP_rtl))\n+    print_rtl_graph_with_bb (dump_file_name, get_insns ());\n+\n   /* Run post-pass cleanup and verification.  */\n   todo = pass->todo_flags_finish;\n   last_verified = todo & TODO_verify_all;\n   if (todo)\n-    execute_todo (todo);\n+    execute_todo (pass->properties_provided, todo);\n \n   /* Close down timevar and dump file.  */\n   if (pass->tv_id)\n     timevar_pop (pass->tv_id);\n+  if (dump_file_name)\n+    {\n+      free ((char *) dump_file_name);\n+      dump_file_name = NULL;\n+    }\n   if (dump_file)\n     {\n       dump_end (pass->static_pass_number, dump_file);"}, {"sha": "c9403f0dd358c45f62488cfcaa1afa8fd919c651", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -2102,5 +2102,6 @@ struct tree_opt_pass pass_del_ssa =\n   PROP_ssa,\t\t\t\t/* properties_destroyed */\n   TODO_verify_ssa | TODO_verify_flow\n     | TODO_verify_stmts,\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_ggc_collect,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "29877180b7d9adfaa71013fa325da056459aecd9", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -26,9 +26,13 @@ Boston, MA 02111-1307, USA.  */\n /* Global variables used to communicate with passes.  */\n extern FILE *dump_file;\n extern int dump_flags;\n+extern const char *dump_file_name;\n \n extern struct bitmap_head_def *vars_to_rename;\n \n+/* Return the dump_file_info for the given phase.  */\n+extern struct dump_file_info *get_dump_file_info (enum tree_dump_index);\n+\n /* Describe one pass.  */\n struct tree_opt_pass\n {\n@@ -64,6 +68,20 @@ struct tree_opt_pass\n   /* Flags indicating common sets things to do before and after.  */\n   unsigned int todo_flags_start;\n   unsigned int todo_flags_finish;\n+\n+  /* Letter for RTL dumps.  */\n+  char letter;\n+};\n+\n+/* Define a tree dump switch.  */\n+struct dump_file_info\n+{\n+  const char *suffix;           /* suffix to give output file.  */\n+  const char *swtch;            /* command line switch */\n+  int flags;                    /* user flags */\n+  int state;                    /* state of play */\n+  int num;                      /* dump file number */\n+  int letter;                   /* enabling letter for RTL dumps */\n };\n \n /* Pass properties.  */"}, {"sha": "582a6ec1d44d4ab09f0b1d1570879efbdb4d693c", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -175,7 +175,8 @@ struct tree_opt_pass pass_tree_profile =\n   PROP_gimple_leh | PROP_cfg,\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+  TODO_verify_stmts,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n struct profile_hooks tree_profile_hooks ="}, {"sha": "c96ecfd7ce84ae38b9099bfdcb944a6065b5711b", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -2107,5 +2107,6 @@ struct tree_opt_pass pass_sra =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\n-    | TODO_ggc_collect | TODO_verify_ssa  /* todo_flags_finish */\n+    | TODO_ggc_collect | TODO_verify_ssa,  /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "8b49699961c8eb1831b69aad534e76deba083d31", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -359,7 +359,8 @@ struct tree_opt_pass pass_may_alias =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\n-    | TODO_ggc_collect | TODO_verify_ssa  /* todo_flags_finish */\n+    | TODO_ggc_collect | TODO_verify_ssa,  /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n "}, {"sha": "b1b74b1e68f562e9499052899f47966a082fa362", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -181,7 +181,6 @@ get_default_value (tree var)\n   return val;\n }\n \n-\n /* Get the constant value associated with variable VAR.  */\n \n static value *\n@@ -1220,7 +1219,8 @@ struct tree_opt_pass pass_ccp =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\n     | TODO_ggc_collect | TODO_verify_ssa\n-    | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \n@@ -2164,5 +2164,6 @@ struct tree_opt_pass pass_fold_builtins =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "db85d9c01621559d98208f7db6d5493dd052b81a", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -391,6 +391,7 @@ struct tree_opt_pass pass_rename_ssa_copies =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */ \n-  TODO_dump_func | TODO_verify_ssa      /* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,     /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n }; \n "}, {"sha": "b1d9365a8cbcff72fd0451053c692f77dace0abe", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -943,7 +943,8 @@ struct tree_opt_pass pass_dce =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_ggc_collect | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_ggc_collect | TODO_verify_ssa,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n struct tree_opt_pass pass_cd_dce =\n@@ -959,7 +960,8 @@ struct tree_opt_pass pass_cd_dce =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_ggc_collect | TODO_verify_ssa | TODO_verify_flow\n+  TODO_ggc_collect | TODO_verify_ssa | TODO_verify_flow,\n \t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n "}, {"sha": "697d8d4997101f25c81641588a2cc35f1c45d22f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -432,7 +432,8 @@ struct tree_opt_pass pass_dominator =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars\n-    | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n "}, {"sha": "558d50d75c7006a341f4d19302c0ffeb8c999fd4", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -443,5 +443,6 @@ struct tree_opt_pass pass_dse = {\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n-  | TODO_verify_ssa\n+  | TODO_verify_ssa,\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "9343ec2f50a0d512a9939ed2eb4bd8aee321929e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -523,5 +523,6 @@ struct tree_opt_pass pass_forwprop = {\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n-  | TODO_verify_ssa\n+  | TODO_verify_ssa,\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "f815c3c938e644b7a081faaf3f9c8dcfd79ad458", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -284,5 +284,6 @@ struct tree_opt_pass pass_ch =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   (TODO_dump_func\n-   | TODO_verify_ssa)\t\t\t/* todo_flags_finish */\n+   | TODO_verify_ssa),\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "01dc767515993f9969d3a934c13fd34a849b0bc4", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -89,7 +89,8 @@ struct tree_opt_pass pass_loop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   TODO_ggc_collect,\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa | TODO_ggc_collect\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa | TODO_ggc_collect,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Loop optimizer initialization.  */\n@@ -120,7 +121,8 @@ struct tree_opt_pass pass_loop_init =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Loop invariant motion pass.  */\n@@ -153,7 +155,8 @@ struct tree_opt_pass pass_lim =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func                \t/* todo_flags_finish */\n+  TODO_dump_func,                \t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Loop autovectorization.  */\n@@ -187,7 +190,8 @@ struct tree_opt_pass pass_vectorize =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Canonical induction variable creation pass.  */\n@@ -220,7 +224,8 @@ struct tree_opt_pass pass_iv_canon =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func                \t/* todo_flags_finish */\n+  TODO_dump_func,                \t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Complete unrolling of loops.  */\n@@ -253,7 +258,8 @@ struct tree_opt_pass pass_complete_unroll =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func                \t/* todo_flags_finish */\n+  TODO_dump_func,                \t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Induction variable optimizations.  */\n@@ -286,7 +292,8 @@ struct tree_opt_pass pass_iv_optimize =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func                \t/* todo_flags_finish */\n+  TODO_dump_func,                \t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n /* Loop optimizer finalization.  */\n@@ -322,6 +329,7 @@ struct tree_opt_pass pass_loop_done =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\t\t\t/* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n "}, {"sha": "bbdccf437779017356f2e0053f09882375a34565", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -674,7 +674,8 @@ struct tree_opt_pass pass_phiopt =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n     | TODO_verify_ssa | TODO_rename_vars\n-    | TODO_verify_flow\n+    | TODO_verify_flow,\n+  0\t\t\t\t\t/* letter */\n };\n \t\t\t\t\t\t\t\t\t\t\t\t\n "}, {"sha": "870a03007575c7520a009b59f4e400ab17f0efcf", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -2087,7 +2087,8 @@ struct tree_opt_pass pass_pre =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n \n@@ -2118,5 +2119,6 @@ struct tree_opt_pass pass_fre =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "2f0778565382ee5aa99780c34a1e30a1d343058f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -1164,7 +1164,8 @@ struct tree_opt_pass pass_redundant_phi =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_rename_vars \n-    | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+    | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \f\n /* Emit warnings for uninitialized variables.  This is done in two passes.\n@@ -1304,7 +1305,8 @@ struct tree_opt_pass pass_early_warn_uninitialized =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n };\n \n struct tree_opt_pass pass_late_warn_uninitialized =\n@@ -1320,5 +1322,6 @@ struct tree_opt_pass pass_late_warn_uninitialized =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n+  0,                                    /* todo_flags_finish */\n+  0\t\t\t\t        /* letter */\n };"}, {"sha": "21582848a346a17078a9640cdaa63a38422063a4", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -952,7 +952,8 @@ struct tree_opt_pass pass_tail_recursion =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };\n \n struct tree_opt_pass pass_tail_calls = \n@@ -968,5 +969,6 @@ struct tree_opt_pass pass_tail_calls =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n };"}, {"sha": "7d6d87c0dee54ea7b8a73ec04e470b1d3e0d3516", "filename": "gcc/tree.h", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8628bacdb26f5c6f63aa305f29212b0d766199/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9f8628bacdb26f5c6f63aa305f29212b0d766199", "patch": "@@ -3714,12 +3714,52 @@ enum tree_dump_index\n   TDI_vcg,\t\t\t/* create a VCG graph file for each\n \t\t\t\t   function's flowgraph.  */\n   TDI_xml,                      /* dump function call graph.  */\n-  TDI_all,\t\t\t/* enable all the dumps.  */\n+  TDI_tree_all,                 /* enable all the GENERIC/GIMPLE dumps.  */\n+  TDI_rtl_all,                  /* enable all the RTL dumps.  */\n+\n+  DFI_MIN,                      /* For now, RTL dumps are placed here.  */\n+  DFI_sibling = DFI_MIN,\n+  DFI_eh,\n+  DFI_jump,\n+  DFI_cse,\n+  DFI_gcse,\n+  DFI_loop,\n+  DFI_bypass,\n+  DFI_cfg,\n+  DFI_bp,\n+  DFI_vpt,\n+  DFI_ce1,\n+  DFI_tracer,\n+  DFI_loop2,\n+  DFI_web,\n+  DFI_cse2,\n+  DFI_life,\n+  DFI_combine,\n+  DFI_ce2,\n+  DFI_regmove,\n+  DFI_sms,\n+  DFI_sched,\n+  DFI_lreg,\n+  DFI_greg,\n+  DFI_postreload,\n+  DFI_gcse2,\n+  DFI_flow2,\n+  DFI_peephole2,\n+  DFI_ce3,\n+  DFI_rnreg,\n+  DFI_bbro,\n+  DFI_branch_target_load,\n+  DFI_sched2,\n+  DFI_stack,\n+  DFI_vartrack,\n+  DFI_mach,\n+  DFI_dbr,\n+\n   TDI_end\n };\n \n-/* Bit masks to control tree dumping. Not all values are applicable to\n-   all tree dumps. Add new ones at the end. When you define new\n+/* Bit masks to control dumping. Not all values are applicable to\n+   all dumps. Add new ones at the end. When you define new\n    values, extend the DUMP_OPTIONS array in tree-dump.c */\n #define TDF_ADDRESS\t(1 << 0)\t/* dump node addresses */\n #define TDF_SLIM\t(1 << 1)\t/* don't go wild following links */\n@@ -3733,11 +3773,15 @@ enum tree_dump_index\n #define TDF_LINENO\t(1 << 7)\t/* display statement line numbers */\n #define TDF_UID\t\t(1 << 8)\t/* display decl UIDs */\n \n+#define TDF_TREE\t(1 << 9)\t/* is a tree dump */\n+#define TDF_RTL\t\t(1 << 10)\t/* is a RTL dump */\n \n typedef struct dump_info *dump_info_p;\n \n+extern char *get_dump_file_name (enum tree_dump_index);\n extern int dump_flag (dump_info_p, int, tree);\n extern int dump_enabled_p (enum tree_dump_index);\n+extern int dump_initialized_p (enum tree_dump_index);\n extern FILE *dump_begin (enum tree_dump_index, int *);\n extern void dump_end (enum tree_dump_index, FILE *);\n extern void dump_node (tree, int, FILE *);"}]}