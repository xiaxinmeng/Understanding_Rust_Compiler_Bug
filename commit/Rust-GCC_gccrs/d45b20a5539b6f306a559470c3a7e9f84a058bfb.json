{"sha": "d45b20a5539b6f306a559470c3a7e9f84a058bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ1YjIwYTU1MzliNmYzMDZhNTU5NDcwYzNhN2U5Zjg0YTA1OGJmYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-07T18:51:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-07T18:51:40Z"}, "message": "[AArch64] Merge SVE FP unary patterns\n\nThis patch merges the SVE FP rounding patterns with the other SVE\nFP unary patterns.\n\nAt the moment, we only generate unary FP operations for full vectors,\nso we can use (sqrt:VNx4SF ...) etc. in the rtl pattern.  With the ACLE,\nit's also possible to generate predicated operations on partial vectors\nwithout specifying a value for inactive lanes.  (sqrt:VNx4SF ...) would\nthen have different faulting behaviour from the instruction that the\npattern generates.\n\nThis patch therefore uses unspecs to represent the operations instead.\nLater patches make this change for other patterns.\n\n2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (UNSPEC_COND_FABS, UNSPEC_COND_FNEG)\n\t(UNSPEC_COND_FRINTA, UNSPEC_COND_FRINTI, UNSPEC_COND_FRINTM)\n\t(UNSPEC_COND_FRINTN, UNSPEC_COND_FRINTP, UNSPEC_COND_FRINTX)\n\t(UNSPEC_COND_FRINTZ, UNSPEC_COND_FSQRT): New unspecs.\n\t(optab, sve_fp_op): Handle them.\n\t(SVE_FP_UNARY): Delete.\n\t(optab): Remove sqrt entry.\n\t(sve_fp_op): Remove neg, abs and sqrt entries.\n\t(SVE_COND_FP_UNARY): New int iterator.\n\t* config/aarch64/aarch64-sve.md (<frint_pattern><mode>2)\n\t(*<frint_pattern><mode>2): Delete.\n\t(<SVE_FP_UNARY:optab><SVE_F:mode>2): Replace with...\n\t(<SVE_COND_FP_UNARY:optab><SVE_F:mode>2): ...this.\n\t(*<SVE_FP_UNARY:optab><SVE_F:mode>2): Replace with...\n\t(*<SVE_COND_FP_UNARY:optab><SVE_F:mode>2): ...this.\n\nFrom-SVN: r274187", "tree": {"sha": "cc2b8d1de01d36661b9b58925e7ea34016981ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc2b8d1de01d36661b9b58925e7ea34016981ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d45b20a5539b6f306a559470c3a7e9f84a058bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45b20a5539b6f306a559470c3a7e9f84a058bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45b20a5539b6f306a559470c3a7e9f84a058bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45b20a5539b6f306a559470c3a7e9f84a058bfb/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ad84de26e1032d80225905c611a47b64a385e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad84de26e1032d80225905c611a47b64a385e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad84de26e1032d80225905c611a47b64a385e8a"}], "stats": {"total": 138, "additions": 78, "deletions": 60}, "files": [{"sha": "3e31681f7378cfe38c2a3ef18fe8c807594952bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d45b20a5539b6f306a559470c3a7e9f84a058bfb", "patch": "@@ -1,3 +1,21 @@\n+2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (UNSPEC_COND_FABS, UNSPEC_COND_FNEG)\n+\t(UNSPEC_COND_FRINTA, UNSPEC_COND_FRINTI, UNSPEC_COND_FRINTM)\n+\t(UNSPEC_COND_FRINTN, UNSPEC_COND_FRINTP, UNSPEC_COND_FRINTX)\n+\t(UNSPEC_COND_FRINTZ, UNSPEC_COND_FSQRT): New unspecs.\n+\t(optab, sve_fp_op): Handle them.\n+\t(SVE_FP_UNARY): Delete.\n+\t(optab): Remove sqrt entry.\n+\t(sve_fp_op): Remove neg, abs and sqrt entries.\n+\t(SVE_COND_FP_UNARY): New int iterator.\n+\t* config/aarch64/aarch64-sve.md (<frint_pattern><mode>2)\n+\t(*<frint_pattern><mode>2): Delete.\n+\t(<SVE_FP_UNARY:optab><SVE_F:mode>2): Replace with...\n+\t(<SVE_COND_FP_UNARY:optab><SVE_F:mode>2): ...this.\n+\t(*<SVE_FP_UNARY:optab><SVE_F:mode>2): Replace with...\n+\t(*<SVE_COND_FP_UNARY:optab><SVE_F:mode>2): ...this.\n+\n 2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (*pred_fold_left_plus_<mode>): Delete."}, {"sha": "1f5153a0e443d5a01745405c58a1897558038cfa", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=d45b20a5539b6f306a559470c3a7e9f84a058bfb", "patch": "@@ -50,8 +50,7 @@\n ;;\n ;; == Unary arithmetic\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n-;; ---- [FP] General unary arithmetic corresponding to rtx codes\n-;; ---- [FP] Rounding\n+;; ---- [FP] General unary arithmetic corresponding to unspecs\n ;; ---- [PRED] Inverse\n \n ;; == Binary arithmetic\n@@ -1138,75 +1137,43 @@\n )\n \n ;; -------------------------------------------------------------------------\n-;; ---- [FP] General unary arithmetic corresponding to rtx codes\n+;; ---- [FP] General unary arithmetic corresponding to unspecs\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - FABS\n ;; - FNEG\n-;; - FSQRT\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated floating-point unary operations.\n-(define_expand \"<optab><mode>2\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 2)\n-\t   (SVE_FP_UNARY:SVE_F (match_operand:SVE_F 1 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; Predicated floating-point unary operations.\n-(define_insn \"*<optab><mode>2\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (SVE_FP_UNARY:SVE_F (match_operand:SVE_F 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n-)\n-\n-;; -------------------------------------------------------------------------\n-;; ---- [FP] Rounding\n-;; -------------------------------------------------------------------------\n-;; Includes:\n ;; - FRINTA\n ;; - FRINTI\n ;; - FRINTM\n ;; - FRINTN\n ;; - FRINTP\n ;; - FRINTX\n ;; - FRINTZ\n+;; - FSQRT\n ;; -------------------------------------------------------------------------\n \n-;; Unpredicated FRINTy.\n-(define_expand \"<frint_pattern><mode>2\"\n+;; Unpredicated floating-point unary operations.\n+(define_expand \"<optab><mode>2\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 2)\n-\t   (unspec:SVE_F [(match_operand:SVE_F 1 \"register_operand\")]\n-\t\t\t FRINT)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 1 \"register_operand\")]\n+\t  SVE_COND_FP_UNARY))]\n   \"TARGET_SVE\"\n   {\n     operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n-;; FRINTy predicated with a PTRUE.\n-(define_insn \"*<frint_pattern><mode>2\"\n+;; Predicated floating-point unary operations.\n+(define_insn \"*<optab><mode>2\"\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (unspec:SVE_F [(match_operand:SVE_F 2 \"register_operand\" \"w\")]\n-\t\t\t FRINT)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FP_UNARY))]\n   \"TARGET_SVE\"\n-  \"frint<frint_suffix>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"<sve_fp_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------\n@@ -2042,11 +2009,10 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (abs:SVE_F\n-\t     (minus:SVE_F\n-\t       (match_operand:SVE_F 2 \"register_operand\" \"0\")\n-\t       (match_operand:SVE_F 3 \"register_operand\" \"w\")))]\n-\tUNSPEC_MERGE_PTRUE))]\n+\t   (minus:SVE_F\n+\t     (match_operand:SVE_F 2 \"register_operand\" \"0\")\n+\t     (match_operand:SVE_F 3 \"register_operand\" \"w\"))]\n+\tUNSPEC_COND_FABS))]\n   \"TARGET_SVE\"\n   \"fabd\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n )"}, {"sha": "1e39266cee82e77012fb791766faa0ab49219d3a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45b20a5539b6f306a559470c3a7e9f84a058bfb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d45b20a5539b6f306a559470c3a7e9f84a058bfb", "patch": "@@ -468,6 +468,7 @@\n     UNSPEC_XORF\t\t; Used in aarch64-sve.md.\n     UNSPEC_SMUL_HIGHPART ; Used in aarch64-sve.md.\n     UNSPEC_UMUL_HIGHPART ; Used in aarch64-sve.md.\n+    UNSPEC_COND_FABS\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FADD\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FCMEQ\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FCMGE\t; Used in aarch64-sve.md.\n@@ -481,8 +482,17 @@\n     UNSPEC_COND_FMLA\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FMLS\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FMUL\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FNEG\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FNMLA\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FNMLS\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTA\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTI\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTM\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTN\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTP\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTX\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FRINTZ\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FSQRT\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FSUB\t; Used in aarch64-sve.md.\n     UNSPEC_LASTB\t; Used in aarch64-sve.md.\n     UNSPEC_FCADD90\t; Used in aarch64-simd.md.\n@@ -1241,9 +1251,6 @@\n ;; SVE integer unary operations.\n (define_code_iterator SVE_INT_UNARY [abs neg not popcount])\n \n-;; SVE floating-point unary operations.\n-(define_code_iterator SVE_FP_UNARY [abs neg sqrt])\n-\n ;; SVE integer binary operations.\n (define_code_iterator SVE_INT_BINARY [plus minus mult smax umax smin umin\n \t\t\t\t      and ior xor])\n@@ -1307,8 +1314,7 @@\n \t\t\t (leu \"leu\")\n \t\t\t (geu \"geu\")\n \t\t\t (gtu \"gtu\")\n-\t\t\t (abs \"abs\")\n-\t\t\t (sqrt \"sqrt\")])\n+\t\t\t (abs \"abs\")])\n \n ;; For comparison operators we use the FCM* and CM* instructions.\n ;; As there are no CMLE or CMLT instructions which act on 3 vector\n@@ -1462,10 +1468,7 @@\n ;; The floating-point SVE instruction that implements an rtx code.\n (define_code_attr sve_fp_op [(plus \"fadd\")\n \t\t\t     (minus \"fsub\")\n-\t\t\t     (mult \"fmul\")\n-\t\t\t     (neg \"fneg\")\n-\t\t\t     (abs \"fabs\")\n-\t\t\t     (sqrt \"fsqrt\")])\n+\t\t\t     (mult \"fmul\")])\n \n ;; The SVE immediate constraint to use for an rtl code.\n (define_code_attr sve_imm_con [(eq \"vsc\")\n@@ -1609,6 +1612,17 @@\n \n (define_int_iterator MUL_HIGHPART [UNSPEC_SMUL_HIGHPART UNSPEC_UMUL_HIGHPART])\n \n+(define_int_iterator SVE_COND_FP_UNARY [UNSPEC_COND_FABS\n+\t\t\t\t\tUNSPEC_COND_FNEG\n+\t\t\t\t\tUNSPEC_COND_FRINTA\n+\t\t\t\t\tUNSPEC_COND_FRINTI\n+\t\t\t\t\tUNSPEC_COND_FRINTM\n+\t\t\t\t\tUNSPEC_COND_FRINTN\n+\t\t\t\t\tUNSPEC_COND_FRINTP\n+\t\t\t\t\tUNSPEC_COND_FRINTX\n+\t\t\t\t\tUNSPEC_COND_FRINTZ\n+\t\t\t\t\tUNSPEC_COND_FSQRT])\n+\n (define_int_iterator SVE_COND_FP_BINARY [UNSPEC_COND_FADD\n \t\t\t\t\t UNSPEC_COND_FDIV\n \t\t\t\t\t UNSPEC_COND_FMAXNM\n@@ -1663,15 +1677,25 @@\n \t\t\t(UNSPEC_ANDV \"and\")\n \t\t\t(UNSPEC_IORV \"ior\")\n \t\t\t(UNSPEC_XORV \"xor\")\n+\t\t\t(UNSPEC_COND_FABS \"abs\")\n \t\t\t(UNSPEC_COND_FADD \"add\")\n \t\t\t(UNSPEC_COND_FDIV \"div\")\n \t\t\t(UNSPEC_COND_FMAXNM \"smax\")\n \t\t\t(UNSPEC_COND_FMINNM \"smin\")\n \t\t\t(UNSPEC_COND_FMLA \"fma\")\n \t\t\t(UNSPEC_COND_FMLS \"fnma\")\n \t\t\t(UNSPEC_COND_FMUL \"mul\")\n+\t\t\t(UNSPEC_COND_FNEG \"neg\")\n \t\t\t(UNSPEC_COND_FNMLA \"fnms\")\n \t\t\t(UNSPEC_COND_FNMLS \"fms\")\n+\t\t\t(UNSPEC_COND_FRINTA \"round\")\n+\t\t\t(UNSPEC_COND_FRINTI \"nearbyint\")\n+\t\t\t(UNSPEC_COND_FRINTM \"floor\")\n+\t\t\t(UNSPEC_COND_FRINTN \"frintn\")\n+\t\t\t(UNSPEC_COND_FRINTP \"ceil\")\n+\t\t\t(UNSPEC_COND_FRINTX \"rint\")\n+\t\t\t(UNSPEC_COND_FRINTZ \"btrunc\")\n+\t\t\t(UNSPEC_COND_FSQRT \"sqrt\")\n \t\t\t(UNSPEC_COND_FSUB \"sub\")])\n \n (define_int_attr  maxmin_uns [(UNSPEC_UMAXV \"umax\")\n@@ -1901,11 +1925,21 @@\n \t\t\t (UNSPEC_COND_FCMLT \"lt\")\n \t\t\t (UNSPEC_COND_FCMNE \"ne\")])\n \n-(define_int_attr sve_fp_op [(UNSPEC_COND_FADD \"fadd\")\n+(define_int_attr sve_fp_op [(UNSPEC_COND_FABS \"fabs\")\n+\t\t\t    (UNSPEC_COND_FADD \"fadd\")\n \t\t\t    (UNSPEC_COND_FDIV \"fdiv\")\n \t\t\t    (UNSPEC_COND_FMAXNM \"fmaxnm\")\n \t\t\t    (UNSPEC_COND_FMINNM \"fminnm\")\n \t\t\t    (UNSPEC_COND_FMUL \"fmul\")\n+\t\t\t    (UNSPEC_COND_FNEG \"fneg\")\n+\t\t\t    (UNSPEC_COND_FRINTA \"frinta\")\n+\t\t\t    (UNSPEC_COND_FRINTI \"frinti\")\n+\t\t\t    (UNSPEC_COND_FRINTM \"frintm\")\n+\t\t\t    (UNSPEC_COND_FRINTN \"frintn\")\n+\t\t\t    (UNSPEC_COND_FRINTP \"frintp\")\n+\t\t\t    (UNSPEC_COND_FRINTX \"frintx\")\n+\t\t\t    (UNSPEC_COND_FRINTZ \"frintz\")\n+\t\t\t    (UNSPEC_COND_FSQRT \"fsqrt\")\n \t\t\t    (UNSPEC_COND_FSUB \"fsub\")])\n \n (define_int_attr sve_fp_op_rev [(UNSPEC_COND_FADD \"fadd\")"}]}