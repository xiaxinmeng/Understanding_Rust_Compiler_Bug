{"sha": "8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4ZjUzMWYwZGVmOTVhZjJlYjM1MjY1YTNlN2I2YzNhYTQzYWQ3Yw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-20T16:05:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-20T16:05:28Z"}, "message": "sem_dim.adb (Analyze_Dimension_Binary_Op): Accept with a warning to compare a dimensioned expression with a literal.\n\ngcc/ada/\n\n2017-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension_Binary_Op): Accept with a warning to\n\tcompare a dimensioned expression with a literal.\n\t(Dim_Warning_For_Numeric_Literal): Do not issue a warning for the\n\tspecial value zero.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Update description of\n\tdimensionality system in GNAT.\n\t* gnat_ugn.texi: Regenerate.\n\n2017-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function.Freeze_Expr_Types): Remove\n\tinadequate silencing of errors.\n\t* sem_util.adb (Check_Part_Of_Reference): Do not issue an error when\n\tchecking the subprogram body generated from an expression function,\n\twhen this is done as part of the preanalysis done on expression\n\tfunctions, as the subprogram body may not yet be attached in the AST.\n\tThe error if any will be issued later during the analysis of the body.\n\t(Is_Aliased_View): Trivial rewrite with Is_Formal_Object.\n\n2017-10-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch8.adb (Update_Chain_In_Scope): Add missing [-gnatwu] marker for\n\twarning on ineffective use clause.\n\n2017-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch11.ads (Warn_If_No_Local_Raise): Declare.\n\t* exp_ch11.adb (Expand_Exception_Handlers): Use Warn_If_No_Local_Raise\n\tto issue the warning on the absence of local raise.\n\t(Possible_Local_Raise): Do not issue the warning for Call_Markers.\n\t(Warn_If_No_Local_Raise): New procedure to issue the warning on the\n\tabsence of local raise.\n\t* sem_elab.adb: Add with and use clauses for Exp_Ch11.\n\t(Record_Elaboration_Scenario): Call Possible_Local_Raise in the cases\n\twhere a scenario could give rise to raising Program_Error.\n\t* sem_elab.adb: Typo fixes.\n\t* fe.h (Warn_If_No_Local_Raise): Declare.\n\t* gcc-interface/gigi.h (get_exception_label): Change return type.\n\t* gcc-interface/trans.c (gnu_constraint_error_label_stack): Change to\n\tsimple vector of Entity_Id.\n\t(gnu_storage_error_label_stack): Likewise.\n\t(gnu_program_error_label_stack): Likewise.\n\t(gigi): Adjust to above changes.\n\t(Raise_Error_to_gnu): Likewise.\n\t(gnat_to_gnu) <N_Goto_Statement>: Set TREE_USED on the label.\n\t(N_Push_Constraint_Error_Label): Push the label onto the stack.\n\t(N_Push_Storage_Error_Label): Likewise.\n\t(N_Push_Program_Error_Label): Likewise.\n\t(N_Pop_Constraint_Error_Label): Pop the label from the stack and issue\n\ta warning on the absence of local raise.\n\t(N_Pop_Storage_Error_Label): Likewise.\n\t(N_Pop_Program_Error_Label): Likewise.\n\t(push_exception_label_stack): Delete.\n\t(get_exception_label): Change return type to Entity_Id and adjust.\n\t* gcc-interface/utils2.c (build_goto_raise): Change type of first\n\tparameter to Entity_Id and adjust.  Set TREE_USED on the label.\n\t(build_call_raise): Adjust calls to get_exception_label and also\n\tbuild_goto_raise.\n\t(build_call_raise_column): Likewise.\n\t(build_call_raise_range): Likewise.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (-gnatw.x):\n\tDocument actual default behavior.\n\n2017-10-20  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* einfo.ads: Minor consistent punctuation in comment.  All numbered\n\titems in the comment of Is_Internal are now terminated with a period.\n\n2017-10-20  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* exp_util.adb (Build_Temporary): Mark created temporary entity as\n\tinternal.\n\n2017-10-20  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* sem_type.adb (In_Generic_Actual): Simplified.\n\n2017-10-20  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch12.adb (Check_Formal_Package_Instance): Add sanity check to\n\tverify a renaming exists for a generic formal before comparing it to\n\tthe actual as defaulted formals will not have a renamed_object.\n\n2017-10-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch6.adb (Replace_Returns): Fix wrong management of\n\tN_Block_Statement nodes.\n\ngcc/testsuite/\n\n2017-10-20  Justin Squirek  <squirek@adacore.com>\n\n\t* gnat.dg/default_pkg_actual.adb, gnat.dg/default_pkg_actual2.adb: New\n\ttestcases.\n\nFrom-SVN: r253945", "tree": {"sha": "fad2870f2d1658eb4a31b787c5940fe09a146ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad2870f2d1658eb4a31b787c5940fe09a146ce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/comments", "author": null, "committer": null, "parents": [{"sha": "e201023c0e13ee6f7f62da6c58dee872a92ce359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e201023c0e13ee6f7f62da6c58dee872a92ce359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e201023c0e13ee6f7f62da6c58dee872a92ce359"}], "stats": {"total": 370, "additions": 259, "deletions": 111}, "files": [{"sha": "90d29e1b98d8c56465472ea2d0fa6507f604bf3d", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -3898,8 +3898,8 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   This switch activates warnings for exception usage when pragma Restrictions\n   (No_Exception_Propagation) is in effect. Warnings are given for implicit or\n   explicit exception raises which are not covered by a local handler, and for\n-  exception handlers which do not cover a local raise. The default is that these\n-  warnings are not given.\n+  exception handlers which do not cover a local raise. The default is that\n+  these warnings are given for units that contain exception handlers.\n \n \n :switch:`-gnatw.X`"}, {"sha": "8f9f37cc0d8c16aa6f927e3fe724a472916cd469", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -3611,20 +3611,26 @@ combine a dimensioned and dimensionless value.  Thus an expression such as\n ``Acceleration``.\n \n The dimensionality checks for relationals use the same rules as\n-for \"+\" and \"-\"; thus\n+for \"+\" and \"-\", except when comparing to a literal; thus\n \n   .. code-block:: ada\n \n-        acc > 10.0\n+        acc > len\n \n is equivalent to\n \n   .. code-block:: ada\n \n-       acc-10.0 > 0.0\n+       acc-len > 0.0\n+\n+and is thus illegal, but\n+\n+  .. code-block:: ada\n+\n+        acc > 10.0\n \n-and is thus illegal. Analogously a conditional expression\n-requires the same dimension vector for each branch.\n+is accepted with a warning. Analogously a conditional expression requires the\n+same dimension vector for each branch (with no exception for literals).\n \n The dimension vector of a type conversion :samp:`T({expr})` is defined\n as follows, based on the nature of ``T``:"}, {"sha": "bfe14fcae7c5a10bf092d598ababf9d8cb02bce5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -2756,7 +2756,7 @@ package Einfo is\n --         1) Internal entities (such as temporaries generated for the result\n --         of an inlined function call or dummy variables generated for the\n --         debugger). Set to indicate that they need not be initialized, even\n---         when scalars are initialized or normalized;\n+--         when scalars are initialized or normalized.\n --\n --         2) Predefined primitives of tagged types. Set to mark that they\n --         have specific properties: first they are primitives even if they"}, {"sha": "7941cbd2ca620760d0561164b00d3b5916e738a5", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -64,7 +64,7 @@ package body Exp_Ch11 is\n \n    procedure Warn_If_No_Propagation (N : Node_Id);\n    --  Called for an exception raise that is not a local raise (and thus can\n-   --  not be optimized to a goto. Issues warning if No_Exception_Propagation\n+   --  not be optimized to a goto). Issues warning if No_Exception_Propagation\n    --  restriction is set. N is the node for the raise or equivalent call.\n \n    ---------------------------\n@@ -998,15 +998,10 @@ package body Exp_Ch11 is\n          --  if a source generated handler was not the target of a local raise.\n \n          else\n-            if Restriction_Active (No_Exception_Propagation)\n-              and then not Has_Local_Raise (Handler)\n+            if not Has_Local_Raise (Handler)\n               and then Comes_From_Source (Handler)\n-              and then Warn_On_Non_Local_Exception\n             then\n-               Warn_No_Exception_Propagation_Active (Handler);\n-               Error_Msg_N\n-                 (\"\\?X?this handler can never be entered, \"\n-                  & \"and has been removed\", Handler);\n+               Warn_If_No_Local_Raise (Handler);\n             end if;\n \n             if No_Exception_Propagation_Active then\n@@ -1859,8 +1854,12 @@ package body Exp_Ch11 is\n          --  Otherwise, if the No_Exception_Propagation restriction is active\n          --  and the warning is enabled, generate the appropriate warnings.\n \n+         --  ??? Do not do it for the Call_Marker nodes inserted by the ABE\n+         --  mechanism because this generates too many false positives.\n+\n          elsif Warn_On_Non_Local_Exception\n            and then Restriction_Active (No_Exception_Propagation)\n+           and then Nkind (N) /= N_Call_Marker\n          then\n             Warn_No_Exception_Propagation_Active (N);\n \n@@ -2154,6 +2153,22 @@ package body Exp_Ch11 is\n       end case;\n    end Get_RT_Exception_Name;\n \n+   ----------------------------\n+   -- Warn_If_No_Local_Raise --\n+   ----------------------------\n+\n+   procedure Warn_If_No_Local_Raise (N : Node_Id) is\n+   begin\n+      if Restriction_Active (No_Exception_Propagation)\n+        and then Warn_On_Non_Local_Exception\n+      then\n+         Warn_No_Exception_Propagation_Active (N);\n+\n+         Error_Msg_N\n+           (\"\\?X?this handler can never be entered, and has been removed\", N);\n+      end if;\n+   end Warn_If_No_Local_Raise;\n+\n    ----------------------------\n    -- Warn_If_No_Propagation --\n    ----------------------------"}, {"sha": "99efdeb23053defdeda1b67cb263c42a71b1f000", "filename": "gcc/ada/exp_ch11.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.ads?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,4 +90,9 @@ package Exp_Ch11 is\n    --  is a local handler marking that it has a local raise. E is the entity\n    --  of the corresponding exception.\n \n+   procedure Warn_If_No_Local_Raise (N : Node_Id);\n+   --  Called for an exception handler that is not the target of a local raise.\n+   --  Issues warning if No_Exception_Propagation restriction is set. N is the\n+   --  node for the handler.\n+\n end Exp_Ch11;"}, {"sha": "bca7e5deae4781ac409d4e681c612e829c797ff7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -712,7 +712,8 @@ package body Exp_Ch6 is\n          Stmt := First (Stmts);\n          while Present (Stmt) loop\n             if Nkind (Stmt) = N_Block_Statement then\n-               Replace_Returns (Param_Id, Statements (Stmt));\n+               Replace_Returns (Param_Id,\n+                 Statements (Handled_Statement_Sequence (Stmt)));\n \n             elsif Nkind (Stmt) = N_Case_Statement then\n                declare"}, {"sha": "16eaf186996182319139592f04dc88475f8a7e62", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -10978,7 +10978,8 @@ package body Exp_Util is\n          Related_Nod : Node_Id := Empty) return Entity_Id;\n       --  Create an external symbol of the form xxx_FIRST/_LAST if Related_Nod\n       --  is present (xxx is taken from the Chars field of Related_Nod),\n-      --  otherwise it generates an internal temporary.\n+      --  otherwise it generates an internal temporary. The created temporary\n+      --  entity is marked as internal.\n \n       ---------------------\n       -- Build_Temporary --\n@@ -10990,6 +10991,7 @@ package body Exp_Util is\n          Related_Nod : Node_Id := Empty) return Entity_Id\n       is\n          Temp_Nam : Name_Id;\n+         Temp_Id  : Entity_Id;\n \n       begin\n          --  The context requires an external symbol\n@@ -11001,13 +11003,17 @@ package body Exp_Util is\n                Temp_Nam := New_External_Name (Chars (Related_Id), \"_LAST\");\n             end if;\n \n-            return Make_Defining_Identifier (Loc, Temp_Nam);\n+            Temp_Id := Make_Defining_Identifier (Loc, Temp_Nam);\n \n          --  Otherwise generate an internal temporary\n \n          else\n-            return Make_Temporary (Loc, Id, Related_Nod);\n+            Temp_Id := Make_Temporary (Loc, Id, Related_Nod);\n          end if;\n+\n+         Set_Is_Internal (Temp_Id);\n+\n+         return Temp_Id;\n       end Build_Temporary;\n \n       --  Local variables"}, {"sha": "6b6d524bcd7fd8b0273ec567efa0d050c2dceb13", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -109,10 +109,12 @@ extern Nat       Serious_Errors_Detected;\n #define Get_Local_Raise_Call_Entity exp_ch11__get_local_raise_call_entity\n #define Get_RT_Exception_Entity exp_ch11__get_rt_exception_entity\n #define Get_RT_Exception_Name exp_ch11__get_rt_exception_name\n+#define Warn_If_No_Local_Raise exp_ch11__warn_if_no_local_raise\n \n extern Entity_Id Get_Local_Raise_Call_Entity (void);\n extern Entity_Id Get_RT_Exception_Entity (int);\n extern void Get_RT_Exception_Name (int);\n+extern void Warn_If_No_Local_Raise (int);\n \n /* exp_code:  */\n "}, {"sha": "a957de5e589702e0f492440833e2791e7de30ed8", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -312,9 +312,9 @@ extern void post_error_ne_tree (const char *msg, Node_Id node, Entity_Id ent,\n extern void post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent,\n                                   tree t, int num);\n \n-/* Return a label to branch to for the exception type in KIND or NULL_TREE\n+/* Return a label to branch to for the exception type in KIND or Empty\n    if none.  */\n-extern tree get_exception_label (char kind);\n+extern Entity_Id get_exception_label (char kind);\n \n /* If nonzero, pretend we are allocating at global level.  */\n extern int force_global;"}, {"sha": "0e46e5a921ce75ad06b7db12586da531809ea8e5", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 33, "deletions": 40, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -211,9 +211,9 @@ typedef struct loop_info_d *loop_info;\n static GTY(()) vec<loop_info, va_gc> *gnu_loop_stack;\n \n /* The stacks for N_{Push,Pop}_*_Label.  */\n-static GTY(()) vec<tree, va_gc> *gnu_constraint_error_label_stack;\n-static GTY(()) vec<tree, va_gc> *gnu_storage_error_label_stack;\n-static GTY(()) vec<tree, va_gc> *gnu_program_error_label_stack;\n+static vec<Entity_Id> gnu_constraint_error_label_stack;\n+static vec<Entity_Id> gnu_storage_error_label_stack;\n+static vec<Entity_Id> gnu_program_error_label_stack;\n \n /* Map GNAT tree codes to GCC tree codes for simple expressions.  */\n static enum tree_code gnu_codes[Number_Node_Kinds];\n@@ -226,7 +226,6 @@ static void record_code_position (Node_Id);\n static void insert_code_for (Node_Id);\n static void add_cleanup (tree, Node_Id);\n static void add_stmt_list (List_Id);\n-static void push_exception_label_stack (vec<tree, va_gc> **, Entity_Id);\n static tree build_stmt_group (List_Id, bool);\n static inline bool stmt_group_may_fallthru (void);\n static enum gimplify_status gnat_gimplify_stmt (tree *);\n@@ -647,9 +646,10 @@ gigi (Node_Id gnat_root,\n   gnat_install_builtins ();\n \n   vec_safe_push (gnu_except_ptr_stack, NULL_TREE);\n-  vec_safe_push (gnu_constraint_error_label_stack, NULL_TREE);\n-  vec_safe_push (gnu_storage_error_label_stack, NULL_TREE);\n-  vec_safe_push (gnu_program_error_label_stack, NULL_TREE);\n+\n+  gnu_constraint_error_label_stack.safe_push (Empty);\n+  gnu_storage_error_label_stack.safe_push (Empty);\n+  gnu_program_error_label_stack.safe_push (Empty);\n \n   /* Process any Pragma Ident for the main unit.  */\n   if (Present (Ident_String (Main_Unit)))\n@@ -5614,7 +5614,7 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n   const bool with_extra_info\n     = Exception_Extra_Info\n       && !No_Exception_Handlers_Set ()\n-      && !get_exception_label (kind);\n+      && No (get_exception_label (kind));\n   tree gnu_result = NULL_TREE, gnu_cond = NULL_TREE;\n \n   /* The following processing is not required for correctness.  Its purpose is\n@@ -7271,8 +7271,9 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Goto_Statement:\n-      gnu_result\n-\t= build1 (GOTO_EXPR, void_type_node, gnat_to_gnu (Name (gnat_node)));\n+      gnu_expr = gnat_to_gnu (Name (gnat_node));\n+      gnu_result = build1 (GOTO_EXPR, void_type_node, gnu_expr);\n+      TREE_USED (gnu_expr) = 1;\n       break;\n \n     /***************************/\n@@ -7492,30 +7493,36 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Push_Constraint_Error_Label:\n-      push_exception_label_stack (&gnu_constraint_error_label_stack,\n-\t\t\t\t  Exception_Label (gnat_node));\n+      gnu_constraint_error_label_stack.safe_push (Exception_Label (gnat_node));\n       break;\n \n     case N_Push_Storage_Error_Label:\n-      push_exception_label_stack (&gnu_storage_error_label_stack,\n-\t\t\t\t  Exception_Label (gnat_node));\n+      gnu_storage_error_label_stack.safe_push (Exception_Label (gnat_node));\n       break;\n \n     case N_Push_Program_Error_Label:\n-      push_exception_label_stack (&gnu_program_error_label_stack,\n-\t\t\t\t  Exception_Label (gnat_node));\n+      gnu_program_error_label_stack.safe_push (Exception_Label (gnat_node));\n       break;\n \n     case N_Pop_Constraint_Error_Label:\n-      gnu_constraint_error_label_stack->pop ();\n+      gnat_temp = gnu_constraint_error_label_stack.pop ();\n+      if (Present (gnat_temp)\n+\t  && !TREE_USED (gnat_to_gnu_entity (gnat_temp, NULL_TREE, false)))\n+\tWarn_If_No_Local_Raise (gnat_temp);\n       break;\n \n     case N_Pop_Storage_Error_Label:\n-      gnu_storage_error_label_stack->pop ();\n+      gnat_temp = gnu_storage_error_label_stack.pop ();\n+      if (Present (gnat_temp)\n+\t  && !TREE_USED (gnat_to_gnu_entity (gnat_temp, NULL_TREE, false)))\n+\tWarn_If_No_Local_Raise (gnat_temp);\n       break;\n \n     case N_Pop_Program_Error_Label:\n-      gnu_program_error_label_stack->pop ();\n+      gnat_temp = gnu_program_error_label_stack.pop ();\n+      if (Present (gnat_temp)\n+\t  && !TREE_USED (gnat_to_gnu_entity (gnat_temp, NULL_TREE, false)))\n+\tWarn_If_No_Local_Raise (gnat_temp);\n       break;\n \n     /******************************/\n@@ -8029,20 +8036,6 @@ gnat_to_gnu_external (Node_Id gnat_node)\n   return gnu_result;\n }\n \f\n-/* Subroutine of above to push the exception label stack.  GNU_STACK is\n-   a pointer to the stack to update and GNAT_LABEL, if present, is the\n-   label to push onto the stack.  */\n-\n-static void\n-push_exception_label_stack (vec<tree, va_gc> **gnu_stack, Entity_Id gnat_label)\n-{\n-  tree gnu_label = (Present (gnat_label)\n-\t\t    ? gnat_to_gnu_entity (gnat_label, NULL_TREE, false)\n-\t\t    : NULL_TREE);\n-\n-  vec_safe_push (*gnu_stack, gnu_label);\n-}\n-\f\n /* Return true if the statement list STMT_LIST is empty.  */\n \n static bool\n@@ -10226,28 +10219,28 @@ post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent, tree t,\n   post_error_ne_tree (msg, node, ent, t);\n }\n \n-/* Return a label to branch to for the exception type in KIND or NULL_TREE\n+/* Return a label to branch to for the exception type in KIND or Empty\n    if none.  */\n \n-tree\n+Entity_Id\n get_exception_label (char kind)\n {\n   switch (kind)\n     {\n     case N_Raise_Constraint_Error:\n-      return gnu_constraint_error_label_stack->last ();\n+      return gnu_constraint_error_label_stack.last ();\n \n     case N_Raise_Storage_Error:\n-      return gnu_storage_error_label_stack->last ();\n+      return gnu_storage_error_label_stack.last ();\n \n     case N_Raise_Program_Error:\n-      return gnu_program_error_label_stack->last ();\n+      return gnu_program_error_label_stack.last ();\n \n     default:\n-      break;\n+      return Empty;\n     }\n \n-  return NULL_TREE;\n+  gcc_unreachable ();\n }\n \n /* Return the decl for the current elaboration procedure.  */"}, {"sha": "dcd4134a434a25e9610f7630bfb009a2b96080bf", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -1787,9 +1787,10 @@ build_call_n_expr (tree fndecl, int n, ...)\n    MSG gives the exception's identity for the call to Local_Raise, if any.  */\n \n static tree\n-build_goto_raise (tree label, int msg)\n+build_goto_raise (Entity_Id gnat_label, int msg)\n {\n-  tree gnu_result = build1 (GOTO_EXPR, void_type_node, label);\n+  tree gnu_label = gnat_to_gnu_entity (gnat_label, NULL_TREE, false);\n+  tree gnu_result = build1 (GOTO_EXPR, void_type_node, gnu_label);\n   Entity_Id local_raise = Get_Local_Raise_Call_Entity ();\n \n   /* If Local_Raise is present, build Local_Raise (Exception'Identity).  */\n@@ -1807,6 +1808,7 @@ build_goto_raise (tree label, int msg)\n \t= build2 (COMPOUND_EXPR, void_type_node, gnu_call, gnu_result);\n     }\n \n+  TREE_USED (gnu_label) = 1;\n   return gnu_result;\n }\n \n@@ -1859,13 +1861,13 @@ expand_sloc (Node_Id gnat_node, tree *filename, tree *line, tree *col)\n tree\n build_call_raise (int msg, Node_Id gnat_node, char kind)\n {\n+  Entity_Id gnat_label = get_exception_label (kind);\n   tree fndecl = gnat_raise_decls[msg];\n-  tree label = get_exception_label (kind);\n   tree filename, line;\n \n   /* If this is to be done as a goto, handle that case.  */\n-  if (label)\n-    return build_goto_raise (label, msg);\n+  if (Present (gnat_label))\n+    return build_goto_raise (gnat_label, msg);\n \n   expand_sloc (gnat_node, &filename, &line, NULL);\n \n@@ -1883,13 +1885,13 @@ build_call_raise (int msg, Node_Id gnat_node, char kind)\n tree\n build_call_raise_column (int msg, Node_Id gnat_node, char kind)\n {\n+  Entity_Id gnat_label = get_exception_label (kind);\n   tree fndecl = gnat_raise_decls_ext[msg];\n-  tree label = get_exception_label (kind);\n   tree filename, line, col;\n \n   /* If this is to be done as a goto, handle that case.  */\n-  if (label)\n-    return build_goto_raise (label, msg);\n+  if (Present (gnat_label))\n+    return build_goto_raise (gnat_label, msg);\n \n   expand_sloc (gnat_node, &filename, &line, &col);\n \n@@ -1908,13 +1910,13 @@ tree\n build_call_raise_range (int msg, Node_Id gnat_node, char kind,\n \t\t\ttree index, tree first, tree last)\n {\n+  Entity_Id gnat_label = get_exception_label (kind);\n   tree fndecl = gnat_raise_decls_ext[msg];\n-  tree label = get_exception_label (kind);\n   tree filename, line, col;\n \n   /* If this is to be done as a goto, handle that case.  */\n-  if (label)\n-    return build_goto_raise (label, msg);\n+  if (Present (gnat_label))\n+    return build_goto_raise (gnat_label, msg);\n \n   expand_sloc (gnat_node, &filename, &line, &col);\n "}, {"sha": "9488b88894179734a4a0ac816a8b0579e571878e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Oct 14, 2017\n+GNAT User's Guide for Native Platforms , Oct 20, 2017\n \n AdaCore\n \n@@ -12474,8 +12474,8 @@ should not complain at you.\n This switch activates warnings for exception usage when pragma Restrictions\n (No_Exception_Propagation) is in effect. Warnings are given for implicit or\n explicit exception raises which are not covered by a local handler, and for\n-exception handlers which do not cover a local raise. The default is that these\n-warnings are not given.\n+exception handlers which do not cover a local raise. The default is that\n+these warnings are given for units that contain exception handlers.\n \n @item @code{-gnatw.X}\n \n@@ -22901,12 +22901,12 @@ combine a dimensioned and dimensionless value.  Thus an expression such as\n @code{Acceleration}.\n \n The dimensionality checks for relationals use the same rules as\n-for \"+\" and \"-\"; thus\n+for \"+\" and \"-\", except when comparing to a literal; thus\n \n @quotation\n \n @example\n-acc > 10.0\n+acc > len\n @end example\n @end quotation\n \n@@ -22915,12 +22915,21 @@ is equivalent to\n @quotation\n \n @example\n-acc-10.0 > 0.0\n+acc-len > 0.0\n+@end example\n+@end quotation\n+\n+and is thus illegal, but\n+\n+@quotation\n+\n+@example\n+acc > 10.0\n @end example\n @end quotation\n \n-and is thus illegal. Analogously a conditional expression\n-requires the same dimension vector for each branch.\n+is accepted with a warning. Analogously a conditional expression requires the\n+same dimension vector for each branch (with no exception for literals).\n \n The dimension vector of a type conversion @code{T(@emph{expr})} is defined\n as follows, based on the nature of @code{T}:"}, {"sha": "ac5035fd1bc6acdcdc7efde369c212819bd4455d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -6459,10 +6459,11 @@ package body Sem_Ch12 is\n          elsif Ekind (E1) = E_Package then\n             Check_Mismatch\n               (Ekind (E1) /= Ekind (E2)\n-                or else Renamed_Object (E1) /= Renamed_Object (E2));\n+                or else (Present (Renamed_Object (E2))\n+                          and then Renamed_Object (E1) /=\n+                                     Renamed_Object (E2)));\n \n          elsif Is_Overloadable (E1) then\n-\n             --  Verify that the actual subprograms match. Note that actuals\n             --  that are attributes are rewritten as subprograms. If the\n             --  subprogram in the formal package is defaulted, no check is"}, {"sha": "4f719e9b81c4578b3baa6deadf23de4f9c9de8d7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -442,18 +442,12 @@ package body Sem_Ch6 is\n       begin\n          --  Preanalyze a duplicate of the expression to have available the\n          --  minimum decoration needed to locate referenced unfrozen types\n-         --  without adding any decoration to the function expression. This\n-         --  preanalysis is performed with errors disabled to avoid reporting\n-         --  spurious errors on Ghost entities (since the expression is not\n-         --  fully analyzed).\n+         --  without adding any decoration to the function expression.\n \n          Push_Scope (Def_Id);\n          Install_Formals (Def_Id);\n-         Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n \n          Preanalyze_Spec_Expression (Dup_Expr, Etype (Def_Id));\n-\n-         Ignore_Errors_Enable := Ignore_Errors_Enable - 1;\n          End_Scope;\n \n          --  Restore certain attributes of Def_Id since the preanalysis may"}, {"sha": "5f4cd47786a1914ecc9ff1eeae667deb833dc1cf", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -9075,7 +9075,7 @@ package body Sem_Ch8 is\n                   then\n                      Error_Msg_Node_1 := Entity (N);\n                      Error_Msg_NE\n-                       (\"use clause for package &? has no effect\",\n+                       (\"use clause for package & has no effect?u?\",\n                         Curr, Entity (N));\n                   end if;\n \n@@ -9084,7 +9084,7 @@ package body Sem_Ch8 is\n                else\n                   Error_Msg_Node_1 := Etype (N);\n                   Error_Msg_NE\n-                    (\"use clause for }? has no effect\", Curr, Etype (N));\n+                    (\"use clause for } has no effect?u?\", Curr, Etype (N));\n                end if;\n             end if;\n "}, {"sha": "19a3cfbbc6c699756d14788bf58743a8a1488e36", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -1577,6 +1577,20 @@ package body Sem_Dim is\n                   then\n                      null;\n \n+                  --  Numeric literal case. Issue a warning to indicate the\n+                  --  literal is treated as if its dimension matches the type\n+                  --  dimension.\n+\n+                  elsif Nkind_In (Original_Node (L), N_Real_Literal,\n+                                                     N_Integer_Literal)\n+                  then\n+                     Dim_Warning_For_Numeric_Literal (L, Etype (R));\n+\n+                  elsif Nkind_In (Original_Node (R), N_Real_Literal,\n+                                                     N_Integer_Literal)\n+                  then\n+                     Dim_Warning_For_Numeric_Literal (R, Etype (L));\n+\n                   else\n                      Error_Dim_Msg_For_Binary_Op (N, L, R);\n                   end if;\n@@ -2724,6 +2738,24 @@ package body Sem_Dim is\n \n    procedure Dim_Warning_For_Numeric_Literal (N : Node_Id; Typ : Entity_Id) is\n    begin\n+      --  Consider the literal zero (integer 0 or real 0.0) to be of any\n+      --  dimension.\n+\n+      case Nkind (Original_Node (N)) is\n+         when N_Real_Literal =>\n+            if Expr_Value_R (N) = Ureal_0 then\n+               return;\n+            end if;\n+\n+         when N_Integer_Literal =>\n+            if Expr_Value (N) = Uint_0 then\n+               return;\n+            end if;\n+\n+         when others =>\n+            null;\n+      end case;\n+\n       --  Initialize name buffer\n \n       Name_Len := 0;"}, {"sha": "4802055a07604c07fc03a4770e98705de70e934f", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n+with Exp_Ch11; use Exp_Ch11;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Lib;      use Lib;\n@@ -348,7 +349,7 @@ package body Sem_Elab is\n    --           ABE mechanism effectively ignores all calls which cause the\n    --           elaboration flow to \"leave\" the instance.\n    --\n-   --  -gnatd.o conservarive elaboration order for indirect calls\n+   --  -gnatd.o conservative elaboration order for indirect calls\n    --\n    --           The ABE mechanism treats '[Unrestricted_]Access of an entry,\n    --           operator, or subprogram as an immediate invocation of the\n@@ -6333,7 +6334,7 @@ package body Sem_Elab is\n       end if;\n \n       --  Treat the attribute as an immediate invocation of the target when\n-      --  switch -gnatd.o (conservarive elaboration order for indirect calls)\n+      --  switch -gnatd.o (conservative elaboration order for indirect calls)\n       --  is in effect. Note that the prior elaboration of the unit containing\n       --  the target is ensured processing the corresponding call marker.\n \n@@ -8210,15 +8211,34 @@ package body Sem_Elab is\n       --    Instantiations\n       --    Reads of variables\n \n-      elsif Is_Suitable_Access (N)\n-        or else Is_Suitable_Variable_Assignment (N)\n-        or else Is_Suitable_Variable_Read (N)\n-      then\n-         null;\n+      elsif Is_Suitable_Access (N) then\n+         --  Signal any enclosing local exception handlers that the 'Access may\n+         --  raise Program_Error due to a failed ABE check when switch -gnatd.o\n+         --  (conservative elaboration order for indirect calls) is in effect.\n+         --  Marking the exception handlers ensures proper expansion by both\n+         --  the front and back end restriction when No_Exception_Propagation\n+         --  is in effect.\n+\n+         if Debug_Flag_Dot_O then\n+            Possible_Local_Raise (N, Standard_Program_Error);\n+         end if;\n \n       elsif Is_Suitable_Call (N) or else Is_Suitable_Instantiation (N) then\n          Declaration_Level_OK := True;\n \n+         --  Signal any enclosing local exception handlers that the call or\n+         --  instantiation may raise Program_Error due to a failed ABE check.\n+         --  Marking the exception handlers ensures proper expansion by both\n+         --  the front and back end restriction when No_Exception_Propagation\n+         --  is in effect.\n+\n+         Possible_Local_Raise (N, Standard_Program_Error);\n+\n+      elsif Is_Suitable_Variable_Assignment (N)\n+        or else Is_Suitable_Variable_Read (N)\n+      then\n+         null;\n+\n       --  Otherwise the input does not denote a suitable scenario\n \n       else\n@@ -8271,7 +8291,7 @@ package body Sem_Elab is\n \n       --  Mark a scenario which may produce run-time conditional ABE checks or\n       --  guaranteed ABE failures as recorded. The flag ensures that scenario\n-      --  rewritting performed by Atree.Rewrite will be properly reflected in\n+      --  rewriting performed by Atree.Rewrite will be properly reflected in\n       --  all relevant internal data structures.\n \n       if Is_Check_Emitting_Scenario (N) then"}, {"sha": "812682a846e3a873f95bf10ea1c3638a018f4903", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -2838,11 +2838,8 @@ package body Sem_Type is\n          return False;\n \n       elsif Nkind (Par) in N_Declaration then\n-         if Nkind (Par) = N_Object_Declaration then\n-            return Present (Corresponding_Generic_Association (Par));\n-         else\n-            return False;\n-         end if;\n+         return Nkind (Par) = N_Object_Declaration\n+            and then Present (Corresponding_Generic_Association (Par));\n \n       elsif Nkind (Par) = N_Object_Renaming_Declaration then\n          return Present (Corresponding_Generic_Association (Par));"}, {"sha": "13f030e713329fba85dd707042efd83dc951f22c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -3354,10 +3354,13 @@ package body Sem_Util is\n            and then not Comes_From_Source (Par)\n          then\n             --  Continue to examine the context if the reference appears in a\n-            --  subprogram body which was previously an expression function.\n+            --  subprogram body which was previously an expression function,\n+            --  unless this is during preanalysis (when In_Spec_Expression is\n+            --  True), as the body may not yet be inserted in the tree.\n \n             if Nkind (Par) = N_Subprogram_Body\n               and then Was_Expression_Function (Par)\n+              and then not In_Spec_Expression\n             then\n                null;\n \n@@ -12545,9 +12548,7 @@ package body Sem_Util is\n                  or else (Present (Renamed_Object (E))\n                            and then Is_Aliased_View (Renamed_Object (E)))))\n \n-           or else ((Is_Formal (E)\n-                      or else Ekind_In (E, E_Generic_In_Out_Parameter,\n-                                           E_Generic_In_Parameter))\n+           or else ((Is_Formal (E) or else Is_Formal_Object (E))\n                     and then Is_Tagged_Type (Etype (E)))\n \n            or else (Is_Concurrent_Type (E) and then In_Open_Scopes (E))"}, {"sha": "0a8f11222a81721eb3e700c8a802061514d1de1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -1,3 +1,8 @@\n+2017-10-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat.dg/default_pkg_actual.adb, gnat.dg/default_pkg_actual2.adb: New\n+\ttestcases.\n+\n 2017-10-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/dimensions.adb, gnat.dg/dimensions.ads: New testcase."}, {"sha": "d10ae0c152b2f2d18600c8f03cce5cc37dff0834", "filename": "gcc/testsuite/gnat.dg/default_pkg_actual.adb", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -0,0 +1,32 @@\n+--  { dg-do compile }\n+\n+procedure Default_Pkg_Actual is\n+\n+   generic\n+   package As is\n+   end As;\n+\n+   generic\n+      type T is private;\n+      with package A0 is new As;\n+   package Bs is\n+   end Bs;\n+\n+   generic\n+      with package Xa is new As;\n+   package Xs is\n+      package Xb is new Bs(T => Integer, A0 => Xa);\n+   end Xs;\n+\n+   generic\n+      with package Yb is new Bs(T => Integer, others => <>);\n+   package Ys is\n+   end Ys;\n+\n+   package A is new As;\n+   package X is new Xs(Xa => A);\n+   package Y is new Ys(Yb => X.Xb);\n+\n+begin\n+   null;\n+end;"}, {"sha": "7ab614a0994481a77880956426672867ecfb5e36", "filename": "gcc/testsuite/gnat.dg/default_pkg_actual2.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_pkg_actual2.adb?ref=8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c", "patch": "@@ -0,0 +1,27 @@\n+--  { dg-do compile }\n+\n+procedure Default_Pkg_Actual2 is\n+\n+   generic\n+   package P1 is\n+   end;\n+\n+   generic\n+      with package FP1a is new P1;\n+      with package FP1b is new P1;\n+   package P2 is\n+   end;\n+\n+   generic\n+      with package FP2 is new P2 (FP1a => <>,  FP1b => <>);\n+   package P3 is\n+   end;\n+\n+   package NP1a is new P1;\n+   package NP1b is new P1;\n+   package NP2  is new P2 (NP1a, NP1b);\n+   package NP4  is new P3 (NP2);\n+\n+begin\n+   null;\n+end;"}]}