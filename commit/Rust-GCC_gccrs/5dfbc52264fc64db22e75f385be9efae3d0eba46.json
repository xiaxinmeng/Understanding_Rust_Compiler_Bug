{"sha": "5dfbc52264fc64db22e75f385be9efae3d0eba46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRmYmM1MjI2NGZjNjRkYjIyZTc1ZjM4NWJlOWVmYWUzZDBlYmE0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T19:23:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T20:33:29Z"}, "message": "libstdc++: Avoid bad_alloc exceptions when changing locales\n\nFor the --enable-clocale=generic configuration, the current code can\nfail with a bad_alloc exception. This patch uses the nothrow version of\noperator new and reports allocation failures by setting failbit in the\niostate variable.\n\n\t* config/locale/generic/c_locale.cc (__set_C_locale()): New function\n\tto set the \"C\" locale and return the name of the previous locale.\n\t(__convert_to_v<float>, __convert_to_v<double>)\n\t(__convert_to_v<long double>): Use __set_C_locale and set failbit on\n\terror.", "tree": {"sha": "3aa5fecbf586d5d5e85e46c42fa46b1177f0e4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa5fecbf586d5d5e85e46c42fa46b1177f0e4b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dfbc52264fc64db22e75f385be9efae3d0eba46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfbc52264fc64db22e75f385be9efae3d0eba46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfbc52264fc64db22e75f385be9efae3d0eba46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfbc52264fc64db22e75f385be9efae3d0eba46/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0c83feb04d7486ccf9cbe86dcd5668f0a21ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0c83feb04d7486ccf9cbe86dcd5668f0a21ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0c83feb04d7486ccf9cbe86dcd5668f0a21ef9"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "648b8e182cc7da95cd1ec04e0f7c4cb196f97c81", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfbc52264fc64db22e75f385be9efae3d0eba46/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfbc52264fc64db22e75f385be9efae3d0eba46/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=5dfbc52264fc64db22e75f385be9efae3d0eba46", "patch": "@@ -52,6 +52,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~_Save_errno() { if (errno == 0) errno = _M_errno; }\n       int _M_errno;\n     };\n+\n+    // calls setlocale(LC_ALL, \"C\") and returns a string containing the old\n+    // locale name. Caller must delete[] the string. Returns NULL on error.\n+    const char*\n+    __set_C_locale()\n+    {\n+      char* __old = setlocale(LC_ALL, 0);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new(nothrow) char[__len];\n+      if (__sav)\n+\t{\n+\t  memcpy(__sav, __old, __len);\n+\t  setlocale(LC_ALL, \"C\");\n+\t}\n+      return __sav;\n+    }\n   }\n \n   template<>\n@@ -60,11 +76,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, 0);\n-      const size_t __len = strlen(__old) + 1;\n-      char* __sav = new char[__len];\n-      memcpy(__sav, __old, __len);\n-      setlocale(LC_ALL, \"C\");\n+      const char* __sav = __set_C_locale();\n+      if (!__sav)\n+\t{\n+\t  __err = ios_base::failbit;\n+\t  return;\n+\t}\n       char* __sanity;\n       bool __overflow = false;\n \n@@ -125,11 +142,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, 0);\n-      const size_t __len = strlen(__old) + 1;\n-      char* __sav = new char[__len];\n-      memcpy(__sav, __old, __len);\n-      setlocale(LC_ALL, \"C\");\n+      const char* __sav = __set_C_locale();\n+      if (!__sav)\n+\t{\n+\t  __err = ios_base::failbit;\n+\t  return;\n+\t}\n       char* __sanity;\n \n #if !__DBL_HAS_INFINITY__\n@@ -170,11 +188,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   ios_base::iostate& __err, const __c_locale&) throw()\n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = setlocale(LC_ALL, 0);\n-      const size_t __len = strlen(__old) + 1;\n-      char* __sav = new char[__len];\n-      memcpy(__sav, __old, __len);\n-      setlocale(LC_ALL, \"C\");\n+      const char* __sav = __set_C_locale();\n+      if (!__sav)\n+\t{\n+\t  __err = ios_base::failbit;\n+\t  return;\n+\t}\n \n #if !__LDBL_HAS_INFINITY__\n       const _Save_errno __save_errno;"}]}