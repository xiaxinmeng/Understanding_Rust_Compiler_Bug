{"sha": "e993fea1ac45e88f113a598956224527bcb41753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5M2ZlYTFhYzQ1ZTg4ZjExM2E1OTg5NTYyMjQ1MjdiY2I0MTc1Mw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-26T09:59:10Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-26T09:59:10Z"}, "message": "[AArch64] [1/4 Fix vtbx1] Allow signed and unsigned versions of intrinsics\nto coexist.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(VAR1): Use new naming scheme for aarch64_builtins.\n\t(aarch64_builtin_vectorized_function): Use new\n\taarch64_builtins names.\n\nFrom-SVN: r205383", "tree": {"sha": "513fa4aa69483de9f770507ecee6f352c7f310e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513fa4aa69483de9f770507ecee6f352c7f310e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e993fea1ac45e88f113a598956224527bcb41753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e993fea1ac45e88f113a598956224527bcb41753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e993fea1ac45e88f113a598956224527bcb41753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e993fea1ac45e88f113a598956224527bcb41753/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8e9e1cda43a2b56618172896acb62103cd6bab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e9e1cda43a2b56618172896acb62103cd6bab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e9e1cda43a2b56618172896acb62103cd6bab8"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "30f851362c4a7db5b006818750f8a3ca23b10c0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e993fea1ac45e88f113a598956224527bcb41753/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e993fea1ac45e88f113a598956224527bcb41753/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e993fea1ac45e88f113a598956224527bcb41753", "patch": "@@ -1,3 +1,10 @@\n+2013-11-26  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(VAR1): Use new naming scheme for aarch64_builtins.\n+\t(aarch64_builtin_vectorized_function): Use new\n+\taarch64_builtins names.\n+\n 2013-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59287"}, {"sha": "d804dc9bebb995565533511bc66d91658b339e3f", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e993fea1ac45e88f113a598956224527bcb41753/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e993fea1ac45e88f113a598956224527bcb41753/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=e993fea1ac45e88f113a598956224527bcb41753", "patch": "@@ -320,7 +320,7 @@ static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n \n #undef VAR1\n #define VAR1(T, N, MAP, A) \\\n-  AARCH64_SIMD_BUILTIN_##N##A,\n+  AARCH64_SIMD_BUILTIN_##T##_##N##A,\n \n enum aarch64_builtins\n {\n@@ -897,11 +897,11 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n #define AARCH64_CHECK_BUILTIN_MODE(C, N) 1\n #define AARCH64_FIND_FRINT_VARIANT(N) \\\n   (AARCH64_CHECK_BUILTIN_MODE (2, D) \\\n-    ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v2df] \\\n+    ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v2df] \\\n     : (AARCH64_CHECK_BUILTIN_MODE (4, S) \\\n-\t? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v4sf] \\\n+\t? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v4sf] \\\n \t: (AARCH64_CHECK_BUILTIN_MODE (2, S) \\\n-\t   ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_##N##v2sf] \\\n+\t   ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v2sf] \\\n \t   : NULL_TREE)))\n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n     {\n@@ -937,7 +937,7 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n         case BUILT_IN_CLZ:\n           {\n             if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-              return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_clzv4si];\n+              return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_clzv4si];\n             return NULL_TREE;\n           }\n #undef AARCH64_CHECK_BUILTIN_MODE\n@@ -947,47 +947,47 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n \tcase BUILT_IN_LFLOOR:\n \tcase BUILT_IN_IFLOORF:\n \t  {\n-\t    tree new_tree = NULL_TREE;\n+\t    enum aarch64_builtins builtin;\n \t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lfloorv2dfv2di];\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2dfv2di;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lfloorv4sfv4si];\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv4sfv4si;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lfloorv2sfv2si];\n-\t    return new_tree;\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2sfv2si;\n+\t    else\n+\t      return NULL_TREE;\n+\n+\t    return aarch64_builtin_decls[builtin];\n \t  }\n \tcase BUILT_IN_LCEIL:\n \tcase BUILT_IN_ICEILF:\n \t  {\n-\t    tree new_tree = NULL_TREE;\n+\t    enum aarch64_builtins builtin;\n \t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lceilv2dfv2di];\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2dfv2di;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lceilv4sfv4si];\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv4sfv4si;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lceilv2sfv2si];\n-\t    return new_tree;\n+\t      builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2sfv2si;\n+\t    else\n+\t      return NULL_TREE;\n+\n+\t    return aarch64_builtin_decls[builtin];\n \t  }\n \tcase BUILT_IN_LROUND:\n \tcase BUILT_IN_IROUNDF:\n \t  {\n-\t    tree new_tree = NULL_TREE;\n+\t    enum aarch64_builtins builtin;\n \t    if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lroundv2dfv2di];\n+\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2dfv2di;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lroundv4sfv4si];\n+\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv4sfv4si;\n \t    else if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t      new_tree =\n-\t\taarch64_builtin_decls[AARCH64_SIMD_BUILTIN_lroundv2sfv2si];\n-\t    return new_tree;\n+\t      builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2sfv2si;\n+\t    else\n+\t      return NULL_TREE;\n+\n+\t    return aarch64_builtin_decls[builtin];\n \t  }\n \n \tdefault:\n@@ -1000,7 +1000,7 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n \n #undef VAR1\n #define VAR1(T, N, MAP, A) \\\n-  case AARCH64_SIMD_BUILTIN_##N##A:\n+  case AARCH64_SIMD_BUILTIN_##T##_##N##A:\n \n tree\n aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,"}]}