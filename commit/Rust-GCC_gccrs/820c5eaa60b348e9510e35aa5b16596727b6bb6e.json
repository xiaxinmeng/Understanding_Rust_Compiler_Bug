{"sha": "820c5eaa60b348e9510e35aa5b16596727b6bb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwYzVlYWE2MGIzNDhlOTUxMGUzNWFhNWIxNjU5NjcyN2I2YmI2ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-03-16T23:53:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-03-16T23:53:18Z"}, "message": "re PR middle-end/70240 (ICE: in gimplify_modify_expr, at gimplify.c:4854 with -ftree-vectorize)\n\nPR middle-end/70240\n\n  * gcc.c-torture/compile/pr70240.c: New.\n\nFrom-SVN: r234273", "tree": {"sha": "f3fc2eb2030a0f32ca40ce5e9c4d1c386aec884b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3fc2eb2030a0f32ca40ce5e9c4d1c386aec884b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/820c5eaa60b348e9510e35aa5b16596727b6bb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820c5eaa60b348e9510e35aa5b16596727b6bb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820c5eaa60b348e9510e35aa5b16596727b6bb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820c5eaa60b348e9510e35aa5b16596727b6bb6e/comments", "author": null, "committer": null, "parents": [{"sha": "8f66e7dc9e7521eac72412652725b5a54c5286d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f66e7dc9e7521eac72412652725b5a54c5286d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f66e7dc9e7521eac72412652725b5a54c5286d4"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "f59e1c8213d5d0da971c5d0f14a63af3c327afc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820c5eaa60b348e9510e35aa5b16596727b6bb6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820c5eaa60b348e9510e35aa5b16596727b6bb6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=820c5eaa60b348e9510e35aa5b16596727b6bb6e", "patch": "@@ -1,3 +1,8 @@\n+2016-03-16  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/70240\n+\t* gcc.c-torture/compile/pr70240.c: New.\n+\n 2016-03-16  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.c-torture/compile/20151204.c: Skip for avr."}, {"sha": "830d4ddcc9359353fba09b0f55ae2afecf95aae4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr70240.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820c5eaa60b348e9510e35aa5b16596727b6bb6e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820c5eaa60b348e9510e35aa5b16596727b6bb6e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70240.c?ref=820c5eaa60b348e9510e35aa5b16596727b6bb6e", "patch": "@@ -0,0 +1,26 @@\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+int\n+foo(int u16_0, int u32_0, int u64_0, int u16_1, int u32_1, int u64_1, v16hi v32u16_0, v8si v32u32_0, v4di v32u64_0, v16hi v32u16_1, v8si v32u32_1, v4di v32u64_1)\n+{\n+  do {\n+    v32u16_1 += (v16hi){ v32u32_1[7], ~v32u32_1[3], 0, v32u64_0[0]};\n+    u32_0 = (u32_0 << 31) | (u32_0 >> ~v32u32_0[1]);\n+    u64_0 += 1;\n+    v32u64_0[2] <<= v32u64_0[2] & 63;\n+    u16_1 = (u16_1 >> (v32u16_0[11] & 15)) | (u16_1 << (-v32u16_0[11] & 15));\n+    v32u16_0 -= ~v32u16_1;\n+    v32u32_1[5] += u32_1;\n+    if (v32u32_1[3] >= 0) {\n+      u64_1 -= ~v32u64_1[1];\n+      v32u16_1 += (v16hi){ -u64_1, ~u32_0, ~u16_1, v32u32_1[1], 0, ~v32u16_1[2], ~v32u64_1[2], ~v32u32_0[7]};\n+    }\n+    v32u64_1 += (v4di){0, 0, ~v32u32_0[5]};\n+    v32u32_1 *= (v8si){0, ~v32u32_1[6]};\n+    v32u64_0[3] &= 0x1234;\n+    v32u64_0 += (v4di){v32u32_1[6]};\n+  } while (u16_0 < 0x1234);\n+  return u64_0 + u16_1;\n+}"}]}