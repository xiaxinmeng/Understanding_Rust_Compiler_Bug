{"sha": "b6db7cd41ccf821ffb10ff4f18845465e98803cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkYjdjZDQxY2NmODIxZmZiMTBmZjRmMTg4NDU0NjVlOTg4MDNjZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-09T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-09T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "aa1ac0acd3abc087c4b2bb76ccdb4f959753553d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1ac0acd3abc087c4b2bb76ccdb4f959753553d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6db7cd41ccf821ffb10ff4f18845465e98803cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db7cd41ccf821ffb10ff4f18845465e98803cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6db7cd41ccf821ffb10ff4f18845465e98803cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db7cd41ccf821ffb10ff4f18845465e98803cd/comments", "author": null, "committer": null, "parents": [{"sha": "3c64582372cf445eabc4f9e99def7e33fb0270ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c64582372cf445eabc4f9e99def7e33fb0270ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c64582372cf445eabc4f9e99def7e33fb0270ee"}], "stats": {"total": 495, "additions": 494, "deletions": 1}, "files": [{"sha": "2f27a0cb0b42a4fac4033191bbf65e11648bcc59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,274 @@\n+2021-09-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/60318\n+\t* doc/trouble.texi (Copy Assignment): Fix description of\n+\tbehaviour and fix code in example.\n+\n+2021-09-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/102107\n+\t* config/rs6000/rs6000-logue.c (rs6000_emit_epilogue): For ELFv2 use\n+\tr11 instead of r12 for restoring CR.\n+\n+2021-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\t    liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/89984\n+\t* config/i386/i386.md (@xorsign<mode>3_1): Remove.\n+\t* config/i386/i386-expand.c (ix86_expand_xorsign): Expand right away\n+\tinto AND with mask and XOR, using paradoxical subregs.\n+\t(ix86_split_xorsign): Remove.\n+\t* config/i386/i386-protos.h (ix86_split_xorsign): Remove.\n+\n+2021-09-08  Di Zhao  <dizhao@os.amperecomputing.com>\n+\n+\t* tree-ssa-sccvn.c (vn_nary_op_insert_into): fix result compare\n+\n+2021-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102224\n+\t* config/i386/i386.md (xorsign<mode>3): If operands[1] is equal to\n+\toperands[2], emit abs<mode>2 instead.\n+\t(@xorsign<mode>3_1): Add early-clobbers for output operand, enable\n+\tfirst alternative even for avx, add another alternative with\n+\t=&Yv <- 0, Yv, Yvm constraints.\n+\t* config/i386/i386-expand.c (ix86_split_xorsign): If op0 is equal\n+\tto op1, emit vpandn instead.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_set_ph): New intrinsic.\n+\t(_mm256_set_ph): Likewise.\n+\t(_mm512_set_ph): Likewise.\n+\t(_mm_setr_ph): Likewise.\n+\t(_mm256_setr_ph): Likewise.\n+\t(_mm512_setr_ph): Likewise.\n+\t(_mm_set1_ph): Likewise.\n+\t(_mm256_set1_ph): Likewise.\n+\t(_mm512_set1_ph): Likewise.\n+\t(_mm_setzero_ph): Likewise.\n+\t(_mm256_setzero_ph): Likewise.\n+\t(_mm512_setzero_ph): Likewise.\n+\t(_mm_set_sh): Likewise.\n+\t(_mm_load_sh): Likewise.\n+\t(_mm_store_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def (V8HF): New type.\n+\t(DEF_FUNCTION_TYPE (V8HF, V8HI)): New builtin function type\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n+\tSupport vector HFmodes.\n+\t(ix86_expand_vector_init_one_nonzero): Likewise.\n+\t(ix86_expand_vector_init_one_var): Likewise.\n+\t(ix86_expand_vector_init_interleave): Likewise.\n+\t(ix86_expand_vector_init_general): Likewise.\n+\t(ix86_expand_vector_set): Likewise.\n+\t(ix86_expand_vector_extract): Likewise.\n+\t(ix86_expand_vector_init_concat): Likewise.\n+\t(ix86_expand_sse_movcc): Handle vector HFmodes.\n+\t(ix86_expand_vector_set_var): Ditto.\n+\t* config/i386/i386-modes.def: Add HF vector modes in comment.\n+\t* config/i386/i386.c (classify_argument): Add HF vector modes.\n+\t(ix86_hard_regno_mode_ok): Allow HF vector modes for AVX512FP16.\n+\t(ix86_vector_mode_supported_p): Likewise.\n+\t(ix86_set_reg_reg_cost): Handle vector HFmode.\n+\t(ix86_get_ssemov): Handle vector HFmode.\n+\t(function_arg_advance_64): Pass unamed V16HFmode and V32HFmode\n+\tby stack.\n+\t(function_arg_advance_32): Pass V8HF/V16HF/V32HF by sse reg for 32bit\n+\tmode.\n+\t(function_arg_advance_32): Ditto.\n+\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): New.\n+\t(VALID_AVX256_REG_OR_OI_MODE): Rename to ..\n+\t(VALID_AVX256_REG_OR_OI_VHF_MODE): .. this, and add V16HF.\n+\t(VALID_SSE2_REG_VHF_MODE): New.\n+\t(VALID_AVX512VL_128_REG_MODE): Add V8HF and TImode.\n+\t(SSE_REG_MODE_P): Add vector HFmode.\n+\t* config/i386/i386.md (mode): Add HF vector modes.\n+\t(MODE_SIZE): Likewise.\n+\t(ssemodesuffix): Add ph suffix for HF vector modes.\n+\t* config/i386/sse.md (VFH_128): New mode iterator.\n+\t(VMOVE): Adjust for HF vector modes.\n+\t(V): Likewise.\n+\t(V_256_512): Likewise.\n+\t(avx512): Likewise.\n+\t(avx512fmaskmode): Likewise.\n+\t(shuffletype): Likewise.\n+\t(sseinsnmode): Likewise.\n+\t(ssedoublevecmode): Likewise.\n+\t(ssehalfvecmode): Likewise.\n+\t(ssehalfvecmodelower): Likewise.\n+\t(ssePScmode): Likewise.\n+\t(ssescalarmode): Likewise.\n+\t(ssescalarmodelower): Likewise.\n+\t(sseintprefix): Likewise.\n+\t(i128): Likewise.\n+\t(bcstscalarsuff): Likewise.\n+\t(xtg_mode): Likewise.\n+\t(VI12HF_AVX512VL): New mode_iterator.\n+\t(VF_AVX512FP16): Likewise.\n+\t(VIHF): Likewise.\n+\t(VIHF_256): Likewise.\n+\t(VIHF_AVX512BW): Likewise.\n+\t(V16_256): Likewise.\n+\t(V32_512): Likewise.\n+\t(sseintmodesuffix): New mode_attr.\n+\t(sse): Add scalar and vector HFmodes.\n+\t(ssescalarmode): Add vector HFmode mapping.\n+\t(ssescalarmodesuffix): Add sh suffix for HFmode.\n+\t(*<sse>_vm<insn><mode>3): Use VFH_128.\n+\t(*<sse>_vm<multdiv_mnemonic><mode>3): Likewise.\n+\t(*ieee_<ieee_maxmin><mode>3): Likewise.\n+\t(<avx512>_blendm<mode>): New define_insn.\n+\t(vec_setv8hf): New define_expand.\n+\t(vec_set<mode>_0): New define_insn for HF vector set.\n+\t(*avx512fp16_movsh): Likewise.\n+\t(avx512fp16_movsh): Likewise.\n+\t(vec_extract_lo_v32hi): Rename to ...\n+\t(vec_extract_lo_<mode>): ... this, and adjust to allow HF\n+\tvector modes.\n+\t(vec_extract_hi_v32hi): Likewise.\n+\t(vec_extract_hi_<mode>): Likewise.\n+\t(vec_extract_lo_v16hi): Likewise.\n+\t(vec_extract_lo_<mode>): Likewise.\n+\t(vec_extract_hi_v16hi): Likewise.\n+\t(vec_extract_hi_<mode>): Likewise.\n+\t(vec_set_hi_v16hi): Likewise.\n+\t(vec_set_hi_<mode>): Likewise.\n+\t(vec_set_lo_v16hi): Likewise.\n+\t(vec_set_lo_<mode>): Likewise.\n+\t(*vec_extract<mode>_0): New define_insn_and_split for HF\n+\tvector extract.\n+\t(*vec_extracthf): New define_insn.\n+\t(VEC_EXTRACT_MODE): Add HF vector modes.\n+\t(PINSR_MODE): Add V8HF.\n+\t(sse2p4_1): Likewise.\n+\t(pinsr_evex_isa): Likewise.\n+\t(<sse2p4_1>_pinsr<ssemodesuffix>): Adjust to support\n+\tinsert for V8HFmode.\n+\t(pbroadcast_evex_isa): Add HF vector modes.\n+\t(AVX2_VEC_DUP_MODE): Likewise.\n+\t(VEC_INIT_MODE): Likewise.\n+\t(VEC_INIT_HALF_MODE): Likewise.\n+\t(avx2_pbroadcast<mode>): Adjust to support HF vector mode\n+\tbroadcast.\n+\t(avx2_pbroadcast<mode>_1): Likewise.\n+\t(<avx512>_vec_dup<mode>_1): Likewise.\n+\t(<avx512>_vec_dup<mode><mask_name>): Likewise.\n+\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>):\n+\tLikewise.\n+\n+2021-09-08  Guo, Xuepeng  <xuepeng.guo@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Liu Hongtao  <hongtao.liu@intel.com>\n+\t    Wang Hongyu  <hongyu.wang@intel.com>\n+\t    Xu Dianhong  <dianhong.xu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect FEATURE_AVX512FP16.\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_AVX512FP16_SET,\n+\tOPTION_MASK_ISA_AVX512FP16_UNSET,\n+\tOPTION_MASK_ISA2_AVX512FP16_SET,\n+\tOPTION_MASK_ISA2_AVX512FP16_UNSET): New.\n+\t(OPTION_MASK_ISA2_AVX512BW_UNSET,\n+\tOPTION_MASK_ISA2_AVX512BF16_UNSET): Add AVX512FP16.\n+\t(ix86_handle_option): Handle -mavx512fp16.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_AVX512FP16.\n+\t* common/config/i386/i386-isas.h: Add entry for AVX512FP16.\n+\t* config.gcc: Add avx512fp16intrin.h.\n+\t* config/i386/avx512fp16intrin.h: New intrinsic header.\n+\t* config/i386/cpuid.h: Add bit_AVX512FP16.\n+\t* config/i386/i386-builtin-types.def: (FLOAT16): New primitive type.\n+\t* config/i386/i386-builtins.c: Support _Float16 type for i386\n+\tbackend.\n+\t(ix86_register_float16_builtin_type): New function.\n+\t(ix86_float16_type_node): New.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512FP16__.\n+\t* config/i386/i386-expand.c (ix86_expand_branch): Support\n+\tHFmode.\n+\t(ix86_prepare_fp_compare_args): Adjust TARGET_SSE_MATH &&\n+\tSSE_FLOAT_MODE_P to SSE_FLOAT_MODE_SSEMATH_OR_HF_P.\n+\t(ix86_expand_fp_movcc): Ditto.\n+\t* config/i386/i386-isa.def: Add PTA define for AVX512FP16.\n+\t* config/i386/i386-options.c (isa2_opts): Add -mavx512fp16.\n+\t(ix86_valid_target_attribute_inner_p): Add avx512fp16 attribute.\n+\t* config/i386/i386.c (ix86_get_ssemov): Use\n+\tvmovdqu16/vmovw/vmovsh for HFmode/HImode scalar or vector.\n+\t(ix86_get_excess_precision): Use\n+\tFLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when TARGET_AVX512FP16\n+\texisted.\n+\t(sse_store_index): Use SFmode cost for HFmode cost.\n+\t(inline_memory_move_cost): Add HFmode, and perfer SSE cost over\n+\tGPR cost for HFmode.\n+\t(ix86_hard_regno_mode_ok): Allow HImode in sse register.\n+\t(ix86_mangle_type): Add manlging for _Float16 type.\n+\t(inline_secondary_memory_needed): No memory is needed for\n+\t16bit movement between gpr and sse reg under\n+\tTARGET_AVX512FP16.\n+\t(ix86_multiplication_cost): Adjust TARGET_SSE_MATH &&\n+\tSSE_FLOAT_MODE_P to SSE_FLOAT_MODE_SSEMATH_OR_HF_P.\n+\t(ix86_division_cost): Ditto.\n+\t(ix86_rtx_costs): Ditto.\n+\t(ix86_add_stmt_cost): Ditto.\n+\t(ix86_optab_supported_p): Ditto.\n+\t* config/i386/i386.h (VALID_AVX512F_SCALAR_MODE): Add HFmode.\n+\t(SSE_FLOAT_MODE_SSEMATH_OR_HF_P): Add HFmode.\n+\t(PTA_SAPPHIRERAPIDS): Add PTA_AVX512FP16.\n+\t* config/i386/i386.md (mode): Add HFmode.\n+\t(MODE_SIZE): Add HFmode.\n+\t(isa): Add avx512fp16.\n+\t(enabled): Handle avx512fp16.\n+\t(ssemodesuffix): Add sh suffix for HFmode.\n+\t(comm): Add mult, div.\n+\t(plusminusmultdiv): New code iterator.\n+\t(insn): Add mult, div.\n+\t(*movhf_internal): Adjust for avx512fp16 instruction.\n+\t(*movhi_internal): Ditto.\n+\t(*cmpi<unord>hf): New define_insn for HFmode.\n+\t(*ieee_s<ieee_maxmin>hf3): Likewise.\n+\t(extendhf<mode>2): Likewise.\n+\t(trunc<mode>hf2): Likewise.\n+\t(float<floatunssuffix><mode>hf2): Likewise.\n+\t(*<insn>hf): Likewise.\n+\t(cbranchhf4): New expander.\n+\t(movhfcc): Likewise.\n+\t(<insn>hf3): Likewise.\n+\t(mulhf3): Likewise.\n+\t(divhf3): Likewise.\n+\t* config/i386/i386.opt: Add mavx512fp16.\n+\t* config/i386/immintrin.h: Include avx512fp16intrin.h.\n+\t* doc/invoke.texi: Add mavx512fp16.\n+\t* doc/extend.texi: Add avx512fp16 Usage Notes.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* common.opt: Support -fexcess-precision=16.\n+\t* config/aarch64/aarch64.c (aarch64_excess_precision): Return\n+\tFLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when\n+\tEXCESS_PRECISION_TYPE_FLOAT16.\n+\t* config/arm/arm.c (arm_excess_precision): Ditto.\n+\t* config/i386/i386.c (ix86_get_excess_precision): Ditto.\n+\t* config/m68k/m68k.c (m68k_excess_precision): Issue an error\n+\twhen EXCESS_PRECISION_TYPE_FLOAT16.\n+\t* config/s390/s390.c (s390_excess_precision): Ditto.\n+\t* coretypes.h (enum excess_precision_type): Add\n+\tEXCESS_PRECISION_TYPE_FLOAT16.\n+\t* doc/tm.texi (TARGET_C_EXCESS_PRECISION): Update documents.\n+\t* doc/tm.texi.in (TARGET_C_EXCESS_PRECISION): Ditto.\n+\t* doc/extend.texi (Half-Precision): Document\n+\t-fexcess-precision=16.\n+\t* flag-types.h (enum excess_precision): Add\n+\tEXCESS_PRECISION_FLOAT16.\n+\t* target.def (excess_precision): Update document.\n+\t* tree.c (excess_precision_type): Set excess_precision_type to\n+\tEXCESS_PRECISION_FLOAT16 when -fexcess-precision=16.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* doc/extend.texi: (@node Floating Types): Adjust the wording.\n+\t(@node Half-Precision): Ditto.\n+\n 2021-09-07  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \tPR target/102115"}, {"sha": "6d29c0e565041503b8b9945f90dcbb62cb478cb3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1 +1 @@\n-20210908\n+20210909"}, {"sha": "ff5fc4ebbc05ef86136a3413cfb8f70482d1e4d7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,8 @@\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc-interface/misc.c (gnat_post_options): Issue an error for\n+\t-fexcess-precision=16.\n+\n 2021-08-19  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/101924"}, {"sha": "03ba64fb0d2ccfef24beb2e4d5d44f49e06a4a5d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,15 @@\n+2021-09-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102225\n+\t* analyzer.h (compat_types_p): New decl.\n+\t* constraint-manager.cc\n+\t(constraint_manager::get_or_add_equiv_class): Guard against NULL\n+\ttype when checking for pointer types.\n+\t* region-model-impl-calls.cc (region_model::impl_call_realloc):\n+\tGuard against NULL lhs type/region.  Guard against the size value\n+\tnot being of a compatible type for dynamic extents.\n+\t* region-model.cc (compat_types_p): Make non-static.\n+\n 2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99260"}, {"sha": "d5618a59702236aac615d6d3bec928be8f4ac6b6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,12 @@\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* c-common.c (excess_precision_mode_join): Update below comments.\n+\t(c_ts18661_flt_eval_method): Set excess_precision_type to\n+\tEXCESS_PRECISION_TYPE_FLOAT16 when -fexcess-precision=16.\n+\t* c-cppbuiltin.c (cpp_atomic_builtins): Update below comments.\n+\t(c_cpp_flt_eval_method_iec_559): Set excess_precision_type to\n+\tEXCESS_PRECISION_TYPE_FLOAT16 when -fexcess-precision=16.\n+\n 2021-09-07  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* c-omp.c (c_finish_omp_flush): Handle MEMMODEL_SEQ_CST."}, {"sha": "84b9b97c13e117b08daf39e541534db63d852622", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,18 @@\n+2021-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/102228\n+\t* cp-tree.h (ANON_AGGR_TYPE_FIELD): New define.\n+\t* decl.c (fixup_anonymous_aggr): Wipe RTTI info put in\n+\tplace on invalid code.\n+\t* decl2.c (reset_type_linkage): Guard CLASSTYPE_TYPEINFO_VAR\n+\taccess.\n+\t* module.cc (trees_in::read_class_def): Likewise.  Reconstruct\n+\tANON_AGGR_TYPE_FIELD.\n+\t* semantics.c (finish_member_declaration): Populate\n+\tANON_AGGR_TYPE_FIELD for anon aggregate typed members.\n+\t* typeck.c (lookup_anon_field): Remove DFS search and return\n+\tANON_AGGR_TYPE_FIELD directly.\n+\n 2021-09-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100495"}, {"sha": "2b148f111c106ec6c427794a6f5a8ccae930fb9b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,8 @@\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* options.c (gfc_post_options): Issue an error for\n+\t-fexcess-precision=16.\n+\n 2021-09-07  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/101327"}, {"sha": "5d85573640e680224bc1aa58f040c688118e2cab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,168 @@\n+2021-09-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102225\n+\t* gcc.dg/analyzer/realloc-1.c (test_10): New.\n+\t* gcc.dg/analyzer/torture/pr102225.c: New test.\n+\n+2021-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/array-quals-1.c: Allow .sdata section in more cases.\n+\n+2021-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/tree-ssa/pr89430-1.c, gcc.dg/tree-ssa/pr89430-2.c,\n+\tgcc.dg/tree-ssa/pr89430-3.c, gcc.dg/tree-ssa/pr89430-4.c,\n+\tgcc.dg/tree-ssa/pr89430-5.c, gcc.dg/tree-ssa/pr89430-6.c,\n+\tgcc.dg/tree-ssa/pr89430-7-comp-ref.c,\n+\tgcc.dg/tree-ssa/pr89430-8-mem-ref-size.c,\n+\tgcc.dg/tree-ssa/pr99473-1.c: Use -ftree-cselim.\n+\n+2021-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\t    liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/89984\n+\t* gcc.target/i386/avx-pr102224.c: Fix up PR number.\n+\t* gcc.dg/pr89984.c: New test.\n+\t* gcc.target/i386/avx-pr89984.c: New test.\n+\n+2021-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102224\n+\t* gcc.dg/pr102224.c: New test.\n+\t* gcc.target/i386/avx-pr102224.c: New test.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/abi-avx512fp16-zmm.exp:\n+\tNew file.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/args.h: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/avx512fp16-zmm-check.h:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_m512_returning.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_m512.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_structs.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_passing_unions.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/test_varargs-m512.c:\n+\tLikewise.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/abi-avx512fp16-ymm.exp:\n+\tNew exp file.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/args.h: New header.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/avx512fp16-ymm-check.h:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/asm-support.S: New.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/test_m256_returning.c:\n+\tNew test.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/test_passing_m256.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/test_passing_structs.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/test_passing_unions.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/test_varargs-m256.c: Likewise.\n+\n+2021-09-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/x86_64/abi/avx512fp16/abi-avx512fp16-xmm.exp: New exp\n+\tfile for abi test.\n+\t* gcc.target/x86_64/abi/avx512fp16/args.h: New header file for abi test.\n+\t* gcc.target/x86_64/abi/avx512fp16/avx512fp16-check.h: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/avx512fp16-xmm-check.h: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/defines.h: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/macros.h: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/asm-support.S: New asm for abi check.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_3_element_struct_and_unions.c:\n+\tNew test.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_alignment.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_array_size_and_align.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_returning.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_sizes.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_struct_size_and_align.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_basic_union_size_and_align.c:\n+\tLikewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_complex_returning.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_m64m128_returning.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_passing_floats.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_passing_m64m128.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_passing_structs.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_passing_unions.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_struct_returning.c: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_varargs-m128.c: Likewise.\n+\n+2021-09-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/avx512fp16-vararg-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-vararg-2.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vararg-3.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vararg-4.c: Ditto.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/m512-check.h: Add union128h, union256h, union512h.\n+\t* gcc.target/i386/avx512fp16-10a.c: New test.\n+\t* gcc.target/i386/avx512fp16-10b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-1c.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-1d.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-1e.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-2a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-2b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-2c.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-3a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-3b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-3c.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-4.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-5.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-6.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-7.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-8.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-9a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-9b.c: Ditto.\n+\t* gcc.target/i386/pr54855-13.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vec_set_var.c: Ditto.\n+\n+2021-09-08  Guo, Xuepeng  <xuepeng.guo@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Liu Hongtao  <hongtao.liu@intel.com>\n+\t    Wang Hongyu  <hongyu.wang@intel.com>\n+\t    Xu Dianhong  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add -mavx512fp16 in dg-options.\n+\t* gcc.target/i386/avx-2.c: Ditto.\n+\t* gcc.target/i386/avx512-check.h: Check cpuid for AVX512FP16.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute check.\n+\t* gcc.target/i386/sse-13.c: Add -mavx512fp16.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* lib/target-supports.exp: (check_effective_target_avx512fp16): New.\n+\t* g++.target/i386/float16-1.C: New test.\n+\t* g++.target/i386/float16-2.C: Ditto.\n+\t* g++.target/i386/float16-3.C: Ditto.\n+\t* gcc.target/i386/avx512fp16-12a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-12b.c: Ditto.\n+\t* gcc.target/i386/float16-3a.c: Ditto.\n+\t* gcc.target/i386/float16-3b.c: Ditto.\n+\t* gcc.target/i386/float16-4a.c: Ditto.\n+\t* gcc.target/i386/float16-4b.c: Ditto.\n+\t* gcc.target/i386/pr54855-12.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/float16-6.c: New test.\n+\t* gcc.target/i386/float16-7.c: New test.\n+\n 2021-09-07  David Faust  <david.faust@oracle.com>\n \n \t* gcc.target/bpf/core-attr-1.c: New test."}, {"sha": "04d17ac3bab4c9d4a6147bbbedde98ed65ba7c85", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db7cd41ccf821ffb10ff4f18845465e98803cd/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db7cd41ccf821ffb10ff4f18845465e98803cd/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b6db7cd41ccf821ffb10ff4f18845465e98803cd", "patch": "@@ -1,3 +1,14 @@\n+2021-09-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/t-softfp: Compile __{mul,div}hc3 into\n+\tlibgcc_s.so.1.\n+\n+2021-09-08  Jakub Jelinek  <jakub@redhat.com>\n+\t    Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/libgcc-glibc.ver: Add %inherit GCC_12.0.0 GCC_7.0.0\n+\tand export *hf* and *hc* functions at GCC_12.0.0.\n+\n 2021-09-06  liuhongt  <hongtao.liu@intel.com>\n \n \t* Makefile.in: Adjust to support specific CFLAGS for each"}]}