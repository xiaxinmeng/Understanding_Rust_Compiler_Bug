{"sha": "4f72f5dad75eb24a699f691088eb6ea3cc907aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3MmY1ZGFkNzVlYjI0YTY5OWY2OTEwODhlYjZlYTNjYzkwN2FmZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-01-06T21:44:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-06T21:44:21Z"}, "message": "pa.h (DONT_RECORD_EQUIVALENCE): Kill.\n\n        * pa.h (DONT_RECORD_EQUIVALENCE): Kill.\n        * local-alloc.c (update_equiv_regs): Corresponding changes.\n        * tm.texi (DONT_RECORD_EQUIVALENCE): Kill.\n\nFrom-SVN: r24541", "tree": {"sha": "54bfc1fe6771f19edc91548cfe23d42e3ec4848a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54bfc1fe6771f19edc91548cfe23d42e3ec4848a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f72f5dad75eb24a699f691088eb6ea3cc907aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f72f5dad75eb24a699f691088eb6ea3cc907aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f72f5dad75eb24a699f691088eb6ea3cc907aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f72f5dad75eb24a699f691088eb6ea3cc907aff/comments", "author": null, "committer": null, "parents": [{"sha": "fbd8fef444b20cf9d9ac9337b4132ff31f272507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd8fef444b20cf9d9ac9337b4132ff31f272507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd8fef444b20cf9d9ac9337b4132ff31f272507"}], "stats": {"total": 48, "additions": 6, "deletions": 42}, "files": [{"sha": "56a362c672ebb4db13ea30a2bb813e9d7220a159", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f72f5dad75eb24a699f691088eb6ea3cc907aff", "patch": "@@ -12,6 +12,10 @@ Wed Jan  6 17:55:19 1999  Robert Lipe  <robertlipe@usa.net>\n \n Wed Jan  6 16:08:54 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.h (DONT_RECORD_EQUIVALENCE): Kill.\n+\t* local-alloc.c (update_equiv_regs): Corresponding changes.\n+\t* tm.texi (DONT_RECORD_EQUIVALENCE): Kill.\n+\n \t* calls.c (special_function_p): Push alloca test inside the large\n \tconditional which excludes functions not at file scope or not\n \textern.  "}, {"sha": "a0f9ff00517020e5296b017b329edc4642949525", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4f72f5dad75eb24a699f691088eb6ea3cc907aff", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n-   Copyright (C) 1992, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n    Software Science at the University of Utah.\n@@ -810,20 +810,6 @@ int zdepi_cint_p ();\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n   (!TARGET_SNAKE && (CLASS) == FP_REGS ? 1 :\t\t\t\t\\\n    ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n-\n-/* We do not want to record equivalences for expressions which are\n-   likely to cause a spill of %r1 if they are used by reload.\n-\n-   Nor do we want to record an equivalence of a constant expression\n-   that the target can not handle appearing in an insn, but which\n-   also must be accepted by LEGITIMATE_CONSTANT_P.\n-\n-   On the PA, these two goals are the same -- don't record any equivalences\n-   for symbolic operands that are not read_only_operands.  */\n-#define DONT_RECORD_EQUIVALENCE(NOTE) \\\n-  (symbolic_operand (XEXP (NOTE, 0), VOIDmode) \\\n-   && !read_only_operand (XEXP (NOTE, 0), VOIDmode))\n-\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "0c7e2480eddc8aa637a197722d305f0881b60805", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=4f72f5dad75eb24a699f691088eb6ea3cc907aff", "patch": "@@ -796,22 +796,6 @@ update_equiv_regs ()\n \n       note = find_reg_note (insn, REG_EQUAL, NULL_RTX);\n \n-#ifdef DONT_RECORD_EQUIVALENCE\n-      /* Allow the target to reject promotions of some REG_EQUAL notes to\n-\t REG_EQUIV notes.\n-\n-\t In some cases this can improve register allocation if the existence\n-\t of the REG_EQUIV note is likely to increase the lifetime of a register\n-\t that is likely to be spilled.\n-\n-\t It may also be necessary if the target can't handle certain constant\n-\t expressions appearing randomly in insns, but for whatever reason\n-\t those expressions must be considered legitimate constant expressions\n-\t to prevent them from being forced into memory.  */\n-      if (note && DONT_RECORD_EQUIVALENCE (note))\n-        note = NULL;\n-#endif\n-\n       if (REG_N_SETS (regno) != 1\n \t  && (! note\n \t      || ! function_invariant_p (XEXP (note, 0))"}, {"sha": "f08cbf9574c4c35e2a815872ac306ea4e707a3f0", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f72f5dad75eb24a699f691088eb6ea3cc907aff/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=4f72f5dad75eb24a699f691088eb6ea3cc907aff", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,89,92,93,94,96,97,1998 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,89,92,93,94,96,97,98,1999 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -4389,16 +4389,6 @@ an immediate operand on the target machine.  You can assume that\n @var{x} satisfies @code{CONSTANT_P}, so you need not check this.  In fact,\n @samp{1} is a suitable definition for this macro on machines where\n anything @code{CONSTANT_P} is valid.@refill\n-\n-@findex DONT_RECORD_EQUIVALENCE\n-@item DONT_RECORD_EQUIVALENCE (@var{note})\n-A C expression that is nonzero if the @code{REG_EQUAL} note @var{x} should not\n-be promoted to a @code{REG_EQUIV} note.\n-\n-Define this macro if @var{note} refers to a constant that must be accepted\n-by @code{LEGITIMATE_CONSTANT_P}, but must not appear as an immediate operand.\n-\n-Most machine descriptions do not need to define this macro.\n @end table\n \n @node Condition Code"}]}