{"sha": "6d41cd02387ab457b69206742af9edb8977f725d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0MWNkMDIzODdhYjQ1N2I2OTIwNjc0MmFmOWVkYjg5NzdmNzI1ZA==", "commit": {"author": {"name": "Bingfeng Mei", "email": "bmei@broadcom.com", "date": "2010-06-28T10:39:38Z"}, "committer": {"name": "Bingfeng Mei", "email": "meibf@gcc.gnu.org", "date": "2010-06-28T10:39:38Z"}, "message": "cgraph.h (struct varpool_node): new used_from_object_file flag.\n\n2010-06-28  Bingfeng Mei <bmei@broadcom.com>\n\n        * cgraph.h (struct varpool_node): new used_from_object_file flag.\n        (struct cgraph_local_info): new used_from_object_file flag.\n        * cgraph.c (dump_cgraph_node): dump used_from_object_file flag.\n        (cgraph_clone_node): initialize used_from_object_file.\n        (cgraph_create_virtual_clone): initialize used_from_object_file.\n        * lto-symbtab.c (lto_symtab_merge_decls_1): Set\n        used_from_object_file flags for symbols of LDPR_PREVAILING_DEF\n        when compiling with -fwhole-program.\n        (lto_symtab_resolve_symbols) Use LDPR_PREVAILING_DEF_IRONLY for\n\tinternal resolver.\n        * ipa.c (function_and_variable_visibility): Set externally_visible\n        flag of varpool_node if used_from_object_file flag is set.\n        (cgraph_externally_visible_p): check used_from_object_file flag.\n        * doc/invoke.texi (-fwhole-program option): Change description of\n        externally_visible attribute accordingly.\n        * doc/extend.texi (externally_visible): Ditto.\n\nFrom-SVN: r161483", "tree": {"sha": "fcb4698113cc298ba8c467ab738e7c19bf245308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb4698113cc298ba8c467ab738e7c19bf245308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d41cd02387ab457b69206742af9edb8977f725d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d41cd02387ab457b69206742af9edb8977f725d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d41cd02387ab457b69206742af9edb8977f725d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d41cd02387ab457b69206742af9edb8977f725d/comments", "author": null, "committer": null, "parents": [{"sha": "7802ca7cfd7f45af71b05ae3857be516d9a9d558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7802ca7cfd7f45af71b05ae3857be516d9a9d558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7802ca7cfd7f45af71b05ae3857be516d9a9d558"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "fef5c987ba25393a9e2d177e1fda88a377fc934b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -1,3 +1,22 @@\n+2010-06-28  Bingfeng Mei <bmei@broadcom.com>\n+\n+        * cgraph.h (struct varpool_node): new used_from_object_file flag.\n+        (struct cgraph_local_info): new used_from_object_file flag.\n+        * cgraph.c (dump_cgraph_node): dump used_from_object_file flag.\n+        (cgraph_clone_node): initialize used_from_object_file.\n+        (cgraph_create_virtual_clone): initialize used_from_object_file.\n+        * lto-symbtab.c (lto_symtab_merge_decls_1): Set\n+        used_from_object_file flags for symbols of LDPR_PREVAILING_DEF\n+        when compiling with -fwhole-program.\n+        (lto_symtab_resolve_symbols) Use LDPR_PREVAILING_DEF_IRONLY for\n+\tinternal resolver.\n+        * ipa.c (function_and_variable_visibility): Set externally_visible\n+        flag of varpool_node if used_from_object_file flag is set.\n+        (cgraph_externally_visible_p): check used_from_object_file flag.\n+        * doc/invoke.texi (-fwhole-program option): Change description of\n+        externally_visible attribute accordingly.\n+        * doc/extend.texi (externally_visible): Ditto.\n+\n 2010-06-27  Jan Hubicka  <jh@suse.cz>\n \n \t* params.def (max-inline-insns-auto): Default to 40."}, {"sha": "b63bf314a1290a9e9cd12999e8364252a3adc6be", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -1825,6 +1825,8 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     fprintf (f, \" local\");\n   if (node->local.externally_visible)\n     fprintf (f, \" externally_visible\");\n+  if (node->local.used_from_object_file)\n+    fprintf (f, \" used_from_object_file\");\n   if (node->local.finalized)\n     fprintf (f, \" finalized\");\n   if (node->local.disregard_inline_limits)\n@@ -2075,6 +2077,7 @@ cgraph_clone_node (struct cgraph_node *n, tree decl, gcov_type count, int freq,\n   new_node->analyzed = n->analyzed;\n   new_node->local = n->local;\n   new_node->local.externally_visible = false;\n+  new_node->local.used_from_object_file = false;\n   new_node->local.local = true;\n   new_node->local.vtable_method = false;\n   new_node->global = n->global;\n@@ -2266,6 +2269,7 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n   else\n     new_node->clone.combined_args_to_skip = args_to_skip;\n   new_node->local.externally_visible = 0;\n+  new_node->local.used_from_object_file = 0;\n   new_node->local.local = 1;\n   new_node->lowered = true;\n   new_node->reachable = true;"}, {"sha": "ef556b9cd7faad46a5b944635aaa43581f9c8907", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -102,6 +102,9 @@ struct GTY(()) cgraph_local_info {\n   /* Set when function is visible by other units.  */\n   unsigned externally_visible : 1;\n \n+  /* Set when resolver determines that function is visible by other units.  */\n+  unsigned used_from_object_file : 1;\n+  \n   /* Set once it has been finalized so we consider it to be output.  */\n   unsigned finalized : 1;\n \n@@ -487,6 +490,8 @@ struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) varpool_node {\n   unsigned output : 1;\n   /* Set when function is visible by other units.  */\n   unsigned externally_visible : 1;\n+  /* Set when resolver determines that variable is visible by other units.  */\n+  unsigned used_from_object_file : 1;\n   /* Set for aliases once they got through assemble_alias.  Also set for\n      extra name aliases in varpool_extra_name_alias.  */\n   unsigned alias : 1;"}, {"sha": "b967e798b32076d8c7fe42bd52c83c1d638e559a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -2296,7 +2296,7 @@ attribute is present.\n @cindex @code{externally_visible} attribute.\n This attribute, attached to a global variable or function, nullifies\n the effect of the @option{-fwhole-program} command-line option, so the\n-object remains visible outside the current compilation unit.\n+object remains visible outside the current compilation unit. If @option{-fwhole-program} is used together with @option{-flto} and @command{gold} is used as the linker plugin, @code{externally_visible} attributes are automatically added to functions (not variable yet due to a current @command{gold} issue) that are accessed outside of LTO objects according to resolution file produced by @command{gold}.  For other linkers that cannot generate resolution file, explicit @code{externally_visible} attributes are still necessary.\n \n @item far\n @cindex functions which handle memory bank switching"}, {"sha": "48716c5283ebe22444579336871538761d3eb055", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -7310,7 +7310,7 @@ Enabled by default with @option{-funroll-loops}.\n Assume that the current compilation unit represents the whole program being\n compiled.  All public functions and variables with the exception of @code{main}\n and those merged by attribute @code{externally_visible} become static functions\n-and in effect are optimized more aggressively by interprocedural optimizers.\n+and in effect are optimized more aggressively by interprocedural optimizers. If @command{gold} is used as the linker plugin, @code{externally_visible} attributes are automatically added to functions (not variable yet due to a current @command{gold} issue) that are accessed outside of LTO objects according to resolution file produced by @command{gold}.  For other linkers that cannot generate resolution file, explicit @code{externally_visible} attributes are still necessary.\n While this option is equivalent to proper use of the @code{static} keyword for\n programs consisting of a single file, in combination with option\n @option{-combine}, @option{-flto} or @option{-fwhopr} this flag can be used to"}, {"sha": "05e164271dbfb7f0690fa90f3045b4252867d3b0", "filename": "gcc/ipa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -576,6 +576,8 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program)\n     return false;\n   if (!whole_program)\n     return true;\n+  if (node->local.used_from_object_file)\n+    return true;\n   if (DECL_PRESERVE_P (node->decl))\n     return true;\n   /* COMDAT functions must be shared only if they have address taken,\n@@ -729,6 +731,7 @@ function_and_variable_visibility (bool whole_program)\n \t         we start reordering datastructures.  */\n \t      || DECL_COMDAT (vnode->decl)\n \t      || DECL_WEAK (vnode->decl)\n+              || vnode->used_from_object_file\n \t      || lookup_attribute (\"externally_visible\",\n \t\t\t\t   DECL_ATTRIBUTES (vnode->decl))))\n \tvnode->externally_visible = true;"}, {"sha": "e94bc204b223dae3a7fc764ea3088110f718808c", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d41cd02387ab457b69206742af9edb8977f725d/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=6d41cd02387ab457b69206742af9edb8977f725d", "patch": "@@ -530,11 +530,20 @@ lto_symtab_resolve_symbols (void **slot)\n     return;\n \n found:\n-  if (TREE_CODE (prevailing->decl) == VAR_DECL\n-      && TREE_READONLY (prevailing->decl))\n+  /* If current lto files represent the whole program,\n+    it is correct to use LDPR_PREVALING_DEF_IRONLY.\n+    If current lto files are part of whole program, internal\n+    resolver doesn't know if it is LDPR_PREVAILING_DEF\n+    or LDPR_PREVAILING_DEF_IRONLY.  Use IRONLY conforms to\n+    using -fwhole-program.  Otherwise, it doesn't\n+    matter using either LDPR_PREVAILING_DEF or\n+    LDPR_PREVAILING_DEF_IRONLY\n+    \n+    FIXME: above workaround due to gold plugin makes some\n+    variables IRONLY, which are indeed PREVAILING_DEF in\n+    resolution file.  These variables still need manual\n+    externally_visible attribute.  */\n     prevailing->resolution = LDPR_PREVAILING_DEF_IRONLY;\n-  else\n-    prevailing->resolution = LDPR_PREVAILING_DEF;\n }\n \n /* Merge all decls in the symbol table chain to the prevailing decl and\n@@ -698,6 +707,24 @@ lto_symtab_merge_decls_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n       && TREE_CODE (prevailing->decl) != VAR_DECL)\n     prevailing->next = NULL;\n \n+  /* Set externally_visible flags for declaration of LDPR_PREVAILING_DEF */\n+  if (flag_whole_program)\n+    {\n+      if (prevailing->resolution == LDPR_PREVAILING_DEF)\n+        {\n+          if (TREE_CODE (prevailing->decl) == FUNCTION_DECL)\n+            prevailing->node->local.used_from_object_file = true;\n+          else\n+            prevailing->vnode->used_from_object_file = true;\n+        }\n+      else if (prevailing->resolution == LDPR_PREVAILING_DEF_IRONLY)\n+        {\n+          if (TREE_CODE (prevailing->decl) == FUNCTION_DECL)\n+            prevailing->node->local.used_from_object_file = false;\n+          else\n+            prevailing->vnode->used_from_object_file = false;\n+        }\n+    }\n   return 1;\n }\n "}]}