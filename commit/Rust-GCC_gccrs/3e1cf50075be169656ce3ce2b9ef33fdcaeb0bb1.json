{"sha": "3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxY2Y1MDA3NWJlMTY5NjU2Y2UzY2UyYjllZjMzZmRjYWViMGJiMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-19T15:24:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-19T15:24:26Z"}, "message": "re PR fortran/25054 (nonconstant bounds array cannot appear in a namelist)\n\n2005-02-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25054\n\t* resolve.c (is_non_constant_shape_array): New function.\n\t(resolve_fl_variable): Remove code for the new function and call it.\n\t(resolve_fl_namelist): New function.  Add test for namelist array\n\twith non-constant shape, using is_non_constant_shape_array.\n\t(resolve_symbol): Remove code for resolve_fl_namelist and call it.\n\n\tPR fortran/25089\n\t* match.c (match_namelist): Increment the refs field of an accepted\n\tnamelist object symbol.\n\t* resolve.c (resolve_fl_namelist): Test namelist objects for a conflict\n\twith contained or module procedures.\n\n2005-02-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25054\n\t* gfortran.dg/namelist_5.f90: New test.\n\n\tPR fortran/25089\n\t* gfortran.dg/namelist_4.f90: New test.\n\nFrom-SVN: r111268", "tree": {"sha": "7e6b3bd04608f088a0f80dc2b3cc893f1bca8e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6b3bd04608f088a0f80dc2b3cc893f1bca8e49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/comments", "author": null, "committer": null, "parents": [{"sha": "c05f6d04cb428c8b4e443797b280cae8f005149d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05f6d04cb428c8b4e443797b280cae8f005149d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05f6d04cb428c8b4e443797b280cae8f005149d"}], "stats": {"total": 218, "additions": 169, "deletions": 49}, "files": [{"sha": "5486c8eb78acd58a2d38645dff02b7f80cdb9423", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -1,3 +1,18 @@\n+2005-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25054\n+\t* resolve.c (is_non_constant_shape_array): New function.\n+\t(resolve_fl_variable): Remove code for the new function and call it.\n+\t(resolve_fl_namelist): New function.  Add test for namelist array\n+\twith non-constant shape, using is_non_constant_shape_array.\n+\t(resolve_symbol): Remove code for resolve_fl_namelist and call it.\n+\n+\tPR fortran/25089\n+\t* match.c (match_namelist): Increment the refs field of an accepted\n+\tnamelist object symbol.\n+\t* resolve.c (resolve_fl_namelist): Test namelist objects for a conflict\n+\twith contained or module procedures.\n+\n 2006-02-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-stmt.c (struct temporary_list): Delete."}, {"sha": "4c2fe1b71ce430b7915ea956eeefdcf2ab6f6935", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -2589,6 +2589,7 @@ gfc_match_namelist (void)\n \n \t  nl = gfc_get_namelist ();\n \t  nl->sym = sym;\n+\t  sym->refs++;\n \n \t  if (group_name->namelist == NULL)\n \t    group_name->namelist = group_name->namelist_tail = nl;"}, {"sha": "63b2cd9904d0027cce1239079d13a128eedc26bf", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 93, "deletions": 49, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -4598,6 +4598,35 @@ resolve_charlen (gfc_charlen *cl)\n }\n \n \n+/* Test for non-constant shape arrays. */\n+\n+static bool\n+is_non_constant_shape_array (gfc_symbol *sym)\n+{\n+  gfc_expr *e;\n+  int i;\n+\n+  if (sym->as != NULL)\n+    {\n+      /* Unfortunately, !gfc_is_compile_time_shape hits a legal case that\n+\t has not been simplified; parameter array references.  Do the\n+\t simplification now.  */\n+      for (i = 0; i < sym->as->rank; i++)\n+\t{\n+\t  e = sym->as->lower[i];\n+\t  if (e && (resolve_index_expr (e) == FAILURE\n+\t\t|| !gfc_is_constant_expr (e)))\n+\t    return true;\n+\n+\t  e = sym->as->upper[i];\n+\t  if (e && (resolve_index_expr (e) == FAILURE\n+\t\t|| !gfc_is_constant_expr (e)))\n+\t    return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Resolution of common features of flavors variable and procedure. */\n \n static try\n@@ -4652,43 +4681,17 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n     return FAILURE;\n \n   /* The shape of a main program or module array needs to be constant.  */\n-  if (sym->as != NULL\n-\t&& sym->ns->proc_name\n+  if (sym->ns->proc_name\n \t&& (sym->ns->proc_name->attr.flavor == FL_MODULE\n \t     || sym->ns->proc_name->attr.is_main_program)\n \t&& !sym->attr.use_assoc\n \t&& !sym->attr.allocatable\n-\t&& !sym->attr.pointer)\n+\t&& !sym->attr.pointer\n+\t&& is_non_constant_shape_array (sym))\n     {\n-      /* Unfortunately, !gfc_is_compile_time_shape hits a legal case that\n-\t has not been simplified; parameter array references.  Do the\n-\t simplification now.  */\n-      flag = 0;\n-      for (i = 0; i < sym->as->rank; i++)\n-\t{\n-\t  e = sym->as->lower[i];\n-\t  if (e && (resolve_index_expr (e) == FAILURE\n-\t\t|| !gfc_is_constant_expr (e)))\n-\t    {\n-\t      flag = 1;\n-\t      break;\n-\t    }\n-\n-\t  e = sym->as->upper[i];\n-\t  if (e && (resolve_index_expr (e) == FAILURE\n-\t\t|| !gfc_is_constant_expr (e)))\n-\t    {\n-\t      flag = 1;\n-\t      break;\n-\t    }\n-\t}\n-\n-      if (flag)\n-\t{\n-\t  gfc_error (\"The module or main program array '%s' at %L must \"\n+       gfc_error (\"The module or main program array '%s' at %L must \"\n \t\t     \"have constant shape\", sym->name, &sym->declared_at);\n \t  return FAILURE;\n-\t}\n     }\n \n   if (sym->ts.type == BT_CHARACTER)\n@@ -4960,6 +4963,64 @@ resolve_fl_derived (gfc_symbol *sym)\n }\n \n \n+static try\n+resolve_fl_namelist (gfc_symbol *sym)\n+{\n+  gfc_namelist *nl;\n+  gfc_symbol *nlsym;\n+\n+  /* Reject PRIVATE objects in a PUBLIC namelist.  */\n+  if (gfc_check_access(sym->attr.access, sym->ns->default_access))\n+    {\n+      for (nl = sym->namelist; nl; nl = nl->next)\n+\t{\n+\t  if (!nl->sym->attr.use_assoc\n+\t\t&& !(sym->ns->parent == nl->sym->ns)\n+\t\t       && !gfc_check_access(nl->sym->attr.access,\n+\t\t\t\t\t    nl->sym->ns->default_access))\n+\t    {\n+\t      gfc_error (\"PRIVATE symbol '%s' cannot be member of \"\n+\t\t\t \"PUBLIC namelist at %L\", nl->sym->name,\n+\t\t\t &sym->declared_at);\n+\t      return FAILURE;\n+\t    }\n+\t}\n+    }\n+\n+    /* Reject namelist arrays that are not constant shape.  */\n+    for (nl = sym->namelist; nl; nl = nl->next)\n+      {\n+\tif (is_non_constant_shape_array (nl->sym))\n+\t  {\n+\t    gfc_error (\"The array '%s' must have constant shape to be \"\n+\t\t       \"a NAMELIST object at %L\", nl->sym->name,\n+\t\t       &sym->declared_at);\n+\t    return FAILURE;\n+\t  }\n+    }\n+\n+  /* 14.1.2 A module or internal procedure represent local entities\n+     of the same type as a namelist member and so are not allowed.\n+     Note that this is sometimes caught by check_conflict so the\n+     same message has been used.  */\n+  for (nl = sym->namelist; nl; nl = nl->next)\n+    {\n+      nlsym = NULL;\n+\tif (sym->ns->parent && nl->sym && nl->sym->name)\n+\t  gfc_find_symbol (nl->sym->name, sym->ns->parent, 0, &nlsym);\n+\tif (nlsym && nlsym->attr.flavor == FL_PROCEDURE)\n+\t  {\n+\t    gfc_error (\"PROCEDURE attribute conflicts with NAMELIST \"\n+\t\t       \"attribute in '%s' at %L\", nlsym->name,\n+\t\t       &sym->declared_at);\n+\t    return FAILURE;\n+\t  }\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n static try\n resolve_fl_parameter (gfc_symbol *sym)\n {\n@@ -5007,7 +5068,6 @@ resolve_symbol (gfc_symbol * sym)\n   /* Zero if we are checking a formal namespace.  */\n   static int formal_ns_flag = 1;\n   int formal_ns_save, check_constant, mp_flag;\n-  gfc_namelist *nl;\n   gfc_symtree *symtree;\n   gfc_symtree *this_symtree;\n   gfc_namespace *ns;\n@@ -5162,23 +5222,8 @@ resolve_symbol (gfc_symbol * sym)\n       break;\n \n     case FL_NAMELIST:\n-      /* Reject PRIVATE objects in a PUBLIC namelist.  */\n-      if (gfc_check_access(sym->attr.access, sym->ns->default_access))\n-\t{\n-\t  for (nl = sym->namelist; nl; nl = nl->next)\n-\t    {\n-\t      if (!nl->sym->attr.use_assoc\n-\t\t    &&\n-\t\t  !(sym->ns->parent == nl->sym->ns)\n-\t\t    &&\n-\t\t  !gfc_check_access(nl->sym->attr.access,\n-\t\t\t\t    nl->sym->ns->default_access))\n-\t\tgfc_error (\"PRIVATE symbol '%s' cannot be member of \"\n-\t\t\t   \"PUBLIC namelist at %L\", nl->sym->name,\n-\t\t\t   &sym->declared_at);\n-\t    }\n-\t}\n-\n+      if (resolve_fl_namelist (sym) == FAILURE)\n+\treturn;\n       break;\n \n     case FL_PARAMETER:\n@@ -5192,7 +5237,6 @@ resolve_symbol (gfc_symbol * sym)\n       break;\n     }\n \n-\n   /* Make sure that intrinsic exist */\n   if (sym->attr.intrinsic\n       && ! gfc_intrinsic_name(sym->name, 0)"}, {"sha": "6cca5da64c6dca4a63451fac692cf33291762d52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -1,3 +1,11 @@\n+2005-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25054\n+\t* gfortran.dg/namelist_5.f90: New test.\n+\n+\tPR fortran/25089\n+\t* gfortran.dg/namelist_4.f90: New test.\n+\n 2006-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n         PR tree-opt/25680"}, {"sha": "0e1b0eef51faf48f2064bf35058e5a17ef008d86", "filename": "gcc/testsuite/gfortran.dg/namelist_4.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_4.f90?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\r\n+! This tests the fix for PR25089 in which it was noted that a\r\n+! NAMELIST member that is an internal(or module) procedure gave\r\n+! no error if the NAMELIST declaration appeared before the\r\n+! procedure declaration. Not mentioned in the PR is that any\r\n+! reference to the NAMELIST object would cause a segfault.\r\n+!\r\n+! Based on the contribution from Joost VanderVondele\r\n+!\r\n+module M1\r\n+CONTAINS\r\n+! This is the original PR\r\n+  INTEGER FUNCTION G1()\r\n+    NAMELIST /NML1/ G2 ! { dg-error \"PROCEDURE attribute conflicts\" }\r\n+    G1=1\r\n+  END FUNCTION\r\n+  INTEGER FUNCTION G2()\r\n+    G2=1\r\n+  END FUNCTION\r\n+! This has always been picked up - namelist after function\r\n+  INTEGER FUNCTION G3()\r\n+    NAMELIST /NML2/ G1 ! { dg-error \"PROCEDURE attribute conflicts\" }\r\n+    G3=1\r\n+  END FUNCTION\r\n+END module M1\r\n+ \n+program P1\r\n+CONTAINS\r\n+! This has the additional wrinkle of a reference to the object.\r\n+  INTEGER FUNCTION F1()\r\n+    NAMELIST /NML3/ F2 ! { dg-error \"PROCEDURE attribute conflicts\" }\r\n+    f2 = 1     ! Used to ICE here\r\n+    F1=1\r\n+  END FUNCTION\r\n+  INTEGER FUNCTION F2()\r\n+    F2=1\r\n+  END FUNCTION\r\n+END\n+\r"}, {"sha": "401302dd5dd133105058b13f760fcb28a19a8fd2", "filename": "gcc/testsuite/gfortran.dg/namelist_5.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_5.f90?ref=3e1cf50075be169656ce3ce2b9ef33fdcaeb0bb1", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! Tests the fix for PR25054 in which namelist objects with non-constant\n+! shape were allowed.\n+!\n+! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n+!\n+SUBROUTINE S1(I)\n+ integer :: a,b(I)\n+ NAMELIST /NLIST/ a,b ! { dg-error \"must have constant shape to be a NAMELIST object\" }\n+ a=1 ; b=2\n+ write(6,NML=NLIST)\n+END SUBROUTINE S1\n+END\n\\ No newline at end of file"}]}