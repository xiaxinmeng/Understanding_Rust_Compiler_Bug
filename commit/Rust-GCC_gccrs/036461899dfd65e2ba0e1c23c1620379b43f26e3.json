{"sha": "036461899dfd65e2ba0e1c23c1620379b43f26e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2NDYxODk5ZGZkNjVlMmJhMGUxYzIzYzE2MjAzNzliNDNmMjZlMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:17:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:17:58Z"}, "message": "(typedef tree_node_kind):  Added new kind, i.e. `b_kind'.\n\n(tree_node_kind_names):  Added name for `b_kind'.\n(make_node, copy_node, stabilize_reference_1):\nHandle case 'b' (for BLOCK nodes).\n(make_node):  Don't try to deal with BLOCKs when doing a type 'e' node.\n\nFrom-SVN: r1603", "tree": {"sha": "03529a6de217df1b811729e4405d124232c1586a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03529a6de217df1b811729e4405d124232c1586a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036461899dfd65e2ba0e1c23c1620379b43f26e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036461899dfd65e2ba0e1c23c1620379b43f26e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036461899dfd65e2ba0e1c23c1620379b43f26e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036461899dfd65e2ba0e1c23c1620379b43f26e3/comments", "author": null, "committer": null, "parents": [{"sha": "61131fa200ffcfeab327174b8dfcac4116906d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61131fa200ffcfeab327174b8dfcac4116906d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61131fa200ffcfeab327174b8dfcac4116906d6f"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "270705a3e0f9c81a6e34ace8a63d2025d00bcc5b", "filename": "gcc/tree.c", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036461899dfd65e2ba0e1c23c1620379b43f26e3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036461899dfd65e2ba0e1c23c1620379b43f26e3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=036461899dfd65e2ba0e1c23c1620379b43f26e3", "patch": "@@ -195,16 +195,45 @@ char **tree_code_name;\n /* Statistics-gathering stuff.  */\n typedef enum\n {\n-  d_kind, t_kind, s_kind, r_kind, e_kind, c_kind,\n-  id_kind, op_id_kind, perm_list_kind, temp_list_kind,\n-  vec_kind, x_kind, lang_decl, lang_type, all_kinds\n+  d_kind,\n+  t_kind,\n+  b_kind,\n+  s_kind,\n+  r_kind,\n+  e_kind,\n+  c_kind,\n+  id_kind,\n+  op_id_kind,\n+  perm_list_kind,\n+  temp_list_kind,\n+  vec_kind,\n+  x_kind,\n+  lang_decl,\n+  lang_type,\n+  all_kinds\n } tree_node_kind;\n+\n int tree_node_counts[(int)all_kinds];\n int tree_node_sizes[(int)all_kinds];\n int id_string_size = 0;\n-char *tree_node_kind_names[] = { \"decls\", \"types\", \"stmts\", \"refs\", \"exprs\", \"constants\",\n-\t\t\t\t \"identifiers\", \"op_identifiers\", \"perm_tree_lists\", \"temp_tree_lists\",\n-\t\t\t\t \"vecs\", \"random kinds\", \"lang_decl kinds\", \"lang_type kinds\" };\n+\n+char *tree_node_kind_names[] = {\n+  \"decls\",\n+  \"types\",\n+  \"blocks\",\n+  \"stmts\",\n+  \"refs\",\n+  \"exprs\",\n+  \"constants\",\n+  \"identifiers\",\n+  \"op_identifiers\",\n+  \"perm_tree_lists\",\n+  \"temp_tree_lists\",\n+  \"vecs\",\n+  \"random kinds\",\n+  \"lang_decl kinds\",\n+  \"lang_type kinds\"\n+};\n \n /* Hash table for uniquizing IDENTIFIER_NODEs by name.  */\n \n@@ -774,6 +803,16 @@ make_node (code)\n \tobstack = all_types_permanent ? &permanent_obstack : saveable_obstack;\n       break;\n \n+    case 'b':  /* a lexical block */\n+#ifdef GATHER_STATISTICS\n+      kind = b_kind;\n+#endif\n+      length = sizeof (struct tree_block);\n+      /* All BLOCK nodes are put where we can preserve them if nec.  */\n+      if (obstack != &permanent_obstack)\n+\tobstack = saveable_obstack;\n+      break;\n+\n     case 's':  /* an expression with side effects */\n #ifdef GATHER_STATISTICS\n       kind = s_kind;\n@@ -793,10 +832,8 @@ make_node (code)\n     usual_kind:\n #endif\n       obstack = expression_obstack;\n-      /* All BLOCK nodes are put where we can preserve them if nec.\n-\t Also their potential controllers.  */\n-      if ((code == BLOCK || code == BIND_EXPR)\n-\t  && obstack != &permanent_obstack)\n+      /* All BIND_EXPR nodes are put where we can preserve them if nec.  */\n+      if (code == BIND_EXPR && obstack != &permanent_obstack)\n \tobstack = saveable_obstack;\n       length = sizeof (struct tree_exp)\n \t+ (tree_code_length[(int) code] - 1) * sizeof (char *);\n@@ -907,6 +944,10 @@ copy_node (node)\n       length = sizeof (struct tree_type);\n       break;\n \n+    case 'b':  /* a lexical block node */\n+      length = sizeof (struct tree_block);\n+      break;\n+\n     case 'r':  /* a reference */\n     case 'e':  /* a expression */\n     case 's':  /* an expression with side effects */\n@@ -1861,6 +1902,7 @@ stabilize_reference_1 (e)\n     case 'x':\n     case 't':\n     case 'd':\n+    case 'b':\n     case '<':\n     case 's':\n     case 'e':"}]}