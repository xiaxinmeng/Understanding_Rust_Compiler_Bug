{"sha": "eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "node_id": "C_kwDOANBUbNoAKGViMDMyODkzNjc1YWZlYTRiMDFjYzZhZDA2YTNlMGRjZmU5YjUxY2Q", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T08:31:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T10:57:43Z"}, "message": "tree-optimization/102788 - avoid spurious bool pattern fails\n\nBool pattern recog is required for correctness since vectorized\ncompares otherwise produce -1 for true so any context where bool\nis used as value and not as condition or mask needs to be replaced\nwith CMP ? 1 : 0.  When we fail to find a vector type for the\nresult of such use we may not simply elide such transform since\na new bool result can emerge when for example the cast_forwprop\npattern is applied.  So the following avoids failing of the\nbool pattern recog process and instead not assign a vector type\nfor the stmt.\n\n2021-10-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102788\n\t* tree-vect-patterns.c (vect_init_pattern_stmt): Allow\n\ta NULL vectype.\n\t(vect_pattern_recog_1): Likewise.\n\t(vect_recog_bool_pattern): Continue matching the pattern\n\teven if we do not have a vector type for a conversion\n\tresult.\n\n\t* g++.dg/vect/pr102788.cc: New testcase.", "tree": {"sha": "1f0472932123b61a267eda11ecd9125fd0573497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0472932123b61a267eda11ecd9125fd0573497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94dff03f67fad1f9c526bb915bb21a4deb19d638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dff03f67fad1f9c526bb915bb21a4deb19d638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94dff03f67fad1f9c526bb915bb21a4deb19d638"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "fa9c366fe565e460af6150e88594ef7355cd0851", "filename": "gcc/testsuite/g++.dg/vect/pr102788.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102788.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102788.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102788.cc?ref=eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run }\n+// { dg-additional-options \"-O3\" }\n+\n+unsigned long long int var_4 = 235;\n+unsigned long long int var_5 = 74;\n+signed char var_12 = -99;\n+unsigned long long int var_349;\n+unsigned char var_645;\n+void test();\n+\n+const unsigned long long &min(const unsigned long long &a,\n+\t\t\t      const unsigned long long &b)\n+{\n+  return b < a ? b : a;\n+}\n+\n+void __attribute__((noipa)) test()\n+{\n+  for (short c = var_12; c; c += 5)\n+    ;\n+  for (int e = 0; e < 12; e += 1) {\n+      var_349 = var_4 ? 235 : 74;\n+      var_645 = min((unsigned long long)true, var_5 ? var_12 : var_4);\n+  }\n+}\n+\n+int main()\n+{\n+  test();\n+  if (var_645 != 1)\n+    __builtin_abort();\n+}"}, {"sha": "854cbcff390e215a5ea384cd50d965f3890a81d8", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb032893675afea4b01cc6ad06a3e0dcfe9b51cd/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=eb032893675afea4b01cc6ad06a3e0dcfe9b51cd", "patch": "@@ -119,8 +119,9 @@ vect_init_pattern_stmt (vec_info *vinfo, gimple *pattern_stmt,\n     = STMT_VINFO_DEF_TYPE (orig_stmt_info);\n   if (!STMT_VINFO_VECTYPE (pattern_stmt_info))\n     {\n-      gcc_assert (VECTOR_BOOLEAN_TYPE_P (vectype)\n-\t\t  == vect_use_mask_type_p (orig_stmt_info));\n+      gcc_assert (!vectype\n+\t\t  || (VECTOR_BOOLEAN_TYPE_P (vectype)\n+\t\t      == vect_use_mask_type_p (orig_stmt_info)));\n       STMT_VINFO_VECTYPE (pattern_stmt_info) = vectype;\n       pattern_stmt_info->mask_precision = orig_stmt_info->mask_precision;\n     }\n@@ -4283,8 +4284,6 @@ vect_recog_bool_pattern (vec_info *vinfo,\n \t  || VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (lhs)))\n \treturn NULL;\n       vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (lhs));\n-      if (vectype == NULL_TREE)\n-\treturn NULL;\n \n       if (check_bool_pattern (var, vinfo, bool_stmts))\n \t{\n@@ -5696,7 +5695,6 @@ vect_pattern_recog_1 (vec_info *vinfo,\n     }\n \n   loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n-  gcc_assert (pattern_vectype);\n  \n   /* Found a vectorizable pattern.  */\n   if (dump_enabled_p ())"}]}