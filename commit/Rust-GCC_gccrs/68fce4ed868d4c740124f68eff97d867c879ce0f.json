{"sha": "68fce4ed868d4c740124f68eff97d867c879ce0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmY2U0ZWQ4NjhkNGM3NDAxMjRmNjhlZmY5N2Q4NjdjODc5Y2UwZg==", "commit": {"author": {"name": "Giuseppe Scrivano", "email": "gscrivano@gnu.org", "date": "2010-09-05T23:39:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-05T23:39:12Z"}, "message": "tree-tailcall.c (process_assignment): Handle NEGATE_EXPR and MINUS_EXPR.\n\ngcc/\n2010-09-05  Giuseppe Scrivano  <gscrivano@gnu.org>\n\n\t* tree-tailcall.c (process_assignment): Handle NEGATE_EXPR and\n\tMINUS_EXPR.\n\ngcc/testsuite/\n2010-09-05  Giuseppe Scrivano  <gscrivano@gnu.org>\n\n\t* gcc.dg/tree-ssa/tailrecursion-7.c: New file.\n\nFrom-SVN: r163888", "tree": {"sha": "b03be65954ece9593296959f7ff1f397f3dc89f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03be65954ece9593296959f7ff1f397f3dc89f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68fce4ed868d4c740124f68eff97d867c879ce0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fce4ed868d4c740124f68eff97d867c879ce0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68fce4ed868d4c740124f68eff97d867c879ce0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fce4ed868d4c740124f68eff97d867c879ce0f/comments", "author": {"login": "giuseppe", "id": 67430, "node_id": "MDQ6VXNlcjY3NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/67430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giuseppe", "html_url": "https://github.com/giuseppe", "followers_url": "https://api.github.com/users/giuseppe/followers", "following_url": "https://api.github.com/users/giuseppe/following{/other_user}", "gists_url": "https://api.github.com/users/giuseppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/giuseppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giuseppe/subscriptions", "organizations_url": "https://api.github.com/users/giuseppe/orgs", "repos_url": "https://api.github.com/users/giuseppe/repos", "events_url": "https://api.github.com/users/giuseppe/events{/privacy}", "received_events_url": "https://api.github.com/users/giuseppe/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28cc1e9a8a81cfca5c7dd193bd45a95acbcb2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cc1e9a8a81cfca5c7dd193bd45a95acbcb2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28cc1e9a8a81cfca5c7dd193bd45a95acbcb2b6b"}], "stats": {"total": 114, "additions": 94, "deletions": 20}, "files": [{"sha": "141063e25aded637f8fcd4bdaa1cc3a162d753e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68fce4ed868d4c740124f68eff97d867c879ce0f", "patch": "@@ -1,3 +1,8 @@\n+2010-09-05  Giuseppe Scrivano  <gscrivano@gnu.org>\n+\n+\t* tree-tailcall.c (process_assignment): Handle NEGATE_EXPR and\n+\tMINUS_EXPR.\n+\n 2010-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/invoke.texi: Document -Wdouble-promotion.\n@@ -19,7 +24,7 @@\n \n \t* config/sh/sh.c (sh_option_override): Make static.\n \tAdjust comments.  Declare.\n-\t(sh_function_value_regno_p): Likewise. \n+\t(sh_function_value_regno_p): Likewise.\n \t(sh_register_move_cost): Modify the arguments, make static.\n \tAdjust comments.  Declare.\n \t(TARGET_OPTION_OVERRIDE, TARGET_REGISTER_MOVE_COST"}, {"sha": "d72be505c1c305b297c1ef52c4a2c8c7930972aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68fce4ed868d4c740124f68eff97d867c879ce0f", "patch": "@@ -1,3 +1,7 @@\n+2010-09-05  Giuseppe Scrivano  <gscrivano@gnu.org>\n+\n+\t* gcc.dg/tree-ssa/tailrecursion-7.c: New file.\n+\n 2010-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/Wdouble-promotion.c: New."}, {"sha": "875a6aa7887aa74b7c2a83d9ad4251b4d8a95e1b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/tailrecursion-7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ftailrecursion-7.c?ref=68fce4ed868d4c740124f68eff97d867c879ce0f", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -foptimize-sibling-calls -fdump-tree-optimized\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int foo (int n)\n+{\n+  return n == 0 ? 1 : n * (n - foo (n - 1));\n+}\n+\n+int bar (int n)\n+{\n+  return n == 0 ? 1 : n * (- bar (n - 1));\n+}\n+\n+int baz (int n, int m)\n+{\n+  return n == 0 ? 100 : (baz (n - 1, m) - m);\n+}\n+\n+int main (void)\n+{\n+  if (foo (6) != 726)\n+    abort ();\n+\n+  if (bar (7) != -5040)\n+    abort ();\n+\n+  if (baz (10, 5) != 50)\n+    abort ();\n+\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\mfoo\\\\M\" 4 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\mbar\\\\M\" 4 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\mbaz\\\\M\" 4 \"optimized\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "71a273f6fe5ca7b4f3070ec5c39008555cee81f1", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fce4ed868d4c740124f68eff97d867c879ce0f/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=68fce4ed868d4c740124f68eff97d867c879ce0f", "patch": "@@ -252,7 +252,7 @@ static bool\n process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n \t\t    tree *a, tree *ass_var)\n {\n-  tree op0, op1, non_ass_var;\n+  tree op0, op1 = NULL_TREE, non_ass_var = NULL_TREE;\n   tree dest = gimple_assign_lhs (stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   enum gimple_rhs_class rhs_class = get_gimple_rhs_class (code);\n@@ -278,8 +278,20 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n       return true;\n     }\n \n-  if (rhs_class != GIMPLE_BINARY_RHS)\n-    return false;\n+  switch (rhs_class)\n+    {\n+    case GIMPLE_BINARY_RHS:\n+      op1 = gimple_assign_rhs2 (stmt);\n+\n+      /* Fall through.  */\n+\n+    case GIMPLE_UNARY_RHS:\n+      op0 = gimple_assign_rhs1 (stmt);\n+      break;\n+\n+    default:\n+      return false;\n+    }\n \n   /* Accumulator optimizations will reverse the order of operations.\n      We can only do that for floating-point types if we're assuming\n@@ -288,20 +300,9 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n     if (FLOAT_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl))))\n       return false;\n \n-  /* We only handle the code like\n-\n-     x = call ();\n-     y = m * x;\n-     z = y + a;\n-     return z;\n-\n-     TODO -- Extend it for cases where the linear transformation of the output\n-     is expressed in a more complicated way.  */\n-\n-  op0 = gimple_assign_rhs1 (stmt);\n-  op1 = gimple_assign_rhs2 (stmt);\n-\n-  if (op0 == *ass_var\n+  if (rhs_class == GIMPLE_UNARY_RHS)\n+    ;\n+  else if (op0 == *ass_var\n       && (non_ass_var = independent_of_stmt_p (op1, stmt, call)))\n     ;\n   else if (op1 == *ass_var\n@@ -322,8 +323,32 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n       *ass_var = dest;\n       return true;\n \n-      /* TODO -- Handle other codes (NEGATE_EXPR, MINUS_EXPR,\n-\t POINTER_PLUS_EXPR).  */\n+    case NEGATE_EXPR:\n+      if (FLOAT_TYPE_P (TREE_TYPE (op0)))\n+        *m = build_real (TREE_TYPE (op0), dconstm1);\n+      else\n+        *m = build_int_cst (TREE_TYPE (op0), -1);\n+\n+      *ass_var = dest;\n+      return true;\n+\n+    case MINUS_EXPR:\n+      if (*ass_var == op0)\n+        *a = fold_build1 (NEGATE_EXPR, TREE_TYPE (non_ass_var), non_ass_var);\n+      else\n+        {\n+          if (FLOAT_TYPE_P (TREE_TYPE (non_ass_var)))\n+            *m = build_real (TREE_TYPE (non_ass_var), dconstm1);\n+          else\n+            *m = build_int_cst (TREE_TYPE (non_ass_var), -1);\n+\n+          *a = fold_build1 (NEGATE_EXPR, TREE_TYPE (non_ass_var), non_ass_var);\n+        }\n+\n+      *ass_var = dest;\n+      return true;\n+\n+      /* TODO -- Handle POINTER_PLUS_EXPR.  */\n \n     default:\n       return false;"}]}