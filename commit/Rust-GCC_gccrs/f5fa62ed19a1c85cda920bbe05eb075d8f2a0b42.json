{"sha": "f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmYTYyZWQxOWExYzg1Y2RhOTIwYmJlMDVlYjA3NWQ4ZjJhMGI0Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-14T20:54:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-14T20:54:55Z"}, "message": "libstdc++: Add comparison operators to std::shared_ptr (PR 94562)\n\nThis also implements the proposed resolution to LWG issue 3247, so that\nthe ill-formed <=> expression with nullptr is not used.\n\n\tPR libstdc++/94562\n\t* include/bits/shared_ptr.h (operator<=>): Define for C++20.\n\t* include/bits/shared_ptr_base.h (operator<=>): Likewise.\n\t* include/bits/unique_ptr.h (operator<=>): Add inline specifier.\n\t* testsuite/20_util/shared_ptr/comparison/cmp_c++20.cc: New test.\n\t* testsuite/20_util/shared_ptr/comparison/less.cc: Do not expect\n\tstd::less<A*> to be used when comparing std::shared_ptr<A> objects in\n\tC++20.", "tree": {"sha": "902220d77e6fcfdebc238796ecb183448a03250a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/902220d77e6fcfdebc238796ecb183448a03250a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a126a1577ffcbf62d97723b35d343bdff014bb40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a126a1577ffcbf62d97723b35d343bdff014bb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a126a1577ffcbf62d97723b35d343bdff014bb40"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "417c8c440c6cfeabd79fda7593c4e47d646ce4c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -1,5 +1,14 @@\n 2020-04-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/94562\n+\t* include/bits/shared_ptr.h (operator<=>): Define for C++20.\n+\t* include/bits/shared_ptr_base.h (operator<=>): Likewise.\n+\t* include/bits/unique_ptr.h (operator<=>): Add inline specifier.\n+\t* testsuite/20_util/shared_ptr/comparison/cmp_c++20.cc: New test.\n+\t* testsuite/20_util/shared_ptr/comparison/less.cc: Do not expect\n+\tstd::less<A*> to be used when comparing std::shared_ptr<A> objects in\n+\tC++20.\n+\n \tPR libstdc++/94565\n \t* libsupc++/compare (__unspec): Add noexcept-specifier to constructor.\n \t* testsuite/18_support/comparisons/categories/94565.cc: New test."}, {"sha": "0c393e2313220bd9a4ebcb8aa8b053147e863593", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -442,6 +442,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !__a; }\n \n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp, typename _Up>\n+    inline strong_ordering\n+    operator<=>(const shared_ptr<_Tp>& __a,\n+\t\tconst shared_ptr<_Up>& __b) noexcept\n+    { return compare_three_way()(__a.get(), __b.get()); }\n+\n+  template<typename _Tp>\n+    inline strong_ordering\n+    operator<=>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    {\n+      using pointer = typename shared_ptr<_Tp>::element_type*;\n+      return compare_three_way()(__a.get(), static_cast<pointer>(nullptr));\n+    }\n+#else\n   /// shared_ptr comparison with nullptr\n   template<typename _Tp>\n     _GLIBCXX_NODISCARD inline bool\n@@ -548,6 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(nullptr < __a); }\n+#endif\n \n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n "}, {"sha": "ff578e66117cb3ee8c03c3dcc6c8c99f6f9adae0", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -54,6 +54,9 @@\n #include <bits/refwrap.h>\n #include <bits/stl_function.h>\n #include <ext/aligned_buffer.h>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1442,6 +1445,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n     { return !__a; }\n \n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp, typename _Up, _Lock_policy _Lp>\n+    inline strong_ordering\n+    operator<=>(const __shared_ptr<_Tp, _Lp>& __a,\n+\t\tconst __shared_ptr<_Up, _Lp>& __b) noexcept\n+    { return compare_three_way()(__a.get(), __b.get()); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline strong_ordering\n+    operator<=>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    {\n+      using pointer = typename __shared_ptr<_Tp, _Lp>::element_type*;\n+      return compare_three_way()(__a.get(), static_cast<pointer>(nullptr));\n+    }\n+#else\n   template<typename _Tp, _Lock_policy _Lp>\n     inline bool\n     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n@@ -1537,6 +1555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n     { return !(nullptr < __a); }\n+#endif // three-way comparison\n \n   // 20.7.2.2.8 shared_ptr specialized algorithms.\n   template<typename _Tp, _Lock_policy _Lp>"}, {"sha": "3695214808b72505426d20aea2069bd34e43daf8", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -888,6 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Dp, typename _Up, typename _Ep>\n     requires three_way_comparable_with<typename unique_ptr<_Tp, _Dp>::pointer,\n \t\t\t\t       typename unique_ptr<_Up, _Ep>::pointer>\n+    inline\n     compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer,\n \t\t\t       typename unique_ptr<_Up, _Ep>::pointer>\n     operator<=>(const unique_ptr<_Tp, _Dp>& __x,\n@@ -896,11 +897,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Dp>\n     requires three_way_comparable<typename unique_ptr<_Tp, _Dp>::pointer>\n+    inline\n     compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer>\n     operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     {\n       using pointer = typename unique_ptr<_Tp, _Dp>::pointer;\n-      return compare_three_way()(__x.get(), pointer(nullptr));\n+      return compare_three_way()(__x.get(), static_cast<pointer>(nullptr));\n     }\n #endif\n   // @} relates unique_ptr"}, {"sha": "5600bbff9324e0567289b8f56403652f3796f43e", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/cmp_c++20.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fcmp_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fcmp_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fcmp_c%2B%2B20.cc?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -0,0 +1,106 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::shared_ptr<int> p0, p00;\n+  VERIFY( p0 == p00 );\n+  VERIFY( !(p0 < p00) );\n+  VERIFY( !(p0 > p00) );\n+  VERIFY( p0 <= p00 );\n+  VERIFY( p0 >= p00 );\n+  VERIFY( std::is_eq(p0 <=> p00) );\n+\n+  std::shared_ptr<int> p1(new int(1));\n+  VERIFY( p1 == p1 );\n+  VERIFY( !(p1 < p1) );\n+  VERIFY( !(p1 > p1) );\n+  VERIFY( p1 <= p1 );\n+  VERIFY( p1 >= p1 );\n+  VERIFY( std::is_eq(p1 <=> p1) );\n+\n+  std::shared_ptr<int> p11 = p1;\n+  VERIFY( p11 == p1 );\n+  VERIFY( !(p11 < p1) );\n+  VERIFY( !(p11 > p1) );\n+  VERIFY( p11 <= p1 );\n+  VERIFY( p11 >= p1 );\n+  VERIFY( std::is_eq(p11 <=> p1) );\n+\n+  std::shared_ptr<const int> p2(new int(1));\n+  VERIFY( p1 >= p1 );\n+  VERIFY( p1 != p2 );\n+  VERIFY( (p1 < p2) || (p1 > p2) );\n+  VERIFY( (p1 <= p2) || (p1 >= p2) );\n+  VERIFY( std::is_neq(p1 <=> p2) );\n+\n+  VERIFY( p1 != p0 );\n+  VERIFY( !(p1 < p0) );\n+  VERIFY( p1 > p0 );\n+  VERIFY( !(p1 <= p0) );\n+  VERIFY( p1 >= p0 );\n+  VERIFY( std::is_gt(p1 <=> p0) );\n+  VERIFY( std::is_lt(p0 <=> p1) );\n+}\n+\n+void\n+test02()\n+{\n+  std::shared_ptr<int> p0;\n+  VERIFY( p0 == nullptr );\n+  VERIFY( !(p0 < nullptr) );\n+  VERIFY( !(p0 > nullptr) );\n+  VERIFY( p0 <= nullptr );\n+  VERIFY( p0 >= nullptr );\n+  VERIFY( std::is_eq(p0 <=> nullptr) );\n+\n+  VERIFY( nullptr == p0 );\n+  VERIFY( !(nullptr < p0) );\n+  VERIFY( !(nullptr > p0) );\n+  VERIFY( nullptr <= p0 );\n+  VERIFY( nullptr >= p0 );\n+  VERIFY( std::is_eq(nullptr <=> p0) );\n+\n+  std::shared_ptr<int> p1(new int(1));\n+  VERIFY( p1 != nullptr );\n+  VERIFY( !(p1 < nullptr) );\n+  VERIFY( p1 > nullptr );\n+  VERIFY( !(p1 <= nullptr) );\n+  VERIFY( p1 >= nullptr );\n+  VERIFY( std::is_gt(p1 <=> nullptr) );\n+\n+  VERIFY( nullptr != p1 );\n+  VERIFY( nullptr < p1 );\n+  VERIFY( !(nullptr > p1) );\n+  VERIFY( nullptr <= p1 );\n+  VERIFY( !(nullptr >= p1) );\n+  VERIFY( std::is_lt(nullptr <=> p1) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "9ee65ffdf09726df11b2f11b4447f9241e515f0c", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/less.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fless.cc?ref=f5fa62ed19a1c85cda920bbe05eb075d8f2a0b42", "patch": "@@ -46,7 +46,11 @@ test01()\n   std::shared_ptr<A> p1;\n   std::shared_ptr<A> p2;\n   VERIFY( !less(p1, p2) && !less(p2, p1) );\n+#ifndef __cpp_lib_three_way_comparison\n+// In C++20 std::less<std::shared_ptr<A>> uses the operator< synthesized\n+// from operator<=>, which uses std::compare_three_way not std::less<A*>.\n   VERIFY( std::less<A*>::count == 2 );\n+#endif\n   return 0;\n }\n \n@@ -86,7 +90,7 @@ test03()\n \n   return 0;\n }\n-int \n+int\n main()\n {\n   test01();"}]}