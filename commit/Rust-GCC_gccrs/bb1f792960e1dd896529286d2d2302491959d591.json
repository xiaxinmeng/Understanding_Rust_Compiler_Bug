{"sha": "bb1f792960e1dd896529286d2d2302491959d591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxZjc5Mjk2MGUxZGQ4OTY1MjkyODZkMmQyMzAyNDkxOTU5ZDU5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-17T12:37:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-17T12:37:53Z"}, "message": "gigi.h (smaller_form_type_p): Declare.\n\n\t* gcc-interface/gigi.h (smaller_form_type_p): Declare.\n\t* gcc-interface/trans.c (smaller_form_type_p): Make global and move...\n\t* gcc-interface/utils.c (smaller_form_type_p): ...to here.\n\t(convert): Deal with conversions from a smaller form type specially.\n\nFrom-SVN: r171091", "tree": {"sha": "0f84b2c4de3fdba8e07cd150c30e22214ec75896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f84b2c4de3fdba8e07cd150c30e22214ec75896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1f792960e1dd896529286d2d2302491959d591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f792960e1dd896529286d2d2302491959d591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1f792960e1dd896529286d2d2302491959d591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f792960e1dd896529286d2d2302491959d591/comments", "author": null, "committer": null, "parents": [{"sha": "dabd47e701a73fca7f4e2495b5a86704bf0a1855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dabd47e701a73fca7f4e2495b5a86704bf0a1855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dabd47e701a73fca7f4e2495b5a86704bf0a1855"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "73f85e23238e392e371a84360ebfc818a872ba31", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb1f792960e1dd896529286d2d2302491959d591", "patch": "@@ -1,3 +1,10 @@\n+2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (smaller_form_type_p): Declare.\n+\t* gcc-interface/trans.c (smaller_form_type_p): Make global and move...\n+\t* gcc-interface/utils.c (smaller_form_type_p): ...to here.\n+\t(convert): Deal with conversions from a smaller form type specially.\n+\n 2011-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_init_options): Do not concatenate -I and"}, {"sha": "2605533a8bbc4e5a264c1112771ebacc86f1c7fa", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=bb1f792960e1dd896529286d2d2302491959d591", "patch": "@@ -756,6 +756,9 @@ extern bool is_double_scalar_or_array (Entity_Id gnat_type,\n    component of an aggregate type.  */\n extern bool type_for_nonaliased_component_p (tree gnu_type);\n \n+/* Return true if TYPE is a smaller form of ORIG_TYPE.  */\n+extern bool smaller_form_type_p (tree type, tree orig_type);\n+\n /* Return the base type of TYPE.  */\n extern tree get_base_type (tree type);\n "}, {"sha": "f4d31d526518bdf65d26a5a1a6a8ffd6253a0018", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=bb1f792960e1dd896529286d2d2302491959d591", "patch": "@@ -205,7 +205,6 @@ static tree emit_check (tree, tree, int, Node_Id);\n static tree build_unary_op_trapv (enum tree_code, tree, tree, Node_Id);\n static tree build_binary_op_trapv (enum tree_code, tree, tree, tree, Node_Id);\n static tree convert_with_check (Entity_Id, tree, bool, bool, bool, Node_Id);\n-static bool smaller_form_type_p (tree, tree);\n static bool addressable_p (tree, tree);\n static tree assoc_to_constructor (Entity_Id, Node_Id, tree);\n static tree extract_values (tree, tree);\n@@ -7222,30 +7221,6 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n   return convert (gnu_type, gnu_result);\n }\n \f\n-/* Return true if TYPE is a smaller form of ORIG_TYPE.  */\n-\n-static bool\n-smaller_form_type_p (tree type, tree orig_type)\n-{\n-  tree size, osize;\n-\n-  /* We're not interested in variants here.  */\n-  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (orig_type))\n-    return false;\n-\n-  /* Like a variant, a packable version keeps the original TYPE_NAME.  */\n-  if (TYPE_NAME (type) != TYPE_NAME (orig_type))\n-    return false;\n-\n-  size = TYPE_SIZE (type);\n-  osize = TYPE_SIZE (orig_type);\n-\n-  if (!(TREE_CODE (size) == INTEGER_CST && TREE_CODE (osize) == INTEGER_CST))\n-    return false;\n-\n-  return tree_int_cst_lt (size, osize) != 0;\n-}\n-\n /* Return true if GNU_EXPR can be directly addressed.  This is the case\n    unless it is an expression involving computation or if it involves a\n    reference to a bitfield or to an object not sufficiently aligned for"}, {"sha": "4d40f86744753213094c2db2042ecddfbae14f7b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1f792960e1dd896529286d2d2302491959d591/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=bb1f792960e1dd896529286d2d2302491959d591", "patch": "@@ -4043,6 +4043,18 @@ convert (tree type, tree expr)\n       } while (TREE_CODE (child_etype) == RECORD_TYPE);\n     }\n \n+  /* If we are converting from a smaller form of record type back to it, just\n+     make a VIEW_CONVERT_EXPR.  But first pad the expression to have the same\n+     size on both sides.  */\n+  else if (ecode == RECORD_TYPE && code == RECORD_TYPE\n+\t   && smaller_form_type_p (etype, type))\n+    {\n+      expr = convert (maybe_pad_type (etype, TYPE_SIZE (type), 0, Empty,\n+\t\t\t\t      false, false, false, true),\n+\t\t      expr);\n+      return build1 (VIEW_CONVERT_EXPR, type, expr);\n+    }\n+\n   /* In all other cases of related types, make a NOP_EXPR.  */\n   else if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (etype))\n     return fold_convert (type, expr);\n@@ -4672,6 +4684,30 @@ type_for_nonaliased_component_p (tree gnu_type)\n   return true;\n }\n \n+/* Return true if TYPE is a smaller form of ORIG_TYPE.  */\n+\n+bool\n+smaller_form_type_p (tree type, tree orig_type)\n+{\n+  tree size, osize;\n+\n+  /* We're not interested in variants here.  */\n+  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (orig_type))\n+    return false;\n+\n+  /* Like a variant, a packable version keeps the original TYPE_NAME.  */\n+  if (TYPE_NAME (type) != TYPE_NAME (orig_type))\n+    return false;\n+\n+  size = TYPE_SIZE (type);\n+  osize = TYPE_SIZE (orig_type);\n+\n+  if (!(TREE_CODE (size) == INTEGER_CST && TREE_CODE (osize) == INTEGER_CST))\n+    return false;\n+\n+  return tree_int_cst_lt (size, osize) != 0;\n+}\n+\n /* Perform final processing on global variables.  */\n \n void"}]}