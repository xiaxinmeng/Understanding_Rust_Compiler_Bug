{"sha": "7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNmI2ZWE1YzFlZDM5Y2IyZTUyY2ViMTkyZjU4M2FkOGU0ZjYyYg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-09-26T14:32:45Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-09-26T14:32:45Z"}, "message": "sendmsg.c (get_imp): Remove inline.\n\n2010-09-26  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* sendmsg.c (get_imp):  Remove inline.\n\t(objc_msg_lookup): Likewise.\n\t(objc_get_uninstalled_dtable): Likewise.\n\t* encoding.c (objc_skip_type_qualifiers): Likewise.\n\t(objc_skip_offset): Likewise.\n\t* archive.c (__objc_write_object): Likewise\n\t(__objc_write_class):\n\t(__objc_write_selector):\n\t(objc_read_char):\n\t(objc_read_unsigned_char):\n\t(objc_read_short):\n\t(objc_read_unsigned_short):\n\t(objc_read_int):\n\t(objc_read_long):\n\t(__objc_read_nbyte_uint):\n\t(objc_read_unsigned_int):\n\t(objc_read_unsigned_long):\n\t* objc/objc-decls.h (obc_EXPORT): Remove dllexport for DLL_EXPORT case.\n\t(objc_EXPORT): Likewise.\n\t* objc/message.h (objc-decls.h): Add include.\n\t* objc/objc-api.h: Mark API by objc_EXPORT.\n\t* libobjc.def (__objc_responds_to): Removed.\n\nFrom-SVN: r164632", "tree": {"sha": "fbe3659629931937d021d3175cd2f6e0f11eac9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe3659629931937d021d3175cd2f6e0f11eac9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/comments", "author": null, "committer": null, "parents": [{"sha": "d6f3358f66ce914aac92f73b41c8b7fa34a77069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f3358f66ce914aac92f73b41c8b7fa34a77069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f3358f66ce914aac92f73b41c8b7fa34a77069"}], "stats": {"total": 121, "additions": 73, "deletions": 48}, "files": [{"sha": "8e106266e391ea873068c186721e7e55fcd3f1a8", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -1,3 +1,28 @@\n+2010-09-26  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* sendmsg.c (get_imp):  Remove inline.\n+\t(objc_msg_lookup): Likewise.\n+\t(objc_get_uninstalled_dtable): Likewise.\n+\t* encoding.c (objc_skip_type_qualifiers): Likewise.\n+\t(objc_skip_offset): Likewise.\n+\t* archive.c (__objc_write_object): Likewise\n+\t(__objc_write_class):\n+\t(__objc_write_selector):\n+\t(objc_read_char):\n+\t(objc_read_unsigned_char):\n+\t(objc_read_short):\n+\t(objc_read_unsigned_short):\n+\t(objc_read_int):\n+\t(objc_read_long):\n+\t(__objc_read_nbyte_uint):\n+\t(objc_read_unsigned_int):\n+\t(objc_read_unsigned_long):\n+\t* objc/objc-decls.h (obc_EXPORT): Remove dllexport for DLL_EXPORT case.\n+\t(objc_EXPORT): Likewise.\n+\t* objc/message.h (objc-decls.h): Add include.\n+\t* objc/objc-api.h: Mark API by objc_EXPORT.\n+\t* libobjc.def (__objc_responds_to): Removed.\n+\n 2010-09-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* hash.c: Include objc-private/hash.h instead of objc/hash.h."}, {"sha": "f36f1b748fb860b282ffb3e3a5838e42030a2b86", "filename": "libobjc/archive.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Farchive.c?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -372,7 +372,7 @@ __objc_write_extension (struct objc_typed_stream *stream, unsigned char code)\n     }\n }\n \n-inline int\n+int\n __objc_write_object (struct objc_typed_stream *stream, id object)\n {\n   unsigned char buf = '\\0';\n@@ -437,7 +437,7 @@ objc_write_object (struct objc_typed_stream *stream, id object)\n     }\n }\n \n-inline int\n+int\n __objc_write_class (struct objc_typed_stream *stream, struct objc_class *class)\n {\n   __objc_write_extension (stream, _BX_CLASS);\n@@ -466,7 +466,7 @@ objc_write_class (struct objc_typed_stream *stream,\n }\n \n \n-inline int \n+int \n __objc_write_selector (struct objc_typed_stream *stream, SEL selector)\n {\n   const char *sel_name;\n@@ -509,7 +509,7 @@ objc_write_selector (struct objc_typed_stream *stream, SEL selector)\n ** Read operations \n */\n \n-inline int\n+int\n objc_read_char (struct objc_typed_stream *stream, char *val)\n {\n   unsigned char buf;\n@@ -535,7 +535,7 @@ objc_read_char (struct objc_typed_stream *stream, char *val)\n }\n \n \n-inline int\n+int\n objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n {\n   unsigned char buf;\n@@ -555,7 +555,7 @@ objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n   return len;\n }\n \n-inline int\n+int\n objc_read_short (struct objc_typed_stream *stream, short *value)\n {\n   unsigned char buf[sizeof (short) + 1];\n@@ -582,7 +582,7 @@ objc_read_short (struct objc_typed_stream *stream, short *value)\n   return len;\n }\n \n-inline int\n+int\n objc_read_unsigned_short (struct objc_typed_stream *stream,\n \t\t\t  unsigned short *value)\n {\n@@ -609,7 +609,7 @@ objc_read_unsigned_short (struct objc_typed_stream *stream,\n }\n \n \n-inline int\n+int\n objc_read_int (struct objc_typed_stream *stream, int *value)\n {\n   unsigned char buf[sizeof (int) + 1];\n@@ -636,7 +636,7 @@ objc_read_int (struct objc_typed_stream *stream, int *value)\n   return len;\n }\n \n-inline int\n+int\n objc_read_long (struct objc_typed_stream *stream, long *value)\n {\n   unsigned char buf[sizeof (long) + 1];\n@@ -663,7 +663,7 @@ objc_read_long (struct objc_typed_stream *stream, long *value)\n   return len;\n }\n \n-inline int\n+int\n __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n \t\t\tunsigned int nbytes, unsigned int *val)\n {\n@@ -682,7 +682,7 @@ __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n }\n   \n \n-inline int\n+int\n objc_read_unsigned_int (struct objc_typed_stream *stream,\n \t\t\tunsigned int *value)\n {\n@@ -719,7 +719,7 @@ __objc_read_nbyte_ulong (struct objc_typed_stream *stream,\n }\n   \n \n-inline int\n+int\n objc_read_unsigned_long (struct objc_typed_stream *stream,\n \t\t\t unsigned long *value)\n {\n@@ -737,7 +737,7 @@ objc_read_unsigned_long (struct objc_typed_stream *stream,\n   return len;\n }\n \n-inline int\n+int\n objc_read_string (struct objc_typed_stream *stream,\n \t\t  char **string)\n {"}, {"sha": "35c95521b80523993a9e94045e2671d67abdb701", "filename": "libobjc/encoding.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -563,7 +563,7 @@ objc_promoted_size (const char *type)\n   occurring in method prototype encodings.\n */\n \n-inline const char *\n+const char *\n objc_skip_type_qualifiers (const char *type)\n {\n   while (*type == _C_CONST\n@@ -701,7 +701,7 @@ objc_skip_typespec (const char *type)\n   Skip an offset as part of a method encoding.  This is prepended by a\n   '+' if the argument is passed in registers.\n */\n-inline const char *\n+const char *\n objc_skip_offset (const char *type)\n {\n   if (*type == '+')"}, {"sha": "ee323388a0c9c4f9f17bd45c30a80c7e69f3513b", "filename": "libobjc/libobjc.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Flibobjc.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Flibobjc.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Flibobjc.def?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -132,7 +132,6 @@ __objc_exec_class\n __objc_init_dispatch_tables\n __objc_install_premature_dtable\n __objc_print_dtable_stats\n-__objc_responds_to\n __objc_update_dispatch_table_for_class\n class_add_method_list\n class_get_class_method"}, {"sha": "6d476363c69c972f134e2c2df43f1b6fff0cfcca", "filename": "libobjc/objc/message.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fmessage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fmessage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fmessage.h?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -31,6 +31,7 @@ extern \"C\" {\n #endif\n \n #include \"objc.h\"\n+#include \"objc-decls.h\"\n \n /* This file includes declarations of the messaging functions and types.  */\n \n@@ -41,7 +42,7 @@ typedef union arglist {\n   char arg_regs[sizeof (char*)];\n } *arglist_t;\t\t\t/* argument frame */\n \n-IMP objc_msg_lookup(id receiver, SEL op);\n+objc_EXPORT IMP objc_msg_lookup(id receiver, SEL op);\n \n /* TODO: Add the remaining messaging declarations from objc-api.h.  */\n "}, {"sha": "9903739248cdafed4addccf5dca6ee6c2200fb54", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -298,9 +298,9 @@ typedef struct objc_super {\n #endif\n } Super, *Super_t;\n \n-IMP objc_msg_lookup_super(Super_t super, SEL sel);\n+objc_EXPORT IMP objc_msg_lookup_super(Super_t super, SEL sel);\n \n-retval_t objc_msg_sendv(id, SEL, arglist_t);\n+objc_EXPORT retval_t objc_msg_sendv(id, SEL, arglist_t);\n \n \n \n@@ -332,22 +332,22 @@ objc_EXPORT id (*_objc_object_dispose)(id object);\n   use these functions in their ObjC programs so that they work so that\n   they work properly with garbage collectors.\n */\n-void *\n+objc_EXPORT void *\n objc_malloc(size_t size);\n \n /* FIXME: Shouldn't the following be called objc_malloc_atomic ?  The\n    GC function is GC_malloc_atomic() which makes sense.\n  */\n-void *\n+objc_EXPORT void *\n objc_atomic_malloc(size_t size);\n \n-void *\n+objc_EXPORT void *\n objc_realloc(void *mem, size_t size);\n \n-void *\n+objc_EXPORT void *\n objc_calloc(size_t nelem, size_t size);\n \n-void\n+objc_EXPORT void\n objc_free(void *mem);\n \n #include \"deprecated/objc_valloc.h\"\n@@ -365,36 +365,36 @@ objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n #include \"deprecated/objc_unexpected_exception.h\"\n \n-Method_t class_get_class_method(MetaClass _class, SEL aSel);\n+objc_EXPORT Method_t class_get_class_method(MetaClass _class, SEL aSel);\n \n-Method_t class_get_instance_method(Class _class, SEL aSel);\n+objc_EXPORT Method_t class_get_instance_method(Class _class, SEL aSel);\n \n-Class class_pose_as(Class impostor, Class superclass);\n+objc_EXPORT Class class_pose_as(Class impostor, Class superclass);\n \n-Class objc_get_class(const char *name);\n+objc_EXPORT Class objc_get_class(const char *name);\n \n-Class objc_lookup_class(const char *name);\n+objc_EXPORT Class objc_lookup_class(const char *name);\n \n-Class objc_next_class(void **enum_state);\n+objc_EXPORT Class objc_next_class(void **enum_state);\n \n-const char *sel_get_name(SEL selector);\n+objc_EXPORT const char *sel_get_name(SEL selector);\n \n-const char *sel_get_type(SEL selector);\n+objc_EXPORT const char *sel_get_type(SEL selector);\n \n-SEL sel_get_uid(const char *name);\n+objc_EXPORT SEL sel_get_uid(const char *name);\n \n-SEL sel_get_any_uid(const char *name);\n+objc_EXPORT SEL sel_get_any_uid(const char *name);\n \n-SEL sel_get_any_typed_uid(const char *name);\n+objc_EXPORT SEL sel_get_any_typed_uid(const char *name);\n \n-SEL sel_get_typed_uid(const char *name, const char*);\n+objc_EXPORT SEL sel_get_typed_uid(const char *name, const char*);\n \n-SEL sel_register_name(const char *name);\n+objc_EXPORT SEL sel_register_name(const char *name);\n \n-SEL sel_register_typed_name(const char *name, const char*type);\n+objc_EXPORT SEL sel_register_typed_name(const char *name, const char*type);\n \n \n-BOOL sel_is_mapped (SEL aSel);\n+objc_EXPORT BOOL sel_is_mapped (SEL aSel);\n \n extern id class_create_instance(Class _class);\n \n@@ -465,11 +465,11 @@ method_get_imp(Method_t method)\n   return (method!=METHOD_NULL)?method->method_imp:(IMP)0;\n }\n \n-IMP get_imp (Class _class, SEL sel);\n+objc_EXPORT IMP get_imp (Class _class, SEL sel);\n \n-id object_copy(id object);\n+objc_EXPORT id object_copy(id object);\n \n-id object_dispose(id object);\n+objc_EXPORT id object_dispose(id object);\n \n static inline Class\n object_get_class(id object)\n@@ -535,7 +535,7 @@ object_is_meta_class (id object)\n \t  &&  !object_is_class (object));\n }\n \n-struct sarray* \n+objc_EXPORT struct sarray* \n objc_get_uninstalled_dtable(void);\n \n #ifdef __cplusplus"}, {"sha": "e5388e33c4ce69277e66d83b48325a5857bf024d", "filename": "libobjc/objc/objc-decls.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fobjc-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fobjc%2Fobjc-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-decls.h?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -29,8 +29,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (_WIN32) || defined (__WIN32__) || defined (WIN32)\n \n #    ifdef DLL_EXPORT /* defined by libtool (if required) */\n-#  define objc_EXPORT  __declspec(dllexport)\n-#  define objc_DECLARE __declspec(dllexport)\n+#  define objc_EXPORT \n+#  define objc_DECLARE\n #else\n #  define objc_EXPORT  extern __declspec(dllimport)\n #  define objc_DECLARE extern __declspec(dllimport)"}, {"sha": "7a5aa568b6d702e72e1b40f6b42b4687fd66235e", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=7116b6ea5c1ed39cb2e52ceb192f583ad8e4f62b", "patch": "@@ -136,7 +136,7 @@ __objc_get_forward_imp (id rcv, SEL sel)\n }\n \n /* Given a class and selector, return the selector's implementation.  */\n-inline\n+\n IMP\n get_imp (Class class, SEL sel)\n {\n@@ -222,7 +222,7 @@ __objc_responds_to (id object, SEL sel)\n /* This is the lookup function.  All entries in the table are either a \n    valid method *or* zero.  If zero then either the dispatch table\n    needs to be installed or it doesn't exist and forwarding is attempted. */\n-inline\n+\n IMP\n objc_msg_lookup (id receiver, SEL op)\n {\n@@ -713,7 +713,7 @@ __objc_print_dtable_stats ()\n /* Returns the uninstalled dispatch table indicator.\n  If a class' dispatch table points to __objc_uninstalled_dtable\n  then that means it needs its dispatch table to be installed. */\n-inline\n+\n struct sarray *\n objc_get_uninstalled_dtable ()\n {"}]}