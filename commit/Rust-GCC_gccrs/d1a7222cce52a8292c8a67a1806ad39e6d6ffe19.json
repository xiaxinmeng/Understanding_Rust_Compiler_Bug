{"sha": "d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhNzIyMmNjZTUyYTgyOTJjOGE2N2ExODA2YWQzOWU2ZDZmZmUxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-29T12:59:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-29T12:59:53Z"}, "message": "re PR libstdc++/18654 (Shrink-to-fit std::string::reserve() calls can reallocate & copy string contents unnecessarily)\n\n2004-11-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/18654\n\t* include/bits/basic_string.tcc (_Rep::_S_create): When shrinking,\n\tdo not round to pagesize.\n\t* testsuite/21_strings/basic_string/capacity/char/18654.cc: New.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc: New.\n\nFrom-SVN: r91466", "tree": {"sha": "e2be759f3acfab35833964f8d63eda30acb0ee2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2be759f3acfab35833964f8d63eda30acb0ee2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/comments", "author": null, "committer": null, "parents": [{"sha": "1cb1fa517f041e44898d1abe4293bb367c30ae95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1fa517f041e44898d1abe4293bb367c30ae95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb1fa517f041e44898d1abe4293bb367c30ae95"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "b0d82f84ab69141e375b54f873adc8a71ca77b16", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "patch": "@@ -1,3 +1,11 @@\n+2004-11-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/18654\n+\t* include/bits/basic_string.tcc (_Rep::_S_create): When shrinking,\n+\tdo not round to pagesize.\n+\t* testsuite/21_strings/basic_string/capacity/char/18654.cc: New.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc: New.\n+\n 2004-11-27  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/18690"}, {"sha": "3bdce0f090abcbe59d3e178407ec4e92c3878760", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "patch": "@@ -577,7 +577,7 @@ namespace std\n       size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n \n       const size_type __adj_size = __size + __malloc_header_size;\n-      if (__adj_size > __pagesize)\n+      if (__adj_size > __pagesize && __capacity > __old_capacity)\n \t{\n \t  const size_type __extra = __pagesize - __adj_size % __pagesize;\n \t  __capacity += __extra / sizeof(_CharT);"}, {"sha": "16dd7ea9ebe03b3d6e0837fb33c7583a8f8d1628", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/18654.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc?ref=d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "patch": "@@ -0,0 +1,56 @@\n+// 2004-11-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/18654\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef string::size_type size_type;\n+\n+  // Our current implementation provides exact shrink-to-size\n+  // and shrink-to-fit (in the future, maybe this will change\n+  // for short strings).\n+  size_type min = 2 << 0;\n+  size_type max = 2 << 20;\n+  for (size_type i = min; i <= max; i *= 2)\n+    {\n+      string str(i, 'x');\n+      str.reserve(3 * i);\n+\n+      str.reserve(2 * i);\n+      VERIFY( str.capacity() == 2 * i );\n+\n+      str.reserve();\n+      VERIFY( str.capacity() == i );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1b683bb4adad6e859175f7c72481b2b16aef2ea4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7222cce52a8292c8a67a1806ad39e6d6ffe19/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc?ref=d1a7222cce52a8292c8a67a1806ad39e6d6ffe19", "patch": "@@ -0,0 +1,56 @@\n+// 2004-11-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.3 string capacity\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/18654\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef wstring::size_type size_type;\n+\n+  // Our current implementation provides exact shrink-to-size\n+  // and shrink-to-fit (in the future, maybe this will change\n+  // for short strings).\n+  size_type min = 2 << 0;\n+  size_type max = 2 << 20;\n+  for (size_type i = min; i <= max; i *= 2)\n+    {\n+      wstring str(i, L'x');\n+      str.reserve(3 * i);\n+\n+      str.reserve(2 * i);\n+      VERIFY( str.capacity() == 2 * i );\n+\n+      str.reserve();\n+      VERIFY( str.capacity() == i );\n+    }\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}