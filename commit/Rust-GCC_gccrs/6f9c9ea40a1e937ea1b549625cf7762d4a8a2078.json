{"sha": "6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5YzllYTQwYTFlOTM3ZWExYjU0OTYyNWNmNzc2MmQ0YThhMjA3OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-07T17:23:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-07-07T17:23:50Z"}, "message": "Avoid printing informational notes when -Wmismatched-tags is suppressed in system headers (PR c++/96063)\n\nRelated:\nPR c++/96063 - mismatched-tags warnings in stdlib headers\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96063\n\t* parser.c (class_decl_loc_t::diag_mismatched_tags): Print notes only\n\tif warning_at returns nonzero.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96063\n\t* g++.dg/warn/Wmismatched-tags-7.C: New test.\n\t* g++.dg/warn/Wmismatched-tags-8.C: New test.", "tree": {"sha": "f524fcd83c548ea7b9bb1b8b3a838663204e255f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f524fcd83c548ea7b9bb1b8b3a838663204e255f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aeccecbf0d8c7e22926e0f740c46724da8a7be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aeccecbf0d8c7e22926e0f740c46724da8a7be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aeccecbf0d8c7e22926e0f740c46724da8a7be8"}], "stats": {"total": 94, "additions": 65, "deletions": 29}, "files": [{"sha": "e58d8eb298c0eedb74d6e0023a0f58cb6f1e769d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "patch": "@@ -31443,25 +31443,26 @@ class_decl_loc_t::diag_mismatched_tags (tree type_decl)\n   /* Issue a warning for the first mismatched declaration.\n      Avoid using \"%#qT\" since the class-key for the same type will\n      be the same regardless of which one was used in the declaraion.  */\n-  warning_at (loc, OPT_Wmismatched_tags,\n-\t      \"%qT declared with a mismatched class-key %qs\",\n-\t      type_decl, xmatchkstr);\n-\n-  /* Suggest how to avoid the warning for each instance since\n-     the guidance may be different depending on context.  */\n-  inform (loc,\n-\t  (key_redundant_p\n-\t   ? G_(\"remove the class-key or replace it with %qs\")\n-\t   : G_(\"replace the class-key with %qs\")),\n-\t  xpectkstr);\n-\n-  /* Also point to the first declaration or definition that guided\n-     the decision to issue the warning above.  */\n-  inform (cdlguide->location (idxguide),\n-\t  (def_p\n-\t   ? G_(\"%qT defined as %qs here\")\n-\t   : G_(\"%qT first declared as %qs here\")),\n-\t  type_decl, xpectkstr);\n+  if (warning_at (loc, OPT_Wmismatched_tags,\n+\t\t  \"%qT declared with a mismatched class-key %qs\",\n+\t\t  type_decl, xmatchkstr))\n+    {\n+      /* Suggest how to avoid the warning for each instance since\n+\t the guidance may be different depending on context.  */\n+      inform (loc,\n+\t      (key_redundant_p\n+\t       ? G_(\"remove the class-key or replace it with %qs\")\n+\t       : G_(\"replace the class-key with %qs\")),\n+\t      xpectkstr);\n+\n+      /* Also point to the first declaration or definition that guided\n+\t the decision to issue the warning above.  */\n+      inform (cdlguide->location (idxguide),\n+\t      (def_p\n+\t       ? G_(\"%qT defined as %qs here\")\n+\t       : G_(\"%qT first declared as %qs here\")),\n+\t      type_decl, xpectkstr);\n+    }\n \n   /* Issue warnings for the remaining inconsistent declarations.  */\n   for (unsigned i = idx + 1; i != ndecls; ++i)\n@@ -31476,16 +31477,16 @@ class_decl_loc_t::diag_mismatched_tags (tree type_decl)\n       key_redundant_p = key_redundant (i);\n       /* Set the function declaration to print in diagnostic context.  */\n       current_function_decl = function (i);\n-      warning_at (loc, OPT_Wmismatched_tags,\n-\t\t  \"%qT declared with a mismatched class-key %qs\",\n-\t\t  type_decl, xmatchkstr);\n-      /* Suggest how to avoid the warning for each instance since\n-\t the guidance may be different depending on context.  */\n-      inform (loc,\n-\t      (key_redundant_p\n-\t       ? G_(\"remove the class-key or replace it with %qs\")\n-\t       : G_(\"replace the class-key with %qs\")),\n-\t      xpectkstr);\n+      if (warning_at (loc, OPT_Wmismatched_tags,\n+\t\t      \"%qT declared with a mismatched class-key %qs\",\n+\t\t      type_decl, xmatchkstr))\n+\t/* Suggest how to avoid the warning for each instance since\n+\t   the guidance may be different depending on context.  */\n+\tinform (loc,\n+\t\t(key_redundant_p\n+\t\t ? G_(\"remove the class-key or replace it with %qs\")\n+\t\t : G_(\"replace the class-key with %qs\")),\n+\t\txpectkstr);\n     }\n \n   /* Restore the current function in case it was replaced above.  */"}, {"sha": "3180c22c0545ae06fb52d408cc28e51b38c61f48", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-tags-7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-7.C?ref=6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "patch": "@@ -0,0 +1,13 @@\n+/* Verify that -Wmismatched-tags doesn't print stray notes for warnings\n+   disabled in system headers.\n+  { dg-do \"compile\" }\n+  { dg-options \"-Wmismatched-tags\" } */\n+\n+# 6 \"Wmismatched-tags-7.C\" 1\n+# 1 \"system-header.h\" 1 3 4\n+# 9 \"system-header.h\" 3 4\n+class A;            // { dg-bogus \"first declared\" }\n+struct A;           // { dg-bogus \"replace\" }\n+# 12 \"Wmismatched-tags-7.C\" 2\n+class B;            // { dg-message \"first declared\" }\n+struct B;           // { dg-warning \"\\\\\\[-Wmismatched-tags\" }"}, {"sha": "0ebca3db90f268fbcfeb888b06424c0e758281cd", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-tags-8.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-8.C?ref=6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that #pragma GCC diagnostic works for -Wmismatched-tags.\n+   { dg-do \"compile\" }\n+   { dg-options \"-Wmismatched-tags\" } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic error \"-Wmismatched-tags\"\n+class A;            // { dg-message \"first declared\"\n+struct A;           // { dg-error \"\\\\\\[-Werror=mismatched-tags\" }\n+\n+#pragma GCC diagnostic ignored \"-Wmismatched-tags\"\n+class B;            // { dg-bogus \"first declared\" }\n+struct B;\n+\n+#pragma GCC diagnostic warning \"-Wmismatched-tags\"\n+class C;            // { dg-message \"first declared\"\n+struct C;           // { dg-warning \"\\\\\\[-Wmismatched-tags\" }\n+#pragma GCC diagnostic pop\n+\n+class D;            // { dg-message \"first declared\"\n+struct D;           // { dg-warning \"\\\\\\[-Wmismatched-tags\" }\n+\n+// { dg-prune-output \"some warnings being treated as errors\" }"}]}