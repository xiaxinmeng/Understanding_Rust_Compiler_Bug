{"sha": "d4943ce939d9654932624b9ece24c3a474ae4157", "node_id": "C_kwDOANBUbNoAKGQ0OTQzY2U5MzlkOTY1NDkzMjYyNGI5ZWNlMjRjM2E0NzRhZTQxNTc", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-20T17:41:56Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-11-19T19:58:11Z"}, "message": "Darwin: Rework handling for unwinder code in libgcc_s and specs [PR80556].\n\nThis addresses a long-standing problem where a work-around for an unwinder\nissue (also a regression) regresses other functionality.  The patch replaces\nseveral work-arounds with a fix for PR80556 and a work-around for PR88590.\n\n* The fix for PR80556 requires a bump to the SO name for libgcc_s, since we\nneed to remove the unwinder symbols from it.  This would trigger PR88590\nhence the work-around for that.\n\n* We weaken the symbols for emulated TLS support so that it is possible\nfor a DSO linked with static-libgcc to interoperate with a DSO linked with\nlibgcc_s.  Likewise main exes.\n\n* We remove all the gcc-4.2.1 era stubs machinery and workarounds.\n\n* libgcc is always now linked ahead of libc, which avoids fails where the\nlibc (libSystem) builtins implementations are not up to date.\n\n* The unwinder now always comes from the system\n - for Darwin9 from /usr/lib/libgcc_s.1.dylib\n - for Darwin10 from /usr/lib/libSystem.dylib\n - for Darwin11+ from /usr/lib/system/libunwind.dylib.\n\n We still insert a shim on Darwin10 to fix an omitted unwind function, but\n the underlying unwinder remains the system one.\n\n* The work-around for PR88590 has two parts (1) we always link libgcc from\nits convenience lib on affected system versions (avoiding the need to find\nthe DSO path); (2) we add and export the emutls functions from DSOs - this\nmakes a relatively small (20k) addition to a DSO.  These can be backed out\nwhen a proper fix for PR88590 is committed.\n\nFor distributions that wish to install a libgcc_s.1.dylib to satisfy linkage\nfrom exes that linked against the stubs can use a reexported libgcc_s.1.1\n(since that contains all the symbols that were previously exported via the\n stubs).\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/ChangeLog:\n\n\tPR target/80556\n\t* config/darwin-driver.c (darwin_driver_init): Handle exported\n\tsymbols and symbol lists (suppress automatic export of the TLS\n\tsymbols).\n\t* config/darwin.c (darwin_rename_builtins): Remove workaround.\n\t* config/darwin.h (LINK_GCC_C_SEQUENCE_SPEC): Likewise.\n\t(REAL_LIBGCC_SPEC): Handle revised library uses.\n\t* config/darwin.opt (nodefaultexport): New.\n\t* config/i386/darwin.h (PR80556_WORKAROUND): Remove.\n\t* config/i386/darwin32-biarch.h (PR80556_WORKAROUND): Likewise.\n\t* config/i386/darwin64-biarch.h (PR80556_WORKAROUND): Likewise.\n\nlibgcc/ChangeLog:\n\n\t* config.host: Add weak emutls crt to the extra_parts.\n\t* config/i386/darwin-lib.h (DECLARE_LIBRARY_RENAMES): Remove\n\tworkaround.\n\t* config/libgcc-libsystem.ver: Add exclude list for the system-\n\tprovided unwinder.\n\t* config/t-slibgcc-darwin: Bump SO version, remove stubs code.\n\t* config/i386/libgcc-darwin.10.4.ver: Removed.\n\t* config/i386/libgcc-darwin.10.5.ver: Removed.\n\t* config/rs6000/libgcc-darwin.10.4.ver: Removed.\n\t* config/rs6000/libgcc-darwin.10.5.ver: Removed.\n\t* config/t-darwin-noeh: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/torture/fp-int-convert-timode-3.c: Remove XFAIL.\n\t* gcc.dg/torture/fp-int-convert-timode-4.c: Likewise.", "tree": {"sha": "ee14e5881aff9ad57a3b9c861536949f8d4194a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee14e5881aff9ad57a3b9c861536949f8d4194a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4943ce939d9654932624b9ece24c3a474ae4157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4943ce939d9654932624b9ece24c3a474ae4157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4943ce939d9654932624b9ece24c3a474ae4157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4943ce939d9654932624b9ece24c3a474ae4157/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9873b4e2c9a9955789318f4d550147ef9405b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9873b4e2c9a9955789318f4d550147ef9405b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9873b4e2c9a9955789318f4d550147ef9405b07"}], "stats": {"total": 734, "additions": 153, "deletions": 581}, "files": [{"sha": "7fa80abc31479840a67cadc19bf703dcfab8f312", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -281,6 +281,7 @@ darwin_driver_init (unsigned int *decoded_options_count,\n   const char *vers_string = NULL;\n   bool seen_version_min = false;\n   bool seen_sysroot_p = false;\n+  bool noexport_p = true;\n \n   for (i = 1; i < *decoded_options_count; i++)\n     {\n@@ -349,6 +350,13 @@ darwin_driver_init (unsigned int *decoded_options_count,\n \t  seen_sysroot_p = true;\n \t  break;\n \n+\tcase OPT_Xlinker:\n+\tcase OPT_Wl_:\n+\t  gcc_checking_assert ((*decoded_options)[i].arg);\n+\t  if (startswith ((*decoded_options)[i].arg, \"-exported_symbol\"))\n+\t    noexport_p = false;\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -474,4 +482,14 @@ darwin_driver_init (unsigned int *decoded_options_count,\n \t\t\t  &(*decoded_options)[*decoded_options_count - 1]);\n         }\n     }\n+\n+  if (noexport_p)\n+    {\n+      ++*decoded_options_count;\n+      *decoded_options = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t     *decoded_options,\n+\t\t\t\t     *decoded_options_count);\n+      generate_option (OPT_nodefaultexport, NULL, 1, CL_DRIVER,\n+\t\t       &(*decoded_options)[*decoded_options_count - 1]);\n+    }\n }"}, {"sha": "c5ba7927ce11a76f9527cf5b58d69b9162ee279c", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -3637,30 +3637,6 @@ darwin_fold_builtin (tree fndecl, int n_args, tree *argp,\n void\n darwin_rename_builtins (void)\n {\n-  /* The system ___divdc3 routine in libSystem on darwin10 is not\n-     accurate to 1ulp, ours is, so we avoid ever using the system name\n-     for this routine and instead install a non-conflicting name that\n-     is accurate.\n-\n-     When -ffast-math or -funsafe-math-optimizations is given, we can\n-     use the faster version.  */\n-  if (!flag_unsafe_math_optimizations)\n-    {\n-      enum built_in_function dcode\n-\t= (enum built_in_function)(BUILT_IN_COMPLEX_DIV_MIN\n-\t\t\t\t   + DCmode - MIN_MODE_COMPLEX_FLOAT);\n-      tree fn = builtin_decl_explicit (dcode);\n-      /* Fortran and c call TARGET_INIT_BUILTINS and\n-\t TARGET_INIT_LIBFUNCS at different times, so we have to put a\n-\t call into each to ensure that at least one of them is called\n-\t after build_common_builtin_nodes.  A better fix is to add a\n-\t new hook to run after build_common_builtin_nodes runs.  */\n-      if (fn)\n-\tset_user_assembler_name (fn, \"___ieee_divdc3\");\n-      fn = builtin_decl_implicit (dcode);\n-      if (fn)\n-\tset_user_assembler_name (fn, \"___ieee_divdc3\");\n-    }\n }\n \n /* Implementation for the TARGET_LIBC_HAS_FUNCTION hook.  */"}, {"sha": "8d8d402325a1f367c682bc01a819dbca0d0b216f", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 65, "deletions": 33, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -378,6 +378,16 @@ extern GTY(()) int darwin_ms_struct;\n       %(link_ssp) \\\n       %:version-compare(>< 10.6 10.7 mmacosx-version-min= -ld10-uwfef) \\\n       %(link_gcc_c_sequence) \\\n+      %{!nodefaultexport:%{dylib|dynamiclib|bundle: \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= -U) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_get_address) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= -exported_symbol) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_get_address) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= -U) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_register_common) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= -exported_symbol) \\\n+\t%:version-compare(>= 10.11 asm_macosx_version_min= ___emutls_register_common) \\\n+      }} \\\n     }}}\\\n     %{!r:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} %{F*} \"\\\n     DARWIN_PIE_SPEC \\\n@@ -404,14 +414,11 @@ extern GTY(()) int darwin_ms_struct;\n /* Tell collect2 to run dsymutil for us as necessary.  */\n #define COLLECT_RUN_DSYMUTIL 1\n \n-/* Fix PR47558 by linking against libSystem ahead of libgcc. See also\n-   PR 80556 and the fallout from this.  */\n-\n+/* We only want one instance of %G, since libSystem (Darwin's -lc) does not\n+   depend on libgcc. */\n #undef  LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n-\"%{!static:%{!static-libgcc: \\\n-    %:version-compare(>= 10.6 mmacosx-version-min= -lSystem) } } \\\n-  %G %{!nolibc:%L}\"\n+ \"%G %{!nolibc:%L} \"\n \n /* ld64 supports a sysroot, it just has a different name and there's no easy\n    way to check for it at config time.  */\n@@ -456,37 +463,62 @@ extern GTY(()) int darwin_ms_struct;\n \n #define LIB_SPEC \"%{!static:-lSystem}\"\n \n-/* Support -mmacosx-version-min by supplying different (stub) libgcc_s.dylib\n-   libraries to link against, and by not linking against libgcc_s on\n-   earlier-than-10.3.9.  If we need exceptions, prior to 10.3.9, then we have\n-   to link the static eh lib, since there's no shared version on the system.\n-\n-   Note that by default, except as above, -lgcc_eh is not linked against.\n+/*\n+   Note that by default, -lgcc_eh is not linked against.\n    This is because,in general, we need to unwind through system libraries that\n    are linked with the shared unwinder in libunwind (or libgcc_s for 10.4/5).\n \n-   The static version of the current libgcc unwinder (which differs from the\n-   implementation in libunwind.dylib on systems Darwin10 [10.6]+) can be used\n-   by specifying -static-libgcc.\n-\n-   If libgcc_eh is linked against, it has to be before -lgcc, because it might\n-   need symbols from -lgcc.  */\n-\n+   For -static-libgcc: < 10.6, use the unwinder in libgcc_eh (and find\n+   the emultls impl. there too).\n+\n+   For -static-libgcc: >= 10.6, the unwinder *still* comes from libSystem and\n+   we find the emutls impl from lemutls_w. In either case, the builtins etc.\n+   are linked from -lgcc.\n+\n+   When we have specified shared-libgcc or any case that might require\n+   exceptions, we pull the libgcc content (including emulated tls) from\n+   -lgcc_s.1 in GCC and the unwinder from /usr/lib/libgcc_s.1 for < 10.6 and\n+   libSystem for >= 10.6 respectively.\n+   Otherwise, we just link the emutls/builtins from convenience libs.\n+\n+   If we need exceptions, prior to 10.3.9, then we have to link the static\n+   eh lib, since there's no shared version on the system.\n+\n+   In all cases, libgcc_s.1 will be installed with the compiler, or any app\n+   built using it, so we can link the builtins and emutls shared on all.\n+\n+   We have to work around that DYLD_XXXX are disabled in macOS 10.11+ which\n+   means that any bootstrap trying to use a shared libgcc with a bumped SO-\n+   name will fail.  This means that we do not accept shared libgcc for these\n+   versions.\n+\n+   For -static-libgcc: >= 10.6, the unwinder *still* comes from libSystem and\n+   we find the emutls impl from lemutls_w. In either case, the builtins etc.\n+   are linked from -lgcc.\n+>\n+   Otherwise, we just link the shared version of gcc_s.1.1 and pick up\n+   exceptions:\n+     * Prior to 10.3.9, then we have to link the static eh lib, since there\n+       is no shared version on the system.\n+     * from 10.3.9 to 10.5, from /usr/lib/libgcc_s.1.dylib\n+     * from 10.6 onwards, from libSystem.dylib\n+\n+   In all cases, libgcc_s.1.1 will be installed with the compiler, or any app\n+   built using it, so we can link the builtins and emutls shared on all.\n+*/\n #undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: -lgcc_eh -lgcc;\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fobjc-exceptions|fgnu-runtime:\t\t   \\\n-       %:version-compare(!> 10.3.9 mmacosx-version-min= -lgcc_eh)\t   \\\n-       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_ext.10.4) \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc ;\t\t\t\t\t\t\t\t   \\\n-      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_ext.10.4) \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc }\"\n+#define REAL_LIBGCC_SPEC \\\n+\"%{static-libgcc|static:\t\t\t\t\t\t  \\\n+    %:version-compare(!> 10.6 mmacosx-version-min= -lgcc_eh)\t\t  \\\n+    %:version-compare(>= 10.6 mmacosx-version-min= -lemutls_w);\t\t  \\\n+   shared-libgcc|fexceptions|fobjc-exceptions|fgnu-runtime:\t\t  \\\n+    %:version-compare(!> 10.11 mmacosx-version-min= -lgcc_s.1.1)\t  \\\n+    %:version-compare(>= 10.11 mmacosx-version-min= -lemutls_w)\t\t  \\\n+    %:version-compare(!> 10.3.9 mmacosx-version-min= -lgcc_eh)\t\t  \\\n+    %:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4)   \\\n+    %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5);\t  \\\n+   : -lemutls_w\t\t\t\t\t\t\t\t  \\\n+  } -lgcc \"\n \n /* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n "}, {"sha": "48d3aa97800adffd2102c0173339d7a050a533ac", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -233,6 +233,10 @@ no_dead_strip_inits_and_terms\n Driver RejectNegative\n (Obsolete) Current linkers never dead-strip these items, so the option is not needed.\n \n+nodefaultexport\n+Driver RejectNegative\n+Do not add a default symbol exports to modules or dynamic libraries.\n+\n nofixprebinding\n Driver RejectNegative\n (Obsolete after 10.3.9) Set MH_NOPREFIXBINDING, in an executable."}, {"sha": "e946a8b261d3b790fe284ce0fb3f75a2d02dd534", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -25,37 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef DARWIN_X86\n #define DARWIN_X86 1\n \n-/* WORKAROUND pr80556:\n-   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n-   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n-   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n-   updated to include new images, and might not even be valid for a single\n-   image.\n-   Therefore, for 64b exes at least, we must use the libunwind implementation,\n-   even when static-libgcc is specified.  We put libSystem first so that\n-   unwinder symbols are satisfied from there.\n-   We default to 64b for single-arch builds, so apply this unconditionally. */\n-#ifndef PR80556_WORKAROUND\n-#define PR80556_WORKAROUND \\\n-\" %:version-compare(>= 10.6 mmacosx-version-min= -lSystem) \"\n-#endif\n-#undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: \"\t\t\t\t\t\t   \\\n-       PR80556_WORKAROUND\t\t\t\t\t\t   \\\n-      \" -lgcc_eh -lgcc;\t\t\t\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc ;\t\t\t\t\t\t\t\t   \\\n-      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc }\"\n-\n /* Size of the Obj-C jump buffer.  */\n #define OBJC_JBLEN ((TARGET_64BIT) ? ((9 * 2) + 3 + 16) : (18))\n "}, {"sha": "ee1508213f271c902d0557ee1a6252ec42ba1dbf", "filename": "gcc/config/i386/darwin32-biarch.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin32-biarch.h?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -24,19 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_64BIT_DEFAULT 0\n #define TARGET_BI_ARCH 1\n \n-/* WORKAROUND pr80556:\n-   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n-   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n-   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n-   updated to include new images, and might not even be valid for a single\n-   image.\n-   Therefore, for 64b exes at least, we must use the libunwind implementation,\n-   even when static-libgcc is specified.  We put libSystem first so that\n-   unwinder symbols are satisfied from there. */\n-#undef PR80556_WORKAROUND\n-#define PR80556_WORKAROUND \\\n-\" %{m64:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)} \"\n-\n #undef  DARWIN_SUBARCH_SPEC\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n "}, {"sha": "d02f7fcc29ef7a9a782448aac241dc152be27afc", "filename": "gcc/config/i386/darwin64-biarch.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin64-biarch.h?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -25,19 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_64BIT_DEFAULT (OPTION_MASK_ISA_64BIT | OPTION_MASK_ABI_64)\n #define TARGET_BI_ARCH 1\n \n-/* WORKAROUND pr80556:\n-   For x86_64 Darwin10 and later, the unwinder is in libunwind (redirected\n-   from libSystem).  This doesn't use the keymgr (see keymgr.c) and therefore\n-   the calls that libgcc makes to obtain the KEYMGR_GCC3_DW2_OBJ_LIST are not\n-   updated to include new images, and might not even be valid for a single\n-   image.\n-   Therefore, for 64b exes at least, we must use the libunwind implementation,\n-   even when static-libgcc is specified.  We put libSystem first so that\n-   unwinder symbols are satisfied from there. */\n-#undef PR80556_WORKAROUND\n-#define PR80556_WORKAROUND \\\n-\" %{!m32:%:version-compare(>= 10.6 mmacosx-version-min= -lSystem)} \"\n-\n #undef  DARWIN_SUBARCH_SPEC\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n "}, {"sha": "707d539335fe43788e9e6b4803f211b9ca4f4f58", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-3.c?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -4,7 +4,6 @@\n /* { dg-require-effective-target int128 } */\n /* { dg-require-effective-target fenv } */\n /* { dg-options \"-frounding-math\" } */\n-/* { dg-xfail-run-if \"see PR80556 c63\" { x86_64-*-darwin* i68?-*-darwin* } { \"*\" } { \"\" } } */\n \n #include <fenv.h>\n #include <stdlib.h>"}, {"sha": "09600f9090312bb4690ba9dab24caac82897f98f", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode-4.c?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -4,7 +4,6 @@\n /* { dg-require-effective-target int128 } */\n /* { dg-require-effective-target fenv } */\n /* { dg-options \"-frounding-math\" } */\n-/* { dg-xfail-run-if \"see PR80556 c63\" { x86_64-*-darwin* i68?-*-darwin* } { \"*\" } { \"\" } } */\n \n #include <fenv.h>\n #include <stdlib.h>"}, {"sha": "734d90ee39b678b16b5f663750363a0b072e66b6", "filename": "libgcc/config.host", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -214,8 +214,11 @@ esac\n case ${host} in\n *-*-darwin*)\n   asm_hidden_op=.private_extern\n-  tmake_file=\"$tmake_file t-darwin ${cpu_type}/t-darwin t-libgcc-pic t-slibgcc-darwin\"\n-  extra_parts=\"crt3.o libd10-uwfef.a crttms.o crttme.o\"\n+  tmake_file=\"$tmake_file t-darwin ${cpu_type}/t-darwin t-libgcc-pic\"\n+  extra_parts=\"crt3.o libd10-uwfef.a crttms.o crttme.o libemutls_w.a\"\n+  # The unwinder is provided by the system shared libraries, do not add one\n+  # to the shared libgcc.\n+  tmake_file=\"$tmake_file t-darwin-noeh t-slibgcc-darwin\"\n   ;;\n *-*-dragonfly*)\n   tmake_file=\"$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip\""}, {"sha": "e22f732c87cf85aa2c394546e1d55a14f57f3dcf", "filename": "libgcc/config/i386/darwin-lib.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Fi386%2Fdarwin-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Fi386%2Fdarwin-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fdarwin-lib.h?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -22,13 +22,4 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-/* The system ___divdc3 routine in libSystem on darwin10 is not\n-   accurate to 1ulp, ours is, so we avoid ever using the system name\n-   for this routine and instead install a non-conflicting name that is\n-   accurate.  See darwin_rename_builtins.  */\n-#ifdef L_divdc3\n-#define DECLARE_LIBRARY_RENAMES \\\n-  asm(\".text; ___divdc3: jmp ___ieee_divdc3 ; .globl ___divdc3\");\n-#endif\n-\n extern void * _darwin10_Unwind_FindEnclosingFunction (void *);"}, {"sha": "b8a73b1f10fa88323684ad0c3d1606691bce34e0", "filename": "libgcc/config/i386/libgcc-darwin.10.4.ver", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.4.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.4.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.4.ver?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -1,98 +0,0 @@\n-# Copyright (C) 2005-2021 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-__Unwind_Backtrace\n-__Unwind_DeleteException\n-__Unwind_FindEnclosingFunction\n-__Unwind_Find_FDE\n-__Unwind_ForcedUnwind\n-__Unwind_GetCFA\n-__Unwind_GetDataRelBase\n-__Unwind_GetGR\n-__Unwind_GetIP\n-__Unwind_GetLanguageSpecificData\n-__Unwind_GetRegionStart\n-__Unwind_GetTextRelBase\n-__Unwind_RaiseException\n-__Unwind_Resume\n-__Unwind_Resume_or_Rethrow\n-__Unwind_SetGR\n-__Unwind_SetIP\n-___absvdi2\n-___absvsi2\n-___addvdi3\n-___addvsi3\n-___ashldi3\n-___ashrdi3\n-___clear_cache\n-___clzdi2\n-___clzsi2\n-___cmpdi2\n-___ctzdi2\n-___ctzsi2\n-___deregister_frame\n-___deregister_frame_info\n-___deregister_frame_info_bases\n-___divdc3\n-___divdi3\n-___divsc3\n-___divxc3\n-___enable_execute_stack\n-___ffsdi2\n-___fixdfdi\n-___fixsfdi\n-___fixunsdfdi\n-___fixunsdfsi\n-___fixunssfdi\n-___fixunssfsi\n-___fixunsxfdi\n-___fixunsxfsi\n-___fixxfdi\n-___floatdidf\n-___floatdisf\n-___floatdixf\n-___gcc_personality_v0\n-___lshrdi3\n-___moddi3\n-___muldc3\n-___muldi3\n-___mulsc3\n-___mulvdi3\n-___mulvsi3\n-___mulxc3\n-___negdi2\n-___negvdi2\n-___negvsi2\n-___paritydi2\n-___paritysi2\n-___popcountdi2\n-___popcountsi2\n-___powidf2\n-___powisf2\n-___powixf2\n-___register_frame\n-___register_frame_info\n-___register_frame_info_bases\n-___register_frame_info_table\n-___register_frame_info_table_bases\n-___register_frame_table\n-___subvdi3\n-___subvsi3\n-___ucmpdi2\n-___udivdi3\n-___udivmoddi4\n-___umoddi3"}, {"sha": "49fd9279d28c4df4193736839bd3b465df544c6c", "filename": "libgcc/config/i386/libgcc-darwin.10.5.ver", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.5.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.5.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-darwin.10.5.ver?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -1,102 +0,0 @@\n-# Copyright (C) 2005-2021 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-__Unwind_Backtrace\n-__Unwind_DeleteException\n-__Unwind_FindEnclosingFunction\n-__Unwind_Find_FDE\n-__Unwind_ForcedUnwind\n-__Unwind_GetCFA\n-__Unwind_GetDataRelBase\n-__Unwind_GetGR\n-__Unwind_GetIP\n-__Unwind_GetIPInfo\n-__Unwind_GetLanguageSpecificData\n-__Unwind_GetRegionStart\n-__Unwind_GetTextRelBase\n-__Unwind_RaiseException\n-__Unwind_Resume\n-__Unwind_Resume_or_Rethrow\n-__Unwind_SetGR\n-__Unwind_SetIP\n-___absvdi2\n-___absvsi2\n-___addvdi3\n-___addvsi3\n-___ashldi3\n-___ashrdi3\n-___clear_cache\n-___clzdi2\n-___clzsi2\n-___cmpdi2\n-___ctzdi2\n-___ctzsi2\n-___deregister_frame\n-___deregister_frame_info\n-___deregister_frame_info_bases\n-___divdc3\n-___divdi3\n-___divsc3\n-___divxc3\n-___enable_execute_stack\n-___ffsdi2\n-___fixdfdi\n-___fixsfdi\n-___fixunsdfdi\n-___fixunsdfsi\n-___fixunssfdi\n-___fixunssfsi\n-___fixunsxfdi\n-___fixunsxfsi\n-___fixxfdi\n-___floatdidf\n-___floatdisf\n-___floatdixf\n-___floatundidf\n-___floatundisf\n-___floatundixf\n-___gcc_personality_v0\n-___lshrdi3\n-___moddi3\n-___muldc3\n-___muldi3\n-___mulsc3\n-___mulvdi3\n-___mulvsi3\n-___mulxc3\n-___negdi2\n-___negvdi2\n-___negvsi2\n-___paritydi2\n-___paritysi2\n-___popcountdi2\n-___popcountsi2\n-___powidf2\n-___powisf2\n-___powixf2\n-___register_frame\n-___register_frame_info\n-___register_frame_info_bases\n-___register_frame_info_table\n-___register_frame_info_table_bases\n-___register_frame_table\n-___subvdi3\n-___subvsi3\n-___ucmpdi2\n-___udivdi3\n-___udivmoddi4\n-___umoddi3"}, {"sha": "697a245869eb7fc400e3c2b25b8ebf6af23d48ac", "filename": "libgcc/config/libgcc-libsystem.ver", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Flibgcc-libsystem.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Flibgcc-libsystem.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibgcc-libsystem.ver?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -1 +1,37 @@\n-_darwin10_Unwind_FindEnclosingFunction\n+# We must use the unwinder provided by the OS, even if that has\n+#\u00a0limitations or bug, so exclude the libgcc_s symbols.\n+\n+%exclude {\n+ _Unwind_DeleteException\n+ _Unwind_Find_FDE\n+ _Unwind_ForcedUnwind\n+ _Unwind_GetGR\n+ _Unwind_GetIP\n+ _Unwind_GetLanguageSpecificData\n+ _Unwind_GetRegionStart\n+ _Unwind_GetTextRelBase\n+ _Unwind_GetDataRelBase\n+ _Unwind_RaiseException\n+ _Unwind_Resume\n+ _Unwind_SetGR\n+ _Unwind_SetIP\n+ _Unwind_SjLj_Register\n+ _Unwind_SjLj_Unregister\n+ _Unwind_SjLj_RaiseException\n+ _Unwind_SjLj_ForcedUnwind\n+ _Unwind_SjLj_Resume\n+ _Unwind_FindEnclosingFunction\n+ _Unwind_GetCFA\n+ _Unwind_Backtrace\n+ _Unwind_Resume_or_Rethrow\n+ _Unwind_SjLj_Resume_or_Rethrow\n+ _Unwind_GetIPInfo\n+\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}"}, {"sha": "b050cb8e704b7e927db18729a67d096cb2fc43ed", "filename": "libgcc/config/rs6000/libgcc-darwin.10.4.ver", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.4.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.4.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.4.ver?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -1,93 +0,0 @@\n-# Copyright (C) 2005-2021 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-__Unwind_Backtrace\n-__Unwind_DeleteException\n-__Unwind_FindEnclosingFunction\n-__Unwind_Find_FDE\n-__Unwind_ForcedUnwind\n-__Unwind_GetCFA\n-__Unwind_GetDataRelBase\n-__Unwind_GetGR\n-__Unwind_GetIP\n-__Unwind_GetLanguageSpecificData\n-__Unwind_GetRegionStart\n-__Unwind_GetTextRelBase\n-__Unwind_RaiseException\n-__Unwind_Resume\n-__Unwind_Resume_or_Rethrow\n-__Unwind_SetGR\n-__Unwind_SetIP\n-___absvdi2\n-___absvsi2\n-___addvdi3\n-___addvsi3\n-___ashldi3\n-___ashrdi3\n-___clear_cache\n-___clzdi2\n-___clzsi2\n-___cmpdi2\n-___ctzdi2\n-___ctzsi2\n-___deregister_frame\n-___deregister_frame_info\n-___deregister_frame_info_bases\n-___divdi3\n-___enable_execute_stack\n-___ffsdi2\n-___fixdfdi\n-___fixsfdi\n-___fixtfdi\n-___fixunsdfdi\n-___fixunsdfsi\n-___fixunssfdi\n-___fixunssfsi\n-___fixunstfdi\n-___floatdidf\n-___floatdisf\n-___floatditf\n-___gcc_personality_v0\n-___gcc_qadd\n-___gcc_qdiv\n-___gcc_qmul\n-___gcc_qsub\n-___lshrdi3\n-___moddi3\n-___muldi3\n-___mulvdi3\n-___mulvsi3\n-___negdi2\n-___negvdi2\n-___negvsi2\n-___paritydi2\n-___paritysi2\n-___popcountdi2\n-___popcountsi2\n-___register_frame\n-___register_frame_info\n-___register_frame_info_bases\n-___register_frame_info_table\n-___register_frame_info_table_bases\n-___register_frame_table\n-___subvdi3\n-___subvsi3\n-___trampoline_setup\n-___ucmpdi2\n-___udivdi3\n-___udivmoddi4\n-___umoddi3"}, {"sha": "dcc548f8a525959c77085feccdf52d37c2e5d18f", "filename": "libgcc/config/rs6000/libgcc-darwin.10.5.ver", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.5.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9873b4e2c9a9955789318f4d550147ef9405b07/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.5.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flibgcc-darwin.10.5.ver?ref=b9873b4e2c9a9955789318f4d550147ef9405b07", "patch": "@@ -1,106 +0,0 @@\n-# Copyright (C) 2005-2021 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-__Unwind_Backtrace\n-__Unwind_DeleteException\n-__Unwind_FindEnclosingFunction\n-__Unwind_Find_FDE\n-__Unwind_ForcedUnwind\n-__Unwind_GetCFA\n-__Unwind_GetDataRelBase\n-__Unwind_GetGR\n-__Unwind_GetIP\n-__Unwind_GetIPInfo\n-__Unwind_GetLanguageSpecificData\n-__Unwind_GetRegionStart\n-__Unwind_GetTextRelBase\n-__Unwind_RaiseException\n-__Unwind_Resume\n-__Unwind_Resume_or_Rethrow\n-__Unwind_SetGR\n-__Unwind_SetIP\n-___absvdi2\n-___absvsi2\n-___addvdi3\n-___addvsi3\n-___ashldi3\n-___ashrdi3\n-___clear_cache\n-___clzdi2\n-___clzsi2\n-___cmpdi2\n-___ctzdi2\n-___ctzsi2\n-___deregister_frame\n-___deregister_frame_info\n-___deregister_frame_info_bases\n-___divdc3\n-___divdi3\n-___divsc3\n-___divtc3\n-___enable_execute_stack\n-___ffsdi2\n-___fixdfdi\n-___fixsfdi\n-___fixtfdi\n-___fixunsdfdi\n-___fixunsdfsi\n-___fixunssfdi\n-___fixunssfsi\n-___fixunstfdi\n-___floatdidf\n-___floatdisf\n-___floatditf\n-___floatundidf\n-___floatundisf\n-___floatunditf\n-___gcc_personality_v0\n-___gcc_qadd\n-___gcc_qdiv\n-___gcc_qmul\n-___gcc_qsub\n-___lshrdi3\n-___moddi3\n-___muldc3\n-___muldi3\n-___mulsc3\n-___multc3\n-___mulvdi3\n-___mulvsi3\n-___negdi2\n-___negvdi2\n-___negvsi2\n-___paritydi2\n-___paritysi2\n-___popcountdi2\n-___popcountsi2\n-___powidf2\n-___powisf2\n-___powitf2\n-___register_frame\n-___register_frame_info\n-___register_frame_info_bases\n-___register_frame_info_table\n-___register_frame_info_table_bases\n-___register_frame_table\n-___subvdi3\n-___subvsi3\n-___trampoline_setup\n-___ucmpdi2\n-___udivdi3\n-___udivmoddi4\n-___umoddi3"}, {"sha": "08d9c1affd3a7b2f897f59bf0551e6eb869609a3", "filename": "libgcc/config/t-darwin-noeh", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Ft-darwin-noeh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Ft-darwin-noeh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-darwin-noeh?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -0,0 +1,4 @@\n+# Most Darwin versions get their unwinder from libSystem.\n+# so remove the unwinder from the shared lib.\n+# We still need it in the _eh.a for Darwin8/9.\n+LIB2ADDEHSHARED ="}, {"sha": "1512267b5aaa74eabe08690c42e363f5a6ca640b", "filename": "libgcc/config/t-slibgcc-darwin", "status": "modified", "additions": 20, "deletions": 54, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Ft-slibgcc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4943ce939d9654932624b9ece24c3a474ae4157/libgcc%2Fconfig%2Ft-slibgcc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-slibgcc-darwin?ref=d4943ce939d9654932624b9ece24c3a474ae4157", "patch": "@@ -1,43 +1,34 @@\n # Build a shared libgcc library with the darwin linker.\n-SHLIB_SOVERSION = 1\n-SHLIB_VERSTRING = -compatibility_version $(SHLIB_SOVERSION) -current_version $(SHLIB_SOVERSION).0\n+\n+SHLIB_SOVERSION = 1.1\n+SHLIB_SO_MINVERSION = 1\n+SHLIB_VERSTRING = -compatibility_version $(SHLIB_SO_MINVERSION) -current_version $(SHLIB_SOVERSION)\n SHLIB_EXT = .dylib\n+SHLIB_LC = -lSystem\n+\n+# Shorthand expressions for the LINK below.\n SHLIB_INSTALL_NAME = @shlib_base_name@.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n-SHLIB_SONAME = @shlib_base_name@$(SHLIB_EXT)\n-SHLIB_SOLINK = @shlib_base_name@.so\n SHLIB_MAP = @shlib_map_file@\n-SHLIB_OBJS = @shlib_objs@\n SHLIB_DIR = @multilib_dir@\n-SHLIB_LC = -lc\n+SHLIB_SONAME = @shlib_base_name@$(SHLIB_EXT)\n \n-# Darwin only searches in /usr/lib for shared libraries, not in subdirectories,\n-# so the libgcc variants have different names not different locations.\n-# Note that this version is used for the loader, not the linker; the linker\n-# uses the stub versions named by the versioned members of $(INSTALL_FILES).\n+# Darwin only searches in shlib_slibdir for shared libraries, not in\n+# subdirectories.  The link builds one architecture slice in its designated\n+# subdir.  The code under MULTIBUILDTOP combines these into a single FAT\n+# library, that is what we eventually install.\n \n SHLIB_LINK = $(CC) $(LIBGCC2_CFLAGS) $(LDFLAGS) -dynamiclib -nodefaultlibs \\\n \t-install_name @shlib_slibdir@/$(SHLIB_INSTALL_NAME) \\\n \t-single_module -o $(SHLIB_DIR)/$(SHLIB_SONAME) \\\n \t-Wl,-exported_symbols_list,$(SHLIB_MAP) \\\n \t$(SHLIB_VERSTRING) \\\n-\t@multilib_flags@ $(SHLIB_OBJS) $(SHLIB_LC)\n+\t@multilib_flags@ @shlib_objs@ $(SHLIB_LC)\n \n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n SHLIB_MKMAP_OPTS = -v leading_underscore=1\n-SHLIB_VERPFX = $(srcdir)/config/$(cpu_type)/libgcc-darwin\n-\n-# we're only going to build the stubs if the target slib is /usr/lib\n-# there is no other case in which they're useful in a live system.\n-ifeq (/usr/lib,$(shlib_slibdir))\n-LGCC_STUBS = libgcc_s.10.4.dylib libgcc_s.10.5.dylib\n-else\n-LGCC_STUBS =\n-endif\n \n LGCC_FILES = libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)\n-LGCC_FILES += $(LGCC_STUBS)\n-LEXT_STUBS = libgcc_ext.10.4$(SHLIB_EXT) libgcc_ext.10.5$(SHLIB_EXT)\n-LGCC_FILES += $(LEXT_STUBS)\n+\n INSTALL_FILES=$(LGCC_FILES)\n \n # we do our own thing\n@@ -51,33 +42,6 @@ all: $(INSTALL_FILES)\n install-leaf: install-darwin-libgcc-stubs\n endif\n \n-# In order to support -mmacosx-version-min, you need to have multiple\n-# different libgcc_s libraries that actually get linked against, one for\n-# each system version supported.  They are 'stub' libraries that\n-# contain no code, just a list of exported symbols.\n-# The actual use of the libraries is controlled by REAL_LIBGCC_SPEC.\n-#\n-# This assumes each multilib corresponds to a different architecture.\n-libgcc_s.%.dylib : all-multi $(SHLIB_VERPFX).%.ver libgcc_s$(SHLIB_EXT)\n-\tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n-\tfor mlib in $$MLIBS ; do \\\n-\t  $(STRIP) -o $(@)_T$${mlib} \\\n-\t    -s $(SHLIB_VERPFX).$(*).ver -c -u \\\n-\t    ../$${mlib}/libgcc/$${mlib}/libgcc_s$(SHLIB_EXT)  || exit 1 ; \\\n-\tdone\n-\t$(LIPO) -output $@ -create $(@)_T*\n-\trm $(@)_T*\n-\n-libgcc_ext.%.dylib : all-multi $(SHLIB_VERPFX).%.ver libgcc_s$(SHLIB_EXT) \n-\tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n-\tfor mlib in $$MLIBS ; do \\\n-\t  $(STRIP) -o $(@)_T$${mlib} \\\n-\t    -R $(SHLIB_VERPFX).$(*).ver -c -urx \\\n-\t    ../$${mlib}/libgcc/$${mlib}/libgcc_s$(SHLIB_EXT) || exit 1 ; \\\n-\tdone\n-\t$(LIPO) -output $@ -create $(@)_T*\n-\trm $(@)_T*\n-\n libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT): all-multi libgcc_s$(SHLIB_EXT)\n \tMLIBS=`$(CC) --print-multi-lib | sed -e 's/;.*$$//'` ; \\\n \tfor mlib in $$MLIBS ; do \\\n@@ -88,6 +52,8 @@ libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT): all-multi libgcc_s$(SHLIB_EXT)\n \t  -create libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n \trm libgcc_s.$(SHLIB_SOVERSION)$(SHLIB_EXT)_T*\n \n+# Install the shared library.\n+\n install-darwin-libgcc-stubs :\n \t$(mkinstalldirs) $(DESTDIR)$(slibdir)\n \tfor d in $(INSTALL_FILES) ; do \\\n@@ -96,10 +62,10 @@ install-darwin-libgcc-stubs :\n \n else\n \n-# Do not install shared libraries for any other multilibs.  Unless\n-# we're putting them in the gcc directory during a build, for\n-# compatibility with the pre-top-level layout.  In that case we\n-# need symlinks.\n+# Do not install shared libraries for any other multilibs.  Unless we are\n+# putting them in the gcc directory during a build, for compatibility with\n+# the pre-top-level layout.  In that case we provide symlinks to the FAT lib\n+# from the sub-directories.\n \n ifeq ($(enable_shared),yes)\n all: install-darwin-libgcc-links"}]}