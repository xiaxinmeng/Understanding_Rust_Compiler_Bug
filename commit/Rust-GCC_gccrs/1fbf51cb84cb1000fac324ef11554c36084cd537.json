{"sha": "1fbf51cb84cb1000fac324ef11554c36084cd537", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiZjUxY2I4NGNiMTAwMGZhYzMyNGVmMTE1NTRjMzYwODRjZDUzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-23T10:06:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-23T10:06:26Z"}, "message": "re PR middle-end/83859 (Please add new attribute which will establish relation between parameters for buffer and its size)\n\n\tPR middle-end/83859\n\t* doc/extend.texi (attribute access): Fix a typo.\n\n\t* c-attribs.c (append_access_attrs): Avoid buffer overflow.  Avoid\n\tmemory leak.  Use XNEWVEC macro.  Use auto_diagnostic_group to\n\tgroup warning with inform together.\n\t(handle_access_attribute): Formatting fix.\n\nFrom-SVN: r278641", "tree": {"sha": "13ae1acd889f6bf845b15c15d9f2176419ea4121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ae1acd889f6bf845b15c15d9f2176419ea4121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fbf51cb84cb1000fac324ef11554c36084cd537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbf51cb84cb1000fac324ef11554c36084cd537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fbf51cb84cb1000fac324ef11554c36084cd537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbf51cb84cb1000fac324ef11554c36084cd537/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba585b91532b5cb382f1e2d21be50e728bca1da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba585b91532b5cb382f1e2d21be50e728bca1da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba585b91532b5cb382f1e2d21be50e728bca1da0"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "e57413167472ebc169ad0f7b5f22a0017c0499b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fbf51cb84cb1000fac324ef11554c36084cd537", "patch": "@@ -1,5 +1,8 @@\n 2019-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/83859\n+\t* doc/extend.texi (attribute access): Fix a typo.\n+\n \tPR rtl-optimization/92610\n \t* cse.c (rest_of_handle_cse2): Call cleanup_cfg (0) also if\n \tcse_cfg_altered is set, even when tem is 0."}, {"sha": "281d7f409b79a0dbdf70e2a163e0399245c2bc73", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1fbf51cb84cb1000fac324ef11554c36084cd537", "patch": "@@ -1,3 +1,11 @@\n+2019-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/83859\n+\t* c-attribs.c (append_access_attrs): Avoid buffer overflow.  Avoid\n+\tmemory leak.  Use XNEWVEC macro.  Use auto_diagnostic_group to\n+\tgroup warning with inform together.\n+\t(handle_access_attribute): Formatting fix.\n+\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/90677"}, {"sha": "cc006f3836612761eab756d678e27b390f16605b", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=1fbf51cb84cb1000fac324ef11554c36084cd537", "patch": "@@ -3840,7 +3840,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n   if (idxs[1])\n     n2 = sprintf (attrspec + n1 + 1, \"%u\", (unsigned) idxs[1] - 1);\n \n-  size_t newlen = n1 + n2;\n+  size_t newlen = n1 + n2 + !!n2;\n   char *newspec = attrspec;\n \n   if (tree acs = lookup_attribute (\"access\", attrs))\n@@ -3869,6 +3869,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \t  if (*attrspec != pos[-1])\n \t    {\n \t      /* Mismatch in access mode.  */\n+\t      auto_diagnostic_group d;\n \t      if (warning (OPT_Wattributes,\n \t\t\t   \"attribute %qs mismatch with mode %qs\",\n \t\t\t   attrstr,\n@@ -3884,6 +3885,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \t  if ((n2 && pos[n1 - 1] != ','))\n \t    {\n \t      /* Mismatch in the presence of the size argument.  */\n+\t      auto_diagnostic_group d;\n \t      if (warning (OPT_Wattributes,\n \t\t\t   \"attribute %qs positional argument 2 conflicts \"\n \t\t\t   \"with previous designation\",\n@@ -3897,6 +3899,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \t  if (!n2 && pos[n1 - 1] == ',')\n \t    {\n \t      /* Mismatch in the presence of the size argument.  */\n+\t      auto_diagnostic_group d;\n \t      if (warning (OPT_Wattributes,\n \t\t\t   \"attribute %qs missing positional argument 2 \"\n \t\t\t   \"provided in previous designation\",\n@@ -3910,6 +3913,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \t  if (n2 && strncmp (attrstr + n1 + 1, pos + n1, n2))\n \t    {\n \t      /* Mismatch in the value of the size argument.  */\n+\t      auto_diagnostic_group d;\n \t      if (warning (OPT_Wattributes,\n \t\t\t   \"attribute %qs mismatch positional argument \"\n \t\t\t   \"values %i and %i\",\n@@ -3929,7 +3933,7 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \tattrspec[n1] = ',';\n \n       size_t len = strlen (str);\n-      newspec = (char *) xmalloc (newlen + len + 1);\n+      newspec = XNEWVEC (char, newlen + len + 1);\n       strcpy (newspec, str);\n       strcpy (newspec + len, attrspec);\n       newlen += len;\n@@ -3938,7 +3942,10 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n     /* Connect the two substrings formatted above into a single one.  */\n     attrspec[n1] = ',';\n \n-  return build_string (newlen + 1, newspec);\n+  tree ret = build_string (newlen + 1, newspec);\n+  if (newspec != attrspec)\n+    XDELETEVEC (newspec);\n+  return ret;\n }\n \n /* Handle the access attribute (read_only, write_only, and read_write).  */\n@@ -4168,7 +4175,8 @@ handle_access_attribute (tree *node, tree name, tree args,\n     {\n       /* Repeat for the previously declared type.  */\n       attrs = TYPE_ATTRIBUTES (TREE_TYPE (node[1]));\n-      tree new_attrs = append_access_attrs (node[1], attrs, attrstr, code, idxs);\n+      tree new_attrs\n+\t= append_access_attrs (node[1], attrs, attrstr, code, idxs);\n       if (!new_attrs)\n \treturn NULL_TREE;\n "}, {"sha": "56a3d60a947293940c27a22cd4547ff059e37431", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbf51cb84cb1000fac324ef11554c36084cd537/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1fbf51cb84cb1000fac324ef11554c36084cd537", "patch": "@@ -2490,7 +2490,7 @@ The following attributes are supported on most targets.\n \n The @code{access} attribute enables the detection of invalid or unsafe\n accesses by functions to which they apply to or their callers, as well\n-as wite-only accesses to objects that are never read from.  Such accesses\n+as write-only accesses to objects that are never read from.  Such accesses\n may be diagnosed by warnings such as @option{-Wstringop-overflow},\n @option{-Wunnitialized}, @option{-Wunused}, and others.\n "}]}