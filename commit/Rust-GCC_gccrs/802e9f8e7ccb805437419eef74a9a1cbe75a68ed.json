{"sha": "802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAyZTlmOGU3Y2NiODA1NDM3NDE5ZWVmNzRhOWExY2JlNzVhNjhlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-18T15:17:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-18T15:17:10Z"}, "message": "re PR debug/34037 (Bounds for VLAs not emitted into debuginfo)\n\n\tPR debug/34037\n\t* gimplify.c (gimplify_type_sizes): When not optimizing, ensure\n\tTYPE_MIN_VALUE and TYPE_MAX_VALUE is not is not DECL_IGNORED_P\n\tVAR_DECL.\n\t* cfgexpand.c (expand_used_vars): Keep DECL_ARTIFICIAL\n\t!DECL_IGNORED_P vars in local_decls list for instantiate_decls,\n\tggc_free other TREE_LIST nodes from that chain.\n\t* function.c (instantiate_decls): Instantiate also DECL_RTL\n\tof vars in cfun->local_decls, free that list afterwards.\n\nFrom-SVN: r140459", "tree": {"sha": "898acbe389ec22bb548f7bcc5341513f81c694a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898acbe389ec22bb548f7bcc5341513f81c694a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/comments", "author": null, "committer": null, "parents": [{"sha": "a2cd689a680e5287cbb4d704ca71092257583e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cd689a680e5287cbb4d704ca71092257583e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2cd689a680e5287cbb4d704ca71092257583e96"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "4a6370563ba40195249c9b61e36757b7e447a39e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "patch": "@@ -1,11 +1,23 @@\n+2008-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/34037\n+\t* gimplify.c (gimplify_type_sizes): When not optimizing, ensure\n+\tTYPE_MIN_VALUE and TYPE_MAX_VALUE is not is not DECL_IGNORED_P\n+\tVAR_DECL.\n+\t* cfgexpand.c (expand_used_vars): Keep DECL_ARTIFICIAL\n+\t!DECL_IGNORED_P vars in local_decls list for instantiate_decls,\n+\tggc_free other TREE_LIST nodes from that chain.\n+\t* function.c (instantiate_decls): Instantiate also DECL_RTL\n+\tof vars in cfun->local_decls, free that list afterwards.\n+\n 2008-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sol2.h (WIDEST_HARDWARE_FP_SIZE): Move to...\n \t* config/sparc/sparc.h (WIDEST_HARDWARE_FP_SIZE): ...here.\n \n 2008-09-18  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* tree-outof-ssa.c (eliminate_useless_phis): fix formatting.\n+\t* tree-outof-ssa.c (eliminate_useless_phis): Fix formatting.\n \t* tree-flow-.h (struct immediate_use_iterator_d): Fix comment.\n \n 2008-09-18  Andrew MacLeod  <amacleod@redhat.com>"}, {"sha": "06111cc85dfdb9d00fc28511a548c0f27fd29aa8", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "patch": "@@ -1440,7 +1440,7 @@ estimated_stack_frame_size (void)\n static void\n expand_used_vars (void)\n {\n-  tree t, outer_block = DECL_INITIAL (current_function_decl);\n+  tree t, next, outer_block = DECL_INITIAL (current_function_decl);\n \n   /* Compute the phase of the stack frame for this function.  */\n   {\n@@ -1453,11 +1453,15 @@ expand_used_vars (void)\n \n   /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n-  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n+  t = cfun->local_decls;\n+  cfun->local_decls = NULL_TREE;\n+  for (; t; t = next)\n     {\n       tree var = TREE_VALUE (t);\n       bool expand_now = false;\n \n+      next = TREE_CHAIN (t);\n+\n       /* We didn't set a block for static or extern because it's hard\n \t to tell the difference between a global variable (re)declared\n \t in a local scope, and one that's really declared there to\n@@ -1484,9 +1488,25 @@ expand_used_vars (void)\n       TREE_USED (var) = 1;\n \n       if (expand_now)\n-\texpand_one_var (var, true, true);\n+\t{\n+\t  expand_one_var (var, true, true);\n+\t  if (DECL_ARTIFICIAL (var) && !DECL_IGNORED_P (var))\n+\t    {\n+\t      rtx rtl = DECL_RTL_IF_SET (var);\n+\n+\t      /* Keep artificial non-ignored vars in cfun->local_decls\n+\t\t chain until instantiate_decls.  */\n+\t      if (rtl && (MEM_P (rtl) || GET_CODE (rtl) == CONCAT))\n+\t\t{\n+\t\t  TREE_CHAIN (t) = cfun->local_decls;\n+\t\t  cfun->local_decls = t;\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t}\n+\n+      ggc_free (t);\n     }\n-  cfun->local_decls = NULL_TREE;\n \n   /* At this point, all variables within the block tree with TREE_USED\n      set are actually used by the optimized function.  Lay them out.  */"}, {"sha": "08dc95a697c479b2ab9c09187c9da984d9cf8127", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "patch": "@@ -1634,7 +1634,7 @@ instantiate_decls_1 (tree let)\n static void\n instantiate_decls (tree fndecl)\n {\n-  tree decl;\n+  tree decl, t, next;\n \n   /* Process all parameters of the function.  */\n   for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n@@ -1650,6 +1650,17 @@ instantiate_decls (tree fndecl)\n \n   /* Now process all variables defined in the function or its subblocks.  */\n   instantiate_decls_1 (DECL_INITIAL (fndecl));\n+\n+  t = cfun->local_decls;\n+  cfun->local_decls = NULL_TREE;\n+  for (; t; t = next)\n+    {\n+      next = TREE_CHAIN (t);\n+      decl = TREE_VALUE (t);\n+      if (DECL_RTL_SET_P (decl))\n+\tinstantiate_decl_rtl (DECL_RTL (decl));\n+      ggc_free (t);\n+    }\n }\n \n /* Pass through the INSNS of function FNDECL and convert virtual register"}, {"sha": "d723d9f16a925d17d527924c3a8af6358032fbbc", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802e9f8e7ccb805437419eef74a9a1cbe75a68ed/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "patch": "@@ -7117,6 +7117,18 @@ gimplify_type_sizes (tree type, gimple_seq *list_p)\n       /* These types may not have declarations, so handle them here.  */\n       gimplify_type_sizes (TREE_TYPE (type), list_p);\n       gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n+      /* When not optimizing, ensure VLA bounds aren't removed.  */\n+      if (!optimize\n+\t  && TYPE_DOMAIN (type)\n+\t  && INTEGRAL_TYPE_P (TYPE_DOMAIN (type)))\n+\t{\n+\t  t = TYPE_MIN_VALUE (TYPE_DOMAIN (type));\n+\t  if (t && TREE_CODE (t) == VAR_DECL && DECL_ARTIFICIAL (t))\n+\t    DECL_IGNORED_P (t) = 0;\n+\t  t = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n+\t  if (t && TREE_CODE (t) == VAR_DECL && DECL_ARTIFICIAL (t))\n+\t    DECL_IGNORED_P (t) = 0;\n+\t}\n       break;\n \n     case RECORD_TYPE:"}]}