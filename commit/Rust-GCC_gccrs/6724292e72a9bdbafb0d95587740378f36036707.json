{"sha": "6724292e72a9bdbafb0d95587740378f36036707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyNDI5MmU3MmE5YmRiYWZiMGQ5NTU4Nzc0MDM3OGYzNjAzNjcwNw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2012-06-15T08:08:04Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2012-06-15T08:08:04Z"}, "message": "locks.h (compare_and_swap): Use __sync_bool_compare_and_swap.\n\n* sysdep/m68k/locks.h (compare_and_swap): Use\n__sync_bool_compare_and_swap.\n(release_set): Use write_barrier instead of inlining it.\n\nFrom-SVN: r188650", "tree": {"sha": "834d286e04de8d065be612e76864a87b5b2265fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834d286e04de8d065be612e76864a87b5b2265fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6724292e72a9bdbafb0d95587740378f36036707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6724292e72a9bdbafb0d95587740378f36036707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6724292e72a9bdbafb0d95587740378f36036707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6724292e72a9bdbafb0d95587740378f36036707/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d017004b14f0b9bcca104b478310574b25705b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d017004b14f0b9bcca104b478310574b25705b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d017004b14f0b9bcca104b478310574b25705b2"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "8a6dd0f1d90abd9409dad2a15b2abac76f3926bb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6724292e72a9bdbafb0d95587740378f36036707/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6724292e72a9bdbafb0d95587740378f36036707/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6724292e72a9bdbafb0d95587740378f36036707", "patch": "@@ -1,3 +1,9 @@\n+2012-06-15  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* sysdep/m68k/locks.h (compare_and_swap): Use\n+\t__sync_bool_compare_and_swap.\n+\t(release_set): Use write_barrier instead of inlining it.\n+\n 2012-06-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* sysdep/s390/locks.h (compare_and_swap, release_set)"}, {"sha": "b51e314f5725f28755f253310e0ba2646b531584", "filename": "libjava/sysdep/m68k/locks.h", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6724292e72a9bdbafb0d95587740378f36036707/libjava%2Fsysdep%2Fm68k%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6724292e72a9bdbafb0d95587740378f36036707/libjava%2Fsysdep%2Fm68k%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fm68k%2Flocks.h?ref=6724292e72a9bdbafb0d95587740378f36036707", "patch": "@@ -1,6 +1,6 @@\n // locks.h - Thread synchronization primitives. m68k implementation.\n \n-/* Copyright (C) 2006  Free Software Foundation\n+/* Copyright (C) 2006, 2012  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -22,12 +22,24 @@ static inline bool\n compare_and_swap(volatile obj_addr_t *addr,\n \t\t obj_addr_t old, obj_addr_t new_val)\n {\n-  char result;\n-  __asm__ __volatile__(\"cas.l %2,%3,%0; seq %1\"\n-\t      \t: \"+m\" (*addr), \"=d\" (result), \"+d\" (old)\n-\t\t: \"d\" (new_val)\n-\t\t: \"memory\");\n-  return (bool) result;\n+  return __sync_bool_compare_and_swap (addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+// On m68k, the hardware ensures that reads are properly ordered.\n+static inline void\n+read_barrier(void)\n+{\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+static inline void\n+write_barrier(void)\n+{\n+  // m68k does not reorder writes. We just need to ensure that gcc also doesn't.\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n }\n \n // Set *addr to new_val with release semantics, i.e. making sure\n@@ -38,8 +50,8 @@ compare_and_swap(volatile obj_addr_t *addr,\n static inline void\n release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n {\n-  __asm__ __volatile__(\" \" : : : \"memory\");\n-  *(addr) = new_val;\n+  write_barrier ();\n+  *addr = new_val;\n }\n \n // Compare_and_swap with release semantics instead of acquire semantics.\n@@ -53,20 +65,4 @@ compare_and_swap_release(volatile obj_addr_t *addr,\n   return compare_and_swap(addr, old, new_val);\n }\n \n-// Ensure that subsequent instructions do not execute on stale\n-// data that was loaded from memory before the barrier.\n-// On m68k, the hardware ensures that reads are properly ordered.\n-static inline void\n-read_barrier(void)\n-{\n-}\n-\n-// Ensure that prior stores to memory are completed with respect to other\n-// processors.\n-static inline void\n-write_barrier(void)\n-{\n-  // m68k does not reorder writes. We just need to ensure that gcc also doesn't.\n-  __asm__ __volatile__(\" \" : : : \"memory\");\n-}\n #endif"}]}