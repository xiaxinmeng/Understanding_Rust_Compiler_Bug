{"sha": "4fe70b3151497166c316c45e5eec842f9de3a3f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlNzBiMzE1MTQ5NzE2NmMzMTZjNDVlNWVlYzg0MmY5ZGUzYTNmMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-02-05T07:57:49Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-02-05T07:57:49Z"}, "message": "cp-tree.h (OMP_ATOMIC_CODE): Delete.\n\n2007-02-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* cp-tree.h (OMP_ATOMIC_CODE): Delete.\n\t(OMP_ATOMIC_DEPENDENT_P): Rewrite.\n\t* pt.c (tsubst_expr): Adjust for new format of dependent OMP_ATOMIC\n\texpressions.\n\t* semantics.c (finish_omp_atomic): Store a whole expression node\n\tin operand 1, and integer_zero_node in operand 0, for dependent\n\tOMP_ATOMIC.  Rewrite to make flow easier to understand.\n\nFrom-SVN: r121592", "tree": {"sha": "72e2ca11bf540b559a9b8d7dbb132697b28c88ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e2ca11bf540b559a9b8d7dbb132697b28c88ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fe70b3151497166c316c45e5eec842f9de3a3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe70b3151497166c316c45e5eec842f9de3a3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe70b3151497166c316c45e5eec842f9de3a3f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe70b3151497166c316c45e5eec842f9de3a3f2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c1c7aaea2a967a51f6ec39b39bbd8d4fa6d6aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1c7aaea2a967a51f6ec39b39bbd8d4fa6d6aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1c7aaea2a967a51f6ec39b39bbd8d4fa6d6aed"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "bd78f583278f7323f11950a51a0d1f432e3a415b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4fe70b3151497166c316c45e5eec842f9de3a3f2", "patch": "@@ -1,3 +1,13 @@\n+2007-02-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* cp-tree.h (OMP_ATOMIC_CODE): Delete.\n+\t(OMP_ATOMIC_DEPENDENT_P): Rewrite.\n+\t* pt.c (tsubst_expr): Adjust for new format of dependent OMP_ATOMIC\n+\texpressions.\n+\t* semantics.c (finish_omp_atomic): Store a whole expression node\n+\tin operand 1, and integer_zero_node in operand 0, for dependent\n+\tOMP_ATOMIC.  Rewrite to make flow easier to understand.\n+\n 2007-02-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* decl.c (grokdeclarator): Use OPT_Wreturn_type instead of 0."}, {"sha": "4de73ff9c00642057d7f98498bcc672dd9c9004e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4fe70b3151497166c316c45e5eec842f9de3a3f2", "patch": "@@ -3040,13 +3040,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   (TREE_LANG_FLAG_0 (SCOPE_REF_CHECK (NODE)))\n \n /* True for an OMP_ATOMIC that has dependent parameters.  These are stored\n-   as bare LHS/RHS, and not as ADDR/RHS, as in the generic statement.  */\n+   as an expr in operand 1, and integer_zero_node in operand 0.  */\n #define OMP_ATOMIC_DEPENDENT_P(NODE) \\\n-  (TREE_LANG_FLAG_0 (OMP_ATOMIC_CHECK (NODE)))\n-\n-/* Used to store the operation code when OMP_ATOMIC_DEPENDENT_P is set.  */\n-#define OMP_ATOMIC_CODE(NODE) \\\n-  (OMP_ATOMIC_CHECK (NODE)->exp.complexity)\n+  (TREE_CODE (TREE_OPERAND (OMP_ATOMIC_CHECK (NODE), 0)) == INTEGER_CST)\n \n /* Used while gimplifying continue statements bound to OMP_FOR nodes.  */\n #define OMP_FOR_GIMPLIFYING_P(NODE) \\"}, {"sha": "ba203534e51a56f8f4092ec105f00cb356496ebc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4fe70b3151497166c316c45e5eec842f9de3a3f2", "patch": "@@ -8917,12 +8917,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       break;\n \n     case OMP_ATOMIC:\n-      {\n-\ttree op0, op1;\n-\top0 = RECUR (TREE_OPERAND (t, 0));\n-\top1 = RECUR (TREE_OPERAND (t, 1));\n-\tfinish_omp_atomic (OMP_ATOMIC_CODE (t), op0, op1);\n-      }\n+      if (OMP_ATOMIC_DEPENDENT_P (t))\n+        {\n+\t  tree op1 = TREE_OPERAND (t, 1);\n+\t  tree lhs = RECUR (TREE_OPERAND (op1, 0));\n+\t  tree rhs = RECUR (TREE_OPERAND (op1, 1));\n+\t  finish_omp_atomic (TREE_CODE (op1), lhs, rhs);\n+        }\n       break;\n \n     default:"}, {"sha": "326bcfb4d5a1e26e195a820f27fdd9fead3b1067", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe70b3151497166c316c45e5eec842f9de3a3f2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4fe70b3151497166c316c45e5eec842f9de3a3f2", "patch": "@@ -3867,41 +3867,28 @@ finish_omp_for (location_t locus, tree decl, tree init, tree cond,\n void\n finish_omp_atomic (enum tree_code code, tree lhs, tree rhs)\n {\n-  tree orig_lhs;\n-  tree orig_rhs;\n-  bool dependent_p;\n   tree stmt;\n \n-  orig_lhs = lhs;\n-  orig_rhs = rhs;\n-  dependent_p = false;\n-  stmt = NULL_TREE;\n-\n-  /* Even in a template, we can detect invalid uses of the atomic\n-     pragma if neither LHS nor RHS is type-dependent.  */\n-  if (processing_template_decl)\n+  if (processing_template_decl\n+      && (type_dependent_expression_p (lhs) \n+\t  || type_dependent_expression_p (rhs)))\n+    stmt = build2 (OMP_ATOMIC, void_type_node, integer_zero_node,\n+\t\t   build2 (code, void_type_node, lhs, rhs));\n+  else\n     {\n-      dependent_p = (type_dependent_expression_p (lhs) \n-\t\t     || type_dependent_expression_p (rhs));\n-      if (!dependent_p)\n+      /* Even in a template, we can detect invalid uses of the atomic\n+         pragma if neither LHS nor RHS is type-dependent.  */\n+      if (processing_template_decl)\n \t{\n \t  lhs = build_non_dependent_expr (lhs);\n \t  rhs = build_non_dependent_expr (rhs);\n \t}\n-    }\n-  if (!dependent_p)\n-    {\n+\n       stmt = c_finish_omp_atomic (code, lhs, rhs);\n-      if (stmt == error_mark_node)\n-\treturn;\n     }\n-  if (processing_template_decl)\n-    {\n-      stmt = build2 (OMP_ATOMIC, void_type_node, orig_lhs, orig_rhs);\n-      OMP_ATOMIC_DEPENDENT_P (stmt) = 1;\n-      OMP_ATOMIC_CODE (stmt) = code;\n-    }\n-  add_stmt (stmt);\n+    \n+  if (stmt != error_mark_node)\n+    add_stmt (stmt);\n }\n \n void"}]}