{"sha": "191fe2bba261213a888b5e32919e2752664aa017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxZmUyYmJhMjYxMjEzYTg4OGI1ZTMyOTE5ZTI3NTI2NjRhYTAxNw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-10-04T05:23:12Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-10-04T05:23:12Z"}, "message": "vax.c (vax_output_function_prologue): Use asm_fprintf.\n\n* config/vax/vax.c (vax_output_function_prologue): Use asm_fprintf.\n* config/vax/vax.h (VAX_FUNCTION_PROFILER_NAME): New.\n(FUNCTION_PROFILER): Rewrite to use ASM_GENERATE_INTERNAL_LABEL,\nassemble_name, asm_fprintf, and VAX_FUNCTION_PROFILER_NAME.\n(ASM_OUTPUT_MI_THUNK): Use asm_fprintf instead of REGISTER_PREFIX.\n(PRINT_OPERAND_PUNCT_VALID_P): Fix comment.\n* config/vax/elf.h (FUNCTION_PROFILER): Remove.\n(VAX_FUNCTION_PROFILER_NAME): Redefine as \"__mcount\".\n\nFrom-SVN: r57801", "tree": {"sha": "32d6241acb1d580c8d43a037201b156b984d098a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d6241acb1d580c8d43a037201b156b984d098a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191fe2bba261213a888b5e32919e2752664aa017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191fe2bba261213a888b5e32919e2752664aa017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191fe2bba261213a888b5e32919e2752664aa017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191fe2bba261213a888b5e32919e2752664aa017/comments", "author": null, "committer": null, "parents": [{"sha": "bd9bb3d2b01e5f69a42118114baddf16e1862101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9bb3d2b01e5f69a42118114baddf16e1862101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9bb3d2b01e5f69a42118114baddf16e1862101"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "44a509c4765fe3786e84ed8b480b55612d73a847", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191fe2bba261213a888b5e32919e2752664aa017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191fe2bba261213a888b5e32919e2752664aa017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=191fe2bba261213a888b5e32919e2752664aa017", "patch": "@@ -1,3 +1,14 @@\n+2002-10-03  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/vax/vax.c (vax_output_function_prologue): Use asm_fprintf.\n+\t* config/vax/vax.h (VAX_FUNCTION_PROFILER_NAME): New.\n+\t(FUNCTION_PROFILER): Rewrite to use ASM_GENERATE_INTERNAL_LABEL,\n+\tassemble_name, asm_fprintf, and VAX_FUNCTION_PROFILER_NAME.\n+\t(ASM_OUTPUT_MI_THUNK): Use asm_fprintf instead of REGISTER_PREFIX.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Fix comment.\n+\t* config/vax/elf.h (FUNCTION_PROFILER): Remove.\n+\t(VAX_FUNCTION_PROFILER_NAME): Redefine as \"__mcount\".\n+\n 2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/invoke.texi (-Wabi): Document mangling bug."}, {"sha": "fe00d22336c5b5f7ab1f7178c6d4dbbbd57047be", "filename": "gcc/config/vax/elf.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Felf.h?ref=191fe2bba261213a888b5e32919e2752664aa017", "patch": "@@ -33,11 +33,9 @@ Boston, MA 02111-1307, USA.  */\n #define PTRDIFF_TYPE \"long int\"\n \n /* Profiling routine.  */\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-  fprintf (FILE, \"\\tmovab .LP%d,%sr0\\n\\tjsb __mcount\\n\", (LABELNO), \\\n-           REGISTER_PREFIX)\n-  \n+#undef VAX_FUNCTION_PROFILER_NAME\n+#define VAX_FUNCTION_PROFILER_NAME \"__mcount\"\n+\n /*  Let's be re-entrant.  */\n #undef PCC_STATIC_STRUCT_RETURN\n "}, {"sha": "ba091dc811d11cd8a6ccc60f62277dbb5423bdf5", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=191fe2bba261213a888b5e32919e2752664aa017", "patch": "@@ -127,16 +127,14 @@ vax_output_function_prologue (file, size)\n \t will end up adding them right back again, but don't bother.  */\n \n       if (MAIN_NAME_P (DECL_NAME (current_function_decl)))\n-\tfprintf (file, \"\\tclrl -(%ssp)\\n\\tjsb _C$MAIN_ARGS\\n\",\n-\t         REGISTER_PREFIX);\n+\tasm_fprintf (file, \"\\tclrl -(%Rsp)\\n\\tjsb _C$MAIN_ARGS\\n\");\n     }\n \n   size -= STARTING_FRAME_OFFSET;\n   if (size >= 64)\n-    fprintf (file, \"\\tmovab %d(%ssp),%ssp\\n\", -size, REGISTER_PREFIX,\n-\t     REGISTER_PREFIX);\n+    asm_fprintf (file, \"\\tmovab %d(%Rsp),%Rsp\\n\", -size);\n   else if (size)\n-    fprintf (file, \"\\tsubl2 $%d,%ssp\\n\", size, REGISTER_PREFIX);\n+    asm_fprintf (file, \"\\tsubl2 $%d,%Rsp\\n\", size);\n }\n \n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */"}, {"sha": "fe07f42e8505aaf2b272252bc7f49f141b254393", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191fe2bba261213a888b5e32919e2752664aa017/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=191fe2bba261213a888b5e32919e2752664aa017", "patch": "@@ -470,9 +470,18 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-   fprintf (FILE, \"\\tmovab LP%d,%s\\n\\tjsb mcount\\n\", (LABELNO), \\\n-\t    reg_names[0]);\n+#define VAX_FUNCTION_PROFILER_NAME \"mcount\"\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      char label[256];\t\t\t\t\t\t\\\n+      ASM_GENERATE_INTERNAL_LABEL (label, \"LP\", (LABELNO));\t\\\n+      fprintf (FILE, \"\\tmovab \");\t\t\t\t\\\n+      assemble_name (FILE, label);\t\t\t\t\\\n+      asm_fprintf (FILE, \",%Rr0\\n\\tjsb %s\\n\",\t\t\t\\\n+\t\t   VAX_FUNCTION_PROFILER_NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n@@ -1155,7 +1164,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\taddl2 $%d,4(%sap)\\n\", DELTA, REGISTER_PREFIX);\t\\\n+  asm_fprintf (FILE, \"\\taddl2 $%d,4(%Rap)\\n\", DELTA);\t\t\t\\\n   fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t\\\n   assemble_name (FILE,  XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n   fprintf (FILE, \"+2\\n\");\t\t\t\t\t\t\\\n@@ -1178,7 +1187,8 @@ VAX operand formatting codes:\n    R\t32 - constant operand\n    b\tthe low 8 bits of a negated constant operand\n    h\tthe low 16 bits of a negated constant operand\n-   #\t'd' or 'g' depending on whether dfloat or gfloat is used  */\n+   #\t'd' or 'g' depending on whether dfloat or gfloat is used\n+   |\tregister prefix  */\n \n /* The purpose of D is to get around a quirk or bug in VAX assembler\n    whereby -1 in a 64-bit immediate operand means 0x00000000ffffffff,"}]}