{"sha": "53a643f8568067d7700a9f2facc8ba39974973d3", "node_id": "C_kwDOANBUbNoAKDUzYTY0M2Y4NTY4MDY3ZDc3MDBhOWYyZmFjYzhiYTM5OTc0OTczZDM", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-10-27T14:48:54Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-17T21:35:31Z"}, "message": "x86: Add -mharden-sls=[none|all|return|indirect-branch]\n\nAdd -mharden-sls= to mitigate against straight line speculation (SLS)\nfor function return and indirect branch by adding an INT3 instruction\nafter function return and indirect branch.\n\ngcc/\n\n\tPR target/102952\n\t* config/i386/i386-opts.h (harden_sls): New enum.\n\t* config/i386/i386.c (output_indirect_thunk): Mitigate against\n\tSLS for function return.\n\t(ix86_output_function_return): Likewise.\n\t(ix86_output_jmp_thunk_or_indirect): Mitigate against indirect\n\tbranch.\n\t(ix86_output_indirect_jmp): Likewise.\n\t(ix86_output_call_insn): Likewise.\n\t* config/i386/i386.opt: Add -mharden-sls=.\n\t* doc/invoke.texi: Document -mharden-sls=.\n\ngcc/testsuite/\n\n\tPR target/102952\n\t* gcc.target/i386/harden-sls-1.c: New test.\n\t* gcc.target/i386/harden-sls-2.c: Likewise.\n\t* gcc.target/i386/harden-sls-3.c: Likewise.\n\t* gcc.target/i386/harden-sls-4.c: Likewise.\n\t* gcc.target/i386/harden-sls-5.c: Likewise.", "tree": {"sha": "964ff4b7dbbab01a9b2e2f006c5a46c4e550c508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964ff4b7dbbab01a9b2e2f006c5a46c4e550c508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53a643f8568067d7700a9f2facc8ba39974973d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a643f8568067d7700a9f2facc8ba39974973d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a643f8568067d7700a9f2facc8ba39974973d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a643f8568067d7700a9f2facc8ba39974973d3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e410de43ce039bbe08f1e0195e3b6ec24f68cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e410de43ce039bbe08f1e0195e3b6ec24f68cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e410de43ce039bbe08f1e0195e3b6ec24f68cae"}], "stats": {"total": 133, "additions": 125, "deletions": 8}, "files": [{"sha": "171d3106d0a1d3418ca79b9e808e410dec3c6468", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -121,4 +121,11 @@ enum instrument_return {\n   instrument_return_nop5\n };\n \n+enum harden_sls {\n+  harden_sls_none = 0,\n+  harden_sls_return = 1 << 0,\n+  harden_sls_indirect_branch = 1 << 1,\n+  harden_sls_all = harden_sls_return | harden_sls_indirect_branch\n+};\n+\n #endif"}, {"sha": "c246c8736f53c0c451694a3d6d532a9303a3cb6f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -5914,6 +5914,8 @@ output_indirect_thunk (unsigned int regno)\n     }\n \n   fputs (\"\\tret\\n\", asm_out_file);\n+  if ((ix86_harden_sls & harden_sls_return))\n+    fputs (\"\\tint3\\n\", asm_out_file);\n }\n \n /* Output a funtion with a call and return thunk for indirect branch.\n@@ -15983,6 +15985,8 @@ ix86_output_jmp_thunk_or_indirect (const char *thunk_name, const int regno)\n       fprintf (asm_out_file, \"\\tjmp\\t\");\n       assemble_name (asm_out_file, thunk_name);\n       putc ('\\n', asm_out_file);\n+      if ((ix86_harden_sls & harden_sls_indirect_branch))\n+\tfputs (\"\\tint3\\n\", asm_out_file);\n     }\n   else\n     output_indirect_thunk (regno);\n@@ -16201,10 +16205,10 @@ ix86_output_indirect_jmp (rtx call_op)\n \tgcc_unreachable ();\n \n       ix86_output_indirect_branch (call_op, \"%0\", true);\n-      return \"\";\n     }\n   else\n-    return \"%!jmp\\t%A0\";\n+    output_asm_insn (\"%!jmp\\t%A0\", &call_op);\n+  return (ix86_harden_sls & harden_sls_indirect_branch) ? \"int3\" : \"\";\n }\n \n /* Output return instrumentation for current function if needed.  */\n@@ -16272,10 +16276,8 @@ ix86_output_function_return (bool long_p)\n       return \"\";\n     }\n \n-  if (!long_p)\n-    return \"ret\";\n-\n-  return \"rep%; ret\";\n+  output_asm_insn (long_p ? \"rep%; ret\" : \"ret\", nullptr);\n+  return (ix86_harden_sls & harden_sls_return) ? \"int3\" : \"\";\n }\n \n /* Output indirect function return.  RET_OP is the function return\n@@ -16370,7 +16372,12 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n       if (output_indirect_p && !direct_p)\n \tix86_output_indirect_branch (call_op, xasm, true);\n       else\n-\toutput_asm_insn (xasm, &call_op);\n+\t{\n+\t  output_asm_insn (xasm, &call_op);\n+\t  if (!direct_p\n+\t      && (ix86_harden_sls & harden_sls_indirect_branch))\n+\t    return \"int3\";\n+\t}\n       return \"\";\n     }\n "}, {"sha": "2b6d8aab1014889ff2d4d238d931e852e95262da", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -1117,6 +1117,26 @@ mrecord-return\n Target Var(ix86_flag_record_return) Init(0)\n Generate a __return_loc section pointing to all return instrumentation code.\n \n+mharden-sls=\n+Target RejectNegative Joined Enum(harden_sls) Var(ix86_harden_sls) Init(harden_sls_none)\n+Generate code to mitigate against straight line speculation.\n+\n+Enum\n+Name(harden_sls) Type(enum harden_sls)\n+Known choices for mitigation against straight line speculation with -mharden-sls=:\n+\n+EnumValue\n+Enum(harden_sls) String(none) Value(harden_sls_none)\n+\n+EnumValue\n+Enum(harden_sls) String(return) Value(harden_sls_return)\n+\n+EnumValue\n+Enum(harden_sls) String(indirect-branch) Value(harden_sls_indirect_branch)\n+\n+EnumValue\n+Enum(harden_sls) String(all) Value(harden_sls_all)\n+\n mavx512bf16\n Target Mask(ISA2_AVX512BF16) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and"}, {"sha": "d62ec08150e1862918c7c28d60869423e2d3b5a3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -1427,7 +1427,7 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-symbol=@var{symbol} @gol\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues -mrelax-cmpxchg-loop @gol\n -mindirect-branch=@var{choice}  -mfunction-return=@var{choice} @gol\n--mindirect-branch-register -mneeded}\n+-mindirect-branch-register -mharden-sls=@var{choice} -mneeded}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -32408,6 +32408,14 @@ not be reachable in the large code model.\n @opindex mindirect-branch-register\n Force indirect call and jump via register.\n \n+@item -mharden-sls=@var{choice}\n+@opindex mharden-sls\n+Generate code to mitigate against straight line speculation (SLS) with\n+@var{choice}.  The default is @samp{none} which disables all SLS\n+hardening.  @samp{return} enables SLS hardening for function return.\n+@samp{indirect-branch} enables SLS hardening for indirect branch.\n+@samp{all} enables all SLS hardening.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "6f70dc94a2396a84cf155fcf7129764b3b35ae36", "filename": "gcc/testsuite/gcc.target/i386/harden-sls-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-1.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -mharden-sls=all\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]+_?foo\" } } */\n+/* { dg-final { scan-assembler-not {int3} } } */"}, {"sha": "a7c59078d03cec0bdc0f0703e1c42da4bb263c32", "filename": "gcc/testsuite/gcc.target/i386/harden-sls-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-2.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -mharden-sls=all\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void (*fptr) (void);\n+\n+void\n+foo (void)\n+{\n+  fptr ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]+_?__x86_indirect_thunk_(r|e)ax\" } } */\n+/* { dg-final { scan-assembler-times \"int3\" 1 } } */"}, {"sha": "1a6056b6d7b3ab52430354a0b2fc0d1d6a3f4d11", "filename": "gcc/testsuite/gcc.target/i386/harden-sls-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-3.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -mharden-sls=all\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void (*fptr) (void);\n+\n+void\n+foo (void)\n+{\n+  fptr ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]+_?__x86_indirect_thunk_(r|e)ax\" } } */\n+/* { dg-final { scan-assembler-times \"int3\" 2 } } */"}, {"sha": "f70dd1379d31fabd7eac169d6ed491fb60916638", "filename": "gcc/testsuite/gcc.target/i386/harden-sls-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-4.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=keep -mharden-sls=all\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void (*fptr) (void);\n+\n+void\n+foo (void)\n+{\n+  fptr ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]+\\\\*_?fptr\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]+fptr\\\\(%rip\\\\), %eax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]+\\\\*%rax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-times \"int3\" 1 } } */"}, {"sha": "613c44c6f8255eedf7f07ad80a77566e2b874ffe", "filename": "gcc/testsuite/gcc.target/i386/harden-sls-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a643f8568067d7700a9f2facc8ba39974973d3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fharden-sls-5.c?ref=53a643f8568067d7700a9f2facc8ba39974973d3", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk-extern -mharden-sls=return\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ret\" 1 } } */\n+/* { dg-final { scan-assembler-times \"int3\" 1 } } */"}]}