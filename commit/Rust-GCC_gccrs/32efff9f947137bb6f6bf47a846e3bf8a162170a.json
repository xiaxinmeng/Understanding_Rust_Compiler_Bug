{"sha": "32efff9f947137bb6f6bf47a846e3bf8a162170a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlZmZmOWY5NDcxMzdiYjZmNmJmNDdhODQ2ZTNiZjhhMTYyMTcwYQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2019-04-23T15:51:25Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2019-04-23T15:51:25Z"}, "message": "[GCC, AARCH64] Add GNU note section with BTI and PAC.\n\nThis patch adds the GNU NOTE section to the BTI and/or PAC\nenabled objects for linux targets.\n\nThe patches for needed for these in binutils are already approved\nand committed.\nhttps://sourceware.org/ml/binutils/2019-03/msg00072.html\n\n*** gcc/ChangeLog ***\n\n2018-04-23  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64-linux.h (TARGET_ASM_FILE_END): Define for\n\tAArch64.\n\t(aarch64_file_end_indicate_exec_stack): Add gnu note section.\n\ngcc/testsuite/ChangeLog:\n\n2018-04-23  Sudakshina Das  <sudi.das@arm.com>\n\n\t* gcc.target/aarch64/bti-1.c: Add scan directive for gnu note section\n\tfor linux targets.\n\t* gcc.target/aarch64/va_arg_1.c: Update scan directive to not clash\n\twith GNU note section.\n\nFrom-SVN: r270515", "tree": {"sha": "2e71f2ea88b9a17d4c37acd54774bc6359e35af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e71f2ea88b9a17d4c37acd54774bc6359e35af6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32efff9f947137bb6f6bf47a846e3bf8a162170a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32efff9f947137bb6f6bf47a846e3bf8a162170a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32efff9f947137bb6f6bf47a846e3bf8a162170a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32efff9f947137bb6f6bf47a846e3bf8a162170a/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7bfed18df8a3f85eb8acd15f860c3e828cd61d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7bfed18df8a3f85eb8acd15f860c3e828cd61d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7bfed18df8a3f85eb8acd15f860c3e828cd61d0"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "2c1cc3774a101265c17adeff43c82d419ee8fbec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -1,3 +1,10 @@\n+2018-04-23  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64-linux.h (TARGET_ASM_FILE_END): Define for\n+\tAArch64.\n+\t(aarch64_file_end_indicate_exec_stack): Add gnu note section.\n+\n+\n 2019-04-23  Roman Zhuykov  <zhroma@ispras.ru>\n \n \tPR rtl-optimization/87979"}, {"sha": "5e8b34ded03c78493f868e38647bf57c2da5187c", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -83,7 +83,7 @@\n \n #define GNU_USER_TARGET_D_CRITSEC_SIZE 48\n \n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+#define TARGET_ASM_FILE_END aarch64_file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with\n    strong definitions in dependent shared libraries, will resolve"}, {"sha": "14259439c9079c9139fca51370765cce54127890", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -18772,6 +18772,57 @@ aarch64_stack_protect_guard (void)\n   return NULL_TREE;\n }\n \n+/* Implement TARGET_ASM_FILE_END for AArch64.  This adds the AArch64 GNU NOTE\n+   section at the end if needed.  */\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_AND\t0xc0000000\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_BTI\t(1U << 0)\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_PAC\t(1U << 1)\n+void\n+aarch64_file_end_indicate_exec_stack ()\n+{\n+  file_end_indicate_exec_stack ();\n+\n+  unsigned feature_1_and = 0;\n+  if (aarch64_bti_enabled ())\n+    feature_1_and |= GNU_PROPERTY_AARCH64_FEATURE_1_BTI;\n+\n+  if (aarch64_ra_sign_scope != AARCH64_FUNCTION_NONE)\n+    feature_1_and |= GNU_PROPERTY_AARCH64_FEATURE_1_PAC;\n+\n+  if (feature_1_and)\n+    {\n+      /* Generate .note.gnu.property section.  */\n+      switch_to_section (get_section (\".note.gnu.property\",\n+\t\t\t\t      SECTION_NOTYPE, NULL));\n+\n+      /* PT_NOTE header: namesz, descsz, type.\n+\t namesz = 4 (\"GNU\\0\")\n+\t descsz = 16 (Size of the program property array)\n+\t\t  [(12 + padding) * Number of array elements]\n+\t type   = 5 (NT_GNU_PROPERTY_TYPE_0).  */\n+      assemble_align (POINTER_SIZE);\n+      assemble_integer (GEN_INT (4), 4, 32, 1);\n+      assemble_integer (GEN_INT (ROUND_UP (12, POINTER_BYTES)), 4, 32, 1);\n+      assemble_integer (GEN_INT (5), 4, 32, 1);\n+\n+      /* PT_NOTE name.  */\n+      assemble_string (\"GNU\", 4);\n+\n+      /* PT_NOTE contents for NT_GNU_PROPERTY_TYPE_0:\n+\t type   = GNU_PROPERTY_AARCH64_FEATURE_1_AND\n+\t datasz = 4\n+\t data   = feature_1_and.  */\n+      assemble_integer (GEN_INT (GNU_PROPERTY_AARCH64_FEATURE_1_AND), 4, 32, 1);\n+      assemble_integer (GEN_INT (4), 4, 32, 1);\n+      assemble_integer (GEN_INT (feature_1_and), 4, 32, 1);\n+\n+      /* Pad the size of the note to the required alignment.  */\n+      assemble_align (POINTER_SIZE);\n+    }\n+}\n+#undef GNU_PROPERTY_AARCH64_FEATURE_1_PAC\n+#undef GNU_PROPERTY_AARCH64_FEATURE_1_BTI\n+#undef GNU_PROPERTY_AARCH64_FEATURE_1_AND\n \n /* Target-specific selftests.  */\n "}, {"sha": "76e1a8ee8f700630647c334ff92cbfb0fd1772af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -1,3 +1,10 @@\n+2018-04-23  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* gcc.target/aarch64/bti-1.c: Add scan directive for gnu note section\n+\tfor linux targets.\n+\t* gcc.target/aarch64/va_arg_1.c: Update scan directive to not clash\n+\twith GNU note section.\n+\n 2019-04-23  Jeff Law  <law@redhat.com>\n \n \t* lib/target-supports.exp"}, {"sha": "5a556b08ed15679b25676a11fe9c7a64641ee671", "filename": "gcc/testsuite/gcc.target/aarch64/bti-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -61,3 +61,4 @@ f_label_address ()\n }\n /* { dg-final { scan-assembler-times \"hint\\t34\" 1 } } */\n /* { dg-final { scan-assembler-times \"hint\\t36\" 12 } } */\n+/* { dg-final { scan-assembler \".note.gnu.property\" { target *-*-linux* } } } */"}, {"sha": "5bcb5f3b186ad00b12a125b535517e3dfdb6e433", "filename": "gcc/testsuite/gcc.target/aarch64/va_arg_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32efff9f947137bb6f6bf47a846e3bf8a162170a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c?ref=32efff9f947137bb6f6bf47a846e3bf8a162170a", "patch": "@@ -4,7 +4,7 @@\n int\n f (int a, ...)\n {\n-  /* { dg-final { scan-assembler-not \"str\" } } */\n+  /* { dg-final { scan-assembler-not \"str\\t\" } } */\n   return a;\n }\n "}]}