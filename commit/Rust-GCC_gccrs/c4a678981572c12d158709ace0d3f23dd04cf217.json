{"sha": "c4a678981572c12d158709ace0d3f23dd04cf217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhNjc4OTgxNTcyYzEyZDE1ODcwOWFjZTBkM2YyM2RkMDRjZjIxNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-27T14:59:38Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-12-27T14:59:38Z"}, "message": "Fortran: Fix some select rank issues [PR97694 and 97723].\n\n2020-12-27  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/97694\n\tPR fortran/97723\n\t* check.c (allocatable_check): Select rank temporaries are\n\tpermitted even though they are treated as associate variables.\n\t* resolve.c (gfc_resolve_code): Break on select rank as well as\n\tselect type so that the block os resolved.\n\t* trans-stmt.c (trans_associate_var): Class associate variables\n\tthat are optional dummies must use the backend_decl.\n\ngcc/testsuite/\n\tPR fortran/97694\n\tPR fortran/97723\n\t* gfortran.dg/select_rank_5.f90: New test.", "tree": {"sha": "cffb9058bee31e22736a501bf2f63f0c2a53f363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffb9058bee31e22736a501bf2f63f0c2a53f363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4a678981572c12d158709ace0d3f23dd04cf217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a678981572c12d158709ace0d3f23dd04cf217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4a678981572c12d158709ace0d3f23dd04cf217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a678981572c12d158709ace0d3f23dd04cf217/comments", "author": null, "committer": null, "parents": [{"sha": "0e283e2c9f15d8abfd6a57c05d0845f8c4e08827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e283e2c9f15d8abfd6a57c05d0845f8c4e08827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e283e2c9f15d8abfd6a57c05d0845f8c4e08827"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "d8829e42b182c8bc5027565441601c8c275c8086", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=c4a678981572c12d158709ace0d3f23dd04cf217", "patch": "@@ -289,7 +289,7 @@ bin2real (gfc_expr *x, int kind)\n }\n \n \n-/* Fortran 2018 treats a BOZ as simply a string of bits.  gfc_boz2real () \n+/* Fortran 2018 treats a BOZ as simply a string of bits.  gfc_boz2real ()\n    converts the string into a REAL of the appropriate kind.  The treatment\n    of the sign bit is processor dependent.  */\n \n@@ -377,12 +377,12 @@ gfc_boz2real (gfc_expr *x, int kind)\n }\n \n \n-/* Fortran 2018 treats a BOZ as simply a string of bits.  gfc_boz2int () \n+/* Fortran 2018 treats a BOZ as simply a string of bits.  gfc_boz2int ()\n    converts the string into an INTEGER of the appropriate kind.  The\n    treatment of the sign bit is processor dependent.  If the  converted\n    value exceeds the range of the type, then wrap-around semantics are\n    applied.  */\n- \n+\n bool\n gfc_boz2int (gfc_expr *x, int kind)\n {\n@@ -975,7 +975,8 @@ allocatable_check (gfc_expr *e, int n)\n   symbol_attribute attr;\n \n   attr = gfc_variable_attr (e, NULL);\n-  if (!attr.allocatable || attr.associate_var)\n+  if (!attr.allocatable\n+     || (attr.associate_var && !attr.select_rank_temporary))\n     {\n       gfc_error (\"%qs argument of %qs intrinsic at %L must be ALLOCATABLE\",\n \t\t gfc_current_intrinsic_arg[n]->name, gfc_current_intrinsic,\n@@ -3232,7 +3233,7 @@ gfc_check_intconv (gfc_expr *x)\n       || strcmp (gfc_current_intrinsic, \"long\") == 0)\n     {\n       gfc_error (\"%qs intrinsic subprogram at %L has been deprecated.  \"\n-\t\t \"Use INT intrinsic subprogram.\", gfc_current_intrinsic, \n+\t\t \"Use INT intrinsic subprogram.\", gfc_current_intrinsic,\n \t\t &x->where);\n       return false;\n     }\n@@ -3965,7 +3966,7 @@ gfc_check_findloc (gfc_actual_arglist *ap)\n   /* Check the kind of the characters argument match.  */\n   if (a1 && v1 && a->ts.kind != v->ts.kind)\n     goto incompat;\n-\t \n+\n   d = ap->next->next->expr;\n   m = ap->next->next->next->expr;\n   k = ap->next->next->next->next->expr;"}, {"sha": "249f402b8d93590897faf1c0c220f5a443bcbee9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c4a678981572c12d158709ace0d3f23dd04cf217", "patch": "@@ -11776,8 +11776,9 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t      gfc_resolve_omp_do_blocks (code, ns);\n \t      break;\n \t    case EXEC_SELECT_TYPE:\n-\t      /* Blocks are handled in resolve_select_type because we have\n-\t\t to transform the SELECT TYPE into ASSOCIATE first.  */\n+\t    case EXEC_SELECT_RANK:\n+\t      /* Blocks are handled in resolve_select_type/rank because we\n+\t\t have to transform the SELECT TYPE into ASSOCIATE first.  */\n \t      break;\n             case EXEC_DO_CONCURRENT:\n \t      gfc_do_concurrent_flag = 1;"}, {"sha": "97f3c43bd04a22295ddabbecb98a6c7c3a3f2e57", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=c4a678981572c12d158709ace0d3f23dd04cf217", "patch": "@@ -1784,7 +1784,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       if (e->ts.type == BT_CLASS)\n \t{\n \t  /* Go straight to the class data.  */\n-\t  if (sym2->attr.dummy)\n+\t  if (sym2->attr.dummy && !sym2->attr.optional)\n \t    {\n \t      class_decl = DECL_LANG_SPECIFIC (sym2->backend_decl) ?\n \t\t\t   GFC_DECL_SAVED_DESCRIPTOR (sym2->backend_decl) :"}, {"sha": "55aa9e1b9bfe4a8a88858e756a79ff2baf52e888", "filename": "gcc/testsuite/gfortran.dg/select_rank_5.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a678981572c12d158709ace0d3f23dd04cf217/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_5.f90?ref=c4a678981572c12d158709ace0d3f23dd04cf217", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+! Test the fixes for PR97723 and PR97694.\n+!\n+! Contributed by Martin  <mscfd@gmx.net>\n+!\n+module mod\n+   implicit none\n+   private\n+   public cssel\n+\n+contains\n+\n+function cssel(x) result(s)\n+   character(len=:), allocatable :: s\n+   class(*), dimension(..), optional, intent(in) :: x\n+   if (present(x)) then\n+      select rank (x)\n+      rank (0)\n+         s = '0' ! PR97723: \u2018assign\u2019 at (1) is not a function\n+                 ! PR97694: ICE in trans-stmt.c(trans_associate_var)\n+      rank (1)\n+         s = '1' ! PR97723: \u2018assign\u2019 at (1) is not a function\n+      rank default\n+         s = '?' ! PR97723: \u2018assign\u2019 at (1) is not a function\n+      end select\n+   else\n+      s = '-'\n+   end if\n+end function cssel\n+\n+end module mod\n+\n+program classstar_rank\n+   use mod\n+   implicit none\n+\n+   integer :: x\n+   real, dimension(1:3) :: y\n+   logical, dimension(1:2,1:2) :: z\n+\n+   if (any ([cssel(x),cssel(y),cssel(z),cssel()] .ne. ['0','1','?','-'])) stop 1\n+\n+end program classstar_rank"}]}