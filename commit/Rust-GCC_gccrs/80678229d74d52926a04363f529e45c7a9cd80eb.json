{"sha": "80678229d74d52926a04363f529e45c7a9cd80eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2NzgyMjlkNzRkNTI5MjZhMDQzNjNmNTI5ZTQ1YzdhOWNkODBlYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-01T21:30:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-01T21:30:48Z"}, "message": "compiler: Fix type checking for append.\n\nFrom-SVN: r183816", "tree": {"sha": "b4c4d2519a9f39f634f00083dc72e298d8f4c3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c4d2519a9f39f634f00083dc72e298d8f4c3e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80678229d74d52926a04363f529e45c7a9cd80eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80678229d74d52926a04363f529e45c7a9cd80eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80678229d74d52926a04363f529e45c7a9cd80eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80678229d74d52926a04363f529e45c7a9cd80eb/comments", "author": null, "committer": null, "parents": [{"sha": "7c275c4339407c9864d0e163c3cc0110318b6f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c275c4339407c9864d0e163c3cc0110318b6f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c275c4339407c9864d0e163c3cc0110318b6f10"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "25b79872787f1d77e1e13b67084a0e3952f5b48f", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80678229d74d52926a04363f529e45c7a9cd80eb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80678229d74d52926a04363f529e45c7a9cd80eb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=80678229d74d52926a04363f529e45c7a9cd80eb", "patch": "@@ -7657,7 +7657,10 @@ Builtin_call_expression::do_lower(Gogo* gogo, Named_object* function,\n \t    this->set_is_error();\n \t    return this;\n \t  }\n-\tthis->lower_varargs(gogo, function, inserter, slice_type, 2);\n+\tType* element_type = slice_type->array_type()->element_type();\n+\tthis->lower_varargs(gogo, function, inserter,\n+\t\t\t    Type::make_array_type(element_type, NULL),\n+\t\t\t    2);\n       }\n       break;\n \n@@ -8624,16 +8627,20 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t      break;\n \t  }\n \n+\t// The language says that the second argument must be\n+\t// assignable to a slice of the element type of the first\n+\t// argument.  We already know the first argument is a slice\n+\t// type.\n+\tArray_type* at = args->front()->type()->array_type();\n+\tType* arg2_type = Type::make_array_type(at->element_type(), NULL);\n \tstd::string reason;\n-\tif (!Type::are_assignable(args->front()->type(), args->back()->type(),\n-\t\t\t\t  &reason))\n+\tif (!Type::are_assignable(arg2_type, args->back()->type(), &reason))\n \t  {\n \t    if (reason.empty())\n-\t      this->report_error(_(\"arguments 1 and 2 have different types\"));\n+\t      this->report_error(_(\"argument 2 has invalid type\"));\n \t    else\n \t      {\n-\t\terror_at(this->location(),\n-\t\t\t \"arguments 1 and 2 have different types (%s)\",\n+\t\terror_at(this->location(), \"argument 2 has invalid type (%s)\",\n \t\t\t reason.c_str());\n \t\tthis->set_is_error();\n \t      }"}]}