{"sha": "bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4YTg4MTAwZGNiZDdlZDc3YjcxYWRkNWU4ZjA3MjI4NGEwNWRkMw==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-22T07:46:39Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-22T07:46:39Z"}, "message": "[NDS32] Add unaligned access support.\n\ngcc/\n\t* config/nds32/constants.md (unspec_volatile_element): Add enum values\n\tfor unaligned access.\n\t* config/nds32/nds32-intrinsic.c: Implementation of expanding\n\tunaligned access.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n\t* config/nds32/nds32.opt (munaligned-access): New option.\n\t* config/nds32/nds32.c (nds32_asm_file_start): Display\n\tflag_unaligned_access status.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r259545", "tree": {"sha": "8924a0437b50d343c19639556f3dff02c3cf04fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8924a0437b50d343c19639556f3dff02c3cf04fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "020c350c3cd59cb2d24beca1d36d498c52426557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020c350c3cd59cb2d24beca1d36d498c52426557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020c350c3cd59cb2d24beca1d36d498c52426557"}], "stats": {"total": 135, "additions": 127, "deletions": 8}, "files": [{"sha": "09597f4fbd9ce56b3a39ee74f3782545a55f0846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -1,3 +1,17 @@\n+2018-04-22  Monk Chiang  <sh.chiang04@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_volatile_element): Add enum values\n+\tfor unaligned access.\n+\t* config/nds32/nds32-intrinsic.c: Implementation of expanding\n+\tunaligned access.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n+\t* config/nds32/nds32.opt (munaligned-access): New option.\n+\t* config/nds32/nds32.c (nds32_asm_file_start): Display\n+\tflag_unaligned_access status.\n+\n 2018-04-20  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/riscv/elf.h (LINK_SPEC): Pass --no-relax if"}, {"sha": "37c27049ef069915d3f723ad03d34757106bfb5a", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -136,6 +136,9 @@\n   UNSPEC_VOLATILE_GET_TRIG_TYPE\n   UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN\n+  UNSPEC_VOLATILE_UNALIGNED_FEATURE\n+  UNSPEC_VOLATILE_ENABLE_UNALIGNED\n+  UNSPEC_VOLATILE_DISABLE_UNALIGNED\n ])\n \n ;; ------------------------------------------------------------------------"}, {"sha": "b9bb2d995f7a8ddf445cc3075d3f1eec287de8b8", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -523,6 +523,12 @@ static struct builtin_description bdesc_noarg[] =\n   NDS32_BUILTIN(unspec_return_address, \"return_address\", RETURN_ADDRESS)\n   NDS32_BUILTIN(unspec_get_all_pending_int, \"get_all_pending_int\",\n \t\tGET_ALL_PENDING_INT)\n+  NDS32_BUILTIN(unspec_unaligned_feature, \"unaligned_feature\",\n+\t\tUNALIGNED_FEATURE)\n+  NDS32_NO_TARGET_BUILTIN(unspec_enable_unaligned, \"enable_unaligned\",\n+\t\t\t  ENABLE_UNALIGNED)\n+  NDS32_NO_TARGET_BUILTIN(unspec_disable_unaligned, \"disable_unaligned\",\n+\t\t\t  DISABLE_UNALIGNED)\n };\n \n /* Intrinsics that take just one argument.  */\n@@ -1099,5 +1105,8 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN2 (\"unaligned_store_w\", void, ptr_uint, unsigned, UASTORE_W);\n   ADD_NDS32_BUILTIN2 (\"unaligned_store_dw\", void, ptr_ulong, long_long_unsigned,\n \t\t      UASTORE_DW);\n+  ADD_NDS32_BUILTIN0 (\"unaligned_feature\", unsigned, UNALIGNED_FEATURE);\n+  ADD_NDS32_BUILTIN0 (\"enable_unaligned\", void, ENABLE_UNALIGNED);\n+  ADD_NDS32_BUILTIN0 (\"disable_unaligned\", void, DISABLE_UNALIGNED);\n \n }"}, {"sha": "24e7c0bf4a12207dff18a5402e90ed67d7ebb7b8", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -1306,11 +1306,19 @@\n \t(unspec:SI [(mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))] UNSPEC_UALOAD_W))]\n   \"\"\n {\n-  if (TARGET_ISA_V3M)\n-    nds32_expand_unaligned_load (operands, SImode);\n+  if (flag_unaligned_access)\n+    {\n+      rtx mem = gen_rtx_MEM (SImode, operands[1]);\n+      emit_move_insn (operands[0], mem);\n+    }\n   else\n-    emit_insn (gen_unaligned_load_w (operands[0],\n-\t\t\t\t     gen_rtx_MEM (SImode, (operands[1]))));\n+    {\n+      if (TARGET_ISA_V3M)\n+\tnds32_expand_unaligned_load (operands, SImode);\n+      else\n+\temit_insn (gen_unaligned_load_w (operands[0],\n+\t\t\t\t\t gen_rtx_MEM (SImode, (operands[1]))));\n+    }\n   DONE;\n })\n \n@@ -1372,11 +1380,19 @@\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_UASTORE_W))]\n   \"\"\n {\n-  if (TARGET_ISA_V3M)\n-    nds32_expand_unaligned_store (operands, SImode);\n+  if (flag_unaligned_access)\n+    {\n+      rtx mem = gen_rtx_MEM (SImode, operands[0]);\n+      emit_move_insn (mem, operands[1]);\n+    }\n   else\n-    emit_insn (gen_unaligned_store_w (gen_rtx_MEM (SImode, operands[0]),\n-\t\t\t\t      operands[1]));\n+    {\n+      if (TARGET_ISA_V3M)\n+\tnds32_expand_unaligned_store (operands, SImode);\n+      else\n+\temit_insn (gen_unaligned_store_w (gen_rtx_MEM (SImode, operands[0]),\n+\t\t\t\t\t  operands[1]));\n+    }\n   DONE;\n })\n \n@@ -1420,4 +1436,63 @@\n    (set_attr \"length\"     \"4\")]\n )\n \n+(define_expand \"unspec_unaligned_feature\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_UNALIGNED_FEATURE))]\n+  \"\"\n+{\n+  /* Get $MMU_CTL system register form nds32_intrinsic_register_names[]  */\n+  rtx system_reg =  GEN_INT (__NDS32_REG_MMU_CTL__);\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx temp2_reg = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+  emit_move_insn (temp_reg, operands[0]);\n+  emit_move_insn (temp2_reg, GEN_INT (0x800 << 12));\n+  emit_insn (gen_iorsi3 (operands[0], operands[0], temp2_reg));\n+  emit_insn (gen_unspec_volatile_mtsr (operands[0], system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+\n+  emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+\n+  emit_insn (gen_ashlsi3 (operands[0], operands[0], GEN_INT (8)));\n+  emit_insn (gen_lshrsi3 (operands[0], operands[0], GEN_INT (31)));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_enable_unaligned\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_UNALIGNED_FEATURE)]\n+  \"\"\n+{\n+  /* Get $MMU_CTL system register form nds32_intrinsic_register_names[]  */\n+  rtx system_reg =  GEN_INT (__NDS32_REG_MMU_CTL__);\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx temp2_reg = gen_reg_rtx (SImode);\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_move_insn (temp2_reg, GEN_INT (0x800 << 12));\n+  emit_insn (gen_iorsi3 (temp_reg, temp_reg, temp2_reg));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_disable_unaligned\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_UNALIGNED_FEATURE)]\n+  \"\"\n+{\n+  /* Get $MMU_CTL system register form nds32_intrinsic_register_names[]  */\n+  rtx system_reg =  GEN_INT (__NDS32_REG_MMU_CTL__);\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx temp2_reg = gen_reg_rtx (SImode);\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_move_insn (temp2_reg, GEN_INT (0x800 << 12));\n+  emit_insn (gen_one_cmplsi2 (temp2_reg, temp2_reg));\n+  emit_insn (gen_andsi3 (temp_reg, temp_reg, temp2_reg));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n ;; ------------------------------------------------------------------------"}, {"sha": "1ce9e06786591521656751f3a944c3025c08b1de", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -2885,6 +2885,10 @@ nds32_asm_file_start (void)\n \t\t\t ((TARGET_REDUCED_REGS) ? \"Yes\"\n \t\t\t\t\t\t: \"No\"));\n \n+  fprintf (asm_out_file, \"\\t! Support unaligned access\\t\\t: %s\\n\",\n+\t\t\t (flag_unaligned_access ? \"Yes\"\n+\t\t\t\t\t\t: \"No\"));\n+\n   fprintf (asm_out_file, \"\\t! ------------------------------------\\n\");\n \n   if (optimize_size)"}, {"sha": "9d673d54e804359eeb0849d760739eb5ad494269", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -512,6 +512,10 @@ enum nds32_builtins\n   NDS32_BUILTIN_SET_TRIG_LEVEL,\n   NDS32_BUILTIN_SET_TRIG_EDGE,\n   NDS32_BUILTIN_GET_TRIG_TYPE,\n+\n+  NDS32_BUILTIN_UNALIGNED_FEATURE,\n+  NDS32_BUILTIN_ENABLE_UNALIGNED,\n+  NDS32_BUILTIN_DISABLE_UNALIGNED,\n   NDS32_BUILTIN_COUNT\n };\n "}, {"sha": "dd9b3d1b72c15a229d84b6f257ce4acbe2bf09af", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -320,3 +320,7 @@ Generate single-precision floating-point instructions.\n mext-fpu-dp\n Target Report Mask(FPU_DOUBLE)\n Generate double-precision floating-point instructions.\n+\n+munaligned-access\n+Target Report Var(flag_unaligned_access) Init(0)\n+Enable unaligned word and halfword accesses to packed data."}, {"sha": "7bb117712dc6b33ce0b96f411d5fa45842bf0a13", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8a88100dcbd7ed77b71add5e8f072284a05dd3/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=bc8a88100dcbd7ed77b71add5e8f072284a05dd3", "patch": "@@ -720,4 +720,10 @@ enum nds32_dpref\n #define __nds32__get_trig_type(a) \\\n   (__builtin_nds32_get_trig_type ((a)))\n \n+#define __nds32__unaligned_feature() \\\n+  (__builtin_nds32_unaligned_feature())\n+#define __nds32__enable_unaligned() \\\n+  (__builtin_nds32_enable_unaligned())\n+#define __nds32__disable_unaligned() \\\n+  (__builtin_nds32_disable_unaligned())\n #endif /* nds32_intrinsic.h */"}]}