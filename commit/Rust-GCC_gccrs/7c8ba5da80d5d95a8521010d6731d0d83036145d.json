{"sha": "7c8ba5da80d5d95a8521010d6731d0d83036145d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4YmE1ZGE4MGQ1ZDk1YTg1MjEwMTBkNjczMWQwZDgzMDM2MTQ1ZA==", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2020-09-22T18:31:35Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-09-22T18:31:35Z"}, "message": "bpf: use xBPF signed div, mod insns when available\n\nThe 'mod' and 'div' operators in eBPF are unsigned, with no signed\ncounterpart. xBPF adds two new ALU operations, sdiv and smod, for\nsigned division and modulus, respectively. Update bpf.md with\n'define_insn' blocks for signed div and mod to use them when targetting\nxBPF, and add new tests to ensure they are used appropriately.\n\n2020-09-17  David Faust  <david.faust@oracle.com>\n\ngcc/\n\t* config/bpf/bpf.md: Add defines for signed div and mod operators.\n\ngcc/testsuite/\n\t* gcc.target/bpf/diag-sdiv.c: New test.\n\t* gcc.target/bpf/diag-smod.c: New test.\n\t* gcc.target/bpf/xbpf-sdiv-1.c: New test.\n\t* gcc.target/bpf/xbpf-smod-1.c: New test.", "tree": {"sha": "2e140dde7f05e626f15a17684ee603936270c145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e140dde7f05e626f15a17684ee603936270c145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8ba5da80d5d95a8521010d6731d0d83036145d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8ba5da80d5d95a8521010d6731d0d83036145d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8ba5da80d5d95a8521010d6731d0d83036145d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8ba5da80d5d95a8521010d6731d0d83036145d/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30bf947649e7381402637d1434d6b1ef22d031f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30bf947649e7381402637d1434d6b1ef22d031f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30bf947649e7381402637d1434d6b1ef22d031f1"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "8e7cf508ccffed9c28101a8824f258b698af8af8", "filename": "gcc/config/bpf/bpf.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Fconfig%2Fbpf%2Fbpf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Fconfig%2Fbpf%2Fbpf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.md?ref=7c8ba5da80d5d95a8521010d6731d0d83036145d", "patch": "@@ -165,6 +165,16 @@\n   \"div<msuffix>\\t%0,%2\"\n   [(set_attr \"type\" \"<mtype>\")])\n \n+;; However, xBPF does provide a signed division operator, sdiv.\n+\n+(define_insn \"div<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (div:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"TARGET_XBPF\"\n+  \"sdiv<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n ;;; Modulus\n \n ;; Note that eBPF doesn't provide instructions for signed integer\n@@ -178,6 +188,16 @@\n   \"mod<msuffix>\\t%0,%2\"\n   [(set_attr \"type\" \"<mtype>\")])\n \n+;; Again, xBPF provides a signed version, smod.\n+\n+(define_insn \"mod<AM:mode>3\"\n+  [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")\n+        (mod:AM (match_operand:AM 1 \"register_operand\" \" 0,0\")\n+                (match_operand:AM 2 \"reg_or_imm_operand\" \"r,I\")))]\n+  \"TARGET_XBPF\"\n+  \"smod<msuffix>\\t%0,%2\"\n+  [(set_attr \"type\" \"<mtype>\")])\n+\n ;;; Logical AND\n (define_insn \"and<AM:mode>3\"\n   [(set (match_operand:AM 0 \"register_operand\" \"=r,r\")"}, {"sha": "db0c494a789c9b3ccc4d26cfdd781e7a7cceb5be", "filename": "gcc/testsuite/gcc.target/bpf/diag-sdiv.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-sdiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-sdiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-sdiv.c?ref=7c8ba5da80d5d95a8521010d6731d0d83036145d", "patch": "@@ -0,0 +1,12 @@\n+/* Verify signed division does not produce 'sdiv' insn in eBPF.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+void\n+foo ()\n+{\n+  signed int x = 5;\n+  signed int y = 2;\n+  signed int z = x / y;\n+}\n+/* { dg-final { scan-assembler-not \"sdiv(32)?\\t%r\" } } */"}, {"sha": "20234ee39cc79fbcf2ed863d9875fed2099292b9", "filename": "gcc/testsuite/gcc.target/bpf/diag-smod.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-smod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-smod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fdiag-smod.c?ref=7c8ba5da80d5d95a8521010d6731d0d83036145d", "patch": "@@ -0,0 +1,12 @@\n+/* Verify signed modulo does not produce 'smod' insn in eBPF.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+void\n+foo ()\n+{\n+  signed int x = 5;\n+  signed int y = 2;\n+  signed int z = x % y;\n+}\n+/* { dg-final { scan-assembler-not \"smod(32)?\\t%r\" } } */"}, {"sha": "f6c5c9e9f1c78f8163b3a9df9ed8702d4d305030", "filename": "gcc/testsuite/gcc.target/bpf/xbpf-sdiv-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-sdiv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-sdiv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-sdiv-1.c?ref=7c8ba5da80d5d95a8521010d6731d0d83036145d", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that sdiv instruction is used for xBPF. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mxbpf\" } */\n+\n+void\n+foo ()\n+{\n+  signed int x = 5;\n+  signed int y = 2;\n+  signed int z = x / y;\n+  signed int w = x / 3;\n+}\n+\n+/* { dg-final { scan-assembler \"sdiv(32)?\\t%r\" } } */"}, {"sha": "b3e5816b5cf4bb957fe52af6a7ba889538fbd613", "filename": "gcc/testsuite/gcc.target/bpf/xbpf-smod-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-smod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8ba5da80d5d95a8521010d6731d0d83036145d/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-smod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fxbpf-smod-1.c?ref=7c8ba5da80d5d95a8521010d6731d0d83036145d", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that smod instruction is used for xBPF. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mxbpf\" } */\n+\n+void\n+foo ()\n+{\n+  signed int x = 5;\n+  signed int y = 2;\n+  signed int z = x % y;\n+  signed int w = x % 3;\n+}\n+\n+/* { dg-final { scan-assembler \"smod(32)?\\t%r\" } } */"}]}