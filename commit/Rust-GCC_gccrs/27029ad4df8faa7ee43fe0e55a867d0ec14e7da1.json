{"sha": "27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwMjlhZDRkZjhmYWE3ZWU0M2ZlMGU1NWE4NjdkMGVjMTRlN2RhMQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-04T12:46:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:17Z"}, "message": "Added MIPS target hook (provisional at least)", "tree": {"sha": "200eb1d0e6a1ed32544c6831f3c920b16ceedf39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/200eb1d0e6a1ed32544c6831f3c920b16ceedf39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493cf535eccc01e6262d4dff274475d36188c67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493cf535eccc01e6262d4dff274475d36188c67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493cf535eccc01e6262d4dff274475d36188c67b"}], "stats": {"total": 328, "additions": 308, "deletions": 20}, "files": [{"sha": "e6b068405eca8a14dee7fcaa3983b49a34046988", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -498,6 +498,7 @@ microblaze*-*-*)\n mips*-*-*)\n \tcpu_type=mips\n \td_target_objs=\"mips-d.o\"\n+\trust_target_objs=\"mips-rust.o\"\n \textra_headers=\"loongson.h loongson-mmiintrin.h msa.h\"\n \textra_objs=\"frame-header-opt.o\"\n \textra_options=\"${extra_options} g.opt fused-madd.opt mips/mips-tables.opt\""}, {"sha": "95c83a52aebbf2584c6dbf60bcfe6241ae553f67", "filename": "gcc/config/i386/i386-rust.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.c?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -22,19 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rust/rust-target.h\"\n #include \"rust/rust-target-def.h\"\n \n-// HACK: allows conversion of (presumably) numeric values to string\n-#ifndef STR_HELPER_RUST\n- #define STR_HELPER_RUST(x) #x\n-#else\n- #error \"STR_HELPER_RUST already defined!!!\"\n-#endif\n-\n-#ifndef STRINGIFY_RUST\n- #define STRINGIFY_RUST(x) STR_HELPER_RUST(x)\n-#else\n- #error \"STRINGIFY_RUST already defined!!!\"\n-#endif\n-\n /* Implement TARGET_RUST_CPU_INFO for x86 targets.  */\n \n void\n@@ -43,11 +30,6 @@ ix86_rust_target_cpu_info (void)\n     if (TARGET_64BIT) {\n         rust_add_target_info(\"target_arch\", \"x86_64\");\n \n-        // TODO: should these go here or is there a platform-neutral way of getting them (since they aren't defined in i386-c.c or i386-d.c)?\n-        //rust_add_target_info(\"target_pointer_width\", STRINGIFY_RUST(POINTER_SIZE)); // this did not work\n-        //rust_add_target_info(\"target_endian\", BYTES_BIG_ENDIAN ? \"big\" : \"little\");\n-        // there is a platform-neutral way actually, I'm pretty sure - see cppbuiltins.c\n-\n         if (TARGET_X32) {\n             // this means it uses 32-bit pointers with 64-bit, basically (ILP32)\n             //rust_add_target_info(\"target_pointer_width\", \"32\");\n@@ -248,5 +230,3 @@ ix86_rust_target_cpu_info (void)\n #undef fpmath\n }\n \n-#undef STR_HELPER_RUST\n-#undef STRINGIFY_RUST"}, {"sha": "2d52a8742f63954a774c0b3b891912e443ce39bc", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -389,4 +389,7 @@ extern void mips_expand_vec_cond_expr (machine_mode, machine_mode, rtx *);\n /* Routines implemented in mips-d.c  */\n extern void mips_d_target_versions (void);\n \n+/* Routines implemented in mips-rust.c  */\n+extern void mips_rust_target_cpu_info (void);\n+\n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "7b9048def795b1b6946bcaab75aac7a71887a1b9", "filename": "gcc/config/mips/mips-rust.c", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-rust.c?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -0,0 +1,297 @@\n+/* Subroutines for the Rust front end for the MIPS architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Add target info for MIPS-I ISA support.  */\n+\n+static void mips1_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips1\");\n+}\n+\n+/* Add target info for MIPS-II ISA support.  */\n+\n+static void mips2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips2\");\n+    mips1_target_info();\n+}\n+\n+/* Add target info for MIPS-III ISA (MIPS32 subset) support.  */\n+\n+static void mips3_32_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips3_32\");\n+}\n+\n+/* Add target info for MIPS-III ISA (MIPS32r2 subset) support.  */\n+\n+static void mips3_32r2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips3_32r2\");\n+}\n+\n+/* Add target info for MIPS-III ISA support.  */\n+\n+static void mips3_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips3\");\n+    mips2_target_info();\n+    mips3_32_target_info();\n+    mips3_32r2_target_info();\n+    // maybe always have FeatureGP64Bit and FeatureFP64Bit? or maybe make them prereqs?\n+}\n+\n+/* Add target info for MIPS-IV ISA (MIPS32 subset) support.  */\n+\n+static void mips4_32_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips4_32\");\n+}\n+\n+/* Add target info for MIPS-IV ISA (MIPS32r2 subset) support.  */\n+\n+static void mips4_32r2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips4_32r2\");\n+}\n+\n+/* Add target info for MIPS-IV ISA support.  */\n+\n+static void mips4_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips4\");\n+    mips3_target_info();\n+    mips4_32_target_info();\n+    mips4_32r2_target_info();\n+}\n+\n+/* Add target info for MIPS-V ISA (MIPS32r2 subset) support.  */\n+\n+static void mips5_32r2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips5_32r2\");\n+}\n+\n+/* Add target info for MIPS-V ISA support.  */\n+\n+static void mips5_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips5\");\n+    mips4_target_info();\n+    mips5_32r2_target_info();\n+}\n+\n+/* Add target info for MIPS32 ISA support.  */\n+\n+static void mips32_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips32\");\n+    mips2_target_info();\n+    mips3_32_target_info();\n+    mips4_32_target_info();\n+}\n+\n+/* Add target info for MIPS32r2 ISA support.  */\n+\n+static void mips32r2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips32r2\");\n+    mips32_target_info();\n+    mips3_32r2_target_info();\n+    mips4_32r2_target_info();\n+    mips5_32r2_target_info();\n+}\n+\n+/* Add target info for MIPS32r3 ISA support.  */\n+\n+static void mips32r3_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips32r3\");\n+    mips32r2_target_info();\n+}\n+\n+/* Add target info for MIPS32r5 ISA support.  */\n+\n+static void mips32r5_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips32r5\");\n+    mips32r3_target_info();\n+}\n+\n+/* Add target info for MIPS32r6 ISA support.  */\n+\n+static void mips32r6_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips32r6\");\n+    mips32r5_target_info();\n+    // maybe also hardcode having FeatureFP64Bit, FeatureNaN2008, and FeatureAbs2008, or have prereqs\n+}\n+\n+/* Add target info for MIPS64 ISA support.  */\n+\n+static void mips64_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips64\");\n+    mips32_target_info();\n+    mips5_target_info();\n+}\n+\n+/* Add target info for MIPS64r2 ISA support.  */\n+\n+static void mips64r2_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips64r2\");\n+    mips64_target_info();\n+    mips32r2_target_info();\n+}\n+\n+/* Add target info for MIPS64r3 ISA support.  */\n+\n+static void mips64r3_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips64r3\");\n+    mips64r2_target_info();\n+    mips32r3_target_info();\n+}\n+\n+/* Add target info for MIPS64r5 ISA support.  */\n+\n+static void mips64r5_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips64r5\");\n+    mips64r3_target_info();\n+    mips32r5_target_info();\n+}\n+\n+/* Add target info for MIPS64r6 ISA support.  */\n+\n+static void mips64r6_target_info(void) {\n+    rust_add_target_info(\"target_feature\", \"mips64r6\");\n+    mips64r5_target_info();\n+    mips32r6_target_info();\n+    // maybe hardcode FeatureNaN2008 and FeatureAbs2008, or just have them as prereqs?\n+}\n+\n+/* Implement TARGET_RUST_CPU_INFO for MIPS targets.  */\n+\n+void mips_rust_target_cpu_info(void) {\n+    if (TARGET_64BIT)\n+        rust_add_target_info(\"target_arch\", \"mips64\");\n+    else\n+        rust_add_target_info(\"target_arch\", \"mips\");\n+\n+    // features and names based on llvm if not in rustc\n+    // TODO maybe implement more features that aren't in llvm but are in gcc at some point?\n+    if (!(TARGET_ABICALLS))\n+        rust_add_target_info(\"target_feature\", \"noabicalls\");\n+    if (POINTER_SIZE == 64)\n+        rust_add_target_info(\"target_feature\", \"ptr64\");\n+    if (TARGET_64BIT) \n+        rust_add_target_info(\"target_feature\", \"gp64\");\n+    if (TARGET_FLOAT64)\n+        rust_add_target_info(\"target_feature\", \"fp64\");\n+    if (TARGET_FLOATXX)\n+        rust_add_target_info(\"target_feature\", \"fpxx\");\n+    // TODO: ensure below variables work\n+    if (mips_nan == MIPS_IEEE_754_2008)\n+        rust_add_target_info(\"target_feature\", \"nan2008\");\n+    if (mips_abs == MIPS_IEEE_754_2008)\n+        rust_add_target_info(\"target_feature\", \"abs2008\");\n+    if (TARGET_SINGLE_FLOAT)\n+        rust_add_target_info(\"target_feature\", \"single-float\");\n+    if (TARGET_SOFT_FLOAT_ABI)\n+        rust_add_target_info(\"target_feature\", \"soft-float\");\n+    if (!(ODD_SPREG))\n+        rust_add_target_info(\"target_feature\", \"nooddspreg\");\n+    // TODO: find if vfpu (vector FPU instructions) are supported by gcc at all\n+    // TODO: ensure below switch variable and whatever works\n+    switch (mips_isa_option) {\n+        case 0: \n+            mips1_target_info();\n+            break;\n+        case 1: \n+            mips2_target_info();\n+            break;\n+        case 2: \n+            mips3_target_info();\n+            break;\n+        case 3: \n+            mips4_target_info();\n+            break;\n+        case 4: \n+            mips32_target_info();\n+            break;\n+        case 5: \n+            mips32r2_target_info();\n+            break;\n+        case 6: \n+            mips32r3_target_info();\n+            break;\n+        case 7: \n+            mips32r5_target_info();\n+            break;\n+        case 8: \n+            mips32r6_target_info();\n+            break;\n+        case 9: \n+            mips64_target_info();\n+            break;\n+        case 10: \n+            mips64r2_target_info();\n+            break;\n+        case 11: \n+            mips64r3_target_info();\n+            break;\n+        case 12: \n+            mips64r5_target_info();\n+            break;\n+        case 13: \n+            mips64r6_target_info();\n+            break;\n+        default: // unknown isa level - should this be an error?\n+            break;\n+    }\n+    if (TARGET_SYM32)\n+        rust_add_target_info(\"target_feature\", \"sym32\");\n+    if (TARGET_MIPS16)\n+        rust_add_target_info(\"target_feature\", \"mips16\");\n+    if (TARGET_DSP) {\n+        rust_add_target_info(\"target_feature\", \"dsp\");\n+\n+        if (TARGET_DSPR2) {\n+            rust_add_target_info(\"target_feature\", \"dspr2\");\n+\n+            // TODO: add dspr3 if can find gcc equivalent option \n+        }\n+    }\n+    if (TARGET_MIPS3D)\n+        rust_add_target_info(\"target_feature\", \"mips3d\");\n+    if (TARGET_MSA)\n+        rust_add_target_info(\"target_feature\", \"msa\");\n+    if (TARGET_EVA)\n+        rust_add_target_info(\"target_feature\", \"eva\");\n+    if (TARGET_CRC)\n+        rust_add_target_info(\"target_feature\", \"crc\");\n+    if (TARGET_VIRT)\n+        rust_add_target_info(\"target_feature\", \"virt\");\n+    if (TARGET_GINV)\n+        rust_add_target_info(\"target_feature\", \"ginv\");\n+    if (TARGET_MICROMIPS)\n+        rust_add_target_info(\"target_feature\", \"micromips\");\n+    // TODO: add cnmips and cnmipsp if there are gcc equivalent features\n+    // TODO: find out what use-tcc-in-div (\"force the assembler to use trapping\") corresponds to\n+    // TODO ensure below variable works\n+    if (!mips_madd4)\n+        rust_add_target_info(\"target_feature\", \"nomadd4\");   \n+    if (TARGET_MT)\n+        rust_add_target_info(\"target_feature\", \"mt\");\n+    if (TARGET_LONG_CALLS)\n+        rust_add_target_info(\"target_feature\", \"long-calls\");   \n+    if (TARGET_XGOT)\n+        rust_add_target_info(\"target_feature\", \"xgot\");\n+    /* TODO: find out what use-indirect-jump-hazard corresponds with (\"use indirect jump guards to prevent\n+     * certain speculation based attacks\") */\n+}"}, {"sha": "44e66448ecff5eb7ca4675c321645aec443ae475", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -661,6 +661,9 @@ struct mips_cpu_info {\n /* Target CPU versions for D.  */\n #define TARGET_D_CPU_VERSIONS mips_d_target_versions\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO mips_rust_target_cpu_info\n+\n /* Default target_flags if no switches are specified  */\n \n #ifndef TARGET_DEFAULT"}, {"sha": "8be7199ba4bf21ff5a3fdee5fe660ed2f699c9b3", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27029ad4df8faa7ee43fe0e55a867d0ec14e7da1/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=27029ad4df8faa7ee43fe0e55a867d0ec14e7da1", "patch": "@@ -28,3 +28,7 @@ frame-header-opt.o: $(srcdir)/config/mips/frame-header-opt.c\n mips-d.o: $(srcdir)/config/mips/mips-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n+\n+mips-rust.o: $(srcdir)/config/mips/mips-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}