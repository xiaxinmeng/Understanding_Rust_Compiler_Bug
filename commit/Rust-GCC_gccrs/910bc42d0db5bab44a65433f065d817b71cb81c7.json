{"sha": "910bc42d0db5bab44a65433f065d817b71cb81c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwYmM0MmQwZGI1YmFiNDRhNjU0MzNmMDY1ZDgxN2I3MWNiODFjNw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-11-25T12:15:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-11-25T12:15:14Z"}, "message": "regclass.c (init_reg_sets): Move code that calculates tables dependent on reg_class_contents from here...\n\n\t* regclass.c (init_reg_sets): Move code that calculates tables\n\tdependent on reg_class_contents from here...\n\t(init_reg_sets_1): To here.\n\nFrom-SVN: r23858", "tree": {"sha": "cb91760c594933a20e318bc948f3908f627eea36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb91760c594933a20e318bc948f3908f627eea36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910bc42d0db5bab44a65433f065d817b71cb81c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910bc42d0db5bab44a65433f065d817b71cb81c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910bc42d0db5bab44a65433f065d817b71cb81c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910bc42d0db5bab44a65433f065d817b71cb81c7/comments", "author": null, "committer": null, "parents": [{"sha": "0b3d776a4260dc4dbecb16a0cd63aec58c96bb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3d776a4260dc4dbecb16a0cd63aec58c96bb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3d776a4260dc4dbecb16a0cd63aec58c96bb7d"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "ce063a0d71e929ca081da89c9fd1bf159cbe84c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=910bc42d0db5bab44a65433f065d817b71cb81c7", "patch": "@@ -1,3 +1,9 @@\n+Wed Nov 25 20:11:04 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* regclass.c (init_reg_sets): Move code that calculates tables\n+\tdependent on reg_class_contents from here...\n+\t(init_reg_sets_1): To here.\n+\n Wed Nov 25 14:54:46 1998  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n \n         * cpplib.h: Delete struct import_file.  Add ihash element to"}, {"sha": "b442cc266be39fc1da390689c9fb4ce08e02385e", "filename": "gcc/regclass.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=910bc42d0db5bab44a65433f065d817b71cb81c7", "patch": "@@ -236,6 +236,25 @@ init_reg_sets ()\n   bcopy (initial_call_used_regs, call_used_regs, sizeof call_used_regs);\n   bzero (global_regs, sizeof global_regs);\n \n+  /* Do any additional initialization regsets may need */\n+  INIT_ONCE_REG_SET ();\n+}\n+\n+/* After switches have been processed, which perhaps alter\n+   `fixed_regs' and `call_used_regs', convert them to HARD_REG_SETs.  */\n+\n+static void\n+init_reg_sets_1 ()\n+{\n+  register unsigned int i, j;\n+\n+  /* This macro allows the fixed or call-used registers\n+     and the register classes to depend on target flags.  */\n+\n+#ifdef CONDITIONAL_REGISTER_USAGE\n+  CONDITIONAL_REGISTER_USAGE;\n+#endif\n+\n   /* Compute number of hard regs in each class.  */\n \n   bzero ((char *) reg_class_size, sizeof reg_class_size);\n@@ -339,25 +358,6 @@ init_reg_sets ()\n \t}\n     }\n \n-  /* Do any additional initialization regsets may need */\n-  INIT_ONCE_REG_SET ();\n-}\n-\n-/* After switches have been processed, which perhaps alter\n-   `fixed_regs' and `call_used_regs', convert them to HARD_REG_SETs.  */\n-\n-static void\n-init_reg_sets_1 ()\n-{\n-  register unsigned int i, j;\n-\n-  /* This macro allows the fixed or call-used registers\n-     to depend on target flags.  */\n-\n-#ifdef CONDITIONAL_REGISTER_USAGE\n-  CONDITIONAL_REGISTER_USAGE;\n-#endif\n-\n   /* Initialize \"constant\" tables.  */\n \n   CLEAR_HARD_REG_SET (fixed_reg_set);"}, {"sha": "9d4bb3b82d8565277d41ba96421b93b7fd82034c", "filename": "gcc/tm.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910bc42d0db5bab44a65433f065d817b71cb81c7/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=910bc42d0db5bab44a65433f065d817b71cb81c7", "patch": "@@ -1357,9 +1357,17 @@ preserve the entire contents of a register across a call.\n @findex fixed_regs\n @findex call_used_regs\n @item CONDITIONAL_REGISTER_USAGE\n-Zero or more C statements that may conditionally modify two variables\n-@code{fixed_regs} and @code{call_used_regs} (both of type @code{char\n-[]}) after they have been initialized from the two preceding macros.\n+Zero or more C statements that may conditionally modify four variables\n+@code{fixed_regs}, @code{call_used_regs}, @code{global_regs}\n+(these three are of type @code{char []}) and @code{reg_class_contents}\n+(of type @code{HARD_REG_SET}).\n+Before the macro is called @code{fixed_regs}, @code{call_used_regs}\n+and @code(reg_class_contents) have been initialized from \n+@code{FIXED_REGISTERS}, @code{CALL_USED_REGISTERS} and\n+@code{REG_CLASS_CONTENTS}, respectively,\n+@code{global_regs} has been cleared, and any @samp{-ffixed-@var{reg}},\n+@samp{-fcall-used-@var{reg}} and @samp{-fcall-saved-@var{reg}} command\n+options have been applied.\n \n This is necessary in case the fixed or call-clobbered registers depend\n on target flags."}]}