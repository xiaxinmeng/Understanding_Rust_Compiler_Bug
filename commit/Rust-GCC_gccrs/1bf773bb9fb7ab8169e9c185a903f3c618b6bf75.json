{"sha": "1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmNzczYmI5ZmI3YWI4MTY5ZTljMTg1YTkwM2YzYzYxOGI2YmY3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:38:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:38:05Z"}, "message": "[multiple changes]\n\n2011-08-04  Bob Duff  <duff@adacore.com>\n\n\t* sem_type.adb (Covers): If T2 is a subtype of a class-wide type, we\n\tneed to compare with Class_Wide_Type (T2), in order to get at the\n\toriginal class-wide type node.\n\t* sem_type.ads (Covers): Improve the comment.\n\t* einfo.ads (Class_Wide_Type): Improve the comment.\n\t* exp_intr.adb (Expand_Unc_Deallocation): Remove unnecessary setting of\n\tthe type of the Deref.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi: Document that Test_Case pragma can only appear on\n\tseparate declarations.\n\t* sem_prag.adb (procedure Check_Identifier_Is_One_Of): new procedure to\n\tcheck identifier of pragma argument.\n\t(Chain_TC): check that no other test case associated to the same entity\n\tshare the same name.\n\t(Check_Test_Case): disallow test case inside subprogram body\n\t(Analyze_Pragma): correct call to check identifier and not argument\n\t* sem_util.adb, sem_util.ads (Get_Name_From_Test_Case_Pragma): new\n\tfunction gets name from test case pragma.\n\nFrom-SVN: r177385", "tree": {"sha": "e56e2122ef57259e9264e424a349c3214e4593bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56e2122ef57259e9264e424a349c3214e4593bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/comments", "author": null, "committer": null, "parents": [{"sha": "dac3bede918b07ddb13d2efae1fbda9f4d81468f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac3bede918b07ddb13d2efae1fbda9f4d81468f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac3bede918b07ddb13d2efae1fbda9f4d81468f"}], "stats": {"total": 166, "additions": 119, "deletions": 47}, "files": [{"sha": "d2e9f0d85b3d6cd562d8a7deb9803f4f220ef3ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -1,3 +1,26 @@\n+2011-08-04  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_type.adb (Covers): If T2 is a subtype of a class-wide type, we\n+\tneed to compare with Class_Wide_Type (T2), in order to get at the\n+\toriginal class-wide type node.\n+\t* sem_type.ads (Covers): Improve the comment.\n+\t* einfo.ads (Class_Wide_Type): Improve the comment.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Remove unnecessary setting of\n+\tthe type of the Deref.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi: Document that Test_Case pragma can only appear on\n+\tseparate declarations.\n+\t* sem_prag.adb (procedure Check_Identifier_Is_One_Of): new procedure to\n+\tcheck identifier of pragma argument.\n+\t(Chain_TC): check that no other test case associated to the same entity\n+\tshare the same name.\n+\t(Check_Test_Case): disallow test case inside subprogram body\n+\t(Analyze_Pragma): correct call to check identifier and not argument\n+\t* sem_util.adb, sem_util.ads (Get_Name_From_Test_Case_Pragma): new\n+\tfunction gets name from test case pragma.\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* gnat_rm.texi: Document new pragma and aspect."}, {"sha": "a4ca25d48906c3fbe24cb81d9294f053b52e2f01", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -567,8 +567,8 @@ package Einfo is\n \n --    Class_Wide_Type (Node9)\n --       Present in all type entities. For a tagged type or subtype, returns\n---       the corresponding implicitly declared class-wide type. Set to Empty\n---       for non-tagged types.\n+--       the corresponding implicitly declared class-wide type. For a\n+--       class-wide type, returns itself. Set to Empty for non-tagged types.\n \n --    Cloned_Subtype (Node16)\n --       Present in E_Record_Subtype and E_Class_Wide_Subtype entities."}, {"sha": "778996bc023e55068c2d4b27e9995df9649f25f0", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -1155,7 +1155,6 @@ package body Exp_Intr is\n                D_Type   : Entity_Id;\n \n             begin\n-               Set_Etype  (Deref, Typ);\n                Set_Parent (Deref, Free_Node);\n                D_Subtyp := Make_Subtype_From_Expr (Deref, Desig_T);\n "}, {"sha": "8c22975c42c1cac4a4aa018197ccdfd464a3599b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -5025,13 +5025,15 @@ pragma Test_Case (\n @end smallexample\n \n @noindent\n-The @code{Test_Case} pragma applies to the same entities as pragmas\n-@code{Precondition} and @code{Postcondition}. In particular, the\n-placement and visibility rules are identical to those described for pre-\n-and postconditions. But the presence of pragma @code{Test_Case} does not\n-lead to any modification of the code generated by the compiler. Rather,\n-its purpose is to document finer-grain specifications for use by testing\n-and verification tools.\n+The @code{Test_Case} pragma allows defining fine-grain specifications\n+for use by testing and verification tools. The compiler only checks its\n+validity but the presence of pragma @code{Test_Case} does not lead to\n+any modification of the code generated by the compiler.\n+\n+@code{Test_Case} pragmas may only appear immediately following the\n+(separate) declaration of a subprogram. Only other pragmas may intervene\n+(that is appear between the subprogram declaration and its\n+postconditions).\n \n The compiler checks that boolean expression given in @code{Requires} and\n @code{Ensures} are valid, where the rules for @code{Requires} are the\n@@ -5053,14 +5055,6 @@ package Math_Functions is\n end Math_Functions;\n @end smallexample\n \n-@noindent\n-@code{Test_Case} pragmas may appear either immediately following the\n-(separate) declaration of a subprogram, or at the start of the\n-declarations of a subprogram body. Only other pragmas may intervene\n-(that is appear between the subprogram declaration and its test cases,\n-or appear before the test case in the declaration sequence in a\n-subprogram body).\n-\n @node Pragma Thread_Local_Storage\n @unnumberedsec Pragma Thread_Local_Storage\n @findex Thread_Local_Storage"}, {"sha": "3eb0bdb70f0f8d7be2328446cc097cd1a192596b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 63, "deletions": 22, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -423,7 +423,13 @@ package body Sem_Prag is\n       --  Checks that the given argument has an identifier, and if so, requires\n       --  it to match the given identifier name. If there is no identifier, or\n       --  a non-matching identifier, then an error message is given and\n-      --  Error_Pragmas raised.\n+      --  Pragma_Exit is raised.\n+\n+      procedure Check_Identifier_Is_One_Of (Arg : Node_Id; N1, N2 : Name_Id);\n+      --  Checks that the given argument has an identifier, and if so, requires\n+      --  it to match one of the given identifier names. If there is no\n+      --  identifier, or a non-matching identifier, then an error message is\n+      --  given and Pragma_Exit is raised.\n \n       procedure Check_In_Main_Program;\n       --  Common checks for pragmas that appear within a main program\n@@ -454,12 +460,12 @@ package body Sem_Prag is\n       procedure Check_Optional_Identifier (Arg : Node_Id; Id : Name_Id);\n       --  Checks if the given argument has an identifier, and if so, requires\n       --  it to match the given identifier name. If there is a non-matching\n-      --  identifier, then an error message is given and Error_Pragmas raised.\n+      --  identifier, then an error message is given and Pragma_Exit is raised.\n \n       procedure Check_Optional_Identifier (Arg : Node_Id; Id : String);\n       --  Checks if the given argument has an identifier, and if so, requires\n       --  it to match the given identifier name. If there is a non-matching\n-      --  identifier, then an error message is given and Error_Pragmas raised.\n+      --  identifier, then an error message is given and Pragma_Exit is raised.\n       --  In this version of the procedure, the identifier name is given as\n       --  a string with lower case letters.\n \n@@ -1432,6 +1438,30 @@ package body Sem_Prag is\n          end if;\n       end Check_Identifier;\n \n+      --------------------------------\n+      -- Check_Identifier_Is_One_Of --\n+      --------------------------------\n+\n+      procedure Check_Identifier_Is_One_Of (Arg : Node_Id; N1, N2 : Name_Id) is\n+      begin\n+         if Present (Arg)\n+           and then Nkind (Arg) = N_Pragma_Argument_Association\n+         then\n+            if Chars (Arg) = No_Name then\n+               Error_Msg_Name_1 := Pname;\n+               Error_Msg_N (\"pragma% argument expects an identifier\", Arg);\n+               raise Pragma_Exit;\n+\n+            elsif Chars (Arg) /= N1\n+              and then Chars (Arg) /= N2\n+            then\n+               Error_Msg_Name_1 := Pname;\n+               Error_Msg_N (\"invalid identifier for pragma% argument\", Arg);\n+               raise Pragma_Exit;\n+            end if;\n+         end if;\n+      end Check_Identifier_Is_One_Of;\n+\n       ---------------------------\n       -- Check_In_Main_Program --\n       ---------------------------\n@@ -1989,6 +2019,33 @@ package body Sem_Prag is\n             --  in this analysis, allowing forward references. The analysis\n             --  happens at the end of Analyze_Declarations.\n \n+            --  There should not be another test case with the same name\n+            --  associated to this subprogram.\n+\n+            declare\n+               Name : constant String_Id := Get_Name_From_Test_Case_Pragma (N);\n+               TC   : Node_Id;\n+\n+            begin\n+               TC := Spec_TC_List (Contract (S));\n+               while Present (TC) loop\n+\n+                  if String_Equal\n+                    (Name, Get_Name_From_Test_Case_Pragma (TC))\n+                  then\n+                     Error_Msg_Sloc := Sloc (TC);\n+\n+                     if From_Aspect_Specification (N) then\n+                        Error_Pragma (\"name for aspect% is already used#\");\n+                     else\n+                        Error_Pragma (\"name for pragma% is already used#\");\n+                     end if;\n+                  end if;\n+\n+                  TC := Next_Pragma (TC);\n+               end loop;\n+            end;\n+\n             --  Chain spec TC pragma to list for subprogram\n \n             Set_Next_Pragma (N, Spec_TC_List (Contract (S)));\n@@ -2039,25 +2096,9 @@ package body Sem_Prag is\n          end loop;\n \n          --  If we fall through loop, pragma is at start of list, so see if it\n-         --  is at the start of declarations of a subprogram body.\n+         --  is in the pragmas after a library level subprogram.\n \n-         if Nkind (Parent (N)) = N_Subprogram_Body\n-           and then List_Containing (N) = Declarations (Parent (N))\n-         then\n-            if Operating_Mode /= Generate_Code\n-              or else Inside_A_Generic\n-            then\n-               --  Analyze pragma expressions for correctness and for ASIS use\n-\n-               Preanalyze_TC_Args (Get_Requires_From_Test_Case_Pragma (N),\n-                                   Get_Ensures_From_Test_Case_Pragma (N));\n-            end if;\n-\n-            return;\n-\n-         --  See if it is in the pragmas after a library level subprogram\n-\n-         elsif Nkind (Parent (N)) = N_Compilation_Unit_Aux then\n+         if Nkind (Parent (N)) = N_Compilation_Unit_Aux then\n             Chain_TC (Unit (Parent (Parent (N))));\n             return;\n          end if;\n@@ -13246,7 +13287,7 @@ package body Sem_Prag is\n                Check_Identifier (Arg3, Name_Requires);\n                Check_Identifier (Arg4, Name_Ensures);\n             else\n-               Check_Arg_Is_One_Of (Arg3, Name_Requires, Name_Ensures);\n+               Check_Identifier_Is_One_Of (Arg3, Name_Requires, Name_Ensures);\n             end if;\n \n             Check_Test_Case;"}, {"sha": "12f391387436cfe44dd1636a70101bd7bc7393ac", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -884,12 +884,13 @@ package body Sem_Type is\n             return False;\n          end;\n \n-         --  In a dispatching call the actual may be class-wide, the formal\n-         --  may be its specific type, or that of a descendent of it.\n+      --  In a dispatching call, the formal is of some specific type, and the\n+      --  actual is of the corresponding class-wide type, including a subtype\n+      --  of the class-wide type.\n \n       elsif Is_Class_Wide_Type (T2)\n         and then\n-          (Class_Wide_Type (T1) = T2\n+          (Class_Wide_Type (T1) = Class_Wide_Type (T2)\n              or else Base_Type (Root_Type (T2)) = BT1)\n       then\n          return True;"}, {"sha": "4d46a8e1fd13aea88a7a2c5f0b5463920b4b801a", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -164,7 +164,8 @@ package Sem_Type is\n    function Covers (T1, T2 : Entity_Id) return Boolean;\n    --  This is the basic type compatibility routine. T1 is the expected type,\n    --  imposed by context, and T2 is the actual type. The processing reflects\n-   --  both the definition of type coverage and the rules for operand matching.\n+   --  both the definition of type coverage and the rules for operand matching;\n+   --  that is, this does not exactly match the RM definition of \"covers\".\n \n    function Disambiguate\n      (N      : Node_Id;"}, {"sha": "b7e3f21ff76c67f3f9a5b07e8e6c7e7c4cf105f0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -4331,6 +4331,16 @@ package body Sem_Util is\n       return Entity_Id (Get_Name_Table_Info (Id));\n    end Get_Name_Entity_Id;\n \n+   ------------------------------------\n+   -- Get_Name_From_Test_Case_Pragma --\n+   ------------------------------------\n+\n+   function Get_Name_From_Test_Case_Pragma (N : Node_Id) return String_Id is\n+   begin\n+      return\n+        Strval (Get_Pragma_Arg (First (Pragma_Argument_Associations (N))));\n+   end Get_Name_From_Test_Case_Pragma;\n+\n    -------------------\n    -- Get_Pragma_Id --\n    -------------------"}, {"sha": "5078b3a23c707fe60c5f74c1f9b01c0dc3e8bc0a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf773bb9fb7ab8169e9c185a903f3c618b6bf75/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1bf773bb9fb7ab8169e9c185a903f3c618b6bf75", "patch": "@@ -485,7 +485,7 @@ package Sem_Util is\n    --  Otherwise return Empty. Expression N should have been resolved already.\n \n    function Get_Ensures_From_Test_Case_Pragma (N : Node_Id) return Node_Id;\n-   --  Return the Ensures components of Test_Case pragma N, or Empty otherwise\n+   --  Return the Ensures component of Test_Case pragma N, or Empty otherwise\n \n    function Get_Generic_Entity (N : Node_Id) return Entity_Id;\n    --  Returns the true generic entity in an instantiation. If the name in the\n@@ -518,6 +518,9 @@ package Sem_Util is\n    --  is the innermost visible entity with the given name. See the body of\n    --  Sem_Ch8 for further details on handling of entity visibility.\n \n+   function Get_Name_From_Test_Case_Pragma (N : Node_Id) return String_Id;\n+   --  Return the Name component of Test_Case pragma N\n+\n    function Get_Pragma_Id (N : Node_Id) return Pragma_Id;\n    pragma Inline (Get_Pragma_Id);\n    --  Obtains the Pragma_Id from the Chars field of Pragma_Identifier (N)\n@@ -534,7 +537,7 @@ package Sem_Util is\n    --  with any other kind of entity.\n \n    function Get_Requires_From_Test_Case_Pragma (N : Node_Id) return Node_Id;\n-   --  Return the Requires components of Test_Case pragma N, or Empty otherwise\n+   --  Return the Requires component of Test_Case pragma N, or Empty otherwise\n \n    function Get_Subprogram_Entity (Nod : Node_Id) return Entity_Id;\n    --  Nod is either a procedure call statement, or a function call, or an"}]}