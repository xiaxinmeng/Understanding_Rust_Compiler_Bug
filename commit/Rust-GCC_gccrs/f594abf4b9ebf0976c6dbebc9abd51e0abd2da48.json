{"sha": "f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5NGFiZjRiOWViZjA5NzZjNmRiZWJjOWFiZDUxZTBhYmQyZGE0OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-03-20T21:53:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-03-20T21:53:40Z"}, "message": "re PR c++/65398 ([C++11] GCC rejects constexpr variable definitions with valid initialization)\n\n\tPR c++/65398\n\t* constexpr.c (cxx_fold_indirect_ref): Transform *(&A[i] p+ j) into\n\tA[i + j].\n\n\t* g++.dg/cpp0x/pr65398.C: New test.\n\nFrom-SVN: r221544", "tree": {"sha": "9fd7386d7df1c1a211bdaee788626840958f801d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fd7386d7df1c1a211bdaee788626840958f801d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "730c436a33f0978a689c866df072ea3540ed037d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c436a33f0978a689c866df072ea3540ed037d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730c436a33f0978a689c866df072ea3540ed037d"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "9bc6337991bf7d59468cecde0381e43ecc8b4223", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "patch": "@@ -1,3 +1,9 @@\n+2015-03-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65398\n+\t* constexpr.c (cxx_fold_indirect_ref): Transform *(&A[i] p+ j) into\n+\tA[i + j].\n+\n 2015-03-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/65072"}, {"sha": "37b619d56ff2c0cd5518749474fab6d0d16f474f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "patch": "@@ -2427,6 +2427,27 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t\t    break;\n \t\t  }\n \t    }\n+\t  /* *(&A[i] p+ j) => A[i + j] */\n+\t  else if (TREE_CODE (op00) == ARRAY_REF\n+\t\t   && TREE_CODE (TREE_OPERAND (op00, 1)) == INTEGER_CST\n+\t\t   && TREE_CODE (op01) == INTEGER_CST)\n+\t    {\n+\t      tree t = fold_convert_loc (loc, ssizetype,\n+\t\t\t\t\t TREE_OPERAND (op00, 1));\n+\t      tree nelts\n+\t\t= array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n+\t      /* Don't fold an out-of-bound access.  */\n+\t      if (!tree_int_cst_le (t, nelts))\n+\t\treturn NULL_TREE;\n+\t      /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n+\t\t as signed.  */\n+\t      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype,\n+\t\t\t\t      cp_fold_convert (ssizetype, op01),\n+\t\t\t\t      TYPE_SIZE_UNIT (type));\n+\t      t = size_binop_loc (loc, PLUS_EXPR, op01, t);\n+\t      return build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (op00, 0),\n+\t\t\t\t t, NULL_TREE, NULL_TREE);\n+\t    }\n \t}\n     }\n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */"}, {"sha": "a62b54c58a6b7352a5aa70e847229857b64d9aba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "patch": "@@ -1,3 +1,8 @@\n+2015-03-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65398\n+\t* g++.dg/cpp0x/pr65398.C: New test.\n+\n 2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65475"}, {"sha": "a4aeba580fc889a0ada859d6de96f381d01514c3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr65398.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f594abf4b9ebf0976c6dbebc9abd51e0abd2da48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398.C?ref=f594abf4b9ebf0976c6dbebc9abd51e0abd2da48", "patch": "@@ -0,0 +1,70 @@\n+// PR c++/65398\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr char s[] = \"abc\";\n+constexpr char c1 = *(&s[0] + 0);\n+constexpr char c2 = *(&s[0] + 1);\n+constexpr char c3 = *(&s[1] + 0);\n+constexpr char c4 = *(&s[1] + 1);\n+constexpr char c5 = *(&s[2] + 0);\n+constexpr char c6 = *(&s[0] + 2);\n+constexpr char c7 = *(&s[2] + 1);\n+\n+constexpr char d1 = *(&s[4] - 0); // { dg-error \"array subscript out of bound\" }\n+constexpr char d2 = *(&s[4] - 1);\n+constexpr char d3 = *(&s[4] - 2);\n+constexpr char d4 = *(&s[4] - 3);\n+constexpr char d5 = *(&s[4] - 4);\n+constexpr char d6 = *(&s[4] - 5);  // { dg-error \"negative array subscript\" }\n+\n+/* Don't accept invalid stuff.  */\n+constexpr char e1 = *(&s[5] - 1); // { dg-error \"is not a constant expression\" }\n+constexpr char e2 = *(&s[5] - 2); // { dg-error \"is not a constant expression\" }\n+constexpr char e3 = *(&s[5] - 3); // { dg-error \"is not a constant expression\" }\n+\n+SA (c1 == 'a');\n+SA (c2 == 'b');\n+SA (c3 == 'b');\n+SA (c4 == 'c');\n+SA (c5 == 'c');\n+SA (c6 == 'c');\n+SA (c7 == '\\0');\n+SA (d2 == '\\0');\n+SA (d3 == 'c');\n+SA (d4 == 'b');\n+SA (d5 == 'a');\n+\n+constexpr int l[] = { 'c', 'd', 'e', '\\0' };\n+constexpr int i1 = *(&l[0] + 0);\n+constexpr int i2 = *(&l[0] + 1);\n+constexpr int i3 = *(&l[1] + 0);\n+constexpr int i4 = *(&l[1] + 1);\n+constexpr int i5 = *(&l[2] + 0);\n+constexpr int i6 = *(&l[0] + 2);\n+constexpr int i7 = *(&l[2] + 1);\n+\n+constexpr char j1 = *(&l[4] - 0); // { dg-error \"array subscript out of bound\" }\n+constexpr char j2 = *(&l[4] - 1);\n+constexpr char j3 = *(&l[4] - 2);\n+constexpr char j4 = *(&l[4] - 3);\n+constexpr char j5 = *(&l[4] - 4);\n+constexpr char j6 = *(&l[4] - 5);  // { dg-error \"negative array subscript\" }\n+\n+/* Don't accept invalid stuff.  */\n+constexpr char k1 = *(&l[5] - 1); // { dg-error \"is not a constant expression\" }\n+constexpr char k2 = *(&l[5] - 2); // { dg-error \"is not a constant expression\" }\n+constexpr char k3 = *(&l[5] - 3); // { dg-error \"is not a constant expression\" }\n+\n+SA (i1 == 'c');\n+SA (i2 == 'd');\n+SA (i3 == 'd');\n+SA (i4 == 'e');\n+SA (i5 == 'e');\n+SA (i6 == 'e');\n+SA (i7 == '\\0');\n+SA (j2 == '\\0');\n+SA (j3 == 'e');\n+SA (j4 == 'd');\n+SA (j5 == 'c');"}]}