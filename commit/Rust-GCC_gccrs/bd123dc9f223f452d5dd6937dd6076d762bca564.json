{"sha": "bd123dc9f223f452d5dd6937dd6076d762bca564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxMjNkYzlmMjIzZjQ1MmQ1ZGQ2OTM3ZGQ2MDc2ZDc2MmJjYTU2NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-26T18:55:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-26T18:55:13Z"}, "message": "Opps.  Checked in some development patches by accident.\n\nFrom-SVN: r16189", "tree": {"sha": "fba05c2d98217ae609813fd84abcae0dd4e77ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba05c2d98217ae609813fd84abcae0dd4e77ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd123dc9f223f452d5dd6937dd6076d762bca564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd123dc9f223f452d5dd6937dd6076d762bca564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd123dc9f223f452d5dd6937dd6076d762bca564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd123dc9f223f452d5dd6937dd6076d762bca564/comments", "author": null, "committer": null, "parents": [{"sha": "962867229aa0ebb3d8b83ba20b25f47cba491ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962867229aa0ebb3d8b83ba20b25f47cba491ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962867229aa0ebb3d8b83ba20b25f47cba491ad7"}], "stats": {"total": 24, "additions": 1, "deletions": 23}, "files": [{"sha": "fb788ceb670055f84e7e22e7271356fbfb51d808", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd123dc9f223f452d5dd6937dd6076d762bca564/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd123dc9f223f452d5dd6937dd6076d762bca564/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=bd123dc9f223f452d5dd6937dd6076d762bca564", "patch": "@@ -100,8 +100,6 @@ find_base_value (src)\n \t even when the argument registers are used for other purposes.  */\n       if (REGNO (src) < FIRST_PSEUDO_REGISTER && copying_arguments)\n \treturn reg_base_value[REGNO (src)];\n-      if (REG_N_SETS (REGNO (src)) == 1 && reg_base_value[REGNO (src)])\n-\treturn reg_base_value[REGNO (src)];\n       return src;\n \n     case MEM:\n@@ -124,21 +122,7 @@ find_base_value (src)\n     case PLUS:\n     case MINUS:\n       {\n-\trtx temp, src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);\n-\n-\tif (GET_CODE (src_0) == REG)\n-\t  {\n-\t    temp = find_base_value (src_0);\n-\t    if (temp)\n-\t      src_0 = temp;\n-\t  }\n-\n-\tif (GET_CODE (src_1) == REG)\n-\t  {\n-\t    temp = find_base_value (src_1);\n-\t    if (temp)\n-\t      src_1 = temp;\n-\t  }\n+\trtx src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);\n \n \t/* Guess which operand is the base address.\n \n@@ -153,12 +137,6 @@ find_base_value (src)\n \t    || GET_CODE (src_0) == CONST)\n \t  return find_base_value (src_0);\n \n-\tif (GET_CODE (src_0) == CONST_INT\n-\t    || GET_CODE (src_1) == SYMBOL_REF\n-\t    || GET_CODE (src_1) == LABEL_REF\n-\t    || GET_CODE (src_1) == CONST)\n-\t  return find_base_value (src_1);\n-\n \tif (GET_CODE (src_0) == REG && REGNO_POINTER_FLAG (REGNO (src_0)))\n \t  return find_base_value (src_0);\n "}]}