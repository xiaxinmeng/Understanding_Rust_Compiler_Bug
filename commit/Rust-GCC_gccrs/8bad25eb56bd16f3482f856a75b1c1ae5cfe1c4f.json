{"sha": "8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhZDI1ZWI1NmJkMTZmMzQ4MmY4NTZhNzViMWMxYWU1Y2ZlMWM0Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T10:29:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T11:49:46Z"}, "message": "middle-end/98773 - always sign extend CHREC_RIGHT\n\nThe previous change exposed a miscompile when trying to interpret\nCHREC_RIGHT correctly which in fact it already was to the extent\nit is used.  The following reverts this part of the change, only\nretaining the singling out of HOST_WIDE_INT_MIN.\n\n2021-01-22  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/98773\n\t* tree-data-ref.c (initalize_matrix_A): Revert previous\n\tchange, retaining failing on HOST_WIDE_INT_MIN CHREC_RIGHT.\n\n\t* gcc.dg/torture/pr98773.c: New testcase.", "tree": {"sha": "ee7343ed598d84768a69000931c1c0efd02b6c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7343ed598d84768a69000931c1c0efd02b6c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36fe1cdc9534c36c02803ce97557130354d2b2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fe1cdc9534c36c02803ce97557130354d2b2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fe1cdc9534c36c02803ce97557130354d2b2a0"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "026e8efba5cf8d605c7329b012e8097b88cfe817", "filename": "gcc/testsuite/gcc.dg/torture/pr98773.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98773.c?ref=8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+\n+char a[128];\n+\n+void __attribute__((noipa))\n+foo ()\n+{\n+  for (unsigned i = 27; i >= 5; --i)\n+    a[i] = a[i-5];\n+}\n+\n+int main()\n+{\n+  __builtin_memcpy (a, \"Hello World\", sizeof (\"Hello World\"));\n+  foo ();\n+  if (__builtin_memcmp (a + 5, \"Hello World\", sizeof (\"Hello World\")) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "124a7bea6a94161556a6622fa7b113b3cef98bcf", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8bad25eb56bd16f3482f856a75b1c1ae5cfe1c4f", "patch": "@@ -3924,21 +3924,10 @@ initialize_matrix_A (lambda_matrix A, tree chrec, unsigned index, int mult)\n   switch (TREE_CODE (chrec))\n     {\n     case POLYNOMIAL_CHREC:\n-      /* CHREC_RIGHT and its negated value should fit in a lambda_int.\n-\t Pointer typed chrecs right are to be interpreted signed.  */\n       HOST_WIDE_INT chrec_right;\n-      if (POINTER_TYPE_P (chrec_type (chrec)))\n-\t{\n-\t  if (!cst_and_fits_in_hwi (CHREC_RIGHT (chrec)))\n-\t    return chrec_dont_know;\n-\t  chrec_right = int_cst_value (CHREC_RIGHT (chrec));\n-\t}\n-      else\n-\t{\n-\t  if (!tree_fits_shwi_p (CHREC_RIGHT (chrec)))\n-\t    return chrec_dont_know;\n-\t  chrec_right = tree_to_shwi (CHREC_RIGHT (chrec));\n-\t}\n+      if (!cst_and_fits_in_hwi (CHREC_RIGHT (chrec)))\n+\treturn chrec_dont_know;\n+      chrec_right = int_cst_value (CHREC_RIGHT (chrec));\n       /* We want to be able to negate without overflow.  */\n       if (chrec_right == HOST_WIDE_INT_MIN)\n \treturn chrec_dont_know;"}]}