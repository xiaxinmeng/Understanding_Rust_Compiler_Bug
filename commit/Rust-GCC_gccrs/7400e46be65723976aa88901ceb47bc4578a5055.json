{"sha": "7400e46be65723976aa88901ceb47bc4578a5055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwMGU0NmJlNjU3MjM5NzZhYTg4OTAxY2ViNDdiYzQ1NzhhNTA1NQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2009-11-27T14:30:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2009-11-27T14:30:34Z"}, "message": "Remove support for Itanium1 (Merced)\n\n\t* config/ia64/itanium1.md: Remove.\n\t* config/ia64/ia64.md: Do not include it.\n\t* config/ia64/ia64.c (ia64_handle_option): Remove \"itanium\",\n\t\"itanium1\", and \"merced\" from the processor alias table.\n\t(clocks, add_cycles): Remove global variables.\n\t(ia64_sched_reorder2): Don't set/use them.\n\t(ia64_dfa_new_cycle, ia64_h_i_d_extended, ia64_reorg): Likewise.\n\t(bundling): Likewise. Remove extra pass for MMMUL/MMSHF.\n\nFrom-SVN: r154707", "tree": {"sha": "c31a4b70816cc51180e8dff0da19651d8911d00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31a4b70816cc51180e8dff0da19651d8911d00e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7400e46be65723976aa88901ceb47bc4578a5055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7400e46be65723976aa88901ceb47bc4578a5055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7400e46be65723976aa88901ceb47bc4578a5055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7400e46be65723976aa88901ceb47bc4578a5055/comments", "author": null, "committer": null, "parents": [{"sha": "3a892e4495f6899ae1712c75b118ea7235f97cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a892e4495f6899ae1712c75b118ea7235f97cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a892e4495f6899ae1712c75b118ea7235f97cd8"}], "stats": {"total": 1905, "additions": 16, "deletions": 1889}, "files": [{"sha": "2c224996eba8f6e2ab7ecab2618b46fab45d8a4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7400e46be65723976aa88901ceb47bc4578a5055", "patch": "@@ -1,3 +1,14 @@\n+2009-11-27  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/ia64/itanium1.md: Remove.\n+\t* config/ia64/ia64.md: Do not include it.\n+\t* config/ia64/ia64.c (ia64_handle_option): Remove \"itanium\",\n+\t\"itanium1\", and \"merced\" from the processor alias table.\n+\t(clocks, add_cycles): Remove global variables.\n+\t(ia64_sched_reorder2): Don't set/use them.\n+\t(ia64_dfa_new_cycle, ia64_h_i_d_extended, ia64_reorg): Likewise.\n+\t(bundling): Likewise. Remove extra pass for MMMUL/MMSHF.\n+\n 2009-11-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (last_scheduled_insn): New variable."}, {"sha": "52107df3e3a5ba3f71c5c83ee81427c3b8d122e7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 193, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=7400e46be65723976aa88901ceb47bc4578a5055", "patch": "@@ -5435,8 +5435,6 @@ fix_range (const char *const_str)\n static bool\n ia64_handle_option (size_t code, const char *arg, int value)\n {\n-  static bool warned_itanium1_deprecated;\n-\n   switch (code)\n     {\n     case OPT_mfixed_range_:\n@@ -5457,9 +5455,6 @@ ia64_handle_option (size_t code, const char *arg, int value)\n \t  }\n \tconst processor_alias_table[] =\n \t  {\n-\t    {\"itanium\", PROCESSOR_ITANIUM},\n-\t    {\"itanium1\", PROCESSOR_ITANIUM},\n-\t    {\"merced\", PROCESSOR_ITANIUM},\n \t    {\"itanium2\", PROCESSOR_ITANIUM2},\n \t    {\"mckinley\", PROCESSOR_ITANIUM2},\n \t  };\n@@ -5470,16 +5465,6 @@ ia64_handle_option (size_t code, const char *arg, int value)\n \t  if (!strcmp (arg, processor_alias_table[i].name))\n \t    {\n \t      ia64_tune = processor_alias_table[i].processor;\n-\t      if (ia64_tune == PROCESSOR_ITANIUM\n-\t\t  && ! warned_itanium1_deprecated)\n-\t\t{\n-\t\t  inform (0,\n-\t\t\t  \"value %<%s%> for -mtune= switch is deprecated\",\n-\t\t\t  arg);\n-\t\t  inform (0, \"GCC 4.4 is the last release with \"\n-\t\t\t  \"Itanium1 tuning support\");\n-\t\t  warned_itanium1_deprecated = true;\n-\t\t}\n \t      break;\n \t    }\n \tif (i == pta_size)\n@@ -6619,17 +6604,6 @@ static int stop_before_p = 0;\n \n static int clocks_length;\n \n-/* The following array element values are cycles on which the\n-   corresponding insn will be issued.  The array is used only for\n-   Itanium1.  */\n-\n-static int *clocks;\n-\n-/* The following array element values are numbers of cycles should be\n-   added to improve insn scheduling for MM_insns for Itanium1.  */\n-\n-static int *add_cycles;\n-\n /* The following variable value is number of data speculations in progress.  */\n static int pending_data_specs = 0;\n \n@@ -7003,8 +6977,6 @@ ia64_sched_reorder2 (FILE *dump ATTRIBUTE_UNUSED,\n \t\t     int sched_verbose ATTRIBUTE_UNUSED, rtx *ready,\n \t\t     int *pn_ready, int clock_var)\n {\n-  if (ia64_tune == PROCESSOR_ITANIUM && reload_completed && last_scheduled_insn)\n-    clocks [INSN_UID (last_scheduled_insn)] = clock_var;\n   return ia64_dfa_sched_reorder (dump, sched_verbose, ready, pn_ready,\n \t\t\t\t clock_var, 1);\n }\n@@ -7173,37 +7145,6 @@ ia64_dfa_new_cycle (FILE *dump, int verbose, rtx insn, int last_clock,\n   else if (reload_completed)\n     setup_clocks_p = TRUE;\n \n-  if (setup_clocks_p && ia64_tune == PROCESSOR_ITANIUM\n-      && GET_CODE (PATTERN (insn)) != ASM_INPUT\n-      && asm_noperands (PATTERN (insn)) < 0)\n-    {\n-      enum attr_itanium_class c = ia64_safe_itanium_class (insn);\n-\n-      if (c != ITANIUM_CLASS_MMMUL && c != ITANIUM_CLASS_MMSHF)\n-\t{\n-\t  sd_iterator_def sd_it;\n-\t  dep_t dep;\n-\t  int d = -1;\n-\n-\t  FOR_EACH_DEP (insn, SD_LIST_BACK, sd_it, dep)\n-\t    if (DEP_TYPE (dep) == REG_DEP_TRUE)\n-\t      {\n-\t\tenum attr_itanium_class dep_class;\n-\t\trtx dep_insn = DEP_PRO (dep);\n-\n-\t\tdep_class = ia64_safe_itanium_class (dep_insn);\n-\t\tif ((dep_class == ITANIUM_CLASS_MMMUL\n-\t\t     || dep_class == ITANIUM_CLASS_MMSHF)\n-\t\t    && last_clock - clocks [INSN_UID (dep_insn)] < 4\n-\t\t    && (d < 0\n-\t\t\t|| last_clock - clocks [INSN_UID (dep_insn)] < d))\n-\t\t  d = last_clock - clocks [INSN_UID (dep_insn)];\n-\t      }\n-\t  if (d >= 0)\n-\t    add_cycles [INSN_UID (insn)] = 3 - d;\n-\t}\n-    }\n-\n   return 0;\n }\n \n@@ -7215,17 +7156,7 @@ ia64_h_i_d_extended (void)\n   if (stops_p != NULL) \n     {\n       int new_clocks_length = get_max_uid () * 3 / 2;\n-      \n       stops_p = (char *) xrecalloc (stops_p, new_clocks_length, clocks_length, 1);\n-      \n-      if (ia64_tune == PROCESSOR_ITANIUM)\n-\t{\n-\t  clocks = (int *) xrecalloc (clocks, new_clocks_length, clocks_length,\n-\t\t\t\t      sizeof (int));\n-\t  add_cycles = (int *) xrecalloc (add_cycles, new_clocks_length,\n-\t\t\t\t\t  clocks_length, sizeof (int));\n-\t}\n-      \n       clocks_length = new_clocks_length;\n     }\n }\n@@ -8582,9 +8513,7 @@ ia64_add_bundle_selector_before (int template0, rtx insn)\n    automaton state for each insn in chosen bundle states.\n \n    So the algorithm makes two (forward and backward) passes through\n-   EBB.  There is an additional forward pass through EBB for Itanium1\n-   processor.  This pass inserts more nops to make dependency between\n-   a producer insn and MMMUL/MMSHF at least 4 cycles long.  */\n+   EBB.  */\n \n static void\n bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n@@ -8683,14 +8612,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t       || (GET_MODE (next_insn) == TImode\n \t\t   && INSN_CODE (insn) != CODE_FOR_insn_group_barrier));\n \t  if (type == TYPE_F || type == TYPE_B || type == TYPE_L\n-\t      || type == TYPE_S\n-\t      /* We need to insert 2 nops for cases like M_MII.  To\n-\t\t guarantee issuing all insns on the same cycle for\n-\t\t Itanium 1, we need to issue 2 nops after the first M\n-\t\t insn (MnnMII where n is a nop insn).  */\n-\t      || ((type == TYPE_M || type == TYPE_A)\n-\t\t  && ia64_tune == PROCESSOR_ITANIUM\n-\t\t  && !bundle_end_p && pos == 1))\n+\t      || type == TYPE_S)\n \t    issue_nops_and_insn (curr_state, 2, insn, bundle_end_p,\n \t\t\t\t only_bundle_end_p);\n \t  issue_nops_and_insn (curr_state, 1, insn, bundle_end_p,\n@@ -8726,9 +8648,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t       curr_state->before_nops_num, curr_state->after_nops_num,\n \t       curr_state->accumulated_insns_num, curr_state->branch_deviation,\n \t       curr_state->middle_bundle_stops,\n-\t       (ia64_tune == PROCESSOR_ITANIUM\n-\t\t? ((struct DFA_chip *) curr_state->dfa_state)->oneb_automaton_state\n-\t\t: ((struct DFA_chip *) curr_state->dfa_state)->twob_automaton_state),\n+\t       ((struct DFA_chip *) curr_state->dfa_state)->twob_automaton_state,\n \t       INSN_UID (insn));\n \t  }\n     }\n@@ -8791,9 +8711,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t     curr_state->before_nops_num, curr_state->after_nops_num,\n \t     curr_state->accumulated_insns_num, curr_state->branch_deviation,\n \t     curr_state->middle_bundle_stops,\n-\t     (ia64_tune == PROCESSOR_ITANIUM\n-\t      ? ((struct DFA_chip *) curr_state->dfa_state)->oneb_automaton_state\n-\t      : ((struct DFA_chip *) curr_state->dfa_state)->twob_automaton_state),\n+\t     ((struct DFA_chip *) curr_state->dfa_state)->twob_automaton_state,\n \t     INSN_UID (insn));\n \t}\n       /* Find the position in the current bundle window.  The window can\n@@ -8892,103 +8810,6 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t    }\n \t}\n     }\n-  if (ia64_tune == PROCESSOR_ITANIUM)\n-    /* Insert additional cycles for MM-insns (MMMUL and MMSHF).\n-       Itanium1 has a strange design, if the distance between an insn\n-       and dependent MM-insn is less 4 then we have a 6 additional\n-       cycles stall.  So we make the distance equal to 4 cycles if it\n-       is less.  */\n-    for (insn = get_next_important_insn (NEXT_INSN (prev_head_insn), tail);\n-\t insn != NULL_RTX;\n-\t insn = next_insn)\n-      {\n-\tgcc_assert (INSN_P (insn)\n-\t\t    && ia64_safe_itanium_class (insn) != ITANIUM_CLASS_IGNORE\n-\t\t    && GET_CODE (PATTERN (insn)) != USE\n-\t\t    && GET_CODE (PATTERN (insn)) != CLOBBER);\n-\tnext_insn = get_next_important_insn (NEXT_INSN (insn), tail);\n-\tif (INSN_UID (insn) < clocks_length && add_cycles [INSN_UID (insn)])\n-\t  /* We found a MM-insn which needs additional cycles.  */\n-\t  {\n-\t    rtx last;\n-\t    int i, j, n;\n-\t    int pred_stop_p;\n-\n-\t    /* Now we are searching for a template of the bundle in\n-\t       which the MM-insn is placed and the position of the\n-\t       insn in the bundle (0, 1, 2).  Also we are searching\n-\t       for that there is a stop before the insn.  */\n-\t    last = prev_active_insn (insn);\n-\t    pred_stop_p = recog_memoized (last) == CODE_FOR_insn_group_barrier;\n-\t    if (pred_stop_p)\n-\t      last = prev_active_insn (last);\n-\t    n = 0;\n-\t    for (;; last = prev_active_insn (last))\n-\t      if (recog_memoized (last) == CODE_FOR_bundle_selector)\n-\t\t{\n-\t\t  template0 = XINT (XVECEXP (PATTERN (last), 0, 0), 0);\n-\t\t  if (template0 == 9)\n-\t\t    /* The insn is in MLX bundle.  Change the template\n-\t\t       onto MFI because we will add nops before the\n-\t\t       insn.  It simplifies subsequent code a lot.  */\n-\t\t    PATTERN (last)\n-\t\t      = gen_bundle_selector (const2_rtx); /* -> MFI */\n-\t\t  break;\n-\t\t}\n-\t      else if (recog_memoized (last) != CODE_FOR_insn_group_barrier\n-\t\t       && (ia64_safe_itanium_class (last)\n-\t\t\t   != ITANIUM_CLASS_IGNORE))\n-\t\tn++;\n-\t    /* Some check of correctness: the stop is not at the\n-\t       bundle start, there are no more 3 insns in the bundle,\n-\t       and the MM-insn is not at the start of bundle with\n-\t       template MLX.  */\n-\t    gcc_assert ((!pred_stop_p || n)\n-\t\t\t&& n <= 2\n-\t\t\t&& (template0 != 9 || !n));\n-\t    /* Put nops after the insn in the bundle.  */\n-\t    for (j = 3 - n; j > 0; j --)\n-\t      ia64_emit_insn_before (gen_nop (), insn);\n-\t    /* It takes into account that we will add more N nops\n-\t       before the insn lately -- please see code below.  */\n-\t    add_cycles [INSN_UID (insn)]--;\n-\t    if (!pred_stop_p || add_cycles [INSN_UID (insn)])\n-\t      ia64_emit_insn_before (gen_insn_group_barrier (GEN_INT (3)),\n-\t\t\t\t     insn);\n-\t    if (pred_stop_p)\n-\t      add_cycles [INSN_UID (insn)]--;\n-\t    for (i = add_cycles [INSN_UID (insn)]; i > 0; i--)\n-\t      {\n-\t\t/* Insert \"MII;\" template.  */\n-\t\tia64_emit_insn_before (gen_bundle_selector (const0_rtx),\n-\t\t\t\t       insn);\n-\t\tia64_emit_insn_before (gen_nop (), insn);\n-\t\tia64_emit_insn_before (gen_nop (), insn);\n-\t\tif (i > 1)\n-\t\t  {\n-\t\t    /* To decrease code size, we use \"MI;I;\"\n-\t\t       template.  */\n-\t\t    ia64_emit_insn_before\n-\t\t      (gen_insn_group_barrier (GEN_INT (3)), insn);\n-\t\t    i--;\n-\t\t  }\n-\t\tia64_emit_insn_before (gen_nop (), insn);\n-\t\tia64_emit_insn_before (gen_insn_group_barrier (GEN_INT (3)),\n-\t\t\t\t       insn);\n-\t      }\n-\t    /* Put the MM-insn in the same slot of a bundle with the\n-\t       same template as the original one.  */\n-\t    ia64_add_bundle_selector_before (template0, insn);\n-\t    /* To put the insn in the same slot, add necessary number\n-\t       of nops.  */\n-\t    for (j = n; j > 0; j --)\n-\t      ia64_emit_insn_before (gen_nop (), insn);\n-\t    /* Put the stop if the original bundle had it.  */\n-\t    if (pred_stop_p)\n-\t      ia64_emit_insn_before (gen_insn_group_barrier (GEN_INT (3)),\n-\t\t\t\t     insn);\n-\t  }\n-      }\n \n #ifdef ENABLE_CHECKING\n   {\n@@ -9383,11 +9204,7 @@ ia64_reorg (void)\n       recog_memoized (ia64_nop);\n       clocks_length = get_max_uid () + 1;\n       stops_p = XCNEWVEC (char, clocks_length);\n-      if (ia64_tune == PROCESSOR_ITANIUM)\n-\t{\n-\t  clocks = XCNEWVEC (int, clocks_length);\n-\t  add_cycles = XCNEWVEC (int, clocks_length);\n-\t}\n+\n       if (ia64_tune == PROCESSOR_ITANIUM2)\n \t{\n \t  pos_1 = get_cpu_unit_code (\"2_1\");\n@@ -9459,11 +9276,6 @@ ia64_reorg (void)\n       /* We cannot reuse this one because it has been corrupted by the\n \t evil glat.  */\n       finish_bundle_states ();\n-      if (ia64_tune == PROCESSOR_ITANIUM)\n-\t{\n-\t  free (add_cycles);\n-\t  free (clocks);\n-\t}\n       free (stops_p);\n       stops_p = NULL;\n       emit_insn_group_barriers (dump_file);"}, {"sha": "f4706c7b0d79cbdfa9d7e2eab5acfd5f3bfc262d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7400e46be65723976aa88901ceb47bc4578a5055/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=7400e46be65723976aa88901ceb47bc4578a5055", "patch": "@@ -205,7 +205,6 @@\n \n (automata_option \"w\")\n \n-(include \"itanium1.md\")\n (include \"itanium2.md\")\n \n \f"}, {"sha": "e2a5283220599475fafa30046efa1a294fb5527d", "filename": "gcc/config/ia64/itanium1.md", "status": "removed", "additions": 0, "deletions": 1695, "changes": 1695, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a892e4495f6899ae1712c75b118ea7235f97cd8/gcc%2Fconfig%2Fia64%2Fitanium1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a892e4495f6899ae1712c75b118ea7235f97cd8/gcc%2Fconfig%2Fia64%2Fitanium1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fitanium1.md?ref=3a892e4495f6899ae1712c75b118ea7235f97cd8", "patch": "@@ -1,1695 +0,0 @@\n-;; Itanium1 (original Itanium) DFA descriptions for insn scheduling\n-;; and bundling.\n-;; Copyright (C) 2002, 2004, 2005, 2007 Free Software Foundation, Inc.\n-;; Contributed by Vladimir Makarov <vmakarov@redhat.com>.\n-;;\n-;; This file is part of GCC.\n-;;\n-;; GCC is free software; you can redistribute it and/or modify\n-;; it under the terms of the GNU General Public License as published by\n-;; the Free Software Foundation; either version 3, or (at your option)\n-;; any later version.\n-;;\n-;; GCC is distributed in the hope that it will be useful,\n-;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-;; GNU General Public License for more details.\n-;;\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.  */\n-;;\n-\n-\n-/* This is description of pipeline hazards based on DFA.  The\n-   following constructions can be used for this:\n-   \n-   o define_cpu_unit string [string]) describes a cpu functional unit\n-     (separated by comma).\n-\n-     1st operand: Names of cpu function units.\n-     2nd operand: Name of automaton (see comments for\n-     DEFINE_AUTOMATON).\n-\n-     All define_reservations and define_cpu_units should have unique\n-     names which cannot be \"nothing\".\n-\n-   o (exclusion_set string string) means that each CPU function unit\n-     in the first string cannot be reserved simultaneously with each\n-     unit whose name is in the second string and vise versa.  CPU\n-     units in the string are separated by commas. For example, it is\n-     useful for description CPU with fully pipelined floating point\n-     functional unit which can execute simultaneously only single\n-     floating point insns or only double floating point insns.\n-\n-   o (presence_set string string) means that each CPU function unit in\n-     the first string cannot be reserved unless at least one of\n-     pattern of units whose names are in the second string is\n-     reserved.  This is an asymmetric relation.  CPU units or unit\n-     patterns in the strings are separated by commas.  Pattern is one\n-     unit name or unit names separated by white-spaces.\n- \n-     For example, it is useful for description that slot1 is reserved\n-     after slot0 reservation for a VLIW processor.  We could describe\n-     it by the following construction\n-\n-         (presence_set \"slot1\" \"slot0\")\n-\n-     Or slot1 is reserved only after slot0 and unit b0 reservation.\n-     In this case we could write\n-\n-         (presence_set \"slot1\" \"slot0 b0\")\n-\n-     All CPU functional units in a set should belong to the same\n-     automaton.\n-\n-   o (final_presence_set string string) is analogous to\n-     `presence_set'.  The difference between them is when checking is\n-     done.  When an instruction is issued in given automaton state\n-     reflecting all current and planned unit reservations, the\n-     automaton state is changed.  The first state is a source state,\n-     the second one is a result state.  Checking for `presence_set' is\n-     done on the source state reservation, checking for\n-     `final_presence_set' is done on the result reservation.  This\n-     construction is useful to describe a reservation which is\n-     actually two subsequent reservations.  For example, if we use\n-\n-         (presence_set \"slot1\" \"slot0\")\n-\n-     the following insn will be never issued (because slot1 requires\n-     slot0 which is absent in the source state).\n-\n-         (define_reservation \"insn_and_nop\" \"slot0 + slot1\")\n-\n-     but it can be issued if we use analogous `final_presence_set'.\n-\n-   o (absence_set string string) means that each CPU function unit in\n-     the first string can be reserved only if each pattern of units\n-     whose names are in the second string is not reserved.  This is an\n-     asymmetric relation (actually exclusion set is analogous to this\n-     one but it is symmetric).  CPU units or unit patterns in the\n-     string are separated by commas.  Pattern is one unit name or unit\n-     names separated by white-spaces.\n-\n-     For example, it is useful for description that slot0 cannot be\n-     reserved after slot1 or slot2 reservation for a VLIW processor.\n-     We could describe it by the following construction\n-\n-        (absence_set \"slot2\" \"slot0, slot1\")\n-\n-     Or slot2 cannot be reserved if slot0 and unit b0 are reserved or\n-     slot1 and unit b1 are reserved .  In this case we could write\n-\n-        (absence_set \"slot2\" \"slot0 b0, slot1 b1\")\n-\n-     All CPU functional units in a set should to belong the same\n-     automaton.\n-\n-   o (final_absence_set string string) is analogous to `absence_set' but\n-     checking is done on the result (state) reservation.  See comments\n-     for final_presence_set.\n-\n-   o (define_bypass number out_insn_names in_insn_names) names bypass with\n-     given latency (the first number) from insns given by the first\n-     string (see define_insn_reservation) into insns given by the\n-     second string.  Insn names in the strings are separated by\n-     commas.\n-\n-   o (define_automaton string) describes names of an automaton\n-     generated and used for pipeline hazards recognition.  The names\n-     are separated by comma.  Actually it is possibly to generate the\n-     single automaton but unfortunately it can be very large.  If we\n-     use more one automata, the summary size of the automata usually\n-     is less than the single one.  The automaton name is used in\n-     define_cpu_unit.  All automata should have unique names.\n-\n-   o (automata_option string) describes option for generation of\n-     automata.  Currently there are the following options:\n-\n-     o \"no-minimization\" which makes no minimization of automata.\n-       This is only worth to do when we are debugging the description\n-       and need to look more accurately at reservations of states.\n-\n-     o \"ndfa\" which makes automata with nondeterministic reservation\n-        by insns.\n-\n-   o (define_reservation string string) names reservation (the first\n-     string) of cpu functional units (the 2nd string).  Sometimes unit\n-     reservations for different insns contain common parts.  In such\n-     case, you describe common part and use one its name (the 1st\n-     parameter) in regular expression in define_insn_reservation.  All\n-     define_reservations, define results and define_cpu_units should\n-     have unique names which cannot be \"nothing\".\n-\n-   o (define_insn_reservation name default_latency condition regexpr)\n-     describes reservation of cpu functional units (the 3nd operand)\n-     for instruction which is selected by the condition (the 2nd\n-     parameter).  The first parameter is used for output of debugging\n-     information.  The reservations are described by a regular\n-     expression according the following syntax:\n-\n-       regexp = regexp \",\" oneof\n-              | oneof\n-\n-       oneof = oneof \"|\" allof\n-             | allof\n-\n-       allof = allof \"+\" repeat\n-             | repeat\n- \n-       repeat = element \"*\" number\n-              | element\n-\n-       element = cpu_function_name\n-               | reservation_name\n-               | result_name\n-               | \"nothing\"\n-               | \"(\" regexp \")\"\n-\n-       1. \",\" is used for describing start of the next cycle in\n-          reservation.\n-\n-       2. \"|\" is used for describing the reservation described by the\n-          first regular expression *or* the reservation described by\n-          the second regular expression *or* etc.\n-\n-       3. \"+\" is used for describing the reservation described by the\n-          first regular expression *and* the reservation described by\n-          the second regular expression *and* etc.\n-\n-       4. \"*\" is used for convenience and simply means sequence in\n-          which the regular expression are repeated NUMBER times with\n-          cycle advancing (see \",\").\n-\n-       5. cpu function unit name which means reservation.\n-\n-       6. reservation name -- see define_reservation.\n-\n-       7. string \"nothing\" means no units reservation.\n-\n-*/\n-\n-(define_automaton \"one\")\n-\n-;;   All possible combinations of bundles/syllables\n-(define_cpu_unit \"1_0m.ii, 1_0m.mi, 1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb,\\\n-                  1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\" \"one\")\n-(define_cpu_unit \"1_0mi.i, 1_0mm.i, 1_0mf.i, 1_0mm.f, 1_0bb.b, 1_0mb.b,\\\n-                  1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\" \"one\")\n-(define_cpu_unit \"1_0mii., 1_0mmi., 1_0mfi., 1_0mmf., 1_0bbb., 1_0mbb.,\\\n-                  1_0mib., 1_0mmb., 1_0mfb.\" \"one\")\n-\n-(define_cpu_unit \"1_1m.ii, 1_1m.mi, 1_1m.fi, 1_1b.bb, 1_1m.bb,\\\n-                  1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\" \"one\")\n-(define_cpu_unit \"1_1mi.i, 1_1mm.i, 1_1mf.i, 1_1bb.b, 1_1mb.b,\\\n-                  1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\" \"one\")\n-(define_cpu_unit \"1_1mii., 1_1mmi., 1_1mfi., 1_1bbb., 1_1mbb.,\\\n-                  1_1mib., 1_1mmb., 1_1mfb.\" \"one\")\n-\n-;; Slot 1\n-(exclusion_set \"1_0m.ii\"\n-   \"1_0m.mi, 1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb, 1_0m.ib, 1_0m.mb, 1_0m.fb,\\\n-    1_0m.lx\")\n-(exclusion_set \"1_0m.mi\"\n-   \"1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb, 1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.fi\"\n-   \"1_0m.mf, 1_0b.bb, 1_0m.bb, 1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.mf\"\n-   \"1_0b.bb, 1_0m.bb, 1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0b.bb\" \"1_0m.bb, 1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.bb\" \"1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.ib\" \"1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.mb\" \"1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_0m.fb\" \"1_0m.lx\")\n-\n-;; Slot 2\n-(exclusion_set \"1_0mi.i\"\n-   \"1_0mm.i, 1_0mf.i, 1_0mm.f, 1_0bb.b, 1_0mb.b, 1_0mi.b, 1_0mm.b, 1_0mf.b,\\\n-    1_0mlx.\")\n-(exclusion_set \"1_0mm.i\"\n-   \"1_0mf.i, 1_0mm.f, 1_0bb.b, 1_0mb.b, 1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mf.i\"\n-   \"1_0mm.f, 1_0bb.b, 1_0mb.b, 1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mm.f\"\n-   \"1_0bb.b, 1_0mb.b, 1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0bb.b\" \"1_0mb.b, 1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mb.b\" \"1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mi.b\" \"1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mm.b\" \"1_0mf.b, 1_0mlx.\")\n-(exclusion_set \"1_0mf.b\" \"1_0mlx.\")\n-\n-;; Slot 3\n-(exclusion_set \"1_0mii.\"\n-   \"1_0mmi., 1_0mfi., 1_0mmf., 1_0bbb., 1_0mbb., 1_0mib., 1_0mmb., 1_0mfb.,\\\n-    1_0mlx.\")\n-(exclusion_set \"1_0mmi.\"\n-   \"1_0mfi., 1_0mmf., 1_0bbb., 1_0mbb., 1_0mib., 1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mfi.\"\n-   \"1_0mmf., 1_0bbb., 1_0mbb., 1_0mib., 1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mmf.\"\n-   \"1_0bbb., 1_0mbb., 1_0mib., 1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0bbb.\" \"1_0mbb., 1_0mib., 1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mbb.\" \"1_0mib., 1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mib.\" \"1_0mmb., 1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mmb.\" \"1_0mfb., 1_0mlx.\")\n-(exclusion_set \"1_0mfb.\" \"1_0mlx.\")\n-\n-;; Slot 4\n-(exclusion_set \"1_1m.ii\"\n-   \"1_1m.mi, 1_1m.fi, 1_1b.bb, 1_1m.bb, 1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.mi\"\n-   \"1_1m.fi, 1_1b.bb, 1_1m.bb, 1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.fi\"\n-   \"1_1b.bb, 1_1m.bb, 1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1b.bb\" \"1_1m.bb, 1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.bb\" \"1_1m.ib, 1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.ib\" \"1_1m.mb, 1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.mb\" \"1_1m.fb, 1_1m.lx\")\n-(exclusion_set \"1_1m.fb\" \"1_1m.lx\")\n-\n-;; Slot 5\n-(exclusion_set \"1_1mi.i\"\n-   \"1_1mm.i, 1_1mf.i, 1_1bb.b, 1_1mb.b, 1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mm.i\"\n-   \"1_1mf.i, 1_1bb.b, 1_1mb.b, 1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mf.i\"\n-   \"1_1bb.b, 1_1mb.b, 1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1bb.b\" \"1_1mb.b, 1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mb.b\" \"1_1mi.b, 1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mi.b\" \"1_1mm.b, 1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mm.b\" \"1_1mf.b, 1_1mlx.\")\n-(exclusion_set \"1_1mf.b\" \"1_1mlx.\")\n-\n-;; Slot 6\n-(exclusion_set \"1_1mii.\"\n-   \"1_1mmi., 1_1mfi., 1_1bbb., 1_1mbb., 1_1mib., 1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mmi.\"\n-   \"1_1mfi., 1_1bbb., 1_1mbb., 1_1mib., 1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mfi.\"\n-   \"1_1bbb., 1_1mbb., 1_1mib., 1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1bbb.\" \"1_1mbb., 1_1mib., 1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mbb.\" \"1_1mib., 1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mib.\" \"1_1mmb., 1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mmb.\" \"1_1mfb., 1_1mlx.\")\n-(exclusion_set \"1_1mfb.\" \"1_1mlx.\")\n-\n-(final_presence_set \"1_0mi.i\" \"1_0m.ii\")\n-(final_presence_set \"1_0mii.\" \"1_0mi.i\")\n-(final_presence_set \"1_1mi.i\" \"1_1m.ii\")\n-(final_presence_set \"1_1mii.\" \"1_1mi.i\")\n-\n-(final_presence_set \"1_0mm.i\" \"1_0m.mi\")\n-(final_presence_set \"1_0mmi.\" \"1_0mm.i\")\n-(final_presence_set \"1_1mm.i\" \"1_1m.mi\")\n-(final_presence_set \"1_1mmi.\" \"1_1mm.i\")\n-\n-(final_presence_set \"1_0mf.i\" \"1_0m.fi\")\n-(final_presence_set \"1_0mfi.\" \"1_0mf.i\")\n-(final_presence_set \"1_1mf.i\" \"1_1m.fi\")\n-(final_presence_set \"1_1mfi.\" \"1_1mf.i\")\n-\n-(final_presence_set \"1_0mm.f\" \"1_0m.mf\")\n-(final_presence_set \"1_0mmf.\" \"1_0mm.f\")\n-\n-(final_presence_set \"1_0bb.b\" \"1_0b.bb\")\n-(final_presence_set \"1_0bbb.\" \"1_0bb.b\")\n-(final_presence_set \"1_1bb.b\" \"1_1b.bb\")\n-(final_presence_set \"1_1bbb.\" \"1_1bb.b\")\n-\n-(final_presence_set \"1_0mb.b\" \"1_0m.bb\")\n-(final_presence_set \"1_0mbb.\" \"1_0mb.b\")\n-(final_presence_set \"1_1mb.b\" \"1_1m.bb\")\n-(final_presence_set \"1_1mbb.\" \"1_1mb.b\")\n-\n-(final_presence_set \"1_0mi.b\" \"1_0m.ib\")\n-(final_presence_set \"1_0mib.\" \"1_0mi.b\")\n-(final_presence_set \"1_1mi.b\" \"1_1m.ib\")\n-(final_presence_set \"1_1mib.\" \"1_1mi.b\")\n-\n-(final_presence_set \"1_0mm.b\" \"1_0m.mb\")\n-(final_presence_set \"1_0mmb.\" \"1_0mm.b\")\n-(final_presence_set \"1_1mm.b\" \"1_1m.mb\")\n-(final_presence_set \"1_1mmb.\" \"1_1mm.b\")\n-\n-(final_presence_set \"1_0mf.b\" \"1_0m.fb\")\n-(final_presence_set \"1_0mfb.\" \"1_0mf.b\")\n-(final_presence_set \"1_1mf.b\" \"1_1m.fb\")\n-(final_presence_set \"1_1mfb.\" \"1_1mf.b\")\n-\n-(final_presence_set \"1_0mlx.\" \"1_0m.lx\")\n-(final_presence_set \"1_1mlx.\" \"1_1m.lx\")\n-\n-(final_presence_set\n-   \"1_1m.ii,1_1m.mi,1_1m.fi,1_1b.bb,1_1m.bb,1_1m.ib,1_1m.mb,1_1m.fb,1_1m.lx\"\n-   \"1_0mii.,1_0mmi.,1_0mfi.,1_0mmf.,1_0bbb.,1_0mbb.,1_0mib.,1_0mmb.,1_0mfb.,\\\n-    1_0mlx.\")\n-\n-;;  Microarchitecture units:\n-(define_cpu_unit\n-   \"1_um0, 1_um1, 1_ui0, 1_ui1, 1_uf0, 1_uf1, 1_ub0, 1_ub1, 1_ub2,\\\n-    1_unb0, 1_unb1, 1_unb2\" \"one\")\n-\n-(exclusion_set \"1_ub0\" \"1_unb0\")\n-(exclusion_set \"1_ub1\" \"1_unb1\")\n-(exclusion_set \"1_ub2\" \"1_unb2\")\n-\n-;; The following rules are used to decrease number of alternatives.\n-;; They are consequences of Itanium microarchitecture.  They also\n-;; describe the following rules mentioned in Itanium\n-;; microarchitecture: rules mentioned in Itanium microarchitecture:\n-;; o \"MMF: Always splits issue before the first M and after F regardless\n-;;   of surrounding bundles and stops\".\n-;; o \"BBB/MBB: Always splits issue after either of these bundles\".\n-;; o \"MIB BBB: Split issue after the first bundle in this pair\".\n-\n-(exclusion_set \"1_0m.mf,1_0mm.f,1_0mmf.\"\n-   \"1_1m.ii,1_1m.mi,1_1m.fi,1_1b.bb,1_1m.bb,1_1m.ib,1_1m.mb,1_1m.fb,1_1m.lx\")\n-(exclusion_set \"1_0b.bb,1_0bb.b,1_0bbb.,1_0m.bb,1_0mb.b,1_0mbb.\"\n-   \"1_1m.ii,1_1m.mi,1_1m.fi,1_1b.bb,1_1m.bb,1_1m.ib,1_1m.mb,1_1m.fb,1_1m.lx\")\n-(exclusion_set \"1_0m.ib,1_0mi.b,1_0mib.\" \"1_1b.bb\")\n-\n-;;  For exceptions of M, I, B, F insns:\n-(define_cpu_unit \"1_not_um1, 1_not_ui1, 1_not_uf1\" \"one\")\n-\n-(final_absence_set \"1_not_um1\"  \"1_um1\")\n-(final_absence_set \"1_not_ui1\"  \"1_ui1\")\n-(final_absence_set \"1_not_uf1\"  \"1_uf1\")\n-\n-;;; \"MIB/MFB/MMB: Splits issue after any of these bundles unless the\n-;;; B-slot contains a nop.b or a brp instruction\".\n-;;;   \"The B in an MIB/MFB/MMB bundle disperses to B0 if it is a brp or\n-;;; nop.b, otherwise it disperses to B2\".\n-(final_absence_set\n-   \"1_1m.ii, 1_1m.mi, 1_1m.fi, 1_1b.bb, 1_1m.bb, 1_1m.ib, 1_1m.mb, 1_1m.fb,\\\n-    1_1m.lx\"\n-   \"1_0mib. 1_ub2, 1_0mfb. 1_ub2, 1_0mmb. 1_ub2\")\n-\n-;; This is necessary to start new processor cycle when we meet stop bit.\n-(define_cpu_unit \"1_stop\" \"one\")\n-(final_absence_set\n-   \"1_0m.ii,1_0mi.i,1_0mii.,1_0m.mi,1_0mm.i,1_0mmi.,1_0m.fi,1_0mf.i,1_0mfi.,\\\n-    1_0m.mf,1_0mm.f,1_0mmf.,1_0b.bb,1_0bb.b,1_0bbb.,1_0m.bb,1_0mb.b,1_0mbb.,\\\n-    1_0m.ib,1_0mi.b,1_0mib.,1_0m.mb,1_0mm.b,1_0mmb.,1_0m.fb,1_0mf.b,1_0mfb.,\\\n-    1_0m.lx,1_0mlx., \\\n-    1_1m.ii,1_1mi.i,1_1mii.,1_1m.mi,1_1mm.i,1_1mmi.,1_1m.fi,1_1mf.i,1_1mfi.,\\\n-    1_1b.bb,1_1bb.b,1_1bbb.,1_1m.bb,1_1mb.b,1_1mbb.,1_1m.ib,1_1mi.b,1_1mib.,\\\n-    1_1m.mb,1_1mm.b,1_1mmb.,1_1m.fb,1_1mf.b,1_1mfb.,1_1m.lx,1_1mlx.\"\n-   \"1_stop\")\n-\n-;; M and I instruction is dispersed to the lowest numbered M or I unit\n-;; not already in use.  An I slot in the 3rd position of 2nd bundle is\n-;; always dispersed to I1\n-(final_presence_set \"1_um1\" \"1_um0\")\n-(final_presence_set \"1_ui1\" \"1_ui0, 1_1mii., 1_1mmi., 1_1mfi.\")\n-\n-;; Insns\n-\n-;; M and I instruction is dispersed to the lowest numbered M or I unit\n-;; not already in use.  An I slot in the 3rd position of 2nd bundle is\n-;; always dispersed to I1\n-(define_reservation \"1_M0\"\n-  \"1_0m.ii+1_um0|1_0m.mi+1_um0|1_0mm.i+(1_um0|1_um1)\\\n-   |1_0m.fi+1_um0|1_0m.mf+1_um0|1_0mm.f+1_um1\\\n-   |1_0m.bb+1_um0|1_0m.ib+1_um0|1_0m.mb+1_um0\\\n-   |1_0mm.b+1_um1|1_0m.fb+1_um0|1_0m.lx+1_um0\\\n-   |1_1mm.i+1_um1|1_1mm.b+1_um1\\\n-   |(1_1m.ii|1_1m.mi|1_1m.fi|1_1m.bb|1_1m.ib|1_1m.mb|1_1m.fb|1_1m.lx)\\\n-    +(1_um0|1_um1)\")\n-\n-(define_reservation \"1_M1\"\n-  \"(1_0mii.+(1_ui0|1_ui1)|1_0mmi.+1_ui0|1_0mfi.+1_ui0\\\n-    |1_0mib.+1_unb0|1_0mfb.+1_unb0|1_0mmb.+1_unb0)\\\n-     +(1_1m.ii|1_1m.mi|1_1m.fi|1_1m.bb|1_1m.ib|1_1m.mb|1_1m.fb|1_1m.lx)\\\n-     +(1_um0|1_um1)\")\n-\n-(define_reservation \"1_M\" \"1_M0|1_M1\")\n-\n-;;  Exceptions for dispersal rules.\n-;; \"An I slot in the 3rd position of 2nd bundle is always dispersed to I1\".\n-(define_reservation \"1_I0\"\n-  \"1_0mi.i+1_ui0|1_0mii.+(1_ui0|1_ui1)|1_0mmi.+1_ui0|1_0mfi.+1_ui0\\\n-   |1_0mi.b+1_ui0|(1_1mi.i|1_1mi.b)+(1_ui0|1_ui1)\\\n-   |1_1mii.+1_ui1|1_1mmi.+1_ui1|1_1mfi.+1_ui1\")\n-\n-(define_reservation \"1_I1\"\n-  \"1_0m.ii+1_um0+1_0mi.i+1_ui0|1_0mm.i+(1_um0|1_um1)+1_0mmi.+1_ui0\\\n-   |1_0mf.i+1_uf0+1_0mfi.+1_ui0|1_0m.ib+1_um0+1_0mi.b+1_ui0\\\n-   |(1_1m.ii+(1_um0|1_um1)+1_1mi.i\\\n-   |1_1m.ib+(1_um0|1_um1)+1_1mi.b)+(1_ui0|1_ui1)\\\n-   |1_1mm.i+1_um1+1_1mmi.+1_ui1|1_1mf.i+1_uf1+1_1mfi.+1_ui1\")\n-\n-(define_reservation \"1_I\" \"1_I0|1_I1\")\n-\n-;; \"An F slot in the 1st bundle disperses to F0\".\n-;; \"An F slot in the 2st bundle disperses to F1\".\n-(define_reservation \"1_F0\"\n-   \"1_0mf.i+1_uf0|1_0mmf.+1_uf0|1_0mf.b+1_uf0|1_1mf.i+1_uf1|1_1mf.b+1_uf1\")\n-\n-(define_reservation \"1_F1\"\n-   \"1_0m.fi+1_um0+1_0mf.i+1_uf0|1_0mm.f+(1_um0|1_um1)+1_0mmf.+1_uf0\\\n-    |1_0m.fb+1_um0+1_0mf.b+1_uf0|1_1m.fi+(1_um0|1_um1)+1_1mf.i+1_uf1\\\n-    |1_1m.fb+(1_um0|1_um1)+1_1mf.b+1_uf1\")\n-\n-(define_reservation \"1_F2\"\n-   \"1_0m.mf+1_um0+1_0mm.f+1_um1+1_0mmf.+1_uf0\\\n-    |(1_0mii.+(1_ui0|1_ui1)|1_0mmi.+1_ui0|1_0mfi.+1_ui0\\\n-      |1_0mib.+1_unb0|1_0mmb.+1_unb0|1_0mfb.+1_unb0)\\\n-     +(1_1m.fi+(1_um0|1_um1)+1_1mf.i+1_uf1\\\n-       |1_1m.fb+(1_um0|1_um1)+1_1mf.b+1_uf1)\")\n-\n-(define_reservation \"1_F\" \"1_F0|1_F1|1_F2\")\n-\n-;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n-;;; 2nd position it is dispersed to B2\".\n-(define_reservation \"1_NB\"\n-    \"1_0b.bb+1_unb0|1_0bb.b+1_unb1|1_0bbb.+1_unb2\\\n-     |1_0mb.b+1_unb1|1_0mbb.+1_unb2\\\n-     |1_0mib.+1_unb0|1_0mmb.+1_unb0|1_0mfb.+1_unb0\\\n-     |1_1b.bb+1_unb0|1_1bb.b+1_unb1\\\n-     |1_1bbb.+1_unb2|1_1mb.b+1_unb1|1_1mbb.+1_unb2|1_1mib.+1_unb0\\\n-     |1_1mmb.+1_unb0|1_1mfb.+1_unb0\")\n-\n-(define_reservation \"1_B0\"\n-   \"1_0b.bb+1_ub0|1_0bb.b+1_ub1|1_0bbb.+1_ub2\\\n-    |1_0mb.b+1_ub1|1_0mbb.+1_ub2|1_0mib.+1_ub2\\\n-    |1_0mfb.+1_ub2|1_1b.bb+1_ub0|1_1bb.b+1_ub1\\\n-    |1_1bbb.+1_ub2|1_1mb.b+1_ub1\\\n-    |1_1mib.+1_ub2|1_1mmb.+1_ub2|1_1mfb.+1_ub2\")\n-\n-(define_reservation \"1_B1\"\n-   \"1_0m.bb+1_um0+1_0mb.b+1_ub1|1_0mi.b+1_ui0+1_0mib.+1_ub2\\\n-    |1_0mf.b+1_uf0+1_0mfb.+1_ub2\\\n-    |(1_0mii.+(1_ui0|1_ui1)|1_0mmi.+1_ui0|1_0mfi.+1_ui0)+1_1b.bb+1_ub0\\\n-    |1_1m.bb+(1_um0|1_um1)+1_1mb.b+1_ub1\\\n-    |1_1mi.b+(1_ui0|1_ui1)+1_1mib.+1_ub2\\\n-    |1_1mm.b+1_um1+1_1mmb.+1_ub2\\\n-    |1_1mf.b+1_uf1+1_1mfb.+1_ub2\")\n-\n-(define_reservation \"1_B\" \"1_B0|1_B1\")\n-\n-;; MLX bunlde uses ports equivalent to MFI bundles.\n-(define_reservation \"1_L0\" \"1_0mlx.+1_ui0+1_uf0|1_1mlx.+(1_ui0|1_ui1)+1_uf1\")\n-(define_reservation \"1_L1\"\n-   \"1_0m.lx+1_um0+1_0mlx.+1_ui0+1_uf0\\\n-   |1_1m.lx+(1_um0|1_um1)+1_1mlx.+(1_ui0|1_ui1)+1_uf1\")\n-(define_reservation \"1_L2\"\n-   \"(1_0mii.+(1_ui0|1_ui1)|1_0mmi.+1_ui0|1_0mfi.+1_ui0\\\n-     |1_0mib.+1_unb0|1_0mmb.+1_unb0|1_0mfb.+1_unb0)\n-    +1_1m.lx+(1_um0|1_um1)+1_1mlx.+1_ui1+1_uf1\")\n-(define_reservation \"1_L\" \"1_L0|1_L1|1_L2\")\n-\n-(define_reservation \"1_A\" \"1_M|1_I\")\n-\n-(define_insn_reservation \"1_stop_bit\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"stop_bit\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_stop|1_m0_stop|1_m1_stop|1_mi0_stop|1_mi1_stop\")\n-\n-(define_insn_reservation \"1_br\"      0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"br\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_B\")\n-(define_insn_reservation \"1_scall\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"scall\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_B\")\n-(define_insn_reservation \"1_fcmp\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fcmp\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_F+1_not_uf1\")\n-(define_insn_reservation \"1_fcvtfx\"  7\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fcvtfx\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_F\")\n-\n-(define_insn_reservation \"1_fld\"     9\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fld\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_fldc\"    0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fld\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-\n-(define_insn_reservation \"1_fldp\"    9\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fldp\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_fldpc\"   0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fldp\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-\n-(define_insn_reservation \"1_fmac\"    5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fmac\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_F\")\n-(define_insn_reservation \"1_fmisc\"   5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fmisc\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_F+1_not_uf1\")\n-\n-;; There is only one insn `mov = ar.bsp' for frar_i:\n-(define_insn_reservation \"1_frar_i\" 13\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frar_i\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-;; There is only two insns `mov = ar.unat' or `mov = ar.ccv' for frar_m:\n-(define_insn_reservation \"1_frar_m\"  6\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frar_m\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M+1_not_um1\")\n-(define_insn_reservation \"1_frbr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frbr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-(define_insn_reservation \"1_frfr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frfr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M+1_not_um1\")\n-(define_insn_reservation \"1_frpr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frpr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-\n-(define_insn_reservation \"1_ialu\"      1\n-    (and (and (eq_attr \"cpu\" \"itanium\")\n-              (eq_attr \"itanium_class\" \"ialu\"))\n-         (eq (symbol_ref\n-              \"bundling_p || ia64_produce_address_p (insn)\")\n-              (const_int 0)))\n-    \"1_A\")\n-(define_insn_reservation \"1_ialu_addr\" 1\n-    (and (and (eq_attr \"cpu\" \"itanium\")\n-              (eq_attr \"itanium_class\" \"ialu\"))\n-         (eq (symbol_ref\n-              \"!bundling_p && ia64_produce_address_p (insn)\")\n-             (const_int 1)))\n-    \"1_M\")\n-(define_insn_reservation \"1_icmp\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"icmp\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_A\")\n-(define_insn_reservation \"1_ilog\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ilog\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_A\")\n-(define_insn_reservation \"1_mmalua\" 2\n-    (and (and (eq_attr \"cpu\" \"itanium\")\n-              (eq_attr \"itanium_class\" \"mmalua\"))\n-         (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-    \"1_A\")\n-(define_insn_reservation \"1_ishf\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ishf\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-    \"1_I+1_not_ui1\")\n-(define_insn_reservation \"1_ld\"      2\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"ld\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_ldc\"     0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"ld\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_long_i\"  1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"long_i\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_L\")\n-(define_insn_reservation \"1_mmmul\"   2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmmul\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-(define_insn_reservation \"1_mmshf\"   2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmshf\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_I\")\n-(define_insn_reservation \"1_mmshfi\"  1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmshfi\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_I\")\n-\n-;; Now we have only one insn (flushrs) of such class.  We assume that flushrs\n-;; is the 1st syllable of the bundle after stop bit.\n-(define_insn_reservation \"1_rse_m\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"rse_m\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"(1_0m.ii|1_0m.mi|1_0m.fi|1_0m.mf|1_0b.bb|1_0m.bb\\\n-    |1_0m.ib|1_0m.mb|1_0m.fb|1_0m.lx)+1_um0\")\n-(define_insn_reservation \"1_sem\"     0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"sem\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M+1_not_um1\")\n-(define_insn_reservation \"1_stf\"     1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"stf\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_st\"      1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"st\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_syst_m0\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"syst_m0\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M+1_not_um1\")\n-(define_insn_reservation \"1_syst_m\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"syst_m\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_tbit\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tbit\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-\n-;; There is only ony insn `mov ar.pfs =' for toar_i:\n-(define_insn_reservation \"1_toar_i\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"toar_i\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-;; There are only ony 2 insns `mov ar.ccv =' and `mov ar.unat =' for toar_m:\n-(define_insn_reservation \"1_toar_m\"  5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"toar_m\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M+1_not_um1\")\n-(define_insn_reservation \"1_tobr\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tobr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-(define_insn_reservation \"1_tofr\"    9\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tofr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_topr\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"topr\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_I+1_not_ui1\")\n-(define_insn_reservation \"1_xmpy\"    7\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"xmpy\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_F\")\n-(define_insn_reservation \"1_xtd\"     1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"xtd\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_I\")\n-\n-(define_insn_reservation \"1_chk_s_i\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_s_i\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_A\")\n-(define_insn_reservation \"1_chk_s_f\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_s_f\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-(define_insn_reservation \"1_chk_a\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_a\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-\n-(define_insn_reservation \"1_lfetch\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"lfetch\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M\")\n-\n-(define_insn_reservation \"1_nop_m\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_m\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_M0\")\n-(define_insn_reservation \"1_nop_b\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_b\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_NB\")\n-(define_insn_reservation \"1_nop_i\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_i\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_I0\")\n-(define_insn_reservation \"1_nop_f\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_f\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_F0\")\n-(define_insn_reservation \"1_nop_x\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_x\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_L0\")\n-\n-;; We assume that there is no insn issued on the same cycle as unknown insn.\n-(define_cpu_unit \"1_empty\" \"one\")\n-(exclusion_set \"1_empty\"\n-    \"1_0m.ii,1_0m.mi,1_0m.fi,1_0m.mf,1_0b.bb,1_0m.bb,1_0m.ib,1_0m.mb,1_0m.fb,\\\n-     1_0m.lx\")\n-\n-(define_insn_reservation \"1_unknown\" 1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"unknown\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"1_empty\")\n-\n-(define_insn_reservation \"1_nop\" 1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1_M0|1_NB|1_I0|1_F0\")\n-\n-(define_insn_reservation \"1_ignore\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ignore\"))\n-       (eq (symbol_ref \"bundling_p\") (const_int 0))) \"nothing\")\n-\n-\n-(define_cpu_unit\n-   \"1_0m_bs, 1_0mi_bs, 1_0mm_bs, 1_0mf_bs, 1_0b_bs, 1_0bb_bs, 1_0mb_bs\"\n-   \"one\")\n-(define_cpu_unit\n-   \"1_1m_bs, 1_1mi_bs, 1_1mm_bs, 1_1mf_bs, 1_1b_bs, 1_1bb_bs, 1_1mb_bs\"\n-   \"one\")\n-\n-(define_cpu_unit \"1_m_cont, 1_mi_cont, 1_mm_cont, 1_mf_cont, 1_mb_cont,\\\n-\t          1_b_cont, 1_bb_cont\" \"one\")\n-\n-;; For stop in the middle of the bundles.\n-(define_cpu_unit \"1_m_stop, 1_m0_stop, 1_m1_stop, 1_0mmi_cont\" \"one\")\n-(define_cpu_unit \"1_mi_stop, 1_mi0_stop, 1_mi1_stop, 1_0mii_cont\" \"one\")\n-\n-(final_presence_set \"1_0m_bs\"\n-   \"1_0m.ii, 1_0m.mi, 1_0m.mf, 1_0m.fi, 1_0m.bb,\\\n-    1_0m.ib, 1_0m.fb, 1_0m.mb, 1_0m.lx\")\n-(final_presence_set \"1_1m_bs\"\n-   \"1_1m.ii, 1_1m.mi, 1_1m.fi, 1_1m.bb, 1_1m.ib, 1_1m.fb, 1_1m.mb,\\\n-    1_1m.lx\")\n-(final_presence_set \"1_0mi_bs\"  \"1_0mi.i, 1_0mi.i\")\n-(final_presence_set \"1_1mi_bs\"  \"1_1mi.i, 1_1mi.i\")\n-(final_presence_set \"1_0mm_bs\"  \"1_0mm.i, 1_0mm.f, 1_0mm.b\")\n-(final_presence_set \"1_1mm_bs\"  \"1_1mm.i, 1_1mm.b\")\n-(final_presence_set \"1_0mf_bs\"  \"1_0mf.i, 1_0mf.b\")\n-(final_presence_set \"1_1mf_bs\"  \"1_1mf.i, 1_1mf.b\")\n-(final_presence_set \"1_0b_bs\"  \"1_0b.bb\")\n-(final_presence_set \"1_1b_bs\"  \"1_1b.bb\")\n-(final_presence_set \"1_0bb_bs\"  \"1_0bb.b\")\n-(final_presence_set \"1_1bb_bs\"  \"1_1bb.b\")\n-(final_presence_set \"1_0mb_bs\"  \"1_0mb.b\")\n-(final_presence_set \"1_1mb_bs\"  \"1_1mb.b\")\n-\n-(exclusion_set \"1_0m_bs\"\n-   \"1_0mi.i, 1_0mm.i, 1_0mm.f, 1_0mf.i, 1_0mb.b,\\\n-    1_0mi.b, 1_0mf.b, 1_0mm.b, 1_0mlx., 1_m0_stop\")\n-(exclusion_set \"1_1m_bs\"\n-   \"1_1mi.i, 1_1mm.i, 1_1mf.i, 1_1mb.b, 1_1mi.b, 1_1mf.b, 1_1mm.b,\\\n-    1_1mlx., 1_m1_stop\")\n-(exclusion_set \"1_0mi_bs\"  \"1_0mii., 1_0mib., 1_mi0_stop\")\n-(exclusion_set \"1_1mi_bs\"  \"1_1mii., 1_1mib., 1_mi1_stop\")\n-(exclusion_set \"1_0mm_bs\"  \"1_0mmi., 1_0mmf., 1_0mmb.\")\n-(exclusion_set \"1_1mm_bs\"  \"1_1mmi., 1_1mmb.\")\n-(exclusion_set \"1_0mf_bs\"  \"1_0mfi., 1_0mfb.\")\n-(exclusion_set \"1_1mf_bs\"  \"1_1mfi., 1_1mfb.\")\n-(exclusion_set \"1_0b_bs\"  \"1_0bb.b\")\n-(exclusion_set \"1_1b_bs\"  \"1_1bb.b\")\n-(exclusion_set \"1_0bb_bs\"  \"1_0bbb.\")\n-(exclusion_set \"1_1bb_bs\"  \"1_1bbb.\")\n-(exclusion_set \"1_0mb_bs\"  \"1_0mbb.\")\n-(exclusion_set \"1_1mb_bs\"  \"1_1mbb.\")\n-\n-(exclusion_set\n-   \"1_0m_bs, 1_0mi_bs, 1_0mm_bs, 1_0mf_bs, 1_0b_bs, 1_0bb_bs, 1_0mb_bs,\n-    1_1m_bs, 1_1mi_bs, 1_1mm_bs, 1_1mf_bs, 1_1b_bs, 1_1bb_bs, 1_1mb_bs\"\n-   \"1_stop\")\n-\n-(final_presence_set\n-   \"1_0mi.i, 1_0mm.i, 1_0mf.i, 1_0mm.f, 1_0mb.b,\\\n-    1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\"\n-   \"1_m_cont\")\n-(final_presence_set \"1_0mii., 1_0mib.\" \"1_mi_cont\")\n-(final_presence_set \"1_0mmi., 1_0mmf., 1_0mmb.\" \"1_mm_cont\")\n-(final_presence_set \"1_0mfi., 1_0mfb.\" \"1_mf_cont\")\n-(final_presence_set \"1_0bb.b\" \"1_b_cont\")\n-(final_presence_set \"1_0bbb.\" \"1_bb_cont\")\n-(final_presence_set \"1_0mbb.\" \"1_mb_cont\")\n-\n-(exclusion_set\n-   \"1_0m.ii, 1_0m.mi, 1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb,\\\n-    1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\"\n-   \"1_m_cont, 1_mi_cont, 1_mm_cont, 1_mf_cont,\\\n-    1_mb_cont, 1_b_cont, 1_bb_cont\")\n-\n-(exclusion_set \"1_empty\"\n-               \"1_m_cont,1_mi_cont,1_mm_cont,1_mf_cont,\\\n-                1_mb_cont,1_b_cont,1_bb_cont\")\n-\n-;; For m;mi bundle\n-(final_presence_set \"1_m0_stop\" \"1_0m.mi\")\n-(final_presence_set \"1_0mm.i\" \"1_0mmi_cont\")\n-(exclusion_set \"1_0mmi_cont\"\n-   \"1_0m.ii, 1_0m.mi, 1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb,\\\n-    1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_m0_stop\" \"1_0mm.i\")\n-(final_presence_set \"1_m1_stop\" \"1_1m.mi\")\n-(exclusion_set \"1_m1_stop\" \"1_1mm.i\")\n-(final_presence_set \"1_m_stop\" \"1_m0_stop, 1_m1_stop\")\n-\n-;; For mi;i bundle\n-(final_presence_set \"1_mi0_stop\" \"1_0mi.i\")\n-(final_presence_set \"1_0mii.\" \"1_0mii_cont\")\n-(exclusion_set \"1_0mii_cont\"\n-   \"1_0m.ii, 1_0m.mi, 1_0m.fi, 1_0m.mf, 1_0b.bb, 1_0m.bb,\\\n-    1_0m.ib, 1_0m.mb, 1_0m.fb, 1_0m.lx\")\n-(exclusion_set \"1_mi0_stop\" \"1_0mii.\")\n-(final_presence_set \"1_mi1_stop\" \"1_1mi.i\")\n-(exclusion_set \"1_mi1_stop\" \"1_1mii.\")\n-(final_presence_set \"1_mi_stop\" \"1_mi0_stop, 1_mi1_stop\")\n-\n-(final_absence_set\n-   \"1_0m.ii,1_0mi.i,1_0mii.,1_0m.mi,1_0mm.i,1_0mmi.,1_0m.fi,1_0mf.i,1_0mfi.,\\\n-    1_0m.mf,1_0mm.f,1_0mmf.,1_0b.bb,1_0bb.b,1_0bbb.,1_0m.bb,1_0mb.b,1_0mbb.,\\\n-    1_0m.ib,1_0mi.b,1_0mib.,1_0m.mb,1_0mm.b,1_0mmb.,1_0m.fb,1_0mf.b,1_0mfb.,\\\n-    1_0m.lx,1_0mlx., \\\n-    1_1m.ii,1_1mi.i,1_1mii.,1_1m.mi,1_1mm.i,1_1mmi.,1_1m.fi,1_1mf.i,1_1mfi.,\\\n-    1_1b.bb,1_1bb.b,1_1bbb.,1_1m.bb,1_1mb.b,1_1mbb.,\\\n-    1_1m.ib,1_1mi.b,1_1mib.,1_1m.mb,1_1mm.b,1_1mmb.,1_1m.fb,1_1mf.b,1_1mfb.,\\\n-    1_1m.lx,1_1mlx.\"\n-   \"1_m0_stop,1_m1_stop,1_mi0_stop,1_mi1_stop\")\n-\n-(define_cpu_unit \"1_m_cont_only, 1_b_cont_only\" \"one\")\n-(define_cpu_unit \"1_mi_cont_only, 1_mm_cont_only, 1_mf_cont_only\" \"one\")\n-(define_cpu_unit \"1_mb_cont_only, 1_bb_cont_only\" \"one\")\n-\n-(final_presence_set \"1_m_cont_only\" \"1_m_cont\")\n-(exclusion_set \"1_m_cont_only\"\n-  \"1_0mi.i, 1_0mm.i, 1_0mf.i, 1_0mm.f, 1_0mb.b,\\\n-   1_0mi.b, 1_0mm.b, 1_0mf.b, 1_0mlx.\")\n-\n-(final_presence_set \"1_b_cont_only\" \"1_b_cont\")\n-(exclusion_set \"1_b_cont_only\"  \"1_0bb.b\")\n-\n-(final_presence_set \"1_mi_cont_only\" \"1_mi_cont\")\n-(exclusion_set \"1_mi_cont_only\" \"1_0mii., 1_0mib.\")\n-\n-(final_presence_set \"1_mm_cont_only\" \"1_mm_cont\")\n-(exclusion_set \"1_mm_cont_only\" \"1_0mmi., 1_0mmf., 1_0mmb.\")\n-\n-(final_presence_set \"1_mf_cont_only\" \"1_mf_cont\")\n-(exclusion_set \"1_mf_cont_only\" \"1_0mfi., 1_0mfb.\")\n-\n-(final_presence_set \"1_mb_cont_only\" \"1_mb_cont\")\n-(exclusion_set \"1_mb_cont_only\" \"1_0mbb.\")\n-\n-(final_presence_set \"1_bb_cont_only\" \"1_bb_cont\")\n-(exclusion_set \"1_bb_cont_only\" \"1_0bbb.\")\n-\n-(define_insn_reservation \"1_pre_cycle\" 0\n-   (and (and (eq_attr \"cpu\" \"itanium\")\n-             (eq_attr \"itanium_class\" \"pre_cycle\"))\n-        (eq (symbol_ref \"bundling_p\") (const_int 0)))\n-                         \"(1_0m_bs, 1_m_cont)                     \\\n-                          | (1_0mi_bs, (1_mi_cont|nothing))       \\\n-                          | (1_0mm_bs, 1_mm_cont)                 \\\n-                          | (1_0mf_bs, (1_mf_cont|nothing))       \\\n-                          | (1_0b_bs, (1_b_cont|nothing))         \\\n-                          | (1_0bb_bs, (1_bb_cont|nothing))       \\\n-                          | (1_0mb_bs, (1_mb_cont|nothing))       \\\n-                          | (1_1m_bs, 1_m_cont)                   \\\n-                          | (1_1mi_bs, (1_mi_cont|nothing))       \\\n-                          | (1_1mm_bs, 1_mm_cont)                 \\\n-                          | (1_1mf_bs, (1_mf_cont|nothing))       \\\n-                          | (1_1b_bs, (1_b_cont|nothing))         \\\n-                          | (1_1bb_bs, (1_bb_cont|nothing))       \\\n-                          | (1_1mb_bs, (1_mb_cont|nothing))       \\\n-                          | (1_m_cont_only, (1_m_cont|nothing))   \\\n-                          | (1_b_cont_only,  (1_b_cont|nothing))  \\\n-                          | (1_mi_cont_only, (1_mi_cont|nothing)) \\\n-                          | (1_mm_cont_only, (1_mm_cont|nothing)) \\\n-                          | (1_mf_cont_only, (1_mf_cont|nothing)) \\\n-                          | (1_mb_cont_only, (1_mb_cont|nothing)) \\\n-                          | (1_bb_cont_only, (1_bb_cont|nothing)) \\\n-                          | (1_m_stop, (1_0mmi_cont|nothing))     \\\n-                          | (1_mi_stop, (1_0mii_cont|nothing))\")\n-\n-;; Bypasses:\n-(define_bypass  1 \"1_fcmp\" \"1_br,1_scall\")\n-;; ??? I found 7 cycle delay for 1_fmac -> 1_fcmp for Itanium1\n-(define_bypass  7 \"1_fmac\" \"1_fmisc,1_fcvtfx,1_xmpy,1_fcmp\")\n-\n-;; ???\n-(define_bypass  3 \"1_frbr\" \"1_mmmul,1_mmshf\")\n-(define_bypass 14 \"1_frar_i\" \"1_mmmul,1_mmshf\")\n-(define_bypass  7 \"1_frar_m\" \"1_mmmul,1_mmshf\")\n-\n-;; ????\n-;; There is only one insn `mov ar.pfs =' for toar_i.\n-(define_bypass  0 \"1_tobr,1_topr,1_toar_i\" \"1_br,1_scall\")\n-\n-(define_bypass  3 \"1_ialu,1_ialu_addr\" \"1_mmmul,1_mmshf,1_mmalua\")\n-;; ??? howto describe ialu for I slot only.  We use ialu_addr for that\n-;;(define_bypass  2 \"1_ialu\" \"1_ld\"  \"ia64_ld_address_bypass_p\")\n-;; ??? howto describe ialu st/address for I slot only.  We use ialu_addr\n-;;   for that.\n-;;(define_bypass  2 \"1_ialu\" \"1_st\"  \"ia64_st_address_bypass_p\")\n-\n-(define_bypass  0 \"1_icmp\" \"1_br,1_scall\")\n-\n-(define_bypass  3 \"1_ilog\" \"1_mmmul,1_mmshf\")\n-\n-(define_bypass  2 \"1_ilog,1_xtd\" \"1_ld\"  \"ia64_ld_address_bypass_p\")\n-(define_bypass  2 \"1_ilog,1_xtd\" \"1_st\"  \"ia64_st_address_bypass_p\")\n-\n-(define_bypass  3 \"1_ld,1_ldc\" \"1_mmmul,1_mmshf\")\n-(define_bypass  3 \"1_ld\" \"1_ld\"  \"ia64_ld_address_bypass_p\")\n-(define_bypass  3 \"1_ld\" \"1_st\"  \"ia64_st_address_bypass_p\")\n-\n-;; Intel docs say only LD, ST, IALU, ILOG, ISHF consumers have latency 4,\n-;;      but HP engineers say any non-MM operation.\n-(define_bypass  4 \"1_mmmul,1_mmshf,1_mmalua\"\n-     \"1_br,1_fcmp,1_fcvtfx,1_fld,1_fldc,1_fmac,1_fmisc,1_frar_i,1_frar_m,\\\n-      1_frbr,1_frfr,1_frpr,1_ialu,1_icmp,1_ilog,1_ishf,1_ld,1_ldc,1_chk_s_i,1_chk_s_f,1_chk_a,\\\n-      1_long_i,1_rse_m,1_sem,1_stf,1_st,1_syst_m0,1_syst_m,\\\n-      1_tbit,1_toar_i,1_toar_m,1_tobr,1_tofr,1_topr,1_xmpy,1_xtd\")\n-\n-;; ??? how to describe that if scheduled < 4 cycle then latency is 10 cycles.\n-;; (define_bypass  10 \"1_mmmul,1_mmshf\" \"1_ialu,1_ilog,1_ishf,1_st,1_ld\")\n-\n-(define_bypass  0 \"1_tbit\" \"1_br,1_scall\")\n-\n-(define_bypass  8 \"1_tofr\"  \"1_frfr,1_stf\")\n-(define_bypass  7 \"1_fmisc,1_fcvtfx,1_fmac,1_xmpy\"  \"1_frfr\")\n-(define_bypass  8 \"1_fmisc,1_fcvtfx,1_fmac,1_xmpy\"  \"1_stf\")\n-\n-;; We don't use here fcmp because scall may be predicated.\n-(define_bypass  0 \"1_fcvtfx,1_fld,1_fldc,1_fmac,1_fmisc,1_frar_i,1_frar_m,\\\n-                   1_frbr,1_frfr,1_frpr,1_ialu,1_ialu_addr,1_ilog,1_ishf,\\\n-\t           1_ld,1_ldc,1_long_i,1_mmalua,1_mmmul,1_mmshf,1_mmshfi,\\\n-                   1_toar_m,1_tofr,1_xmpy,1_xtd\" \"1_scall\")\n-\n-(define_bypass  0 \"1_unknown,1_ignore,1_stop_bit,1_br,1_fcmp,1_fcvtfx,\\\n-                   1_fld,1_fldc,1_fmac,1_fmisc,1_frar_i,1_frar_m,1_frbr,1_frfr,\\\n-                   1_frpr,1_ialu,1_ialu_addr,1_icmp,1_ilog,1_ishf,1_ld,1_ldc,\\\n-                   1_chk_s_i,1_chk_s_f,1_chk_a,1_long_i,1_mmalua,1_mmmul,1_mmshf,1_mmshfi,1_nop,\\\n-                   1_nop_b,1_nop_f,1_nop_i,1_nop_m,1_nop_x,1_rse_m,1_scall,\\\n-                   1_sem,1_stf,1_st,1_syst_m0,1_syst_m,1_tbit,1_toar_i,\\\n-                   1_toar_m,1_tobr,1_tofr,1_topr,1_xmpy,1_xtd,1_lfetch\"\n-                  \"1_ignore\")\n-\n-\f\n-;; Bundling\n-\n-(define_automaton \"oneb\")\n-\n-;; Pseudo units for quicker searching for position in two packet window.  */\n-(define_query_cpu_unit \"1_1,1_2,1_3,1_4,1_5,1_6\" \"oneb\")\n-\n-;;   All possible combinations of bundles/syllables\n-(define_cpu_unit\n-   \"1b_0m.ii, 1b_0m.mi, 1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\" \"oneb\")\n-(define_cpu_unit\n-   \"1b_0mi.i, 1b_0mm.i, 1b_0mf.i, 1b_0mm.f, 1b_0bb.b, 1b_0mb.b,\\\n-    1b_0mi.b, 1b_0mm.b, 1b_0mf.b\" \"oneb\")\n-(define_query_cpu_unit\n-   \"1b_0mii., 1b_0mmi., 1b_0mfi., 1b_0mmf., 1b_0bbb., 1b_0mbb.,\\\n-    1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\" \"oneb\")\n-\n-(define_cpu_unit \"1b_1m.ii, 1b_1m.mi, 1b_1m.fi, 1b_1b.bb, 1b_1m.bb,\\\n-                  1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\" \"oneb\")\n-(define_cpu_unit \"1b_1mi.i, 1b_1mm.i, 1b_1mf.i, 1b_1bb.b, 1b_1mb.b,\\\n-                  1b_1mi.b, 1b_1mm.b, 1b_1mf.b\" \"oneb\")\n-(define_query_cpu_unit \"1b_1mii., 1b_1mmi., 1b_1mfi., 1b_1bbb., 1b_1mbb.,\\\n-                        1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\" \"oneb\")\n-\n-;; Slot 1\n-(exclusion_set \"1b_0m.ii\"\n-   \"1b_0m.mi, 1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.mi\"\n-   \"1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb, 1b_0m.ib,\\\n-    1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.fi\"\n-   \"1b_0m.mf, 1b_0b.bb, 1b_0m.bb, 1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.mf\"\n-   \"1b_0b.bb, 1b_0m.bb, 1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0b.bb\" \"1b_0m.bb, 1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.bb\" \"1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.ib\" \"1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.mb\" \"1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_0m.fb\" \"1b_0m.lx\")\n-\n-;; Slot 2\n-(exclusion_set \"1b_0mi.i\"\n-   \"1b_0mm.i, 1b_0mf.i, 1b_0mm.f, 1b_0bb.b, 1b_0mb.b,\\\n-    1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mm.i\"\n-   \"1b_0mf.i, 1b_0mm.f, 1b_0bb.b, 1b_0mb.b,\\\n-    1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mf.i\"\n-   \"1b_0mm.f, 1b_0bb.b, 1b_0mb.b, 1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mm.f\"\n-   \"1b_0bb.b, 1b_0mb.b, 1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0bb.b\" \"1b_0mb.b, 1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mb.b\" \"1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mi.b\" \"1b_0mm.b, 1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mm.b\" \"1b_0mf.b, 1b_0mlx.\")\n-(exclusion_set \"1b_0mf.b\" \"1b_0mlx.\")\n-\n-;; Slot 3\n-(exclusion_set \"1b_0mii.\"\n-   \"1b_0mmi., 1b_0mfi., 1b_0mmf., 1b_0bbb., 1b_0mbb.,\\\n-    1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mmi.\"\n-   \"1b_0mfi., 1b_0mmf., 1b_0bbb., 1b_0mbb.,\\\n-    1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mfi.\"\n-   \"1b_0mmf., 1b_0bbb., 1b_0mbb., 1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mmf.\"\n-   \"1b_0bbb., 1b_0mbb., 1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0bbb.\" \"1b_0mbb., 1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mbb.\" \"1b_0mib., 1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mib.\" \"1b_0mmb., 1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mmb.\" \"1b_0mfb., 1b_0mlx.\")\n-(exclusion_set \"1b_0mfb.\" \"1b_0mlx.\")\n-\n-;; Slot 4\n-(exclusion_set \"1b_1m.ii\"\n-   \"1b_1m.mi, 1b_1m.fi, 1b_1b.bb, 1b_1m.bb,\\\n-    1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.mi\"\n-   \"1b_1m.fi, 1b_1b.bb, 1b_1m.bb, 1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.fi\"\n-   \"1b_1b.bb, 1b_1m.bb, 1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1b.bb\" \"1b_1m.bb, 1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.bb\" \"1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.ib\" \"1b_1m.mb, 1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.mb\" \"1b_1m.fb, 1b_1m.lx\")\n-(exclusion_set \"1b_1m.fb\" \"1b_1m.lx\")\n-\n-;; Slot 5\n-(exclusion_set \"1b_1mi.i\"\n-   \"1b_1mm.i, 1b_1mf.i, 1b_1bb.b, 1b_1mb.b,\\\n-    1b_1mi.b, 1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mm.i\"\n-   \"1b_1mf.i, 1b_1bb.b, 1b_1mb.b, 1b_1mi.b, 1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mf.i\"\n-   \"1b_1bb.b, 1b_1mb.b, 1b_1mi.b, 1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1bb.b\" \"1b_1mb.b, 1b_1mi.b, 1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mb.b\" \"1b_1mi.b, 1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mi.b\" \"1b_1mm.b, 1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mm.b\" \"1b_1mf.b, 1b_1mlx.\")\n-(exclusion_set \"1b_1mf.b\" \"1b_1mlx.\")\n-\n-;; Slot 6\n-(exclusion_set \"1b_1mii.\"\n-   \"1b_1mmi., 1b_1mfi., 1b_1bbb., 1b_1mbb.,\\\n-    1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mmi.\"\n-   \"1b_1mfi., 1b_1bbb., 1b_1mbb., 1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mfi.\"\n-   \"1b_1bbb., 1b_1mbb., 1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1bbb.\" \"1b_1mbb., 1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mbb.\" \"1b_1mib., 1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mib.\" \"1b_1mmb., 1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mmb.\" \"1b_1mfb., 1b_1mlx.\")\n-(exclusion_set \"1b_1mfb.\" \"1b_1mlx.\")\n-\n-(final_presence_set \"1b_0mi.i\" \"1b_0m.ii\")\n-(final_presence_set \"1b_0mii.\" \"1b_0mi.i\")\n-(final_presence_set \"1b_1mi.i\" \"1b_1m.ii\")\n-(final_presence_set \"1b_1mii.\" \"1b_1mi.i\")\n-\n-(final_presence_set \"1b_0mm.i\" \"1b_0m.mi\")\n-(final_presence_set \"1b_0mmi.\" \"1b_0mm.i\")\n-(final_presence_set \"1b_1mm.i\" \"1b_1m.mi\")\n-(final_presence_set \"1b_1mmi.\" \"1b_1mm.i\")\n-\n-(final_presence_set \"1b_0mf.i\" \"1b_0m.fi\")\n-(final_presence_set \"1b_0mfi.\" \"1b_0mf.i\")\n-(final_presence_set \"1b_1mf.i\" \"1b_1m.fi\")\n-(final_presence_set \"1b_1mfi.\" \"1b_1mf.i\")\n-\n-(final_presence_set \"1b_0mm.f\" \"1b_0m.mf\")\n-(final_presence_set \"1b_0mmf.\" \"1b_0mm.f\")\n-\n-(final_presence_set \"1b_0bb.b\" \"1b_0b.bb\")\n-(final_presence_set \"1b_0bbb.\" \"1b_0bb.b\")\n-(final_presence_set \"1b_1bb.b\" \"1b_1b.bb\")\n-(final_presence_set \"1b_1bbb.\" \"1b_1bb.b\")\n-\n-(final_presence_set \"1b_0mb.b\" \"1b_0m.bb\")\n-(final_presence_set \"1b_0mbb.\" \"1b_0mb.b\")\n-(final_presence_set \"1b_1mb.b\" \"1b_1m.bb\")\n-(final_presence_set \"1b_1mbb.\" \"1b_1mb.b\")\n-\n-(final_presence_set \"1b_0mi.b\" \"1b_0m.ib\")\n-(final_presence_set \"1b_0mib.\" \"1b_0mi.b\")\n-(final_presence_set \"1b_1mi.b\" \"1b_1m.ib\")\n-(final_presence_set \"1b_1mib.\" \"1b_1mi.b\")\n-\n-(final_presence_set \"1b_0mm.b\" \"1b_0m.mb\")\n-(final_presence_set \"1b_0mmb.\" \"1b_0mm.b\")\n-(final_presence_set \"1b_1mm.b\" \"1b_1m.mb\")\n-(final_presence_set \"1b_1mmb.\" \"1b_1mm.b\")\n-\n-(final_presence_set \"1b_0mf.b\" \"1b_0m.fb\")\n-(final_presence_set \"1b_0mfb.\" \"1b_0mf.b\")\n-(final_presence_set \"1b_1mf.b\" \"1b_1m.fb\")\n-(final_presence_set \"1b_1mfb.\" \"1b_1mf.b\")\n-\n-(final_presence_set \"1b_0mlx.\" \"1b_0m.lx\")\n-(final_presence_set \"1b_1mlx.\" \"1b_1m.lx\")\n-\n-(final_presence_set\n-   \"1b_1m.ii,1b_1m.mi,1b_1m.fi,1b_1b.bb,1b_1m.bb,\\\n-    1b_1m.ib,1b_1m.mb,1b_1m.fb,1b_1m.lx\"\n-   \"1b_0mii.,1b_0mmi.,1b_0mfi.,1b_0mmf.,1b_0bbb.,1b_0mbb.,\\\n-    1b_0mib.,1b_0mmb.,1b_0mfb.,1b_0mlx.\")\n-\n-;;  Microarchitecture units:\n-(define_cpu_unit\n-   \"1b_um0, 1b_um1, 1b_ui0, 1b_ui1, 1b_uf0, 1b_uf1, 1b_ub0, 1b_ub1, 1b_ub2,\\\n-    1b_unb0, 1b_unb1, 1b_unb2\" \"oneb\")\n-\n-(exclusion_set \"1b_ub0\" \"1b_unb0\")\n-(exclusion_set \"1b_ub1\" \"1b_unb1\")\n-(exclusion_set \"1b_ub2\" \"1b_unb2\")\n-\n-;; The following rules are used to decrease number of alternatives.\n-;; They are consequences of Itanium microarchitecture.  They also\n-;; describe the following rules mentioned in Itanium\n-;; microarchitecture: rules mentioned in Itanium microarchitecture:\n-;; o \"MMF: Always splits issue before the first M and after F regardless\n-;;   of surrounding bundles and stops\".\n-;; o \"BBB/MBB: Always splits issue after either of these bundles\".\n-;; o \"MIB BBB: Split issue after the first bundle in this pair\".\n-\n-(exclusion_set \"1b_0m.mf,1b_0mm.f,1b_0mmf.\"\n-   \"1b_1m.ii,1b_1m.mi,1b_1m.fi,1b_1b.bb,1b_1m.bb,\\\n-    1b_1m.ib,1b_1m.mb,1b_1m.fb,1b_1m.lx\")\n-(exclusion_set \"1b_0b.bb,1b_0bb.b,1b_0bbb.,1b_0m.bb,1b_0mb.b,1b_0mbb.\"\n-   \"1b_1m.ii,1b_1m.mi,1b_1m.fi,1b_1b.bb,1b_1m.bb,\\\n-    1b_1m.ib,1b_1m.mb,1b_1m.fb,1b_1m.lx\")\n-(exclusion_set \"1b_0m.ib,1b_0mi.b,1b_0mib.\" \"1b_1b.bb\")\n-\n-;;  For exceptions of M, I, B, F insns:\n-(define_cpu_unit \"1b_not_um1, 1b_not_ui1, 1b_not_uf1\" \"oneb\")\n-\n-(final_absence_set \"1b_not_um1\"  \"1b_um1\")\n-(final_absence_set \"1b_not_ui1\"  \"1b_ui1\")\n-(final_absence_set \"1b_not_uf1\"  \"1b_uf1\")\n-\n-;;; \"MIB/MFB/MMB: Splits issue after any of these bundles unless the\n-;;; B-slot contains a nop.b or a brp instruction\".\n-;;;   \"The B in an MIB/MFB/MMB bundle disperses to B0 if it is a brp or\n-;;; nop.b, otherwise it disperses to B2\".\n-(final_absence_set\n-   \"1b_1m.ii, 1b_1m.mi, 1b_1m.fi, 1b_1b.bb, 1b_1m.bb,\\\n-    1b_1m.ib, 1b_1m.mb, 1b_1m.fb, 1b_1m.lx\"\n-   \"1b_0mib. 1b_ub2, 1b_0mfb. 1b_ub2, 1b_0mmb. 1b_ub2\")\n-\n-;; This is necessary to start new processor cycle when we meet stop bit.\n-(define_cpu_unit \"1b_stop\" \"oneb\")\n-(final_absence_set\n-   \"1b_0m.ii,1b_0mi.i,1b_0mii.,1b_0m.mi,1b_0mm.i,1b_0mmi.,\\\n-    1b_0m.fi,1b_0mf.i,1b_0mfi.,\\\n-    1b_0m.mf,1b_0mm.f,1b_0mmf.,1b_0b.bb,1b_0bb.b,1b_0bbb.,\\\n-    1b_0m.bb,1b_0mb.b,1b_0mbb.,\\\n-    1b_0m.ib,1b_0mi.b,1b_0mib.,1b_0m.mb,1b_0mm.b,1b_0mmb.,\\\n-    1b_0m.fb,1b_0mf.b,1b_0mfb.,1b_0m.lx,1b_0mlx., \\\n-    1b_1m.ii,1b_1mi.i,1b_1mii.,1b_1m.mi,1b_1mm.i,1b_1mmi.,\\\n-    1b_1m.fi,1b_1mf.i,1b_1mfi.,\\\n-    1b_1b.bb,1b_1bb.b,1b_1bbb.,1b_1m.bb,1b_1mb.b,1b_1mbb.,\\\n-    1b_1m.ib,1b_1mi.b,1b_1mib.,\\\n-    1b_1m.mb,1b_1mm.b,1b_1mmb.,1b_1m.fb,1b_1mf.b,1b_1mfb.,1b_1m.lx,1b_1mlx.\"\n-   \"1b_stop\")\n-\n-;; M and I instruction is dispersed to the lowest numbered M or I unit\n-;; not already in use.  An I slot in the 3rd position of 2nd bundle is\n-;; always dispersed to I1\n-(final_presence_set \"1b_um1\" \"1b_um0\")\n-(final_presence_set \"1b_ui1\" \"1b_ui0, 1b_1mii., 1b_1mmi., 1b_1mfi.\")\n-\n-;; Insns\n-\n-;; M and I instruction is dispersed to the lowest numbered M or I unit\n-;; not already in use.  An I slot in the 3rd position of 2nd bundle is\n-;; always dispersed to I1\n-(define_reservation \"1b_M\"\n-  \"1b_0m.ii+1_1+1b_um0|1b_0m.mi+1_1+1b_um0|1b_0mm.i+1_2+(1b_um0|1b_um1)\\\n-   |1b_0m.fi+1_1+1b_um0|1b_0m.mf+1_1+1b_um0|1b_0mm.f+1_2+1b_um1\\\n-   |1b_0m.bb+1_1+1b_um0|1b_0m.ib+1_1+1b_um0|1b_0m.mb+1_1+1b_um0\\\n-   |1b_0mm.b+1_2+1b_um1|1b_0m.fb+1_1+1b_um0|1b_0m.lx+1_1+1b_um0\\\n-   |1b_1mm.i+1_5+1b_um1|1b_1mm.b+1_5+1b_um1\\\n-   |(1b_1m.ii+1_4|1b_1m.mi+1_4|1b_1m.fi+1_4|1b_1m.bb+1_4|1b_1m.ib+1_4\\\n-     |1b_1m.mb+1_4|1b_1m.fb+1_4|1b_1m.lx+1_4)\\\n-    +(1b_um0|1b_um1)\")\n-\n-;;  Exceptions for dispersal rules.\n-;; \"An I slot in the 3rd position of 2nd bundle is always dispersed to I1\".\n-(define_reservation \"1b_I\"\n-  \"1b_0mi.i+1_2+1b_ui0|1b_0mii.+1_3+(1b_ui0|1b_ui1)|1b_0mmi.+1_3+1b_ui0\\\n-   |1b_0mfi.+1_3+1b_ui0|1b_0mi.b+1_2+1b_ui0\\\n-   |(1b_1mi.i+1_5|1b_1mi.b+1_5)+(1b_ui0|1b_ui1)\\\n-   |1b_1mii.+1_6+1b_ui1|1b_1mmi.+1_6+1b_ui1|1b_1mfi.+1_6+1b_ui1\")\n-\n-;; \"An F slot in the 1st bundle disperses to F0\".\n-;; \"An F slot in the 2st bundle disperses to F1\".\n-(define_reservation \"1b_F\"\n-   \"1b_0mf.i+1_2+1b_uf0|1b_0mmf.+1_3+1b_uf0|1b_0mf.b+1_2+1b_uf0\\\n-    |1b_1mf.i+1_5+1b_uf1|1b_1mf.b+1_5+1b_uf1\")\n-\n-;;; \"Each B slot in MBB or BBB bundle disperses to the corresponding B\n-;;; unit. That is, a B slot in 1st position is dispersed to B0.  In the\n-;;; 2nd position it is dispersed to B2\".\n-(define_reservation \"1b_NB\"\n-    \"1b_0b.bb+1_1+1b_unb0|1b_0bb.b+1_2+1b_unb1|1b_0bbb.+1_3+1b_unb2\\\n-     |1b_0mb.b+1_2+1b_unb1|1b_0mbb.+1_3+1b_unb2\\\n-     |1b_0mib.+1_3+1b_unb0|1b_0mmb.+1_3+1b_unb0|1b_0mfb.+1_3+1b_unb0\\\n-     |1b_1b.bb+1_4+1b_unb0|1b_1bb.b+1_5+1b_unb1\\\n-     |1b_1bbb.+1_6+1b_unb2|1b_1mb.b+1_5+1b_unb1|1b_1mbb.+1_6+1b_unb2\\\n-     |1b_1mib.+1_6+1b_unb0|1b_1mmb.+1_6+1b_unb0|1b_1mfb.+1_6+1b_unb0\")\n-\n-(define_reservation \"1b_B\"\n-   \"1b_0b.bb+1_1+1b_ub0|1b_0bb.b+1_2+1b_ub1|1b_0bbb.+1_3+1b_ub2\\\n-    |1b_0mb.b+1_2+1b_ub1|1b_0mbb.+1_3+1b_ub2|1b_0mib.+1_3+1b_ub2\\\n-    |1b_0mfb.+1_3+1b_ub2|1b_1b.bb+1_4+1b_ub0|1b_1bb.b+1_5+1b_ub1\\\n-    |1b_1bbb.+1_6+1b_ub2|1b_1mb.b+1_5+1b_ub1\\\n-    |1b_1mib.+1_6+1b_ub2|1b_1mmb.+1_6+1b_ub2|1b_1mfb.+1_6+1b_ub2\")\n-\n-(define_reservation \"1b_L\" \"1b_0mlx.+1_3+1b_ui0+1b_uf0\\\n-                           |1b_1mlx.+1_6+(1b_ui0|1b_ui1)+1b_uf1\")\n-\n-;; We assume that there is no insn issued on the same cycle as unknown insn.\n-(define_cpu_unit \"1b_empty\" \"oneb\")\n-(exclusion_set \"1b_empty\"\n-    \"1b_0m.ii,1b_0m.mi,1b_0m.fi,1b_0m.mf,1b_0b.bb,1b_0m.bb,\\\n-     1b_0m.ib,1b_0m.mb,1b_0m.fb,1b_0m.lx\")\n-\n-(define_cpu_unit\n-   \"1b_0m_bs, 1b_0mi_bs, 1b_0mm_bs, 1b_0mf_bs, 1b_0b_bs, 1b_0bb_bs, 1b_0mb_bs\"\n-   \"oneb\")\n-(define_cpu_unit\n-   \"1b_1m_bs, 1b_1mi_bs, 1b_1mm_bs, 1b_1mf_bs, 1b_1b_bs, 1b_1bb_bs, 1b_1mb_bs\"\n-   \"oneb\")\n-\n-(define_cpu_unit \"1b_m_cont, 1b_mi_cont, 1b_mm_cont, 1b_mf_cont, 1b_mb_cont,\\\n-\t          1b_b_cont, 1b_bb_cont\" \"oneb\")\n-\n-;; For stop in the middle of the bundles.\n-(define_cpu_unit \"1b_m_stop, 1b_m0_stop, 1b_m1_stop, 1b_0mmi_cont\" \"oneb\")\n-(define_cpu_unit \"1b_mi_stop, 1b_mi0_stop, 1b_mi1_stop, 1b_0mii_cont\" \"oneb\")\n-\n-(final_presence_set \"1b_0m_bs\"\n-   \"1b_0m.ii, 1b_0m.mi, 1b_0m.mf, 1b_0m.fi, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.fb, 1b_0m.mb, 1b_0m.lx\")\n-(final_presence_set \"1b_1m_bs\"\n-   \"1b_1m.ii, 1b_1m.mi, 1b_1m.fi, 1b_1m.bb, 1b_1m.ib, 1b_1m.fb, 1b_1m.mb,\\\n-    1b_1m.lx\")\n-(final_presence_set \"1b_0mi_bs\"  \"1b_0mi.i, 1b_0mi.i\")\n-(final_presence_set \"1b_1mi_bs\"  \"1b_1mi.i, 1b_1mi.i\")\n-(final_presence_set \"1b_0mm_bs\"  \"1b_0mm.i, 1b_0mm.f, 1b_0mm.b\")\n-(final_presence_set \"1b_1mm_bs\"  \"1b_1mm.i, 1b_1mm.b\")\n-(final_presence_set \"1b_0mf_bs\"  \"1b_0mf.i, 1b_0mf.b\")\n-(final_presence_set \"1b_1mf_bs\"  \"1b_1mf.i, 1b_1mf.b\")\n-(final_presence_set \"1b_0b_bs\"  \"1b_0b.bb\")\n-(final_presence_set \"1b_1b_bs\"  \"1b_1b.bb\")\n-(final_presence_set \"1b_0bb_bs\"  \"1b_0bb.b\")\n-(final_presence_set \"1b_1bb_bs\"  \"1b_1bb.b\")\n-(final_presence_set \"1b_0mb_bs\"  \"1b_0mb.b\")\n-(final_presence_set \"1b_1mb_bs\"  \"1b_1mb.b\")\n-\n-(exclusion_set \"1b_0m_bs\"\n-   \"1b_0mi.i, 1b_0mm.i, 1b_0mm.f, 1b_0mf.i, 1b_0mb.b,\\\n-    1b_0mi.b, 1b_0mf.b, 1b_0mm.b, 1b_0mlx., 1b_m0_stop\")\n-(exclusion_set \"1b_1m_bs\"\n-   \"1b_1mi.i, 1b_1mm.i, 1b_1mf.i, 1b_1mb.b, 1b_1mi.b, 1b_1mf.b, 1b_1mm.b,\\\n-    1b_1mlx., 1b_m1_stop\")\n-(exclusion_set \"1b_0mi_bs\"  \"1b_0mii., 1b_0mib., 1b_mi0_stop\")\n-(exclusion_set \"1b_1mi_bs\"  \"1b_1mii., 1b_1mib., 1b_mi1_stop\")\n-(exclusion_set \"1b_0mm_bs\"  \"1b_0mmi., 1b_0mmf., 1b_0mmb.\")\n-(exclusion_set \"1b_1mm_bs\"  \"1b_1mmi., 1b_1mmb.\")\n-(exclusion_set \"1b_0mf_bs\"  \"1b_0mfi., 1b_0mfb.\")\n-(exclusion_set \"1b_1mf_bs\"  \"1b_1mfi., 1b_1mfb.\")\n-(exclusion_set \"1b_0b_bs\"  \"1b_0bb.b\")\n-(exclusion_set \"1b_1b_bs\"  \"1b_1bb.b\")\n-(exclusion_set \"1b_0bb_bs\"  \"1b_0bbb.\")\n-(exclusion_set \"1b_1bb_bs\"  \"1b_1bbb.\")\n-(exclusion_set \"1b_0mb_bs\"  \"1b_0mbb.\")\n-(exclusion_set \"1b_1mb_bs\"  \"1b_1mbb.\")\n-\n-(exclusion_set\n-   \"1b_0m_bs, 1b_0mi_bs, 1b_0mm_bs, 1b_0mf_bs, 1b_0b_bs, 1b_0bb_bs, 1b_0mb_bs,\n-    1b_1m_bs, 1b_1mi_bs, 1b_1mm_bs, 1b_1mf_bs, 1b_1b_bs, 1b_1bb_bs, 1b_1mb_bs\"\n-   \"1b_stop\")\n-\n-(final_presence_set\n-   \"1b_0mi.i, 1b_0mm.i, 1b_0mf.i, 1b_0mm.f, 1b_0mb.b,\\\n-    1b_0mi.b, 1b_0mm.b, 1b_0mf.b, 1b_0mlx.\"\n-   \"1b_m_cont\")\n-(final_presence_set \"1b_0mii., 1b_0mib.\" \"1b_mi_cont\")\n-(final_presence_set \"1b_0mmi., 1b_0mmf., 1b_0mmb.\" \"1b_mm_cont\")\n-(final_presence_set \"1b_0mfi., 1b_0mfb.\" \"1b_mf_cont\")\n-(final_presence_set \"1b_0bb.b\" \"1b_b_cont\")\n-(final_presence_set \"1b_0bbb.\" \"1b_bb_cont\")\n-(final_presence_set \"1b_0mbb.\" \"1b_mb_cont\")\n-\n-(exclusion_set\n-   \"1b_0m.ii, 1b_0m.mi, 1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\"\n-   \"1b_m_cont, 1b_mi_cont, 1b_mm_cont, 1b_mf_cont,\\\n-    1b_mb_cont, 1b_b_cont, 1b_bb_cont\")\n-\n-(exclusion_set \"1b_empty\"\n-               \"1b_m_cont,1b_mi_cont,1b_mm_cont,1b_mf_cont,\\\n-                1b_mb_cont,1b_b_cont,1b_bb_cont\")\n-\n-;; For m;mi bundle\n-(final_presence_set \"1b_m0_stop\" \"1b_0m.mi\")\n-(final_presence_set \"1b_0mm.i\" \"1b_0mmi_cont\")\n-(exclusion_set \"1b_0mmi_cont\"\n-   \"1b_0m.ii, 1b_0m.mi, 1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_m0_stop\" \"1b_0mm.i\")\n-(final_presence_set \"1b_m1_stop\" \"1b_1m.mi\")\n-(exclusion_set \"1b_m1_stop\" \"1b_1mm.i\")\n-(final_presence_set \"1b_m_stop\" \"1b_m0_stop, 1b_m1_stop\")\n-\n-;; For mi;i bundle\n-(final_presence_set \"1b_mi0_stop\" \"1b_0mi.i\")\n-(final_presence_set \"1b_0mii.\" \"1b_0mii_cont\")\n-(exclusion_set \"1b_0mii_cont\"\n-   \"1b_0m.ii, 1b_0m.mi, 1b_0m.fi, 1b_0m.mf, 1b_0b.bb, 1b_0m.bb,\\\n-    1b_0m.ib, 1b_0m.mb, 1b_0m.fb, 1b_0m.lx\")\n-(exclusion_set \"1b_mi0_stop\" \"1b_0mii.\")\n-(final_presence_set \"1b_mi1_stop\" \"1b_1mi.i\")\n-(exclusion_set \"1b_mi1_stop\" \"1b_1mii.\")\n-(final_presence_set \"1b_mi_stop\" \"1b_mi0_stop, 1b_mi1_stop\")\n-\n-(final_absence_set\n-   \"1b_0m.ii,1b_0mi.i,1b_0mii.,1b_0m.mi,1b_0mm.i,1b_0mmi.,\\\n-    1b_0m.fi,1b_0mf.i,1b_0mfi.,1b_0m.mf,1b_0mm.f,1b_0mmf.,\\\n-    1b_0b.bb,1b_0bb.b,1b_0bbb.,1b_0m.bb,1b_0mb.b,1b_0mbb.,\\\n-    1b_0m.ib,1b_0mi.b,1b_0mib.,1b_0m.mb,1b_0mm.b,1b_0mmb.,\\\n-    1b_0m.fb,1b_0mf.b,1b_0mfb.,1b_0m.lx,1b_0mlx., \\\n-    1b_1m.ii,1b_1mi.i,1b_1mii.,1b_1m.mi,1b_1mm.i,1b_1mmi.,\\\n-    1b_1m.fi,1b_1mf.i,1b_1mfi.,\\\n-    1b_1b.bb,1b_1bb.b,1b_1bbb.,1b_1m.bb,1b_1mb.b,1b_1mbb.,\\\n-    1b_1m.ib,1b_1mi.b,1b_1mib.,1b_1m.mb,1b_1mm.b,1b_1mmb.,\\\n-    1b_1m.fb,1b_1mf.b,1b_1mfb.,1b_1m.lx,1b_1mlx.\"\n-   \"1b_m0_stop,1b_m1_stop,1b_mi0_stop,1b_mi1_stop\")\n-\n-(define_reservation \"1b_A\" \"1b_M|1b_I\")\n-\n-(define_insn_reservation \"1b_stop_bit\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"stop_bit\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_stop|1b_m0_stop|1b_m1_stop|1b_mi0_stop|1b_mi1_stop\")\n-(define_insn_reservation \"1b_br\"      0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"br\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_B\")\n-(define_insn_reservation \"1b_scall\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"scall\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_B\")\n-(define_insn_reservation \"1b_fcmp\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fcmp\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_F+1b_not_uf1\")\n-(define_insn_reservation \"1b_fcvtfx\"  7\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fcvtfx\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_F\")\n-\n-(define_insn_reservation \"1b_fld\"     9\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fld\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_fldc\"    0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fld\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-\n-(define_insn_reservation \"1b_fldp\"    9\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fldp\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_fldpc\"   0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"fldp\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-\n-(define_insn_reservation \"1b_fmac\"    5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fmac\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_F\")\n-(define_insn_reservation \"1b_fmisc\"   5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"fmisc\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_F+1b_not_uf1\")\n-(define_insn_reservation \"1b_frar_i\" 13\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frar_i\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_frar_m\"  6\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frar_m\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M+1b_not_um1\")\n-(define_insn_reservation \"1b_frbr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frbr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_frfr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frfr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M+1b_not_um1\")\n-(define_insn_reservation \"1b_frpr\"    2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"frpr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_ialu\"      1\n-    (and (and (eq_attr \"cpu\" \"itanium\")\n-              (eq_attr \"itanium_class\" \"ialu\"))\n-         (ne (symbol_ref\n-\t      \"bundling_p && !ia64_produce_address_p (insn)\")\n-             (const_int 0)))\n-    \"1b_A\")\n-(define_insn_reservation \"1b_ialu_addr\" 1\n-    (and (and (eq_attr \"cpu\" \"itanium\")\n-              (eq_attr \"itanium_class\" \"ialu\"))\n-         (eq (symbol_ref\n-              \"bundling_p && ia64_produce_address_p (insn)\")\n-             (const_int 1)))\n-    \"1b_M\")\n-(define_insn_reservation \"1b_icmp\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"icmp\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_A\")\n-(define_insn_reservation \"1b_ilog\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ilog\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_A\")\n-(define_insn_reservation \"1b_mmalua\"  2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmalua\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_A\")\n-(define_insn_reservation \"1b_ishf\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ishf\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-\n-(define_insn_reservation \"1b_ld\"      2\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"ld\"))\n-\t    (eq_attr \"check_load\" \"no\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_ldc\"     0\n-  (and (and (and (eq_attr \"cpu\" \"itanium\")\n-\t\t (eq_attr \"itanium_class\" \"ld\"))\n-\t    (eq_attr \"check_load\" \"yes\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-\n-(define_insn_reservation \"1b_long_i\"  1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"long_i\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_L\")\n-(define_insn_reservation \"1b_mmmul\"   2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmmul\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_mmshf\"   2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmshf\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_I\")\n-(define_insn_reservation \"1b_mmshfi\"  2\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"mmshfi\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_I\")\n-(define_insn_reservation \"1b_rse_m\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"rse_m\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-   \"(1b_0m.ii|1b_0m.mi|1b_0m.fi|1b_0m.mf|1b_0b.bb|1b_0m.bb\\\n-     |1b_0m.ib|1b_0m.mb|1b_0m.fb|1b_0m.lx)+1_1+1b_um0\")\n-(define_insn_reservation \"1b_sem\"     0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"sem\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M+1b_not_um1\")\n-(define_insn_reservation \"1b_stf\"     1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"stf\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_st\"      1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"st\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_syst_m0\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"syst_m0\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M+1b_not_um1\")\n-(define_insn_reservation \"1b_syst_m\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"syst_m\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_tbit\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tbit\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_toar_i\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"toar_i\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_toar_m\"  5\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"toar_m\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M+1b_not_um1\")\n-(define_insn_reservation \"1b_tobr\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tobr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_tofr\"    9\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"tofr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_topr\"    1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"topr\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_I+1b_not_ui1\")\n-(define_insn_reservation \"1b_xmpy\"    7\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"xmpy\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_F\")\n-(define_insn_reservation \"1b_xtd\"     1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"xtd\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_I\")\n-\n-(define_insn_reservation \"1b_chk_s_i\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_s_i\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_A\")\n-(define_insn_reservation \"1b_chk_s_f\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_s_f\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_chk_a\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"chk_a\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-\n-(define_insn_reservation \"1b_lfetch\"  0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"lfetch\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_nop_m\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_m\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_M\")\n-(define_insn_reservation \"1b_nop_b\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_b\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_NB\")\n-(define_insn_reservation \"1b_nop_i\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_i\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_I\")\n-(define_insn_reservation \"1b_nop_f\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_f\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_F\")\n-(define_insn_reservation \"1b_nop_x\"   0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop_x\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0))) \"1b_L\")\n-(define_insn_reservation \"1b_unknown\" 1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"unknown\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_empty\")\n-(define_insn_reservation \"1b_nop\" 1\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"nop\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"1b_M|1b_NB|1b_I|1b_F\")\n-(define_insn_reservation \"1b_ignore\" 0\n-  (and (and (eq_attr \"cpu\" \"itanium\")\n-            (eq_attr \"itanium_class\" \"ignore\"))\n-       (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-  \"nothing\")\n-\n-(define_insn_reservation \"1b_pre_cycle\" 0\n-   (and (and (eq_attr \"cpu\" \"itanium\")\n-             (eq_attr \"itanium_class\" \"pre_cycle\"))\n-        (ne (symbol_ref \"bundling_p\") (const_int 0)))\n-                         \"(1b_0m_bs, 1b_m_cont)     \\\n-                          | (1b_0mi_bs, 1b_mi_cont) \\\n-                          | (1b_0mm_bs, 1b_mm_cont) \\\n-                          | (1b_0mf_bs, 1b_mf_cont) \\\n-                          | (1b_0b_bs, 1b_b_cont)   \\\n-                          | (1b_0bb_bs, 1b_bb_cont) \\\n-                          | (1b_0mb_bs, 1b_mb_cont) \\\n-                          | (1b_1m_bs, 1b_m_cont)   \\\n-                          | (1b_1mi_bs, 1b_mi_cont) \\\n-                          | (1b_1mm_bs, 1b_mm_cont) \\\n-                          | (1b_1mf_bs, 1b_mf_cont) \\\n-                          | (1b_1b_bs, 1b_b_cont)   \\\n-                          | (1b_1bb_bs, 1b_bb_cont) \\\n-                          | (1b_1mb_bs, 1b_mb_cont) \\\n-                          | (1b_m_stop, 1b_0mmi_cont)   \\\n-                          | (1b_mi_stop, 1b_0mii_cont)\")\n-"}]}