{"sha": "c6671cbbbc4bccc110b26c24a3eb706f596b7960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2NzFjYmJiYzRiY2NjMTEwYjI2YzI0YTNlYjcwNmY1OTZiNzk2MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-30T23:45:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-30T23:45:00Z"}, "message": "re PR c++/14724 (Destructor not called on backwards goto past initialization)\n\n\tPR c++/14724\n\t* decl.c (start_decl_1): Do not decide whether or not to create a\n\tnew cleanup level until after the type has been completed.\n\n\tPR c++/14763\n\t* pt.c (tsubst_default_argument): Clear current_function_decl.\n\n\tPR c++/14724\n\t* g++.dg/init/goto1.C: New test.\n\n\tPR c++/14763\n\t* g++.dg/template/defarg4.C: New test.\n\nFrom-SVN: r80101", "tree": {"sha": "04761024ef3f5044d3fc69d185c9e2024ebf24a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04761024ef3f5044d3fc69d185c9e2024ebf24a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6671cbbbc4bccc110b26c24a3eb706f596b7960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6671cbbbc4bccc110b26c24a3eb706f596b7960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6671cbbbc4bccc110b26c24a3eb706f596b7960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6671cbbbc4bccc110b26c24a3eb706f596b7960/comments", "author": null, "committer": null, "parents": [{"sha": "06ce772609f34249723fe45a49d9681827101aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ce772609f34249723fe45a49d9681827101aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ce772609f34249723fe45a49d9681827101aac"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "6fba6057b3f7d3c3abbef995a4fe701ed8938f90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -1,3 +1,12 @@\n+2004-03-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14724\n+\t* decl.c (start_decl_1): Do not decide whether or not to create a\n+\tnew cleanup level until after the type has been completed.\n+\n+\tPR c++/14763\n+\t* pt.c (tsubst_default_argument): Clear current_function_decl.\n+\n 2004-03-30  Zack Weinberg  <zack@codesourcery.com>\n \n \t* name-lookup.c, parser.c: Use new shorter form of GTY markers."}, {"sha": "ce530fa47093a7b1054ef0e6156d21b59fa1bff6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -3788,8 +3788,6 @@ start_decl_1 (tree decl)\n   if (type == error_mark_node)\n     return;\n \n-  maybe_push_cleanup_level (type);\n-\n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?\n        If not, set INITIALIZED to zero, which will indirectly\n@@ -3845,6 +3843,14 @@ start_decl_1 (tree decl)\n \n   if (! initialized)\n     DECL_INITIAL (decl) = NULL_TREE;\n+\n+  /* Create a new scope to hold this declaration if necessary.\n+     Whether or not a new scope is necessary cannot be determined\n+     until after the type has been completed; if the type is a\n+     specialization of a class template it is not until after\n+     instantiation has occurred that TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n+     will be set correctly.  */\n+  maybe_push_cleanup_level (type);\n }\n \n /* Handle initialization of references.  DECL, TYPE, and INIT have the"}, {"sha": "b096017430e656dc2c81815788c56cfaeb741ee4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -5902,6 +5902,10 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n \n   /* FN is already the desired FUNCTION_DECL.  */\n   push_access_scope (fn);\n+  /* The default argument expression should not be considered to be\n+     within the scope of FN.  Since push_access_scope sets\n+     current_function_decl, we must explicitly clear it here.  */\n+  current_function_decl = NULL_TREE;\n \n   arg = tsubst_expr (arg, DECL_TI_ARGS (fn),\n \t\t     tf_error | tf_warning, NULL_TREE);"}, {"sha": "416128f53c81f9bee083a37241e360f7942f36a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -1,3 +1,11 @@\n+2004-03-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14724\n+\t* g++.dg/init/goto1.C: New test.\n+\n+\tPR c++/14763\n+\t* g++.dg/template/defarg4.C: New test.\n+\n 2004-03-30  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* gcc.dg/altivec-11.c: Extend test for more valid cases."}, {"sha": "b0a0c5253b6406dba2e90b4ce50d61007f10926e", "filename": "gcc/testsuite/g++.dg/init/goto1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto1.C?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/14724\n+// { dg-do run }\n+\n+int j;\n+\n+template <class T>\n+struct C {\n+  C() { ++j; }\n+  ~C() { --j; }\n+};\n+\n+int main(int, char **) {\n+  {\n+    int i = 0;\n+ again:\n+    C<int> v;\n+    if (++i < 10)\n+      goto again;\n+  }\n+\n+  return j;\n+}\n+"}, {"sha": "293538adbd15b5fe069d9c89f3f3eafb1409ca57", "filename": "gcc/testsuite/g++.dg/template/defarg4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6671cbbbc4bccc110b26c24a3eb706f596b7960/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg4.C?ref=c6671cbbbc4bccc110b26c24a3eb706f596b7960", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/14763\n+\n+struct A { \n+  int get() const {} \n+  static A *foo(); \n+}; \n+ \n+template<bool> struct S { \n+  S(unsigned int = A::foo()->get())  ; \n+}; \n+ \n+void foo() throw() { \n+  S<false> f; \n+} "}]}