{"sha": "2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3OGYzZWI4MWE1YTdkNGEzMWNkMzZlYTk5ZDkyMDJlYjIxZjBlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-08T18:25:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T13:35:00Z"}, "message": "[Ada] Insert explicit dereferences when building actual subtype\n\n2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Copy_And_Maybe_Dereference): New function.\n\t(Build_Access_Record_Constraint): Use it to copy the prefix.\n\t(Build_Actual_Array_Constraint): Likewise.\n\t(Build_Actual_Record_Constraint): Likewise.", "tree": {"sha": "c625bf71b78df40fffc61c18fe519698fe21249b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c625bf71b78df40fffc61c18fe519698fe21249b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9daf13c9350cc02c120971a472092d474d63e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9daf13c9350cc02c120971a472092d474d63e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9daf13c9350cc02c120971a472092d474d63e8f"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "fe6e8c942000c63006a20b73b84b3a3d5bf38d1f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2378f3eb81a5a7d4a31cd36ea99d9202eb21f0ef", "patch": "@@ -1218,6 +1218,10 @@ package body Sem_Util is\n       --  Similar to previous one, for discriminated components constrained\n       --  by the discriminant of the enclosing object.\n \n+      function Copy_And_Maybe_Dereference (N : Node_Id) return Node_Id;\n+      --  Copy the subtree rooted at N and insert an explicit dereference if it\n+      --  is of an access type.\n+\n       -----------------------------------\n       -- Build_Actual_Array_Constraint --\n       -----------------------------------\n@@ -1239,7 +1243,7 @@ package body Sem_Util is\n             if Denotes_Discriminant (Old_Lo) then\n                Lo :=\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Copy_Tree (P),\n+                   Prefix => Copy_And_Maybe_Dereference (P),\n                    Selector_Name => New_Occurrence_Of (Entity (Old_Lo), Loc));\n \n             else\n@@ -1257,7 +1261,7 @@ package body Sem_Util is\n             if Denotes_Discriminant (Old_Hi) then\n                Hi :=\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Copy_Tree (P),\n+                   Prefix => Copy_And_Maybe_Dereference (P),\n                    Selector_Name => New_Occurrence_Of (Entity (Old_Hi), Loc));\n \n             else\n@@ -1286,7 +1290,7 @@ package body Sem_Util is\n          while Present (D) loop\n             if Denotes_Discriminant (Node (D)) then\n                D_Val := Make_Selected_Component (Loc,\n-                 Prefix => New_Copy_Tree (P),\n+                 Prefix => Copy_And_Maybe_Dereference (P),\n                 Selector_Name => New_Occurrence_Of (Entity (Node (D)), Loc));\n \n             else\n@@ -1322,13 +1326,13 @@ package body Sem_Util is\n                D_Val := New_Copy_Tree (D);\n                Set_Expression (D_Val,\n                  Make_Selected_Component (Loc,\n-                   Prefix => New_Copy_Tree (P),\n+                   Prefix => Copy_And_Maybe_Dereference (P),\n                    Selector_Name =>\n                      New_Occurrence_Of (Entity (Expression (D)), Loc)));\n \n             elsif Denotes_Discriminant (D) then\n                D_Val := Make_Selected_Component (Loc,\n-                 Prefix => New_Copy_Tree (P),\n+                 Prefix => Copy_And_Maybe_Dereference (P),\n                  Selector_Name => New_Occurrence_Of (Entity (D), Loc));\n \n             else\n@@ -1342,6 +1346,21 @@ package body Sem_Util is\n          return Constraints;\n       end Build_Access_Record_Constraint;\n \n+      --------------------------------\n+      -- Copy_And_Maybe_Dereference --\n+      --------------------------------\n+\n+      function Copy_And_Maybe_Dereference (N : Node_Id) return Node_Id is\n+         New_N : constant Node_Id := New_Copy_Tree (N);\n+\n+      begin\n+         if Is_Access_Type (Etype (New_N)) then\n+            Insert_Explicit_Dereference (New_N);\n+         end if;\n+\n+         return New_N;\n+      end Copy_And_Maybe_Dereference;\n+\n    --  Start of processing for Build_Actual_Subtype_Of_Component\n \n    begin"}]}