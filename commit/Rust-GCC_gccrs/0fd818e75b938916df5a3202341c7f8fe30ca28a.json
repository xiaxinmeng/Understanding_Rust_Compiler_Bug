{"sha": "0fd818e75b938916df5a3202341c7f8fe30ca28a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkODE4ZTc1YjkzODkxNmRmNWEzMjAyMzQxYzdmOGZlMzBjYTI4YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-29T01:40:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-29T01:40:48Z"}, "message": "fr30.c (TARGET_PROMOTE_PROTOTYPES): New.\n\n\t* config/fr30/fr30.c (TARGET_PROMOTE_PROTOTYPES): New.\n\t(fr30_setup_incoming_varargs): Don't use\n\tSTRICT_ARGUMENT_NAMING.\n\t* config/fr30/fr30.h (PROMOTE_PROTOTYPES): Remove.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\nFrom-SVN: r76830", "tree": {"sha": "88d1f8e2c1c7475df89bdd1a163ab2817fa1efb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d1f8e2c1c7475df89bdd1a163ab2817fa1efb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd818e75b938916df5a3202341c7f8fe30ca28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd818e75b938916df5a3202341c7f8fe30ca28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd818e75b938916df5a3202341c7f8fe30ca28a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd818e75b938916df5a3202341c7f8fe30ca28a/comments", "author": null, "committer": null, "parents": [{"sha": "ba4aecd9d20a502730710de3559ff9d57ede72e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4aecd9d20a502730710de3559ff9d57ede72e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4aecd9d20a502730710de3559ff9d57ede72e2"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "dec51aae8857ea165f926cdea4bd6c2cc882dffa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fd818e75b938916df5a3202341c7f8fe30ca28a", "patch": "@@ -1,3 +1,11 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/fr30/fr30.c (TARGET_PROMOTE_PROTOTYPES): New.\n+\t(fr30_setup_incoming_varargs): Don't use\n+\tSTRICT_ARGUMENT_NAMING.\n+\t* config/fr30/fr30.h (PROMOTE_PROTOTYPES): Remove.\n+\t(STRICT_ARGUMENT_NAMING): Likewise.\n+\n 2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/frv/frv-protos.h: Remove the prototype for"}, {"sha": "a420fb19859f863643fdcf7bd2437bf2a5b4f740", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=0fd818e75b938916df5a3202341c7f8fe30ca28a", "patch": "@@ -1,5 +1,6 @@\n /* FR30 specific functions.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n    This file is part of GCC.\n@@ -148,6 +149,9 @@ static rtx fr30_pass_by_value (tree, tree);\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n \n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n@@ -417,11 +421,12 @@ fr30_setup_incoming_varargs (CUMULATIVE_ARGS arg_regs_used_so_far,\n   if (mode == BLKmode)\n     abort ();\n \n-#if STRICT_ARGUMENT_NAMING\n-  /* If STRICT_ARGUMENT_NAMING is true then the last named\n-     arg must not be treated as an anonymous arg. */\n-  arg_regs_used_so_far += fr30_num_arg_regs (int_mode, type);\n-#endif\n+  /* ??? This run-time test as well as the code inside the if\n+     statement is probably unnecessary.  */\n+  if (targetm.calls.strict_argument_naming (&arg_regs_used_so_far))\n+    /* If TARGET_STRICT_ARGUMENT_NAMING returns true, then the last named\n+       arg must not be treated as an anonymous arg. */\n+    arg_regs_used_so_far += fr30_num_arg_regs (int_mode, type);\n   \n   size = FR30_NUM_ARG_REGS - arg_regs_used_so_far;\n "}, {"sha": "8b71e3f68e851de169572df1052bccc79f6c47a3", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd818e75b938916df5a3202341c7f8fe30ca28a/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=0fd818e75b938916df5a3202341c7f8fe30ca28a", "patch": "@@ -1,7 +1,8 @@\n /*{{{  Comment.  */ \n \n /* Definitions of FR30 target. \n-   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n This file is part of GCC.\n@@ -602,12 +603,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  Passing Function Arguments on the Stack.  */ \n \n-/* Define this macro if an argument declared in a prototype as an integral type\n-   smaller than `int' should actually be passed as an `int'.  In addition to\n-   avoiding errors in certain cases of mismatch, it also makes for better code\n-   on certain machines.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* If defined, the maximum amount of space required for outgoing arguments will\n    be computed and placed into the variable\n    `current_function_outgoing_args_size'.  No space will be pushed onto the\n@@ -903,17 +898,6 @@ enum reg_class\n   if (! SECOND_TIME) \\\n     fr30_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)\n \n-/* Define this macro if the location where a function argument is passed\n-   depends on whether or not it is a named argument.\n-\n-   This macro controls how the NAMED argument to `FUNCTION_ARG' is set for\n-   varargs and stdarg functions.  With this macro defined, the NAMED argument\n-   is always true for named arguments, and false for unnamed arguments.  If\n-   this is not defined, but `SETUP_INCOMING_VARARGS' is defined, then all\n-   arguments are treated as named.  Otherwise, all named arguments except the\n-   last are treated as named.  */\n-#define STRICT_ARGUMENT_NAMING 0\n-\n /*}}}*/ \f\n /*{{{  Trampolines for Nested Functions.  */ \n "}]}