{"sha": "826b47cc77a9b9ffb6489fd361be217cb024313f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2YjQ3Y2M3N2E5YjlmZmI2NDg5ZmQzNjFiZTIxN2NiMDI0MzEzZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-27T22:48:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-27T22:48:11Z"}, "message": "ia64.c (ia64_function_arg): When placing HFAs in integer registers...\n\n\t* ia64.c (ia64_function_arg): When placing HFAs in integer\n\tregisters, do not special case the mode used for complex\n\ttypes.  Do not advance int_regs until the current register\n\tis full.\n\nFrom-SVN: r76758", "tree": {"sha": "de2e6b4ca935caee7553a3235f294bda6ed65743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2e6b4ca935caee7553a3235f294bda6ed65743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826b47cc77a9b9ffb6489fd361be217cb024313f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826b47cc77a9b9ffb6489fd361be217cb024313f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826b47cc77a9b9ffb6489fd361be217cb024313f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826b47cc77a9b9ffb6489fd361be217cb024313f/comments", "author": null, "committer": null, "parents": [{"sha": "272c310d1376adba9d8e29e4b6bc0270043dfdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272c310d1376adba9d8e29e4b6bc0270043dfdb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272c310d1376adba9d8e29e4b6bc0270043dfdb6"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "c5c093c386f86193e5afbadaf2d11dc9bf65faab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826b47cc77a9b9ffb6489fd361be217cb024313f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826b47cc77a9b9ffb6489fd361be217cb024313f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826b47cc77a9b9ffb6489fd361be217cb024313f", "patch": "@@ -1,3 +1,10 @@\n+2004-01-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ia64.c (ia64_function_arg): When placing HFAs in integer\n+\tregisters, do not special case the mode used for complex\n+\ttypes.  Do not advance int_regs until the current register\n+\tis full.\n+\n 2004-01-27  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR target/7297\n@@ -15,9 +22,9 @@\n \t(restore_stack_nonlocal): Same.\n \n 2004-01-27  Devang Patel <dpatel@apple.com>\n-\t\n+\n \t* Makefile.in (dwarf2out.o): Depend on input.h\n-\t* dbxout.c (dbx_debug_hooks): Add new empty hook for \n+\t* dbxout.c (dbx_debug_hooks): Add new empty hook for\n \timported_module_or_decl.\n \t(xcoff_debug_hooks): Same.\n \t* sdbout.c (sdb_debug_hooks): Same.\n@@ -43,14 +50,14 @@\n \t(dwarf2out_imported_module_or_decl): New function.\n \n 2004-01-27  Bob Wilson  <bob.wilson@acm.org>\n-\t\n+\n \t* config/xtensa/xtensa.c (xtensa_copy_incoming_a7): Remove SUBREG\n \ton CQImode and CHImode incoming arguments in register a7.\n \t(function_arg): Wrap BLKmode argument in register a7 in a PARALLEL.\n \t* config/xtensa/xtensa.h (BLOCK_REG_PADDING): Define.\n \t* config/xtensa/xtensa.md (movdi, movdf): Only call force_reg or\n \txtensa_copy_incoming_a7 before reload.\n-\t\n+\n 2004-01-27  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* coverage.c (get_coverage_counts): Give a different message\n@@ -83,7 +90,7 @@\n \n 2004-01-24  James A. Morrison  <ja2morri@uwaterloo.ca>\n \n-        * fixinc/fixinc.c (test_test): Initialize res.\n+\t* fixinc/fixinc.c (test_test): Initialize res.\n \t(start_flexer): Initialize pz_cmd_save.\n \n 2004-01-27  Zack Weinberg  <zack@codesourcery.com>"}, {"sha": "5271081b3e9dc3c34653cd315c58100126dc1de3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826b47cc77a9b9ffb6489fd361be217cb024313f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826b47cc77a9b9ffb6489fd361be217cb024313f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=826b47cc77a9b9ffb6489fd361be217cb024313f", "patch": "@@ -3623,6 +3623,7 @@ ia64_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       for (; offset < byte_size && int_regs < MAX_ARGUMENT_SLOTS; i++)\n \t{\n \t  enum machine_mode gr_mode = DImode;\n+\t  unsigned int gr_size;\n \n \t  /* If we have an odd 4 byte hunk because we ran out of FR regs,\n \t     then this goes in a GR reg left adjusted/little endian, right\n@@ -3636,17 +3637,19 @@ ia64_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t     adjusted/little endian.  */\n \t  else if (byte_size - offset == 4)\n \t    gr_mode = SImode;\n-\t  /* Complex floats need to have float mode.  */\n-\t  if (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n-\t    gr_mode = hfa_mode;\n \n \t  loc[i] = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t      gen_rtx_REG (gr_mode, (basereg\n \t\t\t\t\t\t\t     + int_regs)),\n \t\t\t\t      GEN_INT (offset));\n-\t  offset += GET_MODE_SIZE (gr_mode);\n-\t  int_regs += GET_MODE_SIZE (gr_mode) <= UNITS_PER_WORD\n-\t\t      ? 1 : GET_MODE_SIZE (gr_mode) / UNITS_PER_WORD;\n+\n+\t  gr_size = GET_MODE_SIZE (gr_mode);\n+\t  offset += gr_size;\n+\t  if (gr_size == UNITS_PER_WORD\n+\t      || (gr_size < UNITS_PER_WORD && offset % UNITS_PER_WORD == 0))\n+\t    int_regs++;\n+\t  else if (gr_size > UNITS_PER_WORD)\n+\t    int_regs += gr_size / UNITS_PER_WORD;\n \t}\n \n       /* If we ended up using just one location, just return that one loc, but"}]}