{"sha": "caffb6e56c2914e64e65f3c336b770c178f265a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmZmI2ZTU2YzI5MTRlNjRlNjVmM2MzMzZiNzcwYzE3OGYyNjVhMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-07-17T20:58:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-07-17T20:58:23Z"}, "message": "tree-ssa-dse.c (initialize_ao_ref_for_dse): Fix formatting.\n\n        * tree-ssa-dse.c (initialize_ao_ref_for_dse): Fix formatting.\n        (dse_walker::dse_optimize_stmt): Likewise.  Add missing return to\n        avoid unexpected switch statement fallthru.\n\nFrom-SVN: r273556", "tree": {"sha": "535dae052cce971b9c476c0dc7d59fcd31c4961c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535dae052cce971b9c476c0dc7d59fcd31c4961c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caffb6e56c2914e64e65f3c336b770c178f265a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caffb6e56c2914e64e65f3c336b770c178f265a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caffb6e56c2914e64e65f3c336b770c178f265a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caffb6e56c2914e64e65f3c336b770c178f265a3/comments", "author": null, "committer": null, "parents": [{"sha": "3697a5b8db822f91fad4516b3c625ff2f48993ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3697a5b8db822f91fad4516b3c625ff2f48993ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3697a5b8db822f91fad4516b3c625ff2f48993ce"}], "stats": {"total": 167, "additions": 87, "deletions": 80}, "files": [{"sha": "6d8b082a718e8020f5e7a6c21e991961a65b89b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caffb6e56c2914e64e65f3c336b770c178f265a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caffb6e56c2914e64e65f3c336b770c178f265a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=caffb6e56c2914e64e65f3c336b770c178f265a3", "patch": "@@ -1,3 +1,9 @@\n+2019-07-17  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dse.c (initialize_ao_ref_for_dse): Fix formatting.\n+\t(dse_walker::dse_optimize_stmt): Likewise.  Add missing return to\n+\tavoid unexpected switch statement fallthru.\n+\n 2019-07-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*add<dwi>3_doubleword):"}, {"sha": "9bdcf9ae6affc8e48781b7118b5765a5fdc6fff6", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 81, "deletions": 80, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caffb6e56c2914e64e65f3c336b770c178f265a3/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caffb6e56c2914e64e65f3c336b770c178f265a3/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=caffb6e56c2914e64e65f3c336b770c178f265a3", "patch": "@@ -107,42 +107,42 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write)\n     {\n       switch (DECL_FUNCTION_CODE (gimple_call_fndecl (stmt)))\n \t{\n-\t  case BUILT_IN_MEMCPY:\n-\t  case BUILT_IN_MEMMOVE:\n-\t  case BUILT_IN_MEMSET:\n-\t  case BUILT_IN_MEMCPY_CHK:\n-\t  case BUILT_IN_MEMMOVE_CHK:\n-\t  case BUILT_IN_MEMSET_CHK:\n-\t    {\n-\t      tree size = NULL_TREE;\n-\t      if (gimple_call_num_args (stmt) == 3)\n-\t\tsize = gimple_call_arg (stmt, 2);\n-\t      tree ptr = gimple_call_arg (stmt, 0);\n-\t      ao_ref_init_from_ptr_and_size (write, ptr, size);\n-\t      return true;\n-\t    }\n+\tcase BUILT_IN_MEMCPY:\n+\tcase BUILT_IN_MEMMOVE:\n+\tcase BUILT_IN_MEMSET:\n+\tcase BUILT_IN_MEMCPY_CHK:\n+\tcase BUILT_IN_MEMMOVE_CHK:\n+\tcase BUILT_IN_MEMSET_CHK:\n+\t  {\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (stmt) == 3)\n+\t      size = gimple_call_arg (stmt, 2);\n+\t    tree ptr = gimple_call_arg (stmt, 0);\n+\t    ao_ref_init_from_ptr_and_size (write, ptr, size);\n+\t    return true;\n+\t  }\n \n-\t  /* A calloc call can never be dead, but it can make\n-\t     subsequent stores redundant if they store 0 into\n-\t     the same memory locations.  */\n-\t  case BUILT_IN_CALLOC:\n-\t    {\n-\t      tree nelem = gimple_call_arg (stmt, 0);\n-\t      tree selem = gimple_call_arg (stmt, 1);\n-\t      tree lhs;\n-\t      if (TREE_CODE (nelem) == INTEGER_CST\n-\t\t  && TREE_CODE (selem) == INTEGER_CST\n-\t\t  && (lhs = gimple_call_lhs (stmt)) != NULL_TREE)\n-\t\t{\n-\t\t  tree size = fold_build2 (MULT_EXPR, TREE_TYPE (nelem),\n-\t\t\t\t\t   nelem, selem);\n-\t\t  ao_ref_init_from_ptr_and_size (write, lhs, size);\n-\t\t  return true;\n-\t\t}\n-\t    }\n+\t/* A calloc call can never be dead, but it can make\n+\t   subsequent stores redundant if they store 0 into\n+\t   the same memory locations.  */\n+\tcase BUILT_IN_CALLOC:\n+\t  {\n+\t    tree nelem = gimple_call_arg (stmt, 0);\n+\t    tree selem = gimple_call_arg (stmt, 1);\n+\t    tree lhs;\n+\t    if (TREE_CODE (nelem) == INTEGER_CST\n+\t\t&& TREE_CODE (selem) == INTEGER_CST\n+\t\t&& (lhs = gimple_call_lhs (stmt)) != NULL_TREE)\n+\t      {\n+\t\ttree size = fold_build2 (MULT_EXPR, TREE_TYPE (nelem),\n+\t\t\t\t\t nelem, selem);\n+\t\tao_ref_init_from_ptr_and_size (write, lhs, size);\n+\t\treturn true;\n+\t      }\n+\t  }\n \n-\t  default:\n-\t    break;\n+\tdefault:\n+\t  break;\n \t}\n     }\n   else if (is_gimple_assign (stmt))\n@@ -964,57 +964,58 @@ dse_dom_walker::dse_optimize_stmt (gimple_stmt_iterator *gsi)\n       tree fndecl = gimple_call_fndecl (stmt);\n       switch (DECL_FUNCTION_CODE (fndecl))\n \t{\n-\t  case BUILT_IN_MEMCPY:\n-\t  case BUILT_IN_MEMMOVE:\n-\t  case BUILT_IN_MEMSET:\n-\t  case BUILT_IN_MEMCPY_CHK:\n-\t  case BUILT_IN_MEMMOVE_CHK:\n-\t  case BUILT_IN_MEMSET_CHK:\n-\t    {\n-\t      /* Occasionally calls with an explicit length of zero\n-\t\t show up in the IL.  It's pointless to do analysis\n-\t\t on them, they're trivially dead.  */\n-\t      tree size = gimple_call_arg (stmt, 2);\n-\t      if (integer_zerop (size))\n-\t\t{\n-\t\t  delete_dead_or_redundant_call (gsi, \"dead\");\n-\t\t  return;\n-\t\t}\n-\n-\t      /* If this is a memset call that initializes an object\n-\t\t to zero, it may be redundant with an earlier memset\n-\t\t or empty CONSTRUCTOR of a larger object.  */\n-\t      if ((DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET\n-\t\t   || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET_CHK)\n-\t\t  && integer_zerop (gimple_call_arg (stmt, 1)))\n-\t\tdse_optimize_redundant_stores (stmt);\n-\n-\t      enum dse_store_status store_status;\n-\t      m_byte_tracking_enabled\n-\t\t= setup_live_bytes_from_ref (&ref, m_live_bytes);\n-\t      store_status = dse_classify_store (&ref, stmt,\n-\t\t\t\t\t\t m_byte_tracking_enabled,\n-\t\t\t\t\t\t m_live_bytes);\n-\t      if (store_status == DSE_STORE_LIVE)\n-\t\treturn;\n-\n-\t      if (store_status == DSE_STORE_MAYBE_PARTIAL_DEAD)\n-\t\t{\n-\t\t  maybe_trim_memstar_call (&ref, m_live_bytes, stmt);\n-\t\t  return;\n-\t\t}\n-\n-\t      if (store_status == DSE_STORE_DEAD)\n+\tcase BUILT_IN_MEMCPY:\n+\tcase BUILT_IN_MEMMOVE:\n+\tcase BUILT_IN_MEMSET:\n+\tcase BUILT_IN_MEMCPY_CHK:\n+\tcase BUILT_IN_MEMMOVE_CHK:\n+\tcase BUILT_IN_MEMSET_CHK:\n+\t  {\n+\t    /* Occasionally calls with an explicit length of zero\n+\t       show up in the IL.  It's pointless to do analysis\n+\t       on them, they're trivially dead.  */\n+\t    tree size = gimple_call_arg (stmt, 2);\n+\t    if (integer_zerop (size))\n+\t      {\n \t\tdelete_dead_or_redundant_call (gsi, \"dead\");\n+\t\treturn;\n+\t      }\n+\n+\t    /* If this is a memset call that initializes an object\n+\t       to zero, it may be redundant with an earlier memset\n+\t       or empty CONSTRUCTOR of a larger object.  */\n+\t    if ((DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET\n+\t\t || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_MEMSET_CHK)\n+\t\t&& integer_zerop (gimple_call_arg (stmt, 1)))\n+\t      dse_optimize_redundant_stores (stmt);\n+\n+\t    enum dse_store_status store_status;\n+\t    m_byte_tracking_enabled\n+\t      = setup_live_bytes_from_ref (&ref, m_live_bytes);\n+\t    store_status = dse_classify_store (&ref, stmt,\n+\t\t\t\t\t       m_byte_tracking_enabled,\n+\t\t\t\t\t       m_live_bytes);\n+\t    if (store_status == DSE_STORE_LIVE)\n \t      return;\n-\t    }\n \n-\t  case BUILT_IN_CALLOC:\n-\t    /* We already know the arguments are integer constants.  */\n-\t    dse_optimize_redundant_stores (stmt);\n+\t    if (store_status == DSE_STORE_MAYBE_PARTIAL_DEAD)\n+\t      {\n+\t\tmaybe_trim_memstar_call (&ref, m_live_bytes, stmt);\n+\t\treturn;\n+\t      }\n \n-\t  default:\n+\t    if (store_status == DSE_STORE_DEAD)\n+\t      delete_dead_or_redundant_call (gsi, \"dead\");\n \t    return;\n+\t  }\n+\n+\tcase BUILT_IN_CALLOC:\n+\t  /* We already know the arguments are integer constants.  */\n+\t  dse_optimize_redundant_stores (stmt);\n+\t  return;\n+\n+\tdefault:\n+\t  return;\n \t}\n     }\n "}]}