{"sha": "a70965b114281553fa46cac9b8abab543f36793f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwOTY1YjExNDI4MTU1M2ZhNDZjYWM5YjhhYmFiNTQzZjM2NzkzZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:25:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:25:56Z"}, "message": "[AArch64] Add support for SVE HF vconds\n\nWe were missing vcond patterns that had HF comparisons and HI or HF data.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_HSD): New mode iterator.\n\t(V_FP_EQUIV, v_fp_equiv): Handle VNx8HI and VNx8HF.\n\t* config/aarch64/aarch64-sve.md (vcond<mode><v_fp_equiv>): Use\n\tSVE_HSD instead of SVE_SD.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vcond_17.c: New test.\n\t* gcc.target/aarch64/sve/vcond_17_run.c: Likewise.\n\nFrom-SVN: r274420", "tree": {"sha": "930a059dd9098ee3e2fd8b507f9109df246afa27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/930a059dd9098ee3e2fd8b507f9109df246afa27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70965b114281553fa46cac9b8abab543f36793f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70965b114281553fa46cac9b8abab543f36793f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70965b114281553fa46cac9b8abab543f36793f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70965b114281553fa46cac9b8abab543f36793f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0254ed7970e64abd82f21aedf9373720a73671c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0254ed7970e64abd82f21aedf9373720a73671c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0254ed7970e64abd82f21aedf9373720a73671c7"}], "stats": {"total": 177, "additions": 171, "deletions": 6}, "files": [{"sha": "9f4efd78e6e06a12f59f253446c8b3646df13510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_HSD): New mode iterator.\n+\t(V_FP_EQUIV, v_fp_equiv): Handle VNx8HI and VNx8HF.\n+\t* config/aarch64/aarch64-sve.md (vcond<mode><v_fp_equiv>): Use\n+\tSVE_HSD instead of SVE_SD.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "d2583914be9c9cef2d9dc5e21f5b8f9d4f7412b7", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -2884,13 +2884,13 @@\n ;; Floating-point vcond.  All comparisons except FCMUO allow a zero operand;\n ;; aarch64_expand_sve_vcond handles the case of an FCMUO with zero.\n (define_expand \"vcond<mode><v_fp_equiv>\"\n-  [(set (match_operand:SVE_SD 0 \"register_operand\")\n-\t(if_then_else:SVE_SD\n+  [(set (match_operand:SVE_HSD 0 \"register_operand\")\n+\t(if_then_else:SVE_HSD\n \t  (match_operator 3 \"comparison_operator\"\n \t    [(match_operand:<V_FP_EQUIV> 4 \"register_operand\")\n \t     (match_operand:<V_FP_EQUIV> 5 \"aarch64_simd_reg_or_zero\")])\n-\t  (match_operand:SVE_SD 1 \"register_operand\")\n-\t  (match_operand:SVE_SD 2 \"register_operand\")))]\n+\t  (match_operand:SVE_HSD 1 \"register_operand\")\n+\t  (match_operand:SVE_HSD 2 \"register_operand\")))]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vcond (<MODE>mode, <V_FP_EQUIV>mode, operands);"}, {"sha": "32c662f90b6a0041fdcf90fcd671066b7164eb66", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -301,6 +301,9 @@\n ;; All SVE floating-point vector modes that have 16-bit or 32-bit elements.\n (define_mode_iterator SVE_HSF [VNx8HF VNx4SF])\n \n+;; All SVE vector modes that have 16-bit, 32-bit or 64-bit elements.\n+(define_mode_iterator SVE_HSD [VNx8HI VNx4SI VNx2DI VNx8HF VNx4SF VNx2DF])\n+\n ;; All SVE vector modes that have 32-bit or 64-bit elements.\n (define_mode_iterator SVE_SD [VNx4SI VNx2DI VNx4SF VNx2DF])\n \n@@ -928,9 +931,11 @@\n ])\n \n ;; Floating-point equivalent of selected modes.\n-(define_mode_attr V_FP_EQUIV [(VNx4SI \"VNx4SF\") (VNx4SF \"VNx4SF\")\n+(define_mode_attr V_FP_EQUIV [(VNx8HI \"VNx8HF\") (VNx8HF \"VNx8HF\")\n+\t\t\t      (VNx4SI \"VNx4SF\") (VNx4SF \"VNx4SF\")\n \t\t\t      (VNx2DI \"VNx2DF\") (VNx2DF \"VNx2DF\")])\n-(define_mode_attr v_fp_equiv [(VNx4SI \"vnx4sf\") (VNx4SF \"vnx4sf\")\n+(define_mode_attr v_fp_equiv [(VNx8HI \"vnx8hf\") (VNx8HF \"vnx8hf\")\n+\t\t\t      (VNx4SI \"vnx4sf\") (VNx4SF \"vnx4sf\")\n \t\t\t      (VNx2DI \"vnx2df\") (VNx2DF \"vnx2df\")])\n \n ;; Mode for vector conditional operations where the comparison has"}, {"sha": "52e25330087f452a8f0d499bae8c6668dec28572", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/vcond_17.c: New test.\n+\t* gcc.target/aarch64/sve/vcond_17_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/spill_4.c: Expect all ptrues to be .Bs."}, {"sha": "cabcfa73e43553c5f134409398ba44171175812a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_17.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17.c?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define eq(A, B) ((A) == (B))\n+#define ne(A, B) ((A) != (B))\n+#define olt(A, B) ((A) < (B))\n+#define ole(A, B) ((A) <= (B))\n+#define oge(A, B) ((A) >= (B))\n+#define ogt(A, B) ((A) > (B))\n+#define ordered(A, B) (!__builtin_isunordered (A, B))\n+#define unordered(A, B) (__builtin_isunordered (A, B))\n+#define ueq(A, B) (!__builtin_islessgreater (A, B))\n+#define ult(A, B) (__builtin_isless (A, B))\n+#define ule(A, B) (__builtin_islessequal (A, B))\n+#define uge(A, B) (__builtin_isgreaterequal (A, B))\n+#define ugt(A, B) (__builtin_isgreater (A, B))\n+#define nueq(A, B) (__builtin_islessgreater (A, B))\n+#define nult(A, B) (!__builtin_isless (A, B))\n+#define nule(A, B) (!__builtin_islessequal (A, B))\n+#define nuge(A, B) (!__builtin_isgreaterequal (A, B))\n+#define nugt(A, B) (!__builtin_isgreater (A, B))\n+\n+#define DEF_LOOP(CMP, EXPECT_INVALID)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  test_##CMP##_var (__fp16 *restrict dest, __fp16 *restrict src,\t\\\n+\t\t    __fp16 fallback, __fp16 *restrict a,\t\t\\\n+\t\t    __fp16 *restrict b, int count)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\t\\\n+      dest[i] = CMP (a[i], b[i]) ? src[i] : fallback;\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  test_##CMP##_zero (__fp16 *restrict dest,  __fp16 *restrict src,\t\\\n+\t\t     __fp16 fallback, __fp16 *restrict a,\t\t\\\n+\t\t     int count)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\t\\\n+      dest[i] = CMP (a[i], (__fp16) 0) ? src[i] : fallback;\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  test_##CMP##_sel (__fp16 *restrict dest, __fp16 if_true,\t\t\\\n+\t\t    __fp16 if_false, __fp16 *restrict a,\t\t\\\n+\t\t    __fp16 b, int count)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\t\\\n+      dest[i] = CMP (a[i], b) ? if_true : if_false;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (eq, 0)\t\t\t\t\t\\\n+  T (ne, 0)\t\t\t\t\t\\\n+  T (olt, 1)\t\t\t\t\t\\\n+  T (ole, 1)\t\t\t\t\t\\\n+  T (oge, 1)\t\t\t\t\t\\\n+  T (ogt, 1)\t\t\t\t\t\\\n+  T (ordered, 0)\t\t\t\t\\\n+  T (unordered, 0)\t\t\t\t\\\n+  T (ueq, 0)\t\t\t\t\t\\\n+  T (ult, 0)\t\t\t\t\t\\\n+  T (ule, 0)\t\t\t\t\t\\\n+  T (uge, 0)\t\t\t\t\t\\\n+  T (ugt, 0)\t\t\t\t\t\\\n+  T (nueq, 0)\t\t\t\t\t\\\n+  T (nult, 0)\t\t\t\t\t\\\n+  T (nule, 0)\t\t\t\t\t\\\n+  T (nuge, 0)\t\t\t\t\t\\\n+  T (nugt, 0)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tfcmeq\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler {\\tfcmeq\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tfcmne\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmne\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tfcmlt\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmlt\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tfcmle\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmle\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tfcmgt\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmgt\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tfcmge\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmge\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\.0\\n} } } */\n+/* { dg-final { scan-assembler {\\tfcmuo\\tp[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */"}, {"sha": "4a228c8c2c7063531e454257240373c92fcb5678", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_17_run.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70965b114281553fa46cac9b8abab543f36793f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_17_run.c?ref=a70965b114281553fa46cac9b8abab543f36793f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+#include \"vcond_17.c\"\n+\n+#define N 401\n+\n+#define TEST_LOOP(CMP, EXPECT_INVALID)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    __fp16 dest1[N], dest2[N], dest3[N], src[N];\t\t\\\n+    __fp16 a[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc[i] = i * i;\t\t\t\t\t\t\\\n+\tif (i % 5 == 0)\t\t\t\t\t\t\\\n+\t  a[i] = 0;\t\t\t\t\t\t\\\n+\telse if (i % 3)\t\t\t\t\t\t\\\n+\t  a[i] = i * 0.1;\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  a[i] = i;\t\t\t\t\t\t\\\n+\tif (i % 7 == 0)\t\t\t\t\t\t\\\n+\t  b[i] = __builtin_nan (\"\");\t\t\t\t\\\n+\telse if (i % 6)\t\t\t\t\t\t\\\n+\t  b[i] = i * 0.1;\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  b[i] = i;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    feclearexcept (FE_ALL_EXCEPT);\t\t\t\t\\\n+    test_##CMP##_var (dest1, src, 11, a, b, N);\t\t\t\\\n+    test_##CMP##_zero (dest2, src, 22, a, N);\t\t\t\\\n+    test_##CMP##_sel (dest3, 33, 44, a, 9, N);\t\t\t\\\n+    if (!fetestexcept (FE_INVALID) != !(EXPECT_INVALID))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (dest1[i] != (CMP (a[i], b[i]) ? src[i] : 11))\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tif (dest2[i] != (CMP (a[i], 0) ? src[i] : 22))\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tif (dest3[i] != (CMP (a[i], 9) ? 33 : 44))\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}