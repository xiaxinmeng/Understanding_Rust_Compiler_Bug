{"sha": "dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhYWY1MTAxY2E4ZDBhYzhiOWU0OGRkNDk3MDYxNDg4MDhmNzllMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-02T12:33:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-02T12:33:38Z"}, "message": "Initial revision\n\nFrom-SVN: r22181", "tree": {"sha": "d088b544717108c5d90ea39a37a5d46dd399a275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d088b544717108c5d90ea39a37a5d46dd399a275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1/comments", "author": null, "committer": null, "parents": [{"sha": "b693643843e26449ac87c55e4172553344715d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693643843e26449ac87c55e4172553344715d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693643843e26449ac87c55e4172553344715d2a"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "37b54d74442abb1c7ee083f3c1728ebfe593ef52", "filename": "libstdc++/stl/stl_exception.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1/libstdc%2B%2B%2Fstl%2Fstl_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1/libstdc%2B%2B%2Fstl%2Fstl_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_exception.h?ref=dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */ \n+\n+#ifndef __SGI_STL_EXCEPTION_H\n+#define __SGI_STL_EXCEPTION_H\n+\n+// This header exists solely for portability.  Normally it just includes\n+// the header <exception>.\n+\n+// The header <exception> contains low-level functions that interact\n+// with a compiler's exception-handling mechanism.  It is assumed to\n+// be supplied with the compiler, rather than with the library, because\n+// it is inherently tied very closely to the compiler itself.\n+\n+// On platforms where <exception> does not exist, this header defines\n+// an exception base class.  This is *not* a substitute for everything\n+// in <exception>, but it suffices to support a bare minimum of STL\n+// functionality.\n+\n+#include <stl_config.h>\n+\n+#ifndef __STL_NO_EXCEPTION_HEADER\n+\n+#include <exception>\n+#define __STL_EXCEPTION_BASE exception\n+\n+#else /* __STL_NO_EXCEPTION_HEADER */\n+\n+__STL_BEGIN_NAMESPACE\n+\n+class _Exception {\n+public:\n+  virtual ~_Exception() __STL_NOTHROW {}\n+  virtual const char* what() const __STL_NOTHROW { return \"\"; }\n+};\n+\n+#define __STL_EXCEPTION_BASE _Exception\n+\n+__STL_END_NAMESPACE\n+\n+#endif /* __STL_NO_EXCEPTION_HEADER */\n+\n+#endif /* __SGI_STL_EXCEPTION_H */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "d2af9e19f01c35d2bfea2ae8765bae9aa58b2fef", "filename": "libstdc++/stl/stl_string_fwd.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1/libstdc%2B%2B%2Fstl%2Fstl_string_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfaaf5101ca8d0ac8b9e48dd49706148808f79e1/libstdc%2B%2B%2Fstl%2Fstl_string_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_string_fwd.h?ref=dfaaf5101ca8d0ac8b9e48dd49706148808f79e1", "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */ \n+\n+#ifndef __SGI_STL_STRING_FWD_H\n+#define __SGI_STL_STRING_FWD_H\n+\n+#include <stddef.h>\n+\n+__STL_BEGIN_NAMESPACE\n+\n+#ifdef __STL_USE_STD_ALLOCATORS\n+\n+template <class _Tp> class allocator;\n+\n+#else /* __STL_USE_STD_ALLOCATORS */\n+\n+template <bool __threads, int __inst> class _Default_alloc_template;\n+typedef _Default_alloc_template<true, 0> _Alloc;\n+\n+#endif /* __STL_USE_STD_ALLOCATORS */\n+\n+template <class _CharT> struct char_traits;\n+template <class _CharT, \n+          class _Traits = char_traits<_CharT>, \n+          class _Alloc = __STL_DEFAULT_ALLOCATOR(_CharT) >\n+class basic_string;\n+\n+typedef basic_string<char> string;\n+typedef basic_string<wchar_t> wstring;\n+\n+template <class _CharT, class _Traits, class _Alloc>\n+void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>&, _CharT*, \n+                    size_t);\n+\n+__STL_END_NAMESPACE\n+\n+#endif /* __SGI_STL_STRING_FWD_H */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}]}