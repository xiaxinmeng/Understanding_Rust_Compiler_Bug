{"sha": "05abad4cca62d3725175ccf628b74638fe43e043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhYmFkNGNjYTYyZDM3MjUxNzVjY2Y2MjhiNzQ2MzhmZTQzZTA0Mw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-12-05T09:23:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-05T09:23:25Z"}, "message": "invoke.texi: Document the options.\n\ngcc/\n\t* doc/invoke.texi: Document the options.\n\t* flag-types.h (enum sanitize_code): Add\n\tSANITIZE_POINTER_COMPARE and SANITIZE_POINTER_SUBTRACT.\n\t* ipa-inline.c (sanitize_attrs_match_for_inline_p): Add handling\n\tof SANITIZE_POINTER_COMPARE and SANITIZE_POINTER_SUBTRACT.\n\t* opts.c: Define new sanitizer options.\n\t* sanitizer.def (BUILT_IN_ASAN_POINTER_COMPARE): Likewise.\n\t(BUILT_IN_ASAN_POINTER_SUBTRACT): Likewise.\ngcc/c/\n\t* c-typeck.c (pointer_diff): Add new argument and instrument\n\tpointer subtraction.\n\t(build_binary_op): Similar for pointer comparison.\ngcc/cp/\n\t* typeck.c (pointer_diff): Add new argument and instrument\n\tpointer subtraction.\n\t(cp_build_binary_op): Create compound expression if doing an\n\tinstrumentation.\ngcc/testsuite/\n\t* c-c++-common/asan/pointer-compare-1.c: New test.\n\t* c-c++-common/asan/pointer-compare-2.c: New test.\n\t* c-c++-common/asan/pointer-subtract-1.c: New test.\n\t* c-c++-common/asan/pointer-subtract-2.c: New test.\n\t* c-c++-common/asan/pointer-subtract-3.c: New test.\n\t* c-c++-common/asan/pointer-subtract-4.c: New test.\nlibsanitizer/\n\t* asan/asan_descriptions.cc: Cherry-pick upstream r319668.\n\t* asan/asan_descriptions.h: Likewise.\n\t* asan/asan_report.cc: Likewise.\n\t* asan/asan_thread.cc: Likewise.\n\t* asan/asan_thread.h: Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r255404", "tree": {"sha": "a28c9b3ac2e4db36105499565bc890964b061fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28c9b3ac2e4db36105499565bc890964b061fbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05abad4cca62d3725175ccf628b74638fe43e043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05abad4cca62d3725175ccf628b74638fe43e043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05abad4cca62d3725175ccf628b74638fe43e043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05abad4cca62d3725175ccf628b74638fe43e043/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81e4859a97804dfe76eb090f8b4d6a68361ce658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e4859a97804dfe76eb090f8b4d6a68361ce658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e4859a97804dfe76eb090f8b4d6a68361ce658"}], "stats": {"total": 621, "additions": 601, "deletions": 20}, "files": [{"sha": "3959ec6f54eeaf421b997edd3640f2be6313c3b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -1,3 +1,15 @@\n+2017-12-05  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/invoke.texi: Document the options.\n+\t* flag-types.h (enum sanitize_code): Add\n+\tSANITIZE_POINTER_COMPARE and SANITIZE_POINTER_SUBTRACT.\n+\t* ipa-inline.c (sanitize_attrs_match_for_inline_p): Add handling\n+\tof SANITIZE_POINTER_COMPARE and SANITIZE_POINTER_SUBTRACT.\n+\t* opts.c: Define new sanitizer options.\n+\t* sanitizer.def (BUILT_IN_ASAN_POINTER_COMPARE): Likewise.\n+\t(BUILT_IN_ASAN_POINTER_SUBTRACT): Likewise.\n+\n 2017-12-05  Julia Koval  <julia.koval@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VNNI_SET,"}, {"sha": "8fea42622b233e40b497e197178acb4d1c2cd45c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -1,3 +1,10 @@\n+2017-12-05  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (pointer_diff): Add new argument and instrument\n+\tpointer subtraction.\n+\t(build_binary_op): Similar for pointer comparison.\n+\n 2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/79153"}, {"sha": "676dbbd2e2ff81157d6d910d62a7cf3c874deefb", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -95,7 +95,7 @@ static tree lookup_field (tree, tree);\n static int convert_arguments (location_t, vec<location_t>, tree,\n \t\t\t      vec<tree, va_gc> *, vec<tree, va_gc> *, tree,\n \t\t\t      tree);\n-static tree pointer_diff (location_t, tree, tree);\n+static tree pointer_diff (location_t, tree, tree, tree *);\n static tree convert_for_assignment (location_t, location_t, tree, tree, tree,\n \t\t\t\t    enum impl_conv, bool, tree, tree, int);\n static tree valid_compound_expr_initializer (tree, tree);\n@@ -3768,10 +3768,11 @@ parser_build_binary_op (location_t location, enum tree_code code,\n }\n \f\n /* Return a tree for the difference of pointers OP0 and OP1.\n-   The resulting tree has type ptrdiff_t.  */\n+   The resulting tree has type ptrdiff_t.  If POINTER_SUBTRACT sanitization is\n+   enabled, assign to INSTRUMENT_EXPR call to libsanitizer.  */\n \n static tree\n-pointer_diff (location_t loc, tree op0, tree op1)\n+pointer_diff (location_t loc, tree op0, tree op1, tree *instrument_expr)\n {\n   tree restype = ptrdiff_type_node;\n   tree result, inttype;\n@@ -3815,6 +3816,17 @@ pointer_diff (location_t loc, tree op0, tree op1)\n     pedwarn (loc, OPT_Wpointer_arith,\n \t     \"pointer to a function used in subtraction\");\n \n+  if (sanitize_flags_p (SANITIZE_POINTER_SUBTRACT))\n+    {\n+      gcc_assert (current_function_decl != NULL_TREE);\n+\n+      op0 = save_expr (op0);\n+      op1 = save_expr (op1);\n+\n+      tree tt = builtin_decl_explicit (BUILT_IN_ASAN_POINTER_SUBTRACT);\n+      *instrument_expr = build_call_expr_loc (loc, tt, 2, op0, op1);\n+    }\n+\n   /* First do the subtraction, then build the divide operator\n      and only convert at the very end.\n      Do not do default conversions in case restype is a short type.  */\n@@ -3825,8 +3837,8 @@ pointer_diff (location_t loc, tree op0, tree op1)\n      space, cast the pointers to some larger integer type and do the\n      computations in that type.  */\n   if (TYPE_PRECISION (inttype) > TYPE_PRECISION (TREE_TYPE (op0)))\n-       op0 = build_binary_op (loc, MINUS_EXPR, convert (inttype, op0),\n-\t\t\t      convert (inttype, op1), false);\n+    op0 = build_binary_op (loc, MINUS_EXPR, convert (inttype, op0),\n+\t\t\t   convert (inttype, op1), false);\n   else\n     op0 = build2_loc (loc, POINTER_DIFF_EXPR, inttype, op0, op1);\n \n@@ -11113,7 +11125,7 @@ build_binary_op (location_t location, enum tree_code code,\n       if (code0 == POINTER_TYPE && code1 == POINTER_TYPE\n \t  && comp_target_types (location, type0, type1))\n \t{\n-\t  ret = pointer_diff (location, op0, op1);\n+\t  ret = pointer_diff (location, op0, op1, &instrument_expr);\n \t  goto return_build_binary_op;\n \t}\n       /* Handle pointer minus int.  Just like pointer plus int.  */\n@@ -11663,6 +11675,17 @@ build_binary_op (location_t location, enum tree_code code,\n \t  result_type = type1;\n \t  pedwarn (location, 0, \"comparison between pointer and integer\");\n \t}\n+\n+      if ((code0 == POINTER_TYPE || code1 == POINTER_TYPE)\n+\t  && sanitize_flags_p (SANITIZE_POINTER_COMPARE))\n+\t{\n+\t  op0 = save_expr (op0);\n+\t  op1 = save_expr (op1);\n+\n+\t  tree tt = builtin_decl_explicit (BUILT_IN_ASAN_POINTER_COMPARE);\n+\t  instrument_expr = build_call_expr_loc (location, tt, 2, op0, op1);\n+\t}\n+\n       if ((TREE_CODE (TREE_TYPE (orig_op0)) == BOOLEAN_TYPE\n \t   || truth_value_p (TREE_CODE (orig_op0)))\n \t  ^ (TREE_CODE (TREE_TYPE (orig_op1)) == BOOLEAN_TYPE"}, {"sha": "a5ab703d1d3ffdcd002801e3e6e116f6cb0f9f27", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -1,3 +1,11 @@\n+2017-12-05  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck.c (pointer_diff): Add new argument and instrument\n+\tpointer subtraction.\n+\t(cp_build_binary_op): Create compound expression if doing an\n+\tinstrumentation.\n+\n 2017-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-gimplify.c (cp_maybe_instrument_return): Don't add"}, {"sha": "7210f99fb083bdbbc1da97699293ad0825002fd2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -54,7 +54,7 @@ static tree rationalize_conditional_expr (enum tree_code, tree,\n static int comp_ptr_ttypes_real (tree, tree, int);\n static bool comp_except_types (tree, tree, bool);\n static bool comp_array_types (const_tree, const_tree, bool);\n-static tree pointer_diff (location_t, tree, tree, tree, tsubst_flags_t);\n+static tree pointer_diff (location_t, tree, tree, tree, tsubst_flags_t, tree *);\n static tree get_delta_difference (tree, tree, bool, bool, tsubst_flags_t);\n static void casts_away_constness_r (tree *, tree *, tsubst_flags_t);\n static bool casts_away_constness (tree, tree, tsubst_flags_t);\n@@ -4329,8 +4329,16 @@ cp_build_binary_op (location_t location,\n       if (code0 == POINTER_TYPE && code1 == POINTER_TYPE\n \t  && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n \t\t\t\t\t\t\tTREE_TYPE (type1)))\n-\treturn pointer_diff (location, op0, op1,\n-\t\t\t     common_pointer_type (type0, type1), complain);\n+\t{\n+\t  result = pointer_diff (location, op0, op1,\n+\t\t\t\t common_pointer_type (type0, type1), complain,\n+\t\t\t\t &instrument_expr);\n+\t  if (instrument_expr != NULL)\n+\t    result = build2 (COMPOUND_EXPR, TREE_TYPE (result),\n+\t\t\t     instrument_expr, result);\n+\n+\t  return result;\n+\t}\n       /* In all other cases except pointer - int, the usual arithmetic\n \t rules apply.  */\n       else if (!(code0 == POINTER_TYPE && code1 == INTEGER_TYPE))\n@@ -5019,6 +5027,17 @@ cp_build_binary_op (location_t location,\n           else\n             return error_mark_node;\n \t}\n+\n+      if ((code0 == POINTER_TYPE || code1 == POINTER_TYPE)\n+\t  && sanitize_flags_p (SANITIZE_POINTER_COMPARE))\n+\t{\n+\t  op0 = save_expr (op0);\n+\t  op1 = save_expr (op1);\n+\n+\t  tree tt = builtin_decl_explicit (BUILT_IN_ASAN_POINTER_COMPARE);\n+\t  instrument_expr = build_call_expr_loc (location, tt, 2, op0, op1);\n+\t}\n+\n       break;\n \n     case UNORDERED_EXPR:\n@@ -5374,11 +5393,12 @@ cp_pointer_int_sum (location_t loc, enum tree_code resultcode, tree ptrop,\n }\n \n /* Return a tree for the difference of pointers OP0 and OP1.\n-   The resulting tree has type int.  */\n+   The resulting tree has type int.  If POINTER_SUBTRACT sanitization is\n+   enabled, assign to INSTRUMENT_EXPR call to libsanitizer.  */\n \n static tree\n pointer_diff (location_t loc, tree op0, tree op1, tree ptrtype,\n-\t      tsubst_flags_t complain)\n+\t      tsubst_flags_t complain, tree *instrument_expr)\n {\n   tree result, inttype;\n   tree restype = ptrdiff_type_node;\n@@ -5420,6 +5440,15 @@ pointer_diff (location_t loc, tree op0, tree op1, tree ptrtype,\n   else\n     inttype = restype;\n \n+  if (sanitize_flags_p (SANITIZE_POINTER_SUBTRACT))\n+    {\n+      op0 = save_expr (op0);\n+      op1 = save_expr (op1);\n+\n+      tree tt = builtin_decl_explicit (BUILT_IN_ASAN_POINTER_SUBTRACT);\n+      *instrument_expr = build_call_expr_loc (loc, tt, 2, op0, op1);\n+    }\n+\n   /* First do the subtraction, then build the divide operator\n      and only convert at the very end.\n      Do not do default conversions in case restype is a short type.  */"}, {"sha": "b8c8083daa7209bd7ea27159a4c718f02c63b1fd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -11034,6 +11034,28 @@ Enable AddressSanitizer for Linux kernel.\n See @uref{https://github.com/google/kasan/wiki} for more details.\n The option cannot be combined with @option{-fcheck-pointer-bounds}.\n \n+@item -fsanitize=pointer-compare\n+@opindex fsanitize=pointer-compare\n+Instrument comparison operation (<, <=, >, >=) with pointer operands.\n+The option must be combined with either @option{-fsanitize=kernel-address} or\n+@option{-fsanitize=address}\n+The option cannot be combined with @option{-fsanitize=thread}\n+and/or @option{-fcheck-pointer-bounds}.\n+Note: By default the check is disabled at run time.  To enable it,\n+add @code{detect_invalid_pointer_pairs=1} to the environment variable\n+@env{ASAN_OPTIONS}.\n+\n+@item -fsanitize=pointer-subtract\n+@opindex fsanitize=pointer-subtract\n+Instrument subtraction with pointer operands.\n+The option must be combined with either @option{-fsanitize=kernel-address} or\n+@option{-fsanitize=address}\n+The option cannot be combined with @option{-fsanitize=thread}\n+and/or @option{-fcheck-pointer-bounds}.\n+Note: By default the check is disabled at run time.  To enable it,\n+add @code{detect_invalid_pointer_pairs=1} to the environment variable\n+@env{ASAN_OPTIONS}.\n+\n @item -fsanitize=thread\n @opindex fsanitize=thread\n Enable ThreadSanitizer, a fast data race detector."}, {"sha": "3073c66187243453372451ecfe2bdc535aacd88d", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -246,6 +246,8 @@ enum sanitize_code {\n   SANITIZE_BOUNDS_STRICT = 1UL << 23,\n   SANITIZE_POINTER_OVERFLOW = 1UL << 24,\n   SANITIZE_BUILTIN = 1UL << 25,\n+  SANITIZE_POINTER_COMPARE = 1UL << 26,\n+  SANITIZE_POINTER_SUBTRACT = 1UL << 27,\n   SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN"}, {"sha": "7846e93d119992dbdd66e4a9368437c402c21775", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -260,8 +260,12 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n   if (!caller || !callee)\n     return true;\n \n-  return sanitize_flags_p (SANITIZE_ADDRESS, caller)\n-    == sanitize_flags_p (SANITIZE_ADDRESS, callee);\n+  return ((sanitize_flags_p (SANITIZE_ADDRESS, caller)\n+\t   == sanitize_flags_p (SANITIZE_ADDRESS, callee))\n+\t  && (sanitize_flags_p (SANITIZE_POINTER_COMPARE, caller)\n+\t      == sanitize_flags_p (SANITIZE_POINTER_COMPARE, callee))\n+\t  && (sanitize_flags_p (SANITIZE_POINTER_SUBTRACT, caller)\n+\t      == sanitize_flags_p (SANITIZE_POINTER_SUBTRACT, callee)));\n }\n \n /* Used for flags where it is safe to inline when caller's value is"}, {"sha": "17579e72373ee831a55d5efde4fbbe305b4fcf6c", "filename": "gcc/opts.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -953,6 +953,19 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   if (opts->x_dwarf_split_debug_info)\n     opts->x_debug_generate_pub_sections = 2;\n \n+  if ((opts->x_flag_sanitize\n+       & (SANITIZE_USER_ADDRESS | SANITIZE_KERNEL_ADDRESS)) == 0)\n+    {\n+      if (opts->x_flag_sanitize & SANITIZE_POINTER_COMPARE)\n+\terror_at (loc,\n+\t\t  \"%<-fsanitize=pointer-compare%> must be combined with \"\n+\t\t  \"%<-fsanitize=address%> or %<-fsanitize=kernel-address%>\");\n+      if (opts->x_flag_sanitize & SANITIZE_POINTER_SUBTRACT)\n+\terror_at (loc,\n+\t\t  \"%<-fsanitize=pointer-subtract%> must be combined with \"\n+\t\t  \"%<-fsanitize=address%> or %<-fsanitize=kernel-address%>\");\n+    }\n+\n   /* Userspace and kernel ASan conflict with each other.  */\n   if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n@@ -1497,6 +1510,8 @@ const struct sanitizer_opts_s sanitizer_opts[] =\n   SANITIZER_OPT (address, (SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS), true),\n   SANITIZER_OPT (kernel-address, (SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS),\n \t\t true),\n+  SANITIZER_OPT (pointer-compare, SANITIZE_POINTER_COMPARE, true),\n+  SANITIZER_OPT (pointer-subtract, SANITIZE_POINTER_SUBTRACT, true),\n   SANITIZER_OPT (thread, SANITIZE_THREAD, false),\n   SANITIZER_OPT (leak, SANITIZE_LEAK, false),\n   SANITIZER_OPT (shift, SANITIZE_SHIFT, true),"}, {"sha": "7d224fa081ea09423b3a5088462502b5fdf136ad", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -175,6 +175,10 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_ALLOCA_POISON, \"__asan_alloca_poison\",\n \t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_ALLOCAS_UNPOISON, \"__asan_allocas_unpoison\",\n \t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_POINTER_COMPARE, \"__sanitizer_ptr_cmp\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_POINTER_SUBTRACT, \"__sanitizer_ptr_sub\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n \n /* Thread Sanitizer */\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_INIT, \"__tsan_init\", "}, {"sha": "d040a7799553ff9b36889e5c8dcf7c0ec976923e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -1,3 +1,13 @@\n+2017-12-05  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/asan/pointer-compare-1.c: New test.\n+\t* c-c++-common/asan/pointer-compare-2.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-1.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-2.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-3.c: New test.\n+\t* c-c++-common/asan/pointer-subtract-4.c: New test.\n+\n 2017-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/missing-return.C: Add -O to dg-options."}, {"sha": "2cc7395241ad4a668642c266de6b7c9dfbd32a44", "filename": "gcc/testsuite/c-c++-common/asan/pointer-compare-1.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-1.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1:halt_on_error=0\" } */\n+/* { dg-options \"-fsanitize=address,pointer-compare\" } */\n+\n+volatile int v;\n+\n+__attribute__((noipa)) void\n+foo (char *p, char *q)\n+{\n+  v = p > q;\n+}\n+\n+char global1[100] = {}, global2[100] = {};\n+char __attribute__((used)) smallest_global[5] = {};\n+char small_global[7] = {};\n+char __attribute__((used)) little_global[10] = {};\n+char __attribute__((used)) medium_global[4000] = {};\n+char large_global[5000] = {};\n+char __attribute__((used)) largest_global[6000] = {};\n+\n+int\n+main ()\n+{\n+  /* Heap allocated memory.  */\n+  char *heap1 = (char *)__builtin_malloc (42);\n+  char *heap2 = (char *)__builtin_malloc (42);\n+\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, heap2);\n+  __builtin_free (heap1);\n+  __builtin_free (heap2);\n+\n+  heap1 = (char *)__builtin_malloc (1024);\n+  __asm (\"\" : \"+g\" (heap1));\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, heap1 + 1025);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1 + 1024, heap1 + 1025);\n+  __builtin_free (heap1);\n+\n+  heap1 = (char *)__builtin_malloc (4096);\n+  __asm (\"\" : \"+g\" (heap1));\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, heap1 + 4097);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, 0);\n+\n+  /* Global variables.  */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (&global1[0], &global2[10]);\n+\n+  char *p = &small_global[0];\n+  __asm (\"\" : \"+g\" (p));\n+  foo (p, p); /* OK */\n+  foo (p, p + 7); /* OK */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, p + 8);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p - 1, p);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, p - 1);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p - 1, p + 8);\n+\n+  p = &large_global[0];\n+  __asm (\"\" : \"+g\" (p));\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p - 1, p);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, p - 1);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, &global1[0]);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, &small_global[0]);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (p, 0);\n+\n+  /* Stack variables.  */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  char stack1, stack2;\n+  foo (&stack1, &stack2);\n+\n+  /* Mixtures.  */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, &stack1);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, &global1[0]);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (&stack1, &global1[0]);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair\" } */\n+  foo (&stack1, 0);\n+  __builtin_free (heap1);\n+\n+  return 0;\n+}"}, {"sha": "5539087e856467fb707efa2958902b5cc11e581e", "filename": "gcc/testsuite/c-c++-common/asan/pointer-compare-2.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-compare-2.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1 halt_on_error=1\" } */\n+/* { dg-options \"-fsanitize=address,pointer-compare\" } */\n+\n+volatile int v;\n+\n+int\n+foo (char *p)\n+{\n+  char *p2 = p + 20;\n+  v = p > p2;\n+  return v;\n+}\n+\n+void\n+bar (char *p, char *q)\n+{\n+  v = p <= q;\n+}\n+\n+void\n+baz (char *p, char *q)\n+{\n+  v = (p != 0 && p < q);\n+}\n+\n+char global[8192] = {};\n+char small_global[7] = {};\n+\n+int\n+main ()\n+{\n+  /* Heap allocated memory.  */\n+  char *p = (char *)__builtin_malloc (42);\n+  int r = foo (p);\n+  __builtin_free (p);\n+\n+  p = (char *)__builtin_malloc (1024);\n+  bar (p, p + 1024);\n+  bar (p + 1024, p + 1023);\n+  bar (p + 1, p + 1023);\n+  __builtin_free (p);\n+\n+  p = (char *)__builtin_malloc (4096);\n+  bar (p, p + 4096);\n+  bar (p + 10, p + 100);\n+  bar (p + 1024, p + 4096);\n+  bar (p + 4095, p + 4096);\n+  bar (p + 4095, p + 4094);\n+  bar (p + 100, p + 4096);\n+  bar (p + 100, p + 4094);\n+  __builtin_free (p);\n+\n+  /* Global variable.  */\n+  bar (&global[0], &global[1]);\n+  bar (&global[1], &global[2]);\n+  bar (&global[2], &global[1]);\n+  bar (&global[0], &global[100]);\n+  bar (&global[1000], &global[7000]);\n+  bar (&global[500], &global[10]);\n+  p = &global[0];\n+  bar (p, p + 8192);\n+  p = &global[8000];\n+  bar (p, p + 192);\n+\n+  p = &small_global[0];\n+  bar (p, p + 1);\n+  bar (p, p + 7);\n+  bar (p + 7, p + 1);\n+  bar (p + 6, p + 7);\n+  bar (p + 7, p + 7);\n+\n+  /* Stack variable.  */\n+  char stack[10000];\n+  bar (&stack[0], &stack[100]);\n+  bar (&stack[1000], &stack[9000]);\n+  bar (&stack[500], &stack[10]);\n+\n+  baz (0, &stack[10]);\n+\n+  return 0;\n+}"}, {"sha": "7cbef811d7b482fa3bb2a421fb589177aa007114", "filename": "gcc/testsuite/c-c++-common/asan/pointer-subtract-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-1.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1 halt_on_error=0\" } */\n+/* { dg-options \"-fsanitize=address,pointer-subtract\" } */\n+\n+volatile __PTRDIFF_TYPE__ v;\n+\n+__attribute__((noipa)) void\n+foo (char *p, char *q)\n+{\n+  v = p - q;\n+}\n+\n+char global1[100] = {}, global2[100] = {};\n+\n+int\n+main ()\n+{\n+  /* Heap allocated memory.  */\n+  char *heap1 = (char *)__builtin_malloc (42);\n+  char *heap2 = (char *)__builtin_malloc (42);\n+\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, heap2);\n+\n+  /* Global variables.  */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (&global1[0], &global2[10]);\n+\n+  /* Stack variables.  */\n+  char stack1, stack2;\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (&stack1, &stack2);\n+\n+  /* Mixtures.  */\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, &stack1);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair.*\" } */\n+  foo (heap1, &global1[0]);\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair\" } */\n+  foo (&stack1, &global1[0]);\n+\n+  __builtin_free (heap1);\n+  __builtin_free (heap2);  \n+  return 0;\n+}"}, {"sha": "6b65a16b559ca47f80a43f82da020b98326829e5", "filename": "gcc/testsuite/c-c++-common/asan/pointer-subtract-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-2.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1 halt_on_error=1\" } */\n+/* { dg-options \"-fsanitize=address,pointer-subtract\" } */\n+\n+volatile __PTRDIFF_TYPE__ v;\n+\n+void\n+bar (char *p, char *q)\n+{\n+  v = q - p;\n+  v = p - q;\n+}\n+\n+char global[10000] = {};\n+\n+int\n+main ()\n+{\n+  /* Heap allocated memory.  */\n+  char *p = (char *)__builtin_malloc (42);\n+  bar (p, p + 20);\n+  __builtin_free (p);\n+\n+  /* Global variable.  */\n+  bar (&global[0], &global[100]);\n+  bar (&global[1000], &global[9000]);\n+  bar (&global[500], &global[10]);\n+  bar (&global[0], &global[10000]);\n+\n+  /* Stack variable.  */\n+  char stack[10000];\n+  bar (&stack[0], &stack[100]);\n+  bar (&stack[1000], &stack[9000]);\n+  bar (&stack[500], &stack[10]);\n+\n+  return 0;\n+}"}, {"sha": "5cbcda92503b8ad8afbfded74252bda2bb237c5a", "filename": "gcc/testsuite/c-c++-common/asan/pointer-subtract-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-3.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target pthread_h } } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1:halt_on_error=1\" } */\n+/* { dg-options \"-fsanitize=address,pointer-subtract\" } */\n+/* { dg-additional-options \"-pthread\" { target pthread } } */\n+\n+#include <unistd.h>\n+#include <pthread.h>\n+\n+char *pointers[2];\n+pthread_barrier_t bar;\n+\n+void *\n+thread_main (void *n)\n+{\n+  char local;\n+\n+  __UINTPTR_TYPE__ id = (__UINTPTR_TYPE__) n;\n+  pointers[id] = &local;\n+  pthread_barrier_wait (&bar);\n+  pthread_barrier_wait (&bar);\n+\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  pthread_t threads[2];\n+  pthread_barrier_init (&bar, NULL, 3);\n+  pthread_create (&threads[0], NULL, thread_main, (void *) 0);\n+  pthread_create (&threads[1], NULL, thread_main, (void *) 1);\n+  pthread_barrier_wait (&bar);\n+\n+  /* This case is not handled yet.  */\n+  volatile __PTRDIFF_TYPE__ r = pointers[0] - pointers[1];\n+\n+  pthread_barrier_wait (&bar);\n+  pthread_join (threads[0], NULL);\n+  pthread_join (threads[1], NULL);\n+  pthread_barrier_destroy (&bar);\n+\n+  return 0;\n+}"}, {"sha": "820f0aa64b02351d8192b30329f515050a641f30", "filename": "gcc/testsuite/c-c++-common/asan/pointer-subtract-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpointer-subtract-4.c?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target pthread_h } } */\n+/* { dg-shouldfail \"asan\" } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_invalid_pointer_pairs=1:halt_on_error=1\" } */\n+/* { dg-options \"-fsanitize=address,pointer-subtract\" } */\n+/* { dg-additional-options \"-pthread\" { target pthread } } */\n+\n+#include <unistd.h>\n+#include <pthread.h>\n+\n+char *pointer;\n+pthread_barrier_t bar;\n+\n+void *\n+thread_main (void *n)\n+{\n+  char local;\n+  (void) n;\n+  pointer = &local;\n+  pthread_barrier_wait (&bar);\n+  pthread_barrier_wait (&bar);\n+\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  pthread_t thread;\n+  pthread_barrier_init (&bar, NULL, 2);\n+  pthread_create (&thread, NULL, thread_main, NULL);\n+  pthread_barrier_wait (&bar);\n+\n+  char local;\n+  char *parent_pointer = &local;\n+\n+  /* { dg-output \"ERROR: AddressSanitizer: invalid-pointer-pair\" } */\n+  volatile __PTRDIFF_TYPE__ r = parent_pointer - pointer;\n+  pthread_barrier_wait (&bar);\n+  pthread_join (thread, NULL);\n+  pthread_barrier_destroy (&bar);\n+\n+  return 0;\n+}"}, {"sha": "e5cad19bb5e3da859e162cec9a46ef0a32017bee", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -1,3 +1,12 @@\n+2017-12-05  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* asan/asan_descriptions.cc: Cherry-pick upstream r319668.\n+\t* asan/asan_descriptions.h: Likewise.\n+\t* asan/asan_report.cc: Likewise.\n+\t* asan/asan_thread.cc: Likewise.\n+\t* asan/asan_thread.h: Likewise.\n+\n 2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* acinclude.m4: Add enable.m4 and cet.m4."}, {"sha": "c856a6537423ff9e325b0e9e79109faff01d7fc3", "filename": "libsanitizer/asan/asan_descriptions.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_descriptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_descriptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_descriptions.cc?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -333,6 +333,26 @@ void GlobalAddressDescription::Print(const char *bug_type) const {\n   }\n }\n \n+bool GlobalAddressDescription::PointsInsideTheSameVariable(\n+    const GlobalAddressDescription &other) const {\n+  if (size == 0 || other.size == 0) return false;\n+\n+  for (uptr i = 0; i < size; i++) {\n+    const __asan_global &a = globals[i];\n+    for (uptr j = 0; j < other.size; j++) {\n+      const __asan_global &b = other.globals[j];\n+      if (a.beg == b.beg &&\n+          a.beg <= addr &&\n+          b.beg <= other.addr &&\n+          (addr + access_size) < (a.beg + a.size) &&\n+          (other.addr + other.access_size) < (b.beg + b.size))\n+        return true;\n+    }\n+  }\n+\n+  return false;\n+}\n+\n void StackAddressDescription::Print() const {\n   Decorator d;\n   char tname[128];"}, {"sha": "12d9ac5f70be2f8a3076e7a1260cae94cc12cf1c", "filename": "libsanitizer/asan/asan_descriptions.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_descriptions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_descriptions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_descriptions.h?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -143,6 +143,10 @@ struct GlobalAddressDescription {\n   u8 size;\n \n   void Print(const char *bug_type = \"\") const;\n+\n+  // Returns true when this descriptions points inside the same global variable\n+  // as other. Descriptions can have different address within the variable\n+  bool PointsInsideTheSameVariable(const GlobalAddressDescription &other) const;\n };\n \n bool GetGlobalAddressInformation(uptr addr, uptr access_size,"}, {"sha": "261ec1aece5dc544f5ec67f923b1edd126de6bd2", "filename": "libsanitizer/asan/asan_report.cc", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_report.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_report.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_report.cc?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -295,17 +295,58 @@ static NOINLINE void ReportInvalidPointerPair(uptr pc, uptr bp, uptr sp,\n   in_report.ReportError(error);\n }\n \n+static bool IsInvalidPointerPair(uptr a1, uptr a2) {\n+  if (a1 == a2)\n+    return false;\n+\n+  // 256B in shadow memory can be iterated quite fast\n+  static const uptr kMaxOffset = 2048;\n+\n+  uptr left = a1 < a2 ? a1 : a2;\n+  uptr right = a1 < a2 ? a2 : a1;\n+  uptr offset = right - left;\n+  if (offset <= kMaxOffset)\n+    return __asan_region_is_poisoned(left, offset);\n+\n+  AsanThread *t = GetCurrentThread();\n+\n+  // check whether left is a stack memory pointer\n+  if (uptr shadow_offset1 = t->GetStackVariableShadowStart(left)) {\n+    uptr shadow_offset2 = t->GetStackVariableShadowStart(right);\n+    return shadow_offset2 == 0 || shadow_offset1 != shadow_offset2;\n+  }\n+\n+  // check whether left is a heap memory address\n+  HeapAddressDescription hdesc1, hdesc2;\n+  if (GetHeapAddressInformation(left, 0, &hdesc1) &&\n+      hdesc1.chunk_access.access_type == kAccessTypeInside)\n+    return !GetHeapAddressInformation(right, 0, &hdesc2) ||\n+        hdesc2.chunk_access.access_type != kAccessTypeInside ||\n+        hdesc1.chunk_access.chunk_begin != hdesc2.chunk_access.chunk_begin;\n+\n+  // check whether left is an address of a global variable\n+  GlobalAddressDescription gdesc1, gdesc2;\n+  if (GetGlobalAddressInformation(left, 0, &gdesc1))\n+    return !GetGlobalAddressInformation(right - 1, 0, &gdesc2) ||\n+        !gdesc1.PointsInsideTheSameVariable(gdesc2);\n+\n+  if (t->GetStackVariableShadowStart(right) ||\n+      GetHeapAddressInformation(right, 0, &hdesc2) ||\n+      GetGlobalAddressInformation(right - 1, 0, &gdesc2))\n+    return true;\n+\n+  // At this point we know nothing about both a1 and a2 addresses.\n+  return false;\n+}\n+\n static INLINE void CheckForInvalidPointerPair(void *p1, void *p2) {\n   if (!flags()->detect_invalid_pointer_pairs) return;\n   uptr a1 = reinterpret_cast<uptr>(p1);\n   uptr a2 = reinterpret_cast<uptr>(p2);\n-  AsanChunkView chunk1 = FindHeapChunkByAddress(a1);\n-  AsanChunkView chunk2 = FindHeapChunkByAddress(a2);\n-  bool valid1 = chunk1.IsAllocated();\n-  bool valid2 = chunk2.IsAllocated();\n-  if (!valid1 || !valid2 || !chunk1.Eq(chunk2)) {\n+\n+  if (IsInvalidPointerPair(a1, a2)) {\n     GET_CALLER_PC_BP_SP;\n-    return ReportInvalidPointerPair(pc, bp, sp, a1, a2);\n+    ReportInvalidPointerPair(pc, bp, sp, a1, a2);\n   }\n }\n // ----------------------- Mac-specific reports ----------------- {{{1"}, {"sha": "f817a10db272e2ea15483a79c7c35a4057f59586", "filename": "libsanitizer/asan/asan_thread.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_thread.cc?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -315,7 +315,7 @@ bool AsanThread::GetStackFrameAccessByAddr(uptr addr,\n     access->frame_descr = (const char *)((uptr*)bottom)[1];\n     return true;\n   }\n-  uptr aligned_addr = addr & ~(SANITIZER_WORDSIZE/8 - 1);  // align addr.\n+  uptr aligned_addr = RoundDownTo(addr, SANITIZER_WORDSIZE / 8);  // align addr.\n   uptr mem_ptr = RoundDownTo(aligned_addr, SHADOW_GRANULARITY);\n   u8 *shadow_ptr = (u8*)MemToShadow(aligned_addr);\n   u8 *shadow_bottom = (u8*)MemToShadow(bottom);\n@@ -344,6 +344,29 @@ bool AsanThread::GetStackFrameAccessByAddr(uptr addr,\n   return true;\n }\n \n+uptr AsanThread::GetStackVariableShadowStart(uptr addr) {\n+  uptr bottom = 0;\n+  if (AddrIsInStack(addr)) {\n+    bottom = stack_bottom();\n+  } else if (has_fake_stack()) {\n+    bottom = fake_stack()->AddrIsInFakeStack(addr);\n+    CHECK(bottom);\n+  } else\n+    return 0;\n+\n+  uptr aligned_addr = RoundDownTo(addr, SANITIZER_WORDSIZE / 8);  // align addr.\n+  u8 *shadow_ptr = (u8*)MemToShadow(aligned_addr);\n+  u8 *shadow_bottom = (u8*)MemToShadow(bottom);\n+\n+  while (shadow_ptr >= shadow_bottom &&\n+         (*shadow_ptr != kAsanStackLeftRedzoneMagic &&\n+          *shadow_ptr != kAsanStackMidRedzoneMagic &&\n+          *shadow_ptr != kAsanStackRightRedzoneMagic))\n+    shadow_ptr--;\n+\n+  return (uptr)shadow_ptr + 1;\n+}\n+\n bool AsanThread::AddrIsInStack(uptr addr) {\n   const auto bounds = GetStackBounds();\n   return addr >= bounds.bottom && addr < bounds.top;"}, {"sha": "187cb13e85b48ff109e5c8bd4787627d4efe018a", "filename": "libsanitizer/asan/asan_thread.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_thread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abad4cca62d3725175ccf628b74638fe43e043/libsanitizer%2Fasan%2Fasan_thread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_thread.h?ref=05abad4cca62d3725175ccf628b74638fe43e043", "patch": "@@ -88,6 +88,9 @@ class AsanThread {\n   };\n   bool GetStackFrameAccessByAddr(uptr addr, StackFrameAccess *access);\n \n+  // Returns a pointer to the start of the stack variable's shadow memory.\n+  uptr GetStackVariableShadowStart(uptr addr);\n+\n   bool AddrIsInStack(uptr addr);\n \n   void DeleteFakeStack(int tid) {"}]}