{"sha": "461e4145898e7bdf5b6a0aec280246c0046fe807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxZTQxNDU4OThlN2JkZjViNmEwYWVjMjgwMjQ2YzAwNDZmZTgwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-27T11:53:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-27T11:53:45Z"}, "message": "Move copysign folds to match.pd\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_copysign): Delete.\n\t(fold_builtin_2): Handle constant copysign arguments here.\n\t* match.pd: Add rules previously handled by fold_builtin_copysign.\n\nFrom-SVN: r229425", "tree": {"sha": "6f75e09968688d8fbd36aadce4aec1aef57f54dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f75e09968688d8fbd36aadce4aec1aef57f54dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/461e4145898e7bdf5b6a0aec280246c0046fe807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461e4145898e7bdf5b6a0aec280246c0046fe807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461e4145898e7bdf5b6a0aec280246c0046fe807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461e4145898e7bdf5b6a0aec280246c0046fe807/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f54dc834806d508cef6a77a24d9308fd54cf196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f54dc834806d508cef6a77a24d9308fd54cf196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f54dc834806d508cef6a77a24d9308fd54cf196"}], "stats": {"total": 67, "additions": 26, "deletions": 41}, "files": [{"sha": "7d27d0156ec4bf43d055fe10bb132a0eed463125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=461e4145898e7bdf5b6a0aec280246c0046fe807", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_copysign): Delete.\n+\t(fold_builtin_2): Handle constant copysign arguments here.\n+\t* match.pd: Add rules previously handled by fold_builtin_copysign.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_signbit): Delete."}, {"sha": "ed0030d40939de02dd8b31bacd0b4211b3c38671", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=461e4145898e7bdf5b6a0aec280246c0046fe807", "patch": "@@ -7781,46 +7781,6 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n   return NULL_TREE;\n }\n \n-/* Fold function call to builtin copysign, copysignf or copysignl with\n-   arguments ARG1 and ARG2.  Return NULL_TREE if no simplification can\n-   be made.  */\n-\n-static tree\n-fold_builtin_copysign (location_t loc, tree arg1, tree arg2, tree type)\n-{\n-  if (!validate_arg (arg1, REAL_TYPE)\n-      || !validate_arg (arg2, REAL_TYPE))\n-    return NULL_TREE;\n-\n-  /* copysign(X,X) is X.  */\n-  if (operand_equal_p (arg1, arg2, 0))\n-    return fold_convert_loc (loc, type, arg1);\n-\n-  /* If ARG1 and ARG2 are compile-time constants, determine the result.  */\n-  if (TREE_CODE (arg1) == REAL_CST\n-      && TREE_CODE (arg2) == REAL_CST\n-      && !TREE_OVERFLOW (arg1)\n-      && !TREE_OVERFLOW (arg2))\n-    {\n-      REAL_VALUE_TYPE c1, c2;\n-\n-      c1 = TREE_REAL_CST (arg1);\n-      c2 = TREE_REAL_CST (arg2);\n-      /* c1.sign := c2.sign.  */\n-      real_copysign (&c1, &c2);\n-      return build_real (type, c1);\n-    }\n-\n-  /* copysign(X, Y) is fabs(X) when Y is always non-negative.\n-     Remember to evaluate Y for side-effects.  */\n-  if (tree_expr_nonnegative_p (arg2))\n-    return omit_one_operand_loc (loc, type,\n-\t\t\t     fold_build1_loc (loc, ABS_EXPR, type, arg1),\n-\t\t\t     arg2);\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold a call to builtin isascii with argument ARG.  */\n \n static tree\n@@ -9278,7 +9238,16 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1)\n       break;\n \n     CASE_FLT_FN (BUILT_IN_COPYSIGN):\n-      return fold_builtin_copysign (loc, arg0, arg1, type);\n+      if (TREE_CODE (arg0) == REAL_CST\n+\t  && TREE_CODE (arg1) == REAL_CST\n+\t  && !TREE_OVERFLOW (arg0)\n+\t  && !TREE_OVERFLOW (arg1))\n+\t{\n+\t  REAL_VALUE_TYPE c1 = TREE_REAL_CST (arg0);\n+\t  real_copysign (&c1, TREE_REAL_CST_PTR (arg1));\n+\t  return build_real (type, c1);\n+\t}\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_FMIN):\n       return fold_builtin_fmin_fmax (loc, arg0, arg1, type, /*max=*/false);"}, {"sha": "ca393e8f3ce4baa6f3944572e5a9c671725859b7", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461e4145898e7bdf5b6a0aec280246c0046fe807/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=461e4145898e7bdf5b6a0aec280246c0046fe807", "patch": "@@ -2559,6 +2559,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (POW real_onep@0 @1)\n  @0)\n \n+(simplify\n+ /* copysign(x,x) -> x.  */\n+ (COPYSIGN @0 @0)\n+ @0)\n+\n+(simplify\n+ /* copysign(x,y) -> fabs(x) if y is nonnegative.  */\n+ (COPYSIGN @0 tree_expr_nonnegative_p@1)\n+ (abs @0))\n+\n /* Canonicalization of sequences of math builtins.  These rules represent\n    IL simplifications but are not necessarily optimizations.\n "}]}