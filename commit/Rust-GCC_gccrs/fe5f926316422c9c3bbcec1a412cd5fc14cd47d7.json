{"sha": "fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1ZjkyNjMxNjQyMmM5YzNiYmNlYzFhNDEyY2Q1ZmMxNGNkNDdkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-11-09T09:19:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-11-09T09:19:40Z"}, "message": "i386: Handle address spaces in movabs patterns\n\n\t* config/i386/i386.md (*movabs<mode>_1): Print the full memory rtx.\n\t(*movabs<mode>_2): Likewise.\n\nFrom-SVN: r230001", "tree": {"sha": "39eab1c8a01ec718f3736762e6d98e7bfd514dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39eab1c8a01ec718f3736762e6d98e7bfd514dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7/comments", "author": null, "committer": null, "parents": [{"sha": "f736b911e6fb32807028ef1624fd73dfca33d699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f736b911e6fb32807028ef1624fd73dfca33d699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f736b911e6fb32807028ef1624fd73dfca33d699"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "15b3159af5ab2a30e0f3715dcf9993a82c0b091b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "patch": "@@ -1,5 +1,8 @@\n 2015-11-09  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/i386.md (*movabs<mode>_1): Print the full memory rtx.\n+\t(*movabs<mode>_2): Likewise.\n+\n \t* dwarf2out.c (modified_type_die): Pass the address space number\n \tthrough TARGET_ADDR_SPACE_DEBUG to produce the dwarf address class.\n \t* target.def (TARGET_ADDR_SPACE_DEBUG): New."}, {"sha": "ccb672d84914d4c1431fc83f4bd082d5531473cd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5f926316422c9c3bbcec1a412cd5fc14cd47d7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fe5f926316422c9c3bbcec1a412cd5fc14cd47d7", "patch": "@@ -2595,9 +2595,19 @@\n   [(set (mem:SWI1248x (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r\"))\n \t(match_operand:SWI1248x 1 \"nonmemory_operand\" \"a,r<i>\"))]\n   \"TARGET_LP64 && ix86_check_movabs (insn, 0)\"\n-  \"@\n-   movabs{<imodesuffix>}\\t{%1, %P0|[%P0], %1}\n-   mov{<imodesuffix>}\\t{%1, %a0|<iptrsize> PTR %a0, %1}\"\n+{\n+  /* Recover the full memory rtx.  */\n+  operands[0] = SET_DEST (PATTERN (insn));\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"movabs{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    case 1:\n+      return \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0,*\")\n    (set_attr \"length_address\" \"8,0\")\n@@ -2609,9 +2619,19 @@\n   [(set (match_operand:SWI1248x 0 \"register_operand\" \"=a,r\")\n         (mem:SWI1248x (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n   \"TARGET_LP64 && ix86_check_movabs (insn, 1)\"\n-  \"@\n-   movabs{<imodesuffix>}\\t{%P1, %0|%0, [%P1]}\n-   mov{<imodesuffix>}\\t{%a1, %0|%0, <iptrsize> PTR %a1}\"\n+{\n+  /* Recover the full memory rtx.  */\n+  operands[1] = SET_SRC (PATTERN (insn));\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"movabs{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    case 1:\n+      return \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0,*\")\n    (set_attr \"length_address\" \"8,0\")"}]}