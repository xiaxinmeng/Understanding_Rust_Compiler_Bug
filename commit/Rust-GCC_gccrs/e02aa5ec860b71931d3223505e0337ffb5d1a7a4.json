{"sha": "e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyYWE1ZWM4NjBiNzE5MzFkMzIyMzUwNWUwMzM3ZmZiNWQxYTdhNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2008-08-25T17:02:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2008-08-25T17:02:42Z"}, "message": "dwarf2out.c (def_cfa_1): Don't scale by DWARF_CIE_DATA_ALIGNMENT.\n\n        * dwarf2out.c (def_cfa_1): Don't scale by DWARF_CIE_DATA_ALIGNMENT.\n        (regsave): Likewise.\n        (lookup_cfa_1): Don't rescale by DWARF_CIE_DATA_ALIGNMENT.\n        (output_cfi_directive): Likewise.\n        (div_data_align): New.\n        (output_cfi): Use it.\n\nFrom-SVN: r139565", "tree": {"sha": "3a5ed303229610ec0b95412bebd8b6fc803b1ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5ed303229610ec0b95412bebd8b6fc803b1ca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02aa5ec860b71931d3223505e0337ffb5d1a7a4/comments", "author": null, "committer": null, "parents": [{"sha": "d97e6aca01c5d9e6b41fe5e2e4c551e9777162ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97e6aca01c5d9e6b41fe5e2e4c551e9777162ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97e6aca01c5d9e6b41fe5e2e4c551e9777162ea"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "0a8e2206d122ae8f2d246b4268c9f69e22fcd2f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02aa5ec860b71931d3223505e0337ffb5d1a7a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02aa5ec860b71931d3223505e0337ffb5d1a7a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "patch": "@@ -1,3 +1,12 @@\n+2008-08-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (def_cfa_1): Don't scale by DWARF_CIE_DATA_ALIGNMENT.\n+\t(regsave): Likewise.\n+\t(lookup_cfa_1): Don't rescale by DWARF_CIE_DATA_ALIGNMENT.\n+\t(output_cfi_directive): Likewise.\n+\t(div_data_align): New.\n+\t(output_cfi): Use it.\n+\n 2008-08-24  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config.gcc (mips64*-*-linux*): Handle mips64octeon*-*-linux*."}, {"sha": "5e29af8900810829867d3b00c77552dcc533c619", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 49, "deletions": 58, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02aa5ec860b71931d3223505e0337ffb5d1a7a4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02aa5ec860b71931d3223505e0337ffb5d1a7a4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e02aa5ec860b71931d3223505e0337ffb5d1a7a4", "patch": "@@ -776,23 +776,16 @@ lookup_cfa_1 (dw_cfi_ref cfi, dw_cfa_location *loc)\n   switch (cfi->dw_cfi_opc)\n     {\n     case DW_CFA_def_cfa_offset:\n-      loc->offset = cfi->dw_cfi_oprnd1.dw_cfi_offset;\n-      break;\n     case DW_CFA_def_cfa_offset_sf:\n-      loc->offset\n-\t= cfi->dw_cfi_oprnd1.dw_cfi_offset * DWARF_CIE_DATA_ALIGNMENT;\n+      loc->offset = cfi->dw_cfi_oprnd1.dw_cfi_offset;\n       break;\n     case DW_CFA_def_cfa_register:\n       loc->reg = cfi->dw_cfi_oprnd1.dw_cfi_reg_num;\n       break;\n     case DW_CFA_def_cfa:\n-      loc->reg = cfi->dw_cfi_oprnd1.dw_cfi_reg_num;\n-      loc->offset = cfi->dw_cfi_oprnd2.dw_cfi_offset;\n-      break;\n     case DW_CFA_def_cfa_sf:\n       loc->reg = cfi->dw_cfi_oprnd1.dw_cfi_reg_num;\n-      loc->offset\n-\t= cfi->dw_cfi_oprnd2.dw_cfi_offset * DWARF_CIE_DATA_ALIGNMENT;\n+      loc->offset = cfi->dw_cfi_oprnd2.dw_cfi_offset;\n       break;\n     case DW_CFA_def_cfa_expression:\n       get_cfa_from_loc_descr (loc, cfi->dw_cfi_oprnd1.dw_cfi_loc);\n@@ -891,20 +884,14 @@ def_cfa_1 (const char *label, dw_cfa_location *loc_p)\n   if (loc.reg == old_cfa.reg && !loc.indirect)\n     {\n       /* Construct a \"DW_CFA_def_cfa_offset <offset>\" instruction, indicating\n-\t the CFA register did not change but the offset did.  */\n+\t the CFA register did not change but the offset did.  The data \n+\t factoring for DW_CFA_def_cfa_offset_sf happens in output_cfi, or\n+\t in the assembler via the .cfi_def_cfa_offset directive.  */\n       if (loc.offset < 0)\n-\t{\n-\t  HOST_WIDE_INT f_offset = loc.offset / DWARF_CIE_DATA_ALIGNMENT;\n-\t  gcc_assert (f_offset * DWARF_CIE_DATA_ALIGNMENT == loc.offset);\n-\n-\t  cfi->dw_cfi_opc = DW_CFA_def_cfa_offset_sf;\n-\t  cfi->dw_cfi_oprnd1.dw_cfi_offset = f_offset;\n-\t}\n+\tcfi->dw_cfi_opc = DW_CFA_def_cfa_offset_sf;\n       else\n-\t{\n-\t  cfi->dw_cfi_opc = DW_CFA_def_cfa_offset;\n-\t  cfi->dw_cfi_oprnd1.dw_cfi_offset = loc.offset;\n-\t}\n+\tcfi->dw_cfi_opc = DW_CFA_def_cfa_offset;\n+      cfi->dw_cfi_oprnd1.dw_cfi_offset = loc.offset;\n     }\n \n #ifndef MIPS_DEBUGGING_INFO  /* SGI dbx thinks this means no offset.  */\n@@ -924,22 +911,15 @@ def_cfa_1 (const char *label, dw_cfa_location *loc_p)\n     {\n       /* Construct a \"DW_CFA_def_cfa <register> <offset>\" instruction,\n \t indicating the CFA register has changed to <register> with\n-\t the specified offset.  */\n+\t the specified offset.  The data factoring for DW_CFA_def_cfa_sf\n+\t happens in output_cfi, or in the assembler via the .cfi_def_cfa\n+\t directive.  */\n       if (loc.offset < 0)\n-\t{\n-\t  HOST_WIDE_INT f_offset = loc.offset / DWARF_CIE_DATA_ALIGNMENT;\n-\t  gcc_assert (f_offset * DWARF_CIE_DATA_ALIGNMENT == loc.offset);\n-\n-\t  cfi->dw_cfi_opc = DW_CFA_def_cfa_sf;\n-\t  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = loc.reg;\n-\t  cfi->dw_cfi_oprnd2.dw_cfi_offset = f_offset;\n-\t}\n+\tcfi->dw_cfi_opc = DW_CFA_def_cfa_sf;\n       else\n-\t{\n-\t  cfi->dw_cfi_opc = DW_CFA_def_cfa;\n-\t  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = loc.reg;\n-\t  cfi->dw_cfi_oprnd2.dw_cfi_offset = loc.offset;\n-\t}\n+\tcfi->dw_cfi_opc = DW_CFA_def_cfa;\n+      cfi->dw_cfi_oprnd1.dw_cfi_reg_num = loc.reg;\n+      cfi->dw_cfi_oprnd2.dw_cfi_offset = loc.offset;\n     }\n   else\n     {\n@@ -982,28 +962,12 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT\n     }\n   else if (sreg == INVALID_REGNUM)\n     {\n-      if (reg & ~0x3f)\n-\t/* The register number won't fit in 6 bits, so we have to use\n-\t   the long form.  */\n+      if (offset < 0)\n+\tcfi->dw_cfi_opc = DW_CFA_offset_extended_sf;\n+      else if (reg & ~0x3f)\n \tcfi->dw_cfi_opc = DW_CFA_offset_extended;\n       else\n \tcfi->dw_cfi_opc = DW_CFA_offset;\n-\n-#ifdef ENABLE_CHECKING\n-      {\n-\t/* If we get an offset that is not a multiple of\n-\t   DWARF_CIE_DATA_ALIGNMENT, there is either a bug in the\n-\t   definition of DWARF_CIE_DATA_ALIGNMENT, or a bug in the machine\n-\t   description.  */\n-\tHOST_WIDE_INT check_offset = offset / DWARF_CIE_DATA_ALIGNMENT;\n-\n-\tgcc_assert (check_offset * DWARF_CIE_DATA_ALIGNMENT == offset);\n-      }\n-#endif\n-      offset /= DWARF_CIE_DATA_ALIGNMENT;\n-      if (offset < 0)\n-\tcfi->dw_cfi_opc = DW_CFA_offset_extended_sf;\n-\n       cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n     }\n   else if (sreg == reg)\n@@ -2546,12 +2510,24 @@ switch_to_eh_frame_section (void)\n     }\n }\n \n+/* Divide OFF by DWARF_CIE_DATA_ALIGNMENT, asserting no remainder.  */\n+\n+static HOST_WIDE_INT\n+div_data_align (HOST_WIDE_INT off)\n+{\n+  HOST_WIDE_INT r = off / DWARF_CIE_DATA_ALIGNMENT;\n+  gcc_assert (r * DWARF_CIE_DATA_ALIGNMENT == off);\n+  return r;\n+}\n+\n /* Output a Call Frame Information opcode and its operand(s).  */\n \n static void\n output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n {\n   unsigned long r;\n+  HOST_WIDE_INT off;\n+\n   if (cfi->dw_cfi_opc == DW_CFA_advance_loc)\n     dw2_asm_output_data (1, (cfi->dw_cfi_opc\n \t\t\t     | (cfi->dw_cfi_oprnd1.dw_cfi_offset & 0x3f)),\n@@ -2563,7 +2539,8 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n       dw2_asm_output_data (1, (cfi->dw_cfi_opc | (r & 0x3f)),\n \t\t\t   \"DW_CFA_offset, column 0x%lx\", r);\n-      dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n+      off = div_data_align (cfi->dw_cfi_oprnd2.dw_cfi_offset);\n+      dw2_asm_output_data_uleb128 (off, NULL);\n     }\n   else if (cfi->dw_cfi_opc == DW_CFA_restore)\n     {\n@@ -2615,17 +2592,30 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \t  break;\n \n \tcase DW_CFA_offset_extended:\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n+\t  off = div_data_align (cfi->dw_cfi_oprnd2.dw_cfi_offset);\n+\t  dw2_asm_output_data_uleb128 (off, NULL);\n+\t  break;\n+\n \tcase DW_CFA_def_cfa:\n \t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n \t  dw2_asm_output_data_uleb128 (r, NULL);\n \t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n \t  break;\n \n \tcase DW_CFA_offset_extended_sf:\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n+\t  off = div_data_align (cfi->dw_cfi_oprnd2.dw_cfi_offset);\n+\t  dw2_asm_output_data_sleb128 (off, NULL);\n+\t  break;\n+\n \tcase DW_CFA_def_cfa_sf:\n \t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n \t  dw2_asm_output_data_uleb128 (r, NULL);\n-\t  dw2_asm_output_data_sleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n+\t  off = div_data_align (cfi->dw_cfi_oprnd2.dw_cfi_offset);\n+\t  dw2_asm_output_data_sleb128 (off, NULL);\n \t  break;\n \n \tcase DW_CFA_restore_extended:\n@@ -2649,7 +2639,8 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset_sf:\n-\t  dw2_asm_output_data_sleb128 (cfi->dw_cfi_oprnd1.dw_cfi_offset, NULL);\n+\t  off = div_data_align (cfi->dw_cfi_oprnd1.dw_cfi_offset);\n+\t  dw2_asm_output_data_sleb128 (off, NULL);\n \t  break;\n \n \tcase DW_CFA_GNU_window_save:\n@@ -2695,7 +2686,7 @@ output_cfi_directive (dw_cfi_ref cfi)\n     case DW_CFA_offset_extended_sf:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 0);\n       fprintf (asm_out_file, \"\\t.cfi_offset %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n-\t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset * DWARF_CIE_DATA_ALIGNMENT);\n+\t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       break;\n \n     case DW_CFA_restore:"}]}