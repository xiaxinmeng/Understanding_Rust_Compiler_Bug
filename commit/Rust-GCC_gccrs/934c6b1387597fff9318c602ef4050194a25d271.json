{"sha": "934c6b1387597fff9318c602ef4050194a25d271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0YzZiMTM4NzU5N2ZmZjkzMThjNjAyZWY0MDUwMTk0YTI1ZDI3MQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@cygnus.com", "date": "1996-03-09T19:44:47Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-03-09T19:44:47Z"}, "message": "85th Cygnus<->FSF quick merge\n\nFrom-SVN: r11505", "tree": {"sha": "8346d1c9d3825e57badc5c5013e5fdeb1add300d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8346d1c9d3825e57badc5c5013e5fdeb1add300d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934c6b1387597fff9318c602ef4050194a25d271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934c6b1387597fff9318c602ef4050194a25d271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934c6b1387597fff9318c602ef4050194a25d271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934c6b1387597fff9318c602ef4050194a25d271/comments", "author": null, "committer": null, "parents": [{"sha": "2a888d4cd0492cb7f0e00bee497da7e9a01bf439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a888d4cd0492cb7f0e00bee497da7e9a01bf439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a888d4cd0492cb7f0e00bee497da7e9a01bf439"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "7e7006fdb0cbc08e5c8c08ee3e4e11df18151aec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=934c6b1387597fff9318c602ef4050194a25d271", "patch": "@@ -1,3 +1,18 @@\n+Fri Mar  8 11:47:26 1996  Mike Stump  <mrs@cygnus.com>\n+\n+\t* tree.c (unsave_expr): Don't unsave, UNSAVE_EXPRs.\n+\n+Fri Mar  8 11:29:06 1996  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (cp_finish_decl): The exception regions have to be\n+\tnested, not overlapping.  We start the exception region for a\n+\tdecl, after it has been fully built, and all temporaries for it\n+\thave been cleaned up.\n+\n+Thu Mar  7 17:46:06 1996  Mike Stump  <mrs@cygnus.com>\n+\n+\t* tree.c (vec_binfo_member): Don't core dump if we have no bases.\n+\n Thu Mar  7 14:11:49 1996  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tree.def: Add RETURN_INIT."}, {"sha": "602ddc2098ed523cb4acf6734f186431253d1f5d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=934c6b1387597fff9318c602ef4050194a25d271", "patch": "@@ -6769,7 +6769,15 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t  && cleanup == NULL_TREE\n \t\t  && DECL_NAME (decl))\n \t\tTREE_USED (decl) = 0;\n+\t    }\n+\t  /* Cleanup any temporaries needed for the initial value.  */\n+\t  expand_cleanups_to (old_cleanups);\n+\t  pop_temp_slots ();\n+\t  pop_temp_slots ();\n+\t  target_temp_slot_level = old_temp_level;\n \n+\t  if (DECL_SIZE (decl) && type != error_mark_node)\n+\t    {\n \t      /* Store the cleanup, if there was one.  */\n \t      if (cleanup)\n \t\t{\n@@ -6778,11 +6786,6 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t\t\t      decl);\n \t\t}\n \t    }\n-\t  /* Cleanup any temporaries needed for the initial value.  */\n-\t  expand_cleanups_to (old_cleanups);\n-\t  pop_temp_slots ();\n-\t  pop_temp_slots ();\n-\t  target_temp_slot_level = old_temp_level;\n \t}\n     finish_end0:\n "}, {"sha": "65c8f8af1b35ba1a5f2c5bb552aac374a29d361e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934c6b1387597fff9318c602ef4050194a25d271/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=934c6b1387597fff9318c602ef4050194a25d271", "patch": "@@ -1761,12 +1761,19 @@ break_out_target_exprs (t)\n   return mapcar (t, bot_manip);\n }\n \n+/* Arrange for an expression to be expanded multiple independent\n+   times.  This is useful for cleanup actions, as the backend can\n+   expand them multiple times in different places.  */\n tree\n unsave_expr (expr)\n      tree expr;\n {\n   tree t;\n \n+  /* If this is already protected, no sense in protecting it again.  */\n+  if (TREE_CODE (expr) == UNSAVE_EXPR)\n+    return expr;\n+\n   t = build1 (UNSAVE_EXPR, TREE_TYPE (expr), expr);\n   TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (expr);\n   return t;\n@@ -1984,16 +1991,19 @@ can_free (obstack, t)\n }\n \n /* Return first vector element whose BINFO_TYPE is ELEM.\n-   Return 0 if ELEM is not in VEC.  */\n+   Return 0 if ELEM is not in VEC.  VEC may be NULL_TREE.  */\n \n tree\n vec_binfo_member (elem, vec)\n      tree elem, vec;\n {\n   int i;\n-  for (i = 0; i < TREE_VEC_LENGTH (vec); ++i)\n-    if (elem == BINFO_TYPE (TREE_VEC_ELT (vec, i)))\n-      return TREE_VEC_ELT (vec, i);\n+\n+  if (vec)\n+    for (i = 0; i < TREE_VEC_LENGTH (vec); ++i)\n+      if (elem == BINFO_TYPE (TREE_VEC_ELT (vec, i)))\n+\treturn TREE_VEC_ELT (vec, i);\n+\n   return NULL_TREE;\n }\n "}]}