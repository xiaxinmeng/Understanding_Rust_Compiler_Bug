{"sha": "bd3d919b58466a9837e423c1255b88215f89bc9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzZDkxOWI1ODQ2NmE5ODM3ZTQyM2MxMjU1Yjg4MjE1Zjg5YmM5ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-30T09:22:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-30T12:00:58Z"}, "message": "tree-optimization/99824 - avoid excessive integer type precision in VN\n\nVN sometimes builds new integer types to handle accesss where precision\nof the access type does not match the access size.  The way\nao_ref_init_from_vn_reference is computing the access size ignores\nthe access type in case the ref operands have an outermost\nCOMPONENT_REF which, in case it is an array for example, can be\nway larger than the access size.  This can cause us to try\nbuilding an integer type with precision larger than WIDE_INT_MAX_PRECISION\neventually leading to memory corruption.\n\nThe following adjusts ao_ref_init_from_vn_reference to only lower\naccess sizes via the outermost COMPONENT_REF but otherwise honor\nthe access size as specified by the access type.\n\nIt also places an assert in integer type building that we remain\nin the limits of WIDE_INT_MAX_PRECISION.  I chose the shared code\nwhere we set TYPE_MIN/MAX_VALUE because that will immediately\ncross the wide_ints capacity otherwise.\n\n2021-03-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99824\n\t* stor-layout.c (set_min_and_max_values_for_integral_type):\n\tAssert the precision is within the bounds of\n\tWIDE_INT_MAX_PRECISION.\n\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Use\n\tthe outermost component ref only to lower the access size\n\tand initialize that from the access type.\n\n\t* gcc.dg/torture/pr99824.c: New testcase.", "tree": {"sha": "486aa79830ac230854d7abba2a954efa4849f907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486aa79830ac230854d7abba2a954efa4849f907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd3d919b58466a9837e423c1255b88215f89bc9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d919b58466a9837e423c1255b88215f89bc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3d919b58466a9837e423c1255b88215f89bc9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d919b58466a9837e423c1255b88215f89bc9d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c79f054bf435051c95ee093c45a0f8c9de5b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c79f054bf435051c95ee093c45a0f8c9de5b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c79f054bf435051c95ee093c45a0f8c9de5b4e"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "94b8b21c7a8aff5eb5517cc86424317a4c5d4a1d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=bd3d919b58466a9837e423c1255b88215f89bc9d", "patch": "@@ -2838,6 +2838,8 @@ set_min_and_max_values_for_integral_type (tree type,\n   if (precision < 1)\n     return;\n \n+  gcc_assert (precision <= WIDE_INT_MAX_PRECISION);\n+\n   TYPE_MIN_VALUE (type)\n     = wide_int_to_tree (type, wi::min_value (precision, sgn));\n   TYPE_MAX_VALUE (type)"}, {"sha": "9022d4a4b8e7fae58b3fa15f49c0a1468af1e0e1", "filename": "gcc/testsuite/gcc.dg/torture/pr99824.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99824.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99824.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr99824.c?ref=bd3d919b58466a9837e423c1255b88215f89bc9d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+\n+unsigned int\n+strlenx(char *s)\n+{\n+  char *orig_s = s;\n+  for (; *s; ++s)\n+    ;\n+  return s - orig_s;\n+}\n+\n+struct i2c_adapter {\n+    char name[48];\n+};\n+\n+struct {\n+    int instance;\n+    struct i2c_adapter i2c_adap[];\n+} * init_cx18_i2c_cx;\n+\n+const struct i2c_adapter cx18_i2c_adap_template = {\"\"};\n+int init_cx18_i2c___trans_tmp_1;\n+\n+void\n+init_cx18_i2c()\n+{\n+  int i = 0;\n+  for (;; i++) {\n+      init_cx18_i2c_cx->i2c_adap[i] = cx18_i2c_adap_template;\n+      init_cx18_i2c___trans_tmp_1\n+\t= strlenx(init_cx18_i2c_cx->i2c_adap[i].name);\n+  }\n+}"}, {"sha": "0567a2e9ff588c72a5451b9955e9fc74a56949a7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d919b58466a9837e423c1255b88215f89bc9d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=bd3d919b58466a9837e423c1255b88215f89bc9d", "patch": "@@ -1002,22 +1002,26 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n   poly_offset_int size = -1;\n   tree size_tree = NULL_TREE;\n \n-  /* First get the final access size from just the outermost expression.  */\n+  machine_mode mode = TYPE_MODE (type);\n+  if (mode == BLKmode)\n+    size_tree = TYPE_SIZE (type);\n+  else\n+    size = GET_MODE_BITSIZE (mode);\n+  if (size_tree != NULL_TREE\n+      && poly_int_tree_p (size_tree))\n+    size = wi::to_poly_offset (size_tree);\n+\n+  /* Lower the final access size from the outermost expression.  */\n   op = &ops[0];\n+  size_tree = NULL_TREE;\n   if (op->opcode == COMPONENT_REF)\n     size_tree = DECL_SIZE (op->op0);\n   else if (op->opcode == BIT_FIELD_REF)\n     size_tree = op->op0;\n-  else\n-    {\n-      machine_mode mode = TYPE_MODE (type);\n-      if (mode == BLKmode)\n-\tsize_tree = TYPE_SIZE (type);\n-      else\n-\tsize = GET_MODE_BITSIZE (mode);\n-    }\n   if (size_tree != NULL_TREE\n-      && poly_int_tree_p (size_tree))\n+      && poly_int_tree_p (size_tree)\n+      && (!known_size_p (size)\n+\t  || known_lt (wi::to_poly_offset (size_tree), size)))\n     size = wi::to_poly_offset (size_tree);\n \n   /* Initially, maxsize is the same as the accessed element size."}]}