{"sha": "45d506995c103936a813742c700bc592a8c86a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkNTA2OTk1YzEwMzkzNmE4MTM3NDJjNzAwYmM1OTJhOGM4NmE1Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-17T17:44:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-17T17:44:09Z"}, "message": "stl_iterator.h (back_insert_iterator<>::operator= (typename _Container::value_type&&), [...]): Add.\n\n2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_iterator.h (back_insert_iterator<>::operator=\n\t(typename _Container::value_type&&), front_insert_iterator<>::\n\toperator=(typename _Container::value_type&&), insert_iterator<>::\n\toperator=(typename _Container::value_type&&)): Add.\n\n\t* include/bits/stl_iterator.h (insert_iterator<>::operator=\n\t(typename _Container::const_reference)): Fix typo in signature.\n\nFrom-SVN: r129413", "tree": {"sha": "544677612baf850b04629e50693e286238bdc5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/544677612baf850b04629e50693e286238bdc5da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45d506995c103936a813742c700bc592a8c86a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d506995c103936a813742c700bc592a8c86a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d506995c103936a813742c700bc592a8c86a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d506995c103936a813742c700bc592a8c86a53/comments", "author": null, "committer": null, "parents": [{"sha": "93511cb4e055790067031b8af32226d23f883269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93511cb4e055790067031b8af32226d23f883269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93511cb4e055790067031b8af32226d23f883269"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "05a2160290904aca80436d0f062810be78c47a5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d506995c103936a813742c700bc592a8c86a53/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d506995c103936a813742c700bc592a8c86a53/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=45d506995c103936a813742c700bc592a8c86a53", "patch": "@@ -1,3 +1,13 @@\n+2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_iterator.h (back_insert_iterator<>::operator=\n+\t(typename _Container::value_type&&), front_insert_iterator<>::\n+\toperator=(typename _Container::value_type&&), insert_iterator<>::\n+\toperator=(typename _Container::value_type&&)): Add.\n+\n+\t* include/bits/stl_iterator.h (insert_iterator<>::operator=\n+\t(typename _Container::const_reference)): Fix typo in signature.\n+\n 2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1_impl/array: Correct macro guarding cbegin, cend,"}, {"sha": "280f7028720707c4b99a7223ed2843d93647036d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d506995c103936a813742c700bc592a8c86a53/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d506995c103936a813742c700bc592a8c86a53/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=45d506995c103936a813742c700bc592a8c86a53", "patch": "@@ -68,6 +68,7 @@\n \n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -414,6 +415,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      back_insert_iterator&\n+      operator=(typename _Container::value_type&& __value)\n+      {\n+\tcontainer->push_back(std::move(__value));\n+\treturn *this;\n+      }\n+#endif\n+\n       /// Simply returns *this.\n       back_insert_iterator&\n       operator*()\n@@ -488,6 +498,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      front_insert_iterator&\n+      operator=(typename _Container::value_type&& __value)\n+      {\n+\tcontainer->push_front(std::move(__value));\n+\treturn *this;\n+      }\n+#endif\n+\n       /// Simply returns *this.\n       front_insert_iterator&\n       operator*()\n@@ -577,13 +596,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @endcode\n       */\n       insert_iterator&\n-      operator=(const typename _Container::const_reference __value)\n+      operator=(typename _Container::const_reference __value)\n       {\n \titer = container->insert(iter, __value);\n \t++iter;\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert_iterator&\n+      operator=(typename _Container::value_type&& __value)\n+      {\n+\titer = container->insert(iter, std::move(__value));\n+\t++iter;\n+\treturn *this;\n+      }\n+#endif\n+\n       /// Simply returns *this.\n       insert_iterator&\n       operator*()"}]}