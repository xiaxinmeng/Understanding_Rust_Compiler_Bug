{"sha": "60c176fb459c7780f9cb711e2427e41dca12a54a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjMTc2ZmI0NTljNzc4MGY5Y2I3MTFlMjQyN2U0MWRjYTEyYTU0YQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-01-19T22:56:04Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-01-19T22:56:04Z"}, "message": "re PR libstdc++/64584 (basic_regex::assign breaks *this if it throws regex_error)\n\n\tPR libstdc++/64584\n\tPR libstdc++/64585\n\t* include/bits/regex.h (basic_regex<>::basic_regex,\n\tbasic_regex<>::assign, basic_regex<>::imbue,\n\tbasic_regex<>::swap, basic_regex<>::mark_count): Drop NFA after\n\timbuing basic_regex; Make assign() transactional against exception.\n\t* include/bits/regex_compiler.h (__compile_nfa<>): Add back\n\t__compile_nfa SFINAE.\n\t* include/std/regex: Adjust include order to avoid __compile_nfa\n\tforward declaration.\n\t* testsuite/28_regex/basic_regex/assign/char/string.cc: New testcase.\n\t* testsuite/28_regex/basic_regex/imbue/string.cc: New testcase.\n\nFrom-SVN: r219865", "tree": {"sha": "2a1f4b55f298c9c15782b158f20da48a36995d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a1f4b55f298c9c15782b158f20da48a36995d76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c176fb459c7780f9cb711e2427e41dca12a54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c176fb459c7780f9cb711e2427e41dca12a54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c176fb459c7780f9cb711e2427e41dca12a54a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c176fb459c7780f9cb711e2427e41dca12a54a/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b151091dca19708ce7b51fcdf4fffd4b45a831c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b151091dca19708ce7b51fcdf4fffd4b45a831c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b151091dca19708ce7b51fcdf4fffd4b45a831c5"}], "stats": {"total": 192, "additions": 152, "deletions": 40}, "files": [{"sha": "371050230a77842aef50dc0689a5212d0db39ef0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -1,3 +1,18 @@\n+2015-01-19  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/64584\n+\tPR libstdc++/64585\n+\t* include/bits/regex.h (basic_regex<>::basic_regex,\n+\tbasic_regex<>::assign, basic_regex<>::imbue,\n+\tbasic_regex<>::swap, basic_regex<>::mark_count): Drop NFA after\n+\timbuing basic_regex; Make assign() transactional against exception.\n+\t* include/bits/regex_compiler.h (__compile_nfa<>): Add back\n+\t__compile_nfa SFINAE.\n+\t* include/std/regex: Adjust include order to avoid __compile_nfa\n+\tforward declaration.\n+\t* testsuite/28_regex/basic_regex/assign/char/string.cc: New testcase.\n+\t* testsuite/28_regex/basic_regex/imbue/string.cc: New testcase.\n+\n 2015-01-19  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "6de883a78596caf7d036af07b93b2d1edfee13a0", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -62,13 +62,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename, typename, typename, bool>\n     class _Executor;\n \n-  template<typename _TraitsT>\n-    inline std::shared_ptr<_NFA<_TraitsT>>\n-    __compile_nfa(const typename _TraitsT::char_type* __first,\n-\t\t  const typename _TraitsT::char_type* __last,\n-\t\t  const typename _TraitsT::locale_type& __loc,\n-\t\t  regex_constants::syntax_option_type __flags);\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n \n@@ -433,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * character sequence.\n        */\n       basic_regex()\n-      : _M_flags(ECMAScript), _M_loc(), _M_original_str(), _M_automaton(nullptr)\n+      : _M_flags(ECMAScript), _M_loc(), _M_automaton(nullptr)\n       { }\n \n       /**\n@@ -497,7 +490,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tbasic_regex(const std::basic_string<_Ch_type, _Ch_traits,\n \t\t\t\t\t    _Ch_alloc>& __s,\n \t\t    flag_type __f = ECMAScript)\n-\t: basic_regex(__s.begin(), __s.end(), __f)\n+\t: basic_regex(__s.data(), __s.data() + __s.size(), __f)\n \t{ }\n \n       /**\n@@ -516,14 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       template<typename _FwdIter>\n \tbasic_regex(_FwdIter __first, _FwdIter __last,\n \t\t    flag_type __f = ECMAScript)\n-\t: _M_flags(__f),\n-\t  _M_loc(),\n-\t  _M_original_str(__first, __last),\n-\t  _M_automaton(__detail::__compile_nfa<_Rx_traits>(\n-\t    _M_original_str.c_str(),\n-\t    _M_original_str.c_str() + _M_original_str.size(),\n-\t    _M_loc,\n-\t    _M_flags))\n+\t: basic_regex(std::move(__first), std::move(__last), locale_type(), __f)\n \t{ }\n \n       /**\n@@ -657,15 +643,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tassign(const basic_string<_Ch_type, _Ch_traits, _Alloc>& __s,\n \t       flag_type __flags = ECMAScript)\n \t{\n-\t  _M_flags = __flags;\n-\t  _M_original_str.assign(__s.begin(), __s.end());\n-\t  auto __p = _M_original_str.c_str();\n-\t  _M_automaton = __detail::__compile_nfa<_Rx_traits>(\n-\t    __p,\n-\t    __p + _M_original_str.size(),\n-\t    _M_loc,\n-\t    _M_flags);\n-\t  return *this;\n+\t  return this->assign(basic_regex(__s.data(), __s.data() + __s.size(),\n+\t\t\t\t\t  _M_loc, _M_flags));\n \t}\n \n       /**\n@@ -709,7 +688,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       unsigned int\n       mark_count() const\n-      { return _M_automaton->_M_sub_count() - 1; }\n+      {\n+\tif (_M_automaton)\n+\t  return _M_automaton->_M_sub_count() - 1;\n+\treturn 0;\n+      }\n \n       /**\n        * @brief Gets the flags used to construct the regular expression\n@@ -729,8 +712,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       imbue(locale_type __loc)\n       {\n \tstd::swap(__loc, _M_loc);\n-\tif (_M_automaton != nullptr)\n-\t  this->assign(_M_original_str, _M_flags);\n+\t_M_automaton = nullptr;\n \treturn __loc;\n       }\n \n@@ -753,7 +735,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \tstd::swap(_M_flags, __rhs._M_flags);\n \tstd::swap(_M_loc, __rhs._M_loc);\n-\tstd::swap(_M_original_str, __rhs._M_original_str);\n \tstd::swap(_M_automaton, __rhs._M_automaton);\n       }\n \n@@ -764,7 +745,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n \n     private:\n-      typedef std::shared_ptr<__detail::_NFA<_Rx_traits>> _AutomatonPtr;\n+      typedef std::shared_ptr<const __detail::_NFA<_Rx_traits>> _AutomatonPtr;\n+\n+      template<typename _FwdIter>\n+\tbasic_regex(_FwdIter __first, _FwdIter __last, locale_type __loc,\n+\t\t    flag_type __f)\n+\t: _M_flags(__f), _M_loc(std::move(__loc)),\n+\t_M_automaton(__detail::__compile_nfa<_FwdIter, _Rx_traits>(\n+\t  std::move(__first), std::move(__last), _M_loc, _M_flags))\n+\t{ }\n \n       template<typename _Bp, typename _Ap, typename _Cp, typename _Rp,\n \t__detail::_RegexExecutorPolicy, bool>\n@@ -778,7 +767,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       flag_type              _M_flags;\n       locale_type            _M_loc;\n-      basic_string<_Ch_type> _M_original_str;\n       _AutomatonPtr          _M_automaton;\n     };\n "}, {"sha": "4472116227d09db0e1f6607a2b2afdfc46d6e872", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -59,7 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Compiler(_IterT __b, _IterT __e,\n \t\tconst typename _TraitsT::locale_type& __traits, _FlagT __flags);\n \n-      std::shared_ptr<_RegexT>\n+      shared_ptr<const _RegexT>\n       _M_get_nfa()\n       { return std::move(_M_nfa); }\n \n@@ -145,15 +145,62 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _CtypeT&      _M_ctype;\n     };\n \n-  template<typename _TraitsT>\n-    inline std::shared_ptr<_NFA<_TraitsT>>\n-    __compile_nfa(const typename _TraitsT::char_type* __first,\n-\t\t  const typename _TraitsT::char_type* __last,\n+  template<typename _Tp>\n+    struct __has_contiguous_iter : std::false_type { };\n+\n+  template<typename _Ch, typename _Tr, typename _Alloc>\n+    struct __has_contiguous_iter<std::basic_string<_Ch, _Tr, _Alloc>>\n+    : std::true_type\n+    { };\n+\n+  template<typename _Tp, typename _Alloc>\n+    struct __has_contiguous_iter<std::vector<_Tp, _Alloc>>\n+    : std::true_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_contiguous_normal_iter : std::false_type { };\n+\n+  template<typename _CharT>\n+    struct __is_contiguous_normal_iter<_CharT*> : std::true_type { };\n+\n+  template<typename _Tp, typename _Cont>\n+    struct\n+    __is_contiguous_normal_iter<__gnu_cxx::__normal_iterator<_Tp, _Cont>>\n+    : __has_contiguous_iter<_Cont>::type\n+    { };\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __enable_if_contiguous_normal_iter\n+      = typename enable_if< __is_contiguous_normal_iter<_Iter>::value,\n+                           std::shared_ptr<const _NFA<_TraitsT>> >::type;\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __disable_if_contiguous_normal_iter\n+      = typename enable_if< !__is_contiguous_normal_iter<_Iter>::value,\n+                           std::shared_ptr<const _NFA<_TraitsT>> >::type;\n+\n+  template<typename _FwdIter, typename _TraitsT>\n+    inline __enable_if_contiguous_normal_iter<_FwdIter, _TraitsT>\n+    __compile_nfa(_FwdIter __first, _FwdIter __last,\n \t\t  const typename _TraitsT::locale_type& __loc,\n \t\t  regex_constants::syntax_option_type __flags)\n     {\n+      size_t __len = __last - __first;\n+      const auto* __cfirst = __len ? std::__addressof(*__first) : nullptr;\n       using _Cmplr = _Compiler<_TraitsT>;\n-      return _Cmplr(__first, __last, __loc, __flags)._M_get_nfa();\n+      return _Cmplr(__cfirst, __cfirst + __len, __loc, __flags)._M_get_nfa();\n+    }\n+\n+  template<typename _FwdIter, typename _TraitsT>\n+    inline __disable_if_contiguous_normal_iter<_FwdIter, _TraitsT>\n+    __compile_nfa(_FwdIter __first, _FwdIter __last,\n+\t\t  const typename _TraitsT::locale_type& __loc,\n+\t\t  regex_constants::syntax_option_type __flags)\n+    {\n+      basic_string<typename _TraitsT::char_type> __str(__first, __last);\n+      return __compile_nfa(__str.data(), __str.data() + __str.size(), __loc,\n+          __flags);\n     }\n \n   // [28.13.14]"}, {"sha": "3dff372d724caa8107c73215e4dd47e4371603fc", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -56,9 +56,9 @@\n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>\n #include <bits/regex_automaton.h>\n-#include <bits/regex.h>\n #include <bits/regex_scanner.h>\n #include <bits/regex_compiler.h>\n+#include <bits/regex.h>\n #include <bits/regex_executor.h>\n \n #endif // C++11"}, {"sha": "ee115b52474b44c1978cb59f873866a85d07f147", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/assign/char/string.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fassign%2Fchar%2Fstring.cc?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -1,4 +1,3 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n // 2007-03-12  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n@@ -29,16 +28,35 @@\n // Tests C++ string assignment of the basic_regex class.  \n void test01()\n {\n+  bool test __attribute__((unused)) = true;\n   typedef std::basic_regex<char> test_type;\n \n   std::string s(\"a*b\");\n   test_type re;\n   re.assign(s);\n }\n \n+// libstdc++/64584\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::regex re(\"\", std::regex_constants::extended);\n+  auto flags = re.flags();\n+  try\n+    {\n+      re.assign(\"(\", std::regex_constants::icase);\n+      VERIFY(false);\n+    }\n+  catch (const std::regex_error& e)\n+    {\n+      VERIFY(flags == re.flags());\n+    }\n+}\n+\n int\n main()\n { \n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "d4d4f470547ef104b5c4d06f3023890cb902b32b", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/imbue/string.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c176fb459c7780f9cb711e2427e41dca12a54a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fimbue%2Fstring.cc?ref=60c176fb459c7780f9cb711e2427e41dca12a54a", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [28.8.5] class template basic_regex locale\n+\n+#include <string>\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/64585\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  static const char s[] = \"a\";\n+  std::regex re(\"a\");\n+  VERIFY(std::regex_search(s, re));\n+\n+  auto loc = re.imbue(re.getloc());\n+  VERIFY(!std::regex_search(s, re));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}