{"sha": "806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2NTYyZmQ2MjY5YTNkN2UwNjUxZDViYmY5MDg1Yzc3MDhmYjVjZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-07T11:59:13Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-07T11:59:13Z"}, "message": "Add malloc predictor (PR middle-end/83023).\n\n2018-08-07  Martin Liska  <mliska@suse.cz>\n\n        PR middle-end/83023\n\t* predict.c (expr_expected_value_1): Handle DECL_IS_MALLOC,\n        BUILT_IN_REALLOC and DECL_IS_OPERATOR_NEW.\n\t* predict.def (PRED_MALLOC_NONNULL): New predictor.\n\t* doc/extend.texi: Document that malloc attribute adds\n        hit to compiler.\n2018-08-07  Martin Liska  <mliska@suse.cz>\n\n        PR middle-end/83023\n\t* gcc.dg/predict-16.c: New test.\n\t* g++.dg/predict-1.C: New test.\n\nFrom-SVN: r263355", "tree": {"sha": "eaa3b52796a56d33f60e9066a720a28f86390a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa3b52796a56d33f60e9066a720a28f86390a1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea2329d170827cf9d321324844035a4a2dcfec96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2329d170827cf9d321324844035a4a2dcfec96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2329d170827cf9d321324844035a4a2dcfec96"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "8bbcceacdd969e2029d47a673ebc8e69eb32c6d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -1,3 +1,12 @@\n+2018-08-07  Martin Liska  <mliska@suse.cz>\n+\n+        PR middle-end/83023\n+\t* predict.c (expr_expected_value_1): Handle DECL_IS_MALLOC,\n+        BUILT_IN_REALLOC and DECL_IS_OPERATOR_NEW.\n+\t* predict.def (PRED_MALLOC_NONNULL): New predictor.\n+\t* doc/extend.texi: Document that malloc attribute adds\n+        hit to compiler.\n+\n 2018-08-06  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/86807"}, {"sha": "183ff1c6348dc6347c98f7a3906b64893a02e502", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -2941,7 +2941,9 @@ that the pointer @var{P} returned by the function cannot alias any\n other pointer valid when the function returns, and moreover no\n pointers to valid objects occur in any storage addressed by @var{P}.\n \n-Using this attribute can improve optimization.  Functions like\n+Using this attribute can improve optimization.  Compiler predicts\n+that a function with the attribute returns non-null in most cases.\n+Functions like\n @code{malloc} and @code{calloc} have this property because they return\n a pointer to uninitialized or zeroed-out storage.  However, functions\n like @code{realloc} do not have this property, as they can return a"}, {"sha": "96ae10f1319a6593dd0856a599adfca7c5b97190", "filename": "gcc/predict.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -2380,6 +2380,14 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t\t}\n \t      return NULL;\n \t    }\n+\n+\t  if (DECL_IS_MALLOC (decl) || DECL_IS_OPERATOR_NEW (decl))\n+\t    {\n+\t      if (predictor)\n+\t\t*predictor = PRED_MALLOC_NONNULL;\n+\t      return boolean_true_node;\n+\t    }\n+\n \t  if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n \t    switch (DECL_FUNCTION_CODE (decl))\n \t      {\n@@ -2414,6 +2422,10 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t\tif (predictor)\n \t\t  *predictor = PRED_COMPARE_AND_SWAP;\n \t\treturn boolean_true_node;\n+\t      case BUILT_IN_REALLOC:\n+\t\tif (predictor)\n+\t\t  *predictor = PRED_MALLOC_NONNULL;\n+\t\treturn boolean_true_node;\n \t      default:\n \t\tbreak;\n \t    }"}, {"sha": "76e6590cc961c3c8541a1fdaef333a36549ddd4b", "filename": "gcc/predict.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -51,6 +51,10 @@ DEF_PREDICTOR (PRED_NO_PREDICTION, \"no prediction\", PROB_ALWAYS, 0)\n DEF_PREDICTOR (PRED_UNCONDITIONAL, \"unconditional jump\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)\n \n+/* Return value of malloc function is almost always non-null.  */\n+DEF_PREDICTOR (PRED_MALLOC_NONNULL, \"malloc returned non-NULL\", \\\n+\t       PROB_VERY_LIKELY, PRED_FLAG_FIRST_MATCH)\n+\n /* Use number of loop iterations determined by # of iterations\n    analysis to set probability.  We don't want to use Dempster-Shaffer\n    theory here, as the predictions is exact.  */\n@@ -169,7 +173,6 @@ DEF_PREDICTOR (PRED_HOT_LABEL, \"hot label\", HITRATE (85), 0)\n DEF_PREDICTOR (PRED_COLD_LABEL, \"cold label\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n \n-\n /* The following predictors are used in Fortran. */\n \n /* Branch leading to an integer overflow are extremely unlikely.  */"}, {"sha": "868f4215ef0c10f0b0af11a9a1d133240084dd03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -1,3 +1,9 @@\n+2018-08-07  Martin Liska  <mliska@suse.cz>\n+\n+        PR middle-end/83023\n+\t* gcc.dg/predict-16.c: New test.\n+\t* g++.dg/predict-1.C: New test.\n+\n 2018-08-07  Steve Ellcey  <sellcey@cavium.com>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "8e2032f33a4db1a4820887ca0ca89a3a3a87b351", "filename": "gcc/testsuite/g++.dg/predict-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-1.C?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+#include <new>\n+\n+int *r;\n+\n+void test()\n+{\n+  r = new(std::nothrow) int;\n+  if (r)\n+    __builtin_memset (r, 0, sizeof(int));\n+}\n+\n+/* { dg-final { scan-tree-dump \"malloc returned non-NULL heuristics of edge\\[^:\\]*: 99.96%\" \"profile_estimate\"} } */"}, {"sha": "e1f331b909aad67520bfeaa1e4435c3cd1949c0f", "filename": "gcc/testsuite/gcc.dg/predict-16.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806562fd6269a3d7e0651d5bbf9085c7708fb5cd/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-16.c?ref=806562fd6269a3d7e0651d5bbf9085c7708fb5cd", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+void *r;\n+void *r2;\n+void *r3;\n+void *r4;\n+void *r5;\n+\n+void *m (size_t s, int c)\n+{\n+  r = malloc (s);\n+  if (r)\n+    memset (r, 0, s);\n+\n+  r2 = calloc (s, 0);\n+  if (r2)\n+    memset (r2, 0, s);\n+\n+  r3 = __builtin_malloc (s);\n+  if (r3)\n+    memset (r3, 0, s);\n+\n+  r4 = __builtin_calloc (s, 0);\n+  if (r4)\n+    memset (r4, 0, s);\n+\n+  r5 = __builtin_realloc (r4, s);\n+  if (r5)\n+    memset (r4, 0, s);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"malloc returned non-NULL heuristics of edge\\[^:\\]*: 99.96%\" 5 \"profile_estimate\"} } */"}]}