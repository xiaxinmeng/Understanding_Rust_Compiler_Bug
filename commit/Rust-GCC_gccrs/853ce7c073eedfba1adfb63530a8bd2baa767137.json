{"sha": "853ce7c073eedfba1adfb63530a8bd2baa767137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzY2U3YzA3M2VlZGZiYTFhZGZiNjM1MzBhOGJkMmJhYTc2NzEzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-12T12:21:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-12T12:21:45Z"}, "message": "re PR middle-end/92063 (ICE in operation_could_trap_p, at tree-eh.c:2528 when compiling Python's Python/_warnings.c)\n\n\tPR middle-end/92063\n\t* tree-eh.c (operation_could_trap_helper_p) <case COND_EXPR>\n\t<case VEC_COND_EXPR>: Return false with *handled = false.\n\t(tree_could_trap_p): For {,VEC_}COND_EXPR return false instead of\n\trecursing on the first operand.\n\t* fold-const.c (simple_operand_p_2): Use generic_expr_could_trap_p\n\tinstead of tree_could_trap_p.\n\t* tree-ssa-sccvn.c (vn_nary_may_trap): Formatting fixes.\n\n\t* gcc.c-torture/compile/pr92063.c: New test.\n\nFrom-SVN: r276915", "tree": {"sha": "31ed1c2b11dab70a360c55ebd718030a25930484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ed1c2b11dab70a360c55ebd718030a25930484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853ce7c073eedfba1adfb63530a8bd2baa767137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853ce7c073eedfba1adfb63530a8bd2baa767137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853ce7c073eedfba1adfb63530a8bd2baa767137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853ce7c073eedfba1adfb63530a8bd2baa767137/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20de9568b49e663be848a35ce0bb08f63f14b5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20de9568b49e663be848a35ce0bb08f63f14b5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20de9568b49e663be848a35ce0bb08f63f14b5b2"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "800b8cef5245ac5c9409acf84adafb3800fa1e01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -1,3 +1,14 @@\n+2019-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/92063\n+\t* tree-eh.c (operation_could_trap_helper_p) <case COND_EXPR>\n+\t<case VEC_COND_EXPR>: Return false with *handled = false.\n+\t(tree_could_trap_p): For {,VEC_}COND_EXPR return false instead of\n+\trecursing on the first operand.\n+\t* fold-const.c (simple_operand_p_2): Use generic_expr_could_trap_p\n+\tinstead of tree_could_trap_p.\n+\t* tree-ssa-sccvn.c (vn_nary_may_trap): Formatting fixes.\n+\n 2019-10-11  Jim Wilson  <jimw@sifive.com>\n \n \tPR rtl-optimization/91860"}, {"sha": "58b967e48fee11fee98436e14a50b61c4312fa65", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -4447,8 +4447,7 @@ simple_operand_p_2 (tree exp)\n {\n   enum tree_code code;\n \n-  if (TREE_SIDE_EFFECTS (exp)\n-      || tree_could_trap_p (exp))\n+  if (TREE_SIDE_EFFECTS (exp) || generic_expr_could_trap_p (exp))\n     return false;\n \n   while (CONVERT_EXPR_P (exp))"}, {"sha": "2f46d4dd8572c3d3c39f5b96a750c73a8c059f60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -1,5 +1,8 @@\n 2019-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/92063\n+\t* gcc.c-torture/compile/pr92063.c: New test.\n+\n \t* c-c++-common/gomp/declare-variant-2.c: Adjust for error recovery\n \timprovements.  Add new tests.\n \t* c-c++-common/gomp/declare-variant-4.c: New test."}, {"sha": "bb704abe0ef1986de1145c314d58dbc409f2389b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr92063.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr92063.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr92063.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr92063.c?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -0,0 +1,7 @@\n+/* PR middle-end/92063 */\n+\n+int\n+foo (int a, int b, int *c, short *d)\n+{\n+  return (c[0] ? b : 0) == 'y' && ((a ? d[0] : c[0]) ? b : 0) == 'c';\n+}"}, {"sha": "54502e6f93c6947ba30c02a6477ba70af09cfd96", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -2499,6 +2499,14 @@ operation_could_trap_helper_p (enum tree_code op,\n       /* Constructing an object cannot trap.  */\n       return false;\n \n+    case COND_EXPR:\n+    case VEC_COND_EXPR:\n+      /* Whether *COND_EXPR can trap depends on whether the\n+\t first argument can trap, so signal it as not handled.\n+\t Whether lhs is floating or not doesn't matter.  */\n+      *handled = false;\n+      return false;\n+\n     default:\n       /* Any floating arithmetic may trap.  */\n       if (fp_operation && flag_trapping_math)\n@@ -2614,9 +2622,12 @@ tree_could_trap_p (tree expr)\n   if (!expr)\n     return false;\n \n-  /* For COND_EXPR and VEC_COND_EXPR only the condition may trap.  */\n+  /* In COND_EXPR and VEC_COND_EXPR only the condition may trap, but\n+     they won't appear as operands in GIMPLE form, so this is just for the\n+     GENERIC uses where it needs to recurse on the operands and so\n+     *COND_EXPR itself doesn't trap.  */\n   if (TREE_CODE (expr) == COND_EXPR || TREE_CODE (expr) == VEC_COND_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n+    return false;\n \n   code = TREE_CODE (expr);\n   t = TREE_TYPE (expr);"}, {"sha": "57331ab44dc78c16d97065cd28e8c4cdcbf8d96e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ce7c073eedfba1adfb63530a8bd2baa767137/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=853ce7c073eedfba1adfb63530a8bd2baa767137", "patch": "@@ -5105,18 +5105,15 @@ vn_nary_may_trap (vn_nary_op_t nary)\n \t  honor_nans = flag_trapping_math && !flag_finite_math_only;\n \t  honor_snans = flag_signaling_nans != 0;\n \t}\n-      else if (INTEGRAL_TYPE_P (type)\n-\t       && TYPE_OVERFLOW_TRAPS (type))\n+      else if (INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_TRAPS (type))\n \thonor_trapv = true;\n     }\n   if (nary->length >= 2)\n     rhs2 = nary->op[1];\n   ret = operation_could_trap_helper_p (nary->opcode, fp_operation,\n-\t\t\t\t       honor_trapv,\n-\t\t\t\t       honor_nans, honor_snans, rhs2,\n-\t\t\t\t       &handled);\n-  if (handled\n-      && ret)\n+\t\t\t\t       honor_trapv, honor_nans, honor_snans,\n+\t\t\t\t       rhs2, &handled);\n+  if (handled && ret)\n     return true;\n \n   for (i = 0; i < nary->length; ++i)"}]}