{"sha": "4969d05d19f5bd0cfef7118e1d8b2760a5508e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2OWQwNWQxOWY1YmQwY2ZlZjcxMThlMWQ4YjI3NjBhNTUwOGU0MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-13T03:06:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-13T03:06:14Z"}, "message": "Add prototypes for static functions.\n\n(struct move_by_pieces): Move definition before function forward decls.\n\nFrom-SVN: r3725", "tree": {"sha": "c061b7959b5ae97ce4134239714679f7acdb995b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c061b7959b5ae97ce4134239714679f7acdb995b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4969d05d19f5bd0cfef7118e1d8b2760a5508e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969d05d19f5bd0cfef7118e1d8b2760a5508e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4969d05d19f5bd0cfef7118e1d8b2760a5508e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969d05d19f5bd0cfef7118e1d8b2760a5508e41/comments", "author": null, "committer": null, "parents": [{"sha": "446ac30fc75b3927785c189cb60f11af1a021f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446ac30fc75b3927785c189cb60f11af1a021f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446ac30fc75b3927785c189cb60f11af1a021f6f"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "fb66fa841541c35c0e18c9e55ceec592c6f4f43b", "filename": "gcc/expr.c", "status": "modified", "additions": 47, "deletions": 34, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969d05d19f5bd0cfef7118e1d8b2760a5508e41/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969d05d19f5bd0cfef7118e1d8b2760a5508e41/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4969d05d19f5bd0cfef7118e1d8b2760a5508e41", "patch": "@@ -86,21 +86,51 @@ tree cleanups_this_call;\n    returned.  */\n static rtx saveregs_value;\n \n-rtx store_expr ();\n-static void store_constructor ();\n-static rtx store_field ();\n-static rtx expand_builtin ();\n-static rtx compare ();\n-static rtx do_store_flag ();\n-static void preexpand_calls ();\n-static rtx expand_increment ();\n-static void init_queue ();\n-\n-void do_pending_stack_adjust ();\n-static void do_jump_for_compare ();\n-static void do_jump_by_parts_equality ();\n-static void do_jump_by_parts_equality_rtx ();\n-static void do_jump_by_parts_greater ();\n+/* This structure is used by move_by_pieces to describe the move to\n+   be performed.  */\n+\n+struct move_by_pieces\n+{\n+  rtx to;\n+  rtx to_addr;\n+  int autinc_to;\n+  int explicit_inc_to;\n+  rtx from;\n+  rtx from_addr;\n+  int autinc_from;\n+  int explicit_inc_from;\n+  int len;\n+  int offset;\n+  int reverse;\n+};\n+\n+static rtx enqueue_insn\t\tPROTO((rtx, rtx));\n+static int queued_subexp_p\tPROTO((rtx));\n+static void init_queue\t\tPROTO((void));\n+static void move_by_pieces\tPROTO((rtx, rtx, int, int));\n+static int move_by_pieces_ninsns PROTO((unsigned int, int));\n+static void move_by_pieces_1\tPROTO((rtx (*) (), enum machine_mode,\n+\t\t\t\t       struct move_by_pieces *));\n+static void group_insns\t\tPROTO((rtx));\n+static void store_constructor\tPROTO((tree, rtx));\n+static rtx store_field\t\tPROTO((rtx, int, int, enum machine_mode, tree,\n+\t\t\t\t       enum machine_mode, int, int, int));\n+static tree save_noncopied_parts PROTO((tree, tree));\n+static tree init_noncopied_parts PROTO((tree, tree));\n+static int safe_from_p\t\tPROTO((rtx, tree));\n+static int fixed_type_p\t\tPROTO((tree));\n+static int get_pointer_alignment PROTO((tree, unsigned));\n+static tree string_constant\tPROTO((tree, tree *));\n+static tree c_strlen\t\tPROTO((tree));\n+static rtx expand_builtin  PROTO((tree, rtx, rtx, enum machine_mode, int));\n+static rtx expand_increment\tPROTO((tree, int));\n+static void preexpand_calls\tPROTO((tree));\n+static void do_jump_by_parts_greater PROTO((tree, int, rtx, rtx));\n+static void do_jump_by_parts_equality PROTO((tree, rtx, rtx));\n+static void do_jump_by_parts_equality_rtx PROTO((rtx, rtx, rtx));\n+static void do_jump_for_compare\tPROTO((rtx, rtx, rtx));\n+static rtx compare\t\tPROTO((tree, enum rtx_code, enum rtx_code));\n+static rtx do_store_flag\tPROTO((tree, rtx, enum machine_mode, int));\n \n /* Record for each mode whether we can move a register directly to or\n    from an object of that mode in memory.  If we can't, we won't try\n@@ -1094,24 +1124,6 @@ convert_to_mode (mode, x, unsignedp)\n     through protect_from_queue before calling.\n    ALIGN (in bytes) is maximum alignment we can assume.  */\n \n-struct move_by_pieces\n-{\n-  rtx to;\n-  rtx to_addr;\n-  int autinc_to;\n-  int explicit_inc_to;\n-  rtx from;\n-  rtx from_addr;\n-  int autinc_from;\n-  int explicit_inc_from;\n-  int len;\n-  int offset;\n-  int reverse;\n-};\n-\n-static void move_by_pieces_1 ();\n-static int move_by_pieces_ninsns ();\n-\n static void\n move_by_pieces (to, from, len, align)\n      rtx to, from;\n@@ -3323,7 +3335,8 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n    this case, but the address of the object can be found.  */\n \n tree\n-get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode, punsignedp, pvolatilep)\n+get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n+\t\t     punsignedp, pvolatilep)\n      tree exp;\n      int *pbitsize;\n      int *pbitpos;"}]}