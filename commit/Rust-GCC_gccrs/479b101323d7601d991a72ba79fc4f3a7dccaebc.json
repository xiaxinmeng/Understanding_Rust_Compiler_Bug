{"sha": "479b101323d7601d991a72ba79fc4f3a7dccaebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5YjEwMTMyM2Q3NjAxZDk5MWE3MmJhNzlmYzRmM2E3ZGNjYWViYw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-07-01T21:34:58Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-01T21:34:58Z"}, "message": "combine.c (force_to_mode): Handle TRUNCATE.\n\n\t* combine.c (force_to_mode): Handle TRUNCATE.  Factor out\n\ttruncation from operands in binary operations.\n\ntestsuite/\n\t* gcc.target/mips/truncate-4.c: New testcase.\n\nFrom-SVN: r149154", "tree": {"sha": "7a605c8f7cca36b8978bff57e5aa90fb6575c756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a605c8f7cca36b8978bff57e5aa90fb6575c756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/479b101323d7601d991a72ba79fc4f3a7dccaebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479b101323d7601d991a72ba79fc4f3a7dccaebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479b101323d7601d991a72ba79fc4f3a7dccaebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479b101323d7601d991a72ba79fc4f3a7dccaebc/comments", "author": null, "committer": null, "parents": [{"sha": "c600a15524cc3200cd4ee3997e162e9205b79a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c600a15524cc3200cd4ee3997e162e9205b79a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c600a15524cc3200cd4ee3997e162e9205b79a70"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "93a912dc26c313bd6bcb1663e2dc21a47069ca37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=479b101323d7601d991a72ba79fc4f3a7dccaebc", "patch": "@@ -1,3 +1,8 @@\n+2009-07-01  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (force_to_mode): Handle TRUNCATE.  Factor out\n+\ttruncation from operands in binary operations.\n+\n 2009-07-01  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tRevert:"}, {"sha": "a4f0d66c7313e40e8c69ae0511c4cacf18db9333", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=479b101323d7601d991a72ba79fc4f3a7dccaebc", "patch": "@@ -7358,6 +7358,10 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \treturn force_to_mode (SUBREG_REG (x), mode, mask, next_select);\n       break;\n \n+    case TRUNCATE:\n+      /* Similarly for a truncate.  */\n+      return force_to_mode (XEXP (x, 0), mode, mask, next_select);\n+\n     case AND:\n       /* If this is an AND with a constant, convert it into an AND\n \t whose constant is the AND of that constant with MASK.  If it\n@@ -7502,12 +7506,20 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n       /* For most binary operations, just propagate into the operation and\n \t change the mode if we have an operation of that mode.  */\n \n-      op0 = gen_lowpart_or_truncate (op_mode,\n-\t\t\t\t     force_to_mode (XEXP (x, 0), mode, mask,\n-\t\t\t\t\t\t    next_select));\n-      op1 = gen_lowpart_or_truncate (op_mode,\n-\t\t\t\t     force_to_mode (XEXP (x, 1), mode, mask,\n-\t\t\t\t\tnext_select));\n+      op0 = force_to_mode (XEXP (x, 0), mode, mask, next_select);\n+      op1 = force_to_mode (XEXP (x, 1), mode, mask, next_select);\n+\n+      /* If we ended up truncating both operands, truncate the result of the\n+\t operation instead.  */\n+      if (GET_CODE (op0) == TRUNCATE\n+\t  && GET_CODE (op1) == TRUNCATE)\n+\t{\n+\t  op0 = XEXP (op0, 0);\n+\t  op1 = XEXP (op1, 0);\n+\t}\n+\n+      op0 = gen_lowpart_or_truncate (op_mode, op0);\n+      op1 = gen_lowpart_or_truncate (op_mode, op1);\n \n       if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0) || op1 != XEXP (x, 1))\n \tx = simplify_gen_binary (code, op_mode, op0, op1);"}, {"sha": "6eea718e7c8939f0cf2237eb3127daa56c3fe2bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=479b101323d7601d991a72ba79fc4f3a7dccaebc", "patch": "@@ -1,3 +1,7 @@\n+2009-07-01  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/truncate-4.c: New testcase.\n+\n 2009-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831"}, {"sha": "2958be8de1e76d681f1e174649dbd5b2a723ff13", "filename": "gcc/testsuite/gcc.target/mips/truncate-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b101323d7601d991a72ba79fc4f3a7dccaebc/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-4.c?ref=479b101323d7601d991a72ba79fc4f3a7dccaebc", "patch": "@@ -0,0 +1,10 @@\n+/* The and is performed in DI mode so there is no need for truncation.  */\n+/* { dg-options \"-O -mgp64\" } */\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\" } } */\n+\n+unsigned long long\n+f (unsigned long long s)\n+{\n+  unsigned u = s & 0xfff;\n+  return u;\n+}"}]}