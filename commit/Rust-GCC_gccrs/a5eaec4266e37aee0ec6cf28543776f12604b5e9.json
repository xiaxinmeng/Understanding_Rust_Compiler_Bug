{"sha": "a5eaec4266e37aee0ec6cf28543776f12604b5e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlYWVjNDI2NmUzN2FlZTBlYzZjZjI4NTQzNzc2ZjEyNjA0YjVlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-08T12:39:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-08T12:39:07Z"}, "message": "tree-ssa-sccvn.c (vn_get_expr_for): Valueize operands before folding the expression.\n\n2014-05-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_get_expr_for): Valueize operands before\n\tfolding the expression.\n\t(valueize_expr): Remove.\n\t(visit_reference_op_load): Do not valueize the result of\n\tvn_get_expr_for.\n\t(simplify_binary_expression): Likewise.\n\t(simplify_unary_expression): Likewise.\n\nFrom-SVN: r210211", "tree": {"sha": "213a8179bb257b076090cd53f27465c46506e347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213a8179bb257b076090cd53f27465c46506e347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5eaec4266e37aee0ec6cf28543776f12604b5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eaec4266e37aee0ec6cf28543776f12604b5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5eaec4266e37aee0ec6cf28543776f12604b5e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eaec4266e37aee0ec6cf28543776f12604b5e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cceaf54a4a5b32a9f64f584698be9f47129a7f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cceaf54a4a5b32a9f64f584698be9f47129a7f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cceaf54a4a5b32a9f64f584698be9f47129a7f34"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "4bfa0781fae774e148bbe068b5c528880c965142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eaec4266e37aee0ec6cf28543776f12604b5e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eaec4266e37aee0ec6cf28543776f12604b5e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5eaec4266e37aee0ec6cf28543776f12604b5e9", "patch": "@@ -1,3 +1,13 @@\n+2014-05-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_get_expr_for): Valueize operands before\n+\tfolding the expression.\n+\t(valueize_expr): Remove.\n+\t(visit_reference_op_load): Do not valueize the result of\n+\tvn_get_expr_for.\n+\t(simplify_binary_expression): Likewise.\n+\t(simplify_unary_expression): Likewise.\n+\n 2014-05-08  Richard Biener  <rguenther@suse.de>\n \n \t* gimplify.c (gimplify_call_expr): Use saved fnptrtype for"}, {"sha": "07b9bd2b1ab608350653c2221fce053bbfd615ef", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eaec4266e37aee0ec6cf28543776f12604b5e9/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eaec4266e37aee0ec6cf28543776f12604b5e9/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a5eaec4266e37aee0ec6cf28543776f12604b5e9", "patch": "@@ -414,8 +414,8 @@ vn_get_expr_for (tree name)\n   if (!is_gimple_assign (def_stmt))\n     return vn->valnum;\n \n-  /* FIXME tuples.  This is incomplete and likely will miss some\n-     simplifications.  */\n+  /* Note that we can valueize here because we clear the cached\n+     simplified expressions after each optimistic iteration.  */\n   code = gimple_assign_rhs_code (def_stmt);\n   switch (TREE_CODE_CLASS (code))\n     {\n@@ -427,20 +427,21 @@ vn_get_expr_for (tree name)\n \t\t\t\t      0)) == SSA_NAME)\n \texpr = fold_build1 (code,\n \t\t\t    gimple_expr_type (def_stmt),\n-\t\t\t    TREE_OPERAND (gimple_assign_rhs1 (def_stmt), 0));\n+\t\t\t    vn_valueize (TREE_OPERAND\n+\t\t\t\t\t   (gimple_assign_rhs1 (def_stmt), 0)));\n       break;\n \n     case tcc_unary:\n       expr = fold_build1 (code,\n \t\t\t  gimple_expr_type (def_stmt),\n-\t\t\t  gimple_assign_rhs1 (def_stmt));\n+\t\t\t  vn_valueize (gimple_assign_rhs1 (def_stmt)));\n       break;\n \n     case tcc_binary:\n       expr = fold_build2 (code,\n \t\t\t  gimple_expr_type (def_stmt),\n-\t\t\t  gimple_assign_rhs1 (def_stmt),\n-\t\t\t  gimple_assign_rhs2 (def_stmt));\n+\t\t\t  vn_valueize (gimple_assign_rhs1 (def_stmt)),\n+\t\t\t  vn_valueize (gimple_assign_rhs2 (def_stmt)));\n       break;\n \n     case tcc_exceptional:\n@@ -2759,7 +2760,6 @@ defs_to_varying (gimple stmt)\n }\n \n static bool expr_has_constants (tree expr);\n-static tree valueize_expr (tree expr);\n \n /* Visit a copy between LHS and RHS, return true if the value number\n    changed.  */\n@@ -2900,7 +2900,7 @@ visit_reference_op_load (tree lhs, tree op, gimple stmt)\n \t   || TREE_CODE (val) == VIEW_CONVERT_EXPR)\n \t  && TREE_CODE (TREE_OPERAND (val, 0)) == SSA_NAME)\n         {\n-\t  tree tem = valueize_expr (vn_get_expr_for (TREE_OPERAND (val, 0)));\n+\t  tree tem = vn_get_expr_for (TREE_OPERAND (val, 0));\n \t  if ((CONVERT_EXPR_P (tem)\n \t       || TREE_CODE (tem) == VIEW_CONVERT_EXPR)\n \t      && (tem = fold_unary_ignore_overflow (TREE_CODE (val),\n@@ -3210,26 +3210,6 @@ stmt_has_constants (gimple stmt)\n   return false;\n }\n \n-/* Replace SSA_NAMES in expr with their value numbers, and return the\n-   result.\n-   This is performed in place. */\n-\n-static tree\n-valueize_expr (tree expr)\n-{\n-  switch (TREE_CODE_CLASS (TREE_CODE (expr)))\n-    {\n-    case tcc_binary:\n-      TREE_OPERAND (expr, 1) = vn_valueize (TREE_OPERAND (expr, 1));\n-      /* Fallthru.  */\n-    case tcc_unary:\n-      TREE_OPERAND (expr, 0) = vn_valueize (TREE_OPERAND (expr, 0));\n-      break;\n-    default:;\n-    }\n-  return expr;\n-}\n-\n /* Simplify the binary expression RHS, and return the result if\n    simplified. */\n \n@@ -3250,7 +3230,7 @@ simplify_binary_expression (gimple stmt)\n       if (VN_INFO (op0)->has_constants\n \t  || TREE_CODE_CLASS (code) == tcc_comparison\n \t  || code == COMPLEX_EXPR)\n-\top0 = valueize_expr (vn_get_expr_for (op0));\n+\top0 = vn_get_expr_for (op0);\n       else\n \top0 = vn_valueize (op0);\n     }\n@@ -3259,7 +3239,7 @@ simplify_binary_expression (gimple stmt)\n     {\n       if (VN_INFO (op1)->has_constants\n \t  || code == COMPLEX_EXPR)\n-\top1 = valueize_expr (vn_get_expr_for (op1));\n+\top1 = vn_get_expr_for (op1);\n       else\n \top1 = vn_valueize (op1);\n     }\n@@ -3321,7 +3301,7 @@ simplify_unary_expression (gimple stmt)\n \n   orig_op0 = op0;\n   if (VN_INFO (op0)->has_constants)\n-    op0 = valueize_expr (vn_get_expr_for (op0));\n+    op0 = vn_get_expr_for (op0);\n   else if (CONVERT_EXPR_CODE_P (code)\n \t   || code == REALPART_EXPR\n \t   || code == IMAGPART_EXPR\n@@ -3330,7 +3310,7 @@ simplify_unary_expression (gimple stmt)\n     {\n       /* We want to do tree-combining on conversion-like expressions.\n          Make sure we feed only SSA_NAMEs or constants to fold though.  */\n-      tree tem = valueize_expr (vn_get_expr_for (op0));\n+      tree tem = vn_get_expr_for (op0);\n       if (UNARY_CLASS_P (tem)\n \t  || BINARY_CLASS_P (tem)\n \t  || TREE_CODE (tem) == VIEW_CONVERT_EXPR"}]}