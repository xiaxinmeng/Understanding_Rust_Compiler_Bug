{"sha": "69104d52ddfe7a10ba45729935562e4e1a1176c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxMDRkNTJkZGZlN2ExMGJhNDU3Mjk5MzU1NjJlNGUxYTExNzZjMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-11-09T10:58:59Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-11-09T10:58:59Z"}, "message": "arm - use the new CPU alias option to simplify the list of CPUs.\n\nThis patch simplifies the table of CPUs supported in GCC by making\nuse of the new alias feature.  Most of the changes are fairly\nstraight-forward:\n- arm7tdmi and arm7tdmi-s are the same thing.\n- arm710t, arm720t and arm740t differ only in features external to the core\n- arm920 and arm920t are the same thing; arm922t and arm940t differ from\n  arm920t only in features external to the core; ep9312 is an arm920t-derived\n  core that we continue to recognize for legacy reasons.\n- arm10tdmi and arm1020t differ only in features external to the core.\n- arm9e, arm946te-s, arm966e-s and arm968e-s differ only in features external\n  to the core.\n- arm10e, arm1020e and arm1022e differ only in features external to the core.\n\nThe arm10e/arm1020e/arm1022e change is the only one which changes\nbehaviour of the compiler slightly.  Previously, and for no reason\nthat I can remember, the scheduler for arm1020e/arm1022e was not used\nfor arm10e: this was probably an oversight.  The unification means\nthat the same scheduler is now used for all three cores.\n\n\t* config/arm/arm-cpus.in (arm7tdmi): Add an alias for arm7tdmi-s.\n\t(arm7tdmi-s): Delete CPU.\n\t(arm710t): Add aliases for arm720t and arm740t.\n\t(arm720t, arm740t): Delete CPUs.\n\t(arm920t): Add aliases for arm920, arm922t and arm940t.\n\t(arm920, arm922t, arm940t): Delete CPUs.\n\t(arm10tdmi): Add alias for arm1020t.\n\t(arm1020t): Delete CPU.\n\t(arm9e): Add aliases for arm946e-s, arm966e-s and arm968e-s.\n\t(arm946e-s, arm966e-s, arm968e-s): Delete CPUs.\n\t(arm10e): Add aliases for arm1020e and arm1022e.\n\t(arm1020e, arm1022e): Delete CPU.\n\t* config/arm/arm.md (generic_sched): Remove entries that are now\n\thandled by aliases.\n\t(generic_vfp): Likewise.\n\t* config/arm/arm1020e.md: Simplify tuning selection based on alias\n\tchanges.\n\t* config/arm/arm-tune.md: Regenerated.\n\t* config/arm/arm-tables.opt: Regenerated.\n\nFrom-SVN: r265960", "tree": {"sha": "2fbf0a4bf7df3b214c14f5ec3b76c5110adf030f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fbf0a4bf7df3b214c14f5ec3b76c5110adf030f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69104d52ddfe7a10ba45729935562e4e1a1176c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69104d52ddfe7a10ba45729935562e4e1a1176c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69104d52ddfe7a10ba45729935562e4e1a1176c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69104d52ddfe7a10ba45729935562e4e1a1176c1/comments", "author": null, "committer": null, "parents": [{"sha": "1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd6990226fd92adf1e3c12a96c5776ec8efcb60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd6990226fd92adf1e3c12a96c5776ec8efcb60"}], "stats": {"total": 246, "additions": 72, "deletions": 174}, "files": [{"sha": "953f3e3a0194fd8cfc2021f4c0bb4fc7c0f36eb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -1,3 +1,25 @@\n+2018-11-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-cpus.in (arm7tdmi): Add an alias for arm7tdmi-s.\n+\t(arm7tdmi-s): Delete CPU.\n+\t(arm710t): Add aliases for arm720t and arm740t.\n+\t(arm720t, arm740t): Delete CPUs.\n+\t(arm920t): Add aliases for arm920, arm922t and arm940t.\n+\t(arm920, arm922t, arm940t): Delete CPUs.\n+\t(arm10tdmi): Add alias for arm1020t.\n+\t(arm1020t): Delete CPU.\n+\t(arm9e): Add aliases for arm946e-s, arm966e-s and arm968e-s.\n+\t(arm946e-s, arm966e-s, arm968e-s): Delete CPUs.\n+\t(arm10e): Add aliases for arm1020e and arm1022e.\n+\t(arm1020e, arm1022e): Delete CPU.\n+\t* config/arm/arm.md (generic_sched): Remove entries that are now\n+\thandled by aliases.\n+\t(generic_vfp): Likewise.\n+\t* config/arm/arm1020e.md: Simplify tuning selection based on alias\n+\tchanges.\n+\t* config/arm/arm-tune.md: Regenerated.\n+\t* config/arm/arm-tables.opt: Regenerated.\n+\n 2018-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87621"}, {"sha": "7189fc9210d2c0524fc73d4e15381ba6fee6142c", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 6, "deletions": 87, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -683,36 +683,19 @@ end cpu fa626\n \n # V4T Architecture Processors\n begin cpu arm7tdmi\n+ alias arm7tdmi-s\n  tune flags CO_PROC\n  architecture armv4t\n  costs fastmul\n end cpu arm7tdmi\n \n-begin cpu arm7tdmi-s\n- cname arm7tdmis\n- tune flags CO_PROC\n- architecture armv4t\n- costs fastmul\n-end cpu arm7tdmi-s\n-\n begin cpu arm710t\n+ alias arm720t arm740t\n  tune flags WBUF\n  architecture armv4t\n  costs fastmul\n end cpu arm710t\n \n-begin cpu arm720t\n- tune flags WBUF\n- architecture armv4t\n- costs fastmul\n-end cpu arm720t\n-\n-begin cpu arm740t\n- tune flags WBUF\n- architecture armv4t\n- costs fastmul\n-end cpu arm740t\n-\n begin cpu arm9\n  tune flags LDSCHED\n  architecture armv4t\n@@ -725,105 +708,41 @@ begin cpu arm9tdmi\n  costs fastmul\n end cpu arm9tdmi\n \n-begin cpu arm920\n- tune flags LDSCHED\n- architecture armv4t\n- costs fastmul\n-end cpu arm920\n-\n begin cpu arm920t\n+ alias arm920 arm922t arm940t ep9312\n  tune flags LDSCHED\n  architecture armv4t\n  costs fastmul\n end cpu arm920t\n \n-begin cpu arm922t\n- tune flags LDSCHED\n- architecture armv4t\n- costs fastmul\n-end cpu arm922t\n-\n-begin cpu arm940t\n- tune flags LDSCHED\n- architecture armv4t\n- costs fastmul\n-end cpu arm940t\n-\n-begin cpu ep9312\n- tune flags LDSCHED\n- architecture armv4t\n- costs fastmul\n-end cpu ep9312\n-\n \n # V5T Architecture Processors\n # These used VFPv1 which isn't supported by GCC\n begin cpu arm10tdmi\n+ alias arm1020t\n  tune flags LDSCHED\n  architecture armv5t\n  costs fastmul\n end cpu arm10tdmi\n \n-begin cpu arm1020t\n- tune flags LDSCHED\n- architecture armv5t\n- costs fastmul\n-end cpu arm1020t\n-\n \n # V5TE Architecture Processors\n begin cpu arm9e\n+ alias arm946e-s arm966e-s arm968e-s\n  tune flags LDSCHED\n  architecture armv5te+fp\n  option nofp remove ALL_FP\n  costs 9e\n end cpu arm9e\n \n-begin cpu arm946e-s\n- cname arm946es\n- tune flags LDSCHED\n- architecture armv5te+fp\n- option nofp remove ALL_FP\n- costs 9e\n-end cpu arm946e-s\n-\n-begin cpu arm966e-s\n- cname arm966es\n- tune flags LDSCHED\n- architecture armv5te+fp\n- option nofp remove ALL_FP\n- costs 9e\n-end cpu arm966e-s\n-\n-begin cpu arm968e-s\n- cname arm968es\n- tune flags LDSCHED\n- architecture armv5te+fp\n- option nofp remove ALL_FP\n- costs 9e\n-end cpu arm968e-s\n-\n begin cpu arm10e\n+ alias arm1020e arm1022e\n  tune flags LDSCHED\n  architecture armv5te+fp\n  option nofp remove ALL_FP\n  costs fastmul\n end cpu arm10e\n \n-begin cpu arm1020e\n- tune flags LDSCHED\n- architecture armv5te+fp\n- option nofp remove ALL_FP\n- costs fastmul\n-end cpu arm1020e\n-\n-begin cpu arm1022e\n- tune flags LDSCHED\n- architecture armv5te+fp\n- option nofp remove ALL_FP\n- costs fastmul\n-end cpu arm1022e\n-\n begin cpu xscale\n  tune flags LDSCHED XSCALE\n  architecture armv5te"}, {"sha": "b314ec30ede388ed6f660a0900106562ab32839d", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -42,66 +42,27 @@ Enum(processor_type) String(fa626) Value( TARGET_CPU_fa626)\n EnumValue\n Enum(processor_type) String(arm7tdmi) Value( TARGET_CPU_arm7tdmi)\n \n-EnumValue\n-Enum(processor_type) String(arm7tdmi-s) Value( TARGET_CPU_arm7tdmis)\n-\n EnumValue\n Enum(processor_type) String(arm710t) Value( TARGET_CPU_arm710t)\n \n-EnumValue\n-Enum(processor_type) String(arm720t) Value( TARGET_CPU_arm720t)\n-\n-EnumValue\n-Enum(processor_type) String(arm740t) Value( TARGET_CPU_arm740t)\n-\n EnumValue\n Enum(processor_type) String(arm9) Value( TARGET_CPU_arm9)\n \n EnumValue\n Enum(processor_type) String(arm9tdmi) Value( TARGET_CPU_arm9tdmi)\n \n-EnumValue\n-Enum(processor_type) String(arm920) Value( TARGET_CPU_arm920)\n-\n EnumValue\n Enum(processor_type) String(arm920t) Value( TARGET_CPU_arm920t)\n \n-EnumValue\n-Enum(processor_type) String(arm922t) Value( TARGET_CPU_arm922t)\n-\n-EnumValue\n-Enum(processor_type) String(arm940t) Value( TARGET_CPU_arm940t)\n-\n-EnumValue\n-Enum(processor_type) String(ep9312) Value( TARGET_CPU_ep9312)\n-\n EnumValue\n Enum(processor_type) String(arm10tdmi) Value( TARGET_CPU_arm10tdmi)\n \n-EnumValue\n-Enum(processor_type) String(arm1020t) Value( TARGET_CPU_arm1020t)\n-\n EnumValue\n Enum(processor_type) String(arm9e) Value( TARGET_CPU_arm9e)\n \n-EnumValue\n-Enum(processor_type) String(arm946e-s) Value( TARGET_CPU_arm946es)\n-\n-EnumValue\n-Enum(processor_type) String(arm966e-s) Value( TARGET_CPU_arm966es)\n-\n-EnumValue\n-Enum(processor_type) String(arm968e-s) Value( TARGET_CPU_arm968es)\n-\n EnumValue\n Enum(processor_type) String(arm10e) Value( TARGET_CPU_arm10e)\n \n-EnumValue\n-Enum(processor_type) String(arm1020e) Value( TARGET_CPU_arm1020e)\n-\n-EnumValue\n-Enum(processor_type) String(arm1022e) Value( TARGET_CPU_arm1022e)\n-\n EnumValue\n Enum(processor_type) String(xscale) Value( TARGET_CPU_xscale)\n "}, {"sha": "b9bcfa71e7ba6697d141e3c3bca264939b2cfb09", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -23,32 +23,28 @@\n (define_attr \"tune\"\n \t\"arm8,arm810,strongarm,\n \tfa526,fa626,arm7tdmi,\n-\tarm7tdmis,arm710t,arm720t,\n-\tarm740t,arm9,arm9tdmi,\n-\tarm920,arm920t,arm922t,\n-\tarm940t,ep9312,arm10tdmi,\n-\tarm1020t,arm9e,arm946es,\n-\tarm966es,arm968es,arm10e,\n-\tarm1020e,arm1022e,xscale,\n-\tiwmmxt,iwmmxt2,fa606te,\n-\tfa626te,fmp626,fa726te,\n-\tarm926ejs,arm1026ejs,arm1136js,\n-\tarm1136jfs,arm1176jzs,arm1176jzfs,\n-\tmpcorenovfp,mpcore,arm1156t2s,\n-\tarm1156t2fs,cortexm1,cortexm0,\n-\tcortexm0plus,cortexm1smallmultiply,cortexm0smallmultiply,\n-\tcortexm0plussmallmultiply,genericv7a,cortexa5,\n-\tcortexa7,cortexa8,cortexa9,\n-\tcortexa12,cortexa15,cortexa17,\n-\tcortexr4,cortexr4f,cortexr5,\n-\tcortexr7,cortexr8,cortexm7,\n-\tcortexm4,cortexm3,marvell_pj4,\n-\tcortexa15cortexa7,cortexa17cortexa7,cortexa32,\n-\tcortexa35,cortexa53,cortexa57,\n-\tcortexa72,cortexa73,exynosm1,\n-\txgene1,cortexa57cortexa53,cortexa72cortexa53,\n-\tcortexa73cortexa35,cortexa73cortexa53,cortexa55,\n-\tcortexa75,cortexa76,ares,\n-\tcortexa75cortexa55,cortexa76cortexa55,cortexm23,\n-\tcortexm33,cortexr52\"\n+\tarm710t,arm9,arm9tdmi,\n+\tarm920t,arm10tdmi,arm9e,\n+\tarm10e,xscale,iwmmxt,\n+\tiwmmxt2,fa606te,fa626te,\n+\tfmp626,fa726te,arm926ejs,\n+\tarm1026ejs,arm1136js,arm1136jfs,\n+\tarm1176jzs,arm1176jzfs,mpcorenovfp,\n+\tmpcore,arm1156t2s,arm1156t2fs,\n+\tcortexm1,cortexm0,cortexm0plus,\n+\tcortexm1smallmultiply,cortexm0smallmultiply,cortexm0plussmallmultiply,\n+\tgenericv7a,cortexa5,cortexa7,\n+\tcortexa8,cortexa9,cortexa12,\n+\tcortexa15,cortexa17,cortexr4,\n+\tcortexr4f,cortexr5,cortexr7,\n+\tcortexr8,cortexm7,cortexm4,\n+\tcortexm3,marvell_pj4,cortexa15cortexa7,\n+\tcortexa17cortexa7,cortexa32,cortexa35,\n+\tcortexa53,cortexa57,cortexa72,\n+\tcortexa73,exynosm1,xgene1,\n+\tcortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,\n+\tcortexa73cortexa53,cortexa55,cortexa75,\n+\tcortexa76,ares,cortexa75cortexa55,\n+\tcortexa76cortexa55,cortexm23,cortexm33,\n+\tcortexr52\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "c8dc9474b1b2c2aa699d38d9446e4e17d4617cf2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -384,7 +384,7 @@\n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else\n           (ior (eq_attr \"tune\" \"fa526,fa626,fa606te,fa626te,fmp626,fa726te,\\\n-                                arm926ejs,arm1020e,arm1026ejs,arm1136js,\\\n+                                arm926ejs,arm10e,arm1026ejs,arm1136js,\\\n                                 arm1136jfs,cortexa5,cortexa7,cortexa8,\\\n                                 cortexa9,cortexa12,cortexa15,cortexa17,\\\n                                 cortexa53,cortexa57,cortexm4,cortexm7,\\\n@@ -396,7 +396,7 @@\n (define_attr \"generic_vfp\" \"yes,no\"\n   (const (if_then_else\n \t  (and (eq_attr \"fpu\" \"vfp\")\n-\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa5,cortexa7,\\\n+\t       (eq_attr \"tune\" \"!arm10e,cortexa5,cortexa7,\\\n                                 cortexa8,cortexa9,cortexa53,cortexm4,\\\n                                 cortexm7,marvell_pj4,xgene1\")\n \t       (eq_attr \"tune_cortexr4\" \"no\"))"}, {"sha": "9b800f87e8cf0d3629caf62ea686492216f4889e", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69104d52ddfe7a10ba45729935562e4e1a1176c1/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=69104d52ddfe7a10ba45729935562e4e1a1176c1", "patch": "@@ -65,7 +65,7 @@\n \n ;; ALU operations with no shifted operand\n (define_insn_reservation \"1020alu_op\" 1 \n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"alu_imm,alus_imm,logic_imm,logics_imm,\\\n                        alu_sreg,alus_sreg,logic_reg,logics_reg,\\\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n@@ -77,7 +77,7 @@\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"1020alu_shift_op\" 1 \n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"alu_shift_imm,alus_shift_imm,\\\n                        logic_shift_imm,logics_shift_imm,\\\n                        extend,mov_shift,mvn_shift\"))\n@@ -88,7 +88,7 @@\n ;; the shift value in a second cycle. Pretend we take two cycles in\n ;; the execute stage.\n (define_insn_reservation \"1020alu_shift_reg_op\" 2 \n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n                        logic_shift_reg,logics_shift_reg,\\\n                        mov_shift_reg,mvn_shift_reg\"))\n@@ -105,31 +105,31 @@\n ;; The result of the \"smul\" and \"smulw\" instructions is not available\n ;; until after the memory stage.\n (define_insn_reservation \"1020mult1\" 2\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"smulxy,smulwy\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; The \"smlaxy\" and \"smlawx\" instructions require two iterations through\n ;; the execute stage; the result is available immediately following\n ;; the execute stage.\n (define_insn_reservation \"1020mult2\" 2\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"smlaxy,smlalxy,smlawx\"))\n  \"1020a_e*2,1020a_m,1020a_w\")\n \n ;; The \"smlalxy\", \"mul\", and \"mla\" instructions require two iterations\n ;; through the execute stage; the result is not available until after\n ;; the memory stage.\n (define_insn_reservation \"1020mult3\" 3\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"smlalxy,mul,mla\"))\n  \"1020a_e*2,1020a_m,1020a_w\")\n \n ;; The \"muls\" and \"mlas\" instructions loop in the execute stage for\n ;; four iterations in order to set the flags.  The value result is\n ;; available after three iterations.\n (define_insn_reservation \"1020mult4\" 3\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"muls,mlas\"))\n  \"1020a_e*4,1020a_m,1020a_w\")\n \n@@ -144,15 +144,15 @@\n ;; three iterations through the execute cycle, and make their results\n ;; available after the memory cycle.\n (define_insn_reservation \"1020mult5\" 4\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"umull,umlal,smull,smlal\"))\n  \"1020a_e*3,1020a_m,1020a_w\")\n \n ;; The \"umulls\", \"umlals\", \"smulls\", and \"smlals\" instructions loop in\n ;; the execute stage for five iterations in order to set the flags.\n ;; The value result is available after four iterations.\n (define_insn_reservation \"1020mult6\" 4\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"umulls,umlals,smulls,smlals\"))\n  \"1020a_e*5,1020a_m,1020a_w\")\n \n@@ -175,12 +175,12 @@\n ;; For 4byte loads there is a bypass from the load stage\n \n (define_insn_reservation \"1020load1_op\" 2\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"load_byte,load_4\"))\n  \"1020a_e+1020l_e,1020l_m,1020l_w\")\n \n (define_insn_reservation \"1020store1_op\" 0\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"store_4\"))\n  \"1020a_e+1020l_e,1020l_m,1020l_w\")\n \n@@ -210,22 +210,22 @@\n ;; PC, there are additional stalls; that is not modeled.\n \n (define_insn_reservation \"1020load2_op\" 2\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"load_8\"))\n  \"1020a_e+1020l_e,1020l_m,1020l_w\")\n \n (define_insn_reservation \"1020store2_op\" 0\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"store_8\"))\n  \"1020a_e+1020l_e,1020l_m,1020l_w\")\n \n (define_insn_reservation \"1020load34_op\" 3\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"load_12,load_16\"))\n  \"1020a_e+1020l_e,1020l_e+1020l_m,1020l_m,1020l_w\")\n \n (define_insn_reservation \"1020store34_op\" 0\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"store_12,store_16\"))\n  \"1020a_e+1020l_e,1020l_e+1020l_m,1020l_m,1020l_w\")\n \n@@ -242,7 +242,7 @@\n ;; therefore the minimum value.\n \n (define_insn_reservation \"1020branch_op\" 0\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"branch\"))\n  \"1020a_e\")\n \n@@ -251,7 +251,7 @@\n ;; than that.\n \n (define_insn_reservation \"1020call_op\" 32\n- (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+ (and (eq_attr \"tune\" \"arm10e\")\n       (eq_attr \"type\" \"call\"))\n  \"1020a_e*4\")\n \n@@ -272,7 +272,7 @@\n (exclusion_set \"v10_fmac,v10_ds\" \"v10_fmstat\")\n \n (define_attr \"vfp10\" \"yes,no\" \n-  (const (if_then_else (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n+  (const (if_then_else (and (eq_attr \"tune\" \"arm10e\")\n \t\t\t    (eq_attr \"fpu\" \"vfp\"))\n \t\t       (const_string \"yes\") (const_string \"no\"))))\n "}]}