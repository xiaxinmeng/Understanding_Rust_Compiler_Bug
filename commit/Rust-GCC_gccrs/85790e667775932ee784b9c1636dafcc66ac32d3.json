{"sha": "85790e667775932ee784b9c1636dafcc66ac32d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3OTBlNjY3Nzc1OTMyZWU3ODRiOWMxNjM2ZGFmY2M2NmFjMzJkMw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-13T10:19:03Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-13T10:19:03Z"}, "message": "re PR c/15236 (pedantic switch modifies treatment of non-ISO compliant enumerations)\n\n2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/15236\n\t* diagnostic.c (pedwarn_at): New.\n\t* toplev.h (pedwarn_at): Declare.\n\t* c-tree.h (build_enumerator): Update declaration.\n\t* c-decl.c (finish_enum): Update comment.\n\t(build_enumerator): Take a location parameter. Give a pedwarn but do\n\tnot perform any conversion.\n\t* c-parser.c (c_parser_enum_specifier): Set correct location for\n\tenumerator.\ntestsuite/\n\t* gcc.dg/pr15236.c: New.\n\t* gcc.dg/torture/pr25183.c: Update.\n\nFrom-SVN: r139050", "tree": {"sha": "1628ba21d162d8c904b22105327717febc42c784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1628ba21d162d8c904b22105327717febc42c784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85790e667775932ee784b9c1636dafcc66ac32d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85790e667775932ee784b9c1636dafcc66ac32d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85790e667775932ee784b9c1636dafcc66ac32d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85790e667775932ee784b9c1636dafcc66ac32d3/comments", "author": null, "committer": null, "parents": [{"sha": "374035cb20b323d0e95559499fc0089aa4cedff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374035cb20b323d0e95559499fc0089aa4cedff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374035cb20b323d0e95559499fc0089aa4cedff9"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "2ab8c8052c6491d679b6b45f27ceea8d13849262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -1,3 +1,15 @@\n+2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/15236\n+\t* diagnostic.c (pedwarn_at): New.\n+\t* toplev.h (pedwarn_at): Declare.\n+\t* c-tree.h (build_enumerator): Update declaration.\n+\t* c-decl.c (finish_enum): Update comment.\n+\t(build_enumerator): Take a location parameter. Give a pedwarn but do\n+\tnot perform any conversion.\n+\t* c-parser.c (c_parser_enum_specifier): Set correct location for\n+\tenumerator.\n+\n 2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 35635"}, {"sha": "e55e809b1f478c05e15cba4a8c9507f7442de29d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -5877,11 +5877,13 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \n \t  /* The ISO C Standard mandates enumerators to have type int,\n \t     even though the underlying type of an enum type is\n-\t     unspecified.  Here we convert any enumerators that fit in\n-\t     an int to type int, to avoid promotions to unsigned types\n-\t     when comparing integers with enumerators that fit in the\n-\t     int range.  When -pedantic is given, build_enumerator()\n-\t     would have already taken care of those that don't fit.  */\n+\t     unspecified.  However, GCC allows enumerators of any\n+\t     integer type as an extensions.  Here we convert any\n+\t     enumerators that fit in an int to type int, to avoid\n+\t     promotions to unsigned types when comparing integers with\n+\t     enumerators that fit in the int range.  When -pedantic is\n+\t     given, build_enumerator() would have already warned about\n+\t     those that don't fit.  */\n \t  if (int_fits_type_p (ini, integer_type_node))\n \t    tem = integer_type_node;\n \t  else\n@@ -5933,7 +5935,8 @@ finish_enum (tree enumtype, tree values, tree attributes)\n    Assignment of sequential values by default is handled here.  */\n \n tree\n-build_enumerator (struct c_enum_contents *the_enum, tree name, tree value)\n+build_enumerator (struct c_enum_contents *the_enum, tree name, tree value,\n+\t\t  location_t value_loc)\n {\n   tree decl, type;\n \n@@ -5967,14 +5970,13 @@ build_enumerator (struct c_enum_contents *the_enum, tree name, tree value)\n       if (the_enum->enum_overflow)\n \terror (\"overflow in enumeration values\");\n     }\n-\n-  if (pedantic && !int_fits_type_p (value, integer_type_node))\n-    {\n-      pedwarn (OPT_pedantic, \"ISO C restricts enumerator values to range of %<int%>\");\n-      /* XXX This causes -pedantic to change the meaning of the program.\n-\t Remove?  -zw 2004-03-15  */\n-      value = convert (integer_type_node, value);\n-    }\n+  /* Even though the underlying type of an enum is unspecified, the\n+     type of enumeration constants is explicitly defined as int\n+     (6.4.4.3/2 in the C99 Standard).  GCC allows any integer type as\n+     an extension.  */\n+  else if (!int_fits_type_p (value, integer_type_node))\n+    pedwarn_at (value_loc, OPT_pedantic, \n+\t\t\"ISO C restricts enumerator values to range of %<int%>\");\n \n   /* Set basis for default for next value.  */\n   the_enum->enum_next_value = build_binary_op (PLUS_EXPR, value,"}, {"sha": "6617145a6cbc4625f7603359130bfd2a7ced52d2", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -1630,6 +1630,7 @@ c_parser_enum_specifier (c_parser *parser)\n \t  bool seen_comma;\n \t  c_token *token;\n \t  location_t comma_loc;\n+\t  location_t value_loc;\n \t  if (c_parser_next_token_is_not (parser, CPP_NAME))\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n@@ -1641,15 +1642,19 @@ c_parser_enum_specifier (c_parser *parser)\n \t  enum_id = token->value;\n \t  /* Set the location in case we create a decl now.  */\n \t  c_parser_set_source_position_from_token (token);\n+\t  value_loc = token->location;\n \t  c_parser_consume_token (parser);\n \t  if (c_parser_next_token_is (parser, CPP_EQ))\n \t    {\n \t      c_parser_consume_token (parser);\n+\t      value_loc = c_parser_peek_token (parser)->location;\n+\t      /* This may call cb_line_change and alter the input_location.  */\n \t      enum_value = c_parser_expr_no_commas (parser, NULL).value;\n \t    }\n \t  else\n \t    enum_value = NULL_TREE;\n-\t  enum_decl = build_enumerator (&the_enum, enum_id, enum_value);\n+\t  enum_decl = build_enumerator (&the_enum, enum_id, enum_value, \n+\t\t\t\t\tvalue_loc);\n \t  TREE_CHAIN (enum_decl) = values;\n \t  values = enum_decl;\n \t  seen_comma = false;"}, {"sha": "fc76ee32b351151c1a89067fdf7185176945400f", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -462,7 +462,7 @@ extern void c_print_identifier (FILE *, tree, int);\n extern int quals_from_declspecs (const struct c_declspecs *);\n extern struct c_declarator *build_array_declarator (tree, struct c_declspecs *,\n \t\t\t\t\t\t    bool, bool);\n-extern tree build_enumerator (struct c_enum_contents *, tree, tree);\n+extern tree build_enumerator (struct c_enum_contents *, tree, tree, location_t);\n extern tree check_for_loop_decls (void);\n extern void mark_forward_parm_decls (void);\n extern void declare_parm_level (void);"}, {"sha": "54c2da7437457b8ef15c14b5412cc4defcc24e99", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -537,10 +537,10 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n   return report_diagnostic (&diagnostic);\n }\n \n-/* A \"pedantic\" warning: issues a warning unless -pedantic-errors was\n-   given on the command line, in which case it issues an error.  Use\n-   this for diagnostics required by the relevant language standard,\n-   if you have chosen not to make them errors.\n+/* A \"pedantic\" warning at LOCATION: issues a warning unless\n+   -pedantic-errors was given on the command line, in which case it\n+   issues an error.  Use this for diagnostics required by the relevant\n+   language standard, if you have chosen not to make them errors.\n \n    Note that these diagnostics are issued independent of the setting\n    of the -pedantic command-line switch.  To get a warning enabled\n@@ -550,6 +550,21 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n \n    Returns true if the warning was printed, false if it was inhibited.  */\n \n+bool\n+pedwarn_at (location_t location, int opt, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, location,  DK_PEDWARN);\n+  diagnostic.option_index = opt;\n+  va_end (ap);\n+  return report_diagnostic (&diagnostic);\n+}\n+\n+/* Equivalent to pedwarn_at using INPUT_LOCATION.  */\n+\n bool\n pedwarn (int opt, const char *gmsgid, ...)\n {"}, {"sha": "7fb2c7d4ed256c279ce5afc4c4eb80ae994025d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -1,3 +1,9 @@\n+2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/15236\n+\t* gcc.dg/pr15236.c: New.\n+\t* gcc.dg/torture/pr25183.c: Update.\n+\n 2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 35635"}, {"sha": "b01a4e8587328fddd9f0f162f7c0446a97f9c499", "filename": "gcc/testsuite/gcc.dg/pr15236.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15236.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15236.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15236.c?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -0,0 +1,9 @@\n+/* PR 15236: pedantic switch modifies treatment of non-ISO compliant\n+   enumerations.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wextra -pedantic-errors -Wconversion\" } */\n+typedef enum OMX_ERRORTYPE\n+{\n+  OMX_ErrorNone = 0,\n+  OMX_ErrorInsufficientResources = 0x80001000 /* { dg-error \"ISO C restricts enumerator values to range of .int.\" } */\n+} OMX_ERRORTYPE;"}, {"sha": "0157b806c7dc8fa2628703b8960c812405ff1682", "filename": "gcc/testsuite/gcc.dg/torture/pr25183.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25183.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25183.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25183.c?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -12,11 +12,11 @@ static enum err E_;\n int error()\n {\n   switch (E_) {\n-    case err_IO : break;  /* { dg-warning \"overflow\" } */\n-    case err_NM : break;  /* { dg-warning \"overflow\" } */\n-    case err_EOF : break; /* { dg-warning \"overflow\" } */\n-    case err_SE : break;  /* { dg-warning \"overflow\" } */\n-    case err_PT : break;  /* { dg-warning \"overflow\" } */\n+    case err_IO : break; \n+    case err_NM : break; \n+    case err_EOF : break;\n+    case err_SE : break; \n+    case err_PT : break; \n     default : return 0;\n   }\n }"}, {"sha": "ae61767035cb0b3e0777448db4a5fd91b9d0efaa", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85790e667775932ee784b9c1636dafcc66ac32d3/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=85790e667775932ee784b9c1636dafcc66ac32d3", "patch": "@@ -65,6 +65,7 @@ extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern bool pedwarn (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern bool pedwarn_at (location_t, int, const char *, ...) \n extern bool permerror (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern bool permerror_at (location_t, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(2,3);"}]}