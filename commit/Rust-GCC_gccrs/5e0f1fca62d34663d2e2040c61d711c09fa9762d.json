{"sha": "5e0f1fca62d34663d2e2040c61d711c09fa9762d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwZjFmY2E2MmQzNDY2M2QyZTIwNDBjNjFkNzExYzA5ZmE5NzYyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-22T12:15:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-22T12:15:53Z"}, "message": "trans.c (gnat_gimplify_expr): Add 'type' variable.\n\n\t* gcc-interface/trans.c (gnat_gimplify_expr): Add 'type' variable.\n\t<case NULL_EXPR>: Deal with unconstrained array types and use 'type'.\n\t<case ADDR_EXPR>: Use 'type'.\n\t<case DECL_EXPR>: Likewise.\n\nFrom-SVN: r217964", "tree": {"sha": "6ea64f4202d256fa9c39da415ea3c008c7f9f3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ea64f4202d256fa9c39da415ea3c008c7f9f3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0f1fca62d34663d2e2040c61d711c09fa9762d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f1fca62d34663d2e2040c61d711c09fa9762d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0f1fca62d34663d2e2040c61d711c09fa9762d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0f1fca62d34663d2e2040c61d711c09fa9762d/comments", "author": null, "committer": null, "parents": [{"sha": "0211f6178ac3f9b16aeaed322a70df6fe458472b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0211f6178ac3f9b16aeaed322a70df6fe458472b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0211f6178ac3f9b16aeaed322a70df6fe458472b"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "881c2f8f7ef30964c0d281482abafd4530810d4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e0f1fca62d34663d2e2040c61d711c09fa9762d", "patch": "@@ -1,3 +1,10 @@\n+2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_gimplify_expr): Add 'type' variable.\n+\t<case NULL_EXPR>: Deal with unconstrained array types and use 'type'.\n+\t<case ADDR_EXPR>: Use 'type'.\n+\t<case DECL_EXPR>: Likewise.\n+\n 2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/63931"}, {"sha": "3d27dde709fd24d293688652ebeb15df048ffe7a", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=5e0f1fca62d34663d2e2040c61d711c09fa9762d", "patch": "@@ -7657,6 +7657,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \t\t    gimple_seq *post_p ATTRIBUTE_UNUSED)\n {\n   tree expr = *expr_p;\n+  tree type = TREE_TYPE (expr);\n   tree op;\n \n   if (IS_ADA_STMT (expr))\n@@ -7665,16 +7666,17 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n   switch (TREE_CODE (expr))\n     {\n     case NULL_EXPR:\n-      /* If this is for a scalar, just make a VAR_DECL for it.  If for\n-\t an aggregate, get a null pointer of the appropriate type and\n-\t dereference it.  */\n-      if (AGGREGATE_TYPE_P (TREE_TYPE (expr)))\n-\t*expr_p = build1 (INDIRECT_REF, TREE_TYPE (expr),\n-\t\t\t  convert (build_pointer_type (TREE_TYPE (expr)),\n-\t\t\t\t   integer_zero_node));\n+      /* If this is an aggregate type, build a null pointer of the appropriate\n+\t type and dereference it.  */\n+      if (AGGREGATE_TYPE_P (type)\n+\t  || TREE_CODE (type) == UNCONSTRAINED_ARRAY_TYPE)\n+\t*expr_p = build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t\t  convert (build_pointer_type (type),\n+\t\t\t\t\t   integer_zero_node));\n+      /* Otherwise, just make a VAR_DECL.  */\n       else\n \t{\n-\t  *expr_p = create_tmp_var (TREE_TYPE (expr), NULL);\n+\t  *expr_p = create_tmp_var (type, NULL);\n \t  TREE_NO_WARNING (*expr_p) = 1;\n \t}\n \n@@ -7697,7 +7699,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n       if (TREE_CODE (op) == CONSTRUCTOR && TREE_CONSTANT (op))\n \t{\n \t  tree addr = build_fold_addr_expr (tree_output_constant_def (op));\n-\t  *expr_p = fold_convert (TREE_TYPE (expr), addr);\n+\t  *expr_p = fold_convert (type, addr);\n \t  return GS_ALL_DONE;\n \t}\n \n@@ -7711,7 +7713,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \t required if the type is passed by reference.  */\n       if ((TREE_CODE (op) == CONSTRUCTOR || TREE_CODE (op) == CALL_EXPR)\n \t  && AGGREGATE_TYPE_P (TREE_TYPE (op))\n-\t  && !AGGREGATE_TYPE_P (TREE_TYPE (expr)))\n+\t  && !AGGREGATE_TYPE_P (type))\n \t{\n \t  tree mod, new_var = create_tmp_var_raw (TREE_TYPE (op), \"C\");\n \t  gimple_add_tmp_var (new_var);"}, {"sha": "80deed0d419c34f584fa9baf7be6f54fae36c7b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e0f1fca62d34663d2e2040c61d711c09fa9762d", "patch": "@@ -1,3 +1,7 @@\n+2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/no_streams.ads: New test.\n+\n 2014-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/store-motion-fgcse-sm.c (dg-final): Cleanup"}, {"sha": "e5a07424a552313d15417ae1e4bbe95dfd92d5dc", "filename": "gcc/testsuite/gnat.dg/specs/no_streams.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fno_streams.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0f1fca62d34663d2e2040c61d711c09fa9762d/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fno_streams.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fno_streams.ads?ref=5e0f1fca62d34663d2e2040c61d711c09fa9762d", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+\n+pragma Restrictions (No_Streams);\n+\n+with Ada.Containers.Ordered_Maps;\n+\n+package No_Streams is\n+\n+  type Arr is new String (1..8);\n+\n+  package My_Ordered_Map is new Ada.Containers.Ordered_Maps\n+                                  (Key_Type => Natural, Element_Type => Arr);\n+\n+end No_Streams;"}]}