{"sha": "ebac3c0236c626f80b005af53505de5b79cba99d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhYzNjMDIzNmM2MjZmODBiMDA1YWY1MzUwNWRlNWI3OWNiYTk5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-24T14:23:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-24T14:23:18Z"}, "message": "re PR middle-end/86627 (Signed 128-bit division by 2 no longer expanded to RTL)\n\n\tPR middle-end/86627\n\t* expmed.c (expand_divmod): Punt if d == HOST_WIDE_INT_MIN\n\tand size > HOST_BITS_PER_WIDE_INT.  For size > HOST_BITS_PER_WIDE_INT\n\tand abs_d == d, do the power of two handling if profitable.\n\n\t* gcc.target/i386/pr86627.c: New test.\n\nFrom-SVN: r262948", "tree": {"sha": "72d98ce93aebf63b039d8879a807402db7e0c088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72d98ce93aebf63b039d8879a807402db7e0c088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebac3c0236c626f80b005af53505de5b79cba99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebac3c0236c626f80b005af53505de5b79cba99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebac3c0236c626f80b005af53505de5b79cba99d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebac3c0236c626f80b005af53505de5b79cba99d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "337dc307549968ed56e0ef7a60331e8a69e25b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337dc307549968ed56e0ef7a60331e8a69e25b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337dc307549968ed56e0ef7a60331e8a69e25b56"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "c7b921b48359a69a09fbc672c9b071be8479980d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebac3c0236c626f80b005af53505de5b79cba99d", "patch": "@@ -1,3 +1,10 @@\n+2018-07-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/86627\n+\t* expmed.c (expand_divmod): Punt if d == HOST_WIDE_INT_MIN\n+\tand size > HOST_BITS_PER_WIDE_INT.  For size > HOST_BITS_PER_WIDE_INT\n+\tand abs_d == d, do the power of two handling if profitable.\n+\n 2018-07-24  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Add BIT_FIELD_REF canonicalizations."}, {"sha": "101e7b88107702b06276cfcd94319d6b79751368", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ebac3c0236c626f80b005af53505de5b79cba99d", "patch": "@@ -4480,6 +4480,11 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\tHOST_WIDE_INT d = INTVAL (op1);\n \t\tunsigned HOST_WIDE_INT abs_d;\n \n+\t\t/* Not prepared to handle division/remainder by\n+\t\t   0xffffffffffffffff8000000000000000 etc.  */\n+\t\tif (d == HOST_WIDE_INT_MIN && size > HOST_BITS_PER_WIDE_INT)\n+\t\t  break;\n+\n \t\t/* Since d might be INT_MIN, we have to cast to\n \t\t   unsigned HOST_WIDE_INT before negating to avoid\n \t\t   undefined signed overflow.  */\n@@ -4522,9 +4527,7 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t     || (optab_handler (sdivmod_optab, int_mode)\n \t\t\t\t != CODE_FOR_nothing)))\n \t\t  ;\n-\t\telse if (EXACT_POWER_OF_2_OR_ZERO_P (abs_d)\n-\t\t\t && (size <= HOST_BITS_PER_WIDE_INT\n-\t\t\t     || abs_d != (unsigned HOST_WIDE_INT) d))\n+\t\telse if (EXACT_POWER_OF_2_OR_ZERO_P (abs_d))\n \t\t  {\n \t\t    if (rem_flag)\n \t\t      {"}, {"sha": "ca4d0bc8f35f5146ca2e99a4ab6d0853ced7985b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebac3c0236c626f80b005af53505de5b79cba99d", "patch": "@@ -1,5 +1,8 @@\n 2018-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/86627\n+\t* gcc.target/i386/pr86627.c: New test.\n+\n \tPR testsuite/86649\n \t* g++.dg/tree-ssa-/pr19476-1.C: Check dom2 dump instead of ccp1.\n \t* g++.dg/tree-ssa-/pr19476-5.C: Likewise."}, {"sha": "5aefbed0a0b958699a75567add3974c49fa396c4", "filename": "gcc/testsuite/gcc.target/i386/pr86627.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86627.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebac3c0236c626f80b005af53505de5b79cba99d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86627.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86627.c?ref=ebac3c0236c626f80b005af53505de5b79cba99d", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/86627 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"call\\[^\\n\\r]*__divti3\" } } */\n+\n+__int128_t\n+f1 (__int128_t a)\n+{\n+  return a / 2;\n+}\n+\n+__int128_t\n+f2 (__int128_t a)\n+{\n+  return a / -2;\n+}\n+\n+__int128_t\n+f3 (__int128_t a)\n+{\n+  return a / 0x4000000000000000LL;\n+}\n+\n+__int128_t\n+f4 (__int128_t a)\n+{\n+  return a / -0x4000000000000000LL;\n+}"}]}