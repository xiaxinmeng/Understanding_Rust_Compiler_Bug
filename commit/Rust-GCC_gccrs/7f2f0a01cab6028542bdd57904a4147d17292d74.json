{"sha": "7f2f0a01cab6028542bdd57904a4147d17292d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyZjBhMDFjYWI2MDI4NTQyYmRkNTc5MDRhNDE0N2QxNzI5MmQ3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-03T07:29:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-03T07:29:20Z"}, "message": "re PR target/58864 (ICE in connect_traces, at dwarf2cfi.c:NNNN)\n\n\tPR target/58864\n\t* dojump.c (save_pending_stack_adjust, restore_pending_stack_adjust):\n\tNew functions.\n\t* expr.h (struct saved_pending_stack_adjust): New type.\n\t(save_pending_stack_adjust, restore_pending_stack_adjust): New\n\tprototypes.\n\t* optabs.c (emit_conditional_move): Call save_pending_stack_adjust\n\tand get_last_insn before do_pending_stack_adjust, call\n\trestore_pending_stack_adjust after delete_insns_since.\n\t* expr.c (expand_expr_real_2): Don't call do_pending_stack_adjust\n\tbefore calling emit_conditional_move.\n\t* expmed.c (expand_sdiv_pow2): Likewise.\n\t* calls.c (expand_call): Use {save,restore}_pending_stack_adjust.\n\n\t* g++.dg/opt/pr58864.C: New test.\n\nFrom-SVN: r205618", "tree": {"sha": "4a5227f73abdd560a3d6b712c6c89fc4768357e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a5227f73abdd560a3d6b712c6c89fc4768357e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f2f0a01cab6028542bdd57904a4147d17292d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2f0a01cab6028542bdd57904a4147d17292d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f2f0a01cab6028542bdd57904a4147d17292d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2f0a01cab6028542bdd57904a4147d17292d74/comments", "author": null, "committer": null, "parents": [{"sha": "4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb"}], "stats": {"total": 114, "additions": 95, "deletions": 19}, "files": [{"sha": "f003eb1ed2486015ae3d6a408515ed73427eb5d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -1,3 +1,19 @@\n+2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/58864\n+\t* dojump.c (save_pending_stack_adjust, restore_pending_stack_adjust):\n+\tNew functions.\n+\t* expr.h (struct saved_pending_stack_adjust): New type.\n+\t(save_pending_stack_adjust, restore_pending_stack_adjust): New\n+\tprototypes.\n+\t* optabs.c (emit_conditional_move): Call save_pending_stack_adjust\n+\tand get_last_insn before do_pending_stack_adjust, call\n+\trestore_pending_stack_adjust after delete_insns_since.\n+\t* expr.c (expand_expr_real_2): Don't call do_pending_stack_adjust\n+\tbefore calling emit_conditional_move.\n+\t* expmed.c (expand_sdiv_pow2): Likewise.\n+\t* calls.c (expand_call): Use {save,restore}_pending_stack_adjust.\n+\n 2013-12-02  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/59322"}, {"sha": "7d6327f28eff0f68d341ad40534aba3e97be5720", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -2672,17 +2672,15 @@ expand_call (tree exp, rtx target, int ignore)\n \t recursion \"call\".  That way we know any adjustment after the tail\n \t recursion call can be ignored if we indeed use the tail\n \t call expansion.  */\n-      int save_pending_stack_adjust = 0;\n-      int save_stack_pointer_delta = 0;\n+      saved_pending_stack_adjust save;\n       rtx insns;\n       rtx before_call, next_arg_reg, after_args;\n \n       if (pass == 0)\n \t{\n \t  /* State variables we need to save and restore between\n \t     iterations.  */\n-\t  save_pending_stack_adjust = pending_stack_adjust;\n-\t  save_stack_pointer_delta = stack_pointer_delta;\n+\t  save_pending_stack_adjust (&save);\n \t}\n       if (pass)\n \tflags &= ~ECF_SIBCALL;\n@@ -3438,8 +3436,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t  /* Restore the pending stack adjustment now that we have\n \t     finished generating the sibling call sequence.  */\n \n-\t  pending_stack_adjust = save_pending_stack_adjust;\n-\t  stack_pointer_delta = save_stack_pointer_delta;\n+\t  restore_pending_stack_adjust (&save);\n \n \t  /* Prepare arg structure for next iteration.  */\n \t  for (i = 0; i < num_actuals; i++)"}, {"sha": "73df6d163d5a9b890cb403532fd80fc03cc0307e", "filename": "gcc/dojump.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -96,6 +96,29 @@ do_pending_stack_adjust (void)\n       pending_stack_adjust = 0;\n     }\n }\n+\n+/* Remember pending_stack_adjust/stack_pointer_delta.\n+   To be used around code that may call do_pending_stack_adjust (),\n+   but the generated code could be discarded e.g. using delete_insns_since.  */\n+\n+void\n+save_pending_stack_adjust (saved_pending_stack_adjust *save)\n+{\n+  save->x_pending_stack_adjust = pending_stack_adjust;\n+  save->x_stack_pointer_delta = stack_pointer_delta;\n+}\n+\n+/* Restore the saved pending_stack_adjust/stack_pointer_delta.  */\n+\n+void\n+restore_pending_stack_adjust (saved_pending_stack_adjust *save)\n+{\n+  if (inhibit_defer_pop == 0)\n+    {\n+      pending_stack_adjust = save->x_pending_stack_adjust;\n+      stack_pointer_delta = save->x_stack_pointer_delta;\n+    }\n+}\n \f\n /* Expand conditional expressions.  */\n "}, {"sha": "8e63cd5b5c579435b458ba6d2115571b028e090d", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -3736,11 +3736,6 @@ expand_sdiv_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n     {\n       rtx temp2;\n \n-      /* ??? emit_conditional_move forces a stack adjustment via\n-\t compare_from_rtx so, if the sequence is discarded, it will\n-\t be lost.  Do it now instead.  */\n-      do_pending_stack_adjust ();\n-\n       start_sequence ();\n       temp2 = copy_to_mode_reg (mode, op0);\n       temp = expand_binop (mode, add_optab, temp2, gen_int_mode (d - 1, mode),"}, {"sha": "4e0e54f25b5ae646b68587ce9bd79865f8ce5148", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -8801,12 +8801,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t  {\n \t    rtx insn;\n \n-\t    /* ??? Same problem as in expmed.c: emit_conditional_move\n-\t       forces a stack adjustment via compare_from_rtx, and we\n-\t       lose the stack adjustment if the sequence we are about\n-\t       to create is discarded.  */\n-\t    do_pending_stack_adjust ();\n-\n \t    start_sequence ();\n \n \t    /* Try to emit the conditional move.  */"}, {"sha": "e734ef440168712082e44c779c0023131ed5f700", "filename": "gcc/expr.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -473,6 +473,28 @@ extern void clear_pending_stack_adjust (void);\n /* Pop any previously-pushed arguments that have not been popped yet.  */\n extern void do_pending_stack_adjust (void);\n \n+/* Struct for saving/restoring of pending_stack_adjust/stack_pointer_delta\n+   values.  */\n+\n+struct saved_pending_stack_adjust\n+{\n+  /* Saved value of pending_stack_adjust.  */\n+  int x_pending_stack_adjust;\n+\n+  /* Saved value of stack_pointer_delta.  */\n+  int x_stack_pointer_delta;\n+};\n+\n+/* Remember pending_stack_adjust/stack_pointer_delta.\n+   To be used around code that may call do_pending_stack_adjust (),\n+   but the generated code could be discarded e.g. using delete_insns_since.  */\n+\n+extern void save_pending_stack_adjust (saved_pending_stack_adjust *);\n+\n+/* Restore the saved pending_stack_adjust/stack_pointer_delta.  */\n+\n+extern void restore_pending_stack_adjust (saved_pending_stack_adjust *);\n+\n /* Return the tree node and offset if a given argument corresponds to\n    a string constant.  */\n extern tree string_constant (tree, tree *);"}, {"sha": "e035af18c612e0a280e4e44e3884de929705808b", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -4566,8 +4566,10 @@ emit_conditional_move (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   if (!COMPARISON_P (comparison))\n     return NULL_RTX;\n \n-  do_pending_stack_adjust ();\n+  saved_pending_stack_adjust save;\n+  save_pending_stack_adjust (&save);\n   last = get_last_insn ();\n+  do_pending_stack_adjust ();\n   prepare_cmp_insn (XEXP (comparison, 0), XEXP (comparison, 1),\n \t\t    GET_CODE (comparison), NULL_RTX, unsignedp, OPTAB_WIDEN,\n \t\t    &comparison, &cmode);\n@@ -4587,6 +4589,7 @@ emit_conditional_move (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t}\n     }\n   delete_insns_since (last);\n+  restore_pending_stack_adjust (&save);\n   return NULL_RTX;\n }\n "}, {"sha": "5b7430605ffe652334737ba7fc18c09fa11f10a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -1,7 +1,12 @@\n+2013-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/58864\n+\t* g++.dg/opt/pr58864.C: New test.\n+\n 2013-12-02  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/59322\n-\t* gcc.c-torture/compile/pr59322.c: New test\n+\t* gcc.c-torture/compile/pr59322.c: New test.\n \n 2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n "}, {"sha": "b8587f298a050f9060d396fcc89d0e6b8e531255", "filename": "gcc/testsuite/g++.dg/opt/pr58864.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr58864.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2f0a01cab6028542bdd57904a4147d17292d74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr58864.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr58864.C?ref=7f2f0a01cab6028542bdd57904a4147d17292d74", "patch": "@@ -0,0 +1,21 @@\n+// PR target/58864\n+// { dg-do compile }\n+// { dg-options \"-Os\" }\n+// { dg-additional-options \"-march=i686\" { target { { i?86-*-* x86_64-*-* } && ia32 } } }\n+\n+struct A { A (); ~A (); };\n+struct B { B (); };\n+\n+float d, e;\n+\n+void\n+foo ()\n+{\n+  A a;\n+  float c = d;\n+  while (1)\n+    {\n+      B b;\n+      e = c ? -c : 0;\n+    }\n+}"}]}