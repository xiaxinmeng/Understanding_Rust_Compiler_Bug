{"sha": "3c07301f6b488870892ac4b79825ba8364b07104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNzMwMWY2YjQ4ODg3MDg5MmFjNGI3OTgyNWJhODM2NGIwNzEwNA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-29T12:24:04Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-29T12:24:04Z"}, "message": "calls.c, [...]: Call targetm.calls.function_arg...\n\n\t* calls.c, dse.c, expr.c, function.c: Call targetm.calls.function_arg,\n\ttargetm.calls.function_incoming_arg, and\n\ttargetm.calls.function_arg_advance instead of FUNCTION_ARG,\n\tFUNCTION_INCOMING_ARG, and FUNCTION_ARG_ADVANCE, respectively.\n\t* target.h (struct gcc_target): Add function_arg_advance,\n\tfunction_arg, and function_incoming_arg fields.\n\t* target-def.h (TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG):\n\t(TARGET_FUNCTION_INCOMING_ARG): Define.\n\t(TARGET_CALLS): Add TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG,\n\tand TARGET_FUNCTION_INCOMING_ARG.\n\t* targhooks.h (default_function_arg_advance): Declare.\n\t(default_function_arg, default_function_incoming_arg): Declare.\n\t* targhooks.c (default_function_arg_advance): New function.\n\t(default_function_arg, default_function_incoming_arg): New function.\n\t* config/i386/i386.c (function_arg_advance): Rename to...\n\t(ix86_function_arg_advance): ...this.  Make static.\n\t(function_arg): Rename to...\n\t(ix86_function_arg): ...this.  Make static.\n\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n\t(TARGET_FUNCTION_ARG): Define.\n\t* config/i386/i386.h (FUNCTION_ARG_ADVANCE): Delete.\n\t(FUNCTION_ARG): Delete.\n\t* config/i386/i386-protos.h (function_arg_advance): Delete prototype.\n\t(function_arg): Delete prototype.\n\nFrom-SVN: r161530", "tree": {"sha": "2a6f923525a191cb71e15517c9b90794e223784f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6f923525a191cb71e15517c9b90794e223784f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c07301f6b488870892ac4b79825ba8364b07104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c07301f6b488870892ac4b79825ba8364b07104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c07301f6b488870892ac4b79825ba8364b07104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c07301f6b488870892ac4b79825ba8364b07104/comments", "author": null, "committer": null, "parents": [{"sha": "0e228dd9078e5482b605b0d778347a77e4b69152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e228dd9078e5482b605b0d778347a77e4b69152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e228dd9078e5482b605b0d778347a77e4b69152"}], "stats": {"total": 260, "additions": 184, "deletions": 76}, "files": [{"sha": "38fd8a4ad5bf46e707f95242e05b1978d1a4e2bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -1,3 +1,30 @@\n+2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* calls.c, dse.c, expr.c, function.c: Call targetm.calls.function_arg,\n+\ttargetm.calls.function_incoming_arg, and\n+\ttargetm.calls.function_arg_advance instead of FUNCTION_ARG,\n+\tFUNCTION_INCOMING_ARG, and FUNCTION_ARG_ADVANCE, respectively.\n+\t* target.h (struct gcc_target): Add function_arg_advance,\n+\tfunction_arg, and function_incoming_arg fields.\n+\t* target-def.h (TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG):\n+\t(TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_CALLS): Add TARGET_FUNCTION_ARG_ADVANCE, TARGET_FUNCTION_ARG,\n+\tand TARGET_FUNCTION_INCOMING_ARG.\n+\t* targhooks.h (default_function_arg_advance): Declare.\n+\t(default_function_arg, default_function_incoming_arg): Declare.\n+\t* targhooks.c (default_function_arg_advance): New function.\n+\t(default_function_arg, default_function_incoming_arg): New function.\n+\t* config/i386/i386.c (function_arg_advance): Rename to...\n+\t(ix86_function_arg_advance): ...this.  Make static.\n+\t(function_arg): Rename to...\n+\t(ix86_function_arg): ...this.  Make static.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\t(TARGET_FUNCTION_ARG): Define.\n+\t* config/i386/i386.h (FUNCTION_ARG_ADVANCE): Delete.\n+\t(FUNCTION_ARG): Delete.\n+\t* config/i386/i386-protos.h (function_arg_advance): Delete prototype.\n+\t(function_arg): Delete prototype.\n+\n 2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* reginfo.c (init_reg_sets_1): Adjust comments."}, {"sha": "3b06ad397decf2f007b00d23717f531950dc5dc5", "filename": "gcc/calls.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -228,7 +228,7 @@ prepare_call_address (tree fndecl, rtx funexp, rtx static_chain_value,\n    It is zero if this call doesn't want a structure value.\n \n    NEXT_ARG_REG is the rtx that results from executing\n-     FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1)\n+     targetm.calls.function_arg (&args_so_far, VOIDmode, void_type_node, true)\n    just after all the args have had their registers assigned.\n    This could be whatever you like, but normally it is the first\n    arg-register beyond those used for args in this call,\n@@ -1127,17 +1127,18 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       args[i].unsignedp = unsignedp;\n       args[i].mode = mode;\n \n-      args[i].reg = FUNCTION_ARG (*args_so_far, mode, type,\n-\t\t\t\t  argpos < n_named_args);\n-#ifdef FUNCTION_INCOMING_ARG\n+      args[i].reg = targetm.calls.function_arg (args_so_far, mode, type,\n+\t\t\t\t\t\targpos < n_named_args);\n+\n       /* If this is a sibling call and the machine has register windows, the\n \t register window has to be unwinded before calling the routine, so\n \t arguments have to go into the incoming registers.  */\n-      args[i].tail_call_reg = FUNCTION_INCOMING_ARG (*args_so_far, mode, type,\n-\t\t\t\t\t\t     argpos < n_named_args);\n-#else\n-      args[i].tail_call_reg = args[i].reg;\n-#endif\n+      if (targetm.calls.function_incoming_arg != targetm.calls.function_arg)\n+\targs[i].tail_call_reg\n+\t  = targetm.calls.function_incoming_arg (args_so_far, mode, type,\n+\t\t\t\t\t\t argpos < n_named_args);\n+      else\n+\targs[i].tail_call_reg = args[i].reg;\n \n       if (args[i].reg)\n \targs[i].partial\n@@ -1192,8 +1193,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       /* Increment ARGS_SO_FAR, which has info about which arg-registers\n \t have been used, etc.  */\n \n-      FUNCTION_ARG_ADVANCE (*args_so_far, TYPE_MODE (type), type,\n-\t\t\t    argpos < n_named_args);\n+      targetm.calls.function_arg_advance (args_so_far, TYPE_MODE (type),\n+\t\t\t\t\t  type, argpos < n_named_args);\n     }\n }\n \n@@ -2828,14 +2829,15 @@ expand_call (tree exp, rtx target, int ignore)\n \n       /* Set up next argument register.  For sibling calls on machines\n \t with register windows this should be the incoming register.  */\n-#ifdef FUNCTION_INCOMING_ARG\n       if (pass == 0)\n-\tnext_arg_reg = FUNCTION_INCOMING_ARG (args_so_far, VOIDmode,\n-\t\t\t\t\t      void_type_node, 1);\n+\tnext_arg_reg = targetm.calls.function_incoming_arg (&args_so_far,\n+\t\t\t\t\t\t\t    VOIDmode,\n+\t\t\t\t\t\t\t    void_type_node,\n+\t\t\t\t\t\t\t    true);\n       else\n-#endif\n-\tnext_arg_reg = FUNCTION_ARG (args_so_far, VOIDmode,\n-\t\t\t\t     void_type_node, 1);\n+\tnext_arg_reg = targetm.calls.function_arg (&args_so_far,\n+\t\t\t\t\t\t   VOIDmode, void_type_node,\n+\t\t\t\t\t\t   true);\n \n       /* All arguments and registers used for the call must be set up by\n \t now!  */\n@@ -3422,7 +3424,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       argvec[count].mode = Pmode;\n       argvec[count].partial = 0;\n \n-      argvec[count].reg = FUNCTION_ARG (args_so_far, Pmode, NULL_TREE, 1);\n+      argvec[count].reg = targetm.calls.function_arg (&args_so_far,\n+\t\t\t\t\t\t      Pmode, NULL_TREE, true);\n       gcc_assert (targetm.calls.arg_partial_bytes (&args_so_far, Pmode,\n \t\t\t\t\t\t   NULL_TREE, 1) == 0);\n \n@@ -3438,7 +3441,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t  || reg_parm_stack_space > 0)\n \targs_size.constant += argvec[count].locate.size.constant;\n \n-      FUNCTION_ARG_ADVANCE (args_so_far, Pmode, (tree) 0, 1);\n+      targetm.calls.function_arg_advance (&args_so_far, Pmode, (tree) 0, true);\n \n       count++;\n     }\n@@ -3497,7 +3500,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       argvec[count].value = val;\n       argvec[count].mode = mode;\n \n-      argvec[count].reg = FUNCTION_ARG (args_so_far, mode, NULL_TREE, 1);\n+      argvec[count].reg = targetm.calls.function_arg (&args_so_far, mode,\n+\t\t\t\t\t\t      NULL_TREE, true);\n \n       argvec[count].partial\n \t= targetm.calls.arg_partial_bytes (&args_so_far, mode, NULL_TREE, 1);\n@@ -3517,7 +3521,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t  || reg_parm_stack_space > 0)\n \targs_size.constant += argvec[count].locate.size.constant;\n \n-      FUNCTION_ARG_ADVANCE (args_so_far, mode, (tree) 0, 1);\n+      targetm.calls.function_arg_advance (&args_so_far, mode, (tree) 0, true);\n     }\n \n   /* If this machine requires an external definition for library\n@@ -3826,7 +3830,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t       build_function_type (tfom, NULL_TREE),\n \t       original_args_size.constant, args_size.constant,\n \t       struct_value_size,\n-\t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n+\t       targetm.calls.function_arg (&args_so_far,\n+\t\t\t\t\t   VOIDmode, void_type_node, true),\n \t       valreg,\n \t       old_inhibit_defer_pop + 1, call_fusage, flags, & args_so_far);\n "}, {"sha": "4a0e3062212183820b236c56a79fca4f52403c6b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -180,9 +180,6 @@ extern void ix86_expand_truncdf_32 (rtx, rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n-extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t  tree, int);\n #endif\t/* TREE_CODE  */\n \n #endif\t/* RTX_CODE  */"}, {"sha": "d94b47f191a4d3093adc47e1bf57bb24c36a72ff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -6061,9 +6061,13 @@ function_arg_advance_ms_64 (CUMULATIVE_ARGS *cum, HOST_WIDE_INT bytes,\n     }\n }\n \n-void\n-function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t      tree type, int named)\n+/* Update the data in CUM to advance over an argument of mode MODE and\n+   data type TYPE.  (TYPE is null for libcalls where that information\n+   may not be available.)  */\n+\n+static void\n+ix86_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, int named)\n {\n   HOST_WIDE_INT bytes, words;\n \n@@ -6298,9 +6302,19 @@ function_arg_ms_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return gen_reg_or_parallel (mode, orig_mode, regno);\n }\n \n-rtx\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode omode,\n-\t      tree type, int named)\n+/* Return where to put the arguments to a function.\n+   Return zero to push the argument on the stack, or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.  TYPE is the data type of the\n+   argument.  It is null for libcalls where that information may not be\n+   available.  CUM gives information about the preceding args and about\n+   the function being called.  NAMED is nonzero if this argument is a\n+   named parameter (otherwise it is an extra parameter matching an\n+   ellipsis).  */\n+\n+static rtx\n+ix86_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode omode,\n+\t\t   const_tree type, int named)\n {\n   enum machine_mode mode = omode;\n   HOST_WIDE_INT bytes, words;\n@@ -30874,6 +30888,10 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #define TARGET_SETUP_INCOMING_VARARGS ix86_setup_incoming_varargs\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK ix86_must_pass_in_stack\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE ix86_function_arg_advance\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG ix86_function_arg\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE ix86_pass_by_reference\n #undef TARGET_INTERNAL_ARG_POINTER"}, {"sha": "afe05f9f6db422c8d691a3bb929438c5eab7dfb9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -1591,29 +1591,6 @@ typedef struct ix86_args {\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-  function_arg_advance (&(CUM), (MODE), (TYPE), (NAMED))\n-\n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}, {"sha": "98861f11044003f2f1f52d5097f144b59836328c", "filename": "gcc/dse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -2326,7 +2326,8 @@ get_call_args (rtx call_insn, tree fn, rtx *args, int nargs)\n        arg = TREE_CHAIN (arg), idx++)\n     {\n       enum machine_mode mode = TYPE_MODE (TREE_VALUE (arg));\n-      rtx reg = FUNCTION_ARG (args_so_far, mode, NULL_TREE, 1), link, tmp;\n+      rtx reg, link, tmp;\n+      reg = targetm.calls.function_arg (&args_so_far, mode, NULL_TREE, true);\n       if (!reg || !REG_P (reg) || GET_MODE (reg) != mode\n \t  || GET_MODE_CLASS (mode) != MODE_INT)\n \treturn false;\n@@ -2360,7 +2361,7 @@ get_call_args (rtx call_insn, tree fn, rtx *args, int nargs)\n       if (tmp)\n \targs[idx] = tmp;\n \n-      FUNCTION_ARG_ADVANCE (args_so_far, mode, NULL_TREE, 1);\n+      targetm.calls.function_arg_advance (&args_so_far, mode, NULL_TREE, true);\n     }\n   if (arg != void_list_node || idx != nargs)\n     return false;"}, {"sha": "2763dc91991456b0415be526b3013f77d2ff05a0", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -1276,12 +1276,14 @@ block_move_libcall_safe_for_call_parm (void)\n     for ( ; arg != void_list_node ; arg = TREE_CHAIN (arg))\n       {\n \tenum machine_mode mode = TYPE_MODE (TREE_VALUE (arg));\n-\trtx tmp = FUNCTION_ARG (args_so_far, mode, NULL_TREE, 1);\n+\trtx tmp = targetm.calls.function_arg (&args_so_far, mode,\n+\t\t\t\t\t      NULL_TREE, true);\n \tif (!tmp || !REG_P (tmp))\n \t  return false;\n \tif (targetm.calls.arg_partial_bytes (&args_so_far, mode, NULL, 1))\n \t  return false;\n-\tFUNCTION_ARG_ADVANCE (args_so_far, mode, NULL_TREE, 1);\n+\ttargetm.calls.function_arg_advance (&args_so_far, mode,\n+\t\t\t\t\t    NULL_TREE, true);\n       }\n   }\n   return true;"}, {"sha": "8a03c5ac42c73eb558874ad8c99884d512599945", "filename": "gcc/function.c", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -2374,13 +2374,10 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n       return;\n     }\n \n-#ifdef FUNCTION_INCOMING_ARG\n-  entry_parm = FUNCTION_INCOMING_ARG (all->args_so_far, data->promoted_mode,\n-\t\t\t\t      data->passed_type, data->named_arg);\n-#else\n-  entry_parm = FUNCTION_ARG (all->args_so_far, data->promoted_mode,\n-\t\t\t     data->passed_type, data->named_arg);\n-#endif\n+  entry_parm = targetm.calls.function_incoming_arg (&all->args_so_far,\n+\t\t\t\t\t\t    data->promoted_mode,\n+\t\t\t\t\t\t    data->passed_type,\n+\t\t\t\t\t\t    data->named_arg);\n \n   if (entry_parm == 0)\n     data->promoted_mode = data->passed_mode;\n@@ -2404,13 +2401,9 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n       if (targetm.calls.pretend_outgoing_varargs_named (&all->args_so_far))\n \t{\n \t  rtx tem;\n-#ifdef FUNCTION_INCOMING_ARG\n-\t  tem = FUNCTION_INCOMING_ARG (all->args_so_far, data->promoted_mode,\n-\t\t\t\t       data->passed_type, true);\n-#else\n-\t  tem = FUNCTION_ARG (all->args_so_far, data->promoted_mode,\n-\t\t\t      data->passed_type, true);\n-#endif\n+\t  tem = targetm.calls.function_incoming_arg (&all->args_so_far,\n+\t\t\t\t\t\t     data->promoted_mode,\n+\t\t\t\t\t\t     data->passed_type, true);\n \t  in_regs = tem != NULL;\n \t}\n     }\n@@ -3275,8 +3268,8 @@ assign_parms (tree fndecl)\n       set_decl_incoming_rtl (parm, data.entry_parm, data.passed_pointer);\n \n       /* Update info on where next arg arrives in registers.  */\n-      FUNCTION_ARG_ADVANCE (all.args_so_far, data.promoted_mode,\n-\t\t\t    data.passed_type, data.named_arg);\n+      targetm.calls.function_arg_advance (&all.args_so_far, data.promoted_mode,\n+\t\t\t\t\t  data.passed_type, data.named_arg);\n \n       assign_parm_adjust_stack_rtl (&data);\n \n@@ -3465,8 +3458,8 @@ gimplify_parameters (void)\n \tcontinue;\n \n       /* Update info on where next arg arrives in registers.  */\n-      FUNCTION_ARG_ADVANCE (all.args_so_far, data.promoted_mode,\n-\t\t\t    data.passed_type, data.named_arg);\n+      targetm.calls.function_arg_advance (&all.args_so_far, data.promoted_mode,\n+\t\t\t\t\t  data.passed_type, data.named_arg);\n \n       /* ??? Once upon a time variable_size stuffed parameter list\n \t SAVE_EXPRs (amongst others) onto a pending sizes list.  This"}, {"sha": "a0c2ca60f1a4147d1a85f00dc2ce274a300b1b2d", "filename": "gcc/target-def.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -712,6 +712,22 @@\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_false\n #define TARGET_ARG_PARTIAL_BYTES hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n \n+#ifndef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE default_function_arg_advance\n+#endif\n+\n+#ifndef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG default_function_arg\n+#endif\n+\n+#ifndef TARGET_FUNCTION_INCOMING_ARG\n+#ifndef FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG TARGET_FUNCTION_ARG\n+#else\n+#define TARGET_FUNCTION_INCOMING_ARG default_function_incoming_arg\n+#endif\n+#endif\n+\n #define TARGET_FUNCTION_VALUE default_function_value\n #define TARGET_LIBCALL_VALUE default_libcall_value\n #define TARGET_FUNCTION_VALUE_REGNO_P default_function_value_regno_p\n@@ -739,6 +755,9 @@\n    TARGET_MUST_PASS_IN_STACK,\t\t\t\t\t\\\n    TARGET_CALLEE_COPIES,\t\t\t\t\t\\\n    TARGET_ARG_PARTIAL_BYTES,\t\t\t\t\t\\\n+   TARGET_FUNCTION_ARG_ADVANCE,\t\t\t\t\t\\\n+   TARGET_FUNCTION_ARG,\t\t\t\t\t\t\\\n+   TARGET_FUNCTION_INCOMING_ARG,\t\t\t\t\\\n    TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN,\t\t\t\\\n    TARGET_FUNCTION_VALUE,\t\t\t\t\t\\\n    TARGET_LIBCALL_VALUE,\t\t\t\t\t\\"}, {"sha": "6ced77061cfa1ff34c4185789afd07e9589cdc37", "filename": "gcc/target.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -1020,6 +1020,26 @@ struct gcc_target\n     int (* arg_partial_bytes) (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n \t\t\t       tree type, bool named);\n \n+    /* Update the state in CA to advance past an argument in the\n+       argument list.  The values MODE, TYPE, and NAMED describe that\n+       argument.  */\n+    void (*function_arg_advance) (CUMULATIVE_ARGS *ca,\n+\t\t\t\t  enum machine_mode mode, const_tree type,\n+\t\t\t\t  bool named);\n+\n+    /* Return zero if the argument described by the state of CA should\n+       be placed on a stack, or a hard register in which to store the\n+       argument.  The values MODE, TYPE, and NAMED describe that\n+       argument.  */\n+    rtx (*function_arg) (const CUMULATIVE_ARGS *ca,\n+\t\t\t enum machine_mode mode, const_tree type, bool named);\n+\n+    /* Likewise, but for machines with register windows.  Return the\n+       location where the argument will appear to the callee.  */\n+    rtx (*function_incoming_arg) (const CUMULATIVE_ARGS *ca,\n+\t\t\t\t  enum machine_mode mode,\n+\t\t\t\t  const_tree type, bool named);\n+\n     /* Return the diagnostic message string if function without a prototype\n        is not allowed for this 'val' argument; NULL otherwise. */\n     const char *(*invalid_arg_for_unprototyped_fn) (const_tree typelist,"}, {"sha": "f2fe0795fbce51ea64cbaa330f81c77d8dcf9aa0", "filename": "gcc/targhooks.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -543,6 +543,49 @@ hook_int_CUMULATIVE_ARGS_mode_tree_bool_0 (\n   return 0;\n }\n \n+void\n+default_function_arg_advance (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n+\t\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t      const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t      bool named ATTRIBUTE_UNUSED)\n+{\n+#ifdef FUNCTION_ARG_ADVANCE\n+  CUMULATIVE_ARGS args = *ca;\n+  FUNCTION_ARG_ADVANCE (args, mode, CONST_CAST_TREE (type), named);\n+  *ca = args;\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n+rtx\n+default_function_arg (const CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n+\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t      const_tree type ATTRIBUTE_UNUSED,\n+\t\t      bool named ATTRIBUTE_UNUSED)\n+{\n+#ifdef FUNCTION_ARG\n+  return FUNCTION_ARG (*(CONST_CAST (CUMULATIVE_ARGS *, ca)), mode,\n+\t\t       CONST_CAST_TREE (type), named);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n+rtx\n+default_function_incoming_arg (const CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n+\t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t       bool named ATTRIBUTE_UNUSED)\n+{\n+#ifdef FUNCTION_INCOMING_ARG\n+  return FUNCTION_INCOMING_ARG (*(CONST_CAST (CUMULATIVE_ARGS *, ca)), mode,\n+\t\t\t\tCONST_CAST_TREE (type), named);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n void\n hook_void_bitmap (bitmap regs ATTRIBUTE_UNUSED)\n {"}, {"sha": "393b12f1367768a690fe5cab3be6f6e4d2d7bd6b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c07301f6b488870892ac4b79825ba8364b07104/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3c07301f6b488870892ac4b79825ba8364b07104", "patch": "@@ -101,6 +101,12 @@ extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n extern const char *hook_invalid_arg_for_unprototyped_fn\n   (const_tree, const_tree, const_tree);\n+extern void default_function_arg_advance\n+  (CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n+extern rtx default_function_arg\n+  (const CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n+extern rtx default_function_incoming_arg\n+  (const CUMULATIVE_ARGS *, enum machine_mode, const_tree, bool);\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_libcall_value (enum machine_mode, const_rtx);"}]}