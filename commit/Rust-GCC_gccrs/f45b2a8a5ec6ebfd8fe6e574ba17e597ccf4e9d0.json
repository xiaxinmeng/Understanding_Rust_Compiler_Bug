{"sha": "f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1YjJhOGE1ZWM2ZWJmZDhmZTZlNTc0YmExN2U1OTdjY2Y0ZTlkMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-01-08T00:16:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-01-08T00:16:18Z"}, "message": "re PR tree-optimization/51600 (ice in estimate_local_effects)\n\n\n\tPR tree-optimization/51600\n\t* ipa-inline-analysis.c (estimate_edge_devirt_benefit): Disable code\n\tthat benefits small functions.\n\nFrom-SVN: r182984", "tree": {"sha": "b3aab0905364c29c02675c08ef7c53d867fb35a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3aab0905364c29c02675c08ef7c53d867fb35a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/comments", "author": null, "committer": null, "parents": [{"sha": "db22a743fc777137c3d26fba9642dee8eab97eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db22a743fc777137c3d26fba9642dee8eab97eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db22a743fc777137c3d26fba9642dee8eab97eab"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "f5cfe23c62c8e9ae01e5308576f92e1f4d901940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "patch": "@@ -1,3 +1,13 @@\n+2012-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/51600\n+\t* ipa-inline-analysis.c (estimate_edge_devirt_benefit): Disable code\n+\tthat benefits small functions.\n+\n+2012-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (want_inline_small_function_p): Fix formating.\n+\n 2012-01-07  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/51680"}, {"sha": "5778e6851b967c65e1d27b350ff244a2976a2bad", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "patch": "@@ -2202,22 +2202,32 @@ estimate_edge_devirt_benefit (struct cgraph_edge *ie,\n \t\t\t      VEC (tree, heap) *known_binfos)\n {\n   tree target;\n-  struct cgraph_node *callee;\n-  struct inline_summary *isummary;\n-  int edge_size = 0, edge_time = 0;\n+  int time_diff, size_diff;\n \n-  if (!known_vals || !known_binfos)\n+  if (!known_vals && !known_binfos)\n     return;\n \n   target = ipa_get_indirect_edge_target (ie, known_vals, known_binfos);\n   if (!target)\n     return;\n \n   /* Account for difference in cost between indirect and direct calls.  */\n-  *size -= ((eni_size_weights.indirect_call_cost - eni_size_weights.call_cost)\n-\t    * INLINE_SIZE_SCALE);\n-  *time -= ((eni_time_weights.indirect_call_cost - eni_time_weights.call_cost)\n-\t    * INLINE_TIME_SCALE * prob / REG_BR_PROB_BASE);\n+  size_diff = ((eni_size_weights.indirect_call_cost - eni_size_weights.call_cost)\n+\t        * INLINE_SIZE_SCALE);\n+  *size -= size_diff;\n+  time_diff = ((eni_time_weights.indirect_call_cost - eni_time_weights.call_cost)\n+\t       * INLINE_TIME_SCALE * prob / REG_BR_PROB_BASE);\n+  *time -= time_diff;\n+\n+  /* TODO: This code is trying to benefit indirect calls that will be inlined later.\n+     The logic however do not belong into local size/time estimates and can not be\n+     done here, or the accounting of changes will get wrong and we result with \n+     negative function body sizes.  We need to introduce infrastructure for independent\n+     benefits to the inliner.  */\n+#if 0\n+  struct cgraph_node *callee;\n+  struct inline_summary *isummary;\n+  int edge_size, edge_time, time_diff, size_diff;\n \n   callee = cgraph_get_node (target);\n   if (!callee || !callee->analyzed)\n@@ -2229,22 +2239,20 @@ estimate_edge_devirt_benefit (struct cgraph_edge *ie,\n   estimate_edge_size_and_time (ie, &edge_size, &edge_time, prob);\n \n   /* Count benefit only from functions that definitely will be inlined\n-     if additional context from NODE's caller were available.  */\n-  if (edge_size >= isummary->size * INLINE_SIZE_SCALE)\n+     if additional context from NODE's caller were available. \n+\n+     We just account overall size change by inlining.  TODO:\n+     we really need to add sort of benefit metrics for these kind of\n+     cases. */\n+  if (edge_size - size_diff >= isummary->size * INLINE_SIZE_SCALE)\n     {\n       /* Subtract size and time that we added for edge IE.  */\n-      *size -= edge_size;\n-      *time -= edge_time;\n-\n-      /* Subtract benefit from inlining devirtualized call.  */\n-      *size -= edge_size - isummary->size * INLINE_SIZE_SCALE;\n-      *time -= edge_time - (isummary->time * INLINE_TIME_SCALE * prob\n-\t\t\t    / REG_BR_PROB_BASE);\n+      *size -= edge_size - size_diff;\n \n-      /* TODO: estimate benefit from optimizing CALLEE's body provided\n-\t additional context from IE call site.\n-\t For insipiration see ipa-cp.c: devirtualization_time_bonus().  */\n+      /* Account inlined call.  */\n+      *size += isummary->size * INLINE_SIZE_SCALE;\n     }\n+#endif\n }\n \n "}, {"sha": "3385000ec004d20572de789791b842a1cf1a92a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "patch": "@@ -1,3 +1,8 @@\n+2012-01-07  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/51600\n+\t* g++.dg/torture/pr51600.C: New testcase.\n+\n 2012-01-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR gcov-profile/51715"}, {"sha": "6180360776273a4f4169f90b390852e32f524d7b", "filename": "gcc/testsuite/g++.dg/torture/pr51600.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51600.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51600.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51600.C?ref=f45b2a8a5ec6ebfd8fe6e574ba17e597ccf4e9d0", "patch": "@@ -0,0 +1,16 @@\n+template<class T> inline T min(T a, T b) { return a < b ? a : b; }\n+double cornerbound(double *P, double (*m)(double, double))\n+{\n+  double b=m(P[0],P[3]);\n+  return m(b,P[12]);\n+}\n+void bound(double *P, double (*m)(double, double), double b)\n+{\n+  m(b,cornerbound(P,m));\n+}\n+void bounds(double fuzz, unsigned maxdepth)\n+{\n+  double Px[]={};\n+  double bx=Px[0];\n+  bound(Px,min,bx);\n+}"}]}