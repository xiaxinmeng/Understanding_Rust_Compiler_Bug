{"sha": "44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjZDY4MTAwMzAyZmZhNTI4OGI5YzhiYzdhNTRmOGQzMzdmNGFhNg==", "commit": {"author": {"name": "Wei Guozhi", "email": "carrot@google.com", "date": "2012-07-01T15:14:52Z"}, "committer": {"name": "Wei Guozhi", "email": "carrot@gcc.gnu.org", "date": "2012-07-01T15:14:52Z"}, "message": "re PR target/53447 (missed optimization of 64bit ALU operation with small constant)\n\n\tPR target/53447\n\t* config/arm/arm-protos.h (const_ok_for_dimode_op): New prototype.\n\t* config/arm/arm.c (const_ok_for_dimode_op): New function.\n\t* config/arm/constraints.md (Dd): New constraint.\n\t* config/arm/predicates.md (arm_adddi_operand): New predicate.\n\t* config/arm/arm.md (adddi3): Extend it to handle constants.\n\t(arm_adddi3): Likewise.\n\t(addsi3_carryin_<optab>): Extend it to handle sbc case.\n\t(addsi3_carryin_alt2_<optab>): Likewise.\n\t* config/arm/neon.md (adddi3_neon): Extend it to handle constants.\n\n\t* gcc.target/arm/pr53447-1.c: New testcase.\n\t* gcc.target/arm/pr53447-2.c: New testcase.\n\t* gcc.target/arm/pr53447-3.c: New testcase.\n\t* gcc.target/arm/pr53447-4.c: New testcase.\n\nFrom-SVN: r189102", "tree": {"sha": "ae6d3e858f90da47724dbd2d1e12e8356d7df9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6d3e858f90da47724dbd2d1e12e8356d7df9d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/comments", "author": {"login": "weiguozhi", "id": 57237827, "node_id": "MDQ6VXNlcjU3MjM3ODI3", "avatar_url": "https://avatars.githubusercontent.com/u/57237827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiguozhi", "html_url": "https://github.com/weiguozhi", "followers_url": "https://api.github.com/users/weiguozhi/followers", "following_url": "https://api.github.com/users/weiguozhi/following{/other_user}", "gists_url": "https://api.github.com/users/weiguozhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiguozhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiguozhi/subscriptions", "organizations_url": "https://api.github.com/users/weiguozhi/orgs", "repos_url": "https://api.github.com/users/weiguozhi/repos", "events_url": "https://api.github.com/users/weiguozhi/events{/privacy}", "received_events_url": "https://api.github.com/users/weiguozhi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9faeb49326953e7f0f8ec1d36d5ae76091babba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9faeb49326953e7f0f8ec1d36d5ae76091babba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9faeb49326953e7f0f8ec1d36d5ae76091babba9"}], "stats": {"total": 138, "additions": 117, "deletions": 21}, "files": [{"sha": "ec8b683b9460f5fdcfcbf1acb8f4c5be1061d7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -1,3 +1,16 @@\n+2012-07-01  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/53447\n+\t* config/arm/arm-protos.h (const_ok_for_dimode_op): New prototype.\n+\t* config/arm/arm.c (const_ok_for_dimode_op): New function.\n+\t* config/arm/constraints.md (Dd): New constraint.\n+\t* config/arm/predicates.md (arm_adddi_operand): New predicate.\n+\t* config/arm/arm.md (adddi3): Extend it to handle constants.\n+\t(arm_adddi3): Likewise.\n+\t(addsi3_carryin_<optab>): Extend it to handle sbc case.\n+\t(addsi3_carryin_alt2_<optab>): Likewise.\n+\t* config/arm/neon.md (adddi3_neon): Extend it to handle constants.\n+\n 2012-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* coverage.c (bbg_file_stamp): New."}, {"sha": "3cc4adb8e3765bc36aaccb83d7213b495f177d9d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -50,6 +50,7 @@ extern int arm_hard_regno_mode_ok (unsigned int, enum machine_mode);\n extern bool arm_modes_tieable_p (enum machine_mode, enum machine_mode);\n extern int const_ok_for_arm (HOST_WIDE_INT);\n extern int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n+extern int const_ok_for_dimode_op (HOST_WIDE_INT, enum rtx_code);\n extern int arm_split_constant (RTX_CODE, enum machine_mode, rtx,\n \t\t\t       HOST_WIDE_INT, rtx, rtx, int);\n extern RTX_CODE arm_canonicalize_comparison (RTX_CODE, rtx *, rtx *);"}, {"sha": "6472b6147cd813370aab8392d6e590f75544246c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -2507,6 +2507,28 @@ const_ok_for_op (HOST_WIDE_INT i, enum rtx_code code)\n     }\n }\n \n+/* Return true if I is a valid di mode constant for the operation CODE.  */\n+int\n+const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n+{\n+  HOST_WIDE_INT hi_val = (i >> 32) & 0xFFFFFFFF;\n+  HOST_WIDE_INT lo_val = i & 0xFFFFFFFF;\n+  rtx hi = GEN_INT (hi_val);\n+  rtx lo = GEN_INT (lo_val);\n+\n+  if (TARGET_THUMB1)\n+    return 0;\n+\n+  switch (code)\n+    {\n+    case PLUS:\n+      return arm_not_operand (hi, SImode) && arm_add_operand (lo, SImode);\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Emit a sequence of insns to handle a large constant.\n    CODE is the code of the operation required, it can be any of SET, PLUS,\n    IOR, AND, XOR, MINUS;"}, {"sha": "15d2ce502cb3477b4b62d28e285f6fb81d2c8f34", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -604,7 +604,7 @@\n  [(parallel\n    [(set (match_operand:DI           0 \"s_register_operand\" \"\")\n \t  (plus:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t           (match_operand:DI 2 \"s_register_operand\" \"\")))\n+\t           (match_operand:DI 2 \"arm_adddi_operand\"  \"\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n@@ -630,9 +630,9 @@\n )\n \n (define_insn_and_split \"*arm_adddi3\"\n-  [(set (match_operand:DI          0 \"s_register_operand\" \"=&r,&r\")\n-\t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"%0, 0\")\n-\t\t (match_operand:DI 2 \"s_register_operand\" \"r,  0\")))\n+  [(set (match_operand:DI          0 \"s_register_operand\" \"=&r,&r,&r,&r,&r\")\n+\t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"%0, 0, r, 0, r\")\n+\t\t (match_operand:DI 2 \"arm_adddi_operand\"  \"r,  0, r, Dd, Dd\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT && !TARGET_NEON\"\n   \"#\"\n@@ -650,7 +650,7 @@\n     operands[0] = gen_lowpart (SImode, operands[0]);\n     operands[4] = gen_highpart (SImode, operands[1]);\n     operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = gen_highpart (SImode, operands[2]);\n+    operands[5] = gen_highpart_mode (SImode, DImode, operands[2]);\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\"\n   [(set_attr \"conds\" \"clob\")\n@@ -1001,22 +1001,26 @@\n )\n \n (define_insn \"*addsi3_carryin_<optab>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n-\t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r\")\n+\t\t\t  (match_operand:SI 2 \"arm_not_operand\" \"rI,K\"))\n \t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n-  \"adc%?\\\\t%0, %1, %2\"\n+  \"@\n+   adc%?\\\\t%0, %1, %2\n+   sbc%?\\\\t%0, %1, #%B2\"\n   [(set_attr \"conds\" \"use\")]\n )\n \n (define_insn \"*addsi3_carryin_alt2_<optab>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n-\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n+\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%r,r\"))\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,K\")))]\n   \"TARGET_32BIT\"\n-  \"adc%?\\\\t%0, %1, %2\"\n+  \"@\n+   adc%?\\\\t%0, %1, %2\n+   sbc%?\\\\t%0, %1, #%B2\"\n   [(set_attr \"conds\" \"use\")]\n )\n "}, {"sha": "b67df55dd1697e7d530b384bf4108c16826f6719", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -31,7 +31,7 @@\n ;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di, Dt, Dz\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Dv, Dy, Di, Dt, Dz\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n \n@@ -242,6 +242,12 @@\n       (match_test \"TARGET_32BIT && arm_const_double_inline_cost (op) == 4\n \t\t   && !(optimize_size || arm_ld_sched)\")))\n \n+(define_constraint \"Dd\"\n+ \"@internal\n+  In ARM/Thumb-2 state a const_int that can be used by insn adddi.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_32BIT && const_ok_for_dimode_op (ival, PLUS)\")))\n+\n (define_constraint \"Di\"\n  \"@internal\n   In ARM/Thumb-2 state a const_int or const_double where both the high"}, {"sha": "168b5be1e445bd55de0755c46211062a56d9a299", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -587,9 +587,9 @@\n )\n \n (define_insn \"adddi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?w\")\n-        (plus:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,w\")\n-                 (match_operand:DI 2 \"s_register_operand\" \"w,r,0,w\")))\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r,?w,?&r,?&r,?&r\")\n+        (plus:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,w,r,0,r\")\n+                 (match_operand:DI 2 \"arm_adddi_operand\"     \"w,r,0,w,r,Dd,Dd\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_NEON\"\n {\n@@ -599,13 +599,16 @@\n     case 3: return \"vadd.i64\\t%P0, %P1, %P2\";\n     case 1: return \"#\";\n     case 2: return \"#\";\n+    case 4: return \"#\";\n+    case 5: return \"#\";\n+    case 6: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n-   (set_attr \"conds\" \"*,clob,clob,*\")\n-   (set_attr \"length\" \"*,8,8,*\")\n-   (set_attr \"arch\" \"nota8,*,*,onlya8\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1,*,*,*\")\n+   (set_attr \"conds\" \"*,clob,clob,*,clob,clob,clob\")\n+   (set_attr \"length\" \"*,8,8,*,8,8,8\")\n+   (set_attr \"arch\" \"nota8,*,*,onlya8,*,*,*\")]\n )\n \n (define_insn \"*sub<mode>3_neon\""}, {"sha": "8ae26cae7a7de218fdba1140f66d859e01f4a4aa", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -141,6 +141,11 @@\n   (ior (match_operand 0 \"arm_rhs_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))\n \n+(define_predicate \"arm_adddi_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), PLUS)\"))))\n+\n (define_predicate \"arm_addimm_operand\"\n   (ior (match_operand 0 \"arm_immediate_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))"}, {"sha": "159b0f63186b010834720528e1536df7fc4d9e5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -1,3 +1,11 @@\n+2012-07-01  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/53447\n+\t* gcc.target/arm/pr53447-1.c: New testcase.\n+\t* gcc.target/arm/pr53447-2.c: New testcase.\n+\t* gcc.target/arm/pr53447-3.c: New testcase.\n+\t* gcc.target/arm/pr53447-4.c: New testcase.\n+\n 2012-06-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/47061"}, {"sha": "dc094180c85092febd18be7eef2887e6f1d7640f", "filename": "gcc/testsuite/gcc.target/arm/pr53447-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n+\n+void t0p(long long * p)\n+{\n+  *p += 0x100000001;\n+}"}, {"sha": "9a2b0315c1a7bcd53ded02949451f88e6e9bc182", "filename": "gcc/testsuite/gcc.target/arm/pr53447-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-2.c?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n+\n+void t0p(long long * p)\n+{\n+  *p -= 0x100000008;\n+}"}, {"sha": "8e48f119b748244a4032a9ab39fcae022d7527e6", "filename": "gcc/testsuite/gcc.target/arm/pr53447-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n+\n+\n+void t0p(long long * p)\n+{\n+  *p +=0x1fffffff8;\n+}"}, {"sha": "22acb97270e2eec424be5cd6a82ee65bca07f72e", "filename": "gcc/testsuite/gcc.target/arm/pr53447-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cd68100302ffa5288b9c8bc7a54f8d337f4aa6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c?ref=44cd68100302ffa5288b9c8bc7a54f8d337f4aa6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n+\n+\n+void t0p(long long * p)\n+{\n+  *p -=0x1fffffff8;\n+}"}]}