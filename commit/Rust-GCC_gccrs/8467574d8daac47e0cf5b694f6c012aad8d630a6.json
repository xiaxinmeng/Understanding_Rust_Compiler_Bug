{"sha": "8467574d8daac47e0cf5b694f6c012aad8d630a6", "node_id": "C_kwDOANBUbNoAKDg0Njc1NzRkOGRhYWM0N2UwY2Y1YjY5NGY2YzAxMmFhZDhkNjMwYTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-05T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-05T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "a136601fe401a59a0eca3b2bdd29312bfa2df879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a136601fe401a59a0eca3b2bdd29312bfa2df879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8467574d8daac47e0cf5b694f6c012aad8d630a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8467574d8daac47e0cf5b694f6c012aad8d630a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8467574d8daac47e0cf5b694f6c012aad8d630a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8467574d8daac47e0cf5b694f6c012aad8d630a6/comments", "author": null, "committer": null, "parents": [{"sha": "5beddee9f43b70c178ba7c10f795cb0546b0de93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5beddee9f43b70c178ba7c10f795cb0546b0de93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5beddee9f43b70c178ba7c10f795cb0546b0de93"}], "stats": {"total": 591, "additions": 590, "deletions": 1}, "files": [{"sha": "2c32b6403f0f62232952d07eab514fd5bf8f7e88", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,7 @@\n+2022-07-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* MAINTAINERS: fix sorting of names\n+\n 2022-07-03  Immad Mir  <mirimmad17@gmail.com>\n \n \t* MAINTAINERS: add myself."}, {"sha": "be06767bcca0164fc593c67a9a0e7abfcba01690", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,7 @@\n+2022-07-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* git-descr.sh: By default print revision for HEAD.\n+\n 2022-06-28  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* unicode/README: Added instructions for updating ucnid.h."}, {"sha": "879f9e5475fc3c27389f76e43733eac6faddd0bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,174 @@\n+2022-07-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_ssa_name_with_loop_info): Restrict the\n+\tcall to SCEV for irange supported types.\n+\t(fold_using_range::range_of_builtin_int_call): Convert to vrange.\n+\t* gimple-range.cc (gimple_ranger::prefill_stmt_dependencies): Same.\n+\t* tree-ssa-dom.cc (cprop_operand): Same.\n+\n+2022-07-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/104489\n+\t* calls.cc (precompute_register_parameters): Allow promotion\n+\tof floating point values to be passed in wider integer modes\n+\tby calling new convert_float_to_wider_int.\n+\t(expand_call): Allow floating point results to be returned in\n+\twider integer modes by calling new convert wider_int_to_float.\n+\t* cfgexpand.cc (expand_value_return): Allow backends to promote\n+\ta scalar floating point return value to a wider integer mode\n+\tby calling new convert_float_to_wider_int.\n+\t* expr.cc (convert_float_to_wider_int): New function.\n+\t(convert_wider_int_to_float): Likewise.\n+\t(expand_expr_real_1) <expand_decl_rtl>: Allow backends to promote\n+\tscalar FP PARM_DECLs to wider integer modes, by calling new\n+\tconvert_wider_int_to_float.\n+\t* expr.h (convert_modes): Name arguments for improved documentation.\n+\t(convert_float_to_wider_int): Prototype new function here.\n+\t(convert_wider_int_to_float): Likewise.\n+\t* function.cc (assign_parm_setup_stack): Allow floating point\n+\tvalues to be passed on the stack as wider integer modes by\n+\tcalling new convert_wider_int_to_float.\n+\n+2022-07-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/105860\n+\t* tree-sra.cc (build_reconstructed_reference): Start expr\n+\ttraversal only just below the outermost union.\n+\n+2022-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.cc (vect_do_peeling): Revert assert\n+\tand update virtual SSA form again.  Assert we do so for\n+\ta known set of transforms only.\n+\t* tree-vectorizer.h (vec_info::any_known_not_updated_vssa): New.\n+\t* tree-vect-stmts.cc (vectorizable_load): When vectorizing\n+\tusing load-lanes allow virtual SSA update.\n+\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.cc (process_asm): Write '#include <stdint.h>'.\n+\t(process_obj): Pass omp_requires_mask to GOMP_offload_register_ver.\n+\t(main): Ask lto1 to obtain omp_requires_mask and pass it on.\n+\t* config/nvptx/mkoffload.cc (process, main): Likewise.\n+\t* lto-cgraph.cc (omp_requires_to_name): New.\n+\t(input_offload_tables): Save omp_requires_mask.\n+\t(output_offload_tables): Read it, check for consistency,\n+\tsave value for mkoffload.\n+\t* omp-low.cc (lower_omp_target): Force output_offloadtables\n+\tcall for OMP_REQUIRES_TARGET_USED.\n+\n+2022-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.cc (vect_do_peeling): Assert that\n+\tno SSA update is needed instead of updating virtual SSA\n+\tform.\n+\t* tree-vect-stmts.cc (vectorizable_load): For hoisted\n+\tinvariant load use the loop entry virtual use.\n+\tFor emulated gather loads use the virtual use of the\n+\toriginal stmt like vect_finish_stmt_generation would do.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-pretty-print.cc (dump_generic_node) <ARRAY_TYPE>: Add guard\n+\tfor direct circularity.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.cc (gen_array_type_die): Use the default lower bound of\n+\tthe language for vector types.\n+\n+2022-07-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-storage.cc (irange_storage_slot::set_irange): Set\n+\tnonzero bits in irange.\n+\t(irange_storage_slot::get_irange): Get nonzero bits from irange.\n+\t* value-range.cc (irange::operator=): Set nonzero bits.\n+\t(irange::irange_set): Same.\n+\t(irange::irange_set_anti_range): Same.\n+\t(irange::set): Same.\n+\t(irange::verify_range): Same.\n+\t(irange::legacy_equal_p): Check nonzero bits.\n+\t(irange::equal_p): Same.\n+\t(irange::contains_p): Handle nonzero bits.\n+\t(irange::irange_union): Same.\n+\t(irange::irange_intersect): Same.\n+\t(irange::dump): Same.\n+\t(irange::set_nonzero_bits): New.\n+\t(irange::get_nonzero_bits): New.\n+\t(irange::intersect_nonzero_bits): New.\n+\t(irange::union_nonzero_bits): New.\n+\t(irange::dump_bitmasks): New.\n+\t* value-range.h (class irange): Add m_nonzero_mask.\n+\t(gt_ggc_mx): Handle nonzero bits.\n+\t(gt_pch_nx): Same.\n+\t(irange::set_undefined): Set nonzero bits.\n+\t(irange::set_varying): Same.\n+\t(irange::normalize_kind): Call set_undefined.\n+\n+2022-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-manip.h\n+\t(rewrite_virtuals_into_loop_closed_ssa): Remove.\n+\t(rewrite_into_loop_closed_ssa_1): Likewise.\n+\t* tree-ssa-loop-manip.cc (rewrite_into_loop_closed_ssa_1):\n+\tMake static.\n+\t(rewrite_into_loop_closed_ssa): Remove loop overload,\n+\talways rewrite virtuals into LC SSA.\n+\t(check_loop_closed_ssa_bb): Also check virtuals.\n+\t* tree-ssa-dce.cc (remove_dead_phis): Preserve virtual\n+\tLC PHIs when in LC SSA.\n+\t* gimple-loop-jam.cc (fuse_loops): Do not rewrite into\n+\tloop-closed SSA here, but ...\n+\t(tree_loop_unroll_and_jam): ... here once.\n+\t* tree-if-conv.cc (version_loop_for_if_conversion): Use\n+\tthe cheaper TODO_update_ssa_no_phi.\n+\t* tree-loop-distribution.cc (version_loop_by_alias_check):\n+\tLikewise.\n+\t* tree-ssa-loop-unswitch.cc (tree_unswitch_single_loop):\n+\tLikewise.\n+\t* tree-vect-loop-manip.cc (vect_loop_versioning): Likewise.\n+\t(tree_unswitch_outer_loop): Do not rewrite virtuals into\n+\tLC ssa.\n+\t* tree-parloops.cc (transform_to_exit_first_loop_alt):\n+\tLikewise.\n+\t(pass_parallelize_loops::execute): After finishing rewrite\n+\tinto LC SSA again because we do not maintain it properly.\n+\n+2022-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106055\n+\t* graphite.cc (canonicalize_loop_closed_ssa): Check whether\n+\twe can propagate.\n+\n+2022-07-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/43618\n+\t* config/i386/sse.md (extendv2sfv2df2): New define_expand.\n+\t(sse2_cvtps2pd_<mask_name>): Change constraint of operands[1].\n+\t(*sse2_cvtps2pd_<mask_name>_1): Rename from extendvsdfv2df2.\n+\n+2022-07-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* ipa-cp.cc (ipcp_vr_lattice::meet_with_1): Use operator!=.\n+\t* ipa-prop.cc (struct ipa_vr_ggc_hash_traits): Same.\n+\t* tree-ssa-loop-unswitch.cc (struct unswitch_predicate): Use set\n+\twith two arguments.\n+\t(find_unswitching_predicates_for_bb): Same.\n+\t* tree-vrp.cc (range_fold_unary_symbolics_p): Same.\n+\t* value-range-equiv.cc (value_range_equiv::equal_p): Use operator==.\n+\t* value-range.cc (irange::equal_p): Rename to...\n+\t(irange::operator==): ...this.\n+\t* value-range.h (irange::set): Remove.\n+\t(irange::operator==): Remove.\n+\t(irange::set_zero): Use set with two arguments.\n+\t* vr-values.cc (vr_values::extract_range_from_binary_expr): Same.\n+\t(vr_values::extract_range_from_unary_expr): Same.\n+\t(check_for_binary_op_overflow): Same.\n+\t(bounds_of_var_in_loop): Same.\n+\n 2022-07-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/106022"}, {"sha": "7111af089e56cd7122c048342a65c33ec7797df0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1 +1 @@\n-20220704\n+20220705"}, {"sha": "570579b3d748ea351bdbbe0b45ccbf8cec4c13da", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,251 @@\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Call): Merge the two special cases\n+\twhere there are no controlling actuals but tag-indeternminate ones.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Fix detection of calls\n+\tthat are dispatching on tagged result.\n+\n+2022-07-04  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (ADA_EXCLUDE_SRCS): Add s-qnx.ads.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration) <OK_To_Rename_Ref>: New\n+\tlocal function.\n+\t<Rewrite_As_Renaming>: Change to a local variable whose value is\n+\tcomputed once and generate a call to Finalize after this is done.\n+\tSimplify the code creating the renaming at the end.\n+\n+2022-07-04  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (GCC_SPEC_FILES): Remove vxworks cert files.\n+\n+2022-07-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Refactor duplicated code for\n+\tCount and Index attributes.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Apply_Length_Check_On_Assignment): Return early if\n+\tthe Suppress_Assignment_Checks flag is set.\n+\t(Selected_Range_Checks): Deal with conditional expressions.\n+\t* exp_ch4.adb (Too_Large_Length_For_Array): New constant.\n+\t(Expand_Concatenate): Use it in lieu of Too_Large_Max_Length.\n+\t(Expand_N_If_Expression): If the result has a unidimensional array\n+\ttype but the dependent expressions have constrained subtypes with\n+\tknown bounds, create a static temporary on the stack with a subtype\n+\tcovering the result.\n+\t(Get_First_Index_Bounds): Deal with string literals.\n+\t* uintp.ads (Uint_256): New deferred constant.\n+\t* sinfo.ads (Suppress_Assignment_Checks): Document new usage.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration.Rewrite_As_Renaming):\n+\tDo not rewrite if the declaration has got constraints.\n+\t* sinfo.ads (Case Expression Alternative): Fix typo.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration.Rewrite_As_Renaming):\n+\tBe prepared for slices.\n+\t* exp_ch4.adb (Get_First_Index_Bounds): New procedure.\n+\t(Expand_Array_Comparison.Length_Less_Than_4): Call it.\n+\t(Expand_Concatenate): Try to compute a maximum length for\n+\toperands with variable length and a maximum total length at the\n+\tend.  If the concatenation is dynamic, but a sensible maximum\n+\ttotal length has been computed, use this length to create a\n+\tstatic array subtype for the temporary and return a slice of it.\n+\n+2022-07-04  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Possible_Deferred_Completion): Delete\n+\tPrev_Obj_Def formal parameter.  Reorganize code so that\n+\tstatically matching check is also performed in the case where\n+\tthe subtype given in the initial declaration is constrained and\n+\tthe subtype given in the completion is not.\n+\n+2022-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.ads, einfo-utils.adb: Add predicates on subtypes E\n+\tand N.  Change some parameters to use the unpredicated subtypes,\n+\tbecause they sometimes return e.g. Empty.  Note that N_Entity_Id\n+\thas a predicate; Entity_Id does not.\n+\t* exp_tss.adb (Base_Init_Proc): Use Entity_Id instead of E,\n+\tbecause otherwise we fail the predicate. We shouldn't be\n+\treferring to single-letter names from far away anyway.\n+\t* sem_aux.adb (Is_Derived_Type): Likewise.\n+\t* sem_res.adb (Is_Definite_Access_Type): Use N_Entity_Id for\n+\tpredicate.\n+\t* types.ads (Entity_Id): Add comment explaining the difference\n+\tbetween Entity_Id and N_Entity_Id.\n+\n+2022-07-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Combine identical\n+\tbranches.\n+\t* sem_attr.adb (Analyze_Attribute): Combine identical cases\n+\tAttribute_Has_Same_Storage and Attribute_Overlaps_Storage.\n+\t* sem_prag.adb (Check_Role): Combine E_Out_Parameter case with\n+\tgeneral case for parameters.\n+\t* sem_util.adb (Accessibility_Level): Combine identical\n+\tbranches.\n+\t* sprint.adb (Sprint_Node_Actual): Combine cases for\n+\tN_Real_Range_Specification and N_Signed_Integer_Type_Definition.\n+\n+2022-07-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* libgnat/s-os_lib.adb (Quote_Argument): Modify the result\n+\tbuffer size calculation to handle the case where Arg'Length is\n+\t1.\n+\n+2022-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Generate a new\n+\tsubtype when Is_Constr_Subt_For_UN_Aliased is True, so the\n+\tIs_Constr_Subt_For_U_Nominal flag will not be set on the\n+\tpreexisting subtype.\n+\t* sem_attr.adb, sem_ch3.adb: Minor.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* debug.adb (d.9): Remove usage.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove redundant\n+\ttest on Debug_Flag_Dot_L.\n+\t(Is_Build_In_Place_Result_Type): Return false for nonlimited types.\n+\t(Is_Build_In_Place_Function): Tidy up and remove redundant test on\n+\tDebug_Flag_Dot_L.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Don't adjust the object\n+\tif the expression is a function call.\n+\t<Rewrite_As_Renaming>: Return true if the object needs finalization\n+\tand is initialized  with the result of a function call returned on\n+\tthe secondary stack.\n+\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Add Use_Sec_Stack boolean\n+\tparameter.  Early return if the parent is an object declaration and\n+\tUse_Sec_Stack is false.\n+\t(Expand_Call_Helper): Adjust call to Expand_Ctrl_Function_Call.\n+\t* exp_ch7.adb (Find_Last_Init): Be prepared for initialization still\n+\tpresent in the object declaration.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Call the predicates\n+\tNeeds_Secondary_Stack and Needs_Finalization to guard the renaming\n+\toptimization.\n+\n+2022-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-cbhase.ads, libgnat/a-cborse.ads,\n+\tlibgnat/a-cihase.ads, libgnat/a-ciorse.ads,\n+\tlibgnat/a-cohase.ads, libgnat/a-coorse.ads (Key): New function\n+\tthat takes a Container parameter, implemented as an expression\n+\tfunction, so it is self explanatory (doesn't need a comment).\n+\n+2022-07-04  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Fix length of title\n+\tunderlines.\n+\n+2022-07-04  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): After calling Insert_Action\n+\tto insert a subtype declaration associated with an allocator,\n+\tthe subtype declaration will usually be analyzed. But not\n+\talways. Add an explicit call to Preanalyze to cope with the\n+\tunusual case. The subtype declaration must be at least\n+\tpreanalyzed before the call to Sem_Ch3.Process_Subtype a little\n+\twhile later, during which we analyze an identifier that refers\n+\tto the subtype.\n+\n+2022-07-04  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not\n+\tgenerate a warning if the expression in question is an assertion\n+\texpression, or a subexpression thereof. But do call\n+\tTest_Comparison so that it can generate warnings for the cases\n+\tthat it generates warnings for.\n+\t* sem_prag.ads: Modify Assertion_Expression_Pragma constant so\n+\tthat the predicate Sem_Util.In_Assertion_Expression_Pragma\n+\treturns True for the expression of a Compile_Time_Error pragma.\n+\n+2022-07-04  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Add the new entry.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Comparison_Op): Deal with ambiguous operands\n+\tin all cases.\n+\t(Resolve_Equality_Op): Likewise, except for the case of the implicit\n+\tinequality operator created for a user-defined operator that is not\n+\tan intrinsic subprogram.\n+\n+2022-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-cbhase.adb, libgnat/a-cbhase.ads,\n+\tlibgnat/a-cborse.adb, libgnat/a-cborse.ads,\n+\tlibgnat/a-cihase.adb, libgnat/a-cihase.ads,\n+\tlibgnat/a-ciorse.adb, libgnat/a-ciorse.ads,\n+\tlibgnat/a-cohase.adb, libgnat/a-cohase.ads,\n+\tlibgnat/a-conhel.adb, libgnat/a-conhel.ads,\n+\tlibgnat/a-coorse.adb, libgnat/a-coorse.ads: Add Has_Element,\n+\tElement, Query_Element, and Next subprograms that take a Set\n+\tparameter. Add Tampering_With_Cursors_Prohibited function. These\n+\tare all new in Ada 2022.\n+\n+2022-07-04  Claire Dross  <dross@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Functional vectors, sets,\n+\tand maps are now controlled.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-07-04  Claire Dross  <dross@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(Debugging and Assertion Control): Add GNAT specific assertion\n+\tpragmas to the equivalent Assertion_Policy for the -gnata\n+\toption.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-07-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_disp.adb (Most_Descendant_Use_Clause): Remove call to\n+\tdeprecated Is_Internal.\n+\t* sem_util.adb (Innermost_Master_Scope_Depth): Use\n+\tFind_Enclosing_Scope instead of Nearest_Dynamic_Scope to avoid\n+\tcases where relevant scopes get skipped leading to an incorrect\n+\tscope depth calculation.\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Build_In_Place_Formal): Also compute Returns_By_Ref\n+\tfor the function if the extra formals were not built initially.\n+\n+2022-07-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Resolve_Iterable_Operation): Add guard to\n+\tprevent crash when the examined function has no formal\n+\tparameters and Etype is called on Empty entity.\n+\n+2022-07-04  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cfinse.adb, libgnat/a-cfinse.ads: Implementation\n+\tfiles of the sequence.\n+\t* Makefile.rtl, impunit.adb: Take into account the add of the\n+\tnew files\n+\n+2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (Pure_Function):\n+\tFix ambiguous wording about context dependence.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc-interface/misc.cc (gnat_get_sarif_source_language): New."}, {"sha": "989f29395264f6dd2b044788beeb69429a6b0b23", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,12 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-parser.cc (c_parser_omp_target_data, c_parser_omp_target_update,\n+\tc_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Set\n+\tOMP_REQUIRES_TARGET_USED.\n+\t(c_parser_omp_requires): Remove sorry.\n+\n 2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-parser.cc (c_parser_omp_target_enter_data,"}, {"sha": "b0bd3b4802f6b5ec4f44de12d4a60d67f5ed5eff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,12 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* parser.cc (cp_parser_omp_target_data,\n+\tcp_parser_omp_target_enter_data, cp_parser_omp_target_exit_data,\n+\tcp_parser_omp_target_update): Set OMP_REQUIRES_TARGET_USED.\n+\t(cp_parser_omp_requires): Remove sorry.\n+\n 2022-07-01  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* parser.cc (cp_token_is_module_directive): New function"}, {"sha": "9bde3686eb72f92786fc273f049b356b45a476a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,24 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.h (gfc_omp_namelist): Update by creating 'linear' struct,\n+\tmove 'linear_op' as 'op' to id and add 'old_modifier' to it.\n+\t* dump-parse-tree.cc (show_omp_namelist): Update accordingly.\n+\t* module.cc (mio_omp_declare_simd): Likewise.\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Likewise.\n+\t* openmp.cc (resolve_omp_clauses): Likewise; accept new-style\n+\t'val' modifier with do/simd.\n+\t(gfc_match_omp_clauses): Handle OpenMP 5.2 linear clause syntax.\n+\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.cc (gfc_match_omp_requires): Remove sorry.\n+\t* parse.cc (decode_omp_directive): Don't regard 'declare target'\n+\tas target usage for 'omp requires'; add more flags to\n+\tomp_requires_mask.\n+\n 2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.cc (show_omp_namelist): For the map-type,"}, {"sha": "0a1e58ea8ce0abe4f15443e3a8d1268efd8a54ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,58 @@\n+2022-07-05  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/analyzer/allocation-size-1.c,\n+\tgcc.dg/analyzer/allocation-size-2.c,\n+\tgcc.dg/analyzer/allocation-size-3.c,\n+\tgcc.dg/analyzer/allocation-size-4.c,\n+\tgcc.dg/analyzer/allocation-size-5.c: Handle int32_t being \"long int\".\n+\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/linear-4.c: New test.\n+\t* gfortran.dg/gomp/linear-2.f90: New test.\n+\t* gfortran.dg/gomp/linear-3.f90: New test.\n+\t* gfortran.dg/gomp/linear-4.f90: New test.\n+\t* gfortran.dg/gomp/linear-5.f90: New test.\n+\t* gfortran.dg/gomp/linear-6.f90: New test.\n+\t* gfortran.dg/gomp/linear-7.f90: New test.\n+\t* gfortran.dg/gomp/linear-8.f90: New test.\n+\n+2022-07-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/105860\n+\t* gcc.dg/tree-ssa/alias-access-path-13.c: New test.\n+\t* gcc.dg/tree-ssa/pr105860.c: Likewise.\n+\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/requires-4.c: Update dg-*.\n+\t* c-c++-common/gomp/reverse-offload-1.c: Likewise.\n+\t* c-c++-common/gomp/target-device-ancestor-2.c: Likewise.\n+\t* c-c++-common/gomp/target-device-ancestor-3.c: Likewise.\n+\t* c-c++-common/gomp/target-device-ancestor-4.c: Likewise.\n+\t* c-c++-common/gomp/target-device-ancestor-5.c: Likewise.\n+\t* gfortran.dg/gomp/target-device-ancestor-3.f90: Likewise.\n+\t* gfortran.dg/gomp/target-device-ancestor-4.f90: Likewise.\n+\t* gfortran.dg/gomp/target-device-ancestor-5.f90: Likewise.\n+\t* gfortran.dg/gomp/target-device-ancestor-2.f90: Likewise. Move\n+\tpost-FE checks to ...\n+\t* gfortran.dg/gomp/target-device-ancestor-2a.f90: ... this new file.\n+\t* gfortran.dg/gomp/requires-8.f90: Update as we don't regard\n+\t'declare target' for the 'requires' usage requirement.\n+\n+2022-07-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106055\n+\t* gcc.dg/graphite/pr106055.c: New testcase.\n+\n+2022-07-04  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/43618\n+\t* gcc.target/i386/pr43618-1.c: New test.\n+\n 2022-07-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/106022"}, {"sha": "7bad09007801fee504c1710efe366d0c5b3371c2", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,12 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gomp-constants.h (GOMP_VERSION): Bump to 2.\n+\t(GOMP_REQUIRES_UNIFIED_ADDRESS, GOMP_REQUIRES_UNIFIED_SHARED_MEMORY,\n+\tGOMP_REQUIRES_REVERSE_OFFLOAD, GOMP_REQUIRES_TARGET_USED):\n+\tNew defines.\n+\n 2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gomp-constants.h (GOMP_DEVICE_INVALID): Define."}, {"sha": "83d200fa153c5166f28d70b12dc7f5e468c5643f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,45 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Mark linear-clause change as 'Y'.\n+\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp-plugin.h (GOMP_OFFLOAD_get_num_devices): Add\n+\tomp_requires_mask arg.\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_get_num_devices): Likewise;\n+\treturn -1 when device available but omp_requires_mask != 0.\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_get_num_devices): Likewise.\n+\t* oacc-host.c (host_get_num_devices, host_openacc_get_property):\n+\tUpdate call.\n+\t* oacc-init.c (resolve_device, acc_init_1, acc_shutdown_1,\n+\tgoacc_attach_host_thread_to_device, acc_get_num_devices,\n+\tacc_set_device_num, get_property_any): Likewise.\n+\t* target.c (omp_requires_mask): New global var.\n+\t(gomp_requires_to_name): New.\n+\t(GOMP_offload_register_ver): Handle passed omp_requires_mask.\n+\t(gomp_target_init): Handle omp_requires_mask.\n+\t* libgomp.texi (OpenMP 5.0): Update requires impl. status.\n+\t(OpenMP 5.1): Add a missed item.\n+\t(OpenMP 5.2): Mark linear-clause change as supported in C/C++.\n+\t* testsuite/libgomp.c-c++-common/requires-1-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-2-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-3-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-3.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-4-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-4.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-5-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-5.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-6.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-7-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/requires-7.c: New test.\n+\t* testsuite/libgomp.fortran/requires-1-aux.f90: New test.\n+\t* testsuite/libgomp.fortran/requires-1.f90: New test.\n+\n 2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.2): Mark target enter/exit data"}, {"sha": "547ef8b2c3af6827581dc0b4918509f16cd1dfe7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,13 @@\n+2022-07-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* rust-demangle.c (demangle_const): Add a missing goto pass_return\n+\tat the end of the function.\n+\n+2022-07-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* rust-demangle.c (demangle_path_maybe_open_generics): Add\n+\trecursion limit.\n+\n 2022-07-01  Nick Clifton  <nickc@redhat.com>\n \n \tPR demangler/105039"}, {"sha": "208abbc3c4213cb405df7830cf789f72c518b2f2", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8467574d8daac47e0cf5b694f6c012aad8d630a6/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8467574d8daac47e0cf5b694f6c012aad8d630a6/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=8467574d8daac47e0cf5b694f6c012aad8d630a6", "patch": "@@ -1,3 +1,10 @@\n+2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_get_num_devices):\n+\tReturn -1 when device available but omp_requires_mask != 0.\n+\n 2021-10-19  Martin Liska  <mliska@suse.cz>\n \n \t* include/coi/source/COIBuffer_source.h: Convert 2 chars to"}]}