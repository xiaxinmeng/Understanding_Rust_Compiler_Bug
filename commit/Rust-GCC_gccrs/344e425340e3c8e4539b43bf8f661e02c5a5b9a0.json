{"sha": "344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "node_id": "C_kwDOANBUbNoAKDM0NGU0MjUzNDBlM2M4ZTQ1MzliNDNiZjhmNjYxZTAyYzVhNWI5YTA", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-05-09T09:34:23Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-05-11T01:27:48Z"}, "message": "This patch skips constant folding for fmin/max when either argument is sNaN. According to C standard, fmin(sNaN, sNaN\uff09= qNaN, fmin(sNaN, NaN) = qNaN.\n\ngcc/\n\tPR target/105414\n\t* match.pd (minmax): Skip constant folding for fmin/fmax when both\n\targuments are sNaN or one is sNaN and another is NaN.\n\ngcc/testsuite/\n\tPR target/105414\n\t* gcc.dg/pr105414.c: New.", "tree": {"sha": "4575f1c2f3d4e4e040864eab3a71c95ce2c773ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4575f1c2f3d4e4e040864eab3a71c95ce2c773ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344e425340e3c8e4539b43bf8f661e02c5a5b9a0/comments", "author": null, "committer": null, "parents": [{"sha": "e877898911574037af5aaa68ff6451ec5ced20e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e877898911574037af5aaa68ff6451ec5ced20e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e877898911574037af5aaa68ff6451ec5ced20e9"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "632243ea92e20cc3503d033f4cf60e142ab67c6f", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344e425340e3c8e4539b43bf8f661e02c5a5b9a0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344e425340e3c8e4539b43bf8f661e02c5a5b9a0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "patch": "@@ -3089,10 +3089,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n-(for minmax (min max FMIN_ALL FMAX_ALL)\n+(for minmax (min max)\n  (simplify\n   (minmax @0 @0)\n   @0))\n+/* For fmin() and fmax(), skip folding when both are sNaN.  */\n+(for minmax (FMIN_ALL FMAX_ALL)\n+ (simplify\n+  (minmax @0 @0)\n+  (if (!tree_expr_maybe_signaling_nan_p (@0))\n+    @0)))\n /* min(max(x,y),y) -> y.  */\n (simplify\n  (min:c (max:c @0 @1) @1)\n@@ -3192,12 +3198,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (minmax @1 (convert @2)))))\n \n (for minmax (FMIN_ALL FMAX_ALL)\n- /* If either argument is NaN, return the other one.  Avoid the\n-    transformation if we get (and honor) a signalling NaN.  */\n+ /* If either argument is NaN and other one is not sNaN, return the other\n+    one.  Avoid the transformation if we get (and honor) a signalling NaN.  */\n  (simplify\n   (minmax:c @0 REAL_CST@1)\n-  (if (real_isnan (TREE_REAL_CST_PTR (@1))\n-       && (!HONOR_SNANS (@1) || !TREE_REAL_CST (@1).signalling))\n+   (if (real_isnan (TREE_REAL_CST_PTR (@1))\n+       && (!HONOR_SNANS (@1) || !TREE_REAL_CST (@1).signalling)\n+       && !tree_expr_maybe_signaling_nan_p (@0))\n    @0)))\n /* Convert fmin/fmax to MIN_EXPR/MAX_EXPR.  C99 requires these\n    functions to return the numeric arg if the other one is NaN."}, {"sha": "78772700acf3fe3c0371913a7e682265351e3be7", "filename": "gcc/testsuite/gcc.dg/pr105414.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344e425340e3c8e4539b43bf8f661e02c5a5b9a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105414.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344e425340e3c8e4539b43bf8f661e02c5a5b9a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105414.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105414.c?ref=344e425340e3c8e4539b43bf8f661e02c5a5b9a0", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target { *-*-linux* *-*-gnu* } } } */\n+/* { dg-options \"-O1 -fsignaling-nans -lm\" } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target issignaling } */\n+\n+\n+#define _GNU_SOURCE\n+#include <stdio.h>\n+#include <math.h>\n+\n+int main()\n+{\n+  double a = __builtin_nans (\"\");\n+\n+  if (issignaling (fmin (a, a)))\n+    __builtin_abort ();\n+\n+  if (issignaling (fmax (a, a)))\n+    __builtin_abort ();\n+\n+  double b = __builtin_nan (\"\");\n+\n+  if (issignaling (fmin (a, b)))\n+    __builtin_abort ();\n+\n+  if (issignaling (fmax (a, b)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}