{"sha": "e365422628db9bfbd314fbdea7a380701c3d85de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2NTQyMjYyOGRiOWJmYmQzMTRmYmRlYTdhMzgwNzAxYzNkODVkZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-21T06:51:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-21T06:51:56Z"}, "message": "(gen_move_insn): Use emit_move_insn_1.\n\nFrom-SVN: r3506", "tree": {"sha": "fa7b5c9ab4e8144395e1f3ff81e78232354d80b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa7b5c9ab4e8144395e1f3ff81e78232354d80b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e365422628db9bfbd314fbdea7a380701c3d85de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e365422628db9bfbd314fbdea7a380701c3d85de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e365422628db9bfbd314fbdea7a380701c3d85de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e365422628db9bfbd314fbdea7a380701c3d85de/comments", "author": null, "committer": null, "parents": [{"sha": "261c4230db075ad59116a75be8961fbee10d60e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261c4230db075ad59116a75be8961fbee10d60e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261c4230db075ad59116a75be8961fbee10d60e9"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "087dfda5a9d09036ed5a410a1a5b2e264be24477", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e365422628db9bfbd314fbdea7a380701c3d85de/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e365422628db9bfbd314fbdea7a380701c3d85de/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e365422628db9bfbd314fbdea7a380701c3d85de", "patch": "@@ -2557,14 +2557,16 @@ have_sub2_insn (mode)\n   return sub_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing;\n }\n \n-/* Generate the body of an instruction to copy Y into X.  */\n+/* Generate the body of an instruction to copy Y into X.\n+   It may be a SEQUENCE, if one insn isn't enough.  */\n \n rtx\n gen_move_insn (x, y)\n      rtx x, y;\n {\n   register enum machine_mode mode = GET_MODE (x);\n   enum insn_code insn_code;\n+  rtx seq;\n \n   if (mode == VOIDmode)\n     mode = GET_MODE (y); \n@@ -2628,9 +2630,14 @@ gen_move_insn (x, y)\n \t}\n \t  \n       insn_code = mov_optab->handlers[(int) tmode].insn_code;\n+      return (GEN_FCN (insn_code) (x, y));\n     }\n \n-  return (GEN_FCN (insn_code) (x, y));\n+  start_sequence ();\n+  emit_move_insn_1 (x, y);\n+  seq = gen_sequence ();\n+  end_sequence ();\n+  return seq;\n }\n \f\n /* Tables of patterns for extending one integer mode to another.  */"}]}