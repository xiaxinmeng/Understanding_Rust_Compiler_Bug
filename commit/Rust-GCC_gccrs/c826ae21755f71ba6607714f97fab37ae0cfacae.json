{"sha": "c826ae21755f71ba6607714f97fab37ae0cfacae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgyNmFlMjE3NTVmNzFiYTY2MDc3MTRmOTdmYWIzN2FlMGNmYWNhZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-03T16:14:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-03T16:14:34Z"}, "message": "integrate.h (struct inline_remap): Add leaf_reg_map table.\n\n\t* integrate.h (struct inline_remap): Add leaf_reg_map table.\n\t* integrate.c (expand_inline_function): Use xcalloc to allocate\n\tmemory.\n\t(copy_rtx_and_substitute): Use the leaf_reg_map for leaf\n\tregisters.\n\nFrom-SVN: r41791", "tree": {"sha": "d15e26ef2c3c3f119a14c3a43cc414d9612c5d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d15e26ef2c3c3f119a14c3a43cc414d9612c5d2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c826ae21755f71ba6607714f97fab37ae0cfacae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c826ae21755f71ba6607714f97fab37ae0cfacae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c826ae21755f71ba6607714f97fab37ae0cfacae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c826ae21755f71ba6607714f97fab37ae0cfacae/comments", "author": null, "committer": null, "parents": [{"sha": "371d5d2ef8677d06f8897bfd04bbf3ca0803fca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371d5d2ef8677d06f8897bfd04bbf3ca0803fca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371d5d2ef8677d06f8897bfd04bbf3ca0803fca5"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "4aaf478c1eb1f4deebca0057c550828c39abf00e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c826ae21755f71ba6607714f97fab37ae0cfacae", "patch": "@@ -1,3 +1,11 @@\n+2001-05-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* integrate.h (struct inline_remap): Add leaf_reg_map table.\n+\t* integrate.c (expand_inline_function): Use xcalloc to allocate\n+\tmemory.\n+\t(copy_rtx_and_substitute): Use the leaf_reg_map for leaf\n+\tregisters.\n+\n 2001-05-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-dump.c (dequeue_and_dump): Don't look at DECL_ASSEMBLER_NAME"}, {"sha": "a4300303825379a3875f8135a256f680541fec20", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=c826ae21755f71ba6607714f97fab37ae0cfacae", "patch": "@@ -758,7 +758,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \n   /* Allocate the structures we use to remap things.  */\n \n-  map = (struct inline_remap *) xmalloc (sizeof (struct inline_remap));\n+  map = (struct inline_remap *) xcalloc (1, sizeof (struct inline_remap));\n   map->fndecl = fndecl;\n \n   VARRAY_TREE_INIT (map->block_map, 10, \"block_map\");\n@@ -1753,15 +1753,7 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n \t{\n \t  /* Some hard registers are also mapped,\n \t     but others are not translated.  */\n-\t  if (map->reg_map[regno] != 0\n-\t      /* We shouldn't usually have reg_map set for return\n-\t\t register, but it may happen if we have leaf-register\n-\t\t remapping and the return register is used in one of\n-\t\t the calling sequences of a call_placeholer.  In this\n-\t\t case, we'll end up with a reg_map set for this\n-\t\t register, but we don't want to use for registers\n-\t\t marked as return values.  */\n-\t      && ! REG_FUNCTION_VALUE_P (orig))\n+\t  if (map->reg_map[regno] != 0)\n \t    return map->reg_map[regno];\n \n \t  /* If this is the virtual frame pointer, make space in current\n@@ -1879,9 +1871,9 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n \t  if (map->integrating && regno < FIRST_PSEUDO_REGISTER\n \t      && LEAF_REGISTERS[regno] && LEAF_REG_REMAP (regno) != regno)\n \t    {\n-\t      temp = gen_rtx_REG (mode, regno);\n-\t      map->reg_map[regno] = temp;\n-\t      return temp;\n+\t      if (!map->leaf_reg_map[regno][mode])\n+\t\tmap->leaf_reg_map[regno][mode] = gen_rtx_REG (mode, regno);\n+\t      return map->leaf_reg_map[regno][mode]; \n \t    }\n #endif\n \t  else"}, {"sha": "52c300424fa0b3aa3ce1ecb1fd5b332fd2ba243c", "filename": "gcc/integrate.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=c826ae21755f71ba6607714f97fab37ae0cfacae", "patch": "@@ -1,5 +1,5 @@\n /* Function integration definitions for GNU C-Compiler\n-   Copyright (C) 1990, 1995, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1995, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -47,6 +47,10 @@ struct inline_remap\n   /* Mapping from old registers to new registers.\n      It is allocated and deallocated in `expand_inline_function' */\n   rtx *reg_map;\n+#if defined (LEAF_REGISTERS) && defined (LEAF_REG_REMAP)\n+  /* Mapping from old leaf registers to new leaf registers.  */\n+  rtx leaf_reg_map[FIRST_PSEUDO_REGISTER][NUM_MACHINE_MODES];\n+#endif\n   /* Mapping from old code-labels to new code-labels.\n      The first element of this map is label_map[min_labelno].  */\n   rtx *label_map;"}, {"sha": "75005f456c3eed2238b0cecec9b86ea238ee596f", "filename": "gcc/testsuite/gcc.c-torture/compile/20010503-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c826ae21755f71ba6607714f97fab37ae0cfacae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010503-1.c?ref=c826ae21755f71ba6607714f97fab37ae0cfacae", "patch": "@@ -0,0 +1,17 @@\n+void f1 (double);\n+void f2 (int);\n+\n+void\n+foo (int type, double xx)\n+{\n+  if (type)\n+    f1 (xx);\n+  else\n+    f2 (type);\n+}\n+\n+void\n+bar (int type)\n+{\n+  foo (type, 1.0);\n+}"}]}