{"sha": "daa159291b6465a235e07ef549a9fb93cefe15f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhMTU5MjkxYjY0NjVhMjM1ZTA3ZWY1NDlhOWZiOTNjZWZlMTVmOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-05-28T00:17:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-05-28T00:17:00Z"}, "message": "testsuite_allocator.h (check_new, [...]): Move to ...\n\n2009-05-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/testsuite_allocator.h (check_new, check_delete): Move\n\tto ...\n\t* testsuite/util/replacement_memory_operators.h: ...here. New.\n\t* testsuite/util/testsuite_hooks.h (counter): To object_counter.\n\t* testsuite/util/testsuite_hooks.cc: Same.\n\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Use\n\treplacement_memory_operators.h.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/check_delete.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-5.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-7.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-6.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-8.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n\t* testsuite/ext/mt_allocator/check_new.cc: Same.\n\t* testsuite/ext/debug_allocator/check_delete.cc: Same.\n\t* testsuite/ext/debug_allocator/check_new.cc: Same.\n\t* testsuite/ext/new_allocator/deallocate_global.cc: Same.\n\t* testsuite/ext/new_allocator/check_delete.cc: Same.\n\t* testsuite/ext/new_allocator/check_new.cc: Same.\n\t* testsuite/ext/new_allocator/deallocate_local.cc: Same.\n\t* testsuite/ext/throw_allocator/deallocate_global.cc: Same.\n\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n\t* testsuite/ext/malloc_allocator/deallocate_global.cc: Same.\n\t* testsuite/ext/malloc_allocator/check_delete.cc: Same.\n\t* testsuite/ext/malloc_allocator/check_new.cc: Same.\n\t* testsuite/ext/malloc_allocator/deallocate_local.cc: Same.\n\t* testsuite/ext/pool_allocator/check_delete.cc: Same.\n\t* testsuite/ext/pool_allocator/check_new.cc: Same.\n\t* testsuite/ext/bitmap_allocator/check_delete.cc: Same.\n\t* testsuite/ext/bitmap_allocator/check_new.cc: Same.\n\t* testsuite/ext/array_allocator/check_delete.cc: Same.\n\t* testsuite/ext/array_allocator/check_new.cc: Same.\n\t* testsuite/23_containers/deque/cons/1.cc: Same.\n\t* testsuite/23_containers/deque/cons/2.cc: Same.\n\nFrom-SVN: r147937", "tree": {"sha": "2e359c3d5a629e6ade88c3f85b5972792348d575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e359c3d5a629e6ade88c3f85b5972792348d575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa159291b6465a235e07ef549a9fb93cefe15f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa159291b6465a235e07ef549a9fb93cefe15f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa159291b6465a235e07ef549a9fb93cefe15f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa159291b6465a235e07ef549a9fb93cefe15f9/comments", "author": null, "committer": null, "parents": [{"sha": "e455776af007aadd80be631e2dd7be60e33dad88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e455776af007aadd80be631e2dd7be60e33dad88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e455776af007aadd80be631e2dd7be60e33dad88"}], "stats": {"total": 1472, "additions": 309, "deletions": 1163}, "files": [{"sha": "fc1fb0d3692ab8e2e9d17351030a9fbdc30d6ff3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -1,3 +1,49 @@\n+2009-05-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/testsuite_allocator.h (check_new, check_delete): Move\n+\tto ...\n+\t* testsuite/util/replacement_memory_operators.h: ...here. New.\n+\t* testsuite/util/testsuite_hooks.h (counter): To object_counter.\n+\t* testsuite/util/testsuite_hooks.cc: Same.\n+\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Use\n+\treplacement_memory_operators.h.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-5.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-7.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-6.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-8.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/check_new.cc: Same.\n+\t* testsuite/ext/debug_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/debug_allocator/check_new.cc: Same.\n+\t* testsuite/ext/new_allocator/deallocate_global.cc: Same.\n+\t* testsuite/ext/new_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/new_allocator/check_new.cc: Same.\n+\t* testsuite/ext/new_allocator/deallocate_local.cc: Same.\n+\t* testsuite/ext/throw_allocator/deallocate_global.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n+\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n+\t* testsuite/ext/malloc_allocator/deallocate_global.cc: Same.\n+\t* testsuite/ext/malloc_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/malloc_allocator/check_new.cc: Same.\n+\t* testsuite/ext/malloc_allocator/deallocate_local.cc: Same.\n+\t* testsuite/ext/pool_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/pool_allocator/check_new.cc: Same.\n+\t* testsuite/ext/bitmap_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/bitmap_allocator/check_new.cc: Same.\n+\t* testsuite/ext/array_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/array_allocator/check_new.cc: Same.\n+\t* testsuite/23_containers/deque/cons/1.cc: Same.\n+\t* testsuite/23_containers/deque/cons/2.cc: Same.\n+\n 2009-05-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* libsupc++/initializer_list: Format."}, {"sha": "579521582c755df8b190defe6ba68f39202bcb88", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F1.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -26,7 +26,7 @@\n #include <testsuite_allocator.h>\n #include <testsuite_hooks.h>\n \n-typedef std::deque<__gnu_test::counter>   gdeque;\n+typedef std::deque<__gnu_test::object_counter>   gdeque;\n \n bool test __attribute__((unused)) = true;\n "}, {"sha": "23600284e72b1be34d232bc6554abe1d7a0985d8", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -31,10 +31,10 @@ using __gnu_test::tracker_allocator_counter;\n using __gnu_test::tracker_allocator;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n-using __gnu_test::counter;\n+using __gnu_test::object_counter;\n using __gnu_test::destructor;\n \n-typedef std::deque<counter>   gdeque;\n+typedef std::deque<object_counter>   gdeque;\n \n bool test __attribute__((unused)) = true;\n "}, {"sha": "9e6f32d13fa6e854e5156c944ce6834b408ed0b7", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,40 +21,15 @@\n \n #include <cstdlib>\n #include <ext/array_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <replacement_memory_operators.h>\n \n-using __gnu_cxx::array_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n+int main()\n { \n-  bool test __attribute__((unused)) = true;\n   typedef unsigned int value_type;\n   typedef std::tr1::array<value_type, 15> array_type;\n-  typedef array_allocator<value_type, array_type> allocator_type;\n+  typedef __gnu_cxx::array_allocator<value_type, array_type> allocator_type;\n   array_type store;\n   allocator_type a(&store);\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>(a)) ); \n-}\n-\n-int main()\n-{\n-  test01();\n+  __gnu_test::check_delete<allocator_type, false>(a); \n   return 0;\n }\n-"}, {"sha": "2d51a02506451ba1aec17bbd7e9715008a63a223", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,40 +21,15 @@\n \n #include <cstdlib>\n #include <ext/array_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <replacement_memory_operators.h>\n \n-using __gnu_cxx::array_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n+int main()\n { \n-  bool test __attribute__((unused)) = true;\n   typedef unsigned int value_type;\n   typedef std::tr1::array<value_type, 15> array_type;\n-  typedef array_allocator<value_type, array_type> allocator_type;\n+  typedef __gnu_cxx::array_allocator<value_type, array_type> allocator_type;\n   array_type store;\n   allocator_type a(&store);\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, false>(a)) ); \n-}\n-\n-int main()\n-{\n-  test01();\n+  __gnu_test::check_new<allocator_type, false>(a); \n   return 0;\n }\n-"}, {"sha": "a82bcc7f9482773e06a0f5b61279fae390129e63", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -19,35 +19,11 @@\n \n #include <cstdlib>\n #include <ext/bitmap_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::bitmap_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef bitmap_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::bitmap_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, true>(); \n   return 0;\n }"}, {"sha": "205fa3a1786b201f3704eff1d9c33581bcfc69a0", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -19,35 +19,11 @@\n \n #include <cstdlib>\n #include <ext/bitmap_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::bitmap_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef bitmap_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::bitmap_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }"}, {"sha": "5b9d06142b6ff4c73d4ee7b857af188befc4c48d", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -22,37 +22,12 @@\n #include <cstdlib>\n #include <ext/debug_allocator.h>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <replacement_memory_operators.h>\n \n-using __gnu_cxx::malloc_allocator;\n-using __gnu_cxx::debug_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n+int main()\n { \n-  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_cxx;\n   typedef debug_allocator<malloc_allocator<unsigned int> > allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n-}\n-\n-int main()\n-{\n-  test01();\n+  __gnu_test::check_delete<allocator_type, false>();\n   return 0;\n }\n-"}, {"sha": "105bf2889127447e408fb585f7eb28634fe385e2", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -22,37 +22,12 @@\n #include <cstdlib>\n #include <ext/debug_allocator.h>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <replacement_memory_operators.h>\n \n-using __gnu_cxx::malloc_allocator;\n-using __gnu_cxx::debug_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n+int main()\n { \n-  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_cxx;\n   typedef debug_allocator<malloc_allocator<unsigned int> > allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, false>()) ); \n-}\n-\n-int main()\n-{\n-  test01();\n+  __gnu_test::check_new<allocator_type, false>(); \n   return 0;\n }\n-"}, {"sha": "2ed8d0454c09705c348ca99bf5e8075262731129", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,36 +21,11 @@\n \n #include <cstdlib>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::malloc_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef malloc_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::malloc_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, false>(); \n   return 0;\n }\n-"}, {"sha": "fac139f2b0c83b42b5841c456a97a2dab1831a51", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,36 +21,11 @@\n \n #include <cstdlib>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::malloc_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef malloc_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, false>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::malloc_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, false>(); \n   return 0;\n }\n-"}, {"sha": "67041f5483f9d5e4054b0cd6af05a9e254f409ec", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/deallocate_global.cc", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -17,56 +17,15 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 20.4.1.1 allocator members\n-\n #include <string>\n #include <stdexcept>\n-#include <cstdio>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() {}\n-  ~count_check()\n-  {\n-    if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%lu allocations to be released \\n\",\n-\t   static_cast<unsigned long>(count));\n-  free(p);\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::malloc_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n string_t s(\"bayou bend\");\n "}, {"sha": "76ae1995f55080f15b4d594356302fbd58791058", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/deallocate_local.cc", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 \n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -17,51 +17,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 20.4.1.1 allocator members\n-\n #include <string>\n-#include <cstdio>\n #include <ext/malloc_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-static size_t alloc_cnt;\n- \n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  alloc_cnt++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  alloc_cnt--;\n-  if (alloc_cnt == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%lu allocations to be released \\n\",\n-\t   static_cast<unsigned long>(alloc_cnt));\n-  free(p);\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::malloc_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n   {\n     string_t s;\n     s += \"bayou bend\";\n   }\n-  VERIFY( alloc_cnt == 0 );\n+\n+  if (__gnu_test::counter::count() != 0)\n+    throw std::runtime_error(\"count not zero\");\n   return 0;\n }"}, {"sha": "374c567060ace8714a7a3663acb02cab154f3310", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,34 +21,11 @@\n \n #include <cstdlib>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::__mt_alloc;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void* v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef __mt_alloc<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::__mt_alloc<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, false>(); \n   return 0;\n }"}, {"sha": "5279326406386b0787c735a4cee0ebac22ef9e85", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,35 +21,12 @@\n \n #include <cstdlib>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n+#include <replacement_memory_operators.h>\n \n-using __gnu_cxx::__mt_alloc;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void* v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-void test01() \n+int main()\n { \n   // Uses new but delete only optionally.\n-  bool test __attribute__((unused)) = true;\n-  typedef __mt_alloc<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n-}\n-\n-int main()\n-{\n-  test01();\n+  typedef __gnu_cxx::__mt_alloc<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }"}, {"sha": "fcc5006bd3c7acac16c182c32899d7736c59505a", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-2.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,43 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef std::string value_type;\n using __gnu_cxx::__pool;\n@@ -74,6 +38,9 @@ list_type l;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "cafbffb3494b22b0f596d3e02179a6ca90f243e3", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-4.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,43 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef std::string value_t;\n using __gnu_cxx::__pool;\n@@ -74,6 +38,9 @@ list_type l;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "f61cd38b790b0b9a1acbd5d0bd210da1404a3d57", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,43 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef std::string value_type;\n using __gnu_cxx::__pool;\n@@ -74,6 +38,9 @@ list_type l;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "62074f0a426ced42d6fc6fc02910da3881419756", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,43 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef std::string value_type;\n using __gnu_cxx::__pool;\n@@ -74,6 +38,9 @@ list_type l;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "9ccebd57ed04b387635e630f6911b31995df9de1", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-2.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -23,43 +23,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n@@ -70,6 +34,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "9265a15a98b7433aace491d05290e22bc662b88a", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-4.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -23,43 +23,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n@@ -71,6 +35,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "01755713885915d10fd09e4afb117b5ed695b1df", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,42 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: Using a pool that attempts to clean up resource use.\n-    if (count != 0)\n-      {\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n template<bool _Thread>\n   struct cleanup_pool : public __gnu_cxx::__pool<false>\n@@ -81,6 +46,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "34005e4b091d613fbe95f6b31afb58b97f71cb9b", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-8.cc", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,42 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: Using a pool that attempts to clean up resource use.\n-    if (count != 0)\n-      {\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n template<bool _Thread>\n   struct cleanup_pool : public __gnu_cxx::__pool<false>\n@@ -82,6 +47,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "012a7585acf940ebf0ec79df5469e5fb4fa3a95a", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -23,43 +23,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n@@ -70,6 +34,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "0a9fde02b12827682aa52f596a151eb44ed0921f", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -23,43 +23,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n-    // be zero.\n-    if (count != 0)\n-      {\n-\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n@@ -71,6 +35,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "a812aecf26c21d58d86e2565882cf07d84dac366", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-5.cc", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,42 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: Using a pool that attempts to clean up resource use.\n-    if (count != 0)\n-      {\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n template<bool _Thread>\n   struct cleanup_pool : public __gnu_cxx::__pool<true>\n@@ -72,7 +37,6 @@ template<bool _Thread>\n     ~cleanup_pool() throw() { this->_M_destroy(); }\n   };\n \n-\n typedef char value_type;\n typedef std::char_traits<value_type> traits_type;\n typedef __gnu_cxx::__common_pool_policy<cleanup_pool, true> policy_type;\n@@ -81,6 +45,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "ac8426ee9fc5fa0369d72d2bee611298b43a5e4b", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -24,42 +24,7 @@\n #include <stdexcept>\n #include <cstdio>\n #include <ext/mt_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    // NB: Using a pool that attempts to clean up resource use.\n-    if (count != 0)\n-      {\n-\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n-\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n-      }\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n template<bool _Thread>\n   struct cleanup_pool : public __gnu_cxx::__pool<true>\n@@ -82,6 +47,9 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n+  // NB: __mt_allocator doesn't clean itself up. Thus, the count will\n+  // not be zero.\n+  __gnu_test::counter::exceptions(false);\n   string_type s;\n   s += \"bayou bend\";\n   return 0;"}, {"sha": "cff31c8926d6f176bfb711a110be379e38fc8f0a", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,36 +21,11 @@\n \n #include <cstdlib>\n #include <ext/new_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::new_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef new_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::new_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, true>(); \n   return 0;\n }\n-"}, {"sha": "098b624d146642b8f4c749e3dc8b90416ac12cc3", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,36 +21,11 @@\n \n #include <cstdlib>\n #include <ext/new_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::new_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef new_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::new_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }\n-"}, {"sha": "783be483da80b84f891bff46557a1e88713843f1", "filename": "libstdc++-v3/testsuite/ext/new_allocator/deallocate_global.cc", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -17,50 +17,15 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 20.4.1.1 allocator members\n-\n #include <string>\n #include <stdexcept>\n-#include <cstdlib>\n-#include <cstdio>\n #include <ext/new_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    if (count != 0)\n-      throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  std::printf(\"operator new is called \\n\");\n-  void* p = std::malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  std::printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::new_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n string_t s(\"bayou bend\");\n "}, {"sha": "dd7c634e06c3ca2d613144298f61a600bbcbe1e7", "filename": "libstdc++-v3/testsuite/ext/new_allocator/deallocate_local.cc", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 \n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -17,54 +17,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 20.4.1.1 allocator members\n-\n #include <string>\n-#include <stdexcept>\n-#include <cstdlib>\n-#include <cstdio>\n #include <ext/new_allocator.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() { }\n-  ~count_check()\n-  {\n-    if (count != 0)\n-      throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  std::printf(\"operator new is called \\n\");\n-  void* p = std::malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  std::printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::new_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n int main()\n {\n-  string_t s;\n-  s += \"bayou bend\";\n+  {\n+    string_t s;\n+    s += \"bayou bend\";\n+  }\n+\n+  if (__gnu_test::counter::count() != 0)\n+    throw std::runtime_error(\"count not zero\");\n   return 0;\n }"}, {"sha": "ecc399df638d3072c5a634dd7b461cf9d5e240be", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,36 +21,12 @@\n \n #include <cstdlib>\n #include <ext/pool_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::__pool_alloc;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-void test01() \n-{ \n-  // Uses new, but delete only sometimes.\n-  bool test __attribute__((unused)) = true;\n-  typedef __pool_alloc<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, false>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n {\n-  test01();\n+  // Uses new, but delete only sometimes.\n+  typedef __gnu_cxx::__pool_alloc<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, false>(); \n   return 0;\n }\n-"}, {"sha": "f1bdb77bb8658726e247e802e7d275dbf13a79cc", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,35 +21,11 @@\n \n #include <cstdlib>\n #include <ext/pool_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::__pool_alloc;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef __pool_alloc<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::__pool_alloc<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }\n-"}, {"sha": "cfc38ee02f663840866e1fdcd9b1cdbff6daaa57", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_delete.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -20,36 +20,11 @@\n \n #include <cstdlib>\n #include <ext/throw_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::throw_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef throw_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_delete<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::throw_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_delete<allocator_type, true>(); \n   return 0;\n }\n-"}, {"sha": "2d42891766b1136b382d386991eb88fe212951d2", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_new.cc", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -20,36 +20,11 @@\n \n #include <cstdlib>\n #include <ext/throw_allocator.h>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-using __gnu_cxx::throw_allocator;\n-\n-void* \n-operator new(std::size_t n) throw(std::bad_alloc)\n-{\n-  new_called = true;\n-  return std::malloc(n);\n-}\n-\n-void\n-operator delete(void *v) throw()\n-{\n-  delete_called = true;\n-  return std::free(v);\n-}\n-\n-// These just help tracking down error messages.\n-void test01() \n-{ \n-  bool test __attribute__((unused)) = true;\n-  typedef throw_allocator<unsigned int> allocator_type;\n-  VERIFY( bool(__gnu_test::check_new<allocator_type, true>()) ); \n-}\n+#include <replacement_memory_operators.h>\n \n int main()\n-{\n-  test01();\n+{ \n+  typedef __gnu_cxx::throw_allocator<unsigned int> allocator_type;\n+  __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }\n-"}, {"sha": "c53517ebc13eb41073d182f61475b250e4954012", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_global.cc", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -21,50 +21,12 @@\n #include <string>\n #include <stdexcept>\n #include <ext/throw_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-static size_t count;\n-\n-struct count_check\n-{\n-  count_check() {}\n-  ~count_check()\n-  {\n-    if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-  }\n-};\n- \n-static count_check check;\n-\n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  count++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%lu allocations to be released \\n\",\n-\t   static_cast<unsigned long>(count));\n-  free(p);\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n string_t s(\"bayou bend\");\n "}, {"sha": "c2e918ccc256e4a4681a35e0a496e83e4c203196", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_local.cc", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -20,46 +20,21 @@\n \n #include <string>\n #include <ext/throw_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-static size_t alloc_cnt;\n- \n-void* operator new(size_t size) throw(std::bad_alloc)\n-{\n-  printf(\"operator new is called \\n\");\n-  void* p = malloc(size);\n-  if (p == NULL)\n-    throw std::bad_alloc();\n-  alloc_cnt++;\n-  return p;\n-}\n- \n-void operator delete(void* p) throw()\n-{\n-  printf(\"operator delete is called \\n\");\n-  if (p == NULL)\n-    return;\n-  alloc_cnt--;\n-  if (alloc_cnt == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%lu allocations to be released \\n\",\n-\t   static_cast<unsigned long>(alloc_cnt));\n-  free(p);\n-}\n+#include <replacement_memory_operators.h>\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n   {\n     string_t s;\n     s += \"bayou bend\";\n   }\n-  VERIFY( alloc_cnt == 0 );\n+\n+  if (__gnu_test::counter::count() != 0)\n+    throw std::runtime_error(\"count not zero\");\n   return 0;\n }"}, {"sha": "91c8fa3d38ab60c6126f2399d3330bc2cdc5cd09", "filename": "libstdc++-v3/testsuite/util/replacement_memory_operators.h", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -0,0 +1,110 @@\n+//\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+\n+namespace __gnu_test\n+{\n+  struct counter_error : public std::exception { };\n+\n+  struct counter\n+  {\n+    size_t \t_M_count;\n+    bool\t_M_throw;\n+\n+    counter() : _M_count(0), _M_throw(true) { }\n+    \n+    ~counter()\n+    {\n+      if (_M_throw && _M_count != 0)\n+\tthrow counter_error();\n+    }\n+\n+    static void\n+    increment() { get()._M_count++; }\n+\n+    static void\n+    decrement() { get()._M_count--; }\n+\n+    static counter&\n+    get() \n+    {\n+      static counter g;\n+      return g;\n+    }\n+  \n+    static size_t\n+    count() { return get()._M_count; }\n+\n+    static void\n+    exceptions(bool __b) { get()._M_throw = __b; }\n+  };\n+\n+  template<typename Alloc, bool uses_global_new>\n+    bool \n+    check_new(Alloc a = Alloc())\n+    {\n+      __gnu_test::counter::exceptions(false);\n+      a.allocate(10);\n+      const bool __b((__gnu_test::counter::count() > 0) == uses_global_new);\n+      if (!__b)\n+\tthrow std::logic_error(\"counter not incremented\");\n+      return __b;\n+    }\n+\n+  template<typename Alloc, bool uses_global_delete>\n+    bool \n+    check_delete(Alloc a = Alloc())\n+    {\n+      __gnu_test::counter::exceptions(false);\n+      typename Alloc::pointer p = a.allocate(10);\n+      const std::size_t count1 = __gnu_test::counter::count();\n+      a.deallocate(p, 10);\n+      const std::size_t count2 = __gnu_test::counter::count();\n+      const bool __b((count2 < count1) == uses_global_delete);\n+      if (!__b)\n+\tthrow std::logic_error(\"counter not decremented\");\n+      return __b;\n+    }\n+} // namespace __gnu_test\n+\n+void* operator new(std::size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = std::malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  __gnu_test::counter::increment();\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p != NULL)\n+    {\n+      std::free(p);\n+      __gnu_test::counter::decrement();\n+\n+      std::size_t count = __gnu_test::counter::count(); \n+      if (count == 0)\n+\tprintf(\"All memory released \\n\");\n+      else\n+\tprintf(\"%lu allocations to be released \\n\", count);\n+    }\n+}"}, {"sha": "96fe546b48257473af95aaf89e03c33de3b99d80", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -32,12 +32,6 @@\n #include <cassert>\n #include <bits/move.h>\n \n-namespace \n-{\n-  bool new_called = false;\n-  bool delete_called = false;\n-}\n-\n namespace __gnu_test\n {\n   class tracker_allocator_counter\n@@ -186,27 +180,6 @@ namespace __gnu_test\n   bool\n   check_construct_destroy(const char* tag, int expected_c, int expected_d);\n \n-  template<typename Alloc, bool uses_global_new>\n-    bool \n-    check_new(Alloc a = Alloc())\n-    {\n-      bool test __attribute__((unused)) = true;\n-      a.allocate(10);\n-      test &= ( new_called == uses_global_new );\n-      return test;\n-    }\n-\n-  template<typename Alloc, bool uses_global_delete>\n-    bool \n-    check_delete(Alloc a = Alloc())\n-    {\n-      bool test __attribute__((unused)) = true;\n-      typename Alloc::pointer p = a.allocate(10);\n-      a.deallocate(p, 10);\n-      test &= ( delete_called == uses_global_delete );\n-      return test;\n-    }\n-\n   template<typename Alloc>\n     bool\n     check_deallocate_null()"}, {"sha": "6d77d57672febc7653d50f4429caeffd20b9e631", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.cc?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -217,7 +217,7 @@ namespace __gnu_test\n #endif\n   }\n \n-  counter::size_type  counter::count = 0;\n+  object_counter::size_type  object_counter::count = 0;\n   unsigned int copy_constructor::count_ = 0;\n   unsigned int copy_constructor::throw_on_ = 0;\n   unsigned int assignment_operator::count_ = 0;"}, {"sha": "88155fa70a91b310753b7cab14fb27e7b4d79692", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa159291b6465a235e07ef549a9fb93cefe15f9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h?ref=daa159291b6465a235e07ef549a9fb93cefe15f9", "patch": "@@ -34,8 +34,8 @@\n //   limit in megabytes (a floating-point number).  If _GLIBCXX_RES_LIMITS is\n //   not #defined before including this header, then no limiting is attempted.\n //\n-// 3)  counter\n-//   This is a POD with a static data member, gnu_counting_struct::count,\n+// 3)  object_counter\n+//   This is a POD with a static data member, object_counter::count,\n //   which starts at zero, increments on instance construction, and decrements\n //   on instance destruction.  \"assert_count(n)\" can be called to VERIFY()\n //   that the count equals N.\n@@ -135,19 +135,19 @@ namespace __gnu_test\n   run_tests_wrapped_env(const char*, const char*, const func_callback&);\n \n   // Counting.\n-  struct counter\n+  struct object_counter\n   {\n-    // Specifically and glaringly-obviously marked 'signed' so that when\n-    // COUNT mistakenly goes negative, we can track the patterns of\n-    // deletions more easily.\n+    // Specifically and glaringly-obviously marked 'signed' so that\n+    // when COUNT mistakenly goes negative, we can track the patterns\n+    // of deletions more easily.\n     typedef  signed int     size_type;\n     static size_type   count;\n-    counter() { ++count; }\n-    counter (const counter&) { ++count; }\n-    ~counter() { --count; }\n+    object_counter() { ++count; }\n+    object_counter (const object_counter&) { ++count; }\n+    ~object_counter() { --count; }\n   };\n   \n-#define assert_count(n)   VERIFY(__gnu_test::counter::count == n)\n+#define assert_count(n)   VERIFY(__gnu_test::object_counter::count == n)\n   \n   // A (static) class for counting copy constructors and possibly throwing an\n   // exception on a desired count."}]}