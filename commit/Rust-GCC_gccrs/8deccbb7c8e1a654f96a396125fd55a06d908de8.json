{"sha": "8deccbb7c8e1a654f96a396125fd55a06d908de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlY2NiYjdjOGUxYTY1NGY5NmEzOTYxMjVmZDU1YTA2ZDkwOGRlOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-19T07:10:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-19T07:10:30Z"}, "message": "rtl.h (PUT_MODE_RAW): New macro.\n\ngcc/\n\t* rtl.h (PUT_MODE_RAW): New macro.\n\t(PUT_REG_NOTE_KIND): Use it.\n\t(set_mode_and_regno): Declare.\n\t(gen_raw_REG): Change regno to \"unsigned int\".\n\t(gen_rtx_REG): Change \"unsigned\" to \"unsigned int\".\n\t(PUT_MODE): Forward to PUT_MODE_RAW for generators, otherwise\n\tuse set_mode_and_regno to change the mode of registers.\n\t* gengenrtl.c (gendef): Use PUT_MODE_RAW.\n\t* emit-rtl.c (set_mode_and_regno): New function.\n\t(gen_raw_REG): Change regno to unsigned int.  Use set_mode_and_regno.\n\t* caller-save.c (reg_save_code): Use set_mode_and_regno.\n\t* expr.c (init_expr_target): Likewise.\n\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n\t* postreload.c (reload_cse_simplify_operands): Likewise.\n\nFrom-SVN: r223341", "tree": {"sha": "e80e5feb9d03c58ba2389923025b96b099c6ff0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80e5feb9d03c58ba2389923025b96b099c6ff0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8deccbb7c8e1a654f96a396125fd55a06d908de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8deccbb7c8e1a654f96a396125fd55a06d908de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8deccbb7c8e1a654f96a396125fd55a06d908de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8deccbb7c8e1a654f96a396125fd55a06d908de8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2446b1ed3a1b5342eebc4bc6da93740c400428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2446b1ed3a1b5342eebc4bc6da93740c400428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2446b1ed3a1b5342eebc4bc6da93740c400428"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "c18b7368da0adfad2f6fd8aaefba381f012c1e7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -1,3 +1,20 @@\n+2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (PUT_MODE_RAW): New macro.\n+\t(PUT_REG_NOTE_KIND): Use it.\n+\t(set_mode_and_regno): Declare.\n+\t(gen_raw_REG): Change regno to \"unsigned int\".\n+\t(gen_rtx_REG): Change \"unsigned\" to \"unsigned int\".\n+\t(PUT_MODE): Forward to PUT_MODE_RAW for generators, otherwise\n+\tuse set_mode_and_regno to change the mode of registers.\n+\t* gengenrtl.c (gendef): Use PUT_MODE_RAW.\n+\t* emit-rtl.c (set_mode_and_regno): New function.\n+\t(gen_raw_REG): Change regno to unsigned int.  Use set_mode_and_regno.\n+\t* caller-save.c (reg_save_code): Use set_mode_and_regno.\n+\t* expr.c (init_expr_target): Likewise.\n+\t* ira.c (setup_prohibited_mode_move_regs): Likewise.\n+\t* postreload.c (reload_cse_simplify_operands): Likewise.\n+\n 2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* caller-save.c (init_caller_save): Use word_mode and"}, {"sha": "2cb77e6ccdfdfa29230a8b81f5b3a7c2dc9fc707", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -150,8 +150,7 @@ reg_save_code (int reg, machine_mode mode)\n \n   /* Update the register number and modes of the register\n      and memory operand.  */\n-  SET_REGNO_RAW (test_reg, reg);\n-  PUT_MODE (test_reg, mode);\n+  set_mode_and_regno (test_reg, mode, reg);\n   PUT_MODE (test_mem, mode);\n \n   /* Force re-recognition of the modified insns.  */"}, {"sha": "03bd76a206b107f7769c8210d6d75a940c962e98", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -430,16 +430,24 @@ gen_blockage (void)\n #endif\n \n \n+/* Set the mode and register number of X to MODE and REGNO.  */\n+\n+void\n+set_mode_and_regno (rtx x, machine_mode mode, unsigned int regno)\n+{\n+  PUT_MODE_RAW (x, mode);\n+  SET_REGNO_RAW (x, regno);\n+}\n+\n /* Generate a new REG rtx.  Make sure ORIGINAL_REGNO is set properly, and\n    don't attempt to share with the various global pieces of rtl (such as\n    frame_pointer_rtx).  */\n \n rtx\n-gen_raw_REG (machine_mode mode, int regno)\n+gen_raw_REG (machine_mode mode, unsigned int regno)\n {\n   rtx x = rtx_alloc_stat (REG PASS_MEM_STAT);\n-  PUT_MODE (x, mode);\n-  SET_REGNO_RAW (x, regno);\n+  set_mode_and_regno (x, mode, regno);\n   REG_ATTRS (x) = NULL;\n   ORIGINAL_REGNO (x) = regno;\n   return x;"}, {"sha": "e91383f905586c410924b769663fc64bc0287a6c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -221,7 +221,6 @@ init_expr_target (void)\n       direct_load[(int) mode] = direct_store[(int) mode] = 0;\n       PUT_MODE (mem, mode);\n       PUT_MODE (mem1, mode);\n-      PUT_MODE (reg, mode);\n \n       /* See if there is some register that can be used in this mode and\n \t directly loaded or stored from memory.  */\n@@ -234,7 +233,7 @@ init_expr_target (void)\n \t    if (! HARD_REGNO_MODE_OK (regno, mode))\n \t      continue;\n \n-\t    SET_REGNO (reg, regno);\n+\t    set_mode_and_regno (reg, mode, regno);\n \n \t    SET_SRC (pat) = mem;\n \t    SET_DEST (pat) = reg;"}, {"sha": "34f0de346a2e031ddc048e25e573058f04773bb4", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -252,7 +252,7 @@ gendef (const char *format)\n   puts (\"  rtx rt;\");\n   puts (\"  rt = rtx_alloc_stat (code PASS_MEM_STAT);\\n\");\n \n-  puts (\"  PUT_MODE (rt, mode);\");\n+  puts (\"  PUT_MODE_RAW (rt, mode);\");\n \n   for (p = format, i = j = 0; *p ; ++p, ++i)\n     if (*p != '0')"}, {"sha": "f409a8119bd4092d30fb9db4c7c22eac4eaaf371", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -1778,10 +1778,8 @@ setup_prohibited_mode_move_regs (void)\n \t{\n \t  if (! HARD_REGNO_MODE_OK (j, (machine_mode) i))\n \t    continue;\n-\t  SET_REGNO_RAW (test_reg1, j);\n-\t  PUT_MODE (test_reg1, (machine_mode) i);\n-\t  SET_REGNO_RAW (test_reg2, j);\n-\t  PUT_MODE (test_reg2, (machine_mode) i);\n+\t  set_mode_and_regno (test_reg1, (machine_mode) i, j);\n+\t  set_mode_and_regno (test_reg2, (machine_mode) i, j);\n \t  INSN_CODE (move_insn) = -1;\n \t  recog_memoized (move_insn);\n \t  if (INSN_CODE (move_insn) < 0)"}, {"sha": "525c66133f0a63678e3ccc94f3b5945abaf795d9", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -562,8 +562,7 @@ reload_cse_simplify_operands (rtx_insn *insn, rtx testreg)\n \t  if (! TEST_HARD_REG_BIT (equiv_regs[i], regno))\n \t    continue;\n \n-\t  SET_REGNO_RAW (testreg, regno);\n-\t  PUT_MODE (testreg, mode);\n+\t  set_mode_and_regno (testreg, mode, regno);\n \n \t  /* We found a register equal to this operand.  Now look for all\n \t     alternatives that can accept this register and have not been"}, {"sha": "955ce7d027dbd96531d9d731c96bfa588b0647ef", "filename": "gcc/rtl.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deccbb7c8e1a654f96a396125fd55a06d908de8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8deccbb7c8e1a654f96a396125fd55a06d908de8", "patch": "@@ -668,8 +668,8 @@ class GTY(()) rtx_note : public rtx_insn\n #define GET_CODE(RTX)\t    ((enum rtx_code) (RTX)->code)\n #define PUT_CODE(RTX, CODE) ((RTX)->code = (CODE))\n \n-#define GET_MODE(RTX)\t    ((machine_mode) (RTX)->mode)\n-#define PUT_MODE(RTX, MODE) ((RTX)->mode = (MODE))\n+#define GET_MODE(RTX)\t\t((machine_mode) (RTX)->mode)\n+#define PUT_MODE_RAW(RTX, MODE)\t((RTX)->mode = (MODE))\n \n /* RTL vector.  These appear inside RTX's when there is a need\n    for a variable number of things.  The principle use is inside\n@@ -1509,7 +1509,7 @@ enum reg_note\n /* Define macros to extract and insert the reg-note kind in an EXPR_LIST.  */\n #define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))\n #define PUT_REG_NOTE_KIND(LINK, KIND) \\\n-  PUT_MODE (LINK, (machine_mode) (KIND))\n+  PUT_MODE_RAW (LINK, (machine_mode) (KIND))\n \n /* Names for REG_NOTE's in EXPR_LIST insn's.  */\n \n@@ -3216,13 +3216,27 @@ gen_rtx_INSN (machine_mode mode, rtx_insn *prev_insn, rtx_insn *next_insn,\n \t      rtx reg_notes);\n extern rtx gen_rtx_CONST_INT (machine_mode, HOST_WIDE_INT);\n extern rtx gen_rtx_CONST_VECTOR (machine_mode, rtvec);\n-extern rtx gen_raw_REG (machine_mode, int);\n-extern rtx gen_rtx_REG (machine_mode, unsigned);\n+extern void set_mode_and_regno (rtx, machine_mode, unsigned int);\n+extern rtx gen_raw_REG (machine_mode, unsigned int);\n+extern rtx gen_rtx_REG (machine_mode, unsigned int);\n extern rtx gen_rtx_SUBREG (machine_mode, rtx, int);\n extern rtx gen_rtx_MEM (machine_mode, rtx);\n extern rtx gen_rtx_VAR_LOCATION (machine_mode, tree, rtx,\n \t\t\t\t enum var_init_status);\n \n+#ifdef GENERATOR_FILE\n+#define PUT_MODE(RTX, MODE) PUT_MODE_RAW (RTX, MODE)\n+#else\n+static inline void\n+PUT_MODE (rtx x, machine_mode mode)\n+{\n+  if (REG_P (x))\n+    set_mode_and_regno (x, mode, REGNO (x));\n+  else\n+    PUT_MODE_RAW (x, mode);\n+}\n+#endif\n+\n #define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))\n \n /* Virtual registers are used during RTL generation to refer to locations into"}]}