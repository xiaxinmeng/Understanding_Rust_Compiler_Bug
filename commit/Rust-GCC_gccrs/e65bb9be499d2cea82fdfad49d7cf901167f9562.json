{"sha": "e65bb9be499d2cea82fdfad49d7cf901167f9562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1YmI5YmU0OTlkMmNlYTgyZmRmYWQ0OWQ3Y2Y5MDExNjdmOTU2Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-27T14:56:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-27T14:56:33Z"}, "message": "invoke.texi (-fipa-profile): Document.\n\n\n\t* doc/invoke.texi (-fipa-profile): Document.\n\t* opts.c (decode_options): Enable ipa-profile at -O1.\n\t* timevar.def (TV_IPA_PROFILE): Define.\n\t* common.opt (fipa-profile): Add.\n\t* cgraph.c (cgraph_clone_node): Set local flag and clear vtable method flag\n\tfor clones.\n\t(cgraph_propagate_frequency): Handle only local ones.\n\t* tree-pass.h (pass_ipa_profile): Declare.\n\t* ipa-profile.c (gate_profile): Use flag_ipa_profile.\n\t(pass_ipa_profile): Use TV_IPA_PROFILE.\n\t* ipa.c (ipa_profile): New function.\n\t(gate_ipa_profile): Likewise.\n\t(pass_ipa_profile): New global variable.\n\t* passes.c (pass_ipa_profile): New.\n\nFrom-SVN: r158788", "tree": {"sha": "ba01f849174d822c82ea0fcae6a53e429d1ab377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba01f849174d822c82ea0fcae6a53e429d1ab377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65bb9be499d2cea82fdfad49d7cf901167f9562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65bb9be499d2cea82fdfad49d7cf901167f9562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65bb9be499d2cea82fdfad49d7cf901167f9562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65bb9be499d2cea82fdfad49d7cf901167f9562/comments", "author": null, "committer": null, "parents": [{"sha": "38e3d8681f2e6773b44afc6beee57630e9b20b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e3d8681f2e6773b44afc6beee57630e9b20b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e3d8681f2e6773b44afc6beee57630e9b20b8e"}], "stats": {"total": 127, "additions": 122, "deletions": 5}, "files": [{"sha": "a6e7bf422934d9ac97e04c8abb665a52c34e0707", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -1,3 +1,20 @@\n+2010-04-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi (-fipa-profile): Document.\n+\t* opts.c (decode_options): Enable ipa-profile at -O1.\n+\t* timevar.def (TV_IPA_PROFILE): Define.\n+\t* common.opt (fipa-profile): Add.\n+\t* cgraph.c (cgraph_clone_node): Set local flag and clear vtable method flag\n+\tfor clones.\n+\t(cgraph_propagate_frequency): Handle only local ones.\n+\t* tree-pass.h (pass_ipa_profile): Declare.\n+\t* ipa-profile.c (gate_profile): Use flag_ipa_profile.\n+\t(pass_ipa_profile): Use TV_IPA_PROFILE.\n+\t* ipa.c (ipa_profile): New function.\n+\t(gate_ipa_profile): Likewise.\n+\t(pass_ipa_profile): New global variable.\n+\t* passes.c (pass_ipa_profile): New.\n+\n 2010-04-27  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/arm/arm.c (arm_expand_builtin): Remove redundant declaration."}, {"sha": "781d3b0455f2a43747e70ae792a746e3ca09e693", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -1897,6 +1897,8 @@ cgraph_clone_node (struct cgraph_node *n, gcov_type count, int freq,\n   new_node->analyzed = n->analyzed;\n   new_node->local = n->local;\n   new_node->local.externally_visible = false;\n+  new_node->local.local = true;\n+  new_node->local.vtable_method = false;\n   new_node->global = n->global;\n   new_node->rtl = n->rtl;\n   new_node->count = count;\n@@ -2314,7 +2316,7 @@ cgraph_propagate_frequency (struct cgraph_node *node)\n {\n   bool maybe_unlikely_executed = true, maybe_executed_once = true;\n   struct cgraph_edge *edge;\n-  if (node->needed || node->local.externally_visible)\n+  if (!node->local.local)\n     return false;\n   gcc_assert (node->analyzed);\n   if (node->frequency == NODE_FREQUENCY_HOT)"}, {"sha": "bb3932447cb4ed0879915c77e2e30d21f9931516", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -693,14 +693,18 @@ fipa-cp-clone\n Common Report Var(flag_ipa_cp_clone) Optimization\n Perform cloning to make Interprocedural constant propagation stronger\n \n-fipa-pure-const\n-Common Report Var(flag_ipa_pure_const) Init(0) Optimization\n-Discover pure and const functions\n+fipa-profile\n+Common Report Var(flag_ipa_profile) Init(0) Optimization\n+Perform interprocedural profile propagation\n \n fipa-pta\n Common Report Var(flag_ipa_pta) Init(0) Optimization\n Perform interprocedural points-to analysis\n \n+fipa-pure-const\n+Common Report Var(flag_ipa_pure_const) Init(0) Optimization\n+Discover pure and const functions\n+\n fipa-reference\n Common Report Var(flag_ipa_reference) Init(0) Optimization\n Discover readonly and non addressable static variables"}, {"sha": "23f744b9bfb756fda7e959b4d05dcc871725cb25", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -344,7 +344,7 @@ Objective-C and Objective-C++ Dialects}.\n -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining @gol\n -finline-functions -finline-functions-called-once -finline-limit=@var{n} @gol\n -finline-small-functions -fipa-cp -fipa-cp-clone -fipa-matrix-reorg -fipa-pta @gol\n--fipa-pure-const -fipa-reference -fipa-struct-reorg @gol\n+-fipa-profile -fipa-pure-const -fipa-reference -fipa-struct-reorg @gol\n -fipa-type-escape -fira-algorithm=@var{algorithm} @gol\n -fira-region=@var{region} -fira-coalesce @gol\n -fira-loop-pressure -fno-ira-share-save-slots @gol\n@@ -5762,6 +5762,7 @@ compilation time.\n -fif-conversion2 @gol\n -fif-conversion @gol\n -fipa-pure-const @gol\n+-fipa-profile @gol\n -fipa-reference @gol\n -fmerge-constants\n -fsplit-wide-types @gol\n@@ -6602,6 +6603,15 @@ and reference analysis.  This option can cause excessive memory and\n compile-time usage on large compilation units.  It is not enabled by\n default at any optimization level.\n \n+@item -fipa-profile\n+@opindex fipa-profile\n+Perform interprocedural profile propagation.  The functions called only from\n+cold functions are marked as cold. Also functions executed once (such as\n+@code{cold}, @code{noreturn}, static constructors or destructors) are identified. Cold\n+functions and loop less parts of functions executed once are then optimized for\n+size.\n+Enabled by default at @option{-O} and higher.\n+\n @item -fipa-cp\n @opindex fipa-cp\n Perform interprocedural constant propagation."}, {"sha": "00488b2146c6585721e68381c4eb116200e16900", "filename": "gcc/ipa.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -762,3 +762,83 @@ debug_cgraph_node_set (cgraph_node_set set)\n   dump_cgraph_node_set (stderr, set);\n }\n \n+/* Simple ipa profile pass propagating frequencies across the callgraph.  */\n+\n+static unsigned int\n+ipa_profile (void)\n+{\n+  struct cgraph_node **order = XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n+  struct cgraph_edge *e;\n+  int order_pos;\n+  bool something_changed = false;\n+  int i;\n+\n+  order_pos = cgraph_postorder (order);\n+  for (i = order_pos - 1; i >= 0; i--)\n+    {\n+      if (order[i]->local.local && cgraph_propagate_frequency (order[i]))\n+\t{\n+\t  for (e = order[i]->callees; e; e = e->next_callee)\n+\t    if (e->callee->local.local && !e->callee->aux)\n+\t      {\n+\t        something_changed = true;\n+\t        e->callee->aux = (void *)1;\n+\t      }\n+\t}\n+      order[i]->aux = NULL;\n+    }\n+\n+  while (something_changed)\n+    {\n+      something_changed = false;\n+      for (i = order_pos - 1; i >= 0; i--)\n+\t{\n+\t  if (order[i]->aux && cgraph_propagate_frequency (order[i]))\n+\t    {\n+\t      for (e = order[i]->callees; e; e = e->next_callee)\n+\t\tif (e->callee->local.local && !e->callee->aux)\n+\t\t  {\n+\t\t    something_changed = true;\n+\t\t    e->callee->aux = (void *)1;\n+\t\t  }\n+\t    }\n+\t  order[i]->aux = NULL;\n+\t}\n+    }\n+  free (order);\n+  return 0;\n+}\n+\n+static bool\n+gate_ipa_profile (void)\n+{\n+  return flag_ipa_profile;\n+}\n+\n+struct ipa_opt_pass_d pass_ipa_profile =\n+{\n+ {\n+  IPA_PASS,\n+  \"ipa-profile\",\t\t\t/* name */\n+  gate_ipa_profile,\t\t\t/* gate */\n+  ipa_profile,\t\t\t        /* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_IPA_PROFILE,\t\t        /* tv_id */\n+  0,\t                                /* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0                                     /* todo_flags_finish */\n+ },\n+ NULL,\t\t\t\t        /* generate_summary */\n+ NULL,\t\t\t\t\t/* write_summary */\n+ NULL,\t\t\t\t\t/* read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n+ NULL,\t\t\t\t\t/* stmt_fixup */\n+ 0,\t\t\t\t\t/* TODOs */\n+ NULL,\t\t\t                /* function_transform */\n+ NULL\t\t\t\t\t/* variable_transform */\n+};"}, {"sha": "507b50227ee9b242b9d21e0bce4230809d0d448c", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -858,6 +858,7 @@ decode_options (unsigned int argc, const char **argv)\n   flag_if_conversion2 = opt1;\n   flag_ipa_pure_const = opt1;\n   flag_ipa_reference = opt1;\n+  flag_ipa_profile = opt1;\n   flag_merge_constants = opt1;\n   flag_split_wide_types = opt1;\n   flag_tree_ccp = opt1;"}, {"sha": "ee6de5492f4eb12041b71d72a5fbacb74c3b6c2b", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -803,6 +803,7 @@ init_optimization_passes (void)\n \n   p = &all_regular_ipa_passes;\n   NEXT_PASS (pass_ipa_whole_program_visibility);\n+  NEXT_PASS (pass_ipa_profile);\n   NEXT_PASS (pass_ipa_cp);\n   NEXT_PASS (pass_ipa_inline);\n   NEXT_PASS (pass_ipa_reference);"}, {"sha": "219963faf517cd69e871fb06567e41fe6dd6ca83", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -59,6 +59,7 @@ DEFTIMEVAR (TV_WHOPR_WPA_IO          , \"whopr wpa I/O\")\n DEFTIMEVAR (TV_WHOPR_LTRANS          , \"whopr ltrans\")\n DEFTIMEVAR (TV_WHOPR_WPA_LTRANS_EXEC , \"whopr wpa->ltrans\")\n DEFTIMEVAR (TV_IPA_REFERENCE         , \"ipa reference\")\n+DEFTIMEVAR (TV_IPA_PROFILE           , \"ipa profile\")\n DEFTIMEVAR (TV_IPA_PURE_CONST        , \"ipa pure const\")\n DEFTIMEVAR (TV_IPA_TYPE_ESCAPE       , \"ipa type escape\")\n DEFTIMEVAR (TV_IPA_PTA               , \"ipa points-to\")"}, {"sha": "a82dc83d2a77f43fefa7344fb7093956347edbed", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65bb9be499d2cea82fdfad49d7cf901167f9562/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=e65bb9be499d2cea82fdfad49d7cf901167f9562", "patch": "@@ -459,6 +459,7 @@ extern struct simple_ipa_opt_pass pass_ipa_pta;\n extern struct simple_ipa_opt_pass pass_ipa_struct_reorg;\n extern struct ipa_opt_pass_d pass_ipa_lto_wpa_fixup;\n extern struct ipa_opt_pass_d pass_ipa_lto_finish_out;\n+extern struct ipa_opt_pass_d pass_ipa_profile;\n \n extern struct gimple_opt_pass pass_all_optimizations;\n extern struct gimple_opt_pass pass_cleanup_cfg_post_optimizing;"}]}