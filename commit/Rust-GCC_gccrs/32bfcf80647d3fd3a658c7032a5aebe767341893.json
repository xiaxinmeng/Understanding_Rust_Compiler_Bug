{"sha": "32bfcf80647d3fd3a658c7032a5aebe767341893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiZmNmODA2NDdkM2ZkM2E2NThjNzAzMmE1YWViZTc2NzM0MTg5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-20T17:01:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-20T17:01:16Z"}, "message": "re PR c++/57319 (bogus \"defaulted move assignment for ... calls a non-trivial move assignment operator for virtual base ...\")\n\n\tPR c++/57319\n\t* class.c (vbase_has_user_provided_move_assign): New.\n\t* method.c (synthesized_method_walk): Check it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r199114", "tree": {"sha": "a77eab61162ca3bdde85d7a9b12497eb29a58625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77eab61162ca3bdde85d7a9b12497eb29a58625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32bfcf80647d3fd3a658c7032a5aebe767341893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bfcf80647d3fd3a658c7032a5aebe767341893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bfcf80647d3fd3a658c7032a5aebe767341893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bfcf80647d3fd3a658c7032a5aebe767341893/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f0bdc935f2199a2247b9d30858a9262d1a6bfa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0bdc935f2199a2247b9d30858a9262d1a6bfa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0bdc935f2199a2247b9d30858a9262d1a6bfa8"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "b08afd929f58606bafc56b3444bebb576eb51a82", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=32bfcf80647d3fd3a658c7032a5aebe767341893", "patch": "@@ -1,5 +1,10 @@\n 2013-05-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/57319\n+\t* class.c (vbase_has_user_provided_move_assign): New.\n+\t* method.c (synthesized_method_walk): Check it.\n+\t* cp-tree.h: Declare it.\n+\n \tPR c++/57325\n \t* tree.c (build_cplus_array_type): Copy layout info if element\n \ttype is complete."}, {"sha": "94ae5672548e8a87a9bd2a2f4cc562096f210ee3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=32bfcf80647d3fd3a658c7032a5aebe767341893", "patch": "@@ -4831,6 +4831,44 @@ type_has_user_provided_default_constructor (tree t)\n   return false;\n }\n \n+/* TYPE is being used as a virtual base, and has a non-trivial move\n+   assignment.  Return true if this is due to there being a user-provided\n+   move assignment in TYPE or one of its subobjects; if there isn't, then\n+   multiple move assignment can't cause any harm.  */\n+\n+bool\n+vbase_has_user_provided_move_assign (tree type)\n+{\n+  /* Does the type itself have a user-provided move assignment operator?  */\n+  for (tree fns\n+\t = lookup_fnfields_slot_nolazy (type, ansi_assopname (NOP_EXPR));\n+       fns; fns = OVL_NEXT (fns))\n+    {\n+      tree fn = OVL_CURRENT (fns);\n+      if (move_fn_p (fn) && user_provided_p (fn))\n+\treturn true;\n+    }\n+\n+  /* Do any of its bases?  */\n+  tree binfo = TYPE_BINFO (type);\n+  tree base_binfo;\n+  for (int i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); ++i)\n+    if (vbase_has_user_provided_move_assign (BINFO_TYPE (base_binfo)))\n+      return true;\n+\n+  /* Or non-static data members?  */\n+  for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+    {\n+      if (TREE_CODE (field) == FIELD_DECL\n+\t  && CLASS_TYPE_P (TREE_TYPE (field))\n+\t  && vbase_has_user_provided_move_assign (TREE_TYPE (field)))\n+\treturn true;\n+    }\n+\n+  /* Seems not.  */\n+  return false;\n+}\n+\n /* If default-initialization leaves part of TYPE uninitialized, returns\n    a DECL for the field or TYPE itself (DR 253).  */\n "}, {"sha": "6455c69d87adffcd7584c1dd0a879981d4b7d70e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=32bfcf80647d3fd3a658c7032a5aebe767341893", "patch": "@@ -5090,6 +5090,7 @@ extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n+extern bool vbase_has_user_provided_move_assign (tree);\n extern tree default_init_uninitialized_part (tree);\n extern bool trivial_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);"}, {"sha": "0d779a089e539143c38bc6a65166db0ab8d02ac7", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=32bfcf80647d3fd3a658c7032a5aebe767341893", "patch": "@@ -1353,7 +1353,8 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       if (diag && assign_p && move_p\n \t  && BINFO_VIRTUAL_P (base_binfo)\n \t  && rval && TREE_CODE (rval) == FUNCTION_DECL\n-\t  && move_fn_p (rval) && !trivial_fn_p (rval))\n+\t  && move_fn_p (rval) && !trivial_fn_p (rval)\n+\t  && vbase_has_user_provided_move_assign (basetype))\n \twarning (OPT_Wvirtual_move_assign,\n \t\t \"defaulted move assignment for %qT calls a non-trivial \"\n \t\t \"move assignment operator for virtual base %qT\","}, {"sha": "213c1393e1f48787885537e51a22e546b142be57", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted44.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32bfcf80647d3fd3a658c7032a5aebe767341893/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted44.C?ref=32bfcf80647d3fd3a658c7032a5aebe767341893", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/57319\n+// { dg-require-effective-target c++11 }\n+\n+namespace N1 {\n+  struct A { };\n+  struct B: virtual A { };\n+  struct C: virtual B { };\n+\n+  struct D: C\n+  {\n+    void operator= (D &);\n+  };\n+}\n+\n+namespace N2 {\n+  struct A { A& operator=(A&&); };\n+  struct B: virtual A { };\t// { dg-warning \"move assignment\" }\n+  struct C: virtual B { };\t// { dg-warning \"move assignment\" }\n+\n+  struct D: C\n+  {\n+    void operator= (D &);\n+  };\n+}"}]}