{"sha": "2d1c287af3a074d40e84234be9feca904af627d5", "node_id": "C_kwDOANBUbNoAKDJkMWMyODdhZjNhMDc0ZDQwZTg0MjM0YmU5ZmVjYTkwNGFmNjI3ZDU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-27T16:30:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T16:30:02Z"}, "message": "Merge #1620\n\n1620: Intrinsics unchecked ops r=CohenArthur a=CohenArthur\n\nAddresses #658 \r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "4e48388aef6905dddc47ff3cc33832d657fcaa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e48388aef6905dddc47ff3cc33832d657fcaa40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d1c287af3a074d40e84234be9feca904af627d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWrIKCRBK7hj4Ov3rIwAAvaUIADq79E6crLHxak2+rbL448Sy\nuPu1031qJLlS11FY1GDSFnmwHzzaW1h0ZQTigra1+1Jz+gbV35RDS6edrSki30m1\nyhpjDteWoS8FFjt8QBRNWIY3CYOeakGnZkIy6+MmTSNx13mgyYw/11xocc7ZBxb8\n8ix7vJzUZcog/5ER1Cg1DqamrghaKJsmDmcSrFTTZgIiUj43xrCp73X/6qiXE/ZK\nNHCuG1ZwNjC6+mDIpXob8DZ2MeM0zY3yGC0JYLGrvOW+l/ArI+ymQWWcdpSc5Yfk\nj1LDGlApOaskc+tk8pNdasW2H3BPX6TJmT5rwYFvKbfi2wb5h/JD3UmLXX88kgQ=\n=7tUb\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e48388aef6905dddc47ff3cc33832d657fcaa40\nparent 353ed6ce8add32b84f0fdfbcbc020d8f7154530d\nparent fc2aa3cd381613a69129cd183a352f3e3c23643b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1666888202 +0000\ncommitter GitHub <noreply@github.com> 1666888202 +0000\n\nMerge #1620\n\n1620: Intrinsics unchecked ops r=CohenArthur a=CohenArthur\n\nAddresses #658 \r\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1c287af3a074d40e84234be9feca904af627d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1c287af3a074d40e84234be9feca904af627d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1c287af3a074d40e84234be9feca904af627d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353ed6ce8add32b84f0fdfbcbc020d8f7154530d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353ed6ce8add32b84f0fdfbcbc020d8f7154530d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353ed6ce8add32b84f0fdfbcbc020d8f7154530d"}, {"sha": "fc2aa3cd381613a69129cd183a352f3e3c23643b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2aa3cd381613a69129cd183a352f3e3c23643b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2aa3cd381613a69129cd183a352f3e3c23643b"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "142a21736723488049cbd0fffe17f320654e3276", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=2d1c287af3a074d40e84234be9feca904af627d5", "patch": "@@ -34,6 +34,22 @@\n namespace Rust {\n namespace Compile {\n \n+static bool\n+is_basic_integer_type (TyTy::BaseType *type)\n+{\n+  switch (type->get_kind ())\n+    {\n+    case TyTy::INT:\n+    case TyTy::UINT:\n+    case TyTy::USIZE:\n+    case TyTy::ISIZE:\n+      return true;\n+    default:\n+      return false;\n+      break;\n+    }\n+}\n+\n static tree\n offset_handler (Context *ctx, TyTy::FnType *fntype);\n static tree\n@@ -97,6 +113,17 @@ atomic_store_handler (int ordering)\n   };\n }\n \n+static inline tree\n+unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op);\n+\n+const static std::function<tree (Context *, TyTy::FnType *)>\n+unchecked_op_handler (tree_code op)\n+{\n+  return [op] (Context *ctx, TyTy::FnType *fntype) {\n+    return unchecked_op_inner (ctx, fntype, op);\n+  };\n+}\n+\n static inline tree\n sorry_handler (Context *ctx, TyTy::FnType *fntype)\n {\n@@ -125,6 +152,13 @@ static const std::map<std::string,\n     {\"atomic_store_release\", atomic_store_handler (__ATOMIC_RELEASE)},\n     {\"atomic_store_relaxed\", atomic_store_handler (__ATOMIC_RELAXED)},\n     {\"atomic_store_unordered\", atomic_store_handler (__ATOMIC_RELAXED)},\n+    {\"unchecked_add\", unchecked_op_handler (PLUS_EXPR)},\n+    {\"unchecked_sub\", unchecked_op_handler (MINUS_EXPR)},\n+    {\"unchecked_mul\", unchecked_op_handler (MULT_EXPR)},\n+    {\"unchecked_div\", unchecked_op_handler (TRUNC_DIV_EXPR)},\n+    {\"unchecked_rem\", unchecked_op_handler (TRUNC_MOD_EXPR)},\n+    {\"unchecked_shl\", unchecked_op_handler (LSHIFT_EXPR)},\n+    {\"unchecked_shr\", unchecked_op_handler (RSHIFT_EXPR)},\n };\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n@@ -714,6 +748,52 @@ atomic_store_handler_inner (Context *ctx, TyTy::FnType *fntype, int ordering)\n   TREE_SIDE_EFFECTS (store_call) = 1;\n \n   ctx->add_statement (store_call);\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n+static inline tree\n+unchecked_op_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n+{\n+  rust_assert (fntype->get_params ().size () == 2);\n+  rust_assert (fntype->get_num_substitutions () == 1);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars);\n+\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN unchecked_<op> BODY BEGIN\n+\n+  auto x = ctx->get_backend ()->var_expression (param_vars[0], Location ());\n+  auto y = ctx->get_backend ()->var_expression (param_vars[1], Location ());\n+\n+  auto *monomorphized_type\n+    = fntype->get_substs ().at (0).get_param_ty ()->resolve ();\n+  if (!is_basic_integer_type (monomorphized_type))\n+    rust_error_at (fntype->get_locus (),\n+\t\t   \"unchecked operation intrinsics can only be used with \"\n+\t\t   \"basic integer types (got %qs)\",\n+\t\t   monomorphized_type->get_name ().c_str ());\n+\n+  auto expr = build2 (op, TREE_TYPE (x), x, y);\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {expr}, Location ());\n+\n+  ctx->add_statement (return_statement);\n+\n+  // BUILTIN unchecked_<op> BODY END\n \n   finalize_intrinsic_block (ctx, fndecl);\n "}, {"sha": "143b62a2b27e2ffe42e3bdb58c660edd3c2cf46b", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-6.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs?ref=2d1c287af3a074d40e84234be9feca904af627d5", "patch": "@@ -0,0 +1,21 @@\n+extern \"rust-intrinsic\" {\n+    pub fn unchecked_add<T>(x: T, y: T) -> T;\n+    pub fn unchecked_sub<T>(x: T, y: T) -> T;\n+    pub fn unchecked_mul<T>(x: T, y: T) -> T;\n+    pub fn unchecked_div<T>(x: T, y: T) -> T;\n+    pub fn unchecked_rem<T>(x: T, y: T) -> T;\n+    pub fn unchecked_shl<T>(x: T, y: T) -> T;\n+    pub fn unchecked_shr<T>(x: T, y: T) -> T;\n+}\n+\n+fn main() -> i32 {\n+    let zero0 = unsafe { (1 + 5) - unchecked_add(1, 5) };\n+    let zero1 = unsafe { (1 - 5) - unchecked_sub(1, 5) };\n+    let zero2 = unsafe { (1 * 5) - unchecked_mul(1, 5) };\n+    let zero3 = unsafe { (1 / 5) - unchecked_div(1, 5) };\n+    let zero4 = unsafe { (1 % 5) - unchecked_rem(1, 5) };\n+    let zero5 = unsafe { (1 << 5) - unchecked_shl(1, 5) };\n+    let zero6 = unsafe { (1 >> 5) - unchecked_shr(1, 5) };\n+\n+    zero0 + zero1 + zero2 + zero3 + zero4 + zero5 + zero6\n+}"}, {"sha": "8e8c5fe0cdf8da76b157352964ecfa16fbb745b3", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-7.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d1c287af3a074d40e84234be9feca904af627d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs?ref=2d1c287af3a074d40e84234be9feca904af627d5", "patch": "@@ -0,0 +1,10 @@\n+extern \"rust-intrinsic\" {\n+    pub fn unchecked_add<T>(x: T, y: T) -> T;\n+    // { dg-error \"unchecked operation intrinsics can only be used with basic integer types .got .NotAdd..\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() {\n+    struct NotAdd;\n+\n+    unsafe { unchecked_add(NotAdd, NotAdd) };\n+}"}]}