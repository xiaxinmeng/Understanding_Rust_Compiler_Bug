{"sha": "cf14e33d62f736fd748bff4e0a0b9989199f0371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxNGUzM2Q2MmY3MzZmZDc0OGJmZjRlMGEwYjk5ODkxOTlmMDM3MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-31T00:03:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-31T00:03:38Z"}, "message": "i386.md: New peephole2's to convert imul by 3, 5 or 9 into the equivalent lea instruction.\n\n\n\t* config/i386/i386.md: New peephole2's to convert imul by 3, 5 or\n\t9 into the equivalent lea instruction.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r85366", "tree": {"sha": "d223b53dfc0576a64cc258d7e5cd4846a7109693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d223b53dfc0576a64cc258d7e5cd4846a7109693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf14e33d62f736fd748bff4e0a0b9989199f0371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf14e33d62f736fd748bff4e0a0b9989199f0371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf14e33d62f736fd748bff4e0a0b9989199f0371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf14e33d62f736fd748bff4e0a0b9989199f0371/comments", "author": null, "committer": null, "parents": [{"sha": "0534fa565255cf56d5771ea92522403947d4bbd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0534fa565255cf56d5771ea92522403947d4bbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0534fa565255cf56d5771ea92522403947d4bbd4"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "9535b8cef84a14b5d4d9cd153d4b5bb0585b0268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf14e33d62f736fd748bff4e0a0b9989199f0371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf14e33d62f736fd748bff4e0a0b9989199f0371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf14e33d62f736fd748bff4e0a0b9989199f0371", "patch": "@@ -1,3 +1,9 @@\n+2004-07-30  Roger Sayle  <roger@eyesopen.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md: New peephole2's to convert imul by 3, 5 or\n+\t9 into the equivalent lea instruction.\n+\n 2004-07-30  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (gimplify_expr) <case CONST_DECL>: Don't replace"}, {"sha": "12c051e010f729709adb24b49597d9762b12a257", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf14e33d62f736fd748bff4e0a0b9989199f0371/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf14e33d62f736fd748bff4e0a0b9989199f0371/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cf14e33d62f736fd748bff4e0a0b9989199f0371", "patch": "@@ -19326,6 +19326,69 @@\n \t      (set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int 8)))])]\n   \"\")\n \f\n+;; Convert imul by three, five and nine into lea\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"INTVAL (operands[2]) == 3\n+   || INTVAL (operands[2]) == 5\n+   || INTVAL (operands[2]) == 9\"\n+  [(set (match_dup 0)\n+        (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n+                 (match_dup 1)))]\n+  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+          (mult:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+                   (match_operand:SI 2 \"const_int_operand\" \"\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"!optimize_size \n+   && (INTVAL (operands[2]) == 3\n+       || INTVAL (operands[2]) == 5\n+       || INTVAL (operands[2]) == 9)\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 0)\n+        (plus:SI (mult:SI (match_dup 0) (match_dup 2))\n+                 (match_dup 0)))]\n+  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t  (mult:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:DI 2 \"const_int_operand\" \"\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_64BIT\n+   && (INTVAL (operands[2]) == 3\n+       || INTVAL (operands[2]) == 5\n+       || INTVAL (operands[2]) == 9)\"\n+  [(set (match_dup 0)\n+        (plus:DI (mult:DI (match_dup 1) (match_dup 2))\n+                 (match_dup 1)))]\n+  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+          (mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+                   (match_operand:DI 2 \"const_int_operand\" \"\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_64BIT\n+   && !optimize_size \n+   && (INTVAL (operands[2]) == 3\n+       || INTVAL (operands[2]) == 5\n+       || INTVAL (operands[2]) == 9)\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 0)\n+        (plus:DI (mult:DI (match_dup 0) (match_dup 2))\n+                 (match_dup 0)))]\n+  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+\n ;; Imul $32bit_imm, mem, reg is vector decoded, while\n ;; imul $32bit_imm, reg, reg is direct decoded.\n (define_peephole2"}]}