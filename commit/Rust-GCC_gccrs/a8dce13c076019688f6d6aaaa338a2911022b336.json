{"sha": "a8dce13c076019688f6d6aaaa338a2911022b336", "node_id": "C_kwDOANBUbNoAKGE4ZGNlMTNjMDc2MDE5Njg4ZjZkNmFhYWEzMzhhMjkxMTAyMmIzMzY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-07T19:50:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-07T19:50:26Z"}, "message": "Convert label_text to C++11 move semantics\n\nlibcpp's class label_text stores a char * for a string and a flag saying\nwhether it owns the buffer.  I added this class before we could use\nC++11, and so to avoid lots of copying it required an explicit call\nto label_text::maybe_free to potentially free the buffer.\n\nNow that we can use C++11, this patch removes label_text::maybe_free in\nfavor of doing the cleanup in the destructor, and using C++ move\nsemantics to avoid any copying.  This allows lots of messy cleanup code\nto be eliminated in favor of implicit destruction (mostly in the\nanalyzer).\n\nNo functional change intended.\n\ngcc/analyzer/ChangeLog:\n\t* call-info.cc (call_info::print): Update for removal of\n\tlabel_text::maybe_free in favor of automatic memory management.\n\t* checker-path.cc (checker_event::dump): Likewise.\n\t(checker_event::prepare_for_emission): Likewise.\n\t(state_change_event::get_desc): Likewise.\n\t(superedge_event::should_filter_p): Likewise.\n\t(start_cfg_edge_event::get_desc): Likewise.\n\t(warning_event::get_desc): Likewise.\n\t(checker_path::dump): Likewise.\n\t(checker_path::debug): Likewise.\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::prune_for_sm_diagnostic): Likewise.\n\t(diagnostic_manager::prune_interproc_events): Likewise.\n\t* program-state.cc (sm_state_map::to_json): Likewise.\n\t* region.cc (region::to_json): Likewise.\n\t* sm-malloc.cc (inform_nonnull_attribute): Likewise.\n\t* store.cc (binding_map::to_json): Likewise.\n\t(store::to_json): Likewise.\n\t* svalue.cc (svalue::to_json): Likewise.\n\ngcc/c-family/ChangeLog:\n\t* c-format.cc (range_label_for_format_type_mismatch::get_text):\n\tUpdate for removal of label_text::maybe_free in favor of automatic\n\tmemory management.\n\ngcc/ChangeLog:\n\t* diagnostic-format-json.cc (json_from_location_range): Update for\n\tremoval of label_text::maybe_free in favor of automatic memory\n\tmanagement.\n\t* diagnostic-format-sarif.cc\n\t(sarif_builder::make_location_object): Likewise.\n\t* diagnostic-show-locus.cc (struct pod_label_text): New.\n\t(class line_label): Convert m_text from label_text to pod_label_text.\n\t(layout::print_any_labels): Move \"text\" to the line_label.\n\t* tree-diagnostic-path.cc (path_label::get_text): Update for\n\tremoval of label_text::maybe_free in favor of automatic memory\n\tmanagement.\n\t(event_range::print): Likewise.\n\t(default_tree_diagnostic_path_printer): Likewise.\n\t(default_tree_make_json_for_path): Likewise.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h: Include <utility>.\n\t(class label_text): Delete maybe_free method in favor of a\n\tdestructor.  Add move ctor and assignment operator.  Add deletion\n\tof the copy ctor and copy-assignment operator.  Rename field\n\tm_caller_owned to m_owned.  Add std::move where necessary; add\n\tmoved_from member function.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "29dd272c16cb106efa3b06b095ef233dc11e5fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29dd272c16cb106efa3b06b095ef233dc11e5fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8dce13c076019688f6d6aaaa338a2911022b336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8dce13c076019688f6d6aaaa338a2911022b336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8dce13c076019688f6d6aaaa338a2911022b336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8dce13c076019688f6d6aaaa338a2911022b336/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897b3b31f0a94b8bac59c6061655c6a32646d0a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897b3b31f0a94b8bac59c6061655c6a32646d0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897b3b31f0a94b8bac59c6061655c6a32646d0a0"}], "stats": {"total": 206, "additions": 101, "deletions": 105}, "files": [{"sha": "e1142d743a3d1db427d52fae888c735796a871cf", "filename": "gcc/analyzer/call-info.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fcall-info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fcall-info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-info.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -76,7 +76,6 @@ call_info::print (pretty_printer *pp) const\n {\n   label_text desc (get_desc (pp_show_color (pp)));\n   pp_string (pp, desc.m_buffer);\n-  desc.maybe_free ();\n }\n \n /* Implementation of custom_edge_info::add_events_to_path vfunc for"}, {"sha": "959ffdd853cc98ed74ef39fdc2ccab2362fe72e0", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 32, "deletions": 65, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -196,7 +196,6 @@ checker_event::dump (pretty_printer *pp) const\n   label_text event_desc (get_desc (false));\n   pp_printf (pp, \"\\\"%s\\\" (depth %i\",\n \t     event_desc.m_buffer, m_effective_depth);\n-  event_desc.maybe_free ();\n \n   if (m_effective_depth != m_original_depth)\n     pp_printf (pp, \" corrected from %i\",\n@@ -235,7 +234,6 @@ checker_event::prepare_for_emission (checker_path *,\n   m_emission_id = emission_id;\n \n   label_text desc = get_desc (false);\n-  desc.maybe_free ();\n }\n \n /* class debug_event : public checker_event.  */\n@@ -402,9 +400,8 @@ state_change_event::get_desc (bool can_colorize) const\n \t      meaning.dump_to_pp (&meaning_pp);\n \n \t      /* Append debug version.  */\n-\t      label_text result;\n \t      if (m_origin)\n-\t\tresult = make_label_text\n+\t\treturn make_label_text\n \t\t  (can_colorize,\n \t\t   \"%s (state of %qE: %qs -> %qs, origin: %qE, meaning: %s)\",\n \t\t   custom_desc.m_buffer,\n@@ -414,17 +411,14 @@ state_change_event::get_desc (bool can_colorize) const\n \t\t   origin,\n \t\t   pp_formatted_text (&meaning_pp));\n \t      else\n-\t\tresult = make_label_text\n+\t\treturn make_label_text\n \t\t  (can_colorize,\n \t\t   \"%s (state of %qE: %qs -> %qs, NULL origin, meaning: %s)\",\n \t\t   custom_desc.m_buffer,\n \t\t   var,\n \t\t   m_from->get_name (),\n \t\t   m_to->get_name (),\n \t\t   pp_formatted_text (&meaning_pp));\n-\n-\t      custom_desc.maybe_free ();\n-\t      return result;\n \t    }\n \t  else\n \t    return custom_desc;\n@@ -435,28 +429,24 @@ state_change_event::get_desc (bool can_colorize) const\n   if (m_sval)\n     {\n       label_text sval_desc = m_sval->get_desc ();\n-      label_text result;\n       if (m_origin)\n \t{\n \t  label_text origin_desc = m_origin->get_desc ();\n-\t  result = make_label_text\n+\t  return make_label_text\n \t    (can_colorize,\n \t     \"state of %qs: %qs -> %qs (origin: %qs)\",\n \t     sval_desc.m_buffer,\n \t     m_from->get_name (),\n \t     m_to->get_name (),\n \t     origin_desc.m_buffer);\n-\t  origin_desc.maybe_free ();\n \t}\n       else\n-\tresult = make_label_text\n+\treturn make_label_text\n \t  (can_colorize,\n \t   \"state of %qs: %qs -> %qs (NULL origin)\",\n \t   sval_desc.m_buffer,\n \t   m_from->get_name (),\n \t   m_to->get_name ());\n-      sval_desc.maybe_free ();\n-      return result;\n     }\n   else\n     {\n@@ -522,7 +512,6 @@ superedge_event::should_filter_p (int verbosity) const\n \t    gcc_assert (desc.m_buffer);\n \t    if (desc.m_buffer[0] == '\\0')\n \t      return true;\n-\t    desc.maybe_free ();\n \t  }\n       }\n       break;\n@@ -605,56 +594,39 @@ label_text\n start_cfg_edge_event::get_desc (bool can_colorize) const\n {\n   bool user_facing = !flag_analyzer_verbose_edges;\n-  char *edge_desc = m_sedge->get_description (user_facing);\n+  label_text edge_desc\n+    = label_text::take (m_sedge->get_description (user_facing));\n   if (user_facing)\n     {\n-      if (edge_desc && strlen (edge_desc) > 0)\n+      if (edge_desc.m_buffer && strlen (edge_desc.m_buffer) > 0)\n \t{\n \t  label_text cond_desc = maybe_describe_condition (can_colorize);\n \t  label_text result;\n \t  if (cond_desc.m_buffer)\n-\t    {\n-\t      result = make_label_text (can_colorize,\n-\t\t\t\t\t\"following %qs branch (%s)...\",\n-\t\t\t\t\tedge_desc, cond_desc.m_buffer);\n-\t      cond_desc.maybe_free ();\n-\t    }\n+\t    return make_label_text (can_colorize,\n+\t\t\t\t    \"following %qs branch (%s)...\",\n+\t\t\t\t    edge_desc.m_buffer, cond_desc.m_buffer);\n \t  else\n-\t    {\n-\t      result = make_label_text (can_colorize,\n-\t\t\t\t\t\"following %qs branch...\",\n-\t\t\t\t\tedge_desc);\n-\t    }\n-\t  free (edge_desc);\n-\t  return result;\n+\t    return make_label_text (can_colorize,\n+\t\t\t\t    \"following %qs branch...\",\n+\t\t\t\t    edge_desc.m_buffer);\n \t}\n       else\n-\t{\n-\t  free (edge_desc);\n-\t  return label_text::borrow (\"\");\n-\t}\n+\treturn label_text::borrow (\"\");\n     }\n   else\n     {\n-      if (strlen (edge_desc) > 0)\n-\t{\n-\t  label_text result\n-\t    = make_label_text (can_colorize,\n-\t\t\t       \"taking %qs edge SN:%i -> SN:%i\",\n-\t\t\t       edge_desc,\n-\t\t\t       m_sedge->m_src->m_index,\n-\t\t\t       m_sedge->m_dest->m_index);\n-\t  free (edge_desc);\n-\t  return result;\n-\t}\n+      if (strlen (edge_desc.m_buffer) > 0)\n+\treturn make_label_text (can_colorize,\n+\t\t\t\t\"taking %qs edge SN:%i -> SN:%i\",\n+\t\t\t\tedge_desc.m_buffer,\n+\t\t\t\tm_sedge->m_src->m_index,\n+\t\t\t\tm_sedge->m_dest->m_index);\n       else\n-\t{\n-\t  free (edge_desc);\n-\t  return make_label_text (can_colorize,\n-\t\t\t\t  \"taking edge SN:%i -> SN:%i\",\n-\t\t\t\t  m_sedge->m_src->m_index,\n-\t\t\t\t  m_sedge->m_dest->m_index);\n-\t}\n+\treturn make_label_text (can_colorize,\n+\t\t\t\t\"taking edge SN:%i -> SN:%i\",\n+\t\t\t\tm_sedge->m_src->m_index,\n+\t\t\t\tm_sedge->m_dest->m_index);\n     }\n }\n \n@@ -1138,19 +1110,16 @@ warning_event::get_desc (bool can_colorize) const\n \t{\n \t  if (m_sm && flag_analyzer_verbose_state_changes)\n \t    {\n-\t      label_text result;\n \t      if (var)\n-\t\tresult = make_label_text (can_colorize,\n-\t\t\t\t\t  \"%s (%qE is in state %qs)\",\n-\t\t\t\t\t  ev_desc.m_buffer,\n-\t\t\t\t\t  var, m_state->get_name ());\n+\t\treturn make_label_text (can_colorize,\n+\t\t\t\t\t\"%s (%qE is in state %qs)\",\n+\t\t\t\t\tev_desc.m_buffer,\n+\t\t\t\t\tvar, m_state->get_name ());\n \t      else\n-\t\tresult = make_label_text (can_colorize,\n-\t\t\t\t\t  \"%s (in global state %qs)\",\n-\t\t\t\t\t  ev_desc.m_buffer,\n-\t\t\t\t\t  m_state->get_name ());\n-\t      ev_desc.maybe_free ();\n-\t      return result;\n+\t\treturn make_label_text (can_colorize,\n+\t\t\t\t\t\"%s (in global state %qs)\",\n+\t\t\t\t\tev_desc.m_buffer,\n+\t\t\t\t\tm_state->get_name ());\n \t    }\n \t  else\n \t    return ev_desc;\n@@ -1196,7 +1165,6 @@ checker_path::dump (pretty_printer *pp) const\n \tpp_string (pp, \", \");\n       label_text event_desc (e->get_desc (false));\n       pp_printf (pp, \"\\\"%s\\\"\", event_desc.m_buffer);\n-      event_desc.maybe_free ();\n     }\n   pp_character (pp, ']');\n }\n@@ -1237,7 +1205,6 @@ checker_path::debug () const\n \t       i,\n \t       event_kind_to_string (m_events[i]->m_kind),\n \t       event_desc.m_buffer);\n-      event_desc.maybe_free ();\n     }\n }\n "}, {"sha": "083f66bd739a41b60dcbd954167e5982ee4c2e4c", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -2298,7 +2298,6 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t  log (\"considering event %i (%s), with sval: %qs, state: %qs\",\n \t\t       idx, event_kind_to_string (base_event->m_kind),\n \t\t       sval_desc.m_buffer, state->get_name ());\n-\t\t  sval_desc.maybe_free ();\n \t\t}\n \t      else\n \t\tlog (\"considering event %i (%s), with global state: %qs\",\n@@ -2366,8 +2365,6 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t     \" switching var of interest from %qs to %qs\",\n \t\t\t     idx, sval_desc.m_buffer,\n \t\t\t     origin_sval_desc.m_buffer);\n-\t\t\tsval_desc.maybe_free ();\n-\t\t\torigin_sval_desc.maybe_free ();\n \t\t      }\n \t\t    sval = state_change->m_origin;\n \t\t  }\n@@ -2395,7 +2392,6 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\telse\n \t\t\t  log (\"filtering event %i: state change to %qs\",\n \t\t\t       idx, change_sval_desc.m_buffer);\n-\t\t\tchange_sval_desc.maybe_free ();\n \t\t      }\n \t\t    else\n \t\t      log (\"filtering event %i: global state change\", idx);\n@@ -2465,7 +2461,6 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t \" recording critical state for %qs at call\"\n \t\t\t \" from %qE in callee to %qE in caller\",\n \t\t\t idx, sval_desc.m_buffer, callee_var, caller_var);\n-\t\t    sval_desc.maybe_free ();\n \t\t  }\n \t\tif (expr.param_p ())\n \t\t  event->record_critical_state (caller_var, state);\n@@ -2509,7 +2504,6 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t     \" recording critical state for %qs at return\"\n \t\t\t     \" from %qE in caller to %qE in callee\",\n \t\t\t     idx, sval_desc.m_buffer, callee_var, callee_var);\n-\t\t\tsval_desc.maybe_free ();\n \t\t      }\n \t\t    if (expr.return_value_p ())\n \t\t      event->record_critical_state (callee_var, state);\n@@ -2593,7 +2587,6 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/entry/return: %s\",\n \t\t       idx, idx + 2, desc.m_buffer);\n-\t\t  desc.maybe_free ();\n \t\t}\n \t      path->delete_event (idx + 2);\n \t      path->delete_event (idx + 1);\n@@ -2616,7 +2609,6 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/return: %s\",\n \t\t       idx, idx + 1, desc.m_buffer);\n-\t\t  desc.maybe_free ();\n \t\t}\n \t      path->delete_event (idx + 1);\n \t      path->delete_event (idx);"}, {"sha": "90a56e3fba4a14e9c56b8874ac99af21e294b93f", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -301,7 +301,6 @@ sm_state_map::to_json () const\n \n       label_text sval_desc = sval->get_desc ();\n       map_obj->set (sval_desc.m_buffer, e.m_state->to_json ());\n-      sval_desc.maybe_free ();\n \n       /* This doesn't yet JSONify e.m_origin.  */\n     }"}, {"sha": "5b00e6a5f462c1fcd16e432487cd6dfe4fc58b34", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -590,7 +590,6 @@ region::to_json () const\n {\n   label_text desc = get_desc (true);\n   json::value *reg_js = new json::string (desc.m_buffer);\n-  desc.maybe_free ();\n   return reg_js;\n }\n "}, {"sha": "553fcd80085841afe4ce21af90eea623e5b65cd4", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -1008,7 +1008,6 @@ inform_nonnull_attribute (tree fndecl, int arg_idx)\n   inform (DECL_SOURCE_LOCATION (fndecl),\n \t  \"argument %s of %qD must be non-null\",\n \t  arg_desc.m_buffer, fndecl);\n-  arg_desc.maybe_free ();\n   /* Ideally we would use the location of the parm and underline the\n      attribute also - but we don't have the location_t values at this point\n      in the middle-end.\n@@ -1072,7 +1071,6 @@ class possible_null_arg : public possible_null\n       result = ev.formatted_print (\"argument %s (%qE) could be NULL\"\n \t\t\t\t   \" where non-null expected\",\n \t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n-    arg_desc.maybe_free ();\n     return result;\n   }\n \n@@ -1180,7 +1178,6 @@ class null_arg : public malloc_diagnostic\n       result = ev.formatted_print (\"argument %s (%qE) NULL\"\n \t\t\t\t   \" where non-null expected\",\n \t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n-    arg_desc.maybe_free ();\n     return result;\n   }\n "}, {"sha": "d558d477115e059992e074f5ab09c48ca041b5a8", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -676,7 +676,6 @@ binding_map::to_json () const\n       const svalue *value = *const_cast <map_t &> (m_map).get (key);\n       label_text key_desc = key->get_desc ();\n       map_obj->set (key_desc.m_buffer, value->to_json ());\n-      key_desc.maybe_free ();\n     }\n \n   return map_obj;\n@@ -2405,11 +2404,9 @@ store::to_json () const\n \t  label_text base_reg_desc = base_reg->get_desc ();\n \t  clusters_in_parent_reg_obj->set (base_reg_desc.m_buffer,\n \t\t\t\t\t   cluster->to_json ());\n-\t  base_reg_desc.maybe_free ();\n \t}\n       label_text parent_reg_desc = parent_reg->get_desc ();\n       store_obj->set (parent_reg_desc.m_buffer, clusters_in_parent_reg_obj);\n-      parent_reg_desc.maybe_free ();\n     }\n \n   store_obj->set (\"called_unknown_fn\", new json::literal (m_called_unknown_fn));"}, {"sha": "78a6eeff05f36db15a255b76a420f793e6012baf", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -97,7 +97,6 @@ svalue::to_json () const\n {\n   label_text desc = get_desc (true);\n   json::value *sval_js = new json::string (desc.m_buffer);\n-  desc.maybe_free ();\n   return sval_js;\n }\n "}, {"sha": "2faed0c1607c247967fda80b0af39c6e154dfa7e", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -4625,7 +4625,6 @@ class range_label_for_format_type_mismatch\n     suffix.fill_buffer (p);\n \n     char *result = concat (text.m_buffer, p, NULL);\n-    text.maybe_free ();\n     return label_text::take (result);\n   }\n "}, {"sha": "872c67e53edcd94783999ad337a2e464303b0ab5", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -101,11 +101,9 @@ json_from_location_range (diagnostic_context *context,\n \n   if (loc_range->m_label)\n     {\n-      label_text text;\n-      text = loc_range->m_label->get_text (range_idx);\n+      label_text text (loc_range->m_label->get_text (range_idx));\n       if (text.m_buffer)\n \tresult->set (\"label\", new json::string (text.m_buffer));\n-      text.maybe_free ();\n     }\n \n   return result;"}, {"sha": "1e4ebc8ad38d539bde7d6be49928567749a525f5", "filename": "gcc/diagnostic-format-sarif.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-format-sarif.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-format-sarif.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-sarif.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -584,7 +584,6 @@ sarif_builder::make_location_object (const diagnostic_event &event)\n   label_text ev_desc = event.get_desc (false);\n   json::object *message_obj = make_message_object (ev_desc.m_buffer);\n   location_obj->set (\"message\", message_obj);\n-  ev_desc.maybe_free ();\n \n   return location_obj;\n }"}, {"sha": "9cd7794d077811bf053100b79db759022a89a00e", "filename": "gcc/diagnostic-show-locus.cc", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-show-locus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Fdiagnostic-show-locus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -1867,6 +1867,31 @@ layout::print_annotation_line (linenum_type row, const line_bounds lbounds)\n   print_newline ();\n }\n \n+/* A version of label_text that can live inside a vec.\n+   Requires manual cleanup via maybe_free.  */\n+\n+struct pod_label_text\n+{\n+  pod_label_text ()\n+  : m_buffer (NULL), m_caller_owned (false)\n+  {}\n+\n+  pod_label_text (label_text &&other)\n+  : m_buffer (other.m_buffer), m_caller_owned (other.m_owned)\n+  {\n+    other.moved_from ();\n+  }\n+\n+  void maybe_free ()\n+  {\n+    if (m_caller_owned)\n+      free (m_buffer);\n+  }\n+\n+  char *m_buffer;\n+  bool m_caller_owned;\n+};\n+\n /* Implementation detail of layout::print_any_labels.\n \n    A label within the given row of source.  */\n@@ -1878,10 +1903,10 @@ class line_label\n \t      int state_idx, int column,\n \t      label_text text)\n   : m_state_idx (state_idx), m_column (column),\n-    m_text (text), m_label_line (0), m_has_vbar (true)\n+    m_text (std::move (text)), m_label_line (0), m_has_vbar (true)\n   {\n-    const int bytes = strlen (text.m_buffer);\n-    m_display_width = cpp_display_width (text.m_buffer, bytes, policy);\n+    const int bytes = strlen (m_text.m_buffer);\n+    m_display_width = cpp_display_width (m_text.m_buffer, bytes, policy);\n   }\n \n   /* Sorting is primarily by column, then by state index.  */\n@@ -1900,7 +1925,7 @@ class line_label\n \n   int m_state_idx;\n   int m_column;\n-  label_text m_text;\n+  pod_label_text m_text;\n   size_t m_display_width;\n   int m_label_line;\n   bool m_has_vbar;\n@@ -1941,7 +1966,7 @@ layout::print_any_labels (linenum_type row)\n \tif (text.m_buffer == NULL)\n \t  continue;\n \n-\tlabels.safe_push (line_label (m_policy, i, disp_col, text));\n+\tlabels.safe_push (line_label (m_policy, i, disp_col, std::move (text)));\n       }\n   }\n "}, {"sha": "2f297faed349b3bf296f09440310ded61d2ac16f", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -66,7 +66,6 @@ class path_label : public range_label\n     pp_show_color (&pp) = pp_show_color (global_dc->printer);\n     diagnostic_event_id_t event_id (event_idx);\n     pp_printf (&pp, \"%@ %s\", &event_id, event_text.m_buffer);\n-    event_text.maybe_free ();\n     label_text result = label_text::take (xstrdup (pp_formatted_text (&pp)));\n     return result;\n   }\n@@ -176,7 +175,6 @@ struct event_range\n \t    pretty_printer *pp = dc->printer;\n \t    pp_printf (pp, \" %@: %s\", &event_id, event_text.m_buffer);\n \t    pp_newline (pp);\n-\t    event_text.maybe_free ();\n \t  }\n \treturn;\n       }\n@@ -484,7 +482,6 @@ default_tree_diagnostic_path_printer (diagnostic_context *context,\n \t    else\n \t      inform (event.get_location (),\n \t\t      \"%@ %s\", &event_id, event_text.m_buffer);\n-\t    event_text.maybe_free ();\n \t  }\n       }\n       break;\n@@ -523,7 +520,6 @@ default_tree_make_json_for_path (diagnostic_context *context,\n \t\t\t\t\t\t     event.get_location ()));\n       label_text event_text (event.get_desc (false));\n       event_obj->set (\"description\", new json::string (event_text.m_buffer));\n-      event_text.maybe_free ();\n       if (tree fndecl = event.get_fndecl ())\n \t{\n \t  const char *function"}, {"sha": "c6379ce25b820883bd757dc0db29ef4a47cc14d1", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dce13c076019688f6d6aaaa338a2911022b336/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dce13c076019688f6d6aaaa338a2911022b336/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=a8dce13c076019688f6d6aaaa338a2911022b336", "patch": "@@ -22,6 +22,8 @@ along with this program; see the file COPYING3.  If not see\n #ifndef LIBCPP_LINE_MAP_H\n #define LIBCPP_LINE_MAP_H\n \n+#include <utility>\n+\n #ifndef GTY\n #define GTY(x) /* nothing */\n #endif\n@@ -1836,43 +1838,71 @@ class label_text\n {\n public:\n   label_text ()\n-  : m_buffer (NULL), m_caller_owned (false)\n+  : m_buffer (NULL), m_owned (false)\n   {}\n \n-  void maybe_free ()\n+  ~label_text ()\n+  {\n+    if (m_owned)\n+      free (m_buffer);\n+  }\n+\n+  /* Move ctor.  */\n+  label_text (label_text &&other)\n+  : m_buffer (other.m_buffer), m_owned (other.m_owned)\n+  {\n+    other.moved_from ();\n+  }\n+\n+  /* Move assignment.  */\n+  label_text & operator= (label_text &&other)\n   {\n-    if (m_caller_owned)\n+    if (m_owned)\n       free (m_buffer);\n+    m_buffer = other.m_buffer;\n+    m_owned = other.m_owned;\n+    other.moved_from ();\n+    return *this;\n   }\n \n+  /* Delete the copy ctor and copy-assignment operator.  */\n+  label_text (const label_text &) = delete;\n+  label_text & operator= (const label_text &) = delete;\n+\n   /* Create a label_text instance that borrows BUFFER from a\n      longer-lived owner.  */\n   static label_text borrow (const char *buffer)\n   {\n-    return label_text (const_cast <char *> (buffer), false);\n+    return std::move (label_text (const_cast <char *> (buffer), false));\n   }\n \n   /* Create a label_text instance that takes ownership of BUFFER.  */\n   static label_text take (char *buffer)\n   {\n-    return label_text (buffer, true);\n+    return std::move (label_text (buffer, true));\n   }\n \n   /* Take ownership of the buffer, copying if necessary.  */\n   char *take_or_copy ()\n   {\n-    if (m_caller_owned)\n+    if (m_owned)\n       return m_buffer;\n     else\n       return xstrdup (m_buffer);\n   }\n \n+  void moved_from ()\n+  {\n+    m_buffer = NULL;\n+    m_owned = false;\n+  }\n+\n   char *m_buffer;\n-  bool m_caller_owned;\n+  bool m_owned;\n \n private:\n   label_text (char *buffer, bool owned)\n-  : m_buffer (buffer), m_caller_owned (owned)\n+  : m_buffer (buffer), m_owned (owned)\n   {}\n };\n "}]}