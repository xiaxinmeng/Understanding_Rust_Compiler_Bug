{"sha": "47d7090eeb4503fa6123cf1089a560b6379bff56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkNzA5MGVlYjQ1MDNmYTYxMjNjZjEwODlhNTYwYjYzNzliZmY1Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-19T15:50:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-19T15:50:40Z"}, "message": "* ir.texi: New file.\n\nFrom-SVN: r29508", "tree": {"sha": "0a673dc9e4ede9bf0f04f9902be9f94d5cf776d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a673dc9e4ede9bf0f04f9902be9f94d5cf776d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d7090eeb4503fa6123cf1089a560b6379bff56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d7090eeb4503fa6123cf1089a560b6379bff56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d7090eeb4503fa6123cf1089a560b6379bff56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d7090eeb4503fa6123cf1089a560b6379bff56/comments", "author": null, "committer": null, "parents": [{"sha": "da9da1341cef1844b7af9dd09f6f352c9dd10dd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9da1341cef1844b7af9dd09f6f352c9dd10dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9da1341cef1844b7af9dd09f6f352c9dd10dd8"}], "stats": {"total": 1806, "additions": 1805, "deletions": 1}, "files": [{"sha": "7721b3185b9d2c602ae32471aa141c844146bd3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47d7090eeb4503fa6123cf1089a560b6379bff56", "patch": "@@ -1,3 +1,11 @@\n+1999-09-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ir.texi: New file.\n+\n+1999-09-19  Paul Burchard <burchard@pobox.com>\n+\n+\t* semantics.c (expand_stmt): Initialize return value.\n+\n 1999-09-18  Paul Burchard <burchard@pobox.com>\n \n \t* gxxint.texi: G++ now implements namespaces."}, {"sha": "f924f4f8d892296ea4e6d8755f59ab7942bc3e59", "filename": "gcc/cp/ir.texi", "status": "added", "additions": 1796, "deletions": 0, "changes": 1796, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=47d7090eeb4503fa6123cf1089a560b6379bff56", "patch": "@@ -0,0 +1,1796 @@\n+\\input texinfo\n+\n+@c ---------------------------------------------------------------------\n+@c This file is part of GNU CC.\n+@c \n+@c GNU CC is free software; you can redistribute it and/or modify\n+@c it under the terms of the GNU General Public License as published by\n+@c the Free Software Foundation; either version 2, or (at your option)\n+@c any later version.\n+@c\n+@c GNU CC is distributed in the hope that it will be useful,\n+@c but WITHOUT ANY WARRANTY; without even the implied warranty of\n+@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+@c GNU General Public License for more details.\n+@c \n+@c You should have received a copy of the GNU General Public License\n+@c along with GNU CC; see the file COPYING.  If not, write to\n+@c the Free Software Foundation, 59 Temple Place - Suite 330,\n+@c Boston, MA 02111-1307, USA.\n+@c ---------------------------------------------------------------------\n+\n+@c ---------------------------------------------------------------------\n+@c Prologue\n+@c ---------------------------------------------------------------------\n+\n+@setfilename ir.info\n+@settitle G++ Internal Representation\n+@setchapternewpage on\n+\n+@ifinfo\n+This manual documents the internal representation used by G++ to represent\n+C++ source programs.\n+\n+Copyright (c) 1999 Free Software Foundation, Inc.\n+@end ifinfo\n+\n+@c ---------------------------------------------------------------------\n+@c Titlepage\n+@c ---------------------------------------------------------------------\n+\n+@titlepage\n+@title G++ Internal Representation\n+@author CodeSourcery, LLC <info@@codesourcery.com>\n+@page\n+@vskip 0pt plus 1filll\n+Copyright @copyright{} 1999 Free Software Foundation, Inc.\n+@end titlepage\n+\n+@c ---------------------------------------------------------------------\n+@c Top\n+@c ---------------------------------------------------------------------\n+\n+@node Top\n+@top G++ Internal Representation\n+\n+This manual documents the internal representation used by G++ to\n+represent C++ source programs.  When presented with a C++ source\n+program, G++ parses the program, performs semantic analysis (including\n+the generation of error messages), and then produces the internal\n+representation described here.  This representation contains a complete\n+representation for the entire translation unit provided as input to the\n+G++ front-end.  This representation is then typically processed by a\n+code-generator in order to produce machine code, but could also be used\n+in the creation of source browsers, intelligent editors, automatic\n+documentation generators, interpreters, and any other programs needing\n+the ability to process C++ code.\n+\n+This manual explains the internal representation.  In particular, this\n+manual documents the internal representation for C++ source constructs,\n+and the macros, functions, and variables that can be used to access\n+these constructs.\n+\n+If you are developing a ``back-end'', be it is a code-generator or some\n+other tool, that uses this representation, you may occasionally find\n+that you need to ask questions not easily answered by the functions and\n+macros available here.  If that situation occurs, it is quite likely\n+that G++ already supports the functionality you desire, but that the\n+interface is simply not documented here.  In that case, you should ask\n+the G++ maintainers (via mail to @url{mailto:gcc@@gcc.gnu.org}) about\n+documenting the functionality you require.  Similarly, if you find\n+yourself writing functions that do not deal directly with your back-end,\n+but instead might be useful to other people using the G++ front-end, you\n+should submit your patches for inclusion in G++.\n+\n+@menu\n+* Deficiencies::        Topics net yet covered in this document.\n+* Overview::            All about @code{tree}s.\n+* Types::               Fundamental and aggregate types.        \n+* Scopes::              Namespaces and classes.\n+* Functions::           Overloading, function bodies, and linkage.\n+* Declarations::        Type declarations and variables.\n+* Expressions::         From @code{typeid} to @code{throw}.\n+* Node Index::          The various types of tree nodes.\n+* Function Index::      Functions and macros described in this manual.\n+* Concept Index::       Index.\n+@end menu\n+\n+@c ---------------------------------------------------------------------\n+@c Deficiencies\n+@c ---------------------------------------------------------------------\n+\n+@node Deficiencies\n+@chapter Deficiencies\n+\n+There are many places in which this document is incomplet and incorrekt.\n+It is, as of yet, only @emph{preliminary} documentation.\n+\n+@c ---------------------------------------------------------------------\n+@c Overview\n+@c ---------------------------------------------------------------------\n+\n+@node Overview\n+@chapter Overview\n+@cindex tree\n+@findex TREE_CODE\n+\n+The central data structure used by the internal representation is the\n+@code{tree}.  These nodes, while all of the C type @code{tree}, are of\n+many varieties.  A @code{tree} is a pointer type, but the object to\n+which it points may be of a variety of types.  From this point forward,\n+we will refer to trees in ordinary type, rather than in @code{this\n+font}, except when talking about the actual C type @code{tree}.\n+\n+You can tell what kind of node a particular tree is by using the\n+@code{TREE_CODE} macro.  Many, many macros take a trees as input and\n+return trees as output.  However, most macros require a certain kinds of\n+tree node as input.  In other words, there is a type-system for trees,\n+but it is not reflected in the C type-system.\n+\n+For safety, it is useful to configure G++ with @code{--enable-checking}.\n+Although this results in a significant performance penalty (since all\n+tree types are checked at run-time), and is therefore inappropriate in a\n+release version, it is extremely helpful during the development process.\n+\n+Many macros behave as predicates.  Many, although not all, of these\n+predicates end in @samp{_P}.  Do not rely on the result type of these\n+macros being of any particular type.  You may, however, rely on the fact\n+that the type can be compared to @code{0}, so that statements like\n+@example\n+if (TEST_P (t) && !TEST_P (y))\n+  x = 1;\n+@end example\n+@noindent\n+and\n+@example\n+int i = (TEST_P (t) != 0);\n+@end example\n+@noindent\n+are legal.  Macros that return @code{int} values now may be changed to\n+return @code{tree} values, or other pointers in the future.  Even those\n+that continue to return @code{int} may return multiple non-zero codes\n+where previously they returned only zero and one.  Therefore, you should\n+not write code like\n+@example\n+if (TEST_P (t) == 1)\n+@end example\n+@noindent\n+as this code is not guaranteed to work correctly in the future.\n+\n+You should not take the address of values returned by the macros or\n+functions described here.  In particular, no guarantee is given that the\n+values are lvalues.\n+\n+In general, the names of macros are all in uppercase, while the names of\n+functions are entirely in lower case.  There are rare exceptions to this\n+rule.  You should assume that any macro or function whose name is made\n+up entirely of uppercase letters may evaluate its arguments more than\n+once.  You may assume that a macro or function whose name is made up\n+entirely of lowercase letters will evaluate its arguments only once.\n+\n+The @code{error_mark_node} is a special tree.  Its tree code is\n+@code{ERROR_MARK}, but since there is only ever one node with that code,\n+the usual practice is to compare the tree against\n+@code{error_mark_node}.  (This test is just a test for pointer\n+equality.)  If an error has occurred during front-end processing the\n+flag @code{errorcount} will be set.  If the front-end has encountered\n+code it cannot handle, it will issue a message to the user and set\n+@code{sorrycount}.  When these flags are set, any macro or function\n+which normally returns a tree of a particular kind may instead return\n+the @code{error_mark_node}.  Thus, if you intend to do any processing of\n+erroneous code, you must be prepared to deal with the\n+@code{error_mark_node}.\n+\n+Occasionally, a particular tree slot (like an operand to an expression,\n+or a particular field in a declaration) will be referred to as\n+``reserved for the back-end.''  These slots are used to store RTL when\n+the tree is converted to RTL for use by the GCC back-end.  However, if\n+that process is not taking place (e.g., if the front-end is being hooked\n+up to an intelligent editor), then those slots may be used by the\n+back-end presently in use.\n+\n+If you encounter situations that do not match this documentation, such\n+as tree nodes of types not mentioned here, or macros documented to\n+return entities of a particular kind that instead return entities of\n+some different kind, you have found a bug, either in the front-end or in\n+the documentation.  Please report these bugs as you would any other\n+bug.\n+\n+@menu\n+* Trees::               Macros and functions that can be used with all trees.\n+* Identifiers::         The names of things.\n+* Containers::          Lists and vectors.\n+@end menu\n+\n+@c ---------------------------------------------------------------------\n+@c Trees\n+@c ---------------------------------------------------------------------\n+\n+@node Trees\n+@section Trees\n+@cindex tree\n+\n+This section is not here yet.\n+\n+@c ---------------------------------------------------------------------\n+@c Identifiers\n+@c ---------------------------------------------------------------------\n+\n+@node Identifiers\n+@section Identifiers\n+@cindex identifier\n+@cindex name\n+@tindex IDENTIFIER_NODE\n+\n+An @code{IDENTIFIER_NODE} represents a slightly more general concept\n+that the standard C or C++ concept of identifier.  In particular, an\n+@code{IDENTIFIER_NODE} may contain a @samp{$}, or other extraordinary\n+characters.\n+\n+There are never two distinct @code{IDENTIFIER_NODE}s representing the\n+same identifier.  Therefore, you may use pointer equality to compare\n+@code{IDENTIFIER_NODE}s, rather than using a routine like @code{strcmp}.\n+\n+You can use the following macros to access identifiers:\n+@ftable @code\n+@item IDENTIFIER_POINTER\n+The string represented by the identifier, represented as a\n+@code{char*}.  This string is always @code{NUL}-terminated, and contains\n+no embedded @code{NUL} characters.\n+\n+@item IDENTIFIER_LENGTH\n+The length of the string returned by @code{IDENTIFIER_POINTER}, not\n+including the trailing @code{NUL}.  This value of\n+@code{IDENTIFIER_POINTER (x)} is always the same as @code{strlen\n+(IDENTIFIER_POINTER (x))}.\n+\n+@item IDENTIFIER_OPNAME_P\n+This predicate holds if the identifier represents the name of an\n+overloaded operator.  In this case, you should not depend on the\n+contents of either the @code{IDENTIFIER_POINTER} or the\n+@code{IDENTIFIER_LENGTH}.\n+\n+@item IDENTIFIER_TYPENAME_P\n+This predicate holds if the identifier represents the name of a\n+user-defined conversion operator.  In this case, the @code{TREE_TYPE} of\n+the @code{IDENTIFIER_NODE} holds the type to which the conversion\n+operator converts.\n+\n+@end ftable\n+\n+@c ---------------------------------------------------------------------\n+@c Containers\n+@c ---------------------------------------------------------------------\n+\n+@node Containers\n+@section Containers\n+@cindex container\n+@cindex list\n+@cindex vector\n+@tindex TREE_LIST\n+@tindex TREE_VEC\n+@findex TREE_PURPOSE\n+@findex TREE_VALUE\n+@findex TREE_VEC_LENGTH\n+@findex TREE_VEC_ELT\n+\n+Two common container data structures can be represented directly with\n+tree nodes.  A @code{TREE_LIST} is a singly linked list containing two\n+trees per node.  These are the @code{TREE_PURPOSE} and @code{TREE_VALUE}\n+of each node.  (Often, the @code{TREE_PURPOSE} contains some kind of\n+tag, or additional information, while the @code{TREE_VALUE} contains the\n+majority of the payload.  In other cases, the @code{TREE_PURPOSE} is\n+simply @code{NULL_TREE}, while in still others both the\n+@code{TREE_PURPOSE} and @code{TREE_VALUE} are of equal stature.)  Given\n+one @code{TREE_LIST} node, the next node is found by following the\n+@code{TREE_CHAIN}.  If the @code{TREE_CHAIN} is @code{NULL_TREE}, then\n+you have reached the end of the list.\n+\n+A @code{TREE_VEC} is a simple vector.  The @code{TREE_VEC_LENGTH} is an\n+integer (not a tree) giving the number of nodes in the vector.  The\n+nodes themselves are accessed using the @code{TREE_VEC_ELT} macro, which\n+takes two arguments.  The first is the @code{TREE_VEC} in question; the\n+second is an integer indicating which element in the vector is desired.\n+The elements are indexed from zero.\n+\n+@c ---------------------------------------------------------------------\n+@c Types\n+@c ---------------------------------------------------------------------\n+\n+@node Types\n+@chapter Types\n+@cindex type\n+@cindex pointer\n+@cindex reference\n+@cindex fundamental type\n+@cindex array\n+@tindex VOID_TYPE\n+@tindex INTEGER_TYPE\n+@tindex TYPE_MIN_VALUE\n+@tindex TYPE_MAX_VALUE\n+@tindex REAL_TYPE\n+@tindex COMPLEX_TYPE\n+@tindex ENUMERAL_TYPE\n+@tindex BOOLEAN_TYPE\n+@tindex POINTER_TYPE\n+@tindex REFERENCE_TYPE\n+@tindex FUNCTION_TYPE\n+@tindex METHOD_TYPE\n+@tindex ARRAY_TYPE\n+@tindex RECORD_TYPE\n+@tindex UNION_TYPE\n+@findex CP_TYPE_QUALS\n+@findex TYPE_UNQUALIFIED\n+@findex TYPE_QUAL_CONST\n+@findex TYPE_QUAL_VOLATILE\n+@findex TYPE_QUAL_RESTRICT\n+@cindex qualified type\n+@findex TYPE_SIZE\n+@findex TYPE_ALIGN\n+@findex TYPE_PRECISION\n+@findex TYPE_ARG_TYPES\n+@findex TYPE_METHOD_BASETYPE\n+@findex TYPE_PTRMEM_P\n+\n+All C++ types have corresponding tree nodes.  However, you should not\n+assume that there is exactly one tree node corresponding to each C++\n+type.  There are often several.\n+\n+For the most part, different kinds of types have different tree codes.\n+(For example, pointer types use a @code{POINTER_TYPE} code while arrays\n+use an @code{ARRAY_TYPE} code.)  However, pointers to member functions\n+use the @code{RECORD_TYPE} code.  Therefore, when writing a\n+@code{switch} statement that depends on the code associated with a\n+particular type, you should take care to handle pointers to member\n+functions under the @code{RECORD_TYPE} case label.\n+\n+In C++, an array type is not qualified; rather the type of the array\n+elements is qualified.  This situation is reflected in the intermediate\n+representation.  The macros described here will always examine the\n+qualification of the underlying element type when applied to an array\n+type.  (If the element type is itself an array, then the recursion\n+continues until a non-array type is found, and the qualification of this\n+type is examined.)  So, for example, @code{CP_TYPE_CONST_P} will hold of\n+the type @code{const int ()[7]}, denoting an array of seven @code{int}s.\n+\n+The following functions and macros deal with cv-qualification of types:\n+@ftable @code\n+@item CP_TYPE_QUALS\n+This macro returns the set of type qualifiers applied to this type.\n+This value is @code{TYPE_UNQUALIFIED} if no qualifiers have been\n+applied.  The @code{TYPE_QUAL_CONST} bit is set if the type is\n+@code{const}-qualified.  The @code{TYPE_QUAL_VOLATILE} bit is set if the\n+type is @code{volatile}-qualified.  The @code{TYPE_QUAL_RESTRICT} bit is\n+set if the type is @code{restrict}-qualified.\n+\n+@item CP_TYPE_CONST_P\n+This macro holds if the type is @code{const}-qualified.\n+\n+@item CP_TYPE_VOLATILE_P\n+This macro holds if the type is @code{volatile}-qualified.\n+\n+@item CP_TYPE_RESTRICT_P\n+This macro holds if the type is @code{restrict}-qualified.\n+\n+@item TYPE_MAIN_VARIANT\n+This macro returns the unqualified version of a type.  It may be applied\n+to an unqualified type, but it is not always the identity function in\n+that case.\n+@end ftable\n+\n+A few other macros and functions are usable with all types:\n+@ftable @code\n+@item TYPE_SIZE\n+The number of bits required to represent the type, represented as an\n+@code{INTEGER_CST}.  For an incomplete type, @code{TYPE_SIZE} will be\n+@code{NULL_TREE}.\n+\n+@item TYPE_ALIGN\n+The alignment of the type, in bits, represented as an @code{int}.\n+\n+@item TYPE_NAME\n+This macro returns a declaration (in the form of a @code{TYPE_DECL}) for\n+the type.  (Note this macro does @emph{not} return a\n+@code{IDENTIFIER_NODE}, as you might expect, given its name!)  You can\n+look at the @code{DECL_NAME} of the @code{TYPE_DECL} to obtain the\n+actual name of the type.  The @code{TYPE_NAME} will be @code{NULL_TREE}\n+for a type that is not a builtin type, the result of a typedef, or a\n+named class type.\n+\n+@item same_type_p\n+This predicate takes two types as input, and holds if they are the same\n+type.  For example, if one type is a @code{typedef} for the other, or\n+both are @code{typedef}s for the same type.  This predicate also holds if\n+the two trees given as input are simply copies of one another; i.e.,\n+there is no difference between them at the source level, but, for\n+whatever reason, a duplicate has been made in the representation.  You\n+should never use @code{==} (pointer equality) to compare types; always\n+use @code{same_type_p} instead.\n+@end ftable\n+\n+Detailed below are the various kinds of types, and the macros that can\n+be used to access them.  Although other kinds of types are used\n+elsewhere in G++, the types described here are the only ones that you\n+will encounter while examining the intermediate representation.\n+\n+@table @code\n+@item VOID_TYPE\n+Used to represent the @code{void} type.\n+\n+@item INTEGER_TYPE\n+Used to represent the various integral types, including @code{char},\n+@code{short}, @code{int}, @code{long}, and @code{long long}.  This code\n+is not used for enumeration types, nor for the @code{bool} type.  Note\n+that GCC's @code{CHAR_TYPE} node is @emph{not} used to represent\n+@code{char}.  The @code{TYPE_PRECISION} is the number of bits used in\n+the representation, represented as an @code{unsigned int}.  (Note that\n+in the general case this is not the same value as @code{TYPE_SIZE};\n+suppose that there were a 24-bit integer type, but that alignment\n+requirements for the ABI required 32-bit alignment.  Then,\n+@code{TYPE_SIZE} would be an @code{INTEGER_CST} for 32, while\n+@code{TYPE_PRECISION} would be 24.)  The integer type is unsigned if\n+@code{TREE_UNSIGNED} holds; otherwise, it is signed.\n+\n+The @code{TYPE_MIN_VALUE} is an @code{INTEGER_CST} for the smallest\n+integer that may be represented by this type.  Similarly, the\n+@code{TYPE_MAX_VALUE} is an @code{INTEGER_CST} for the largest integer\n+that may be represented by this type.\n+\n+@item REAL_TYPE\n+Used to represent the @code{float}, @code{double}, and @code{long\n+double} types.  The number of bits in the floating-point representation\n+is given by @code{TYPE_PRECISION}, as in the @code{INTEGER_TYPE} case.\n+\n+@item COMPLEX_TYPE\n+FIXME: The __complex__ extension is supported in G++.  Document.\n+\n+@item ENUMERAL_TYPE\n+Used to represent an enumeration type.  The @code{TYPE_PRECISION} gives\n+(as an @code{int}), the number of bits used to represent the type.  If\n+there are no negative enumeration constants, @code{TREE_UNSIGNED} will\n+hold.  The minimum and maximum enumeration constants may be obtained\n+with @code{TYPE_MIN_VALUE} and @code{TYPE_MAX_VALUE}, respectively; each\n+of these macros returns an @code{INTEGER_CST}.\n+\n+The actual enumeration constants themselves may be obtained by looking\n+at the @code{TYPE_VALUES}.  This macro will return a @code{TREE_LIST},\n+containing the constants.  The @code{TREE_PURPOSE} of each node will be\n+an @code{IDENTIFIER_NODE} giving the name of the constant; the\n+@code{TREE_VALUE} will be an @code{INTEGER_CST} giving the value\n+assigned to that constant.  These constants will appear in the order in\n+which they were declared.  The @code{TREE_TYPE} of each of these\n+constants will be the type of enumeration type itself.\n+\n+@item BOOLEAN_TYPE\n+Used to represent the @code{bool} type.\n+\n+@item POINTER_TYPE\n+Used to represent pointer types, and pointer to data member types.  The\n+@code{TREE_TYPE} gives the type to which this type points.  If the type\n+is a pointer to data member type, then @code{TYPE_PTRMEM_P} will hold.\n+For a pointer to data member type of the form @samp{T X::*},\n+@code{TYPE_PTRMEM_CLASS_TYPE} will be the type @code{X}, while\n+@code{TYPE_PTRMEM_POINTED_TO_TYPE} will be the type @code{T}.\n+\n+@item REFERENCE_TYPE\n+Used to represent reference types.  The @code{TREE_TYPE} gives the type\n+to which this type refers.\n+\n+@item FUNCTION_TYPE\n+Used to represent the type of non-member functions and of static member\n+functions.  The @code{TREE_TYPE} gives the return type of the function.\n+The @code{TYPE_ARG_TYPES} are a @code{TREE_LIST} of the argument types.\n+The @code{TREE_VALUE} of each node in this list is the type of the\n+corresponding argument; the @code{TREE_PURPOSE} is an expression for the\n+default argument value, if any.  If the last node in the list is\n+@code{void_list_node} (a @code{TREE_LIST} node whose @code{TREE_VALUE}\n+is the @code{void_type_node}), then functions of this type do not take\n+variable arguments.  Otherwise, they do take a variable number of\n+arguments.\n+\n+@item METHOD_TYPE\n+Used to represent the type of a non-static member function.  Like a\n+@code{FUNCTION_TYPE}, the return type is given by the @code{TREE_TYPE}.\n+The type of @code{*this}, i.e., the class of which functions of this\n+type are a member, is given by the @code{TYPE_METHOD_BASETYPE}.  The\n+@code{TYPE_ARG_TYPES} is the parameter list, as for a\n+@code{FUNCTION_TYPE}, and includes the @code{this} argument.\n+\n+@item ARRAY_TYPE\n+Used to represent array types.  The @code{TREE_TYPE} gives the type of\n+the elements in the array.  If the array-bound is present in the type,\n+the @code{TYPE_DOMAIN} is an @code{INTEGER_TYPE} whose\n+@code{TYPE_MIN_VALUE} and @code{TYPE_MAX_VALUE} will be the lower and\n+upper bounds of the array, respectively.  The @code{TYPE_MIN_VALUE} will\n+always be an @code{INTEGER_CST} for zero, while the\n+@code{TYPE_MAX_VALUE} will be one less than the number of elements in\n+the array, i.e., the highest value which may be used to index an element\n+in the array.\n+\n+@item RECORD_TYPE\n+Used to represent @code{struct} and @code{class} types, as well as\n+pointers to member functions.  If @code{TYPE_PTRMEMFUNC_P} holds, then\n+this type is a pointer-to-member type.  In that case, the\n+@code{TYPE_PTRMEMFUNC_FN_TYPE} is a @code{POINTER_TYPE} pointing to a\n+@code{METHOD_TYPE}.  The @code{METHOD_TYPE} is the type of a function\n+pointed to by the pointer-to-member function.  If\n+@code{TYPE_PTRMEMFUNC_P} does not hold, this type is a class type.  For\n+more information, see @pxref{Classes}.\n+\n+@item UNION_TYPE\n+Used to represent @code{union} types.  For more information, @pxref{Classes}.\n+@end table\n+\n+There are variables whose values represent some of the basic types.\n+These include:\n+@table @code\n+@item void_type_node\n+A node for @code{void}.\n+\n+@item integer_type_node\n+A node for @code{int}.\n+\n+@item unsigned_type_node.\n+A node for @code{unsigned int}.\n+\n+@item char_type_node.\n+A node for @code{char}.\n+@end table\n+@noindent\n+It may sometimes be useful to compare one of these variables with a type\n+in hand, using @code{same_type_p}.\n+\n+@c ---------------------------------------------------------------------\n+@c Scopes\n+@c ---------------------------------------------------------------------\n+\n+@node Scopes\n+@chapter Scopes\n+@cindex namespace, class, scope\n+\n+The root of the entire intermediate representation is the variable\n+@code{global_namespace}.  This is the namespace specified with @code{::}\n+in C++ source code.  All other namespaces, types, variables, functions,\n+and so forth can be found starting with this namespace.\n+\n+Besides namespaces, the other high-level scoping construct in C++ is the\n+class.  (Throughout this manual the term @dfn{class} is used to mean the\n+types referred to in the ANSI/ISO C++ Standard as classes; these include\n+types defined with the @code{class}, @code{struct}, and @code{union}\n+keywords.)\n+\n+@menu\n+* Namespaces::          Member functions, types, etc.\n+* Classes::             Members, bases, friends, etc.\n+@end menu\n+\n+@c ---------------------------------------------------------------------\n+@c Namespaces\n+@c ---------------------------------------------------------------------\n+\n+@node Namespaces\n+@section Namespaces\n+@cindex namespace\n+@tindex NAMESPACE_DECL\n+\n+A namespace is represented by a @code{NAMESPACE_DECL} node.\n+\n+However, except for the fact that it is distinguished as the root of the\n+representation, the global namespace is no different from any other\n+namespace.  Thus, in what follows, we describe namespaces generally,\n+rather than the global namespace in particular.\n+\n+The @code{::std} namespace, however, @emph{is} special, unless\n+@code{flag_honor_std} is set.  This variable is set by the use\n+@samp{-fhonor-std} (or an option that implies it, like\n+@samp{-fnew-abi}), when invoking G++.  When @code{flag_honor_std} is\n+set, the @code{std} namespace is just like any other namespace.  When\n+@code{flag_honor_std} is not set, however, the @code{::std} namespace is\n+treated as a synonym for the global namespace, thereby allowing users to\n+write code that will work with compilers that put the standard library\n+in the @code{::std} namespace, even though the library supplied with G++\n+does not do so, as of GCC 2.95.  The @code{std} namespace is represented\n+by the variable @code{std_node}.  Although @code{std_node} is a\n+@code{NAMESPACE_DECL}, it does not have all the fields required of a\n+real namespace, and the macros and functions described here do not work,\n+in general.  It is safest simply to ignore @code{std_node} should you\n+encounter it while examining the internal representation.  In\n+particular, you will encounter @code{std_node} while looking at the\n+members of the global namespace.  Just skip it without attempting to\n+examine its members.\n+\n+The following macros and functions can be used on a @code{NAMESPACE_DECL}:\n+\n+@ftable @code\n+@item DECL_NAME\n+This macro is used to obtain the @code{IDENTIFIER_NODE} corresponding to\n+the unqualified name of the name of the namespace (@pxref{Identifiers}).\n+The name of the global namespace is @samp{::}, even though in C++ the\n+global namespace is unnamed.  However, you should use comparison with\n+@code{global_namespace}, rather than @code{DECL_NAME} to determine\n+whether or not a namespaces is the global one.  An unnamed namespace\n+will have a @code{DECL_NAME} equal to @code{anonymous_namespace_name}.\n+Within a single translation unit, all unnamed namespaces will have the\n+same name.\n+\n+@item DECL_CONTEXT\n+This macro returns the enclosing namespace.  The @code{DECL_CONTEXT} for\n+the @code{global_namespace} is @code{NULL_TREE}.\n+\n+@item cp_namespace_decls\n+This function will return the declarations contained in the namespace,\n+including types, overloaded functions, other namespaces, and so forth.\n+If there are no declarations, this function will return\n+@code{NULL_TREE}.  The declarations are connected through their\n+@code{TREE_CHAIN} fields.  \n+\n+Although most entries on this list will be declarations,\n+@code{TREE_LIST} nodes may also appear.  In this case, the\n+@code{TREE_VALUE} will be an @code{OVERLOAD}.  The value of the\n+@code{TREE_PURPOSE} is unspecified; back-ends should ignore this value.\n+As with the other kinds of declarations returned by\n+@code{cp_namespace_decls}, the @code{TREE_CHAIN} will point to the next\n+declaration in this list.\n+\n+For more information on the kinds of declarations that can occur on this\n+list, @xref{Declarations}.  Some declarations will not appear on this\n+list.  In particular, no @code{FIELD_DECL}, @code{LABEL_DECL}, or\n+@code{PARM_DECL} nodes will appear here.\n+\n+@end ftable\n+\n+@c ---------------------------------------------------------------------\n+@c Classes\n+@c ---------------------------------------------------------------------\n+\n+@node Classes\n+@section Classes\n+@cindex class\n+@tindex RECORD_TYPE\n+@tindex UNION_TYPE\n+@findex CLASSTYPE_DECLARED_CLASS\n+@findex TYPE_BINFO\n+@findex BINFO_TYPE\n+@findex TREE_VIA_PUBLIC\n+@findex TREE_VIA_PROTECTED\n+@findex TREE_VIA_PRIVATE\n+@findex TYPE_FIELDS\n+@findex TYPE_METHODS\n+\n+A class type is represented by either a @code{RECORD_TYPE} or a\n+@code{UNION_TYPE}.  A class declared with the @code{union} tag is\n+represented by a @code{UNION_TYPE}, while classes declared with either\n+the @code{struct} or the @code{union} tag are represented by\n+@code{RECORD_TYPE}s.  You can use the @code{CLASSTYPE_DECLARED_CLASS}\n+macro to discern whether or not a particular type is a @code{class} as\n+opposed to a @code{struct}.  This macro will be true only for classes\n+declared with the @code{class} tag.\n+\n+All non-function members are available on the @code{TYPE_FIELDS} list.\n+Given one member, the next can be found by following the\n+@code{TREE_CHAIN}.  You should not depend in any way on the order in\n+which fields appear on this list.  All nodes on this list will be\n+@samp{DECL} nodes. A @code{FIELD_DECL} is used to represent a non-static\n+data member, a @code{VAR_DECL} is used to represent a static data\n+member, and a @code{TYPE_DECL} is used to represent a type.  Note that\n+the @code{CONST_DECL} for an enumeration constant will appear on this\n+list, if the enumeration type was declared in the class.  (Of course,\n+the @code{TYPE_DECL} for the enumeration type will appear here as well.)\n+There are no entries for base classes on this list.  In particular,\n+there is no @code{FIELD_DECL} for the ``base-class portion'' of an\n+object.\n+\n+The function members are available on the @code{TYPE_METHODS} list.\n+Again, subsequent members are found by following the @code{TREE_CHAIN}\n+field.  If a function is overloaded, each of the overloaded functions\n+appears; no @code{OVERLOAD} nodes appear on the @code{TYPE_METHODS}\n+list.  Implicitly declared functions (including default constructors,\n+copy constructors, assignment operators, and destructors) will appear on\n+this list as well.\n+\n+Every class has an associated @dfn{binfo}, which can be obtained with\n+@code{TYPE_BINFO}.  Binfos are used to represent base-classes.  The\n+binfo given by @code{TYPE_BINFO} is the degenerate case, whereby every\n+class is considered to be its own base-class.  The base classes for a\n+particular binfo can be obtained with @code{BINFO_BASETYPES}.  These\n+base-classes are themselves binfos.  The class type associated with a\n+binfo is given by @code{BINFO_TYPE}.  It is always the case that\n+@code{BINFO_TYPE (TYPE_BINFO (x))} is the same type as @code{x}, up to\n+qualifiers.  However, it is not always the case that @code{TYPE_BINFO\n+(BINFO_TYPE (y))} is always the same binfo as @code{y}.  The reason is\n+that if @code{y} is a binfo representing a base-class @code{B} of a\n+derived class @code{D}, then @code{BINFO_TYPE (y)} will be @code{B}, and\n+@code{TYPE_INFO (BINFO_TYPE (y))} will be @code{B} as its own\n+base-class, rather than as a base-class of @code{D}.\n+\n+The @code{BINFO_BASETYPES} is a @code{TREE_VEC} (@pxref{Containers}).\n+Base types appear in left-to-right order in this vector.  You can tell\n+whether or @code{public}, @code{protected}, or @code{private}\n+inheritance was used by using the @code{TREE_VIA_PUBLIC},\n+@code{TREE_VIA_PROTECTED}, and @code{TREE_VIA_PRIVATE} macros.  Each of\n+these macros takes a @code{BINFO} and is true if and only if the\n+indicated kind of inheritance was used.  If @code{TREE_VIA_VIRTUAL}\n+holds of a binfo, then its @code{BINFO_TYPE} was inherited from\n+virtually.\n+\n+FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n+\n+@c ---------------------------------------------------------------------\n+@c Declarations\n+@c ---------------------------------------------------------------------\n+\n+@node Declarations\n+@chapter Declarations\n+@cindex declaration\n+@cindex variable\n+@cindex type declaration\n+@tindex LABEL_DECL\n+@tindex CONST_DECL\n+@tindex TYPE_DECL\n+@tindex VAR_DECL\n+@tindex PARM_DECL\n+@tindex FIELD_DECL\n+@tindex NAMESPACE_DECL\n+@tindex TEMPLATE_DECL\n+@tindex USING_DECL\n+@findex DECL_INITIAL\n+@findex DECL_SIZE\n+@findex DECL_ALIGN\n+\n+This chapter covers the various kinds of declarations that appear in the\n+internal representation, except for declarations of functions\n+(represented by @code{FUNCTION_DECL} nodes), which are described in\n+@ref{Functions}.\n+\n+Some macros can be used with any kind of declaration.  These include:\n+@ftable @code\n+@item DECL_NAME\n+This macro returns an @code{IDENTIFIER_NODE} giving the name of the\n+entity.\n+\n+@item TREE_TYPE\n+This macro returns the type of the entity declared.\n+\n+@item DECL_SOURCE_FILE\n+This macro returns the name of the file in which the entity was\n+declared, as a @code{char*}.  For an entity declared implicitly by the\n+compiler (like @code{__builtin_memcpy}), this will be the string\n+@code{\"<internal>\"}.\n+\n+@item DECL_SOURCE_LINE\n+This macro returns the line number at which the entity was declared, as\n+an @code{int}.\n+\n+@item DECL_ARTIFICIAL \n+This predicate holds if the declaration was implicitly generated by the\n+compiler.  For example, this predicate will hold of an implicitly\n+declared member function, or of the @code{TYPE_DECL} implicitly\n+generated for a class type.  Recall that in C++ code like:\n+@example\n+struct S @{@};\n+@end example\n+@noindent\n+is roughly equivalent to C code like:\n+@example\n+struct S @{@};\n+typedef struct S S;\n+@end example\n+The implicitly generated @code{typedef} declaration is represented by a\n+@code{TYPE_DECL} for which @code{DECL_ARTIFICIAL} holds.\n+@end ftable\n+\n+The various kinds of declarations include:\n+@table @code\n+@item LABEL_DECL\n+These nodes are used to represent labels in function bodies.  For more\n+information, see @ref{Functions}.  These nodes only appear in block\n+scopes.\n+\n+@item CONST_DECL\n+These nodes are used to represent enumeration constants.  The value of\n+the constant is given by @code{DECL_INITIAL} which will be an\n+@code{INTEGER_CST} with the same type as the @code{TREE_TYPE} of the\n+@code{CONST_DECL}, i.e., an @code{ENUMERAL_TYPE}.\n+\n+@item TYPE_DECL\n+These nodes represent @code{typedef} declarations.  The @code{TREE_TYPE}\n+is the type declared to have the name given by @code{DECL_NAME}.  In\n+some cases, there is no associated name.\n+\n+@item VAR_DECL\n+These nodes represent variables with namespace or block scope, as well\n+as static data members.  The @code{DECL_SIZE} and @code{DECL_ALIGN} are\n+analogous to @code{TYPE_SIZE} and @code{TYPE_ALIGN}.  For a declaration,\n+you should always use the @code{DECL_SIZE} and @code{DECL_ALIGN} rather\n+than the @code{TYPE_SIZE} and @code{TYPE_ALIGN} given by the\n+@code{TREE_TYPE}, since special attributes may have been applied to the\n+variable to give it a particular size and alignment.\n+\n+If this variable is initialized (but does not require a constructor),\n+the @code{DECL_INITIAL} will be an expression for the initializer.\n+\n+@item PARM_DECL\n+Used to represent a parameter to a function.  Treat these nodes\n+similarly to @code{VAR_DECL} nodes.  These nodes only appear in the\n+@code{DECL_ARGUMENTS} for a @code{FUNCTION_DECL}.\n+\n+The @code{DECL_ARG_TYPE} for a @code{PARM_DECL} is the type that will\n+actually be used when a value is passed to this function.  It may be a\n+wider type than the @code{TREE_TYPE} of the parameter; for example, the\n+ordinary type might be @code{short} while the @code{DECL_ARG_TYPE} is\n+@code{int}.\n+\n+@item FIELD_DECL\n+These nodes represent non-static data members.  The @code{DECL_SIZE} and\n+@code{DECL_ALIGN} behave as for @code{VAR_DECL} nodes.  The\n+@code{DECL_FIELD_BITPOS} gives the first bit used for this field, as an\n+@code{INTEGER_CST}.  These values are indexed from zero, where zero\n+indicates the first bit in the object.\n+\n+FIXME: Talk about bitfields.\n+\n+@item NAMESPACE_DECL\n+@xref{Namespaces}\n+\n+@item TEMPLATE_DECL\n+\n+These nodes are used to represent class, function, and variable (static\n+data member) templates.  The @code{DECL_TEMPLATE_SPECIALIZATIONS} are a\n+@code{TREE_LIST}.  The @code{TREE_VALUE} of each node in the lst is a\n+@code{TEMPLATE_DECL}s or @code{FUNCTION_DECL}s representing\n+specializations (including instantiations) of this template.  Back-ends\n+can safely ignore @code{TEMPLATE_DECL}s, but should examine\n+@code{FUNCTION_DECL} nodes on the specializations list just as they\n+would ordinary @code{FUNCTION_DECL} nodes.\n+\n+@item USING_DECL\n+\n+Back-ends can safely ignore these nodes.\n+\n+@end table\n+\n+@c ---------------------------------------------------------------------\n+@c Functions\n+@c ---------------------------------------------------------------------\n+\n+@node Functions\n+@chapter Functions\n+@cindex function\n+@tindex FUNCTION_DECL\n+@tindex OVERLOAD\n+@findex OVL_\n+\n+A function is represented by a @code{FUNCTION_DECL} node.  A set of\n+overloaded functions is sometimes represented by a @code{OVERLOAD} node.\n+\n+An @code{OVERLOAD} node is not a declaration, so none of the\n+@samp{DECL_} macros should be used on an @code{OVERLOAD}.  An\n+@code{OVERLOAD} node is similar to a @code{TREE_LIST}.  Use\n+@code{OVL_CURRENT} to get the function associated with an\n+@code{OVERLOAD} node; use @code{OVL_NEXT} to get the next\n+@code{OVERLOAD} node in the list of overloaded functions.  The macros\n+@code{OVL_CURRENT} and @code{OVL_NEXT} are actually polymorphic; you can\n+use them to work with @code{FUNCTION_DECL} nodes as well as with\n+overlods.  In the case of a @code{FUNCTION_DECL}, @code{OVL_CURRENT}\n+will always return the function itself, and @code{OVL_NEXT} will always\n+be @code{NULL_TREE}.\n+\n+To determine the scope of a function, you can use the\n+@code{DECL_REAL_CONTEXT} macro.  This macro will return the class\n+(either a @code{RECORD_TYPE} or a @code{UNION_TYPE}) or namespace (a\n+@code{NAMESPACE_DECL}) of which the function is a member.  For a virtual\n+function, this macro returns the class in which the function was\n+actually defined, not the base class in which the virtual declaration\n+occurred.  If a friend function is defined in a class scope, the\n+@code{DECL_CLASS_CONTEXT} macro can be used to determine the class in\n+which it was defined.  For example, in\n+@example\n+class C @{ friend void f() @{@} @};\n+@end example\n+the @code{DECL_REAL_CONTEXT} for @code{f} will be the\n+@code{global_namespace}, but the @code{DECL_CLASS_CONTEXT} will be the\n+@code{RECORD_TYPE} for @code{C}.\n+\n+@menu\n+* Function Basics::     Function names, linkage, and so forth.\n+* Function Bodies::     The statements that make up a function body.\n+@end menu\n+\n+@c ---------------------------------------------------------------------\n+@c Function Basics\n+@c ---------------------------------------------------------------------\n+\n+@node Function Basics\n+@section Function Basics\n+@cindex constructor\n+@cindex destructor\n+@cindex copy constructor\n+@cindex assignment operator\n+@cindex linkage\n+@findex DECL_NAME\n+@findex DECL_ASSEMBLER_NAME\n+@findex TREE_PUBLIC\n+@findex DECL_LINKONCE_P\n+@findex DECL_FUNCTION_MEMBER_P\n+@findex DECL_CONSTRUCTOR_P\n+@findex DECL_DESTRUCTOR_P\n+@findex DECL_OVERLOADED_OPERATOR_P\n+@findex DECL_CONV_FN_P\n+@findex DECL_ARTIFIICIAL\n+\n+The following macros and functions can be used on a @code{FUNCTION_DECL}:\n+@ftable @code\n+@item DECL_NAME\n+This macro returns the unqualified name of the function, as an\n+@code{IDENTIFIER_NODE}.  For an instantiation of a function template,\n+the @code{DECL_NAME} is the unqualified name of the template, not\n+something like @code{f<int>}.  The value of @code{DECL_NAME} is\n+undefined when used on a constructor, destructor, overloaded operator,\n+or type-conversion operator, or any function that is implicitly\n+generated by the compiler.  See below for macros that can be used to\n+distinguish these cases.\n+\n+@item DECL_ASSEMBLER_NAME\n+This macro returns the mangled name of the function, also an\n+@code{IDENTIFIER_NODE}.  This name does not contain leading underscores\n+on systems that prefix all identifiers with underscores.  The mangled\n+name is computed in the same way on all platforms; if special processing\n+is required to deal with the object file format used on a particular\n+platform, it is the responsibility of the back-end to perform those\n+modifications.  (Of course, the back-end should not modify\n+@code{DECL_ASSEMBLER_NAME} itself.)\n+\n+@item TREE_PUBLIC\n+This predicate holds if the function has external linkage.\n+\n+@item DECL_LINKONCE_P\n+This macro holds if multiple copies of this function may be emitted in\n+various translation units.  It is the responsibility of the linker to\n+merge the various copies.  Template instantiations are the most common\n+example of functions for which @code{DECL_LINKONCE_P} holds; G++\n+instantiates needed templates in all translation units which require them,\n+and then relies on the linker to remove duplicate instantiations.\n+\n+FIXME: This macro is not yet implemented.\n+\n+@item DECL_FUNCTION_MEMBER_P\n+This macro holds if the function is a member of a class, rather than a\n+member of a namespace.\n+\n+@item DECL_NONSTATIC_MEMBER_FUNCTION_P\n+This macro holds for a non-static member function.\n+\n+@item DECL_CONSTRUCTOR_P\n+This macro holds if the function is a constructor.\n+\n+@item DECL_DESTRUCTOR_P\n+This macro holds if the function is a destructor.\n+\n+@item DECL_OVERLOADED_OPERATOR_P\n+This macro holds if the function is an overloaded operator.\n+\n+@item DECL_CONV_FN_P\n+This macro holds if the function is a type-conversion operator.\n+\n+@item DECL_ARTIFICIAL\n+This macro holds if the function was implicitly generated by the\n+compiler, rather than explicitly declared.  In addition to implicitly\n+generated class member functions, this macro holds for the special\n+functions created to implement static initialization and destruction, to\n+compute run-time type information, and so forth.\n+\n+@item DECL_ARGUMENTS\n+This macro returns the @code{PARM_DECL} for the first argument to the\n+function.  Subsequent @code{PARM_DECL} nodes can be obtained by\n+following the @code{TREE_CHAIN} links.\n+\n+@item TREE_TYPE\n+This macro returns the @code{FUNCTION_TYPE} or @code{METHOD_TYPE} for\n+the function.\n+\n+@end ftable\n+\n+FIXME: Explain about constructor try-catch blocks.\n+\n+@c ---------------------------------------------------------------------\n+@c Function Bodies\n+@c ---------------------------------------------------------------------\n+\n+@node Function Bodies\n+@section Function Bodies\n+@cindex function body\n+@cindex statements\n+@tindex ASM_STMT\n+@findex ASM_STRING\n+@findex ASM_CV_QUAL\n+@findex ASM_INPUTS\n+@findex ASM_OUTPUTS\n+@findex ASM_CLOBBERS\n+@tindex BREAK_STMT\n+@tindex COMPOUND_STMT\n+@findex COMPOUND_BODY\n+@tindex CONTINUE_STMT\n+@tindex CTOR_INITIALIZER\n+@tindex DECL_STMT\n+@findex DECL_STMT_DECL\n+@tindex DO_STMT\n+@findex DO_BODY\n+@findex DO_COND\n+@tindex EXPR_STMT\n+@findex EXPR_STMT_EXPR\n+@tindex FOR_STMT\n+@findex FOR_INIT_STMT\n+@findex FOR_COND\n+@findex FOR_EXPR\n+@findex FOR_BODY\n+@tindex GOTO_STMT\n+@findex GOTO_DESTINATION\n+@tindex HANDLER\n+@tindex IF_STMT\n+@findex IF_COND\n+@findex THEN_CLAUSE\n+@findex ELSE_CLAUSE\n+@tindex LABEL_STMT\n+@tindex LABEL_STMT_LABEL\n+@tindex RETURN_INIT\n+@tindex RETURN_STMT\n+@findex RETURN_EXPR\n+@tindex SUBOBJECT\n+@findex SUBOBJECT_CLEANUP\n+@tindex SWITCH_STMT\n+@findex SWITCH_COND\n+@findex SWITCH_BODY\n+@tindex TRY_BLOCK\n+@findex TRY_STMTS\n+@findex TRY_HANDLERS\n+@findex HANDLER_PARMS\n+@findex HANDLER_BODY\n+@tindex WHILE_STMT\n+@findex WHILE_BODY\n+@findex WHILE_COND\n+\n+A function that has a definition in the current translation unit will\n+have a non-NULL @code{DECL_INITIAL}.  However, the @code{DECL_INITIAL}\n+will simply be the @code{error_mark_node}.  (When tree structure is\n+translated to RTL, @code{DECL_INITIAL} will contain a different value.)\n+\n+The @code{DECL_SAVED_TREE} macro will give the complete body of the\n+function.  This node will usually be a @code{COMPOUND_STMT} representing\n+the outermost block of the function, but it may also be a\n+@code{TRY_BLOCK}, @code{RETURN_INIT}, or @code{CTOR_INITIALIZER}, as\n+described below.\n+\n+If the function has a function try-block, the @code{DECL_SAVED_TREE}\n+will be a @code{TRY_BLOCK}.  The @code{TRY_STMTS} will then be either a\n+@code{RETURN_INIT}, @code{CTOR_INITIALIZER}, or @code{COMPOUND_STMT}.\n+\n+If the function is a constructor, the @code{DECL_SAVED_TREE} may be a\n+@code{CTOR_INITIALIZER} node, indicating how base classes and members\n+should be initialized.  The @code{TREE_CHAIN} of the\n+@code{CTOR_INITIALIZER} will be the @code{COMPOUND_STMT} representing\n+the body of the constructor.  FIXME: Document how the base initializers\n+and member initializers can be used.\n+\n+If the function uses the G++ ``named return value'' extension, meaning\n+that the function has been defined like:\n+@example\n+S f(int) return s @{...@}\n+@end example\n+the @code{DECL_SAVED_TREE} will be a @code{RETURN_INIT}.  The\n+@code{TREE_CHAIN} of the @code{RETURN_INIT} will be the\n+@code{COMPOUND_STMT} representing the body of the function.  There is\n+never a named returned value for a constructor, so there is never a\n+situation in which a @code{RETURN_INIT} and a @code{CTOR_INITIALIZER}\n+appear simultaneously.  FIXME: Document how the @code{RETURN_INIT} can\n+be used.\n+\n+@subsection Statements\n+\n+There are tree nodes corresponding to all of the source-level statement\n+constructs.  These are enumerated here, together with a list of the\n+various macros that can be used to obtain information about them.  There\n+are a few macros that can be used with all statements:\n+\n+@ftable @code\n+@item STMT_LINENO\n+This macro returns the line number for the statement.  If the statement\n+spans multiple lines, this value will be the number of the first line on\n+which the statement occurs.  Although we mention @code{CASE_LABEL} below\n+as if it were a statement, they do not allow the use of\n+@code{STMT_LINENO}.  There is no way to obtain the line number for a\n+@code{CASE_LABEL}.\n+\n+Statements do not contain information about\n+the file from which they came; that information is implicit in the\n+@code{FUNCTION_DECL} from which the statements originate.\n+@end ftable\n+\n+Here is the list of the various statement nodes, and the macros used to\n+access them.  This documentation describes the use of these nodes in\n+non-template functions (including instantiations of template functions).\n+In template functions, the same nodes are used, but sometimes in\n+slightly different ways.  \n+\n+Many of the statements have substatements.  For example, a @code{while}\n+loop will have a body, which is itself a statement.  If the substatement\n+is @code{NULL_TREE}, it is considered equivalent to a statement\n+consisting of a single @code{;}, i.e., an expression statement in which\n+the expression has been omitted.\n+\n+@table @code\n+@item ASM_STMT\n+\n+Used to represent an inline assembly statement.  For an inline assembly\n+statement like:\n+@example\n+asm (\"mov x, y\");\n+@end example\n+The @code{ASM_STRING} macro will return a @code{STRING_CST} node for\n+@code{\"mov x, y\"}.  If the original statement made use of G++'s\n+extended-assembly syntax, then @code{ASM_OUTPUTS},\n+@code{ASM_INPUTS}, and @code{ASM_CLOBBERS} will be the outputs, inputs,\n+and clobbers for the statement, represented as @code{STRING_CST} nodes.\n+The extended-assembly syntax looks like:\n+@example\n+asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n+@end example\n+The first string is the @code{ASM_STRING}, containing the instruction\n+template.  The next two strings are the output and inputs, respectively;\n+this statement has no clobbers.  As this example indicates, ``plain''\n+assembly statements are merely a special case of extended assembly\n+statements; they have no cv-qualifiers, outputs, inputs, or clobbers.\n+All of the strings will be @code{NUL}-terminated, and will contain no\n+embedded @code{NUL}-characters.\n+\n+If the assembly statement is declared @code{volatile}, or if the\n+statement was not an extended assembly statement, and is therefore\n+implicitly volatile, then the predicate @code{ASM_VOLATILE_P} will hold\n+of the @code{ASM_STMT}.\n+\n+@item BREAK_STMT\n+\n+Used to represent a @code{break} statement.  There are no additional\n+fields.\n+\n+@item CASE_LABEL\n+\n+Use to represent a @code{case} label, range of @code{case} labels, or a\n+@code{default} label.  If @code{CASE_LOW} is NULL_TREE, then this is a a\n+@code{default} label.  Otherwise, if @code{CASE_HIGH} is NULL_TREE, then\n+this is an ordinary @code{case} label.  In this case, @code{CASE_LOW} is\n+an expression giving the value of the label.  Both @code{CASE_LOW} and\n+@code{CASE_HIGH} are @code{INTEGER_CST} nodes.  These values will have\n+the same type as the condition expression in the switch statement.\n+\n+Otherwise, if both @code{CASE_LOW} and @code{CASE_HIGH} are defined, the\n+statement is a range of case labels.  Such statements originate with the\n+G++ extension that allows users to write things of the form:\n+@example\n+case 2 ... 5:\n+@end example\n+The first value will be @code{CASE_LOW}, while the second will be\n+@code{CASE_HIGH}.\n+\n+@item COMPOUND_STMT\n+\n+Used to represent a brace-enclosed block.  The first substatement is\n+given by @code{COMPOUND_BODY}.  Subsequent substatements are found by\n+following the @code{TREE_CHAIN} link from one substatement to the next.\n+\n+@item CONTINUE_STMT\n+\n+Used to represent a @code{continue} statement.  There are no additional\n+fields.\n+\n+@item DECL_STMT\n+\n+Used to represent a local declaration.  The @code{DECL_STMT_DECL} macro\n+can be used to obtain the entity declared.  This declaration may be a\n+@code{LABEL_DECL}, indicating that the label declared is a local label.\n+(As an extension, GCC allows the declaration of labels with scope.)\n+\n+@item DO_STMT\n+\n+Used to represent a @code{do} loop.  The body of the loop is given by\n+@code{DO_BODY} while the termination condition for the loop is given by\n+@code{DO_COND}.  The condition for a @code{do}-statement is always an\n+expression.\n+\n+@item EXPR_STMT\n+\n+Used to represent an expression statement.  Use @code{EXPR_STMT_EXPR} to\n+obtain the expression.\n+\n+@item FOR_STMT\n+\n+Used to represent a @code{for} statement.  The @code{FOR_INIT_STMT} is\n+the initialization statement for the loop.  The @code{FOR_COND} is the\n+termination condition.  The @code{FOR_EXPR} is the expression executed\n+right before the @code{FOR_COND} on each loop iteration; often, this\n+expression increments a counter.  The body of the loop is given by\n+@code{FOR_BODY}.  Note that @code{FOR_INIT_STMT} and @code{FOR_BODY}\n+return statements, while @code{FOR_COND} and @code{FOR_EXPR} return\n+expressions.\n+\n+@item GOTO_STMT\n+\n+Used to represent a @code{goto} statement.  The @code{GOTO_DESTINATION}\n+will usually be a @code{LABEL_DECL}.  However, if G++'s ``computed\n+goto'' extension has been used, the @code{GOTO_DESTINATION} will be an\n+arbitrary expression indicating the destination.  This expression will\n+always have pointer type.\n+\n+@item IF_STMT\n+\n+Used to represent an @code{if} statement.  The @code{IF_COND} is the\n+expression or statement used as the condition.  If the condition is a\n+statement, it will always be a @code{DECL_STMT}; the variable will then\n+be used as the condition.\n+\n+The @code{THEN_CLAUSE} represents the statement given by the @code{then}\n+condition, while the @code{ELSE_CLAUSE} represents the statement given\n+by the @code{else} condition.\n+\n+@item LABEL_STMT\n+\n+Used to represent a label.  The @code{LABEL_DECL} declared by this\n+statement can be obtained with the @code{LABEL_STMT_LABEL} macro.  The\n+@code{IDENTIFIER_NODE} giving the name of the label can be obtained from\n+the @code{LABEL_DECL} with @code{DECL_NAME}.\n+\n+@item RETURN_STMT\n+\n+Used to represent a @code{return} statement.  The @code{RETURN_EXPR} is\n+the expression returned; it will be @code{NULL_TREE} if the statement\n+was just\n+@example\n+return;\n+@end example\n+\n+@item SUBOBJECT\n+\n+In a constructor, these nodes are used to mark the point at which a\n+subobject of @code{this} is fully constructed.  If, after this point, an\n+exception is thrown before the constructor finishes executing, the\n+@code{SUBOBJECT_CLEANUP} must be executed.  The cleanups must be\n+executed in the reverse order in which they appear.\n+\n+@item SWITCH_STMT\n+\n+Used to represent a @code{switch} statement.  The @code{SWITCH_COND} is\n+the expression on which the switch is occurring.  (It may be either a\n+statement, or an expression.)  The @code{SWITCH_BODY} is the body of the\n+switch statement.\n+\n+@item TRY_BLOCK\n+Used to represent a @code{try} block.  The body of the try block is\n+given by @code{TRY_STMTS}.  Each of the catch blocks is a @code{HANDLER}\n+node.  The first handler is given by @code{TRY_HANDLERS}.  Subsequent\n+handlers are obtained by following the @code{TREE_CHAIN} link from one\n+handler to the next.  The parameters for each handler are given by\n+@code{HANDLER_PARMS}.  The body of the handler is given by\n+@code{HANDLER_BODY}.\n+\n+FIXME: Document the use of @code{HANDLER_PARMS}.\n+\n+If @code{CLEANUP_P} holds of the @code{TRY_BLOCK}, then the\n+@code{TRY_HANDLERS} will not be a @code{HANDLER} node.  Instead, it will\n+be an expression that should be executed if an exception is thrown in\n+the try block.  It must rethrow the exception after executing that code.\n+And, if an exception is thrown while the expression is executing,\n+@code{terminate} must be called.\n+\n+@item WHILE_STMT\n+\n+Used to represent a @code{while} loop.  The @code{WHILE_COND} is the\n+termination condition for the loop.  This condition may be either a\n+statement or an expression.  If the condition is a statement, it will\n+always be a @code{DECL_STMT}; see @code{IF_STMT} for more information.\n+\n+The @code{WHILE_BODY} is the body of the loop.\n+\n+@end table\n+\n+@c ---------------------------------------------------------------------\n+@c Expressions\n+@c ---------------------------------------------------------------------\n+\n+@node Expressions\n+@chapter Expressions\n+@cindex expression\n+@findex TREE_OPERAND\n+@tindex INTEGER_CST\n+@findex TREE_INT_CST_HIGH\n+@findex TREE_INT_CST_LOW\n+@findex tree_int_cst_lt\n+@findex tree_int_cst_equal\n+@tindex REAL_CST\n+@tindex STRING_CST\n+@findex TREE_STRING_LENGTH\n+@findex TREE_STRING_POINTER\n+@tindex PTRMEM_CST\n+@findex PTRMEM_CST_CLASS\n+@findex PTRMEM_CST_MEMBER\n+@tindex VAR_DECL\n+@tindex NEGATE_EXPR\n+@tindex BIT_NOT_EXPR\n+@tindex TRUTH_NOT_EXPR\n+@tindex ADDR_EXPR\n+@tindex INDIRECT_REF\n+@tindex FIX_TRUNC_EXPR\n+@tindex FLOAT_EXPR\n+@tindex NOP_EXPR\n+@tindex CONVERT_EXPR\n+@tindex THROW_EXPR\n+@tindex LSHIFT_EXPR\n+@tindex RSHIFT_EXPR\n+@tindex BIT_IOR_EXPR\n+@tindex BIT_XOR_EXPR\n+@tindex BIT_AND_EXPR\n+@tindex TRUTH_ANDIF_EXPR\n+@tindex TRUTH_ORIF_EXPR\n+@tindex TRUTH_AND_EXPR\n+@tindex TRUTH_OR_EXPR\n+@tindex TRUTH_XOR_EXPR\n+@tindex PLUS_EXPR\n+@tindex MINUS_EXPR\n+@tindex MULT_EXPR\n+@tindex TRUNC_DIV_EXPR\n+@tindex TRUNC_MOD_EXPR\n+@tindex RDIV_EXPR\n+@tindex LT_EXPR\n+@tindex LE_EXPR\n+@tindex GT_EXPR\n+@tindex GE_EXPR\n+@tindex EQ_EXPR\n+@tindex NE_EXPR\n+@tindex INIT_EXPR\n+@tindex MODIFY_EXPR\n+@tindex COMPONENT_REF\n+@tindex COMPOUND_EXPR\n+@tindex COND_EXPR\n+@tindex CALL_EXPR\n+@tindex CONSTRUCTOR\n+@tindex STMT_EXPR\n+@tindex ARRAY_REF\n+\n+The internal representation for expressions is for the most part quite\n+straightforward.  However, there are a few facts that one must bear in\n+mind.  In particular, the expression ``tree'' is actually a directed\n+acyclic graph.  (For example there may be many references to the integer\n+constant zero throughout the source program; many of these will be\n+represented by the same expression node.)  You should not rely on\n+certain kinds of node being shared, nor should rely on certain kinds of\n+nodes being unshared.\n+\n+The following macros can be used with all expression nodes:\n+@ftable @code\n+@item TREE_TYPE\n+Returns the type of the expression.  This value may not be precisely the\n+same type that would be given the expression in the original C++\n+program.\n+@end ftable\n+\n+In what follows, some nodes that one might expect to always have type\n+@code{bool} are documented to have either integral or boolean type.  At\n+some point in the future, the C front-end may also make use of this same\n+intermediate representation, and at this point these nodes will\n+certainly have integral type.  The previous sentence is not meant to\n+imply that the C++ front-end does not or will not give these nodes\n+integral type.\n+\n+Below, we list the various kinds of expression nodes.  Except where\n+noted otherwise, the operands to an expression are accessed using the\n+@code{TREE_OPERAND} macro.  For example, to access the first operand to\n+a binary plus expression @code{expr}, use:\n+@example\n+TREE_OPERAND (expr, 0)\n+@end example\n+@noindent\n+As this example indicates, the operands are zero-indexed.\n+\n+The table below begins with constants, moves on to unary expressions,\n+then proceeds to binary expressions, and concludes with various other\n+kinds of expressions:\n+@table @code\n+@item INTEGER_CST\n+These nodes represent integer constants.  Note that the type of these\n+constants is obtained with @code{TREE_TYPE}; they are not always of type\n+@code{int}.  In particular, @code{char} constants are represented with\n+@code{INTEGER_CST} nodes.  The value of the integer constant @code{e} is\n+given by @example\n+((TREE_INT_CST_HIGH (e) << HOST_BITS_PER_WIDE_INT) \n++ TREE_INST_CST_LOW (e))\n+@end example\n+@noindent\n+HOST_BITS_PER_WIDE_INT is at least thirty-two on all platforms.  Both\n+@code{TREE_INT_CST_HIGH} and @code{TREE_INT_CST_LOW} return a\n+@code{HOST_WIDE_INT}.  The value of an @code{INTEGER_CST} is interpreted\n+as a signed or unsigned quantity depending on the type of the constant.\n+In general, the expression given above will overflow, so it should not\n+be used to calculate the value of the constant.\n+\n+The variable @code{integer_zero_node} is a integer constant with value\n+zero.  Similarly, @code{integer_one_node} is an integer constant with\n+value one.  The @code{size_zero_node} and @code{size_one_node} variables\n+are analogous, but have type @code{size_t} rather than @code{int}.\n+\n+The function @code{tree_int_cst_lt} is a predicate which holds if its\n+first argument is less than its second.  Both constants are assumed to\n+have the same signedness (i.e., either both should be signed or both\n+should be unsigned.)  The full width of the constant is used when doing\n+the comparison; the usual rules about promotions and conversions are\n+ignored.  Similarly, @code{tree_int_cst_equal} holds if the two\n+constants are equal.  The @code{tree_int_cst_sgn} function returns the\n+sign of a constant.  The value is @code{1}, @code{0}, or @code{-1}\n+according on whether the constant is greater than, equal to, or less\n+than zero.  Again, the signedness of the constant's type is taken into\n+account; an unsigned constant is never less than zero, no matter what\n+its bit-pattern.\n+\n+@item REAL_CST\n+\n+FIXME: Talk about how to obtain representations of this constant, do\n+comparisons, and so forth.\n+\n+@item STRING_CST\n+These nodes represent string-constants.  The @code{TREE_STRING_LENGTH}\n+returns the length of the string, as an @code{int}.  The\n+@code{TREE_STRING_POINTER} is a @code{char*} containing the string\n+itself.  The string may not be @code{NUL}-terminated, and it may contain\n+embedded @code{NUL} characters.  Therefore, the\n+@code{TREE_STRING_LENGTH} includes the trailing @code{NUL} if it is\n+present.\n+\n+FIXME: How are wide strings represented?\n+\n+@item PTRMEM_CST\n+These nodes are used to represent pointer-to-member constants.  The\n+@code{PTRMEM_CST_CLASS} is the class type (either a @code{RECORD_TYPE}\n+or @code{UNION_TYPE} within which the pointer points), and the\n+@code{PTRMEM_CST_MEMBER} is the declaration for the pointed to object.\n+Note that the @code{DECL_CONTEXT} for the @code{PTRMEM_CST_MEMBER} is in\n+general different from from the @code{PTRMEM_CST_CLASS}.  For example,\n+given:\n+@example\n+struct B @{ int i; @};\n+struct D : public B @{@};\n+int D::*dp = &D::i;\n+@end example\n+@noindent\n+The @code{PTRMEM_CST_CLASS} for @code{&D::I} is @code{D}, even though\n+the @code{DECL_CONTEXT} for the @code{PTRMEM_CST_MEMBER} is @code{B},\n+since @code{B::I} is a member of @code{B}, not @code{D}.\n+\n+@item VAR_DECL\n+\n+These nodes represent variables, including static data members.  For\n+more information, @pxref{Declarations}.\n+\n+@item NEGATE_EXPR\n+These nodes represent unary negation of the single operand, for both\n+integer and floating-point types.  The type of negation can be\n+determined by looking at the type of the expression.\n+\n+@item BIT_NOT_EXPR\n+These nodes represent bitwise complement, and will always have integral\n+type.  The only operand is the value to be complemented.\n+\n+@item TRUTH_NOT_EXPR\n+These nodes represent logical negation, and will always have integral\n+(or boolean) type.  The operand is the value being negated.\n+\n+@item PREDECREMENT_EXPR\n+@itemx PREINCREMENT_EXPR\n+@itemx POSTDECREMENT_EXPR\n+@itemx POSTINCREMENT_EXPR\n+These nodes represent increment and decrement expressions.  The value of\n+the single operand is computed, and the operand incremented or\n+decremented.  In the case of @code{PREDECREMENT_EXPR} and\n+@code{PREINCREMENT_EXPR}, the value of the expression is the value\n+resulting after the increment or decrement; in the case of\n+@code{POSTDECREMENT_EXPR} and @code{POSTINCREMENT_EXPR} is the value\n+before the increment or decrement occurs.  The type of the operand, like\n+that of the result, will be either integral, boolean, or floating-point.\n+\n+@item ADDR_EXPR\n+These nodes are used to represent the address of an object.  (These\n+expression will always have pointer or reference type.)  The operand may\n+be another expression, or it may be a declaration.\n+\n+As an extension, G++ allows users to take the address of a label.  In\n+this case, the operand of the @code{ADDR_EXPR} will be a\n+@code{LABEL_DECL}.  The type of such an expression is @code{void*}.\n+\n+@item INDIRECT_REF \n+These nodes are used to represent the object pointed to by a pointer.\n+The operand is the pointer being dereferenced; it will always have\n+pointer or reference type.\n+\n+@item FIX_TRUNC_EXPR\n+These nodes represent conversion of a floating-point value to an\n+integer.  The single operand will have a floating-point type, while the\n+the complete expression will have an integral (or boolean) type.  The\n+operand is rounded towards zero.\n+\n+@item FLOAT_EXPR\n+These nodes represent conversion of an integral (or boolean) value to a\n+floating-point value.  The single operand will have integral type, while\n+the complete expression will have a floating-point type.  \n+\n+FIXME: How is the operand supposed to be rounded?  Is this dependent on\n+-mieee?\n+\n+@item NON_LVALUE_EXPR\n+These nodes indicate that their one and only operand is not an lvalue.\n+A back-end can treat these identically to the single operand.\n+\n+@item NOP_EXPR\n+These nodes are used to represent conversions that do not require any\n+code-generation.  For example, conversion of a @code{char*} to an\n+@code{int*} does not require any code be generated; such a conversion is\n+represented by a @code{NOP_EXPR}.  The single operand is the expression\n+to be converted.  The conversion from a pointer to a reference is also\n+represented with a @code{NOP_EXPR}.\n+\n+@item CONVERT_EXPR\n+These nodes are similar to @code{NOP_EXPR}s, but are used in those\n+situations where code may need to be generated.  For example, if an\n+@code{int*} is converted to an @code{int} code may need to be generated\n+on some platforms.  These nodes are never used for C++-specific\n+conversions, like conversions between pointers to different classes in\n+an inheritance hierarchy.  Any adjustments that need to be made in such\n+cases are always indicated explicitly.  Similarly, a user-defined\n+conversion is never represented by a @code{CONVERT_EXPR}; instead, the\n+function calls are made explicit.\n+\n+@item THROW_EXPR\n+These nodes represent @code{throw} expressions.  The single operand is\n+the expression to be thrown.  If the throw expression is of the form \n+@example\n+throw;\n+@end example\n+then the operand is @code{NULL_TREE}.\n+\n+@item LSHIFT_EXPR\n+@itemx RSHIFT_EXPR\n+These nodes represent left and right shifts, respectively.  The first\n+operand is the value to shift; it will always be of integral type.  The\n+second operand is an expression for the number of bits by which to\n+shift.  Right shift should be treated as arithmetic, i.e., the\n+high-order bits should be zero-filled when the expression has unsigned\n+type and filled with the sign bit when the expression has signed type.\n+\n+@item BIT_IOR_EXPR\n+@itemx BIT_XOR_EXPR\n+@itemx BIT_AND_EXPR\n+These nodes represent bitwise inclusive or, bitwise exclusive or, and\n+bitwise and, respectively.  Both operands will always have integral\n+type.\n+\n+@item TRUTH_ANDIF_EXPR\n+@itemx TRUTH_ORIF_EXPR\n+These nodes represent logical and and logical or, respectively.  These\n+operators are not strict; i.e., the second operand is evaluated only if\n+the value of the expression is not determined by evaluation of the first\n+operand.  The type of the operands, and the result type, is always of\n+boolean or integral type.\n+\n+@item TRUTH_AND_EXPR\n+@itemx TRUTH_OR_EXPR\n+@itemx TRUTH_XOR_EXPR\n+These nodes represent logical and, logical or, and logical exclusive or.\n+They are strict; both arguments are always evaluated.  There are no\n+corresponding operators in C++, but the front-end will sometimes\n+generate these expressions anyhow, if it can tell that strictness does\n+not matter.\n+\n+@itemx PLUS_EXPR\n+@itemx MINUS_EXPR\n+@itemx MULT_EXPR\n+@itemx TRUNC_DIV_EXPR\n+@itemx TRUNC_MOD_EXPR\n+@itemx RDIV_EXPR\n+These nodes represent various binary arithmetic operations.\n+Respectively, these operations are addition, subtraction (of the second\n+operand from the first), multiplication, integer division, integer\n+remainder, and floating-point division.  The operands to the first three\n+of these may have either integral or floating type, but there will never\n+be case in which one operand is of floating type and the other is of\n+integral type.\n+\n+The result of a @code{TRUNC_DIV_EXPR} is always rounded towards zero.\n+The @code{TRUNC_MOD_EXPR} of two operands @code{a} and @code{b} is\n+always @code{a - a/b} where the division is as if computed by a\n+@code{TRUNC_DIV_EXPR}.\n+\n+@item ARRAY_REF\n+These nodes represent array accesses.  The first operand is the array;\n+the second is the index.  To calculate the address of the memory\n+accessed, you must scale the index by the size of the type of the array\n+elements.\n+\n+@item EXACT_DIV_EXPR\n+Document.\n+\n+@item LT_EXPR\n+@itemx LE_EXPR\n+@itemx GT_EXPR\n+@itemx GE_EXPR\n+@itemx EQ_EXPR\n+@itemx NE_EXPR\n+\n+These nodes represent the less than, less than or equal to, greater\n+than, greater than or equal to, equal, and not equal comparison\n+operators.  The first and second operand with either be both of integral\n+type or both of floating type.  The result type of these expressions\n+will always be of integral or boolean type.\n+\n+@item MODIFY_EXPR\n+These nodes represent assignment.  The left-hand side is the first\n+operand; the right-hand side is the second operand.  The left-hand side\n+will be a @code{VAR_DECL}, @code{INDIRECT_REF}, @code{COMPONENT_REF}, or\n+other lvalue.\n+\n+These nodes are used to represent not only assignment with @samp{=} but\n+also compount assignments (like @samp{+=}), by reduction to @samp{=}\n+assignment.  In other words, the representation for @samp{i += 3} looks\n+just like that for @samp{i = i + 3}.\n+\n+@item INIT_EXPR\n+These nodes are just like @code{MODIFY_EXPR}, but are used only when a\n+variable is initialized, rather than assigned to subsequently.\n+\n+@item COMPONENT_REF\n+These nodes represent non-static data member accesses.  The first\n+operand is the object (rather than a pointer to it); the second operand\n+is the @code{FIELD_DECL} for the data member.\n+\n+@item COMPOUND_EXPR\n+These nodes represent C or C++ comma-expressions.  The first operand is\n+an expression whose value is computed and thrown away prior to the\n+evaluation of the second operand.  The value of the entire expression is\n+the value of the second operand.\n+\n+@item COND_EXPR\n+These nodes represent C or C++ @code{?:} expressions.  The first operand\n+is of boolean or integral type.  If it evaluates to a non-zero value,\n+the second operand should be evaluated, and returned as the value of the\n+expression.  Otherwise, the third operand is evaluated, and returned as\n+the value of the expression.  As a GNU extension, the middle operand of\n+the @code{?:} operator may be omitted in the source, like this:\n+@example\n+x ? : 3\n+@end example\n+@noindent\n+which is equivalent to \n+@example\n+x ? x : 3\n+@end example\n+assuming that @code{x} is an expression without side-effects.  However,\n+in the case that the first operation causes side effects, the\n+side-effects occur only once.  Consumers of the internal representation\n+do not need to worry about this oddity; the second operand will be\n+always be present in the internal representation.\n+\n+@item CALL_EXPR\n+These nodes are used to represent calls to functions, including\n+non-static member functions.  The first operand is a pointer to the\n+function to call; it is always an expresion whose type is a\n+@code{POINTER_TYPE}.  The second argument is a @code{TREE_LIST}.  The\n+arguments to the call appear left-to-right in the list.  The\n+@code{TREE_VALUE} of each list node contains the expression\n+corresponding to that argument.  (The value of @code{TREE_PURPOSE} for\n+these nodes is unspecified, and should be ignored.)  For non-static\n+member functions, there will be an operand corresponding to the\n+@code{this} pointer.  There will always be expressions corresponding to\n+all of the arguments, even if the function is declared with default\n+arguments and some arguments are not explicitly provided at the call\n+sites.\n+\n+@item STMT_EXPR\n+These nodes are used to represent G++'s statement-expression extension.\n+The statement-expression extension allows code like this:\n+@example\n+int f() { return ({ int j; j = 3; j + 7; }); }\n+@end example\n+In other words, an sequence of statements may occur where a single\n+expression would normally appear.  The @code{STMT_EXPR} node represents\n+such an expression.  The @code{STMT_EXPR_STMT} gives the statement\n+contained in the expression; this is always a @code{COMPOUND_STMT}.  The\n+value of the expression is the value of the last sub-statement in the\n+@code{COMPOUND_STMT}.\n+\n+@item CONSTRUCTOR\n+These nodes represent the brace-enclosed initializers for a structure or\n+array.  The first operand is reserved for use by the back-end.  The\n+second operand is a @code{TREE_LIST}.  If the @code{TREE_TYPE} of the\n+@code{CONSTRUCTOR} is a @code{RECORD_TYPE} or @code{UNION_TYPE}, then\n+the @code{TREE_PURPOSE} of each node in the @code{TREE_LIST} will be a\n+@code{FIELD_DECL} and the @code{TREE_VALUE} of each node will be the\n+expression used to initialize that field.  You should not depend on the\n+fields appearing in any particular order, nor should you assume that all\n+fields will be represented.  Unrepresented fields may be assigned any\n+value.\n+\n+If the @code{TREE_TYPE} of the @code{CONSTRUCTOR} is an\n+@code{ARRAY_TYPE}, then the @code{TREE_PURPOSE} of each element in the\n+@code{TREE_LIST} will be an @code{INTEGER_CST}.  This constant indicates\n+which element of the array (indexed from zero) is being assigned to;\n+again, the @code{TREE_VALUE} is the corresponding initializer.  If the\n+@code{TREE_PURPOSE} is @code{NULL_TREE}, then the initializer is for the\n+next available array element.\n+\n+Conceptually, before any initialization is done, the entire area of\n+storage is intialized to zero.\n+\n+@item SAVE_EXPR\n+\n+FIXME: Describe.\n+\n+@item TARGET_EXPR\n+A @code{TARGET_EXPR} represents a temporary object.  The first operand\n+is a @code{VAR_DECL} for the temporary variable.  The second operand is\n+the initializer for the temporary.  The initializer is evaluated, and\n+copied (bitwise) into the temporary.\n+\n+FIXME: Discuss cleanups for the variable.\n+FIXME: Discuss the situation where the value is actually written into a\n+different variable.\n+\n+@item AGGR_INIT_EXPR\n+An @code{AGGR_INIT_EXPR} represents the initialization as the return\n+value of a function call, or as the result of a constructor.  An\n+@code{AGGR_INIT_EXPR} will only appear as the second operand of a\n+@code{TARGET_EXPR}.  The first operand to the @code{AGGR_INIT_EXPR} is\n+the address of a function to call, just as in a @code{CALL_EXPR}.  The\n+second operand are the arguments to pass that function, as a\n+@code{TREE_LIST}, again in a manner similar to that of a\n+@code{CALL_EXPR}.  The value of the expression is that returned by the\n+function.\n+\n+If @code{AGGR_INIT_VIA_CTOR_P} holds of the @code{AGGR_INIT_EXPR}, then\n+the intialization is via a constructor call.  The address of the third\n+operand of the @code{AGGR_INIT_EXPR}, which is always a @code{VAR_DECL},\n+is taken, and this value replaces the first argument in the argument\n+list.  In this case, the value of the expression is the @code{VAR_DECL}\n+given by the third operand to the @code{AGGR_INIT_EXPR}; constructors do\n+not return a value.\n+\n+@end table\n+\n+@c ---------------------------------------------------------------------\n+@c Node Index\n+@c ---------------------------------------------------------------------\n+\n+@node Node Index\n+@unnumbered Node Index\n+\n+@printindex tp\n+\n+@c ---------------------------------------------------------------------\n+@c Function Index\n+@c ---------------------------------------------------------------------\n+\n+@node Function Index\n+@unnumbered Function Index\n+\n+@printindex fn\n+\n+@c ---------------------------------------------------------------------\n+@c Concept Index\n+@c ---------------------------------------------------------------------\n+\n+@node Concept Index\n+@unnumbered Concept Index\n+\n+@printindex cp\n+\n+@c ---------------------------------------------------------------------\n+@c Epilogue\n+@c ---------------------------------------------------------------------\n+\n+@summarycontents\n+@contents\n+@contents\n+@bye"}, {"sha": "374dc022534f77a9e10dcc2a450af3a16c4f1488", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d7090eeb4503fa6123cf1089a560b6379bff56/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=47d7090eeb4503fa6123cf1089a560b6379bff56", "patch": "@@ -2194,7 +2194,7 @@ tree\n expand_stmt (t)\n      tree t;\n {\n-  tree rval;\n+  tree rval = NULL_TREE;\n \n   while (t && t != error_mark_node)\n     {"}]}