{"sha": "3a7c155d2e36bda69cb68c2f6f5105e256878506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3YzE1NWQyZTM2YmRhNjljYjY4YzJmNmY1MTA1ZTI1Njg3ODUwNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-14T23:35:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-14T23:35:03Z"}, "message": "global.c, [...]: Fix comment typos.\n\n\t* global.c, tree-ssa-copy.c, tree-ssa-loop-ivopts.c,\n\tvalue-prof.c: Fix comment typos.\n\nFrom-SVN: r90638", "tree": {"sha": "8a48c8fe1483a04f942006f3b721d484ad02e186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a48c8fe1483a04f942006f3b721d484ad02e186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a7c155d2e36bda69cb68c2f6f5105e256878506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7c155d2e36bda69cb68c2f6f5105e256878506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7c155d2e36bda69cb68c2f6f5105e256878506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7c155d2e36bda69cb68c2f6f5105e256878506/comments", "author": null, "committer": null, "parents": [{"sha": "efcc66f02cd0b34ee0e2a08312d7ab8e0405a556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc66f02cd0b34ee0e2a08312d7ab8e0405a556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc66f02cd0b34ee0e2a08312d7ab8e0405a556"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "e9333a322cc612aeb1229c970b9bb51e95f72b13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a7c155d2e36bda69cb68c2f6f5105e256878506", "patch": "@@ -1,6 +1,7 @@\n 2004-11-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n-\t* cfgrtl.c: Fix a comment typo.\n+\t* cfgrtl.c, global.c, tree-ssa-copy.c, tree-ssa-loop-ivopts.c,\n+\tvalue-prof.c: Fix comment typos.\n \n 2004-11-14  Stan Shebs  <shebs@apple.com>\n "}, {"sha": "80caac970375b107dadf901cca1f473fea773468", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=3a7c155d2e36bda69cb68c2f6f5105e256878506", "patch": "@@ -695,7 +695,7 @@ global_conflicts (void)\n \t since one hard reg can be used with various sizes.\n \t Therefore, we must require that all the hard regs\n \t implicitly live as part of a multi-word hard reg\n-\t are explicitly marked in basic_block_live_at_start.  */\n+\t be explicitly marked in basic_block_live_at_start.  */\n \n       {\n \tregset old = b->global_live_at_start;"}, {"sha": "ff497a8ae0a43763a0a982af6bcbb9d4d7aca383", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=3a7c155d2e36bda69cb68c2f6f5105e256878506", "patch": "@@ -44,7 +44,7 @@ Boston, MA 02111-1307, USA.  */\n    annotations up-to-date.\n \n    We require that for any copy operation where the RHS and LHS have\n-   a non-null memory tag that the memory tag be the same.   It is OK\n+   a non-null memory tag the memory tag be the same.   It is OK\n    for one or both of the memory tags to be NULL.\n \n    We also require tracking if a variable is dereferenced in a load or"}, {"sha": "833cbf87296f43c169c3f2b20aaf03c04967ec32", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3a7c155d2e36bda69cb68c2f6f5105e256878506", "patch": "@@ -1305,7 +1305,7 @@ idx_find_step (tree base, tree *idx, void *data)\n     return false;\n \n   /* If base is a component ref, require that the offset of the reference\n-     is invariant.  */\n+     be invariant.  */\n   if (TREE_CODE (base) == COMPONENT_REF)\n     {\n       off = component_ref_field_offset (base);"}, {"sha": "1663e64800d83b0455d8e054aaeeadcbcd0b401e", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7c155d2e36bda69cb68c2f6f5105e256878506/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=3a7c155d2e36bda69cb68c2f6f5105e256878506", "patch": "@@ -595,7 +595,7 @@ divmod_fixed_value_transform (rtx insn)\n   histogram = XEXP (histogram, 1);\n   all = INTVAL (XEXP (histogram, 0));\n \n-  /* We require that count is at least half of all; this means\n+  /* We require that count be at least half of all; this means\n      that for the transformation to fire the value must be constant\n      at least 50% of time (and 75% gives the guarantee of usage).  */\n   if (!rtx_equal_p (op2, value) || 2 * count < all)\n@@ -969,7 +969,7 @@ speculative_prefetching_transform (rtx insn)\n   if (all < 4)\n     return false;\n \n-  /* We require that count is at least half of all; this means\n+  /* We require that count be at least half of all; this means\n      that for the transformation to fire the value must be constant\n      at least 50% of time (and 75% gives the guarantee of usage).  */\n   if (!rtx_equal_p (address, value) || 2 * count < all)"}]}