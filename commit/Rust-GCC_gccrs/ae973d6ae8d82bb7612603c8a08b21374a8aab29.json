{"sha": "ae973d6ae8d82bb7612603c8a08b21374a8aab29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5NzNkNmFlOGQ4MmJiNzYxMjYwM2M4YTA4YjIxMzc0YThhYWIyOQ==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-06-15T08:40:35Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-06-15T08:40:35Z"}, "message": "re PR libfortran/21950 (All gfortran execution tests fail on Tru64 UNIX V4.0F: scalbn unresolved)\n\n\tPR libfortran/21950\n\t* intrinsics/c99_functions.c (scalbn): Provide fallback\n\timplementation for scalbn.\n\t* c99_protos.h: Prototype for scalbn.\n\t* configure.ac: Add check for scalbn.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r100974", "tree": {"sha": "d38b91436842cc4c2a0381e5ce0996da9a41ebf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38b91436842cc4c2a0381e5ce0996da9a41ebf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae973d6ae8d82bb7612603c8a08b21374a8aab29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae973d6ae8d82bb7612603c8a08b21374a8aab29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae973d6ae8d82bb7612603c8a08b21374a8aab29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae973d6ae8d82bb7612603c8a08b21374a8aab29/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4eacf9907eb2298d8552e02910723518203bca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4eacf9907eb2298d8552e02910723518203bca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4eacf9907eb2298d8552e02910723518203bca0"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "64197060beeaf5f75afce62ebd3f7d41265e7d57", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -1,3 +1,13 @@\n+2005-06-15  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/21950\n+\t* intrinsics/c99_functions.c (scalbn): Provide fallback\n+\timplementation for scalbn.\n+\t* c99_protos.h: Prototype for scalbn.\n+\t* configure.ac: Add check for scalbn.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2005-06-14  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* intrinsics/eoshift0.c:  Removed prototype for eoshift0.\n@@ -47,10 +57,10 @@\n \tFor complex, call internal_pack_c4 if size==8 and\n \tinternal_pack_c8 if size==16.\n \t* runtime/in_unpack_generic.c: For real, integer and logical\n-        call internal_unpack_4 if size==4 and internal_unpack_8 if\n-        size==8.\n-        For complex, call internal_unpack_c4 if size==8 and\n-        internal_unpack_c8 if size==16.\n+\tcall internal_unpack_4 if size==4 and internal_unpack_8 if\n+\tsize==8.\n+\tFor complex, call internal_unpack_c4 if size==8 and\n+\tinternal_unpack_c8 if size==16.\n \t* generated/in_pack_i4.c:  Regenerated.\n \t* generated/in_pack_i8.c:  Regenerated.\n \t* generated/in_unpack_i4.c:  Regenerated."}, {"sha": "4deb25ceed13f2bc0fd9ed2445a27a58cee5595c", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -89,6 +89,10 @@ extern float logf(float);\n extern float log10f(float);\n #endif\n \n+#ifndef HAVE_SCALBN\n+extern double scalbn(double, int);\n+#endif\n+\n #ifndef HAVE_SCALBNF\n extern float scalbnf(float, int);\n #endif"}, {"sha": "aaf663ecd332f49888c4b0c978f78ac3903d503d", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -168,6 +168,9 @@\n /* libm includes roundf */\n #undef HAVE_ROUNDF\n \n+/* libm includes scalbn */\n+#undef HAVE_SCALBN\n+\n /* libm includes scalbnf */\n #undef HAVE_SCALBNF\n "}, {"sha": "aaaf9f67ea541d8d216ad617093d91ce45cf2e66", "filename": "libgfortran/configure", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -9401,6 +9401,83 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for scalbn in -lm\" >&5\n+echo $ECHO_N \"checking for scalbn in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_scalbn+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char scalbn ();\n+int\n+main ()\n+{\n+scalbn ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_scalbn=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_scalbn=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_scalbn\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_scalbn\" >&6\n+if test $ac_cv_lib_m_scalbn = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_SCALBN 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for sinf in -lm\" >&5\n echo $ECHO_N \"checking for sinf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_sinf+set}\" = set; then"}, {"sha": "c4c70fbc85ccd344688a9b36492e501c7d7cad35", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -201,6 +201,7 @@ AC_CHECK_LIB([m],[powf],[AC_DEFINE([HAVE_POWF],[1],[libm includes powf])])\n AC_CHECK_LIB([m],[round],[AC_DEFINE([HAVE_ROUND],[1],[libm includes round])])\n AC_CHECK_LIB([m],[roundf],[AC_DEFINE([HAVE_ROUNDF],[1],[libm includes roundf])])\n AC_CHECK_LIB([m],[scalbnf],[AC_DEFINE([HAVE_SCALBNF],[1],[libm includes scalbnf])])\n+AC_CHECK_LIB([m],[scalbn],[AC_DEFINE([HAVE_SCALBN],[1],[libm includes scalbn])])\n AC_CHECK_LIB([m],[sinf],[AC_DEFINE([HAVE_SINF],[1],[libm includes sinf])])\n AC_CHECK_LIB([m],[sinhf],[AC_DEFINE([HAVE_SINHF],[1],[libm includes sinhf])])\n AC_CHECK_LIB([m],[sqrtf],[AC_DEFINE([HAVE_SQRTF],[1],[libm includes sqrtf])])"}, {"sha": "dfdb71e74272a34899b4812a05232337894ba9dc", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae973d6ae8d82bb7612603c8a08b21374a8aab29/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=ae973d6ae8d82bb7612603c8a08b21374a8aab29", "patch": "@@ -154,6 +154,14 @@ log10f(float x)\n }\n #endif\n \n+#ifndef HAVE_SCALBN\n+double\n+scalbn(double x, int y)\n+{\n+  return x * pow(FLT_RADIX, y);\n+}\n+#endif\n+\n #ifndef HAVE_SCALBNF\n float\n scalbnf(float x, int y)"}]}